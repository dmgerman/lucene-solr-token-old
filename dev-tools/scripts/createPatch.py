begin_unit
comment|'# Licensed to the Apache Software Foundation (ASF) under one or more'
nl|'\n'
comment|'# contributor license agreements.  See the NOTICE file distributed with'
nl|'\n'
comment|'# this work for additional information regarding copyright ownership.'
nl|'\n'
comment|'# The ASF licenses this file to You under the Apache License, Version 2.0'
nl|'\n'
comment|'# (the "License"); you may not use this file except in compliance with'
nl|'\n'
comment|'# the License.  You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#     http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
string|'\'\'\'\nCreates a unified diff, applyable by the patch tool, between two source checkouts.\n\nNote that .gitignore or svn:ignore rules are used to filter out files that would normally\nnot be checked in.\n\nWhile you could use this to make a committable patch from a branch,\nthat approach loses the svn history from the branch (better to use\n"svn merge --reintegrate", for example).  This diff output should\nnot be considered "authoritative" from a merging standpoint as it\ndoes not reflect what svn will do on merge.\n\'\'\''
newline|'\n'
nl|'\n'
name|'from'
name|'argparse'
name|'import'
name|'ArgumentParser'
op|','
name|'RawTextHelpFormatter'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'subprocess'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
nl|'\n'
DECL|function|make_filter_func
name|'def'
name|'make_filter_func'
op|'('
name|'src_root'
op|','
name|'src_dir'
op|')'
op|':'
newline|'\n'
indent|'  '
name|'git_root'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'src_root'
op|','
string|"'.git'"
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'git_root'
op|')'
op|':'
newline|'\n'
DECL|function|git_filter
indent|'    '
name|'def'
name|'git_filter'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'rc'
op|'='
name|'subprocess'
op|'.'
name|'call'
op|'('
string|"'git --git-dir=%s check-ignore %s'"
op|'%'
op|'('
name|'git_root'
op|','
name|'filename'
op|')'
op|','
name|'shell'
op|'='
name|'True'
op|','
name|'stdout'
op|'='
name|'subprocess'
op|'.'
name|'DEVNULL'
op|')'
newline|'\n'
name|'return'
name|'rc'
op|'=='
number|'0'
newline|'\n'
dedent|''
name|'return'
name|'git_filter'
newline|'\n'
nl|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|function|svn_filter
indent|'    '
name|'def'
name|'svn_filter'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
comment|"# we can't find if svn will ignore a file unless it exists..."
nl|'\n'
indent|'      '
name|'created'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'head'
op|','
name|'tail'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'split'
op|'('
name|'filename'
op|')'
newline|'\n'
comment|'# find a parent directory that already exists, so we'
nl|'\n'
comment|'# can see if that is ignored by svn'
nl|'\n'
name|'while'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'head'
op|')'
op|':'
newline|'\n'
indent|'          '
name|'filename'
op|'='
name|'head'
newline|'\n'
name|'head'
op|','
name|'tail'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'split'
op|'('
name|'filename'
op|')'
newline|'\n'
dedent|''
name|'created'
op|'='
name|'True'
newline|'\n'
name|'subprocess'
op|'.'
name|'check_call'
op|'('
string|"'touch %s'"
op|'%'
name|'filename'
op|','
name|'shell'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'output'
op|'='
name|'subprocess'
op|'.'
name|'check_output'
op|'('
string|"'svn status %s'"
op|'%'
name|'filename'
op|','
nl|'\n'
name|'shell'
op|'='
name|'True'
op|','
name|'stderr'
op|'='
name|'subprocess'
op|'.'
name|'STDOUT'
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'return'
name|'output'
op|'.'
name|'startswith'
op|'('
string|"b'I'"
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'created'
name|'and'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'          '
name|'os'
op|'.'
name|'remove'
op|'('
name|'filename'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'svn_filter'
newline|'\n'
nl|'\n'
DECL|function|print_filtered_output
dedent|''
dedent|''
name|'def'
name|'print_filtered_output'
op|'('
name|'output'
op|','
name|'should_filter'
op|')'
op|':'
newline|'\n'
indent|'  '
name|'filtering'
op|'='
name|'False'
newline|'\n'
name|'line'
op|'='
name|'output'
op|'.'
name|'readline'
op|'('
op|')'
newline|'\n'
name|'while'
name|'line'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
name|'if'
name|'line'
op|'.'
name|'startswith'
op|'('
string|"b'diff '"
op|')'
op|':'
newline|'\n'
indent|'      '
name|'fromfile'
op|','
name|'tofile'
op|'='
name|'line'
op|'.'
name|'decode'
op|'('
string|"'utf-8'"
op|')'
op|'.'
name|'split'
op|'('
op|')'
op|'['
op|'-'
number|'2'
op|':'
op|']'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'fromfile'
op|')'
name|'or'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'tofile'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'filtering'
op|'='
name|'should_filter'
op|'('
name|'fromfile'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# If both files do not exist, then the filename must contain spaces,'
nl|'\n'
comment|'# which breaks our split logic.  In this case, just ignore, since'
nl|'\n'
comment|'# patch cannot handle filenames with spaces anyways.'
nl|'\n'
indent|'        '
name|'filtering'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'line'
op|'.'
name|'startswith'
op|'('
string|"b'Binary files'"
op|')'
op|':'
newline|'\n'
indent|'      '
name|'filtering'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'filtering'
op|':'
newline|'\n'
indent|'      '
name|'print'
op|'('
name|'line'
op|'.'
name|'decode'
op|'('
string|"'utf-8'"
op|')'
op|','
name|'end'
op|'='
string|"''"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'line'
op|'='
name|'output'
op|'.'
name|'readline'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|run_diff
dedent|''
dedent|''
name|'def'
name|'run_diff'
op|'('
name|'from_dir'
op|','
name|'to_dir'
op|','
name|'skip_whitespace'
op|')'
op|':'
newline|'\n'
indent|'  '
name|'flags'
op|'='
string|"'-ruN'"
newline|'\n'
name|'if'
name|'skip_whitespace'
op|':'
newline|'\n'
indent|'    '
name|'flags'
op|'+='
string|"'bBw'"
newline|'\n'
nl|'\n'
dedent|''
name|'args'
op|'='
op|'['
string|"'diff'"
op|','
name|'flags'
op|']'
newline|'\n'
name|'for'
name|'ignore'
name|'in'
op|'('
string|"'.svn'"
op|','
string|"'.git'"
op|','
string|"'build'"
op|','
string|"'dist'"
op|','
string|"'.caches'"
op|','
string|"'.idea'"
op|','
string|"'idea-build'"
op|','
string|"'eclipse-build'"
op|','
string|"'.settings'"
op|')'
op|':'
newline|'\n'
indent|'    '
name|'args'
op|'.'
name|'append'
op|'('
string|"'-x'"
op|')'
newline|'\n'
name|'args'
op|'.'
name|'append'
op|'('
name|'ignore'
op|')'
newline|'\n'
dedent|''
name|'args'
op|'.'
name|'append'
op|'('
name|'from_dir'
op|')'
newline|'\n'
name|'args'
op|'.'
name|'append'
op|'('
name|'to_dir'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'subprocess'
op|'.'
name|'Popen'
op|'('
name|'args'
op|','
name|'shell'
op|'='
name|'False'
op|','
name|'stdout'
op|'='
name|'subprocess'
op|'.'
name|'PIPE'
op|')'
newline|'\n'
nl|'\n'
DECL|function|find_root
dedent|''
name|'def'
name|'find_root'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'  '
name|'relative'
op|'='
op|'['
op|']'
newline|'\n'
name|'while'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'path'
op|','
string|"'lucene'"
op|','
string|"'CHANGES.txt'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'path'
op|','
name|'base'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'split'
op|'('
name|'path'
op|')'
newline|'\n'
name|'relative'
op|'.'
name|'insert'
op|'('
number|'0'
op|','
name|'base'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'path'
op|','
string|"''"
name|'if'
name|'not'
name|'relative'
name|'else'
name|'os'
op|'.'
name|'path'
op|'.'
name|'normpath'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
op|'*'
name|'relative'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|parse_config
dedent|''
name|'def'
name|'parse_config'
op|'('
op|')'
op|':'
newline|'\n'
indent|'  '
name|'parser'
op|'='
name|'ArgumentParser'
op|'('
name|'description'
op|'='
name|'__doc__'
op|','
name|'formatter_class'
op|'='
name|'RawTextHelpFormatter'
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_argument'
op|'('
string|"'--skip-whitespace'"
op|','
name|'action'
op|'='
string|"'store_true'"
op|','
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
name|'help'
op|'='
string|"'Ignore whitespace differences'"
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_argument'
op|'('
string|"'from_dir'"
op|','
name|'help'
op|'='
string|"'Source directory to diff from'"
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_argument'
op|'('
string|"'to_dir'"
op|','
name|'help'
op|'='
string|"'Source directory to diff to'"
op|')'
newline|'\n'
name|'c'
op|'='
name|'parser'
op|'.'
name|'parse_args'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'c'
op|'.'
name|'from_dir'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'parser'
op|'.'
name|'error'
op|'('
string|"'\\'from\\' path %s is not a valid directory'"
op|'%'
name|'c'
op|'.'
name|'from_dir'
op|')'
newline|'\n'
dedent|''
op|'('
name|'c'
op|'.'
name|'from_root'
op|','
name|'from_relative'
op|')'
op|'='
name|'find_root'
op|'('
name|'c'
op|'.'
name|'from_dir'
op|')'
newline|'\n'
name|'if'
name|'c'
op|'.'
name|'from_root'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'    '
name|'parser'
op|'.'
name|'error'
op|'('
string|"'\\'from\\' path %s is not relative to a lucene/solr checkout'"
op|'%'
name|'c'
op|'.'
name|'from_dir'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'c'
op|'.'
name|'to_dir'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'parser'
op|'.'
name|'error'
op|'('
string|"'\\'to\\' path %s is not a valid directory'"
op|'%'
name|'c'
op|'.'
name|'to_dir'
op|')'
newline|'\n'
dedent|''
op|'('
name|'c'
op|'.'
name|'to_root'
op|','
name|'to_relative'
op|')'
op|'='
name|'find_root'
op|'('
name|'c'
op|'.'
name|'to_dir'
op|')'
newline|'\n'
name|'if'
name|'c'
op|'.'
name|'to_root'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'    '
name|'parser'
op|'.'
name|'error'
op|'('
string|"'\\'to\\' path %s is not relative to a lucene/solr checkout'"
op|'%'
name|'c'
op|'.'
name|'to_dir'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'from_relative'
op|'!='
name|'to_relative'
op|':'
newline|'\n'
indent|'    '
name|'parser'
op|'.'
name|'error'
op|'('
string|"'\\'from\\' and \\'to\\' path are not equivalent relative paths within their'"
nl|'\n'
string|"' checkouts: %r != %r'"
op|'%'
op|'('
name|'from_relative'
op|','
name|'to_relative'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'c'
newline|'\n'
nl|'\n'
DECL|function|main
dedent|''
name|'def'
name|'main'
op|'('
op|')'
op|':'
newline|'\n'
indent|'  '
name|'c'
op|'='
name|'parse_config'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'='
name|'run_diff'
op|'('
name|'c'
op|'.'
name|'from_dir'
op|','
name|'c'
op|'.'
name|'to_dir'
op|','
name|'c'
op|'.'
name|'skip_whitespace'
op|')'
newline|'\n'
name|'should_filter'
op|'='
name|'make_filter_func'
op|'('
name|'c'
op|'.'
name|'from_root'
op|','
name|'c'
op|'.'
name|'from_dir'
op|')'
newline|'\n'
name|'print_filtered_output'
op|'('
name|'p'
op|'.'
name|'stdout'
op|','
name|'should_filter'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'  '
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'main'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyboardInterrupt'
op|':'
newline|'\n'
indent|'    '
name|'print'
op|'('
string|"'\\nReceived Ctrl-C, exiting early'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit
