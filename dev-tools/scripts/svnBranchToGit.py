begin_unit
comment|'# Licensed to the Apache Software Foundation (ASF) under one or more'
nl|'\n'
comment|'# contributor license agreements.  See the NOTICE file distributed with'
nl|'\n'
comment|'# this work for additional information regarding copyright ownership.'
nl|'\n'
comment|'# The ASF licenses this file to You under the Apache License, Version 2.0'
nl|'\n'
comment|'# (the "License"); you may not use this file except in compliance with'
nl|'\n'
comment|'# the License.  You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#     http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
string|'""" Workaround for slow updates from an svn branch to git.\nSee also jira issue INFRA-9182\n\nSituation:\n\nRemote svn repo        ---> (slow) git-svn fetch  --->   Remote git repo (upstream)\n   |                                                        |\n   |                                                        |\n   v                                                        v\nLocal svn working copy ---> this workaround       --->   Local git repo\n\nWhen the remote git-svn fetch is slow, the remote git repo is behind\nthe remote svn repo.\n\nWhen this script is run it will first check that the local working copy and repository are clean.\nThen it switches the svn working copy to the branch, which updates from the remote.\nThen it the fetches branch from the git upstream repo, and merges the branch locally.\nNormally the local svn and git will then be at the same svn revision, and the script will exit.\n\nOtherwise the remote git repo is out of date, and the following happens.\n\nFor the branch branchname in a local git repository following an upstream git-svn git repository,\nthis maintains commits on a temporary git branch branchname.svn in the local git repository.\nThese commits contain a message ending like this:\n  "SvnRepoUrl diff -r EarlierSvnRevisionNumber:NextSvnRevisionNumber".\nOtherwise the messages of the added commits are the same as their counterparts from git svn.\n\nNormally the added git commits and their git-svn counterparts have no differences between their working trees.\nHowever such differences can occur, see also the documentation of git-svn reset and the limitations below.\nIn order not to interfere with git-svn this script only adds commits to a temporary branch\nbranchname.svn, and the commit messages are chosen differently, they do not contain git-svn-id.\n\nIn case an earlier branchname.svn exists, it will first be deleted if necessary,\nand restarted at the later branch.\nTherefore branchname.svn is temporary and should only be used locally.\n\nBy default, no more than 20 commits will be added to branchname.svn in a single run.\n\nThe earlier revision number is taken from the git-svn-id message of git svn,\nor from the latest revision number in the commit message on branchname.svn,\nwhichever is later.\n\nThis allows branchname.svn to be used as a local git branch instead of branchname\nto develop new features locally, for example by merging branchname.svn into a feature branch.\n"""'
newline|'\n'
nl|'\n'
string|'""" Limitations:\n\nThis currently works by patching text, and therefore this does not work on binary files.\nAn example commit in lucene-solr that adds a binary file, on which this currently does not work correctly:\nsvn revision 1707457\ngit commit 3c0390f71e1f08a17f32bc207b4003362f8b6ac2\n\nWhen the local svn working copy contains file after updating to the latest available revision,\nand there is an interim commit that deletes this file, this file is left as an empty file in the working directory\nof the local git repository.\n\nAll svn properties are ignored here.\n"""'
newline|'\n'
nl|'\n'
string|'""" To be done:\nTake binary files from the patch, and check out binary files directly from the remote svn repo directly into the local git repo.\n\nGoing really far: checkout each interim svn revision, and use all (changed) files from there instead of the text diff.\nDetermining all files under version control with svn (svn ls) is far too slow for this (esp. when compared to git ls-tree),\nso this is probably better done by using svnsync to setup a local mirror repository following the remote,\nand then using svnlook on the local mirror repository.\nDoing that only to avoid the limitations of this workaround does not appear to be worthwhile.\n"""'
newline|'\n'
nl|'\n'
string|'""" This was developed on Linux using the following program versions:\npython 2.7.6\ngit 1.9.1\nsvn 1.8.8\ngrep (GNU grep) 2.16\n\ngitk (part of git) was used for manual testing:\n- reset branch to an earlier commit to simulate a non working update from svn to git,\n- delete branchname.svn, reset branchname.svn to earlier,\n- diff a commit generated here to a commit from git svn,\n- update, reload, show commits by commit date, ...\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'subprocess'
newline|'\n'
nl|'\n'
name|'from'
name|'xml'
name|'import'
name|'sax'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'sax'
op|'.'
name|'handler'
name|'import'
name|'ContentHandler'
newline|'\n'
nl|'\n'
name|'import'
name|'types'
newline|'\n'
nl|'\n'
DECL|class|SvnInfoHandler
name|'class'
name|'SvnInfoHandler'
op|'('
name|'ContentHandler'
op|')'
op|':'
newline|'\n'
DECL|variable|revisionAttr
indent|'  '
name|'revisionAttr'
op|'='
string|'"revision"'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'lastChangeRev'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|startElement
dedent|''
name|'def'
name|'startElement'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'attrs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'name'
op|'=='
string|'"commit"'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'lastChangeRev'
op|'='
name|'int'
op|'('
name|'attrs'
op|'.'
name|'getValue'
op|'('
name|'self'
op|'.'
name|'revisionAttr'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getLastChangeRevision
dedent|''
dedent|''
name|'def'
name|'getLastChangeRevision'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'self'
op|'.'
name|'lastChangeRev'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SvnLogEntry
dedent|''
dedent|''
name|'class'
name|'SvnLogEntry'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'  '
name|'pass'
comment|'# attributes set in SvnLogHandler: revision, author, date, msg'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SvnLogHandler
dedent|''
name|'class'
name|'SvnLogHandler'
op|'('
name|'ContentHandler'
op|')'
op|':'
comment|"# collect list of SvnLogEntry's"
newline|'\n'
DECL|variable|logEntryTag
indent|'  '
name|'logEntryTag'
op|'='
string|'"logentry"'
newline|'\n'
DECL|variable|revisionAttr
name|'revisionAttr'
op|'='
string|'"revision"'
comment|'# also used as SvnLogEntry attribute'
newline|'\n'
DECL|variable|authorTag
name|'authorTag'
op|'='
string|'"author"'
newline|'\n'
DECL|variable|dateTag
name|'dateTag'
op|'='
string|'"date"'
newline|'\n'
DECL|variable|msgTag
name|'msgTag'
op|'='
string|'"msg"'
newline|'\n'
DECL|variable|charCollectTags
name|'charCollectTags'
op|'='
op|'('
name|'authorTag'
op|','
name|'dateTag'
op|','
name|'msgTag'
op|')'
comment|'# also used as SvnLogEntry attributes'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'logEntries'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'chars'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|startElement
dedent|''
name|'def'
name|'startElement'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'attrs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'name'
op|'=='
name|'self'
op|'.'
name|'logEntryTag'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'lastLogEntry'
op|'='
name|'SvnLogEntry'
op|'('
op|')'
newline|'\n'
name|'setattr'
op|'('
name|'self'
op|'.'
name|'lastLogEntry'
op|','
name|'self'
op|'.'
name|'revisionAttr'
op|','
name|'int'
op|'('
name|'attrs'
op|'.'
name|'getValue'
op|'('
name|'self'
op|'.'
name|'revisionAttr'
op|')'
op|')'
op|')'
newline|'\n'
name|'for'
name|'tag'
name|'in'
name|'self'
op|'.'
name|'charCollectTags'
op|':'
newline|'\n'
indent|'        '
name|'setattr'
op|'('
name|'self'
op|'.'
name|'lastLogEntry'
op|','
name|'tag'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'name'
name|'in'
name|'self'
op|'.'
name|'charCollectTags'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'chars'
op|'='
string|'""'
newline|'\n'
nl|'\n'
DECL|member|characters
dedent|''
dedent|''
name|'def'
name|'characters'
op|'('
name|'self'
op|','
name|'content'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'self'
op|'.'
name|'chars'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'chars'
op|'+='
name|'content'
newline|'\n'
nl|'\n'
DECL|member|endElement
dedent|''
dedent|''
name|'def'
name|'endElement'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'name'
name|'in'
name|'self'
op|'.'
name|'charCollectTags'
op|':'
newline|'\n'
indent|'      '
name|'setattr'
op|'('
name|'self'
op|'.'
name|'lastLogEntry'
op|','
name|'name'
op|','
name|'self'
op|'.'
name|'chars'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'chars'
op|'='
name|'None'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'name'
op|'=='
name|'self'
op|'.'
name|'logEntryTag'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'logEntries'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'lastLogEntry'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'lastLogEntry'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|getLogEntries
dedent|''
dedent|''
name|'def'
name|'getLogEntries'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'self'
op|'.'
name|'logEntries'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SubProcessAtPath
dedent|''
dedent|''
name|'class'
name|'SubProcessAtPath'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'  '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'pathName'
op|','
name|'verbose'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'assert'
name|'pathName'
op|'!='
string|'""'
newline|'\n'
name|'self'
op|'.'
name|'pathName'
op|'='
name|'pathName'
newline|'\n'
name|'self'
op|'.'
name|'verbose'
op|'='
name|'verbose'
newline|'\n'
nl|'\n'
DECL|member|getPathName
dedent|''
name|'def'
name|'getPathName'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'self'
op|'.'
name|'pathName'
newline|'\n'
nl|'\n'
DECL|member|chDirToPath
dedent|''
name|'def'
name|'chDirToPath'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'self'
op|'.'
name|'pathName'
op|'!='
name|'os'
op|'.'
name|'getcwd'
op|'('
op|')'
op|':'
newline|'\n'
indent|'      '
name|'os'
op|'.'
name|'chdir'
op|'('
name|'self'
op|'.'
name|'pathName'
op|')'
newline|'\n'
name|'assert'
name|'self'
op|'.'
name|'pathName'
op|'=='
name|'os'
op|'.'
name|'getcwd'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'+'
string|'"("'
op|'+'
name|'self'
op|'.'
name|'pathName'
op|'+'
string|'")"'
newline|'\n'
nl|'\n'
DECL|member|checkCall
dedent|''
name|'def'
name|'checkCall'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwArgs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'assert'
name|'type'
op|'('
op|'*'
name|'args'
op|')'
op|'!='
name|'types'
op|'.'
name|'StringType'
newline|'\n'
name|'self'
op|'.'
name|'chDirToPath'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'verbose'
op|':'
newline|'\n'
indent|'      '
name|'print'
string|'"check_call args:"'
op|','
string|'" "'
op|'.'
name|'join'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
dedent|''
name|'subprocess'
op|'.'
name|'check_call'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwArgs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|checkOutput
dedent|''
name|'def'
name|'checkOutput'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwArgs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'assert'
name|'type'
op|'('
op|'*'
name|'args'
op|')'
op|'!='
name|'types'
op|'.'
name|'StringType'
newline|'\n'
name|'self'
op|'.'
name|'chDirToPath'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'verbose'
op|':'
newline|'\n'
indent|'      '
name|'print'
string|'"check_output args:"'
op|','
string|'" "'
op|'.'
name|'join'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
dedent|''
name|'result'
op|'='
name|'subprocess'
op|'.'
name|'check_output'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwArgs'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'verbose'
op|':'
newline|'\n'
indent|'      '
name|'print'
string|'"check_output result:"'
op|','
name|'result'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SvnWorkingCopy
dedent|''
dedent|''
name|'class'
name|'SvnWorkingCopy'
op|'('
name|'SubProcessAtPath'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'  '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'pathName'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'SubProcessAtPath'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'pathName'
op|','
name|'verbose'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|svnCmd
dedent|''
name|'svnCmd'
op|'='
string|'"svn"'
newline|'\n'
nl|'\n'
DECL|member|ensureNoLocalModifications
name|'def'
name|'ensureNoLocalModifications'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'localMods'
op|'='
name|'self'
op|'.'
name|'checkOutput'
op|'('
op|'('
name|'self'
op|'.'
name|'svnCmd'
op|','
string|'"status"'
op|')'
op|')'
newline|'\n'
name|'if'
name|'localMods'
op|':'
newline|'\n'
indent|'      '
name|'errorExit'
op|'('
name|'self'
op|','
string|'"should not have local modifications:\\n"'
op|','
name|'localMods'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update
dedent|''
dedent|''
name|'def'
name|'update'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'checkCall'
op|'('
op|'('
name|'self'
op|'.'
name|'svnCmd'
op|','
string|'"update"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|switch
dedent|''
name|'def'
name|'switch'
op|'('
name|'self'
op|','
name|'repoBranchName'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'checkCall'
op|'('
op|'('
name|'self'
op|'.'
name|'svnCmd'
op|','
string|'"switch"'
op|','
op|'('
string|'"^/"'
op|'+'
name|'repoBranchName'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lastChangedRevision
dedent|''
name|'def'
name|'lastChangedRevision'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'infoXml'
op|'='
name|'self'
op|'.'
name|'checkOutput'
op|'('
op|'('
name|'self'
op|'.'
name|'svnCmd'
op|','
string|'"info"'
op|','
string|'"--xml"'
op|')'
op|')'
newline|'\n'
name|'infoHandler'
op|'='
name|'SvnInfoHandler'
op|'('
op|')'
newline|'\n'
name|'sax'
op|'.'
name|'parseString'
op|'('
name|'infoXml'
op|','
name|'infoHandler'
op|')'
newline|'\n'
name|'return'
name|'infoHandler'
op|'.'
name|'getLastChangeRevision'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|getLogEntries
dedent|''
name|'def'
name|'getLogEntries'
op|'('
name|'self'
op|','
name|'fromRevision'
op|','
name|'toRevision'
op|','
name|'maxNumLogEntries'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'revRange'
op|'='
name|'self'
op|'.'
name|'revisionsRange'
op|'('
name|'fromRevision'
op|','
name|'toRevision'
op|')'
newline|'\n'
name|'logXml'
op|'='
name|'self'
op|'.'
name|'checkOutput'
op|'('
op|'('
name|'self'
op|'.'
name|'svnCmd'
op|','
string|'"log"'
op|','
string|'"-r"'
op|','
name|'revRange'
op|','
string|'"--xml"'
op|','
string|'"-l"'
op|','
name|'str'
op|'('
name|'maxNumLogEntries'
op|')'
op|')'
op|')'
newline|'\n'
name|'logHandler'
op|'='
name|'SvnLogHandler'
op|'('
op|')'
newline|'\n'
name|'sax'
op|'.'
name|'parseString'
op|'('
name|'logXml'
op|','
name|'logHandler'
op|')'
newline|'\n'
name|'return'
name|'logHandler'
op|'.'
name|'getLogEntries'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|revisionsRange
dedent|''
name|'def'
name|'revisionsRange'
op|'('
name|'self'
op|','
name|'fromRevision'
op|','
name|'toRevision'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'str'
op|'('
name|'fromRevision'
op|')'
op|'+'
string|'":"'
op|'+'
name|'str'
op|'('
name|'toRevision'
op|')'
newline|'\n'
nl|'\n'
DECL|member|createPatchFile
dedent|''
name|'def'
name|'createPatchFile'
op|'('
name|'self'
op|','
name|'fromRevision'
op|','
name|'toRevision'
op|','
name|'patchFileName'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'revRange'
op|'='
name|'self'
op|'.'
name|'revisionsRange'
op|'('
name|'fromRevision'
op|','
name|'toRevision'
op|')'
newline|'\n'
name|'patchFile'
op|'='
name|'open'
op|'('
name|'patchFileName'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'print'
string|'"Creating patch from"'
op|','
name|'self'
op|'.'
name|'pathName'
op|','
string|'"between revisions"'
op|','
name|'revRange'
newline|'\n'
name|'self'
op|'.'
name|'checkCall'
op|'('
op|'('
name|'self'
op|'.'
name|'svnCmd'
op|','
string|'"diff"'
op|','
string|'"-r"'
op|','
name|'revRange'
op|','
nl|'\n'
string|'"--ignore-properties"'
op|')'
op|','
comment|'# git apply can fail on svn properties.'
nl|'\n'
name|'stdout'
op|'='
name|'patchFile'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'      '
name|'patchFile'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'print'
string|'"Created patch file"'
op|','
name|'patchFileName'
newline|'\n'
nl|'\n'
DECL|member|patchedFileNames
dedent|''
name|'def'
name|'patchedFileNames'
op|'('
name|'self'
op|','
name|'patchFileName'
op|')'
op|':'
comment|'# return a sequence of the patched file names'
newline|'\n'
indent|'    '
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'getsize'
op|'('
name|'patchFileName'
op|')'
op|'=='
number|'0'
op|':'
comment|'# changed only svn properties, no files changed.'
newline|'\n'
indent|'      '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'indexPrefix'
op|'='
string|'"Index: "'
newline|'\n'
name|'regExp'
op|'='
string|'"^"'
op|'+'
name|'indexPrefix'
comment|'# at beginning of line'
newline|'\n'
name|'patchedFileNamesLines'
op|'='
name|'self'
op|'.'
name|'checkOutput'
op|'('
op|'('
string|'"grep"'
op|','
name|'regExp'
op|','
name|'patchFileName'
op|')'
op|')'
comment|'# grep exits 1 whithout any match.'
newline|'\n'
name|'indexPrefixLength'
op|'='
name|'len'
op|'('
name|'indexPrefix'
op|')'
newline|'\n'
name|'return'
op|'['
name|'line'
op|'['
name|'indexPrefixLength'
op|':'
op|']'
nl|'\n'
name|'for'
name|'line'
name|'in'
name|'patchedFileNamesLines'
op|'.'
name|'split'
op|'('
string|'"\\n"'
op|')'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'line'
op|')'
op|'>'
number|'0'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GitRepository
dedent|''
dedent|''
name|'class'
name|'GitRepository'
op|'('
name|'SubProcessAtPath'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'  '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'pathName'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'SubProcessAtPath'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'pathName'
op|','
name|'verbose'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'currentBranch'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|gitCmd
dedent|''
name|'gitCmd'
op|'='
string|'"git"'
newline|'\n'
nl|'\n'
DECL|member|checkOutBranch
name|'def'
name|'checkOutBranch'
op|'('
name|'self'
op|','
name|'branchName'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'checkCall'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"checkout"'
op|','
name|'branchName'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'currentBranch'
op|'='
name|'branchName'
newline|'\n'
nl|'\n'
DECL|member|getCurrentBranch
dedent|''
name|'def'
name|'getCurrentBranch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'self'
op|'.'
name|'currentBranch'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'      '
name|'gitStatusOut'
op|'='
name|'self'
op|'.'
name|'checkOutput'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"status"'
op|')'
op|')'
newline|'\n'
name|'if'
name|'gitStatusOut'
op|'.'
name|'startswith'
op|'('
string|'"On branch "'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'currentBranch'
op|'='
name|'gitStatusOut'
op|'.'
name|'split'
op|'['
number|'2'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'errorExit'
op|'('
name|'self'
op|','
string|'"not on a branch:"'
op|','
name|'gitStatusOut'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'currentBranch'
newline|'\n'
nl|'\n'
DECL|member|workingDirectoryClean
dedent|''
name|'def'
name|'workingDirectoryClean'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'gitStatusOut'
op|'='
name|'self'
op|'.'
name|'checkOutput'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"status"'
op|')'
op|')'
newline|'\n'
name|'expSubString'
op|'='
string|'"nothing to commit, working directory clean"'
newline|'\n'
name|'return'
name|'gitStatusOut'
op|'.'
name|'find'
op|'('
name|'expSubString'
op|')'
op|'>='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|listBranches
dedent|''
name|'def'
name|'listBranches'
op|'('
name|'self'
op|','
name|'pattern'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'self'
op|'.'
name|'checkOutput'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"branch"'
op|','
string|'"--list"'
op|','
name|'pattern'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|branchExists
dedent|''
name|'def'
name|'branchExists'
op|'('
name|'self'
op|','
name|'branchName'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'listOut'
op|'='
name|'self'
op|'.'
name|'listBranches'
op|'('
name|'branchName'
op|')'
comment|'# CHECKME: using branchName as pattern may not always be ok.'
newline|'\n'
name|'return'
name|'len'
op|'('
name|'listOut'
op|')'
op|'>'
number|'0'
newline|'\n'
nl|'\n'
DECL|member|deleteBranch
dedent|''
name|'def'
name|'deleteBranch'
op|'('
name|'self'
op|','
name|'branchName'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'checkCall'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"branch"'
op|','
string|'"-D"'
op|','
name|'branchName'
op|')'
op|')'
newline|'\n'
name|'if'
name|'branchName'
op|'=='
name|'self'
op|'.'
name|'currentBranch'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'currentBranch'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|createBranch
dedent|''
dedent|''
name|'def'
name|'createBranch'
op|'('
name|'self'
op|','
name|'branchName'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'checkCall'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"branch"'
op|','
name|'branchName'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|fetch
dedent|''
name|'def'
name|'fetch'
op|'('
name|'self'
op|','
name|'upStream'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'checkCall'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"fetch"'
op|','
name|'upStream'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|merge
dedent|''
name|'def'
name|'merge'
op|'('
name|'self'
op|','
name|'branch'
op|','
name|'fromBranch'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'checkCall'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"merge"'
op|','
name|'branch'
op|','
name|'fromBranch'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getCommitMessage
dedent|''
name|'def'
name|'getCommitMessage'
op|'('
name|'self'
op|','
name|'commitRef'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'self'
op|'.'
name|'checkOutput'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"log"'
op|','
string|'"--format=%B"'
op|','
string|'"-n"'
op|','
string|'"1"'
op|','
name|'commitRef'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getCommitAuthorName
dedent|''
name|'def'
name|'getCommitAuthorName'
op|'('
name|'self'
op|','
name|'commitRef'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'self'
op|'.'
name|'checkOutput'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"log"'
op|','
string|'"--format=%aN"'
op|','
string|'"-n"'
op|','
string|'"1"'
op|','
name|'commitRef'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getCommitAuthorEmail
dedent|''
name|'def'
name|'getCommitAuthorEmail'
op|'('
name|'self'
op|','
name|'commitRef'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'self'
op|'.'
name|'checkOutput'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"log"'
op|','
string|'"--format=%aE"'
op|','
string|'"-n"'
op|','
string|'"1"'
op|','
name|'commitRef'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getLatestCommitForAuthor
dedent|''
name|'def'
name|'getLatestCommitForAuthor'
op|'('
name|'self'
op|','
name|'svnAuthor'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'authorCommit'
op|'='
name|'self'
op|'.'
name|'checkOutput'
op|'('
nl|'\n'
string|'" "'
op|'.'
name|'join'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
nl|'\n'
string|'"rev-list"'
op|','
string|'"--all"'
op|','
string|'"-i"'
op|','
op|'('
string|'"--author="'
op|'+'
name|'svnAuthor'
op|')'
op|','
comment|'# see git commit documentation on --author'
nl|'\n'
string|'"|"'
op|','
comment|'# pipe should have a buffer for at most a few commit ids.'
nl|'\n'
string|'"head"'
op|','
string|'"-1"'
op|')'
op|')'
op|','
nl|'\n'
name|'shell'
op|'='
name|'True'
op|')'
comment|'# use shell pipe'
newline|'\n'
name|'authorCommit'
op|'='
name|'authorCommit'
op|'.'
name|'rstrip'
op|'('
string|'"\\n"'
op|')'
newline|'\n'
name|'return'
name|'authorCommit'
newline|'\n'
nl|'\n'
DECL|member|getSvnRemoteAndRevision
dedent|''
name|'def'
name|'getSvnRemoteAndRevision'
op|'('
name|'self'
op|','
name|'gitSvnCommitRef'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'gitSvnCommitMessage'
op|'='
name|'self'
op|'.'
name|'getCommitMessage'
op|'('
name|'gitSvnCommitRef'
op|')'
newline|'\n'
name|'words'
op|'='
name|'gitSvnCommitMessage'
op|'.'
name|'split'
op|'('
op|')'
op|';'
newline|'\n'
name|'svnIdMarker'
op|'='
string|'"git-svn-id:"'
newline|'\n'
name|'assert'
name|'words'
op|'.'
name|'index'
op|'('
name|'svnIdMarker'
op|')'
op|'>='
number|'0'
newline|'\n'
name|'svnId'
op|'='
name|'words'
op|'['
name|'words'
op|'.'
name|'index'
op|'('
name|'svnIdMarker'
op|')'
op|'+'
number|'1'
op|']'
newline|'\n'
name|'splitSvnId'
op|'='
name|'svnId'
op|'.'
name|'split'
op|'('
string|'"@"'
op|')'
newline|'\n'
name|'svnRemote'
op|'='
name|'splitSvnId'
op|'['
number|'0'
op|']'
newline|'\n'
name|'svnRevision'
op|'='
name|'int'
op|'('
name|'splitSvnId'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'return'
op|'('
name|'svnRemote'
op|','
name|'svnRevision'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lastTempGitSvnRevision
dedent|''
name|'def'
name|'lastTempGitSvnRevision'
op|'('
name|'self'
op|','
name|'branchName'
op|')'
op|':'
comment|'# at a commit generated here on the temp branch.'
newline|'\n'
indent|'    '
name|'gitCommitMessage'
op|'='
name|'self'
op|'.'
name|'getCommitMessage'
op|'('
name|'branchName'
op|')'
newline|'\n'
name|'parts'
op|'='
name|'gitCommitMessage'
op|'.'
name|'split'
op|'('
string|'":"'
op|')'
newline|'\n'
name|'lastPart'
op|'='
name|'parts'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'split'
op|'('
op|')'
op|'['
number|'0'
op|']'
comment|'# remove appended newlines'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'return'
name|'int'
op|'('
name|'lastPart'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
comment|'# not generated here, ignore.'
newline|'\n'
indent|'      '
name|'print'
string|'"Warning: svn revision range not found at end of commit message:\\n"'
op|','
name|'gitCommitMessage'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|applyPatch
dedent|''
dedent|''
name|'def'
name|'applyPatch'
op|'('
name|'self'
op|','
name|'patchFileName'
op|','
name|'stripDepth'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'checkCall'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"apply"'
op|','
nl|'\n'
op|'('
string|'"-p"'
op|'+'
name|'str'
op|'('
name|'stripDepth'
op|')'
op|')'
op|','
nl|'\n'
string|'"--whitespace=nowarn"'
op|','
nl|'\n'
name|'patchFileName'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addAllToIndex
dedent|''
name|'def'
name|'addAllToIndex'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'checkCall'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"add"'
op|','
string|'"-A"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deleteForced
dedent|''
name|'def'
name|'deleteForced'
op|'('
name|'self'
op|','
name|'fileName'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'checkCall'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"rm"'
op|','
string|'"-f"'
op|','
name|'fileName'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|commit
dedent|''
name|'def'
name|'commit'
op|'('
name|'self'
op|','
name|'message'
op|','
nl|'\n'
name|'authorName'
op|','
name|'authorEmail'
op|','
name|'authorDate'
op|','
nl|'\n'
name|'committerName'
op|','
name|'committerEmail'
op|','
name|'committerDate'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'author'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
op|'('
name|'authorName'
op|','
string|'" <"'
op|','
name|'authorEmail'
op|','
string|'">"'
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'environ'
op|'['
string|'"GIT_COMMITTER_NAME"'
op|']'
op|'='
name|'committerName'
comment|'# no need to save/restore earlier environment state.'
newline|'\n'
name|'os'
op|'.'
name|'environ'
op|'['
string|'"GIT_COMMITTER_EMAIL"'
op|']'
op|'='
name|'committerEmail'
newline|'\n'
name|'os'
op|'.'
name|'environ'
op|'['
string|'"GIT_COMMITTER_DATE"'
op|']'
op|'='
name|'committerDate'
newline|'\n'
name|'self'
op|'.'
name|'checkCall'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"commit"'
op|','
nl|'\n'
string|'"--allow-empty"'
op|','
comment|'# only svn poperties changed.'
nl|'\n'
op|'('
string|'"--message="'
op|'+'
name|'message'
op|')'
op|','
nl|'\n'
op|'('
string|'"--author="'
op|'+'
name|'author'
op|')'
op|','
nl|'\n'
op|'('
string|'"--date="'
op|'+'
name|'authorDate'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cleanDirsForced
dedent|''
name|'def'
name|'cleanDirsForced'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'checkCall'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"clean"'
op|','
string|'"-fd"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|errorExit
dedent|''
dedent|''
name|'def'
name|'errorExit'
op|'('
op|'*'
name|'messageParts'
op|')'
op|':'
newline|'\n'
indent|'  '
name|'raise'
name|'RuntimeError'
op|'('
string|'" "'
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'str'
op|','
name|'messageParts'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|allSuccessivePairs
dedent|''
name|'def'
name|'allSuccessivePairs'
op|'('
name|'lst'
op|')'
op|':'
newline|'\n'
indent|'  '
name|'return'
op|'['
name|'lst'
op|'['
name|'i'
op|':'
name|'i'
op|'+'
number|'2'
op|']'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'len'
op|'('
name|'lst'
op|')'
op|'-'
number|'1'
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|maintainTempGitSvnBranch
dedent|''
name|'def'
name|'maintainTempGitSvnBranch'
op|'('
name|'branchName'
op|','
name|'tempGitBranchName'
op|','
nl|'\n'
name|'svnWorkingCopyOfBranchPath'
op|','
name|'svnRepoBranchName'
op|','
nl|'\n'
name|'gitRepoPath'
op|','
name|'gitUpstream'
op|','
nl|'\n'
name|'patchFileName'
op|','
nl|'\n'
name|'maxCommits'
op|'='
number|'20'
op|','
comment|'# generate at most this number of commits on tempGitBranchName, rerun to add more.'
nl|'\n'
name|'testMode'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'  '
name|'assert'
name|'maxCommits'
op|'>='
number|'1'
newline|'\n'
nl|'\n'
name|'gitRepo'
op|'='
name|'GitRepository'
op|'('
name|'gitRepoPath'
op|')'
newline|'\n'
name|'gitRepo'
op|'.'
name|'checkOutBranch'
op|'('
name|'branchName'
op|')'
comment|'# fails with git message when working directory is not clean'
newline|'\n'
nl|'\n'
name|'svnWorkingCopy'
op|'='
name|'SvnWorkingCopy'
op|'('
name|'svnWorkingCopyOfBranchPath'
op|')'
newline|'\n'
name|'svnWorkingCopy'
op|'.'
name|'ensureNoLocalModifications'
op|'('
op|')'
newline|'\n'
name|'svnWorkingCopy'
op|'.'
name|'switch'
op|'('
name|'svnRepoBranchName'
op|')'
comment|'# switch to repo branch, update to latest revision'
newline|'\n'
nl|'\n'
name|'lastSvnRevision'
op|'='
name|'svnWorkingCopy'
op|'.'
name|'lastChangedRevision'
op|'('
op|')'
newline|'\n'
comment|'# print svnWorkingCopy, "lastSvnRevision:", lastSvnRevision'
nl|'\n'
nl|'\n'
name|'gitRepo'
op|'.'
name|'fetch'
op|'('
name|'gitUpstream'
op|')'
newline|'\n'
name|'if'
name|'testMode'
op|':'
newline|'\n'
indent|'    '
name|'pass'
comment|'# leave branch where it is, as if the last commits from upstream did not arrive'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'gitRepo'
op|'.'
name|'merge'
op|'('
name|'branchName'
op|','
name|'gitUpstream'
op|'+'
string|'"/"'
op|'+'
name|'branchName'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'('
name|'svnRemote'
op|','
name|'lastSvnRevisionOnGitSvnBranch'
op|')'
op|'='
name|'gitRepo'
op|'.'
name|'getSvnRemoteAndRevision'
op|'('
name|'branchName'
op|')'
newline|'\n'
name|'print'
string|'"svnRemote:"'
op|','
name|'svnRemote'
newline|'\n'
comment|'#print gitRepo, branchName, "lastSvnRevisionOnGitSvnBranch:", lastSvnRevisionOnGitSvnBranch'
nl|'\n'
nl|'\n'
comment|'# check whether tempGitBranchName exists:'
nl|'\n'
name|'diffBaseRevision'
op|'='
name|'lastSvnRevisionOnGitSvnBranch'
newline|'\n'
name|'svnTempRevision'
op|'='
name|'None'
newline|'\n'
name|'doCommitOnExistingTempBranch'
op|'='
name|'False'
newline|'\n'
nl|'\n'
name|'if'
name|'gitRepo'
op|'.'
name|'branchExists'
op|'('
name|'tempGitBranchName'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'print'
name|'tempGitBranchName'
op|','
string|'"exists"'
newline|'\n'
comment|'# update lastSvnRevisionOnGitSvnBranch from there.'
nl|'\n'
name|'svnTempRevision'
op|'='
name|'gitRepo'
op|'.'
name|'lastTempGitSvnRevision'
op|'('
name|'tempGitBranchName'
op|')'
newline|'\n'
name|'if'
name|'svnTempRevision'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'      '
name|'print'
string|'"Warning: no svn revision found on branch:"'
op|','
name|'tempGitBranchName'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'      '
name|'if'
name|'svnTempRevision'
op|'>'
name|'lastSvnRevisionOnGitSvnBranch'
op|':'
newline|'\n'
indent|'        '
name|'diffBaseRevision'
op|'='
name|'svnTempRevision'
newline|'\n'
name|'doCommitOnExistingTempBranch'
op|'='
name|'True'
newline|'\n'
name|'gitRepo'
op|'.'
name|'checkOutBranch'
op|'('
name|'tempGitBranchName'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'lastSvnRevision'
op|'=='
name|'diffBaseRevision'
op|':'
newline|'\n'
indent|'    '
name|'print'
name|'gitRepo'
op|','
name|'gitRepo'
op|'.'
name|'getCurrentBranch'
op|'('
op|')'
op|','
string|'"up to date with"'
op|','
name|'svnWorkingCopy'
op|','
name|'svnRepoBranchName'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'lastSvnRevision'
op|'<'
name|'diffBaseRevision'
op|':'
comment|'# unlikely, do nothing'
newline|'\n'
indent|'    '
name|'print'
name|'gitRepo'
op|','
name|'gitRepo'
op|'.'
name|'getCurrentBranch'
op|'('
op|')'
op|','
string|'"later than"'
op|','
name|'svnWorkingCopy'
op|','
string|'", nothing to update."'
newline|'\n'
comment|'# CHECK: generate svn commits from the git commits?'
nl|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'print'
name|'gitRepo'
op|','
name|'gitRepo'
op|'.'
name|'getCurrentBranch'
op|'('
op|')'
op|','
string|'"earlier than"'
op|','
name|'svnWorkingCopy'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'gitRepo'
op|'.'
name|'workingDirectoryClean'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'errorExit'
op|'('
name|'gitRepo'
op|','
string|'"on branch"'
op|','
name|'gitRepo'
op|'.'
name|'getCurrentBranch'
op|'('
op|')'
op|','
string|'"not clean"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'print'
name|'gitRepo'
op|','
string|'"on branch"'
op|','
name|'gitRepo'
op|'.'
name|'getCurrentBranch'
op|'('
op|')'
op|','
string|'"and clean"'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'doCommitOnExistingTempBranch'
op|':'
comment|'# restart temp branch from branch'
newline|'\n'
indent|'    '
name|'assert'
name|'gitRepo'
op|'.'
name|'getCurrentBranch'
op|'('
op|')'
op|'=='
name|'branchName'
newline|'\n'
name|'if'
name|'gitRepo'
op|'.'
name|'branchExists'
op|'('
name|'tempGitBranchName'
op|')'
op|':'
comment|'# tempGitBranchName exists, delete it first.'
newline|'\n'
indent|'      '
name|'print'
string|'"Branch"'
op|','
name|'tempGitBranchName'
op|','
string|'"exists, deleting"'
newline|'\n'
name|'gitRepo'
op|'.'
name|'deleteBranch'
op|'('
name|'tempGitBranchName'
op|')'
newline|'\n'
name|'if'
name|'gitRepo'
op|'.'
name|'branchExists'
op|'('
name|'tempGitBranchName'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'errorExit'
op|'('
string|'"Could not delete branch"'
op|','
name|'tempGitBranchName'
op|','
string|'"from"'
op|','
name|'gitRepo'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'gitRepo'
op|'.'
name|'createBranch'
op|'('
name|'tempGitBranchName'
op|')'
newline|'\n'
name|'gitRepo'
op|'.'
name|'checkOutBranch'
op|'('
name|'tempGitBranchName'
op|')'
newline|'\n'
name|'print'
string|'"Started branch"'
op|','
name|'tempGitBranchName'
op|','
string|'"at"'
op|','
name|'branchName'
newline|'\n'
nl|'\n'
dedent|''
name|'assert'
name|'gitRepo'
op|'.'
name|'getCurrentBranch'
op|'('
op|')'
op|'=='
name|'tempGitBranchName'
newline|'\n'
nl|'\n'
name|'patchStripDepth'
op|'='
number|'0'
comment|'# patch generated at svn repo.'
newline|'\n'
nl|'\n'
name|'maxNumLogEntries'
op|'='
name|'maxCommits'
op|'+'
number|'1'
newline|'\n'
name|'svnLogEntries'
op|'='
name|'svnWorkingCopy'
op|'.'
name|'getLogEntries'
op|'('
name|'diffBaseRevision'
op|','
name|'lastSvnRevision'
op|','
name|'maxNumLogEntries'
op|')'
newline|'\n'
nl|'\n'
name|'numCommits'
op|'='
number|'0'
newline|'\n'
nl|'\n'
name|'for'
op|'('
name|'logEntryFrom'
op|','
name|'logEntryTo'
op|')'
name|'in'
name|'allSuccessivePairs'
op|'('
name|'svnLogEntries'
op|')'
op|':'
newline|'\n'
comment|'# create patch file from svn between the revisions:'
nl|'\n'
indent|'    '
name|'svnWorkingCopy'
op|'.'
name|'createPatchFile'
op|'('
name|'logEntryFrom'
op|'.'
name|'revision'
op|','
name|'logEntryTo'
op|'.'
name|'revision'
op|','
name|'patchFileName'
op|')'
newline|'\n'
nl|'\n'
name|'patchedFileNames'
op|'='
name|'svnWorkingCopy'
op|'.'
name|'patchedFileNames'
op|'('
name|'patchFileName'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'getsize'
op|'('
name|'patchFileName'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'      '
name|'gitRepo'
op|'.'
name|'applyPatch'
op|'('
name|'patchFileName'
op|','
name|'patchStripDepth'
op|')'
newline|'\n'
name|'print'
string|'"Applied patch"'
op|','
name|'patchFileName'
newline|'\n'
dedent|''
name|'else'
op|':'
comment|'# only svn properties changed, do git commit for commit info only.'
newline|'\n'
indent|'      '
name|'print'
string|'"Empty patch"'
op|','
name|'patchFileName'
newline|'\n'
nl|'\n'
dedent|''
name|'gitRepo'
op|'.'
name|'addAllToIndex'
op|'('
op|')'
comment|'# add all patch changes to the git index to be committed.'
newline|'\n'
nl|'\n'
comment|'# Applying the patch leaves files that have been actually deleted at zero size.'
nl|'\n'
comment|'# Therefore delete empty patched files from the git repo that do not exist in svn working copy:'
nl|'\n'
name|'for'
name|'patchedFileName'
name|'in'
name|'patchedFileNames'
op|':'
newline|'\n'
indent|'      '
name|'fileNameInGitRepo'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'gitRepo'
op|'.'
name|'getPathName'
op|'('
op|')'
op|','
name|'patchedFileName'
op|')'
newline|'\n'
name|'fileNameInSvnWorkingCopy'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'svnWorkingCopy'
op|'.'
name|'getPathName'
op|'('
op|')'
op|','
name|'patchedFileName'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'fileNameInGitRepo'
op|')'
op|':'
newline|'\n'
comment|'# print "Directory:", fileNameInGitRepo'
nl|'\n'
indent|'        '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isfile'
op|'('
name|'fileNameInGitRepo'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'print'
string|'"Possibly new binary file in svn, ignored here:"'
op|','
name|'fileNameInGitRepo'
newline|'\n'
comment|'# FIXME: Take a new binary file out of the svn repository directly.'
nl|'\n'
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'fileSize'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'getsize'
op|'('
name|'fileNameInGitRepo'
op|')'
newline|'\n'
name|'if'
name|'fileSize'
op|'>'
number|'0'
op|':'
newline|'\n'
comment|'# print "Non empty file patched normally:", fileNameInGitRepo'
nl|'\n'
indent|'        '
name|'continue'
newline|'\n'
nl|'\n'
comment|'# fileNameInGitRepo exists and is empty'
nl|'\n'
dedent|''
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isfile'
op|'('
name|'fileNameInSvnWorkingCopy'
op|')'
op|':'
newline|'\n'
comment|'# FIXME: this only works correctly when the svn working copy is hecked out at the target revision.'
nl|'\n'
indent|'        '
name|'print'
string|'"Left empty file:"'
op|','
name|'fileNameInGitRepo'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'gitRepo'
op|'.'
name|'deleteForced'
op|'('
name|'fileNameInGitRepo'
op|')'
comment|'# force, the file is not up to date. This also stages the delete for commit.'
newline|'\n'
comment|'# print "Deleted empty file", fileNameInGitRepo # not needed, git rm is verbose enough'
nl|'\n'
nl|'\n'
comment|'# commit, put toRevision at end so it can be picked up later.'
nl|'\n'
dedent|''
name|'revisionsRange'
op|'='
name|'svnWorkingCopy'
op|'.'
name|'revisionsRange'
op|'('
name|'logEntryFrom'
op|'.'
name|'revision'
op|','
name|'logEntryTo'
op|'.'
name|'revision'
op|')'
newline|'\n'
name|'message'
op|'='
name|'logEntryTo'
op|'.'
name|'msg'
op|'+'
string|'"\\n\\n"'
op|'+'
name|'svnRemote'
op|'+'
string|'" diff -r "'
op|'+'
name|'revisionsRange'
newline|'\n'
name|'authorCommit'
op|'='
name|'gitRepo'
op|'.'
name|'getLatestCommitForAuthor'
op|'('
name|'logEntryTo'
op|'.'
name|'author'
op|')'
newline|'\n'
name|'authorName'
op|'='
name|'gitRepo'
op|'.'
name|'getCommitAuthorName'
op|'('
name|'authorCommit'
op|')'
newline|'\n'
name|'authorEmail'
op|'='
name|'gitRepo'
op|'.'
name|'getCommitAuthorEmail'
op|'('
name|'authorCommit'
op|')'
newline|'\n'
comment|'# print "Author name and email:", authorName, authorEmail'
nl|'\n'
name|'gitRepo'
op|'.'
name|'commit'
op|'('
name|'message'
op|','
nl|'\n'
name|'authorName'
op|','
name|'authorEmail'
op|','
name|'logEntryTo'
op|'.'
name|'date'
op|','
nl|'\n'
name|'authorName'
op|','
name|'authorEmail'
op|','
name|'logEntryTo'
op|'.'
name|'date'
op|')'
comment|'# author is also git committer, just like git-svn'
newline|'\n'
nl|'\n'
name|'numCommits'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
comment|'# print "Commit  author:", logEntryTo.author'
nl|'\n'
comment|'# print "Commit    date:", logEntryTo.date'
nl|'\n'
name|'print'
string|'"Commit message:"'
op|','
name|'logEntryTo'
op|'.'
name|'msg'
newline|'\n'
nl|'\n'
name|'gitRepo'
op|'.'
name|'cleanDirsForced'
op|'('
op|')'
comment|'# delete untracked directories and files'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'gitRepo'
op|'.'
name|'workingDirectoryClean'
op|'('
op|')'
op|':'
newline|'\n'
indent|'      '
name|'errorExit'
op|'('
name|'gitRepo'
op|','
string|'"on branch"'
op|','
name|'gitRepo'
op|'.'
name|'getCurrentBranch'
op|'('
op|')'
op|','
string|'"not clean, numCommits:"'
op|','
name|'numCommits'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'print'
string|'"Added"'
op|','
name|'numCommits'
op|','
string|'"commit(s) to branch"'
op|','
name|'tempGitBranchName'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'if'
name|'__name__'
op|'=='
string|'"__main__"'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|testMode
indent|'  '
name|'testMode'
op|'='
name|'False'
comment|'# when true, leave branch where it is, as if the last commits from upstream did not arrive'
newline|'\n'
DECL|variable|defaultMaxCommits
name|'defaultMaxCommits'
op|'='
number|'20'
newline|'\n'
DECL|variable|maxCommits
name|'maxCommits'
op|'='
name|'defaultMaxCommits'
newline|'\n'
nl|'\n'
name|'import'
name|'sys'
newline|'\n'
DECL|variable|argv
name|'argv'
op|'='
name|'sys'
op|'.'
name|'argv'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
name|'while'
name|'argv'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'argv'
op|'['
number|'0'
op|']'
op|'=='
string|'"test"'
op|':'
newline|'\n'
DECL|variable|testMode
indent|'      '
name|'testMode'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'      '
name|'try'
op|':'
newline|'\n'
DECL|variable|maxCommits
indent|'        '
name|'maxCommits'
op|'='
name|'int'
op|'('
name|'argv'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'assert'
name|'maxCommits'
op|'>='
number|'1'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'        '
name|'errorExit'
op|'('
string|'"Argument(s) should be test and/or a maximum number of commits, defaults are false and "'
op|'+'
name|'defaultMaxCommits'
op|')'
newline|'\n'
DECL|variable|argv
dedent|''
dedent|''
name|'argv'
op|'='
name|'argv'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|repo
dedent|''
name|'repo'
op|'='
string|'"lucene-solr"'
newline|'\n'
DECL|variable|branchName
name|'branchName'
op|'='
string|'"trunk"'
newline|'\n'
DECL|variable|tempGitBranchName
name|'tempGitBranchName'
op|'='
name|'branchName'
op|'+'
string|'".svn"'
newline|'\n'
nl|'\n'
DECL|variable|home
name|'home'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'expanduser'
op|'('
string|'"~"'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|svnWorkingCopyOfBranchPath
name|'svnWorkingCopyOfBranchPath'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'home'
op|','
string|'"svnwork"'
op|','
name|'repo'
op|','
name|'branchName'
op|')'
newline|'\n'
DECL|variable|svnRepoBranchName
name|'svnRepoBranchName'
op|'='
string|'"lucene/dev/"'
op|'+'
name|'branchName'
comment|'# for svn switch to'
newline|'\n'
nl|'\n'
DECL|variable|gitRepo
name|'gitRepo'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'home'
op|','
string|'"gitrepos"'
op|','
name|'repo'
op|')'
newline|'\n'
DECL|variable|gitUpstream
name|'gitUpstream'
op|'='
string|'"upstream"'
newline|'\n'
nl|'\n'
DECL|variable|patchFileName
name|'patchFileName'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'home'
op|','
string|'"patches"'
op|','
name|'tempGitBranchName'
op|')'
newline|'\n'
nl|'\n'
name|'maintainTempGitSvnBranch'
op|'('
name|'branchName'
op|','
name|'tempGitBranchName'
op|','
nl|'\n'
name|'svnWorkingCopyOfBranchPath'
op|','
name|'svnRepoBranchName'
op|','
nl|'\n'
name|'gitRepo'
op|','
name|'gitUpstream'
op|','
nl|'\n'
name|'patchFileName'
op|','
nl|'\n'
DECL|variable|maxCommits
name|'maxCommits'
op|'='
name|'maxCommits'
op|','
nl|'\n'
DECL|variable|testMode
name|'testMode'
op|'='
name|'testMode'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit
