begin_unit
name|'from'
name|'__future__'
name|'import'
name|'print_function'
newline|'\n'
string|'"""\nTo be done:\n- Investigate whether it is possible to obtain the last svn revision number without switching to it.\n- Investigate file mode differences reported by gitk, see svn revision 171449.\n- simplify difference check to a single call to diff.\n  Verify that all common files are equal, ignore non common files, check stderr and stdout of diff.\n"""'
newline|'\n'
nl|'\n'
comment|'# Licensed to the Apache Software Foundation (ASF) under one or more'
nl|'\n'
comment|'# contributor license agreements.  See the NOTICE file distributed with'
nl|'\n'
comment|'# this work for additional information regarding copyright ownership.'
nl|'\n'
comment|'# The ASF licenses this file to You under the Apache License, Version 2.0'
nl|'\n'
comment|'# (the "License"); you may not use this file except in compliance with'
nl|'\n'
comment|'# the License.  You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#     http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
string|'""" Workaround for slow updates from an svn branch to git.\nSee also jira issue INFRA-9182\n\nSituation:\n\nRemote svn repo        ---> (slow) git-svn fetch  --->   Remote git repo (upstream)\n   |                                                        |\n   |                                                        |\n   v                                                        v\nLocal svn working copy ---> this workaround       --->   Local git repo\n\nWhen the remote git-svn fetch is slow, the remote git repo is behind\nthe remote svn repo.\n\nWhen this script is run it will first check that the local working copy and repository are clean.\nThen it switches the svn working copy to the branch, which updates from the remote.\nThen it fetches the branch from the git upstream repo, and merges the branch locally.\nNormally the local svn and git will then be at the same svn revision, and the script will exit.\n\nOtherwise the remote git repo is out of date, and the following happens.\nIt is checked that the hostname and path and the uuid of the remote svn repo\nas reported by the local svn working copy and as reported by the local git repo\nare the same.\n\nFor the branch branchname in a local git repository following an upstream git-svn git repository,\nthis maintains commits on a temporary git branch branchname.svn in the local git repository.\nThese commits contain metdata that differs slightly from git svn (svn2git-id: instead of git-svn-id:).\nOtherwise the messages of the added commits are the same as their counterparts from git svn,\nexcept occasionally for an added or missed empty line when the svn commit message ends in new line.\n\nNormally the added git commits and their git-svn counterparts have no differences between their working trees.\nHowever such differences can occur, for example occasionally file modes are different in the git working tree.\nSee also the documentation of git-svn reset and the limitations below.\nIn order not to interfere with git-svn this script only adds commits to a temporary branch\nbranchname.svn, and the commit messages are chosen differently, they do not contain git-svn-id: .\n\nIn case an earlier branchname.svn exists, it will first be deleted if necessary,\nand restarted at the later branch.\nTherefore branchname.svn is temporary and should only be used locally.\n\nBy default, no more than 20 commits will be added to branchname.svn in a single run.\n\nThe earlier revision number is taken from the git-svn-id: message of git svn,\nor from the latest revision number in the commit message on branchname.svn,\nwhichever is later.\n\nThis allows branchname.svn to be used as a local git branch instead of branchname\nto develop new features locally, for example by merging branchname.svn into a feature branch.\n\nThis works by interpretation of the lines of svn update messages (U/A/D etc.)\nby copying these files and their protection bits from the local svn working copy into the git working tree,\nand by deleting files and directories in the git working tree.\n\nAn example commit in lucene-solr that adds a binary file, on which this script provides a correct git working tree:\nsvn revision 1707457\ngit-svn commit 3c0390f71e1f08a17f32bc207b4003362f8b6ac2\n\n\nLimitations:\n\nAll svn properties are ignored here.\nCommit messages added to the git repo occasionally do not have the same number of empty lines\nas the corresponding svn commit message.\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
string|'""" This was developed on Linux using the following program versions:\npython 2.7.6\npython 3.4.3\ngit 1.9.1\nsvn 1.8.8\nGNU bash, version 4.3.11(1)-release (x86_64-pc-linux-gnu)\nsed (GNU sed) 4.2.2\ngrep (GNU grep) 2.16\ndiff (GNU diffutils) 3.3\ncp (GNU coreutils) 8.21\nrm (GNU coreutils) 8.21\nmkdir (GNU coreutils) 8.21\n\ngitk (part of git) was used for manual testing:\n- delete branchname.svn, reset branchname.svn and branchname to earlier to simulate going back in history,\n- diff a commit generated here to a commit from git svn, ideally there are no differences,\n- update, reload, show commits in reverse order of commit date, ...\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'subprocess'
newline|'\n'
name|'import'
name|'shutil'
newline|'\n'
nl|'\n'
name|'from'
name|'xml'
name|'import'
name|'sax'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'sax'
op|'.'
name|'handler'
name|'import'
name|'ContentHandler'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'  '
name|'from'
name|'urllib'
op|'.'
name|'parse'
name|'import'
name|'urlparse'
comment|'# python 3'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'  '
name|'from'
name|'urlparse'
name|'import'
name|'urlparse'
comment|'# python 2'
newline|'\n'
nl|'\n'
dedent|''
name|'import'
name|'sys'
newline|'\n'
name|'binaryToString'
op|'='
name|'sys'
op|'.'
name|'version_info'
op|'>='
op|'('
number|'3'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|function|decodeBytesToString
name|'def'
name|'decodeBytesToString'
op|'('
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'  '
name|'return'
name|'bytes'
op|'.'
name|'decode'
op|'('
string|'"utf-8"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SvnInfoHandler
dedent|''
name|'class'
name|'SvnInfoHandler'
op|'('
name|'ContentHandler'
op|')'
op|':'
newline|'\n'
DECL|variable|commitTag
indent|'  '
name|'commitTag'
op|'='
string|'"commit"'
newline|'\n'
DECL|variable|revisionAttr
name|'revisionAttr'
op|'='
string|'"revision"'
newline|'\n'
nl|'\n'
DECL|variable|urlTag
name|'urlTag'
op|'='
string|'"url"'
newline|'\n'
DECL|variable|uuidTag
name|'uuidTag'
op|'='
string|'"uuid"'
newline|'\n'
DECL|variable|charCollectTags
name|'charCollectTags'
op|'='
op|'('
name|'urlTag'
op|','
name|'uuidTag'
op|')'
comment|'# also used as SvnInfoHandler attributes'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'lastChangeRev'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'lastLogEntry'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'tag'
name|'in'
name|'self'
op|'.'
name|'charCollectTags'
op|':'
newline|'\n'
indent|'      '
name|'setattr'
op|'('
name|'self'
op|','
name|'tag'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'chars'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|startElement
dedent|''
name|'def'
name|'startElement'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'attrs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'name'
op|'=='
name|'self'
op|'.'
name|'commitTag'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'lastChangeRev'
op|'='
name|'int'
op|'('
name|'attrs'
op|'.'
name|'getValue'
op|'('
name|'self'
op|'.'
name|'revisionAttr'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'name'
name|'in'
name|'self'
op|'.'
name|'charCollectTags'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'chars'
op|'='
string|'""'
newline|'\n'
nl|'\n'
DECL|member|characters
dedent|''
dedent|''
name|'def'
name|'characters'
op|'('
name|'self'
op|','
name|'content'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'self'
op|'.'
name|'chars'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'chars'
op|'+='
name|'content'
newline|'\n'
nl|'\n'
DECL|member|endElement
dedent|''
dedent|''
name|'def'
name|'endElement'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'name'
name|'in'
name|'self'
op|'.'
name|'charCollectTags'
op|':'
newline|'\n'
indent|'      '
name|'chars'
op|'='
name|'self'
op|'.'
name|'chars'
newline|'\n'
name|'setattr'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'chars'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'chars'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|getLastChangeRevision
dedent|''
dedent|''
name|'def'
name|'getLastChangeRevision'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'self'
op|'.'
name|'lastChangeRev'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SvnLogEntry
dedent|''
dedent|''
name|'class'
name|'SvnLogEntry'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'  '
name|'pass'
comment|'# attributes set in SvnLogHandler: revision, author, date, msg'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SvnLogHandler
dedent|''
name|'class'
name|'SvnLogHandler'
op|'('
name|'ContentHandler'
op|')'
op|':'
comment|"# collect list of SvnLogEntry's"
newline|'\n'
DECL|variable|logEntryTag
indent|'  '
name|'logEntryTag'
op|'='
string|'"logentry"'
newline|'\n'
DECL|variable|revisionAttr
name|'revisionAttr'
op|'='
string|'"revision"'
comment|'# also used as SvnLogEntry attribute'
newline|'\n'
DECL|variable|authorTag
name|'authorTag'
op|'='
string|'"author"'
newline|'\n'
DECL|variable|dateTag
name|'dateTag'
op|'='
string|'"date"'
newline|'\n'
DECL|variable|msgTag
name|'msgTag'
op|'='
string|'"msg"'
newline|'\n'
DECL|variable|charCollectTags
name|'charCollectTags'
op|'='
op|'('
name|'authorTag'
op|','
name|'dateTag'
op|','
name|'msgTag'
op|')'
comment|'# also used as SvnLogEntry attributes'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'logEntries'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'chars'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|startElement
dedent|''
name|'def'
name|'startElement'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'attrs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'name'
op|'=='
name|'self'
op|'.'
name|'logEntryTag'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'lastLogEntry'
op|'='
name|'SvnLogEntry'
op|'('
op|')'
newline|'\n'
name|'setattr'
op|'('
name|'self'
op|'.'
name|'lastLogEntry'
op|','
name|'self'
op|'.'
name|'revisionAttr'
op|','
name|'int'
op|'('
name|'attrs'
op|'.'
name|'getValue'
op|'('
name|'self'
op|'.'
name|'revisionAttr'
op|')'
op|')'
op|')'
newline|'\n'
name|'for'
name|'tag'
name|'in'
name|'self'
op|'.'
name|'charCollectTags'
op|':'
newline|'\n'
indent|'        '
name|'setattr'
op|'('
name|'self'
op|'.'
name|'lastLogEntry'
op|','
name|'tag'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'name'
name|'in'
name|'self'
op|'.'
name|'charCollectTags'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'chars'
op|'='
string|'""'
newline|'\n'
nl|'\n'
DECL|member|characters
dedent|''
dedent|''
name|'def'
name|'characters'
op|'('
name|'self'
op|','
name|'content'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'self'
op|'.'
name|'chars'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'chars'
op|'+='
name|'content'
newline|'\n'
nl|'\n'
DECL|member|endElement
dedent|''
dedent|''
name|'def'
name|'endElement'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'name'
name|'in'
name|'self'
op|'.'
name|'charCollectTags'
op|':'
newline|'\n'
indent|'      '
name|'chars'
op|'='
name|'self'
op|'.'
name|'chars'
newline|'\n'
name|'setattr'
op|'('
name|'self'
op|'.'
name|'lastLogEntry'
op|','
name|'name'
op|','
name|'chars'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'chars'
op|'='
name|'None'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'name'
op|'=='
name|'self'
op|'.'
name|'logEntryTag'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'logEntries'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'lastLogEntry'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'lastLogEntry'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|getLogEntries
dedent|''
dedent|''
name|'def'
name|'getLogEntries'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'self'
op|'.'
name|'logEntries'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SubProcessAtPath
dedent|''
dedent|''
name|'class'
name|'SubProcessAtPath'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'  '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'pathName'
op|','
name|'verbose'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'pathName'
op|'='
name|'pathName'
newline|'\n'
name|'self'
op|'.'
name|'verbose'
op|'='
name|'verbose'
newline|'\n'
nl|'\n'
DECL|member|getPathName
dedent|''
name|'def'
name|'getPathName'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'self'
op|'.'
name|'pathName'
newline|'\n'
nl|'\n'
DECL|member|chDirToPath
dedent|''
name|'def'
name|'chDirToPath'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'self'
op|'.'
name|'pathName'
op|'!='
name|'os'
op|'.'
name|'getcwd'
op|'('
op|')'
op|':'
newline|'\n'
indent|'      '
name|'os'
op|'.'
name|'chdir'
op|'('
name|'self'
op|'.'
name|'pathName'
op|')'
newline|'\n'
name|'assert'
name|'self'
op|'.'
name|'pathName'
op|'=='
name|'os'
op|'.'
name|'getcwd'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'+'
string|'"("'
op|'+'
name|'self'
op|'.'
name|'pathName'
op|'+'
string|'")"'
newline|'\n'
nl|'\n'
DECL|member|checkCall
dedent|''
name|'def'
name|'checkCall'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwArgs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'chDirToPath'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'verbose'
op|':'
newline|'\n'
indent|'      '
name|'print'
op|'('
string|'"check_call args:"'
op|','
string|'" "'
op|'.'
name|'join'
op|'('
op|'*'
name|'args'
op|')'
op|','
name|'str'
op|'('
op|'**'
name|'kwArgs'
op|')'
op|')'
newline|'\n'
dedent|''
name|'subprocess'
op|'.'
name|'check_call'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwArgs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|checkOutput
dedent|''
name|'def'
name|'checkOutput'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwArgs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'chDirToPath'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'verbose'
op|':'
newline|'\n'
indent|'      '
name|'print'
op|'('
string|'"check_output args:"'
op|','
string|'" "'
op|'.'
name|'join'
op|'('
op|'*'
name|'args'
op|')'
op|','
name|'str'
op|'('
op|'**'
name|'kwArgs'
op|')'
op|')'
newline|'\n'
dedent|''
name|'result'
op|'='
name|'subprocess'
op|'.'
name|'check_output'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwArgs'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'verbose'
op|':'
newline|'\n'
indent|'      '
name|'print'
op|'('
string|'"check_output result:"'
op|','
name|'result'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|checkOutputAsStr
dedent|''
name|'def'
name|'checkOutputAsStr'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwArgs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'chDirToPath'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'verbose'
op|':'
newline|'\n'
indent|'      '
name|'print'
op|'('
string|'"check_output args:"'
op|','
string|'" "'
op|'.'
name|'join'
op|'('
op|'*'
name|'args'
op|')'
op|','
name|'str'
op|'('
op|'**'
name|'kwArgs'
op|')'
op|')'
newline|'\n'
dedent|''
name|'result'
op|'='
name|'subprocess'
op|'.'
name|'check_output'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwArgs'
op|')'
newline|'\n'
name|'if'
name|'binaryToString'
op|':'
newline|'\n'
indent|'      '
name|'result'
op|'='
name|'decodeBytesToString'
op|'('
name|'result'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'verbose'
op|':'
newline|'\n'
indent|'      '
name|'print'
op|'('
string|'"check_output result:"'
op|','
name|'result'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|function|nonEmptyLines
dedent|''
dedent|''
name|'def'
name|'nonEmptyLines'
op|'('
name|'text'
op|')'
op|':'
newline|'\n'
indent|'  '
name|'return'
op|'['
name|'line'
name|'for'
name|'line'
name|'in'
name|'text'
op|'.'
name|'split'
op|'('
string|'"\\n"'
op|')'
name|'if'
name|'len'
op|'('
name|'line'
op|')'
op|'>'
number|'0'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SvnWorkingCopy
dedent|''
name|'class'
name|'SvnWorkingCopy'
op|'('
name|'SubProcessAtPath'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'  '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'pathName'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'SubProcessAtPath'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'pathName'
op|','
name|'verbose'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'url'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'uuid'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|svnCmd
dedent|''
name|'svnCmd'
op|'='
string|'"svn"'
newline|'\n'
nl|'\n'
DECL|member|ensureNoLocalModifications
name|'def'
name|'ensureNoLocalModifications'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'localMods'
op|'='
name|'self'
op|'.'
name|'checkOutputAsStr'
op|'('
op|'('
name|'self'
op|'.'
name|'svnCmd'
op|','
string|'"status"'
op|')'
op|')'
newline|'\n'
name|'if'
name|'localMods'
op|':'
newline|'\n'
indent|'      '
name|'errorExit'
op|'('
name|'self'
op|','
string|'"should not have local modifications:\\n"'
op|','
name|'localMods'
op|')'
newline|'\n'
nl|'\n'
DECL|member|updateOutput
dedent|''
dedent|''
name|'def'
name|'updateOutput'
op|'('
name|'self'
op|','
name|'revision'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'result'
op|'='
name|'self'
op|'.'
name|'checkOutputAsStr'
op|'('
op|'('
name|'self'
op|'.'
name|'svnCmd'
op|','
string|'"update"'
op|','
string|'"-r"'
op|','
name|'str'
op|'('
name|'revision'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|switch
dedent|''
name|'def'
name|'switch'
op|'('
name|'self'
op|','
name|'repoBranchName'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'checkCall'
op|'('
op|'('
name|'self'
op|'.'
name|'svnCmd'
op|','
string|'"switch"'
op|','
op|'('
string|'"^/"'
op|'+'
name|'repoBranchName'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|parseInfo
dedent|''
name|'def'
name|'parseInfo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'infoXml'
op|'='
name|'self'
op|'.'
name|'checkOutput'
op|'('
op|'('
name|'self'
op|'.'
name|'svnCmd'
op|','
string|'"info"'
op|','
string|'"--xml"'
op|')'
op|')'
comment|'# bytes in python 3.'
newline|'\n'
name|'infoHandler'
op|'='
name|'SvnInfoHandler'
op|'('
op|')'
newline|'\n'
name|'sax'
op|'.'
name|'parseString'
op|'('
name|'infoXml'
op|','
name|'infoHandler'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'uuid'
op|'='
name|'infoHandler'
op|'.'
name|'uuid'
newline|'\n'
name|'self'
op|'.'
name|'url'
op|'='
name|'infoHandler'
op|'.'
name|'url'
newline|'\n'
name|'self'
op|'.'
name|'lastChangeRev'
op|'='
name|'infoHandler'
op|'.'
name|'getLastChangeRevision'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|getUrl
dedent|''
name|'def'
name|'getUrl'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'self'
op|'.'
name|'url'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'parseInfo'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'url'
newline|'\n'
nl|'\n'
DECL|member|getUuid
dedent|''
name|'def'
name|'getUuid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'self'
op|'.'
name|'uuid'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'parseInfo'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'uuid'
newline|'\n'
nl|'\n'
DECL|member|lastChangedRevision
dedent|''
name|'def'
name|'lastChangedRevision'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'parseInfo'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'lastChangeRev'
newline|'\n'
nl|'\n'
DECL|member|getLogEntries
dedent|''
name|'def'
name|'getLogEntries'
op|'('
name|'self'
op|','
name|'fromRevision'
op|','
name|'toRevision'
op|','
name|'maxNumLogEntries'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'revRange'
op|'='
name|'self'
op|'.'
name|'revisionsRange'
op|'('
name|'fromRevision'
op|','
name|'toRevision'
op|')'
newline|'\n'
name|'logXml'
op|'='
name|'self'
op|'.'
name|'checkOutput'
op|'('
op|'('
name|'self'
op|'.'
name|'svnCmd'
op|','
string|'"log"'
op|','
string|'"-r"'
op|','
name|'revRange'
op|','
string|'"--xml"'
op|','
string|'"-l"'
op|','
name|'str'
op|'('
name|'maxNumLogEntries'
op|')'
op|')'
op|')'
newline|'\n'
name|'logHandler'
op|'='
name|'SvnLogHandler'
op|'('
op|')'
newline|'\n'
name|'sax'
op|'.'
name|'parseString'
op|'('
name|'logXml'
op|','
name|'logHandler'
op|')'
newline|'\n'
name|'return'
name|'logHandler'
op|'.'
name|'getLogEntries'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|revisionsRange
dedent|''
name|'def'
name|'revisionsRange'
op|'('
name|'self'
op|','
name|'fromRevision'
op|','
name|'toRevision'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'str'
op|'('
name|'fromRevision'
op|')'
op|'+'
string|'":"'
op|'+'
name|'str'
op|'('
name|'toRevision'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|GitRepository
dedent|''
dedent|''
name|'class'
name|'GitRepository'
op|'('
name|'SubProcessAtPath'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'  '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'pathName'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'SubProcessAtPath'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'pathName'
op|','
name|'verbose'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'currentBranch'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|gitCmd
dedent|''
name|'gitCmd'
op|'='
string|'"git"'
newline|'\n'
nl|'\n'
DECL|member|checkOutBranch
name|'def'
name|'checkOutBranch'
op|'('
name|'self'
op|','
name|'branchName'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'checkCall'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"checkout"'
op|','
name|'branchName'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'currentBranch'
op|'='
name|'branchName'
newline|'\n'
nl|'\n'
DECL|member|getCurrentBranch
dedent|''
name|'def'
name|'getCurrentBranch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'self'
op|'.'
name|'currentBranch'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'      '
name|'gitStatusOut'
op|'='
name|'self'
op|'.'
name|'checkOutputAsStr'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"status"'
op|')'
op|')'
newline|'\n'
name|'if'
name|'gitStatusOut'
op|'.'
name|'startswith'
op|'('
string|'"On branch "'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'currentBranch'
op|'='
name|'gitStatusOut'
op|'.'
name|'split'
op|'('
op|')'
op|'['
number|'2'
op|']'
comment|'# works also without () ???'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'errorExit'
op|'('
name|'self'
op|','
string|'"not on a branch:"'
op|','
name|'gitStatusOut'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'currentBranch'
newline|'\n'
nl|'\n'
DECL|member|workingDirectoryClean
dedent|''
name|'def'
name|'workingDirectoryClean'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'gitStatusOut'
op|'='
name|'self'
op|'.'
name|'checkOutputAsStr'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"status"'
op|')'
op|')'
newline|'\n'
name|'expSubString'
op|'='
string|'"nothing to commit, working directory clean"'
newline|'\n'
name|'return'
name|'gitStatusOut'
op|'.'
name|'find'
op|'('
name|'expSubString'
op|')'
op|'>='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|listBranches
dedent|''
name|'def'
name|'listBranches'
op|'('
name|'self'
op|','
name|'pattern'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'result'
op|'='
name|'self'
op|'.'
name|'checkOutputAsStr'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"branch"'
op|','
string|'"--list"'
op|','
name|'pattern'
op|')'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|branchExists
dedent|''
name|'def'
name|'branchExists'
op|'('
name|'self'
op|','
name|'branchName'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'listOut'
op|'='
name|'self'
op|'.'
name|'listBranches'
op|'('
name|'branchName'
op|')'
comment|'# CHECKME: using branchName as pattern may not always be ok.'
newline|'\n'
name|'return'
name|'len'
op|'('
name|'listOut'
op|')'
op|'>'
number|'0'
newline|'\n'
nl|'\n'
DECL|member|deleteBranch
dedent|''
name|'def'
name|'deleteBranch'
op|'('
name|'self'
op|','
name|'branchName'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'checkCall'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"branch"'
op|','
string|'"-D"'
op|','
name|'branchName'
op|')'
op|')'
newline|'\n'
name|'if'
name|'branchName'
op|'=='
name|'self'
op|'.'
name|'currentBranch'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'currentBranch'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|createBranch
dedent|''
dedent|''
name|'def'
name|'createBranch'
op|'('
name|'self'
op|','
name|'branchName'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'checkCall'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"branch"'
op|','
name|'branchName'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|fetch
dedent|''
name|'def'
name|'fetch'
op|'('
name|'self'
op|','
name|'upStream'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'checkCall'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"fetch"'
op|','
name|'upStream'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|merge
dedent|''
name|'def'
name|'merge'
op|'('
name|'self'
op|','
name|'branch'
op|','
name|'fromBranch'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'checkCall'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"merge"'
op|','
name|'branch'
op|','
name|'fromBranch'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getCommitMessage
dedent|''
name|'def'
name|'getCommitMessage'
op|'('
name|'self'
op|','
name|'commitRef'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'result'
op|'='
name|'self'
op|'.'
name|'checkOutputAsStr'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"log"'
op|','
string|'"--format=%B"'
op|','
string|'"-n"'
op|','
string|'"1"'
op|','
name|'commitRef'
op|')'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|getCommitAuthorName
dedent|''
name|'def'
name|'getCommitAuthorName'
op|'('
name|'self'
op|','
name|'commitRef'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'result'
op|'='
name|'self'
op|'.'
name|'checkOutputAsStr'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"log"'
op|','
string|'"--format=%aN"'
op|','
string|'"-n"'
op|','
string|'"1"'
op|','
name|'commitRef'
op|')'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|getCommitAuthorEmail
dedent|''
name|'def'
name|'getCommitAuthorEmail'
op|'('
name|'self'
op|','
name|'commitRef'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'result'
op|'='
name|'self'
op|'.'
name|'checkOutputAsStr'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"log"'
op|','
string|'"--format=%aE"'
op|','
string|'"-n"'
op|','
string|'"1"'
op|','
name|'commitRef'
op|')'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|getLatestCommitForAuthor
dedent|''
name|'def'
name|'getLatestCommitForAuthor'
op|'('
name|'self'
op|','
name|'svnAuthor'
op|')'
op|':'
newline|'\n'
comment|'# print(\'Get git commit for author "%s, type=%s"\' % (svnAuthor, str(type(svnAuthor))))'
nl|'\n'
indent|'    '
name|'authorCommit'
op|'='
name|'self'
op|'.'
name|'checkOutputAsStr'
op|'('
nl|'\n'
string|'" "'
op|'.'
name|'join'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"rev-list"'
op|','
string|'"--all"'
op|','
string|'"-i"'
op|','
op|'('
string|'"--author="'
op|'+'
name|'svnAuthor'
op|')'
op|','
comment|'# see git commit documentation on --author'
nl|'\n'
string|'"|"'
op|','
comment|'# pipe should have a buffer for at most a few commit ids.'
nl|'\n'
string|'"head"'
op|','
string|'"-1"'
comment|'# the first line'
nl|'\n'
op|')'
op|')'
op|','
nl|'\n'
name|'shell'
op|'='
name|'True'
op|')'
comment|'# use shell pipe'
newline|'\n'
name|'authorCommit'
op|'='
name|'authorCommit'
op|'.'
name|'rstrip'
op|'('
string|'"\\n"'
op|')'
newline|'\n'
name|'return'
name|'authorCommit'
newline|'\n'
nl|'\n'
DECL|variable|gitSvnMarker
dedent|''
name|'gitSvnMarker'
op|'='
string|'"git-svn-id:"'
comment|'# added and used by git svn dcommit'
newline|'\n'
DECL|variable|svn2gitMarker
name|'svn2gitMarker'
op|'='
string|'"svn2git-id:"'
comment|'# added and used here.'
newline|'\n'
nl|'\n'
DECL|member|getSvnRemoteUuidRevisionFromCommitMessage
name|'def'
name|'getSvnRemoteUuidRevisionFromCommitMessage'
op|'('
name|'self'
op|','
name|'commitMessage'
op|','
name|'marker'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'words'
op|'='
name|'commitMessage'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'marker'
name|'in'
name|'words'
op|':'
newline|'\n'
indent|'      '
name|'return'
op|'('
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'svnId'
op|'='
name|'words'
op|'['
name|'words'
op|'.'
name|'index'
op|'('
name|'marker'
op|')'
op|'+'
number|'1'
op|']'
newline|'\n'
name|'splitSvnId'
op|'='
name|'svnId'
op|'.'
name|'split'
op|'('
string|'"@"'
op|')'
newline|'\n'
name|'svnRemote'
op|'='
name|'splitSvnId'
op|'['
number|'0'
op|']'
newline|'\n'
name|'svnRevision'
op|'='
name|'int'
op|'('
name|'splitSvnId'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'svnRepoUuid'
op|'='
name|'words'
op|'['
name|'words'
op|'.'
name|'index'
op|'('
name|'marker'
op|')'
op|'+'
number|'2'
op|']'
newline|'\n'
name|'return'
op|'('
name|'svnRemote'
op|','
name|'svnRepoUuid'
op|','
name|'svnRevision'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getSvnRemoteAndUuidAndRevision
dedent|''
name|'def'
name|'getSvnRemoteAndUuidAndRevision'
op|'('
name|'self'
op|','
name|'gitSvnCommitRef'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'gitSvnCommitMessage'
op|'='
name|'self'
op|'.'
name|'getCommitMessage'
op|'('
name|'gitSvnCommitRef'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'getSvnRemoteUuidRevisionFromCommitMessage'
op|'('
name|'gitSvnCommitMessage'
op|','
name|'self'
op|'.'
name|'gitSvnMarker'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lastTempGitSvnRevision
dedent|''
name|'def'
name|'lastTempGitSvnRevision'
op|'('
name|'self'
op|','
name|'tempBranchCommitRef'
op|')'
op|':'
comment|'# at a commit generated here on the temp branch.'
newline|'\n'
indent|'    '
name|'gitCommitMessage'
op|'='
name|'self'
op|'.'
name|'getCommitMessage'
op|'('
name|'tempBranchCommitRef'
op|')'
newline|'\n'
op|'('
name|'svnRemote'
op|','
name|'svnRepoUuid'
op|','
name|'svnRevision'
op|')'
op|'='
name|'self'
op|'.'
name|'getSvnRemoteUuidRevisionFromCommitMessage'
op|'('
name|'gitCommitMessage'
op|','
name|'self'
op|'.'
name|'svn2gitMarker'
op|')'
newline|'\n'
name|'return'
name|'svnRevision'
newline|'\n'
nl|'\n'
DECL|member|addAllToIndex
dedent|''
name|'def'
name|'addAllToIndex'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'checkCall'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"add"'
op|','
string|'"-A"'
op|','
name|'self'
op|'.'
name|'getPathName'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|commit
dedent|''
name|'def'
name|'commit'
op|'('
name|'self'
op|','
name|'message'
op|','
nl|'\n'
name|'authorName'
op|','
name|'authorEmail'
op|','
name|'authorDate'
op|','
nl|'\n'
name|'committerName'
op|','
name|'committerEmail'
op|','
name|'committerDate'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'author'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
op|'('
name|'authorName'
op|','
string|'" <"'
op|','
name|'authorEmail'
op|','
string|'">"'
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'environ'
op|'['
string|'"GIT_COMMITTER_NAME"'
op|']'
op|'='
name|'committerName'
comment|'# no need to save/restore earlier environment state.'
newline|'\n'
name|'os'
op|'.'
name|'environ'
op|'['
string|'"GIT_COMMITTER_EMAIL"'
op|']'
op|'='
name|'committerEmail'
newline|'\n'
name|'os'
op|'.'
name|'environ'
op|'['
string|'"GIT_COMMITTER_DATE"'
op|']'
op|'='
name|'committerDate'
newline|'\n'
name|'self'
op|'.'
name|'checkCall'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"commit"'
op|','
nl|'\n'
string|'"--allow-empty"'
op|','
comment|'# in case only svn poperties changed.'
nl|'\n'
op|'('
string|'"--message="'
op|'+'
name|'message'
op|')'
op|','
nl|'\n'
op|'('
string|'"--author="'
op|'+'
name|'author'
op|')'
op|','
nl|'\n'
op|'('
string|'"--date="'
op|'+'
name|'authorDate'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cleanDirsForced
dedent|''
name|'def'
name|'cleanDirsForced'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'checkCall'
op|'('
op|'('
name|'self'
op|'.'
name|'gitCmd'
op|','
string|'"clean"'
op|','
string|'"-fd"'
op|')'
op|')'
comment|'# Use -fdx to also remove ignored files.'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|errorExit
dedent|''
dedent|''
name|'def'
name|'errorExit'
op|'('
op|'*'
name|'messageParts'
op|')'
op|':'
newline|'\n'
indent|'  '
name|'raise'
name|'RuntimeError'
op|'('
string|'" "'
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'str'
op|','
name|'messageParts'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|allSuccessivePairs
dedent|''
name|'def'
name|'allSuccessivePairs'
op|'('
name|'lst'
op|')'
op|':'
newline|'\n'
indent|'  '
name|'return'
op|'['
name|'lst'
op|'['
name|'i'
op|':'
name|'i'
op|'+'
number|'2'
op|']'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'len'
op|'('
name|'lst'
op|')'
op|'-'
number|'1'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|function|octal
dedent|''
name|'def'
name|'octal'
op|'('
name|'mode'
op|')'
op|':'
newline|'\n'
indent|'  '
name|'return'
name|'format'
op|'('
name|'mode'
op|','
string|"'o'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|checkEqualProtectionBits
dedent|''
name|'def'
name|'checkEqualProtectionBits'
op|'('
name|'fn1'
op|','
name|'fn2'
op|')'
op|':'
newline|'\n'
indent|'  '
name|'stat1'
op|'='
name|'os'
op|'.'
name|'stat'
op|'('
name|'fn1'
op|')'
newline|'\n'
name|'stat2'
op|'='
name|'os'
op|'.'
name|'stat'
op|'('
name|'fn2'
op|')'
newline|'\n'
name|'if'
name|'stat1'
op|'.'
name|'st_mode'
op|'!='
name|'stat2'
op|'.'
name|'st_mode'
op|':'
newline|'\n'
indent|'    '
name|'print'
op|'('
string|'"Protection bits %s of %s"'
op|'%'
op|'('
name|'octal'
op|'('
name|'stat1'
op|'.'
name|'st_mode'
op|')'
op|','
name|'fn1'
op|')'
op|')'
newline|'\n'
name|'print'
op|'('
string|'"Protection bits %s of %s"'
op|'%'
op|'('
name|'octal'
op|'('
name|'stat2'
op|'.'
name|'st_mode'
op|')'
op|','
name|'fn2'
op|')'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|verifyGitFilesAgainstSvn
dedent|''
name|'def'
name|'verifyGitFilesAgainstSvn'
op|'('
name|'gitRepo'
op|','
name|'svnWorkingCopy'
op|')'
op|':'
newline|'\n'
comment|'# The files under version control at the git repo can be enumerated quickly by: git ls-tree -r trunk.svn | cut  --fields=2-'
nl|'\n'
comment|'# This makes sense because all files, including binary files, are added.'
nl|'\n'
comment|'# svn ls -R  is too slow to use here (this lists about 12 file names per second, lucene-solr has well over 4000).'
nl|'\n'
indent|'  '
name|'fileNamesOut'
op|'='
name|'gitRepo'
op|'.'
name|'checkOutputAsStr'
op|'('
op|'('
name|'gitRepo'
op|'.'
name|'gitCmd'
op|','
string|'"ls-tree"'
op|','
string|'"-r"'
op|','
string|'"--name-only"'
op|','
name|'gitRepo'
op|'.'
name|'getCurrentBranch'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'fileNames'
op|'='
name|'nonEmptyLines'
op|'('
name|'fileNamesOut'
op|')'
newline|'\n'
name|'print'
op|'('
string|'"verifyGitFilesAgainstSvn checking"'
op|','
name|'len'
op|'('
name|'fileNames'
op|')'
op|','
string|'"files"'
op|')'
newline|'\n'
name|'result'
op|'='
name|'True'
newline|'\n'
name|'for'
name|'fileName'
name|'in'
name|'fileNames'
op|':'
newline|'\n'
comment|'#print("fileName", fileName)'
nl|'\n'
indent|'    '
name|'fileNameInGitRepo'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'gitRepo'
op|'.'
name|'getPathName'
op|'('
op|')'
op|','
name|'fileName'
op|')'
newline|'\n'
comment|'#print("fileNameInGitRepo", fileNameInGitRepo)'
nl|'\n'
name|'fileNameInSvnWorkingCopy'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'svnWorkingCopy'
op|'.'
name|'getPathName'
op|'('
op|')'
op|','
name|'fileName'
op|')'
newline|'\n'
comment|'#print("fileNameInSvnWorkingCopy", fileNameInSvnWorkingCopy)'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'diffOutput'
op|'='
name|'subprocess'
op|'.'
name|'check_output'
op|'('
op|'('
string|'"diff"'
op|','
string|'"-q"'
op|','
name|'fileNameInGitRepo'
op|','
name|'fileNameInSvnWorkingCopy'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'subprocess'
op|'.'
name|'CalledProcessError'
op|','
name|'exitError'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'print'
op|'('
string|'"difference in file"'
op|','
name|'fileName'
op|')'
newline|'\n'
name|'print'
op|'('
string|'"diff exitError"'
op|','
name|'exitError'
op|')'
newline|'\n'
name|'result'
op|'='
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'checkEqualProtectionBits'
op|'('
name|'fileNameInSvnWorkingCopy'
op|','
name|'fileNameInGitRepo'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'result'
op|'='
name|'False'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'result'
op|':'
newline|'\n'
indent|'    '
name|'print'
op|'('
string|'"no differences"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'print'
op|'('
string|'"some differences"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
string|'"""\nOn clean checkouts of both svn and git the command:\n  diff -r svndir gitdir\n\nreports only .svn .git and empty directories in the svn working copy, for example:\n\n  Only in ./svnwork/lucene-solr/lucene/analysis/icu: lib\n\nThis diff output could be checked here.\nTo clean an svn working copy:\n\n  rm -r * # also .hgignore .caches, all except .svn\n  svn update # this is a local svn operation\n\nTo clean a git working directory:\n\n  rm -r * # all except .git\n  git checkout branchname -- .\n\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|deleteEmptyDirs
name|'def'
name|'deleteEmptyDirs'
op|'('
name|'pathName'
op|','
name|'topDirName'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'""" Delete higher level directories of pathName when empty, but do not delete topDirName """'
newline|'\n'
name|'head'
op|','
name|'tail'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'split'
op|'('
name|'pathName'
op|')'
newline|'\n'
name|'while'
op|'('
name|'head'
op|'!='
name|'topDirName'
op|')'
name|'and'
name|'not'
name|'os'
op|'.'
name|'listdir'
op|'('
name|'head'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'assert'
name|'head'
op|'.'
name|'startswith'
op|'('
name|'topDirName'
op|')'
comment|'# , topDirName + " <<>> " + head'
newline|'\n'
comment|'# subprocess.check_call(("rm", "-r", head)) # delete empty directory'
nl|'\n'
name|'os'
op|'.'
name|'rmdir'
op|'('
name|'head'
op|')'
newline|'\n'
name|'head'
op|','
name|'tail'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'split'
op|'('
name|'head'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|setGitWorkingTreeViaSvnCheckout
dedent|''
dedent|''
name|'def'
name|'setGitWorkingTreeViaSvnCheckout'
op|'('
name|'svnWorkingCopy'
op|','
name|'revision'
op|','
name|'gitRepo'
op|')'
op|':'
newline|'\n'
indent|'  '
name|'svnUpdateOutputLines'
op|'='
name|'svnWorkingCopy'
op|'.'
name|'updateOutput'
op|'('
name|'revision'
op|')'
newline|'\n'
string|'""" Some example lines:\nU    solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest.java\n U   solr/core\nUpdated to revision 1707390.\n\nFrom svn help update:\n\n  For each updated item a line will be printed with characters reporting\n  the action taken. These characters have the following meaning:\n\n    A  Added\n    D  Deleted\n    U  Updated\n    C  Conflict\n    G  Merged\n    E  Existed\n    R  Replaced\n\n  Characters in the first column report about the item itself.\n  Characters in the second column report about properties of the item.\n  A \'B\' in the third column signifies that the lock for the file has\n  been broken or stolen.\n  A \'C\' in the fourth column indicates a tree conflict, while a \'C\' in\n  the first and second columns indicate textual conflicts in files\n  and in property values, respectively.\n\n  """'
newline|'\n'
name|'for'
name|'svnUpdateLine'
name|'in'
name|'nonEmptyLines'
op|'('
name|'svnUpdateOutputLines'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
name|'if'
name|'svnUpdateLine'
op|'.'
name|'startswith'
op|'('
string|'"Updating "'
op|')'
op|':'
comment|'# first line'
newline|'\n'
indent|'      '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'svnUpdateLine'
op|'.'
name|'startswith'
op|'('
string|'"Updated to"'
op|')'
op|':'
comment|'# last line'
newline|'\n'
DECL|variable|revisionStr
indent|'      '
name|'revisionStr'
op|'='
name|'svnUpdateLine'
op|'.'
name|'split'
op|'('
op|')'
op|'['
number|'3'
op|']'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
name|'assert'
name|'revision'
op|'=='
name|'int'
op|'('
name|'revisionStr'
op|')'
op|','
name|'revisionStr'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'print'
op|'('
name|'svnUpdateLine'
op|')'
newline|'\n'
DECL|variable|itemChar
name|'itemChar'
op|'='
name|'svnUpdateLine'
op|'['
number|'0'
op|']'
newline|'\n'
DECL|variable|itemPropChar
name|'itemPropChar'
op|'='
name|'svnUpdateLine'
op|'['
number|'1'
op|']'
newline|'\n'
DECL|variable|lockChar
name|'lockChar'
op|'='
name|'svnUpdateLine'
op|'['
number|'2'
op|']'
newline|'\n'
DECL|variable|treeConflictChar
name|'treeConflictChar'
op|'='
name|'svnUpdateLine'
op|'['
number|'3'
op|']'
newline|'\n'
DECL|variable|fileName
name|'fileName'
op|'='
name|'svnUpdateLine'
op|'['
number|'5'
op|':'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|validItemChars
name|'validItemChars'
op|'='
op|'('
string|'" "'
op|','
string|'"A"'
op|','
string|'"D"'
op|','
string|'"U"'
op|')'
newline|'\n'
name|'assert'
name|'itemChar'
name|'in'
name|'validItemChars'
op|','
string|'"revision %d itemChar %s, fileName %s"'
op|'%'
op|'('
name|'revision'
op|','
name|'itemChar'
op|','
name|'fileName'
op|')'
newline|'\n'
name|'assert'
name|'itemPropChar'
name|'in'
name|'validItemChars'
op|','
string|'"revision %d itemPropChar %s, working copy not clean fileName %s"'
op|'%'
op|'('
name|'revision'
op|','
name|'itemPropChar'
op|','
name|'fileName'
op|')'
newline|'\n'
name|'assert'
name|'lockChar'
op|'=='
string|'" "'
op|','
string|'"revision %d lockChar %s fileName %s"'
op|'%'
op|'('
name|'revision'
op|','
name|'lockChar'
op|','
name|'fileName'
op|')'
newline|'\n'
name|'assert'
name|'treeConflictChar'
op|'=='
string|'" "'
op|','
string|'"revision %d treeConflictChar %s fileName %s"'
op|'%'
op|'('
name|'revision'
op|','
name|'treeConflictChar'
op|','
name|'fileName'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|fileNameInGitRepo
name|'fileNameInGitRepo'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'gitRepo'
op|'.'
name|'getPathName'
op|'('
op|')'
op|','
name|'fileName'
op|')'
newline|'\n'
DECL|variable|setFileProtectionBits
name|'setFileProtectionBits'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'itemChar'
op|'=='
string|'"D"'
op|':'
comment|'# deleted in svn working copy'
newline|'\n'
indent|'      '
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'fileNameInGitRepo'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'print'
op|'('
string|'"Deleting directory %s"'
op|'%'
name|'fileNameInGitRepo'
op|')'
newline|'\n'
comment|'# subprocess.check_call(("rm", "-r", fileNameInGitRepo)) # delete in git working tree'
nl|'\n'
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'fileNameInGitRepo'
op|')'
comment|'# delete completely in git working tree'
newline|'\n'
name|'deleteEmptyDirs'
op|'('
name|'fileNameInGitRepo'
op|','
name|'gitRepo'
op|'.'
name|'getPathName'
op|'('
op|')'
op|')'
comment|'# delete empty dirs in git repo'
newline|'\n'
dedent|''
name|'elif'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isfile'
op|'('
name|'fileNameInGitRepo'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'print'
op|'('
string|'"Deleting file %s"'
op|'%'
name|'fileNameInGitRepo'
op|')'
newline|'\n'
comment|'# subprocess.check_call(("rm", fileNameInGitRepo)) # delete in git working tree'
nl|'\n'
name|'os'
op|'.'
name|'remove'
op|'('
name|'fileNameInGitRepo'
op|')'
newline|'\n'
name|'deleteEmptyDirs'
op|'('
name|'fileNameInGitRepo'
op|','
name|'gitRepo'
op|'.'
name|'getPathName'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'print'
op|'('
string|'"Non deleting non existing file %s"'
op|'%'
name|'fileName'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'itemChar'
name|'in'
op|'('
string|'"A"'
op|','
string|'"U"'
op|')'
op|':'
comment|'# added or updated in svn working copy'
newline|'\n'
DECL|variable|fileNameInSvnWorkingCopy
indent|'      '
name|'fileNameInSvnWorkingCopy'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'svnWorkingCopy'
op|'.'
name|'getPathName'
op|'('
op|')'
op|','
name|'fileName'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'fileNameInSvnWorkingCopy'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'fileNameInGitRepo'
op|')'
op|':'
newline|'\n'
indent|'          '
name|'print'
op|'('
string|'"Creating directory %s"'
op|'%'
name|'fileName'
op|')'
newline|'\n'
comment|'#subprocess.check_call(("mkdir", fileNameInGitRepo)) # new directory in git working tree'
nl|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'fileNameInGitRepo'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'          '
name|'print'
op|'('
string|'"Not creating existing directory %s"'
op|'%'
name|'fileName'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isfile'
op|'('
name|'fileNameInSvnWorkingCopy'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'head'
op|','
name|'tail'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'split'
op|'('
name|'fileNameInGitRepo'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'head'
op|')'
op|':'
newline|'\n'
indent|'          '
name|'print'
op|'('
string|'"Creating directory for file %s"'
op|'%'
name|'fileNameInGitRepo'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'mkdir'
op|'('
name|'head'
op|')'
newline|'\n'
comment|'# print("Copying file %s" % fileName # Common case)'
nl|'\n'
comment|'# subprocess.check_call(("cp", fileNameInSvnWorkingCopy, fileNameInGitRepo)) # copy into git working tree'
nl|'\n'
dedent|''
name|'shutil'
op|'.'
name|'copyfile'
op|'('
name|'fileNameInSvnWorkingCopy'
op|','
name|'fileNameInGitRepo'
op|')'
newline|'\n'
DECL|variable|setFileProtectionBits
name|'setFileProtectionBits'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'False'
op|','
string|'"Cannot add or update non existing file %s"'
op|'%'
name|'fileNameInSvnWorkingCopy'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'      '
name|'assert'
name|'itemChar'
op|'=='
string|'" "'
comment|'# nothing to do'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'itemPropChar'
op|'!='
string|'" "'
op|':'
newline|'\n'
indent|'      '
name|'print'
op|'('
string|'"At revision %d ignoring svn property change type %s for file %s"'
op|'%'
op|'('
name|'revision'
op|','
name|'itemPropChar'
op|','
name|'fileName'
op|')'
op|')'
newline|'\n'
DECL|variable|setFileProtectionBits
name|'setFileProtectionBits'
op|'='
name|'True'
comment|'# svn:executable may have been set or unset.'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'setFileProtectionBits'
op|':'
newline|'\n'
DECL|variable|statSvn
indent|'      '
name|'statSvn'
op|'='
name|'os'
op|'.'
name|'stat'
op|'('
name|'fileNameInSvnWorkingCopy'
op|')'
newline|'\n'
DECL|variable|statGit
name|'statGit'
op|'='
name|'os'
op|'.'
name|'stat'
op|'('
name|'fileNameInGitRepo'
op|')'
newline|'\n'
name|'if'
name|'statSvn'
op|'.'
name|'st_mode'
op|'!='
name|'statGit'
op|'.'
name|'st_mode'
op|':'
newline|'\n'
indent|'        '
name|'print'
op|'('
string|'"Changing mode from %s to %s for %s"'
op|'%'
op|'('
name|'octal'
op|'('
name|'statGit'
op|'.'
name|'st_mode'
op|')'
op|','
name|'octal'
op|'('
name|'statSvn'
op|'.'
name|'st_mode'
op|')'
op|','
name|'fileNameInGitRepo'
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'chmod'
op|'('
name|'fileNameInGitRepo'
op|','
name|'statSvn'
op|'.'
name|'st_mode'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|assertUrlsSameExceptScheme
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'assertUrlsSameExceptScheme'
op|'('
name|'url1'
op|','
name|'url2'
op|')'
op|':'
comment|'# may only differ by scheme http:// or https://'
newline|'\n'
indent|'  '
name|'scheme1'
op|','
name|'netloc1'
op|','
name|'path1'
op|','
name|'params1'
op|','
name|'query1'
op|','
name|'fragment1'
op|'='
name|'urlparse'
op|'('
name|'url1'
op|')'
newline|'\n'
name|'scheme2'
op|','
name|'netloc2'
op|','
name|'path2'
op|','
name|'params2'
op|','
name|'query2'
op|','
name|'fragment2'
op|'='
name|'urlparse'
op|'('
name|'url2'
op|')'
newline|'\n'
comment|'#print(scheme1, netloc1, path1, params1, query1, fragment1)'
nl|'\n'
comment|'#print(scheme2, netloc2, path2, params2, query2, fragment2)'
nl|'\n'
name|'assert'
name|'netloc1'
op|'=='
name|'netloc2'
newline|'\n'
name|'assert'
name|'path1'
op|'=='
name|'path2'
newline|'\n'
name|'assert'
name|'params1'
op|'=='
name|'params2'
newline|'\n'
name|'assert'
name|'query1'
op|'=='
name|'query2'
newline|'\n'
name|'assert'
name|'fragment1'
op|'=='
name|'fragment2'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|maintainTempGitSvnBranch
dedent|''
name|'def'
name|'maintainTempGitSvnBranch'
op|'('
name|'branchName'
op|','
name|'tempGitBranchName'
op|','
nl|'\n'
name|'svnWorkingCopyOfBranchPath'
op|','
name|'svnRepoBranchName'
op|','
nl|'\n'
name|'gitRepoPath'
op|','
name|'gitUpstream'
op|','
nl|'\n'
name|'maxCommits'
op|'='
number|'20'
op|','
comment|'# generate at most this number of commits on tempGitBranchName, rerun to add more.'
nl|'\n'
name|'testMode'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'  '
name|'assert'
name|'maxCommits'
op|'>='
number|'1'
newline|'\n'
nl|'\n'
name|'gitRepo'
op|'='
name|'GitRepository'
op|'('
name|'gitRepoPath'
op|')'
newline|'\n'
name|'gitRepo'
op|'.'
name|'checkOutBranch'
op|'('
name|'branchName'
op|')'
comment|'# fails with git message when working directory is not clean'
newline|'\n'
nl|'\n'
name|'svnWorkingCopy'
op|'='
name|'SvnWorkingCopy'
op|'('
name|'svnWorkingCopyOfBranchPath'
op|')'
newline|'\n'
name|'svnWorkingCopy'
op|'.'
name|'ensureNoLocalModifications'
op|'('
op|')'
newline|'\n'
name|'svnWorkingCopy'
op|'.'
name|'switch'
op|'('
name|'svnRepoBranchName'
op|')'
comment|'# switch to repo branch, update to latest revision'
newline|'\n'
nl|'\n'
name|'lastSvnRevision'
op|'='
name|'svnWorkingCopy'
op|'.'
name|'lastChangedRevision'
op|'('
op|')'
comment|'# int to allow comparison'
newline|'\n'
comment|'#print(svnWorkingCopy, "lastSvnRevision:", lastSvnRevision)'
nl|'\n'
nl|'\n'
name|'gitRepo'
op|'.'
name|'fetch'
op|'('
name|'gitUpstream'
op|')'
newline|'\n'
name|'if'
name|'testMode'
op|':'
newline|'\n'
indent|'    '
name|'pass'
comment|'# leave branch where it is, as if the last commits from upstream did not arrive'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'gitRepo'
op|'.'
name|'merge'
op|'('
name|'branchName'
op|','
name|'gitUpstream'
op|'+'
string|'"/"'
op|'+'
name|'branchName'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'('
name|'gitSvnRemote'
op|','
name|'gitSvnRepoUuid'
op|','
name|'lastSvnRevisionOnGitSvnBranch'
op|')'
op|'='
name|'gitRepo'
op|'.'
name|'getSvnRemoteAndUuidAndRevision'
op|'('
name|'branchName'
op|')'
newline|'\n'
name|'svnUrl'
op|'='
name|'svnWorkingCopy'
op|'.'
name|'getUrl'
op|'('
op|')'
newline|'\n'
name|'svnRepoUuid'
op|'='
name|'svnWorkingCopy'
op|'.'
name|'getUuid'
op|'('
op|')'
newline|'\n'
name|'print'
op|'('
string|'"gitSvnRemote:"'
op|','
name|'gitSvnRemote'
op|')'
newline|'\n'
name|'print'
op|'('
string|'"svnUrl:"'
op|','
name|'svnUrl'
op|')'
newline|'\n'
name|'print'
op|'('
string|'"svn repo uuid:"'
op|','
name|'svnRepoUuid'
op|')'
newline|'\n'
name|'assertUrlsSameExceptScheme'
op|'('
name|'gitSvnRemote'
op|','
name|'svnUrl'
op|')'
newline|'\n'
name|'assert'
name|'gitSvnRepoUuid'
op|'=='
name|'svnRepoUuid'
newline|'\n'
nl|'\n'
comment|'# check whether tempGitBranchName exists:'
nl|'\n'
name|'diffBaseRevision'
op|'='
name|'lastSvnRevisionOnGitSvnBranch'
newline|'\n'
name|'svnTempRevision'
op|'='
name|'None'
newline|'\n'
name|'doCommitOnExistingTempBranch'
op|'='
name|'False'
newline|'\n'
nl|'\n'
name|'if'
name|'gitRepo'
op|'.'
name|'branchExists'
op|'('
name|'tempGitBranchName'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'print'
op|'('
name|'tempGitBranchName'
op|','
string|'"exists"'
op|')'
newline|'\n'
comment|'# update lastSvnRevisionOnGitSvnBranch from there.'
nl|'\n'
name|'svnTempRevision'
op|'='
name|'gitRepo'
op|'.'
name|'lastTempGitSvnRevision'
op|'('
name|'tempGitBranchName'
op|')'
newline|'\n'
name|'if'
name|'svnTempRevision'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'      '
name|'print'
op|'('
string|'"Warning: no svn revision found on branch:"'
op|','
name|'tempGitBranchName'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'      '
name|'if'
name|'svnTempRevision'
op|'>'
name|'lastSvnRevisionOnGitSvnBranch'
op|':'
newline|'\n'
indent|'        '
name|'diffBaseRevision'
op|'='
name|'svnTempRevision'
newline|'\n'
name|'doCommitOnExistingTempBranch'
op|'='
name|'True'
newline|'\n'
name|'gitRepo'
op|'.'
name|'checkOutBranch'
op|'('
name|'tempGitBranchName'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'lastSvnRevision'
op|'=='
name|'diffBaseRevision'
op|':'
newline|'\n'
indent|'    '
name|'print'
op|'('
name|'gitRepo'
op|','
name|'gitRepo'
op|'.'
name|'getCurrentBranch'
op|'('
op|')'
op|','
string|'"up to date with"'
op|','
name|'svnWorkingCopy'
op|','
name|'svnRepoBranchName'
op|')'
newline|'\n'
name|'verifyGitFilesAgainstSvn'
op|'('
name|'gitRepo'
op|','
name|'svnWorkingCopy'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'lastSvnRevision'
op|'<'
name|'diffBaseRevision'
op|':'
comment|'# unlikely, do nothing'
newline|'\n'
indent|'    '
name|'print'
op|'('
name|'gitRepo'
op|','
name|'gitRepo'
op|'.'
name|'getCurrentBranch'
op|'('
op|')'
op|','
string|'"later than"'
op|','
name|'svnWorkingCopy'
op|','
string|'", nothing to update."'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'print'
op|'('
name|'gitRepo'
op|','
name|'gitRepo'
op|'.'
name|'getCurrentBranch'
op|'('
op|')'
op|','
string|'"earlier than"'
op|','
name|'svnWorkingCopy'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'gitRepo'
op|'.'
name|'workingDirectoryClean'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'errorExit'
op|'('
name|'gitRepo'
op|','
string|'"on branch"'
op|','
name|'gitRepo'
op|'.'
name|'getCurrentBranch'
op|'('
op|')'
op|','
string|'"not clean"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'print'
op|'('
name|'gitRepo'
op|','
string|'"on branch"'
op|','
name|'gitRepo'
op|'.'
name|'getCurrentBranch'
op|'('
op|')'
op|','
string|'"and clean"'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'doCommitOnExistingTempBranch'
op|':'
comment|'# restart temp branch from branch'
newline|'\n'
indent|'    '
name|'assert'
name|'gitRepo'
op|'.'
name|'getCurrentBranch'
op|'('
op|')'
op|'=='
name|'branchName'
newline|'\n'
name|'if'
name|'gitRepo'
op|'.'
name|'branchExists'
op|'('
name|'tempGitBranchName'
op|')'
op|':'
comment|'# tempGitBranchName exists, delete it first.'
newline|'\n'
indent|'      '
name|'print'
op|'('
string|'"Branch"'
op|','
name|'tempGitBranchName'
op|','
string|'"exists, deleting"'
op|')'
newline|'\n'
name|'gitRepo'
op|'.'
name|'deleteBranch'
op|'('
name|'tempGitBranchName'
op|')'
newline|'\n'
name|'if'
name|'gitRepo'
op|'.'
name|'branchExists'
op|'('
name|'tempGitBranchName'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'errorExit'
op|'('
string|'"Could not delete branch"'
op|','
name|'tempGitBranchName'
op|','
string|'"from"'
op|','
name|'gitRepo'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'gitRepo'
op|'.'
name|'createBranch'
op|'('
name|'tempGitBranchName'
op|')'
newline|'\n'
name|'gitRepo'
op|'.'
name|'checkOutBranch'
op|'('
name|'tempGitBranchName'
op|')'
newline|'\n'
name|'print'
op|'('
string|'"Started branch"'
op|','
name|'tempGitBranchName'
op|','
string|'"at"'
op|','
name|'branchName'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'assert'
name|'gitRepo'
op|'.'
name|'getCurrentBranch'
op|'('
op|')'
op|'=='
name|'tempGitBranchName'
newline|'\n'
nl|'\n'
name|'maxNumLogEntries'
op|'='
name|'maxCommits'
op|'+'
number|'1'
newline|'\n'
name|'svnLogEntries'
op|'='
name|'svnWorkingCopy'
op|'.'
name|'getLogEntries'
op|'('
name|'diffBaseRevision'
op|','
name|'lastSvnRevision'
op|','
name|'maxNumLogEntries'
op|')'
newline|'\n'
nl|'\n'
name|'numCommits'
op|'='
number|'0'
newline|'\n'
nl|'\n'
name|'startRevision'
op|'='
name|'svnLogEntries'
op|'['
number|'0'
op|']'
op|'.'
name|'revision'
newline|'\n'
name|'ignore'
op|'='
name|'svnWorkingCopy'
op|'.'
name|'updateOutput'
op|'('
name|'startRevision'
op|')'
newline|'\n'
nl|'\n'
name|'for'
op|'('
name|'logEntryFrom'
op|','
name|'logEntryTo'
op|')'
name|'in'
name|'allSuccessivePairs'
op|'('
name|'svnLogEntries'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'setGitWorkingTreeViaSvnCheckout'
op|'('
name|'svnWorkingCopy'
op|','
name|'logEntryTo'
op|'.'
name|'revision'
op|','
name|'gitRepo'
op|')'
newline|'\n'
nl|'\n'
name|'gitRepo'
op|'.'
name|'addAllToIndex'
op|'('
op|')'
comment|'# add all changes from the git working tree to the git index.'
newline|'\n'
nl|'\n'
comment|'# commit, put toRevision at end so it can be picked up later.'
nl|'\n'
nl|'\n'
name|'commitMessageMetaData'
op|'='
name|'gitRepo'
op|'.'
name|'svn2gitMarker'
op|'+'
string|'" "'
op|'+'
name|'gitSvnRemote'
op|'+'
string|'"@"'
op|'+'
name|'str'
op|'('
name|'logEntryTo'
op|'.'
name|'revision'
op|')'
op|'+'
string|'" "'
op|'+'
name|'gitSvnRepoUuid'
newline|'\n'
comment|'# git-svn adds this commit metadata:'
nl|'\n'
comment|'# git-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1719562 13f79535-47bb-0310-9956-ffa450edef68'
nl|'\n'
comment|'# This script uses svn2git-id: instead of git-svn-id:'
nl|'\n'
nl|'\n'
name|'message'
op|'='
name|'logEntryTo'
op|'.'
name|'msg'
op|'+'
string|'"\\n\\n"'
op|'+'
name|'commitMessageMetaData'
newline|'\n'
nl|'\n'
name|'authorCommit'
op|'='
name|'gitRepo'
op|'.'
name|'getLatestCommitForAuthor'
op|'('
name|'logEntryTo'
op|'.'
name|'author'
op|')'
newline|'\n'
name|'authorName'
op|'='
name|'gitRepo'
op|'.'
name|'getCommitAuthorName'
op|'('
name|'authorCommit'
op|')'
newline|'\n'
name|'authorEmail'
op|'='
name|'gitRepo'
op|'.'
name|'getCommitAuthorEmail'
op|'('
name|'authorCommit'
op|')'
newline|'\n'
comment|'# print("Author name and email:", authorName, authorEmail)'
nl|'\n'
name|'gitRepo'
op|'.'
name|'commit'
op|'('
name|'message'
op|','
nl|'\n'
name|'authorName'
op|','
name|'authorEmail'
op|','
name|'logEntryTo'
op|'.'
name|'date'
op|','
nl|'\n'
name|'authorName'
op|','
name|'authorEmail'
op|','
name|'logEntryTo'
op|'.'
name|'date'
op|')'
comment|'# author is also git committer, just like git-svn'
newline|'\n'
nl|'\n'
name|'numCommits'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
comment|'#print("Commit  author:", logEntryTo.author)'
nl|'\n'
name|'print'
op|'('
string|'"Commit date:"'
op|','
name|'logEntryTo'
op|'.'
name|'date'
op|')'
newline|'\n'
comment|'#print("Commit message:", logEntryTo.msg)'
nl|'\n'
nl|'\n'
name|'gitRepo'
op|'.'
name|'cleanDirsForced'
op|'('
op|')'
comment|'# delete untracked directories and files'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'gitRepo'
op|'.'
name|'workingDirectoryClean'
op|'('
op|')'
op|':'
newline|'\n'
indent|'      '
name|'errorExit'
op|'('
name|'gitRepo'
op|','
string|'"on branch"'
op|','
name|'gitRepo'
op|'.'
name|'getCurrentBranch'
op|'('
op|')'
op|','
string|'"not clean, numCommits:"'
op|','
name|'numCommits'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'diffBaseRevision'
op|'='
name|'logEntryTo'
op|'.'
name|'revision'
newline|'\n'
name|'print'
op|'('
string|"''"
op|')'
comment|'# show empty line after commit info'
newline|'\n'
nl|'\n'
dedent|''
name|'print'
op|'('
string|'"Added"'
op|','
name|'numCommits'
op|','
string|'"commit(s) to branch"'
op|','
name|'tempGitBranchName'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'lastSvnRevision'
op|'=='
name|'diffBaseRevision'
op|':'
newline|'\n'
indent|'    '
name|'print'
op|'('
name|'gitRepo'
op|','
name|'gitRepo'
op|'.'
name|'getCurrentBranch'
op|'('
op|')'
op|','
string|'"up to date with"'
op|','
name|'svnWorkingCopy'
op|','
name|'svnRepoBranchName'
op|')'
newline|'\n'
name|'verifyGitFilesAgainstSvn'
op|'('
name|'gitRepo'
op|','
name|'svnWorkingCopy'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'__name__'
op|'=='
string|'"__main__"'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|testMode
indent|'  '
name|'testMode'
op|'='
name|'False'
comment|'# when true, leave branch where it is, as if the last commits from upstream did not arrive'
newline|'\n'
DECL|variable|defaultMaxCommits
name|'defaultMaxCommits'
op|'='
number|'20'
newline|'\n'
DECL|variable|maxCommits
name|'maxCommits'
op|'='
name|'defaultMaxCommits'
newline|'\n'
nl|'\n'
name|'import'
name|'sys'
newline|'\n'
DECL|variable|argv
name|'argv'
op|'='
name|'sys'
op|'.'
name|'argv'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
name|'while'
name|'argv'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'argv'
op|'['
number|'0'
op|']'
op|'=='
string|'"test"'
op|':'
newline|'\n'
DECL|variable|testMode
indent|'      '
name|'testMode'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'      '
name|'try'
op|':'
newline|'\n'
DECL|variable|maxCommits
indent|'        '
name|'maxCommits'
op|'='
name|'int'
op|'('
name|'argv'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'assert'
name|'maxCommits'
op|'>='
number|'1'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'        '
name|'errorExit'
op|'('
string|'"Argument(s) [test] [maximum number of commits], defaults are false and "'
op|'+'
name|'defaultMaxCommits'
op|')'
newline|'\n'
DECL|variable|argv
dedent|''
dedent|''
name|'argv'
op|'='
name|'argv'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|repo
dedent|''
name|'repo'
op|'='
string|'"lucene-solr"'
newline|'\n'
DECL|variable|branchName
name|'branchName'
op|'='
string|'"trunk"'
newline|'\n'
DECL|variable|tempGitBranchName
name|'tempGitBranchName'
op|'='
name|'branchName'
op|'+'
string|'".svn"'
newline|'\n'
nl|'\n'
DECL|variable|home
name|'home'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'expanduser'
op|'('
string|'"~"'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|svnWorkingCopyOfBranchPath
name|'svnWorkingCopyOfBranchPath'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'home'
op|','
string|'"svnwork"'
op|','
name|'repo'
op|')'
newline|'\n'
DECL|variable|svnRepoBranchName
name|'svnRepoBranchName'
op|'='
string|'"lucene/dev/"'
op|'+'
name|'branchName'
comment|'# for svn switch to'
newline|'\n'
nl|'\n'
DECL|variable|gitRepoPath
name|'gitRepoPath'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'home'
op|','
string|'"gitrepos"'
op|','
name|'repo'
op|')'
newline|'\n'
DECL|variable|gitUpstream
name|'gitUpstream'
op|'='
string|'"upstream"'
newline|'\n'
nl|'\n'
name|'maintainTempGitSvnBranch'
op|'('
name|'branchName'
op|','
name|'tempGitBranchName'
op|','
nl|'\n'
name|'svnWorkingCopyOfBranchPath'
op|','
name|'svnRepoBranchName'
op|','
nl|'\n'
name|'gitRepoPath'
op|','
name|'gitUpstream'
op|','
nl|'\n'
DECL|variable|maxCommits
name|'maxCommits'
op|'='
name|'maxCommits'
op|','
nl|'\n'
DECL|variable|testMode
name|'testMode'
op|'='
name|'testMode'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit
