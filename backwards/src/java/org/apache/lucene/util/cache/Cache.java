begin_unit
begin_package
DECL|package|org.apache.lucene.util.cache
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|cache
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import
begin_comment
comment|/**  * Base class for cache implementations.  */
end_comment
begin_class
DECL|class|Cache
specifier|public
specifier|abstract
class|class
name|Cache
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Closeable
block|{
comment|/**    * Simple Cache wrapper that synchronizes all    * calls that access the cache.     */
DECL|class|SynchronizedCache
specifier|static
class|class
name|SynchronizedCache
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|mutex
specifier|private
name|Object
name|mutex
decl_stmt|;
DECL|field|cache
specifier|private
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|cache
decl_stmt|;
DECL|method|SynchronizedCache
name|SynchronizedCache
parameter_list|(
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|cache
parameter_list|)
block|{
name|this
operator|.
name|cache
operator|=
name|cache
expr_stmt|;
name|this
operator|.
name|mutex
operator|=
name|this
expr_stmt|;
block|}
DECL|method|SynchronizedCache
name|SynchronizedCache
parameter_list|(
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|cache
parameter_list|,
name|Object
name|mutex
parameter_list|)
block|{
name|this
operator|.
name|cache
operator|=
name|cache
expr_stmt|;
name|this
operator|.
name|mutex
operator|=
name|mutex
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|put
specifier|public
name|void
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|V
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|containsKey
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|cache
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getSynchronizedCache
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getSynchronizedCache
parameter_list|()
block|{
return|return
name|this
return|;
block|}
block|}
comment|/**    * Returns a thread-safe cache backed by the specified cache.     * In order to guarantee thread-safety, all access to the backed cache must    * be accomplished through the returned cache.    */
DECL|method|synchronizedCache
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|synchronizedCache
parameter_list|(
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|cache
parameter_list|)
block|{
return|return
name|cache
operator|.
name|getSynchronizedCache
argument_list|()
return|;
block|}
comment|/**    * Called by {@link #synchronizedCache(Cache)}. This method    * returns a {@link SynchronizedCache} instance that wraps    * this instance by default and can be overridden to return    * e. g. subclasses of {@link SynchronizedCache} or this    * in case this cache is already synchronized.    */
DECL|method|getSynchronizedCache
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getSynchronizedCache
parameter_list|()
block|{
return|return
operator|new
name|SynchronizedCache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * Puts a (key, value)-pair into the cache.     */
DECL|method|put
specifier|public
specifier|abstract
name|void
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
function_decl|;
comment|/**    * Returns the value for the given key.     */
DECL|method|get
specifier|public
specifier|abstract
name|V
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
function_decl|;
comment|/**    * Returns whether the given key is in this cache.     */
DECL|method|containsKey
specifier|public
specifier|abstract
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
function_decl|;
comment|/**    * Closes the cache.    */
DECL|method|close
specifier|public
specifier|abstract
name|void
name|close
parameter_list|()
function_decl|;
block|}
end_class
end_unit
