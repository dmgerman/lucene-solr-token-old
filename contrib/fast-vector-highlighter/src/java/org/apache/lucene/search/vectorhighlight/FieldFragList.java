begin_unit
begin_package
DECL|package|org.apache.lucene.search.vectorhighlight
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|vectorhighlight
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|vectorhighlight
operator|.
name|FieldPhraseList
operator|.
name|WeightedPhraseInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|vectorhighlight
operator|.
name|FieldPhraseList
operator|.
name|WeightedPhraseInfo
operator|.
name|Toffs
import|;
end_import
begin_comment
comment|/**  * FieldFragList has a list of "frag info" that is used by FragmentsBuilder class  * to create fragments (snippets).  */
end_comment
begin_class
DECL|class|FieldFragList
specifier|public
class|class
name|FieldFragList
block|{
DECL|field|fragCharSize
specifier|private
specifier|final
name|int
name|fragCharSize
decl_stmt|;
DECL|field|fragInfos
name|List
argument_list|<
name|WeightedFragInfo
argument_list|>
name|fragInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|WeightedFragInfo
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * a constructor.    *     * @param fragCharSize the length (number of chars) of a fragment    */
DECL|method|FieldFragList
specifier|public
name|FieldFragList
parameter_list|(
name|int
name|fragCharSize
parameter_list|)
block|{
name|this
operator|.
name|fragCharSize
operator|=
name|fragCharSize
expr_stmt|;
block|}
comment|/**    * convert the list of WeightedPhraseInfo to WeightedFragInfo, then add it to the fragInfos    *     * @param startOffset start offset of the fragment    * @param endOffset end offset of the fragment    * @param phraseInfoList list of WeightedPhraseInfo objects    */
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|,
name|List
argument_list|<
name|WeightedPhraseInfo
argument_list|>
name|phraseInfoList
parameter_list|)
block|{
name|fragInfos
operator|.
name|add
argument_list|(
operator|new
name|WeightedFragInfo
argument_list|(
name|startOffset
argument_list|,
name|endOffset
argument_list|,
name|phraseInfoList
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|WeightedFragInfo
specifier|public
specifier|static
class|class
name|WeightedFragInfo
block|{
DECL|field|subInfos
name|List
argument_list|<
name|SubInfo
argument_list|>
name|subInfos
decl_stmt|;
DECL|field|totalBoost
name|float
name|totalBoost
decl_stmt|;
DECL|field|startOffset
name|int
name|startOffset
decl_stmt|;
DECL|field|endOffset
name|int
name|endOffset
decl_stmt|;
DECL|method|WeightedFragInfo
specifier|public
name|WeightedFragInfo
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|,
name|List
argument_list|<
name|WeightedPhraseInfo
argument_list|>
name|phraseInfoList
parameter_list|)
block|{
name|this
operator|.
name|startOffset
operator|=
name|startOffset
expr_stmt|;
name|this
operator|.
name|endOffset
operator|=
name|endOffset
expr_stmt|;
name|subInfos
operator|=
operator|new
name|ArrayList
argument_list|<
name|SubInfo
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|WeightedPhraseInfo
name|phraseInfo
range|:
name|phraseInfoList
control|)
block|{
name|SubInfo
name|subInfo
init|=
operator|new
name|SubInfo
argument_list|(
name|phraseInfo
operator|.
name|text
argument_list|,
name|phraseInfo
operator|.
name|termsOffsets
argument_list|,
name|phraseInfo
operator|.
name|seqnum
argument_list|)
decl_stmt|;
name|subInfos
operator|.
name|add
argument_list|(
name|subInfo
argument_list|)
expr_stmt|;
name|totalBoost
operator|+=
name|phraseInfo
operator|.
name|boost
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"subInfos=("
argument_list|)
expr_stmt|;
for|for
control|(
name|SubInfo
name|si
range|:
name|subInfos
control|)
name|sb
operator|.
name|append
argument_list|(
name|si
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")/"
argument_list|)
operator|.
name|append
argument_list|(
name|totalBoost
argument_list|)
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
operator|.
name|append
argument_list|(
name|startOffset
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
operator|.
name|append
argument_list|(
name|endOffset
argument_list|)
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|class|SubInfo
specifier|static
class|class
name|SubInfo
block|{
DECL|field|text
specifier|final
name|String
name|text
decl_stmt|;
comment|// unnecessary member, just exists for debugging purpose
DECL|field|termsOffsets
specifier|final
name|List
argument_list|<
name|Toffs
argument_list|>
name|termsOffsets
decl_stmt|;
comment|// usually termsOffsets.size() == 1,
comment|// but if position-gap> 1 and slop> 0 then size() could be greater than 1
DECL|field|seqnum
name|int
name|seqnum
decl_stmt|;
DECL|method|SubInfo
name|SubInfo
parameter_list|(
name|String
name|text
parameter_list|,
name|List
argument_list|<
name|Toffs
argument_list|>
name|termsOffsets
parameter_list|,
name|int
name|seqnum
parameter_list|)
block|{
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
name|this
operator|.
name|termsOffsets
operator|=
name|termsOffsets
expr_stmt|;
name|this
operator|.
name|seqnum
operator|=
name|seqnum
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|text
argument_list|)
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
for|for
control|(
name|Toffs
name|to
range|:
name|termsOffsets
control|)
name|sb
operator|.
name|append
argument_list|(
name|to
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
block|}
end_class
end_unit
