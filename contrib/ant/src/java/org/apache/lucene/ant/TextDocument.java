begin_unit
begin_package
DECL|package|org.apache.lucene.ant
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|ant
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_comment
comment|/**  *  A utility for making Lucene Documents from a File.  *  *@author     Erik Hatcher  *@since      December 6, 2001  *@todo       Fix JavaDoc comments here  */
end_comment
begin_class
DECL|class|TextDocument
specifier|public
class|class
name|TextDocument
block|{
DECL|field|contents
specifier|private
name|String
name|contents
decl_stmt|;
comment|/**      *  Constructor for the TextDocument object      *      *@param  file             Description of Parameter      *@exception  IOException  Description of Exception      */
DECL|method|TextDocument
specifier|public
name|TextDocument
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|String
name|line
init|=
name|br
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|sw
operator|.
name|write
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
name|contents
operator|=
name|sw
operator|.
name|toString
argument_list|()
expr_stmt|;
name|sw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      *  Makes a document for a File.<p>      *      *  The document has a single field:      *<ul>      *<li><code>contents</code>--containing the full contents      *    of the file, as a Text field;      *      *@param  f                Description of Parameter      *@return                  Description of the Returned Value      *@exception  IOException  Description of Exception      */
DECL|method|Document
specifier|public
specifier|static
name|Document
name|Document
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|TextDocument
name|textDoc
init|=
operator|new
name|TextDocument
argument_list|(
name|f
argument_list|)
decl_stmt|;
comment|// make a new, empty document
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"title"
argument_list|,
name|f
operator|.
name|getName
argument_list|()
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"contents"
argument_list|,
name|textDoc
operator|.
name|getContents
argument_list|()
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"rawcontents"
argument_list|,
name|textDoc
operator|.
name|getContents
argument_list|()
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
comment|// return the document
return|return
name|doc
return|;
block|}
comment|/**      *@return    The contents value      *@todo      finish this method      */
DECL|method|getContents
specifier|public
name|String
name|getContents
parameter_list|()
block|{
return|return
name|contents
return|;
block|}
block|}
end_class
end_unit
