begin_unit
begin_package
DECL|package|org.apache.lucene.ant
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|ant
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import
begin_class
DECL|class|DocumentHandlerException
specifier|public
class|class
name|DocumentHandlerException
extends|extends
name|Exception
block|{
DECL|field|cause
specifier|private
name|Throwable
name|cause
decl_stmt|;
comment|/**      * Default constructor.      */
DECL|method|DocumentHandlerException
specifier|public
name|DocumentHandlerException
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      * Constructs with message.      */
DECL|method|DocumentHandlerException
specifier|public
name|DocumentHandlerException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs with chained exception.      */
DECL|method|DocumentHandlerException
specifier|public
name|DocumentHandlerException
parameter_list|(
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|cause
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|cause
operator|=
name|cause
expr_stmt|;
block|}
comment|/**      * Retrieves nested exception.      */
DECL|method|getException
specifier|public
name|Throwable
name|getException
parameter_list|()
block|{
return|return
name|cause
return|;
block|}
annotation|@
name|Override
DECL|method|printStackTrace
specifier|public
name|void
name|printStackTrace
parameter_list|()
block|{
name|printStackTrace
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|printStackTrace
specifier|public
name|void
name|printStackTrace
parameter_list|(
name|PrintStream
name|ps
parameter_list|)
block|{
synchronized|synchronized
init|(
name|ps
init|)
block|{
name|super
operator|.
name|printStackTrace
argument_list|(
name|ps
argument_list|)
expr_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
name|ps
operator|.
name|println
argument_list|(
literal|"--- Nested Exception ---"
argument_list|)
expr_stmt|;
name|cause
operator|.
name|printStackTrace
argument_list|(
name|ps
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|printStackTrace
specifier|public
name|void
name|printStackTrace
parameter_list|(
name|PrintWriter
name|pw
parameter_list|)
block|{
synchronized|synchronized
init|(
name|pw
init|)
block|{
name|super
operator|.
name|printStackTrace
argument_list|(
name|pw
argument_list|)
expr_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
name|pw
operator|.
name|println
argument_list|(
literal|"--- Nested Exception ---"
argument_list|)
expr_stmt|;
name|cause
operator|.
name|printStackTrace
argument_list|(
name|pw
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
