begin_unit
begin_package
DECL|package|org.apache.lucene.search.spell
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Edit distance  class  */
end_comment
begin_class
DECL|class|TRStringDistance
specifier|final
class|class
name|TRStringDistance
block|{
DECL|field|sa
specifier|final
name|char
index|[]
name|sa
decl_stmt|;
DECL|field|n
specifier|final
name|int
name|n
decl_stmt|;
DECL|field|cache
specifier|final
name|int
index|[]
index|[]
index|[]
name|cache
init|=
operator|new
name|int
index|[
literal|30
index|]
index|[]
index|[]
decl_stmt|;
comment|/**      * Optimized to run a bit faster than the static getDistance().      * In one benchmark times were 5.3sec using ctr vs 8.5sec w/ static method, thus 37% faster.      */
DECL|method|TRStringDistance
specifier|public
name|TRStringDistance
parameter_list|(
name|String
name|target
parameter_list|)
block|{
name|sa
operator|=
name|target
operator|.
name|toCharArray
argument_list|()
expr_stmt|;
name|n
operator|=
name|sa
operator|.
name|length
expr_stmt|;
block|}
comment|//*****************************
comment|// Compute Levenshtein distance
comment|//*****************************
DECL|method|getDistance
specifier|public
specifier|final
name|int
name|getDistance
parameter_list|(
name|String
name|other
parameter_list|)
block|{
name|int
name|d
index|[]
index|[]
decl_stmt|;
comment|// matrix
name|int
name|cost
decl_stmt|;
comment|// cost
comment|// Step 1
specifier|final
name|char
index|[]
name|ta
init|=
name|other
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
specifier|final
name|int
name|m
init|=
name|ta
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|0
condition|)
block|{
return|return
name|m
return|;
block|}
if|if
condition|(
name|m
operator|==
literal|0
condition|)
block|{
return|return
name|n
return|;
block|}
if|if
condition|(
name|m
operator|>=
name|cache
operator|.
name|length
condition|)
block|{
name|d
operator|=
name|form
argument_list|(
name|n
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cache
index|[
name|m
index|]
operator|!=
literal|null
condition|)
block|{
name|d
operator|=
name|cache
index|[
name|m
index|]
expr_stmt|;
block|}
else|else
block|{
name|d
operator|=
name|cache
index|[
name|m
index|]
operator|=
name|form
argument_list|(
name|n
argument_list|,
name|m
argument_list|)
expr_stmt|;
comment|// Step 3
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|n
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|char
name|s_i
init|=
name|sa
index|[
name|i
operator|-
literal|1
index|]
decl_stmt|;
comment|// Step 4
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|m
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|char
name|t_j
init|=
name|ta
index|[
name|j
operator|-
literal|1
index|]
decl_stmt|;
comment|// Step 5
if|if
condition|(
name|s_i
operator|==
name|t_j
condition|)
block|{
comment|// same
name|cost
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
comment|// not a match
name|cost
operator|=
literal|1
expr_stmt|;
comment|// Step 6
block|}
name|d
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|min3
argument_list|(
name|d
index|[
name|i
operator|-
literal|1
index|]
index|[
name|j
index|]
operator|+
literal|1
argument_list|,
name|d
index|[
name|i
index|]
index|[
name|j
operator|-
literal|1
index|]
operator|+
literal|1
argument_list|,
name|d
index|[
name|i
operator|-
literal|1
index|]
index|[
name|j
operator|-
literal|1
index|]
operator|+
name|cost
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Step 7
return|return
name|d
index|[
name|n
index|]
index|[
name|m
index|]
return|;
block|}
comment|/**      *      */
DECL|method|form
specifier|private
specifier|static
name|int
index|[]
index|[]
name|form
parameter_list|(
name|int
name|n
parameter_list|,
name|int
name|m
parameter_list|)
block|{
name|int
index|[]
index|[]
name|d
init|=
operator|new
name|int
index|[
name|n
operator|+
literal|1
index|]
index|[
name|m
operator|+
literal|1
index|]
decl_stmt|;
comment|// Step 2
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|n
condition|;
name|i
operator|++
control|)
block|{
name|d
index|[
name|i
index|]
index|[
literal|0
index|]
operator|=
name|i
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<=
name|m
condition|;
name|j
operator|++
control|)
block|{
name|d
index|[
literal|0
index|]
index|[
name|j
index|]
operator|=
name|j
expr_stmt|;
block|}
return|return
name|d
return|;
block|}
comment|//****************************
comment|// Get minimum of three values
comment|//****************************
DECL|method|min3
specifier|private
specifier|static
name|int
name|min3
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|,
name|int
name|c
parameter_list|)
block|{
name|int
name|mi
init|=
name|a
decl_stmt|;
if|if
condition|(
name|b
operator|<
name|mi
condition|)
block|{
name|mi
operator|=
name|b
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|<
name|mi
condition|)
block|{
name|mi
operator|=
name|c
expr_stmt|;
block|}
return|return
name|mi
return|;
block|}
block|}
end_class
end_unit
