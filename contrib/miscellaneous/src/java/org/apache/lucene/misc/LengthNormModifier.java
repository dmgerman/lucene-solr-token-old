begin_unit
begin_package
DECL|package|org.apache.lucene.misc
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|misc
package|;
end_package
begin_comment
comment|/**   * Copyright 2006 The Apache Software Foundation   *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   *     http://www.apache.org/licenses/LICENSE-2.0   *   * Unless required by applicable law or agreed to in writing, software   * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Similarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_comment
comment|/**  * Given a directory, a Similarity, and a list of fields, updates the  * fieldNorms in place for every document using the Similarity.lengthNorm.  *  *<p>  * NOTE: This only works if you do<b>not</b> use field/document boosts in your  * index.  *</p>  *  * @version $Id:$  */
end_comment
begin_class
DECL|class|LengthNormModifier
specifier|public
class|class
name|LengthNormModifier
block|{
comment|/**      * Command Line Execution method      *      *<pre>      * Usage: LengthNormModifier /path/index package.SimilarityClassName field1 field2 ...      *</pre>      *      public static void main(String[] args) throws IOException { 	if (args.length< 3) { 	    System.err.println("Usage: LengthNormModifier<index><package.SimilarityClassName><field1> [field2] ..."); 	    System.exit(1); 	}  	Similarity s = null; 	try { 	    Class simClass = Class.forName(args[1]); 	    s = (Similarity)simClass.newInstance(); 	} catch (Exception e) { 	    System.err.println("Couldn't instantiate similarity with empty constructor: " + args[1]); 	    e.printStackTrace(System.err); 	} 	 	File index = new File(args[0]); 	Directory d = FSDirectory.getDirectory(index,false);  	LengthNormModifier lnm = new LengthNormModifier(d, s); 	 	for (int i = 2; i< args.length; i++) { 	    System.out.print("Updating field: " + args[i] + " " + 			     (new Date()).toString() + " ... "); 	    lnm.reSetNorms(args[i]); 	    System.out.println(new Date().toString()); 	} 	 	d.close();     }       private Directory dir;     private Similarity sim;          /**      * Constructor for code that wishes to use this class progromaticaly      *      * @param d The Directory to modify      * @param s The Similarity to use in<code>reSetNorms</code>      */
DECL|method|LengthNormModifier
specifier|public
name|LengthNormModifier
parameter_list|(
name|Directory
name|d
parameter_list|,
name|Similarity
name|s
parameter_list|)
block|{
name|dir
operator|=
name|d
expr_stmt|;
name|sim
operator|=
name|s
expr_stmt|;
block|}
comment|/**      * Re-Set the norms for the specified field.      *      *<p>      * Opens a new IndexReader on the Directory given to this instance,      * modifies the norms using the Similarity given to this instance,      * and closes the IndexReader.      *</p>      *      * @param field the field whose norms      */
DECL|method|reSetNorms
specifier|public
name|void
name|reSetNorms
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fieldName
init|=
name|field
operator|.
name|intern
argument_list|()
decl_stmt|;
name|int
index|[]
name|termCounts
init|=
operator|new
name|int
index|[
literal|0
index|]
decl_stmt|;
name|IndexReader
name|reader
init|=
literal|null
decl_stmt|;
name|TermEnum
name|termEnum
init|=
literal|null
decl_stmt|;
name|TermDocs
name|termDocs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|termCounts
operator|=
operator|new
name|int
index|[
name|reader
operator|.
name|maxDoc
argument_list|()
index|]
expr_stmt|;
try|try
block|{
name|termEnum
operator|=
name|reader
operator|.
name|terms
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|termDocs
operator|=
name|reader
operator|.
name|termDocs
argument_list|()
expr_stmt|;
do|do
block|{
name|Term
name|term
init|=
name|termEnum
operator|.
name|term
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|!=
literal|null
operator|&&
name|term
operator|.
name|field
argument_list|()
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|termDocs
operator|.
name|seek
argument_list|(
name|termEnum
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|termDocs
operator|.
name|next
argument_list|()
condition|)
block|{
name|termCounts
index|[
name|termDocs
operator|.
name|doc
argument_list|()
index|]
operator|+=
name|termDocs
operator|.
name|freq
argument_list|()
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|termEnum
operator|.
name|next
argument_list|()
condition|)
do|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|termDocs
condition|)
name|termDocs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|termEnum
condition|)
name|termEnum
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|reader
condition|)
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|termCounts
operator|.
name|length
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|reader
operator|.
name|isDeleted
argument_list|(
name|d
argument_list|)
condition|)
block|{
name|byte
name|norm
init|=
name|sim
operator|.
name|encodeNorm
argument_list|(
name|sim
operator|.
name|lengthNorm
argument_list|(
name|fieldName
argument_list|,
name|termCounts
index|[
name|d
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|reader
operator|.
name|setNorm
argument_list|(
name|d
argument_list|,
name|fieldName
argument_list|,
name|norm
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|reader
condition|)
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
