begin_unit
begin_package
DECL|package|org.apache.lucene.swing.models
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|swing
operator|.
name|models
package|;
end_package
begin_comment
comment|/**  * Copyright 2005 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|AbstractTableModel
import|;
end_import
begin_class
DECL|class|BaseTableModel
specifier|public
class|class
name|BaseTableModel
extends|extends
name|AbstractTableModel
block|{
DECL|field|columnNames
specifier|private
name|List
name|columnNames
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
DECL|field|rows
specifier|private
name|List
name|rows
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
DECL|method|BaseTableModel
specifier|public
name|BaseTableModel
parameter_list|(
name|Iterator
name|data
parameter_list|)
block|{
name|columnNames
operator|.
name|add
argument_list|(
literal|"Name"
argument_list|)
expr_stmt|;
name|columnNames
operator|.
name|add
argument_list|(
literal|"Type"
argument_list|)
expr_stmt|;
name|columnNames
operator|.
name|add
argument_list|(
literal|"Phone"
argument_list|)
expr_stmt|;
name|columnNames
operator|.
name|add
argument_list|(
literal|"Street"
argument_list|)
expr_stmt|;
name|columnNames
operator|.
name|add
argument_list|(
literal|"City"
argument_list|)
expr_stmt|;
name|columnNames
operator|.
name|add
argument_list|(
literal|"State"
argument_list|)
expr_stmt|;
name|columnNames
operator|.
name|add
argument_list|(
literal|"Zip"
argument_list|)
expr_stmt|;
while|while
condition|(
name|data
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|nextRow
init|=
operator|(
name|Object
operator|)
name|data
operator|.
name|next
argument_list|()
decl_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|nextRow
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getColumnCount
specifier|public
name|int
name|getColumnCount
parameter_list|()
block|{
return|return
name|columnNames
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getRowCount
specifier|public
name|int
name|getRowCount
parameter_list|()
block|{
return|return
name|rows
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|addRow
specifier|public
name|void
name|addRow
parameter_list|(
name|RestaurantInfo
name|info
parameter_list|)
block|{
name|rows
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|fireTableDataChanged
argument_list|()
expr_stmt|;
block|}
DECL|method|removeRow
specifier|public
name|void
name|removeRow
parameter_list|(
name|RestaurantInfo
name|info
parameter_list|)
block|{
name|rows
operator|.
name|remove
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|fireTableDataChanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isCellEditable
specifier|public
name|boolean
name|isCellEditable
parameter_list|(
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getColumnClass
specifier|public
name|Class
name|getColumnClass
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
return|return
name|String
operator|.
name|class
return|;
block|}
DECL|method|getValueAt
specifier|public
name|Object
name|getValueAt
parameter_list|(
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
name|RestaurantInfo
name|restaurantInfo
init|=
operator|(
name|RestaurantInfo
operator|)
name|rows
operator|.
name|get
argument_list|(
name|rowIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnIndex
operator|==
literal|0
condition|)
block|{
comment|// name
return|return
name|restaurantInfo
operator|.
name|getName
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|columnIndex
operator|==
literal|1
condition|)
block|{
comment|// category
return|return
name|restaurantInfo
operator|.
name|getType
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|columnIndex
operator|==
literal|2
condition|)
block|{
comment|// phone
return|return
name|restaurantInfo
operator|.
name|getPhone
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|columnIndex
operator|==
literal|3
condition|)
block|{
comment|// street
return|return
name|restaurantInfo
operator|.
name|getStreet
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|columnIndex
operator|==
literal|4
condition|)
block|{
comment|// city
return|return
name|restaurantInfo
operator|.
name|getCity
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|columnIndex
operator|==
literal|5
condition|)
block|{
comment|// state
return|return
name|restaurantInfo
operator|.
name|getState
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|columnIndex
operator|==
literal|6
condition|)
block|{
comment|// zip
return|return
name|restaurantInfo
operator|.
name|getZip
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|setValueAt
specifier|public
name|void
name|setValueAt
parameter_list|(
name|Object
name|aValue
parameter_list|,
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
comment|//no op
block|}
annotation|@
name|Override
DECL|method|getColumnName
specifier|public
name|String
name|getColumnName
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
return|return
name|columnNames
operator|.
name|get
argument_list|(
name|columnIndex
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class
end_unit
