begin_unit
begin_package
DECL|package|org.apache.lucene.search.regex
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|regex
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FilteredTermEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_class
DECL|class|RegexTermEnum
specifier|public
class|class
name|RegexTermEnum
extends|extends
name|FilteredTermEnum
block|{
DECL|field|field
specifier|private
name|String
name|field
init|=
literal|""
decl_stmt|;
DECL|field|pre
specifier|private
name|String
name|pre
init|=
literal|""
decl_stmt|;
DECL|field|endEnum
specifier|private
name|boolean
name|endEnum
init|=
literal|false
decl_stmt|;
DECL|field|regexImpl
specifier|private
name|RegexCapabilities
name|regexImpl
decl_stmt|;
DECL|method|RegexTermEnum
specifier|public
name|RegexTermEnum
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|Term
name|term
parameter_list|,
name|RegexCapabilities
name|regexImpl
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|()
expr_stmt|;
name|field
operator|=
name|term
operator|.
name|field
argument_list|()
expr_stmt|;
name|String
name|text
init|=
name|term
operator|.
name|text
argument_list|()
decl_stmt|;
name|this
operator|.
name|regexImpl
operator|=
name|regexImpl
expr_stmt|;
name|regexImpl
operator|.
name|compile
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|pre
operator|=
name|regexImpl
operator|.
name|prefix
argument_list|()
expr_stmt|;
if|if
condition|(
name|pre
operator|==
literal|null
condition|)
name|pre
operator|=
literal|""
expr_stmt|;
name|setEnum
argument_list|(
name|reader
operator|.
name|terms
argument_list|(
operator|new
name|Term
argument_list|(
name|term
operator|.
name|field
argument_list|()
argument_list|,
name|pre
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|termCompare
specifier|protected
specifier|final
name|boolean
name|termCompare
parameter_list|(
name|Term
name|term
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
name|term
operator|.
name|field
argument_list|()
condition|)
block|{
name|String
name|searchText
init|=
name|term
operator|.
name|text
argument_list|()
decl_stmt|;
if|if
condition|(
name|searchText
operator|.
name|startsWith
argument_list|(
name|pre
argument_list|)
condition|)
block|{
return|return
name|regexImpl
operator|.
name|match
argument_list|(
name|searchText
argument_list|)
return|;
block|}
block|}
name|endEnum
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
DECL|method|difference
specifier|public
specifier|final
name|float
name|difference
parameter_list|()
block|{
comment|// TODO: adjust difference based on distance of searchTerm.text() and term().text()
return|return
literal|1.0f
return|;
block|}
DECL|method|endEnum
specifier|public
specifier|final
name|boolean
name|endEnum
parameter_list|()
block|{
return|return
name|endEnum
return|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|field
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class
end_unit
