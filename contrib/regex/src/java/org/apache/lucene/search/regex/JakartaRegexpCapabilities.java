begin_unit
begin_package
DECL|package|org.apache.lucene.search.regex
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|regex
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|regexp
operator|.
name|RE
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|regexp
operator|.
name|RegexpTunnel
import|;
end_import
begin_comment
comment|/**  * Implementation tying<a href="http://jakarta.apache.org/regexp">Jakarta Regexp</a>  * to RegexQuery.  Thanks to some internals of Jakarta Regexp, this  * has a solid {@link #prefix} implementation.  */
end_comment
begin_class
DECL|class|JakartaRegexpCapabilities
specifier|public
class|class
name|JakartaRegexpCapabilities
implements|implements
name|RegexCapabilities
block|{
DECL|field|regexp
specifier|private
name|RE
name|regexp
decl_stmt|;
DECL|method|compile
specifier|public
name|void
name|compile
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|regexp
operator|=
operator|new
name|RE
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
DECL|method|match
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
name|regexp
operator|.
name|match
argument_list|(
name|string
argument_list|)
return|;
block|}
DECL|method|prefix
specifier|public
name|String
name|prefix
parameter_list|()
block|{
name|char
index|[]
name|prefix
init|=
name|RegexpTunnel
operator|.
name|getPrefix
argument_list|(
name|regexp
argument_list|)
decl_stmt|;
return|return
name|prefix
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|String
argument_list|(
name|prefix
argument_list|)
return|;
block|}
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
specifier|final
name|JakartaRegexpCapabilities
name|that
init|=
operator|(
name|JakartaRegexpCapabilities
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|regexp
operator|!=
literal|null
condition|?
operator|!
name|regexp
operator|.
name|equals
argument_list|(
name|that
operator|.
name|regexp
argument_list|)
else|:
name|that
operator|.
name|regexp
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|regexp
operator|!=
literal|null
condition|?
name|regexp
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
return|;
block|}
block|}
end_class
end_unit
