begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.tier
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|tier
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDocComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortComparatorSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import
begin_class
DECL|class|DistanceSortSource
specifier|public
class|class
name|DistanceSortSource
implements|implements
name|SortComparatorSource
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|distanceFilter
specifier|private
name|DistanceFilter
name|distanceFilter
decl_stmt|;
DECL|field|dsdlc
specifier|private
name|DistanceScoreDocLookupComparator
name|dsdlc
decl_stmt|;
DECL|method|DistanceSortSource
specifier|public
name|DistanceSortSource
parameter_list|(
name|Filter
name|distanceFilter
parameter_list|)
block|{
name|this
operator|.
name|distanceFilter
operator|=
operator|(
name|DistanceFilter
operator|)
name|distanceFilter
expr_stmt|;
block|}
DECL|method|cleanUp
specifier|public
name|void
name|cleanUp
parameter_list|()
block|{
name|distanceFilter
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|dsdlc
operator|!=
literal|null
condition|)
name|dsdlc
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
name|dsdlc
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|newComparator
specifier|public
name|ScoreDocComparator
name|newComparator
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|dsdlc
operator|=
operator|new
name|DistanceScoreDocLookupComparator
argument_list|(
name|reader
argument_list|,
name|distanceFilter
argument_list|)
expr_stmt|;
return|return
name|dsdlc
return|;
block|}
DECL|class|DistanceScoreDocLookupComparator
specifier|private
class|class
name|DistanceScoreDocLookupComparator
implements|implements
name|ScoreDocComparator
block|{
DECL|field|distanceFilter
specifier|private
name|DistanceFilter
name|distanceFilter
decl_stmt|;
DECL|method|DistanceScoreDocLookupComparator
specifier|public
name|DistanceScoreDocLookupComparator
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|DistanceFilter
name|distanceFilter
parameter_list|)
block|{
name|this
operator|.
name|distanceFilter
operator|=
name|distanceFilter
expr_stmt|;
return|return;
block|}
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|ScoreDoc
name|aDoc
parameter_list|,
name|ScoreDoc
name|bDoc
parameter_list|)
block|{
comment|//      if (this.distances == null) {
comment|//          distances = distanceFilter.getDistances();
comment|//      }
name|double
name|a
init|=
name|distanceFilter
operator|.
name|getDistance
argument_list|(
name|aDoc
operator|.
name|doc
argument_list|)
decl_stmt|;
name|double
name|b
init|=
name|distanceFilter
operator|.
name|getDistance
argument_list|(
name|bDoc
operator|.
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|>
name|b
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|a
operator|<
name|b
condition|)
return|return
operator|-
literal|1
return|;
return|return
literal|0
return|;
block|}
DECL|method|sortType
specifier|public
name|int
name|sortType
parameter_list|()
block|{
return|return
name|SortField
operator|.
name|DOUBLE
return|;
block|}
DECL|method|sortValue
specifier|public
name|Comparable
name|sortValue
parameter_list|(
name|ScoreDoc
name|iDoc
parameter_list|)
block|{
return|return
name|distanceFilter
operator|.
name|getDistance
argument_list|(
name|iDoc
operator|.
name|doc
argument_list|)
return|;
block|}
DECL|method|cleanUp
specifier|public
name|void
name|cleanUp
parameter_list|()
block|{
name|distanceFilter
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
