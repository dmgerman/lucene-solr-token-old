begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|NumericTokenStream
import|;
end_import
begin_comment
comment|// for javadocs
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|NumericRangeQuery
import|;
end_import
begin_comment
comment|// for javadocs
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import
begin_comment
comment|// for javadocs
end_comment
begin_comment
comment|/**  * TODO -- when solr moves NumberUtils to lucene, this should be redundant  *   * This is a copy of solr's number utils with only the functions we use...  *   * @deprecated TODO: This helper class will be removed soonly.  * For new indexes use {@link NumericUtils} instead, which provides a sortable  * binary representation (prefix encoded) of numeric values.  * To index and efficiently query numeric values use {@link NumericTokenStream}  * and {@link NumericRangeQuery}.  */
end_comment
begin_class
annotation|@
name|Deprecated
DECL|class|NumberUtils
specifier|public
class|class
name|NumberUtils
block|{
DECL|method|long2sortableStr
specifier|public
specifier|static
name|String
name|long2sortableStr
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|char
index|[]
name|arr
init|=
operator|new
name|char
index|[
literal|5
index|]
decl_stmt|;
name|long2sortableStr
argument_list|(
name|val
argument_list|,
name|arr
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|arr
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
return|;
block|}
DECL|method|double2sortableStr
specifier|public
specifier|static
name|String
name|double2sortableStr
parameter_list|(
name|double
name|val
parameter_list|)
block|{
name|long
name|f
init|=
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|<
literal|0
condition|)
name|f
operator|^=
literal|0x7fffffffffffffffL
expr_stmt|;
return|return
name|long2sortableStr
argument_list|(
name|f
argument_list|)
return|;
block|}
DECL|method|SortableStr2double
specifier|public
specifier|static
name|double
name|SortableStr2double
parameter_list|(
name|String
name|val
parameter_list|)
block|{
name|long
name|f
init|=
name|SortableStr2long
argument_list|(
name|val
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|<
literal|0
condition|)
name|f
operator|^=
literal|0x7fffffffffffffffL
expr_stmt|;
return|return
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|f
argument_list|)
return|;
block|}
DECL|method|long2sortableStr
specifier|public
specifier|static
name|int
name|long2sortableStr
parameter_list|(
name|long
name|val
parameter_list|,
name|char
index|[]
name|out
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|val
operator|+=
name|Long
operator|.
name|MIN_VALUE
expr_stmt|;
name|out
index|[
name|offset
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|val
operator|>>>
literal|60
argument_list|)
expr_stmt|;
name|out
index|[
name|offset
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|val
operator|>>>
literal|45
operator|&
literal|0x7fff
argument_list|)
expr_stmt|;
name|out
index|[
name|offset
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|val
operator|>>>
literal|30
operator|&
literal|0x7fff
argument_list|)
expr_stmt|;
name|out
index|[
name|offset
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|val
operator|>>>
literal|15
operator|&
literal|0x7fff
argument_list|)
expr_stmt|;
name|out
index|[
name|offset
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|val
operator|&
literal|0x7fff
argument_list|)
expr_stmt|;
return|return
literal|5
return|;
block|}
DECL|method|SortableStr2long
specifier|public
specifier|static
name|long
name|SortableStr2long
parameter_list|(
name|String
name|sval
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|long
name|val
init|=
call|(
name|long
call|)
argument_list|(
name|sval
operator|.
name|charAt
argument_list|(
name|offset
operator|++
argument_list|)
argument_list|)
operator|<<
literal|60
decl_stmt|;
name|val
operator||=
operator|(
operator|(
name|long
operator|)
name|sval
operator|.
name|charAt
argument_list|(
name|offset
operator|++
argument_list|)
operator|)
operator|<<
literal|45
expr_stmt|;
name|val
operator||=
operator|(
operator|(
name|long
operator|)
name|sval
operator|.
name|charAt
argument_list|(
name|offset
operator|++
argument_list|)
operator|)
operator|<<
literal|30
expr_stmt|;
name|val
operator||=
name|sval
operator|.
name|charAt
argument_list|(
name|offset
operator|++
argument_list|)
operator|<<
literal|15
expr_stmt|;
name|val
operator||=
name|sval
operator|.
name|charAt
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|val
operator|-=
name|Long
operator|.
name|MIN_VALUE
expr_stmt|;
return|return
name|val
return|;
block|}
block|}
end_class
end_unit
