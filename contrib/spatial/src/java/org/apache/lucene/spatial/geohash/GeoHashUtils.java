begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.geohash
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geohash
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/**  * Based on http://en.wikipedia.org/wiki/Geohash  *  *<p><font color="red"><b>NOTE:</b> This API is still in  * flux and might change in incompatible ways in the next  * release.</font>  */
end_comment
begin_class
DECL|class|GeoHashUtils
specifier|public
class|class
name|GeoHashUtils
block|{
comment|// geohash's char map
comment|// no a's i's l's o's
comment|// old MacDonal wouldn't be happy
DECL|field|_base32
specifier|private
specifier|static
name|char
index|[]
name|_base32
init|=
block|{
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'b'
block|,
literal|'c'
block|,
literal|'d'
block|,
literal|'e'
block|,
literal|'f'
block|,
literal|'g'
block|,
literal|'h'
block|,
literal|'j'
block|,
literal|'k'
block|,
literal|'m'
block|,
literal|'n'
block|,
literal|'p'
block|,
literal|'q'
block|,
literal|'r'
block|,
literal|'s'
block|,
literal|'t'
block|,
literal|'u'
block|,
literal|'v'
block|,
literal|'w'
block|,
literal|'x'
block|,
literal|'y'
block|,
literal|'z'
block|}
decl_stmt|;
DECL|field|_decodemap
specifier|private
specifier|final
specifier|static
name|Map
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|>
name|_decodemap
init|=
operator|new
name|HashMap
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|int
name|sz
init|=
name|_base32
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|_decodemap
operator|.
name|put
argument_list|(
name|_base32
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|precision
specifier|private
specifier|static
name|int
name|precision
init|=
literal|12
decl_stmt|;
DECL|field|bits
specifier|private
specifier|static
name|int
index|[]
name|bits
init|=
block|{
literal|16
block|,
literal|8
block|,
literal|4
block|,
literal|2
block|,
literal|1
block|}
decl_stmt|;
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|GeoHashUtils
name|ghf
init|=
operator|new
name|GeoHashUtils
argument_list|()
decl_stmt|;
name|String
name|gc1
init|=
name|ghf
operator|.
name|encode
argument_list|(
literal|30
argument_list|,
operator|-
literal|90.0
argument_list|)
decl_stmt|;
name|String
name|gc2
init|=
name|ghf
operator|.
name|encode
argument_list|(
literal|51.4797
argument_list|,
operator|-
literal|0.0124
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|gc1
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|gc2
argument_list|)
expr_stmt|;
name|double
index|[]
name|gd1
init|=
name|ghf
operator|.
name|decode
argument_list|(
name|gc1
argument_list|)
decl_stmt|;
name|double
index|[]
name|gd2
init|=
name|ghf
operator|.
name|decode
argument_list|(
name|gc2
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|gd1
index|[
literal|0
index|]
operator|+
literal|", "
operator|+
name|gd1
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|gd2
index|[
literal|0
index|]
operator|+
literal|", "
operator|+
name|gd2
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|encode
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|)
block|{
name|double
index|[]
name|lat_interval
init|=
block|{
operator|-
literal|90.0
block|,
literal|90.0
block|}
decl_stmt|;
name|double
index|[]
name|lon_interval
init|=
block|{
operator|-
literal|180.0
block|,
literal|180.0
block|}
decl_stmt|;
name|StringBuilder
name|geohash
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|is_even
init|=
literal|true
decl_stmt|;
name|int
name|bit
init|=
literal|0
decl_stmt|,
name|ch
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|geohash
operator|.
name|length
argument_list|()
operator|<
name|precision
condition|)
block|{
name|double
name|mid
init|=
literal|0.0
decl_stmt|;
if|if
condition|(
name|is_even
condition|)
block|{
name|mid
operator|=
operator|(
name|lon_interval
index|[
literal|0
index|]
operator|+
name|lon_interval
index|[
literal|1
index|]
operator|)
operator|/
literal|2
expr_stmt|;
if|if
condition|(
name|longitude
operator|>
name|mid
condition|)
block|{
name|ch
operator||=
name|bits
index|[
name|bit
index|]
expr_stmt|;
name|lon_interval
index|[
literal|0
index|]
operator|=
name|mid
expr_stmt|;
block|}
else|else
block|{
name|lon_interval
index|[
literal|1
index|]
operator|=
name|mid
expr_stmt|;
block|}
block|}
else|else
block|{
name|mid
operator|=
operator|(
name|lat_interval
index|[
literal|0
index|]
operator|+
name|lat_interval
index|[
literal|1
index|]
operator|)
operator|/
literal|2
expr_stmt|;
if|if
condition|(
name|latitude
operator|>
name|mid
condition|)
block|{
name|ch
operator||=
name|bits
index|[
name|bit
index|]
expr_stmt|;
name|lat_interval
index|[
literal|0
index|]
operator|=
name|mid
expr_stmt|;
block|}
else|else
block|{
name|lat_interval
index|[
literal|1
index|]
operator|=
name|mid
expr_stmt|;
block|}
block|}
name|is_even
operator|=
name|is_even
condition|?
literal|false
else|:
literal|true
expr_stmt|;
if|if
condition|(
name|bit
operator|<
literal|4
condition|)
block|{
name|bit
operator|++
expr_stmt|;
block|}
else|else
block|{
name|geohash
operator|.
name|append
argument_list|(
name|_base32
index|[
name|ch
index|]
argument_list|)
expr_stmt|;
name|bit
operator|=
literal|0
expr_stmt|;
name|ch
operator|=
literal|0
expr_stmt|;
block|}
block|}
return|return
name|geohash
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|decode
specifier|public
specifier|static
name|double
index|[]
name|decode
parameter_list|(
name|String
name|geohash
parameter_list|)
block|{
name|double
index|[]
name|ge
init|=
name|decode_exactly
argument_list|(
name|geohash
argument_list|)
decl_stmt|;
name|double
name|lat
decl_stmt|,
name|lon
decl_stmt|,
name|lat_err
decl_stmt|,
name|lon_err
decl_stmt|;
name|lat
operator|=
name|ge
index|[
literal|0
index|]
expr_stmt|;
name|lon
operator|=
name|ge
index|[
literal|1
index|]
expr_stmt|;
name|lat_err
operator|=
name|ge
index|[
literal|2
index|]
expr_stmt|;
name|lon_err
operator|=
name|ge
index|[
literal|3
index|]
expr_stmt|;
name|double
name|lat_precision
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|Math
operator|.
name|round
argument_list|(
operator|-
name|Math
operator|.
name|log10
argument_list|(
name|lat_err
argument_list|)
argument_list|)
argument_list|)
operator|-
literal|1
decl_stmt|;
name|double
name|lon_precision
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|Math
operator|.
name|round
argument_list|(
operator|-
name|Math
operator|.
name|log10
argument_list|(
name|lon_err
argument_list|)
argument_list|)
argument_list|)
operator|-
literal|1
decl_stmt|;
name|lat
operator|=
name|getPrecision
argument_list|(
name|lat
argument_list|,
name|lat_precision
argument_list|)
expr_stmt|;
name|lon
operator|=
name|getPrecision
argument_list|(
name|lon
argument_list|,
name|lon_precision
argument_list|)
expr_stmt|;
return|return
operator|new
name|double
index|[]
block|{
name|lat
block|,
name|lon
block|}
return|;
block|}
DECL|method|decode_exactly
specifier|public
specifier|static
name|double
index|[]
name|decode_exactly
parameter_list|(
name|String
name|geohash
parameter_list|)
block|{
name|double
index|[]
name|lat_interval
init|=
block|{
operator|-
literal|90.0
block|,
literal|90.0
block|}
decl_stmt|;
name|double
index|[]
name|lon_interval
init|=
block|{
operator|-
literal|180.0
block|,
literal|180.0
block|}
decl_stmt|;
name|double
name|lat_err
init|=
literal|90.0
decl_stmt|;
name|double
name|lon_err
init|=
literal|180.0
decl_stmt|;
name|boolean
name|is_even
init|=
literal|true
decl_stmt|;
name|int
name|sz
init|=
name|geohash
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|bsz
init|=
name|bits
operator|.
name|length
decl_stmt|;
name|double
name|latitude
decl_stmt|,
name|longitude
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|int
name|cd
init|=
name|_decodemap
operator|.
name|get
argument_list|(
name|geohash
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|z
init|=
literal|0
init|;
name|z
operator|<
name|bsz
condition|;
name|z
operator|++
control|)
block|{
name|int
name|mask
init|=
name|bits
index|[
name|z
index|]
decl_stmt|;
if|if
condition|(
name|is_even
condition|)
block|{
name|lon_err
operator|/=
literal|2
expr_stmt|;
if|if
condition|(
operator|(
name|cd
operator|&
name|mask
operator|)
operator|!=
literal|0
condition|)
block|{
name|lon_interval
index|[
literal|0
index|]
operator|=
operator|(
name|lon_interval
index|[
literal|0
index|]
operator|+
name|lon_interval
index|[
literal|1
index|]
operator|)
operator|/
literal|2
expr_stmt|;
block|}
else|else
block|{
name|lon_interval
index|[
literal|1
index|]
operator|=
operator|(
name|lon_interval
index|[
literal|0
index|]
operator|+
name|lon_interval
index|[
literal|1
index|]
operator|)
operator|/
literal|2
expr_stmt|;
block|}
block|}
else|else
block|{
name|lat_err
operator|/=
literal|2
expr_stmt|;
if|if
condition|(
operator|(
name|cd
operator|&
name|mask
operator|)
operator|!=
literal|0
condition|)
block|{
name|lat_interval
index|[
literal|0
index|]
operator|=
operator|(
name|lat_interval
index|[
literal|0
index|]
operator|+
name|lat_interval
index|[
literal|1
index|]
operator|)
operator|/
literal|2
expr_stmt|;
block|}
else|else
block|{
name|lat_interval
index|[
literal|1
index|]
operator|=
operator|(
name|lat_interval
index|[
literal|0
index|]
operator|+
name|lat_interval
index|[
literal|1
index|]
operator|)
operator|/
literal|2
expr_stmt|;
block|}
block|}
name|is_even
operator|=
name|is_even
condition|?
literal|false
else|:
literal|true
expr_stmt|;
block|}
block|}
name|latitude
operator|=
operator|(
name|lat_interval
index|[
literal|0
index|]
operator|+
name|lat_interval
index|[
literal|1
index|]
operator|)
operator|/
literal|2
expr_stmt|;
name|longitude
operator|=
operator|(
name|lon_interval
index|[
literal|0
index|]
operator|+
name|lon_interval
index|[
literal|1
index|]
operator|)
operator|/
literal|2
expr_stmt|;
return|return
operator|new
name|double
index|[]
block|{
name|latitude
block|,
name|longitude
block|,
name|lat_err
block|,
name|lon_err
block|}
return|;
block|}
DECL|method|getPrecision
specifier|static
name|double
name|getPrecision
parameter_list|(
name|double
name|x
parameter_list|,
name|double
name|precision
parameter_list|)
block|{
name|double
name|base
init|=
name|Math
operator|.
name|pow
argument_list|(
literal|10
argument_list|,
operator|-
name|precision
argument_list|)
decl_stmt|;
name|double
name|diff
init|=
name|x
operator|%
name|base
decl_stmt|;
return|return
name|x
operator|-
name|diff
return|;
block|}
block|}
end_class
end_unit
