begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.geometry.shape
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geometry
operator|.
name|shape
package|;
end_package
begin_comment
comment|/**  * Rectangle shape.    *  *<p><font color="red"><b>NOTE:</b> This API is still in  * flux and might change in incompatible ways in the next  * release.</font>  */
end_comment
begin_class
DECL|class|Rectangle
specifier|public
class|class
name|Rectangle
implements|implements
name|Geometry2D
block|{
DECL|field|ptMin
DECL|field|ptMax
specifier|private
name|Point2D
name|ptMin
decl_stmt|,
name|ptMax
decl_stmt|;
DECL|method|Rectangle
specifier|public
name|Rectangle
parameter_list|()
block|{
name|ptMin
operator|=
operator|new
name|Point2D
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ptMax
operator|=
operator|new
name|Point2D
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|Rectangle
specifier|public
name|Rectangle
parameter_list|(
name|Point2D
name|ptMin
parameter_list|,
name|Point2D
name|ptMax
parameter_list|)
block|{
name|this
operator|.
name|ptMin
operator|=
operator|new
name|Point2D
argument_list|(
name|ptMin
argument_list|)
expr_stmt|;
name|this
operator|.
name|ptMax
operator|=
operator|new
name|Point2D
argument_list|(
name|ptMax
argument_list|)
expr_stmt|;
block|}
DECL|method|Rectangle
specifier|public
name|Rectangle
parameter_list|(
name|double
name|x1
parameter_list|,
name|double
name|y1
parameter_list|,
name|double
name|x2
parameter_list|,
name|double
name|y2
parameter_list|)
block|{
name|set
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|ptMin
operator|+
literal|","
operator|+
name|ptMax
operator|+
literal|"]"
return|;
block|}
DECL|method|set
specifier|private
name|void
name|set
parameter_list|(
name|double
name|x1
parameter_list|,
name|double
name|y1
parameter_list|,
name|double
name|x2
parameter_list|,
name|double
name|y2
parameter_list|)
block|{
name|this
operator|.
name|ptMin
operator|=
operator|new
name|Point2D
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|x1
argument_list|,
name|x2
argument_list|)
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|y1
argument_list|,
name|y2
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|ptMax
operator|=
operator|new
name|Point2D
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|x1
argument_list|,
name|x2
argument_list|)
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|y1
argument_list|,
name|y2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|area
specifier|public
name|double
name|area
parameter_list|()
block|{
return|return
operator|(
name|ptMax
operator|.
name|getX
argument_list|()
operator|-
name|ptMin
operator|.
name|getX
argument_list|()
operator|)
operator|*
operator|(
name|ptMax
operator|.
name|getY
argument_list|()
operator|-
name|ptMin
operator|.
name|getY
argument_list|()
operator|)
return|;
block|}
DECL|method|centroid
specifier|public
name|Point2D
name|centroid
parameter_list|()
block|{
return|return
operator|new
name|Point2D
argument_list|(
operator|(
name|ptMin
operator|.
name|getX
argument_list|()
operator|+
name|ptMax
operator|.
name|getX
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|ptMin
operator|.
name|getY
argument_list|()
operator|+
name|ptMax
operator|.
name|getY
argument_list|()
operator|)
operator|/
literal|2
argument_list|)
return|;
block|}
DECL|method|contains
specifier|public
name|boolean
name|contains
parameter_list|(
name|Point2D
name|p
parameter_list|)
block|{
return|return
name|p
operator|.
name|getX
argument_list|()
operator|>=
name|ptMin
operator|.
name|getX
argument_list|()
operator|&&
name|p
operator|.
name|getX
argument_list|()
operator|<=
name|ptMax
operator|.
name|getX
argument_list|()
operator|&&
name|p
operator|.
name|getY
argument_list|()
operator|>=
name|ptMin
operator|.
name|getY
argument_list|()
operator|&&
name|p
operator|.
name|getY
argument_list|()
operator|<=
name|ptMax
operator|.
name|getY
argument_list|()
return|;
block|}
DECL|method|translate
specifier|public
name|void
name|translate
parameter_list|(
name|Vector2D
name|v
parameter_list|)
block|{
name|ptMin
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|ptMax
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
DECL|method|MinPt
name|Point2D
name|MinPt
parameter_list|()
block|{
return|return
name|ptMin
return|;
block|}
DECL|method|MaxPt
name|Point2D
name|MaxPt
parameter_list|()
block|{
return|return
name|ptMax
return|;
block|}
DECL|method|intersect
specifier|public
name|IntersectCase
name|intersect
parameter_list|(
name|Rectangle
name|r
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
comment|// TODO
block|}
DECL|method|getMaxPoint
specifier|public
name|Point2D
name|getMaxPoint
parameter_list|()
block|{
return|return
name|ptMax
return|;
block|}
DECL|method|getMinPoint
specifier|public
name|Point2D
name|getMinPoint
parameter_list|()
block|{
return|return
name|ptMin
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|ptMax
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|ptMax
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|ptMin
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|ptMin
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Rectangle
name|other
init|=
operator|(
name|Rectangle
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|ptMax
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|ptMax
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|ptMax
operator|.
name|equals
argument_list|(
name|other
operator|.
name|ptMax
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|ptMin
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|ptMin
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|ptMin
operator|.
name|equals
argument_list|(
name|other
operator|.
name|ptMin
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
