begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.tier
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|tier
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geometry
operator|.
name|DistanceUnits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geometry
operator|.
name|FloatLatLng
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geometry
operator|.
name|LatLng
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geometry
operator|.
name|shape
operator|.
name|LLRect
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geometry
operator|.
name|shape
operator|.
name|Rectangle
import|;
end_import
begin_class
DECL|class|DistanceUtils
specifier|public
class|class
name|DistanceUtils
block|{
DECL|field|instance
specifier|static
name|DistanceUtils
name|instance
init|=
operator|new
name|DistanceUtils
argument_list|()
decl_stmt|;
DECL|method|getInstance
specifier|public
specifier|static
name|DistanceUtils
name|getInstance
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
DECL|method|getDistanceMi
specifier|public
name|double
name|getDistanceMi
parameter_list|(
name|double
name|x1
parameter_list|,
name|double
name|y1
parameter_list|,
name|double
name|x2
parameter_list|,
name|double
name|y2
parameter_list|)
block|{
return|return
name|getLLMDistance
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|)
return|;
block|}
comment|/**    *     * @param x1    * @param y1    * @param miles    * @return boundary rectangle where getY/getX is top left, getMinY/getMinX is bottom right    */
DECL|method|getBoundary
specifier|public
name|Rectangle
name|getBoundary
parameter_list|(
name|double
name|x1
parameter_list|,
name|double
name|y1
parameter_list|,
name|double
name|miles
parameter_list|)
block|{
name|LLRect
name|box
init|=
name|LLRect
operator|.
name|createBox
argument_list|(
operator|new
name|FloatLatLng
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
argument_list|,
name|miles
argument_list|,
name|miles
argument_list|)
decl_stmt|;
comment|//System.out.println("Box: "+maxX+" | "+ maxY+" | "+ minX + " | "+ minY);
return|return
name|box
operator|.
name|toRectangle
argument_list|()
return|;
block|}
DECL|method|getLLMDistance
specifier|public
name|double
name|getLLMDistance
parameter_list|(
name|double
name|x1
parameter_list|,
name|double
name|y1
parameter_list|,
name|double
name|x2
parameter_list|,
name|double
name|y2
parameter_list|)
block|{
name|LatLng
name|p1
init|=
operator|new
name|FloatLatLng
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
decl_stmt|;
name|LatLng
name|p2
init|=
operator|new
name|FloatLatLng
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|)
decl_stmt|;
return|return
name|p1
operator|.
name|arcDistance
argument_list|(
name|p2
argument_list|,
name|DistanceUnits
operator|.
name|MILES
argument_list|)
return|;
block|}
block|}
end_class
end_unit
