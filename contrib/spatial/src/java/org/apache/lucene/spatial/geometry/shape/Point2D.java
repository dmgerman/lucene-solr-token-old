begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.geometry.shape
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geometry
operator|.
name|shape
package|;
end_package
begin_comment
comment|/**  * Point class.  This type is mutable.  */
end_comment
begin_class
DECL|class|Point2D
specifier|public
class|class
name|Point2D
block|{
DECL|field|x
specifier|private
name|double
name|x
decl_stmt|;
DECL|field|y
specifier|private
name|double
name|y
decl_stmt|;
DECL|method|Point2D
specifier|public
name|Point2D
parameter_list|(
name|double
name|x
parameter_list|,
name|double
name|y
parameter_list|)
block|{
name|this
operator|.
name|x
operator|=
name|x
expr_stmt|;
name|this
operator|.
name|y
operator|=
name|y
expr_stmt|;
block|}
DECL|method|Point2D
specifier|public
name|Point2D
parameter_list|()
block|{
name|this
operator|.
name|x
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|y
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|Point2D
specifier|public
name|Point2D
parameter_list|(
name|Point2D
name|other
parameter_list|)
block|{
name|this
operator|.
name|x
operator|=
name|other
operator|.
name|x
expr_stmt|;
name|this
operator|.
name|y
operator|=
name|other
operator|.
name|y
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"("
operator|+
name|x
operator|+
literal|","
operator|+
name|y
operator|+
literal|")"
return|;
block|}
DECL|method|getX
specifier|public
name|double
name|getX
parameter_list|()
block|{
return|return
name|x
return|;
block|}
DECL|method|getY
specifier|public
name|double
name|getY
parameter_list|()
block|{
return|return
name|y
return|;
block|}
DECL|method|x
specifier|public
name|double
name|x
parameter_list|()
block|{
return|return
name|x
return|;
block|}
DECL|method|y
specifier|public
name|double
name|y
parameter_list|()
block|{
return|return
name|y
return|;
block|}
DECL|method|x
specifier|public
name|void
name|x
parameter_list|(
name|double
name|x
parameter_list|)
block|{
name|this
operator|.
name|x
operator|=
name|x
expr_stmt|;
block|}
DECL|method|y
specifier|public
name|void
name|y
parameter_list|(
name|double
name|y
parameter_list|)
block|{
name|this
operator|.
name|y
operator|=
name|y
expr_stmt|;
block|}
DECL|method|setX
specifier|public
name|void
name|setX
parameter_list|(
name|double
name|x
parameter_list|)
block|{
name|this
operator|.
name|x
operator|=
name|x
expr_stmt|;
block|}
DECL|method|setY
specifier|public
name|void
name|setY
parameter_list|(
name|double
name|y
parameter_list|)
block|{
name|this
operator|.
name|y
operator|=
name|y
expr_stmt|;
block|}
DECL|method|set
specifier|public
name|void
name|set
parameter_list|(
name|double
name|x
parameter_list|,
name|double
name|y
parameter_list|)
block|{
name|this
operator|.
name|x
operator|=
name|x
expr_stmt|;
name|this
operator|.
name|y
operator|=
name|y
expr_stmt|;
block|}
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Point2D
name|other
parameter_list|)
block|{
return|return
name|other
operator|!=
literal|null
operator|&&
name|x
operator|==
name|other
operator|.
name|x
operator|&&
name|y
operator|==
name|other
operator|.
name|y
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|Point2D
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|equals
argument_list|(
operator|(
name|Point2D
operator|)
name|other
argument_list|)
return|;
block|}
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|Vector2D
name|v
parameter_list|)
block|{
name|this
operator|.
name|x
operator|+=
name|v
operator|.
name|getX
argument_list|()
expr_stmt|;
name|this
operator|.
name|y
operator|+=
name|v
operator|.
name|getY
argument_list|()
expr_stmt|;
block|}
DECL|method|set
specifier|public
name|void
name|set
parameter_list|(
name|Point2D
name|p1
parameter_list|)
block|{
name|this
operator|.
name|x
operator|=
name|p1
operator|.
name|getX
argument_list|()
expr_stmt|;
name|this
operator|.
name|y
operator|=
name|p1
operator|.
name|getY
argument_list|()
expr_stmt|;
block|}
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|Point2D
name|a
parameter_list|)
block|{
name|this
operator|.
name|x
operator|+=
name|a
operator|.
name|getX
argument_list|()
expr_stmt|;
name|this
operator|.
name|y
operator|+=
name|a
operator|.
name|getY
argument_list|()
expr_stmt|;
block|}
DECL|method|set
specifier|public
name|void
name|set
parameter_list|(
name|Vector2D
name|v
parameter_list|)
block|{
name|this
operator|.
name|x
operator|=
name|v
operator|.
name|getX
argument_list|()
expr_stmt|;
name|this
operator|.
name|y
operator|=
name|v
operator|.
name|getY
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
