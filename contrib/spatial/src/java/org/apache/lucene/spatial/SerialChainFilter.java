begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|DocIdBitSet
import|;
end_import
begin_comment
comment|/**  *   * Provide a serial chain filter, passing the bitset in with the  * index reader to each of the filters in an ordered fashion.  *   * Based off chain filter, but with some improvements to allow a narrowed down  * filtering. Traditional filter required iteration through an IndexReader.  *   * By implementing the ISerialChainFilter class, you can create a bits(IndexReader reader, BitSet bits)  * @see org.apache.lucene.search.ISerialChainFilter  *   */
end_comment
begin_class
DECL|class|SerialChainFilter
specifier|public
class|class
name|SerialChainFilter
extends|extends
name|Filter
block|{
comment|/**    * $Id: SerialChainFilter.java 136 2008-12-17 16:16:38Z ryantxu $    */
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|chain
specifier|private
name|Filter
name|chain
index|[]
decl_stmt|;
DECL|field|SERIALAND
specifier|public
specifier|static
specifier|final
name|int
name|SERIALAND
init|=
literal|1
decl_stmt|;
DECL|field|SERIALOR
specifier|public
specifier|static
specifier|final
name|int
name|SERIALOR
init|=
literal|2
decl_stmt|;
DECL|field|AND
specifier|public
specifier|static
specifier|final
name|int
name|AND
init|=
literal|3
decl_stmt|;
comment|// regular filters may be used first
DECL|field|OR
specifier|public
specifier|static
specifier|final
name|int
name|OR
init|=
literal|4
decl_stmt|;
comment|// regular filters may be used first
DECL|field|DEFAULT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT
init|=
name|SERIALOR
decl_stmt|;
DECL|field|actionType
specifier|private
name|int
name|actionType
index|[]
decl_stmt|;
DECL|method|SerialChainFilter
specifier|public
name|SerialChainFilter
parameter_list|(
name|Filter
name|chain
index|[]
parameter_list|)
block|{
name|this
operator|.
name|chain
operator|=
name|chain
expr_stmt|;
name|this
operator|.
name|actionType
operator|=
operator|new
name|int
index|[]
block|{
name|DEFAULT
block|}
expr_stmt|;
block|}
DECL|method|SerialChainFilter
specifier|public
name|SerialChainFilter
parameter_list|(
name|Filter
name|chain
index|[]
parameter_list|,
name|int
name|actionType
index|[]
parameter_list|)
block|{
name|this
operator|.
name|chain
operator|=
name|chain
expr_stmt|;
name|this
operator|.
name|actionType
operator|=
name|actionType
expr_stmt|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.lucene.search.Filter#bits(org.apache.lucene.index.IndexReader)    */
annotation|@
name|Override
DECL|method|bits
specifier|public
name|BitSet
name|bits
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
operator|(
name|DocIdBitSet
operator|)
name|getDocIdSet
argument_list|(
name|reader
argument_list|)
operator|)
operator|.
name|getBitSet
argument_list|()
return|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)    */
annotation|@
name|Override
DECL|method|getDocIdSet
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|BitSet
name|bits
init|=
operator|new
name|BitSet
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|chainSize
init|=
name|chain
operator|.
name|length
decl_stmt|;
name|int
name|actionSize
init|=
name|actionType
operator|.
name|length
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/**      * taken from ChainedFilter, first and on an empty bitset results in 0      */
if|if
condition|(
name|actionType
index|[
name|i
index|]
operator|==
name|AND
condition|)
block|{
try|try
block|{
comment|//System.out.println(chain[i] );
name|bits
operator|=
call|(
name|BitSet
call|)
argument_list|(
operator|(
name|DocIdBitSet
operator|)
name|chain
index|[
name|i
index|]
operator|.
name|getDocIdSet
argument_list|(
name|reader
argument_list|)
argument_list|)
operator|.
name|getBitSet
argument_list|()
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
operator|++
name|i
expr_stmt|;
block|}
for|for
control|(
init|;
name|i
operator|<
name|chainSize
condition|;
name|i
operator|++
control|)
block|{
name|int
name|action
init|=
operator|(
name|i
operator|<
name|actionSize
operator|)
condition|?
name|actionType
index|[
name|i
index|]
else|:
name|DEFAULT
decl_stmt|;
comment|//System.out.println(chain[i] + ": "+  action);
switch|switch
condition|(
name|action
condition|)
block|{
case|case
operator|(
name|SERIALAND
operator|)
case|:
try|try
block|{
name|bits
operator|.
name|and
argument_list|(
operator|(
operator|(
name|ISerialChainFilter
operator|)
name|chain
index|[
name|i
index|]
operator|)
operator|.
name|bits
argument_list|(
name|reader
argument_list|,
name|bits
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
operator|(
name|SERIALOR
operator|)
case|:
try|try
block|{
name|bits
operator|.
name|or
argument_list|(
operator|(
operator|(
name|ISerialChainFilter
operator|)
name|chain
index|[
name|i
index|]
operator|)
operator|.
name|bits
argument_list|(
name|reader
argument_list|,
name|bits
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
operator|(
name|AND
operator|)
case|:
name|bits
operator|.
name|and
argument_list|(
name|chain
index|[
name|i
index|]
operator|.
name|bits
argument_list|(
name|reader
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
operator|(
name|OR
operator|)
case|:
name|bits
operator|.
name|or
argument_list|(
operator|(
operator|(
name|DocIdBitSet
operator|)
name|chain
index|[
name|i
index|]
operator|.
name|getDocIdSet
argument_list|(
name|reader
argument_list|)
operator|)
operator|.
name|getBitSet
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|//    System.out.println("++++++====================");
comment|//    new Exception().printStackTrace();
return|return
operator|new
name|DocIdBitSet
argument_list|(
name|bits
argument_list|)
return|;
block|}
comment|/**    * @return the chain    */
DECL|method|getChain
name|Filter
index|[]
name|getChain
parameter_list|()
block|{
return|return
name|chain
return|;
block|}
comment|/**    * @return the actionType    */
DECL|method|getActionType
name|int
index|[]
name|getActionType
parameter_list|()
block|{
return|return
name|actionType
return|;
block|}
comment|/**     * Returns true if<code>o</code> is equal to this.    *     * @see org.apache.lucene.search.RangeFilter#equals    */
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|SerialChainFilter
operator|)
condition|)
return|return
literal|false
return|;
name|SerialChainFilter
name|other
init|=
operator|(
name|SerialChainFilter
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|chain
operator|.
name|length
operator|!=
name|other
operator|.
name|getChain
argument_list|()
operator|.
name|length
operator|||
name|this
operator|.
name|actionType
operator|.
name|length
operator|!=
name|other
operator|.
name|getActionType
argument_list|()
operator|.
name|length
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|chain
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|this
operator|.
name|actionType
index|[
name|i
index|]
operator|!=
name|other
operator|.
name|getActionType
argument_list|()
index|[
name|i
index|]
operator|||
operator|(
operator|!
name|this
operator|.
name|chain
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getChain
argument_list|()
index|[
name|i
index|]
argument_list|)
operator|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**     * Returns a hash code value for this object.    *     * @see org.apache.lucene.search.RangeFilter#hashCode    */
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|chain
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|0
return|;
name|int
name|h
init|=
name|chain
index|[
literal|0
index|]
operator|.
name|hashCode
argument_list|()
operator|^
operator|new
name|Integer
argument_list|(
name|actionType
index|[
literal|0
index|]
argument_list|)
operator|.
name|hashCode
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|this
operator|.
name|chain
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|h
operator|^=
name|chain
index|[
name|i
index|]
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|h
operator|^=
operator|new
name|Integer
argument_list|(
name|actionType
index|[
name|i
index|]
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|h
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"SerialChainFilter("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chain
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|actionType
index|[
name|i
index|]
condition|)
block|{
case|case
operator|(
name|SERIALAND
operator|)
case|:
name|buf
operator|.
name|append
argument_list|(
literal|"SERIALAND"
argument_list|)
expr_stmt|;
break|break;
case|case
operator|(
name|SERIALOR
operator|)
case|:
name|buf
operator|.
name|append
argument_list|(
literal|"SERIALOR"
argument_list|)
expr_stmt|;
break|break;
case|case
operator|(
name|AND
operator|)
case|:
name|buf
operator|.
name|append
argument_list|(
literal|"AND"
argument_list|)
expr_stmt|;
break|break;
case|case
operator|(
name|OR
operator|)
case|:
name|buf
operator|.
name|append
argument_list|(
literal|"OR"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|buf
operator|.
name|append
argument_list|(
name|actionType
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|chain
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
end_class
end_unit
