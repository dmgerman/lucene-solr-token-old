begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.geometry.shape
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geometry
operator|.
name|shape
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geometry
operator|.
name|FloatLatLng
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geometry
operator|.
name|LatLng
import|;
end_import
begin_comment
comment|/**  * Lat-long rect.  Instances are mutable.  *  *<p><font color="red"><b>NOTE:</b> This API is still in  * flux and might change in incompatible ways in the next  * release.</font>  */
end_comment
begin_class
DECL|class|LLRect
specifier|public
class|class
name|LLRect
block|{
DECL|field|ll
DECL|field|ur
specifier|private
name|LatLng
name|ll
decl_stmt|,
name|ur
decl_stmt|;
DECL|method|LLRect
specifier|public
name|LLRect
parameter_list|(
name|LatLng
name|ll
parameter_list|,
name|LatLng
name|ur
parameter_list|)
block|{
name|this
operator|.
name|ll
operator|=
name|ll
expr_stmt|;
name|this
operator|.
name|ur
operator|=
name|ur
expr_stmt|;
block|}
DECL|method|LLRect
specifier|public
name|LLRect
parameter_list|(
name|LLRect
name|other
parameter_list|)
block|{
name|this
operator|.
name|ll
operator|=
name|other
operator|.
name|ll
expr_stmt|;
name|this
operator|.
name|ur
operator|=
name|other
operator|.
name|ur
expr_stmt|;
block|}
comment|/**    * Return the area in units of lat-lng squared.  This is a contrived unit    * that only has value when comparing to something else.    */
DECL|method|area
specifier|public
name|double
name|area
parameter_list|()
block|{
return|return
name|Math
operator|.
name|abs
argument_list|(
operator|(
name|ll
operator|.
name|getLat
argument_list|()
operator|-
name|ur
operator|.
name|getLat
argument_list|()
operator|)
operator|*
operator|(
name|ll
operator|.
name|getLng
argument_list|()
operator|-
name|ur
operator|.
name|getLng
argument_list|()
operator|)
argument_list|)
return|;
block|}
DECL|method|getLowerLeft
specifier|public
name|LatLng
name|getLowerLeft
parameter_list|()
block|{
return|return
name|ll
return|;
block|}
DECL|method|getUpperRight
specifier|public
name|LatLng
name|getUpperRight
parameter_list|()
block|{
return|return
name|ur
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|otherObj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|otherObj
operator|instanceof
name|LLRect
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|equals
argument_list|(
operator|(
name|LLRect
operator|)
name|otherObj
argument_list|)
return|;
block|}
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|LLRect
name|other
parameter_list|)
block|{
return|return
name|getLowerLeft
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getLowerLeft
argument_list|()
argument_list|)
operator|&&
name|getUpperRight
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getUpperRight
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"{"
operator|+
name|ll
operator|+
literal|", "
operator|+
name|ur
operator|+
literal|"}"
return|;
block|}
DECL|method|getMidpoint
specifier|public
name|LatLng
name|getMidpoint
parameter_list|()
block|{
return|return
name|ll
operator|.
name|calculateMidpoint
argument_list|(
name|ur
argument_list|)
return|;
block|}
comment|/**    * Approximates a box centered at the given point with the given width and height in miles.    * @param center    * @param widthMi    * @param heightMi    */
DECL|method|createBox
specifier|public
specifier|static
name|LLRect
name|createBox
parameter_list|(
name|LatLng
name|center
parameter_list|,
name|double
name|widthMi
parameter_list|,
name|double
name|heightMi
parameter_list|)
block|{
name|double
name|miplatdeg
init|=
name|DistanceApproximation
operator|.
name|getMilesPerLngDeg
argument_list|(
name|center
operator|.
name|getLat
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|miplngdeg
init|=
name|DistanceApproximation
operator|.
name|getMilesPerLatDeg
argument_list|()
decl_stmt|;
name|double
name|lngDelta
init|=
operator|(
name|widthMi
operator|/
literal|2
operator|)
operator|/
name|miplngdeg
decl_stmt|;
name|double
name|latDelta
init|=
operator|(
name|heightMi
operator|/
literal|2
operator|)
operator|/
name|miplatdeg
decl_stmt|;
comment|// TODO: Prob only works in northern hemisphere?
name|LatLng
name|ll
init|=
operator|new
name|FloatLatLng
argument_list|(
name|center
operator|.
name|getLat
argument_list|()
operator|-
name|latDelta
argument_list|,
name|center
operator|.
name|getLng
argument_list|()
operator|-
name|lngDelta
argument_list|)
decl_stmt|;
name|LatLng
name|ur
init|=
operator|new
name|FloatLatLng
argument_list|(
name|center
operator|.
name|getLat
argument_list|()
operator|+
name|latDelta
argument_list|,
name|center
operator|.
name|getLng
argument_list|()
operator|+
name|lngDelta
argument_list|)
decl_stmt|;
return|return
operator|new
name|LLRect
argument_list|(
name|ll
argument_list|,
name|ur
argument_list|)
return|;
block|}
comment|/**    * Returns a rectangle shape for the bounding box    */
DECL|method|toRectangle
specifier|public
name|Rectangle
name|toRectangle
parameter_list|()
block|{
return|return
operator|new
name|Rectangle
argument_list|(
name|ll
operator|.
name|getLng
argument_list|()
argument_list|,
name|ll
operator|.
name|getLat
argument_list|()
argument_list|,
name|ur
operator|.
name|getLng
argument_list|()
argument_list|,
name|ur
operator|.
name|getLat
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class
end_unit
