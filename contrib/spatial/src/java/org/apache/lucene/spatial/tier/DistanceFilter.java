begin_unit
begin_comment
comment|/** Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.tier
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|tier
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|ISerialChainFilter
import|;
end_import
begin_class
DECL|class|DistanceFilter
specifier|public
specifier|abstract
class|class
name|DistanceFilter
extends|extends
name|ISerialChainFilter
block|{
DECL|method|DistanceFilter
specifier|public
name|DistanceFilter
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|getDistances
specifier|public
specifier|abstract
name|Map
argument_list|<
name|Integer
argument_list|,
name|Double
argument_list|>
name|getDistances
parameter_list|()
function_decl|;
DECL|method|getDistance
specifier|public
specifier|abstract
name|Double
name|getDistance
parameter_list|(
name|int
name|docid
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|bits
specifier|public
specifier|abstract
name|BitSet
name|bits
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|bits
specifier|public
specifier|abstract
name|BitSet
name|bits
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|BitSet
name|bits
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/** Returns true if<code>o</code> is equal to this. */
annotation|@
name|Override
DECL|method|equals
specifier|public
specifier|abstract
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
function_decl|;
comment|/** Returns a hash code value for this object.*/
annotation|@
name|Override
DECL|method|hashCode
specifier|public
specifier|abstract
name|int
name|hashCode
parameter_list|()
function_decl|;
DECL|method|setDistances
specifier|public
specifier|abstract
name|void
name|setDistances
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|Double
argument_list|>
name|distances
parameter_list|)
function_decl|;
block|}
end_class
end_unit
