begin_unit
begin_comment
comment|/** Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.tier
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|tier
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|WeakHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|tier
operator|.
name|DistanceHandler
operator|.
name|Precision
import|;
end_import
begin_comment
comment|/**  *<p><font color="red"><b>NOTE:</b> This API is still in  * flux and might change in incompatible ways in the next  * release.</font>  */
end_comment
begin_class
DECL|class|DistanceFilter
specifier|public
specifier|abstract
class|class
name|DistanceFilter
extends|extends
name|Filter
block|{
DECL|field|startingFilter
specifier|final
specifier|protected
name|Filter
name|startingFilter
decl_stmt|;
DECL|field|precise
specifier|protected
name|Precision
name|precise
decl_stmt|;
DECL|field|distances
specifier|protected
name|Map
argument_list|<
name|Integer
argument_list|,
name|Double
argument_list|>
name|distances
decl_stmt|;
DECL|field|distance
specifier|protected
name|double
name|distance
decl_stmt|;
DECL|field|nextDocBase
specifier|protected
name|int
name|nextDocBase
decl_stmt|;
DECL|field|distanceLookupCache
specifier|protected
specifier|final
name|WeakHashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|distanceLookupCache
decl_stmt|;
comment|/** Filters the startingFilter by precise distance    *  checking filter */
DECL|method|DistanceFilter
specifier|public
name|DistanceFilter
parameter_list|(
name|Filter
name|startingFilter
parameter_list|,
name|double
name|distance
parameter_list|)
block|{
if|if
condition|(
name|startingFilter
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"please provide a non-null startingFilter; you can use QueryWrapperFilter(MatchAllDocsQuery) as a no-op filter"
argument_list|)
throw|;
block|}
name|this
operator|.
name|startingFilter
operator|=
name|startingFilter
expr_stmt|;
name|this
operator|.
name|distance
operator|=
name|distance
expr_stmt|;
comment|// NOTE: neither of the distance filters use precision
comment|// now - if we turn that on, we'll need to pass top
comment|// reader into here
comment|// setPrecision(reader.maxDoc());
comment|/* store calculated distances for reuse by other components */
name|distances
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Double
argument_list|>
argument_list|()
expr_stmt|;
comment|// create an intermediate cache to avoid recomputing
comment|//   distances for the same point
comment|//   TODO: Why is this a WeakHashMap?
name|distanceLookupCache
operator|=
operator|new
name|WeakHashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|getDistances
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|Double
argument_list|>
name|getDistances
parameter_list|()
block|{
return|return
name|distances
return|;
block|}
DECL|method|getDistance
specifier|public
name|Double
name|getDistance
parameter_list|(
name|int
name|docid
parameter_list|)
block|{
return|return
name|distances
operator|.
name|get
argument_list|(
name|docid
argument_list|)
return|;
block|}
DECL|method|setDistances
specifier|public
name|void
name|setDistances
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|Double
argument_list|>
name|distances
parameter_list|)
block|{
name|this
operator|.
name|distances
operator|=
name|distances
expr_stmt|;
block|}
comment|/** You must call this before re-using this DistanceFilter    *  across searches */
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|nextDocBase
operator|=
literal|0
expr_stmt|;
block|}
comment|/** Returns true if<code>o</code> is equal to this. */
DECL|method|equals
specifier|public
specifier|abstract
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
function_decl|;
comment|/** Returns a hash code value for this object.*/
DECL|method|hashCode
specifier|public
specifier|abstract
name|int
name|hashCode
parameter_list|()
function_decl|;
comment|/*   private void setPrecision(int maxDocs) {     precise = Precision.EXACT;          if (maxDocs> 1000&& distance> 10) {       precise = Precision.TWENTYFEET;     }          if (maxDocs> 10000&& distance> 10){       precise = Precision.TWOHUNDREDFEET;     }   }   */
block|}
end_class
end_unit
