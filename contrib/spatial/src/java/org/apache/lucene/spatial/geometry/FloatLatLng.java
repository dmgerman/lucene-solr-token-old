begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.spatial.geometry
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geometry
package|;
end_package
begin_class
DECL|class|FloatLatLng
specifier|public
class|class
name|FloatLatLng
extends|extends
name|LatLng
block|{
DECL|field|lat
specifier|private
name|double
name|lat
decl_stmt|;
DECL|field|lng
specifier|private
name|double
name|lng
decl_stmt|;
DECL|field|normalized
specifier|private
name|boolean
name|normalized
decl_stmt|;
DECL|method|FloatLatLng
specifier|public
name|FloatLatLng
parameter_list|(
name|double
name|lat
parameter_list|,
name|double
name|lng
parameter_list|)
block|{
if|if
condition|(
name|lat
operator|>
literal|90.0
operator|||
name|lat
operator|<
operator|-
literal|90.0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal lattitude value "
operator|+
name|lat
argument_list|)
throw|;
name|this
operator|.
name|lat
operator|=
name|lat
expr_stmt|;
name|this
operator|.
name|lng
operator|=
name|lng
expr_stmt|;
block|}
DECL|method|FloatLatLng
specifier|public
name|FloatLatLng
parameter_list|(
name|LatLng
name|ll
parameter_list|)
block|{
name|this
operator|.
name|lat
operator|=
name|ll
operator|.
name|getLat
argument_list|()
expr_stmt|;
name|this
operator|.
name|lng
operator|=
name|ll
operator|.
name|getLng
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|LatLng
name|other
parameter_list|)
block|{
return|return
name|lat
operator|==
name|other
operator|.
name|getLat
argument_list|()
operator|&&
name|lng
operator|==
name|other
operator|.
name|getLng
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|LatLng
name|copy
parameter_list|()
block|{
return|return
operator|new
name|FloatLatLng
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFixedLat
specifier|public
name|int
name|getFixedLat
parameter_list|()
block|{
return|return
name|FixedLatLng
operator|.
name|doubleToFixed
argument_list|(
name|this
operator|.
name|lat
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFixedLng
specifier|public
name|int
name|getFixedLng
parameter_list|()
block|{
return|return
name|FixedLatLng
operator|.
name|doubleToFixed
argument_list|(
name|this
operator|.
name|lng
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getLat
specifier|public
name|double
name|getLat
parameter_list|()
block|{
return|return
name|this
operator|.
name|lat
return|;
block|}
annotation|@
name|Override
DECL|method|getLng
specifier|public
name|double
name|getLng
parameter_list|()
block|{
return|return
name|this
operator|.
name|lng
return|;
block|}
annotation|@
name|Override
DECL|method|isFixedPoint
specifier|public
name|boolean
name|isFixedPoint
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toFixed
specifier|public
name|FixedLatLng
name|toFixed
parameter_list|()
block|{
return|return
operator|new
name|FixedLatLng
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toFloat
specifier|public
name|FloatLatLng
name|toFloat
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|isNormalized
specifier|public
name|boolean
name|isNormalized
parameter_list|()
block|{
return|return
name|normalized
operator|||
operator|(
operator|(
name|lng
operator|>=
operator|-
literal|180
operator|)
operator|&&
operator|(
name|lng
operator|<=
literal|180
operator|)
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|normalize
specifier|public
name|LatLng
name|normalize
parameter_list|()
block|{
if|if
condition|(
name|isNormalized
argument_list|()
condition|)
return|return
name|this
return|;
name|double
name|delta
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|lng
operator|<
literal|0
condition|)
name|delta
operator|=
literal|360
expr_stmt|;
if|if
condition|(
name|lng
operator|>=
literal|0
condition|)
name|delta
operator|=
operator|-
literal|360
expr_stmt|;
name|double
name|newLng
init|=
name|lng
decl_stmt|;
while|while
condition|(
name|newLng
operator|<=
operator|-
literal|180
operator|||
name|newLng
operator|>=
literal|180
condition|)
block|{
name|newLng
operator|+=
name|delta
expr_stmt|;
block|}
name|FloatLatLng
name|ret
init|=
operator|new
name|FloatLatLng
argument_list|(
name|lat
argument_list|,
name|newLng
argument_list|)
decl_stmt|;
name|ret
operator|.
name|normalized
operator|=
literal|true
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|calculateMidpoint
specifier|public
name|LatLng
name|calculateMidpoint
parameter_list|(
name|LatLng
name|other
parameter_list|)
block|{
return|return
operator|new
name|FloatLatLng
argument_list|(
operator|(
name|lat
operator|+
name|other
operator|.
name|getLat
argument_list|()
operator|)
operator|/
literal|2.0
argument_list|,
operator|(
name|lng
operator|+
name|other
operator|.
name|getLng
argument_list|()
operator|)
operator|/
literal|2.0
argument_list|)
return|;
block|}
block|}
end_class
end_unit
