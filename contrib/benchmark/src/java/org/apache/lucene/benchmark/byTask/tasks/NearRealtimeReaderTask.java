begin_unit
begin_package
DECL|package|org.apache.lucene.benchmark.byTask.tasks
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|tasks
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|PerfRunData
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopFieldDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_comment
comment|/**  * Spawns a BG thread that periodically (defaults to 3.0  * seconds, but accepts param in seconds) wakes up and asks  * IndexWriter for a near real-time reader.  Then runs a  * single query (body: 1) sorted by docdate, and prints  * time to reopen and time to run the search.  *  *<b>NOTE</b>: this is very experimental at this point, and  * subject to change.  It's also not generally usable, eg  * you cannot change which query is executed.  */
end_comment
begin_class
DECL|class|NearRealtimeReaderTask
specifier|public
class|class
name|NearRealtimeReaderTask
extends|extends
name|PerfTask
block|{
DECL|field|t
name|ReopenThread
name|t
decl_stmt|;
DECL|field|pauseSec
name|float
name|pauseSec
init|=
literal|3.0f
decl_stmt|;
DECL|class|ReopenThread
specifier|private
specifier|static
class|class
name|ReopenThread
extends|extends
name|Thread
block|{
DECL|field|writer
specifier|final
name|IndexWriter
name|writer
decl_stmt|;
DECL|field|pauseMsec
specifier|final
name|int
name|pauseMsec
decl_stmt|;
DECL|field|done
specifier|public
specifier|volatile
name|boolean
name|done
decl_stmt|;
DECL|method|ReopenThread
name|ReopenThread
parameter_list|(
name|IndexWriter
name|writer
parameter_list|,
name|float
name|pauseSec
parameter_list|)
block|{
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
name|this
operator|.
name|pauseMsec
operator|=
call|(
name|int
call|)
argument_list|(
literal|1000
operator|*
name|pauseSec
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|IndexReader
name|reader
init|=
literal|null
decl_stmt|;
specifier|final
name|Query
name|query
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|SortField
name|sf
init|=
operator|new
name|SortField
argument_list|(
literal|"docdate"
argument_list|,
name|SortField
operator|.
name|LONG
argument_list|)
decl_stmt|;
specifier|final
name|Sort
name|sort
init|=
operator|new
name|Sort
argument_list|(
name|sf
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|done
condition|)
block|{
specifier|final
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
name|reader
operator|=
name|writer
operator|.
name|getReader
argument_list|()
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|IndexReader
name|newReader
init|=
name|reader
operator|.
name|reopen
argument_list|()
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
name|newReader
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|newReader
expr_stmt|;
block|}
block|}
specifier|final
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|TopFieldDocs
name|hits
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
name|sort
argument_list|)
decl_stmt|;
specifier|final
name|long
name|t2
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"nrt: open "
operator|+
operator|(
name|t1
operator|-
name|t0
operator|)
operator|+
literal|" msec; search "
operator|+
operator|(
name|t2
operator|-
name|t1
operator|)
operator|+
literal|" msec, "
operator|+
name|hits
operator|.
name|totalHits
operator|+
literal|" results; "
operator|+
name|reader
operator|.
name|numDocs
argument_list|()
operator|+
literal|" docs"
argument_list|)
expr_stmt|;
specifier|final
name|long
name|t4
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|int
name|delay
init|=
call|(
name|int
call|)
argument_list|(
name|pauseMsec
operator|-
operator|(
name|t4
operator|-
name|t0
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|delay
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|delay
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|NearRealtimeReaderTask
specifier|public
name|NearRealtimeReaderTask
parameter_list|(
name|PerfRunData
name|runData
parameter_list|)
block|{
name|super
argument_list|(
name|runData
argument_list|)
expr_stmt|;
block|}
DECL|method|doLogic
specifier|public
name|int
name|doLogic
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
name|IndexWriter
name|w
init|=
name|getRunData
argument_list|()
operator|.
name|getIndexWriter
argument_list|()
decl_stmt|;
name|t
operator|=
operator|new
name|ReopenThread
argument_list|(
name|w
argument_list|,
name|pauseSec
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
return|return
literal|1
return|;
block|}
DECL|method|setParams
specifier|public
name|void
name|setParams
parameter_list|(
name|String
name|params
parameter_list|)
block|{
name|super
operator|.
name|setParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|pauseSec
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
DECL|method|supportsParams
specifier|public
name|boolean
name|supportsParams
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|// Close the thread
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|t
operator|.
name|done
operator|=
literal|true
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
