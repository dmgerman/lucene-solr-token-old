begin_unit
begin_package
DECL|package|org.apache.lucene.benchmark.byTask.feeds
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|feeds
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|utils
operator|.
name|Config
import|;
end_import
begin_comment
comment|/**  * Adds fields appropriate for sorting: country, random_string and sort_field  * (int). Supports the following parameters:  *<ul>  *<li><b>sort.rng</b> - defines the range for sort-by-int field (default  *<b>20000</b>).  *<li><b>rand.seed</b> - defines the seed to initialize Random with (default  *<b>13</b>).  *</ul>  */
end_comment
begin_class
DECL|class|SortableSingleDocSource
specifier|public
class|class
name|SortableSingleDocSource
extends|extends
name|SingleDocSource
block|{
DECL|field|COUNTRIES
specifier|private
specifier|static
name|String
index|[]
name|COUNTRIES
init|=
operator|new
name|String
index|[]
block|{
literal|"European Union"
block|,
literal|"United States"
block|,
literal|"Japan"
block|,
literal|"Germany"
block|,
literal|"China (PRC)"
block|,
literal|"United Kingdom"
block|,
literal|"France"
block|,
literal|"Italy"
block|,
literal|"Spain"
block|,
literal|"Canada"
block|,
literal|"Brazil"
block|,
literal|"Russia"
block|,
literal|"India"
block|,
literal|"South Korea"
block|,
literal|"Australia"
block|,
literal|"Mexico"
block|,
literal|"Netherlands"
block|,
literal|"Turkey"
block|,
literal|"Sweden"
block|,
literal|"Belgium"
block|,
literal|"Indonesia"
block|,
literal|"Switzerland"
block|,
literal|"Poland"
block|,
literal|"Norway"
block|,
literal|"Republic of China"
block|,
literal|"Saudi Arabia"
block|,
literal|"Austria"
block|,
literal|"Greece"
block|,
literal|"Denmark"
block|,
literal|"Iran"
block|,
literal|"South Africa"
block|,
literal|"Argentina"
block|,
literal|"Ireland"
block|,
literal|"Thailand"
block|,
literal|"Finland"
block|,
literal|"Venezuela"
block|,
literal|"Portugal"
block|,
literal|"Hong Kong"
block|,
literal|"United Arab Emirates"
block|,
literal|"Malaysia"
block|,
literal|"Czech Republic"
block|,
literal|"Colombia"
block|,
literal|"Nigeria"
block|,
literal|"Romania"
block|,
literal|"Chile"
block|,
literal|"Israel"
block|,
literal|"Singapore"
block|,
literal|"Philippines"
block|,
literal|"Pakistan"
block|,
literal|"Ukraine"
block|,
literal|"Hungary"
block|,
literal|"Algeria"
block|,
literal|"New Zealand"
block|,
literal|"Egypt"
block|,
literal|"Kuwait"
block|,
literal|"Peru"
block|,
literal|"Kazakhstan"
block|,
literal|"Slovakia"
block|,
literal|"Morocco"
block|,
literal|"Bangladesh"
block|,
literal|"Vietnam"
block|,
literal|"Qatar"
block|,
literal|"Angola"
block|,
literal|"Libya"
block|,
literal|"Iraq"
block|,
literal|"Croatia"
block|,
literal|"Luxembourg"
block|,
literal|"Sudan"
block|,
literal|"Slovenia"
block|,
literal|"Cuba"
block|,
literal|"Belarus"
block|,
literal|"Ecuador"
block|,
literal|"Serbia"
block|,
literal|"Oman"
block|,
literal|"Bulgaria"
block|,
literal|"Lithuania"
block|,
literal|"Syria"
block|,
literal|"Dominican Republic"
block|,
literal|"Tunisia"
block|,
literal|"Guatemala"
block|,
literal|"Azerbaijan"
block|,
literal|"Sri Lanka"
block|,
literal|"Kenya"
block|,
literal|"Latvia"
block|,
literal|"Turkmenistan"
block|,
literal|"Costa Rica"
block|,
literal|"Lebanon"
block|,
literal|"Uruguay"
block|,
literal|"Uzbekistan"
block|,
literal|"Yemen"
block|,
literal|"Cyprus"
block|,
literal|"Estonia"
block|,
literal|"Trinidad and Tobago"
block|,
literal|"Cameroon"
block|,
literal|"El Salvador"
block|,
literal|"Iceland"
block|,
literal|"Panama"
block|,
literal|"Bahrain"
block|,
literal|"Ivory Coast"
block|,
literal|"Ethiopia"
block|,
literal|"Tanzania"
block|,
literal|"Jordan"
block|,
literal|"Ghana"
block|,
literal|"Bosnia and Herzegovina"
block|,
literal|"Macau"
block|,
literal|"Burma"
block|,
literal|"Bolivia"
block|,
literal|"Brunei"
block|,
literal|"Botswana"
block|,
literal|"Honduras"
block|,
literal|"Gabon"
block|,
literal|"Uganda"
block|,
literal|"Jamaica"
block|,
literal|"Zambia"
block|,
literal|"Senegal"
block|,
literal|"Paraguay"
block|,
literal|"Albania"
block|,
literal|"Equatorial Guinea"
block|,
literal|"Georgia"
block|,
literal|"Democratic Republic of the Congo"
block|,
literal|"Nepal"
block|,
literal|"Afghanistan"
block|,
literal|"Cambodia"
block|,
literal|"Armenia"
block|,
literal|"Republic of the Congo"
block|,
literal|"Mozambique"
block|,
literal|"Republic of Macedonia"
block|,
literal|"Malta"
block|,
literal|"Namibia"
block|,
literal|"Madagascar"
block|,
literal|"Chad"
block|,
literal|"Burkina Faso"
block|,
literal|"Mauritius"
block|,
literal|"Mali"
block|,
literal|"The Bahamas"
block|,
literal|"Papua New Guinea"
block|,
literal|"Nicaragua"
block|,
literal|"Haiti"
block|,
literal|"Benin"
block|,
literal|"alestinian flag West Bank and Gaza"
block|,
literal|"Jersey"
block|,
literal|"Fiji"
block|,
literal|"Guinea"
block|,
literal|"Moldova"
block|,
literal|"Niger"
block|,
literal|"Laos"
block|,
literal|"Mongolia"
block|,
literal|"French Polynesia"
block|,
literal|"Kyrgyzstan"
block|,
literal|"Barbados"
block|,
literal|"Tajikistan"
block|,
literal|"Malawi"
block|,
literal|"Liechtenstein"
block|,
literal|"New Caledonia"
block|,
literal|"Kosovo"
block|,
literal|"Rwanda"
block|,
literal|"Montenegro"
block|,
literal|"Swaziland"
block|,
literal|"Guam"
block|,
literal|"Mauritania"
block|,
literal|"Guernsey"
block|,
literal|"Isle of Man"
block|,
literal|"Togo"
block|,
literal|"Somalia"
block|,
literal|"Suriname"
block|,
literal|"Aruba"
block|,
literal|"North Korea"
block|,
literal|"Zimbabwe"
block|,
literal|"Central African Republic"
block|,
literal|"Faroe Islands"
block|,
literal|"Greenland"
block|,
literal|"Sierra Leone"
block|,
literal|"Lesotho"
block|,
literal|"Cape Verde"
block|,
literal|"Eritrea"
block|,
literal|"Bhutan"
block|,
literal|"Belize"
block|,
literal|"Antigua and Barbuda"
block|,
literal|"Gibraltar"
block|,
literal|"Maldives"
block|,
literal|"San Marino"
block|,
literal|"Guyana"
block|,
literal|"Burundi"
block|,
literal|"Saint Lucia"
block|,
literal|"Djibouti"
block|,
literal|"British Virgin Islands"
block|,
literal|"Liberia"
block|,
literal|"Seychelles"
block|,
literal|"The Gambia"
block|,
literal|"Northern Mariana Islands"
block|,
literal|"Grenada"
block|,
literal|"Saint Vincent and the Grenadines"
block|,
literal|"Saint Kitts and Nevis"
block|,
literal|"East Timor"
block|,
literal|"Vanuatu"
block|,
literal|"Comoros"
block|,
literal|"Samoa"
block|,
literal|"Solomon Islands"
block|,
literal|"Guinea-Bissau"
block|,
literal|"American Samoa"
block|,
literal|"Dominica"
block|,
literal|"Micronesia"
block|,
literal|"Tonga"
block|,
literal|"Cook Islands"
block|,
literal|"Palau"
block|,
literal|"Marshall Islands"
block|,
literal|"Sï¿½o Tomï¿½ and Prï¿½ncipe"
block|,
literal|"Anguilla"
block|,
literal|"Kiribati"
block|,
literal|"Tuvalu"
block|,
literal|"Niue"
block|}
decl_stmt|;
DECL|field|sortRange
specifier|private
name|int
name|sortRange
decl_stmt|;
DECL|field|r
specifier|private
name|Random
name|r
decl_stmt|;
DECL|method|getNextDocData
specifier|public
name|DocData
name|getNextDocData
parameter_list|(
name|DocData
name|docData
parameter_list|)
throws|throws
name|NoMoreDataException
block|{
name|docData
operator|=
name|super
operator|.
name|getNextDocData
argument_list|(
name|docData
argument_list|)
expr_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// random int
name|props
operator|.
name|put
argument_list|(
literal|"sort_field"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|sortRange
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// random string
name|int
name|len
init|=
name|nextInt
argument_list|(
literal|2
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|char
index|[]
name|buffer
init|=
operator|new
name|char
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|r
operator|.
name|nextInt
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
block|}
name|props
operator|.
name|put
argument_list|(
literal|"random_string"
argument_list|,
operator|new
name|String
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
comment|// random country
name|props
operator|.
name|put
argument_list|(
literal|"country"
argument_list|,
name|COUNTRIES
index|[
name|r
operator|.
name|nextInt
argument_list|(
name|COUNTRIES
operator|.
name|length
argument_list|)
index|]
argument_list|)
expr_stmt|;
name|docData
operator|.
name|setProps
argument_list|(
name|props
argument_list|)
expr_stmt|;
return|return
name|docData
return|;
block|}
DECL|method|nextInt
specifier|private
name|int
name|nextInt
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
return|return
name|start
operator|+
name|r
operator|.
name|nextInt
argument_list|(
name|end
operator|-
name|start
argument_list|)
return|;
block|}
DECL|method|setConfig
specifier|public
name|void
name|setConfig
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|super
operator|.
name|setConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|sortRange
operator|=
name|config
operator|.
name|get
argument_list|(
literal|"sort.rng"
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|Random
argument_list|(
name|config
operator|.
name|get
argument_list|(
literal|"rand.seed"
argument_list|,
literal|13
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
