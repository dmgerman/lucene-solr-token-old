begin_unit
begin_package
DECL|package|org.apache.lucene.benchmark.byTask.stats
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|stats
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|tasks
operator|.
name|PerfTask
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|utils
operator|.
name|Config
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|utils
operator|.
name|Format
import|;
end_import
begin_comment
comment|/**  * Test run data points collected as the test proceeds.  */
end_comment
begin_class
DECL|class|Points
specifier|public
class|class
name|Points
block|{
DECL|field|config
specifier|private
name|Config
name|config
decl_stmt|;
DECL|field|newline
specifier|private
specifier|static
specifier|final
name|String
name|newline
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
comment|// stat points ordered by their start time.
comment|// for now we collect points as TaskStats objects.
comment|// later might optimize to collect only native data.
DECL|field|points
specifier|private
name|ArrayList
name|points
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
DECL|field|nextTaskRunNum
specifier|private
name|int
name|nextTaskRunNum
init|=
literal|0
decl_stmt|;
comment|/**    * Get a textual summary of the benchmark results, average from all test runs.    */
DECL|field|OP
specifier|static
specifier|final
name|String
name|OP
init|=
literal|"Operation  "
decl_stmt|;
DECL|field|ROUND
specifier|static
specifier|final
name|String
name|ROUND
init|=
literal|" round"
decl_stmt|;
DECL|field|RUNCNT
specifier|static
specifier|final
name|String
name|RUNCNT
init|=
literal|"   runCnt"
decl_stmt|;
DECL|field|RECCNT
specifier|static
specifier|final
name|String
name|RECCNT
init|=
literal|"   recsPerRun"
decl_stmt|;
DECL|field|RECSEC
specifier|static
specifier|final
name|String
name|RECSEC
init|=
literal|"        rec/s"
decl_stmt|;
DECL|field|ELAPSED
specifier|static
specifier|final
name|String
name|ELAPSED
init|=
literal|"  elapsedSec"
decl_stmt|;
DECL|field|USEDMEM
specifier|static
specifier|final
name|String
name|USEDMEM
init|=
literal|"    avgUsedMem"
decl_stmt|;
DECL|field|TOTMEM
specifier|static
specifier|final
name|String
name|TOTMEM
init|=
literal|"    avgTotalMem"
decl_stmt|;
DECL|field|COLS
specifier|static
specifier|final
name|String
name|COLS
index|[]
init|=
block|{
name|RUNCNT
block|,
name|RECCNT
block|,
name|RECSEC
block|,
name|ELAPSED
block|,
name|USEDMEM
block|,
name|TOTMEM
block|}
decl_stmt|;
comment|/**    * Create a Points statistics object.     */
DECL|method|Points
specifier|public
name|Points
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
DECL|method|tableTitle
specifier|private
name|String
name|tableTitle
parameter_list|(
name|String
name|longestOp
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Format
operator|.
name|format
argument_list|(
name|OP
argument_list|,
name|longestOp
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ROUND
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|config
operator|.
name|getColsNamesForValsByRound
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COLS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|COLS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Report detailed statistics as a string    * @return the report    */
DECL|method|reportAll
specifier|public
name|Report
name|reportAll
parameter_list|()
block|{
name|String
name|longestOp
init|=
name|longestOp
argument_list|(
name|points
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|tableTitle
argument_list|(
name|longestOp
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
name|int
name|reported
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|points
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TaskStats
name|stat
init|=
operator|(
name|TaskStats
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|stat
operator|.
name|getElapsed
argument_list|()
operator|>=
literal|0
condition|)
block|{
comment|// consider only tasks that ended
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|String
name|line
init|=
name|taskReportLine
argument_list|(
name|longestOp
argument_list|,
name|stat
argument_list|)
decl_stmt|;
name|reported
operator|++
expr_stmt|;
if|if
condition|(
name|points
operator|.
name|size
argument_list|()
operator|>
literal|2
operator|&&
name|reported
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|line
operator|=
name|line
operator|.
name|replaceAll
argument_list|(
literal|"   "
argument_list|,
literal|" - "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|reptxt
init|=
operator|(
name|reported
operator|==
literal|0
condition|?
literal|"No Matching Entries Were Found!"
else|:
name|sb
operator|.
name|toString
argument_list|()
operator|)
decl_stmt|;
return|return
operator|new
name|Report
argument_list|(
name|reptxt
argument_list|,
name|reported
argument_list|,
name|reported
argument_list|,
name|points
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Report statistics as a string, aggregate for tasks named the same.    * @return the report    */
DECL|method|reportSumByName
specifier|public
name|Report
name|reportSumByName
parameter_list|()
block|{
comment|// aggregate by task name
name|int
name|reported
init|=
literal|0
decl_stmt|;
name|LinkedHashMap
name|p2
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|points
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TaskStats
name|stat1
init|=
operator|(
name|TaskStats
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|stat1
operator|.
name|getElapsed
argument_list|()
operator|>=
literal|0
condition|)
block|{
comment|// consider only tasks that ended
name|reported
operator|++
expr_stmt|;
name|String
name|name
init|=
name|stat1
operator|.
name|getTask
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|TaskStats
name|stat2
init|=
operator|(
name|TaskStats
operator|)
name|p2
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat2
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|stat2
operator|=
operator|(
name|TaskStats
operator|)
name|stat1
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|p2
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|stat2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stat2
operator|.
name|add
argument_list|(
name|stat1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// now generate report from secondary list p2
return|return
name|genReportFromList
argument_list|(
name|reported
argument_list|,
name|p2
argument_list|)
return|;
block|}
comment|/**    * Report statistics as a string, aggregate for tasks named the same, and from the same round.    * @return the report    */
DECL|method|reportSumByNameRound
specifier|public
name|Report
name|reportSumByNameRound
parameter_list|()
block|{
comment|// aggregate by task name and round
name|LinkedHashMap
name|p2
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
name|int
name|reported
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|points
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TaskStats
name|stat1
init|=
operator|(
name|TaskStats
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|stat1
operator|.
name|getElapsed
argument_list|()
operator|>=
literal|0
condition|)
block|{
comment|// consider only tasks that ended
name|reported
operator|++
expr_stmt|;
name|String
name|name
init|=
name|stat1
operator|.
name|getTask
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|rname
init|=
name|stat1
operator|.
name|getRound
argument_list|()
operator|+
literal|"."
operator|+
name|name
decl_stmt|;
comment|// group by round
name|TaskStats
name|stat2
init|=
operator|(
name|TaskStats
operator|)
name|p2
operator|.
name|get
argument_list|(
name|rname
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat2
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|stat2
operator|=
operator|(
name|TaskStats
operator|)
name|stat1
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|p2
operator|.
name|put
argument_list|(
name|rname
argument_list|,
name|stat2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stat2
operator|.
name|add
argument_list|(
name|stat1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// now generate report from secondary list p2
return|return
name|genReportFromList
argument_list|(
name|reported
argument_list|,
name|p2
argument_list|)
return|;
block|}
DECL|method|longestOp
specifier|private
name|String
name|longestOp
parameter_list|(
name|Collection
name|c
parameter_list|)
block|{
name|String
name|longest
init|=
name|OP
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|c
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TaskStats
name|stat
init|=
operator|(
name|TaskStats
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|stat
operator|.
name|getElapsed
argument_list|()
operator|>=
literal|0
condition|)
block|{
comment|// consider only tasks that ended
name|String
name|name
init|=
name|stat
operator|.
name|getTask
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|>
name|longest
operator|.
name|length
argument_list|()
condition|)
block|{
name|longest
operator|=
name|name
expr_stmt|;
block|}
block|}
block|}
return|return
name|longest
return|;
block|}
DECL|method|taskReportLine
specifier|private
name|String
name|taskReportLine
parameter_list|(
name|String
name|longestOp
parameter_list|,
name|TaskStats
name|stat
parameter_list|)
block|{
name|PerfTask
name|task
init|=
name|stat
operator|.
name|getTask
argument_list|()
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Format
operator|.
name|format
argument_list|(
name|task
operator|.
name|getName
argument_list|()
argument_list|,
name|longestOp
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|round
init|=
operator|(
name|stat
operator|.
name|getRound
argument_list|()
operator|>=
literal|0
condition|?
literal|""
operator|+
name|stat
operator|.
name|getRound
argument_list|()
else|:
literal|"-"
operator|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Format
operator|.
name|formatPaddLeft
argument_list|(
name|round
argument_list|,
name|ROUND
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|config
operator|.
name|getColsValuesForValsByRound
argument_list|(
name|stat
operator|.
name|getRound
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Format
operator|.
name|format
argument_list|(
name|stat
operator|.
name|getNumRuns
argument_list|()
argument_list|,
name|RUNCNT
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Format
operator|.
name|format
argument_list|(
name|stat
operator|.
name|getCount
argument_list|()
operator|/
name|stat
operator|.
name|getNumRuns
argument_list|()
argument_list|,
name|RECCNT
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|elapsed
init|=
operator|(
name|stat
operator|.
name|getElapsed
argument_list|()
operator|>
literal|0
condition|?
name|stat
operator|.
name|getElapsed
argument_list|()
else|:
literal|1
operator|)
decl_stmt|;
comment|// assume at least 1ms
name|sb
operator|.
name|append
argument_list|(
name|Format
operator|.
name|format
argument_list|(
literal|1
argument_list|,
call|(
name|float
call|)
argument_list|(
name|stat
operator|.
name|getCount
argument_list|()
operator|*
literal|1000.0
operator|/
name|elapsed
argument_list|)
argument_list|,
name|RECSEC
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Format
operator|.
name|format
argument_list|(
literal|2
argument_list|,
operator|(
name|float
operator|)
name|stat
operator|.
name|getElapsed
argument_list|()
operator|/
literal|1000
argument_list|,
name|ELAPSED
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Format
operator|.
name|format
argument_list|(
literal|0
argument_list|,
operator|(
name|float
operator|)
name|stat
operator|.
name|getMaxUsedMem
argument_list|()
operator|/
name|stat
operator|.
name|getNumRuns
argument_list|()
argument_list|,
name|USEDMEM
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Format
operator|.
name|format
argument_list|(
literal|0
argument_list|,
operator|(
name|float
operator|)
name|stat
operator|.
name|getMaxTotMem
argument_list|()
operator|/
name|stat
operator|.
name|getNumRuns
argument_list|()
argument_list|,
name|TOTMEM
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|reportSumByPrefix
specifier|public
name|Report
name|reportSumByPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
comment|// aggregate by task name
name|int
name|reported
init|=
literal|0
decl_stmt|;
name|LinkedHashMap
name|p2
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|points
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TaskStats
name|stat1
init|=
operator|(
name|TaskStats
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|stat1
operator|.
name|getElapsed
argument_list|()
operator|>=
literal|0
operator|&&
name|stat1
operator|.
name|getTask
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
comment|// only ended tasks with proper name
name|reported
operator|++
expr_stmt|;
name|String
name|name
init|=
name|stat1
operator|.
name|getTask
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|TaskStats
name|stat2
init|=
operator|(
name|TaskStats
operator|)
name|p2
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat2
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|stat2
operator|=
operator|(
name|TaskStats
operator|)
name|stat1
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|p2
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|stat2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stat2
operator|.
name|add
argument_list|(
name|stat1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// now generate report from secondary list p2
return|return
name|genReportFromList
argument_list|(
name|reported
argument_list|,
name|p2
argument_list|)
return|;
block|}
DECL|method|reportSumByPrefixRound
specifier|public
name|Report
name|reportSumByPrefixRound
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
comment|// aggregate by task name and by round
name|int
name|reported
init|=
literal|0
decl_stmt|;
name|LinkedHashMap
name|p2
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|points
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TaskStats
name|stat1
init|=
operator|(
name|TaskStats
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|stat1
operator|.
name|getElapsed
argument_list|()
operator|>=
literal|0
operator|&&
name|stat1
operator|.
name|getTask
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
comment|// only ended tasks with proper name
name|reported
operator|++
expr_stmt|;
name|String
name|name
init|=
name|stat1
operator|.
name|getTask
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|rname
init|=
name|stat1
operator|.
name|getRound
argument_list|()
operator|+
literal|"."
operator|+
name|name
decl_stmt|;
comment|// group by round
name|TaskStats
name|stat2
init|=
operator|(
name|TaskStats
operator|)
name|p2
operator|.
name|get
argument_list|(
name|rname
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat2
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|stat2
operator|=
operator|(
name|TaskStats
operator|)
name|stat1
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|p2
operator|.
name|put
argument_list|(
name|rname
argument_list|,
name|stat2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stat2
operator|.
name|add
argument_list|(
name|stat1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// now generate report from secondary list p2
return|return
name|genReportFromList
argument_list|(
name|reported
argument_list|,
name|p2
argument_list|)
return|;
block|}
DECL|method|genReportFromList
specifier|private
name|Report
name|genReportFromList
parameter_list|(
name|int
name|reported
parameter_list|,
name|LinkedHashMap
name|p2
parameter_list|)
block|{
name|String
name|longetOp
init|=
name|longestOp
argument_list|(
name|p2
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|tableTitle
argument_list|(
name|longetOp
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
name|int
name|lineNum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|p2
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TaskStats
name|stat
init|=
operator|(
name|TaskStats
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|String
name|line
init|=
name|taskReportLine
argument_list|(
name|longetOp
argument_list|,
name|stat
argument_list|)
decl_stmt|;
name|lineNum
operator|++
expr_stmt|;
if|if
condition|(
name|p2
operator|.
name|size
argument_list|()
operator|>
literal|2
operator|&&
name|lineNum
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|line
operator|=
name|line
operator|.
name|replaceAll
argument_list|(
literal|"   "
argument_list|,
literal|" - "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|String
name|reptxt
init|=
operator|(
name|reported
operator|==
literal|0
condition|?
literal|"No Matching Entries Were Found!"
else|:
name|sb
operator|.
name|toString
argument_list|()
operator|)
decl_stmt|;
return|return
operator|new
name|Report
argument_list|(
name|reptxt
argument_list|,
name|p2
operator|.
name|size
argument_list|()
argument_list|,
name|reported
argument_list|,
name|points
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
DECL|method|reportSelectByPrefix
specifier|public
name|Report
name|reportSelectByPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|String
name|longestOp
init|=
name|longestOp
argument_list|(
name|points
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|tableTitle
argument_list|(
name|longestOp
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
name|int
name|reported
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|points
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TaskStats
name|stat
init|=
operator|(
name|TaskStats
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|stat
operator|.
name|getElapsed
argument_list|()
operator|>=
literal|0
operator|&&
name|stat
operator|.
name|getTask
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
comment|// only ended tasks with proper name
name|reported
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|String
name|line
init|=
name|taskReportLine
argument_list|(
name|longestOp
argument_list|,
name|stat
argument_list|)
decl_stmt|;
if|if
condition|(
name|points
operator|.
name|size
argument_list|()
operator|>
literal|2
operator|&&
name|reported
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|line
operator|=
name|line
operator|.
name|replaceAll
argument_list|(
literal|"   "
argument_list|,
literal|" - "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|reptxt
init|=
operator|(
name|reported
operator|==
literal|0
condition|?
literal|"No Matching Entries Were Found!"
else|:
name|sb
operator|.
name|toString
argument_list|()
operator|)
decl_stmt|;
return|return
operator|new
name|Report
argument_list|(
name|reptxt
argument_list|,
name|reported
argument_list|,
name|reported
argument_list|,
name|points
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Mark that a task is starting.     * Create a task stats for it and store it as a point.    * @param task the starting task.    * @return the new task stats created for the starting task.    */
DECL|method|markTaskStart
specifier|public
specifier|synchronized
name|TaskStats
name|markTaskStart
parameter_list|(
name|PerfTask
name|task
parameter_list|,
name|int
name|round
parameter_list|)
block|{
name|TaskStats
name|stats
init|=
operator|new
name|TaskStats
argument_list|(
name|task
argument_list|,
name|nextTaskRunNum
argument_list|()
argument_list|,
name|round
argument_list|)
decl_stmt|;
name|points
operator|.
name|add
argument_list|(
name|stats
argument_list|)
expr_stmt|;
return|return
name|stats
return|;
block|}
comment|// return next task num
DECL|method|nextTaskRunNum
specifier|private
specifier|synchronized
name|int
name|nextTaskRunNum
parameter_list|()
block|{
return|return
name|nextTaskRunNum
operator|++
return|;
block|}
comment|/**    * mark the end of a task    */
DECL|method|markTaskEnd
specifier|public
specifier|synchronized
name|void
name|markTaskEnd
parameter_list|(
name|TaskStats
name|stats
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|int
name|numParallelTasks
init|=
name|nextTaskRunNum
operator|-
literal|1
operator|-
name|stats
operator|.
name|getTaskRunNum
argument_list|()
decl_stmt|;
comment|// note: if the stats were cleared, might be that this stats object is
comment|// no longer in points, but this is just ok.
name|stats
operator|.
name|markEnd
argument_list|(
name|numParallelTasks
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
comment|/**    * Clear all data, prepare for more tests.    */
DECL|method|clearData
specifier|public
name|void
name|clearData
parameter_list|()
block|{
name|points
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
