begin_unit
begin_package
DECL|package|org.apache.lucene.benchmark.byTask.feeds
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|feeds
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|utils
operator|.
name|Config
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|utils
operator|.
name|Format
import|;
end_import
begin_comment
comment|/**  * Create documents for the test  */
end_comment
begin_class
DECL|class|SimpleDocMaker
specifier|public
class|class
name|SimpleDocMaker
implements|implements
name|DocMaker
block|{
DECL|field|BODY_FIELD
specifier|static
specifier|final
name|String
name|BODY_FIELD
init|=
literal|"body"
decl_stmt|;
DECL|field|docID
specifier|private
name|int
name|docID
init|=
literal|0
decl_stmt|;
DECL|field|numBytes
specifier|private
name|long
name|numBytes
init|=
literal|0
decl_stmt|;
DECL|field|numUniqueBytes
specifier|private
name|long
name|numUniqueBytes
init|=
literal|0
decl_stmt|;
DECL|field|config
specifier|protected
name|Config
name|config
decl_stmt|;
DECL|field|nextDocTextPosition
specifier|private
name|int
name|nextDocTextPosition
init|=
literal|0
decl_stmt|;
comment|// for creating docs of fixed size.
DECL|field|storeVal
specifier|protected
name|Field
operator|.
name|Store
name|storeVal
init|=
name|Field
operator|.
name|Store
operator|.
name|NO
decl_stmt|;
DECL|field|indexVal
specifier|protected
name|Field
operator|.
name|Index
name|indexVal
init|=
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
decl_stmt|;
DECL|field|termVecVal
specifier|protected
name|Field
operator|.
name|TermVector
name|termVecVal
init|=
name|Field
operator|.
name|TermVector
operator|.
name|NO
decl_stmt|;
DECL|field|DOC_TEXT
specifier|static
specifier|final
name|String
name|DOC_TEXT
init|=
comment|// from a public first aid info at http://firstaid.ie.eu.org
literal|"Well it may be a little dramatic but sometimes it true. "
operator|+
literal|"If you call the emergency medical services to an incident, "
operator|+
literal|"your actions have started the chain of survival. "
operator|+
literal|"You have acted to help someone you may not even know. "
operator|+
literal|"First aid is helping, first aid is making that call, "
operator|+
literal|"putting a Band-Aid on a small wound, controlling bleeding in large "
operator|+
literal|"wounds or providing CPR for a collapsed person whose not breathing "
operator|+
literal|"and heart has stopped beating. You can help yourself, your loved "
operator|+
literal|"ones and the stranger whose life may depend on you being in the "
operator|+
literal|"right place at the right time with the right knowledge."
decl_stmt|;
DECL|field|DOC_TEXT_LENGTH
specifier|private
specifier|static
name|int
name|DOC_TEXT_LENGTH
init|=
name|DOC_TEXT
operator|.
name|length
argument_list|()
decl_stmt|;
comment|/*    *  (non-Javadoc)    * @see org.apache.lucene.benchmark.byTask.feeds.DocMaker#makeDocument()    */
DECL|method|makeDocument
specifier|public
name|Document
name|makeDocument
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|makeDocument
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/*    *  (non-Javadoc)    * @see org.apache.lucene.benchmark.byTask.feeds.DocMaker#makeDocument(int)    */
DECL|method|makeDocument
specifier|public
name|Document
name|makeDocument
parameter_list|(
name|int
name|size
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|docid
init|=
name|newdocid
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"docid"
argument_list|,
literal|"doc"
operator|+
name|docid
argument_list|,
name|storeVal
argument_list|,
name|indexVal
argument_list|,
name|termVecVal
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|docText
init|=
name|createDocText
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|BODY_FIELD
argument_list|,
literal|"synthetic body text"
operator|+
name|docid
operator|+
literal|" "
operator|+
name|docText
argument_list|,
name|storeVal
argument_list|,
name|indexVal
argument_list|,
name|termVecVal
argument_list|)
argument_list|)
expr_stmt|;
name|addBytes
argument_list|(
name|docText
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// should multiply by 2 here?
return|return
name|doc
return|;
block|}
DECL|method|nextDocText
specifier|private
specifier|synchronized
name|int
index|[]
name|nextDocText
parameter_list|(
name|int
name|fixedDocSize
parameter_list|)
block|{
name|int
name|from
init|=
name|nextDocTextPosition
decl_stmt|;
name|int
name|to
init|=
name|nextDocTextPosition
decl_stmt|;
name|int
name|wraps
init|=
literal|0
decl_stmt|;
name|int
name|size
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|size
operator|<
name|fixedDocSize
condition|)
block|{
name|int
name|added
init|=
name|DOC_TEXT_LENGTH
operator|-
name|to
decl_stmt|;
if|if
condition|(
name|size
operator|+
name|added
operator|<=
name|fixedDocSize
condition|)
block|{
name|to
operator|=
literal|0
expr_stmt|;
name|size
operator|+=
name|added
expr_stmt|;
name|wraps
operator|++
expr_stmt|;
block|}
else|else
block|{
name|added
operator|=
name|fixedDocSize
operator|-
name|size
expr_stmt|;
name|size
operator|+=
name|added
expr_stmt|;
name|to
operator|+=
name|added
expr_stmt|;
block|}
block|}
name|nextDocTextPosition
operator|=
name|to
expr_stmt|;
return|return
operator|new
name|int
index|[]
block|{
name|from
block|,
name|to
block|,
name|wraps
block|}
return|;
block|}
DECL|method|createDocText
specifier|private
name|String
name|createDocText
parameter_list|(
name|int
name|fixedDocSize
parameter_list|)
block|{
if|if
condition|(
name|fixedDocSize
operator|<=
literal|0
condition|)
block|{
comment|//no fixed doc size requirement
return|return
name|DOC_TEXT
return|;
block|}
comment|// create a document wit fixed doc size
name|int
name|fromToWraps
index|[]
init|=
name|nextDocText
argument_list|(
name|fixedDocSize
argument_list|)
decl_stmt|;
name|int
name|from
init|=
name|fromToWraps
index|[
literal|0
index|]
decl_stmt|;
name|int
name|to
init|=
name|fromToWraps
index|[
literal|1
index|]
decl_stmt|;
name|int
name|wraps
init|=
name|fromToWraps
index|[
literal|2
index|]
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
name|wraps
operator|--
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|DOC_TEXT
operator|.
name|substring
argument_list|(
name|from
argument_list|)
argument_list|)
expr_stmt|;
name|from
operator|=
literal|0
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|DOC_TEXT
operator|.
name|substring
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// return a new docid
DECL|method|newdocid
specifier|private
specifier|synchronized
name|int
name|newdocid
parameter_list|()
block|{
return|return
name|docID
operator|++
return|;
block|}
comment|/* (non-Javadoc)    * @see DocMaker#setConfig(java.util.Properties)    */
DECL|method|setConfig
specifier|public
name|void
name|setConfig
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|boolean
name|stored
init|=
name|config
operator|.
name|get
argument_list|(
literal|"doc.stored"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|tokenized
init|=
name|config
operator|.
name|get
argument_list|(
literal|"doc.tokenized"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|termVec
init|=
name|config
operator|.
name|get
argument_list|(
literal|"doc.term.vector"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|storeVal
operator|=
operator|(
name|stored
condition|?
name|Field
operator|.
name|Store
operator|.
name|YES
else|:
name|Field
operator|.
name|Store
operator|.
name|NO
operator|)
expr_stmt|;
name|indexVal
operator|=
operator|(
name|tokenized
condition|?
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
else|:
name|Field
operator|.
name|Index
operator|.
name|UN_TOKENIZED
operator|)
expr_stmt|;
name|termVecVal
operator|=
operator|(
name|termVec
condition|?
name|Field
operator|.
name|TermVector
operator|.
name|YES
else|:
name|Field
operator|.
name|TermVector
operator|.
name|NO
operator|)
expr_stmt|;
block|}
comment|/*    *  (non-Javadoc)    * @see DocMaker#resetIinputs()    */
DECL|method|resetInputs
specifier|public
specifier|synchronized
name|void
name|resetInputs
parameter_list|()
block|{
name|printDocStatistics
argument_list|()
expr_stmt|;
name|docID
operator|=
literal|0
expr_stmt|;
name|numBytes
operator|=
literal|0
expr_stmt|;
block|}
comment|/*    *  (non-Javadoc)    * @see DocMaker#numUniqueTexts()    */
DECL|method|numUniqueTexts
specifier|public
name|int
name|numUniqueTexts
parameter_list|()
block|{
return|return
literal|0
return|;
comment|// not applicable
block|}
comment|/*    *  (non-Javadoc)    * @see org.apache.lucene.benchmark.byTask.feeds.DocMaker#numUniqueBytes()    */
DECL|method|numUniqueBytes
specifier|public
name|long
name|numUniqueBytes
parameter_list|()
block|{
return|return
name|numUniqueBytes
return|;
block|}
comment|/*    *  (non-Javadoc)    * @see DocMaker#getCount()    */
DECL|method|getCount
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|docID
return|;
block|}
comment|/*    *  (non-Javadoc)    * @see DocMaker#getByteCount()    */
DECL|method|getByteCount
specifier|public
name|long
name|getByteCount
parameter_list|()
block|{
return|return
name|numBytes
return|;
block|}
DECL|method|addUniqueBytes
specifier|protected
name|void
name|addUniqueBytes
parameter_list|(
name|long
name|n
parameter_list|)
block|{
name|numUniqueBytes
operator|+=
name|n
expr_stmt|;
block|}
DECL|method|addBytes
specifier|protected
name|void
name|addBytes
parameter_list|(
name|long
name|n
parameter_list|)
block|{
name|numBytes
operator|+=
name|n
expr_stmt|;
block|}
comment|/*    *  (non-Javadoc)    * @see org.apache.lucene.benchmark.byTask.feeds.DocMaker#printDocStatistics()    */
DECL|field|lastPrintedNumUniqueTexts
specifier|private
name|int
name|lastPrintedNumUniqueTexts
init|=
literal|0
decl_stmt|;
DECL|field|lastPrintedNumUniqueBytes
specifier|private
name|long
name|lastPrintedNumUniqueBytes
init|=
literal|0
decl_stmt|;
DECL|field|printNum
specifier|private
name|int
name|printNum
init|=
literal|0
decl_stmt|;
DECL|method|printDocStatistics
specifier|public
name|void
name|printDocStatistics
parameter_list|()
block|{
name|boolean
name|print
init|=
literal|false
decl_stmt|;
name|String
name|col
init|=
literal|"                  "
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
name|newline
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"------------> "
argument_list|)
operator|.
name|append
argument_list|(
name|Format
operator|.
name|simpleName
argument_list|(
name|getClass
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" statistics ("
argument_list|)
operator|.
name|append
argument_list|(
name|printNum
argument_list|)
operator|.
name|append
argument_list|(
literal|"): "
argument_list|)
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
name|int
name|nut
init|=
name|numUniqueTexts
argument_list|()
decl_stmt|;
if|if
condition|(
name|nut
operator|>
name|lastPrintedNumUniqueTexts
condition|)
block|{
name|print
operator|=
literal|true
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"total bytes of unique texts: "
argument_list|)
operator|.
name|append
argument_list|(
name|Format
operator|.
name|format
argument_list|(
literal|0
argument_list|,
name|nut
argument_list|,
name|col
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
name|lastPrintedNumUniqueTexts
operator|=
name|nut
expr_stmt|;
block|}
name|long
name|nub
init|=
name|numUniqueBytes
argument_list|()
decl_stmt|;
if|if
condition|(
name|nub
operator|>
name|lastPrintedNumUniqueBytes
condition|)
block|{
name|print
operator|=
literal|true
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"total bytes of unique texts: "
argument_list|)
operator|.
name|append
argument_list|(
name|Format
operator|.
name|format
argument_list|(
literal|0
argument_list|,
name|nub
argument_list|,
name|col
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
name|lastPrintedNumUniqueBytes
operator|=
name|nub
expr_stmt|;
block|}
if|if
condition|(
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|print
operator|=
literal|true
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"num files added since last inputs reset:   "
argument_list|)
operator|.
name|append
argument_list|(
name|Format
operator|.
name|format
argument_list|(
literal|0
argument_list|,
name|getCount
argument_list|()
argument_list|,
name|col
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"total bytes added since last inputs reset: "
argument_list|)
operator|.
name|append
argument_list|(
name|Format
operator|.
name|format
argument_list|(
literal|0
argument_list|,
name|getByteCount
argument_list|()
argument_list|,
name|col
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|print
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|printNum
operator|++
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
