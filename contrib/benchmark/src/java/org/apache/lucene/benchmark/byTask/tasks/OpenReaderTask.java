begin_unit
begin_package
DECL|package|org.apache.lucene.benchmark.byTask.tasks
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|tasks
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|PerfRunData
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|utils
operator|.
name|Config
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexCommit
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexDeletionPolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_comment
comment|/**  * Open an index reader.  *<br>Other side effects: index redaer object in perfRunData is set.  *<br> Optional params readOnly,commitUserData eg. OpenReader(false,commit1)  */
end_comment
begin_class
DECL|class|OpenReaderTask
specifier|public
class|class
name|OpenReaderTask
extends|extends
name|PerfTask
block|{
DECL|field|USER_DATA
specifier|public
specifier|static
specifier|final
name|String
name|USER_DATA
init|=
literal|"userData"
decl_stmt|;
DECL|field|readOnly
specifier|private
name|boolean
name|readOnly
init|=
literal|true
decl_stmt|;
DECL|field|commitUserData
specifier|private
name|String
name|commitUserData
init|=
literal|null
decl_stmt|;
DECL|method|OpenReaderTask
specifier|public
name|OpenReaderTask
parameter_list|(
name|PerfRunData
name|runData
parameter_list|)
block|{
name|super
argument_list|(
name|runData
argument_list|)
expr_stmt|;
block|}
DECL|method|doLogic
specifier|public
name|int
name|doLogic
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|getRunData
argument_list|()
operator|.
name|getDirectory
argument_list|()
decl_stmt|;
name|Config
name|config
init|=
name|getRunData
argument_list|()
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|IndexReader
name|r
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|commitUserData
operator|!=
literal|null
condition|)
block|{
name|r
operator|=
name|openCommitPoint
argument_list|(
name|commitUserData
argument_list|,
name|dir
argument_list|,
name|config
argument_list|,
name|readOnly
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IndexDeletionPolicy
name|indexDeletionPolicy
init|=
name|CreateIndexTask
operator|.
name|getIndexDeletionPolicy
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|r
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
name|indexDeletionPolicy
argument_list|,
name|readOnly
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--> openReader: "
operator|+
name|r
operator|.
name|getCommitUserData
argument_list|()
argument_list|)
expr_stmt|;
name|getRunData
argument_list|()
operator|.
name|setIndexReader
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
DECL|method|openCommitPoint
specifier|public
specifier|static
name|IndexReader
name|openCommitPoint
parameter_list|(
name|String
name|userData
parameter_list|,
name|Directory
name|dir
parameter_list|,
name|Config
name|config
parameter_list|,
name|boolean
name|readOnly
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexReader
name|r
init|=
literal|null
decl_stmt|;
name|Collection
name|commits
init|=
name|IndexReader
operator|.
name|listCommits
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|Iterator
name|i
init|=
name|commits
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IndexCommit
name|ic
init|=
operator|(
name|IndexCommit
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
name|map
init|=
name|ic
operator|.
name|getUserData
argument_list|()
decl_stmt|;
name|String
name|ud
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
name|ud
operator|=
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
name|USER_DATA
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ud
operator|!=
literal|null
operator|&&
name|ud
operator|.
name|equals
argument_list|(
name|userData
argument_list|)
condition|)
block|{
name|IndexDeletionPolicy
name|indexDeletionPolicy
init|=
name|CreateIndexTask
operator|.
name|getIndexDeletionPolicy
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|r
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|ic
argument_list|,
name|indexDeletionPolicy
argument_list|,
name|readOnly
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|r
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"cannot find commitPoint userData:"
operator|+
name|userData
argument_list|)
throw|;
return|return
name|r
return|;
block|}
DECL|method|setParams
specifier|public
name|void
name|setParams
parameter_list|(
name|String
name|params
parameter_list|)
block|{
name|super
operator|.
name|setParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|split
init|=
name|params
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|split
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|readOnly
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|split
index|[
literal|0
index|]
argument_list|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|split
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|commitUserData
operator|=
name|split
index|[
literal|1
index|]
expr_stmt|;
block|}
block|}
block|}
DECL|method|supportsParams
specifier|public
name|boolean
name|supportsParams
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
