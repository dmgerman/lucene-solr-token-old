begin_unit
begin_package
DECL|package|org.apache.lucene.benchmark.byTask.tasks
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|tasks
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|PerfRunData
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|utils
operator|.
name|Config
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexCommit
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LogMergePolicy
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * Open an index writer.  *<br>Other side effects: index writer object in perfRunData is set.  *<br>Relevant properties:<code>merge.factor, max.buffered,  * max.field.length, ram.flush.mb [default 0]</code>.  *  *<p> Accepts a param specifying the commit point as  * previously saved with CommitIndexTask.  If you specify  * this, it rolls the index back to that commit on opening  * the IndexWriter.  */
end_comment
begin_class
DECL|class|OpenIndexTask
specifier|public
class|class
name|OpenIndexTask
extends|extends
name|PerfTask
block|{
DECL|field|DEFAULT_MAX_BUFFERED
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_BUFFERED
init|=
name|IndexWriter
operator|.
name|DEFAULT_MAX_BUFFERED_DOCS
decl_stmt|;
DECL|field|DEFAULT_MAX_FIELD_LENGTH
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_FIELD_LENGTH
init|=
name|IndexWriter
operator|.
name|DEFAULT_MAX_FIELD_LENGTH
decl_stmt|;
DECL|field|DEFAULT_MERGE_PFACTOR
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MERGE_PFACTOR
init|=
name|LogMergePolicy
operator|.
name|DEFAULT_MERGE_FACTOR
decl_stmt|;
DECL|field|DEFAULT_RAM_FLUSH_MB
specifier|public
specifier|static
specifier|final
name|double
name|DEFAULT_RAM_FLUSH_MB
init|=
operator|(
name|int
operator|)
name|IndexWriter
operator|.
name|DEFAULT_RAM_BUFFER_SIZE_MB
decl_stmt|;
DECL|field|commitUserData
specifier|private
name|String
name|commitUserData
decl_stmt|;
DECL|method|OpenIndexTask
specifier|public
name|OpenIndexTask
parameter_list|(
name|PerfRunData
name|runData
parameter_list|)
block|{
name|super
argument_list|(
name|runData
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doLogic
specifier|public
name|int
name|doLogic
parameter_list|()
throws|throws
name|IOException
block|{
name|PerfRunData
name|runData
init|=
name|getRunData
argument_list|()
decl_stmt|;
name|Config
name|config
init|=
name|runData
operator|.
name|getConfig
argument_list|()
decl_stmt|;
specifier|final
name|IndexCommit
name|ic
decl_stmt|;
if|if
condition|(
name|commitUserData
operator|!=
literal|null
condition|)
block|{
name|ic
operator|=
name|OpenReaderTask
operator|.
name|findIndexCommit
argument_list|(
name|runData
operator|.
name|getDirectory
argument_list|()
argument_list|,
name|commitUserData
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ic
operator|=
literal|null
expr_stmt|;
block|}
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|runData
operator|.
name|getDirectory
argument_list|()
argument_list|,
name|runData
operator|.
name|getAnalyzer
argument_list|()
argument_list|,
name|CreateIndexTask
operator|.
name|getIndexDeletionPolicy
argument_list|(
name|config
argument_list|)
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|UNLIMITED
argument_list|,
name|ic
argument_list|)
decl_stmt|;
name|CreateIndexTask
operator|.
name|setIndexWriterConfig
argument_list|(
name|writer
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|runData
operator|.
name|setIndexWriter
argument_list|(
name|writer
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|setParams
specifier|public
name|void
name|setParams
parameter_list|(
name|String
name|params
parameter_list|)
block|{
name|super
operator|.
name|setParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
comment|// specifies which commit point to open
name|commitUserData
operator|=
name|params
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|supportsParams
specifier|public
name|boolean
name|supportsParams
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
