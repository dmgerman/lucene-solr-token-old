begin_unit
begin_package
DECL|package|org.apache.lucene.benchmark.byTask.tasks
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|tasks
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|PerfRunData
import|;
end_import
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Set a performance test configuration property.  * A property may have a single value, or a sequence of values, separated by ":".   * If a sequence of values is specified, each time a new round starts,   * the next (cyclic) value is taken.    *<br>Other side effects: none.  *<br>Takes mandatory param: "name,value" pair.   * @see org.apache.lucene.benchmark.byTask.tasks.NewRoundTask  */
end_comment
begin_class
DECL|class|SetPropTask
specifier|public
class|class
name|SetPropTask
extends|extends
name|PerfTask
block|{
DECL|method|SetPropTask
specifier|public
name|SetPropTask
parameter_list|(
name|PerfRunData
name|runData
parameter_list|)
block|{
name|super
argument_list|(
name|runData
argument_list|)
expr_stmt|;
block|}
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|value
specifier|private
name|String
name|value
decl_stmt|;
annotation|@
name|Override
DECL|method|doLogic
specifier|public
name|int
name|doLogic
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|getName
argument_list|()
operator|+
literal|" - undefined name or value: name="
operator|+
name|name
operator|+
literal|" value="
operator|+
name|value
argument_list|)
throw|;
block|}
name|getRunData
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * Set the params (property name and value).    * @param params property name and value separated by ','.    */
annotation|@
name|Override
DECL|method|setParams
specifier|public
name|void
name|setParams
parameter_list|(
name|String
name|params
parameter_list|)
block|{
name|super
operator|.
name|setParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|int
name|k
init|=
name|params
operator|.
name|indexOf
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|name
operator|=
name|params
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|k
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|value
operator|=
name|params
operator|.
name|substring
argument_list|(
name|k
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.lucene.benchmark.byTask.tasks.PerfTask#supportsParams()    */
annotation|@
name|Override
DECL|method|supportsParams
specifier|public
name|boolean
name|supportsParams
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
