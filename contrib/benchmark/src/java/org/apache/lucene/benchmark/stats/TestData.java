begin_unit
begin_package
DECL|package|org.apache.lucene.benchmark.stats
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|stats
package|;
end_package
begin_comment
comment|/**  * Copyright 2005 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|Constants
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_comment
comment|/**  * This class holds together all parameters related to a test. Single test is  * performed several times, and all results are averaged.  *  */
end_comment
begin_class
DECL|class|TestData
specifier|public
class|class
name|TestData
block|{
DECL|field|MAX_BUFFERED_DOCS_COUNTS
specifier|public
specifier|static
name|int
index|[]
name|MAX_BUFFERED_DOCS_COUNTS
init|=
operator|new
name|int
index|[]
block|{
literal|10
block|,
literal|20
block|,
literal|50
block|,
literal|100
block|,
literal|200
block|,
literal|500
block|}
decl_stmt|;
DECL|field|MERGEFACTOR_COUNTS
specifier|public
specifier|static
name|int
index|[]
name|MERGEFACTOR_COUNTS
init|=
operator|new
name|int
index|[]
block|{
literal|10
block|,
literal|20
block|,
literal|50
block|,
literal|100
block|,
literal|200
block|,
literal|500
block|}
decl_stmt|;
comment|/**      * ID of this test data.      */
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
comment|/**      * Heap size.      */
DECL|field|heap
specifier|private
name|long
name|heap
decl_stmt|;
comment|/**      * List of results for each test run with these parameters.      */
DECL|field|runData
specifier|private
name|Vector
argument_list|<
name|TestRunData
argument_list|>
name|runData
init|=
operator|new
name|Vector
argument_list|<
name|TestRunData
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|maxBufferedDocs
DECL|field|mergeFactor
specifier|private
name|int
name|maxBufferedDocs
decl_stmt|,
name|mergeFactor
decl_stmt|;
comment|/**      * Directory containing source files.      */
DECL|field|source
specifier|private
name|File
name|source
decl_stmt|;
comment|/**      * Lucene Directory implementation for creating an index.      */
DECL|field|directory
specifier|private
name|Directory
name|directory
decl_stmt|;
comment|/**      * Analyzer to use when adding documents.      */
DECL|field|analyzer
specifier|private
name|Analyzer
name|analyzer
decl_stmt|;
comment|/**      * If true, use compound file format.      */
DECL|field|compound
specifier|private
name|boolean
name|compound
decl_stmt|;
comment|/**      * If true, optimize index when finished adding documents.      */
DECL|field|optimize
specifier|private
name|boolean
name|optimize
decl_stmt|;
comment|/**      * Data for search benchmarks.      */
DECL|field|queries
specifier|private
name|QueryData
index|[]
name|queries
decl_stmt|;
DECL|method|TestData
specifier|public
name|TestData
parameter_list|()
block|{
name|heap
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|maxMemory
argument_list|()
expr_stmt|;
block|}
DECL|class|DCounter
specifier|private
specifier|static
class|class
name|DCounter
block|{
DECL|field|total
name|double
name|total
decl_stmt|;
DECL|field|count
DECL|field|recordCount
name|int
name|count
decl_stmt|,
name|recordCount
decl_stmt|;
block|}
DECL|class|LCounter
specifier|private
specifier|static
class|class
name|LCounter
block|{
DECL|field|total
name|long
name|total
decl_stmt|;
DECL|field|count
name|int
name|count
decl_stmt|;
block|}
DECL|class|LDCounter
specifier|private
specifier|static
class|class
name|LDCounter
block|{
DECL|field|Dtotal
name|double
name|Dtotal
decl_stmt|;
DECL|field|Dcount
DECL|field|DrecordCount
name|int
name|Dcount
decl_stmt|,
name|DrecordCount
decl_stmt|;
DECL|field|Ltotal0
name|long
name|Ltotal0
decl_stmt|;
DECL|field|Lcount0
name|int
name|Lcount0
decl_stmt|;
DECL|field|Ltotal1
name|long
name|Ltotal1
decl_stmt|;
DECL|field|Lcount1
name|int
name|Lcount1
decl_stmt|;
block|}
comment|/**      * Get a textual summary of the benchmark results, average from all test runs.      */
DECL|field|ID
specifier|static
specifier|final
name|String
name|ID
init|=
literal|"# testData id     "
decl_stmt|;
DECL|field|OP
specifier|static
specifier|final
name|String
name|OP
init|=
literal|"operation      "
decl_stmt|;
DECL|field|RUNCNT
specifier|static
specifier|final
name|String
name|RUNCNT
init|=
literal|"     runCnt"
decl_stmt|;
DECL|field|RECCNT
specifier|static
specifier|final
name|String
name|RECCNT
init|=
literal|"     recCnt"
decl_stmt|;
DECL|field|RECSEC
specifier|static
specifier|final
name|String
name|RECSEC
init|=
literal|"          rec/s"
decl_stmt|;
DECL|field|FREEMEM
specifier|static
specifier|final
name|String
name|FREEMEM
init|=
literal|"       avgFreeMem"
decl_stmt|;
DECL|field|TOTMEM
specifier|static
specifier|final
name|String
name|TOTMEM
init|=
literal|"      avgTotalMem"
decl_stmt|;
DECL|field|COLS
specifier|static
specifier|final
name|String
name|COLS
index|[]
init|=
block|{
name|ID
block|,
name|OP
block|,
name|RUNCNT
block|,
name|RECCNT
block|,
name|RECSEC
block|,
name|FREEMEM
block|,
name|TOTMEM
block|}
decl_stmt|;
DECL|method|showRunData
specifier|public
name|String
name|showRunData
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
if|if
condition|(
name|runData
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|"# [NO RUN DATA]"
return|;
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|LDCounter
argument_list|>
name|resByTask
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LDCounter
argument_list|>
argument_list|()
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
name|lineSep
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"warm = Warm Index Reader"
argument_list|)
operator|.
name|append
argument_list|(
name|lineSep
argument_list|)
operator|.
name|append
argument_list|(
literal|"srch = Search Index"
argument_list|)
operator|.
name|append
argument_list|(
name|lineSep
argument_list|)
operator|.
name|append
argument_list|(
literal|"trav = Traverse Hits list, optionally retrieving document"
argument_list|)
operator|.
name|append
argument_list|(
name|lineSep
argument_list|)
operator|.
name|append
argument_list|(
name|lineSep
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COLS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|COLS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|TestData
operator|.
name|LCounter
index|[]
argument_list|>
name|mapMem
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|TestData
operator|.
name|LCounter
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|DCounter
argument_list|>
name|mapSpeed
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|DCounter
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|runData
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|TestRunData
name|trd
init|=
name|runData
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|label
range|:
name|trd
operator|.
name|getLabels
argument_list|()
control|)
block|{
name|MemUsage
name|mem
init|=
name|trd
operator|.
name|getMemUsage
argument_list|(
name|label
argument_list|)
decl_stmt|;
if|if
condition|(
name|mem
operator|!=
literal|null
condition|)
block|{
name|TestData
operator|.
name|LCounter
index|[]
name|tm
init|=
name|mapMem
operator|.
name|get
argument_list|(
name|label
argument_list|)
decl_stmt|;
if|if
condition|(
name|tm
operator|==
literal|null
condition|)
block|{
name|tm
operator|=
operator|new
name|TestData
operator|.
name|LCounter
index|[
literal|2
index|]
expr_stmt|;
name|tm
index|[
literal|0
index|]
operator|=
operator|new
name|TestData
operator|.
name|LCounter
argument_list|()
expr_stmt|;
name|tm
index|[
literal|1
index|]
operator|=
operator|new
name|TestData
operator|.
name|LCounter
argument_list|()
expr_stmt|;
name|mapMem
operator|.
name|put
argument_list|(
name|label
argument_list|,
name|tm
argument_list|)
expr_stmt|;
block|}
name|tm
index|[
literal|0
index|]
operator|.
name|total
operator|+=
name|mem
operator|.
name|avgFree
expr_stmt|;
name|tm
index|[
literal|0
index|]
operator|.
name|count
operator|++
expr_stmt|;
name|tm
index|[
literal|1
index|]
operator|.
name|total
operator|+=
name|mem
operator|.
name|avgTotal
expr_stmt|;
name|tm
index|[
literal|1
index|]
operator|.
name|count
operator|++
expr_stmt|;
block|}
name|TimeData
name|td
init|=
name|trd
operator|.
name|getTotals
argument_list|(
name|label
argument_list|)
decl_stmt|;
if|if
condition|(
name|td
operator|!=
literal|null
condition|)
block|{
name|TestData
operator|.
name|DCounter
name|dc
init|=
name|mapSpeed
operator|.
name|get
argument_list|(
name|label
argument_list|)
decl_stmt|;
if|if
condition|(
name|dc
operator|==
literal|null
condition|)
block|{
name|dc
operator|=
operator|new
name|TestData
operator|.
name|DCounter
argument_list|()
expr_stmt|;
name|mapSpeed
operator|.
name|put
argument_list|(
name|label
argument_list|,
name|dc
argument_list|)
expr_stmt|;
block|}
name|dc
operator|.
name|count
operator|++
expr_stmt|;
comment|//dc.total += td.getRate();
name|dc
operator|.
name|total
operator|+=
operator|(
name|td
operator|.
name|count
operator|>
literal|0
operator|&&
name|td
operator|.
name|elapsed
operator|<=
literal|0
condition|?
literal|1
else|:
name|td
operator|.
name|elapsed
operator|)
expr_stmt|;
comment|// assume at least 1ms for any countable op
name|dc
operator|.
name|recordCount
operator|+=
name|td
operator|.
name|count
expr_stmt|;
block|}
block|}
block|}
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|res
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|mapSpeed
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|label
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|TestData
operator|.
name|DCounter
name|dc
init|=
name|mapSpeed
operator|.
name|get
argument_list|(
name|label
argument_list|)
decl_stmt|;
name|res
operator|.
name|put
argument_list|(
name|label
argument_list|,
name|format
argument_list|(
name|dc
operator|.
name|count
argument_list|,
name|RUNCNT
argument_list|)
operator|+
name|format
argument_list|(
name|dc
operator|.
name|recordCount
operator|/
name|dc
operator|.
name|count
argument_list|,
name|RECCNT
argument_list|)
operator|+
name|format
argument_list|(
literal|1
argument_list|,
call|(
name|float
call|)
argument_list|(
name|dc
operator|.
name|recordCount
operator|*
literal|1000.0
operator|/
operator|(
name|dc
operator|.
name|total
operator|>
literal|0
condition|?
name|dc
operator|.
name|total
else|:
literal|1.0
operator|)
argument_list|)
argument_list|,
name|RECSEC
argument_list|)
comment|//format((float) (dc.total / (double) dc.count), RECSEC)
argument_list|)
expr_stmt|;
comment|// also sum by task
name|String
name|task
init|=
name|label
operator|.
name|substring
argument_list|(
name|label
operator|.
name|lastIndexOf
argument_list|(
literal|"-"
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|LDCounter
name|ldc
init|=
name|resByTask
operator|.
name|get
argument_list|(
name|task
argument_list|)
decl_stmt|;
if|if
condition|(
name|ldc
operator|==
literal|null
condition|)
block|{
name|ldc
operator|=
operator|new
name|LDCounter
argument_list|()
expr_stmt|;
name|resByTask
operator|.
name|put
argument_list|(
name|task
argument_list|,
name|ldc
argument_list|)
expr_stmt|;
block|}
name|ldc
operator|.
name|Dcount
operator|+=
name|dc
operator|.
name|count
expr_stmt|;
name|ldc
operator|.
name|DrecordCount
operator|+=
name|dc
operator|.
name|recordCount
expr_stmt|;
name|ldc
operator|.
name|Dtotal
operator|+=
operator|(
name|dc
operator|.
name|count
operator|>
literal|0
operator|&&
name|dc
operator|.
name|total
operator|<=
literal|0
condition|?
literal|1
else|:
name|dc
operator|.
name|total
operator|)
expr_stmt|;
comment|// assume at least 1ms for any countable op
block|}
name|it
operator|=
name|mapMem
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|label
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|TestData
operator|.
name|LCounter
index|[]
name|lc
init|=
name|mapMem
operator|.
name|get
argument_list|(
name|label
argument_list|)
decl_stmt|;
name|String
name|speed
init|=
name|res
operator|.
name|get
argument_list|(
name|label
argument_list|)
decl_stmt|;
name|boolean
name|makeSpeed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|speed
operator|==
literal|null
condition|)
block|{
name|makeSpeed
operator|=
literal|true
expr_stmt|;
name|speed
operator|=
name|format
argument_list|(
name|lc
index|[
literal|0
index|]
operator|.
name|count
argument_list|,
name|RUNCNT
argument_list|)
operator|+
name|format
argument_list|(
literal|0
argument_list|,
name|RECCNT
argument_list|)
operator|+
name|format
argument_list|(
literal|0
argument_list|,
operator|(
name|float
operator|)
literal|0.0
argument_list|,
name|RECSEC
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|put
argument_list|(
name|label
argument_list|,
name|speed
operator|+
name|format
argument_list|(
literal|0
argument_list|,
name|lc
index|[
literal|0
index|]
operator|.
name|total
operator|/
name|lc
index|[
literal|0
index|]
operator|.
name|count
argument_list|,
name|FREEMEM
argument_list|)
operator|+
name|format
argument_list|(
literal|0
argument_list|,
name|lc
index|[
literal|1
index|]
operator|.
name|total
operator|/
name|lc
index|[
literal|1
index|]
operator|.
name|count
argument_list|,
name|TOTMEM
argument_list|)
argument_list|)
expr_stmt|;
comment|// also sum by task
name|String
name|task
init|=
name|label
operator|.
name|substring
argument_list|(
name|label
operator|.
name|lastIndexOf
argument_list|(
literal|"-"
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|LDCounter
name|ldc
init|=
name|resByTask
operator|.
name|get
argument_list|(
name|task
argument_list|)
decl_stmt|;
if|if
condition|(
name|ldc
operator|==
literal|null
condition|)
block|{
name|ldc
operator|=
operator|new
name|LDCounter
argument_list|()
expr_stmt|;
name|resByTask
operator|.
name|put
argument_list|(
name|task
argument_list|,
name|ldc
argument_list|)
expr_stmt|;
name|makeSpeed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|makeSpeed
condition|)
block|{
name|ldc
operator|.
name|Dcount
operator|+=
name|lc
index|[
literal|0
index|]
operator|.
name|count
expr_stmt|;
block|}
name|ldc
operator|.
name|Lcount0
operator|+=
name|lc
index|[
literal|0
index|]
operator|.
name|count
expr_stmt|;
name|ldc
operator|.
name|Lcount1
operator|+=
name|lc
index|[
literal|1
index|]
operator|.
name|count
expr_stmt|;
name|ldc
operator|.
name|Ltotal0
operator|+=
name|lc
index|[
literal|0
index|]
operator|.
name|total
expr_stmt|;
name|ldc
operator|.
name|Ltotal1
operator|+=
name|lc
index|[
literal|1
index|]
operator|.
name|total
expr_stmt|;
block|}
name|it
operator|=
name|res
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|label
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|format
argument_list|(
name|prefix
argument_list|,
name|ID
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|format
argument_list|(
name|label
argument_list|,
name|OP
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|res
operator|.
name|get
argument_list|(
name|label
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
comment|// show results by task (srch, optimize, etc.)
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COLS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|COLS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|it
operator|=
name|resByTask
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|task
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|LDCounter
name|ldc
init|=
name|resByTask
operator|.
name|get
argument_list|(
name|task
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|format
argument_list|(
literal|"    "
argument_list|,
name|ID
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|format
argument_list|(
name|task
argument_list|,
name|OP
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|format
argument_list|(
name|ldc
operator|.
name|Dcount
argument_list|,
name|RUNCNT
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|format
argument_list|(
name|ldc
operator|.
name|DrecordCount
operator|/
name|ldc
operator|.
name|Dcount
argument_list|,
name|RECCNT
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|format
argument_list|(
literal|1
argument_list|,
call|(
name|float
call|)
argument_list|(
name|ldc
operator|.
name|DrecordCount
operator|*
literal|1000.0
operator|/
operator|(
name|ldc
operator|.
name|Dtotal
operator|>
literal|0
condition|?
name|ldc
operator|.
name|Dtotal
else|:
literal|1.0
operator|)
argument_list|)
argument_list|,
name|RECSEC
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|format
argument_list|(
literal|0
argument_list|,
name|ldc
operator|.
name|Ltotal0
operator|/
name|ldc
operator|.
name|Lcount0
argument_list|,
name|FREEMEM
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|format
argument_list|(
literal|0
argument_list|,
name|ldc
operator|.
name|Ltotal1
operator|/
name|ldc
operator|.
name|Lcount1
argument_list|,
name|TOTMEM
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|field|numFormat
specifier|private
specifier|static
name|NumberFormat
name|numFormat
index|[]
init|=
block|{
name|NumberFormat
operator|.
name|getInstance
argument_list|()
block|,
name|NumberFormat
operator|.
name|getInstance
argument_list|()
block|}
decl_stmt|;
DECL|field|padd
specifier|private
specifier|static
specifier|final
name|String
name|padd
init|=
literal|"                                  "
decl_stmt|;
static|static
block|{
name|numFormat
index|[
literal|0
index|]
operator|.
name|setMaximumFractionDigits
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|numFormat
index|[
literal|0
index|]
operator|.
name|setMinimumFractionDigits
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|numFormat
index|[
literal|1
index|]
operator|.
name|setMaximumFractionDigits
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|numFormat
index|[
literal|1
index|]
operator|.
name|setMinimumFractionDigits
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// pad number from left
comment|// numFracDigits must be 0 or 1.
DECL|method|format
specifier|static
name|String
name|format
parameter_list|(
name|int
name|numFracDigits
parameter_list|,
name|float
name|f
parameter_list|,
name|String
name|col
parameter_list|)
block|{
name|String
name|res
init|=
name|padd
operator|+
name|numFormat
index|[
name|numFracDigits
index|]
operator|.
name|format
argument_list|(
name|f
argument_list|)
decl_stmt|;
return|return
name|res
operator|.
name|substring
argument_list|(
name|res
operator|.
name|length
argument_list|()
operator|-
name|col
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
comment|// pad number from left
DECL|method|format
specifier|static
name|String
name|format
parameter_list|(
name|int
name|n
parameter_list|,
name|String
name|col
parameter_list|)
block|{
name|String
name|res
init|=
name|padd
operator|+
name|n
decl_stmt|;
return|return
name|res
operator|.
name|substring
argument_list|(
name|res
operator|.
name|length
argument_list|()
operator|-
name|col
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
comment|// pad string from right
DECL|method|format
specifier|static
name|String
name|format
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|col
parameter_list|)
block|{
return|return
operator|(
name|s
operator|+
name|padd
operator|)
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|col
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Prepare a list of benchmark data, using all possible combinations of      * benchmark parameters.      *      * @param sources   list of directories containing different source document      *                  collections      * @param analyzers of analyzers to use.      */
DECL|method|getAll
specifier|public
specifier|static
name|TestData
index|[]
name|getAll
parameter_list|(
name|File
index|[]
name|sources
parameter_list|,
name|Analyzer
index|[]
name|analyzers
parameter_list|)
block|{
name|List
argument_list|<
name|TestData
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|TestData
argument_list|>
argument_list|(
literal|50
argument_list|)
decl_stmt|;
name|TestData
name|ref
init|=
operator|new
name|TestData
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|q
init|=
literal|0
init|;
name|q
operator|<
name|analyzers
operator|.
name|length
condition|;
name|q
operator|++
control|)
block|{
for|for
control|(
name|int
name|m
init|=
literal|0
init|;
name|m
operator|<
name|sources
operator|.
name|length
condition|;
name|m
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_BUFFERED_DOCS_COUNTS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|MERGEFACTOR_COUNTS
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|Constants
operator|.
name|BOOLEANS
operator|.
name|length
condition|;
name|n
operator|++
control|)
block|{
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|Constants
operator|.
name|BOOLEANS
operator|.
name|length
condition|;
name|p
operator|++
control|)
block|{
name|ref
operator|.
name|id
operator|=
literal|"td-"
operator|+
name|q
operator|+
name|m
operator|+
name|i
operator|+
name|k
operator|+
name|n
operator|+
name|p
expr_stmt|;
name|ref
operator|.
name|source
operator|=
name|sources
index|[
name|m
index|]
expr_stmt|;
name|ref
operator|.
name|analyzer
operator|=
name|analyzers
index|[
name|q
index|]
expr_stmt|;
name|ref
operator|.
name|maxBufferedDocs
operator|=
name|MAX_BUFFERED_DOCS_COUNTS
index|[
name|i
index|]
expr_stmt|;
name|ref
operator|.
name|mergeFactor
operator|=
name|MERGEFACTOR_COUNTS
index|[
name|k
index|]
expr_stmt|;
name|ref
operator|.
name|compound
operator|=
name|Constants
operator|.
name|BOOLEANS
index|[
name|n
index|]
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
name|ref
operator|.
name|optimize
operator|=
name|Constants
operator|.
name|BOOLEANS
index|[
name|p
index|]
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
try|try
block|{
name|res
operator|.
name|add
argument_list|(
operator|(
name|TestData
operator|)
name|ref
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|res
operator|.
name|toArray
argument_list|(
operator|new
name|TestData
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/**      * Similar to {@link #getAll(java.io.File[], org.apache.lucene.analysis.Analyzer[])} but only uses      * maxBufferedDocs of 10 and 100 and same for mergeFactor, thus reducing the number of permutations significantly.      * It also only uses compound file and optimize is always true.      *      * @param sources      * @param analyzers      * @return An Array of {@link TestData}      */
DECL|method|getTestDataMinMaxMergeAndMaxBuffered
specifier|public
specifier|static
name|TestData
index|[]
name|getTestDataMinMaxMergeAndMaxBuffered
parameter_list|(
name|File
index|[]
name|sources
parameter_list|,
name|Analyzer
index|[]
name|analyzers
parameter_list|)
block|{
name|List
argument_list|<
name|TestData
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|TestData
argument_list|>
argument_list|(
literal|50
argument_list|)
decl_stmt|;
name|TestData
name|ref
init|=
operator|new
name|TestData
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|q
init|=
literal|0
init|;
name|q
operator|<
name|analyzers
operator|.
name|length
condition|;
name|q
operator|++
control|)
block|{
for|for
control|(
name|int
name|m
init|=
literal|0
init|;
name|m
operator|<
name|sources
operator|.
name|length
condition|;
name|m
operator|++
control|)
block|{
name|ref
operator|.
name|id
operator|=
literal|"td-"
operator|+
name|q
operator|+
name|m
operator|+
literal|"_"
operator|+
literal|10
operator|+
literal|"_"
operator|+
literal|10
expr_stmt|;
name|ref
operator|.
name|source
operator|=
name|sources
index|[
name|m
index|]
expr_stmt|;
name|ref
operator|.
name|analyzer
operator|=
name|analyzers
index|[
name|q
index|]
expr_stmt|;
name|ref
operator|.
name|maxBufferedDocs
operator|=
literal|10
expr_stmt|;
name|ref
operator|.
name|mergeFactor
operator|=
literal|10
expr_stmt|;
comment|//MERGEFACTOR_COUNTS[k];
name|ref
operator|.
name|compound
operator|=
literal|true
expr_stmt|;
name|ref
operator|.
name|optimize
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|res
operator|.
name|add
argument_list|(
operator|(
name|TestData
operator|)
name|ref
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|ref
operator|.
name|id
operator|=
literal|"td-"
operator|+
name|q
operator|+
name|m
operator|+
literal|"_"
operator|+
literal|10
operator|+
literal|"_"
operator|+
literal|100
expr_stmt|;
name|ref
operator|.
name|source
operator|=
name|sources
index|[
name|m
index|]
expr_stmt|;
name|ref
operator|.
name|analyzer
operator|=
name|analyzers
index|[
name|q
index|]
expr_stmt|;
name|ref
operator|.
name|maxBufferedDocs
operator|=
literal|10
expr_stmt|;
name|ref
operator|.
name|mergeFactor
operator|=
literal|100
expr_stmt|;
comment|//MERGEFACTOR_COUNTS[k];
name|ref
operator|.
name|compound
operator|=
literal|true
expr_stmt|;
name|ref
operator|.
name|optimize
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|res
operator|.
name|add
argument_list|(
operator|(
name|TestData
operator|)
name|ref
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|ref
operator|.
name|id
operator|=
literal|"td-"
operator|+
name|q
operator|+
name|m
operator|+
literal|"_"
operator|+
literal|100
operator|+
literal|"_"
operator|+
literal|10
expr_stmt|;
name|ref
operator|.
name|source
operator|=
name|sources
index|[
name|m
index|]
expr_stmt|;
name|ref
operator|.
name|analyzer
operator|=
name|analyzers
index|[
name|q
index|]
expr_stmt|;
name|ref
operator|.
name|maxBufferedDocs
operator|=
literal|100
expr_stmt|;
name|ref
operator|.
name|mergeFactor
operator|=
literal|10
expr_stmt|;
comment|//MERGEFACTOR_COUNTS[k];
name|ref
operator|.
name|compound
operator|=
literal|true
expr_stmt|;
name|ref
operator|.
name|optimize
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|res
operator|.
name|add
argument_list|(
operator|(
name|TestData
operator|)
name|ref
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|ref
operator|.
name|id
operator|=
literal|"td-"
operator|+
name|q
operator|+
name|m
operator|+
literal|"_"
operator|+
literal|100
operator|+
literal|"_"
operator|+
literal|100
expr_stmt|;
name|ref
operator|.
name|source
operator|=
name|sources
index|[
name|m
index|]
expr_stmt|;
name|ref
operator|.
name|analyzer
operator|=
name|analyzers
index|[
name|q
index|]
expr_stmt|;
name|ref
operator|.
name|maxBufferedDocs
operator|=
literal|100
expr_stmt|;
name|ref
operator|.
name|mergeFactor
operator|=
literal|100
expr_stmt|;
comment|//MERGEFACTOR_COUNTS[k];
name|ref
operator|.
name|compound
operator|=
literal|true
expr_stmt|;
name|ref
operator|.
name|optimize
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|res
operator|.
name|add
argument_list|(
operator|(
name|TestData
operator|)
name|ref
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|res
operator|.
name|toArray
argument_list|(
operator|new
name|TestData
index|[
literal|0
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clone
specifier|protected
name|Object
name|clone
parameter_list|()
block|{
name|TestData
name|cl
init|=
operator|new
name|TestData
argument_list|()
decl_stmt|;
name|cl
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|cl
operator|.
name|compound
operator|=
name|compound
expr_stmt|;
name|cl
operator|.
name|heap
operator|=
name|heap
expr_stmt|;
name|cl
operator|.
name|mergeFactor
operator|=
name|mergeFactor
expr_stmt|;
name|cl
operator|.
name|maxBufferedDocs
operator|=
name|maxBufferedDocs
expr_stmt|;
name|cl
operator|.
name|optimize
operator|=
name|optimize
expr_stmt|;
name|cl
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|cl
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
name|cl
operator|.
name|analyzer
operator|=
name|analyzer
expr_stmt|;
comment|// don't clone runData
return|return
name|cl
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|res
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|res
operator|.
name|append
argument_list|(
literal|"#-- ID: "
argument_list|)
operator|.
name|append
argument_list|(
name|id
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", heap="
argument_list|)
operator|.
name|append
argument_list|(
name|heap
argument_list|)
operator|.
name|append
argument_list|(
literal|" --\n"
argument_list|)
expr_stmt|;
name|res
operator|.
name|append
argument_list|(
literal|"# source="
argument_list|)
operator|.
name|append
argument_list|(
name|source
argument_list|)
operator|.
name|append
argument_list|(
literal|", directory="
argument_list|)
operator|.
name|append
argument_list|(
name|directory
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|res
operator|.
name|append
argument_list|(
literal|"# maxBufferedDocs="
argument_list|)
operator|.
name|append
argument_list|(
name|maxBufferedDocs
argument_list|)
operator|.
name|append
argument_list|(
literal|", mergeFactor="
argument_list|)
operator|.
name|append
argument_list|(
name|mergeFactor
argument_list|)
expr_stmt|;
name|res
operator|.
name|append
argument_list|(
literal|", compound="
argument_list|)
operator|.
name|append
argument_list|(
name|compound
argument_list|)
operator|.
name|append
argument_list|(
literal|", optimize="
argument_list|)
operator|.
name|append
argument_list|(
name|optimize
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|queries
operator|!=
literal|null
condition|)
block|{
name|res
operator|.
name|append
argument_list|(
name|QueryData
operator|.
name|getLabels
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|res
operator|.
name|append
argument_list|(
literal|"# "
argument_list|)
operator|.
name|append
argument_list|(
name|queries
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getAnalyzer
specifier|public
name|Analyzer
name|getAnalyzer
parameter_list|()
block|{
return|return
name|analyzer
return|;
block|}
DECL|method|setAnalyzer
specifier|public
name|void
name|setAnalyzer
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|)
block|{
name|this
operator|.
name|analyzer
operator|=
name|analyzer
expr_stmt|;
block|}
DECL|method|isCompound
specifier|public
name|boolean
name|isCompound
parameter_list|()
block|{
return|return
name|compound
return|;
block|}
DECL|method|setCompound
specifier|public
name|void
name|setCompound
parameter_list|(
name|boolean
name|compound
parameter_list|)
block|{
name|this
operator|.
name|compound
operator|=
name|compound
expr_stmt|;
block|}
DECL|method|getDirectory
specifier|public
name|Directory
name|getDirectory
parameter_list|()
block|{
return|return
name|directory
return|;
block|}
DECL|method|setDirectory
specifier|public
name|void
name|setDirectory
parameter_list|(
name|Directory
name|directory
parameter_list|)
block|{
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
block|}
DECL|method|getHeap
specifier|public
name|long
name|getHeap
parameter_list|()
block|{
return|return
name|heap
return|;
block|}
DECL|method|setHeap
specifier|public
name|void
name|setHeap
parameter_list|(
name|long
name|heap
parameter_list|)
block|{
name|this
operator|.
name|heap
operator|=
name|heap
expr_stmt|;
block|}
DECL|method|getId
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|setId
specifier|public
name|void
name|setId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|getMaxBufferedDocs
specifier|public
name|int
name|getMaxBufferedDocs
parameter_list|()
block|{
return|return
name|maxBufferedDocs
return|;
block|}
DECL|method|setMaxBufferedDocs
specifier|public
name|void
name|setMaxBufferedDocs
parameter_list|(
name|int
name|maxBufferedDocs
parameter_list|)
block|{
name|this
operator|.
name|maxBufferedDocs
operator|=
name|maxBufferedDocs
expr_stmt|;
block|}
DECL|method|getMergeFactor
specifier|public
name|int
name|getMergeFactor
parameter_list|()
block|{
return|return
name|mergeFactor
return|;
block|}
DECL|method|setMergeFactor
specifier|public
name|void
name|setMergeFactor
parameter_list|(
name|int
name|mergeFactor
parameter_list|)
block|{
name|this
operator|.
name|mergeFactor
operator|=
name|mergeFactor
expr_stmt|;
block|}
DECL|method|isOptimize
specifier|public
name|boolean
name|isOptimize
parameter_list|()
block|{
return|return
name|optimize
return|;
block|}
DECL|method|setOptimize
specifier|public
name|void
name|setOptimize
parameter_list|(
name|boolean
name|optimize
parameter_list|)
block|{
name|this
operator|.
name|optimize
operator|=
name|optimize
expr_stmt|;
block|}
DECL|method|getQueries
specifier|public
name|QueryData
index|[]
name|getQueries
parameter_list|()
block|{
return|return
name|queries
return|;
block|}
DECL|method|setQueries
specifier|public
name|void
name|setQueries
parameter_list|(
name|QueryData
index|[]
name|queries
parameter_list|)
block|{
name|this
operator|.
name|queries
operator|=
name|queries
expr_stmt|;
block|}
DECL|method|getRunData
specifier|public
name|Vector
argument_list|<
name|TestRunData
argument_list|>
name|getRunData
parameter_list|()
block|{
return|return
name|runData
return|;
block|}
DECL|method|setRunData
specifier|public
name|void
name|setRunData
parameter_list|(
name|Vector
argument_list|<
name|TestRunData
argument_list|>
name|runData
parameter_list|)
block|{
name|this
operator|.
name|runData
operator|=
name|runData
expr_stmt|;
block|}
DECL|method|getSource
specifier|public
name|File
name|getSource
parameter_list|()
block|{
return|return
name|source
return|;
block|}
DECL|method|setSource
specifier|public
name|void
name|setSource
parameter_list|(
name|File
name|source
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
block|}
end_class
end_unit
