begin_unit
begin_package
DECL|package|org.apache.lucene.benchmark.byTask.tasks
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|tasks
package|;
end_package
begin_comment
comment|/**  * Copyright 2005 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|PerfRunData
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldSelector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SetBasedFieldSelector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * Search and Travrese and Retrieve docs task using a SetBasedFieldSelector.  *  *<p>Note: This task reuses the reader if it is already open.  * Otherwise a reader is opened at start and closed at the end.  *  * Takes optional param: comma separated list of Fields to load.  */
end_comment
begin_class
DECL|class|SearchTravRetLoadFieldSelectorTask
specifier|public
class|class
name|SearchTravRetLoadFieldSelectorTask
extends|extends
name|SearchTravTask
block|{
DECL|field|fieldSelector
specifier|protected
name|FieldSelector
name|fieldSelector
decl_stmt|;
DECL|method|SearchTravRetLoadFieldSelectorTask
specifier|public
name|SearchTravRetLoadFieldSelectorTask
parameter_list|(
name|PerfRunData
name|runData
parameter_list|)
block|{
name|super
argument_list|(
name|runData
argument_list|)
expr_stmt|;
block|}
DECL|method|withRetrieve
specifier|public
name|boolean
name|withRetrieve
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|retrieveDoc
specifier|protected
name|int
name|retrieveDoc
parameter_list|(
name|IndexReader
name|ir
parameter_list|,
name|int
name|id
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|ir
operator|.
name|document
argument_list|(
name|id
argument_list|,
name|fieldSelector
argument_list|)
operator|==
literal|null
condition|?
literal|0
else|:
literal|1
operator|)
return|;
block|}
DECL|method|setParams
specifier|public
name|void
name|setParams
parameter_list|(
name|String
name|params
parameter_list|)
block|{
name|Set
name|fieldsToLoad
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|params
argument_list|,
literal|","
argument_list|)
init|;
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|s
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|fieldsToLoad
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|fieldSelector
operator|=
operator|new
name|SetBasedFieldSelector
argument_list|(
name|fieldsToLoad
argument_list|,
name|Collections
operator|.
name|EMPTY_SET
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
