begin_unit
begin_package
DECL|package|org.apache.lucene.benchmark.byTask.tasks
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|tasks
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|PerfRunData
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|feeds
operator|.
name|QueryMaker
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Hits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_comment
comment|/**  * Read index (abstract) task.  * Sub classes implement withSearch(), withWarm(), withTraverse() and withRetrieve()  * methods to configure the actual action.  * Other side effects: none.  */
end_comment
begin_class
DECL|class|ReadTask
specifier|public
specifier|abstract
class|class
name|ReadTask
extends|extends
name|PerfTask
block|{
DECL|method|ReadTask
specifier|public
name|ReadTask
parameter_list|(
name|PerfRunData
name|runData
parameter_list|)
block|{
name|super
argument_list|(
name|runData
argument_list|)
expr_stmt|;
block|}
DECL|method|doLogic
specifier|public
name|int
name|doLogic
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|res
init|=
literal|0
decl_stmt|;
name|boolean
name|closeReader
init|=
literal|false
decl_stmt|;
comment|// open reader or use existing one
name|IndexReader
name|ir
init|=
name|getRunData
argument_list|()
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|ir
operator|==
literal|null
condition|)
block|{
name|Directory
name|dir
init|=
name|getRunData
argument_list|()
operator|.
name|getDirectory
argument_list|()
decl_stmt|;
name|ir
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|closeReader
operator|=
literal|true
expr_stmt|;
comment|//res++; //this is confusing, comment it out
block|}
comment|// optionally warm and add num docs traversed to count
if|if
condition|(
name|withWarm
argument_list|()
condition|)
block|{
name|Document
name|doc
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
literal|0
init|;
name|m
operator|<
name|ir
operator|.
name|maxDoc
argument_list|()
condition|;
name|m
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|ir
operator|.
name|isDeleted
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|doc
operator|=
name|ir
operator|.
name|document
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|res
operator|+=
operator|(
name|doc
operator|==
literal|null
condition|?
literal|0
else|:
literal|1
operator|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|withSearch
argument_list|()
condition|)
block|{
name|res
operator|++
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|QueryMaker
name|queryMaker
init|=
name|getQueryMaker
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|queryMaker
operator|.
name|makeQuery
argument_list|()
decl_stmt|;
name|Hits
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|)
decl_stmt|;
comment|//System.out.println("searched: "+q);
if|if
condition|(
name|withTraverse
argument_list|()
condition|)
block|{
name|Document
name|doc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hits
operator|!=
literal|null
operator|&&
name|hits
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|m
init|=
literal|0
init|;
name|m
operator|<
name|hits
operator|.
name|length
argument_list|()
condition|;
name|m
operator|++
control|)
block|{
name|int
name|id
init|=
name|hits
operator|.
name|id
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|res
operator|++
expr_stmt|;
if|if
condition|(
name|withRetrieve
argument_list|()
condition|)
block|{
name|doc
operator|=
name|ir
operator|.
name|document
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|res
operator|+=
operator|(
name|doc
operator|==
literal|null
condition|?
literal|0
else|:
literal|1
operator|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|closeReader
condition|)
block|{
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
comment|/**    * Return query maker used for this task.    */
DECL|method|getQueryMaker
specifier|public
specifier|abstract
name|QueryMaker
name|getQueryMaker
parameter_list|()
function_decl|;
comment|/**    * Return true if search should be performed.    */
DECL|method|withSearch
specifier|public
specifier|abstract
name|boolean
name|withSearch
parameter_list|()
function_decl|;
comment|/**    * Return true if warming should be performed.    */
DECL|method|withWarm
specifier|public
specifier|abstract
name|boolean
name|withWarm
parameter_list|()
function_decl|;
comment|/**    * Return true if, with search, results should be traversed.    */
DECL|method|withTraverse
specifier|public
specifier|abstract
name|boolean
name|withTraverse
parameter_list|()
function_decl|;
comment|/**    * Return true if, with search& results traversing, docs should be retrieved.    */
DECL|method|withRetrieve
specifier|public
specifier|abstract
name|boolean
name|withRetrieve
parameter_list|()
function_decl|;
block|}
end_class
end_unit
