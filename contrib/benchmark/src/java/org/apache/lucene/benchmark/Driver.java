begin_unit
begin_package
DECL|package|org.apache.lucene.benchmark
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|digester
operator|.
name|Digester
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|standard
operator|.
name|StandardBenchmarker
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|stats
operator|.
name|TestData
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import
begin_comment
comment|/**  * Copyright 2005 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  *  Sets up the  *  **/
end_comment
begin_class
DECL|class|Driver
specifier|public
class|class
name|Driver
block|{
DECL|field|workingDir
specifier|private
name|File
name|workingDir
decl_stmt|;
DECL|field|benchmarker
specifier|private
name|Benchmarker
name|benchmarker
decl_stmt|;
DECL|field|options
specifier|private
name|BenchmarkOptions
name|options
decl_stmt|;
DECL|method|Driver
specifier|public
name|Driver
parameter_list|()
block|{     }
DECL|method|Driver
specifier|public
name|Driver
parameter_list|(
name|Benchmarker
name|benchmarker
parameter_list|,
name|BenchmarkOptions
name|options
parameter_list|)
block|{
name|this
operator|.
name|benchmarker
operator|=
name|benchmarker
expr_stmt|;
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
block|}
comment|/**      * Creates a Driver using Digester      * @param inputSource      */
DECL|method|Driver
specifier|public
name|Driver
parameter_list|(
name|File
name|workingDir
parameter_list|,
name|InputSource
name|inputSource
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
name|Digester
name|digester
init|=
operator|new
name|Digester
argument_list|()
decl_stmt|;
name|digester
operator|.
name|setValidating
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|digester
operator|.
name|addObjectCreate
argument_list|(
literal|"benchmark/benchmarker"
argument_list|,
literal|"class"
argument_list|,
name|StandardBenchmarker
operator|.
name|class
argument_list|)
expr_stmt|;
name|digester
operator|.
name|addSetProperties
argument_list|(
literal|"benchmark/benchmarker"
argument_list|)
expr_stmt|;
name|digester
operator|.
name|addSetNext
argument_list|(
literal|"benchmark/benchmarker"
argument_list|,
literal|"setBenchmarker"
argument_list|)
expr_stmt|;
name|digester
operator|.
name|addObjectCreate
argument_list|(
literal|"benchmark/options"
argument_list|,
literal|"class"
argument_list|,
name|BenchmarkOptions
operator|.
name|class
argument_list|)
expr_stmt|;
name|digester
operator|.
name|addSetProperties
argument_list|(
literal|"benchmark/options"
argument_list|)
expr_stmt|;
name|digester
operator|.
name|addSetNext
argument_list|(
literal|"benchmark/options"
argument_list|,
literal|"setOptions"
argument_list|)
expr_stmt|;
name|digester
operator|.
name|push
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|digester
operator|.
name|parse
argument_list|(
name|inputSource
argument_list|)
expr_stmt|;
name|this
operator|.
name|workingDir
operator|=
name|workingDir
expr_stmt|;
block|}
DECL|method|run
specifier|private
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|TestData
index|[]
name|data
init|=
name|benchmarker
operator|.
name|benchmark
argument_list|(
name|workingDir
argument_list|,
name|options
argument_list|)
decl_stmt|;
comment|//Print out summary:
comment|/*System.out.println("Test Data:");         for (int i = 0; i< data.length; i++)         {             TestData testData = data[i];             System.out.println("---------------");             System.out.println(testData.showRunData(testData.getId()));             System.out.println("---------------");         }*/
block|}
DECL|method|getBenchmarker
specifier|public
name|Benchmarker
name|getBenchmarker
parameter_list|()
block|{
return|return
name|benchmarker
return|;
block|}
DECL|method|setBenchmarker
specifier|public
name|void
name|setBenchmarker
parameter_list|(
name|Benchmarker
name|benchmarker
parameter_list|)
block|{
name|this
operator|.
name|benchmarker
operator|=
name|benchmarker
expr_stmt|;
block|}
DECL|method|getOptions
specifier|public
name|BenchmarkOptions
name|getOptions
parameter_list|()
block|{
return|return
name|options
return|;
block|}
DECL|method|setOptions
specifier|public
name|void
name|setOptions
parameter_list|(
name|BenchmarkOptions
name|options
parameter_list|)
block|{
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
block|}
DECL|method|getWorkingDir
specifier|public
name|File
name|getWorkingDir
parameter_list|()
block|{
return|return
name|workingDir
return|;
block|}
DECL|method|setWorkingDir
specifier|public
name|void
name|setWorkingDir
parameter_list|(
name|File
name|workingDir
parameter_list|)
block|{
name|this
operator|.
name|workingDir
operator|=
name|workingDir
expr_stmt|;
block|}
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|printHelp
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|File
name|workingDir
init|=
operator|new
name|File
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|File
name|configFile
init|=
operator|new
name|File
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|configFile
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|//Setup
try|try
block|{
name|Driver
name|driver
init|=
operator|new
name|Driver
argument_list|(
name|workingDir
argument_list|,
operator|new
name|InputSource
argument_list|(
operator|new
name|FileReader
argument_list|(
name|configFile
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|driver
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|printHelp
specifier|private
specifier|static
name|void
name|printHelp
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: java -cp [...] "
operator|+
name|Driver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"<working dir><config-file>"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
