begin_unit
begin_package
DECL|package|org.apache.lucene.benchmark.byTask.tasks
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|tasks
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|PerfRunData
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_comment
comment|/**  * Search and Traverse and Retrieve docs task.  Highlight the fields in the retrieved documents.  *  * Uses the {@link org.apache.lucene.search.highlight.SimpleHTMLFormatter} for formatting.  *  *<p>Note: This task reuses the reader if it is already open.  * Otherwise a reader is opened at start and closed at the end.  *</p>  *  *<p>Takes optional multivalued, comma separated param string as: size[&lt;traversal size&gt;],highlight[&lt;int&gt;],maxFrags[&lt;int&gt;],mergeContiguous[&lt;boolean&gt;],fields[name1;name2;...]</p>  *<ul>  *<li>traversal size - The number of hits to traverse, otherwise all will be traversed</li>  *<li>highlight - The number of the hits to highlight.  Will always be less than or equal to traversal size.  Default is Integer.MAX_VALUE (i.e. hits.length())</li>  *<li>maxFrags - The maximum number of fragments to score by the highlighter</li>  *<li>mergeContiguous - true if contiguous fragments should be merged.</li>  *<li>fields - The fields to highlight.  If not specified all fields will be highlighted (or at least attempted)</li>  *</ul>  * Example:  *<pre>"SearchHlgtSameRdr" SearchTravRetHighlight(size[10],highlight[10],mergeContiguous[true],maxFrags[3],fields[body])> : 1000  *</pre>  *  * Documents must be stored in order for this task to work.  Additionally, term vector positions can be used as well.  *  *<p>Other side effects: counts additional 1 (record) for each traversed hit,  * and 1 more for each retrieved (non null) document and 1 for each fragment returned.</p>  */
end_comment
begin_class
DECL|class|SearchTravRetHighlightTask
specifier|public
class|class
name|SearchTravRetHighlightTask
extends|extends
name|SearchTravTask
block|{
DECL|field|numToHighlight
specifier|protected
name|int
name|numToHighlight
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|mergeContiguous
specifier|protected
name|boolean
name|mergeContiguous
decl_stmt|;
DECL|field|maxFrags
specifier|protected
name|int
name|maxFrags
init|=
literal|2
decl_stmt|;
DECL|field|paramFields
specifier|protected
name|Set
name|paramFields
init|=
name|Collections
operator|.
name|EMPTY_SET
decl_stmt|;
DECL|method|SearchTravRetHighlightTask
specifier|public
name|SearchTravRetHighlightTask
parameter_list|(
name|PerfRunData
name|runData
parameter_list|)
block|{
name|super
argument_list|(
name|runData
argument_list|)
expr_stmt|;
block|}
DECL|method|setup
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
comment|//check to make sure either the doc is being stored
name|PerfRunData
name|data
init|=
name|getRunData
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
literal|"doc.stored"
argument_list|,
literal|false
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"doc.stored must be set to true"
argument_list|)
throw|;
block|}
block|}
DECL|method|withRetrieve
specifier|public
name|boolean
name|withRetrieve
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|numToHighlight
specifier|public
name|int
name|numToHighlight
parameter_list|()
block|{
return|return
name|numToHighlight
return|;
block|}
DECL|method|isMergeContiguousFragments
specifier|public
name|boolean
name|isMergeContiguousFragments
parameter_list|()
block|{
return|return
name|mergeContiguous
return|;
block|}
DECL|method|maxNumFragments
specifier|public
name|int
name|maxNumFragments
parameter_list|()
block|{
return|return
name|maxFrags
return|;
block|}
DECL|method|getFieldsToHighlight
specifier|protected
name|Collection
comment|/*<String>*/
name|getFieldsToHighlight
parameter_list|(
name|Document
name|document
parameter_list|)
block|{
name|Collection
name|result
init|=
name|super
operator|.
name|getFieldsToHighlight
argument_list|(
name|document
argument_list|)
decl_stmt|;
comment|//if stored is false, then result will be empty, in which case just get all the param fields
if|if
condition|(
name|paramFields
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
operator|&&
name|result
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|result
operator|.
name|retainAll
argument_list|(
name|paramFields
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|paramFields
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|setParams
specifier|public
name|void
name|setParams
parameter_list|(
name|String
name|params
parameter_list|)
block|{
name|String
index|[]
name|splits
init|=
name|params
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splits
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|splits
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"size["
argument_list|)
operator|==
literal|true
condition|)
block|{
name|traversalSize
operator|=
operator|(
name|int
operator|)
name|Float
operator|.
name|parseFloat
argument_list|(
name|splits
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
literal|"size["
operator|.
name|length
argument_list|()
argument_list|,
name|splits
index|[
name|i
index|]
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|splits
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"highlight["
argument_list|)
operator|==
literal|true
condition|)
block|{
name|numToHighlight
operator|=
operator|(
name|int
operator|)
name|Float
operator|.
name|parseFloat
argument_list|(
name|splits
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
literal|"highlight["
operator|.
name|length
argument_list|()
argument_list|,
name|splits
index|[
name|i
index|]
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|splits
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"maxFrags["
argument_list|)
operator|==
literal|true
condition|)
block|{
name|maxFrags
operator|=
operator|(
name|int
operator|)
name|Float
operator|.
name|parseFloat
argument_list|(
name|splits
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
literal|"maxFrags["
operator|.
name|length
argument_list|()
argument_list|,
name|splits
index|[
name|i
index|]
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|splits
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"mergeContiguous["
argument_list|)
operator|==
literal|true
condition|)
block|{
name|mergeContiguous
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|splits
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
literal|"mergeContiguous["
operator|.
name|length
argument_list|()
argument_list|,
name|splits
index|[
name|i
index|]
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|splits
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"fields["
argument_list|)
operator|==
literal|true
condition|)
block|{
name|paramFields
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|String
name|fieldNames
init|=
name|splits
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
literal|"fields["
operator|.
name|length
argument_list|()
argument_list|,
name|splits
index|[
name|i
index|]
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|fieldSplits
init|=
name|fieldNames
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|fieldSplits
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|paramFields
operator|.
name|add
argument_list|(
name|fieldSplits
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class
end_unit
