begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.benchmark.byTask
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|Benchmark
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|tasks
operator|.
name|CountingSearchTestTask
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_comment
comment|/**  * Test very simply that perf tasks - simple algorithms - are doing what they should.  */
end_comment
begin_class
DECL|class|TestPerfTasksLogic
specifier|public
class|class
name|TestPerfTasksLogic
extends|extends
name|TestCase
block|{
DECL|field|DEBUG
specifier|private
specifier|static
specifier|final
name|boolean
name|DEBUG
init|=
literal|false
decl_stmt|;
DECL|field|NEW_LINE
specifier|static
specifier|final
name|String
name|NEW_LINE
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
comment|// properties in effect in all tests here
DECL|field|propLines
specifier|static
specifier|final
name|String
name|propLines
index|[]
init|=
block|{
literal|"directory=RAMDirectory"
block|,
literal|"print.props=false"
block|,   }
decl_stmt|;
comment|/**    * @param name test name    */
DECL|method|TestPerfTasksLogic
specifier|public
name|TestPerfTasksLogic
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test index creation logic    */
DECL|method|testIndexAndSearchTasks
specifier|public
name|void
name|testIndexAndSearchTasks
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 1. alg definition (required in every "logic" test)
name|String
name|algLines
index|[]
init|=
block|{
literal|"ResetSystemErase"
block|,
literal|"CreateIndex"
block|,
literal|"{ AddDoc } : 1000"
block|,
literal|"Optimize"
block|,
literal|"CloseIndex"
block|,
literal|"OpenReader"
block|,
literal|"{ CountingSearchTest } : 200"
block|,
literal|"CloseReader"
block|,
literal|"[ CountingSearchTest> : 70"
block|,
literal|"[ CountingSearchTest> : 9"
block|,     }
decl_stmt|;
comment|// 2. we test this value later
name|CountingSearchTestTask
operator|.
name|numSearches
operator|=
literal|0
expr_stmt|;
comment|// 3. execute the algorithm  (required in every "logic" test)
name|Benchmark
name|benchmark
init|=
name|execBenchmark
argument_list|(
name|algLines
argument_list|)
decl_stmt|;
comment|// 4. test specific checks after the benchmark run completed.
name|assertEquals
argument_list|(
literal|"TestSearchTask was supposed to be called!"
argument_list|,
literal|279
argument_list|,
name|CountingSearchTestTask
operator|.
name|numSearches
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Index does not exist?...!"
argument_list|,
name|IndexReader
operator|.
name|indexExists
argument_list|(
name|benchmark
operator|.
name|getRunData
argument_list|()
operator|.
name|getDirectory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// now we should be able to open the index for write.
name|IndexWriter
name|iw
init|=
operator|new
name|IndexWriter
argument_list|(
name|benchmark
operator|.
name|getRunData
argument_list|()
operator|.
name|getDirectory
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|ir
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|benchmark
operator|.
name|getRunData
argument_list|()
operator|.
name|getDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1000 docs were added to the index, this is what we expect to find!"
argument_list|,
literal|1000
argument_list|,
name|ir
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test Exhasting Doc Maker logic    */
DECL|method|testExhaustDocMaker
specifier|public
name|void
name|testExhaustDocMaker
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 1. alg definition (required in every "logic" test)
name|String
name|algLines
index|[]
init|=
block|{
literal|"# ----- properties "
block|,
literal|"doc.maker=org.apache.lucene.benchmark.byTask.feeds.SimpleDocMaker"
block|,
literal|"doc.add.log.step=1"
block|,
literal|"doc.term.vector=false"
block|,
literal|"doc.maker.forever=false"
block|,
literal|"directory=RAMDirectory"
block|,
literal|"doc.stored=false"
block|,
literal|"doc.tokenized=false"
block|,
literal|"# ----- alg "
block|,
literal|"CreateIndex"
block|,
literal|"{ AddDoc } : * "
block|,
literal|"Optimize"
block|,
literal|"CloseIndex"
block|,
literal|"OpenReader"
block|,
literal|"{ CountingSearchTest } : 100"
block|,
literal|"CloseReader"
block|,
literal|"[ CountingSearchTest> : 30"
block|,
literal|"[ CountingSearchTest> : 9"
block|,     }
decl_stmt|;
comment|// 2. we test this value later
name|CountingSearchTestTask
operator|.
name|numSearches
operator|=
literal|0
expr_stmt|;
comment|// 3. execute the algorithm  (required in every "logic" test)
name|Benchmark
name|benchmark
init|=
name|execBenchmark
argument_list|(
name|algLines
argument_list|)
decl_stmt|;
comment|// 4. test specific checks after the benchmark run completed.
name|assertEquals
argument_list|(
literal|"TestSearchTask was supposed to be called!"
argument_list|,
literal|139
argument_list|,
name|CountingSearchTestTask
operator|.
name|numSearches
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Index does not exist?...!"
argument_list|,
name|IndexReader
operator|.
name|indexExists
argument_list|(
name|benchmark
operator|.
name|getRunData
argument_list|()
operator|.
name|getDirectory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// now we should be able to open the index for write.
name|IndexWriter
name|iw
init|=
operator|new
name|IndexWriter
argument_list|(
name|benchmark
operator|.
name|getRunData
argument_list|()
operator|.
name|getDirectory
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|ir
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|benchmark
operator|.
name|getRunData
argument_list|()
operator|.
name|getDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1 docs were added to the index, this is what we expect to find!"
argument_list|,
literal|1
argument_list|,
name|ir
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// create the benchmark and execute it.
DECL|method|execBenchmark
specifier|private
name|Benchmark
name|execBenchmark
parameter_list|(
name|String
index|[]
name|algLines
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|algText
init|=
name|algLinesToText
argument_list|(
name|algLines
argument_list|)
decl_stmt|;
name|logTstLogic
argument_list|(
name|algText
argument_list|)
expr_stmt|;
name|Benchmark
name|benchmark
init|=
operator|new
name|Benchmark
argument_list|(
operator|new
name|StringReader
argument_list|(
name|algText
argument_list|)
argument_list|)
decl_stmt|;
name|benchmark
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|benchmark
return|;
block|}
comment|// catenate alg lines to make the alg text
DECL|method|algLinesToText
specifier|private
name|String
name|algLinesToText
parameter_list|(
name|String
index|[]
name|algLines
parameter_list|)
block|{
name|String
name|indent
init|=
literal|"  "
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|propLines
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
name|propLines
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
name|NEW_LINE
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|algLines
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
name|algLines
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
name|NEW_LINE
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|logTstLogic
specifier|private
name|void
name|logTstLogic
parameter_list|(
name|String
name|txt
parameter_list|)
block|{
if|if
condition|(
operator|!
name|DEBUG
condition|)
return|return;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Test logic of:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|txt
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
