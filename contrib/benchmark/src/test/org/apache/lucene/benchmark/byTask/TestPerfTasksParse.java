begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.benchmark.byTask
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|tasks
operator|.
name|PerfTask
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|tasks
operator|.
name|TaskSequence
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|utils
operator|.
name|Algorithm
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_comment
comment|/**  * Test very simply that perf tasks are parses as expected.  */
end_comment
begin_class
DECL|class|TestPerfTasksParse
specifier|public
class|class
name|TestPerfTasksParse
extends|extends
name|TestCase
block|{
DECL|field|DEBUG
specifier|private
specifier|static
specifier|final
name|boolean
name|DEBUG
init|=
literal|false
decl_stmt|;
DECL|field|NEW_LINE
specifier|static
specifier|final
name|String
name|NEW_LINE
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
DECL|field|INDENT
specifier|static
specifier|final
name|String
name|INDENT
init|=
literal|"  "
decl_stmt|;
comment|// properties in effect in all tests here
DECL|field|propPart
specifier|static
specifier|final
name|String
name|propPart
init|=
name|INDENT
operator|+
literal|"directory=RAMDirectory"
operator|+
name|NEW_LINE
operator|+
name|INDENT
operator|+
literal|"print.props=false"
operator|+
name|NEW_LINE
decl_stmt|;
comment|/*    * All known tasks.     * As new tasks are added, add them here.    * It would be nice to do that automatically, unfortunately    * Java does not provide a "get all classes in package" or    * "get all sub-classes" functionality.      */
DECL|field|singleTaskAlgs
specifier|static
name|String
name|singleTaskAlgs
index|[]
decl_stmt|;
comment|/* (non-Javadoc)    * @see junit.framework.TestCase#setUp()    */
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
if|if
condition|(
name|singleTaskAlgs
operator|==
literal|null
condition|)
block|{
name|singleTaskAlgs
operator|=
name|findTasks
argument_list|()
expr_stmt|;
block|}
block|}
comment|// one time initialization
DECL|method|findTasks
specifier|static
name|String
index|[]
name|findTasks
parameter_list|()
throws|throws
name|Exception
block|{
name|ArrayList
name|tsks
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|// init with tasks we know about
name|tsks
operator|.
name|add
argument_list|(
literal|" AddDoc                   "
argument_list|)
expr_stmt|;
name|tsks
operator|.
name|add
argument_list|(
literal|" AddDoc(1000.0)           "
argument_list|)
expr_stmt|;
name|tsks
operator|.
name|add
argument_list|(
literal|" ClearStats               "
argument_list|)
expr_stmt|;
name|tsks
operator|.
name|add
argument_list|(
literal|" CloseIndex               "
argument_list|)
expr_stmt|;
name|tsks
operator|.
name|add
argument_list|(
literal|" CloseReader              "
argument_list|)
expr_stmt|;
name|tsks
operator|.
name|add
argument_list|(
literal|" CreateIndex              "
argument_list|)
expr_stmt|;
name|tsks
operator|.
name|add
argument_list|(
literal|" DeleteDoc                "
argument_list|)
expr_stmt|;
name|tsks
operator|.
name|add
argument_list|(
literal|" DeleteDoc(500.0)         "
argument_list|)
expr_stmt|;
name|tsks
operator|.
name|add
argument_list|(
literal|" NewRound                 "
argument_list|)
expr_stmt|;
name|tsks
operator|.
name|add
argument_list|(
literal|" OpenIndex                "
argument_list|)
expr_stmt|;
name|tsks
operator|.
name|add
argument_list|(
literal|" OpenReader               "
argument_list|)
expr_stmt|;
name|tsks
operator|.
name|add
argument_list|(
literal|" Optimize                 "
argument_list|)
expr_stmt|;
name|tsks
operator|.
name|add
argument_list|(
literal|" RepAll                   "
argument_list|)
expr_stmt|;
name|tsks
operator|.
name|add
argument_list|(
literal|" RepSelectByPref prefix   "
argument_list|)
expr_stmt|;
name|tsks
operator|.
name|add
argument_list|(
literal|" RepSumByNameRound        "
argument_list|)
expr_stmt|;
name|tsks
operator|.
name|add
argument_list|(
literal|" RepSumByName             "
argument_list|)
expr_stmt|;
name|tsks
operator|.
name|add
argument_list|(
literal|" RepSumByPrefRound prefix "
argument_list|)
expr_stmt|;
name|tsks
operator|.
name|add
argument_list|(
literal|" RepSumByPref   prefix    "
argument_list|)
expr_stmt|;
name|tsks
operator|.
name|add
argument_list|(
literal|" ResetInputs              "
argument_list|)
expr_stmt|;
name|tsks
operator|.
name|add
argument_list|(
literal|" ResetSystemErase         "
argument_list|)
expr_stmt|;
name|tsks
operator|.
name|add
argument_list|(
literal|" ResetSystemSoft          "
argument_list|)
expr_stmt|;
name|tsks
operator|.
name|add
argument_list|(
literal|" Search                   "
argument_list|)
expr_stmt|;
name|tsks
operator|.
name|add
argument_list|(
literal|" SearchTravRet            "
argument_list|)
expr_stmt|;
name|tsks
operator|.
name|add
argument_list|(
literal|" SearchTravRet(100.0)     "
argument_list|)
expr_stmt|;
name|tsks
operator|.
name|add
argument_list|(
literal|" SearchTrav               "
argument_list|)
expr_stmt|;
name|tsks
operator|.
name|add
argument_list|(
literal|" SearchTrav(50.0)         "
argument_list|)
expr_stmt|;
name|tsks
operator|.
name|add
argument_list|(
literal|" SetProp                  "
argument_list|)
expr_stmt|;
name|tsks
operator|.
name|add
argument_list|(
literal|" SetProp(name,value)      "
argument_list|)
expr_stmt|;
name|tsks
operator|.
name|add
argument_list|(
literal|" Warm                     "
argument_list|)
expr_stmt|;
comment|// if tasks.dir property is defined, look for additional tasks.
comment|// this somewhat covers tasks that would be added in the future, in case
comment|// the list above is not updated to cover them.
comment|// some tasks would be tested more than once this way, but that's ok.
name|String
name|tasksDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"tasks.dir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tasksDir
operator|!=
literal|null
condition|)
block|{
name|String
name|pkgPrefix
init|=
name|PerfTask
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
decl_stmt|;
name|String
name|taskNames
index|[]
init|=
operator|new
name|File
argument_list|(
name|tasksDir
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|taskNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|taskNames
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|endsWith
argument_list|(
literal|"Task.class"
argument_list|)
condition|)
continue|continue;
comment|// Task class file only
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|-
literal|6
argument_list|)
expr_stmt|;
name|Class
name|cls
init|=
name|Class
operator|.
name|forName
argument_list|(
name|pkgPrefix
operator|+
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|Modifier
operator|.
name|isAbstract
argument_list|(
name|cls
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|||
name|Modifier
operator|.
name|isInterface
argument_list|(
name|cls
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
continue|continue;
comment|// skip sbstract classes
if|if
condition|(
operator|!
name|PerfTask
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|cls
argument_list|)
condition|)
continue|continue;
comment|// not a task
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"Rep"
argument_list|)
operator|&&
name|name
operator|.
name|indexOf
argument_list|(
literal|"Pref"
argument_list|)
operator|>=
literal|0
condition|)
name|name
operator|+=
literal|" prefix"
expr_stmt|;
name|tsks
operator|.
name|add
argument_list|(
literal|" "
operator|+
name|name
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|String
index|[]
operator|)
name|tsks
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/**    * @param name test name    */
DECL|method|TestPerfTasksParse
specifier|public
name|TestPerfTasksParse
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the parsing of very simple tasks, for all tasks    */
DECL|method|testAllTasksSimpleParse
specifier|public
name|void
name|testAllTasksSimpleParse
parameter_list|()
block|{
name|doTestAllTasksSimpleParse
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the parsing of simple sequential sequences, for all tasks    */
DECL|method|testAllTasksSimpleParseSequntial
specifier|public
name|void
name|testAllTasksSimpleParseSequntial
parameter_list|()
block|{
name|doTestAllTasksSimpleParse
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the parsing of simple parallel sequences, for all tasks    */
DECL|method|testAllTasksSimpleParseParallel
specifier|public
name|void
name|testAllTasksSimpleParseParallel
parameter_list|()
block|{
name|doTestAllTasksSimpleParse
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// utility for simple parsing testing of all tasks.
DECL|method|doTestAllTasksSimpleParse
specifier|private
name|void
name|doTestAllTasksSimpleParse
parameter_list|(
name|boolean
name|parOrSeq
parameter_list|,
name|boolean
name|par
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|singleTaskAlgs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|testedTask
init|=
name|singleTaskAlgs
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|parOrSeq
condition|)
block|{
if|if
condition|(
name|par
condition|)
block|{
name|testedTask
operator|=
literal|"[ "
operator|+
name|testedTask
operator|+
literal|" ] : 2"
expr_stmt|;
block|}
else|else
block|{
name|testedTask
operator|=
literal|"{ "
operator|+
name|testedTask
operator|+
literal|" } : 3"
expr_stmt|;
block|}
block|}
try|try
block|{
name|String
name|algText
init|=
name|propPart
operator|+
name|INDENT
operator|+
name|testedTask
decl_stmt|;
name|logTstParsing
argument_list|(
name|algText
argument_list|)
expr_stmt|;
name|Benchmark
name|benchmark
init|=
operator|new
name|Benchmark
argument_list|(
operator|new
name|StringReader
argument_list|(
name|algText
argument_list|)
argument_list|)
decl_stmt|;
name|Algorithm
name|alg
init|=
name|benchmark
operator|.
name|getAlgorithm
argument_list|()
decl_stmt|;
name|ArrayList
name|algTasks
init|=
name|alg
operator|.
name|extractTasks
argument_list|()
decl_stmt|;
comment|// must find a task with this name in the algorithm
name|boolean
name|foundName
init|=
literal|false
decl_stmt|;
name|boolean
name|foundPar
init|=
literal|false
decl_stmt|;
name|String
name|theTask
init|=
name|singleTaskAlgs
index|[
name|i
index|]
operator|.
name|replaceAll
argument_list|(
literal|" +"
argument_list|,
literal|" "
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|algTasks
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PerfTask
name|task
init|=
operator|(
name|PerfTask
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|foundName
operator||=
operator|(
name|task
operator|.
name|toString
argument_list|()
operator|.
name|indexOf
argument_list|(
name|theTask
argument_list|)
operator|>=
literal|0
operator|)
expr_stmt|;
name|foundPar
operator||=
operator|(
name|task
operator|instanceof
name|TaskSequence
operator|&&
operator|(
operator|(
name|TaskSequence
operator|)
name|task
operator|)
operator|.
name|isParallel
argument_list|()
operator|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Task "
operator|+
name|testedTask
operator|+
literal|" was not found in "
operator|+
name|alg
operator|.
name|toString
argument_list|()
argument_list|,
name|foundName
argument_list|)
expr_stmt|;
if|if
condition|(
name|parOrSeq
condition|)
block|{
if|if
condition|(
name|par
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Task "
operator|+
name|testedTask
operator|+
literal|" was supposed to be parallel in "
operator|+
name|alg
operator|.
name|toString
argument_list|()
argument_list|,
name|foundPar
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
literal|"Task "
operator|+
name|testedTask
operator|+
literal|" was not supposed to be parallel in "
operator|+
name|alg
operator|.
name|toString
argument_list|()
argument_list|,
name|foundPar
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test the repetiotion parsing for parallel tasks    */
DECL|method|testParseParallelTaskSequenceRepetition
specifier|public
name|void
name|testParseParallelTaskSequenceRepetition
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|taskStr
init|=
literal|"AddDoc"
decl_stmt|;
name|String
name|parsedTasks
init|=
literal|"[ "
operator|+
name|taskStr
operator|+
literal|" ] : 1000"
decl_stmt|;
name|Benchmark
name|benchmark
init|=
operator|new
name|Benchmark
argument_list|(
operator|new
name|StringReader
argument_list|(
name|propPart
operator|+
name|parsedTasks
argument_list|)
argument_list|)
decl_stmt|;
name|Algorithm
name|alg
init|=
name|benchmark
operator|.
name|getAlgorithm
argument_list|()
decl_stmt|;
name|ArrayList
name|algTasks
init|=
name|alg
operator|.
name|extractTasks
argument_list|()
decl_stmt|;
name|boolean
name|foundAdd
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|algTasks
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PerfTask
name|task
init|=
operator|(
name|PerfTask
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|task
operator|.
name|toString
argument_list|()
operator|.
name|indexOf
argument_list|(
name|taskStr
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|foundAdd
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|task
operator|instanceof
name|TaskSequence
condition|)
block|{
name|assertEquals
argument_list|(
literal|"repetions should be 1000 for "
operator|+
name|parsedTasks
argument_list|,
literal|1000
argument_list|,
operator|(
operator|(
name|TaskSequence
operator|)
name|task
operator|)
operator|.
name|getRepetitions
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"sequence for "
operator|+
name|parsedTasks
operator|+
literal|" should be parallel!"
argument_list|,
operator|(
operator|(
name|TaskSequence
operator|)
name|task
operator|)
operator|.
name|isParallel
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Task "
operator|+
name|taskStr
operator|+
literal|" was not found in "
operator|+
name|alg
operator|.
name|toString
argument_list|()
argument_list|,
name|foundAdd
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test the repetiotion parsing for sequential  tasks    */
DECL|method|testParseTaskSequenceRepetition
specifier|public
name|void
name|testParseTaskSequenceRepetition
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|taskStr
init|=
literal|"AddDoc"
decl_stmt|;
name|String
name|parsedTasks
init|=
literal|"{ "
operator|+
name|taskStr
operator|+
literal|" } : 1000"
decl_stmt|;
name|Benchmark
name|benchmark
init|=
operator|new
name|Benchmark
argument_list|(
operator|new
name|StringReader
argument_list|(
name|propPart
operator|+
name|parsedTasks
argument_list|)
argument_list|)
decl_stmt|;
name|Algorithm
name|alg
init|=
name|benchmark
operator|.
name|getAlgorithm
argument_list|()
decl_stmt|;
name|ArrayList
name|algTasks
init|=
name|alg
operator|.
name|extractTasks
argument_list|()
decl_stmt|;
name|boolean
name|foundAdd
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|algTasks
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PerfTask
name|task
init|=
operator|(
name|PerfTask
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|task
operator|.
name|toString
argument_list|()
operator|.
name|indexOf
argument_list|(
name|taskStr
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|foundAdd
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|task
operator|instanceof
name|TaskSequence
condition|)
block|{
name|assertEquals
argument_list|(
literal|"repetions should be 1000 for "
operator|+
name|parsedTasks
argument_list|,
literal|1000
argument_list|,
operator|(
operator|(
name|TaskSequence
operator|)
name|task
operator|)
operator|.
name|getRepetitions
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"sequence for "
operator|+
name|parsedTasks
operator|+
literal|" should be sequential!"
argument_list|,
operator|(
operator|(
name|TaskSequence
operator|)
name|task
operator|)
operator|.
name|isParallel
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Task "
operator|+
name|taskStr
operator|+
literal|" was not found in "
operator|+
name|alg
operator|.
name|toString
argument_list|()
argument_list|,
name|foundAdd
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|logTstParsing
specifier|private
name|void
name|logTstParsing
parameter_list|(
name|String
name|txt
parameter_list|)
block|{
if|if
condition|(
operator|!
name|DEBUG
condition|)
return|return;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Test parsing of"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|txt
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
