begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.benchmark.byTask
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|tasks
operator|.
name|PerfTask
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|tasks
operator|.
name|TaskSequence
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|utils
operator|.
name|Algorithm
import|;
end_import
begin_comment
comment|/** Test very simply that perf tasks are parses as expected. */
end_comment
begin_class
DECL|class|TestPerfTasksParse
specifier|public
class|class
name|TestPerfTasksParse
extends|extends
name|TestCase
block|{
DECL|field|NEW_LINE
specifier|static
specifier|final
name|String
name|NEW_LINE
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
DECL|field|INDENT
specifier|static
specifier|final
name|String
name|INDENT
init|=
literal|"  "
decl_stmt|;
comment|// properties in effect in all tests here
DECL|field|propPart
specifier|static
specifier|final
name|String
name|propPart
init|=
name|INDENT
operator|+
literal|"directory=RAMDirectory"
operator|+
name|NEW_LINE
operator|+
name|INDENT
operator|+
literal|"print.props=false"
operator|+
name|NEW_LINE
decl_stmt|;
DECL|method|TestPerfTasksParse
specifier|public
name|TestPerfTasksParse
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/** Test the repetiotion parsing for parallel tasks */
DECL|method|testParseParallelTaskSequenceRepetition
specifier|public
name|void
name|testParseParallelTaskSequenceRepetition
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|taskStr
init|=
literal|"AddDoc"
decl_stmt|;
name|String
name|parsedTasks
init|=
literal|"[ "
operator|+
name|taskStr
operator|+
literal|" ] : 1000"
decl_stmt|;
name|Benchmark
name|benchmark
init|=
operator|new
name|Benchmark
argument_list|(
operator|new
name|StringReader
argument_list|(
name|propPart
operator|+
name|parsedTasks
argument_list|)
argument_list|)
decl_stmt|;
name|Algorithm
name|alg
init|=
name|benchmark
operator|.
name|getAlgorithm
argument_list|()
decl_stmt|;
name|ArrayList
name|algTasks
init|=
name|alg
operator|.
name|extractTasks
argument_list|()
decl_stmt|;
name|boolean
name|foundAdd
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|algTasks
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PerfTask
name|task
init|=
operator|(
name|PerfTask
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|task
operator|.
name|toString
argument_list|()
operator|.
name|indexOf
argument_list|(
name|taskStr
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|foundAdd
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|task
operator|instanceof
name|TaskSequence
condition|)
block|{
name|assertEquals
argument_list|(
literal|"repetions should be 1000 for "
operator|+
name|parsedTasks
argument_list|,
literal|1000
argument_list|,
operator|(
operator|(
name|TaskSequence
operator|)
name|task
operator|)
operator|.
name|getRepetitions
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"sequence for "
operator|+
name|parsedTasks
operator|+
literal|" should be parallel!"
argument_list|,
operator|(
operator|(
name|TaskSequence
operator|)
name|task
operator|)
operator|.
name|isParallel
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Task "
operator|+
name|taskStr
operator|+
literal|" was not found in "
operator|+
name|alg
operator|.
name|toString
argument_list|()
argument_list|,
name|foundAdd
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Test the repetiotion parsing for sequential  tasks */
DECL|method|testParseTaskSequenceRepetition
specifier|public
name|void
name|testParseTaskSequenceRepetition
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|taskStr
init|=
literal|"AddDoc"
decl_stmt|;
name|String
name|parsedTasks
init|=
literal|"{ "
operator|+
name|taskStr
operator|+
literal|" } : 1000"
decl_stmt|;
name|Benchmark
name|benchmark
init|=
operator|new
name|Benchmark
argument_list|(
operator|new
name|StringReader
argument_list|(
name|propPart
operator|+
name|parsedTasks
argument_list|)
argument_list|)
decl_stmt|;
name|Algorithm
name|alg
init|=
name|benchmark
operator|.
name|getAlgorithm
argument_list|()
decl_stmt|;
name|ArrayList
name|algTasks
init|=
name|alg
operator|.
name|extractTasks
argument_list|()
decl_stmt|;
name|boolean
name|foundAdd
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|algTasks
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PerfTask
name|task
init|=
operator|(
name|PerfTask
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|task
operator|.
name|toString
argument_list|()
operator|.
name|indexOf
argument_list|(
name|taskStr
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|foundAdd
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|task
operator|instanceof
name|TaskSequence
condition|)
block|{
name|assertEquals
argument_list|(
literal|"repetions should be 1000 for "
operator|+
name|parsedTasks
argument_list|,
literal|1000
argument_list|,
operator|(
operator|(
name|TaskSequence
operator|)
name|task
operator|)
operator|.
name|getRepetitions
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"sequence for "
operator|+
name|parsedTasks
operator|+
literal|" should be sequential!"
argument_list|,
operator|(
operator|(
name|TaskSequence
operator|)
name|task
operator|)
operator|.
name|isParallel
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Task "
operator|+
name|taskStr
operator|+
literal|" was not found in "
operator|+
name|alg
operator|.
name|toString
argument_list|()
argument_list|,
name|foundAdd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
