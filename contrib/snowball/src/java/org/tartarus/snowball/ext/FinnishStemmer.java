begin_unit
begin_comment
comment|// This file was generated automatically by the Snowball to Java compiler
end_comment
begin_package
DECL|package|org.tartarus.snowball.ext
package|package
name|org
operator|.
name|tartarus
operator|.
name|snowball
operator|.
name|ext
package|;
end_package
begin_import
import|import
name|org
operator|.
name|tartarus
operator|.
name|snowball
operator|.
name|SnowballProgram
import|;
end_import
begin_import
import|import
name|org
operator|.
name|tartarus
operator|.
name|snowball
operator|.
name|Among
import|;
end_import
begin_comment
comment|/**  * Generated class implementing code defined by a snowball script.  */
end_comment
begin_class
DECL|class|FinnishStemmer
specifier|public
class|class
name|FinnishStemmer
extends|extends
name|SnowballProgram
block|{
DECL|field|a_0
specifier|private
name|Among
name|a_0
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"pa"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"sti"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"kaan"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"han"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"kin"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"h\u00E4n"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"k\u00E4\u00E4n"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ko"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"p\u00E4"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"k\u00F6"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_1
specifier|private
name|Among
name|a_1
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"lla"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"na"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ssa"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ta"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"lta"
argument_list|,
literal|3
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"sta"
argument_list|,
literal|3
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_2
specifier|private
name|Among
name|a_2
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"ll\u00E4"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"n\u00E4"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ss\u00E4"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"t\u00E4"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"lt\u00E4"
argument_list|,
literal|3
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"st\u00E4"
argument_list|,
literal|3
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_3
specifier|private
name|Among
name|a_3
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"lle"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ine"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_4
specifier|private
name|Among
name|a_4
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"nsa"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"mme"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"nne"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ni"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"si"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"an"
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"en"
argument_list|,
operator|-
literal|1
argument_list|,
literal|6
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E4n"
argument_list|,
operator|-
literal|1
argument_list|,
literal|5
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ns\u00E4"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_5
specifier|private
name|Among
name|a_5
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"aa"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ee"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ii"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"oo"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"uu"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E4\u00E4"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00F6\u00F6"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_6
specifier|private
name|Among
name|a_6
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"a"
argument_list|,
operator|-
literal|1
argument_list|,
literal|8
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"lla"
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"na"
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ssa"
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ta"
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"lta"
argument_list|,
literal|4
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"sta"
argument_list|,
literal|4
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"tta"
argument_list|,
literal|4
argument_list|,
literal|9
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"lle"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ine"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ksi"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"n"
argument_list|,
operator|-
literal|1
argument_list|,
literal|7
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"han"
argument_list|,
literal|11
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"den"
argument_list|,
literal|11
argument_list|,
operator|-
literal|1
argument_list|,
literal|"r_VI"
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"seen"
argument_list|,
literal|11
argument_list|,
operator|-
literal|1
argument_list|,
literal|"r_LONG"
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"hen"
argument_list|,
literal|11
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"tten"
argument_list|,
literal|11
argument_list|,
operator|-
literal|1
argument_list|,
literal|"r_VI"
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"hin"
argument_list|,
literal|11
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"siin"
argument_list|,
literal|11
argument_list|,
operator|-
literal|1
argument_list|,
literal|"r_VI"
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"hon"
argument_list|,
literal|11
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"h\u00E4n"
argument_list|,
literal|11
argument_list|,
literal|5
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"h\u00F6n"
argument_list|,
literal|11
argument_list|,
literal|6
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E4"
argument_list|,
operator|-
literal|1
argument_list|,
literal|8
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ll\u00E4"
argument_list|,
literal|22
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"n\u00E4"
argument_list|,
literal|22
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ss\u00E4"
argument_list|,
literal|22
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"t\u00E4"
argument_list|,
literal|22
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"lt\u00E4"
argument_list|,
literal|26
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"st\u00E4"
argument_list|,
literal|26
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"tt\u00E4"
argument_list|,
literal|26
argument_list|,
literal|9
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_7
specifier|private
name|Among
name|a_7
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"eja"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"mma"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"imma"
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"mpa"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"impa"
argument_list|,
literal|3
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"mmi"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"immi"
argument_list|,
literal|5
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"mpi"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"impi"
argument_list|,
literal|7
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ej\u00E4"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"mm\u00E4"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"imm\u00E4"
argument_list|,
literal|10
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"mp\u00E4"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"imp\u00E4"
argument_list|,
literal|12
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_8
specifier|private
name|Among
name|a_8
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"i"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"j"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_9
specifier|private
name|Among
name|a_9
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"mma"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"imma"
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|g_AEI
specifier|private
specifier|static
specifier|final
name|char
name|g_AEI
index|[]
init|=
block|{
literal|17
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|8
block|}
decl_stmt|;
DECL|field|g_V1
specifier|private
specifier|static
specifier|final
name|char
name|g_V1
index|[]
init|=
block|{
literal|17
block|,
literal|65
block|,
literal|16
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|8
block|,
literal|0
block|,
literal|32
block|}
decl_stmt|;
DECL|field|g_V2
specifier|private
specifier|static
specifier|final
name|char
name|g_V2
index|[]
init|=
block|{
literal|17
block|,
literal|65
block|,
literal|16
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|8
block|,
literal|0
block|,
literal|32
block|}
decl_stmt|;
DECL|field|g_particle_end
specifier|private
specifier|static
specifier|final
name|char
name|g_particle_end
index|[]
init|=
block|{
literal|17
block|,
literal|97
block|,
literal|24
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|8
block|,
literal|0
block|,
literal|32
block|}
decl_stmt|;
DECL|field|B_ending_removed
specifier|private
name|boolean
name|B_ending_removed
decl_stmt|;
DECL|field|S_x
specifier|private
name|StringBuffer
name|S_x
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
DECL|field|I_p2
specifier|private
name|int
name|I_p2
decl_stmt|;
DECL|field|I_p1
specifier|private
name|int
name|I_p1
decl_stmt|;
DECL|method|copy_from
specifier|private
name|void
name|copy_from
parameter_list|(
name|FinnishStemmer
name|other
parameter_list|)
block|{
name|B_ending_removed
operator|=
name|other
operator|.
name|B_ending_removed
expr_stmt|;
name|S_x
operator|=
name|other
operator|.
name|S_x
expr_stmt|;
name|I_p2
operator|=
name|other
operator|.
name|I_p2
expr_stmt|;
name|I_p1
operator|=
name|other
operator|.
name|I_p1
expr_stmt|;
name|super
operator|.
name|copy_from
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
DECL|method|r_mark_regions
specifier|private
name|boolean
name|r_mark_regions
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
name|int
name|v_3
decl_stmt|;
comment|// (, line 41
name|I_p1
operator|=
name|limit
expr_stmt|;
name|I_p2
operator|=
name|limit
expr_stmt|;
comment|// goto, line 46
name|golab0
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_1
operator|=
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_V1
argument_list|,
literal|97
argument_list|,
literal|246
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab1
break|;
block|}
name|cursor
operator|=
name|v_1
expr_stmt|;
break|break
name|golab0
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_1
expr_stmt|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|// gopast, line 46
name|golab2
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab3
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|out_grouping
argument_list|(
name|g_V1
argument_list|,
literal|97
argument_list|,
literal|246
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab3
break|;
block|}
break|break
name|golab2
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|// setmark p1, line 46
name|I_p1
operator|=
name|cursor
expr_stmt|;
comment|// goto, line 47
name|golab4
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_3
operator|=
name|cursor
expr_stmt|;
name|lab5
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_V1
argument_list|,
literal|97
argument_list|,
literal|246
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab5
break|;
block|}
name|cursor
operator|=
name|v_3
expr_stmt|;
break|break
name|golab4
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_3
expr_stmt|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|// gopast, line 47
name|golab6
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab7
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|out_grouping
argument_list|(
name|g_V1
argument_list|,
literal|97
argument_list|,
literal|246
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab7
break|;
block|}
break|break
name|golab6
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|// setmark p2, line 47
name|I_p2
operator|=
name|cursor
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_R2
specifier|private
name|boolean
name|r_R2
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
name|I_p2
operator|<=
name|cursor
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_particle_etc
specifier|private
name|boolean
name|r_particle_etc
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
comment|// (, line 54
comment|// setlimit, line 55
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// tomark, line 55
if|if
condition|(
name|cursor
operator|<
name|I_p1
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|I_p1
expr_stmt|;
name|v_2
operator|=
name|limit_backward
expr_stmt|;
name|limit_backward
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
comment|// (, line 55
comment|// [, line 55
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 55
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
name|limit_backward
operator|=
name|v_2
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ], line 55
name|bra
operator|=
name|cursor
expr_stmt|;
name|limit_backward
operator|=
name|v_2
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 62
if|if
condition|(
operator|!
operator|(
name|in_grouping_b
argument_list|(
name|g_particle_end
argument_list|,
literal|97
argument_list|,
literal|246
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
case|case
literal|2
case|:
comment|// (, line 64
comment|// call R2, line 64
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
block|}
comment|// delete, line 66
name|slice_del
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_possessive
specifier|private
name|boolean
name|r_possessive
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_3
decl_stmt|;
comment|// (, line 68
comment|// setlimit, line 69
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// tomark, line 69
if|if
condition|(
name|cursor
operator|<
name|I_p1
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|I_p1
expr_stmt|;
name|v_2
operator|=
name|limit_backward
expr_stmt|;
name|limit_backward
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
comment|// (, line 69
comment|// [, line 69
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 69
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_4
argument_list|,
literal|9
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
name|limit_backward
operator|=
name|v_2
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ], line 69
name|bra
operator|=
name|cursor
expr_stmt|;
name|limit_backward
operator|=
name|v_2
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 72
comment|// not, line 72
block|{
name|v_3
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab0
label|:
do|do
block|{
comment|// literal, line 72
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"k"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab0
break|;
block|}
return|return
literal|false
return|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
block|}
comment|// delete, line 72
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 74
comment|// delete, line 74
name|slice_del
argument_list|()
expr_stmt|;
comment|// [, line 74
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 74
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|3
argument_list|,
literal|"kse"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ], line 74
name|bra
operator|=
name|cursor
expr_stmt|;
comment|//<-, line 74
name|slice_from
argument_list|(
literal|"ksi"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// (, line 78
comment|// delete, line 78
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// (, line 81
comment|// among, line 81
if|if
condition|(
name|find_among_b
argument_list|(
name|a_1
argument_list|,
literal|6
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 81
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|5
case|:
comment|// (, line 83
comment|// among, line 83
if|if
condition|(
name|find_among_b
argument_list|(
name|a_2
argument_list|,
literal|6
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 84
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|6
case|:
comment|// (, line 86
comment|// among, line 86
if|if
condition|(
name|find_among_b
argument_list|(
name|a_3
argument_list|,
literal|2
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 86
name|slice_del
argument_list|()
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_LONG
specifier|private
name|boolean
name|r_LONG
parameter_list|()
block|{
comment|// among, line 91
if|if
condition|(
name|find_among_b
argument_list|(
name|a_5
argument_list|,
literal|7
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_VI
specifier|private
name|boolean
name|r_VI
parameter_list|()
block|{
comment|// (, line 93
comment|// literal, line 93
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"i"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|in_grouping_b
argument_list|(
name|g_V2
argument_list|,
literal|97
argument_list|,
literal|246
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_case_ending
specifier|private
name|boolean
name|r_case_ending
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_3
decl_stmt|;
name|int
name|v_4
decl_stmt|;
name|int
name|v_5
decl_stmt|;
comment|// (, line 95
comment|// setlimit, line 96
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// tomark, line 96
if|if
condition|(
name|cursor
operator|<
name|I_p1
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|I_p1
expr_stmt|;
name|v_2
operator|=
name|limit_backward
expr_stmt|;
name|limit_backward
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
comment|// (, line 96
comment|// [, line 96
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 96
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_6
argument_list|,
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
name|limit_backward
operator|=
name|v_2
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ], line 96
name|bra
operator|=
name|cursor
expr_stmt|;
name|limit_backward
operator|=
name|v_2
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 98
comment|// literal, line 98
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"a"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
case|case
literal|2
case|:
comment|// (, line 99
comment|// literal, line 99
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"e"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
case|case
literal|3
case|:
comment|// (, line 100
comment|// literal, line 100
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"i"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
case|case
literal|4
case|:
comment|// (, line 101
comment|// literal, line 101
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"o"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
case|case
literal|5
case|:
comment|// (, line 102
comment|// literal, line 102
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"\u00E4"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
case|case
literal|6
case|:
comment|// (, line 103
comment|// literal, line 103
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"\u00F6"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
case|case
literal|7
case|:
comment|// (, line 111
comment|// try, line 111
name|v_3
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab0
label|:
do|do
block|{
comment|// (, line 111
comment|// and, line 113
name|v_4
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// or, line 112
name|lab1
label|:
do|do
block|{
name|v_5
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab2
label|:
do|do
block|{
comment|// call LONG, line 111
if|if
condition|(
operator|!
name|r_LONG
argument_list|()
condition|)
block|{
break|break
name|lab2
break|;
block|}
break|break
name|lab1
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_5
expr_stmt|;
comment|// literal, line 112
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|2
argument_list|,
literal|"ie"
argument_list|)
operator|)
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
break|break
name|lab0
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_4
expr_stmt|;
comment|// next, line 113
if|if
condition|(
name|cursor
operator|<=
name|limit_backward
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
break|break
name|lab0
break|;
block|}
name|cursor
operator|--
expr_stmt|;
comment|// ], line 113
name|bra
operator|=
name|cursor
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break;
case|case
literal|8
case|:
comment|// (, line 119
if|if
condition|(
operator|!
operator|(
name|in_grouping_b
argument_list|(
name|g_V1
argument_list|,
literal|97
argument_list|,
literal|246
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|out_grouping_b
argument_list|(
name|g_V1
argument_list|,
literal|97
argument_list|,
literal|246
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
case|case
literal|9
case|:
comment|// (, line 121
comment|// literal, line 121
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"e"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
block|}
comment|// delete, line 138
name|slice_del
argument_list|()
expr_stmt|;
comment|// set ending_removed, line 139
name|B_ending_removed
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_other_endings
specifier|private
name|boolean
name|r_other_endings
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_3
decl_stmt|;
comment|// (, line 141
comment|// setlimit, line 142
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// tomark, line 142
if|if
condition|(
name|cursor
operator|<
name|I_p2
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|I_p2
expr_stmt|;
name|v_2
operator|=
name|limit_backward
expr_stmt|;
name|limit_backward
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
comment|// (, line 142
comment|// [, line 142
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 142
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_7
argument_list|,
literal|14
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
name|limit_backward
operator|=
name|v_2
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ], line 142
name|bra
operator|=
name|cursor
expr_stmt|;
name|limit_backward
operator|=
name|v_2
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 146
comment|// not, line 146
block|{
name|v_3
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab0
label|:
do|do
block|{
comment|// literal, line 146
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|2
argument_list|,
literal|"po"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab0
break|;
block|}
return|return
literal|false
return|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
block|}
break|break;
block|}
comment|// delete, line 151
name|slice_del
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_i_plural
specifier|private
name|boolean
name|r_i_plural
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
comment|// (, line 153
comment|// setlimit, line 154
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// tomark, line 154
if|if
condition|(
name|cursor
operator|<
name|I_p1
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|I_p1
expr_stmt|;
name|v_2
operator|=
name|limit_backward
expr_stmt|;
name|limit_backward
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
comment|// (, line 154
comment|// [, line 154
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 154
if|if
condition|(
name|find_among_b
argument_list|(
name|a_8
argument_list|,
literal|2
argument_list|)
operator|==
literal|0
condition|)
block|{
name|limit_backward
operator|=
name|v_2
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ], line 154
name|bra
operator|=
name|cursor
expr_stmt|;
name|limit_backward
operator|=
name|v_2
expr_stmt|;
comment|// delete, line 158
name|slice_del
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_t_plural
specifier|private
name|boolean
name|r_t_plural
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_3
decl_stmt|;
name|int
name|v_4
decl_stmt|;
name|int
name|v_5
decl_stmt|;
name|int
name|v_6
decl_stmt|;
comment|// (, line 160
comment|// setlimit, line 161
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// tomark, line 161
if|if
condition|(
name|cursor
operator|<
name|I_p1
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|I_p1
expr_stmt|;
name|v_2
operator|=
name|limit_backward
expr_stmt|;
name|limit_backward
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
comment|// (, line 161
comment|// [, line 162
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 162
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"t"
argument_list|)
operator|)
condition|)
block|{
name|limit_backward
operator|=
name|v_2
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ], line 162
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// test, line 162
name|v_3
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|in_grouping_b
argument_list|(
name|g_V1
argument_list|,
literal|97
argument_list|,
literal|246
argument_list|)
operator|)
condition|)
block|{
name|limit_backward
operator|=
name|v_2
expr_stmt|;
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
comment|// delete, line 163
name|slice_del
argument_list|()
expr_stmt|;
name|limit_backward
operator|=
name|v_2
expr_stmt|;
comment|// setlimit, line 165
name|v_4
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// tomark, line 165
if|if
condition|(
name|cursor
operator|<
name|I_p2
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|I_p2
expr_stmt|;
name|v_5
operator|=
name|limit_backward
expr_stmt|;
name|limit_backward
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|limit
operator|-
name|v_4
expr_stmt|;
comment|// (, line 165
comment|// [, line 165
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 165
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_9
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
name|limit_backward
operator|=
name|v_5
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ], line 165
name|bra
operator|=
name|cursor
expr_stmt|;
name|limit_backward
operator|=
name|v_5
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 167
comment|// not, line 167
block|{
name|v_6
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab0
label|:
do|do
block|{
comment|// literal, line 167
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|2
argument_list|,
literal|"po"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab0
break|;
block|}
return|return
literal|false
return|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_6
expr_stmt|;
block|}
break|break;
block|}
comment|// delete, line 170
name|slice_del
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_tidy
specifier|private
name|boolean
name|r_tidy
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_3
decl_stmt|;
name|int
name|v_4
decl_stmt|;
name|int
name|v_5
decl_stmt|;
name|int
name|v_6
decl_stmt|;
name|int
name|v_7
decl_stmt|;
name|int
name|v_8
decl_stmt|;
name|int
name|v_9
decl_stmt|;
comment|// (, line 172
comment|// setlimit, line 173
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// tomark, line 173
if|if
condition|(
name|cursor
operator|<
name|I_p1
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|I_p1
expr_stmt|;
name|v_2
operator|=
name|limit_backward
expr_stmt|;
name|limit_backward
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
comment|// (, line 173
comment|// do, line 174
name|v_3
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab0
label|:
do|do
block|{
comment|// (, line 174
comment|// and, line 174
name|v_4
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// call LONG, line 174
if|if
condition|(
operator|!
name|r_LONG
argument_list|()
condition|)
block|{
break|break
name|lab0
break|;
block|}
name|cursor
operator|=
name|limit
operator|-
name|v_4
expr_stmt|;
comment|// (, line 174
comment|// [, line 174
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// next, line 174
if|if
condition|(
name|cursor
operator|<=
name|limit_backward
condition|)
block|{
break|break
name|lab0
break|;
block|}
name|cursor
operator|--
expr_stmt|;
comment|// ], line 174
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// delete, line 174
name|slice_del
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
comment|// do, line 175
name|v_5
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
comment|// (, line 175
comment|// [, line 175
name|ket
operator|=
name|cursor
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|in_grouping_b
argument_list|(
name|g_AEI
argument_list|,
literal|97
argument_list|,
literal|228
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab1
break|;
block|}
comment|// ], line 175
name|bra
operator|=
name|cursor
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|out_grouping_b
argument_list|(
name|g_V1
argument_list|,
literal|97
argument_list|,
literal|246
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab1
break|;
block|}
comment|// delete, line 175
name|slice_del
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_5
expr_stmt|;
comment|// do, line 176
name|v_6
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab2
label|:
do|do
block|{
comment|// (, line 176
comment|// [, line 176
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 176
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"j"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab2
break|;
block|}
comment|// ], line 176
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// or, line 176
name|lab3
label|:
do|do
block|{
name|v_7
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab4
label|:
do|do
block|{
comment|// literal, line 176
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"o"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab4
break|;
block|}
break|break
name|lab3
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_7
expr_stmt|;
comment|// literal, line 176
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"u"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab2
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
comment|// delete, line 176
name|slice_del
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_6
expr_stmt|;
comment|// do, line 177
name|v_8
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab5
label|:
do|do
block|{
comment|// (, line 177
comment|// [, line 177
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 177
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"o"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab5
break|;
block|}
comment|// ], line 177
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 177
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"j"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab5
break|;
block|}
comment|// delete, line 177
name|slice_del
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_8
expr_stmt|;
name|limit_backward
operator|=
name|v_2
expr_stmt|;
comment|// goto, line 179
name|golab6
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_9
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab7
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|out_grouping_b
argument_list|(
name|g_V1
argument_list|,
literal|97
argument_list|,
literal|246
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab7
break|;
block|}
name|cursor
operator|=
name|limit
operator|-
name|v_9
expr_stmt|;
break|break
name|golab6
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_9
expr_stmt|;
if|if
condition|(
name|cursor
operator|<=
name|limit_backward
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|--
expr_stmt|;
block|}
comment|// [, line 179
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// next, line 179
if|if
condition|(
name|cursor
operator|<=
name|limit_backward
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|--
expr_stmt|;
comment|// ], line 179
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// -> x, line 179
name|S_x
operator|=
name|slice_to
argument_list|(
name|S_x
argument_list|)
expr_stmt|;
comment|// name x, line 179
if|if
condition|(
operator|!
operator|(
name|eq_v_b
argument_list|(
name|S_x
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 179
name|slice_del
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|stem
specifier|public
name|boolean
name|stem
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_3
decl_stmt|;
name|int
name|v_4
decl_stmt|;
name|int
name|v_5
decl_stmt|;
name|int
name|v_6
decl_stmt|;
name|int
name|v_7
decl_stmt|;
name|int
name|v_8
decl_stmt|;
name|int
name|v_9
decl_stmt|;
comment|// (, line 183
comment|// do, line 185
name|v_1
operator|=
name|cursor
expr_stmt|;
name|lab0
label|:
do|do
block|{
comment|// call mark_regions, line 185
if|if
condition|(
operator|!
name|r_mark_regions
argument_list|()
condition|)
block|{
break|break
name|lab0
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_1
expr_stmt|;
comment|// unset ending_removed, line 186
name|B_ending_removed
operator|=
literal|false
expr_stmt|;
comment|// backwards, line 187
name|limit_backward
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|limit
expr_stmt|;
comment|// (, line 187
comment|// do, line 188
name|v_2
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
comment|// call particle_etc, line 188
if|if
condition|(
operator|!
name|r_particle_etc
argument_list|()
condition|)
block|{
break|break
name|lab1
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_2
expr_stmt|;
comment|// do, line 189
name|v_3
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab2
label|:
do|do
block|{
comment|// call possessive, line 189
if|if
condition|(
operator|!
name|r_possessive
argument_list|()
condition|)
block|{
break|break
name|lab2
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
comment|// do, line 190
name|v_4
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab3
label|:
do|do
block|{
comment|// call case_ending, line 190
if|if
condition|(
operator|!
name|r_case_ending
argument_list|()
condition|)
block|{
break|break
name|lab3
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_4
expr_stmt|;
comment|// do, line 191
name|v_5
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab4
label|:
do|do
block|{
comment|// call other_endings, line 191
if|if
condition|(
operator|!
name|r_other_endings
argument_list|()
condition|)
block|{
break|break
name|lab4
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_5
expr_stmt|;
comment|// or, line 192
name|lab5
label|:
do|do
block|{
name|v_6
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab6
label|:
do|do
block|{
comment|// (, line 192
comment|// Boolean test ending_removed, line 192
if|if
condition|(
operator|!
operator|(
name|B_ending_removed
operator|)
condition|)
block|{
break|break
name|lab6
break|;
block|}
comment|// do, line 192
name|v_7
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab7
label|:
do|do
block|{
comment|// call i_plural, line 192
if|if
condition|(
operator|!
name|r_i_plural
argument_list|()
condition|)
block|{
break|break
name|lab7
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_7
expr_stmt|;
break|break
name|lab5
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_6
expr_stmt|;
comment|// do, line 192
name|v_8
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab8
label|:
do|do
block|{
comment|// call t_plural, line 192
if|if
condition|(
operator|!
name|r_t_plural
argument_list|()
condition|)
block|{
break|break
name|lab8
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_8
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
comment|// do, line 193
name|v_9
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab9
label|:
do|do
block|{
comment|// call tidy, line 193
if|if
condition|(
operator|!
name|r_tidy
argument_list|()
condition|)
block|{
break|break
name|lab9
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_9
expr_stmt|;
name|cursor
operator|=
name|limit_backward
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
