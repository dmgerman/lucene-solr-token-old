begin_unit
begin_comment
comment|// This file was generated automatically by the Snowball to Java compiler
end_comment
begin_package
DECL|package|org.tartarus.snowball.ext
package|package
name|org
operator|.
name|tartarus
operator|.
name|snowball
operator|.
name|ext
package|;
end_package
begin_import
import|import
name|org
operator|.
name|tartarus
operator|.
name|snowball
operator|.
name|SnowballProgram
import|;
end_import
begin_import
import|import
name|org
operator|.
name|tartarus
operator|.
name|snowball
operator|.
name|Among
import|;
end_import
begin_comment
comment|/**  * Generated class implementing code defined by a snowball script.  */
end_comment
begin_class
DECL|class|PorterStemmer
specifier|public
class|class
name|PorterStemmer
extends|extends
name|SnowballProgram
block|{
DECL|field|a_0
specifier|private
name|Among
name|a_0
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"s"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ies"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"sses"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ss"
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_1
specifier|private
name|Among
name|a_1
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|""
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"bb"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"dd"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ff"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"gg"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"bl"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"mm"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"nn"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"pp"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"rr"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"at"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"tt"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"iz"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_2
specifier|private
name|Among
name|a_2
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"ed"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"eed"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ing"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_3
specifier|private
name|Among
name|a_3
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"anci"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"enci"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"abli"
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"eli"
argument_list|,
operator|-
literal|1
argument_list|,
literal|6
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"alli"
argument_list|,
operator|-
literal|1
argument_list|,
literal|9
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ousli"
argument_list|,
operator|-
literal|1
argument_list|,
literal|12
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"entli"
argument_list|,
operator|-
literal|1
argument_list|,
literal|5
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"aliti"
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"biliti"
argument_list|,
operator|-
literal|1
argument_list|,
literal|14
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"iviti"
argument_list|,
operator|-
literal|1
argument_list|,
literal|13
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"tional"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ational"
argument_list|,
literal|10
argument_list|,
literal|8
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"alism"
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ation"
argument_list|,
operator|-
literal|1
argument_list|,
literal|8
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ization"
argument_list|,
literal|13
argument_list|,
literal|7
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"izer"
argument_list|,
operator|-
literal|1
argument_list|,
literal|7
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ator"
argument_list|,
operator|-
literal|1
argument_list|,
literal|8
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"iveness"
argument_list|,
operator|-
literal|1
argument_list|,
literal|13
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"fulness"
argument_list|,
operator|-
literal|1
argument_list|,
literal|11
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ousness"
argument_list|,
operator|-
literal|1
argument_list|,
literal|12
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_4
specifier|private
name|Among
name|a_4
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"icate"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ative"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"alize"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"iciti"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ical"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ful"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ness"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_5
specifier|private
name|Among
name|a_5
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"ic"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ance"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ence"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"able"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ible"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ate"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ive"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ize"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"iti"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"al"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ism"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ion"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"er"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ous"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ant"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ent"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ment"
argument_list|,
literal|15
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ement"
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ou"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|g_v
specifier|private
specifier|static
specifier|final
name|char
name|g_v
index|[]
init|=
block|{
literal|17
block|,
literal|65
block|,
literal|16
block|,
literal|1
block|}
decl_stmt|;
DECL|field|g_v_WXY
specifier|private
specifier|static
specifier|final
name|char
name|g_v_WXY
index|[]
init|=
block|{
literal|1
block|,
literal|17
block|,
literal|65
block|,
literal|208
block|,
literal|1
block|}
decl_stmt|;
DECL|field|B_Y_found
specifier|private
name|boolean
name|B_Y_found
decl_stmt|;
DECL|field|I_p2
specifier|private
name|int
name|I_p2
decl_stmt|;
DECL|field|I_p1
specifier|private
name|int
name|I_p1
decl_stmt|;
DECL|method|copy_from
specifier|private
name|void
name|copy_from
parameter_list|(
name|PorterStemmer
name|other
parameter_list|)
block|{
name|B_Y_found
operator|=
name|other
operator|.
name|B_Y_found
expr_stmt|;
name|I_p2
operator|=
name|other
operator|.
name|I_p2
expr_stmt|;
name|I_p1
operator|=
name|other
operator|.
name|I_p1
expr_stmt|;
name|super
operator|.
name|copy_from
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
DECL|method|r_shortv
specifier|private
name|boolean
name|r_shortv
parameter_list|()
block|{
comment|// (, line 19
if|if
condition|(
operator|!
operator|(
name|out_grouping_b
argument_list|(
name|g_v_WXY
argument_list|,
literal|89
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|in_grouping_b
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|out_grouping_b
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_R1
specifier|private
name|boolean
name|r_R1
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
name|I_p1
operator|<=
name|cursor
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_R2
specifier|private
name|boolean
name|r_R2
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
name|I_p2
operator|<=
name|cursor
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_Step_1a
specifier|private
name|boolean
name|r_Step_1a
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
comment|// (, line 24
comment|// [, line 25
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 25
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ], line 25
name|bra
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 26
comment|//<-, line 26
name|slice_from
argument_list|(
literal|"ss"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 27
comment|//<-, line 27
name|slice_from
argument_list|(
literal|"i"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// (, line 29
comment|// delete, line 29
name|slice_del
argument_list|()
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_Step_1b
specifier|private
name|boolean
name|r_Step_1b
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
name|int
name|v_1
decl_stmt|;
name|int
name|v_3
decl_stmt|;
name|int
name|v_4
decl_stmt|;
comment|// (, line 33
comment|// [, line 34
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 34
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ], line 34
name|bra
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 35
comment|// call R1, line 35
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//<-, line 35
name|slice_from
argument_list|(
literal|"ee"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 37
comment|// test, line 38
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// gopast, line 38
name|golab0
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab1
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|in_grouping_b
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab1
break|;
block|}
break|break
name|golab0
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|cursor
operator|<=
name|limit_backward
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|--
expr_stmt|;
block|}
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
comment|// delete, line 38
name|slice_del
argument_list|()
expr_stmt|;
comment|// test, line 39
name|v_3
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// substring, line 39
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_1
argument_list|,
literal|13
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 41
comment|//<+, line 41
block|{
name|int
name|c
init|=
name|cursor
decl_stmt|;
name|insert
argument_list|(
name|cursor
argument_list|,
name|cursor
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|c
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// (, line 44
comment|// [, line 44
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// next, line 44
if|if
condition|(
name|cursor
operator|<=
name|limit_backward
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|--
expr_stmt|;
comment|// ], line 44
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// delete, line 44
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// (, line 45
comment|// atmark, line 45
if|if
condition|(
name|cursor
operator|!=
name|I_p1
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// test, line 45
name|v_4
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// call shortv, line 45
if|if
condition|(
operator|!
name|r_shortv
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|limit
operator|-
name|v_4
expr_stmt|;
comment|//<+, line 45
block|{
name|int
name|c
init|=
name|cursor
decl_stmt|;
name|insert
argument_list|(
name|cursor
argument_list|,
name|cursor
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|c
expr_stmt|;
block|}
break|break;
block|}
break|break;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_Step_1c
specifier|private
name|boolean
name|r_Step_1c
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
comment|// (, line 51
comment|// [, line 52
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// or, line 52
name|lab0
label|:
do|do
block|{
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
comment|// literal, line 52
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"y"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab1
break|;
block|}
break|break
name|lab0
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
comment|// literal, line 52
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"Y"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
comment|// ], line 52
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// gopast, line 53
name|golab2
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab3
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|in_grouping_b
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab3
break|;
block|}
break|break
name|golab2
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|cursor
operator|<=
name|limit_backward
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|--
expr_stmt|;
block|}
comment|//<-, line 54
name|slice_from
argument_list|(
literal|"i"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_Step_2
specifier|private
name|boolean
name|r_Step_2
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
comment|// (, line 57
comment|// [, line 58
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 58
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_3
argument_list|,
literal|20
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ], line 58
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// call R1, line 58
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 59
comment|//<-, line 59
name|slice_from
argument_list|(
literal|"tion"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 60
comment|//<-, line 60
name|slice_from
argument_list|(
literal|"ence"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// (, line 61
comment|//<-, line 61
name|slice_from
argument_list|(
literal|"ance"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// (, line 62
comment|//<-, line 62
name|slice_from
argument_list|(
literal|"able"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
comment|// (, line 63
comment|//<-, line 63
name|slice_from
argument_list|(
literal|"ent"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
comment|// (, line 64
comment|//<-, line 64
name|slice_from
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
comment|// (, line 66
comment|//<-, line 66
name|slice_from
argument_list|(
literal|"ize"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|8
case|:
comment|// (, line 68
comment|//<-, line 68
name|slice_from
argument_list|(
literal|"ate"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|9
case|:
comment|// (, line 69
comment|//<-, line 69
name|slice_from
argument_list|(
literal|"al"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|10
case|:
comment|// (, line 71
comment|//<-, line 71
name|slice_from
argument_list|(
literal|"al"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|11
case|:
comment|// (, line 72
comment|//<-, line 72
name|slice_from
argument_list|(
literal|"ful"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|12
case|:
comment|// (, line 74
comment|//<-, line 74
name|slice_from
argument_list|(
literal|"ous"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|13
case|:
comment|// (, line 76
comment|//<-, line 76
name|slice_from
argument_list|(
literal|"ive"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|14
case|:
comment|// (, line 77
comment|//<-, line 77
name|slice_from
argument_list|(
literal|"ble"
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_Step_3
specifier|private
name|boolean
name|r_Step_3
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
comment|// (, line 81
comment|// [, line 82
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 82
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_4
argument_list|,
literal|7
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ], line 82
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// call R1, line 82
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 83
comment|//<-, line 83
name|slice_from
argument_list|(
literal|"al"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 85
comment|//<-, line 85
name|slice_from
argument_list|(
literal|"ic"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// (, line 87
comment|// delete, line 87
name|slice_del
argument_list|()
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_Step_4
specifier|private
name|boolean
name|r_Step_4
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
name|int
name|v_1
decl_stmt|;
comment|// (, line 91
comment|// [, line 92
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 92
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_5
argument_list|,
literal|19
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ], line 92
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// call R2, line 92
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 95
comment|// delete, line 95
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 96
comment|// or, line 96
name|lab0
label|:
do|do
block|{
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
comment|// literal, line 96
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"s"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab1
break|;
block|}
break|break
name|lab0
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
comment|// literal, line 96
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"t"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
comment|// delete, line 96
name|slice_del
argument_list|()
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_Step_5a
specifier|private
name|boolean
name|r_Step_5a
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
comment|// (, line 100
comment|// [, line 101
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 101
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"e"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ], line 101
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// or, line 102
name|lab0
label|:
do|do
block|{
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
comment|// call R2, line 102
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
break|break
name|lab1
break|;
block|}
break|break
name|lab0
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
comment|// (, line 102
comment|// call R1, line 102
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// not, line 102
block|{
name|v_2
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab2
label|:
do|do
block|{
comment|// call shortv, line 102
if|if
condition|(
operator|!
name|r_shortv
argument_list|()
condition|)
block|{
break|break
name|lab2
break|;
block|}
return|return
literal|false
return|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_2
expr_stmt|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
comment|// delete, line 103
name|slice_del
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_Step_5b
specifier|private
name|boolean
name|r_Step_5b
parameter_list|()
block|{
comment|// (, line 106
comment|// [, line 107
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 107
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"l"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ], line 107
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// call R2, line 108
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// literal, line 108
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"l"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 109
name|slice_del
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|stem
specifier|public
name|boolean
name|stem
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_3
decl_stmt|;
name|int
name|v_4
decl_stmt|;
name|int
name|v_5
decl_stmt|;
name|int
name|v_10
decl_stmt|;
name|int
name|v_11
decl_stmt|;
name|int
name|v_12
decl_stmt|;
name|int
name|v_13
decl_stmt|;
name|int
name|v_14
decl_stmt|;
name|int
name|v_15
decl_stmt|;
name|int
name|v_16
decl_stmt|;
name|int
name|v_17
decl_stmt|;
name|int
name|v_18
decl_stmt|;
name|int
name|v_19
decl_stmt|;
name|int
name|v_20
decl_stmt|;
comment|// (, line 113
comment|// unset Y_found, line 115
name|B_Y_found
operator|=
literal|false
expr_stmt|;
comment|// do, line 116
name|v_1
operator|=
name|cursor
expr_stmt|;
name|lab0
label|:
do|do
block|{
comment|// (, line 116
comment|// [, line 116
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 116
if|if
condition|(
operator|!
operator|(
name|eq_s
argument_list|(
literal|1
argument_list|,
literal|"y"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab0
break|;
block|}
comment|// ], line 116
name|ket
operator|=
name|cursor
expr_stmt|;
comment|//<-, line 116
name|slice_from
argument_list|(
literal|"Y"
argument_list|)
expr_stmt|;
comment|// set Y_found, line 116
name|B_Y_found
operator|=
literal|true
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_1
expr_stmt|;
comment|// do, line 117
name|v_2
operator|=
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
comment|// repeat, line 117
name|replab2
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_3
operator|=
name|cursor
expr_stmt|;
name|lab3
label|:
do|do
block|{
comment|// (, line 117
comment|// goto, line 117
name|golab4
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_4
operator|=
name|cursor
expr_stmt|;
name|lab5
label|:
do|do
block|{
comment|// (, line 117
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab5
break|;
block|}
comment|// [, line 117
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 117
if|if
condition|(
operator|!
operator|(
name|eq_s
argument_list|(
literal|1
argument_list|,
literal|"y"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab5
break|;
block|}
comment|// ], line 117
name|ket
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|v_4
expr_stmt|;
break|break
name|golab4
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_4
expr_stmt|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab3
break|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|//<-, line 117
name|slice_from
argument_list|(
literal|"Y"
argument_list|)
expr_stmt|;
comment|// set Y_found, line 117
name|B_Y_found
operator|=
literal|true
expr_stmt|;
continue|continue
name|replab2
continue|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_3
expr_stmt|;
break|break
name|replab2
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_2
expr_stmt|;
name|I_p1
operator|=
name|limit
expr_stmt|;
name|I_p2
operator|=
name|limit
expr_stmt|;
comment|// do, line 121
name|v_5
operator|=
name|cursor
expr_stmt|;
name|lab6
label|:
do|do
block|{
comment|// (, line 121
comment|// gopast, line 122
name|golab7
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab8
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab8
break|;
block|}
break|break
name|golab7
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab6
break|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|// gopast, line 122
name|golab9
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab10
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|out_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab10
break|;
block|}
break|break
name|golab9
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab6
break|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|// setmark p1, line 122
name|I_p1
operator|=
name|cursor
expr_stmt|;
comment|// gopast, line 123
name|golab11
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab12
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab12
break|;
block|}
break|break
name|golab11
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab6
break|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|// gopast, line 123
name|golab13
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab14
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|out_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab14
break|;
block|}
break|break
name|golab13
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab6
break|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|// setmark p2, line 123
name|I_p2
operator|=
name|cursor
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_5
expr_stmt|;
comment|// backwards, line 126
name|limit_backward
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|limit
expr_stmt|;
comment|// (, line 126
comment|// do, line 127
name|v_10
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab15
label|:
do|do
block|{
comment|// call Step_1a, line 127
if|if
condition|(
operator|!
name|r_Step_1a
argument_list|()
condition|)
block|{
break|break
name|lab15
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_10
expr_stmt|;
comment|// do, line 128
name|v_11
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab16
label|:
do|do
block|{
comment|// call Step_1b, line 128
if|if
condition|(
operator|!
name|r_Step_1b
argument_list|()
condition|)
block|{
break|break
name|lab16
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_11
expr_stmt|;
comment|// do, line 129
name|v_12
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab17
label|:
do|do
block|{
comment|// call Step_1c, line 129
if|if
condition|(
operator|!
name|r_Step_1c
argument_list|()
condition|)
block|{
break|break
name|lab17
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_12
expr_stmt|;
comment|// do, line 130
name|v_13
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab18
label|:
do|do
block|{
comment|// call Step_2, line 130
if|if
condition|(
operator|!
name|r_Step_2
argument_list|()
condition|)
block|{
break|break
name|lab18
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_13
expr_stmt|;
comment|// do, line 131
name|v_14
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab19
label|:
do|do
block|{
comment|// call Step_3, line 131
if|if
condition|(
operator|!
name|r_Step_3
argument_list|()
condition|)
block|{
break|break
name|lab19
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_14
expr_stmt|;
comment|// do, line 132
name|v_15
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab20
label|:
do|do
block|{
comment|// call Step_4, line 132
if|if
condition|(
operator|!
name|r_Step_4
argument_list|()
condition|)
block|{
break|break
name|lab20
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_15
expr_stmt|;
comment|// do, line 133
name|v_16
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab21
label|:
do|do
block|{
comment|// call Step_5a, line 133
if|if
condition|(
operator|!
name|r_Step_5a
argument_list|()
condition|)
block|{
break|break
name|lab21
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_16
expr_stmt|;
comment|// do, line 134
name|v_17
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab22
label|:
do|do
block|{
comment|// call Step_5b, line 134
if|if
condition|(
operator|!
name|r_Step_5b
argument_list|()
condition|)
block|{
break|break
name|lab22
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_17
expr_stmt|;
name|cursor
operator|=
name|limit_backward
expr_stmt|;
comment|// do, line 137
name|v_18
operator|=
name|cursor
expr_stmt|;
name|lab23
label|:
do|do
block|{
comment|// (, line 137
comment|// Boolean test Y_found, line 137
if|if
condition|(
operator|!
operator|(
name|B_Y_found
operator|)
condition|)
block|{
break|break
name|lab23
break|;
block|}
comment|// repeat, line 137
name|replab24
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_19
operator|=
name|cursor
expr_stmt|;
name|lab25
label|:
do|do
block|{
comment|// (, line 137
comment|// goto, line 137
name|golab26
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_20
operator|=
name|cursor
expr_stmt|;
name|lab27
label|:
do|do
block|{
comment|// (, line 137
comment|// [, line 137
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 137
if|if
condition|(
operator|!
operator|(
name|eq_s
argument_list|(
literal|1
argument_list|,
literal|"Y"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab27
break|;
block|}
comment|// ], line 137
name|ket
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|v_20
expr_stmt|;
break|break
name|golab26
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_20
expr_stmt|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab25
break|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|//<-, line 137
name|slice_from
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
continue|continue
name|replab24
continue|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_19
expr_stmt|;
break|break
name|replab24
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_18
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
