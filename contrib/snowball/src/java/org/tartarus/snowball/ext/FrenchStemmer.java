begin_unit
begin_comment
comment|// This file was generated automatically by the Snowball to Java compiler
end_comment
begin_package
DECL|package|org.tartarus.snowball.ext
package|package
name|org
operator|.
name|tartarus
operator|.
name|snowball
operator|.
name|ext
package|;
end_package
begin_import
import|import
name|org
operator|.
name|tartarus
operator|.
name|snowball
operator|.
name|SnowballProgram
import|;
end_import
begin_import
import|import
name|org
operator|.
name|tartarus
operator|.
name|snowball
operator|.
name|Among
import|;
end_import
begin_comment
comment|/**  * Generated class implementing code defined by a snowball script.  */
end_comment
begin_class
DECL|class|FrenchStemmer
specifier|public
class|class
name|FrenchStemmer
extends|extends
name|SnowballProgram
block|{
DECL|field|a_0
specifier|private
name|Among
name|a_0
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"col"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"par"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"tap"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_1
specifier|private
name|Among
name|a_1
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|""
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"I"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"U"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"Y"
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_2
specifier|private
name|Among
name|a_2
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"iqU"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"abl"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"I\u00E8r"
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"i\u00E8r"
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"eus"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"iv"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_3
specifier|private
name|Among
name|a_3
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"ic"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"abil"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"iv"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_4
specifier|private
name|Among
name|a_4
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"iqUe"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"atrice"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ance"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ence"
argument_list|,
operator|-
literal|1
argument_list|,
literal|5
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"logie"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"able"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"isme"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"euse"
argument_list|,
operator|-
literal|1
argument_list|,
literal|11
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"iste"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ive"
argument_list|,
operator|-
literal|1
argument_list|,
literal|8
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"if"
argument_list|,
operator|-
literal|1
argument_list|,
literal|8
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"usion"
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ation"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ution"
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ateur"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"iqUes"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"atrices"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ances"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ences"
argument_list|,
operator|-
literal|1
argument_list|,
literal|5
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"logies"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ables"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ismes"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"euses"
argument_list|,
operator|-
literal|1
argument_list|,
literal|11
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"istes"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ives"
argument_list|,
operator|-
literal|1
argument_list|,
literal|8
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ifs"
argument_list|,
operator|-
literal|1
argument_list|,
literal|8
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"usions"
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ations"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"utions"
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ateurs"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ments"
argument_list|,
operator|-
literal|1
argument_list|,
literal|15
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ements"
argument_list|,
literal|30
argument_list|,
literal|6
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"issements"
argument_list|,
literal|31
argument_list|,
literal|12
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"it\u00E9s"
argument_list|,
operator|-
literal|1
argument_list|,
literal|7
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ment"
argument_list|,
operator|-
literal|1
argument_list|,
literal|15
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ement"
argument_list|,
literal|34
argument_list|,
literal|6
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"issement"
argument_list|,
literal|35
argument_list|,
literal|12
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"amment"
argument_list|,
literal|34
argument_list|,
literal|13
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"emment"
argument_list|,
literal|34
argument_list|,
literal|14
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"aux"
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"eaux"
argument_list|,
literal|39
argument_list|,
literal|9
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"eux"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"it\u00E9"
argument_list|,
operator|-
literal|1
argument_list|,
literal|7
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_5
specifier|private
name|Among
name|a_5
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"ira"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ie"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"isse"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"issante"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"i"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"irai"
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ir"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"iras"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ies"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00EEmes"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"isses"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"issantes"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00EEtes"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"is"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"irais"
argument_list|,
literal|13
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"issais"
argument_list|,
literal|13
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"irions"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"issions"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"irons"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"issons"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"issants"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"it"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"irait"
argument_list|,
literal|21
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"issait"
argument_list|,
literal|21
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"issant"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"iraIent"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"issaIent"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"irent"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"issent"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"iront"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00EEt"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"iriez"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"issiez"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"irez"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"issez"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_6
specifier|private
name|Among
name|a_6
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"a"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"era"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"asse"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ante"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E9e"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ai"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"erai"
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"er"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"as"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"eras"
argument_list|,
literal|8
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E2mes"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"asses"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"antes"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E2tes"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E9es"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ais"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"erais"
argument_list|,
literal|15
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ions"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"erions"
argument_list|,
literal|17
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"assions"
argument_list|,
literal|17
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"erons"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ants"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E9s"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ait"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"erait"
argument_list|,
literal|23
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ant"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"aIent"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"eraIent"
argument_list|,
literal|26
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E8rent"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"assent"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"eront"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E2t"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ez"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"iez"
argument_list|,
literal|32
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"eriez"
argument_list|,
literal|33
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"assiez"
argument_list|,
literal|33
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"erez"
argument_list|,
literal|32
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E9"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_7
specifier|private
name|Among
name|a_7
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"e"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"I\u00E8re"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"i\u00E8re"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ion"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"Ier"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ier"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00EB"
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_8
specifier|private
name|Among
name|a_8
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"ell"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"eill"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"enn"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"onn"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ett"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|g_v
specifier|private
specifier|static
specifier|final
name|char
name|g_v
index|[]
init|=
block|{
literal|17
block|,
literal|65
block|,
literal|16
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|128
block|,
literal|130
block|,
literal|103
block|,
literal|8
block|,
literal|5
block|}
decl_stmt|;
DECL|field|g_keep_with_s
specifier|private
specifier|static
specifier|final
name|char
name|g_keep_with_s
index|[]
init|=
block|{
literal|1
block|,
literal|65
block|,
literal|20
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|128
block|}
decl_stmt|;
DECL|field|I_p2
specifier|private
name|int
name|I_p2
decl_stmt|;
DECL|field|I_p1
specifier|private
name|int
name|I_p1
decl_stmt|;
DECL|field|I_pV
specifier|private
name|int
name|I_pV
decl_stmt|;
DECL|method|copy_from
specifier|private
name|void
name|copy_from
parameter_list|(
name|FrenchStemmer
name|other
parameter_list|)
block|{
name|I_p2
operator|=
name|other
operator|.
name|I_p2
expr_stmt|;
name|I_p1
operator|=
name|other
operator|.
name|I_p1
expr_stmt|;
name|I_pV
operator|=
name|other
operator|.
name|I_pV
expr_stmt|;
name|super
operator|.
name|copy_from
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
DECL|method|r_prelude
specifier|private
name|boolean
name|r_prelude
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_3
decl_stmt|;
name|int
name|v_4
decl_stmt|;
comment|// repeat, line 38
name|replab0
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_1
operator|=
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
comment|// goto, line 38
name|golab2
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_2
operator|=
name|cursor
expr_stmt|;
name|lab3
label|:
do|do
block|{
comment|// (, line 38
comment|// or, line 44
name|lab4
label|:
do|do
block|{
name|v_3
operator|=
name|cursor
expr_stmt|;
name|lab5
label|:
do|do
block|{
comment|// (, line 40
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|251
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab5
break|;
block|}
comment|// [, line 40
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// or, line 40
name|lab6
label|:
do|do
block|{
name|v_4
operator|=
name|cursor
expr_stmt|;
name|lab7
label|:
do|do
block|{
comment|// (, line 40
comment|// literal, line 40
if|if
condition|(
operator|!
operator|(
name|eq_s
argument_list|(
literal|1
argument_list|,
literal|"u"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab7
break|;
block|}
comment|// ], line 40
name|ket
operator|=
name|cursor
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|251
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab7
break|;
block|}
comment|//<-, line 40
name|slice_from
argument_list|(
literal|"U"
argument_list|)
expr_stmt|;
break|break
name|lab6
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_4
expr_stmt|;
name|lab8
label|:
do|do
block|{
comment|// (, line 41
comment|// literal, line 41
if|if
condition|(
operator|!
operator|(
name|eq_s
argument_list|(
literal|1
argument_list|,
literal|"i"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab8
break|;
block|}
comment|// ], line 41
name|ket
operator|=
name|cursor
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|251
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab8
break|;
block|}
comment|//<-, line 41
name|slice_from
argument_list|(
literal|"I"
argument_list|)
expr_stmt|;
break|break
name|lab6
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_4
expr_stmt|;
comment|// (, line 42
comment|// literal, line 42
if|if
condition|(
operator|!
operator|(
name|eq_s
argument_list|(
literal|1
argument_list|,
literal|"y"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab5
break|;
block|}
comment|// ], line 42
name|ket
operator|=
name|cursor
expr_stmt|;
comment|//<-, line 42
name|slice_from
argument_list|(
literal|"Y"
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break
name|lab4
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_3
expr_stmt|;
name|lab9
label|:
do|do
block|{
comment|// (, line 45
comment|// [, line 45
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 45
if|if
condition|(
operator|!
operator|(
name|eq_s
argument_list|(
literal|1
argument_list|,
literal|"y"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab9
break|;
block|}
comment|// ], line 45
name|ket
operator|=
name|cursor
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|251
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab9
break|;
block|}
comment|//<-, line 45
name|slice_from
argument_list|(
literal|"Y"
argument_list|)
expr_stmt|;
break|break
name|lab4
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_3
expr_stmt|;
comment|// (, line 47
comment|// literal, line 47
if|if
condition|(
operator|!
operator|(
name|eq_s
argument_list|(
literal|1
argument_list|,
literal|"q"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab3
break|;
block|}
comment|// [, line 47
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 47
if|if
condition|(
operator|!
operator|(
name|eq_s
argument_list|(
literal|1
argument_list|,
literal|"u"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab3
break|;
block|}
comment|// ], line 47
name|ket
operator|=
name|cursor
expr_stmt|;
comment|//<-, line 47
name|slice_from
argument_list|(
literal|"U"
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_2
expr_stmt|;
break|break
name|golab2
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_2
expr_stmt|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab1
break|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
continue|continue
name|replab0
continue|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_1
expr_stmt|;
break|break
name|replab0
break|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_mark_regions
specifier|private
name|boolean
name|r_mark_regions
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_4
decl_stmt|;
comment|// (, line 50
name|I_pV
operator|=
name|limit
expr_stmt|;
name|I_p1
operator|=
name|limit
expr_stmt|;
name|I_p2
operator|=
name|limit
expr_stmt|;
comment|// do, line 56
name|v_1
operator|=
name|cursor
expr_stmt|;
name|lab0
label|:
do|do
block|{
comment|// (, line 56
comment|// or, line 58
name|lab1
label|:
do|do
block|{
name|v_2
operator|=
name|cursor
expr_stmt|;
name|lab2
label|:
do|do
block|{
comment|// (, line 57
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|251
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab2
break|;
block|}
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|251
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab2
break|;
block|}
comment|// next, line 57
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab2
break|;
block|}
name|cursor
operator|++
expr_stmt|;
break|break
name|lab1
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_2
expr_stmt|;
name|lab3
label|:
do|do
block|{
comment|// among, line 59
if|if
condition|(
name|find_among
argument_list|(
name|a_0
argument_list|,
literal|3
argument_list|)
operator|==
literal|0
condition|)
block|{
break|break
name|lab3
break|;
block|}
break|break
name|lab1
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_2
expr_stmt|;
comment|// (, line 66
comment|// next, line 66
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab0
break|;
block|}
name|cursor
operator|++
expr_stmt|;
comment|// gopast, line 66
name|golab4
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab5
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|251
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab5
break|;
block|}
break|break
name|golab4
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab0
break|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
comment|// setmark pV, line 67
name|I_pV
operator|=
name|cursor
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_1
expr_stmt|;
comment|// do, line 69
name|v_4
operator|=
name|cursor
expr_stmt|;
name|lab6
label|:
do|do
block|{
comment|// (, line 69
comment|// gopast, line 70
name|golab7
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab8
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|251
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab8
break|;
block|}
break|break
name|golab7
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab6
break|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|// gopast, line 70
name|golab9
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab10
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|out_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|251
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab10
break|;
block|}
break|break
name|golab9
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab6
break|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|// setmark p1, line 70
name|I_p1
operator|=
name|cursor
expr_stmt|;
comment|// gopast, line 71
name|golab11
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab12
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|251
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab12
break|;
block|}
break|break
name|golab11
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab6
break|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|// gopast, line 71
name|golab13
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab14
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|out_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|251
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab14
break|;
block|}
break|break
name|golab13
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab6
break|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|// setmark p2, line 71
name|I_p2
operator|=
name|cursor
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_4
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_postlude
specifier|private
name|boolean
name|r_postlude
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
name|int
name|v_1
decl_stmt|;
comment|// repeat, line 75
name|replab0
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_1
operator|=
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
comment|// (, line 75
comment|// [, line 77
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 77
name|among_var
operator|=
name|find_among
argument_list|(
name|a_1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
break|break
name|lab1
break|;
block|}
comment|// ], line 77
name|ket
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
break|break
name|lab1
break|;
case|case
literal|1
case|:
comment|// (, line 78
comment|//<-, line 78
name|slice_from
argument_list|(
literal|"i"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 79
comment|//<-, line 79
name|slice_from
argument_list|(
literal|"u"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// (, line 80
comment|//<-, line 80
name|slice_from
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// (, line 81
comment|// next, line 81
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab1
break|;
block|}
name|cursor
operator|++
expr_stmt|;
break|break;
block|}
continue|continue
name|replab0
continue|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_1
expr_stmt|;
break|break
name|replab0
break|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_RV
specifier|private
name|boolean
name|r_RV
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
name|I_pV
operator|<=
name|cursor
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_R1
specifier|private
name|boolean
name|r_R1
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
name|I_p1
operator|<=
name|cursor
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_R2
specifier|private
name|boolean
name|r_R2
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
name|I_p2
operator|<=
name|cursor
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_standard_suffix
specifier|private
name|boolean
name|r_standard_suffix
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_3
decl_stmt|;
name|int
name|v_4
decl_stmt|;
name|int
name|v_5
decl_stmt|;
name|int
name|v_6
decl_stmt|;
name|int
name|v_7
decl_stmt|;
name|int
name|v_8
decl_stmt|;
name|int
name|v_9
decl_stmt|;
name|int
name|v_10
decl_stmt|;
name|int
name|v_11
decl_stmt|;
comment|// (, line 91
comment|// [, line 92
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 92
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_4
argument_list|,
literal|43
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ], line 92
name|bra
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 96
comment|// call R2, line 96
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 96
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 99
comment|// call R2, line 99
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 99
name|slice_del
argument_list|()
expr_stmt|;
comment|// try, line 100
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab0
label|:
do|do
block|{
comment|// (, line 100
comment|// [, line 100
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 100
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|2
argument_list|,
literal|"ic"
argument_list|)
operator|)
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
break|break
name|lab0
break|;
block|}
comment|// ], line 100
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// or, line 100
name|lab1
label|:
do|do
block|{
name|v_2
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab2
label|:
do|do
block|{
comment|// (, line 100
comment|// call R2, line 100
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
break|break
name|lab2
break|;
block|}
comment|// delete, line 100
name|slice_del
argument_list|()
expr_stmt|;
break|break
name|lab1
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_2
expr_stmt|;
comment|//<-, line 100
name|slice_from
argument_list|(
literal|"iqU"
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break;
case|case
literal|3
case|:
comment|// (, line 104
comment|// call R2, line 104
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//<-, line 104
name|slice_from
argument_list|(
literal|"log"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// (, line 107
comment|// call R2, line 107
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//<-, line 107
name|slice_from
argument_list|(
literal|"u"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
comment|// (, line 110
comment|// call R2, line 110
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//<-, line 110
name|slice_from
argument_list|(
literal|"ent"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
comment|// (, line 113
comment|// call RV, line 114
if|if
condition|(
operator|!
name|r_RV
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 114
name|slice_del
argument_list|()
expr_stmt|;
comment|// try, line 115
name|v_3
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab3
label|:
do|do
block|{
comment|// (, line 115
comment|// [, line 116
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 116
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_2
argument_list|,
literal|6
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
break|break
name|lab3
break|;
block|}
comment|// ], line 116
name|bra
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
break|break
name|lab3
break|;
case|case
literal|1
case|:
comment|// (, line 117
comment|// call R2, line 117
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
break|break
name|lab3
break|;
block|}
comment|// delete, line 117
name|slice_del
argument_list|()
expr_stmt|;
comment|// [, line 117
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 117
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|2
argument_list|,
literal|"at"
argument_list|)
operator|)
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
break|break
name|lab3
break|;
block|}
comment|// ], line 117
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// call R2, line 117
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
break|break
name|lab3
break|;
block|}
comment|// delete, line 117
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 118
comment|// or, line 118
name|lab4
label|:
do|do
block|{
name|v_4
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab5
label|:
do|do
block|{
comment|// (, line 118
comment|// call R2, line 118
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
break|break
name|lab5
break|;
block|}
comment|// delete, line 118
name|slice_del
argument_list|()
expr_stmt|;
break|break
name|lab4
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_4
expr_stmt|;
comment|// (, line 118
comment|// call R1, line 118
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
break|break
name|lab3
break|;
block|}
comment|//<-, line 118
name|slice_from
argument_list|(
literal|"eux"
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break;
case|case
literal|3
case|:
comment|// (, line 120
comment|// call R2, line 120
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
break|break
name|lab3
break|;
block|}
comment|// delete, line 120
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// (, line 122
comment|// call RV, line 122
if|if
condition|(
operator|!
name|r_RV
argument_list|()
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
break|break
name|lab3
break|;
block|}
comment|//<-, line 122
name|slice_from
argument_list|(
literal|"i"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break;
case|case
literal|7
case|:
comment|// (, line 128
comment|// call R2, line 129
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 129
name|slice_del
argument_list|()
expr_stmt|;
comment|// try, line 130
name|v_5
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab6
label|:
do|do
block|{
comment|// (, line 130
comment|// [, line 131
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 131
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_5
expr_stmt|;
break|break
name|lab6
break|;
block|}
comment|// ], line 131
name|bra
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
name|cursor
operator|=
name|limit
operator|-
name|v_5
expr_stmt|;
break|break
name|lab6
break|;
case|case
literal|1
case|:
comment|// (, line 132
comment|// or, line 132
name|lab7
label|:
do|do
block|{
name|v_6
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab8
label|:
do|do
block|{
comment|// (, line 132
comment|// call R2, line 132
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
break|break
name|lab8
break|;
block|}
comment|// delete, line 132
name|slice_del
argument_list|()
expr_stmt|;
break|break
name|lab7
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_6
expr_stmt|;
comment|//<-, line 132
name|slice_from
argument_list|(
literal|"abl"
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break;
case|case
literal|2
case|:
comment|// (, line 133
comment|// or, line 133
name|lab9
label|:
do|do
block|{
name|v_7
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab10
label|:
do|do
block|{
comment|// (, line 133
comment|// call R2, line 133
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
break|break
name|lab10
break|;
block|}
comment|// delete, line 133
name|slice_del
argument_list|()
expr_stmt|;
break|break
name|lab9
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_7
expr_stmt|;
comment|//<-, line 133
name|slice_from
argument_list|(
literal|"iqU"
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break;
case|case
literal|3
case|:
comment|// (, line 134
comment|// call R2, line 134
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_5
expr_stmt|;
break|break
name|lab6
break|;
block|}
comment|// delete, line 134
name|slice_del
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break;
case|case
literal|8
case|:
comment|// (, line 140
comment|// call R2, line 141
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 141
name|slice_del
argument_list|()
expr_stmt|;
comment|// try, line 142
name|v_8
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab11
label|:
do|do
block|{
comment|// (, line 142
comment|// [, line 142
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 142
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|2
argument_list|,
literal|"at"
argument_list|)
operator|)
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_8
expr_stmt|;
break|break
name|lab11
break|;
block|}
comment|// ], line 142
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// call R2, line 142
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_8
expr_stmt|;
break|break
name|lab11
break|;
block|}
comment|// delete, line 142
name|slice_del
argument_list|()
expr_stmt|;
comment|// [, line 142
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 142
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|2
argument_list|,
literal|"ic"
argument_list|)
operator|)
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_8
expr_stmt|;
break|break
name|lab11
break|;
block|}
comment|// ], line 142
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// or, line 142
name|lab12
label|:
do|do
block|{
name|v_9
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab13
label|:
do|do
block|{
comment|// (, line 142
comment|// call R2, line 142
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
break|break
name|lab13
break|;
block|}
comment|// delete, line 142
name|slice_del
argument_list|()
expr_stmt|;
break|break
name|lab12
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_9
expr_stmt|;
comment|//<-, line 142
name|slice_from
argument_list|(
literal|"iqU"
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break;
case|case
literal|9
case|:
comment|// (, line 144
comment|//<-, line 144
name|slice_from
argument_list|(
literal|"eau"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|10
case|:
comment|// (, line 145
comment|// call R1, line 145
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//<-, line 145
name|slice_from
argument_list|(
literal|"al"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|11
case|:
comment|// (, line 147
comment|// or, line 147
name|lab14
label|:
do|do
block|{
name|v_10
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab15
label|:
do|do
block|{
comment|// (, line 147
comment|// call R2, line 147
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
break|break
name|lab15
break|;
block|}
comment|// delete, line 147
name|slice_del
argument_list|()
expr_stmt|;
break|break
name|lab14
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_10
expr_stmt|;
comment|// (, line 147
comment|// call R1, line 147
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//<-, line 147
name|slice_from
argument_list|(
literal|"eux"
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break;
case|case
literal|12
case|:
comment|// (, line 150
comment|// call R1, line 150
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|out_grouping_b
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|251
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 150
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|13
case|:
comment|// (, line 155
comment|// call RV, line 155
if|if
condition|(
operator|!
name|r_RV
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// fail, line 155
comment|// (, line 155
comment|//<-, line 155
name|slice_from
argument_list|(
literal|"ant"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
case|case
literal|14
case|:
comment|// (, line 156
comment|// call RV, line 156
if|if
condition|(
operator|!
name|r_RV
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// fail, line 156
comment|// (, line 156
comment|//<-, line 156
name|slice_from
argument_list|(
literal|"ent"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
case|case
literal|15
case|:
comment|// (, line 158
comment|// test, line 158
name|v_11
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// (, line 158
if|if
condition|(
operator|!
operator|(
name|in_grouping_b
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|251
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// call RV, line 158
if|if
condition|(
operator|!
name|r_RV
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|limit
operator|-
name|v_11
expr_stmt|;
comment|// fail, line 158
comment|// (, line 158
comment|// delete, line 158
name|slice_del
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_i_verb_suffix
specifier|private
name|boolean
name|r_i_verb_suffix
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
comment|// setlimit, line 163
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// tomark, line 163
if|if
condition|(
name|cursor
operator|<
name|I_pV
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|I_pV
expr_stmt|;
name|v_2
operator|=
name|limit_backward
expr_stmt|;
name|limit_backward
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
comment|// (, line 163
comment|// [, line 164
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 164
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_5
argument_list|,
literal|35
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
name|limit_backward
operator|=
name|v_2
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ], line 164
name|bra
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
name|limit_backward
operator|=
name|v_2
expr_stmt|;
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 170
if|if
condition|(
operator|!
operator|(
name|out_grouping_b
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|251
argument_list|)
operator|)
condition|)
block|{
name|limit_backward
operator|=
name|v_2
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// delete, line 170
name|slice_del
argument_list|()
expr_stmt|;
break|break;
block|}
name|limit_backward
operator|=
name|v_2
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_verb_suffix
specifier|private
name|boolean
name|r_verb_suffix
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_3
decl_stmt|;
comment|// setlimit, line 174
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// tomark, line 174
if|if
condition|(
name|cursor
operator|<
name|I_pV
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|I_pV
expr_stmt|;
name|v_2
operator|=
name|limit_backward
expr_stmt|;
name|limit_backward
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
comment|// (, line 174
comment|// [, line 175
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 175
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_6
argument_list|,
literal|38
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
name|limit_backward
operator|=
name|v_2
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ], line 175
name|bra
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
name|limit_backward
operator|=
name|v_2
expr_stmt|;
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 177
comment|// call R2, line 177
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
name|limit_backward
operator|=
name|v_2
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// delete, line 177
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 185
comment|// delete, line 185
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// (, line 190
comment|// delete, line 190
name|slice_del
argument_list|()
expr_stmt|;
comment|// try, line 191
name|v_3
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab0
label|:
do|do
block|{
comment|// (, line 191
comment|// [, line 191
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 191
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"e"
argument_list|)
operator|)
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
break|break
name|lab0
break|;
block|}
comment|// ], line 191
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// delete, line 191
name|slice_del
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break;
block|}
name|limit_backward
operator|=
name|v_2
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_residual_suffix
specifier|private
name|boolean
name|r_residual_suffix
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_3
decl_stmt|;
name|int
name|v_4
decl_stmt|;
name|int
name|v_5
decl_stmt|;
comment|// (, line 198
comment|// try, line 199
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab0
label|:
do|do
block|{
comment|// (, line 199
comment|// [, line 199
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 199
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"s"
argument_list|)
operator|)
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
break|break
name|lab0
break|;
block|}
comment|// ], line 199
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// test, line 199
name|v_2
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|out_grouping_b
argument_list|(
name|g_keep_with_s
argument_list|,
literal|97
argument_list|,
literal|232
argument_list|)
operator|)
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
break|break
name|lab0
break|;
block|}
name|cursor
operator|=
name|limit
operator|-
name|v_2
expr_stmt|;
comment|// delete, line 199
name|slice_del
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
comment|// setlimit, line 200
name|v_3
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// tomark, line 200
if|if
condition|(
name|cursor
operator|<
name|I_pV
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|I_pV
expr_stmt|;
name|v_4
operator|=
name|limit_backward
expr_stmt|;
name|limit_backward
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
comment|// (, line 200
comment|// [, line 201
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 201
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_7
argument_list|,
literal|7
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
name|limit_backward
operator|=
name|v_4
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ], line 201
name|bra
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
name|limit_backward
operator|=
name|v_4
expr_stmt|;
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 202
comment|// call R2, line 202
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
name|limit_backward
operator|=
name|v_4
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// or, line 202
name|lab1
label|:
do|do
block|{
name|v_5
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab2
label|:
do|do
block|{
comment|// literal, line 202
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"s"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab2
break|;
block|}
break|break
name|lab1
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_5
expr_stmt|;
comment|// literal, line 202
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"t"
argument_list|)
operator|)
condition|)
block|{
name|limit_backward
operator|=
name|v_4
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
comment|// delete, line 202
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 204
comment|//<-, line 204
name|slice_from
argument_list|(
literal|"i"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// (, line 205
comment|// delete, line 205
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// (, line 206
comment|// literal, line 206
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|2
argument_list|,
literal|"gu"
argument_list|)
operator|)
condition|)
block|{
name|limit_backward
operator|=
name|v_4
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// delete, line 206
name|slice_del
argument_list|()
expr_stmt|;
break|break;
block|}
name|limit_backward
operator|=
name|v_4
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_un_double
specifier|private
name|boolean
name|r_un_double
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
comment|// (, line 211
comment|// test, line 212
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// among, line 212
if|if
condition|(
name|find_among_b
argument_list|(
name|a_8
argument_list|,
literal|5
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
comment|// [, line 212
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// next, line 212
if|if
condition|(
name|cursor
operator|<=
name|limit_backward
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|--
expr_stmt|;
comment|// ], line 212
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// delete, line 212
name|slice_del
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_un_accent
specifier|private
name|boolean
name|r_un_accent
parameter_list|()
block|{
name|int
name|v_3
decl_stmt|;
comment|// (, line 215
comment|// atleast, line 216
block|{
name|int
name|v_1
init|=
literal|1
decl_stmt|;
comment|// atleast, line 216
name|replab0
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab1
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|out_grouping_b
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|251
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab1
break|;
block|}
name|v_1
operator|--
expr_stmt|;
continue|continue
name|replab0
continue|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break
name|replab0
break|;
block|}
if|if
condition|(
name|v_1
operator|>
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// [, line 217
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// or, line 217
name|lab2
label|:
do|do
block|{
name|v_3
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab3
label|:
do|do
block|{
comment|// literal, line 217
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"\u00E9"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab3
break|;
block|}
break|break
name|lab2
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
comment|// literal, line 217
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"\u00E8"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
comment|// ], line 217
name|bra
operator|=
name|cursor
expr_stmt|;
comment|//<-, line 217
name|slice_from
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|stem
specifier|public
name|boolean
name|stem
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_3
decl_stmt|;
name|int
name|v_4
decl_stmt|;
name|int
name|v_5
decl_stmt|;
name|int
name|v_6
decl_stmt|;
name|int
name|v_7
decl_stmt|;
name|int
name|v_8
decl_stmt|;
name|int
name|v_9
decl_stmt|;
name|int
name|v_10
decl_stmt|;
name|int
name|v_11
decl_stmt|;
comment|// (, line 221
comment|// do, line 223
name|v_1
operator|=
name|cursor
expr_stmt|;
name|lab0
label|:
do|do
block|{
comment|// call prelude, line 223
if|if
condition|(
operator|!
name|r_prelude
argument_list|()
condition|)
block|{
break|break
name|lab0
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_1
expr_stmt|;
comment|// do, line 224
name|v_2
operator|=
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
comment|// call mark_regions, line 224
if|if
condition|(
operator|!
name|r_mark_regions
argument_list|()
condition|)
block|{
break|break
name|lab1
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_2
expr_stmt|;
comment|// backwards, line 225
name|limit_backward
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|limit
expr_stmt|;
comment|// (, line 225
comment|// do, line 227
name|v_3
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab2
label|:
do|do
block|{
comment|// (, line 227
comment|// or, line 237
name|lab3
label|:
do|do
block|{
name|v_4
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab4
label|:
do|do
block|{
comment|// (, line 228
comment|// and, line 233
name|v_5
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// (, line 229
comment|// or, line 229
name|lab5
label|:
do|do
block|{
name|v_6
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab6
label|:
do|do
block|{
comment|// call standard_suffix, line 229
if|if
condition|(
operator|!
name|r_standard_suffix
argument_list|()
condition|)
block|{
break|break
name|lab6
break|;
block|}
break|break
name|lab5
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_6
expr_stmt|;
name|lab7
label|:
do|do
block|{
comment|// call i_verb_suffix, line 230
if|if
condition|(
operator|!
name|r_i_verb_suffix
argument_list|()
condition|)
block|{
break|break
name|lab7
break|;
block|}
break|break
name|lab5
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_6
expr_stmt|;
comment|// call verb_suffix, line 231
if|if
condition|(
operator|!
name|r_verb_suffix
argument_list|()
condition|)
block|{
break|break
name|lab4
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_5
expr_stmt|;
comment|// try, line 234
name|v_7
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab8
label|:
do|do
block|{
comment|// (, line 234
comment|// [, line 234
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// or, line 234
name|lab9
label|:
do|do
block|{
name|v_8
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab10
label|:
do|do
block|{
comment|// (, line 234
comment|// literal, line 234
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"Y"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab10
break|;
block|}
comment|// ], line 234
name|bra
operator|=
name|cursor
expr_stmt|;
comment|//<-, line 234
name|slice_from
argument_list|(
literal|"i"
argument_list|)
expr_stmt|;
break|break
name|lab9
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_8
expr_stmt|;
comment|// (, line 235
comment|// literal, line 235
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"\u00E7"
argument_list|)
operator|)
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_7
expr_stmt|;
break|break
name|lab8
break|;
block|}
comment|// ], line 235
name|bra
operator|=
name|cursor
expr_stmt|;
comment|//<-, line 235
name|slice_from
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break
name|lab3
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_4
expr_stmt|;
comment|// call residual_suffix, line 238
if|if
condition|(
operator|!
name|r_residual_suffix
argument_list|()
condition|)
block|{
break|break
name|lab2
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
comment|// do, line 243
name|v_9
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab11
label|:
do|do
block|{
comment|// call un_double, line 243
if|if
condition|(
operator|!
name|r_un_double
argument_list|()
condition|)
block|{
break|break
name|lab11
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_9
expr_stmt|;
comment|// do, line 244
name|v_10
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab12
label|:
do|do
block|{
comment|// call un_accent, line 244
if|if
condition|(
operator|!
name|r_un_accent
argument_list|()
condition|)
block|{
break|break
name|lab12
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_10
expr_stmt|;
name|cursor
operator|=
name|limit_backward
expr_stmt|;
comment|// do, line 246
name|v_11
operator|=
name|cursor
expr_stmt|;
name|lab13
label|:
do|do
block|{
comment|// call postlude, line 246
if|if
condition|(
operator|!
name|r_postlude
argument_list|()
condition|)
block|{
break|break
name|lab13
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_11
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
