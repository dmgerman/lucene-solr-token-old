begin_unit
begin_comment
comment|// This file was generated automatically by the Snowball to Java compiler
end_comment
begin_package
DECL|package|org.tartarus.snowball.ext
package|package
name|org
operator|.
name|tartarus
operator|.
name|snowball
operator|.
name|ext
package|;
end_package
begin_import
import|import
name|org
operator|.
name|tartarus
operator|.
name|snowball
operator|.
name|SnowballProgram
import|;
end_import
begin_import
import|import
name|org
operator|.
name|tartarus
operator|.
name|snowball
operator|.
name|Among
import|;
end_import
begin_comment
comment|/**  * Generated class implementing code defined by a snowball script.  */
end_comment
begin_class
DECL|class|DutchStemmer
specifier|public
class|class
name|DutchStemmer
extends|extends
name|SnowballProgram
block|{
DECL|field|a_0
specifier|private
name|Among
name|a_0
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|""
argument_list|,
operator|-
literal|1
argument_list|,
literal|6
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E4"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E9"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00EB"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00ED"
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00EF"
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00F3"
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00F6"
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00FA"
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00FC"
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_1
specifier|private
name|Among
name|a_1
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|""
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"I"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"Y"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_2
specifier|private
name|Among
name|a_2
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"dd"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"kk"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"tt"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_3
specifier|private
name|Among
name|a_3
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"ene"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"se"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"en"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"heden"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"s"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_4
specifier|private
name|Among
name|a_4
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"end"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ig"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ing"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"lijk"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"baar"
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"bar"
argument_list|,
operator|-
literal|1
argument_list|,
literal|5
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_5
specifier|private
name|Among
name|a_5
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"aa"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ee"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"oo"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"uu"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|g_v
specifier|private
specifier|static
specifier|final
name|char
name|g_v
index|[]
init|=
block|{
literal|17
block|,
literal|65
block|,
literal|16
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|128
block|}
decl_stmt|;
DECL|field|g_v_I
specifier|private
specifier|static
specifier|final
name|char
name|g_v_I
index|[]
init|=
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|17
block|,
literal|65
block|,
literal|16
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|128
block|}
decl_stmt|;
DECL|field|g_v_j
specifier|private
specifier|static
specifier|final
name|char
name|g_v_j
index|[]
init|=
block|{
literal|17
block|,
literal|67
block|,
literal|16
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|128
block|}
decl_stmt|;
DECL|field|I_p2
specifier|private
name|int
name|I_p2
decl_stmt|;
DECL|field|I_p1
specifier|private
name|int
name|I_p1
decl_stmt|;
DECL|field|B_e_found
specifier|private
name|boolean
name|B_e_found
decl_stmt|;
DECL|method|copy_from
specifier|private
name|void
name|copy_from
parameter_list|(
name|DutchStemmer
name|other
parameter_list|)
block|{
name|I_p2
operator|=
name|other
operator|.
name|I_p2
expr_stmt|;
name|I_p1
operator|=
name|other
operator|.
name|I_p1
expr_stmt|;
name|B_e_found
operator|=
name|other
operator|.
name|B_e_found
expr_stmt|;
name|super
operator|.
name|copy_from
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
DECL|method|r_prelude
specifier|private
name|boolean
name|r_prelude
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_3
decl_stmt|;
name|int
name|v_4
decl_stmt|;
name|int
name|v_5
decl_stmt|;
name|int
name|v_6
decl_stmt|;
comment|// (, line 41
comment|// test, line 42
name|v_1
operator|=
name|cursor
expr_stmt|;
comment|// repeat, line 42
name|replab0
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_2
operator|=
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
comment|// (, line 42
comment|// [, line 43
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 43
name|among_var
operator|=
name|find_among
argument_list|(
name|a_0
argument_list|,
literal|11
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
break|break
name|lab1
break|;
block|}
comment|// ], line 43
name|ket
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
break|break
name|lab1
break|;
case|case
literal|1
case|:
comment|// (, line 45
comment|//<-, line 45
name|slice_from
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 47
comment|//<-, line 47
name|slice_from
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// (, line 49
comment|//<-, line 49
name|slice_from
argument_list|(
literal|"i"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// (, line 51
comment|//<-, line 51
name|slice_from
argument_list|(
literal|"o"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
comment|// (, line 53
comment|//<-, line 53
name|slice_from
argument_list|(
literal|"u"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
comment|// (, line 54
comment|// next, line 54
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab1
break|;
block|}
name|cursor
operator|++
expr_stmt|;
break|break;
block|}
continue|continue
name|replab0
continue|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_2
expr_stmt|;
break|break
name|replab0
break|;
block|}
name|cursor
operator|=
name|v_1
expr_stmt|;
comment|// try, line 57
name|v_3
operator|=
name|cursor
expr_stmt|;
name|lab2
label|:
do|do
block|{
comment|// (, line 57
comment|// [, line 57
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 57
if|if
condition|(
operator|!
operator|(
name|eq_s
argument_list|(
literal|1
argument_list|,
literal|"y"
argument_list|)
operator|)
condition|)
block|{
name|cursor
operator|=
name|v_3
expr_stmt|;
break|break
name|lab2
break|;
block|}
comment|// ], line 57
name|ket
operator|=
name|cursor
expr_stmt|;
comment|//<-, line 57
name|slice_from
argument_list|(
literal|"Y"
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
comment|// repeat, line 58
name|replab3
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_4
operator|=
name|cursor
expr_stmt|;
name|lab4
label|:
do|do
block|{
comment|// goto, line 58
name|golab5
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_5
operator|=
name|cursor
expr_stmt|;
name|lab6
label|:
do|do
block|{
comment|// (, line 58
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|232
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab6
break|;
block|}
comment|// [, line 59
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// or, line 59
name|lab7
label|:
do|do
block|{
name|v_6
operator|=
name|cursor
expr_stmt|;
name|lab8
label|:
do|do
block|{
comment|// (, line 59
comment|// literal, line 59
if|if
condition|(
operator|!
operator|(
name|eq_s
argument_list|(
literal|1
argument_list|,
literal|"i"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab8
break|;
block|}
comment|// ], line 59
name|ket
operator|=
name|cursor
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|232
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab8
break|;
block|}
comment|//<-, line 59
name|slice_from
argument_list|(
literal|"I"
argument_list|)
expr_stmt|;
break|break
name|lab7
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_6
expr_stmt|;
comment|// (, line 60
comment|// literal, line 60
if|if
condition|(
operator|!
operator|(
name|eq_s
argument_list|(
literal|1
argument_list|,
literal|"y"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab6
break|;
block|}
comment|// ], line 60
name|ket
operator|=
name|cursor
expr_stmt|;
comment|//<-, line 60
name|slice_from
argument_list|(
literal|"Y"
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_5
expr_stmt|;
break|break
name|golab5
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_5
expr_stmt|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab4
break|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
continue|continue
name|replab3
continue|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_4
expr_stmt|;
break|break
name|replab3
break|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_mark_regions
specifier|private
name|boolean
name|r_mark_regions
parameter_list|()
block|{
comment|// (, line 64
name|I_p1
operator|=
name|limit
expr_stmt|;
name|I_p2
operator|=
name|limit
expr_stmt|;
comment|// gopast, line 69
name|golab0
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab1
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|232
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab1
break|;
block|}
break|break
name|golab0
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|// gopast, line 69
name|golab2
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab3
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|out_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|232
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab3
break|;
block|}
break|break
name|golab2
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|// setmark p1, line 69
name|I_p1
operator|=
name|cursor
expr_stmt|;
comment|// try, line 70
name|lab4
label|:
do|do
block|{
comment|// (, line 70
if|if
condition|(
operator|!
operator|(
name|I_p1
operator|<
literal|3
operator|)
condition|)
block|{
break|break
name|lab4
break|;
block|}
name|I_p1
operator|=
literal|3
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
comment|// gopast, line 71
name|golab5
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab6
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|232
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab6
break|;
block|}
break|break
name|golab5
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|// gopast, line 71
name|golab7
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab8
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|out_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|232
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab8
break|;
block|}
break|break
name|golab7
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|// setmark p2, line 71
name|I_p2
operator|=
name|cursor
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_postlude
specifier|private
name|boolean
name|r_postlude
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
name|int
name|v_1
decl_stmt|;
comment|// repeat, line 75
name|replab0
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_1
operator|=
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
comment|// (, line 75
comment|// [, line 77
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 77
name|among_var
operator|=
name|find_among
argument_list|(
name|a_1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
break|break
name|lab1
break|;
block|}
comment|// ], line 77
name|ket
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
break|break
name|lab1
break|;
case|case
literal|1
case|:
comment|// (, line 78
comment|//<-, line 78
name|slice_from
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 79
comment|//<-, line 79
name|slice_from
argument_list|(
literal|"i"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// (, line 80
comment|// next, line 80
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab1
break|;
block|}
name|cursor
operator|++
expr_stmt|;
break|break;
block|}
continue|continue
name|replab0
continue|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_1
expr_stmt|;
break|break
name|replab0
break|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_R1
specifier|private
name|boolean
name|r_R1
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
name|I_p1
operator|<=
name|cursor
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_R2
specifier|private
name|boolean
name|r_R2
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
name|I_p2
operator|<=
name|cursor
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_undouble
specifier|private
name|boolean
name|r_undouble
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
comment|// (, line 90
comment|// test, line 91
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// among, line 91
if|if
condition|(
name|find_among_b
argument_list|(
name|a_2
argument_list|,
literal|3
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
comment|// [, line 91
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// next, line 91
if|if
condition|(
name|cursor
operator|<=
name|limit_backward
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|--
expr_stmt|;
comment|// ], line 91
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// delete, line 91
name|slice_del
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_e_ending
specifier|private
name|boolean
name|r_e_ending
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
comment|// (, line 94
comment|// unset e_found, line 95
name|B_e_found
operator|=
literal|false
expr_stmt|;
comment|// [, line 96
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 96
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"e"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ], line 96
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// call R1, line 96
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// test, line 96
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|out_grouping_b
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|232
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
comment|// delete, line 96
name|slice_del
argument_list|()
expr_stmt|;
comment|// set e_found, line 97
name|B_e_found
operator|=
literal|true
expr_stmt|;
comment|// call undouble, line 98
if|if
condition|(
operator|!
name|r_undouble
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_en_ending
specifier|private
name|boolean
name|r_en_ending
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
comment|// (, line 101
comment|// call R1, line 102
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// and, line 102
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|out_grouping_b
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|232
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
comment|// not, line 102
block|{
name|v_2
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab0
label|:
do|do
block|{
comment|// literal, line 102
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|3
argument_list|,
literal|"gem"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab0
break|;
block|}
return|return
literal|false
return|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_2
expr_stmt|;
block|}
comment|// delete, line 102
name|slice_del
argument_list|()
expr_stmt|;
comment|// call undouble, line 103
if|if
condition|(
operator|!
name|r_undouble
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_standard_suffix
specifier|private
name|boolean
name|r_standard_suffix
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_3
decl_stmt|;
name|int
name|v_4
decl_stmt|;
name|int
name|v_5
decl_stmt|;
name|int
name|v_6
decl_stmt|;
name|int
name|v_7
decl_stmt|;
name|int
name|v_8
decl_stmt|;
name|int
name|v_9
decl_stmt|;
name|int
name|v_10
decl_stmt|;
comment|// (, line 106
comment|// do, line 107
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab0
label|:
do|do
block|{
comment|// (, line 107
comment|// [, line 108
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 108
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_3
argument_list|,
literal|5
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
break|break
name|lab0
break|;
block|}
comment|// ], line 108
name|bra
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
break|break
name|lab0
break|;
case|case
literal|1
case|:
comment|// (, line 110
comment|// call R1, line 110
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
break|break
name|lab0
break|;
block|}
comment|//<-, line 110
name|slice_from
argument_list|(
literal|"heid"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 113
comment|// call en_ending, line 113
if|if
condition|(
operator|!
name|r_en_ending
argument_list|()
condition|)
block|{
break|break
name|lab0
break|;
block|}
break|break;
case|case
literal|3
case|:
comment|// (, line 116
comment|// call R1, line 116
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
break|break
name|lab0
break|;
block|}
if|if
condition|(
operator|!
operator|(
name|out_grouping_b
argument_list|(
name|g_v_j
argument_list|,
literal|97
argument_list|,
literal|232
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab0
break|;
block|}
comment|// delete, line 116
name|slice_del
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
comment|// do, line 120
name|v_2
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
comment|// call e_ending, line 120
if|if
condition|(
operator|!
name|r_e_ending
argument_list|()
condition|)
block|{
break|break
name|lab1
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_2
expr_stmt|;
comment|// do, line 122
name|v_3
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab2
label|:
do|do
block|{
comment|// (, line 122
comment|// [, line 122
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 122
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|4
argument_list|,
literal|"heid"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab2
break|;
block|}
comment|// ], line 122
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// call R2, line 122
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
break|break
name|lab2
break|;
block|}
comment|// not, line 122
block|{
name|v_4
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab3
label|:
do|do
block|{
comment|// literal, line 122
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"c"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab3
break|;
block|}
break|break
name|lab2
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_4
expr_stmt|;
block|}
comment|// delete, line 122
name|slice_del
argument_list|()
expr_stmt|;
comment|// [, line 123
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 123
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|2
argument_list|,
literal|"en"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab2
break|;
block|}
comment|// ], line 123
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// call en_ending, line 123
if|if
condition|(
operator|!
name|r_en_ending
argument_list|()
condition|)
block|{
break|break
name|lab2
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
comment|// do, line 126
name|v_5
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab4
label|:
do|do
block|{
comment|// (, line 126
comment|// [, line 127
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 127
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_4
argument_list|,
literal|6
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
break|break
name|lab4
break|;
block|}
comment|// ], line 127
name|bra
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
break|break
name|lab4
break|;
case|case
literal|1
case|:
comment|// (, line 129
comment|// call R2, line 129
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
break|break
name|lab4
break|;
block|}
comment|// delete, line 129
name|slice_del
argument_list|()
expr_stmt|;
comment|// or, line 130
name|lab5
label|:
do|do
block|{
name|v_6
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab6
label|:
do|do
block|{
comment|// (, line 130
comment|// [, line 130
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 130
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|2
argument_list|,
literal|"ig"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab6
break|;
block|}
comment|// ], line 130
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// call R2, line 130
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
break|break
name|lab6
break|;
block|}
comment|// not, line 130
block|{
name|v_7
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab7
label|:
do|do
block|{
comment|// literal, line 130
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"e"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab7
break|;
block|}
break|break
name|lab6
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_7
expr_stmt|;
block|}
comment|// delete, line 130
name|slice_del
argument_list|()
expr_stmt|;
break|break
name|lab5
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_6
expr_stmt|;
comment|// call undouble, line 130
if|if
condition|(
operator|!
name|r_undouble
argument_list|()
condition|)
block|{
break|break
name|lab4
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break;
case|case
literal|2
case|:
comment|// (, line 133
comment|// call R2, line 133
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
break|break
name|lab4
break|;
block|}
comment|// not, line 133
block|{
name|v_8
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab8
label|:
do|do
block|{
comment|// literal, line 133
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"e"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab8
break|;
block|}
break|break
name|lab4
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_8
expr_stmt|;
block|}
comment|// delete, line 133
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// (, line 136
comment|// call R2, line 136
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
break|break
name|lab4
break|;
block|}
comment|// delete, line 136
name|slice_del
argument_list|()
expr_stmt|;
comment|// call e_ending, line 136
if|if
condition|(
operator|!
name|r_e_ending
argument_list|()
condition|)
block|{
break|break
name|lab4
break|;
block|}
break|break;
case|case
literal|4
case|:
comment|// (, line 139
comment|// call R2, line 139
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
break|break
name|lab4
break|;
block|}
comment|// delete, line 139
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|5
case|:
comment|// (, line 142
comment|// call R2, line 142
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
break|break
name|lab4
break|;
block|}
comment|// Boolean test e_found, line 142
if|if
condition|(
operator|!
operator|(
name|B_e_found
operator|)
condition|)
block|{
break|break
name|lab4
break|;
block|}
comment|// delete, line 142
name|slice_del
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_5
expr_stmt|;
comment|// do, line 146
name|v_9
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab9
label|:
do|do
block|{
comment|// (, line 146
if|if
condition|(
operator|!
operator|(
name|out_grouping_b
argument_list|(
name|g_v_I
argument_list|,
literal|73
argument_list|,
literal|232
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab9
break|;
block|}
comment|// test, line 148
name|v_10
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// (, line 148
comment|// among, line 149
if|if
condition|(
name|find_among_b
argument_list|(
name|a_5
argument_list|,
literal|4
argument_list|)
operator|==
literal|0
condition|)
block|{
break|break
name|lab9
break|;
block|}
if|if
condition|(
operator|!
operator|(
name|out_grouping_b
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|232
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab9
break|;
block|}
name|cursor
operator|=
name|limit
operator|-
name|v_10
expr_stmt|;
comment|// [, line 152
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// next, line 152
if|if
condition|(
name|cursor
operator|<=
name|limit_backward
condition|)
block|{
break|break
name|lab9
break|;
block|}
name|cursor
operator|--
expr_stmt|;
comment|// ], line 152
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// delete, line 152
name|slice_del
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_9
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|stem
specifier|public
name|boolean
name|stem
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_3
decl_stmt|;
name|int
name|v_4
decl_stmt|;
comment|// (, line 157
comment|// do, line 159
name|v_1
operator|=
name|cursor
expr_stmt|;
name|lab0
label|:
do|do
block|{
comment|// call prelude, line 159
if|if
condition|(
operator|!
name|r_prelude
argument_list|()
condition|)
block|{
break|break
name|lab0
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_1
expr_stmt|;
comment|// do, line 160
name|v_2
operator|=
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
comment|// call mark_regions, line 160
if|if
condition|(
operator|!
name|r_mark_regions
argument_list|()
condition|)
block|{
break|break
name|lab1
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_2
expr_stmt|;
comment|// backwards, line 161
name|limit_backward
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|limit
expr_stmt|;
comment|// do, line 162
name|v_3
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab2
label|:
do|do
block|{
comment|// call standard_suffix, line 162
if|if
condition|(
operator|!
name|r_standard_suffix
argument_list|()
condition|)
block|{
break|break
name|lab2
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
name|cursor
operator|=
name|limit_backward
expr_stmt|;
comment|// do, line 163
name|v_4
operator|=
name|cursor
expr_stmt|;
name|lab3
label|:
do|do
block|{
comment|// call postlude, line 163
if|if
condition|(
operator|!
name|r_postlude
argument_list|()
condition|)
block|{
break|break
name|lab3
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_4
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
