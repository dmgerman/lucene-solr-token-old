begin_unit
begin_comment
comment|// This file was generated automatically by the Snowball to Java compiler
end_comment
begin_package
DECL|package|org.tartarus.snowball.ext
package|package
name|org
operator|.
name|tartarus
operator|.
name|snowball
operator|.
name|ext
package|;
end_package
begin_import
import|import
name|org
operator|.
name|tartarus
operator|.
name|snowball
operator|.
name|SnowballProgram
import|;
end_import
begin_import
import|import
name|org
operator|.
name|tartarus
operator|.
name|snowball
operator|.
name|Among
import|;
end_import
begin_comment
comment|/**  * Generated class implementing code defined by a snowball script.  */
end_comment
begin_class
DECL|class|EnglishStemmer
specifier|public
class|class
name|EnglishStemmer
extends|extends
name|SnowballProgram
block|{
DECL|field|a_0
specifier|private
name|Among
name|a_0
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"arsen"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"commun"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"gener"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_1
specifier|private
name|Among
name|a_1
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"'"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"'s'"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"'s"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_2
specifier|private
name|Among
name|a_2
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"ied"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"s"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ies"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"sses"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ss"
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"us"
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_3
specifier|private
name|Among
name|a_3
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|""
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"bb"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"dd"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ff"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"gg"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"bl"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"mm"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"nn"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"pp"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"rr"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"at"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"tt"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"iz"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_4
specifier|private
name|Among
name|a_4
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"ed"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"eed"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ing"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"edly"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"eedly"
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ingly"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_5
specifier|private
name|Among
name|a_5
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"anci"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"enci"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ogi"
argument_list|,
operator|-
literal|1
argument_list|,
literal|13
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"li"
argument_list|,
operator|-
literal|1
argument_list|,
literal|16
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"bli"
argument_list|,
literal|3
argument_list|,
literal|12
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"abli"
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"alli"
argument_list|,
literal|3
argument_list|,
literal|8
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"fulli"
argument_list|,
literal|3
argument_list|,
literal|14
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"lessli"
argument_list|,
literal|3
argument_list|,
literal|15
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ousli"
argument_list|,
literal|3
argument_list|,
literal|10
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"entli"
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"aliti"
argument_list|,
operator|-
literal|1
argument_list|,
literal|8
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"biliti"
argument_list|,
operator|-
literal|1
argument_list|,
literal|12
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"iviti"
argument_list|,
operator|-
literal|1
argument_list|,
literal|11
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"tional"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ational"
argument_list|,
literal|14
argument_list|,
literal|7
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"alism"
argument_list|,
operator|-
literal|1
argument_list|,
literal|8
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ation"
argument_list|,
operator|-
literal|1
argument_list|,
literal|7
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ization"
argument_list|,
literal|17
argument_list|,
literal|6
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"izer"
argument_list|,
operator|-
literal|1
argument_list|,
literal|6
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ator"
argument_list|,
operator|-
literal|1
argument_list|,
literal|7
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"iveness"
argument_list|,
operator|-
literal|1
argument_list|,
literal|11
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"fulness"
argument_list|,
operator|-
literal|1
argument_list|,
literal|9
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ousness"
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_6
specifier|private
name|Among
name|a_6
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"icate"
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ative"
argument_list|,
operator|-
literal|1
argument_list|,
literal|6
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"alize"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"iciti"
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ical"
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"tional"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ational"
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ful"
argument_list|,
operator|-
literal|1
argument_list|,
literal|5
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ness"
argument_list|,
operator|-
literal|1
argument_list|,
literal|5
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_7
specifier|private
name|Among
name|a_7
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"ic"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ance"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ence"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"able"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ible"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ate"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ive"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ize"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"iti"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"al"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ism"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ion"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"er"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ous"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ant"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ent"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ment"
argument_list|,
literal|15
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ement"
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_8
specifier|private
name|Among
name|a_8
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"e"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"l"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_9
specifier|private
name|Among
name|a_9
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"succeed"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"proceed"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"exceed"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"canning"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"inning"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"earring"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"herring"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"outing"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_10
specifier|private
name|Among
name|a_10
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"andes"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"atlas"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"bias"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"cosmos"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"dying"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"early"
argument_list|,
operator|-
literal|1
argument_list|,
literal|9
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"gently"
argument_list|,
operator|-
literal|1
argument_list|,
literal|7
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"howe"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"idly"
argument_list|,
operator|-
literal|1
argument_list|,
literal|6
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"lying"
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"news"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"only"
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"singly"
argument_list|,
operator|-
literal|1
argument_list|,
literal|11
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"skies"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"skis"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"sky"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"tying"
argument_list|,
operator|-
literal|1
argument_list|,
literal|5
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ugly"
argument_list|,
operator|-
literal|1
argument_list|,
literal|8
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|g_v
specifier|private
specifier|static
specifier|final
name|char
name|g_v
index|[]
init|=
block|{
literal|17
block|,
literal|65
block|,
literal|16
block|,
literal|1
block|}
decl_stmt|;
DECL|field|g_v_WXY
specifier|private
specifier|static
specifier|final
name|char
name|g_v_WXY
index|[]
init|=
block|{
literal|1
block|,
literal|17
block|,
literal|65
block|,
literal|208
block|,
literal|1
block|}
decl_stmt|;
DECL|field|g_valid_LI
specifier|private
specifier|static
specifier|final
name|char
name|g_valid_LI
index|[]
init|=
block|{
literal|55
block|,
literal|141
block|,
literal|2
block|}
decl_stmt|;
DECL|field|B_Y_found
specifier|private
name|boolean
name|B_Y_found
decl_stmt|;
DECL|field|I_p2
specifier|private
name|int
name|I_p2
decl_stmt|;
DECL|field|I_p1
specifier|private
name|int
name|I_p1
decl_stmt|;
DECL|method|copy_from
specifier|private
name|void
name|copy_from
parameter_list|(
name|EnglishStemmer
name|other
parameter_list|)
block|{
name|B_Y_found
operator|=
name|other
operator|.
name|B_Y_found
expr_stmt|;
name|I_p2
operator|=
name|other
operator|.
name|I_p2
expr_stmt|;
name|I_p1
operator|=
name|other
operator|.
name|I_p1
expr_stmt|;
name|super
operator|.
name|copy_from
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
DECL|method|r_prelude
specifier|private
name|boolean
name|r_prelude
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_3
decl_stmt|;
name|int
name|v_4
decl_stmt|;
name|int
name|v_5
decl_stmt|;
comment|// (, line 25
comment|// unset Y_found, line 26
name|B_Y_found
operator|=
literal|false
expr_stmt|;
comment|// do, line 27
name|v_1
operator|=
name|cursor
expr_stmt|;
name|lab0
label|:
do|do
block|{
comment|// (, line 27
comment|// [, line 27
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 27
if|if
condition|(
operator|!
operator|(
name|eq_s
argument_list|(
literal|1
argument_list|,
literal|"'"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab0
break|;
block|}
comment|// ], line 27
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// delete, line 27
name|slice_del
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_1
expr_stmt|;
comment|// do, line 28
name|v_2
operator|=
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
comment|// (, line 28
comment|// [, line 28
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 28
if|if
condition|(
operator|!
operator|(
name|eq_s
argument_list|(
literal|1
argument_list|,
literal|"y"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab1
break|;
block|}
comment|// ], line 28
name|ket
operator|=
name|cursor
expr_stmt|;
comment|//<-, line 28
name|slice_from
argument_list|(
literal|"Y"
argument_list|)
expr_stmt|;
comment|// set Y_found, line 28
name|B_Y_found
operator|=
literal|true
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_2
expr_stmt|;
comment|// do, line 29
name|v_3
operator|=
name|cursor
expr_stmt|;
name|lab2
label|:
do|do
block|{
comment|// repeat, line 29
name|replab3
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_4
operator|=
name|cursor
expr_stmt|;
name|lab4
label|:
do|do
block|{
comment|// (, line 29
comment|// goto, line 29
name|golab5
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_5
operator|=
name|cursor
expr_stmt|;
name|lab6
label|:
do|do
block|{
comment|// (, line 29
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab6
break|;
block|}
comment|// [, line 29
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 29
if|if
condition|(
operator|!
operator|(
name|eq_s
argument_list|(
literal|1
argument_list|,
literal|"y"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab6
break|;
block|}
comment|// ], line 29
name|ket
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|v_5
expr_stmt|;
break|break
name|golab5
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_5
expr_stmt|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab4
break|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|//<-, line 29
name|slice_from
argument_list|(
literal|"Y"
argument_list|)
expr_stmt|;
comment|// set Y_found, line 29
name|B_Y_found
operator|=
literal|true
expr_stmt|;
continue|continue
name|replab3
continue|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_4
expr_stmt|;
break|break
name|replab3
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_3
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_mark_regions
specifier|private
name|boolean
name|r_mark_regions
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
comment|// (, line 32
name|I_p1
operator|=
name|limit
expr_stmt|;
name|I_p2
operator|=
name|limit
expr_stmt|;
comment|// do, line 35
name|v_1
operator|=
name|cursor
expr_stmt|;
name|lab0
label|:
do|do
block|{
comment|// (, line 35
comment|// or, line 41
name|lab1
label|:
do|do
block|{
name|v_2
operator|=
name|cursor
expr_stmt|;
name|lab2
label|:
do|do
block|{
comment|// among, line 36
if|if
condition|(
name|find_among
argument_list|(
name|a_0
argument_list|,
literal|3
argument_list|)
operator|==
literal|0
condition|)
block|{
break|break
name|lab2
break|;
block|}
break|break
name|lab1
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_2
expr_stmt|;
comment|// (, line 41
comment|// gopast, line 41
name|golab3
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab4
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab4
break|;
block|}
break|break
name|golab3
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab0
break|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|// gopast, line 41
name|golab5
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab6
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|out_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab6
break|;
block|}
break|break
name|golab5
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab0
break|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
comment|// setmark p1, line 42
name|I_p1
operator|=
name|cursor
expr_stmt|;
comment|// gopast, line 43
name|golab7
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab8
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab8
break|;
block|}
break|break
name|golab7
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab0
break|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|// gopast, line 43
name|golab9
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab10
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|out_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab10
break|;
block|}
break|break
name|golab9
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab0
break|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|// setmark p2, line 43
name|I_p2
operator|=
name|cursor
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_1
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_shortv
specifier|private
name|boolean
name|r_shortv
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
comment|// (, line 49
comment|// or, line 51
name|lab0
label|:
do|do
block|{
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
comment|// (, line 50
if|if
condition|(
operator|!
operator|(
name|out_grouping_b
argument_list|(
name|g_v_WXY
argument_list|,
literal|89
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab1
break|;
block|}
if|if
condition|(
operator|!
operator|(
name|in_grouping_b
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab1
break|;
block|}
if|if
condition|(
operator|!
operator|(
name|out_grouping_b
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab1
break|;
block|}
break|break
name|lab0
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
comment|// (, line 52
if|if
condition|(
operator|!
operator|(
name|out_grouping_b
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|in_grouping_b
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// atlimit, line 52
if|if
condition|(
name|cursor
operator|>
name|limit_backward
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
return|return
literal|true
return|;
block|}
DECL|method|r_R1
specifier|private
name|boolean
name|r_R1
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
name|I_p1
operator|<=
name|cursor
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_R2
specifier|private
name|boolean
name|r_R2
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
name|I_p2
operator|<=
name|cursor
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_Step_1a
specifier|private
name|boolean
name|r_Step_1a
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
comment|// (, line 58
comment|// try, line 59
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab0
label|:
do|do
block|{
comment|// (, line 59
comment|// [, line 60
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 60
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
break|break
name|lab0
break|;
block|}
comment|// ], line 60
name|bra
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
break|break
name|lab0
break|;
case|case
literal|1
case|:
comment|// (, line 62
comment|// delete, line 62
name|slice_del
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
comment|// [, line 65
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 65
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_2
argument_list|,
literal|6
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ], line 65
name|bra
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 66
comment|//<-, line 66
name|slice_from
argument_list|(
literal|"ss"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 68
comment|// or, line 68
name|lab1
label|:
do|do
block|{
name|v_2
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab2
label|:
do|do
block|{
comment|// (, line 68
comment|// hop, line 68
block|{
name|int
name|c
init|=
name|cursor
operator|-
literal|2
decl_stmt|;
if|if
condition|(
name|limit_backward
operator|>
name|c
operator|||
name|c
operator|>
name|limit
condition|)
block|{
break|break
name|lab2
break|;
block|}
name|cursor
operator|=
name|c
expr_stmt|;
block|}
comment|//<-, line 68
name|slice_from
argument_list|(
literal|"i"
argument_list|)
expr_stmt|;
break|break
name|lab1
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_2
expr_stmt|;
comment|//<-, line 68
name|slice_from
argument_list|(
literal|"ie"
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break;
case|case
literal|3
case|:
comment|// (, line 69
comment|// next, line 69
if|if
condition|(
name|cursor
operator|<=
name|limit_backward
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|--
expr_stmt|;
comment|// gopast, line 69
name|golab3
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab4
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|in_grouping_b
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab4
break|;
block|}
break|break
name|golab3
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|cursor
operator|<=
name|limit_backward
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|--
expr_stmt|;
block|}
comment|// delete, line 69
name|slice_del
argument_list|()
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_Step_1b
specifier|private
name|boolean
name|r_Step_1b
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
name|int
name|v_1
decl_stmt|;
name|int
name|v_3
decl_stmt|;
name|int
name|v_4
decl_stmt|;
comment|// (, line 74
comment|// [, line 75
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 75
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_4
argument_list|,
literal|6
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ], line 75
name|bra
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 77
comment|// call R1, line 77
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//<-, line 77
name|slice_from
argument_list|(
literal|"ee"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 79
comment|// test, line 80
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// gopast, line 80
name|golab0
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab1
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|in_grouping_b
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab1
break|;
block|}
break|break
name|golab0
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|cursor
operator|<=
name|limit_backward
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|--
expr_stmt|;
block|}
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
comment|// delete, line 80
name|slice_del
argument_list|()
expr_stmt|;
comment|// test, line 81
name|v_3
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// substring, line 81
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_3
argument_list|,
literal|13
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 83
comment|//<+, line 83
block|{
name|int
name|c
init|=
name|cursor
decl_stmt|;
name|insert
argument_list|(
name|cursor
argument_list|,
name|cursor
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|c
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// (, line 86
comment|// [, line 86
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// next, line 86
if|if
condition|(
name|cursor
operator|<=
name|limit_backward
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|--
expr_stmt|;
comment|// ], line 86
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// delete, line 86
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// (, line 87
comment|// atmark, line 87
if|if
condition|(
name|cursor
operator|!=
name|I_p1
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// test, line 87
name|v_4
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// call shortv, line 87
if|if
condition|(
operator|!
name|r_shortv
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|limit
operator|-
name|v_4
expr_stmt|;
comment|//<+, line 87
block|{
name|int
name|c
init|=
name|cursor
decl_stmt|;
name|insert
argument_list|(
name|cursor
argument_list|,
name|cursor
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|c
expr_stmt|;
block|}
break|break;
block|}
break|break;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_Step_1c
specifier|private
name|boolean
name|r_Step_1c
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
comment|// (, line 93
comment|// [, line 94
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// or, line 94
name|lab0
label|:
do|do
block|{
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
comment|// literal, line 94
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"y"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab1
break|;
block|}
break|break
name|lab0
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
comment|// literal, line 94
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"Y"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
comment|// ], line 94
name|bra
operator|=
name|cursor
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|out_grouping_b
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|121
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// not, line 95
block|{
name|v_2
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab2
label|:
do|do
block|{
comment|// atlimit, line 95
if|if
condition|(
name|cursor
operator|>
name|limit_backward
condition|)
block|{
break|break
name|lab2
break|;
block|}
return|return
literal|false
return|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_2
expr_stmt|;
block|}
comment|//<-, line 96
name|slice_from
argument_list|(
literal|"i"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_Step_2
specifier|private
name|boolean
name|r_Step_2
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
comment|// (, line 99
comment|// [, line 100
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 100
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_5
argument_list|,
literal|24
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ], line 100
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// call R1, line 100
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 101
comment|//<-, line 101
name|slice_from
argument_list|(
literal|"tion"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 102
comment|//<-, line 102
name|slice_from
argument_list|(
literal|"ence"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// (, line 103
comment|//<-, line 103
name|slice_from
argument_list|(
literal|"ance"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// (, line 104
comment|//<-, line 104
name|slice_from
argument_list|(
literal|"able"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
comment|// (, line 105
comment|//<-, line 105
name|slice_from
argument_list|(
literal|"ent"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
comment|// (, line 107
comment|//<-, line 107
name|slice_from
argument_list|(
literal|"ize"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
comment|// (, line 109
comment|//<-, line 109
name|slice_from
argument_list|(
literal|"ate"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|8
case|:
comment|// (, line 111
comment|//<-, line 111
name|slice_from
argument_list|(
literal|"al"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|9
case|:
comment|// (, line 112
comment|//<-, line 112
name|slice_from
argument_list|(
literal|"ful"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|10
case|:
comment|// (, line 114
comment|//<-, line 114
name|slice_from
argument_list|(
literal|"ous"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|11
case|:
comment|// (, line 116
comment|//<-, line 116
name|slice_from
argument_list|(
literal|"ive"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|12
case|:
comment|// (, line 118
comment|//<-, line 118
name|slice_from
argument_list|(
literal|"ble"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|13
case|:
comment|// (, line 119
comment|// literal, line 119
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"l"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//<-, line 119
name|slice_from
argument_list|(
literal|"og"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|14
case|:
comment|// (, line 120
comment|//<-, line 120
name|slice_from
argument_list|(
literal|"ful"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|15
case|:
comment|// (, line 121
comment|//<-, line 121
name|slice_from
argument_list|(
literal|"less"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|16
case|:
comment|// (, line 122
if|if
condition|(
operator|!
operator|(
name|in_grouping_b
argument_list|(
name|g_valid_LI
argument_list|,
literal|99
argument_list|,
literal|116
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 122
name|slice_del
argument_list|()
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_Step_3
specifier|private
name|boolean
name|r_Step_3
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
comment|// (, line 126
comment|// [, line 127
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 127
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_6
argument_list|,
literal|9
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ], line 127
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// call R1, line 127
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 128
comment|//<-, line 128
name|slice_from
argument_list|(
literal|"tion"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 129
comment|//<-, line 129
name|slice_from
argument_list|(
literal|"ate"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// (, line 130
comment|//<-, line 130
name|slice_from
argument_list|(
literal|"al"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// (, line 132
comment|//<-, line 132
name|slice_from
argument_list|(
literal|"ic"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
comment|// (, line 134
comment|// delete, line 134
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|6
case|:
comment|// (, line 136
comment|// call R2, line 136
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 136
name|slice_del
argument_list|()
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_Step_4
specifier|private
name|boolean
name|r_Step_4
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
name|int
name|v_1
decl_stmt|;
comment|// (, line 140
comment|// [, line 141
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 141
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_7
argument_list|,
literal|18
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ], line 141
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// call R2, line 141
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 144
comment|// delete, line 144
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 145
comment|// or, line 145
name|lab0
label|:
do|do
block|{
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
comment|// literal, line 145
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"s"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab1
break|;
block|}
break|break
name|lab0
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
comment|// literal, line 145
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"t"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
comment|// delete, line 145
name|slice_del
argument_list|()
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_Step_5
specifier|private
name|boolean
name|r_Step_5
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
comment|// (, line 149
comment|// [, line 150
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 150
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_8
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ], line 150
name|bra
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 151
comment|// or, line 151
name|lab0
label|:
do|do
block|{
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
comment|// call R2, line 151
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
break|break
name|lab1
break|;
block|}
break|break
name|lab0
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
comment|// (, line 151
comment|// call R1, line 151
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// not, line 151
block|{
name|v_2
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab2
label|:
do|do
block|{
comment|// call shortv, line 151
if|if
condition|(
operator|!
name|r_shortv
argument_list|()
condition|)
block|{
break|break
name|lab2
break|;
block|}
return|return
literal|false
return|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_2
expr_stmt|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
comment|// delete, line 151
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 152
comment|// call R2, line 152
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// literal, line 152
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"l"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 152
name|slice_del
argument_list|()
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_exception2
specifier|private
name|boolean
name|r_exception2
parameter_list|()
block|{
comment|// (, line 156
comment|// [, line 158
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 158
if|if
condition|(
name|find_among_b
argument_list|(
name|a_9
argument_list|,
literal|8
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ], line 158
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// atlimit, line 158
if|if
condition|(
name|cursor
operator|>
name|limit_backward
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_exception1
specifier|private
name|boolean
name|r_exception1
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
comment|// (, line 168
comment|// [, line 170
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 170
name|among_var
operator|=
name|find_among
argument_list|(
name|a_10
argument_list|,
literal|18
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ], line 170
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// atlimit, line 170
if|if
condition|(
name|cursor
operator|<
name|limit
condition|)
block|{
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 174
comment|//<-, line 174
name|slice_from
argument_list|(
literal|"ski"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 175
comment|//<-, line 175
name|slice_from
argument_list|(
literal|"sky"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// (, line 176
comment|//<-, line 176
name|slice_from
argument_list|(
literal|"die"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// (, line 177
comment|//<-, line 177
name|slice_from
argument_list|(
literal|"lie"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
comment|// (, line 178
comment|//<-, line 178
name|slice_from
argument_list|(
literal|"tie"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
comment|// (, line 182
comment|//<-, line 182
name|slice_from
argument_list|(
literal|"idl"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
comment|// (, line 183
comment|//<-, line 183
name|slice_from
argument_list|(
literal|"gentl"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|8
case|:
comment|// (, line 184
comment|//<-, line 184
name|slice_from
argument_list|(
literal|"ugli"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|9
case|:
comment|// (, line 185
comment|//<-, line 185
name|slice_from
argument_list|(
literal|"earli"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|10
case|:
comment|// (, line 186
comment|//<-, line 186
name|slice_from
argument_list|(
literal|"onli"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|11
case|:
comment|// (, line 187
comment|//<-, line 187
name|slice_from
argument_list|(
literal|"singl"
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_postlude
specifier|private
name|boolean
name|r_postlude
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
comment|// (, line 203
comment|// Boolean test Y_found, line 203
if|if
condition|(
operator|!
operator|(
name|B_Y_found
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// repeat, line 203
name|replab0
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_1
operator|=
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
comment|// (, line 203
comment|// goto, line 203
name|golab2
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_2
operator|=
name|cursor
expr_stmt|;
name|lab3
label|:
do|do
block|{
comment|// (, line 203
comment|// [, line 203
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 203
if|if
condition|(
operator|!
operator|(
name|eq_s
argument_list|(
literal|1
argument_list|,
literal|"Y"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab3
break|;
block|}
comment|// ], line 203
name|ket
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|v_2
expr_stmt|;
break|break
name|golab2
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_2
expr_stmt|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab1
break|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|//<-, line 203
name|slice_from
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
continue|continue
name|replab0
continue|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_1
expr_stmt|;
break|break
name|replab0
break|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|stem
specifier|public
name|boolean
name|stem
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_3
decl_stmt|;
name|int
name|v_4
decl_stmt|;
name|int
name|v_5
decl_stmt|;
name|int
name|v_6
decl_stmt|;
name|int
name|v_7
decl_stmt|;
name|int
name|v_8
decl_stmt|;
name|int
name|v_9
decl_stmt|;
name|int
name|v_10
decl_stmt|;
name|int
name|v_11
decl_stmt|;
name|int
name|v_12
decl_stmt|;
name|int
name|v_13
decl_stmt|;
comment|// (, line 205
comment|// or, line 207
name|lab0
label|:
do|do
block|{
name|v_1
operator|=
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
comment|// call exception1, line 207
if|if
condition|(
operator|!
name|r_exception1
argument_list|()
condition|)
block|{
break|break
name|lab1
break|;
block|}
break|break
name|lab0
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_1
expr_stmt|;
name|lab2
label|:
do|do
block|{
comment|// not, line 208
block|{
name|v_2
operator|=
name|cursor
expr_stmt|;
name|lab3
label|:
do|do
block|{
comment|// hop, line 208
block|{
name|int
name|c
init|=
name|cursor
operator|+
literal|3
decl_stmt|;
if|if
condition|(
literal|0
operator|>
name|c
operator|||
name|c
operator|>
name|limit
condition|)
block|{
break|break
name|lab3
break|;
block|}
name|cursor
operator|=
name|c
expr_stmt|;
block|}
break|break
name|lab2
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_2
expr_stmt|;
block|}
break|break
name|lab0
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_1
expr_stmt|;
comment|// (, line 208
comment|// do, line 209
name|v_3
operator|=
name|cursor
expr_stmt|;
name|lab4
label|:
do|do
block|{
comment|// call prelude, line 209
if|if
condition|(
operator|!
name|r_prelude
argument_list|()
condition|)
block|{
break|break
name|lab4
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_3
expr_stmt|;
comment|// do, line 210
name|v_4
operator|=
name|cursor
expr_stmt|;
name|lab5
label|:
do|do
block|{
comment|// call mark_regions, line 210
if|if
condition|(
operator|!
name|r_mark_regions
argument_list|()
condition|)
block|{
break|break
name|lab5
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_4
expr_stmt|;
comment|// backwards, line 211
name|limit_backward
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|limit
expr_stmt|;
comment|// (, line 211
comment|// do, line 213
name|v_5
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab6
label|:
do|do
block|{
comment|// call Step_1a, line 213
if|if
condition|(
operator|!
name|r_Step_1a
argument_list|()
condition|)
block|{
break|break
name|lab6
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_5
expr_stmt|;
comment|// or, line 215
name|lab7
label|:
do|do
block|{
name|v_6
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab8
label|:
do|do
block|{
comment|// call exception2, line 215
if|if
condition|(
operator|!
name|r_exception2
argument_list|()
condition|)
block|{
break|break
name|lab8
break|;
block|}
break|break
name|lab7
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_6
expr_stmt|;
comment|// (, line 215
comment|// do, line 217
name|v_7
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab9
label|:
do|do
block|{
comment|// call Step_1b, line 217
if|if
condition|(
operator|!
name|r_Step_1b
argument_list|()
condition|)
block|{
break|break
name|lab9
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_7
expr_stmt|;
comment|// do, line 218
name|v_8
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab10
label|:
do|do
block|{
comment|// call Step_1c, line 218
if|if
condition|(
operator|!
name|r_Step_1c
argument_list|()
condition|)
block|{
break|break
name|lab10
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_8
expr_stmt|;
comment|// do, line 220
name|v_9
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab11
label|:
do|do
block|{
comment|// call Step_2, line 220
if|if
condition|(
operator|!
name|r_Step_2
argument_list|()
condition|)
block|{
break|break
name|lab11
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_9
expr_stmt|;
comment|// do, line 221
name|v_10
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab12
label|:
do|do
block|{
comment|// call Step_3, line 221
if|if
condition|(
operator|!
name|r_Step_3
argument_list|()
condition|)
block|{
break|break
name|lab12
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_10
expr_stmt|;
comment|// do, line 222
name|v_11
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab13
label|:
do|do
block|{
comment|// call Step_4, line 222
if|if
condition|(
operator|!
name|r_Step_4
argument_list|()
condition|)
block|{
break|break
name|lab13
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_11
expr_stmt|;
comment|// do, line 224
name|v_12
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab14
label|:
do|do
block|{
comment|// call Step_5, line 224
if|if
condition|(
operator|!
name|r_Step_5
argument_list|()
condition|)
block|{
break|break
name|lab14
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_12
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit_backward
expr_stmt|;
comment|// do, line 227
name|v_13
operator|=
name|cursor
expr_stmt|;
name|lab15
label|:
do|do
block|{
comment|// call postlude, line 227
if|if
condition|(
operator|!
name|r_postlude
argument_list|()
condition|)
block|{
break|break
name|lab15
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_13
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
