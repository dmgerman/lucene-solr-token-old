begin_unit
begin_comment
comment|// This file was generated automatically by the Snowball to Java compiler
end_comment
begin_package
DECL|package|net.sf.snowball.ext
package|package
name|net
operator|.
name|sf
operator|.
name|snowball
operator|.
name|ext
package|;
end_package
begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|snowball
operator|.
name|SnowballProgram
import|;
end_import
begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|snowball
operator|.
name|Among
import|;
end_import
begin_comment
comment|/**  * Generated class implementing code defined by a snowball script.  */
end_comment
begin_class
DECL|class|FrenchStemmer
specifier|public
class|class
name|FrenchStemmer
extends|extends
name|SnowballProgram
block|{
DECL|field|a_0
specifier|private
name|Among
name|a_0
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|""
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"I"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"U"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"Y"
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_1
specifier|private
name|Among
name|a_1
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"iqU"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"abl"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"I\u00E8r"
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"i\u00E8r"
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"eus"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"iv"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_2
specifier|private
name|Among
name|a_2
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"ic"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"abil"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"iv"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_3
specifier|private
name|Among
name|a_3
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"iqUe"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"atrice"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ance"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ence"
argument_list|,
operator|-
literal|1
argument_list|,
literal|5
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"logie"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"able"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"isme"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"euse"
argument_list|,
operator|-
literal|1
argument_list|,
literal|11
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"iste"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ive"
argument_list|,
operator|-
literal|1
argument_list|,
literal|8
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"if"
argument_list|,
operator|-
literal|1
argument_list|,
literal|8
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"usion"
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ation"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ution"
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ateur"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"iqUes"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"atrices"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ances"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ences"
argument_list|,
operator|-
literal|1
argument_list|,
literal|5
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"logies"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ables"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ismes"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"euses"
argument_list|,
operator|-
literal|1
argument_list|,
literal|11
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"istes"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ives"
argument_list|,
operator|-
literal|1
argument_list|,
literal|8
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ifs"
argument_list|,
operator|-
literal|1
argument_list|,
literal|8
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"usions"
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ations"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"utions"
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ateurs"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ments"
argument_list|,
operator|-
literal|1
argument_list|,
literal|15
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ements"
argument_list|,
literal|30
argument_list|,
literal|6
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"issements"
argument_list|,
literal|31
argument_list|,
literal|12
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"it\u00E9s"
argument_list|,
operator|-
literal|1
argument_list|,
literal|7
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ment"
argument_list|,
operator|-
literal|1
argument_list|,
literal|15
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ement"
argument_list|,
literal|34
argument_list|,
literal|6
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"issement"
argument_list|,
literal|35
argument_list|,
literal|12
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"amment"
argument_list|,
literal|34
argument_list|,
literal|13
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"emment"
argument_list|,
literal|34
argument_list|,
literal|14
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"aux"
argument_list|,
operator|-
literal|1
argument_list|,
literal|10
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"eaux"
argument_list|,
literal|39
argument_list|,
literal|9
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"eux"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"it\u00E9"
argument_list|,
operator|-
literal|1
argument_list|,
literal|7
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_4
specifier|private
name|Among
name|a_4
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"ira"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ie"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"isse"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"issante"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"i"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"irai"
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ir"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"iras"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ies"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00EEmes"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"isses"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"issantes"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00EEtes"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"is"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"irais"
argument_list|,
literal|13
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"issais"
argument_list|,
literal|13
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"irions"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"issions"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"irons"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"issons"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"issants"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"it"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"irait"
argument_list|,
literal|21
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"issait"
argument_list|,
literal|21
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"issant"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"iraIent"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"issaIent"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"irent"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"issent"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"iront"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00EEt"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"iriez"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"issiez"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"irez"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"issez"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_5
specifier|private
name|Among
name|a_5
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"a"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"era"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"asse"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ante"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E9e"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ai"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"erai"
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"er"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"as"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"eras"
argument_list|,
literal|8
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E2mes"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"asses"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"antes"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E2tes"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E9es"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ais"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"erais"
argument_list|,
literal|15
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ions"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"erions"
argument_list|,
literal|17
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"assions"
argument_list|,
literal|17
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"erons"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ants"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E9s"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ait"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"erait"
argument_list|,
literal|23
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ant"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"aIent"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"eraIent"
argument_list|,
literal|26
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E8rent"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"assent"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"eront"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E2t"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ez"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"iez"
argument_list|,
literal|32
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"eriez"
argument_list|,
literal|33
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"assiez"
argument_list|,
literal|33
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"erez"
argument_list|,
literal|32
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00E9"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_6
specifier|private
name|Among
name|a_6
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"e"
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"I\u00E8re"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"i\u00E8re"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ion"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"Ier"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ier"
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"\u00EB"
argument_list|,
operator|-
literal|1
argument_list|,
literal|4
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|a_7
specifier|private
name|Among
name|a_7
index|[]
init|=
block|{
operator|new
name|Among
argument_list|(
literal|"ell"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"eill"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"enn"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"onn"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|Among
argument_list|(
literal|"ett"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|""
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
DECL|field|g_v
specifier|private
specifier|static
specifier|final
name|char
name|g_v
index|[]
init|=
block|{
literal|17
block|,
literal|65
block|,
literal|16
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|128
block|,
literal|130
block|,
literal|103
block|,
literal|8
block|,
literal|5
block|}
decl_stmt|;
DECL|field|g_keep_with_s
specifier|private
specifier|static
specifier|final
name|char
name|g_keep_with_s
index|[]
init|=
block|{
literal|1
block|,
literal|65
block|,
literal|20
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|128
block|}
decl_stmt|;
DECL|field|I_p2
specifier|private
name|int
name|I_p2
decl_stmt|;
DECL|field|I_p1
specifier|private
name|int
name|I_p1
decl_stmt|;
DECL|field|I_pV
specifier|private
name|int
name|I_pV
decl_stmt|;
DECL|method|copy_from
specifier|private
name|void
name|copy_from
parameter_list|(
name|FrenchStemmer
name|other
parameter_list|)
block|{
name|I_p2
operator|=
name|other
operator|.
name|I_p2
expr_stmt|;
name|I_p1
operator|=
name|other
operator|.
name|I_p1
expr_stmt|;
name|I_pV
operator|=
name|other
operator|.
name|I_pV
expr_stmt|;
name|super
operator|.
name|copy_from
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
DECL|method|r_prelude
specifier|private
name|boolean
name|r_prelude
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_3
decl_stmt|;
name|int
name|v_4
decl_stmt|;
comment|// repeat, line 38
name|replab0
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_1
operator|=
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
comment|// goto, line 38
name|golab2
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_2
operator|=
name|cursor
expr_stmt|;
name|lab3
label|:
do|do
block|{
comment|// (, line 38
comment|// or, line 44
name|lab4
label|:
do|do
block|{
name|v_3
operator|=
name|cursor
expr_stmt|;
name|lab5
label|:
do|do
block|{
comment|// (, line 40
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|251
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab5
break|;
block|}
comment|// [, line 40
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// or, line 40
name|lab6
label|:
do|do
block|{
name|v_4
operator|=
name|cursor
expr_stmt|;
name|lab7
label|:
do|do
block|{
comment|// (, line 40
comment|// literal, line 40
if|if
condition|(
operator|!
operator|(
name|eq_s
argument_list|(
literal|1
argument_list|,
literal|"u"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab7
break|;
block|}
comment|// ], line 40
name|ket
operator|=
name|cursor
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|251
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab7
break|;
block|}
comment|//<-, line 40
name|slice_from
argument_list|(
literal|"U"
argument_list|)
expr_stmt|;
break|break
name|lab6
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_4
expr_stmt|;
name|lab8
label|:
do|do
block|{
comment|// (, line 41
comment|// literal, line 41
if|if
condition|(
operator|!
operator|(
name|eq_s
argument_list|(
literal|1
argument_list|,
literal|"i"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab8
break|;
block|}
comment|// ], line 41
name|ket
operator|=
name|cursor
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|251
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab8
break|;
block|}
comment|//<-, line 41
name|slice_from
argument_list|(
literal|"I"
argument_list|)
expr_stmt|;
break|break
name|lab6
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_4
expr_stmt|;
comment|// (, line 42
comment|// literal, line 42
if|if
condition|(
operator|!
operator|(
name|eq_s
argument_list|(
literal|1
argument_list|,
literal|"y"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab5
break|;
block|}
comment|// ], line 42
name|ket
operator|=
name|cursor
expr_stmt|;
comment|//<-, line 42
name|slice_from
argument_list|(
literal|"Y"
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break
name|lab4
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_3
expr_stmt|;
name|lab9
label|:
do|do
block|{
comment|// (, line 45
comment|// [, line 45
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 45
if|if
condition|(
operator|!
operator|(
name|eq_s
argument_list|(
literal|1
argument_list|,
literal|"y"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab9
break|;
block|}
comment|// ], line 45
name|ket
operator|=
name|cursor
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|251
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab9
break|;
block|}
comment|//<-, line 45
name|slice_from
argument_list|(
literal|"Y"
argument_list|)
expr_stmt|;
break|break
name|lab4
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_3
expr_stmt|;
comment|// (, line 47
comment|// literal, line 47
if|if
condition|(
operator|!
operator|(
name|eq_s
argument_list|(
literal|1
argument_list|,
literal|"q"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab3
break|;
block|}
comment|// [, line 47
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 47
if|if
condition|(
operator|!
operator|(
name|eq_s
argument_list|(
literal|1
argument_list|,
literal|"u"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab3
break|;
block|}
comment|// ], line 47
name|ket
operator|=
name|cursor
expr_stmt|;
comment|//<-, line 47
name|slice_from
argument_list|(
literal|"U"
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_2
expr_stmt|;
break|break
name|golab2
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_2
expr_stmt|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab1
break|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
continue|continue
name|replab0
continue|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_1
expr_stmt|;
break|break
name|replab0
break|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_mark_regions
specifier|private
name|boolean
name|r_mark_regions
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_4
decl_stmt|;
comment|// (, line 50
name|I_pV
operator|=
name|limit
expr_stmt|;
name|I_p1
operator|=
name|limit
expr_stmt|;
name|I_p2
operator|=
name|limit
expr_stmt|;
comment|// do, line 56
name|v_1
operator|=
name|cursor
expr_stmt|;
name|lab0
label|:
do|do
block|{
comment|// (, line 56
comment|// or, line 57
name|lab1
label|:
do|do
block|{
name|v_2
operator|=
name|cursor
expr_stmt|;
name|lab2
label|:
do|do
block|{
comment|// (, line 57
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|251
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab2
break|;
block|}
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|251
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab2
break|;
block|}
comment|// next, line 57
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab2
break|;
block|}
name|cursor
operator|++
expr_stmt|;
break|break
name|lab1
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_2
expr_stmt|;
comment|// (, line 57
comment|// next, line 57
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab0
break|;
block|}
name|cursor
operator|++
expr_stmt|;
comment|// gopast, line 57
name|golab3
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab4
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|251
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab4
break|;
block|}
break|break
name|golab3
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab0
break|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
comment|// setmark pV, line 58
name|I_pV
operator|=
name|cursor
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_1
expr_stmt|;
comment|// do, line 60
name|v_4
operator|=
name|cursor
expr_stmt|;
name|lab5
label|:
do|do
block|{
comment|// (, line 60
comment|// gopast, line 61
name|golab6
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab7
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|251
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab7
break|;
block|}
break|break
name|golab6
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab5
break|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|// gopast, line 61
name|golab8
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab9
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|out_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|251
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab9
break|;
block|}
break|break
name|golab8
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab5
break|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|// setmark p1, line 61
name|I_p1
operator|=
name|cursor
expr_stmt|;
comment|// gopast, line 62
name|golab10
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab11
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|in_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|251
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab11
break|;
block|}
break|break
name|golab10
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab5
break|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|// gopast, line 62
name|golab12
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab13
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|out_grouping
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|251
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab13
break|;
block|}
break|break
name|golab12
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab5
break|;
block|}
name|cursor
operator|++
expr_stmt|;
block|}
comment|// setmark p2, line 62
name|I_p2
operator|=
name|cursor
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_4
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_postlude
specifier|private
name|boolean
name|r_postlude
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
name|int
name|v_1
decl_stmt|;
comment|// repeat, line 66
name|replab0
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|v_1
operator|=
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
comment|// (, line 66
comment|// [, line 68
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 68
name|among_var
operator|=
name|find_among
argument_list|(
name|a_0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
break|break
name|lab1
break|;
block|}
comment|// ], line 68
name|ket
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
break|break
name|lab1
break|;
case|case
literal|1
case|:
comment|// (, line 69
comment|//<-, line 69
name|slice_from
argument_list|(
literal|"i"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 70
comment|//<-, line 70
name|slice_from
argument_list|(
literal|"u"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// (, line 71
comment|//<-, line 71
name|slice_from
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// (, line 72
comment|// next, line 72
if|if
condition|(
name|cursor
operator|>=
name|limit
condition|)
block|{
break|break
name|lab1
break|;
block|}
name|cursor
operator|++
expr_stmt|;
break|break;
block|}
continue|continue
name|replab0
continue|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_1
expr_stmt|;
break|break
name|replab0
break|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_RV
specifier|private
name|boolean
name|r_RV
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
name|I_pV
operator|<=
name|cursor
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_R1
specifier|private
name|boolean
name|r_R1
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
name|I_p1
operator|<=
name|cursor
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_R2
specifier|private
name|boolean
name|r_R2
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
name|I_p2
operator|<=
name|cursor
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_standard_suffix
specifier|private
name|boolean
name|r_standard_suffix
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_3
decl_stmt|;
name|int
name|v_4
decl_stmt|;
name|int
name|v_5
decl_stmt|;
name|int
name|v_6
decl_stmt|;
name|int
name|v_7
decl_stmt|;
name|int
name|v_8
decl_stmt|;
name|int
name|v_9
decl_stmt|;
name|int
name|v_10
decl_stmt|;
name|int
name|v_11
decl_stmt|;
comment|// (, line 82
comment|// [, line 83
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 83
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_3
argument_list|,
literal|43
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// ], line 83
name|bra
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 87
comment|// call R2, line 87
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 87
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 90
comment|// call R2, line 90
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 90
name|slice_del
argument_list|()
expr_stmt|;
comment|// try, line 91
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab0
label|:
do|do
block|{
comment|// (, line 91
comment|// [, line 91
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 91
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|2
argument_list|,
literal|"ic"
argument_list|)
operator|)
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
break|break
name|lab0
break|;
block|}
comment|// ], line 91
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// or, line 91
name|lab1
label|:
do|do
block|{
name|v_2
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab2
label|:
do|do
block|{
comment|// (, line 91
comment|// call R2, line 91
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
break|break
name|lab2
break|;
block|}
comment|// delete, line 91
name|slice_del
argument_list|()
expr_stmt|;
break|break
name|lab1
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_2
expr_stmt|;
comment|//<-, line 91
name|slice_from
argument_list|(
literal|"iqU"
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break;
case|case
literal|3
case|:
comment|// (, line 95
comment|// call R2, line 95
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//<-, line 95
name|slice_from
argument_list|(
literal|"log"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// (, line 98
comment|// call R2, line 98
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//<-, line 98
name|slice_from
argument_list|(
literal|"u"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
comment|// (, line 101
comment|// call R2, line 101
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//<-, line 101
name|slice_from
argument_list|(
literal|"ent"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
comment|// (, line 104
comment|// call RV, line 105
if|if
condition|(
operator|!
name|r_RV
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 105
name|slice_del
argument_list|()
expr_stmt|;
comment|// try, line 106
name|v_3
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab3
label|:
do|do
block|{
comment|// (, line 106
comment|// [, line 107
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 107
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_1
argument_list|,
literal|6
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
break|break
name|lab3
break|;
block|}
comment|// ], line 107
name|bra
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
break|break
name|lab3
break|;
case|case
literal|1
case|:
comment|// (, line 108
comment|// call R2, line 108
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
break|break
name|lab3
break|;
block|}
comment|// delete, line 108
name|slice_del
argument_list|()
expr_stmt|;
comment|// [, line 108
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 108
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|2
argument_list|,
literal|"at"
argument_list|)
operator|)
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
break|break
name|lab3
break|;
block|}
comment|// ], line 108
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// call R2, line 108
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
break|break
name|lab3
break|;
block|}
comment|// delete, line 108
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 109
comment|// or, line 109
name|lab4
label|:
do|do
block|{
name|v_4
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab5
label|:
do|do
block|{
comment|// (, line 109
comment|// call R2, line 109
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
break|break
name|lab5
break|;
block|}
comment|// delete, line 109
name|slice_del
argument_list|()
expr_stmt|;
break|break
name|lab4
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_4
expr_stmt|;
comment|// (, line 109
comment|// call R1, line 109
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
break|break
name|lab3
break|;
block|}
comment|//<-, line 109
name|slice_from
argument_list|(
literal|"eux"
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break;
case|case
literal|3
case|:
comment|// (, line 111
comment|// call R2, line 111
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
break|break
name|lab3
break|;
block|}
comment|// delete, line 111
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// (, line 113
comment|// call RV, line 113
if|if
condition|(
operator|!
name|r_RV
argument_list|()
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
break|break
name|lab3
break|;
block|}
comment|//<-, line 113
name|slice_from
argument_list|(
literal|"i"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break;
case|case
literal|7
case|:
comment|// (, line 119
comment|// call R2, line 120
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 120
name|slice_del
argument_list|()
expr_stmt|;
comment|// try, line 121
name|v_5
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab6
label|:
do|do
block|{
comment|// (, line 121
comment|// [, line 122
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 122
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_5
expr_stmt|;
break|break
name|lab6
break|;
block|}
comment|// ], line 122
name|bra
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
name|cursor
operator|=
name|limit
operator|-
name|v_5
expr_stmt|;
break|break
name|lab6
break|;
case|case
literal|1
case|:
comment|// (, line 123
comment|// or, line 123
name|lab7
label|:
do|do
block|{
name|v_6
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab8
label|:
do|do
block|{
comment|// (, line 123
comment|// call R2, line 123
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
break|break
name|lab8
break|;
block|}
comment|// delete, line 123
name|slice_del
argument_list|()
expr_stmt|;
break|break
name|lab7
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_6
expr_stmt|;
comment|//<-, line 123
name|slice_from
argument_list|(
literal|"abl"
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break;
case|case
literal|2
case|:
comment|// (, line 124
comment|// or, line 124
name|lab9
label|:
do|do
block|{
name|v_7
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab10
label|:
do|do
block|{
comment|// (, line 124
comment|// call R2, line 124
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
break|break
name|lab10
break|;
block|}
comment|// delete, line 124
name|slice_del
argument_list|()
expr_stmt|;
break|break
name|lab9
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_7
expr_stmt|;
comment|//<-, line 124
name|slice_from
argument_list|(
literal|"iqU"
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break;
case|case
literal|3
case|:
comment|// (, line 125
comment|// call R2, line 125
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_5
expr_stmt|;
break|break
name|lab6
break|;
block|}
comment|// delete, line 125
name|slice_del
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break;
case|case
literal|8
case|:
comment|// (, line 131
comment|// call R2, line 132
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 132
name|slice_del
argument_list|()
expr_stmt|;
comment|// try, line 133
name|v_8
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab11
label|:
do|do
block|{
comment|// (, line 133
comment|// [, line 133
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 133
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|2
argument_list|,
literal|"at"
argument_list|)
operator|)
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_8
expr_stmt|;
break|break
name|lab11
break|;
block|}
comment|// ], line 133
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// call R2, line 133
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_8
expr_stmt|;
break|break
name|lab11
break|;
block|}
comment|// delete, line 133
name|slice_del
argument_list|()
expr_stmt|;
comment|// [, line 133
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 133
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|2
argument_list|,
literal|"ic"
argument_list|)
operator|)
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_8
expr_stmt|;
break|break
name|lab11
break|;
block|}
comment|// ], line 133
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// or, line 133
name|lab12
label|:
do|do
block|{
name|v_9
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab13
label|:
do|do
block|{
comment|// (, line 133
comment|// call R2, line 133
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
break|break
name|lab13
break|;
block|}
comment|// delete, line 133
name|slice_del
argument_list|()
expr_stmt|;
break|break
name|lab12
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_9
expr_stmt|;
comment|//<-, line 133
name|slice_from
argument_list|(
literal|"iqU"
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break;
case|case
literal|9
case|:
comment|// (, line 135
comment|//<-, line 135
name|slice_from
argument_list|(
literal|"eau"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|10
case|:
comment|// (, line 136
comment|// call R1, line 136
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//<-, line 136
name|slice_from
argument_list|(
literal|"al"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|11
case|:
comment|// (, line 138
comment|// or, line 138
name|lab14
label|:
do|do
block|{
name|v_10
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab15
label|:
do|do
block|{
comment|// (, line 138
comment|// call R2, line 138
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
break|break
name|lab15
break|;
block|}
comment|// delete, line 138
name|slice_del
argument_list|()
expr_stmt|;
break|break
name|lab14
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_10
expr_stmt|;
comment|// (, line 138
comment|// call R1, line 138
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//<-, line 138
name|slice_from
argument_list|(
literal|"eux"
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break;
case|case
literal|12
case|:
comment|// (, line 141
comment|// call R1, line 141
if|if
condition|(
operator|!
name|r_R1
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|out_grouping_b
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|251
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// delete, line 141
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|13
case|:
comment|// (, line 146
comment|// call RV, line 146
if|if
condition|(
operator|!
name|r_RV
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// fail, line 146
comment|// (, line 146
comment|//<-, line 146
name|slice_from
argument_list|(
literal|"ant"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
case|case
literal|14
case|:
comment|// (, line 147
comment|// call RV, line 147
if|if
condition|(
operator|!
name|r_RV
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// fail, line 147
comment|// (, line 147
comment|//<-, line 147
name|slice_from
argument_list|(
literal|"ent"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
case|case
literal|15
case|:
comment|// (, line 149
comment|// test, line 149
name|v_11
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// (, line 149
if|if
condition|(
operator|!
operator|(
name|in_grouping_b
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|251
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// call RV, line 149
if|if
condition|(
operator|!
name|r_RV
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|limit
operator|-
name|v_11
expr_stmt|;
comment|// fail, line 149
comment|// (, line 149
comment|// delete, line 149
name|slice_del
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|r_i_verb_suffix
specifier|private
name|boolean
name|r_i_verb_suffix
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
comment|// setlimit, line 154
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// tomark, line 154
if|if
condition|(
name|cursor
operator|<
name|I_pV
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|I_pV
expr_stmt|;
name|v_2
operator|=
name|limit_backward
expr_stmt|;
name|limit_backward
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
comment|// (, line 154
comment|// [, line 155
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 155
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_4
argument_list|,
literal|35
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
name|limit_backward
operator|=
name|v_2
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ], line 155
name|bra
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
name|limit_backward
operator|=
name|v_2
expr_stmt|;
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 161
if|if
condition|(
operator|!
operator|(
name|out_grouping_b
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|251
argument_list|)
operator|)
condition|)
block|{
name|limit_backward
operator|=
name|v_2
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// delete, line 161
name|slice_del
argument_list|()
expr_stmt|;
break|break;
block|}
name|limit_backward
operator|=
name|v_2
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_verb_suffix
specifier|private
name|boolean
name|r_verb_suffix
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_3
decl_stmt|;
comment|// setlimit, line 165
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// tomark, line 165
if|if
condition|(
name|cursor
operator|<
name|I_pV
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|I_pV
expr_stmt|;
name|v_2
operator|=
name|limit_backward
expr_stmt|;
name|limit_backward
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
comment|// (, line 165
comment|// [, line 166
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 166
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_5
argument_list|,
literal|38
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
name|limit_backward
operator|=
name|v_2
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ], line 166
name|bra
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
name|limit_backward
operator|=
name|v_2
expr_stmt|;
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 168
comment|// call R2, line 168
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
name|limit_backward
operator|=
name|v_2
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// delete, line 168
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 176
comment|// delete, line 176
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// (, line 181
comment|// delete, line 181
name|slice_del
argument_list|()
expr_stmt|;
comment|// try, line 182
name|v_3
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab0
label|:
do|do
block|{
comment|// (, line 182
comment|// [, line 182
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 182
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"e"
argument_list|)
operator|)
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
break|break
name|lab0
break|;
block|}
comment|// ], line 182
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// delete, line 182
name|slice_del
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break;
block|}
name|limit_backward
operator|=
name|v_2
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_residual_suffix
specifier|private
name|boolean
name|r_residual_suffix
parameter_list|()
block|{
name|int
name|among_var
decl_stmt|;
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_3
decl_stmt|;
name|int
name|v_4
decl_stmt|;
name|int
name|v_5
decl_stmt|;
comment|// (, line 189
comment|// try, line 190
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab0
label|:
do|do
block|{
comment|// (, line 190
comment|// [, line 190
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// literal, line 190
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"s"
argument_list|)
operator|)
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
break|break
name|lab0
break|;
block|}
comment|// ], line 190
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// test, line 190
name|v_2
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|out_grouping_b
argument_list|(
name|g_keep_with_s
argument_list|,
literal|97
argument_list|,
literal|232
argument_list|)
operator|)
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
break|break
name|lab0
break|;
block|}
name|cursor
operator|=
name|limit
operator|-
name|v_2
expr_stmt|;
comment|// delete, line 190
name|slice_del
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
comment|// setlimit, line 191
name|v_3
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// tomark, line 191
if|if
condition|(
name|cursor
operator|<
name|I_pV
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|I_pV
expr_stmt|;
name|v_4
operator|=
name|limit_backward
expr_stmt|;
name|limit_backward
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
comment|// (, line 191
comment|// [, line 192
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// substring, line 192
name|among_var
operator|=
name|find_among_b
argument_list|(
name|a_6
argument_list|,
literal|7
argument_list|)
expr_stmt|;
if|if
condition|(
name|among_var
operator|==
literal|0
condition|)
block|{
name|limit_backward
operator|=
name|v_4
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ], line 192
name|bra
operator|=
name|cursor
expr_stmt|;
switch|switch
condition|(
name|among_var
condition|)
block|{
case|case
literal|0
case|:
name|limit_backward
operator|=
name|v_4
expr_stmt|;
return|return
literal|false
return|;
case|case
literal|1
case|:
comment|// (, line 193
comment|// call R2, line 193
if|if
condition|(
operator|!
name|r_R2
argument_list|()
condition|)
block|{
name|limit_backward
operator|=
name|v_4
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// or, line 193
name|lab1
label|:
do|do
block|{
name|v_5
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab2
label|:
do|do
block|{
comment|// literal, line 193
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"s"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab2
break|;
block|}
break|break
name|lab1
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_5
expr_stmt|;
comment|// literal, line 193
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"t"
argument_list|)
operator|)
condition|)
block|{
name|limit_backward
operator|=
name|v_4
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
comment|// delete, line 193
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// (, line 195
comment|//<-, line 195
name|slice_from
argument_list|(
literal|"i"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// (, line 196
comment|// delete, line 196
name|slice_del
argument_list|()
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// (, line 197
comment|// literal, line 197
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|2
argument_list|,
literal|"gu"
argument_list|)
operator|)
condition|)
block|{
name|limit_backward
operator|=
name|v_4
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// delete, line 197
name|slice_del
argument_list|()
expr_stmt|;
break|break;
block|}
name|limit_backward
operator|=
name|v_4
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_un_double
specifier|private
name|boolean
name|r_un_double
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
comment|// (, line 202
comment|// test, line 203
name|v_1
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// among, line 203
if|if
condition|(
name|find_among_b
argument_list|(
name|a_7
argument_list|,
literal|5
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|=
name|limit
operator|-
name|v_1
expr_stmt|;
comment|// [, line 203
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// next, line 203
if|if
condition|(
name|cursor
operator|<=
name|limit_backward
condition|)
block|{
return|return
literal|false
return|;
block|}
name|cursor
operator|--
expr_stmt|;
comment|// ], line 203
name|bra
operator|=
name|cursor
expr_stmt|;
comment|// delete, line 203
name|slice_del
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|r_un_accent
specifier|private
name|boolean
name|r_un_accent
parameter_list|()
block|{
name|int
name|v_3
decl_stmt|;
comment|// (, line 206
comment|// atleast, line 207
block|{
name|int
name|v_1
init|=
literal|1
decl_stmt|;
comment|// atleast, line 207
name|replab0
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|lab1
label|:
do|do
block|{
if|if
condition|(
operator|!
operator|(
name|out_grouping_b
argument_list|(
name|g_v
argument_list|,
literal|97
argument_list|,
literal|251
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab1
break|;
block|}
name|v_1
operator|--
expr_stmt|;
continue|continue
name|replab0
continue|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break
name|replab0
break|;
block|}
if|if
condition|(
name|v_1
operator|>
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// [, line 208
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// or, line 208
name|lab2
label|:
do|do
block|{
name|v_3
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab3
label|:
do|do
block|{
comment|// literal, line 208
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"\u00E9"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab3
break|;
block|}
break|break
name|lab2
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
comment|// literal, line 208
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"\u00E8"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
comment|// ], line 208
name|bra
operator|=
name|cursor
expr_stmt|;
comment|//<-, line 208
name|slice_from
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|stem
specifier|public
name|boolean
name|stem
parameter_list|()
block|{
name|int
name|v_1
decl_stmt|;
name|int
name|v_2
decl_stmt|;
name|int
name|v_3
decl_stmt|;
name|int
name|v_4
decl_stmt|;
name|int
name|v_5
decl_stmt|;
name|int
name|v_6
decl_stmt|;
name|int
name|v_7
decl_stmt|;
name|int
name|v_8
decl_stmt|;
name|int
name|v_9
decl_stmt|;
name|int
name|v_10
decl_stmt|;
name|int
name|v_11
decl_stmt|;
comment|// (, line 212
comment|// do, line 214
name|v_1
operator|=
name|cursor
expr_stmt|;
name|lab0
label|:
do|do
block|{
comment|// call prelude, line 214
if|if
condition|(
operator|!
name|r_prelude
argument_list|()
condition|)
block|{
break|break
name|lab0
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_1
expr_stmt|;
comment|// do, line 215
name|v_2
operator|=
name|cursor
expr_stmt|;
name|lab1
label|:
do|do
block|{
comment|// call mark_regions, line 215
if|if
condition|(
operator|!
name|r_mark_regions
argument_list|()
condition|)
block|{
break|break
name|lab1
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_2
expr_stmt|;
comment|// backwards, line 216
name|limit_backward
operator|=
name|cursor
expr_stmt|;
name|cursor
operator|=
name|limit
expr_stmt|;
comment|// (, line 216
comment|// do, line 218
name|v_3
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab2
label|:
do|do
block|{
comment|// (, line 218
comment|// or, line 228
name|lab3
label|:
do|do
block|{
name|v_4
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab4
label|:
do|do
block|{
comment|// (, line 219
comment|// and, line 224
name|v_5
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
comment|// (, line 220
comment|// or, line 220
name|lab5
label|:
do|do
block|{
name|v_6
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab6
label|:
do|do
block|{
comment|// call standard_suffix, line 220
if|if
condition|(
operator|!
name|r_standard_suffix
argument_list|()
condition|)
block|{
break|break
name|lab6
break|;
block|}
break|break
name|lab5
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_6
expr_stmt|;
name|lab7
label|:
do|do
block|{
comment|// call i_verb_suffix, line 221
if|if
condition|(
operator|!
name|r_i_verb_suffix
argument_list|()
condition|)
block|{
break|break
name|lab7
break|;
block|}
break|break
name|lab5
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_6
expr_stmt|;
comment|// call verb_suffix, line 222
if|if
condition|(
operator|!
name|r_verb_suffix
argument_list|()
condition|)
block|{
break|break
name|lab4
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_5
expr_stmt|;
comment|// try, line 225
name|v_7
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab8
label|:
do|do
block|{
comment|// (, line 225
comment|// [, line 225
name|ket
operator|=
name|cursor
expr_stmt|;
comment|// or, line 225
name|lab9
label|:
do|do
block|{
name|v_8
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab10
label|:
do|do
block|{
comment|// (, line 225
comment|// literal, line 225
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"Y"
argument_list|)
operator|)
condition|)
block|{
break|break
name|lab10
break|;
block|}
comment|// ], line 225
name|bra
operator|=
name|cursor
expr_stmt|;
comment|//<-, line 225
name|slice_from
argument_list|(
literal|"i"
argument_list|)
expr_stmt|;
break|break
name|lab9
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_8
expr_stmt|;
comment|// (, line 226
comment|// literal, line 226
if|if
condition|(
operator|!
operator|(
name|eq_s_b
argument_list|(
literal|1
argument_list|,
literal|"\u00E7"
argument_list|)
operator|)
condition|)
block|{
name|cursor
operator|=
name|limit
operator|-
name|v_7
expr_stmt|;
break|break
name|lab8
break|;
block|}
comment|// ], line 226
name|bra
operator|=
name|cursor
expr_stmt|;
comment|//<-, line 226
name|slice_from
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
break|break
name|lab3
break|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_4
expr_stmt|;
comment|// call residual_suffix, line 229
if|if
condition|(
operator|!
name|r_residual_suffix
argument_list|()
condition|)
block|{
break|break
name|lab2
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_3
expr_stmt|;
comment|// do, line 234
name|v_9
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab11
label|:
do|do
block|{
comment|// call un_double, line 234
if|if
condition|(
operator|!
name|r_un_double
argument_list|()
condition|)
block|{
break|break
name|lab11
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_9
expr_stmt|;
comment|// do, line 235
name|v_10
operator|=
name|limit
operator|-
name|cursor
expr_stmt|;
name|lab12
label|:
do|do
block|{
comment|// call un_accent, line 235
if|if
condition|(
operator|!
name|r_un_accent
argument_list|()
condition|)
block|{
break|break
name|lab12
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|limit
operator|-
name|v_10
expr_stmt|;
name|cursor
operator|=
name|limit_backward
expr_stmt|;
comment|// do, line 237
name|v_11
operator|=
name|cursor
expr_stmt|;
name|lab13
label|:
do|do
block|{
comment|// call postlude, line 237
if|if
condition|(
operator|!
name|r_postlude
argument_list|()
condition|)
block|{
break|break
name|lab13
break|;
block|}
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|cursor
operator|=
name|v_11
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
