begin_unit
begin_comment
comment|/* The following code was generated by JFlex 1.4.1 on 1/4/08 3:30 PM */
end_comment
begin_package
DECL|package|org.apache.lucene.wikipedia.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|wikipedia
operator|.
name|analysis
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_comment
comment|/**  * This class is a scanner generated by   *<a href="http://www.jflex.de/">JFlex</a> 1.4.1  * on 1/4/08 3:30 PM from the specification file  *<tt>/Volumes/User/grantingersoll/projects/lucene/Lucene-Trunk/contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerImpl.jflex</tt>  */
end_comment
begin_class
DECL|class|WikipediaTokenizerImpl
class|class
name|WikipediaTokenizerImpl
block|{
comment|/** This character denotes the end of file */
DECL|field|YYEOF
specifier|public
specifier|static
specifier|final
name|int
name|YYEOF
init|=
operator|-
literal|1
decl_stmt|;
comment|/** initial size of the lookahead buffer */
DECL|field|ZZ_BUFFERSIZE
specifier|private
specifier|static
specifier|final
name|int
name|ZZ_BUFFERSIZE
init|=
literal|16384
decl_stmt|;
comment|/** lexical states */
DECL|field|DOUBLE_BRACE_STATE
specifier|public
specifier|static
specifier|final
name|int
name|DOUBLE_BRACE_STATE
init|=
literal|7
decl_stmt|;
DECL|field|INTERNAL_LINK_STATE
specifier|public
specifier|static
specifier|final
name|int
name|INTERNAL_LINK_STATE
init|=
literal|2
decl_stmt|;
DECL|field|TWO_SINGLE_QUOTES_STATE
specifier|public
specifier|static
specifier|final
name|int
name|TWO_SINGLE_QUOTES_STATE
init|=
literal|4
decl_stmt|;
DECL|field|CATEGORY_STATE
specifier|public
specifier|static
specifier|final
name|int
name|CATEGORY_STATE
init|=
literal|1
decl_stmt|;
DECL|field|FIVE_SINGLE_QUOTES_STATE
specifier|public
specifier|static
specifier|final
name|int
name|FIVE_SINGLE_QUOTES_STATE
init|=
literal|5
decl_stmt|;
DECL|field|STRING
specifier|public
specifier|static
specifier|final
name|int
name|STRING
init|=
literal|8
decl_stmt|;
DECL|field|YYINITIAL
specifier|public
specifier|static
specifier|final
name|int
name|YYINITIAL
init|=
literal|0
decl_stmt|;
DECL|field|DOUBLE_EQUALS_STATE
specifier|public
specifier|static
specifier|final
name|int
name|DOUBLE_EQUALS_STATE
init|=
literal|6
decl_stmt|;
DECL|field|THREE_SINGLE_QUOTES_STATE
specifier|public
specifier|static
specifier|final
name|int
name|THREE_SINGLE_QUOTES_STATE
init|=
literal|5
decl_stmt|;
DECL|field|EXTERNAL_LINK_STATE
specifier|public
specifier|static
specifier|final
name|int
name|EXTERNAL_LINK_STATE
init|=
literal|3
decl_stmt|;
comment|/**     * Translates characters to character classes    */
DECL|field|ZZ_CMAP_PACKED
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_CMAP_PACKED
init|=
literal|"\11\0\1\24\1\23\1\0\1\24\1\22\22\0\1\24\1\0\1\12"
operator|+
literal|"\1\53\2\0\1\3\1\1\4\0\1\14\1\5\1\2\1\10\12\16"
operator|+
literal|"\1\27\1\0\1\7\1\11\1\13\1\53\1\4\2\15\1\30\5\15"
operator|+
literal|"\1\41\21\15\1\25\1\0\1\26\1\0\1\6\1\0\1\31\1\43"
operator|+
literal|"\2\15\1\33\1\40\1\34\1\50\1\41\4\15\1\42\1\35\1\51"
operator|+
literal|"\1\15\1\36\1\52\1\32\3\15\1\44\1\37\1\15\1\45\1\47"
operator|+
literal|"\1\46\102\0\27\15\1\0\37\15\1\0\u0568\15\12\17\206\15\12\17"
operator|+
literal|"\u026c\15\12\17\166\15\12\17\166\15\12\17\166\15\12\17\166\15\12\17"
operator|+
literal|"\167\15\11\17\166\15\12\17\166\15\12\17\166\15\12\17\340\15\12\17"
operator|+
literal|"\166\15\12\17\u0166\15\12\17\266\15\u0100\15\u0e00\15\u1040\0\u0150\21\140\0"
operator|+
literal|"\20\21\u0100\0\200\21\200\0\u19c0\21\100\0\u5200\21\u0c00\0\u2bb0\20\u2150\0"
operator|+
literal|"\u0200\21\u0465\0\73\21\75\15\43\0"
decl_stmt|;
comment|/**     * Translates characters to character classes    */
DECL|field|ZZ_CMAP
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|ZZ_CMAP
init|=
name|zzUnpackCMap
argument_list|(
name|ZZ_CMAP_PACKED
argument_list|)
decl_stmt|;
comment|/**     * Translates DFA states to action switch labels.    */
DECL|field|ZZ_ACTION
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|ZZ_ACTION
init|=
name|zzUnpackAction
argument_list|()
decl_stmt|;
DECL|field|ZZ_ACTION_PACKED_0
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_ACTION_PACKED_0
init|=
literal|"\11\0\4\1\4\2\1\3\1\1\1\4\2\1\1\5"
operator|+
literal|"\1\1\1\6\1\1\2\7\1\10\1\11\1\10\1\12"
operator|+
literal|"\1\13\1\7\1\14\1\15\1\16\1\17\1\7\1\20"
operator|+
literal|"\1\7\4\21\1\22\1\21\1\23\1\24\1\25\3\0"
operator|+
literal|"\1\26\14\0\1\27\1\30\1\31\1\32\1\10\1\0"
operator|+
literal|"\1\33\1\0\1\34\1\0\1\35\3\0\1\36\1\37"
operator|+
literal|"\2\40\1\37\2\41\2\0\1\40\1\0\14\40\1\37"
operator|+
literal|"\3\0\1\10\1\42\3\0\1\43\1\44\5\0\1\45"
operator|+
literal|"\4\0\1\45\2\0\2\45\2\0\1\10\5\0\1\30"
operator|+
literal|"\1\37\1\40\1\46\3\0\1\10\2\0\1\47\30\0"
operator|+
literal|"\1\50\2\0\1\51\1\52\1\53"
decl_stmt|;
DECL|method|zzUnpackAction
specifier|private
specifier|static
name|int
index|[]
name|zzUnpackAction
parameter_list|()
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
literal|178
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|offset
operator|=
name|zzUnpackAction
argument_list|(
name|ZZ_ACTION_PACKED_0
argument_list|,
name|offset
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|zzUnpackAction
specifier|private
specifier|static
name|int
name|zzUnpackAction
parameter_list|(
name|String
name|packed
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
index|[]
name|result
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/* index in packed string  */
name|int
name|j
init|=
name|offset
decl_stmt|;
comment|/* index in unpacked array */
name|int
name|l
init|=
name|packed
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|l
condition|)
block|{
name|int
name|count
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|int
name|value
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
do|do
name|result
index|[
name|j
operator|++
index|]
operator|=
name|value
expr_stmt|;
do|while
condition|(
operator|--
name|count
operator|>
literal|0
condition|)
do|;
block|}
return|return
name|j
return|;
block|}
comment|/**     * Translates a state to a row index in the transition table    */
DECL|field|ZZ_ROWMAP
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|ZZ_ROWMAP
init|=
name|zzUnpackRowMap
argument_list|()
decl_stmt|;
DECL|field|ZZ_ROWMAP_PACKED_0
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_ROWMAP_PACKED_0
init|=
literal|"\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"
operator|+
literal|"\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294"
operator|+
literal|"\0\u02c0\0\u018c\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c\0\u03c8"
operator|+
literal|"\0\u03f4\0\u0420\0\u018c\0\u0370\0\u044c\0\u018c\0\u0478\0\u04a4"
operator|+
literal|"\0\u04d0\0\u04fc\0\u0528\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604"
operator|+
literal|"\0\u0630\0\u018c\0\u065c\0\u0370\0\u0688\0\u06b4\0\u06e0\0\u070c"
operator|+
literal|"\0\u018c\0\u018c\0\u0738\0\u0764\0\u0790\0\u018c\0\u07bc\0\u07e8"
operator|+
literal|"\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c\0\u0948"
operator|+
literal|"\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u018c\0\u018c\0\u0a24\0\u0a50"
operator|+
literal|"\0\u0a7c\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0"
operator|+
literal|"\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0814\0\u0cb8\0\u0ce4"
operator|+
literal|"\0\u0d10\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0\0\u0dec\0\u0e18\0\u0e44"
operator|+
literal|"\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4"
operator|+
literal|"\0\u0fd0\0\u0ffc\0\u1028\0\u1054\0\u018c\0\u1080\0\u10ac\0\u10d8"
operator|+
literal|"\0\u1104\0\u018c\0\u1130\0\u115c\0\u1188\0\u11b4\0\u11e0\0\u120c"
operator|+
literal|"\0\u1238\0\u1264\0\u1290\0\u12bc\0\u12e8\0\u1314\0\u1340\0\u07e8"
operator|+
literal|"\0\u0974\0\u136c\0\u1398\0\u13c4\0\u13f0\0\u141c\0\u1448\0\u1474"
operator|+
literal|"\0\u14a0\0\u018c\0\u14cc\0\u14f8\0\u1524\0\u1550\0\u157c\0\u15a8"
operator|+
literal|"\0\u15d4\0\u1600\0\u162c\0\u018c\0\u1658\0\u1684\0\u16b0\0\u16dc"
operator|+
literal|"\0\u1708\0\u1734\0\u1760\0\u178c\0\u17b8\0\u17e4\0\u1810\0\u183c"
operator|+
literal|"\0\u1868\0\u1894\0\u18c0\0\u18ec\0\u1918\0\u1944\0\u1970\0\u199c"
operator|+
literal|"\0\u19c8\0\u19f4\0\u1a20\0\u1a4c\0\u1a78\0\u1aa4\0\u1ad0\0\u018c"
operator|+
literal|"\0\u018c\0\u018c"
decl_stmt|;
DECL|method|zzUnpackRowMap
specifier|private
specifier|static
name|int
index|[]
name|zzUnpackRowMap
parameter_list|()
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
literal|178
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|offset
operator|=
name|zzUnpackRowMap
argument_list|(
name|ZZ_ROWMAP_PACKED_0
argument_list|,
name|offset
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|zzUnpackRowMap
specifier|private
specifier|static
name|int
name|zzUnpackRowMap
parameter_list|(
name|String
name|packed
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
index|[]
name|result
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/* index in packed string  */
name|int
name|j
init|=
name|offset
decl_stmt|;
comment|/* index in unpacked array */
name|int
name|l
init|=
name|packed
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|l
condition|)
block|{
name|int
name|high
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
operator|<<
literal|16
decl_stmt|;
name|result
index|[
name|j
operator|++
index|]
operator|=
name|high
operator||
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
expr_stmt|;
block|}
return|return
name|j
return|;
block|}
comment|/**     * The transition table of the DFA    */
DECL|field|ZZ_TRANS
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|ZZ_TRANS
init|=
name|zzUnpackTrans
argument_list|()
decl_stmt|;
DECL|field|ZZ_TRANS_PACKED_0
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_TRANS_PACKED_0
init|=
literal|"\1\12\1\13\5\12\1\14\1\12\1\15\3\12\1\16"
operator|+
literal|"\1\17\1\20\1\21\1\22\1\23\2\12\1\24\2\12"
operator|+
literal|"\15\16\1\25\2\12\3\16\10\12\1\26\5\12\4\27"
operator|+
literal|"\1\12\1\23\3\12\1\30\1\12\15\27\3\12\3\27"
operator|+
literal|"\10\12\1\26\5\12\4\31\1\12\1\23\3\12\1\32"
operator|+
literal|"\1\12\15\31\3\12\3\31\1\12\7\33\1\34\5\33"
operator|+
literal|"\4\35\1\33\1\23\2\12\1\33\1\36\1\33\15\35"
operator|+
literal|"\3\33\1\37\2\35\2\33\1\40\5\33\1\34\5\33"
operator|+
literal|"\4\41\1\33\1\42\2\33\1\43\2\33\15\41\3\33"
operator|+
literal|"\3\41\10\33\1\34\5\33\4\44\1\33\1\42\2\33"
operator|+
literal|"\1\43\2\33\15\44\3\33\3\44\10\33\1\34\1\33"
operator|+
literal|"\1\45\3\33\4\46\1\33\1\42\5\33\15\46\3\33"
operator|+
literal|"\3\46\10\33\1\47\5\33\4\50\1\33\1\42\5\33"
operator|+
literal|"\15\50\1\33\1\51\1\33\3\50\1\33\1\52\1\53"
operator|+
literal|"\5\52\1\54\1\52\1\55\3\52\4\56\1\52\1\57"
operator|+
literal|"\2\52\1\60\2\52\15\56\2\52\1\61\3\56\1\52"
operator|+
literal|"\55\0\1\62\62\0\1\63\4\0\4\64\7\0\6\64"
operator|+
literal|"\1\65\6\64\3\0\3\64\12\0\1\66\43\0\1\67"
operator|+
literal|"\1\70\1\71\1\72\2\73\1\0\1\74\3\0\1\74"
operator|+
literal|"\1\16\1\17\1\20\1\21\7\0\15\16\3\0\3\16"
operator|+
literal|"\3\0\1\75\1\0\1\76\2\77\1\0\1\100\3\0"
operator|+
literal|"\1\100\3\17\1\21\7\0\15\17\3\0\3\17\2\0"
operator|+
literal|"\1\67\1\101\1\71\1\72\2\77\1\0\1\100\3\0"
operator|+
literal|"\1\100\1\20\1\17\1\20\1\21\7\0\15\20\3\0"
operator|+
literal|"\3\20\3\0\1\102\1\0\1\76\2\73\1\0\1\74"
operator|+
literal|"\3\0\1\74\4\21\7\0\15\21\3\0\3\21\24\0"
operator|+
literal|"\1\12\55\0\1\103\73\0\1\104\16\0\1\63\4\0"
operator|+
literal|"\4\64\7\0\15\64\3\0\3\64\16\0\4\27\7\0"
operator|+
literal|"\15\27\3\0\3\27\27\0\1\105\42\0\4\31\7\0"
operator|+
literal|"\15\31\3\0\3\31\27\0\1\106\42\0\4\35\7\0"
operator|+
literal|"\15\35\3\0\3\35\16\0\4\35\7\0\2\35\1\107"
operator|+
literal|"\12\35\3\0\3\35\2\0\1\110\67\0\4\41\7\0"
operator|+
literal|"\15\41\3\0\3\41\24\0\1\33\55\0\1\111\43\0"
operator|+
literal|"\4\44\7\0\15\44\3\0\3\44\12\0\1\105\57\0"
operator|+
literal|"\4\46\7\0\15\46\3\0\3\46\11\0\1\112\4\0"
operator|+
literal|"\4\64\7\0\15\64\3\0\3\64\16\0\4\50\7\0"
operator|+
literal|"\15\50\3\0\3\50\47\0\1\105\6\0\1\113\63\0"
operator|+
literal|"\1\114\57\0\4\56\7\0\15\56\3\0\3\56\24\0"
operator|+
literal|"\1\52\55\0\1\115\43\0\4\64\7\0\15\64\3\0"
operator|+
literal|"\3\64\14\0\1\33\1\0\4\116\1\0\3\117\3\0"
operator|+
literal|"\15\116\3\0\3\116\14\0\1\33\1\0\4\116\1\0"
operator|+
literal|"\3\117\3\0\3\116\1\120\11\116\3\0\3\116\16\0"
operator|+
literal|"\1\121\1\0\1\121\10\0\15\121\3\0\3\121\16\0"
operator|+
literal|"\1\122\1\123\1\124\1\125\7\0\15\122\3\0\3\122"
operator|+
literal|"\16\0\1\126\1\0\1\126\10\0\15\126\3\0\3\126"
operator|+
literal|"\16\0\1\127\1\130\1\127\1\130\7\0\15\127\3\0"
operator|+
literal|"\3\127\16\0\1\131\2\132\1\133\7\0\15\131\3\0"
operator|+
literal|"\3\131\16\0\1\74\2\134\10\0\15\74\3\0\3\74"
operator|+
literal|"\16\0\1\135\2\136\1\137\7\0\15\135\3\0\3\135"
operator|+
literal|"\16\0\4\130\7\0\15\130\3\0\3\130\16\0\1\140"
operator|+
literal|"\2\141\1\142\7\0\15\140\3\0\3\140\16\0\1\143"
operator|+
literal|"\2\144\1\145\7\0\15\143\3\0\3\143\16\0\1\146"
operator|+
literal|"\1\136\1\147\1\137\7\0\15\146\3\0\3\146\16\0"
operator|+
literal|"\1\150\2\123\1\125\7\0\15\150\3\0\3\150\30\0"
operator|+
literal|"\1\151\1\152\64\0\1\153\27\0\4\35\7\0\2\35"
operator|+
literal|"\1\154\12\35\3\0\3\35\2\0\1\155\101\0\1\156"
operator|+
literal|"\1\157\40\0\4\64\7\0\6\64\1\160\6\64\3\0"
operator|+
literal|"\3\64\2\0\1\161\63\0\1\162\71\0\1\163\1\164"
operator|+
literal|"\34\0\1\165\1\0\1\33\1\0\4\116\1\0\3\117"
operator|+
literal|"\3\0\15\116\3\0\3\116\16\0\4\166\1\0\3\117"
operator|+
literal|"\3\0\15\166\3\0\3\166\12\0\1\165\1\0\1\33"
operator|+
literal|"\1\0\4\116\1\0\3\117\3\0\10\116\1\167\4\116"
operator|+
literal|"\3\0\3\116\2\0\1\67\13\0\1\121\1\0\1\121"
operator|+
literal|"\10\0\15\121\3\0\3\121\3\0\1\170\1\0\1\76"
operator|+
literal|"\2\171\6\0\1\122\1\123\1\124\1\125\7\0\15\122"
operator|+
literal|"\3\0\3\122\3\0\1\172\1\0\1\76\2\173\1\0"
operator|+
literal|"\1\174\3\0\1\174\3\123\1\125\7\0\15\123\3\0"
operator|+
literal|"\3\123\3\0\1\175\1\0\1\76\2\173\1\0\1\174"
operator|+
literal|"\3\0\1\174\1\124\1\123\1\124\1\125\7\0\15\124"
operator|+
literal|"\3\0\3\124\3\0\1\176\1\0\1\76\2\171\6\0"
operator|+
literal|"\4\125\7\0\15\125\3\0\3\125\3\0\1\177\2\0"
operator|+
literal|"\1\177\7\0\1\127\1\130\1\127\1\130\7\0\15\127"
operator|+
literal|"\3\0\3\127\3\0\1\177\2\0\1\177\7\0\4\130"
operator|+
literal|"\7\0\15\130\3\0\3\130\3\0\1\171\1\0\1\76"
operator|+
literal|"\2\171\6\0\1\131\2\132\1\133\7\0\15\131\3\0"
operator|+
literal|"\3\131\3\0\1\173\1\0\1\76\2\173\1\0\1\174"
operator|+
literal|"\3\0\1\174\3\132\1\133\7\0\15\132\3\0\3\132"
operator|+
literal|"\3\0\1\171\1\0\1\76\2\171\6\0\4\133\7\0"
operator|+
literal|"\15\133\3\0\3\133\3\0\1\174\2\0\2\174\1\0"
operator|+
literal|"\1\174\3\0\1\174\3\134\10\0\15\134\3\0\3\134"
operator|+
literal|"\3\0\1\102\1\0\1\76\2\73\1\0\1\74\3\0"
operator|+
literal|"\1\74\1\135\2\136\1\137\7\0\15\135\3\0\3\135"
operator|+
literal|"\3\0\1\75\1\0\1\76\2\77\1\0\1\100\3\0"
operator|+
literal|"\1\100\3\136\1\137\7\0\15\136\3\0\3\136\3\0"
operator|+
literal|"\1\102\1\0\1\76\2\73\1\0\1\74\3\0\1\74"
operator|+
literal|"\4\137\7\0\15\137\3\0\3\137\3\0\1\73\1\0"
operator|+
literal|"\1\76\2\73\1\0\1\74\3\0\1\74\1\140\2\141"
operator|+
literal|"\1\142\7\0\15\140\3\0\3\140\3\0\1\77\1\0"
operator|+
literal|"\1\76\2\77\1\0\1\100\3\0\1\100\3\141\1\142"
operator|+
literal|"\7\0\15\141\3\0\3\141\3\0\1\73\1\0\1\76"
operator|+
literal|"\2\73\1\0\1\74\3\0\1\74\4\142\7\0\15\142"
operator|+
literal|"\3\0\3\142\3\0\1\74\2\0\2\74\1\0\1\74"
operator|+
literal|"\3\0\1\74\1\143\2\144\1\145\7\0\15\143\3\0"
operator|+
literal|"\3\143\3\0\1\100\2\0\2\100\1\0\1\100\3\0"
operator|+
literal|"\1\100\3\144\1\145\7\0\15\144\3\0\3\144\3\0"
operator|+
literal|"\1\74\2\0\2\74\1\0\1\74\3\0\1\74\4\145"
operator|+
literal|"\7\0\15\145\3\0\3\145\3\0\1\200\1\0\1\76"
operator|+
literal|"\2\73\1\0\1\74\3\0\1\74\1\146\1\136\1\147"
operator|+
literal|"\1\137\7\0\15\146\3\0\3\146\3\0\1\201\1\0"
operator|+
literal|"\1\76\2\77\1\0\1\100\3\0\1\100\1\147\1\136"
operator|+
literal|"\1\147\1\137\7\0\15\147\3\0\3\147\3\0\1\176"
operator|+
literal|"\1\0\1\76\2\171\6\0\1\150\2\123\1\125\7\0"
operator|+
literal|"\15\150\3\0\3\150\31\0\1\152\54\0\1\202\64\0"
operator|+
literal|"\1\203\26\0\4\35\7\0\15\35\3\0\1\35\1\204"
operator|+
literal|"\1\35\31\0\1\157\54\0\1\205\35\0\1\33\1\0"
operator|+
literal|"\4\116\1\0\3\117\3\0\3\116\1\206\11\116\3\0"
operator|+
literal|"\3\116\2\0\1\207\102\0\1\164\54\0\1\210\34\0"
operator|+
literal|"\1\211\52\0\1\165\3\0\4\166\7\0\15\166\3\0"
operator|+
literal|"\3\166\12\0\1\165\1\0\1\212\1\0\4\116\1\0"
operator|+
literal|"\3\117\3\0\15\116\3\0\3\116\16\0\1\213\1\125"
operator|+
literal|"\1\213\1\125\7\0\15\213\3\0\3\213\16\0\4\133"
operator|+
literal|"\7\0\15\133\3\0\3\133\16\0\4\137\7\0\15\137"
operator|+
literal|"\3\0\3\137\16\0\4\142\7\0\15\142\3\0\3\142"
operator|+
literal|"\16\0\4\145\7\0\15\145\3\0\3\145\16\0\1\214"
operator|+
literal|"\1\137\1\214\1\137\7\0\15\214\3\0\3\214\16\0"
operator|+
literal|"\4\125\7\0\15\125\3\0\3\125\16\0\4\215\7\0"
operator|+
literal|"\15\215\3\0\3\215\33\0\1\216\61\0\1\217\30\0"
operator|+
literal|"\4\35\6\0\1\220\15\35\3\0\2\35\1\221\33\0"
operator|+
literal|"\1\222\32\0\1\165\1\0\1\33\1\0\4\116\1\0"
operator|+
literal|"\3\117\3\0\10\116\1\223\4\116\3\0\3\116\2\0"
operator|+
literal|"\1\224\104\0\1\225\36\0\4\226\7\0\15\226\3\0"
operator|+
literal|"\3\226\3\0\1\170\1\0\1\76\2\171\6\0\1\213"
operator|+
literal|"\1\125\1\213\1\125\7\0\15\213\3\0\3\213\3\0"
operator|+
literal|"\1\200\1\0\1\76\2\73\1\0\1\74\3\0\1\74"
operator|+
literal|"\1\214\1\137\1\214\1\137\7\0\15\214\3\0\3\214"
operator|+
literal|"\3\0\1\177\2\0\1\177\7\0\4\215\7\0\15\215"
operator|+
literal|"\3\0\3\215\34\0\1\227\55\0\1\230\26\0\1\231"
operator|+
literal|"\60\0\4\35\6\0\1\220\15\35\3\0\3\35\34\0"
operator|+
literal|"\1\232\31\0\1\165\1\0\1\105\1\0\4\116\1\0"
operator|+
literal|"\3\117\3\0\15\116\3\0\3\116\34\0\1\233\32\0"
operator|+
literal|"\1\234\2\0\4\226\7\0\15\226\3\0\3\226\35\0"
operator|+
literal|"\1\235\62\0\1\236\20\0\1\237\77\0\1\240\53\0"
operator|+
literal|"\1\241\32\0\1\33\1\0\4\166\1\0\3\117\3\0"
operator|+
literal|"\15\166\3\0\3\166\36\0\1\242\53\0\1\243\33\0"
operator|+
literal|"\4\244\7\0\15\244\3\0\3\244\36\0\1\245\53\0"
operator|+
literal|"\1\246\54\0\1\247\61\0\1\250\11\0\1\251\12\0"
operator|+
literal|"\4\244\7\0\15\244\3\0\3\244\37\0\1\252\53\0"
operator|+
literal|"\1\253\54\0\1\254\22\0\1\12\62\0\4\255\7\0"
operator|+
literal|"\15\255\3\0\3\255\40\0\1\256\53\0\1\257\43\0"
operator|+
literal|"\1\260\26\0\2\255\1\0\2\255\1\0\2\255\2\0"
operator|+
literal|"\5\255\7\0\15\255\3\0\4\255\27\0\1\261\53\0"
operator|+
literal|"\1\262\24\0"
decl_stmt|;
DECL|method|zzUnpackTrans
specifier|private
specifier|static
name|int
index|[]
name|zzUnpackTrans
parameter_list|()
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
literal|6908
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|offset
operator|=
name|zzUnpackTrans
argument_list|(
name|ZZ_TRANS_PACKED_0
argument_list|,
name|offset
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|zzUnpackTrans
specifier|private
specifier|static
name|int
name|zzUnpackTrans
parameter_list|(
name|String
name|packed
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
index|[]
name|result
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/* index in packed string  */
name|int
name|j
init|=
name|offset
decl_stmt|;
comment|/* index in unpacked array */
name|int
name|l
init|=
name|packed
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|l
condition|)
block|{
name|int
name|count
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|int
name|value
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|value
operator|--
expr_stmt|;
do|do
name|result
index|[
name|j
operator|++
index|]
operator|=
name|value
expr_stmt|;
do|while
condition|(
operator|--
name|count
operator|>
literal|0
condition|)
do|;
block|}
return|return
name|j
return|;
block|}
comment|/* error codes */
DECL|field|ZZ_UNKNOWN_ERROR
specifier|private
specifier|static
specifier|final
name|int
name|ZZ_UNKNOWN_ERROR
init|=
literal|0
decl_stmt|;
DECL|field|ZZ_NO_MATCH
specifier|private
specifier|static
specifier|final
name|int
name|ZZ_NO_MATCH
init|=
literal|1
decl_stmt|;
DECL|field|ZZ_PUSHBACK_2BIG
specifier|private
specifier|static
specifier|final
name|int
name|ZZ_PUSHBACK_2BIG
init|=
literal|2
decl_stmt|;
comment|/* error messages for the codes above */
DECL|field|ZZ_ERROR_MSG
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_ERROR_MSG
index|[]
init|=
block|{
literal|"Unkown internal scanner error"
block|,
literal|"Error: could not match input"
block|,
literal|"Error: pushback value was too large"
block|}
decl_stmt|;
comment|/**    * ZZ_ATTRIBUTE[aState] contains the attributes of state<code>aState</code>    */
DECL|field|ZZ_ATTRIBUTE
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|ZZ_ATTRIBUTE
init|=
name|zzUnpackAttribute
argument_list|()
decl_stmt|;
DECL|field|ZZ_ATTRIBUTE_PACKED_0
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_ATTRIBUTE_PACKED_0
init|=
literal|"\11\0\1\11\7\1\1\11\10\1\1\11\2\1\1\11"
operator|+
literal|"\13\1\1\11\6\1\2\11\3\0\1\11\14\0\2\1"
operator|+
literal|"\2\11\1\1\1\0\1\1\1\0\1\1\1\0\1\1"
operator|+
literal|"\3\0\7\1\2\0\1\1\1\0\15\1\3\0\1\1"
operator|+
literal|"\1\11\3\0\1\1\1\11\5\0\1\1\4\0\1\1"
operator|+
literal|"\2\0\2\1\2\0\1\1\5\0\1\11\3\1\3\0"
operator|+
literal|"\1\1\2\0\1\11\30\0\1\1\2\0\3\11"
decl_stmt|;
DECL|method|zzUnpackAttribute
specifier|private
specifier|static
name|int
index|[]
name|zzUnpackAttribute
parameter_list|()
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
literal|178
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|offset
operator|=
name|zzUnpackAttribute
argument_list|(
name|ZZ_ATTRIBUTE_PACKED_0
argument_list|,
name|offset
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|zzUnpackAttribute
specifier|private
specifier|static
name|int
name|zzUnpackAttribute
parameter_list|(
name|String
name|packed
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
index|[]
name|result
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/* index in packed string  */
name|int
name|j
init|=
name|offset
decl_stmt|;
comment|/* index in unpacked array */
name|int
name|l
init|=
name|packed
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|l
condition|)
block|{
name|int
name|count
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|int
name|value
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
do|do
name|result
index|[
name|j
operator|++
index|]
operator|=
name|value
expr_stmt|;
do|while
condition|(
operator|--
name|count
operator|>
literal|0
condition|)
do|;
block|}
return|return
name|j
return|;
block|}
comment|/** the input device */
DECL|field|zzReader
specifier|private
name|java
operator|.
name|io
operator|.
name|Reader
name|zzReader
decl_stmt|;
comment|/** the current state of the DFA */
DECL|field|zzState
specifier|private
name|int
name|zzState
decl_stmt|;
comment|/** the current lexical state */
DECL|field|zzLexicalState
specifier|private
name|int
name|zzLexicalState
init|=
name|YYINITIAL
decl_stmt|;
comment|/** this buffer contains the current text to be matched and is       the source of the yytext() string */
DECL|field|zzBuffer
specifier|private
name|char
name|zzBuffer
index|[]
init|=
operator|new
name|char
index|[
name|ZZ_BUFFERSIZE
index|]
decl_stmt|;
comment|/** the textposition at the last accepting state */
DECL|field|zzMarkedPos
specifier|private
name|int
name|zzMarkedPos
decl_stmt|;
comment|/** the textposition at the last state to be included in yytext */
DECL|field|zzPushbackPos
specifier|private
name|int
name|zzPushbackPos
decl_stmt|;
comment|/** the current text position in the buffer */
DECL|field|zzCurrentPos
specifier|private
name|int
name|zzCurrentPos
decl_stmt|;
comment|/** startRead marks the beginning of the yytext() string in the buffer */
DECL|field|zzStartRead
specifier|private
name|int
name|zzStartRead
decl_stmt|;
comment|/** endRead marks the last character in the buffer, that has been read       from input */
DECL|field|zzEndRead
specifier|private
name|int
name|zzEndRead
decl_stmt|;
comment|/** number of newlines encountered up to the start of the matched text */
DECL|field|yyline
specifier|private
name|int
name|yyline
decl_stmt|;
comment|/** the number of characters up to the start of the matched text */
DECL|field|yychar
specifier|private
name|int
name|yychar
decl_stmt|;
comment|/**    * the number of characters from the last newline up to the start of the     * matched text    */
DECL|field|yycolumn
specifier|private
name|int
name|yycolumn
decl_stmt|;
comment|/**     * zzAtBOL == true<=> the scanner is currently at the beginning of a line    */
DECL|field|zzAtBOL
specifier|private
name|boolean
name|zzAtBOL
init|=
literal|true
decl_stmt|;
comment|/** zzAtEOF == true<=> the scanner is at the EOF */
DECL|field|zzAtEOF
specifier|private
name|boolean
name|zzAtEOF
decl_stmt|;
comment|/* user code: */
DECL|field|ALPHANUM
specifier|public
specifier|static
specifier|final
name|int
name|ALPHANUM
init|=
literal|0
decl_stmt|;
DECL|field|APOSTROPHE
specifier|public
specifier|static
specifier|final
name|int
name|APOSTROPHE
init|=
literal|1
decl_stmt|;
DECL|field|ACRONYM
specifier|public
specifier|static
specifier|final
name|int
name|ACRONYM
init|=
literal|2
decl_stmt|;
DECL|field|COMPANY
specifier|public
specifier|static
specifier|final
name|int
name|COMPANY
init|=
literal|3
decl_stmt|;
DECL|field|EMAIL
specifier|public
specifier|static
specifier|final
name|int
name|EMAIL
init|=
literal|4
decl_stmt|;
DECL|field|HOST
specifier|public
specifier|static
specifier|final
name|int
name|HOST
init|=
literal|5
decl_stmt|;
DECL|field|NUM
specifier|public
specifier|static
specifier|final
name|int
name|NUM
init|=
literal|6
decl_stmt|;
DECL|field|CJ
specifier|public
specifier|static
specifier|final
name|int
name|CJ
init|=
literal|7
decl_stmt|;
DECL|field|INTERNAL_LINK
specifier|public
specifier|static
specifier|final
name|int
name|INTERNAL_LINK
init|=
literal|8
decl_stmt|;
DECL|field|EXTERNAL_LINK
specifier|public
specifier|static
specifier|final
name|int
name|EXTERNAL_LINK
init|=
literal|9
decl_stmt|;
DECL|field|CITATION
specifier|public
specifier|static
specifier|final
name|int
name|CITATION
init|=
literal|10
decl_stmt|;
DECL|field|CATEGORY
specifier|public
specifier|static
specifier|final
name|int
name|CATEGORY
init|=
literal|11
decl_stmt|;
DECL|field|BOLD
specifier|public
specifier|static
specifier|final
name|int
name|BOLD
init|=
literal|12
decl_stmt|;
DECL|field|ITALICS
specifier|public
specifier|static
specifier|final
name|int
name|ITALICS
init|=
literal|13
decl_stmt|;
DECL|field|BOLD_ITALICS
specifier|public
specifier|static
specifier|final
name|int
name|BOLD_ITALICS
init|=
literal|14
decl_stmt|;
DECL|field|HEADING
specifier|public
specifier|static
specifier|final
name|int
name|HEADING
init|=
literal|15
decl_stmt|;
DECL|field|SUB_HEADING
specifier|public
specifier|static
specifier|final
name|int
name|SUB_HEADING
init|=
literal|16
decl_stmt|;
DECL|field|EXTERNAL_LINK_URL
specifier|public
specifier|static
specifier|final
name|int
name|EXTERNAL_LINK_URL
init|=
literal|17
decl_stmt|;
DECL|field|currentTokType
specifier|private
name|int
name|currentTokType
decl_stmt|;
DECL|field|numBalanced
specifier|private
name|int
name|numBalanced
init|=
literal|0
decl_stmt|;
DECL|field|positionInc
specifier|private
name|int
name|positionInc
init|=
literal|1
decl_stmt|;
DECL|field|numLinkToks
specifier|private
name|int
name|numLinkToks
init|=
literal|0
decl_stmt|;
DECL|field|TOKEN_TYPES
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|TOKEN_TYPES
init|=
operator|new
name|String
index|[]
block|{
literal|"<ALPHANUM>"
block|,
literal|"<APOSTROPHE>"
block|,
literal|"<ACRONYM>"
block|,
literal|"<COMPANY>"
block|,
literal|"<EMAIL>"
block|,
literal|"<HOST>"
block|,
literal|"<NUM>"
block|,
literal|"<CJ>"
block|,
name|WikipediaTokenizer
operator|.
name|INTERNAL_LINK
block|,
name|WikipediaTokenizer
operator|.
name|EXTERNAL_LINK
block|,
name|WikipediaTokenizer
operator|.
name|CITATION
block|,
name|WikipediaTokenizer
operator|.
name|CATEGORY
block|,
name|WikipediaTokenizer
operator|.
name|BOLD
block|,
name|WikipediaTokenizer
operator|.
name|ITALICS
block|,
name|WikipediaTokenizer
operator|.
name|BOLD_ITALICS
block|,
name|WikipediaTokenizer
operator|.
name|HEADING
block|,
name|WikipediaTokenizer
operator|.
name|SUB_HEADING
block|,
name|WikipediaTokenizer
operator|.
name|EXTERNAL_LINK_URL
block|}
decl_stmt|;
DECL|method|yychar
specifier|public
specifier|final
name|int
name|yychar
parameter_list|()
block|{
return|return
name|yychar
return|;
block|}
DECL|method|getPositionIncrement
specifier|public
specifier|final
name|int
name|getPositionIncrement
parameter_list|()
block|{
return|return
name|positionInc
return|;
block|}
comment|/**  * Fills Lucene token with the current token text.  */
DECL|method|getText
specifier|final
name|void
name|getText
parameter_list|(
name|Token
name|t
parameter_list|,
name|int
name|tokType
parameter_list|)
block|{
name|t
operator|.
name|setTermBuffer
argument_list|(
name|zzBuffer
argument_list|,
name|zzStartRead
argument_list|,
name|zzMarkedPos
operator|-
name|zzStartRead
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new scanner    * There is also a java.io.InputStream version of this constructor.    *    * @param   in  the java.io.Reader to read input from.    */
DECL|method|WikipediaTokenizerImpl
name|WikipediaTokenizerImpl
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|in
parameter_list|)
block|{
name|this
operator|.
name|zzReader
operator|=
name|in
expr_stmt|;
block|}
comment|/**    * Creates a new scanner.    * There is also java.io.Reader version of this constructor.    *    * @param   in  the java.io.Inputstream to read input from.    */
DECL|method|WikipediaTokenizerImpl
name|WikipediaTokenizerImpl
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|in
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|java
operator|.
name|io
operator|.
name|InputStreamReader
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**     * Unpacks the compressed character translation table.    *    * @param packed   the packed character translation table    * @return         the unpacked character translation table    */
DECL|method|zzUnpackCMap
specifier|private
specifier|static
name|char
index|[]
name|zzUnpackCMap
parameter_list|(
name|String
name|packed
parameter_list|)
block|{
name|char
index|[]
name|map
init|=
operator|new
name|char
index|[
literal|0x10000
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/* index in packed string  */
name|int
name|j
init|=
literal|0
decl_stmt|;
comment|/* index in unpacked array */
while|while
condition|(
name|i
operator|<
literal|230
condition|)
block|{
name|int
name|count
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|char
name|value
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
do|do
name|map
index|[
name|j
operator|++
index|]
operator|=
name|value
expr_stmt|;
do|while
condition|(
operator|--
name|count
operator|>
literal|0
condition|)
do|;
block|}
return|return
name|map
return|;
block|}
comment|/**    * Refills the input buffer.    *    * @return<code>false</code>, iff there was new input.    *     * @exception   java.io.IOException  if any I/O-Error occurs    */
DECL|method|zzRefill
specifier|private
name|boolean
name|zzRefill
parameter_list|()
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
comment|/* first: make room (if you can) */
if|if
condition|(
name|zzStartRead
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|zzBuffer
argument_list|,
name|zzStartRead
argument_list|,
name|zzBuffer
argument_list|,
literal|0
argument_list|,
name|zzEndRead
operator|-
name|zzStartRead
argument_list|)
expr_stmt|;
comment|/* translate stored positions */
name|zzEndRead
operator|-=
name|zzStartRead
expr_stmt|;
name|zzCurrentPos
operator|-=
name|zzStartRead
expr_stmt|;
name|zzMarkedPos
operator|-=
name|zzStartRead
expr_stmt|;
name|zzPushbackPos
operator|-=
name|zzStartRead
expr_stmt|;
name|zzStartRead
operator|=
literal|0
expr_stmt|;
block|}
comment|/* is the buffer big enough? */
if|if
condition|(
name|zzCurrentPos
operator|>=
name|zzBuffer
operator|.
name|length
condition|)
block|{
comment|/* if not: blow it up */
name|char
name|newBuffer
index|[]
init|=
operator|new
name|char
index|[
name|zzCurrentPos
operator|*
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|zzBuffer
argument_list|,
literal|0
argument_list|,
name|newBuffer
argument_list|,
literal|0
argument_list|,
name|zzBuffer
operator|.
name|length
argument_list|)
expr_stmt|;
name|zzBuffer
operator|=
name|newBuffer
expr_stmt|;
block|}
comment|/* finally: fill the buffer with new input */
name|int
name|numRead
init|=
name|zzReader
operator|.
name|read
argument_list|(
name|zzBuffer
argument_list|,
name|zzEndRead
argument_list|,
name|zzBuffer
operator|.
name|length
operator|-
name|zzEndRead
argument_list|)
decl_stmt|;
if|if
condition|(
name|numRead
operator|<
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|zzEndRead
operator|+=
name|numRead
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Closes the input stream.    */
DECL|method|yyclose
specifier|public
specifier|final
name|void
name|yyclose
parameter_list|()
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|zzAtEOF
operator|=
literal|true
expr_stmt|;
comment|/* indicate end of file */
name|zzEndRead
operator|=
name|zzStartRead
expr_stmt|;
comment|/* invalidate buffer    */
if|if
condition|(
name|zzReader
operator|!=
literal|null
condition|)
name|zzReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Resets the scanner to read from a new input stream.    * Does not close the old reader.    *    * All internal variables are reset, the old input stream     *<b>cannot</b> be reused (internal buffer is discarded and lost).    * Lexical state is set to<tt>ZZ_INITIAL</tt>.    *    * @param reader   the new input stream     */
DECL|method|yyreset
specifier|public
specifier|final
name|void
name|yyreset
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|reader
parameter_list|)
block|{
name|zzReader
operator|=
name|reader
expr_stmt|;
name|zzAtBOL
operator|=
literal|true
expr_stmt|;
name|zzAtEOF
operator|=
literal|false
expr_stmt|;
name|zzEndRead
operator|=
name|zzStartRead
operator|=
literal|0
expr_stmt|;
name|zzCurrentPos
operator|=
name|zzMarkedPos
operator|=
name|zzPushbackPos
operator|=
literal|0
expr_stmt|;
name|yyline
operator|=
name|yychar
operator|=
name|yycolumn
operator|=
literal|0
expr_stmt|;
name|zzLexicalState
operator|=
name|YYINITIAL
expr_stmt|;
block|}
comment|/**    * Returns the current lexical state.    */
DECL|method|yystate
specifier|public
specifier|final
name|int
name|yystate
parameter_list|()
block|{
return|return
name|zzLexicalState
return|;
block|}
comment|/**    * Enters a new lexical state    *    * @param newState the new lexical state    */
DECL|method|yybegin
specifier|public
specifier|final
name|void
name|yybegin
parameter_list|(
name|int
name|newState
parameter_list|)
block|{
name|zzLexicalState
operator|=
name|newState
expr_stmt|;
block|}
comment|/**    * Returns the text matched by the current regular expression.    */
DECL|method|yytext
specifier|public
specifier|final
name|String
name|yytext
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|zzBuffer
argument_list|,
name|zzStartRead
argument_list|,
name|zzMarkedPos
operator|-
name|zzStartRead
argument_list|)
return|;
block|}
comment|/**    * Returns the character at position<tt>pos</tt> from the     * matched text.     *     * It is equivalent to yytext().charAt(pos), but faster    *    * @param pos the position of the character to fetch.     *            A value from 0 to yylength()-1.    *    * @return the character at position pos    */
DECL|method|yycharat
specifier|public
specifier|final
name|char
name|yycharat
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
name|zzBuffer
index|[
name|zzStartRead
operator|+
name|pos
index|]
return|;
block|}
comment|/**    * Returns the length of the matched text region.    */
DECL|method|yylength
specifier|public
specifier|final
name|int
name|yylength
parameter_list|()
block|{
return|return
name|zzMarkedPos
operator|-
name|zzStartRead
return|;
block|}
comment|/**    * Reports an error that occured while scanning.    *    * In a wellformed scanner (no or only correct usage of     * yypushback(int) and a match-all fallback rule) this method     * will only be called with things that "Can't Possibly Happen".    * If this method is called, something is seriously wrong    * (e.g. a JFlex bug producing a faulty scanner etc.).    *    * Usual syntax/scanner level error handling should be done    * in error fallback rules.    *    * @param   errorCode  the code of the errormessage to display    */
DECL|method|zzScanError
specifier|private
name|void
name|zzScanError
parameter_list|(
name|int
name|errorCode
parameter_list|)
block|{
name|String
name|message
decl_stmt|;
try|try
block|{
name|message
operator|=
name|ZZ_ERROR_MSG
index|[
name|errorCode
index|]
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
name|message
operator|=
name|ZZ_ERROR_MSG
index|[
name|ZZ_UNKNOWN_ERROR
index|]
expr_stmt|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
name|message
argument_list|)
throw|;
block|}
comment|/**    * Pushes the specified amount of characters back into the input stream.    *    * They will be read again by then next call of the scanning method    *    * @param number  the number of characters to be read again.    *                This number must not be greater than yylength()!    */
DECL|method|yypushback
specifier|public
name|void
name|yypushback
parameter_list|(
name|int
name|number
parameter_list|)
block|{
if|if
condition|(
name|number
operator|>
name|yylength
argument_list|()
condition|)
name|zzScanError
argument_list|(
name|ZZ_PUSHBACK_2BIG
argument_list|)
expr_stmt|;
name|zzMarkedPos
operator|-=
name|number
expr_stmt|;
block|}
comment|/**    * Resumes scanning until the next regular expression is matched,    * the end of input is encountered or an I/O-Error occurs.    *    * @return      the next token    * @exception   java.io.IOException  if any I/O-Error occurs    */
DECL|method|getNextToken
specifier|public
name|int
name|getNextToken
parameter_list|()
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|int
name|zzInput
decl_stmt|;
name|int
name|zzAction
decl_stmt|;
comment|// cached fields:
name|int
name|zzCurrentPosL
decl_stmt|;
name|int
name|zzMarkedPosL
decl_stmt|;
name|int
name|zzEndReadL
init|=
name|zzEndRead
decl_stmt|;
name|char
index|[]
name|zzBufferL
init|=
name|zzBuffer
decl_stmt|;
name|char
index|[]
name|zzCMapL
init|=
name|ZZ_CMAP
decl_stmt|;
name|int
index|[]
name|zzTransL
init|=
name|ZZ_TRANS
decl_stmt|;
name|int
index|[]
name|zzRowMapL
init|=
name|ZZ_ROWMAP
decl_stmt|;
name|int
index|[]
name|zzAttrL
init|=
name|ZZ_ATTRIBUTE
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|zzMarkedPosL
operator|=
name|zzMarkedPos
expr_stmt|;
name|yychar
operator|+=
name|zzMarkedPosL
operator|-
name|zzStartRead
expr_stmt|;
name|zzAction
operator|=
operator|-
literal|1
expr_stmt|;
name|zzCurrentPosL
operator|=
name|zzCurrentPos
operator|=
name|zzStartRead
operator|=
name|zzMarkedPosL
expr_stmt|;
name|zzState
operator|=
name|zzLexicalState
expr_stmt|;
name|zzForAction
label|:
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|zzCurrentPosL
operator|<
name|zzEndReadL
condition|)
name|zzInput
operator|=
name|zzBufferL
index|[
name|zzCurrentPosL
operator|++
index|]
expr_stmt|;
elseif|else
if|if
condition|(
name|zzAtEOF
condition|)
block|{
name|zzInput
operator|=
name|YYEOF
expr_stmt|;
break|break
name|zzForAction
break|;
block|}
else|else
block|{
comment|// store back cached positions
name|zzCurrentPos
operator|=
name|zzCurrentPosL
expr_stmt|;
name|zzMarkedPos
operator|=
name|zzMarkedPosL
expr_stmt|;
name|boolean
name|eof
init|=
name|zzRefill
argument_list|()
decl_stmt|;
comment|// get translated positions and possibly new buffer
name|zzCurrentPosL
operator|=
name|zzCurrentPos
expr_stmt|;
name|zzMarkedPosL
operator|=
name|zzMarkedPos
expr_stmt|;
name|zzBufferL
operator|=
name|zzBuffer
expr_stmt|;
name|zzEndReadL
operator|=
name|zzEndRead
expr_stmt|;
if|if
condition|(
name|eof
condition|)
block|{
name|zzInput
operator|=
name|YYEOF
expr_stmt|;
break|break
name|zzForAction
break|;
block|}
else|else
block|{
name|zzInput
operator|=
name|zzBufferL
index|[
name|zzCurrentPosL
operator|++
index|]
expr_stmt|;
block|}
block|}
name|int
name|zzNext
init|=
name|zzTransL
index|[
name|zzRowMapL
index|[
name|zzState
index|]
operator|+
name|zzCMapL
index|[
name|zzInput
index|]
index|]
decl_stmt|;
if|if
condition|(
name|zzNext
operator|==
operator|-
literal|1
condition|)
break|break
name|zzForAction
break|;
name|zzState
operator|=
name|zzNext
expr_stmt|;
name|int
name|zzAttributes
init|=
name|zzAttrL
index|[
name|zzState
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|zzAttributes
operator|&
literal|1
operator|)
operator|==
literal|1
condition|)
block|{
name|zzAction
operator|=
name|zzState
expr_stmt|;
name|zzMarkedPosL
operator|=
name|zzCurrentPosL
expr_stmt|;
if|if
condition|(
operator|(
name|zzAttributes
operator|&
literal|8
operator|)
operator|==
literal|8
condition|)
break|break
name|zzForAction
break|;
block|}
block|}
block|}
comment|// store back cached position
name|zzMarkedPos
operator|=
name|zzMarkedPosL
expr_stmt|;
switch|switch
condition|(
name|zzAction
operator|<
literal|0
condition|?
name|zzAction
else|:
name|ZZ_ACTION
index|[
name|zzAction
index|]
condition|)
block|{
case|case
literal|7
case|:
block|{
comment|/* ignore */
block|}
case|case
literal|44
case|:
break|break;
case|case
literal|3
case|:
block|{
name|positionInc
operator|=
literal|1
expr_stmt|;
return|return
name|CJ
return|;
block|}
case|case
literal|45
case|:
break|break;
case|case
literal|28
case|:
block|{
name|numBalanced
operator|=
literal|0
expr_stmt|;
name|currentTokType
operator|=
name|ALPHANUM
expr_stmt|;
name|yybegin
argument_list|(
name|YYINITIAL
argument_list|)
expr_stmt|;
comment|/*end italics*/
block|}
case|case
literal|46
case|:
break|break;
case|case
literal|9
case|:
block|{
name|numLinkToks
operator|=
literal|0
expr_stmt|;
name|positionInc
operator|=
literal|0
expr_stmt|;
name|yybegin
argument_list|(
name|YYINITIAL
argument_list|)
expr_stmt|;
block|}
case|case
literal|47
case|:
break|break;
case|case
literal|4
case|:
block|{
name|positionInc
operator|=
literal|1
expr_stmt|;
name|currentTokType
operator|=
name|EXTERNAL_LINK_URL
expr_stmt|;
name|yybegin
argument_list|(
name|EXTERNAL_LINK_STATE
argument_list|)
expr_stmt|;
block|}
case|case
literal|48
case|:
break|break;
case|case
literal|39
case|:
block|{
name|numBalanced
operator|=
literal|0
expr_stmt|;
name|currentTokType
operator|=
name|ALPHANUM
expr_stmt|;
name|yybegin
argument_list|(
name|YYINITIAL
argument_list|)
expr_stmt|;
comment|/*end bold italics*/
block|}
case|case
literal|49
case|:
break|break;
case|case
literal|11
case|:
block|{
name|currentTokType
operator|=
name|ITALICS
expr_stmt|;
name|yybegin
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
return|return
name|currentTokType
return|;
comment|/*italics*/
block|}
case|case
literal|50
case|:
break|break;
case|case
literal|23
case|:
block|{
name|positionInc
operator|=
literal|1
expr_stmt|;
name|currentTokType
operator|=
name|INTERNAL_LINK
expr_stmt|;
name|yybegin
argument_list|(
name|INTERNAL_LINK_STATE
argument_list|)
expr_stmt|;
block|}
case|case
literal|51
case|:
break|break;
case|case
literal|5
case|:
block|{
name|yybegin
argument_list|(
name|CATEGORY_STATE
argument_list|)
expr_stmt|;
return|return
name|currentTokType
return|;
block|}
case|case
literal|52
case|:
break|break;
case|case
literal|36
case|:
block|{
name|numBalanced
operator|=
literal|0
expr_stmt|;
name|currentTokType
operator|=
name|ALPHANUM
expr_stmt|;
name|yybegin
argument_list|(
name|YYINITIAL
argument_list|)
expr_stmt|;
comment|/*end sub header*/
block|}
case|case
literal|53
case|:
break|break;
case|case
literal|8
case|:
block|{
if|if
condition|(
name|numLinkToks
operator|==
literal|0
condition|)
block|{
name|positionInc
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|positionInc
operator|=
literal|1
expr_stmt|;
block|}
name|currentTokType
operator|=
name|EXTERNAL_LINK
expr_stmt|;
name|yybegin
argument_list|(
name|EXTERNAL_LINK_STATE
argument_list|)
expr_stmt|;
name|numLinkToks
operator|++
expr_stmt|;
return|return
name|currentTokType
return|;
block|}
case|case
literal|54
case|:
break|break;
case|case
literal|24
case|:
block|{
name|positionInc
operator|=
literal|1
expr_stmt|;
name|currentTokType
operator|=
name|CITATION
expr_stmt|;
name|yybegin
argument_list|(
name|DOUBLE_BRACE_STATE
argument_list|)
expr_stmt|;
block|}
case|case
literal|55
case|:
break|break;
case|case
literal|22
case|:
block|{
name|positionInc
operator|=
literal|1
expr_stmt|;
name|yybegin
argument_list|(
name|DOUBLE_EQUALS_STATE
argument_list|)
expr_stmt|;
block|}
case|case
literal|56
case|:
break|break;
case|case
literal|41
case|:
block|{
name|positionInc
operator|=
literal|1
expr_stmt|;
name|currentTokType
operator|=
name|CATEGORY
expr_stmt|;
name|yybegin
argument_list|(
name|CATEGORY_STATE
argument_list|)
expr_stmt|;
block|}
case|case
literal|57
case|:
break|break;
case|case
literal|18
case|:
block|{
name|yybegin
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
return|return
name|currentTokType
return|;
comment|/* STRING ALPHANUM*/
block|}
case|case
literal|58
case|:
break|break;
case|case
literal|21
case|:
block|{
name|positionInc
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|numBalanced
operator|==
literal|0
condition|)
block|{
name|numBalanced
operator|++
expr_stmt|;
name|yybegin
argument_list|(
name|TWO_SINGLE_QUOTES_STATE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|numBalanced
operator|=
literal|0
expr_stmt|;
block|}
block|}
case|case
literal|59
case|:
break|break;
case|case
literal|1
case|:
block|{
name|positionInc
operator|=
literal|1
expr_stmt|;
block|}
case|case
literal|60
case|:
break|break;
case|case
literal|43
case|:
block|{
name|numBalanced
operator|=
literal|0
expr_stmt|;
name|currentTokType
operator|=
name|CATEGORY
expr_stmt|;
name|yybegin
argument_list|(
name|CATEGORY_STATE
argument_list|)
expr_stmt|;
block|}
case|case
literal|61
case|:
break|break;
case|case
literal|25
case|:
block|{
name|yybegin
argument_list|(
name|YYINITIAL
argument_list|)
expr_stmt|;
block|}
case|case
literal|62
case|:
break|break;
case|case
literal|40
case|:
block|{
name|positionInc
operator|=
literal|1
expr_stmt|;
name|yybegin
argument_list|(
name|EXTERNAL_LINK_STATE
argument_list|)
expr_stmt|;
return|return
name|currentTokType
return|;
block|}
case|case
literal|63
case|:
break|break;
case|case
literal|19
case|:
block|{
name|numBalanced
operator|=
literal|0
expr_stmt|;
name|currentTokType
operator|=
name|EXTERNAL_LINK
expr_stmt|;
name|yybegin
argument_list|(
name|EXTERNAL_LINK_STATE
argument_list|)
expr_stmt|;
block|}
case|case
literal|64
case|:
break|break;
case|case
literal|13
case|:
block|{
name|yybegin
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
return|return
name|currentTokType
return|;
block|}
case|case
literal|65
case|:
break|break;
case|case
literal|38
case|:
block|{
name|positionInc
operator|=
literal|1
expr_stmt|;
return|return
name|EMAIL
return|;
block|}
case|case
literal|66
case|:
break|break;
case|case
literal|37
case|:
block|{
name|positionInc
operator|=
literal|1
expr_stmt|;
return|return
name|ACRONYM
return|;
block|}
case|case
literal|67
case|:
break|break;
case|case
literal|17
case|:
block|{
comment|/* ignore STRING */
block|}
case|case
literal|68
case|:
break|break;
case|case
literal|42
case|:
block|{
name|currentTokType
operator|=
name|CATEGORY
expr_stmt|;
name|yybegin
argument_list|(
name|CATEGORY_STATE
argument_list|)
expr_stmt|;
block|}
case|case
literal|69
case|:
break|break;
case|case
literal|20
case|:
block|{
name|yybegin
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
return|return
name|currentTokType
return|;
comment|/*pipe*/
block|}
case|case
literal|70
case|:
break|break;
case|case
literal|12
case|:
block|{
name|currentTokType
operator|=
name|EXTERNAL_LINK
expr_stmt|;
name|yybegin
argument_list|(
name|EXTERNAL_LINK_STATE
argument_list|)
expr_stmt|;
block|}
case|case
literal|71
case|:
break|break;
case|case
literal|29
case|:
block|{
name|numBalanced
operator|=
literal|0
expr_stmt|;
name|currentTokType
operator|=
name|INTERNAL_LINK
expr_stmt|;
name|yybegin
argument_list|(
name|INTERNAL_LINK_STATE
argument_list|)
expr_stmt|;
block|}
case|case
literal|72
case|:
break|break;
case|case
literal|35
case|:
block|{
name|numBalanced
operator|=
literal|0
expr_stmt|;
name|currentTokType
operator|=
name|ALPHANUM
expr_stmt|;
name|yybegin
argument_list|(
name|YYINITIAL
argument_list|)
expr_stmt|;
comment|/*end bold*/
block|}
case|case
literal|73
case|:
break|break;
case|case
literal|16
case|:
block|{
name|yybegin
argument_list|(
name|DOUBLE_BRACE_STATE
argument_list|)
expr_stmt|;
return|return
name|currentTokType
return|;
block|}
case|case
literal|74
case|:
break|break;
case|case
literal|31
case|:
block|{
name|positionInc
operator|=
literal|1
expr_stmt|;
return|return
name|HOST
return|;
block|}
case|case
literal|75
case|:
break|break;
case|case
literal|34
case|:
block|{
name|currentTokType
operator|=
name|BOLD_ITALICS
expr_stmt|;
name|yybegin
argument_list|(
name|FIVE_SINGLE_QUOTES_STATE
argument_list|)
expr_stmt|;
block|}
case|case
literal|76
case|:
break|break;
case|case
literal|27
case|:
block|{
name|currentTokType
operator|=
name|INTERNAL_LINK
expr_stmt|;
name|yybegin
argument_list|(
name|INTERNAL_LINK_STATE
argument_list|)
expr_stmt|;
block|}
case|case
literal|77
case|:
break|break;
case|case
literal|14
case|:
block|{
name|currentTokType
operator|=
name|SUB_HEADING
expr_stmt|;
name|yybegin
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
block|}
case|case
literal|78
case|:
break|break;
case|case
literal|30
case|:
block|{
name|positionInc
operator|=
literal|1
expr_stmt|;
return|return
name|APOSTROPHE
return|;
block|}
case|case
literal|79
case|:
break|break;
case|case
literal|32
case|:
block|{
name|positionInc
operator|=
literal|1
expr_stmt|;
return|return
name|NUM
return|;
block|}
case|case
literal|80
case|:
break|break;
case|case
literal|15
case|:
block|{
name|currentTokType
operator|=
name|HEADING
expr_stmt|;
name|yybegin
argument_list|(
name|DOUBLE_EQUALS_STATE
argument_list|)
expr_stmt|;
return|return
name|currentTokType
return|;
block|}
case|case
literal|81
case|:
break|break;
case|case
literal|6
case|:
block|{
name|yybegin
argument_list|(
name|INTERNAL_LINK_STATE
argument_list|)
expr_stmt|;
return|return
name|currentTokType
return|;
block|}
case|case
literal|82
case|:
break|break;
case|case
literal|2
case|:
block|{
name|positionInc
operator|=
literal|1
expr_stmt|;
return|return
name|ALPHANUM
return|;
block|}
case|case
literal|83
case|:
break|break;
case|case
literal|33
case|:
block|{
name|positionInc
operator|=
literal|1
expr_stmt|;
return|return
name|COMPANY
return|;
block|}
case|case
literal|84
case|:
break|break;
case|case
literal|10
case|:
block|{
name|currentTokType
operator|=
name|BOLD
expr_stmt|;
name|yybegin
argument_list|(
name|THREE_SINGLE_QUOTES_STATE
argument_list|)
expr_stmt|;
block|}
case|case
literal|85
case|:
break|break;
case|case
literal|26
case|:
block|{
name|numLinkToks
operator|=
literal|0
expr_stmt|;
name|yybegin
argument_list|(
name|YYINITIAL
argument_list|)
expr_stmt|;
block|}
case|case
literal|86
case|:
break|break;
default|default:
if|if
condition|(
name|zzInput
operator|==
name|YYEOF
operator|&&
name|zzStartRead
operator|==
name|zzCurrentPos
condition|)
block|{
name|zzAtEOF
operator|=
literal|true
expr_stmt|;
return|return
name|YYEOF
return|;
block|}
else|else
block|{
name|zzScanError
argument_list|(
name|ZZ_NO_MATCH
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class
end_unit
