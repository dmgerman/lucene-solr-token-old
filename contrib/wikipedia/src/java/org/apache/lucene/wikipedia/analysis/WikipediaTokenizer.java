begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.wikipedia.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|wikipedia
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_comment
comment|/**  * Extension of StandardTokenizer that is aware of Wikipedia syntax.  It is based off of the  * Wikipedia tutorial available at http://en.wikipedia.org/wiki/Wikipedia:Tutorial, but it may not be complete.  *  *<p/>  * EXPERIMENTAL !!!!!!!!!  * NOTE: This Tokenizer is considered experimental and the grammar is subject to change in the trunk and in follow up releases.  *  **/
end_comment
begin_class
DECL|class|WikipediaTokenizer
specifier|public
class|class
name|WikipediaTokenizer
extends|extends
name|Tokenizer
block|{
DECL|field|INTERNAL_LINK
specifier|public
specifier|static
specifier|final
name|String
name|INTERNAL_LINK
init|=
literal|"il"
decl_stmt|;
DECL|field|EXTERNAL_LINK
specifier|public
specifier|static
specifier|final
name|String
name|EXTERNAL_LINK
init|=
literal|"el"
decl_stmt|;
comment|//The URL part of the link, i.e. the first token
DECL|field|EXTERNAL_LINK_URL
specifier|public
specifier|static
specifier|final
name|String
name|EXTERNAL_LINK_URL
init|=
literal|"elu"
decl_stmt|;
DECL|field|CITATION
specifier|public
specifier|static
specifier|final
name|String
name|CITATION
init|=
literal|"ci"
decl_stmt|;
DECL|field|CATEGORY
specifier|public
specifier|static
specifier|final
name|String
name|CATEGORY
init|=
literal|"c"
decl_stmt|;
DECL|field|BOLD
specifier|public
specifier|static
specifier|final
name|String
name|BOLD
init|=
literal|"b"
decl_stmt|;
DECL|field|ITALICS
specifier|public
specifier|static
specifier|final
name|String
name|ITALICS
init|=
literal|"i"
decl_stmt|;
DECL|field|BOLD_ITALICS
specifier|public
specifier|static
specifier|final
name|String
name|BOLD_ITALICS
init|=
literal|"bi"
decl_stmt|;
DECL|field|HEADING
specifier|public
specifier|static
specifier|final
name|String
name|HEADING
init|=
literal|"h"
decl_stmt|;
DECL|field|SUB_HEADING
specifier|public
specifier|static
specifier|final
name|String
name|SUB_HEADING
init|=
literal|"sh"
decl_stmt|;
comment|/**    * A private instance of the JFlex-constructed scanner    */
DECL|field|scanner
specifier|private
specifier|final
name|WikipediaTokenizerImpl
name|scanner
decl_stmt|;
DECL|method|setInput
name|void
name|setInput
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
name|this
operator|.
name|input
operator|=
name|reader
expr_stmt|;
block|}
comment|/**    * Creates a new instance of the {@link WikipediaTokenizer}. Attaches the    *<code>input</code> to a newly created JFlex scanner.    * @param input The Input Reader    */
DECL|method|WikipediaTokenizer
specifier|public
name|WikipediaTokenizer
parameter_list|(
name|Reader
name|input
parameter_list|)
block|{
name|this
operator|.
name|input
operator|=
name|input
expr_stmt|;
name|this
operator|.
name|scanner
operator|=
operator|new
name|WikipediaTokenizerImpl
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
comment|/*   * (non-Javadoc)   *   * @see org.apache.lucene.analysis.TokenStream#next()   */
DECL|method|next
specifier|public
name|Token
name|next
parameter_list|(
name|Token
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|tokenType
init|=
name|scanner
operator|.
name|getNextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenType
operator|==
name|WikipediaTokenizerImpl
operator|.
name|YYEOF
condition|)
block|{
return|return
literal|null
return|;
block|}
name|scanner
operator|.
name|getText
argument_list|(
name|result
argument_list|,
name|tokenType
argument_list|)
expr_stmt|;
specifier|final
name|int
name|start
init|=
name|scanner
operator|.
name|yychar
argument_list|()
decl_stmt|;
name|result
operator|.
name|setStartOffset
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|result
operator|.
name|setEndOffset
argument_list|(
name|start
operator|+
name|result
operator|.
name|termLength
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setPositionIncrement
argument_list|(
name|scanner
operator|.
name|getPositionIncrement
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setType
argument_list|(
name|WikipediaTokenizerImpl
operator|.
name|TOKEN_TYPES
index|[
name|tokenType
index|]
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/*   * (non-Javadoc)   *   * @see org.apache.lucene.analysis.TokenStream#reset()   */
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|scanner
operator|.
name|yyreset
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|(
name|Reader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|input
operator|=
name|reader
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
