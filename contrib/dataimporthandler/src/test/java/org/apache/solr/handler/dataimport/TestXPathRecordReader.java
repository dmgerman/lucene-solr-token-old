begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed onT an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.dataimport
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
package|;
end_package
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/**  *<p>  * Test for XPathRecordReader  *</p>  *  * @version $Id$  * @since solr 1.3  */
end_comment
begin_class
DECL|class|TestXPathRecordReader
specifier|public
class|class
name|TestXPathRecordReader
block|{
annotation|@
name|Test
DECL|method|basic
specifier|public
name|void
name|basic
parameter_list|()
block|{
name|String
name|xml
init|=
literal|"<root>\n"
operator|+
literal|"<b>\n"
operator|+
literal|"<c>Hello C1</c>\n"
operator|+
literal|"<c>Hello C1</c>\n"
operator|+
literal|"</b>\n"
operator|+
literal|"<b>\n"
operator|+
literal|"<c>Hello C2</c>\n"
operator|+
literal|"</b>\n"
operator|+
literal|"</root>"
decl_stmt|;
name|XPathRecordReader
name|rr
init|=
operator|new
name|XPathRecordReader
argument_list|(
literal|"/root/b"
argument_list|)
decl_stmt|;
name|rr
operator|.
name|addField
argument_list|(
literal|"c"
argument_list|,
literal|"/root/b/c"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|l
init|=
name|rr
operator|.
name|getAllRecords
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|List
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|List
operator|)
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|attributes
specifier|public
name|void
name|attributes
parameter_list|()
block|{
name|String
name|xml
init|=
literal|"<root>\n"
operator|+
literal|"<b a=\"x0\" b=\"y0\" />\n"
operator|+
literal|"<b a=\"x1\" b=\"y1\" />\n"
operator|+
literal|"<b a=\"x2\" b=\"y2\" />\n"
operator|+
literal|"</root>"
decl_stmt|;
name|XPathRecordReader
name|rr
init|=
operator|new
name|XPathRecordReader
argument_list|(
literal|"/root/b"
argument_list|)
decl_stmt|;
name|rr
operator|.
name|addField
argument_list|(
literal|"a"
argument_list|,
literal|"/root/b/@a"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rr
operator|.
name|addField
argument_list|(
literal|"b"
argument_list|,
literal|"/root/b/@b"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|l
init|=
name|rr
operator|.
name|getAllRecords
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"x0"
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"y1"
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|attributes2Level
specifier|public
name|void
name|attributes2Level
parameter_list|()
block|{
name|String
name|xml
init|=
literal|"<root>\n"
operator|+
literal|"<a>\n"
operator|+
literal|"<b a=\"x0\" b=\"y0\" />\n"
operator|+
literal|"<b a=\"x1\" b=\"y1\" />\n"
operator|+
literal|"<b a=\"x2\" b=\"y2\" />\n"
operator|+
literal|"</a>"
operator|+
literal|"</root>"
decl_stmt|;
name|XPathRecordReader
name|rr
init|=
operator|new
name|XPathRecordReader
argument_list|(
literal|"/root/a/b"
argument_list|)
decl_stmt|;
name|rr
operator|.
name|addField
argument_list|(
literal|"a"
argument_list|,
literal|"/root/a/b/@a"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rr
operator|.
name|addField
argument_list|(
literal|"b"
argument_list|,
literal|"/root/a/b/@b"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|l
init|=
name|rr
operator|.
name|getAllRecords
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"x0"
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"y1"
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|attributes2LevelHetero
specifier|public
name|void
name|attributes2LevelHetero
parameter_list|()
block|{
name|String
name|xml
init|=
literal|"<root>\n"
operator|+
literal|"<a>\n"
operator|+
literal|"<b a=\"x0\" b=\"y0\" />\n"
operator|+
literal|"<b a=\"x1\" b=\"y1\" />\n"
operator|+
literal|"<b a=\"x2\" b=\"y2\" />\n"
operator|+
literal|"</a>"
operator|+
literal|"<x>\n"
operator|+
literal|"<b a=\"x4\" b=\"y4\" />\n"
operator|+
literal|"<b a=\"x5\" b=\"y5\" />\n"
operator|+
literal|"<b a=\"x6\" b=\"y6\" />\n"
operator|+
literal|"</x>"
operator|+
literal|"</root>"
decl_stmt|;
name|XPathRecordReader
name|rr
init|=
operator|new
name|XPathRecordReader
argument_list|(
literal|"/root/a | /root/x"
argument_list|)
decl_stmt|;
name|rr
operator|.
name|addField
argument_list|(
literal|"a"
argument_list|,
literal|"/root/a/b/@a"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rr
operator|.
name|addField
argument_list|(
literal|"b"
argument_list|,
literal|"/root/a/b/@b"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rr
operator|.
name|addField
argument_list|(
literal|"a"
argument_list|,
literal|"/root/x/b/@a"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rr
operator|.
name|addField
argument_list|(
literal|"b"
argument_list|,
literal|"/root/x/b/@b"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|a
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|x
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|rr
operator|.
name|streamRecords
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|,
operator|new
name|XPathRecordReader
operator|.
name|Handler
argument_list|()
block|{
specifier|public
name|void
name|handle
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|record
parameter_list|,
name|String
name|xpath
parameter_list|)
block|{
if|if
condition|(
name|record
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|xpath
operator|.
name|equals
argument_list|(
literal|"/root/a"
argument_list|)
condition|)
name|a
operator|.
name|add
argument_list|(
name|record
argument_list|)
expr_stmt|;
if|if
condition|(
name|xpath
operator|.
name|equals
argument_list|(
literal|"/root/x"
argument_list|)
condition|)
name|x
operator|.
name|add
argument_list|(
name|record
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|a
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|x
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|attributes2LevelMissingAttrVal
specifier|public
name|void
name|attributes2LevelMissingAttrVal
parameter_list|()
block|{
name|String
name|xml
init|=
literal|"<root>\n"
operator|+
literal|"<a>\n"
operator|+
literal|"<b a=\"x0\" b=\"y0\" />\n"
operator|+
literal|"<b a=\"x1\" b=\"y1\" />\n"
operator|+
literal|"</a>"
operator|+
literal|"<a>\n"
operator|+
literal|"<b a=\"x3\"  />\n"
operator|+
literal|"<b b=\"y4\" />\n"
operator|+
literal|"</a>"
operator|+
literal|"</root>"
decl_stmt|;
name|XPathRecordReader
name|rr
init|=
operator|new
name|XPathRecordReader
argument_list|(
literal|"/root/a"
argument_list|)
decl_stmt|;
name|rr
operator|.
name|addField
argument_list|(
literal|"a"
argument_list|,
literal|"/root/a/b/@a"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rr
operator|.
name|addField
argument_list|(
literal|"b"
argument_list|,
literal|"/root/a/b/@b"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|l
init|=
name|rr
operator|.
name|getAllRecords
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
operator|(
operator|(
name|List
operator|)
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
operator|(
operator|(
name|List
operator|)
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|elems2LevelMissing
specifier|public
name|void
name|elems2LevelMissing
parameter_list|()
block|{
name|String
name|xml
init|=
literal|"<root>\n"
operator|+
literal|"\t<a>\n"
operator|+
literal|"\t<b>\n"
operator|+
literal|"\t<x>x0</x>\n"
operator|+
literal|"\t<y>y0</y>\n"
operator|+
literal|"\t</b>\n"
operator|+
literal|"\t<b>\n"
operator|+
literal|"\t   \t<x>x1</x>\n"
operator|+
literal|"\t   \t<y>y1</y>\n"
operator|+
literal|"\t</b>\n"
operator|+
literal|"\t</a>\n"
operator|+
literal|"\t<a>\n"
operator|+
literal|"\t<b>\n"
operator|+
literal|"\t<x>x3</x>\n"
operator|+
literal|"\t</b>\n"
operator|+
literal|"\t<b>\n"
operator|+
literal|"\t   \t<y>y4</y>\n"
operator|+
literal|"\t</b>\n"
operator|+
literal|"\t</a>\n"
operator|+
literal|"</root>"
decl_stmt|;
name|XPathRecordReader
name|rr
init|=
operator|new
name|XPathRecordReader
argument_list|(
literal|"/root/a"
argument_list|)
decl_stmt|;
name|rr
operator|.
name|addField
argument_list|(
literal|"a"
argument_list|,
literal|"/root/a/b/x"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rr
operator|.
name|addField
argument_list|(
literal|"b"
argument_list|,
literal|"/root/a/b/y"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|l
init|=
name|rr
operator|.
name|getAllRecords
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
operator|(
operator|(
name|List
operator|)
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
operator|(
operator|(
name|List
operator|)
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|elems2LevelWithAttrib
specifier|public
name|void
name|elems2LevelWithAttrib
parameter_list|()
block|{
name|String
name|xml
init|=
literal|"<root>\n"
operator|+
literal|"\t<a>\n"
operator|+
literal|"\t<b k=\"x\">\n"
operator|+
literal|"\t<x>x0</x>\n"
operator|+
literal|"\t<y>y0</y>\n"
operator|+
literal|"\t</b>\n"
operator|+
literal|"\t<b k=\"y\">\n"
operator|+
literal|"\t   \t<x>x1</x>\n"
operator|+
literal|"\t   \t<y>y1</y>\n"
operator|+
literal|"\t</b>\n"
operator|+
literal|"\t</a>\n"
operator|+
literal|"\t<a>\n"
operator|+
literal|"\t<b>\n"
operator|+
literal|"\t<x>x3</x>\n"
operator|+
literal|"\t</b>\n"
operator|+
literal|"\t<b>\n"
operator|+
literal|"\t   \t<y>y4</y>\n"
operator|+
literal|"\t</b>\n"
operator|+
literal|"\t</a>\n"
operator|+
literal|"</root>"
decl_stmt|;
name|XPathRecordReader
name|rr
init|=
operator|new
name|XPathRecordReader
argument_list|(
literal|"/root/a"
argument_list|)
decl_stmt|;
name|rr
operator|.
name|addField
argument_list|(
literal|"x"
argument_list|,
literal|"/root/a/b[@k]/x"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rr
operator|.
name|addField
argument_list|(
literal|"y"
argument_list|,
literal|"/root/a/b[@k]/y"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|l
init|=
name|rr
operator|.
name|getAllRecords
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|List
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"x"
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|List
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"y"
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|elems2LevelWithAttribMultiple
specifier|public
name|void
name|elems2LevelWithAttribMultiple
parameter_list|()
block|{
name|String
name|xml
init|=
literal|"<root>\n"
operator|+
literal|"\t<a>\n"
operator|+
literal|"\t<b k=\"x\" m=\"n\">\n"
operator|+
literal|"\t<x>x0</x>\n"
operator|+
literal|"\t<y>y0</y>\n"
operator|+
literal|"\t</b>\n"
operator|+
literal|"\t<b k=\"y\" m=\"p\">\n"
operator|+
literal|"\t   \t<x>x1</x>\n"
operator|+
literal|"\t   \t<y>y1</y>\n"
operator|+
literal|"\t</b>\n"
operator|+
literal|"\t</a>\n"
operator|+
literal|"\t<a>\n"
operator|+
literal|"\t<b k=\"x\">\n"
operator|+
literal|"\t<x>x3</x>\n"
operator|+
literal|"\t</b>\n"
operator|+
literal|"\t<b m=\"n\">\n"
operator|+
literal|"\t   \t<y>y4</y>\n"
operator|+
literal|"\t</b>\n"
operator|+
literal|"\t</a>\n"
operator|+
literal|"</root>"
decl_stmt|;
name|XPathRecordReader
name|rr
init|=
operator|new
name|XPathRecordReader
argument_list|(
literal|"/root/a"
argument_list|)
decl_stmt|;
name|rr
operator|.
name|addField
argument_list|(
literal|"x"
argument_list|,
literal|"/root/a/b[@k][@m='n']/x"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rr
operator|.
name|addField
argument_list|(
literal|"y"
argument_list|,
literal|"/root/a/b[@k][@m='n']/y"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|l
init|=
name|rr
operator|.
name|getAllRecords
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|List
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"x"
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|List
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"y"
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|elems2LevelWithAttribVal
specifier|public
name|void
name|elems2LevelWithAttribVal
parameter_list|()
block|{
name|String
name|xml
init|=
literal|"<root>\n"
operator|+
literal|"\t<a>\n"
operator|+
literal|"\t<b k=\"x\">\n"
operator|+
literal|"\t<x>x0</x>\n"
operator|+
literal|"\t<y>y0</y>\n"
operator|+
literal|"\t</b>\n"
operator|+
literal|"\t<b k=\"y\">\n"
operator|+
literal|"\t   \t<x>x1</x>\n"
operator|+
literal|"\t   \t<y>y1</y>\n"
operator|+
literal|"\t</b>\n"
operator|+
literal|"\t</a>\n"
operator|+
literal|"\t<a>\n"
operator|+
literal|"\t<b>\n"
operator|+
literal|"\t<x>x3</x>\n"
operator|+
literal|"\t</b>\n"
operator|+
literal|"\t<b>\n"
operator|+
literal|"\t   \t<y>y4</y>\n"
operator|+
literal|"\t</b>\n"
operator|+
literal|"\t</a>\n"
operator|+
literal|"</root>"
decl_stmt|;
name|XPathRecordReader
name|rr
init|=
operator|new
name|XPathRecordReader
argument_list|(
literal|"/root/a"
argument_list|)
decl_stmt|;
name|rr
operator|.
name|addField
argument_list|(
literal|"x"
argument_list|,
literal|"/root/a/b[@k='x']/x"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rr
operator|.
name|addField
argument_list|(
literal|"y"
argument_list|,
literal|"/root/a/b[@k='x']/y"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|l
init|=
name|rr
operator|.
name|getAllRecords
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|List
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"x"
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|List
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"y"
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|another
specifier|public
name|void
name|another
parameter_list|()
block|{
name|String
name|xml
init|=
literal|"<root>\n"
operator|+
literal|"<contenido id=\"10097\" idioma=\"cat\">\n"
operator|+
literal|"<antetitulo></antetitulo>\n"
operator|+
literal|"<titulo>\n"
operator|+
literal|"               This is my title\n"
operator|+
literal|"</titulo>\n"
operator|+
literal|"<resumen>\n"
operator|+
literal|"               This is my summary\n"
operator|+
literal|"</resumen>\n"
operator|+
literal|"<texto>\n"
operator|+
literal|"               This is the body of my text\n"
operator|+
literal|"</texto>\n"
operator|+
literal|"</contenido>\n"
operator|+
literal|"</root>"
decl_stmt|;
name|XPathRecordReader
name|rr
init|=
operator|new
name|XPathRecordReader
argument_list|(
literal|"/root/contenido"
argument_list|)
decl_stmt|;
name|rr
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"/root/contenido/@id"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rr
operator|.
name|addField
argument_list|(
literal|"title"
argument_list|,
literal|"/root/contenido/titulo"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rr
operator|.
name|addField
argument_list|(
literal|"resume"
argument_list|,
literal|"/root/contenido/resumen"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rr
operator|.
name|addField
argument_list|(
literal|"text"
argument_list|,
literal|"/root/contenido/texto"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|l
init|=
name|rr
operator|.
name|getAllRecords
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"10097"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"This is my title"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"title"
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"This is my summary"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"resume"
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"This is the body of my text"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"text"
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
