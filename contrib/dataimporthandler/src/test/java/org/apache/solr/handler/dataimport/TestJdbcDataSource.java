begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.dataimport
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
package|;
end_package
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  *<p>  * Test for JdbcDataSource  *</p>  *<p/>  *<p>  * Note: The tests are ignored for the lack of DB support for testing  *</p>  *  * @version $Id$  * @since solr 1.3  */
end_comment
begin_class
DECL|class|TestJdbcDataSource
specifier|public
class|class
name|TestJdbcDataSource
block|{
annotation|@
name|Test
annotation|@
name|Ignore
DECL|method|basic
specifier|public
name|void
name|basic
parameter_list|()
throws|throws
name|Exception
block|{
name|JdbcDataSource
name|dataSource
init|=
operator|new
name|JdbcDataSource
argument_list|()
decl_stmt|;
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|p
operator|.
name|put
argument_list|(
literal|"driver"
argument_list|,
literal|"com.mysql.jdbc.Driver"
argument_list|)
expr_stmt|;
name|p
operator|.
name|put
argument_list|(
literal|"url"
argument_list|,
literal|"jdbc:mysql://localhost/autos"
argument_list|)
expr_stmt|;
name|p
operator|.
name|put
argument_list|(
literal|"user"
argument_list|,
literal|"root"
argument_list|)
expr_stmt|;
name|p
operator|.
name|put
argument_list|(
literal|"password"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|flds
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|f
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|f
operator|.
name|put
argument_list|(
literal|"column"
argument_list|,
literal|"trim_id"
argument_list|)
expr_stmt|;
name|f
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"long"
argument_list|)
expr_stmt|;
name|flds
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|f
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|f
operator|.
name|put
argument_list|(
literal|"column"
argument_list|,
literal|"msrp"
argument_list|)
expr_stmt|;
name|f
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"float"
argument_list|)
expr_stmt|;
name|flds
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|Context
name|c
init|=
name|AbstractDataImportHandlerTest
operator|.
name|getContext
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|dataSource
argument_list|,
name|Context
operator|.
name|FULL_DUMP
argument_list|,
name|flds
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|dataSource
operator|.
name|init
argument_list|(
name|c
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|i
init|=
name|dataSource
operator|.
name|getData
argument_list|(
literal|"select make,model,year,msrp,trim_id from atrimlisting where make='Acura'"
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|Object
name|msrp
init|=
literal|null
decl_stmt|;
name|Object
name|trim_id
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|msrp
operator|=
name|map
operator|.
name|get
argument_list|(
literal|"msrp"
argument_list|)
expr_stmt|;
name|trim_id
operator|=
name|map
operator|.
name|get
argument_list|(
literal|"trim_id"
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Float
operator|.
name|class
argument_list|,
name|msrp
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|trim_id
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
