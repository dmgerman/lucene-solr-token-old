begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.dataimport
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ContentStream
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
operator|.
name|DataImportHandlerException
operator|.
name|wrapAndThrow
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
operator|.
name|DataImportHandlerException
operator|.
name|SEVERE
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import
begin_comment
comment|/**  *<p> Stores all configuration information for pulling and indexing data.</p>  *<p/>  *<b>This API is experimental and subject to change</b>  *  * @version $Id$  * @since solr 1.3  */
end_comment
begin_class
DECL|class|DataImporter
specifier|public
class|class
name|DataImporter
block|{
DECL|enum|Status
specifier|public
enum|enum
name|Status
block|{
DECL|enum constant|IDLE
DECL|enum constant|RUNNING_FULL_DUMP
DECL|enum constant|RUNNING_DELTA_DUMP
DECL|enum constant|JOB_FAILED
name|IDLE
block|,
name|RUNNING_FULL_DUMP
block|,
name|RUNNING_DELTA_DUMP
block|,
name|JOB_FAILED
block|}
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DataImporter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|status
specifier|private
name|Status
name|status
init|=
name|Status
operator|.
name|IDLE
decl_stmt|;
DECL|field|config
specifier|private
name|DataConfig
name|config
decl_stmt|;
DECL|field|lastIndexTime
specifier|private
name|Date
name|lastIndexTime
decl_stmt|;
DECL|field|indexStartTime
specifier|private
name|Date
name|indexStartTime
decl_stmt|;
DECL|field|store
specifier|private
name|Properties
name|store
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
DECL|field|dataSourceProps
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Properties
argument_list|>
name|dataSourceProps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Properties
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|schema
specifier|private
name|IndexSchema
name|schema
decl_stmt|;
DECL|field|docBuilder
specifier|public
name|DocBuilder
name|docBuilder
decl_stmt|;
DECL|field|cumulativeStatistics
specifier|public
name|DocBuilder
operator|.
name|Statistics
name|cumulativeStatistics
init|=
operator|new
name|DocBuilder
operator|.
name|Statistics
argument_list|()
decl_stmt|;
DECL|field|evaluators
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Evaluator
argument_list|>
name|evaluators
decl_stmt|;
DECL|field|core
specifier|private
name|SolrCore
name|core
decl_stmt|;
DECL|field|importLock
specifier|private
name|ReentrantLock
name|importLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|coreScopeSession
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|coreScopeSession
decl_stmt|;
comment|/**    * Only for testing purposes    */
DECL|method|DataImporter
name|DataImporter
parameter_list|()
block|{
name|coreScopeSession
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|DataImporter
name|DataImporter
parameter_list|(
name|String
name|dataConfig
parameter_list|,
name|SolrCore
name|core
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Properties
argument_list|>
name|ds
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|session
parameter_list|)
block|{
if|if
condition|(
name|dataConfig
operator|==
literal|null
condition|)
throw|throw
operator|new
name|DataImportHandlerException
argument_list|(
name|SEVERE
argument_list|,
literal|"Configuration not found"
argument_list|)
throw|;
name|this
operator|.
name|core
operator|=
name|core
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|core
operator|.
name|getSchema
argument_list|()
expr_stmt|;
name|dataSourceProps
operator|=
name|ds
expr_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
name|session
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|coreScopeSession
operator|=
name|session
expr_stmt|;
name|loadDataConfig
argument_list|(
name|dataConfig
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SchemaField
argument_list|>
name|entry
range|:
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|config
operator|.
name|lowerNameVsSchemaField
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DataConfig
operator|.
name|Entity
name|e
range|:
name|config
operator|.
name|document
operator|.
name|entities
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|DataConfig
operator|.
name|Field
argument_list|>
name|fields
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DataConfig
operator|.
name|Field
argument_list|>
argument_list|()
decl_stmt|;
name|initEntity
argument_list|(
name|e
argument_list|,
name|fields
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyWithSchema
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|identifyPk
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyWithSchema
specifier|private
name|void
name|verifyWithSchema
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|DataConfig
operator|.
name|Field
argument_list|>
name|fields
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|SchemaField
argument_list|>
name|schemaFields
init|=
name|schema
operator|.
name|getFields
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SchemaField
argument_list|>
name|entry
range|:
name|schemaFields
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|SchemaField
name|sf
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fields
operator|.
name|containsKey
argument_list|(
name|sf
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|sf
operator|.
name|isRequired
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|sf
operator|.
name|getName
argument_list|()
operator|+
literal|" is a required field in SolrSchema . But not found in DataConfig"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|DataConfig
operator|.
name|Field
argument_list|>
name|entry
range|:
name|fields
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|DataConfig
operator|.
name|Field
name|fld
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|SchemaField
name|field
init|=
name|schema
operator|.
name|getFieldOrNull
argument_list|(
name|fld
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
name|field
operator|=
name|config
operator|.
name|lowerNameVsSchemaField
operator|.
name|get
argument_list|(
name|fld
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"The field :"
operator|+
name|fld
operator|.
name|getName
argument_list|()
operator|+
literal|" present in DataConfig does not have a counterpart in Solr Schema"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Used by tests    */
DECL|method|loadAndInit
name|void
name|loadAndInit
parameter_list|(
name|String
name|configStr
parameter_list|)
block|{
name|loadDataConfig
argument_list|(
name|configStr
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|DataConfig
operator|.
name|Field
argument_list|>
name|fields
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DataConfig
operator|.
name|Field
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|DataConfig
operator|.
name|Entity
name|entity
range|:
name|config
operator|.
name|document
operator|.
name|entities
control|)
block|{
name|initEntity
argument_list|(
name|entity
argument_list|,
name|fields
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|identifyPk
specifier|private
name|void
name|identifyPk
parameter_list|(
name|DataConfig
operator|.
name|Entity
name|entity
parameter_list|)
block|{
name|String
name|schemaPk
init|=
name|schema
operator|.
name|getUniqueKeyField
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|//if no fields are mentioned . solr uniqeKey is same as dih 'pk'
name|entity
operator|.
name|pkMappingFromSchema
operator|=
name|schemaPk
expr_stmt|;
for|for
control|(
name|DataConfig
operator|.
name|Field
name|field
range|:
name|entity
operator|.
name|fields
control|)
block|{
if|if
condition|(
name|field
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|schemaPk
argument_list|)
condition|)
block|{
name|entity
operator|.
name|pkMappingFromSchema
operator|=
name|field
operator|.
name|column
expr_stmt|;
comment|//get the corresponding column mapping for the solr uniqueKey
comment|// But if there are multiple columns mapping to the solr uniqueKey, it will fail
comment|// so , in one off cases we may need pk
break|break;
block|}
block|}
block|}
DECL|method|loadDataConfig
name|void
name|loadDataConfig
parameter_list|(
name|String
name|configFile
parameter_list|)
block|{
try|try
block|{
name|DocumentBuilder
name|builder
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|builder
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|configFile
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|config
operator|=
operator|new
name|DataConfig
argument_list|()
expr_stmt|;
name|NodeList
name|elems
init|=
name|document
operator|.
name|getElementsByTagName
argument_list|(
literal|"dataConfig"
argument_list|)
decl_stmt|;
if|if
condition|(
name|elems
operator|==
literal|null
operator|||
name|elems
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|DataImportHandlerException
argument_list|(
name|SEVERE
argument_list|,
literal|"the root node '<dataConfig>' is missing"
argument_list|)
throw|;
block|}
name|config
operator|.
name|readFromXml
argument_list|(
operator|(
name|Element
operator|)
name|elems
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Data Configuration loaded successfully"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrConfig
operator|.
name|severeErrors
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DataImportHandlerException
argument_list|(
name|SEVERE
argument_list|,
literal|"Exception occurred while initializing context"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|initEntity
specifier|private
name|void
name|initEntity
parameter_list|(
name|DataConfig
operator|.
name|Entity
name|e
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|DataConfig
operator|.
name|Field
argument_list|>
name|fields
parameter_list|,
name|boolean
name|docRootFound
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|pk
operator|!=
literal|null
condition|)
name|e
operator|.
name|primaryKeys
operator|=
name|e
operator|.
name|pk
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|e
operator|.
name|allAttributes
operator|.
name|put
argument_list|(
name|DATA_SRC
argument_list|,
name|e
operator|.
name|dataSource
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|docRootFound
operator|&&
operator|!
literal|"false"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|docRoot
argument_list|)
condition|)
block|{
comment|// if in this chain no document root is found()
name|e
operator|.
name|isDocRoot
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|.
name|fields
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DataConfig
operator|.
name|Field
name|f
range|:
name|e
operator|.
name|fields
control|)
block|{
if|if
condition|(
name|schema
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|f
operator|.
name|name
operator|!=
literal|null
operator|&&
name|f
operator|.
name|name
operator|.
name|contains
argument_list|(
literal|"${"
argument_list|)
condition|)
block|{
name|f
operator|.
name|dynamicName
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
name|SchemaField
name|schemaField
init|=
name|schema
operator|.
name|getFieldOrNull
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemaField
operator|==
literal|null
condition|)
block|{
name|schemaField
operator|=
name|config
operator|.
name|lowerNameVsSchemaField
operator|.
name|get
argument_list|(
name|f
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|schemaField
operator|!=
literal|null
condition|)
name|f
operator|.
name|name
operator|=
name|schemaField
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|schemaField
operator|!=
literal|null
condition|)
block|{
name|f
operator|.
name|multiValued
operator|=
name|schemaField
operator|.
name|multiValued
argument_list|()
expr_stmt|;
name|f
operator|.
name|allAttributes
operator|.
name|put
argument_list|(
name|MULTI_VALUED
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|schemaField
operator|.
name|multiValued
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|allAttributes
operator|.
name|put
argument_list|(
name|TYPE
argument_list|,
name|schemaField
operator|.
name|getType
argument_list|()
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|allAttributes
operator|.
name|put
argument_list|(
literal|"indexed"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|schemaField
operator|.
name|indexed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|allAttributes
operator|.
name|put
argument_list|(
literal|"stored"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|schemaField
operator|.
name|stored
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|allAttributes
operator|.
name|put
argument_list|(
literal|"defaultValue"
argument_list|,
name|schemaField
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|f
operator|.
name|toWrite
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|fields
operator|.
name|put
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|f
operator|.
name|entity
operator|=
name|e
expr_stmt|;
name|f
operator|.
name|allAttributes
operator|.
name|put
argument_list|(
literal|"boost"
argument_list|,
name|f
operator|.
name|boost
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|allAttributes
operator|.
name|put
argument_list|(
literal|"toWrite"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|f
operator|.
name|toWrite
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|allFieldsList
operator|.
name|add
argument_list|(
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|f
operator|.
name|allAttributes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|e
operator|.
name|allFieldsList
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|e
operator|.
name|allFieldsList
argument_list|)
expr_stmt|;
name|e
operator|.
name|allAttributes
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|e
operator|.
name|allAttributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|entities
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|DataConfig
operator|.
name|Entity
name|e1
range|:
name|e
operator|.
name|entities
control|)
block|{
name|e1
operator|.
name|parentEntity
operator|=
name|e
expr_stmt|;
name|initEntity
argument_list|(
name|e1
argument_list|,
name|fields
argument_list|,
name|e
operator|.
name|isDocRoot
operator|||
name|docRootFound
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getConfig
name|DataConfig
name|getConfig
parameter_list|()
block|{
return|return
name|config
return|;
block|}
DECL|method|getIndexStartTime
name|Date
name|getIndexStartTime
parameter_list|()
block|{
return|return
name|indexStartTime
return|;
block|}
DECL|method|setIndexStartTime
name|void
name|setIndexStartTime
parameter_list|(
name|Date
name|indextStartTime
parameter_list|)
block|{
name|this
operator|.
name|indexStartTime
operator|=
name|indextStartTime
expr_stmt|;
block|}
DECL|method|getLastIndexTime
name|Date
name|getLastIndexTime
parameter_list|()
block|{
return|return
name|lastIndexTime
return|;
block|}
DECL|method|setLastIndexTime
name|void
name|setLastIndexTime
parameter_list|(
name|Date
name|lastIndexTime
parameter_list|)
block|{
name|this
operator|.
name|lastIndexTime
operator|=
name|lastIndexTime
expr_stmt|;
block|}
DECL|method|store
name|void
name|store
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|store
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|retrieve
name|Object
name|retrieve
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|store
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|getDataSourceInstance
name|DataSource
name|getDataSourceInstance
parameter_list|(
name|DataConfig
operator|.
name|Entity
name|key
parameter_list|,
name|String
name|name
parameter_list|,
name|Context
name|ctx
parameter_list|)
block|{
if|if
condition|(
literal|"null"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
operator|new
name|MockDataSource
argument_list|()
return|;
name|Properties
name|p
init|=
name|dataSourceProps
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
name|p
operator|=
name|config
operator|.
name|dataSources
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
name|p
operator|=
name|dataSourceProps
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// for default data source
if|if
condition|(
name|p
operator|==
literal|null
condition|)
name|p
operator|=
name|config
operator|.
name|dataSources
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
throw|throw
operator|new
name|DataImportHandlerException
argument_list|(
name|SEVERE
argument_list|,
literal|"No dataSource :"
operator|+
name|name
operator|+
literal|" available for entity :"
operator|+
name|key
operator|.
name|name
argument_list|)
throw|;
name|String
name|impl
init|=
name|p
operator|.
name|getProperty
argument_list|(
name|TYPE
argument_list|)
decl_stmt|;
name|DataSource
name|dataSrc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|impl
operator|==
literal|null
condition|)
block|{
name|dataSrc
operator|=
operator|new
name|JdbcDataSource
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|dataSrc
operator|=
operator|(
name|DataSource
operator|)
name|DocBuilder
operator|.
name|loadClass
argument_list|(
name|impl
argument_list|,
name|getCore
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|wrapAndThrow
argument_list|(
name|SEVERE
argument_list|,
name|e
argument_list|,
literal|"Invalid type for data source: "
operator|+
name|impl
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|Properties
name|copyProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|copyProps
operator|.
name|putAll
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|ctx
operator|.
name|getRequestParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"rows"
argument_list|)
condition|)
block|{
name|int
name|rows
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"rows"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"start"
argument_list|)
condition|)
block|{
name|rows
operator|+=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"start"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|copyProps
operator|.
name|setProperty
argument_list|(
literal|"maxRows"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|rows
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dataSrc
operator|.
name|init
argument_list|(
name|ctx
argument_list|,
name|copyProps
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|wrapAndThrow
argument_list|(
name|SEVERE
argument_list|,
name|e
argument_list|,
literal|"Failed to initialize DataSource: "
operator|+
name|key
operator|.
name|dataSource
argument_list|)
expr_stmt|;
block|}
return|return
name|dataSrc
return|;
block|}
DECL|method|getStatus
specifier|public
name|Status
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
DECL|method|setStatus
specifier|public
name|void
name|setStatus
parameter_list|(
name|Status
name|status
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
DECL|method|isBusy
specifier|public
name|boolean
name|isBusy
parameter_list|()
block|{
return|return
name|importLock
operator|.
name|isLocked
argument_list|()
return|;
block|}
DECL|method|doFullImport
specifier|public
name|void
name|doFullImport
parameter_list|(
name|SolrWriter
name|writer
parameter_list|,
name|RequestParams
name|requestParams
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting Full Import"
argument_list|)
expr_stmt|;
name|setStatus
argument_list|(
name|Status
operator|.
name|RUNNING_FULL_DUMP
argument_list|)
expr_stmt|;
name|setIndexStartTime
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|docBuilder
operator|=
operator|new
name|DocBuilder
argument_list|(
name|this
argument_list|,
name|writer
argument_list|,
name|requestParams
argument_list|)
expr_stmt|;
name|docBuilder
operator|.
name|execute
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|requestParams
operator|.
name|debug
condition|)
name|cumulativeStatistics
operator|.
name|add
argument_list|(
name|docBuilder
operator|.
name|importStatistics
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Full Import failed"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|docBuilder
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|setStatus
argument_list|(
name|Status
operator|.
name|IDLE
argument_list|)
expr_stmt|;
name|config
operator|.
name|clearCaches
argument_list|()
expr_stmt|;
name|DocBuilder
operator|.
name|INSTANCE
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doDeltaImport
specifier|public
name|void
name|doDeltaImport
parameter_list|(
name|SolrWriter
name|writer
parameter_list|,
name|RequestParams
name|requestParams
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting Delta Import"
argument_list|)
expr_stmt|;
name|setStatus
argument_list|(
name|Status
operator|.
name|RUNNING_DELTA_DUMP
argument_list|)
expr_stmt|;
try|try
block|{
name|setIndexStartTime
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|docBuilder
operator|=
operator|new
name|DocBuilder
argument_list|(
name|this
argument_list|,
name|writer
argument_list|,
name|requestParams
argument_list|)
expr_stmt|;
name|docBuilder
operator|.
name|execute
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|requestParams
operator|.
name|debug
condition|)
name|cumulativeStatistics
operator|.
name|add
argument_list|(
name|docBuilder
operator|.
name|importStatistics
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Delta Import Failed"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|docBuilder
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|setStatus
argument_list|(
name|Status
operator|.
name|IDLE
argument_list|)
expr_stmt|;
name|config
operator|.
name|clearCaches
argument_list|()
expr_stmt|;
name|DocBuilder
operator|.
name|INSTANCE
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|runAsync
specifier|public
name|void
name|runAsync
parameter_list|(
specifier|final
name|RequestParams
name|reqParams
parameter_list|,
specifier|final
name|SolrWriter
name|sw
parameter_list|)
block|{
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|runCmd
argument_list|(
name|reqParams
argument_list|,
name|sw
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|runCmd
name|void
name|runCmd
parameter_list|(
name|RequestParams
name|reqParams
parameter_list|,
name|SolrWriter
name|sw
parameter_list|)
block|{
name|String
name|command
init|=
name|reqParams
operator|.
name|command
decl_stmt|;
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
name|ABORT_CMD
argument_list|)
condition|)
block|{
if|if
condition|(
name|docBuilder
operator|!=
literal|null
condition|)
block|{
name|docBuilder
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
operator|!
name|importLock
operator|.
name|tryLock
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Import command failed . another import is running"
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|Date
name|lastModified
init|=
name|sw
operator|.
name|loadIndexStartTime
argument_list|()
decl_stmt|;
name|setLastIndexTime
argument_list|(
name|lastModified
argument_list|)
expr_stmt|;
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
literal|"full-import"
argument_list|)
condition|)
block|{
name|doFullImport
argument_list|(
name|sw
argument_list|,
name|reqParams
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
name|DELTA_IMPORT_CMD
argument_list|)
condition|)
block|{
name|doDeltaImport
argument_list|(
name|sw
argument_list|,
name|reqParams
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|importLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getStatusMessages
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getStatusMessages
parameter_list|()
block|{
comment|//this map object is a Collections.synchronizedMap(new LinkedHashMap()). if we
comment|// synchronize on the object it must be safe to iterate through the map
name|Map
name|statusMessages
init|=
operator|(
name|Map
operator|)
name|retrieve
argument_list|(
name|STATUS_MSGS
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|result
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|statusMessages
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|statusMessages
init|)
block|{
for|for
control|(
name|Object
name|o
range|:
name|statusMessages
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
operator|.
name|Entry
name|e
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|o
decl_stmt|;
comment|//the toString is taken because some of the Objects create the data lazily when toString() is called
name|result
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|getDocBuilder
name|DocBuilder
name|getDocBuilder
parameter_list|()
block|{
return|return
name|docBuilder
return|;
block|}
DECL|field|QUERY_COUNT
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|AtomicLong
argument_list|>
name|QUERY_COUNT
init|=
operator|new
name|ThreadLocal
argument_list|<
name|AtomicLong
argument_list|>
argument_list|()
block|{
specifier|protected
name|AtomicLong
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|AtomicLong
argument_list|()
return|;
block|}
block|}
decl_stmt|;
DECL|field|DATE_TIME_FORMAT
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|SimpleDateFormat
argument_list|>
name|DATE_TIME_FORMAT
init|=
operator|new
name|ThreadLocal
argument_list|<
name|SimpleDateFormat
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|SimpleDateFormat
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|class|MSG
specifier|static
specifier|final
class|class
name|MSG
block|{
DECL|field|NO_CONFIG_FOUND
specifier|public
specifier|static
specifier|final
name|String
name|NO_CONFIG_FOUND
init|=
literal|"Configuration not found"
decl_stmt|;
DECL|field|NO_INIT
specifier|public
specifier|static
specifier|final
name|String
name|NO_INIT
init|=
literal|"DataImportHandler started. Not Initialized. No commands can be run"
decl_stmt|;
DECL|field|INVALID_CONFIG
specifier|public
specifier|static
specifier|final
name|String
name|INVALID_CONFIG
init|=
literal|"FATAL: Could not create importer. DataImporter config invalid"
decl_stmt|;
DECL|field|LOAD_EXP
specifier|public
specifier|static
specifier|final
name|String
name|LOAD_EXP
init|=
literal|"Exception while loading DataImporter"
decl_stmt|;
DECL|field|JMX_DESC
specifier|public
specifier|static
specifier|final
name|String
name|JMX_DESC
init|=
literal|"Manage data import from databases to Solr"
decl_stmt|;
DECL|field|CMD_RUNNING
specifier|public
specifier|static
specifier|final
name|String
name|CMD_RUNNING
init|=
literal|"A command is still running..."
decl_stmt|;
DECL|field|DEBUG_NOT_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|DEBUG_NOT_ENABLED
init|=
literal|"Debug not enabled. Add a tag<str name=\"enableDebug\">true</str> in solrconfig.xml"
decl_stmt|;
DECL|field|CONFIG_RELOADED
specifier|public
specifier|static
specifier|final
name|String
name|CONFIG_RELOADED
init|=
literal|"Configuration Re-loaded sucessfully"
decl_stmt|;
DECL|field|TOTAL_DOC_PROCESSED
specifier|public
specifier|static
specifier|final
name|String
name|TOTAL_DOC_PROCESSED
init|=
literal|"Total Documents Processed"
decl_stmt|;
DECL|field|TOTAL_FAILED_DOCS
specifier|public
specifier|static
specifier|final
name|String
name|TOTAL_FAILED_DOCS
init|=
literal|"Total Documents Failed"
decl_stmt|;
DECL|field|TOTAL_QUERIES_EXECUTED
specifier|public
specifier|static
specifier|final
name|String
name|TOTAL_QUERIES_EXECUTED
init|=
literal|"Total Requests made to DataSource"
decl_stmt|;
DECL|field|TOTAL_ROWS_EXECUTED
specifier|public
specifier|static
specifier|final
name|String
name|TOTAL_ROWS_EXECUTED
init|=
literal|"Total Rows Fetched"
decl_stmt|;
DECL|field|TOTAL_DOCS_DELETED
specifier|public
specifier|static
specifier|final
name|String
name|TOTAL_DOCS_DELETED
init|=
literal|"Total Documents Deleted"
decl_stmt|;
DECL|field|TOTAL_DOCS_SKIPPED
specifier|public
specifier|static
specifier|final
name|String
name|TOTAL_DOCS_SKIPPED
init|=
literal|"Total Documents Skipped"
decl_stmt|;
block|}
DECL|class|RequestParams
specifier|static
specifier|final
class|class
name|RequestParams
block|{
DECL|field|command
specifier|public
name|String
name|command
init|=
literal|null
decl_stmt|;
DECL|field|debug
specifier|public
name|boolean
name|debug
init|=
literal|false
decl_stmt|;
DECL|field|verbose
specifier|public
name|boolean
name|verbose
init|=
literal|false
decl_stmt|;
DECL|field|commit
specifier|public
name|boolean
name|commit
init|=
literal|true
decl_stmt|;
DECL|field|optimize
specifier|public
name|boolean
name|optimize
init|=
literal|true
decl_stmt|;
DECL|field|start
specifier|public
name|int
name|start
init|=
literal|0
decl_stmt|;
DECL|field|rows
specifier|public
name|long
name|rows
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|clean
specifier|public
name|boolean
name|clean
init|=
literal|true
decl_stmt|;
DECL|field|entities
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|entities
decl_stmt|;
DECL|field|requestParams
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|requestParams
decl_stmt|;
DECL|field|dataConfig
specifier|public
name|String
name|dataConfig
decl_stmt|;
DECL|field|contentStream
specifier|public
name|ContentStream
name|contentStream
decl_stmt|;
DECL|method|RequestParams
specifier|public
name|RequestParams
parameter_list|()
block|{     }
DECL|method|RequestParams
specifier|public
name|RequestParams
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|requestParams
parameter_list|)
block|{
if|if
condition|(
name|requestParams
operator|.
name|containsKey
argument_list|(
literal|"command"
argument_list|)
condition|)
name|command
operator|=
operator|(
name|String
operator|)
name|requestParams
operator|.
name|get
argument_list|(
literal|"command"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"on"
operator|.
name|equals
argument_list|(
name|requestParams
operator|.
name|get
argument_list|(
literal|"debug"
argument_list|)
argument_list|)
condition|)
block|{
name|debug
operator|=
literal|true
expr_stmt|;
name|rows
operator|=
literal|10
expr_stmt|;
comment|// Set default values suitable for debug mode
name|commit
operator|=
literal|false
expr_stmt|;
name|clean
operator|=
literal|false
expr_stmt|;
name|verbose
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|requestParams
operator|.
name|get
argument_list|(
literal|"verbose"
argument_list|)
argument_list|)
operator|||
literal|"on"
operator|.
name|equals
argument_list|(
name|requestParams
operator|.
name|get
argument_list|(
literal|"verbose"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|DELTA_IMPORT_CMD
operator|.
name|equals
argument_list|(
name|command
argument_list|)
operator|||
name|IMPORT_CMD
operator|.
name|equals
argument_list|(
name|command
argument_list|)
condition|)
block|{
name|clean
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|requestParams
operator|.
name|containsKey
argument_list|(
literal|"commit"
argument_list|)
condition|)
name|commit
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
operator|(
name|String
operator|)
name|requestParams
operator|.
name|get
argument_list|(
literal|"commit"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|requestParams
operator|.
name|containsKey
argument_list|(
literal|"start"
argument_list|)
condition|)
name|start
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|(
name|String
operator|)
name|requestParams
operator|.
name|get
argument_list|(
literal|"start"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|requestParams
operator|.
name|containsKey
argument_list|(
literal|"rows"
argument_list|)
condition|)
name|rows
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|(
name|String
operator|)
name|requestParams
operator|.
name|get
argument_list|(
literal|"rows"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|requestParams
operator|.
name|containsKey
argument_list|(
literal|"clean"
argument_list|)
condition|)
name|clean
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
operator|(
name|String
operator|)
name|requestParams
operator|.
name|get
argument_list|(
literal|"clean"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|requestParams
operator|.
name|containsKey
argument_list|(
literal|"optimize"
argument_list|)
condition|)
block|{
name|optimize
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
operator|(
name|String
operator|)
name|requestParams
operator|.
name|get
argument_list|(
literal|"optimize"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|optimize
condition|)
name|commit
operator|=
literal|true
expr_stmt|;
block|}
name|Object
name|o
init|=
name|requestParams
operator|.
name|get
argument_list|(
literal|"entity"
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
operator|&&
name|o
operator|instanceof
name|String
condition|)
block|{
name|entities
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|entities
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|!=
literal|null
operator|&&
name|o
operator|instanceof
name|List
condition|)
block|{
name|entities
operator|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|requestParams
operator|.
name|get
argument_list|(
literal|"entity"
argument_list|)
expr_stmt|;
block|}
name|dataConfig
operator|=
operator|(
name|String
operator|)
name|requestParams
operator|.
name|get
argument_list|(
literal|"dataConfig"
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataConfig
operator|!=
literal|null
operator|&&
name|dataConfig
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// Empty data-config param is not valid, change it to null
name|dataConfig
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|requestParams
operator|=
name|requestParams
expr_stmt|;
block|}
block|}
DECL|method|getSchema
name|IndexSchema
name|getSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
DECL|method|getCoreScopeSession
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getCoreScopeSession
parameter_list|()
block|{
return|return
name|coreScopeSession
return|;
block|}
DECL|method|getCore
name|SolrCore
name|getCore
parameter_list|()
block|{
return|return
name|core
return|;
block|}
DECL|field|COLUMN
specifier|public
specifier|static
specifier|final
name|String
name|COLUMN
init|=
literal|"column"
decl_stmt|;
DECL|field|TYPE
specifier|public
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"type"
decl_stmt|;
DECL|field|DATA_SRC
specifier|public
specifier|static
specifier|final
name|String
name|DATA_SRC
init|=
literal|"dataSource"
decl_stmt|;
DECL|field|MULTI_VALUED
specifier|public
specifier|static
specifier|final
name|String
name|MULTI_VALUED
init|=
literal|"multiValued"
decl_stmt|;
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"name"
decl_stmt|;
DECL|field|STATUS_MSGS
specifier|public
specifier|static
specifier|final
name|String
name|STATUS_MSGS
init|=
literal|"status-messages"
decl_stmt|;
DECL|field|FULL_IMPORT_CMD
specifier|public
specifier|static
specifier|final
name|String
name|FULL_IMPORT_CMD
init|=
literal|"full-import"
decl_stmt|;
DECL|field|IMPORT_CMD
specifier|public
specifier|static
specifier|final
name|String
name|IMPORT_CMD
init|=
literal|"import"
decl_stmt|;
DECL|field|DELTA_IMPORT_CMD
specifier|public
specifier|static
specifier|final
name|String
name|DELTA_IMPORT_CMD
init|=
literal|"delta-import"
decl_stmt|;
DECL|field|ABORT_CMD
specifier|public
specifier|static
specifier|final
name|String
name|ABORT_CMD
init|=
literal|"abort"
decl_stmt|;
DECL|field|DEBUG_MODE
specifier|public
specifier|static
specifier|final
name|String
name|DEBUG_MODE
init|=
literal|"debug"
decl_stmt|;
DECL|field|RELOAD_CONF_CMD
specifier|public
specifier|static
specifier|final
name|String
name|RELOAD_CONF_CMD
init|=
literal|"reload-config"
decl_stmt|;
DECL|field|SHOW_CONF_CMD
specifier|public
specifier|static
specifier|final
name|String
name|SHOW_CONF_CMD
init|=
literal|"show-config"
decl_stmt|;
block|}
end_class
end_unit
