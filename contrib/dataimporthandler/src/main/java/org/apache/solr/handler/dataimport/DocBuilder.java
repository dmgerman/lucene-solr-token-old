begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.dataimport
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|dataimport
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import
begin_comment
comment|/**  *<p>  * DocBuilder is responsible for creating Solr documents out of the given  * configuration. It also maintains statistics information. It depends on the  * EntityProcessor implementations to fetch data.  *</p>  *<p/>  *<b>This API is experimental and subject to change</b>  *  * @version $Id$  * @since solr 1.3  */
end_comment
begin_class
DECL|class|DocBuilder
specifier|public
class|class
name|DocBuilder
block|{
DECL|field|DOC_BOOST
specifier|public
specifier|static
specifier|final
name|String
name|DOC_BOOST
init|=
literal|"$docBoost"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DocBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|dataImporter
specifier|private
name|DataImporter
name|dataImporter
decl_stmt|;
DECL|field|document
specifier|private
name|DataConfig
operator|.
name|Document
name|document
decl_stmt|;
DECL|field|root
specifier|private
name|DataConfig
operator|.
name|Entity
name|root
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|field|statusMessages
specifier|private
name|Map
name|statusMessages
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
DECL|field|importStatistics
specifier|public
name|Statistics
name|importStatistics
init|=
operator|new
name|Statistics
argument_list|()
decl_stmt|;
DECL|field|writer
name|SolrWriter
name|writer
decl_stmt|;
DECL|field|requestParameters
name|DataImporter
operator|.
name|RequestParams
name|requestParameters
decl_stmt|;
DECL|field|verboseDebug
name|boolean
name|verboseDebug
init|=
literal|false
decl_stmt|;
DECL|field|defaultVariables
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|defaultVariables
decl_stmt|;
DECL|field|session
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|session
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|INSTANCE
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|DocBuilder
argument_list|>
name|INSTANCE
init|=
operator|new
name|ThreadLocal
argument_list|<
name|DocBuilder
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|DocBuilder
specifier|public
name|DocBuilder
parameter_list|(
name|DataImporter
name|context
parameter_list|,
name|SolrWriter
name|writer
parameter_list|,
name|DataImporter
operator|.
name|RequestParams
name|reqParams
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|variables
parameter_list|)
block|{
name|INSTANCE
operator|.
name|set
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataImporter
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
name|DataImporter
operator|.
name|QUERY_COUNT
operator|.
name|set
argument_list|(
name|importStatistics
operator|.
name|queryCount
argument_list|)
expr_stmt|;
name|requestParameters
operator|=
name|reqParams
expr_stmt|;
name|verboseDebug
operator|=
name|requestParameters
operator|.
name|debug
operator|&&
name|requestParameters
operator|.
name|verbose
expr_stmt|;
name|defaultVariables
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|variables
argument_list|)
expr_stmt|;
block|}
DECL|method|getVariableResolver
specifier|public
name|VariableResolverImpl
name|getVariableResolver
parameter_list|(
name|DataImporter
name|context
parameter_list|)
block|{
name|VariableResolverImpl
name|resolver
init|=
operator|new
name|VariableResolverImpl
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|indexerNamespace
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getLastIndexTime
argument_list|()
operator|!=
literal|null
condition|)
name|indexerNamespace
operator|.
name|put
argument_list|(
name|LAST_INDEX_TIME
argument_list|,
name|DataImporter
operator|.
name|DATE_TIME_FORMAT
operator|.
name|format
argument_list|(
name|context
operator|.
name|getLastIndexTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|indexerNamespace
operator|.
name|put
argument_list|(
name|INDEX_START_TIME
argument_list|,
name|context
operator|.
name|getIndexStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|indexerNamespace
operator|.
name|put
argument_list|(
literal|"request"
argument_list|,
name|requestParameters
operator|.
name|requestParams
argument_list|)
expr_stmt|;
name|indexerNamespace
operator|.
name|put
argument_list|(
literal|"defaults"
argument_list|,
name|defaultVariables
argument_list|)
expr_stmt|;
name|indexerNamespace
operator|.
name|put
argument_list|(
literal|"functions"
argument_list|,
name|EvaluatorBag
operator|.
name|getFunctionsNamespace
argument_list|(
name|resolver
argument_list|,
name|dataImporter
operator|.
name|getConfig
argument_list|()
operator|.
name|evaluators
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|getConfig
argument_list|()
operator|.
name|script
operator|!=
literal|null
condition|)
block|{
name|indexerNamespace
operator|.
name|put
argument_list|(
name|DataConfig
operator|.
name|SCRIPT
argument_list|,
name|context
operator|.
name|getConfig
argument_list|()
operator|.
name|script
operator|.
name|script
argument_list|)
expr_stmt|;
name|indexerNamespace
operator|.
name|put
argument_list|(
name|DataConfig
operator|.
name|SCRIPT_LANG
argument_list|,
name|context
operator|.
name|getConfig
argument_list|()
operator|.
name|script
operator|.
name|language
argument_list|)
expr_stmt|;
block|}
name|resolver
operator|.
name|addNamespace
argument_list|(
name|DataConfig
operator|.
name|IMPORTER_NS
argument_list|,
name|indexerNamespace
argument_list|)
expr_stmt|;
return|return
name|resolver
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|(
name|String
name|docName
parameter_list|)
block|{
name|dataImporter
operator|.
name|store
argument_list|(
name|DataImporter
operator|.
name|STATUS_MSGS
argument_list|,
name|statusMessages
argument_list|)
expr_stmt|;
name|document
operator|=
name|dataImporter
operator|.
name|getConfig
argument_list|()
operator|.
name|getDocumentByName
argument_list|(
name|docName
argument_list|)
expr_stmt|;
if|if
condition|(
name|document
operator|==
literal|null
condition|)
return|return;
specifier|final
name|AtomicLong
name|startTime
init|=
operator|new
name|AtomicLong
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|statusMessages
operator|.
name|put
argument_list|(
name|TIME_ELAPSED
argument_list|,
operator|new
name|Object
argument_list|()
block|{
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getTimeElapsedSince
argument_list|(
name|startTime
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|statusMessages
operator|.
name|put
argument_list|(
name|DataImporter
operator|.
name|MSG
operator|.
name|TOTAL_QUERIES_EXECUTED
argument_list|,
name|importStatistics
operator|.
name|queryCount
argument_list|)
expr_stmt|;
name|statusMessages
operator|.
name|put
argument_list|(
name|DataImporter
operator|.
name|MSG
operator|.
name|TOTAL_ROWS_EXECUTED
argument_list|,
name|importStatistics
operator|.
name|rowsCount
argument_list|)
expr_stmt|;
name|statusMessages
operator|.
name|put
argument_list|(
name|DataImporter
operator|.
name|MSG
operator|.
name|TOTAL_DOC_PROCESSED
argument_list|,
name|importStatistics
operator|.
name|docCount
argument_list|)
expr_stmt|;
name|statusMessages
operator|.
name|put
argument_list|(
name|DataImporter
operator|.
name|MSG
operator|.
name|TOTAL_DOCS_SKIPPED
argument_list|,
name|importStatistics
operator|.
name|skipDocCount
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|entities
init|=
name|requestParameters
operator|.
name|entities
decl_stmt|;
for|for
control|(
name|DataConfig
operator|.
name|Entity
name|e
range|:
name|document
operator|.
name|entities
control|)
block|{
if|if
condition|(
name|entities
operator|!=
literal|null
operator|&&
operator|!
name|entities
operator|.
name|contains
argument_list|(
name|e
operator|.
name|name
argument_list|)
condition|)
continue|continue;
name|root
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|dataImporter
operator|.
name|getStatus
argument_list|()
operator|==
name|DataImporter
operator|.
name|Status
operator|.
name|RUNNING_DELTA_DUMP
operator|&&
name|dataImporter
operator|.
name|getLastIndexTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|doDelta
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|doFullDump
argument_list|()
expr_stmt|;
block|}
name|statusMessages
operator|.
name|remove
argument_list|(
name|DataImporter
operator|.
name|MSG
operator|.
name|TOTAL_DOC_PROCESSED
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stop
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|DataImporter
operator|.
name|ABORT_CMD
operator|.
name|equals
argument_list|(
name|requestParameters
operator|.
name|command
argument_list|)
condition|)
block|{
comment|// Dont commit if aborted using command=abort
name|statusMessages
operator|.
name|put
argument_list|(
literal|"Aborted"
argument_list|,
name|DataImporter
operator|.
name|DATE_TIME_FORMAT
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|requestParameters
operator|.
name|commit
condition|)
block|{
comment|// Debug mode, commit if commit=true was specified
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Finished operation normally, commit now
name|commit
argument_list|()
expr_stmt|;
block|}
name|statusMessages
operator|.
name|remove
argument_list|(
name|TIME_ELAPSED
argument_list|)
expr_stmt|;
name|statusMessages
operator|.
name|put
argument_list|(
literal|"Time taken "
argument_list|,
name|getTimeElapsedSince
argument_list|(
name|startTime
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Time taken = "
operator|+
name|getTimeElapsedSince
argument_list|(
name|startTime
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|commit
specifier|private
name|void
name|commit
parameter_list|()
block|{
if|if
condition|(
name|requestParameters
operator|.
name|commit
condition|)
name|writer
operator|.
name|persistIndexStartTime
argument_list|(
name|dataImporter
operator|.
name|getIndexStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Full Import completed successfully"
argument_list|)
expr_stmt|;
name|statusMessages
operator|.
name|put
argument_list|(
literal|""
argument_list|,
literal|"Indexing completed. Added/Updated: "
operator|+
name|importStatistics
operator|.
name|docCount
operator|+
literal|" documents. Deleted "
operator|+
name|importStatistics
operator|.
name|deletedDocCount
operator|+
literal|" documents."
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|(
name|requestParameters
operator|.
name|optimize
argument_list|)
expr_stmt|;
name|addStatusMessage
argument_list|(
literal|"Committed"
argument_list|)
expr_stmt|;
if|if
condition|(
name|requestParameters
operator|.
name|optimize
condition|)
name|addStatusMessage
argument_list|(
literal|"Optimized"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|doFullDump
specifier|private
name|void
name|doFullDump
parameter_list|()
block|{
name|addStatusMessage
argument_list|(
literal|"Full Dump Started"
argument_list|)
expr_stmt|;
name|buildDocument
argument_list|(
name|getVariableResolver
argument_list|(
name|dataImporter
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|root
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|doDelta
specifier|private
name|void
name|doDelta
parameter_list|()
block|{
name|addStatusMessage
argument_list|(
literal|"Delta Dump started"
argument_list|)
expr_stmt|;
name|VariableResolverImpl
name|resolver
init|=
name|getVariableResolver
argument_list|(
name|dataImporter
argument_list|)
decl_stmt|;
if|if
condition|(
name|document
operator|.
name|deleteQuery
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|deleteByQuery
argument_list|(
name|document
operator|.
name|deleteQuery
argument_list|)
expr_stmt|;
block|}
name|addStatusMessage
argument_list|(
literal|"Identifying Delta"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting delta collection."
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|deletedKeys
init|=
operator|new
name|HashSet
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|allPks
init|=
name|collectDelta
argument_list|(
name|root
argument_list|,
literal|null
argument_list|,
name|resolver
argument_list|,
name|dataImporter
argument_list|,
name|deletedKeys
argument_list|)
decl_stmt|;
if|if
condition|(
name|stop
operator|.
name|get
argument_list|()
condition|)
return|return;
name|addStatusMessage
argument_list|(
literal|"Deltas Obtained"
argument_list|)
expr_stmt|;
name|addStatusMessage
argument_list|(
literal|"Building documents"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|deletedKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|deleteAll
argument_list|(
name|deletedKeys
argument_list|)
expr_stmt|;
name|importStatistics
operator|.
name|deletedDocCount
operator|.
name|addAndGet
argument_list|(
name|deletedKeys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure that documents are not re-created
name|allPks
operator|.
name|removeAll
argument_list|(
name|deletedKeys
argument_list|)
expr_stmt|;
block|}
name|statusMessages
operator|.
name|put
argument_list|(
literal|"Total Changed Documents"
argument_list|,
name|allPks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|pk
range|:
name|allPks
control|)
block|{
name|VariableResolverImpl
name|vri
init|=
name|getVariableResolver
argument_list|(
name|dataImporter
argument_list|)
decl_stmt|;
name|vri
operator|.
name|addNamespace
argument_list|(
name|DataConfig
operator|.
name|IMPORTER_NS
operator|+
literal|".delta"
argument_list|,
name|pk
argument_list|)
expr_stmt|;
name|buildDocument
argument_list|(
name|vri
argument_list|,
literal|null
argument_list|,
name|pk
argument_list|,
name|root
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|stop
operator|.
name|get
argument_list|()
condition|)
block|{
name|writer
operator|.
name|persistIndexStartTime
argument_list|(
name|dataImporter
operator|.
name|getIndexStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Delta Import completed successfully"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deleteAll
specifier|private
name|void
name|deleteAll
parameter_list|(
name|Set
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|deletedKeys
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting stale documents "
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|deletedKey
range|:
name|deletedKeys
control|)
block|{
name|writer
operator|.
name|deleteDoc
argument_list|(
name|deletedKey
operator|.
name|get
argument_list|(
name|root
operator|.
name|pk
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|addStatusMessage
specifier|public
name|void
name|addStatusMessage
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|statusMessages
operator|.
name|put
argument_list|(
name|msg
argument_list|,
name|DataImporter
operator|.
name|DATE_TIME_FORMAT
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|buildDocument
specifier|private
name|void
name|buildDocument
parameter_list|(
name|VariableResolverImpl
name|vr
parameter_list|,
name|SolrInputDocument
name|doc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|pk
parameter_list|,
name|DataConfig
operator|.
name|Entity
name|entity
parameter_list|,
name|boolean
name|isRoot
parameter_list|,
name|ContextImpl
name|parentCtx
parameter_list|)
block|{
name|EntityProcessor
name|entityProcessor
init|=
name|getEntityProcessor
argument_list|(
name|entity
argument_list|,
name|dataImporter
operator|.
name|getCore
argument_list|()
argument_list|)
decl_stmt|;
name|DataSource
name|ds
init|=
name|entity
operator|.
name|dataSrc
decl_stmt|;
if|if
condition|(
name|verboseDebug
condition|)
block|{
name|ds
operator|=
name|DebugLogger
operator|.
name|wrapDs
argument_list|(
name|ds
argument_list|)
expr_stmt|;
block|}
name|ContextImpl
name|ctx
init|=
operator|new
name|ContextImpl
argument_list|(
name|entity
argument_list|,
name|vr
argument_list|,
name|ds
argument_list|,
name|pk
operator|==
literal|null
condition|?
name|Context
operator|.
name|FULL_DUMP
else|:
name|Context
operator|.
name|DELTA_DUMP
argument_list|,
name|requestParameters
operator|.
name|requestParams
argument_list|,
name|session
argument_list|,
name|parentCtx
argument_list|,
name|dataImporter
argument_list|)
decl_stmt|;
name|entityProcessor
operator|.
name|init
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|requestParameters
operator|.
name|start
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|log
argument_list|(
name|SolrWriter
operator|.
name|DISABLE_LOGGING
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verboseDebug
condition|)
block|{
name|writer
operator|.
name|log
argument_list|(
name|SolrWriter
operator|.
name|START_ENTITY
argument_list|,
name|entity
operator|.
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|int
name|seenDocCount
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|stop
operator|.
name|get
argument_list|()
condition|)
return|return;
try|try
block|{
name|seenDocCount
operator|++
expr_stmt|;
if|if
condition|(
name|seenDocCount
operator|>
name|requestParameters
operator|.
name|start
condition|)
block|{
name|writer
operator|.
name|log
argument_list|(
name|SolrWriter
operator|.
name|ENABLE_LOGGING
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verboseDebug
operator|&&
name|entity
operator|.
name|isDocRoot
condition|)
block|{
name|writer
operator|.
name|log
argument_list|(
name|SolrWriter
operator|.
name|START_DOC
argument_list|,
name|entity
operator|.
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doc
operator|==
literal|null
operator|&&
name|entity
operator|.
name|isDocRoot
condition|)
block|{
if|if
condition|(
name|ctx
operator|.
name|getDocSession
argument_list|()
operator|!=
literal|null
condition|)
name|ctx
operator|.
name|getDocSession
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
else|else
name|ctx
operator|.
name|setDocSession
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|SolrInputDocument
argument_list|()
expr_stmt|;
name|DataConfig
operator|.
name|Entity
name|e
init|=
name|entity
decl_stmt|;
while|while
condition|(
name|e
operator|.
name|parentEntity
operator|!=
literal|null
condition|)
block|{
name|addFields
argument_list|(
name|e
operator|.
name|parentEntity
argument_list|,
name|doc
argument_list|,
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|vr
operator|.
name|resolve
argument_list|(
name|e
operator|.
name|parentEntity
operator|.
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|=
name|e
operator|.
name|parentEntity
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|arow
init|=
name|entityProcessor
operator|.
name|nextRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|arow
operator|==
literal|null
condition|)
break|break;
if|if
condition|(
name|arow
operator|.
name|containsKey
argument_list|(
name|DOC_BOOST
argument_list|)
condition|)
block|{
name|setDocumentBoost
argument_list|(
name|doc
argument_list|,
name|arow
argument_list|)
expr_stmt|;
block|}
comment|// Support for start parameter in debug mode
if|if
condition|(
name|entity
operator|.
name|isDocRoot
condition|)
block|{
if|if
condition|(
name|seenDocCount
operator|<=
name|requestParameters
operator|.
name|start
condition|)
continue|continue;
block|}
if|if
condition|(
name|verboseDebug
condition|)
block|{
name|writer
operator|.
name|log
argument_list|(
name|SolrWriter
operator|.
name|ENTITY_OUT
argument_list|,
name|entity
operator|.
name|name
argument_list|,
name|arow
argument_list|)
expr_stmt|;
block|}
name|importStatistics
operator|.
name|rowsCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|entity
operator|.
name|fields
operator|!=
literal|null
operator|&&
name|doc
operator|!=
literal|null
condition|)
block|{
name|addFields
argument_list|(
name|entity
argument_list|,
name|doc
argument_list|,
name|arow
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isRoot
condition|)
name|vr
operator|.
name|removeNamespace
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|entity
operator|.
name|entities
operator|!=
literal|null
condition|)
block|{
name|vr
operator|.
name|addNamespace
argument_list|(
name|entity
operator|.
name|name
argument_list|,
name|arow
argument_list|)
expr_stmt|;
for|for
control|(
name|DataConfig
operator|.
name|Entity
name|child
range|:
name|entity
operator|.
name|entities
control|)
block|{
name|buildDocument
argument_list|(
name|vr
argument_list|,
name|doc
argument_list|,
literal|null
argument_list|,
name|child
argument_list|,
literal|false
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
name|vr
operator|.
name|removeNamespace
argument_list|(
name|entity
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entity
operator|.
name|isDocRoot
condition|)
block|{
if|if
condition|(
name|stop
operator|.
name|get
argument_list|()
condition|)
return|return;
name|boolean
name|result
init|=
name|writer
operator|.
name|upload
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|doc
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|result
condition|)
name|importStatistics
operator|.
name|docCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DataImportHandlerException
name|e
parameter_list|)
block|{
if|if
condition|(
name|verboseDebug
condition|)
block|{
name|writer
operator|.
name|log
argument_list|(
name|SolrWriter
operator|.
name|ENTITY_EXCEPTION
argument_list|,
name|entity
operator|.
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isRoot
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|getErrCode
argument_list|()
operator|==
name|DataImportHandlerException
operator|.
name|SKIP
condition|)
block|{
name|importStatistics
operator|.
name|skipDocCount
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while processing: "
operator|+
name|entity
operator|.
name|name
operator|+
literal|" document : "
operator|+
name|doc
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|.
name|getErrCode
argument_list|()
operator|==
name|DataImportHandlerException
operator|.
name|SEVERE
condition|)
throw|throw
name|e
throw|;
block|}
else|else
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|verboseDebug
condition|)
block|{
name|writer
operator|.
name|log
argument_list|(
name|SolrWriter
operator|.
name|ROW_END
argument_list|,
name|entity
operator|.
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|entity
operator|.
name|isDocRoot
condition|)
name|writer
operator|.
name|log
argument_list|(
name|SolrWriter
operator|.
name|END_DOC
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|verboseDebug
condition|)
block|{
name|writer
operator|.
name|log
argument_list|(
name|SolrWriter
operator|.
name|END_ENTITY
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setDocumentBoost
specifier|private
name|void
name|setDocumentBoost
parameter_list|(
name|SolrInputDocument
name|doc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|arow
parameter_list|)
block|{
name|Object
name|v
init|=
name|arow
operator|.
name|get
argument_list|(
name|DOC_BOOST
argument_list|)
decl_stmt|;
name|float
name|value
init|=
literal|1.0f
decl_stmt|;
if|if
condition|(
name|v
operator|instanceof
name|Number
condition|)
block|{
name|value
operator|=
operator|(
operator|(
name|Number
operator|)
name|v
operator|)
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|v
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|setDocumentBoost
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|addFields
specifier|private
name|void
name|addFields
parameter_list|(
name|DataConfig
operator|.
name|Entity
name|entity
parameter_list|,
name|SolrInputDocument
name|doc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|arow
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|arow
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"$"
argument_list|)
condition|)
block|{
comment|// All fields starting with $ are special values and don't need to be added
continue|continue;
block|}
name|DataConfig
operator|.
name|Field
name|field
init|=
name|entity
operator|.
name|colNameVsField
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
comment|// This can be a dynamic field or a field which does not have an entry in data-config ( an implicit field)
name|SchemaField
name|sf
init|=
name|dataImporter
operator|.
name|getSchema
argument_list|()
operator|.
name|getFieldOrNull
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|sf
operator|==
literal|null
condition|)
block|{
name|sf
operator|=
name|dataImporter
operator|.
name|getConfig
argument_list|()
operator|.
name|lowerNameVsSchemaField
operator|.
name|get
argument_list|(
name|key
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sf
operator|!=
literal|null
condition|)
block|{
name|addFieldToDoc
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|key
argument_list|,
literal|1.0f
argument_list|,
name|sf
operator|.
name|multiValued
argument_list|()
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
comment|//else do nothing. if we add it it may fail
block|}
else|else
block|{
if|if
condition|(
name|field
operator|.
name|toWrite
condition|)
block|{
name|addFieldToDoc
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|key
argument_list|,
name|field
operator|.
name|boost
argument_list|,
name|field
operator|.
name|multiValued
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|addFieldToDoc
specifier|private
name|void
name|addFieldToDoc
parameter_list|(
name|Object
name|value
parameter_list|,
name|String
name|name
parameter_list|,
name|float
name|boost
parameter_list|,
name|boolean
name|multiValued
parameter_list|,
name|SolrInputDocument
name|doc
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Collection
condition|)
block|{
name|Collection
name|collection
init|=
operator|(
name|Collection
operator|)
name|value
decl_stmt|;
if|if
condition|(
name|multiValued
condition|)
block|{
for|for
control|(
name|Object
name|o
range|:
name|collection
control|)
block|{
name|doc
operator|.
name|addField
argument_list|(
name|name
argument_list|,
name|o
argument_list|,
name|boost
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|doc
operator|.
name|getField
argument_list|(
name|name
argument_list|)
operator|==
literal|null
condition|)
for|for
control|(
name|Object
name|o
range|:
name|collection
control|)
block|{
name|doc
operator|.
name|addField
argument_list|(
name|name
argument_list|,
name|o
argument_list|,
name|boost
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|multiValued
condition|)
block|{
name|doc
operator|.
name|addField
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|boost
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|doc
operator|.
name|getField
argument_list|(
name|name
argument_list|)
operator|==
literal|null
condition|)
name|doc
operator|.
name|addField
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|boost
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getEntityProcessor
specifier|public
specifier|static
name|EntityProcessor
name|getEntityProcessor
parameter_list|(
name|DataConfig
operator|.
name|Entity
name|entity
parameter_list|,
name|SolrCore
name|core
parameter_list|)
block|{
if|if
condition|(
name|entity
operator|.
name|processor
operator|!=
literal|null
condition|)
return|return
name|entity
operator|.
name|processor
return|;
name|EntityProcessor
name|entityProcessor
decl_stmt|;
if|if
condition|(
name|entity
operator|.
name|proc
operator|==
literal|null
condition|)
block|{
name|entityProcessor
operator|=
operator|new
name|SqlEntityProcessor
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|entityProcessor
operator|=
operator|(
name|EntityProcessor
operator|)
name|loadClass
argument_list|(
name|entity
operator|.
name|proc
argument_list|,
name|core
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DataImportHandlerException
argument_list|(
name|DataImportHandlerException
operator|.
name|SEVERE
argument_list|,
literal|"Unable to load EntityProcessor implementation for entity:"
operator|+
name|entity
operator|.
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|entity
operator|.
name|processor
operator|=
name|entityProcessor
return|;
block|}
comment|/**    *<p>    * Collects unique keys of all Solr documents for whom one or more source    * tables have been changed since the last indexed time.    *</p>    *<p>    * Note: In our definition, unique key of Solr document is the primary key of    * the top level entity (unless skipped using docRoot=false) in the Solr    * document in data-config.xml    *</p>    *    * @return an iterator to the list of keys for which Solr documents should be    *         updated.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|collectDelta
specifier|public
name|Set
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|collectDelta
parameter_list|(
name|DataConfig
operator|.
name|Entity
name|entity
parameter_list|,
name|DataConfig
operator|.
name|Entity
name|parentEntity
parameter_list|,
name|VariableResolverImpl
name|resolver
parameter_list|,
name|DataImporter
name|context
parameter_list|,
name|Set
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|deletedRows
parameter_list|)
block|{
if|if
condition|(
name|stop
operator|.
name|get
argument_list|()
condition|)
return|return
operator|new
name|HashSet
argument_list|()
return|;
name|Set
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|myModifiedPks
init|=
operator|new
name|HashSet
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|entity
operator|.
name|entities
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DataConfig
operator|.
name|Entity
name|entity1
range|:
name|entity
operator|.
name|entities
control|)
block|{
name|myModifiedPks
operator|.
name|addAll
argument_list|(
name|collectDelta
argument_list|(
name|entity1
argument_list|,
name|entity
argument_list|,
name|resolver
argument_list|,
name|context
argument_list|,
name|deletedRows
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// identifying the modified rows for this entities
name|Set
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|deltaSet
init|=
operator|new
name|HashSet
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|resolver
operator|.
name|addNamespace
argument_list|(
literal|null
argument_list|,
operator|(
name|Map
operator|)
name|entity
operator|.
name|allAttributes
argument_list|)
expr_stmt|;
name|EntityProcessor
name|entityProcessor
init|=
name|getEntityProcessor
argument_list|(
name|entity
argument_list|,
name|context
operator|.
name|getCore
argument_list|()
argument_list|)
decl_stmt|;
name|entityProcessor
operator|.
name|init
argument_list|(
operator|new
name|ContextImpl
argument_list|(
name|entity
argument_list|,
name|resolver
argument_list|,
name|entity
operator|.
name|dataSrc
argument_list|,
name|Context
operator|.
name|FIND_DELTA
argument_list|,
name|requestParameters
operator|.
name|requestParams
argument_list|,
name|session
argument_list|,
literal|null
argument_list|,
name|dataImporter
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running ModifiedRowKey() for Entity: "
operator|+
name|entity
operator|.
name|name
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|row
init|=
name|entityProcessor
operator|.
name|nextModifiedRowKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|row
operator|==
literal|null
condition|)
break|break;
name|deltaSet
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
name|importStatistics
operator|.
name|rowsCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Completed ModifiedRowKey for Entity: "
operator|+
name|entity
operator|.
name|name
operator|+
literal|" rows obtained : "
operator|+
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
comment|// identifying the deleted rows from this entities
name|LOG
operator|.
name|info
argument_list|(
literal|"Running DeletedRowKey() for Entity: "
operator|+
name|entity
operator|.
name|name
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|deletedSet
init|=
operator|new
name|HashSet
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|row
init|=
name|entityProcessor
operator|.
name|nextDeletedRowKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|row
operator|==
literal|null
condition|)
break|break;
name|deletedSet
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
name|importStatistics
operator|.
name|rowsCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Completed DeletedRowKey for Entity: "
operator|+
name|entity
operator|.
name|name
operator|+
literal|" rows obtained : "
operator|+
name|count
argument_list|)
expr_stmt|;
name|myModifiedPks
operator|.
name|addAll
argument_list|(
name|deltaSet
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|parentKeyList
init|=
operator|new
name|HashSet
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentEntity
operator|!=
literal|null
operator|&&
name|parentEntity
operator|.
name|isDocRoot
condition|)
block|{
name|EntityProcessor
name|parentEntityProcessor
init|=
name|getEntityProcessor
argument_list|(
name|parentEntity
argument_list|,
name|context
operator|.
name|getCore
argument_list|()
argument_list|)
decl_stmt|;
name|parentEntityProcessor
operator|.
name|init
argument_list|(
operator|new
name|ContextImpl
argument_list|(
name|parentEntity
argument_list|,
name|resolver
argument_list|,
name|parentEntity
operator|.
name|dataSrc
argument_list|,
name|Context
operator|.
name|FIND_DELTA
argument_list|,
name|requestParameters
operator|.
name|requestParams
argument_list|,
name|session
argument_list|,
literal|null
argument_list|,
name|dataImporter
argument_list|)
argument_list|)
expr_stmt|;
comment|// identifying deleted rows with deltas
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|row
range|:
name|myModifiedPks
control|)
name|getModifiedParentRows
argument_list|(
name|resolver
operator|.
name|addNamespace
argument_list|(
name|entity
operator|.
name|name
argument_list|,
name|row
argument_list|)
argument_list|,
name|entity
operator|.
name|name
argument_list|,
name|parentEntityProcessor
argument_list|,
name|parentKeyList
argument_list|)
expr_stmt|;
comment|// running the same for deletedrows
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|row
range|:
name|deletedSet
control|)
block|{
name|getModifiedParentRows
argument_list|(
name|resolver
operator|.
name|addNamespace
argument_list|(
name|entity
operator|.
name|name
argument_list|,
name|row
argument_list|)
argument_list|,
name|entity
operator|.
name|name
argument_list|,
name|parentEntityProcessor
argument_list|,
name|parentKeyList
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Completed parentDeltaQuery for Entity: "
operator|+
name|entity
operator|.
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|entity
operator|.
name|isDocRoot
condition|)
name|deletedRows
operator|.
name|addAll
argument_list|(
name|deletedSet
argument_list|)
expr_stmt|;
return|return
name|entity
operator|.
name|isDocRoot
condition|?
name|myModifiedPks
else|:
operator|new
name|HashSet
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|(
name|parentKeyList
argument_list|)
return|;
block|}
DECL|method|getModifiedParentRows
specifier|private
name|void
name|getModifiedParentRows
parameter_list|(
name|VariableResolverImpl
name|resolver
parameter_list|,
name|String
name|entity
parameter_list|,
name|EntityProcessor
name|entityProcessor
parameter_list|,
name|Set
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|parentKeyList
parameter_list|)
block|{
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parentRow
init|=
name|entityProcessor
operator|.
name|nextModifiedParentRowKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentRow
operator|==
literal|null
condition|)
break|break;
name|parentKeyList
operator|.
name|add
argument_list|(
name|parentRow
argument_list|)
expr_stmt|;
name|importStatistics
operator|.
name|rowsCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|resolver
operator|.
name|removeNamespace
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|abort
specifier|public
name|void
name|abort
parameter_list|()
block|{
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|field|stop
specifier|private
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|TIME_ELAPSED
specifier|public
specifier|static
specifier|final
name|String
name|TIME_ELAPSED
init|=
literal|"Time Elapsed"
decl_stmt|;
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|l
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1050
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|getTimeElapsedSince
argument_list|(
name|l
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getTimeElapsedSince
specifier|static
name|String
name|getTimeElapsedSince
parameter_list|(
name|long
name|l
parameter_list|)
block|{
name|l
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|l
expr_stmt|;
return|return
operator|(
name|l
operator|/
operator|(
literal|60000
operator|*
literal|60
operator|)
operator|)
operator|%
literal|60
operator|+
literal|":"
operator|+
operator|(
name|l
operator|/
literal|60000
operator|)
operator|%
literal|60
operator|+
literal|":"
operator|+
operator|(
name|l
operator|/
literal|1000
operator|)
operator|%
literal|60
operator|+
literal|"."
operator|+
name|l
operator|%
literal|1000
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|loadClass
specifier|static
name|Class
name|loadClass
parameter_list|(
name|String
name|name
parameter_list|,
name|SolrCore
name|core
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
try|try
block|{
return|return
name|core
operator|!=
literal|null
condition|?
name|core
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|findClass
argument_list|(
name|name
argument_list|)
else|:
name|Class
operator|.
name|forName
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
name|String
name|n
init|=
name|DocBuilder
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|name
decl_stmt|;
return|return
name|core
operator|!=
literal|null
condition|?
name|core
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|findClass
argument_list|(
name|n
argument_list|)
else|:
name|Class
operator|.
name|forName
argument_list|(
name|n
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|ClassNotFoundException
argument_list|(
literal|"Unable to load "
operator|+
name|name
operator|+
literal|" or "
operator|+
name|DocBuilder
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|class|Statistics
specifier|public
specifier|static
class|class
name|Statistics
block|{
DECL|field|docCount
specifier|public
name|AtomicInteger
name|docCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|deletedDocCount
specifier|public
name|AtomicInteger
name|deletedDocCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|rowsCount
specifier|public
name|AtomicLong
name|rowsCount
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|field|queryCount
specifier|public
name|AtomicLong
name|queryCount
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|field|skipDocCount
specifier|public
name|AtomicLong
name|skipDocCount
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|method|add
specifier|public
name|Statistics
name|add
parameter_list|(
name|Statistics
name|stats
parameter_list|)
block|{
name|this
operator|.
name|docCount
operator|.
name|addAndGet
argument_list|(
name|stats
operator|.
name|docCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|deletedDocCount
operator|.
name|addAndGet
argument_list|(
name|stats
operator|.
name|deletedDocCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|rowsCount
operator|.
name|addAndGet
argument_list|(
name|stats
operator|.
name|rowsCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|queryCount
operator|.
name|addAndGet
argument_list|(
name|stats
operator|.
name|queryCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
DECL|field|LAST_INDEX_TIME
specifier|public
specifier|static
specifier|final
name|String
name|LAST_INDEX_TIME
init|=
literal|"last_index_time"
decl_stmt|;
DECL|field|INDEX_START_TIME
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_START_TIME
init|=
literal|"index_start_time"
decl_stmt|;
block|}
end_class
end_unit
