begin_unit
begin_package
DECL|package|org.apache.lucene.search.trie
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|trie
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|OpenBitSet
import|;
end_import
begin_comment
comment|/**  * Implementation of a Lucene {@link Filter} that implements trie-based range filtering for ints/floats.  * This filter depends on a specific structure of terms in the index that can only be created  * by indexing via {@link IntTrieTokenStream} methods.  * For more information, how the algorithm works, see the {@linkplain org.apache.lucene.search.trie package description}.  */
end_comment
begin_class
DECL|class|IntTrieRangeFilter
specifier|public
class|class
name|IntTrieRangeFilter
extends|extends
name|AbstractTrieRangeFilter
block|{
comment|/**    * A trie filter for matching trie coded values using the given field name and    * the default helper field.    *<code>precisionStep</code> must me equal or a multiple of the<code>precisionStep</code>    * used for indexing the values.    * You can leave the bounds open, by supplying<code>null</code> for<code>min</code> and/or    *<code>max</code>. Inclusive/exclusive bounds can also be supplied.    * To query float values use the converter {@link TrieUtils#floatToSortableInt}.    */
DECL|method|IntTrieRangeFilter
specifier|public
name|IntTrieRangeFilter
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
specifier|final
name|int
name|precisionStep
parameter_list|,
specifier|final
name|Integer
name|min
parameter_list|,
specifier|final
name|Integer
name|max
parameter_list|,
specifier|final
name|boolean
name|minInclusive
parameter_list|,
specifier|final
name|boolean
name|maxInclusive
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|,
name|precisionStep
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|minInclusive
argument_list|,
name|maxInclusive
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns a DocIdSet that provides the documents which should be permitted or prohibited in search results.    */
comment|//@Override
DECL|method|getDocIdSet
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
specifier|final
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
comment|// calculate the upper and lower bounds respecting the inclusive and null values.
name|int
name|minBound
init|=
operator|(
name|this
operator|.
name|min
operator|==
literal|null
operator|)
condition|?
name|Integer
operator|.
name|MIN_VALUE
else|:
operator|(
name|minInclusive
condition|?
name|this
operator|.
name|min
operator|.
name|intValue
argument_list|()
else|:
operator|(
name|this
operator|.
name|min
operator|.
name|intValue
argument_list|()
operator|+
literal|1
operator|)
operator|)
decl_stmt|;
name|int
name|maxBound
init|=
operator|(
name|this
operator|.
name|max
operator|==
literal|null
operator|)
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
operator|(
name|maxInclusive
condition|?
name|this
operator|.
name|max
operator|.
name|intValue
argument_list|()
else|:
operator|(
name|this
operator|.
name|max
operator|.
name|intValue
argument_list|()
operator|-
literal|1
operator|)
operator|)
decl_stmt|;
name|resetLastNumberOfTerms
argument_list|()
expr_stmt|;
if|if
condition|(
name|minBound
operator|>
name|maxBound
condition|)
block|{
comment|// shortcut, no docs will match this
return|return
name|DocIdSet
operator|.
name|EMPTY_DOCIDSET
return|;
block|}
else|else
block|{
specifier|final
name|OpenBitSet
name|bits
init|=
operator|new
name|OpenBitSet
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|TermDocs
name|termDocs
init|=
name|reader
operator|.
name|termDocs
argument_list|()
decl_stmt|;
try|try
block|{
name|TrieUtils
operator|.
name|splitIntRange
argument_list|(
operator|new
name|TrieUtils
operator|.
name|IntRangeBuilder
argument_list|()
block|{
comment|//@Override
specifier|public
specifier|final
name|void
name|addRange
parameter_list|(
name|String
name|minPrefixCoded
parameter_list|,
name|String
name|maxPrefixCoded
parameter_list|)
block|{
try|try
block|{
name|fillBits
argument_list|(
name|reader
argument_list|,
name|bits
argument_list|,
name|termDocs
argument_list|,
name|minPrefixCoded
argument_list|,
name|maxPrefixCoded
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// IntRangeBuilder is not allowed to throw checked exceptions:
comment|// wrap as RuntimeException
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|,
name|precisionStep
argument_list|,
name|minBound
argument_list|,
name|maxBound
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
condition|)
throw|throw
operator|(
name|IOException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|termDocs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|bits
return|;
block|}
block|}
block|}
end_class
end_unit
