begin_unit
begin_package
DECL|package|org.apache.lucene.search.trie
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|trie
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ToStringUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_comment
comment|/**  * Implementation of a Lucene {@link Query} that implements a trie-based range query.  * This query depends on a specific structure of terms in the index that can only be created  * by {@link TrieUtils} methods.  *<p>This class wraps a {@link TrieRangeFilter} using a {@link ConstantScoreQuery}.  * @see TrieRangeFilter  */
end_comment
begin_class
DECL|class|TrieRangeQuery
specifier|public
specifier|final
class|class
name|TrieRangeQuery
extends|extends
name|Query
block|{
comment|/**    * Universal constructor (expert use only): Uses already trie-converted min/max values.    * You can set<code>min</code> or<code>max</code> (but not both) to<code>null</code> to leave one bound open.    *<p>This constructor uses the trie variant returned by {@link TrieUtils#getDefaultTrieVariant()}.    */
DECL|method|TrieRangeQuery
specifier|public
name|TrieRangeQuery
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
specifier|final
name|String
name|min
parameter_list|,
specifier|final
name|String
name|max
parameter_list|)
block|{
name|filter
operator|=
operator|new
name|TrieRangeFilter
argument_list|(
name|field
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
comment|/**    * Universal constructor (expert use only): Uses already trie-converted min/max values.    * You can set<code>min</code> or<code>max</code> (but not both) to<code>null</code> to leave one bound open.    */
DECL|method|TrieRangeQuery
specifier|public
name|TrieRangeQuery
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
specifier|final
name|String
name|min
parameter_list|,
specifier|final
name|String
name|max
parameter_list|,
specifier|final
name|TrieUtils
name|variant
parameter_list|)
block|{
name|filter
operator|=
operator|new
name|TrieRangeFilter
argument_list|(
name|field
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|variant
argument_list|)
expr_stmt|;
block|}
comment|/**    * Generates a trie query using the supplied field with range bounds in numeric form (double).    * You can set<code>min</code> or<code>max</code> (but not both) to<code>null</code> to leave one bound open.    *<p>This constructor uses the trie variant returned by {@link TrieUtils#getDefaultTrieVariant()}.    */
DECL|method|TrieRangeQuery
specifier|public
name|TrieRangeQuery
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
specifier|final
name|Double
name|min
parameter_list|,
specifier|final
name|Double
name|max
parameter_list|)
block|{
name|filter
operator|=
operator|new
name|TrieRangeFilter
argument_list|(
name|field
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
comment|/**    * Generates a trie query using the supplied field with range bounds in numeric form (double).    * You can set<code>min</code> or<code>max</code> (but not both) to<code>null</code> to leave one bound open.    */
DECL|method|TrieRangeQuery
specifier|public
name|TrieRangeQuery
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
specifier|final
name|Double
name|min
parameter_list|,
specifier|final
name|Double
name|max
parameter_list|,
specifier|final
name|TrieUtils
name|variant
parameter_list|)
block|{
name|filter
operator|=
operator|new
name|TrieRangeFilter
argument_list|(
name|field
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|variant
argument_list|)
expr_stmt|;
block|}
comment|/**    * Generates a trie query using the supplied field with range bounds in date/time form.    * You can set<code>min</code> or<code>max</code> (but not both) to<code>null</code> to leave one bound open.    *<p>This constructor uses the trie variant returned by {@link TrieUtils#getDefaultTrieVariant()}.    */
DECL|method|TrieRangeQuery
specifier|public
name|TrieRangeQuery
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
specifier|final
name|Date
name|min
parameter_list|,
specifier|final
name|Date
name|max
parameter_list|)
block|{
name|filter
operator|=
operator|new
name|TrieRangeFilter
argument_list|(
name|field
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
comment|/**    * Generates a trie query using the supplied field with range bounds in date/time form.    * You can set<code>min</code> or<code>max</code> (but not both) to<code>null</code> to leave one bound open.    */
DECL|method|TrieRangeQuery
specifier|public
name|TrieRangeQuery
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
specifier|final
name|Date
name|min
parameter_list|,
specifier|final
name|Date
name|max
parameter_list|,
specifier|final
name|TrieUtils
name|variant
parameter_list|)
block|{
name|filter
operator|=
operator|new
name|TrieRangeFilter
argument_list|(
name|field
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|variant
argument_list|)
expr_stmt|;
block|}
comment|/**    * Generates a trie query using the supplied field with range bounds in integer form (long).    * You can set<code>min</code> or<code>max</code> (but not both) to<code>null</code> to leave one bound open.    *<p>This constructor uses the trie variant returned by {@link TrieUtils#getDefaultTrieVariant()}.    */
DECL|method|TrieRangeQuery
specifier|public
name|TrieRangeQuery
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
specifier|final
name|Long
name|min
parameter_list|,
specifier|final
name|Long
name|max
parameter_list|)
block|{
name|filter
operator|=
operator|new
name|TrieRangeFilter
argument_list|(
name|field
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
comment|/**    * Generates a trie query using the supplied field with range bounds in integer form (long).    * You can set<code>min</code> or<code>max</code> (but not both) to<code>null</code> to leave one bound open.    */
DECL|method|TrieRangeQuery
specifier|public
name|TrieRangeQuery
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
specifier|final
name|Long
name|min
parameter_list|,
specifier|final
name|Long
name|max
parameter_list|,
specifier|final
name|TrieUtils
name|variant
parameter_list|)
block|{
name|filter
operator|=
operator|new
name|TrieRangeFilter
argument_list|(
name|field
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|variant
argument_list|)
expr_stmt|;
block|}
comment|//@Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
specifier|final
name|String
name|field
parameter_list|)
block|{
return|return
name|filter
operator|.
name|toString
argument_list|(
name|field
argument_list|)
operator|+
name|ToStringUtils
operator|.
name|boost
argument_list|(
name|getBoost
argument_list|()
argument_list|)
return|;
block|}
comment|//@Override
DECL|method|equals
specifier|public
specifier|final
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|TrieRangeQuery
condition|)
block|{
name|TrieRangeQuery
name|q
init|=
operator|(
name|TrieRangeQuery
operator|)
name|o
decl_stmt|;
return|return
operator|(
name|filter
operator|.
name|equals
argument_list|(
name|q
operator|.
name|filter
argument_list|)
operator|&&
name|getBoost
argument_list|()
operator|==
name|q
operator|.
name|getBoost
argument_list|()
operator|)
return|;
block|}
else|else
return|return
literal|false
return|;
block|}
comment|//@Override
DECL|method|hashCode
specifier|public
specifier|final
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|filter
operator|.
name|hashCode
argument_list|()
operator|^
literal|0x1756fa55
operator|+
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|getBoost
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Rewrites the query to native Lucene {@link Query}'s. This implementation uses a {@link ConstantScoreQuery} with    * a {@link TrieRangeFilter} as implementation of the trie algorithm.    */
comment|//@Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
specifier|final
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ConstantScoreQuery
name|q
init|=
operator|new
name|ConstantScoreQuery
argument_list|(
name|filter
argument_list|)
decl_stmt|;
name|q
operator|.
name|setBoost
argument_list|(
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|q
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|)
return|;
block|}
comment|/**    * Returns the underlying filter.    */
DECL|method|getFilter
specifier|public
name|TrieRangeFilter
name|getFilter
parameter_list|()
block|{
return|return
name|filter
return|;
block|}
comment|// members
DECL|field|filter
specifier|private
specifier|final
name|TrieRangeFilter
name|filter
decl_stmt|;
block|}
end_class
end_unit
