begin_unit
begin_package
DECL|package|org.apache.lucene.search.trie
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|trie
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ToStringUtils
import|;
end_import
begin_comment
comment|/**  * A Lucene {@link Query} that implements a trie-based range query.  * This query depends on a specific structure of terms in the index that can only be created  * by {@link TrieUtils} methods.  *<p>This class wraps a {@link TrieRangeFilter}.  * @see TrieRangeFilter  */
end_comment
begin_class
DECL|class|TrieRangeQuery
specifier|public
specifier|final
class|class
name|TrieRangeQuery
extends|extends
name|ConstantScoreQuery
block|{
comment|/**    * Universal constructor (expert use only): Uses already trie-converted min/max values.    * You can set<code>min</code> or<code>max</code> (but not both) to<code>null</code> to leave one bound open.    * With<code>minInclusive</code> and<code>maxInclusive</code> can be choosen, if the corresponding    * bound should be included or excluded from the range.    */
DECL|method|TrieRangeQuery
specifier|public
name|TrieRangeQuery
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
specifier|final
name|String
name|min
parameter_list|,
specifier|final
name|String
name|max
parameter_list|,
specifier|final
name|boolean
name|minInclusive
parameter_list|,
specifier|final
name|boolean
name|maxInclusive
parameter_list|,
specifier|final
name|TrieUtils
name|variant
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|TrieRangeFilter
argument_list|(
name|field
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|minInclusive
argument_list|,
name|maxInclusive
argument_list|,
name|variant
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * A trie query using the supplied field with range bounds in numeric form (double).    * You can set<code>min</code> or<code>max</code> (but not both) to<code>null</code> to leave one bound open.    * With<code>minInclusive</code> and<code>maxInclusive</code> can be choosen, if the corresponding    * bound should be included or excluded from the range.    */
DECL|method|TrieRangeQuery
specifier|public
name|TrieRangeQuery
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
specifier|final
name|Double
name|min
parameter_list|,
specifier|final
name|Double
name|max
parameter_list|,
specifier|final
name|boolean
name|minInclusive
parameter_list|,
specifier|final
name|boolean
name|maxInclusive
parameter_list|,
specifier|final
name|TrieUtils
name|variant
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|TrieRangeFilter
argument_list|(
name|field
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|minInclusive
argument_list|,
name|maxInclusive
argument_list|,
name|variant
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * A trie query using the supplied field with range bounds in date/time form.    * You can set<code>min</code> or<code>max</code> (but not both) to<code>null</code> to leave one bound open.    * With<code>minInclusive</code> and<code>maxInclusive</code> can be choosen, if the corresponding    * bound should be included or excluded from the range.    */
DECL|method|TrieRangeQuery
specifier|public
name|TrieRangeQuery
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
specifier|final
name|Date
name|min
parameter_list|,
specifier|final
name|Date
name|max
parameter_list|,
specifier|final
name|boolean
name|minInclusive
parameter_list|,
specifier|final
name|boolean
name|maxInclusive
parameter_list|,
specifier|final
name|TrieUtils
name|variant
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|TrieRangeFilter
argument_list|(
name|field
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|minInclusive
argument_list|,
name|maxInclusive
argument_list|,
name|variant
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * A trie query using the supplied field with range bounds in integer form (long).    * You can set<code>min</code> or<code>max</code> (but not both) to<code>null</code> to leave one bound open.    * With<code>minInclusive</code> and<code>maxInclusive</code> can be choosen, if the corresponding    * bound should be included or excluded from the range.    */
DECL|method|TrieRangeQuery
specifier|public
name|TrieRangeQuery
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
specifier|final
name|Long
name|min
parameter_list|,
specifier|final
name|Long
name|max
parameter_list|,
specifier|final
name|boolean
name|minInclusive
parameter_list|,
specifier|final
name|boolean
name|maxInclusive
parameter_list|,
specifier|final
name|TrieUtils
name|variant
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|TrieRangeFilter
argument_list|(
name|field
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|minInclusive
argument_list|,
name|maxInclusive
argument_list|,
name|variant
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * EXPERT: Return the number of terms visited during the last execution of the query.    * This may be used for performance comparisons of different trie variants and their effectiveness.    * When using this method be sure to query an one-segment index (optimized one) to get correct results.    * This method is not thread safe, be sure to only call it when no query is running!    * @throws IllegalStateException if query was not yet executed.    */
DECL|method|getLastNumberOfTerms
specifier|public
name|int
name|getLastNumberOfTerms
parameter_list|()
block|{
return|return
operator|(
operator|(
name|TrieRangeFilter
operator|)
name|filter
operator|)
operator|.
name|getLastNumberOfTerms
argument_list|()
return|;
block|}
comment|//@Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
specifier|final
name|String
name|field
parameter_list|)
block|{
comment|// return a more convenient representation of this query than ConstantScoreQuery does:
return|return
operator|(
operator|(
name|TrieRangeFilter
operator|)
name|filter
operator|)
operator|.
name|toString
argument_list|(
name|field
argument_list|)
operator|+
name|ToStringUtils
operator|.
name|boost
argument_list|(
name|getBoost
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Two instances are equal if they have the same trie-encoded range bounds, same field, same boost, and same variant.    * If one of the instances uses an exclusive lower bound, it is equal to a range with inclusive bound,    * when the inclusive lower bound is equal to the decremented exclusive lower bound.    * The same applys for the upper bound in other direction.    */
comment|//@Override
DECL|method|equals
specifier|public
specifier|final
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|TrieRangeQuery
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
comment|//@Override
DECL|method|hashCode
specifier|public
specifier|final
name|int
name|hashCode
parameter_list|()
block|{
comment|// make hashCode a little bit different:
return|return
name|super
operator|.
name|hashCode
argument_list|()
operator|^
literal|0x1756fa55
return|;
block|}
block|}
end_class
end_unit
