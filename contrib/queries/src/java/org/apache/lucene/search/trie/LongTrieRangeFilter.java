begin_unit
begin_package
DECL|package|org.apache.lucene.search.trie
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|trie
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import
begin_comment
comment|// for javadocs
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiTermQueryWrapperFilter
import|;
end_import
begin_comment
comment|/**  * Implementation of a Lucene {@link Filter} that implements trie-based range filtering for longs/doubles.  * This filter depends on a specific structure of terms in the index that can only be created  * by indexing via {@link LongTrieTokenStream} methods.  * For more information, how the algorithm works, see the {@linkplain org.apache.lucene.search.trie package description}.  */
end_comment
begin_class
DECL|class|LongTrieRangeFilter
specifier|public
class|class
name|LongTrieRangeFilter
extends|extends
name|MultiTermQueryWrapperFilter
block|{
comment|/**    * A trie filter for matching trie coded values using the given field name and    * the default helper field.    *<code>precisionStep</code> must me equal or a multiple of the<code>precisionStep</code>    * used for indexing the values.    * You can leave the bounds open, by supplying<code>null</code> for<code>min</code> and/or    *<code>max</code>. Inclusive/exclusive bounds can also be supplied.    * To filter double values use the converter {@link TrieUtils#doubleToSortableLong}.    */
DECL|method|LongTrieRangeFilter
specifier|public
name|LongTrieRangeFilter
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
specifier|final
name|int
name|precisionStep
parameter_list|,
specifier|final
name|Long
name|min
parameter_list|,
specifier|final
name|Long
name|max
parameter_list|,
specifier|final
name|boolean
name|minInclusive
parameter_list|,
specifier|final
name|boolean
name|maxInclusive
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|LongTrieRangeQuery
argument_list|(
name|field
argument_list|,
name|precisionStep
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|minInclusive
argument_list|,
name|maxInclusive
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Returns the field name for this filter */
DECL|method|getField
specifier|public
name|String
name|getField
parameter_list|()
block|{
return|return
operator|(
operator|(
name|LongTrieRangeQuery
operator|)
name|query
operator|)
operator|.
name|getField
argument_list|()
return|;
block|}
comment|/** Returns<code>true</code> if the lower endpoint is inclusive */
DECL|method|includesMin
specifier|public
name|boolean
name|includesMin
parameter_list|()
block|{
return|return
operator|(
operator|(
name|LongTrieRangeQuery
operator|)
name|query
operator|)
operator|.
name|includesMin
argument_list|()
return|;
block|}
comment|/** Returns<code>true</code> if the upper endpoint is inclusive */
DECL|method|includesMax
specifier|public
name|boolean
name|includesMax
parameter_list|()
block|{
return|return
operator|(
operator|(
name|LongTrieRangeQuery
operator|)
name|query
operator|)
operator|.
name|includesMax
argument_list|()
return|;
block|}
comment|/** Returns the lower value of this range filter */
DECL|method|getMin
specifier|public
name|Long
name|getMin
parameter_list|()
block|{
return|return
operator|(
operator|(
name|LongTrieRangeQuery
operator|)
name|query
operator|)
operator|.
name|getMin
argument_list|()
return|;
block|}
comment|/** Returns the upper value of this range filter */
DECL|method|getMax
specifier|public
name|Long
name|getMax
parameter_list|()
block|{
return|return
operator|(
operator|(
name|LongTrieRangeQuery
operator|)
name|query
operator|)
operator|.
name|getMax
argument_list|()
return|;
block|}
block|}
end_class
end_unit
