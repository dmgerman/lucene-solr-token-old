begin_unit
begin_package
DECL|package|org.apache.lucene.search.trie
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|trie
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiTermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FilteredTermEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ToStringUtils
import|;
end_import
begin_class
DECL|class|AbstractTrieRangeQuery
specifier|abstract
class|class
name|AbstractTrieRangeQuery
extends|extends
name|MultiTermQuery
block|{
DECL|method|AbstractTrieRangeQuery
name|AbstractTrieRangeQuery
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
specifier|final
name|int
name|precisionStep
parameter_list|,
name|Number
name|min
parameter_list|,
name|Number
name|max
parameter_list|,
specifier|final
name|boolean
name|minInclusive
parameter_list|,
specifier|final
name|boolean
name|maxInclusive
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
operator|.
name|intern
argument_list|()
expr_stmt|;
name|this
operator|.
name|precisionStep
operator|=
name|precisionStep
expr_stmt|;
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
name|this
operator|.
name|minInclusive
operator|=
name|minInclusive
expr_stmt|;
name|this
operator|.
name|maxInclusive
operator|=
name|maxInclusive
expr_stmt|;
name|setConstantScoreRewrite
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|passRanges
specifier|abstract
name|void
name|passRanges
parameter_list|(
name|TrieRangeTermEnum
name|enumerator
parameter_list|)
function_decl|;
comment|//@Override
DECL|method|getEnum
specifier|protected
name|FilteredTermEnum
name|getEnum
parameter_list|(
specifier|final
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|TrieRangeTermEnum
name|enumerator
init|=
operator|new
name|TrieRangeTermEnum
argument_list|(
name|this
argument_list|,
name|reader
argument_list|)
decl_stmt|;
name|passRanges
argument_list|(
name|enumerator
argument_list|)
expr_stmt|;
name|enumerator
operator|.
name|init
argument_list|()
expr_stmt|;
return|return
name|enumerator
return|;
block|}
comment|/** Returns the field name for this query */
DECL|method|getField
specifier|public
name|String
name|getField
parameter_list|()
block|{
return|return
name|field
return|;
block|}
comment|/** Returns<code>true</code> if the lower endpoint is inclusive */
DECL|method|includesMin
specifier|public
name|boolean
name|includesMin
parameter_list|()
block|{
return|return
name|minInclusive
return|;
block|}
comment|/** Returns<code>true</code> if the upper endpoint is inclusive */
DECL|method|includesMax
specifier|public
name|boolean
name|includesMax
parameter_list|()
block|{
return|return
name|maxInclusive
return|;
block|}
comment|//@Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
specifier|final
name|String
name|field
parameter_list|)
block|{
specifier|final
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|field
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|field
argument_list|)
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|append
argument_list|(
name|minInclusive
condition|?
literal|'['
else|:
literal|'{'
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|min
operator|==
literal|null
operator|)
condition|?
literal|"*"
else|:
name|min
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" TO "
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|max
operator|==
literal|null
operator|)
condition|?
literal|"*"
else|:
name|max
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|maxInclusive
condition|?
literal|']'
else|:
literal|'}'
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|//@Override
DECL|method|equals
specifier|public
specifier|final
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
name|this
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|AbstractTrieRangeQuery
name|q
init|=
operator|(
name|AbstractTrieRangeQuery
operator|)
name|o
decl_stmt|;
return|return
operator|(
name|field
operator|==
name|q
operator|.
name|field
operator|&&
operator|(
name|q
operator|.
name|min
operator|==
literal|null
condition|?
name|min
operator|==
literal|null
else|:
name|q
operator|.
name|min
operator|.
name|equals
argument_list|(
name|min
argument_list|)
operator|)
operator|&&
operator|(
name|q
operator|.
name|max
operator|==
literal|null
condition|?
name|max
operator|==
literal|null
else|:
name|q
operator|.
name|max
operator|.
name|equals
argument_list|(
name|max
argument_list|)
operator|)
operator|&&
name|minInclusive
operator|==
name|q
operator|.
name|minInclusive
operator|&&
name|maxInclusive
operator|==
name|q
operator|.
name|maxInclusive
operator|&&
name|precisionStep
operator|==
name|q
operator|.
name|precisionStep
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|//@Override
DECL|method|hashCode
specifier|public
specifier|final
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
name|field
operator|.
name|hashCode
argument_list|()
operator|+
operator|(
name|precisionStep
operator|^
literal|0x64365465
operator|)
decl_stmt|;
if|if
condition|(
name|min
operator|!=
literal|null
condition|)
name|hash
operator|+=
name|min
operator|.
name|hashCode
argument_list|()
operator|^
literal|0x14fa55fb
expr_stmt|;
if|if
condition|(
name|max
operator|!=
literal|null
condition|)
name|hash
operator|+=
name|max
operator|.
name|hashCode
argument_list|()
operator|^
literal|0x733fa5fe
expr_stmt|;
return|return
name|hash
operator|+
operator|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|minInclusive
argument_list|)
operator|.
name|hashCode
argument_list|()
operator|^
literal|0x14fa55fb
operator|)
operator|+
operator|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|maxInclusive
argument_list|)
operator|.
name|hashCode
argument_list|()
operator|^
literal|0x733fa5fe
operator|)
return|;
block|}
comment|// TODO: Make this method accessible by *TrieRangeFilter,
comment|// can be removed, when moved to core.
comment|//@Override
DECL|method|getFilter
specifier|protected
name|Filter
name|getFilter
parameter_list|()
block|{
return|return
name|super
operator|.
name|getFilter
argument_list|()
return|;
block|}
comment|// members
DECL|field|field
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|precisionStep
specifier|final
name|int
name|precisionStep
decl_stmt|;
DECL|field|min
DECL|field|max
specifier|final
name|Number
name|min
decl_stmt|,
name|max
decl_stmt|;
DECL|field|minInclusive
DECL|field|maxInclusive
specifier|final
name|boolean
name|minInclusive
decl_stmt|,
name|maxInclusive
decl_stmt|;
block|}
end_class
end_unit
