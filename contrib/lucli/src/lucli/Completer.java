begin_unit
begin_package
DECL|package|lucli
package|package
name|lucli
package|;
end_package
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache Lucene" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Lucene", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_import
import|import
name|org
operator|.
name|gnu
operator|.
name|readline
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import
begin_comment
comment|/**  * Provide for tab completion  * When the user types a tab do the standard thing: complete the command  * Two tabs show all possible completions.  */
end_comment
begin_class
DECL|class|Completer
specifier|public
class|class
name|Completer
implements|implements
name|ReadlineCompleter
block|{
DECL|field|words
name|String
index|[]
name|words
decl_stmt|;
comment|//list of words
DECL|field|currentPosition
name|int
name|currentPosition
init|=
literal|0
decl_stmt|;
comment|//current position in the array
comment|/** 		Default constructor. 		*/
DECL|method|Completer
specifier|public
name|Completer
parameter_list|(
name|TreeMap
name|wordMap
parameter_list|)
block|{
name|int
name|size
init|=
name|wordMap
operator|.
name|size
argument_list|()
decl_stmt|;
name|words
operator|=
operator|new
name|String
index|[
name|size
index|]
expr_stmt|;
name|Iterator
name|wordIterator
init|=
name|wordMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|wordIterator
operator|.
name|hasNext
argument_list|()
condition|;
name|ii
operator|++
control|)
block|{
name|words
index|[
name|ii
index|]
operator|=
operator|(
name|String
operator|)
name|wordIterator
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** 		Return possible completion. Implements org.gnu.readline.ReadlineCompleter. 		*/
DECL|method|completer
specifier|public
name|String
name|completer
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|state
parameter_list|)
block|{
name|String
name|ret
init|=
literal|null
decl_stmt|;
comment|//what we're returning
for|for
control|(
name|int
name|ii
init|=
name|currentPosition
init|;
name|ii
operator|<
name|words
operator|.
name|length
condition|;
name|ii
operator|++
control|)
block|{
if|if
condition|(
name|words
index|[
name|ii
index|]
operator|.
name|startsWith
argument_list|(
name|text
argument_list|)
condition|)
block|{
name|int
name|next
init|=
name|ii
operator|+
literal|1
decl_stmt|;
if|if
condition|(
operator|(
name|next
operator|<
name|words
operator|.
name|length
operator|)
operator|&&
name|words
index|[
name|next
index|]
operator|.
name|startsWith
argument_list|(
name|text
argument_list|)
condition|)
block|{
comment|//more than one word match
name|currentPosition
operator|=
name|ii
operator|+
literal|1
expr_stmt|;
comment|//next time start with next one
name|ret
operator|=
name|words
index|[
name|ii
index|]
expr_stmt|;
break|break;
block|}
else|else
block|{
comment|//found the last one
if|if
condition|(
name|state
operator|==
literal|0
condition|)
block|{
comment|//if it's the only one
name|ret
operator|=
name|words
index|[
name|ii
index|]
expr_stmt|;
break|break;
block|}
else|else
block|{
name|ret
operator|=
literal|null
expr_stmt|;
comment|//there were previous ones
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
name|currentPosition
operator|=
literal|0
expr_stmt|;
comment|//for next search
comment|//System.out.println("returned:" + ret);
return|return
operator|(
name|ret
operator|)
return|;
comment|//no more matches
block|}
block|}
end_class
end_unit
