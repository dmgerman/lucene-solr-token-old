begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.search.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|search
operator|.
name|index
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_comment
comment|/**  * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|IndexLogWriter
class|class
name|IndexLogWriter
block|{
DECL|field|LINE_BREAK
specifier|private
specifier|static
specifier|final
name|String
name|LINE_BREAK
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
DECL|field|XMLHEADER
specifier|private
specifier|static
specifier|final
name|String
name|XMLHEADER
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
operator|+
name|LINE_BREAK
decl_stmt|;
DECL|field|CHARSET
specifier|private
specifier|static
specifier|final
name|String
name|CHARSET
init|=
literal|"UTF-8"
decl_stmt|;
DECL|field|ROOT_BEGIN
specifier|private
specifier|static
specifier|final
name|String
name|ROOT_BEGIN
init|=
literal|"<indexlog>"
operator|+
name|LINE_BREAK
decl_stmt|;
DECL|field|ROOT_END
specifier|private
specifier|static
specifier|final
name|String
name|ROOT_END
init|=
literal|"</indexlog>"
decl_stmt|;
DECL|field|writer
specifier|private
specifier|final
name|BufferedWriter
name|writer
decl_stmt|;
DECL|field|isClosed
specifier|private
specifier|final
name|AtomicBoolean
name|isClosed
decl_stmt|;
comment|/**      * @param file      * @throws IOException      *       */
DECL|method|IndexLogWriter
specifier|public
name|IndexLogWriter
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|writer
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
argument_list|,
name|CHARSET
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|writer
operator|.
name|write
argument_list|(
name|XMLHEADER
argument_list|)
expr_stmt|;
name|this
operator|.
name|writer
operator|.
name|write
argument_list|(
name|ROOT_BEGIN
argument_list|)
expr_stmt|;
name|this
operator|.
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|this
operator|.
name|isClosed
operator|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|writeAction
specifier|synchronized
name|void
name|writeAction
parameter_list|(
name|String
name|id
parameter_list|,
name|IndexAction
name|action
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|isClosed
operator|.
name|get
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Writer is already closed"
argument_list|)
throw|;
name|this
operator|.
name|writer
operator|.
name|write
argument_list|(
name|buildElement
argument_list|(
name|id
argument_list|,
name|action
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|tryCloseRoot
specifier|static
specifier|synchronized
name|void
name|tryCloseRoot
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
comment|/*          * try to append the Root element end          * this happens if the server crashes.          * If it dies while writing an entry the log file has to be fixed manually          */
name|RandomAccessFile
name|raFile
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|raFile
operator|.
name|seek
argument_list|(
name|raFile
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|raFile
operator|.
name|write
argument_list|(
name|IndexLogWriter
operator|.
name|ROOT_END
operator|.
name|getBytes
argument_list|(
name|CHARSET
argument_list|)
argument_list|)
expr_stmt|;
name|raFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|buildElement
specifier|private
specifier|static
name|String
name|buildElement
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|action
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"\t<indexentry>"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_BREAK
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"\t\t<entryid>"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"</entryid>"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_BREAK
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"\t\t<action>"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"</action>"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_BREAK
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"\t</indexentry>"
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_BREAK
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|close
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|isClosed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Writer is already closed"
argument_list|)
throw|;
try|try
block|{
name|this
operator|.
name|writer
operator|.
name|write
argument_list|(
name|ROOT_END
argument_list|)
expr_stmt|;
name|this
operator|.
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
