begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.storage.db4o
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|db4o
package|;
end_package
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import
begin_import
import|import
name|com
operator|.
name|db4o
operator|.
name|Db4o
import|;
end_import
begin_import
import|import
name|com
operator|.
name|db4o
operator|.
name|ObjectServer
import|;
end_import
begin_comment
comment|/**  * @author Simon Willnauer  *  */
end_comment
begin_class
DECL|class|ObjectServerDecorator
specifier|public
class|class
name|ObjectServerDecorator
implements|implements
name|InvocationHandler
block|{
DECL|field|port
specifier|private
specifier|final
name|int
name|port
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|String
name|user
decl_stmt|;
DECL|field|password
specifier|private
specifier|final
name|String
name|password
decl_stmt|;
DECL|field|host
specifier|private
specifier|final
name|String
name|host
decl_stmt|;
DECL|field|openClient
specifier|private
name|Method
name|openClient
decl_stmt|;
comment|/**      *       */
DECL|method|ObjectServerDecorator
specifier|public
name|ObjectServerDecorator
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
try|try
block|{
name|this
operator|.
name|openClient
operator|=
name|ObjectServer
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"openClient"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//ignore method is visible
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @see java.lang.reflect.InvocationHandler#invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])      */
DECL|method|invoke
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|arg0
parameter_list|,
name|Method
name|arg1
parameter_list|,
name|Object
index|[]
name|arg2
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|arg1
operator|.
name|equals
argument_list|(
name|this
operator|.
name|openClient
argument_list|)
condition|)
block|{
return|return
name|Db4o
operator|.
name|openClient
argument_list|(
name|this
operator|.
name|host
argument_list|,
name|this
operator|.
name|port
argument_list|,
name|this
operator|.
name|user
argument_list|,
name|this
operator|.
name|password
argument_list|)
return|;
block|}
name|Class
name|clazz
init|=
name|arg1
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|clazz
operator|.
name|isPrimitive
argument_list|()
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|clazz
operator|==
name|Boolean
operator|.
name|TYPE
condition|)
return|return
literal|false
return|;
return|return
literal|0
return|;
block|}
block|}
end_class
end_unit
