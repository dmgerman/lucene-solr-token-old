begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.search.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|search
operator|.
name|index
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|search
operator|.
name|analysis
operator|.
name|ContentStrategy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_comment
comment|/**  * Simple implementation  *   * @author Simon Willnauer  * @see org.apache.lucene.gdata.search.index.IndexDocument  */
end_comment
begin_class
DECL|class|GDataIndexDocument
class|class
name|GDataIndexDocument
implements|implements
name|IndexDocument
block|{
DECL|field|action
specifier|private
specifier|final
name|IndexAction
name|action
decl_stmt|;
DECL|field|commitAfter
specifier|private
specifier|final
name|boolean
name|commitAfter
decl_stmt|;
DECL|field|optimizeAfter
specifier|private
specifier|final
name|boolean
name|optimizeAfter
decl_stmt|;
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
DECL|field|fields
specifier|protected
name|Collection
argument_list|<
name|ContentStrategy
argument_list|>
name|fields
decl_stmt|;
DECL|field|feedId
specifier|private
specifier|final
name|String
name|feedId
decl_stmt|;
DECL|method|GDataIndexDocument
name|GDataIndexDocument
parameter_list|(
specifier|final
name|IndexAction
name|action
parameter_list|,
specifier|final
name|String
name|entryId
parameter_list|,
specifier|final
name|String
name|feedId
parameter_list|,
specifier|final
name|boolean
name|commitAfter
parameter_list|,
specifier|final
name|boolean
name|optimizeAfter
parameter_list|)
block|{
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|entryId
expr_stmt|;
name|this
operator|.
name|feedId
operator|=
name|feedId
expr_stmt|;
name|this
operator|.
name|fields
operator|=
operator|new
name|ArrayList
argument_list|<
name|ContentStrategy
argument_list|>
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|this
operator|.
name|commitAfter
operator|=
name|commitAfter
expr_stmt|;
name|this
operator|.
name|optimizeAfter
operator|=
name|optimizeAfter
expr_stmt|;
block|}
comment|/**      * Adds a new field e.g.<tt>ContentStrategy</tt> to the IndexDocument      *       * @param field -      *            the strategy to add      */
DECL|method|addField
specifier|public
name|void
name|addField
parameter_list|(
name|ContentStrategy
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
return|return;
name|this
operator|.
name|fields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see org.apache.lucene.gdata.search.index.IndexDocument#getWriteable()      */
DECL|method|getWriteable
specifier|public
name|Document
name|getWriteable
parameter_list|()
block|{
name|Document
name|retVal
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|retVal
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|FIELD_ENTRY_ID
argument_list|,
name|this
operator|.
name|id
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|UN_TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|retVal
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|FIELD_FEED_ID
argument_list|,
name|this
operator|.
name|feedId
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|UN_TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ContentStrategy
name|strategy
range|:
name|this
operator|.
name|fields
control|)
block|{
name|Field
index|[]
name|fieldArray
init|=
name|strategy
operator|.
name|createLuceneField
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|retVal
operator|.
name|add
argument_list|(
name|fieldArray
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|retVal
return|;
block|}
comment|/**      * @see org.apache.lucene.gdata.search.index.IndexDocument#getDeletealbe()      */
DECL|method|getDeletealbe
specifier|public
name|Term
name|getDeletealbe
parameter_list|()
block|{
return|return
operator|new
name|Term
argument_list|(
name|IndexDocument
operator|.
name|FIELD_ENTRY_ID
argument_list|,
name|this
operator|.
name|id
argument_list|)
return|;
block|}
comment|/**      * @see org.apache.lucene.gdata.search.index.IndexDocument#isUpdate()      */
DECL|method|isUpdate
specifier|public
name|boolean
name|isUpdate
parameter_list|()
block|{
return|return
name|isAction
argument_list|(
name|IndexAction
operator|.
name|UPDATE
argument_list|)
return|;
block|}
comment|/**      * @see org.apache.lucene.gdata.search.index.IndexDocument#isDelete()      */
DECL|method|isDelete
specifier|public
name|boolean
name|isDelete
parameter_list|()
block|{
return|return
name|isAction
argument_list|(
name|IndexAction
operator|.
name|DELETE
argument_list|)
return|;
block|}
comment|/**      * @see org.apache.lucene.gdata.search.index.IndexDocument#isInsert()      */
DECL|method|isInsert
specifier|public
name|boolean
name|isInsert
parameter_list|()
block|{
return|return
name|isAction
argument_list|(
name|IndexAction
operator|.
name|INSERT
argument_list|)
return|;
block|}
DECL|method|isAction
specifier|private
name|boolean
name|isAction
parameter_list|(
name|IndexAction
name|indexAction
parameter_list|)
block|{
return|return
name|this
operator|.
name|action
operator|==
name|indexAction
return|;
block|}
comment|/**      * @see org.apache.lucene.gdata.search.index.IndexDocument#commitAfter()      */
DECL|method|commitAfter
specifier|public
name|boolean
name|commitAfter
parameter_list|()
block|{
return|return
name|this
operator|.
name|commitAfter
return|;
block|}
comment|/**      * @see org.apache.lucene.gdata.search.index.IndexDocument#optimizeAfter()      */
DECL|method|optimizeAfter
specifier|public
name|boolean
name|optimizeAfter
parameter_list|()
block|{
return|return
name|this
operator|.
name|optimizeAfter
return|;
block|}
comment|/**      * @see java.lang.Object#equals(java.lang.Object)      */
annotation|@
name|Override
DECL|method|equals
specifier|public
specifier|final
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|instanceof
name|GDataIndexDocument
condition|)
block|{
name|GDataIndexDocument
name|other
init|=
operator|(
name|GDataIndexDocument
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|id
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|this
operator|.
name|id
operator|.
name|equals
argument_list|(
name|other
operator|.
name|id
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * @see java.lang.Object#hashCode()      */
annotation|@
name|Override
DECL|method|hashCode
specifier|public
specifier|final
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|id
operator|==
literal|null
condition|)
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
return|return
name|this
operator|.
name|id
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class
end_unit
