begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.storage.db4o
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|db4o
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|data
operator|.
name|GDataAccount
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|data
operator|.
name|ServerBaseEntry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|data
operator|.
name|ServerBaseFeed
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|ModificationConflictException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|ResourceNotFoundException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|Storage
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|StorageController
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import
begin_import
import|import
name|com
operator|.
name|db4o
operator|.
name|ObjectContainer
import|;
end_import
begin_import
import|import
name|com
operator|.
name|db4o
operator|.
name|ObjectSet
import|;
end_import
begin_import
import|import
name|com
operator|.
name|db4o
operator|.
name|query
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|BaseEntry
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|BaseFeed
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|DateTime
import|;
end_import
begin_comment
comment|/**  *   * Storage implementation for the DB4o storage component  * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|DB4oStorage
specifier|public
class|class
name|DB4oStorage
implements|implements
name|Storage
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DB4oStorage
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|RENDER_ACTIVATION_DEPTH
specifier|private
specifier|static
specifier|final
name|int
name|RENDER_ACTIVATION_DEPTH
init|=
literal|100
decl_stmt|;
DECL|field|container
specifier|private
specifier|final
name|ObjectContainer
name|container
decl_stmt|;
DECL|field|controller
specifier|private
specifier|final
name|StorageController
name|controller
decl_stmt|;
DECL|field|semaphore
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|semaphore
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|DB4oStorage
specifier|protected
name|DB4oStorage
parameter_list|(
specifier|final
name|ObjectContainer
name|container
parameter_list|,
name|StorageController
name|controller
parameter_list|)
block|{
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
name|this
operator|.
name|controller
operator|=
name|controller
expr_stmt|;
block|}
DECL|method|createSemaphore
specifier|private
name|void
name|createSemaphore
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|ModificationConflictException
block|{
name|this
operator|.
name|semaphore
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|container
operator|.
name|ext
argument_list|()
operator|.
name|setSemaphore
argument_list|(
name|key
argument_list|,
literal|0
argument_list|)
condition|)
return|return;
throw|throw
operator|new
name|ModificationConflictException
argument_list|(
literal|"can not create semaphore for key -- "
operator|+
name|key
argument_list|)
throw|;
block|}
DECL|method|releaseAllSemaphore
specifier|private
name|void
name|releaseAllSemaphore
parameter_list|()
block|{
for|for
control|(
name|String
name|key
range|:
name|this
operator|.
name|semaphore
control|)
block|{
name|this
operator|.
name|container
operator|.
name|ext
argument_list|()
operator|.
name|releaseSemaphore
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|semaphore
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|releaseSemaphore
specifier|private
name|void
name|releaseSemaphore
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|semaphore
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|this
operator|.
name|container
operator|.
name|ext
argument_list|()
operator|.
name|releaseSemaphore
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|this
operator|.
name|semaphore
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#storeEntry(org.apache.lucene.gdata.data.ServerBaseEntry)      */
DECL|method|storeEntry
specifier|public
name|BaseEntry
name|storeEntry
parameter_list|(
name|ServerBaseEntry
name|entry
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not store entry -- is null"
argument_list|)
throw|;
if|if
condition|(
name|entry
operator|.
name|getFeedId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"can not store entry -- feed id is null"
argument_list|)
throw|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing entry for feed: "
operator|+
name|entry
operator|.
name|getFeedId
argument_list|()
argument_list|)
expr_stmt|;
name|BaseFeed
argument_list|<
name|BaseFeed
argument_list|,
name|BaseEntry
argument_list|>
name|feed
init|=
name|getFeedOnly
argument_list|(
name|entry
operator|.
name|getFeedId
argument_list|()
argument_list|,
name|entry
operator|.
name|getServiceType
argument_list|()
argument_list|)
decl_stmt|;
name|refreshPersistentObject
argument_list|(
name|feed
argument_list|)
expr_stmt|;
try|try
block|{
name|StringBuilder
name|idBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
name|entry
operator|.
name|getFeedId
argument_list|()
argument_list|)
decl_stmt|;
name|idBuilder
operator|.
name|append
argument_list|(
name|this
operator|.
name|controller
operator|.
name|releaseId
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setId
argument_list|(
name|idBuilder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can not create uid for entry -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not create uid for entry -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|setUpdated
argument_list|(
name|entry
argument_list|,
name|feed
argument_list|)
expr_stmt|;
name|DB4oEntry
name|intEntry
init|=
operator|new
name|DB4oEntry
argument_list|()
decl_stmt|;
name|intEntry
operator|.
name|setEntry
argument_list|(
name|entry
operator|.
name|getEntry
argument_list|()
argument_list|)
expr_stmt|;
name|intEntry
operator|.
name|setUpdateTime
argument_list|(
name|entry
operator|.
name|getUpdated
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|intEntry
operator|.
name|setFeedId
argument_list|(
name|feed
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|intEntry
operator|.
name|setVersion
argument_list|(
name|entry
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|container
operator|.
name|set
argument_list|(
name|feed
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|.
name|set
argument_list|(
name|intEntry
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error occured on persisting changes -- rollback changes"
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not persist changes -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"Stored Entry for entryID: "
operator|+
name|entry
operator|.
name|getId
argument_list|()
operator|+
literal|" -- feedID: "
operator|+
name|entry
operator|.
name|getFeedId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|entry
operator|.
name|getEntry
argument_list|()
return|;
block|}
DECL|method|setUpdated
specifier|private
name|void
name|setUpdated
parameter_list|(
name|ServerBaseEntry
name|entry
parameter_list|,
name|DB4oEntry
name|intEntry
parameter_list|)
block|{
if|if
condition|(
name|entry
operator|.
name|getUpdated
argument_list|()
operator|.
name|compareTo
argument_list|(
name|intEntry
operator|.
name|getEntry
argument_list|()
operator|.
name|getUpdated
argument_list|()
argument_list|)
operator|<=
literal|0
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Set new UpdateTime to entry new entry time is less or equal the time of the stored entry -- old Entry: "
operator|+
name|intEntry
operator|.
name|getEntry
argument_list|()
operator|.
name|getUpdated
argument_list|()
operator|+
literal|"; new Entry: "
operator|+
name|entry
operator|.
name|getUpdated
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setUpdated
argument_list|(
operator|new
name|DateTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|entry
operator|.
name|getUpdated
argument_list|()
operator|.
name|getTzShift
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setUpdated
specifier|private
name|void
name|setUpdated
parameter_list|(
name|ServerBaseEntry
name|entry
parameter_list|,
name|BaseFeed
argument_list|<
name|BaseFeed
argument_list|,
name|BaseEntry
argument_list|>
name|feed
parameter_list|)
block|{
if|if
condition|(
name|entry
operator|.
name|getUpdated
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|long
name|timeInMilli
init|=
name|entry
operator|.
name|getUpdated
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|tzShift
init|=
name|entry
operator|.
name|getUpdated
argument_list|()
operator|.
name|getTzShift
argument_list|()
decl_stmt|;
name|feed
operator|.
name|setUpdated
argument_list|(
operator|new
name|DateTime
argument_list|(
name|timeInMilli
argument_list|,
name|tzShift
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|timezone
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|feed
operator|.
name|getUpdated
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|timezone
operator|=
name|feed
operator|.
name|getUpdated
argument_list|()
operator|.
name|getTzShift
argument_list|()
expr_stmt|;
block|}
name|long
name|timeInMilli
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setUpdated
argument_list|(
operator|new
name|DateTime
argument_list|(
name|timeInMilli
argument_list|,
name|timezone
argument_list|)
argument_list|)
expr_stmt|;
name|feed
operator|.
name|setUpdated
argument_list|(
operator|new
name|DateTime
argument_list|(
name|timeInMilli
argument_list|,
name|timezone
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#deleteEntry(org.apache.lucene.gdata.data.ServerBaseEntry)      */
DECL|method|deleteEntry
specifier|public
name|void
name|deleteEntry
parameter_list|(
name|ServerBaseEntry
name|entry
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not delete entry -- is null"
argument_list|)
throw|;
if|if
condition|(
name|entry
operator|.
name|getFeedId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"can not delete entry -- feed id is null"
argument_list|)
throw|;
if|if
condition|(
name|entry
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not delete entry -- id is null"
argument_list|)
throw|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"delete entry for feed: "
operator|+
name|entry
operator|.
name|getFeedId
argument_list|()
operator|+
literal|" entry ID: "
operator|+
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|DB4oEntry
name|persistentEntry
init|=
name|getInternalEntry
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
comment|// lock the entry to prevent concurrent access
name|createSemaphore
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|refreshPersistentObject
argument_list|(
name|persistentEntry
argument_list|)
expr_stmt|;
if|if
condition|(
name|persistentEntry
operator|.
name|getVersion
argument_list|()
operator|!=
name|entry
operator|.
name|getVersion
argument_list|()
condition|)
throw|throw
operator|new
name|ModificationConflictException
argument_list|(
literal|"Current version does not match given version  -- currentVersion: "
operator|+
name|persistentEntry
operator|.
name|getVersion
argument_list|()
operator|+
literal|"; given Version: "
operator|+
name|entry
operator|.
name|getVersion
argument_list|()
argument_list|)
throw|;
name|BaseFeed
argument_list|<
name|BaseFeed
argument_list|,
name|BaseEntry
argument_list|>
name|feed
init|=
name|getFeedOnly
argument_list|(
name|entry
operator|.
name|getFeedId
argument_list|()
argument_list|,
name|entry
operator|.
name|getServiceType
argument_list|()
argument_list|)
decl_stmt|;
name|refreshPersistentObject
argument_list|(
name|feed
argument_list|)
expr_stmt|;
name|DateTime
name|time
init|=
name|DateTime
operator|.
name|now
argument_list|()
decl_stmt|;
if|if
condition|(
name|persistentEntry
operator|.
name|getEntry
argument_list|()
operator|.
name|getUpdated
argument_list|()
operator|!=
literal|null
condition|)
name|time
operator|.
name|setTzShift
argument_list|(
name|persistentEntry
operator|.
name|getEntry
argument_list|()
operator|.
name|getUpdated
argument_list|()
operator|.
name|getTzShift
argument_list|()
argument_list|)
expr_stmt|;
name|feed
operator|.
name|setUpdated
argument_list|(
name|time
argument_list|)
expr_stmt|;
try|try
block|{
comment|//delete the entry
name|this
operator|.
name|container
operator|.
name|delete
argument_list|(
name|persistentEntry
operator|.
name|getEntry
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|.
name|delete
argument_list|(
name|persistentEntry
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|.
name|set
argument_list|(
name|feed
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error occured on persisting changes -- rollback changes"
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not persist changes -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|releaseSemaphore
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#updateEntry(org.apache.lucene.gdata.data.ServerBaseEntry)      */
DECL|method|updateEntry
specifier|public
name|BaseEntry
name|updateEntry
parameter_list|(
name|ServerBaseEntry
name|entry
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not update entry -- is null"
argument_list|)
throw|;
if|if
condition|(
name|entry
operator|.
name|getFeedId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"can not delete entry -- feed id is null"
argument_list|)
throw|;
if|if
condition|(
name|entry
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not delete entry -- id is null"
argument_list|)
throw|;
name|DB4oEntry
name|persistentEntry
init|=
name|getInternalEntry
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
comment|// lock the entry to prevent concurrent access
name|createSemaphore
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|refreshPersistentObject
argument_list|(
name|persistentEntry
argument_list|)
expr_stmt|;
if|if
condition|(
name|persistentEntry
operator|.
name|getVersion
argument_list|()
operator|!=
name|entry
operator|.
name|getVersion
argument_list|()
condition|)
throw|throw
operator|new
name|ModificationConflictException
argument_list|(
literal|"Current version does not match given version  -- currentVersion: "
operator|+
name|persistentEntry
operator|.
name|getVersion
argument_list|()
operator|+
literal|"; given Version: "
operator|+
name|entry
operator|.
name|getVersion
argument_list|()
argument_list|)
throw|;
name|setUpdated
argument_list|(
name|entry
argument_list|,
name|persistentEntry
argument_list|)
expr_stmt|;
name|BaseFeed
argument_list|<
name|BaseFeed
argument_list|,
name|BaseEntry
argument_list|>
name|feed
init|=
name|getFeedOnly
argument_list|(
name|entry
operator|.
name|getFeedId
argument_list|()
argument_list|,
name|entry
operator|.
name|getServiceType
argument_list|()
argument_list|)
decl_stmt|;
name|refreshPersistentObject
argument_list|(
name|feed
argument_list|)
expr_stmt|;
name|BaseEntry
name|retVal
init|=
name|entry
operator|.
name|getEntry
argument_list|()
decl_stmt|;
name|DB4oEntry
name|newEntry
init|=
operator|new
name|DB4oEntry
argument_list|()
decl_stmt|;
name|newEntry
operator|.
name|setEntry
argument_list|(
name|retVal
argument_list|)
expr_stmt|;
name|newEntry
operator|.
name|setUpdateTime
argument_list|(
name|entry
operator|.
name|getUpdated
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|newEntry
operator|.
name|setFeedId
argument_list|(
name|feed
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// increment Version
name|newEntry
operator|.
name|setVersion
argument_list|(
operator|(
name|entry
operator|.
name|getVersion
argument_list|()
operator|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|setUpdated
argument_list|(
name|entry
argument_list|,
name|feed
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|container
operator|.
name|set
argument_list|(
name|feed
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|.
name|set
argument_list|(
name|newEntry
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|.
name|delete
argument_list|(
name|persistentEntry
operator|.
name|getEntry
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|.
name|delete
argument_list|(
name|persistentEntry
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error occured on persisting changes -- rollback changes"
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not persist changes -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|releaseSemaphore
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#getFeed(org.apache.lucene.gdata.data.ServerBaseFeed)      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getFeed
specifier|public
name|BaseFeed
name|getFeed
parameter_list|(
name|ServerBaseFeed
name|feed
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|feed
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"can not get feed -- feed id is null"
argument_list|)
throw|;
if|if
condition|(
name|feed
operator|.
name|getStartIndex
argument_list|()
operator|<
literal|1
condition|)
name|feed
operator|.
name|setStartIndex
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|feed
operator|.
name|getItemsPerPage
argument_list|()
operator|<
literal|0
condition|)
name|feed
operator|.
name|setItemsPerPage
argument_list|(
literal|25
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"Fetching feed for feedID: "
operator|+
name|feed
operator|.
name|getId
argument_list|()
operator|+
literal|"; start-index: "
operator|+
name|feed
operator|.
name|getStartIndex
argument_list|()
operator|+
literal|"; items per page: "
operator|+
name|feed
operator|.
name|getItemsPerPage
argument_list|()
argument_list|)
expr_stmt|;
name|BaseFeed
argument_list|<
name|BaseFeed
argument_list|,
name|BaseEntry
argument_list|>
name|persistentFeed
init|=
name|getFeedOnly
argument_list|(
name|feed
operator|.
name|getId
argument_list|()
argument_list|,
name|feed
operator|.
name|getServiceType
argument_list|()
argument_list|)
decl_stmt|;
comment|/*         * prevent previously added entries in long running storage instances         */
name|clearDynamicElements
argument_list|(
name|persistentFeed
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|this
operator|.
name|container
operator|.
name|query
argument_list|()
decl_stmt|;
name|query
operator|.
name|constrain
argument_list|(
name|DB4oEntry
operator|.
name|class
argument_list|)
expr_stmt|;
name|query
operator|.
name|descend
argument_list|(
literal|"feedId"
argument_list|)
operator|.
name|constrain
argument_list|(
name|feed
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|equal
argument_list|()
expr_stmt|;
name|query
operator|.
name|descend
argument_list|(
literal|"updateTime"
argument_list|)
operator|.
name|orderDescending
argument_list|()
expr_stmt|;
name|ObjectSet
argument_list|<
name|DB4oEntry
argument_list|>
name|set
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|set
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|<
name|feed
operator|.
name|getStartIndex
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"no entries found for feed constrain -- feedID: "
operator|+
name|feed
operator|.
name|getId
argument_list|()
operator|+
literal|"; start-index: "
operator|+
name|feed
operator|.
name|getStartIndex
argument_list|()
operator|+
literal|"; items per page: "
operator|+
name|feed
operator|.
name|getItemsPerPage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|persistentFeed
return|;
block|}
name|int
name|start
init|=
name|feed
operator|.
name|getStartIndex
argument_list|()
operator|-
literal|1
decl_stmt|;
name|int
name|items
init|=
name|start
operator|+
name|feed
operator|.
name|getItemsPerPage
argument_list|()
decl_stmt|;
if|if
condition|(
name|items
operator|>
name|size
condition|)
name|items
operator|=
name|size
expr_stmt|;
name|List
argument_list|<
name|DB4oEntry
argument_list|>
name|sublist
init|=
name|set
operator|.
name|subList
argument_list|(
name|start
argument_list|,
name|items
argument_list|)
decl_stmt|;
for|for
control|(
name|DB4oEntry
name|entry
range|:
name|sublist
control|)
block|{
name|persistentFeed
operator|.
name|getEntries
argument_list|()
operator|.
name|add
argument_list|(
name|clearDynamicElements
argument_list|(
name|entry
operator|.
name|getEntry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|container
operator|.
name|activate
argument_list|(
name|persistentFeed
argument_list|,
name|RENDER_ACTIVATION_DEPTH
argument_list|)
expr_stmt|;
return|return
name|persistentFeed
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getFeedOnly
specifier|private
name|BaseFeed
argument_list|<
name|BaseFeed
argument_list|,
name|BaseEntry
argument_list|>
name|getFeedOnly
parameter_list|(
specifier|final
name|String
name|feedId
parameter_list|,
specifier|final
name|String
name|serviceId
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
operator|!
name|checkService
argument_list|(
name|feedId
argument_list|,
name|serviceId
argument_list|)
condition|)
throw|throw
operator|new
name|StorageException
argument_list|()
throw|;
name|Query
name|query
init|=
name|this
operator|.
name|container
operator|.
name|query
argument_list|()
decl_stmt|;
name|query
operator|.
name|constrain
argument_list|(
name|ServerBaseFeed
operator|.
name|class
argument_list|)
expr_stmt|;
name|query
operator|.
name|constrain
argument_list|(
name|BaseFeed
operator|.
name|class
argument_list|)
expr_stmt|;
name|query
operator|.
name|descend
argument_list|(
literal|"id"
argument_list|)
operator|.
name|constrain
argument_list|(
name|feedId
argument_list|)
operator|.
name|equal
argument_list|()
expr_stmt|;
name|ObjectSet
name|set
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
name|set
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Query for feed id "
operator|+
name|feedId
operator|+
literal|" returns more than one result"
argument_list|)
throw|;
if|if
condition|(
name|set
operator|.
name|hasNext
argument_list|()
condition|)
return|return
operator|(
name|BaseFeed
argument_list|<
name|BaseFeed
argument_list|,
name|BaseEntry
argument_list|>
operator|)
name|set
operator|.
name|next
argument_list|()
return|;
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|(
literal|"can not find feed for given feed id -- "
operator|+
name|feedId
argument_list|)
throw|;
block|}
DECL|method|checkService
specifier|private
name|boolean
name|checkService
parameter_list|(
name|String
name|feedId
parameter_list|,
name|String
name|serviceId
parameter_list|)
block|{
name|Query
name|query
init|=
name|this
operator|.
name|container
operator|.
name|query
argument_list|()
decl_stmt|;
name|query
operator|.
name|constrain
argument_list|(
name|ServerBaseFeed
operator|.
name|class
argument_list|)
expr_stmt|;
name|query
operator|.
name|descend
argument_list|(
literal|"feed"
argument_list|)
operator|.
name|descend
argument_list|(
literal|"id"
argument_list|)
operator|.
name|constrain
argument_list|(
name|feedId
argument_list|)
operator|.
name|equal
argument_list|()
expr_stmt|;
name|query
operator|.
name|descend
argument_list|(
literal|"serviceType"
argument_list|)
operator|.
name|constrain
argument_list|(
name|serviceId
argument_list|)
operator|.
name|equal
argument_list|()
expr_stmt|;
return|return
name|query
operator|.
name|execute
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
return|;
block|}
DECL|method|getEnriesForFeedID
specifier|private
name|ObjectSet
name|getEnriesForFeedID
parameter_list|(
name|String
name|feedId
parameter_list|)
block|{
name|Query
name|query
init|=
name|this
operator|.
name|container
operator|.
name|query
argument_list|()
decl_stmt|;
name|query
operator|.
name|constrain
argument_list|(
name|DB4oEntry
operator|.
name|class
argument_list|)
expr_stmt|;
name|query
operator|.
name|descend
argument_list|(
literal|"feedId"
argument_list|)
operator|.
name|constrain
argument_list|(
name|feedId
argument_list|)
operator|.
name|equal
argument_list|()
expr_stmt|;
return|return
name|query
operator|.
name|execute
argument_list|()
return|;
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#getEntry(org.apache.lucene.gdata.data.ServerBaseEntry)      */
DECL|method|getEntry
specifier|public
name|BaseEntry
name|getEntry
parameter_list|(
name|ServerBaseEntry
name|entry
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"can not retrieve entry -- is null"
argument_list|)
throw|;
if|if
condition|(
name|entry
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"can not retrieve entry -- id is null"
argument_list|)
throw|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"Retrieving entry for entryID: "
operator|+
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|DB4oEntry
name|retval
init|=
name|getInternalEntry
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|container
operator|.
name|activate
argument_list|(
name|retval
operator|.
name|getEntry
argument_list|()
argument_list|,
name|RENDER_ACTIVATION_DEPTH
argument_list|)
expr_stmt|;
return|return
name|clearDynamicElements
argument_list|(
name|retval
operator|.
name|getEntry
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getInternalEntry
specifier|private
name|DB4oEntry
name|getInternalEntry
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|StorageException
block|{
name|Query
name|query
init|=
name|this
operator|.
name|container
operator|.
name|query
argument_list|()
decl_stmt|;
name|query
operator|.
name|constrain
argument_list|(
name|DB4oEntry
operator|.
name|class
argument_list|)
expr_stmt|;
name|query
operator|.
name|descend
argument_list|(
literal|"entry"
argument_list|)
operator|.
name|descend
argument_list|(
literal|"id"
argument_list|)
operator|.
name|constrain
argument_list|(
name|id
argument_list|)
operator|.
name|equal
argument_list|()
expr_stmt|;
name|ObjectSet
argument_list|<
name|DB4oEntry
argument_list|>
name|resultSet
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
name|resultSet
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Entry query returned not a unique result"
argument_list|)
throw|;
if|if
condition|(
name|resultSet
operator|.
name|hasNext
argument_list|()
condition|)
return|return
name|resultSet
operator|.
name|next
argument_list|()
return|;
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|(
literal|"no entry with entryID: "
operator|+
name|id
operator|+
literal|" stored -- query returned no result"
argument_list|)
throw|;
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#storeAccount(org.apache.lucene.gdata.data.GDataAccount)      */
DECL|method|storeAccount
specifier|public
name|void
name|storeAccount
parameter_list|(
name|GDataAccount
name|account
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|account
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"can not store account -- is null"
argument_list|)
throw|;
if|if
condition|(
name|account
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"can not store account -- name is null"
argument_list|)
throw|;
if|if
condition|(
name|account
operator|.
name|getPassword
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"can not store account -- password is null"
argument_list|)
throw|;
try|try
block|{
name|getAccount
argument_list|(
name|account
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"account with accountname: "
operator|+
name|account
operator|.
name|getName
argument_list|()
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Account already exists"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"checked account for existence -- does not exist -- store account"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|this
operator|.
name|container
operator|.
name|set
argument_list|(
name|account
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error occured on persisting changes -- rollback changes"
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not persist changes -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"Stored account: "
operator|+
name|account
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#updateAccount(org.apache.lucene.gdata.data.GDataAccount)      */
DECL|method|updateAccount
specifier|public
name|void
name|updateAccount
parameter_list|(
name|GDataAccount
name|account
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|account
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"can not update account -- is null"
argument_list|)
throw|;
if|if
condition|(
name|account
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"can not update account -- name is null"
argument_list|)
throw|;
if|if
condition|(
name|account
operator|.
name|getPassword
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"can not update account -- password is null"
argument_list|)
throw|;
name|GDataAccount
name|persitentAccount
init|=
name|getAccount
argument_list|(
name|account
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|refreshPersistentObject
argument_list|(
name|persitentAccount
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|container
operator|.
name|set
argument_list|(
name|account
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|.
name|delete
argument_list|(
name|persitentAccount
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error occured on persisting changes -- rollback changes"
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not persist changes -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#deleteAccount(java.lang.String)      */
DECL|method|deleteAccount
specifier|public
name|void
name|deleteAccount
parameter_list|(
name|String
name|accountname
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|accountname
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"can not delete account -- account name is null"
argument_list|)
throw|;
name|GDataAccount
name|account
init|=
name|this
operator|.
name|getAccount
argument_list|(
name|accountname
argument_list|)
decl_stmt|;
name|refreshPersistentObject
argument_list|(
name|account
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"delete account -- account name: "
operator|+
name|accountname
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|container
operator|.
name|delete
argument_list|(
name|account
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error occured on persisting changes -- rollback changes"
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not persist changes -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#storeFeed(org.apache.lucene.gdata.data.ServerBaseFeed,      *      java.lang.String)      */
DECL|method|storeFeed
specifier|public
name|void
name|storeFeed
parameter_list|(
name|ServerBaseFeed
name|feed
parameter_list|,
name|String
name|accountname
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|feed
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not store feed -- is null"
argument_list|)
throw|;
if|if
condition|(
name|feed
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not store feed -- id is null"
argument_list|)
throw|;
if|if
condition|(
name|feed
operator|.
name|getServiceType
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not store feed -- service type is null"
argument_list|)
throw|;
if|if
condition|(
name|accountname
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Account name is null"
argument_list|)
throw|;
name|Query
name|query
init|=
name|this
operator|.
name|container
operator|.
name|query
argument_list|()
decl_stmt|;
name|query
operator|.
name|constrain
argument_list|(
name|ServerBaseFeed
operator|.
name|class
argument_list|)
expr_stmt|;
name|query
operator|.
name|descend
argument_list|(
literal|"feed"
argument_list|)
operator|.
name|descend
argument_list|(
literal|"id"
argument_list|)
operator|.
name|constrain
argument_list|(
name|feed
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|equal
argument_list|()
expr_stmt|;
name|ObjectSet
name|set
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
name|set
operator|.
name|hasNext
argument_list|()
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"feed with feedID "
operator|+
name|feed
operator|.
name|getId
argument_list|()
operator|+
literal|" is already stored"
argument_list|)
throw|;
name|GDataAccount
name|account
init|=
name|getAccount
argument_list|(
name|accountname
argument_list|)
decl_stmt|;
name|refreshPersistentObject
argument_list|(
name|account
argument_list|)
expr_stmt|;
name|feed
operator|.
name|setAccount
argument_list|(
name|account
argument_list|)
expr_stmt|;
comment|/*          * service config not required in db4o storage.          * Entries/Feeds don't have to be build from xml          */
name|feed
operator|.
name|setServiceConfig
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|container
operator|.
name|set
argument_list|(
name|feed
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error occured on persisting changes -- rollback changes"
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not persist changes -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#deleteFeed(java.lang.String)      */
DECL|method|deleteFeed
specifier|public
name|void
name|deleteFeed
parameter_list|(
name|String
name|feedId
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|feedId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"can not delete feed -- feed id is null"
argument_list|)
throw|;
name|Query
name|query
init|=
name|this
operator|.
name|container
operator|.
name|query
argument_list|()
decl_stmt|;
name|query
operator|.
name|constrain
argument_list|(
name|ServerBaseFeed
operator|.
name|class
argument_list|)
expr_stmt|;
name|query
operator|.
name|descend
argument_list|(
literal|"feed"
argument_list|)
operator|.
name|descend
argument_list|(
literal|"id"
argument_list|)
operator|.
name|constrain
argument_list|(
name|feedId
argument_list|)
operator|.
name|equal
argument_list|()
expr_stmt|;
name|ObjectSet
name|set
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
name|set
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Feed query returned not a unique result"
argument_list|)
throw|;
if|if
condition|(
name|set
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"no feed with feedID: "
operator|+
name|feedId
operator|+
literal|" stored -- query returned no result"
argument_list|)
throw|;
name|ServerBaseFeed
name|feed
init|=
operator|(
name|ServerBaseFeed
operator|)
name|set
operator|.
name|next
argument_list|()
decl_stmt|;
name|refreshPersistentObject
argument_list|(
name|feed
argument_list|)
expr_stmt|;
name|ObjectSet
name|entrySet
init|=
name|getEnriesForFeedID
argument_list|(
name|feed
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|this
operator|.
name|container
operator|.
name|delete
argument_list|(
name|feed
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|.
name|delete
argument_list|(
name|feed
operator|.
name|getFeed
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|entrySet
control|)
block|{
name|refreshPersistentObject
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|.
name|delete
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|container
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error occured on persisting changes -- rollback changes"
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not persist changes -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#updateFeed(org.apache.lucene.gdata.data.ServerBaseFeed,      *      java.lang.String)      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|updateFeed
specifier|public
name|void
name|updateFeed
parameter_list|(
name|ServerBaseFeed
name|feed
parameter_list|,
name|String
name|accountname
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|feed
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not update feed -- is null"
argument_list|)
throw|;
if|if
condition|(
name|feed
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not update feed -- id is null"
argument_list|)
throw|;
if|if
condition|(
name|feed
operator|.
name|getServiceType
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not update feed -- service type is null"
argument_list|)
throw|;
if|if
condition|(
name|accountname
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Account name is null"
argument_list|)
throw|;
name|GDataAccount
name|account
init|=
name|getAccount
argument_list|(
name|accountname
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|this
operator|.
name|container
operator|.
name|query
argument_list|()
decl_stmt|;
name|query
operator|.
name|constrain
argument_list|(
name|ServerBaseFeed
operator|.
name|class
argument_list|)
expr_stmt|;
name|query
operator|.
name|descend
argument_list|(
literal|"feed"
argument_list|)
operator|.
name|descend
argument_list|(
literal|"id"
argument_list|)
operator|.
name|constrain
argument_list|(
name|feed
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectSet
argument_list|<
name|ServerBaseFeed
argument_list|>
name|set
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
name|set
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Query for feed id "
operator|+
name|feed
operator|.
name|getId
argument_list|()
operator|+
literal|" returns more than one result"
argument_list|)
throw|;
if|if
condition|(
name|set
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"can not find feed for given feed id -- "
operator|+
name|feed
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
name|ServerBaseFeed
name|result
init|=
name|set
operator|.
name|next
argument_list|()
decl_stmt|;
name|refreshPersistentObject
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|BaseFeed
name|oldFeed
init|=
name|result
operator|.
name|getFeed
argument_list|()
decl_stmt|;
name|result
operator|.
name|setAccount
argument_list|(
name|account
argument_list|)
expr_stmt|;
name|result
operator|.
name|setFeed
argument_list|(
name|feed
operator|.
name|getFeed
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|container
operator|.
name|delete
argument_list|(
name|oldFeed
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|.
name|set
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error occurred on persisting changes -- rollback changes"
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|.
name|rollback
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not persist changes -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#getServiceForFeed(java.lang.String)      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getServiceForFeed
specifier|public
name|String
name|getServiceForFeed
parameter_list|(
specifier|final
name|String
name|feedId
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|feedId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"can not get Service for feed -- feed id is null"
argument_list|)
throw|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"Retrieving Service for feed -- feed id: "
operator|+
name|feedId
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|this
operator|.
name|container
operator|.
name|query
argument_list|()
decl_stmt|;
name|query
operator|.
name|constrain
argument_list|(
name|ServerBaseFeed
operator|.
name|class
argument_list|)
expr_stmt|;
name|query
operator|.
name|descend
argument_list|(
literal|"feed"
argument_list|)
operator|.
name|descend
argument_list|(
literal|"id"
argument_list|)
operator|.
name|constrain
argument_list|(
name|feedId
argument_list|)
expr_stmt|;
name|ObjectSet
argument_list|<
name|ServerBaseFeed
argument_list|>
name|feed
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
name|feed
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Query for feed id "
operator|+
name|feedId
operator|+
literal|" returns more than one result"
argument_list|)
throw|;
if|if
condition|(
name|feed
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"can not find feed for given feed id -- "
operator|+
name|feedId
argument_list|)
throw|;
name|ServerBaseFeed
name|result
init|=
name|feed
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"Retrieved Service for feed -- serviceType: "
operator|+
name|result
operator|.
name|getServiceType
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|getServiceType
argument_list|()
return|;
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#getAccount(java.lang.String)      */
DECL|method|getAccount
specifier|public
name|GDataAccount
name|getAccount
parameter_list|(
name|String
name|accountName
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|accountName
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not get account -- account name is null"
argument_list|)
throw|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"Retrieving account for account name: "
operator|+
name|accountName
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|this
operator|.
name|container
operator|.
name|query
argument_list|()
decl_stmt|;
name|query
operator|.
name|constrain
argument_list|(
name|GDataAccount
operator|.
name|class
argument_list|)
expr_stmt|;
name|query
operator|.
name|descend
argument_list|(
literal|"name"
argument_list|)
operator|.
name|constrain
argument_list|(
name|accountName
argument_list|)
operator|.
name|equal
argument_list|()
expr_stmt|;
name|ObjectSet
name|set
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
name|set
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Account query returned not a unique result -- account name: "
operator|+
name|accountName
argument_list|)
throw|;
if|if
condition|(
operator|!
name|set
operator|.
name|hasNext
argument_list|()
condition|)
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|(
literal|"No such account stored -- query returned not result for account name: "
operator|+
name|accountName
argument_list|)
throw|;
return|return
operator|(
name|GDataAccount
operator|)
name|set
operator|.
name|next
argument_list|()
return|;
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#close()      */
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|releaseAllSemaphore
argument_list|()
expr_stmt|;
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#getAccountNameForFeedId(java.lang.String)      */
DECL|method|getAccountNameForFeedId
specifier|public
name|String
name|getAccountNameForFeedId
parameter_list|(
name|String
name|feedId
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|feedId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"feed id is null"
argument_list|)
throw|;
name|GDataAccount
name|account
init|=
name|getServerBaseFeed
argument_list|(
name|feedId
argument_list|)
operator|.
name|getAccount
argument_list|()
decl_stmt|;
if|if
condition|(
name|account
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No account stored with feed -- feedID: "
operator|+
name|feedId
argument_list|)
throw|;
return|return
name|account
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#getEntryLastModified(java.lang.String, java.lang.String)      */
DECL|method|getEntryLastModified
specifier|public
name|Long
name|getEntryLastModified
parameter_list|(
name|String
name|entryId
parameter_list|,
specifier|final
name|String
name|feedId
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|entryId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Entry ID is null"
argument_list|)
throw|;
return|return
operator|new
name|Long
argument_list|(
name|getInternalEntry
argument_list|(
name|entryId
argument_list|)
operator|.
name|getUpdateTime
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getServerBaseFeed
specifier|private
name|ServerBaseFeed
name|getServerBaseFeed
parameter_list|(
name|String
name|feedId
parameter_list|)
throws|throws
name|StorageException
block|{
name|Query
name|query
init|=
name|this
operator|.
name|container
operator|.
name|query
argument_list|()
decl_stmt|;
name|query
operator|.
name|constrain
argument_list|(
name|ServerBaseFeed
operator|.
name|class
argument_list|)
expr_stmt|;
name|query
operator|.
name|descend
argument_list|(
literal|"feed"
argument_list|)
operator|.
name|descend
argument_list|(
literal|"id"
argument_list|)
operator|.
name|constrain
argument_list|(
name|feedId
argument_list|)
expr_stmt|;
name|ObjectSet
argument_list|<
name|ServerBaseFeed
argument_list|>
name|feed
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
if|if
condition|(
name|feed
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Query for feed id "
operator|+
name|feedId
operator|+
literal|" returns more than one result"
argument_list|)
throw|;
if|if
condition|(
name|feed
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"can not find feed for given feed id -- "
operator|+
name|feedId
argument_list|)
throw|;
return|return
name|feed
operator|.
name|next
argument_list|()
return|;
block|}
comment|/*      * !Caution! -- could instantiate a lot of objects if used with certain classes!!      * Refresh a persisted object with a depth of 100      *       */
DECL|method|refreshPersistentObject
specifier|private
name|void
name|refreshPersistentObject
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|this
operator|.
name|container
operator|.
name|ext
argument_list|()
operator|.
name|refresh
argument_list|(
name|o
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#getFeedLastModified(java.lang.String)      */
DECL|method|getFeedLastModified
specifier|public
name|Long
name|getFeedLastModified
parameter_list|(
name|String
name|feedId
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|feedId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"can not get last modified -- id is null"
argument_list|)
throw|;
name|ServerBaseFeed
name|feed
init|=
name|getServerBaseFeed
argument_list|(
name|feedId
argument_list|)
decl_stmt|;
return|return
operator|new
name|Long
argument_list|(
name|feed
operator|.
name|getUpdated
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
DECL|method|clearDynamicElements
specifier|private
name|BaseEntry
name|clearDynamicElements
parameter_list|(
name|BaseEntry
name|entry
parameter_list|)
block|{
name|this
operator|.
name|container
operator|.
name|ext
argument_list|()
operator|.
name|refresh
argument_list|(
name|entry
operator|.
name|getLinks
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
DECL|method|clearDynamicElements
specifier|private
name|BaseFeed
name|clearDynamicElements
parameter_list|(
name|BaseFeed
name|feed
parameter_list|)
block|{
name|this
operator|.
name|container
operator|.
name|ext
argument_list|()
operator|.
name|refresh
argument_list|(
name|feed
operator|.
name|getLinks
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|feed
operator|.
name|getEntries
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|feed
return|;
block|}
DECL|method|getContainer
name|ObjectContainer
name|getContainer
parameter_list|()
block|{
return|return
name|this
operator|.
name|container
return|;
block|}
DECL|class|DB4oEntry
specifier|static
class|class
name|DB4oEntry
block|{
DECL|field|entry
specifier|private
name|BaseEntry
name|entry
decl_stmt|;
DECL|field|version
specifier|private
name|int
name|version
decl_stmt|;
DECL|field|feedId
specifier|private
name|String
name|feedId
decl_stmt|;
DECL|field|updateTime
specifier|private
name|long
name|updateTime
decl_stmt|;
comment|/**          * @return Returns the entry.          */
DECL|method|getEntry
specifier|protected
name|BaseEntry
name|getEntry
parameter_list|()
block|{
return|return
name|this
operator|.
name|entry
return|;
block|}
comment|/**          * @param entry          *            The entry to set.          */
DECL|method|setEntry
specifier|protected
name|void
name|setEntry
parameter_list|(
name|BaseEntry
name|entry
parameter_list|)
block|{
name|this
operator|.
name|entry
operator|=
name|entry
expr_stmt|;
block|}
comment|/**          * @return Returns the feed.          */
DECL|method|getFeedId
specifier|protected
name|String
name|getFeedId
parameter_list|()
block|{
return|return
name|this
operator|.
name|feedId
return|;
block|}
comment|/**          * @param feed          *            The feed to set.          */
DECL|method|setFeedId
specifier|protected
name|void
name|setFeedId
parameter_list|(
name|String
name|feed
parameter_list|)
block|{
name|this
operator|.
name|feedId
operator|=
name|feed
expr_stmt|;
block|}
comment|/**          * @return Returns the updateTime.          */
DECL|method|getUpdateTime
specifier|protected
name|long
name|getUpdateTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|updateTime
return|;
block|}
comment|/**          * @param updateTime          *            The updateTime to set.          */
DECL|method|setUpdateTime
specifier|protected
name|void
name|setUpdateTime
parameter_list|(
name|long
name|updateTime
parameter_list|)
block|{
name|this
operator|.
name|updateTime
operator|=
name|updateTime
expr_stmt|;
block|}
comment|/**          * @return Returns the version.          */
DECL|method|getVersion
specifier|public
name|int
name|getVersion
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
comment|/**          * @param version The version to set.          */
DECL|method|setVersion
specifier|public
name|void
name|setVersion
parameter_list|(
name|int
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|entry
operator|!=
literal|null
condition|)
name|this
operator|.
name|entry
operator|.
name|setVersionId
argument_list|(
literal|""
operator|+
name|this
operator|.
name|version
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
