begin_unit
begin_package
DECL|package|org.apache.lucene.gdata.storage.lucenestorage
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
package|;
end_package
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|data
operator|.
name|GDataAccount
import|;
end_import
begin_comment
comment|/**  * Wrapps a User Object.  * The wrapper provides also a Lucene repesentation of the user;  * User Objects will not be Buffered in the lucene storage component. Each User will be written imidialtely.  * @author Simon Willnauer  *  */
end_comment
begin_class
DECL|class|StorageAccountWrapper
specifier|public
class|class
name|StorageAccountWrapper
implements|implements
name|StorageWrapper
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StorageAccountWrapper
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Lucene field for the username      */
DECL|field|FIELD_ACCOUNTNAME
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_ACCOUNTNAME
init|=
literal|"accountName"
decl_stmt|;
comment|/**      * Lucene field for the password      */
DECL|field|FIELD_PASSWORD
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_PASSWORD
init|=
literal|"passwd"
decl_stmt|;
comment|/**      * Lucene field for the author name      */
DECL|field|FIELD_AUTHORNAME
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_AUTHORNAME
init|=
literal|"author"
decl_stmt|;
comment|/**      * Lucene field for the author mail address      */
DECL|field|FIELD_AUTHORMAIL
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_AUTHORMAIL
init|=
literal|"authorMail"
decl_stmt|;
comment|/**      * Lucene field for the author link      */
DECL|field|FIELD_AUTHORHREF
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_AUTHORHREF
init|=
literal|"authorHref"
decl_stmt|;
comment|/**      * Lucene field fot the userroles      */
DECL|field|FIELD_ROLES
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_ROLES
init|=
literal|"userroles"
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|GDataAccount
name|user
decl_stmt|;
comment|/**      * @param user - the user to be wrapped      */
DECL|method|StorageAccountWrapper
specifier|public
name|StorageAccountWrapper
parameter_list|(
specifier|final
name|GDataAccount
name|user
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"user must not be null"
argument_list|)
throw|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.lucenestorage.StorageWrapper#getLuceneDocument()      */
DECL|method|getLuceneDocument
specifier|public
name|Document
name|getLuceneDocument
parameter_list|()
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|FIELD_ACCOUNTNAME
argument_list|,
name|this
operator|.
name|user
operator|.
name|getName
argument_list|()
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|UN_TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|FIELD_PASSWORD
argument_list|,
name|this
operator|.
name|user
operator|.
name|getPassword
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|this
operator|.
name|user
operator|.
name|getPassword
argument_list|()
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|FIELD_AUTHORNAME
argument_list|,
name|this
operator|.
name|user
operator|.
name|getAuthorname
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|this
operator|.
name|user
operator|.
name|getAuthorname
argument_list|()
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|FIELD_AUTHORMAIL
argument_list|,
name|this
operator|.
name|user
operator|.
name|getAuthorMail
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|this
operator|.
name|user
operator|.
name|getAuthorMail
argument_list|()
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|FIELD_AUTHORHREF
argument_list|,
name|this
operator|.
name|user
operator|.
name|getAuthorLink
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|this
operator|.
name|user
operator|.
name|getAuthorLink
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|FIELD_ROLES
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|this
operator|.
name|user
operator|.
name|getRolesAsInt
argument_list|()
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
comment|/**      * @param doc - a lucene document representation of an user      * @return - the user to build from the document. or<code>null</code> if the document is<code>null</code>      */
DECL|method|buildEntity
specifier|public
specifier|static
name|GDataAccount
name|buildEntity
parameter_list|(
specifier|final
name|Document
name|doc
parameter_list|)
block|{
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|GDataAccount
name|user
init|=
operator|new
name|GDataAccount
argument_list|()
decl_stmt|;
name|user
operator|.
name|setName
argument_list|(
name|doc
operator|.
name|get
argument_list|(
name|FIELD_ACCOUNTNAME
argument_list|)
argument_list|)
expr_stmt|;
name|user
operator|.
name|setPassword
argument_list|(
name|doc
operator|.
name|get
argument_list|(
name|FIELD_PASSWORD
argument_list|)
argument_list|)
expr_stmt|;
name|user
operator|.
name|setAuthorname
argument_list|(
name|doc
operator|.
name|get
argument_list|(
name|FIELD_AUTHORNAME
argument_list|)
argument_list|)
expr_stmt|;
name|user
operator|.
name|setAuthorMail
argument_list|(
name|doc
operator|.
name|get
argument_list|(
name|FIELD_AUTHORMAIL
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|user
operator|.
name|setRolesAsInt
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|doc
operator|.
name|get
argument_list|(
name|FIELD_ROLES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't parse userroles: "
operator|+
name|user
operator|.
name|getName
argument_list|()
operator|+
literal|" throws NumberFormatException. -- skipping --"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|doc
operator|.
name|get
argument_list|(
name|FIELD_AUTHORHREF
argument_list|)
operator|!=
literal|null
condition|)
name|user
operator|.
name|setAuthorLink
argument_list|(
operator|new
name|URL
argument_list|(
name|doc
operator|.
name|get
argument_list|(
name|FIELD_AUTHORHREF
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"SPECIFIED URL for user: "
operator|+
name|user
operator|.
name|getName
argument_list|()
operator|+
literal|" throws MalformedURLException. -- skipping --"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|user
return|;
block|}
comment|/**      * @return - the wrapped user      */
DECL|method|getUser
specifier|public
name|GDataAccount
name|getUser
parameter_list|()
block|{
return|return
name|this
operator|.
name|user
return|;
block|}
block|}
end_class
end_unit
