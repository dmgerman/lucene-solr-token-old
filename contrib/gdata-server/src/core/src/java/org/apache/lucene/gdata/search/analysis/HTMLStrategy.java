begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.search.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|search
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpressionException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|data
operator|.
name|ServerBaseEntry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|search
operator|.
name|config
operator|.
name|IndexSchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|XNIException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|parser
operator|.
name|XMLDocumentFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|parser
operator|.
name|XMLInputSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|parser
operator|.
name|XMLParserConfiguration
import|;
end_import
begin_import
import|import
name|org
operator|.
name|cyberneko
operator|.
name|html
operator|.
name|HTMLConfiguration
import|;
end_import
begin_import
import|import
name|org
operator|.
name|cyberneko
operator|.
name|html
operator|.
name|filters
operator|.
name|ElementRemover
import|;
end_import
begin_import
import|import
name|org
operator|.
name|cyberneko
operator|.
name|html
operator|.
name|filters
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import
begin_comment
comment|/**  * This ContentStrategy applies the path to the Indexable and retrieves the  * plain string content from the returning node. All of the nodes text content  * will cleaned from any html tags.  *   *  *   */
end_comment
begin_class
DECL|class|HTMLStrategy
specifier|public
class|class
name|HTMLStrategy
extends|extends
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|search
operator|.
name|analysis
operator|.
name|ContentStrategy
block|{
DECL|field|REMOVE_SCRIPT
specifier|private
specifier|static
specifier|final
name|String
name|REMOVE_SCRIPT
init|=
literal|"script"
decl_stmt|;
DECL|field|CHAR_ENCODING
specifier|private
specifier|static
specifier|final
name|String
name|CHAR_ENCODING
init|=
literal|"UTF-8"
decl_stmt|;
DECL|method|HTMLStrategy
specifier|protected
name|HTMLStrategy
parameter_list|(
name|IndexSchemaField
name|fieldConfiguration
parameter_list|)
block|{
name|super
argument_list|(
name|fieldConfiguration
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see org.apache.lucene.gdata.search.analysis.ContentStrategy#processIndexable(org.apache.lucene.gdata.search.analysis.Indexable)      */
annotation|@
name|Override
DECL|method|processIndexable
specifier|public
name|void
name|processIndexable
parameter_list|(
name|Indexable
argument_list|<
name|?
extends|extends
name|Node
argument_list|,
name|?
extends|extends
name|ServerBaseEntry
argument_list|>
name|indexable
parameter_list|)
throws|throws
name|NotIndexableException
block|{
name|String
name|path
init|=
name|this
operator|.
name|config
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
literal|null
decl_stmt|;
try|try
block|{
name|node
operator|=
name|indexable
operator|.
name|applyPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|NotIndexableException
argument_list|(
literal|"Can not apply path -- "
operator|+
name|path
argument_list|)
throw|;
block|}
if|if
condition|(
name|node
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NotIndexableException
argument_list|(
literal|"Could not retrieve content for schema field: "
operator|+
name|this
operator|.
name|config
argument_list|)
throw|;
name|StringReader
name|contentReader
init|=
operator|new
name|StringReader
argument_list|(
name|node
operator|.
name|getTextContent
argument_list|()
argument_list|)
decl_stmt|;
comment|/*          * remove all elements and script parts          */
name|ElementRemover
name|remover
init|=
operator|new
name|ElementRemover
argument_list|()
decl_stmt|;
name|remover
operator|.
name|removeElement
argument_list|(
name|REMOVE_SCRIPT
argument_list|)
expr_stmt|;
name|StringWriter
name|contentWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|Writer
name|writer
init|=
operator|new
name|Writer
argument_list|(
name|contentWriter
argument_list|,
name|CHAR_ENCODING
argument_list|)
decl_stmt|;
name|XMLDocumentFilter
index|[]
name|filters
init|=
block|{
name|remover
block|,
name|writer
block|, }
decl_stmt|;
name|XMLParserConfiguration
name|parser
init|=
operator|new
name|HTMLConfiguration
argument_list|()
decl_stmt|;
name|parser
operator|.
name|setProperty
argument_list|(
literal|"http://cyberneko.org/html/properties/filters"
argument_list|,
name|filters
argument_list|)
expr_stmt|;
name|XMLInputSource
name|source
init|=
operator|new
name|XMLInputSource
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|contentReader
argument_list|,
name|CHAR_ENCODING
argument_list|)
decl_stmt|;
try|try
block|{
name|parser
operator|.
name|parse
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XNIException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NotIndexableException
argument_list|(
literal|"Can not parse html -- "
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NotIndexableException
argument_list|(
literal|"Can not parse html -- "
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|content
operator|=
name|contentWriter
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
