begin_unit
begin_comment
comment|/**   * Copyright 2004 The Apache Software Foundation   *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   *     http://www.apache.org/licenses/LICENSE-2.0   *   * Unless required by applicable law or agreed to in writing, software   * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.search.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|search
operator|.
name|index
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_comment
comment|/**  *  *  */
end_comment
begin_class
DECL|class|TestIndexLogReader
specifier|public
class|class
name|TestIndexLogReader
extends|extends
name|TestCase
block|{
DECL|field|logFile
name|File
name|logFile
decl_stmt|;
DECL|field|actions
name|Map
argument_list|<
name|String
argument_list|,
name|IndexAction
argument_list|>
name|actions
decl_stmt|;
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|logFile
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|,
literal|"log"
argument_list|)
expr_stmt|;
name|this
operator|.
name|logFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|this
operator|.
name|logFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|this
operator|.
name|actions
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|IndexAction
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|writeLog
specifier|private
name|IndexLogWriter
name|writeLog
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|actions
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|IndexAction
argument_list|>
argument_list|()
expr_stmt|;
name|IndexLogWriter
name|writer
init|=
operator|new
name|IndexLogWriter
argument_list|(
name|this
operator|.
name|logFile
argument_list|)
decl_stmt|;
name|boolean
name|totwice
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|IndexAction
name|a
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|3
operator|==
literal|0
condition|)
name|a
operator|=
name|IndexAction
operator|.
name|INSERT
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|3
operator|==
literal|1
condition|)
name|a
operator|=
name|IndexAction
operator|.
name|UPDATE
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|3
operator|==
literal|2
condition|)
name|a
operator|=
name|IndexAction
operator|.
name|DELETE
expr_stmt|;
name|this
operator|.
name|actions
operator|.
name|put
argument_list|(
literal|""
operator|+
name|i
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAction
argument_list|(
literal|""
operator|+
name|i
argument_list|,
name|a
argument_list|)
expr_stmt|;
comment|/*              * double action              */
if|if
condition|(
name|i
operator|==
literal|9
operator|&&
name|totwice
condition|)
block|{
name|i
operator|=
literal|0
expr_stmt|;
name|totwice
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|writer
return|;
block|}
DECL|method|tearDown
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|this
operator|.
name|logFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
comment|/*      * Test method for 'org.apache.lucene.gdata.search.index.IndexLogReader.readIndexLog(File, Map<String, IndexAction>)'      */
DECL|method|testReadIndexLog
specifier|public
name|void
name|testReadIndexLog
parameter_list|()
throws|throws
name|SAXException
throws|,
name|IOException
block|{
name|writeLog
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|IndexAction
argument_list|>
name|readActionMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|IndexAction
argument_list|>
argument_list|()
decl_stmt|;
name|IndexLogReader
operator|.
name|readIndexLog
argument_list|(
name|this
operator|.
name|logFile
argument_list|,
name|readActionMap
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|keySet
init|=
name|this
operator|.
name|actions
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|keySet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|string
range|:
name|keySet
control|)
block|{
name|assertTrue
argument_list|(
name|readActionMap
operator|.
name|get
argument_list|(
name|string
argument_list|)
operator|.
name|equals
argument_list|(
name|actions
operator|.
name|get
argument_list|(
name|string
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * Test method for 'org.apache.lucene.gdata.search.index.IndexLogReader.readIndexLog(File, Map<String, IndexAction>)'      */
DECL|method|testReadIndexLogNoInputMap
specifier|public
name|void
name|testReadIndexLogNoInputMap
parameter_list|()
throws|throws
name|SAXException
throws|,
name|IOException
block|{
name|writeLog
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|IndexAction
argument_list|>
name|readActionMap
init|=
name|IndexLogReader
operator|.
name|readIndexLog
argument_list|(
name|this
operator|.
name|logFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|keySet
init|=
name|this
operator|.
name|actions
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|keySet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|string
range|:
name|keySet
control|)
block|{
name|assertTrue
argument_list|(
name|readActionMap
operator|.
name|get
argument_list|(
name|string
argument_list|)
operator|.
name|equals
argument_list|(
name|actions
operator|.
name|get
argument_list|(
name|string
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * Test method for 'org.apache.lucene.gdata.search.index.IndexLogReader.readIndexLog(File, Map<String, IndexAction>)'      */
DECL|method|testReadIndexLogFixLogFile
specifier|public
name|void
name|testReadIndexLogFixLogFile
parameter_list|()
throws|throws
name|SAXException
throws|,
name|IOException
block|{
name|writeLog
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|IndexAction
argument_list|>
name|readActionMap
init|=
name|IndexLogReader
operator|.
name|readIndexLog
argument_list|(
name|this
operator|.
name|logFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|keySet
init|=
name|this
operator|.
name|actions
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|keySet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|string
range|:
name|keySet
control|)
block|{
name|assertTrue
argument_list|(
name|readActionMap
operator|.
name|get
argument_list|(
name|string
argument_list|)
operator|.
name|equals
argument_list|(
name|actions
operator|.
name|get
argument_list|(
name|string
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testWriterClosed
specifier|public
name|void
name|testWriterClosed
parameter_list|()
throws|throws
name|SAXException
throws|,
name|IOException
block|{
name|IndexLogWriter
name|writer
init|=
name|writeLog
argument_list|()
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|writer
operator|.
name|writeAction
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"writer is closed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{                    }
try|try
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"writer is closed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{                    }
block|}
block|}
end_class
end_unit
