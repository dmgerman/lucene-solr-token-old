begin_unit
begin_comment
comment|/**   * Copyright 2004 The Apache Software Foundation   *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   *     http://www.apache.org/licenses/LICENSE-2.0   *   * Unless required by applicable law or agreed to in writing, software   * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|search
operator|.
name|StandardGdataSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|search
operator|.
name|index
operator|.
name|IndexDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|utils
operator|.
name|ReferenceCounter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Hits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_comment
comment|/**  *  *  */
end_comment
begin_class
DECL|class|TestStandardGdataSearcher
specifier|public
class|class
name|TestStandardGdataSearcher
extends|extends
name|TestCase
block|{
DECL|field|dir
specifier|private
name|Directory
name|dir
decl_stmt|;
DECL|field|amountDocuments
specifier|private
name|int
name|amountDocuments
init|=
literal|30
decl_stmt|;
DECL|field|FIELDNAME
specifier|private
specifier|static
specifier|final
name|String
name|FIELDNAME
init|=
literal|"fname"
decl_stmt|;
DECL|field|FIELDVALUE
specifier|private
specifier|static
specifier|final
name|String
name|FIELDVALUE
init|=
literal|"foobar"
decl_stmt|;
DECL|field|searcher
specifier|private
name|ReferenceCounter
argument_list|<
name|IndexSearcher
argument_list|>
name|searcher
decl_stmt|;
DECL|field|gdataSearcher
specifier|private
name|StandardGdataSearcher
name|gdataSearcher
decl_stmt|;
DECL|field|idlist
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|idlist
decl_stmt|;
DECL|field|feedId
specifier|private
name|String
name|feedId
init|=
literal|"myFeed"
decl_stmt|;
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|dir
operator|=
operator|new
name|RAMDirectory
argument_list|()
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|this
operator|.
name|idlist
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|amountDocuments
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|IndexDocument
operator|.
name|FIELD_FEED_ID
argument_list|,
name|this
operator|.
name|feedId
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|UN_TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|IndexDocument
operator|.
name|FIELD_ENTRY_ID
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|UN_TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|FIELDNAME
argument_list|,
name|FIELDVALUE
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|UN_TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|this
operator|.
name|idlist
operator|.
name|add
argument_list|(
literal|""
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|searcher
operator|=
operator|new
name|TestRefcounter
argument_list|(
operator|new
name|IndexSearcher
argument_list|(
name|this
operator|.
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|searcher
operator|.
name|increamentReference
argument_list|()
expr_stmt|;
name|this
operator|.
name|gdataSearcher
operator|=
operator|new
name|StandardGdataSearcher
argument_list|(
name|this
operator|.
name|searcher
argument_list|)
expr_stmt|;
block|}
DECL|method|tearDown
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|searcher
operator|.
name|decrementRef
argument_list|()
expr_stmt|;
name|StandardGdataSearcher
operator|.
name|flushFilterCache
argument_list|()
expr_stmt|;
block|}
comment|/*      * Test method for      * 'org.apache.lucene.gdata.search.StandardGdataSearcher.StandardGdataSearcher(ReferenceCounter<IndexSearcher>)'      */
DECL|method|testStandardGdataSearcher
specifier|public
name|void
name|testStandardGdataSearcher
parameter_list|()
block|{
try|try
block|{
operator|new
name|StandardGdataSearcher
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"searcher ref is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{          }
operator|new
name|StandardGdataSearcher
argument_list|(
name|this
operator|.
name|searcher
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for      * 'org.apache.lucene.gdata.search.StandardGdataSearcher.search(Query, int,      * int)'      */
DECL|method|testSearch
specifier|public
name|void
name|testSearch
parameter_list|()
throws|throws
name|IOException
block|{
name|Query
name|q
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELDNAME
argument_list|,
name|FIELDVALUE
argument_list|)
argument_list|)
decl_stmt|;
name|Hits
name|hits
init|=
name|this
operator|.
name|searcher
operator|.
name|get
argument_list|()
operator|.
name|search
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|amountDocuments
argument_list|,
name|hits
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|returnValue
init|=
name|this
operator|.
name|gdataSearcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
name|this
operator|.
name|amountDocuments
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|feedId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|amountDocuments
argument_list|,
name|returnValue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|returnValue
operator|.
name|containsAll
argument_list|(
name|this
operator|.
name|idlist
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|gdataSearcher
operator|.
name|search
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|feedId
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"searcher is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{         }
try|try
block|{
name|this
operator|.
name|gdataSearcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|-
literal|1
argument_list|,
literal|5
argument_list|,
name|this
operator|.
name|feedId
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"hitcount is less than 0"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{}
try|try
block|{
name|this
operator|.
name|gdataSearcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|4
argument_list|,
operator|-
literal|1
argument_list|,
name|this
operator|.
name|feedId
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"offset is less than 0"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{}
try|try
block|{
name|this
operator|.
name|gdataSearcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"feed id is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{}
name|returnValue
operator|=
name|this
operator|.
name|gdataSearcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
name|this
operator|.
name|amountDocuments
argument_list|,
literal|0
argument_list|,
literal|"SomeOtherFeed"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|returnValue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for      * 'org.apache.lucene.gdata.search.StandardGdataSearcher.collectHits(Hits,      * int, int)'      */
DECL|method|testCollectHits
specifier|public
name|void
name|testCollectHits
parameter_list|()
throws|throws
name|IOException
block|{
name|Query
name|q
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELDNAME
argument_list|,
name|FIELDVALUE
argument_list|)
argument_list|)
decl_stmt|;
name|Hits
name|hits
init|=
name|this
operator|.
name|searcher
operator|.
name|get
argument_list|()
operator|.
name|search
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|amountDocuments
argument_list|,
name|hits
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|returnValue
init|=
name|this
operator|.
name|gdataSearcher
operator|.
name|collectHits
argument_list|(
name|hits
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hits
operator|.
name|doc
argument_list|(
literal|0
argument_list|)
operator|.
name|getField
argument_list|(
name|IndexDocument
operator|.
name|FIELD_ENTRY_ID
argument_list|)
operator|.
name|stringValue
argument_list|()
argument_list|,
name|returnValue
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|returnValue
operator|=
name|this
operator|.
name|gdataSearcher
operator|.
name|collectHits
argument_list|(
name|hits
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hits
operator|.
name|doc
argument_list|(
literal|0
argument_list|)
operator|.
name|getField
argument_list|(
name|IndexDocument
operator|.
name|FIELD_ENTRY_ID
argument_list|)
operator|.
name|stringValue
argument_list|()
argument_list|,
name|returnValue
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|returnValue
operator|=
name|this
operator|.
name|gdataSearcher
operator|.
name|collectHits
argument_list|(
name|hits
argument_list|,
literal|1
argument_list|,
name|this
operator|.
name|amountDocuments
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|returnValue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hits
operator|.
name|doc
argument_list|(
name|this
operator|.
name|amountDocuments
operator|-
literal|1
argument_list|)
operator|.
name|getField
argument_list|(
name|IndexDocument
operator|.
name|FIELD_ENTRY_ID
argument_list|)
operator|.
name|stringValue
argument_list|()
argument_list|,
name|returnValue
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|returnValue
operator|=
name|this
operator|.
name|gdataSearcher
operator|.
name|collectHits
argument_list|(
name|hits
argument_list|,
literal|10
argument_list|,
name|this
operator|.
name|amountDocuments
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|returnValue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hits
operator|.
name|doc
argument_list|(
name|this
operator|.
name|amountDocuments
operator|-
literal|1
argument_list|)
operator|.
name|getField
argument_list|(
name|IndexDocument
operator|.
name|FIELD_ENTRY_ID
argument_list|)
operator|.
name|stringValue
argument_list|()
argument_list|,
name|returnValue
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|returnValue
operator|=
name|this
operator|.
name|gdataSearcher
operator|.
name|collectHits
argument_list|(
name|hits
argument_list|,
literal|50
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|this
operator|.
name|amountDocuments
argument_list|,
name|returnValue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|returnValue
operator|.
name|containsAll
argument_list|(
name|this
operator|.
name|idlist
argument_list|)
argument_list|)
expr_stmt|;
name|returnValue
operator|=
name|this
operator|.
name|gdataSearcher
operator|.
name|collectHits
argument_list|(
name|hits
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|returnValue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hits
operator|.
name|doc
argument_list|(
literal|4
argument_list|)
operator|.
name|getField
argument_list|(
name|IndexDocument
operator|.
name|FIELD_ENTRY_ID
argument_list|)
operator|.
name|stringValue
argument_list|()
argument_list|,
name|returnValue
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|returnValue
operator|=
name|this
operator|.
name|gdataSearcher
operator|.
name|collectHits
argument_list|(
name|hits
argument_list|,
literal|50
argument_list|,
name|this
operator|.
name|amountDocuments
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|returnValue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hits
operator|.
name|doc
argument_list|(
name|this
operator|.
name|amountDocuments
operator|-
literal|1
argument_list|)
operator|.
name|getField
argument_list|(
name|IndexDocument
operator|.
name|FIELD_ENTRY_ID
argument_list|)
operator|.
name|stringValue
argument_list|()
argument_list|,
name|returnValue
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|returnValue
operator|=
name|this
operator|.
name|gdataSearcher
operator|.
name|collectHits
argument_list|(
name|hits
argument_list|,
literal|1
argument_list|,
name|this
operator|.
name|amountDocuments
operator|+
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|returnValue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for      * 'org.apache.lucene.gdata.search.StandardGdataSearcher.close()'      */
DECL|method|testClose
specifier|public
name|void
name|testClose
parameter_list|()
throws|throws
name|IOException
block|{
name|StandardGdataSearcher
name|s
init|=
operator|new
name|StandardGdataSearcher
argument_list|(
operator|new
name|TestRefcounter
argument_list|(
operator|new
name|IndexSearcher
argument_list|(
name|this
operator|.
name|dir
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|s
operator|.
name|search
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|feedId
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"searcher is closed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{         }
block|}
DECL|class|TestRefcounter
specifier|private
specifier|static
class|class
name|TestRefcounter
extends|extends
name|ReferenceCounter
argument_list|<
name|IndexSearcher
argument_list|>
block|{
DECL|method|TestRefcounter
specifier|public
name|TestRefcounter
parameter_list|(
name|IndexSearcher
name|resource
parameter_list|)
block|{
name|super
argument_list|(
name|resource
argument_list|)
expr_stmt|;
comment|// TODO Auto-generated constructor stub
block|}
annotation|@
name|Override
DECL|method|close
specifier|protected
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|resource
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO: handle exception
block|}
block|}
block|}
block|}
end_class
end_unit
