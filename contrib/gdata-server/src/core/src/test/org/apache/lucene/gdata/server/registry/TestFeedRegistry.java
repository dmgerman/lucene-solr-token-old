begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.server.registry
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
package|;
end_package
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|ServiceFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|servlet
operator|.
name|handler
operator|.
name|DefaultRequestHandlerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|servlet
operator|.
name|handler
operator|.
name|RequestHandlerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|StorageController
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
operator|.
name|StorageCoreController
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|ExtensionProfile
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|Feed
import|;
end_import
begin_comment
comment|/**  * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|TestFeedRegistry
specifier|public
class|class
name|TestFeedRegistry
extends|extends
name|TestCase
block|{
DECL|field|reg
specifier|private
name|GDataServerRegistry
name|reg
decl_stmt|;
DECL|field|configurator
specifier|private
name|ProvidedServiceConfig
name|configurator
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
name|this
operator|.
name|reg
operator|=
name|GDataServerRegistry
operator|.
name|getRegistry
argument_list|()
expr_stmt|;
name|this
operator|.
name|configurator
operator|=
operator|new
name|ProvidedServiceConfig
argument_list|()
expr_stmt|;
name|this
operator|.
name|configurator
operator|.
name|setEntryType
argument_list|(
name|Entry
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|configurator
operator|.
name|setFeedType
argument_list|(
name|Feed
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|configurator
operator|.
name|setExtensionProfile
argument_list|(
operator|new
name|ExtensionProfile
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see junit.framework.TestCase#tearDown()      */
annotation|@
name|Override
DECL|method|tearDown
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|reg
operator|.
name|flushRegistry
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test method for      * 'org.apache.lucene.gdata.server.registry.FeedRegistry.getRegistry()'      */
DECL|method|testGetRegistry
specifier|public
name|void
name|testGetRegistry
parameter_list|()
block|{
name|GDataServerRegistry
name|reg1
init|=
name|GDataServerRegistry
operator|.
name|getRegistry
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test singleton"
argument_list|,
name|this
operator|.
name|reg
argument_list|,
name|reg1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test method for      * 'org.apache.lucene.gdata.server.registry.FeedRegistry.registerFeed(FeedInstanceConfigurator)'      */
DECL|method|testRegisterService
specifier|public
name|void
name|testRegisterService
parameter_list|()
block|{
name|String
name|service
init|=
literal|"service"
decl_stmt|;
name|registerService
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Registered Configurator"
argument_list|,
name|this
operator|.
name|configurator
argument_list|,
name|this
operator|.
name|reg
operator|.
name|getProvidedService
argument_list|(
name|service
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"not registered Configurator"
argument_list|,
name|this
operator|.
name|reg
operator|.
name|getProvidedService
argument_list|(
literal|"something"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|reg
operator|.
name|getProvidedService
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
comment|/**      * Test method for      * 'org.apache.lucene.gdata.server.registry.FeedRegistry.getFeedConfigurator(String)'      */
DECL|method|testFlushRegistry
specifier|public
name|void
name|testFlushRegistry
parameter_list|()
block|{
name|String
name|service
init|=
literal|"service"
decl_stmt|;
name|registerService
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Registered Configurator"
argument_list|,
name|this
operator|.
name|configurator
argument_list|,
name|this
operator|.
name|reg
operator|.
name|getProvidedService
argument_list|(
name|service
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|reg
operator|.
name|flushRegistry
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
literal|"Registry flushed"
argument_list|,
name|this
operator|.
name|reg
operator|.
name|getProvidedService
argument_list|(
name|service
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      *       */
DECL|method|testIsFeedRegistered
specifier|public
name|void
name|testIsFeedRegistered
parameter_list|()
block|{
name|String
name|service
init|=
literal|"service"
decl_stmt|;
name|registerService
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Feed is registerd"
argument_list|,
name|this
operator|.
name|reg
operator|.
name|isServiceRegistered
argument_list|(
name|service
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"null Feed is not registerd"
argument_list|,
name|this
operator|.
name|reg
operator|.
name|isServiceRegistered
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Feed is not registerd"
argument_list|,
name|this
operator|.
name|reg
operator|.
name|isServiceRegistered
argument_list|(
literal|"something"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|registerService
specifier|private
name|void
name|registerService
parameter_list|(
name|String
name|servicename
parameter_list|)
block|{
name|this
operator|.
name|configurator
operator|.
name|setName
argument_list|(
name|servicename
argument_list|)
expr_stmt|;
name|this
operator|.
name|reg
operator|.
name|registerService
argument_list|(
name|this
operator|.
name|configurator
argument_list|)
expr_stmt|;
block|}
DECL|method|testRegisterComponent
specifier|public
name|void
name|testRegisterComponent
parameter_list|()
throws|throws
name|RegistryException
block|{
try|try
block|{
name|this
operator|.
name|reg
operator|.
name|registerComponent
argument_list|(
name|StorageController
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"RegistryException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RegistryException
name|e
parameter_list|)
block|{
comment|//
block|}
operator|new
name|GDataRequestListener
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|reg
operator|.
name|registerComponent
argument_list|(
name|StorageCoreController
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no config"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO: handle exception
block|}
name|this
operator|.
name|reg
operator|.
name|registerComponent
argument_list|(
name|DefaultRequestHandlerFactory
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|RequestHandlerFactory
name|factory
init|=
name|this
operator|.
name|reg
operator|.
name|lookup
argument_list|(
name|RequestHandlerFactory
operator|.
name|class
argument_list|,
name|ComponentType
operator|.
name|REQUESTHANDLERFACTORY
argument_list|)
decl_stmt|;
try|try
block|{
name|this
operator|.
name|reg
operator|.
name|registerComponent
argument_list|(
name|DefaultRequestHandlerFactory
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"RegistryException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RegistryException
name|e
parameter_list|)
block|{
comment|//
block|}
name|this
operator|.
name|reg
operator|.
name|registerComponent
argument_list|(
name|ServiceFactory
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ServiceFactory
name|servicefactory
init|=
name|this
operator|.
name|reg
operator|.
name|lookup
argument_list|(
name|ServiceFactory
operator|.
name|class
argument_list|,
name|ComponentType
operator|.
name|SERVICEFACTORY
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|servicefactory
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
