begin_unit
begin_comment
comment|/**   * Copyright 2004 The Apache Software Foundation   *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   *     http://www.apache.org/licenses/LICENSE-2.0   *   * Unless required by applicable law or agreed to in writing, software   * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.storage.lucenestorage
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|data
operator|.
name|GDataAccount
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|data
operator|.
name|ServerBaseEntry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|data
operator|.
name|ServerBaseFeed
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|ProvidedService
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
operator|.
name|StorageEntryWrapper
operator|.
name|StorageOperation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|utils
operator|.
name|ProvidedServiceStub
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|utils
operator|.
name|ReferenceCounter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|BaseEntry
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|BaseFeed
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|DateTime
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|util
operator|.
name|ParseException
import|;
end_import
begin_class
DECL|class|TestStorageQuery
specifier|public
class|class
name|TestStorageQuery
extends|extends
name|TestCase
block|{
DECL|field|modifier
specifier|private
name|StorageModifier
name|modifier
decl_stmt|;
DECL|field|count
specifier|private
name|int
name|count
init|=
literal|30
decl_stmt|;
DECL|field|query
specifier|private
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|query
decl_stmt|;
DECL|field|configurator
specifier|private
name|ProvidedService
name|configurator
decl_stmt|;
DECL|field|controller
specifier|private
name|StorageCoreController
name|controller
decl_stmt|;
DECL|field|dir
specifier|private
name|Directory
name|dir
decl_stmt|;
DECL|field|feedId
specifier|private
specifier|static
name|String
name|feedId
init|=
literal|"myFeed"
decl_stmt|;
DECL|field|accountName
specifier|private
specifier|static
name|String
name|accountName
init|=
literal|"simon"
decl_stmt|;
DECL|field|service
specifier|private
specifier|static
name|String
name|service
init|=
name|ProvidedServiceStub
operator|.
name|SERVICE_NAME
decl_stmt|;
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|configurator
operator|=
operator|new
name|ProvidedServiceStub
argument_list|()
expr_stmt|;
name|this
operator|.
name|controller
operator|=
operator|new
name|StorageCoreController
argument_list|()
expr_stmt|;
name|this
operator|.
name|dir
operator|=
operator|new
name|RAMDirectory
argument_list|()
expr_stmt|;
name|this
operator|.
name|controller
operator|.
name|setStorageDir
argument_list|(
name|this
operator|.
name|dir
argument_list|)
expr_stmt|;
name|this
operator|.
name|controller
operator|.
name|setKeepRecoveredFiles
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|controller
operator|.
name|setOptimizeInterval
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|this
operator|.
name|controller
operator|.
name|setRecover
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|controller
operator|.
name|setBufferSize
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|this
operator|.
name|controller
operator|.
name|setPersistFactor
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|this
operator|.
name|controller
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|this
operator|.
name|configurator
operator|=
operator|new
name|ProvidedServiceStub
argument_list|()
expr_stmt|;
name|this
operator|.
name|modifier
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorageModifier
argument_list|()
expr_stmt|;
name|this
operator|.
name|dir
operator|=
name|this
operator|.
name|controller
operator|.
name|getDirectory
argument_list|()
expr_stmt|;
name|ServerBaseFeed
name|feed
init|=
operator|new
name|ServerBaseFeed
argument_list|()
decl_stmt|;
name|feed
operator|.
name|setId
argument_list|(
name|feedId
argument_list|)
expr_stmt|;
name|feed
operator|.
name|setServiceType
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|feed
operator|.
name|setServiceConfig
argument_list|(
name|this
operator|.
name|configurator
argument_list|)
expr_stmt|;
name|StorageFeedWrapper
name|wrapper
init|=
operator|new
name|StorageFeedWrapper
argument_list|(
name|feed
argument_list|,
name|accountName
argument_list|)
decl_stmt|;
name|this
operator|.
name|modifier
operator|.
name|createFeed
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
name|insertEntries
argument_list|(
name|this
operator|.
name|count
argument_list|)
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorageQuery
argument_list|()
expr_stmt|;
block|}
comment|/**      * @param entrycount      * @throws IOException      * @throws InterruptedException      * @throws StorageException      */
DECL|method|insertEntries
specifier|public
name|void
name|insertEntries
parameter_list|(
name|int
name|entrycount
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|StorageException
block|{
name|List
argument_list|<
name|StorageEntryWrapper
argument_list|>
name|tempList
init|=
operator|new
name|ArrayList
argument_list|<
name|StorageEntryWrapper
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|entrycount
condition|;
name|i
operator|++
control|)
block|{
name|ServerBaseEntry
name|entry
init|=
operator|new
name|ServerBaseEntry
argument_list|(
operator|new
name|Entry
argument_list|()
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setId
argument_list|(
literal|""
operator|+
name|i
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setServiceConfig
argument_list|(
name|this
operator|.
name|configurator
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setUpdated
argument_list|(
operator|new
name|DateTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setFeedId
argument_list|(
name|feedId
argument_list|)
expr_stmt|;
name|StorageEntryWrapper
name|wrapper
init|=
operator|new
name|StorageEntryWrapper
argument_list|(
name|entry
argument_list|,
name|StorageOperation
operator|.
name|INSERT
argument_list|)
decl_stmt|;
name|tempList
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|wrapper
argument_list|)
expr_stmt|;
comment|// force different timestamps --> DateTime 2006-06-05T13:37:55.724Z
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StorageEntryWrapper
name|entry
range|:
name|tempList
control|)
block|{
name|this
operator|.
name|modifier
operator|.
name|insertEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|tearDown
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|query
operator|.
name|decrementRef
argument_list|()
expr_stmt|;
name|this
operator|.
name|controller
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
comment|/*      *        */
DECL|method|testAccountNameQuery
specifier|public
name|void
name|testAccountNameQuery
parameter_list|()
throws|throws
name|IOException
throws|,
name|StorageException
block|{
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|query
init|=
name|this
operator|.
name|controller
operator|.
name|getStorageQuery
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|accountName
argument_list|,
name|query
operator|.
name|get
argument_list|()
operator|.
name|getAccountNameForFeedId
argument_list|(
name|feedId
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|query
operator|.
name|get
argument_list|()
operator|.
name|getAccountNameForFeedId
argument_list|(
literal|"someId"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for 'org.apache.lucene.storage.lucenestorage.StorageQuery.feedQuery(String, int, int)'      */
DECL|method|testFeedQuery
specifier|public
name|void
name|testFeedQuery
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParseException
throws|,
name|StorageException
block|{
name|feedQueryHelper
argument_list|(
name|this
operator|.
name|query
argument_list|)
expr_stmt|;
name|this
operator|.
name|controller
operator|.
name|forceWrite
argument_list|()
expr_stmt|;
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|queryAssureWritten
init|=
name|this
operator|.
name|controller
operator|.
name|getStorageQuery
argument_list|()
decl_stmt|;
name|assertNotSame
argument_list|(
name|queryAssureWritten
argument_list|,
name|this
operator|.
name|query
argument_list|)
expr_stmt|;
name|feedQueryHelper
argument_list|(
name|queryAssureWritten
argument_list|)
expr_stmt|;
name|queryAssureWritten
operator|.
name|decrementRef
argument_list|()
expr_stmt|;
block|}
DECL|method|feedQueryHelper
specifier|private
name|void
name|feedQueryHelper
parameter_list|(
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|currentQuery
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|BaseFeed
name|feed
init|=
name|currentQuery
operator|.
name|get
argument_list|()
operator|.
name|getLatestFeedQuery
argument_list|(
name|feedId
argument_list|,
literal|25
argument_list|,
literal|1
argument_list|,
name|this
operator|.
name|configurator
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BaseEntry
argument_list|>
name|entryList
init|=
name|feed
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"listSize: "
operator|+
name|entryList
operator|.
name|size
argument_list|()
argument_list|,
name|entryList
operator|.
name|size
argument_list|()
operator|==
literal|25
argument_list|)
expr_stmt|;
name|BaseEntry
name|tempEntry
init|=
literal|null
decl_stmt|;
for|for
control|(
name|BaseEntry
name|entry
range|:
name|entryList
control|)
block|{
name|assertNotNull
argument_list|(
literal|"entry"
argument_list|,
name|entry
argument_list|)
expr_stmt|;
if|if
condition|(
name|tempEntry
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|tempEntry
operator|.
name|getUpdated
argument_list|()
operator|.
name|compareTo
argument_list|(
name|entry
operator|.
name|getUpdated
argument_list|()
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|tempEntry
operator|=
name|entry
expr_stmt|;
block|}
else|else
name|tempEntry
operator|=
name|entry
expr_stmt|;
block|}
comment|// test sub retrieve sublist
name|int
name|offset
init|=
literal|15
decl_stmt|;
name|int
name|resultCount
init|=
literal|5
decl_stmt|;
name|feed
operator|=
name|currentQuery
operator|.
name|get
argument_list|()
operator|.
name|getLatestFeedQuery
argument_list|(
name|feedId
argument_list|,
name|resultCount
argument_list|,
name|offset
argument_list|,
name|this
operator|.
name|configurator
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BaseEntry
argument_list|>
name|entrySubList
init|=
name|feed
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"listSize: "
operator|+
name|entrySubList
operator|.
name|size
argument_list|()
argument_list|,
name|entrySubList
operator|.
name|size
argument_list|()
operator|==
name|resultCount
argument_list|)
expr_stmt|;
name|offset
operator|--
expr_stmt|;
for|for
control|(
name|BaseEntry
name|entry
range|:
name|entrySubList
control|)
block|{
name|assertEquals
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|,
name|entryList
operator|.
name|get
argument_list|(
name|offset
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|offset
operator|++
expr_stmt|;
block|}
block|}
comment|/*      * Test method for 'org.apache.lucene.storage.lucenestorage.StorageQuery.singleEntryQuery(String, String)'      */
DECL|method|testSingleEntryQuery
specifier|public
name|void
name|testSingleEntryQuery
parameter_list|()
throws|throws
name|ParseException
throws|,
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|this
operator|.
name|count
condition|;
name|i
operator|++
control|)
block|{
name|BaseEntry
name|entry
init|=
name|this
operator|.
name|query
operator|.
name|get
argument_list|()
operator|.
name|singleEntryQuery
argument_list|(
literal|""
operator|+
name|i
argument_list|,
name|feedId
argument_list|,
name|this
operator|.
name|configurator
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
operator|+
name|i
argument_list|,
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * Test method for 'org.apache.lucene.storage.lucenestorage.StorageQuery.entryQuery(List<String>, String)'      */
DECL|method|testEntryQuery
specifier|public
name|void
name|testEntryQuery
parameter_list|()
throws|throws
name|ParseException
throws|,
name|IOException
throws|,
name|StorageException
block|{
name|entryQueryHelper
argument_list|(
name|this
operator|.
name|query
argument_list|)
expr_stmt|;
name|this
operator|.
name|controller
operator|.
name|forceWrite
argument_list|()
expr_stmt|;
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|queryAssureWritten
init|=
name|this
operator|.
name|controller
operator|.
name|getStorageQuery
argument_list|()
decl_stmt|;
name|assertNotSame
argument_list|(
name|queryAssureWritten
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|entryQueryHelper
argument_list|(
name|queryAssureWritten
argument_list|)
expr_stmt|;
name|queryAssureWritten
operator|.
name|decrementRef
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetUser
specifier|public
name|void
name|testGetUser
parameter_list|()
throws|throws
name|StorageException
throws|,
name|IOException
block|{
name|this
operator|.
name|modifier
operator|.
name|forceWrite
argument_list|()
expr_stmt|;
name|GDataAccount
name|user
init|=
operator|new
name|GDataAccount
argument_list|()
decl_stmt|;
name|user
operator|.
name|setName
argument_list|(
literal|"simon"
argument_list|)
expr_stmt|;
name|user
operator|.
name|setPassword
argument_list|(
literal|"pass"
argument_list|)
expr_stmt|;
name|user
operator|.
name|setAuthorname
argument_list|(
literal|"simon willnauer"
argument_list|)
expr_stmt|;
name|user
operator|.
name|setAuthorMail
argument_list|(
literal|"simon@apache.org"
argument_list|)
expr_stmt|;
name|user
operator|.
name|setAuthorLink
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://www.apache.org"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|modifier
operator|.
name|createAccount
argument_list|(
operator|new
name|StorageAccountWrapper
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|GDataAccount
name|queriedUser
init|=
name|this
operator|.
name|query
operator|.
name|get
argument_list|()
operator|.
name|getUser
argument_list|(
literal|"simon"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|queriedUser
argument_list|)
expr_stmt|;
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|tempQuery
init|=
name|this
operator|.
name|controller
operator|.
name|getStorageQuery
argument_list|()
decl_stmt|;
name|queriedUser
operator|=
name|tempQuery
operator|.
name|get
argument_list|()
operator|.
name|getUser
argument_list|(
literal|"simon"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|queriedUser
operator|.
name|equals
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|queriedUser
operator|.
name|getAuthorMail
argument_list|()
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getAuthorMail
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|queriedUser
operator|.
name|getAuthorLink
argument_list|()
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getAuthorLink
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|queriedUser
operator|.
name|getAuthorname
argument_list|()
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getAuthorname
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|queriedUser
operator|.
name|getPassword
argument_list|()
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getPassword
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsEntryStored
specifier|public
name|void
name|testIsEntryStored
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|this
operator|.
name|query
operator|.
name|get
argument_list|()
operator|.
name|isEntryStored
argument_list|(
literal|""
operator|+
operator|(
name|this
operator|.
name|count
operator|-
literal|1
operator|)
argument_list|,
name|feedId
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|this
operator|.
name|query
operator|.
name|get
argument_list|()
operator|.
name|isEntryStored
argument_list|(
literal|"someOther"
argument_list|,
name|feedId
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|modifier
operator|.
name|forceWrite
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|this
operator|.
name|query
operator|.
name|get
argument_list|()
operator|.
name|isEntryStored
argument_list|(
literal|""
operator|+
operator|(
name|this
operator|.
name|count
operator|-
literal|1
operator|)
argument_list|,
name|feedId
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorageQuery
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|this
operator|.
name|query
operator|.
name|get
argument_list|()
operator|.
name|isEntryStored
argument_list|(
literal|""
operator|+
operator|(
name|this
operator|.
name|count
operator|-
literal|1
operator|)
argument_list|,
name|feedId
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|this
operator|.
name|query
operator|.
name|get
argument_list|()
operator|.
name|isEntryStored
argument_list|(
literal|"someOther"
argument_list|,
name|feedId
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetEntryLastModied
specifier|public
name|void
name|testGetEntryLastModied
parameter_list|()
throws|throws
name|IOException
throws|,
name|StorageException
block|{
name|ServerBaseEntry
name|entry
init|=
operator|new
name|ServerBaseEntry
argument_list|(
operator|new
name|Entry
argument_list|()
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setId
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setServiceConfig
argument_list|(
name|this
operator|.
name|configurator
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setUpdated
argument_list|(
operator|new
name|DateTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setFeedId
argument_list|(
name|feedId
argument_list|)
expr_stmt|;
name|StorageEntryWrapper
name|wrapper
init|=
operator|new
name|StorageEntryWrapper
argument_list|(
name|entry
argument_list|,
name|StorageOperation
operator|.
name|INSERT
argument_list|)
decl_stmt|;
name|this
operator|.
name|modifier
operator|.
name|insertEntry
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entry
operator|.
name|getUpdated
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|this
operator|.
name|query
operator|.
name|get
argument_list|()
operator|.
name|getEntryLastModified
argument_list|(
literal|"test"
argument_list|,
name|feedId
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|modifier
operator|.
name|forceWrite
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|entry
operator|.
name|getUpdated
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|this
operator|.
name|query
operator|.
name|get
argument_list|()
operator|.
name|getEntryLastModified
argument_list|(
literal|"test"
argument_list|,
name|feedId
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorageQuery
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|entry
operator|.
name|getUpdated
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|this
operator|.
name|query
operator|.
name|get
argument_list|()
operator|.
name|getEntryLastModified
argument_list|(
literal|"test"
argument_list|,
name|feedId
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|query
operator|.
name|get
argument_list|()
operator|.
name|getEntryLastModified
argument_list|(
literal|"some"
argument_list|,
name|feedId
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testGetFeedLastModified
specifier|public
name|void
name|testGetFeedLastModified
parameter_list|()
throws|throws
name|StorageException
throws|,
name|IOException
block|{
name|ServerBaseEntry
name|entry
init|=
operator|new
name|ServerBaseEntry
argument_list|(
operator|new
name|Entry
argument_list|()
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setId
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setServiceConfig
argument_list|(
name|this
operator|.
name|configurator
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setUpdated
argument_list|(
operator|new
name|DateTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setFeedId
argument_list|(
name|feedId
argument_list|)
expr_stmt|;
name|StorageEntryWrapper
name|wrapper
init|=
operator|new
name|StorageEntryWrapper
argument_list|(
name|entry
argument_list|,
name|StorageOperation
operator|.
name|INSERT
argument_list|)
decl_stmt|;
name|this
operator|.
name|modifier
operator|.
name|insertEntry
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entry
operator|.
name|getUpdated
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|this
operator|.
name|query
operator|.
name|get
argument_list|()
operator|.
name|getFeedLastModified
argument_list|(
name|feedId
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|modifier
operator|.
name|forceWrite
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|entry
operator|.
name|getUpdated
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|this
operator|.
name|query
operator|.
name|get
argument_list|()
operator|.
name|getFeedLastModified
argument_list|(
name|feedId
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorageQuery
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|entry
operator|.
name|getUpdated
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|this
operator|.
name|query
operator|.
name|get
argument_list|()
operator|.
name|getFeedLastModified
argument_list|(
name|feedId
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCheckVersionId
specifier|public
name|void
name|testCheckVersionId
parameter_list|()
throws|throws
name|IOException
throws|,
name|StorageException
block|{
name|this
operator|.
name|modifier
operator|.
name|forceWrite
argument_list|()
expr_stmt|;
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|sQuery
init|=
name|this
operator|.
name|controller
operator|.
name|getStorageQuery
argument_list|()
decl_stmt|;
name|ServerBaseEntry
name|entry
init|=
operator|new
name|ServerBaseEntry
argument_list|(
operator|new
name|Entry
argument_list|()
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setId
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setServiceConfig
argument_list|(
name|this
operator|.
name|configurator
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setUpdated
argument_list|(
operator|new
name|DateTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setFeedId
argument_list|(
name|feedId
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setVersion
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|StorageEntryWrapper
name|wrapper
init|=
operator|new
name|StorageEntryWrapper
argument_list|(
name|entry
argument_list|,
name|StorageOperation
operator|.
name|INSERT
argument_list|)
decl_stmt|;
name|this
operator|.
name|modifier
operator|.
name|insertEntry
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
comment|//test in buffer
name|assertTrue
argument_list|(
name|sQuery
operator|.
name|get
argument_list|()
operator|.
name|checkEntryVersion
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|,
name|entry
operator|.
name|getFeedId
argument_list|()
argument_list|,
name|entry
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|sQuery
operator|.
name|get
argument_list|()
operator|.
name|checkEntryVersion
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|,
name|entry
operator|.
name|getFeedId
argument_list|()
argument_list|,
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|sQuery
operator|.
name|get
argument_list|()
operator|.
name|checkEntryVersion
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|,
literal|"someOtherFeed"
argument_list|,
name|entry
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|sQuery
operator|.
name|get
argument_list|()
operator|.
name|checkEntryVersion
argument_list|(
literal|"foobar"
argument_list|,
name|entry
operator|.
name|getFeedId
argument_list|()
argument_list|,
name|entry
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|modifier
operator|.
name|forceWrite
argument_list|()
expr_stmt|;
comment|//test in buffer after written
name|assertTrue
argument_list|(
name|sQuery
operator|.
name|get
argument_list|()
operator|.
name|checkEntryVersion
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|,
name|entry
operator|.
name|getFeedId
argument_list|()
argument_list|,
name|entry
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|sQuery
operator|.
name|get
argument_list|()
operator|.
name|checkEntryVersion
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|,
name|entry
operator|.
name|getFeedId
argument_list|()
argument_list|,
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|sQuery
operator|.
name|get
argument_list|()
operator|.
name|checkEntryVersion
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|,
literal|"someOtherFeed"
argument_list|,
name|entry
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|sQuery
operator|.
name|get
argument_list|()
operator|.
name|checkEntryVersion
argument_list|(
literal|"foobar"
argument_list|,
name|entry
operator|.
name|getFeedId
argument_list|()
argument_list|,
name|entry
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sQuery
operator|.
name|decrementRef
argument_list|()
expr_stmt|;
name|sQuery
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorageQuery
argument_list|()
expr_stmt|;
comment|//test in index
name|assertTrue
argument_list|(
name|sQuery
operator|.
name|get
argument_list|()
operator|.
name|checkEntryVersion
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|,
name|entry
operator|.
name|getFeedId
argument_list|()
argument_list|,
name|entry
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|sQuery
operator|.
name|get
argument_list|()
operator|.
name|checkEntryVersion
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|,
name|entry
operator|.
name|getFeedId
argument_list|()
argument_list|,
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|sQuery
operator|.
name|get
argument_list|()
operator|.
name|checkEntryVersion
argument_list|(
literal|"foobar"
argument_list|,
name|entry
operator|.
name|getFeedId
argument_list|()
argument_list|,
name|entry
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sQuery
operator|.
name|decrementRef
argument_list|()
expr_stmt|;
block|}
DECL|method|entryQueryHelper
specifier|private
name|void
name|entryQueryHelper
parameter_list|(
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|currentQuery
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|entryIdList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|this
operator|.
name|count
condition|;
name|i
operator|++
control|)
block|{
name|entryIdList
operator|.
name|add
argument_list|(
literal|""
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|BaseEntry
argument_list|>
name|entryList
init|=
name|currentQuery
operator|.
name|get
argument_list|()
operator|.
name|entryQuery
argument_list|(
name|entryIdList
argument_list|,
name|feedId
argument_list|,
name|this
operator|.
name|configurator
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|entryIdList
operator|.
name|size
argument_list|()
argument_list|,
name|entryList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|entryIdCompare
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BaseEntry
name|entry
range|:
name|entryList
control|)
block|{
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|entry
operator|.
name|getVersionId
argument_list|()
argument_list|)
expr_stmt|;
name|entryIdCompare
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|entryIdList
operator|.
name|containsAll
argument_list|(
name|entryIdCompare
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
