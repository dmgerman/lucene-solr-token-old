begin_unit
begin_comment
comment|/**   * Copyright 2004 The Apache Software Foundation   *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   *     http://www.apache.org/licenses/LICENSE-2.0   *   * Unless required by applicable law or agreed to in writing, software   * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.storage.lucenestorage
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
operator|.
name|SingleHostConcurrentStorageLock
operator|.
name|ConcurrencyException
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_class
DECL|class|TestSingelHostConcurrencyLock
specifier|public
class|class
name|TestSingelHostConcurrencyLock
extends|extends
name|TestCase
block|{
DECL|field|lock
name|SingleHostConcurrentStorageLock
name|lock
decl_stmt|;
DECL|field|threadResult
name|boolean
name|threadResult
init|=
literal|false
decl_stmt|;
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|lock
operator|=
operator|(
name|SingleHostConcurrentStorageLock
operator|)
name|SingleHostConcurrentStorageLock
operator|.
name|getConcurrentStorageLock
argument_list|()
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
DECL|method|tearDown
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|threadResult
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|lock
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/*      * Test method for 'org.apache.lucene.gdata.storage.lucenestorage.SingleHostConcurrentStorageLock.getConcurrentStorageLock()'      */
DECL|method|testGetConcurrentStorageLock
specifier|public
name|void
name|testGetConcurrentStorageLock
parameter_list|()
block|{
name|ConcurrentStorageLock
name|lock
init|=
name|SingleHostConcurrentStorageLock
operator|.
name|getConcurrentStorageLock
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|lock
argument_list|,
name|SingleHostConcurrentStorageLock
operator|.
name|getConcurrentStorageLock
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for 'org.apache.lucene.gdata.storage.lucenestorage.SingleHostConcurrentStorageLock.setLock(String)'      */
DECL|method|testSetLock
specifier|public
name|void
name|testSetLock
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|String
name|key
init|=
literal|"someKey"
decl_stmt|;
specifier|final
name|String
name|nextKey
init|=
literal|"fooKey"
decl_stmt|;
name|assertTrue
argument_list|(
name|lock
operator|.
name|setLock
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lock
operator|.
name|isKeyLocked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|lock
operator|.
name|setLock
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"thread has already locked the key"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO: handle exception
block|}
try|try
block|{
name|assertTrue
argument_list|(
name|lock
operator|.
name|setLock
argument_list|(
name|nextKey
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"thread has already locked the key"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO: handle exception
block|}
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|threadResult
operator|=
name|lock
operator|.
name|setLock
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|(
literal|300
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|threadResult
argument_list|)
expr_stmt|;
name|t
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|threadResult
operator|=
name|lock
operator|.
name|setLock
argument_list|(
name|nextKey
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|(
literal|300
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|threadResult
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for 'org.apache.lucene.gdata.storage.lucenestorage.SingleHostConcurrentStorageLock.releaseLock(String)'      */
DECL|method|testReleaseLock
specifier|public
name|void
name|testReleaseLock
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|String
name|key
init|=
literal|"someKey"
decl_stmt|;
specifier|final
name|String
name|nextKey
init|=
literal|"fooKey"
decl_stmt|;
name|assertTrue
argument_list|(
name|lock
operator|.
name|setLock
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lock
operator|.
name|isKeyLocked
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lock
operator|.
name|releaseLock
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|this
operator|.
name|lock
operator|.
name|setLock
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
name|lock
operator|.
name|setLock
argument_list|(
name|nextKey
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"thread has already locked the key"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO: handle exception
block|}
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|threadResult
operator|=
name|lock
operator|.
name|setLock
argument_list|(
name|nextKey
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|(
literal|300
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|threadResult
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|lock
operator|.
name|releaseLock
argument_list|(
name|nextKey
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"current thread is not owner"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConcurrencyException
name|e
parameter_list|)
block|{
comment|// TODO: handle exception
block|}
block|}
comment|/*      * Test method for 'org.apache.lucene.gdata.storage.lucenestorage.SingleHostConcurrentStorageLock.releaseThreadLocks()'      */
DECL|method|testReleaseThreadLocks
specifier|public
name|void
name|testReleaseThreadLocks
parameter_list|()
block|{              }
comment|/*      * Test method for 'org.apache.lucene.gdata.storage.lucenestorage.SingleHostConcurrentStorageLock.isKeyLocked(String)'      */
DECL|method|testIsKeyLocked
specifier|public
name|void
name|testIsKeyLocked
parameter_list|()
block|{      }
comment|/*      * Test method for 'org.apache.lucene.gdata.storage.lucenestorage.SingleHostConcurrentStorageLock.close()'      */
DECL|method|testClose
specifier|public
name|void
name|testClose
parameter_list|()
block|{      }
block|}
end_class
end_unit
