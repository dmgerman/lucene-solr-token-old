begin_unit
begin_comment
comment|/**   * Copyright 2004 The Apache Software Foundation   *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   *     http://www.apache.org/licenses/LICENSE-2.0   *   * Unless required by applicable law or agreed to in writing, software   * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.storage.db4o
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|db4o
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|data
operator|.
name|GDataAccount
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|data
operator|.
name|ServerBaseEntry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|data
operator|.
name|ServerBaseFeed
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|ProvidedServiceConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|ModificationConflictException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|Storage
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|StorageController
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
operator|.
name|StorageEntryWrapper
operator|.
name|StorageOperation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|utils
operator|.
name|MultiThreadEntryStub
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|utils
operator|.
name|Visitor
import|;
end_import
begin_import
import|import
name|com
operator|.
name|db4o
operator|.
name|ObjectContainer
import|;
end_import
begin_import
import|import
name|com
operator|.
name|db4o
operator|.
name|ObjectSet
import|;
end_import
begin_import
import|import
name|com
operator|.
name|db4o
operator|.
name|query
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|BaseEntry
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|BaseFeed
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|DateTime
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|PlainTextConstruct
import|;
end_import
begin_class
DECL|class|TestDb4oStorage
specifier|public
class|class
name|TestDb4oStorage
extends|extends
name|TestCase
block|{
DECL|field|FEEDID
specifier|private
specifier|static
specifier|final
name|String
name|FEEDID
init|=
literal|"myFeed"
decl_stmt|;
DECL|field|ACCOUNTNAME
specifier|private
specifier|static
specifier|final
name|String
name|ACCOUNTNAME
init|=
literal|"myAccount"
decl_stmt|;
DECL|field|SERVICENAME
specifier|private
specifier|static
specifier|final
name|String
name|SERVICENAME
init|=
literal|"myService"
decl_stmt|;
DECL|field|controller
name|DB4oController
name|controller
decl_stmt|;
DECL|field|fail
specifier|static
specifier|volatile
name|boolean
name|fail
init|=
literal|false
decl_stmt|;
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|controller
operator|=
operator|new
name|DB4oController
argument_list|()
expr_stmt|;
name|this
operator|.
name|controller
operator|.
name|setContainerPoolSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|controller
operator|.
name|setFilePath
argument_list|(
literal|"test.yap"
argument_list|)
expr_stmt|;
name|this
operator|.
name|controller
operator|.
name|setRunAsServer
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|controller
operator|.
name|setPassword
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|this
operator|.
name|controller
operator|.
name|setUser
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|this
operator|.
name|controller
operator|.
name|setUseWeakReferences
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|controller
operator|.
name|setPort
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|controller
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|this
operator|.
name|controller
operator|.
name|visiteInitialize
argument_list|()
expr_stmt|;
name|clearDB
argument_list|()
expr_stmt|;
block|}
DECL|method|tearDown
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|clearDB
argument_list|()
expr_stmt|;
name|fail
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|controller
operator|.
name|getStorage
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|controller
operator|.
name|visiteDestroy
argument_list|()
expr_stmt|;
name|this
operator|.
name|controller
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|File
name|dbFile
init|=
operator|new
name|File
argument_list|(
literal|"test.yap"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dbFile
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|clearDB
specifier|private
name|void
name|clearDB
parameter_list|()
block|{
name|ObjectContainer
name|container
init|=
name|this
operator|.
name|controller
operator|.
name|releaseContainer
argument_list|()
decl_stmt|;
name|ObjectSet
name|set
init|=
name|container
operator|.
name|get
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|set
control|)
block|{
name|container
operator|.
name|delete
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
name|container
operator|.
name|ext
argument_list|()
operator|.
name|purge
argument_list|()
expr_stmt|;
name|container
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getContainer
name|ObjectContainer
name|getContainer
parameter_list|()
block|{
return|return
name|this
operator|.
name|controller
operator|.
name|releaseContainer
argument_list|()
return|;
block|}
comment|/*      * Test method for      * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.storeEntry(ServerBaseEntry)'      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testStoreEntry
specifier|public
name|void
name|testStoreEntry
parameter_list|()
throws|throws
name|StorageException
block|{
name|Storage
name|storage
init|=
name|this
operator|.
name|controller
operator|.
name|getStorage
argument_list|()
decl_stmt|;
try|try
block|{
name|ServerBaseEntry
name|e
init|=
name|createServerBaseEntry
argument_list|()
decl_stmt|;
name|storage
operator|.
name|storeEntry
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"excption exp. for feed for the entry"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
comment|//
block|}
try|try
block|{
name|storage
operator|.
name|storeEntry
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"entry is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
comment|//
block|}
name|ServerBaseEntry
name|exEntry
init|=
operator|new
name|ServerBaseEntry
argument_list|()
decl_stmt|;
name|exEntry
operator|.
name|setFeedId
argument_list|(
literal|"some"
argument_list|)
expr_stmt|;
try|try
block|{
name|storage
operator|.
name|storeEntry
argument_list|(
name|exEntry
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"entry id is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
comment|//
block|}
name|exEntry
operator|.
name|setId
argument_list|(
literal|"someID"
argument_list|)
expr_stmt|;
name|exEntry
operator|.
name|setFeedId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|storage
operator|.
name|storeEntry
argument_list|(
name|exEntry
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"feed id is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
comment|//
block|}
name|storeServerBaseFeed
argument_list|()
expr_stmt|;
name|ServerBaseEntry
name|e
init|=
name|createServerBaseEntry
argument_list|()
decl_stmt|;
name|storage
operator|.
name|storeEntry
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|ServerBaseEntry
name|e1
init|=
name|createServerBaseEntry
argument_list|()
decl_stmt|;
name|storage
operator|.
name|storeEntry
argument_list|(
name|e1
argument_list|)
expr_stmt|;
name|storage
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorage
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|getContainer
argument_list|()
operator|.
name|query
argument_list|()
decl_stmt|;
name|query
operator|.
name|constrain
argument_list|(
name|BaseEntry
operator|.
name|class
argument_list|)
expr_stmt|;
name|query
operator|.
name|descend
argument_list|(
literal|"id"
argument_list|)
operator|.
name|constrain
argument_list|(
name|e
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectSet
name|resultSet
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|resultSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BaseEntry
name|storedEntry
init|=
operator|(
name|BaseEntry
operator|)
name|resultSet
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|storedEntry
operator|.
name|getVersionId
argument_list|()
argument_list|)
expr_stmt|;
name|ServerBaseFeed
name|bFeed
init|=
operator|new
name|ServerBaseFeed
argument_list|()
decl_stmt|;
name|bFeed
operator|.
name|setItemsPerPage
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|bFeed
operator|.
name|setId
argument_list|(
name|FEEDID
argument_list|)
expr_stmt|;
name|bFeed
operator|.
name|setStartIndex
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bFeed
operator|.
name|setServiceType
argument_list|(
name|SERVICENAME
argument_list|)
expr_stmt|;
name|BaseFeed
argument_list|<
name|BaseFeed
argument_list|,
name|BaseEntry
argument_list|>
name|feed
init|=
name|storage
operator|.
name|getFeed
argument_list|(
name|bFeed
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|feed
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|e
operator|.
name|getId
argument_list|()
argument_list|,
name|feed
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// last post
comment|// ->
comment|// previously
comment|// created
name|assertEquals
argument_list|(
name|e1
operator|.
name|getId
argument_list|()
argument_list|,
name|feed
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// first pos
comment|// -> last
comment|// created
name|assertEquals
argument_list|(
name|feed
operator|.
name|getUpdated
argument_list|()
argument_list|,
name|feed
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUpdated
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for      * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.deleteEntry(ServerBaseEntry)'      */
DECL|method|testDeleteEntry
specifier|public
name|void
name|testDeleteEntry
parameter_list|()
throws|throws
name|StorageException
throws|,
name|InterruptedException
block|{
name|ObjectContainer
name|container
init|=
name|getContainer
argument_list|()
decl_stmt|;
name|storeServerBaseFeed
argument_list|()
expr_stmt|;
name|Storage
name|storage
init|=
name|this
operator|.
name|controller
operator|.
name|getStorage
argument_list|()
decl_stmt|;
try|try
block|{
name|storage
operator|.
name|deleteEntry
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"entry is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
comment|//
block|}
name|ServerBaseEntry
name|exEntry
init|=
operator|new
name|ServerBaseEntry
argument_list|()
decl_stmt|;
name|exEntry
operator|.
name|setFeedId
argument_list|(
literal|"some"
argument_list|)
expr_stmt|;
try|try
block|{
name|storage
operator|.
name|deleteEntry
argument_list|(
name|exEntry
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"entry id is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
comment|//
block|}
name|exEntry
operator|.
name|setId
argument_list|(
literal|"someID"
argument_list|)
expr_stmt|;
name|exEntry
operator|.
name|setFeedId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|storage
operator|.
name|storeEntry
argument_list|(
name|exEntry
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"feed id is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
comment|//
block|}
name|ServerBaseEntry
name|e
init|=
name|createServerBaseEntry
argument_list|()
decl_stmt|;
name|storage
operator|.
name|storeEntry
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|ServerBaseEntry
name|e1
init|=
name|createServerBaseEntry
argument_list|()
decl_stmt|;
name|storage
operator|.
name|storeEntry
argument_list|(
name|e1
argument_list|)
expr_stmt|;
name|storage
operator|.
name|deleteEntry
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|container
operator|.
name|close
argument_list|()
expr_stmt|;
name|container
operator|=
name|getContainer
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|container
operator|.
name|query
argument_list|()
decl_stmt|;
name|query
operator|.
name|constrain
argument_list|(
name|BaseEntry
operator|.
name|class
argument_list|)
expr_stmt|;
name|query
operator|.
name|descend
argument_list|(
literal|"id"
argument_list|)
operator|.
name|constrain
argument_list|(
name|e
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectSet
name|resultSet
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resultSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// #### test version matching
name|ServerBaseEntry
name|eVersion
init|=
name|createServerBaseEntry
argument_list|()
decl_stmt|;
name|storage
operator|.
name|storeEntry
argument_list|(
name|eVersion
argument_list|)
expr_stmt|;
name|eVersion
operator|.
name|setVersion
argument_list|(
literal|33
argument_list|)
expr_stmt|;
try|try
block|{
name|storage
operator|.
name|deleteEntry
argument_list|(
name|eVersion
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"version does not match"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// TODO: handle exception
block|}
try|try
block|{
name|storage
operator|.
name|deleteEntry
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"entry id is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// TODO: handle exception
block|}
name|storage
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorage
argument_list|()
expr_stmt|;
name|storage
operator|.
name|deleteEntry
argument_list|(
name|e1
argument_list|)
expr_stmt|;
name|container
operator|.
name|close
argument_list|()
expr_stmt|;
name|container
operator|=
name|getContainer
argument_list|()
expr_stmt|;
name|query
operator|=
name|container
operator|.
name|query
argument_list|()
expr_stmt|;
name|query
operator|.
name|constrain
argument_list|(
name|BaseEntry
operator|.
name|class
argument_list|)
expr_stmt|;
name|query
operator|.
name|descend
argument_list|(
literal|"id"
argument_list|)
operator|.
name|constrain
argument_list|(
name|e1
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|resultSet
operator|=
name|query
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resultSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// ############ test concurrency
comment|// ############ test concurrency
name|Object
name|monitor
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|reached
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|MultiThreadEntryStub
name|concuEntry
init|=
operator|new
name|MultiThreadEntryStub
argument_list|()
decl_stmt|;
name|concuEntry
operator|.
name|setId
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|""
argument_list|)
expr_stmt|;
name|ProvidedServiceConfig
name|conf
init|=
operator|new
name|ProvidedServiceConfig
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setName
argument_list|(
name|SERVICENAME
argument_list|)
expr_stmt|;
name|concuEntry
operator|.
name|setServiceConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|concuEntry
operator|.
name|setUpdated
argument_list|(
name|DateTime
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
name|concuEntry
operator|.
name|setFeedId
argument_list|(
name|FEEDID
argument_list|)
expr_stmt|;
name|storage
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorage
argument_list|()
expr_stmt|;
name|storage
operator|.
name|storeEntry
argument_list|(
name|concuEntry
argument_list|)
expr_stmt|;
name|storage
operator|.
name|close
argument_list|()
expr_stmt|;
name|concuEntry
operator|.
name|acceptGetVersionVisitor
argument_list|(
name|getMonitorVisitor
argument_list|(
name|monitor
argument_list|,
name|reached
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
name|t1
init|=
name|getDelThread
argument_list|(
name|controller
argument_list|,
name|concuEntry
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Thread
name|t2
init|=
name|getDelThread
argument_list|(
name|controller
argument_list|,
name|concuEntry
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|t1
operator|.
name|start
argument_list|()
expr_stmt|;
comment|/*          * Wait active -- not nice but works fine here wait until thread parked          */
while|while
condition|(
literal|true
condition|)
block|{
synchronized|synchronized
init|(
name|monitor
init|)
block|{
if|if
condition|(
name|reached
operator|.
name|get
argument_list|()
condition|)
break|break;
name|monitor
operator|.
name|wait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
name|t2
operator|.
name|start
argument_list|()
expr_stmt|;
name|t2
operator|.
name|join
argument_list|(
literal|800
argument_list|)
expr_stmt|;
comment|/*          * Wait active -- not nice but works fine here wake up the waiting          * thread          */
while|while
condition|(
literal|true
condition|)
block|{
synchronized|synchronized
init|(
name|monitor
init|)
block|{
if|if
condition|(
operator|!
name|reached
operator|.
name|get
argument_list|()
condition|)
break|break;
name|monitor
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
name|t1
operator|.
name|join
argument_list|(
literal|300
argument_list|)
expr_stmt|;
if|if
condition|(
name|fail
condition|)
name|fail
argument_list|(
literal|"thread failed -- see stacktrace"
argument_list|)
expr_stmt|;
name|container
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getMonitorVisitor
specifier|private
name|Visitor
name|getMonitorVisitor
parameter_list|(
specifier|final
name|Object
name|monitor
parameter_list|,
specifier|final
name|AtomicBoolean
name|reached
parameter_list|)
block|{
comment|/*          * The executing thread stops at a defined position while holding the          * semaphore inside the storageImpl          */
return|return
operator|new
name|Visitor
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Object
index|[]
name|o
parameter_list|)
block|{
synchronized|synchronized
init|(
name|monitor
init|)
block|{
try|try
block|{
name|reached
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|monitor
operator|.
name|wait
argument_list|()
expr_stmt|;
name|reached
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
block|}
block|}
return|;
block|}
DECL|method|getDelThread
specifier|private
name|Thread
name|getDelThread
parameter_list|(
name|StorageController
name|c
parameter_list|,
name|ServerBaseEntry
name|e
parameter_list|,
name|boolean
name|conflictExpected
parameter_list|)
block|{
name|Thread
name|t1
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runner
argument_list|(
name|c
argument_list|,
name|e
argument_list|,
name|conflictExpected
argument_list|,
name|StorageOperation
operator|.
name|DELETE
argument_list|)
argument_list|)
decl_stmt|;
name|t1
operator|.
name|setPriority
argument_list|(
name|Thread
operator|.
name|MAX_PRIORITY
argument_list|)
expr_stmt|;
return|return
name|t1
return|;
block|}
DECL|method|getUpdThread
specifier|private
name|Thread
name|getUpdThread
parameter_list|(
name|StorageController
name|c
parameter_list|,
name|ServerBaseEntry
name|e
parameter_list|,
name|boolean
name|conflictExpected
parameter_list|)
block|{
name|Thread
name|t1
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runner
argument_list|(
name|c
argument_list|,
name|e
argument_list|,
name|conflictExpected
argument_list|,
name|StorageOperation
operator|.
name|UPDATE
argument_list|)
argument_list|)
decl_stmt|;
name|t1
operator|.
name|setPriority
argument_list|(
name|Thread
operator|.
name|MAX_PRIORITY
argument_list|)
expr_stmt|;
return|return
name|t1
return|;
block|}
comment|/*      * Test method for      * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.updateEntry(ServerBaseEntry)'      */
DECL|method|testUpdateEntry
specifier|public
name|void
name|testUpdateEntry
parameter_list|()
throws|throws
name|StorageException
throws|,
name|InterruptedException
block|{
name|storeServerBaseFeed
argument_list|()
expr_stmt|;
name|Storage
name|storage
init|=
name|this
operator|.
name|controller
operator|.
name|getStorage
argument_list|()
decl_stmt|;
name|ServerBaseEntry
name|exEntry
init|=
operator|new
name|ServerBaseEntry
argument_list|()
decl_stmt|;
try|try
block|{
name|storage
operator|.
name|updateEntry
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"entry is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
comment|//
block|}
try|try
block|{
name|storage
operator|.
name|updateEntry
argument_list|(
name|exEntry
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"entry id is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
comment|//
block|}
name|exEntry
operator|.
name|setId
argument_list|(
literal|"someID"
argument_list|)
expr_stmt|;
try|try
block|{
name|storage
operator|.
name|updateEntry
argument_list|(
name|exEntry
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"feed id is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
comment|//
block|}
name|ServerBaseEntry
name|e
init|=
name|createServerBaseEntry
argument_list|()
decl_stmt|;
name|ServerBaseEntry
name|e1
init|=
name|createServerBaseEntry
argument_list|()
decl_stmt|;
try|try
block|{
name|storage
operator|.
name|updateEntry
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"entry does not exist"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|storage
operator|.
name|storeEntry
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|storage
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorage
argument_list|()
expr_stmt|;
name|storage
operator|.
name|storeEntry
argument_list|(
name|e1
argument_list|)
expr_stmt|;
name|ServerBaseEntry
name|e2
init|=
name|createServerBaseEntry
argument_list|()
decl_stmt|;
name|e2
operator|.
name|setId
argument_list|(
name|e
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|e2
operator|.
name|setTitle
argument_list|(
operator|new
name|PlainTextConstruct
argument_list|(
literal|"new"
argument_list|)
argument_list|)
expr_stmt|;
name|e2
operator|.
name|setUpdated
argument_list|(
name|DateTime
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
name|storage
operator|.
name|updateEntry
argument_list|(
name|e2
argument_list|)
expr_stmt|;
name|ObjectContainer
name|container
init|=
name|getContainer
argument_list|()
decl_stmt|;
name|Query
name|query
init|=
name|container
operator|.
name|query
argument_list|()
decl_stmt|;
name|query
operator|.
name|constrain
argument_list|(
name|BaseEntry
operator|.
name|class
argument_list|)
expr_stmt|;
name|query
operator|.
name|descend
argument_list|(
literal|"id"
argument_list|)
operator|.
name|constrain
argument_list|(
name|e
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectSet
name|resultSet
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|resultSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BaseEntry
name|result
init|=
operator|(
name|BaseEntry
operator|)
name|resultSet
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"new"
argument_list|,
name|result
operator|.
name|getTitle
argument_list|()
operator|.
name|getPlainText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|result
operator|.
name|getVersionId
argument_list|()
argument_list|)
expr_stmt|;
name|ServerBaseFeed
name|bFeed
init|=
operator|new
name|ServerBaseFeed
argument_list|()
decl_stmt|;
name|bFeed
operator|.
name|setItemsPerPage
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|bFeed
operator|.
name|setId
argument_list|(
name|FEEDID
argument_list|)
expr_stmt|;
name|bFeed
operator|.
name|setStartIndex
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bFeed
operator|.
name|setServiceType
argument_list|(
name|SERVICENAME
argument_list|)
expr_stmt|;
name|storage
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorage
argument_list|()
expr_stmt|;
name|BaseFeed
argument_list|<
name|BaseFeed
argument_list|,
name|BaseEntry
argument_list|>
name|feed
init|=
name|storage
operator|.
name|getFeed
argument_list|(
name|bFeed
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|feed
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|e
operator|.
name|getId
argument_list|()
argument_list|,
name|feed
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|feed
operator|.
name|getUpdated
argument_list|()
argument_list|,
name|feed
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUpdated
argument_list|()
argument_list|)
expr_stmt|;
name|storage
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorage
argument_list|()
expr_stmt|;
name|storage
operator|.
name|storeEntry
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|e2
operator|.
name|setVersion
argument_list|(
literal|5
argument_list|)
expr_stmt|;
try|try
block|{
name|storage
operator|.
name|updateEntry
argument_list|(
name|e2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"version does not match"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// TODO: handle exception
block|}
comment|// ############ test concurrency
name|Object
name|monitor
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|reached
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|MultiThreadEntryStub
name|concuEntry
init|=
operator|new
name|MultiThreadEntryStub
argument_list|()
decl_stmt|;
name|concuEntry
operator|.
name|setId
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|""
argument_list|)
expr_stmt|;
name|ProvidedServiceConfig
name|conf
init|=
operator|new
name|ProvidedServiceConfig
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setName
argument_list|(
name|SERVICENAME
argument_list|)
expr_stmt|;
name|concuEntry
operator|.
name|setServiceConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|concuEntry
operator|.
name|setUpdated
argument_list|(
name|DateTime
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
name|concuEntry
operator|.
name|setFeedId
argument_list|(
name|FEEDID
argument_list|)
expr_stmt|;
name|storage
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorage
argument_list|()
expr_stmt|;
name|storage
operator|.
name|storeEntry
argument_list|(
name|concuEntry
argument_list|)
expr_stmt|;
name|storage
operator|.
name|close
argument_list|()
expr_stmt|;
name|concuEntry
operator|.
name|acceptGetEntryVisitor
argument_list|(
name|getMonitorVisitor
argument_list|(
name|monitor
argument_list|,
name|reached
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
name|t1
init|=
name|getUpdThread
argument_list|(
name|controller
argument_list|,
name|concuEntry
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Thread
name|t2
init|=
name|getUpdThread
argument_list|(
name|controller
argument_list|,
name|concuEntry
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|t1
operator|.
name|start
argument_list|()
expr_stmt|;
comment|/*          * Wait active -- not nice but works fine here wait until thread parked          */
while|while
condition|(
literal|true
condition|)
block|{
synchronized|synchronized
init|(
name|monitor
init|)
block|{
if|if
condition|(
name|reached
operator|.
name|get
argument_list|()
condition|)
break|break;
name|monitor
operator|.
name|wait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
name|t2
operator|.
name|start
argument_list|()
expr_stmt|;
name|t2
operator|.
name|join
argument_list|(
literal|800
argument_list|)
expr_stmt|;
comment|/*          * Wait active -- not nice but works fine here wake up the waiting          * thread          */
while|while
condition|(
literal|true
condition|)
block|{
synchronized|synchronized
init|(
name|monitor
init|)
block|{
if|if
condition|(
operator|!
name|reached
operator|.
name|get
argument_list|()
condition|)
break|break;
name|monitor
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
name|t1
operator|.
name|join
argument_list|(
literal|300
argument_list|)
expr_stmt|;
if|if
condition|(
name|fail
condition|)
name|fail
argument_list|(
literal|"thread failed -- see stacktrace"
argument_list|)
expr_stmt|;
name|container
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/*      * Test method for      * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.getFeed(ServerBaseFeed)'      */
DECL|method|testGetFeed
specifier|public
name|void
name|testGetFeed
parameter_list|()
throws|throws
name|StorageException
block|{
name|storeServerBaseFeed
argument_list|()
expr_stmt|;
name|Storage
name|storage
init|=
name|this
operator|.
name|controller
operator|.
name|getStorage
argument_list|()
decl_stmt|;
name|ServerBaseFeed
name|feed
init|=
operator|new
name|ServerBaseFeed
argument_list|()
decl_stmt|;
name|feed
operator|.
name|setItemsPerPage
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|feed
operator|.
name|setStartIndex
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|feed
operator|.
name|setServiceType
argument_list|(
name|SERVICENAME
argument_list|)
expr_stmt|;
try|try
block|{
name|storage
operator|.
name|getFeed
argument_list|(
name|feed
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"feedid is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
comment|//
block|}
name|feed
operator|.
name|setId
argument_list|(
name|FEEDID
argument_list|)
expr_stmt|;
name|BaseFeed
name|result
init|=
name|storage
operator|.
name|getFeed
argument_list|(
name|feed
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|idlist
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|30
argument_list|)
decl_stmt|;
name|ServerBaseEntry
name|e1
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|30
condition|;
name|i
operator|++
control|)
block|{
name|e1
operator|=
name|createServerBaseEntry
argument_list|()
expr_stmt|;
name|storage
operator|.
name|storeEntry
argument_list|(
name|e1
argument_list|)
expr_stmt|;
name|idlist
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|e1
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|firstId
init|=
name|e1
operator|.
name|getId
argument_list|()
decl_stmt|;
name|storage
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorage
argument_list|()
expr_stmt|;
name|result
operator|=
name|storage
operator|.
name|getFeed
argument_list|(
name|feed
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|25
argument_list|,
name|result
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|25
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|idlist
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
operator|(
operator|(
name|BaseEntry
operator|)
name|result
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|storage
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorage
argument_list|()
expr_stmt|;
name|feed
operator|.
name|setItemsPerPage
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|result
operator|=
name|storage
operator|.
name|getFeed
argument_list|(
name|feed
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|result
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|idlist
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
operator|(
operator|(
name|BaseEntry
operator|)
name|result
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|storage
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorage
argument_list|()
expr_stmt|;
name|feed
operator|.
name|setItemsPerPage
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|feed
operator|.
name|setStartIndex
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|=
name|storage
operator|.
name|getFeed
argument_list|(
name|feed
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|idlist
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|(
operator|(
name|BaseEntry
operator|)
name|result
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|storage
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorage
argument_list|()
expr_stmt|;
name|feed
operator|.
name|setItemsPerPage
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|feed
operator|.
name|setStartIndex
argument_list|(
literal|28
argument_list|)
expr_stmt|;
name|result
operator|=
name|storage
operator|.
name|getFeed
argument_list|(
name|feed
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|idlist
operator|.
name|get
argument_list|(
literal|27
argument_list|)
argument_list|,
operator|(
operator|(
name|BaseEntry
operator|)
name|result
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|idlist
operator|.
name|get
argument_list|(
literal|28
argument_list|)
argument_list|,
operator|(
operator|(
name|BaseEntry
operator|)
name|result
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|idlist
operator|.
name|get
argument_list|(
literal|29
argument_list|)
argument_list|,
operator|(
operator|(
name|BaseEntry
operator|)
name|result
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|storage
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorage
argument_list|()
expr_stmt|;
name|feed
operator|.
name|setItemsPerPage
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|feed
operator|.
name|setStartIndex
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|result
operator|=
name|storage
operator|.
name|getFeed
argument_list|(
name|feed
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|idlist
operator|.
name|get
argument_list|(
literal|29
argument_list|)
argument_list|,
operator|(
operator|(
name|BaseEntry
operator|)
name|result
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// assertNotSame(firstId,((BaseEntry)result.getEntries().get(0)).getId());
block|}
comment|/*      * Test method for      * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.getEntry(ServerBaseEntry)'      */
DECL|method|testGetEntry
specifier|public
name|void
name|testGetEntry
parameter_list|()
throws|throws
name|StorageException
block|{
name|storeServerBaseFeed
argument_list|()
expr_stmt|;
name|Storage
name|storage
init|=
name|this
operator|.
name|controller
operator|.
name|getStorage
argument_list|()
decl_stmt|;
name|ServerBaseEntry
name|exEntry
init|=
name|createServerBaseEntry
argument_list|()
decl_stmt|;
name|exEntry
operator|.
name|setId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|storage
operator|.
name|getEntry
argument_list|(
name|exEntry
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"id is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{          }
name|ServerBaseEntry
name|e
init|=
name|createServerBaseEntry
argument_list|()
decl_stmt|;
name|storage
operator|.
name|storeEntry
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|ServerBaseEntry
name|e1
init|=
name|createServerBaseEntry
argument_list|()
decl_stmt|;
name|storage
operator|.
name|storeEntry
argument_list|(
name|e1
argument_list|)
expr_stmt|;
name|storage
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorage
argument_list|()
expr_stmt|;
name|BaseEntry
name|result
init|=
name|storage
operator|.
name|getEntry
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|e
operator|.
name|getId
argument_list|()
argument_list|,
name|result
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|e1
operator|.
name|setId
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|result
operator|=
name|storage
operator|.
name|getEntry
argument_list|(
name|e1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no such entry"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*      * Test method for      * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.storeAccount(GDataAccount)'      */
DECL|method|testStoreAccount
specifier|public
name|void
name|testStoreAccount
parameter_list|()
throws|throws
name|StorageException
block|{
name|GDataAccount
name|account
init|=
operator|new
name|GDataAccount
argument_list|()
decl_stmt|;
name|account
operator|.
name|setName
argument_list|(
literal|"simon"
argument_list|)
expr_stmt|;
name|account
operator|.
name|setPassword
argument_list|(
literal|"somepass"
argument_list|)
expr_stmt|;
name|Storage
name|storage
init|=
name|this
operator|.
name|controller
operator|.
name|getStorage
argument_list|()
decl_stmt|;
name|storage
operator|.
name|storeAccount
argument_list|(
name|account
argument_list|)
expr_stmt|;
name|ObjectContainer
name|container
init|=
name|getContainer
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|container
operator|.
name|query
argument_list|()
decl_stmt|;
name|q
operator|.
name|constrain
argument_list|(
name|GDataAccount
operator|.
name|class
argument_list|)
expr_stmt|;
name|q
operator|.
name|descend
argument_list|(
literal|"name"
argument_list|)
operator|.
name|constrain
argument_list|(
name|account
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectSet
name|set
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|account
operator|.
name|getPassword
argument_list|()
argument_list|,
operator|(
operator|(
name|GDataAccount
operator|)
name|set
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|storage
operator|.
name|storeAccount
argument_list|(
name|account
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Account already stored"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{          }
name|container
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/*      * Test method for      * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.updateAccount(GDataAccount)'      */
DECL|method|testUpdateAccount
specifier|public
name|void
name|testUpdateAccount
parameter_list|()
throws|throws
name|StorageException
block|{
name|GDataAccount
name|account
init|=
operator|new
name|GDataAccount
argument_list|()
decl_stmt|;
name|account
operator|.
name|setName
argument_list|(
literal|"simon"
argument_list|)
expr_stmt|;
name|account
operator|.
name|setPassword
argument_list|(
literal|"somepass"
argument_list|)
expr_stmt|;
name|Storage
name|storage
init|=
name|this
operator|.
name|controller
operator|.
name|getStorage
argument_list|()
decl_stmt|;
try|try
block|{
name|storage
operator|.
name|updateAccount
argument_list|(
name|account
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Account does not exist"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//
block|}
try|try
block|{
name|storage
operator|.
name|updateAccount
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Account is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//
block|}
name|storage
operator|.
name|storeAccount
argument_list|(
name|account
argument_list|)
expr_stmt|;
name|ObjectContainer
name|container
init|=
name|getContainer
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|container
operator|.
name|query
argument_list|()
decl_stmt|;
name|q
operator|.
name|constrain
argument_list|(
name|GDataAccount
operator|.
name|class
argument_list|)
expr_stmt|;
name|q
operator|.
name|descend
argument_list|(
literal|"name"
argument_list|)
operator|.
name|constrain
argument_list|(
name|account
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectSet
name|set
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|account
operator|.
name|getPassword
argument_list|()
argument_list|,
operator|(
operator|(
name|GDataAccount
operator|)
name|set
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|account
operator|=
operator|new
name|GDataAccount
argument_list|()
expr_stmt|;
name|account
operator|.
name|setName
argument_list|(
literal|"simon"
argument_list|)
expr_stmt|;
name|account
operator|.
name|setPassword
argument_list|(
literal|"newPass"
argument_list|)
expr_stmt|;
name|storage
operator|.
name|updateAccount
argument_list|(
name|account
argument_list|)
expr_stmt|;
name|container
operator|.
name|close
argument_list|()
expr_stmt|;
name|container
operator|=
name|getContainer
argument_list|()
expr_stmt|;
name|q
operator|=
name|container
operator|.
name|query
argument_list|()
expr_stmt|;
name|q
operator|.
name|constrain
argument_list|(
name|GDataAccount
operator|.
name|class
argument_list|)
expr_stmt|;
name|q
operator|.
name|descend
argument_list|(
literal|"name"
argument_list|)
operator|.
name|constrain
argument_list|(
name|account
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|=
name|q
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|account
operator|.
name|getPassword
argument_list|()
argument_list|,
operator|(
operator|(
name|GDataAccount
operator|)
name|set
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|container
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/*      * Test method for      * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.deleteAccount(String)'      */
DECL|method|testDeleteAccount
specifier|public
name|void
name|testDeleteAccount
parameter_list|()
throws|throws
name|StorageException
block|{
name|GDataAccount
name|account
init|=
operator|new
name|GDataAccount
argument_list|()
decl_stmt|;
name|account
operator|.
name|setName
argument_list|(
literal|"simon"
argument_list|)
expr_stmt|;
name|account
operator|.
name|setPassword
argument_list|(
literal|"somepass"
argument_list|)
expr_stmt|;
name|Storage
name|storage
init|=
name|this
operator|.
name|controller
operator|.
name|getStorage
argument_list|()
decl_stmt|;
name|storage
operator|.
name|storeAccount
argument_list|(
name|account
argument_list|)
expr_stmt|;
name|ObjectContainer
name|container
init|=
name|getContainer
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
name|container
operator|.
name|query
argument_list|()
decl_stmt|;
name|q
operator|.
name|constrain
argument_list|(
name|GDataAccount
operator|.
name|class
argument_list|)
expr_stmt|;
name|q
operator|.
name|descend
argument_list|(
literal|"name"
argument_list|)
operator|.
name|constrain
argument_list|(
name|account
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectSet
name|set
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|storage
operator|.
name|deleteAccount
argument_list|(
name|account
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|container
operator|.
name|close
argument_list|()
expr_stmt|;
name|container
operator|=
name|getContainer
argument_list|()
expr_stmt|;
name|q
operator|=
name|container
operator|.
name|query
argument_list|()
expr_stmt|;
name|q
operator|.
name|constrain
argument_list|(
name|GDataAccount
operator|.
name|class
argument_list|)
expr_stmt|;
name|q
operator|.
name|descend
argument_list|(
literal|"name"
argument_list|)
operator|.
name|constrain
argument_list|(
name|account
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|=
name|q
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|storage
operator|.
name|deleteAccount
argument_list|(
literal|"notstored"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"account not stored"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//
block|}
try|try
block|{
name|storage
operator|.
name|deleteAccount
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"name is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//
block|}
name|container
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/*      * Test method for      * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.storeFeed(ServerBaseFeed,      * String)'      */
DECL|method|testStoreFeed
specifier|public
name|void
name|testStoreFeed
parameter_list|()
throws|throws
name|StorageException
block|{
name|ObjectContainer
name|container
init|=
name|getContainer
argument_list|()
decl_stmt|;
name|ServerBaseFeed
name|feed
init|=
operator|new
name|ServerBaseFeed
argument_list|()
decl_stmt|;
name|feed
operator|.
name|setId
argument_list|(
name|FEEDID
argument_list|)
expr_stmt|;
name|ProvidedServiceConfig
name|conf
init|=
operator|new
name|ProvidedServiceConfig
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setName
argument_list|(
name|SERVICENAME
argument_list|)
expr_stmt|;
name|feed
operator|.
name|setServiceConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Storage
name|storage
init|=
name|this
operator|.
name|controller
operator|.
name|getStorage
argument_list|()
decl_stmt|;
try|try
block|{
name|storage
operator|.
name|storeFeed
argument_list|(
name|feed
argument_list|,
name|ACCOUNTNAME
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no accoutn stored"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//
block|}
name|GDataAccount
name|account
init|=
operator|new
name|GDataAccount
argument_list|()
decl_stmt|;
name|account
operator|.
name|setName
argument_list|(
name|ACCOUNTNAME
argument_list|)
expr_stmt|;
name|account
operator|.
name|setPassword
argument_list|(
literal|"somePass"
argument_list|)
expr_stmt|;
name|container
operator|.
name|set
argument_list|(
name|account
argument_list|)
expr_stmt|;
name|container
operator|.
name|commit
argument_list|()
expr_stmt|;
name|container
operator|.
name|close
argument_list|()
expr_stmt|;
name|storage
operator|.
name|storeFeed
argument_list|(
name|feed
argument_list|,
name|ACCOUNTNAME
argument_list|)
expr_stmt|;
name|container
operator|=
name|getContainer
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|container
operator|.
name|query
argument_list|()
decl_stmt|;
name|query
operator|.
name|constrain
argument_list|(
name|ServerBaseFeed
operator|.
name|class
argument_list|)
expr_stmt|;
name|query
operator|.
name|descend
argument_list|(
literal|"feed"
argument_list|)
operator|.
name|descend
argument_list|(
literal|"id"
argument_list|)
operator|.
name|constrain
argument_list|(
name|FEEDID
argument_list|)
expr_stmt|;
name|ObjectSet
name|set
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|feed
operator|.
name|getId
argument_list|()
argument_list|,
operator|(
operator|(
name|ServerBaseFeed
operator|)
name|set
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|container
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/*      * Test method for      * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.deleteFeed(String)'      */
DECL|method|testDeleteFeed
specifier|public
name|void
name|testDeleteFeed
parameter_list|()
throws|throws
name|StorageException
block|{
name|ServerBaseFeed
name|feed
init|=
operator|new
name|ServerBaseFeed
argument_list|()
decl_stmt|;
name|feed
operator|.
name|setId
argument_list|(
name|FEEDID
argument_list|)
expr_stmt|;
name|GDataAccount
name|account
init|=
operator|new
name|GDataAccount
argument_list|()
decl_stmt|;
name|account
operator|.
name|setName
argument_list|(
name|ACCOUNTNAME
argument_list|)
expr_stmt|;
name|account
operator|.
name|setPassword
argument_list|(
literal|"somePass"
argument_list|)
expr_stmt|;
name|ObjectContainer
name|container
init|=
name|getContainer
argument_list|()
decl_stmt|;
name|container
operator|.
name|set
argument_list|(
name|account
argument_list|)
expr_stmt|;
name|container
operator|.
name|commit
argument_list|()
expr_stmt|;
name|container
operator|.
name|close
argument_list|()
expr_stmt|;
name|Storage
name|storage
init|=
name|this
operator|.
name|controller
operator|.
name|getStorage
argument_list|()
decl_stmt|;
name|ProvidedServiceConfig
name|conf
init|=
operator|new
name|ProvidedServiceConfig
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setName
argument_list|(
name|SERVICENAME
argument_list|)
expr_stmt|;
name|feed
operator|.
name|setServiceConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|storage
operator|.
name|storeFeed
argument_list|(
name|feed
argument_list|,
name|ACCOUNTNAME
argument_list|)
expr_stmt|;
name|storage
operator|.
name|deleteFeed
argument_list|(
name|FEEDID
argument_list|)
expr_stmt|;
name|container
operator|=
name|getContainer
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|container
operator|.
name|query
argument_list|()
decl_stmt|;
name|query
operator|.
name|constrain
argument_list|(
name|ServerBaseFeed
operator|.
name|class
argument_list|)
expr_stmt|;
name|query
operator|.
name|descend
argument_list|(
literal|"feed"
argument_list|)
operator|.
name|descend
argument_list|(
literal|"id"
argument_list|)
operator|.
name|constrain
argument_list|(
name|FEEDID
argument_list|)
expr_stmt|;
name|ObjectSet
name|set
init|=
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|=
name|getContainer
argument_list|()
operator|.
name|query
argument_list|()
expr_stmt|;
name|query
operator|.
name|constrain
argument_list|(
name|BaseFeed
operator|.
name|class
argument_list|)
expr_stmt|;
name|query
operator|.
name|descend
argument_list|(
literal|"id"
argument_list|)
operator|.
name|constrain
argument_list|(
name|FEEDID
argument_list|)
expr_stmt|;
name|set
operator|=
name|query
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|container
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/*      * Test method for      * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.getServiceForFeed(String)'      */
DECL|method|testGetServiceForFeed
specifier|public
name|void
name|testGetServiceForFeed
parameter_list|()
throws|throws
name|StorageException
block|{
name|ServerBaseFeed
name|feed
init|=
operator|new
name|ServerBaseFeed
argument_list|()
decl_stmt|;
name|ProvidedServiceConfig
name|conf
init|=
operator|new
name|ProvidedServiceConfig
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setName
argument_list|(
name|SERVICENAME
argument_list|)
expr_stmt|;
name|feed
operator|.
name|setServiceConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|feed
operator|.
name|setId
argument_list|(
name|FEEDID
argument_list|)
expr_stmt|;
name|GDataAccount
name|account
init|=
operator|new
name|GDataAccount
argument_list|()
decl_stmt|;
name|account
operator|.
name|setName
argument_list|(
name|ACCOUNTNAME
argument_list|)
expr_stmt|;
name|account
operator|.
name|setPassword
argument_list|(
literal|"somePass"
argument_list|)
expr_stmt|;
name|ObjectContainer
name|container
init|=
name|getContainer
argument_list|()
decl_stmt|;
name|container
operator|.
name|set
argument_list|(
name|account
argument_list|)
expr_stmt|;
name|container
operator|.
name|commit
argument_list|()
expr_stmt|;
name|container
operator|.
name|close
argument_list|()
expr_stmt|;
name|Storage
name|storage
init|=
name|this
operator|.
name|controller
operator|.
name|getStorage
argument_list|()
decl_stmt|;
name|storage
operator|.
name|storeFeed
argument_list|(
name|feed
argument_list|,
name|ACCOUNTNAME
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SERVICENAME
argument_list|,
name|storage
operator|.
name|getServiceForFeed
argument_list|(
name|FEEDID
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|storage
operator|.
name|getServiceForFeed
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"ID is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//
block|}
try|try
block|{
name|storage
operator|.
name|getServiceForFeed
argument_list|(
literal|"someOtherId"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"feed for id is not stored"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
comment|/*      * Test method for      * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.getAccount(String)'      */
DECL|method|testGetAccount
specifier|public
name|void
name|testGetAccount
parameter_list|()
throws|throws
name|StorageException
block|{
name|GDataAccount
name|account
init|=
operator|new
name|GDataAccount
argument_list|()
decl_stmt|;
name|account
operator|.
name|setName
argument_list|(
name|ACCOUNTNAME
argument_list|)
expr_stmt|;
name|account
operator|.
name|setPassword
argument_list|(
literal|"somePass"
argument_list|)
expr_stmt|;
name|ObjectContainer
name|container
init|=
name|getContainer
argument_list|()
decl_stmt|;
name|container
operator|.
name|set
argument_list|(
name|account
argument_list|)
expr_stmt|;
name|container
operator|.
name|commit
argument_list|()
expr_stmt|;
name|container
operator|.
name|close
argument_list|()
expr_stmt|;
name|Storage
name|storage
init|=
name|this
operator|.
name|controller
operator|.
name|getStorage
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|storage
operator|.
name|getAccount
argument_list|(
name|ACCOUNTNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|account
operator|.
name|getPassword
argument_list|()
argument_list|,
name|storage
operator|.
name|getAccount
argument_list|(
name|ACCOUNTNAME
argument_list|)
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|storage
operator|.
name|getAccount
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"accountname is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//
block|}
try|try
block|{
name|storage
operator|.
name|getAccount
argument_list|(
literal|"someOtherAccount"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"accountname is not stored"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
comment|/*      * Test method for      * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.updateFeed(ServerBaseFeed,      * String)'      */
DECL|method|testUpdateFeed
specifier|public
name|void
name|testUpdateFeed
parameter_list|()
throws|throws
name|StorageException
block|{
name|ObjectContainer
name|container
init|=
name|getContainer
argument_list|()
decl_stmt|;
name|ServerBaseFeed
name|feed
init|=
operator|new
name|ServerBaseFeed
argument_list|()
decl_stmt|;
name|ProvidedServiceConfig
name|conf
init|=
operator|new
name|ProvidedServiceConfig
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setName
argument_list|(
name|SERVICENAME
argument_list|)
expr_stmt|;
name|feed
operator|.
name|setId
argument_list|(
name|FEEDID
argument_list|)
expr_stmt|;
name|feed
operator|.
name|setServiceConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Storage
name|storage
init|=
name|this
operator|.
name|controller
operator|.
name|getStorage
argument_list|()
decl_stmt|;
name|GDataAccount
name|account
init|=
operator|new
name|GDataAccount
argument_list|()
decl_stmt|;
name|account
operator|.
name|setName
argument_list|(
name|ACCOUNTNAME
argument_list|)
expr_stmt|;
name|account
operator|.
name|setPassword
argument_list|(
literal|"somePass"
argument_list|)
expr_stmt|;
name|container
operator|.
name|set
argument_list|(
name|account
argument_list|)
expr_stmt|;
name|container
operator|.
name|commit
argument_list|()
expr_stmt|;
name|container
operator|.
name|close
argument_list|()
expr_stmt|;
name|storage
operator|.
name|storeFeed
argument_list|(
name|feed
argument_list|,
name|ACCOUNTNAME
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|feed
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|ServerBaseFeed
name|feedU
init|=
operator|new
name|ServerBaseFeed
argument_list|()
decl_stmt|;
name|feedU
operator|.
name|setServiceConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|feedU
operator|.
name|setId
argument_list|(
name|FEEDID
argument_list|)
expr_stmt|;
name|feedU
operator|.
name|setTitle
argument_list|(
operator|new
name|PlainTextConstruct
argument_list|(
literal|"someText"
argument_list|)
argument_list|)
expr_stmt|;
name|feedU
operator|.
name|setServiceType
argument_list|(
name|SERVICENAME
argument_list|)
expr_stmt|;
name|storage
operator|.
name|updateFeed
argument_list|(
name|feedU
argument_list|,
name|ACCOUNTNAME
argument_list|)
expr_stmt|;
name|ServerBaseFeed
name|requestFeed
init|=
operator|new
name|ServerBaseFeed
argument_list|()
decl_stmt|;
name|requestFeed
operator|.
name|setId
argument_list|(
name|FEEDID
argument_list|)
expr_stmt|;
name|requestFeed
operator|.
name|setServiceType
argument_list|(
name|SERVICENAME
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|storage
operator|.
name|getFeed
argument_list|(
name|requestFeed
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|feedU
operator|.
name|getTitle
argument_list|()
argument_list|,
name|storage
operator|.
name|getFeed
argument_list|(
name|requestFeed
argument_list|)
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|storage
operator|.
name|updateFeed
argument_list|(
literal|null
argument_list|,
name|ACCOUNTNAME
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"feed is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//
block|}
try|try
block|{
name|storage
operator|.
name|updateFeed
argument_list|(
name|feedU
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"accountname is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//
block|}
try|try
block|{
name|feedU
operator|.
name|setServiceType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|storage
operator|.
name|updateFeed
argument_list|(
name|feedU
argument_list|,
name|ACCOUNTNAME
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"servicetype is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
DECL|method|createServerBaseEntry
specifier|private
specifier|static
name|ServerBaseEntry
name|createServerBaseEntry
parameter_list|()
block|{
name|ServerBaseEntry
name|e
init|=
operator|new
name|ServerBaseEntry
argument_list|()
decl_stmt|;
name|e
operator|.
name|setId
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|""
argument_list|)
expr_stmt|;
name|ProvidedServiceConfig
name|conf
init|=
operator|new
name|ProvidedServiceConfig
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setName
argument_list|(
name|SERVICENAME
argument_list|)
expr_stmt|;
name|e
operator|.
name|setServiceConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|e
operator|.
name|setUpdated
argument_list|(
name|DateTime
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setFeedId
argument_list|(
name|FEEDID
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
name|e1
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|e
return|;
block|}
DECL|method|storeServerBaseFeed
specifier|private
name|ServerBaseFeed
name|storeServerBaseFeed
parameter_list|()
block|{
name|ServerBaseFeed
name|f
init|=
operator|new
name|ServerBaseFeed
argument_list|()
decl_stmt|;
name|ProvidedServiceConfig
name|conf
init|=
operator|new
name|ProvidedServiceConfig
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setName
argument_list|(
name|SERVICENAME
argument_list|)
expr_stmt|;
name|f
operator|.
name|setServiceConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|f
operator|.
name|setId
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|""
argument_list|)
expr_stmt|;
name|f
operator|.
name|setId
argument_list|(
name|FEEDID
argument_list|)
expr_stmt|;
name|f
operator|.
name|setUpdated
argument_list|(
name|DateTime
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectContainer
name|con
init|=
name|this
operator|.
name|controller
operator|.
name|releaseContainer
argument_list|()
decl_stmt|;
name|con
operator|.
name|set
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|con
operator|.
name|commit
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|f
return|;
block|}
DECL|class|Runner
specifier|static
class|class
name|Runner
implements|implements
name|Runnable
block|{
DECL|field|s
name|Storage
name|s
decl_stmt|;
DECL|field|c
name|StorageController
name|c
decl_stmt|;
DECL|field|e
name|ServerBaseEntry
name|e
decl_stmt|;
DECL|field|expConf
name|boolean
name|expConf
decl_stmt|;
DECL|field|op
name|StorageOperation
name|op
decl_stmt|;
DECL|method|Runner
specifier|public
name|Runner
parameter_list|(
name|StorageController
name|c
parameter_list|,
name|ServerBaseEntry
name|e
parameter_list|,
name|boolean
name|expectConflict
parameter_list|,
name|StorageOperation
name|op
parameter_list|)
block|{
name|this
operator|.
name|c
operator|=
name|c
expr_stmt|;
name|this
operator|.
name|e
operator|=
name|e
expr_stmt|;
name|this
operator|.
name|expConf
operator|=
name|expectConflict
expr_stmt|;
name|this
operator|.
name|op
operator|=
name|op
expr_stmt|;
block|}
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
operator|(
operator|(
name|DB4oController
operator|)
name|this
operator|.
name|c
operator|)
operator|.
name|visiteInitialize
argument_list|()
expr_stmt|;
name|this
operator|.
name|s
operator|=
name|this
operator|.
name|c
operator|.
name|getStorage
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e1
parameter_list|)
block|{
name|e1
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|this
operator|.
name|op
operator|==
name|StorageOperation
operator|.
name|DELETE
condition|)
name|this
operator|.
name|s
operator|.
name|deleteEntry
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|op
operator|==
name|StorageOperation
operator|.
name|UPDATE
condition|)
name|this
operator|.
name|s
operator|.
name|updateEntry
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|expConf
condition|)
name|fail
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ModificationConflictException
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|!
name|expConf
condition|)
name|fail
operator|=
literal|true
expr_stmt|;
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
operator|(
operator|(
name|DB4oController
operator|)
name|this
operator|.
name|c
operator|)
operator|.
name|visiteDestroy
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|testFeedLastModified
specifier|public
name|void
name|testFeedLastModified
parameter_list|()
block|{
name|ServerBaseFeed
name|feed
init|=
name|storeServerBaseFeed
argument_list|()
decl_stmt|;
name|Storage
name|s
init|=
name|this
operator|.
name|controller
operator|.
name|getStorage
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|feed
operator|.
name|getUpdated
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|s
operator|.
name|getFeedLastModified
argument_list|(
name|FEEDID
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|s
operator|.
name|getFeedLastModified
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"id is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{          }
try|try
block|{
name|s
operator|.
name|getFeedLastModified
argument_list|(
literal|"someOtherid"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no such feed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{          }
block|}
DECL|method|testEntryLastModified
specifier|public
name|void
name|testEntryLastModified
parameter_list|()
block|{
name|ServerBaseFeed
name|feed
init|=
name|storeServerBaseFeed
argument_list|()
decl_stmt|;
name|Storage
name|s
init|=
name|this
operator|.
name|controller
operator|.
name|getStorage
argument_list|()
decl_stmt|;
name|ServerBaseEntry
name|en
init|=
name|createServerBaseEntry
argument_list|()
decl_stmt|;
name|s
operator|.
name|storeEntry
argument_list|(
name|en
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|en
operator|.
name|getUpdated
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|s
operator|.
name|getEntryLastModified
argument_list|(
name|en
operator|.
name|getId
argument_list|()
argument_list|,
name|FEEDID
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|s
operator|.
name|getEntryLastModified
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"id is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{          }
try|try
block|{
name|s
operator|.
name|getEntryLastModified
argument_list|(
literal|"someOtherid"
argument_list|,
literal|"notinstorage"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no such Entry"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{          }
block|}
block|}
end_class
end_unit
