begin_unit
begin_package
DECL|package|org.apache.lucene.gdata.server.registry.configuration
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|configuration
package|;
end_package
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_class
DECL|class|TestPropertyInjector
specifier|public
class|class
name|TestPropertyInjector
extends|extends
name|TestCase
block|{
DECL|field|injector
specifier|private
name|PropertyInjector
name|injector
decl_stmt|;
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|this
operator|.
name|injector
operator|=
operator|new
name|PropertyInjector
argument_list|()
expr_stmt|;
block|}
DECL|method|tearDown
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/*      * Test method for      * 'org.apache.lucene.gdata.server.registry.configuration.PropertyInjector.setTargetObject(Object)'      */
DECL|method|testSetTargetObject
specifier|public
name|void
name|testSetTargetObject
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|injector
operator|.
name|setTargetObject
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must not be null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// TODO: handle exception
block|}
try|try
block|{
name|this
operator|.
name|injector
operator|.
name|setTargetObject
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no getter or setter methodes"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InjectionException
name|e
parameter_list|)
block|{
comment|// TODO: handle exception
block|}
name|this
operator|.
name|injector
operator|.
name|setTargetObject
argument_list|(
operator|new
name|TestBean
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|injector
operator|.
name|getOptionalSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|injector
operator|.
name|getRequiredSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for      * 'org.apache.lucene.gdata.server.registry.configuration.PropertyInjector.injectProperties(ConfigurationBean)'      */
DECL|method|testInjectProperties
specifier|public
name|void
name|testInjectProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|ComponentConfiguration
name|bean
init|=
operator|new
name|ComponentConfiguration
argument_list|()
decl_stmt|;
name|bean
operator|.
name|set
argument_list|(
literal|"someValue"
argument_list|,
literal|"bla"
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|injector
operator|.
name|injectProperties
argument_list|(
name|bean
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"target is not set"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{                        }
name|TestBean
name|testBean
init|=
operator|new
name|TestBean
argument_list|()
decl_stmt|;
name|this
operator|.
name|injector
operator|.
name|setTargetObject
argument_list|(
name|testBean
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|injector
operator|.
name|injectProperties
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"object is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{                        }
try|try
block|{
name|this
operator|.
name|injector
operator|.
name|injectProperties
argument_list|(
name|bean
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"requiered Property is not available in config bean"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InjectionException
name|e
parameter_list|)
block|{                    }
name|bean
operator|.
name|set
argument_list|(
literal|"test"
argument_list|,
literal|"fooBar"
argument_list|)
expr_stmt|;
name|bean
operator|.
name|set
argument_list|(
literal|"testClass"
argument_list|,
literal|"java.lang.Object"
argument_list|)
expr_stmt|;
name|this
operator|.
name|injector
operator|.
name|injectProperties
argument_list|(
name|bean
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fooBar"
argument_list|,
name|testBean
operator|.
name|getTest
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|testBean
operator|.
name|getTestClass
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|injector
operator|=
operator|new
name|PropertyInjector
argument_list|()
expr_stmt|;
name|SubTestBean
name|subTestBean
init|=
operator|new
name|SubTestBean
argument_list|()
decl_stmt|;
name|this
operator|.
name|injector
operator|.
name|setTargetObject
argument_list|(
name|subTestBean
argument_list|)
expr_stmt|;
name|bean
operator|.
name|set
argument_list|(
literal|"number"
argument_list|,
literal|"333"
argument_list|)
expr_stmt|;
name|this
operator|.
name|injector
operator|.
name|injectProperties
argument_list|(
name|bean
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fooBar"
argument_list|,
name|subTestBean
operator|.
name|getTest
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|subTestBean
operator|.
name|getTestClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|333
argument_list|,
name|subTestBean
operator|.
name|getNumber
argument_list|()
argument_list|)
expr_stmt|;
name|bean
operator|=
operator|new
name|ComponentConfiguration
argument_list|()
expr_stmt|;
name|bean
operator|.
name|set
argument_list|(
literal|"test"
argument_list|,
literal|"fooBar"
argument_list|)
expr_stmt|;
name|bean
operator|.
name|set
argument_list|(
literal|"number"
argument_list|,
literal|"333"
argument_list|)
expr_stmt|;
name|bean
operator|.
name|set
argument_list|(
literal|"wrapper"
argument_list|,
literal|"1.2"
argument_list|)
expr_stmt|;
name|subTestBean
operator|=
operator|new
name|SubTestBean
argument_list|()
expr_stmt|;
name|this
operator|.
name|injector
operator|.
name|setTargetObject
argument_list|(
name|subTestBean
argument_list|)
expr_stmt|;
name|this
operator|.
name|injector
operator|.
name|injectProperties
argument_list|(
name|bean
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fooBar"
argument_list|,
name|subTestBean
operator|.
name|getTest
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|333
argument_list|,
name|subTestBean
operator|.
name|getNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Float
argument_list|(
literal|1.2
argument_list|)
argument_list|,
name|subTestBean
operator|.
name|getWrapper
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|TestBean
specifier|public
specifier|static
class|class
name|TestBean
block|{
DECL|field|test
specifier|private
name|String
name|test
decl_stmt|;
DECL|field|testClass
specifier|private
name|Class
name|testClass
decl_stmt|;
comment|/**          * @return Returns the test.          */
DECL|method|getTest
specifier|public
name|String
name|getTest
parameter_list|()
block|{
return|return
name|test
return|;
block|}
comment|/**          * @param test The test to set.          */
annotation|@
name|Requiered
DECL|method|setTest
specifier|public
name|void
name|setTest
parameter_list|(
name|String
name|test
parameter_list|)
block|{
name|this
operator|.
name|test
operator|=
name|test
expr_stmt|;
block|}
comment|/**          * @return Returns the testClass.          */
DECL|method|getTestClass
specifier|public
name|Class
name|getTestClass
parameter_list|()
block|{
return|return
name|testClass
return|;
block|}
comment|/**          * @param testClass The testClass to set.          */
DECL|method|setTestClass
specifier|public
name|void
name|setTestClass
parameter_list|(
name|Class
name|testClass
parameter_list|)
block|{
name|this
operator|.
name|testClass
operator|=
name|testClass
expr_stmt|;
block|}
block|}
DECL|class|SubTestBean
specifier|public
specifier|static
class|class
name|SubTestBean
extends|extends
name|TestBean
block|{
DECL|field|number
specifier|private
name|int
name|number
decl_stmt|;
DECL|field|wrapper
specifier|private
name|Float
name|wrapper
decl_stmt|;
comment|/**      * @return Returns the wrapper.      */
DECL|method|getWrapper
specifier|public
name|Float
name|getWrapper
parameter_list|()
block|{
return|return
name|wrapper
return|;
block|}
comment|/**      * @param wrapper The wrapper to set.      */
DECL|method|setWrapper
specifier|public
name|void
name|setWrapper
parameter_list|(
name|Float
name|wrapper
parameter_list|)
block|{
name|this
operator|.
name|wrapper
operator|=
name|wrapper
expr_stmt|;
block|}
comment|/**      * @return Returns the number.      */
DECL|method|getNumber
specifier|public
name|int
name|getNumber
parameter_list|()
block|{
return|return
name|number
return|;
block|}
comment|/**      * @param number The number to set.      */
annotation|@
name|Requiered
DECL|method|setNumber
specifier|public
name|void
name|setNumber
parameter_list|(
name|int
name|number
parameter_list|)
block|{
name|this
operator|.
name|number
operator|=
name|number
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
