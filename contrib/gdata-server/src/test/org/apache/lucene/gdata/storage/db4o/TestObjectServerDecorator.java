begin_unit
begin_comment
comment|/**   * Copyright 2004 The Apache Software Foundation   *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   *     http://www.apache.org/licenses/LICENSE-2.0   *   * Unless required by applicable law or agreed to in writing, software   * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.storage.db4o
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|db4o
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import
begin_import
import|import
name|com
operator|.
name|db4o
operator|.
name|Db4o
import|;
end_import
begin_import
import|import
name|com
operator|.
name|db4o
operator|.
name|ObjectContainer
import|;
end_import
begin_import
import|import
name|com
operator|.
name|db4o
operator|.
name|ObjectServer
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_class
DECL|class|TestObjectServerDecorator
specifier|public
class|class
name|TestObjectServerDecorator
extends|extends
name|TestCase
block|{
DECL|field|decorator
name|ObjectServer
name|decorator
decl_stmt|;
DECL|field|actualServer
name|ObjectServer
name|actualServer
decl_stmt|;
DECL|field|dbFile
name|String
name|dbFile
init|=
literal|"test.yap"
decl_stmt|;
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|decorator
operator|=
operator|(
name|ObjectServer
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|ObjectServer
operator|.
name|class
block|}
argument_list|,
operator|new
name|ObjectServerDecorator
argument_list|(
literal|"u"
argument_list|,
literal|"p"
argument_list|,
literal|"127.0.0.1"
argument_list|,
literal|10101
argument_list|)
argument_list|)
expr_stmt|;
name|actualServer
operator|=
name|Db4o
operator|.
name|openServer
argument_list|(
name|dbFile
argument_list|,
literal|10101
argument_list|)
expr_stmt|;
name|actualServer
operator|.
name|grantAccess
argument_list|(
literal|"u"
argument_list|,
literal|"p"
argument_list|)
expr_stmt|;
block|}
DECL|method|tearDown
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|actualServer
operator|.
name|close
argument_list|()
expr_stmt|;
name|File
name|dbF
init|=
operator|new
name|File
argument_list|(
name|dbFile
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dbF
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for 'org.apache.lucene.gdata.storage.db4o.ObjectServerDecorator.invoke(Object, Method, Object[])'      */
DECL|method|testInvoke
specifier|public
name|void
name|testInvoke
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|this
operator|.
name|decorator
operator|.
name|close
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|this
operator|.
name|decorator
operator|.
name|ext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|decorator
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectContainer
name|container
init|=
name|this
operator|.
name|decorator
operator|.
name|openClient
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|this
operator|.
name|decorator
operator|.
name|openClient
argument_list|()
operator|instanceof
name|ObjectContainer
argument_list|)
expr_stmt|;
name|container
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
