begin_unit
begin_comment
comment|/**   * Copyright 2004 The Apache Software Foundation   *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   *     http://www.apache.org/licenses/LICENSE-2.0   *   * Unless required by applicable law or agreed to in writing, software   * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.storage.lucenestorage.recover
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
operator|.
name|recover
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|data
operator|.
name|ServerBaseEntry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|GDataServerRegistry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
operator|.
name|StorageEntryWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
operator|.
name|StorageModifierStub
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
operator|.
name|StorageEntryWrapper
operator|.
name|StorageOperation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|utils
operator|.
name|ProvidedServiceStub
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|DateTime
import|;
end_import
begin_class
DECL|class|TestRecoverController
specifier|public
class|class
name|TestRecoverController
extends|extends
name|TestCase
block|{
DECL|field|writeController
specifier|private
name|RecoverController
name|writeController
decl_stmt|;
DECL|field|readController
specifier|private
name|RecoverController
name|readController
decl_stmt|;
DECL|field|recDir
specifier|private
name|File
name|recDir
decl_stmt|;
DECL|field|feedId
specifier|private
name|String
name|feedId
init|=
literal|"feedid"
decl_stmt|;
DECL|field|entryId
specifier|private
name|String
name|entryId
init|=
literal|"entryId"
decl_stmt|;
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|recDir
operator|=
operator|new
name|File
argument_list|(
literal|"unittest"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|recDir
operator|.
name|exists
argument_list|()
condition|)
name|this
operator|.
name|recDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|this
operator|.
name|recDir
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|GDataServerRegistry
operator|.
name|getRegistry
argument_list|()
operator|.
name|registerService
argument_list|(
operator|new
name|ProvidedServiceStub
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|writeController
operator|=
operator|new
name|RecoverController
argument_list|(
name|this
operator|.
name|recDir
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|readController
operator|=
operator|new
name|RecoverController
argument_list|(
name|this
operator|.
name|recDir
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|tearDown
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|File
index|[]
name|files
init|=
name|this
operator|.
name|recDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|files
index|[
name|i
index|]
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|recDir
operator|.
name|delete
argument_list|()
expr_stmt|;
name|GDataServerRegistry
operator|.
name|getRegistry
argument_list|()
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
comment|/*      * Test method for 'org.apache.lucene.gdata.storage.lucenestorage.recover.RecoverController.storageModified(StorageEntryWrapper)'      */
DECL|method|testStorageModified
specifier|public
name|void
name|testStorageModified
parameter_list|()
throws|throws
name|IOException
throws|,
name|RecoverException
block|{
name|this
operator|.
name|writeController
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|ServerBaseEntry
name|entry
init|=
operator|new
name|ServerBaseEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setFeedId
argument_list|(
name|this
operator|.
name|feedId
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setId
argument_list|(
name|entryId
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setUpdated
argument_list|(
name|DateTime
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setServiceConfig
argument_list|(
operator|new
name|ProvidedServiceStub
argument_list|()
argument_list|)
expr_stmt|;
name|StorageEntryWrapper
name|wrapper
init|=
operator|new
name|StorageEntryWrapper
argument_list|(
name|entry
argument_list|,
name|StorageOperation
operator|.
name|INSERT
argument_list|)
decl_stmt|;
name|this
operator|.
name|writeController
operator|.
name|storageModified
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|recDir
operator|.
name|listFiles
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|writeController
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
comment|/*      * Test method for 'org.apache.lucene.gdata.storage.lucenestorage.recover.RecoverController.recoverEntries(StorageModifier)'      */
DECL|method|testRecoverEntries
specifier|public
name|void
name|testRecoverEntries
parameter_list|()
throws|throws
name|IOException
throws|,
name|StorageException
throws|,
name|RecoverException
block|{
name|testStorageModified
argument_list|()
expr_stmt|;
name|int
name|length
init|=
name|this
operator|.
name|recDir
operator|.
name|listFiles
argument_list|()
operator|.
name|length
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|readController
operator|.
name|initialize
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|readController
operator|.
name|recoverEntries
argument_list|(
operator|new
name|StorageModifierStub
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"unexpected exception"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|readController
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|recDir
operator|.
name|listFiles
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|createCorruptedFile
argument_list|()
expr_stmt|;
name|this
operator|.
name|readController
operator|.
name|initialize
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|readController
operator|.
name|recoverEntries
argument_list|(
operator|new
name|StorageModifierStub
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"unexpected exception"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|readController
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|this
operator|.
name|recDir
operator|.
name|listFiles
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|createCorruptedFile
specifier|private
name|void
name|createCorruptedFile
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|this
operator|.
name|recDir
argument_list|,
literal|"somefile.rec"
argument_list|)
decl_stmt|;
name|file
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|FileWriter
name|writer
init|=
operator|new
name|FileWriter
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"someString\nSomeOtherString"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
