begin_unit
begin_package
DECL|package|org.apache.lucene.gdata.storage.lucenestorage
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|data
operator|.
name|ServerBaseEntry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|ComponentType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|GDataServerRegistry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|ProvidedService
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|ModificationConflictException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|Storage
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|StorageController
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
operator|.
name|StorageEntryWrapper
operator|.
name|StorageOperation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|utils
operator|.
name|MultiThreadEntryStub
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|utils
operator|.
name|ProvidedServiceStub
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|utils
operator|.
name|Visitor
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|DateTime
import|;
end_import
begin_class
DECL|class|TestStorageImplementation
specifier|public
class|class
name|TestStorageImplementation
extends|extends
name|TestCase
block|{
DECL|field|reg
specifier|private
specifier|static
name|GDataServerRegistry
name|reg
init|=
literal|null
decl_stmt|;
DECL|field|storage
specifier|private
name|Storage
name|storage
decl_stmt|;
DECL|field|fail
specifier|public
specifier|static
name|boolean
name|fail
init|=
literal|false
decl_stmt|;
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|reg
operator|==
literal|null
condition|)
block|{
name|reg
operator|=
name|GDataServerRegistry
operator|.
name|getRegistry
argument_list|()
expr_stmt|;
if|if
condition|(
name|reg
operator|.
name|lookup
argument_list|(
name|StorageController
operator|.
name|class
argument_list|,
name|ComponentType
operator|.
name|STORAGECONTROLLER
argument_list|)
operator|!=
literal|null
condition|)
empty_stmt|;
name|reg
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|reg
operator|.
name|registerComponent
argument_list|(
name|StorageCoreControllerStub
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|storage
operator|=
name|reg
operator|.
name|lookup
argument_list|(
name|StorageController
operator|.
name|class
argument_list|,
name|ComponentType
operator|.
name|STORAGECONTROLLER
argument_list|)
operator|.
name|getStorage
argument_list|()
expr_stmt|;
block|}
DECL|method|tearDown
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|storage
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
operator|=
literal|false
expr_stmt|;
block|}
comment|/*      * Test method for      * 'org.apache.lucene.gdata.storage.lucenestorage.StorageImplementation.storeEntry(ServerBaseEntry)'      */
DECL|method|testStoreEntry
specifier|public
name|void
name|testStoreEntry
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|storage
operator|.
name|storeEntry
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"entry is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
comment|//
block|}
name|ServerBaseEntry
name|entry
init|=
operator|new
name|ServerBaseEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setServiceConfig
argument_list|(
operator|new
name|ProvidedServiceStub
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|storage
operator|.
name|storeEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"feed is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
comment|//
block|}
name|entry
operator|.
name|setFeedId
argument_list|(
literal|"someID"
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|storage
operator|.
name|storeEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e1
parameter_list|)
block|{
name|fail
argument_list|(
literal|"unexpected exception"
argument_list|)
expr_stmt|;
block|}
name|entry
operator|.
name|setServiceConfig
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|storage
operator|.
name|storeEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no service config"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{          }
name|entry
operator|.
name|setVersion
argument_list|(
literal|5
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|storage
operator|.
name|storeEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"version is greater than 1"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{          }
block|}
comment|/*      * Test method for      * 'org.apache.lucene.gdata.storage.lucenestorage.StorageImplementation.deleteEntry(ServerBaseEntry)'      */
DECL|method|testDeleteEntry
specifier|public
name|void
name|testDeleteEntry
parameter_list|()
throws|throws
name|InterruptedException
block|{
try|try
block|{
name|this
operator|.
name|storage
operator|.
name|storeEntry
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"entry is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
comment|//
block|}
name|ServerBaseEntry
name|entry
init|=
operator|new
name|ServerBaseEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setServiceConfig
argument_list|(
operator|new
name|ProvidedServiceStub
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setId
argument_list|(
literal|"someID"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setFeedId
argument_list|(
literal|"someID"
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|storage
operator|.
name|storeEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"unexpected exception"
argument_list|)
expr_stmt|;
comment|//
block|}
name|entry
operator|.
name|setFeedId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|storage
operator|.
name|deleteEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"feed is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
comment|//
block|}
name|entry
operator|.
name|setFeedId
argument_list|(
literal|"someID"
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|storage
operator|.
name|deleteEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e1
parameter_list|)
block|{
name|e1
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"unexpected exception"
argument_list|)
expr_stmt|;
block|}
name|entry
operator|.
name|setFeedId
argument_list|(
literal|"someID"
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|storage
operator|.
name|deleteEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e1
parameter_list|)
block|{
name|e1
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"unexpected exception"
argument_list|)
expr_stmt|;
block|}
name|Object
name|monitor
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|reached
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|MultiThreadEntryStub
name|concuEntry
init|=
operator|new
name|MultiThreadEntryStub
argument_list|()
decl_stmt|;
name|concuEntry
operator|.
name|setId
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|""
argument_list|)
expr_stmt|;
name|ProvidedService
name|conf
init|=
operator|new
name|ProvidedServiceStub
argument_list|()
decl_stmt|;
name|concuEntry
operator|.
name|setServiceConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|concuEntry
operator|.
name|setUpdated
argument_list|(
name|DateTime
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
name|concuEntry
operator|.
name|setFeedId
argument_list|(
literal|"feed"
argument_list|)
expr_stmt|;
name|this
operator|.
name|storage
operator|.
name|storeEntry
argument_list|(
name|concuEntry
argument_list|)
expr_stmt|;
name|storage
operator|.
name|close
argument_list|()
expr_stmt|;
name|concuEntry
operator|.
name|acceptGetVersionVisitor
argument_list|(
name|getMonitorVisitor
argument_list|(
name|monitor
argument_list|,
name|reached
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
name|t1
init|=
name|getDelThread
argument_list|(
name|storage
argument_list|,
name|concuEntry
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Thread
name|t2
init|=
name|getDelThread
argument_list|(
name|storage
argument_list|,
name|concuEntry
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|t1
operator|.
name|start
argument_list|()
expr_stmt|;
comment|/*          * Wait active -- not nice but works fine here          * wait until thread parked          */
while|while
condition|(
literal|true
condition|)
block|{
synchronized|synchronized
init|(
name|monitor
init|)
block|{
if|if
condition|(
name|reached
operator|.
name|get
argument_list|()
condition|)
break|break;
name|monitor
operator|.
name|wait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
name|t2
operator|.
name|start
argument_list|()
expr_stmt|;
name|t2
operator|.
name|join
argument_list|(
literal|800
argument_list|)
expr_stmt|;
comment|/*          * Wait active -- not nice but works fine here          * wake up the waiting thread          */
while|while
condition|(
literal|true
condition|)
block|{
synchronized|synchronized
init|(
name|monitor
init|)
block|{
if|if
condition|(
operator|!
name|reached
operator|.
name|get
argument_list|()
condition|)
break|break;
name|monitor
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
name|t1
operator|.
name|join
argument_list|(
literal|300
argument_list|)
expr_stmt|;
if|if
condition|(
name|fail
condition|)
name|fail
argument_list|(
literal|"thread failed -- see stacktrace"
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for      * 'org.apache.lucene.gdata.storage.lucenestorage.StorageImplementation.updateEntry(ServerBaseEntry)'      */
DECL|method|testUpdateEntry
specifier|public
name|void
name|testUpdateEntry
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Object
name|monitor
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|reached
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|MultiThreadEntryStub
name|concuEntry
init|=
operator|new
name|MultiThreadEntryStub
argument_list|()
decl_stmt|;
name|concuEntry
operator|.
name|setId
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|""
argument_list|)
expr_stmt|;
name|ProvidedService
name|conf
init|=
operator|new
name|ProvidedServiceStub
argument_list|()
decl_stmt|;
name|concuEntry
operator|.
name|setServiceConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|concuEntry
operator|.
name|setUpdated
argument_list|(
name|DateTime
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
name|concuEntry
operator|.
name|setFeedId
argument_list|(
literal|"feed"
argument_list|)
expr_stmt|;
name|this
operator|.
name|storage
operator|.
name|storeEntry
argument_list|(
name|concuEntry
argument_list|)
expr_stmt|;
name|storage
operator|.
name|close
argument_list|()
expr_stmt|;
name|concuEntry
operator|.
name|acceptGetEntryVisitor
argument_list|(
name|getMonitorVisitor
argument_list|(
name|monitor
argument_list|,
name|reached
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
name|t1
init|=
name|getUpdThread
argument_list|(
name|storage
argument_list|,
name|concuEntry
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Thread
name|t2
init|=
name|getUpdThread
argument_list|(
name|storage
argument_list|,
name|concuEntry
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|t1
operator|.
name|start
argument_list|()
expr_stmt|;
comment|/*          * Wait active -- not nice but works fine here          * wait until thread parked          */
while|while
condition|(
literal|true
condition|)
block|{
synchronized|synchronized
init|(
name|monitor
init|)
block|{
if|if
condition|(
name|reached
operator|.
name|get
argument_list|()
condition|)
break|break;
name|monitor
operator|.
name|wait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
name|t2
operator|.
name|start
argument_list|()
expr_stmt|;
name|t2
operator|.
name|join
argument_list|(
literal|800
argument_list|)
expr_stmt|;
comment|/*          * Wait active -- not nice but works fine here          * wake up the waiting thread          */
while|while
condition|(
literal|true
condition|)
block|{
synchronized|synchronized
init|(
name|monitor
init|)
block|{
if|if
condition|(
operator|!
name|reached
operator|.
name|get
argument_list|()
condition|)
break|break;
name|monitor
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
name|t1
operator|.
name|join
argument_list|(
literal|300
argument_list|)
expr_stmt|;
if|if
condition|(
name|fail
condition|)
name|fail
argument_list|(
literal|"thread failed -- see stacktrace"
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for      * 'org.apache.lucene.gdata.storage.lucenestorage.StorageImplementation.getFeed(ServerBaseFeed)'      */
DECL|method|testGetFeed
specifier|public
name|void
name|testGetFeed
parameter_list|()
block|{      }
comment|/*      * Test method for      * 'org.apache.lucene.gdata.storage.lucenestorage.StorageImplementation.getEntry(ServerBaseEntry)'      */
DECL|method|testGetEntry
specifier|public
name|void
name|testGetEntry
parameter_list|()
block|{      }
comment|/*      * Test method for      * 'org.apache.lucene.gdata.storage.lucenestorage.StorageImplementation.close()'      */
DECL|method|testClose
specifier|public
name|void
name|testClose
parameter_list|()
block|{      }
comment|/*      * Test method for      * 'org.apache.lucene.gdata.storage.lucenestorage.StorageImplementation.storeAccount(GDataAccount)'      */
DECL|method|testStoreAccount
specifier|public
name|void
name|testStoreAccount
parameter_list|()
block|{      }
comment|/*      * Test method for      * 'org.apache.lucene.gdata.storage.lucenestorage.StorageImplementation.updateAccount(GDataAccount)'      */
DECL|method|testUpdateAccount
specifier|public
name|void
name|testUpdateAccount
parameter_list|()
block|{      }
comment|/*      * Test method for      * 'org.apache.lucene.gdata.storage.lucenestorage.StorageImplementation.deleteAccount(String)'      */
DECL|method|testDeleteAccount
specifier|public
name|void
name|testDeleteAccount
parameter_list|()
block|{      }
comment|/*      * Test method for      * 'org.apache.lucene.gdata.storage.lucenestorage.StorageImplementation.storeFeed(ServerBaseFeed,      * String)'      */
DECL|method|testStoreFeed
specifier|public
name|void
name|testStoreFeed
parameter_list|()
block|{      }
comment|/*      * Test method for      * 'org.apache.lucene.gdata.storage.lucenestorage.StorageImplementation.deleteFeed(String)'      */
DECL|method|testDeleteFeed
specifier|public
name|void
name|testDeleteFeed
parameter_list|()
block|{      }
comment|/*      * Test method for      * 'org.apache.lucene.gdata.storage.lucenestorage.StorageImplementation.updateFeed(ServerBaseFeed,      * String)'      */
DECL|method|testUpdateFeed
specifier|public
name|void
name|testUpdateFeed
parameter_list|()
block|{      }
comment|/*      * Test method for      * 'org.apache.lucene.gdata.storage.lucenestorage.StorageImplementation.getServiceForFeed(String)'      */
DECL|method|testGetServiceForFeed
specifier|public
name|void
name|testGetServiceForFeed
parameter_list|()
block|{      }
comment|/*      * Test method for      * 'org.apache.lucene.gdata.storage.lucenestorage.StorageImplementation.getAccount(String)'      */
DECL|method|testGetAccount
specifier|public
name|void
name|testGetAccount
parameter_list|()
block|{      }
comment|/*      * Test method for      * 'org.apache.lucene.gdata.storage.lucenestorage.StorageImplementation.getAccountNameForFeedId(String)'      */
DECL|method|testGetAccountNameForFeedId
specifier|public
name|void
name|testGetAccountNameForFeedId
parameter_list|()
block|{      }
comment|/*      * Test method for      * 'org.apache.lucene.gdata.storage.lucenestorage.StorageImplementation.getEntryLastModified(String,      * String)'      */
DECL|method|testGetEntryLastModified
specifier|public
name|void
name|testGetEntryLastModified
parameter_list|()
block|{      }
comment|/*      * Test method for      * 'org.apache.lucene.gdata.storage.lucenestorage.StorageImplementation.getFeedLastModified(String)'      */
DECL|method|testGetFeedLastModified
specifier|public
name|void
name|testGetFeedLastModified
parameter_list|()
block|{      }
DECL|class|Runner
specifier|static
class|class
name|Runner
implements|implements
name|Runnable
block|{
DECL|field|s
name|Storage
name|s
decl_stmt|;
DECL|field|c
name|StorageController
name|c
decl_stmt|;
DECL|field|e
name|ServerBaseEntry
name|e
decl_stmt|;
DECL|field|expConf
name|boolean
name|expConf
decl_stmt|;
DECL|field|op
name|StorageOperation
name|op
decl_stmt|;
DECL|method|Runner
specifier|public
name|Runner
parameter_list|(
name|Storage
name|s
parameter_list|,
name|ServerBaseEntry
name|e
parameter_list|,
name|boolean
name|expectConflict
parameter_list|,
name|StorageOperation
name|op
parameter_list|)
block|{
name|this
operator|.
name|s
operator|=
name|s
expr_stmt|;
name|this
operator|.
name|e
operator|=
name|e
expr_stmt|;
name|this
operator|.
name|expConf
operator|=
name|expectConflict
expr_stmt|;
name|this
operator|.
name|op
operator|=
name|op
expr_stmt|;
block|}
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|this
operator|.
name|op
operator|==
name|StorageOperation
operator|.
name|DELETE
condition|)
name|this
operator|.
name|s
operator|.
name|deleteEntry
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|op
operator|==
name|StorageOperation
operator|.
name|UPDATE
condition|)
name|this
operator|.
name|s
operator|.
name|updateEntry
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|expConf
condition|)
name|fail
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ModificationConflictException
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|!
name|expConf
condition|)
name|fail
operator|=
literal|true
expr_stmt|;
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
DECL|method|getMonitorVisitor
specifier|private
name|Visitor
name|getMonitorVisitor
parameter_list|(
specifier|final
name|Object
name|monitor
parameter_list|,
specifier|final
name|AtomicBoolean
name|reached
parameter_list|)
block|{
comment|/*          * The executing thread stops at a defined position while holding the semaphore inside the storageImpl          */
return|return
operator|new
name|Visitor
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Object
index|[]
name|o
parameter_list|)
block|{
synchronized|synchronized
init|(
name|monitor
init|)
block|{
try|try
block|{
name|reached
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|monitor
operator|.
name|wait
argument_list|()
expr_stmt|;
name|reached
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
block|}
block|}
return|;
block|}
DECL|method|getDelThread
specifier|private
name|Thread
name|getDelThread
parameter_list|(
name|Storage
name|s
parameter_list|,
name|ServerBaseEntry
name|e
parameter_list|,
name|boolean
name|conflictExpected
parameter_list|)
block|{
name|Thread
name|t1
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runner
argument_list|(
name|s
argument_list|,
name|e
argument_list|,
name|conflictExpected
argument_list|,
name|StorageOperation
operator|.
name|DELETE
argument_list|)
argument_list|)
decl_stmt|;
name|t1
operator|.
name|setPriority
argument_list|(
name|Thread
operator|.
name|MAX_PRIORITY
argument_list|)
expr_stmt|;
return|return
name|t1
return|;
block|}
DECL|method|getUpdThread
specifier|private
name|Thread
name|getUpdThread
parameter_list|(
name|Storage
name|s
parameter_list|,
name|ServerBaseEntry
name|e
parameter_list|,
name|boolean
name|conflictExpected
parameter_list|)
block|{
name|Thread
name|t1
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runner
argument_list|(
name|s
argument_list|,
name|e
argument_list|,
name|conflictExpected
argument_list|,
name|StorageOperation
operator|.
name|UPDATE
argument_list|)
argument_list|)
decl_stmt|;
name|t1
operator|.
name|setPriority
argument_list|(
name|Thread
operator|.
name|MAX_PRIORITY
argument_list|)
expr_stmt|;
return|return
name|t1
return|;
block|}
block|}
end_class
end_unit
