begin_unit
begin_package
DECL|package|org.apache.lucene.gdata.storage.lucenestorage
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|FeedNotFoundException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|FeedInstanceConfigurator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|GDataServerRegistry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|RegistryBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
operator|.
name|StorageCoreController
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
operator|.
name|StorageEntryWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
operator|.
name|StorageModifier
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
operator|.
name|StorageQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
operator|.
name|StorageEntryWrapper
operator|.
name|StorageOperation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
operator|.
name|util
operator|.
name|ReferenceCounter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Hits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|BaseEntry
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|DateTime
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|ExtensionProfile
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|Feed
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|PlainTextConstruct
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|TextConstruct
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|TextContent
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|util
operator|.
name|ParseException
import|;
end_import
begin_class
DECL|class|TestStorageModifier
specifier|public
class|class
name|TestStorageModifier
extends|extends
name|TestCase
block|{
DECL|field|modifier
specifier|private
name|StorageModifier
name|modifier
decl_stmt|;
DECL|field|count
specifier|private
name|int
name|count
init|=
literal|1
decl_stmt|;
DECL|field|profile
specifier|private
name|ExtensionProfile
name|profile
decl_stmt|;
DECL|field|dir
specifier|private
name|Directory
name|dir
decl_stmt|;
DECL|field|feedId
specifier|private
specifier|static
name|String
name|feedId
init|=
literal|"myFeed"
decl_stmt|;
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|FeedInstanceConfigurator
name|configurator
init|=
operator|new
name|FeedInstanceConfigurator
argument_list|()
decl_stmt|;
name|configurator
operator|.
name|setFeedType
argument_list|(
name|Feed
operator|.
name|class
argument_list|)
expr_stmt|;
name|configurator
operator|.
name|setFeedId
argument_list|(
name|feedId
argument_list|)
expr_stmt|;
name|configurator
operator|.
name|setExtensionProfileClass
argument_list|(
name|ExtensionProfile
operator|.
name|class
argument_list|)
expr_stmt|;
name|GDataServerRegistry
operator|.
name|getRegistry
argument_list|()
operator|.
name|registerFeed
argument_list|(
name|configurator
argument_list|)
expr_stmt|;
name|dir
operator|=
operator|new
name|RAMDirectory
argument_list|()
expr_stmt|;
name|this
operator|.
name|profile
operator|=
operator|new
name|ExtensionProfile
argument_list|()
expr_stmt|;
name|IndexWriter
name|writer
decl_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|modifier
operator|=
name|StorageCoreController
operator|.
name|getStorageCoreController
argument_list|(
name|dir
argument_list|)
operator|.
name|getStorageModifier
argument_list|()
expr_stmt|;
block|}
DECL|method|tearDown
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|count
operator|=
literal|1
expr_stmt|;
comment|// destroy all resources
name|GDataServerRegistry
operator|.
name|getRegistry
argument_list|()
operator|.
name|destroy
argument_list|()
expr_stmt|;
comment|//TODO remove dependency here
block|}
comment|/*       * Test method for       * 'org.apache.lucene.storage.lucenestorage.StorageModifier.StorageModifier(Directory,       * int)'       */
DECL|method|testStorageModifier
specifier|public
name|void
name|testStorageModifier
parameter_list|()
block|{        }
comment|/*       * Test method for       * 'org.apache.lucene.storage.lucenestorage.StorageModifier.updateEntry(StroageEntryWrapper)'       */
DECL|method|testUpdateEntry
specifier|public
name|void
name|testUpdateEntry
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|FeedNotFoundException
throws|,
name|ParseException
throws|,
name|StorageException
block|{
name|testInsertEntry
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|this
operator|.
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Entry
name|e
init|=
operator|new
name|Entry
argument_list|()
decl_stmt|;
name|e
operator|.
name|setId
argument_list|(
literal|""
operator|+
name|i
argument_list|)
expr_stmt|;
name|String
name|insertString
init|=
literal|"Hello world"
operator|+
name|i
decl_stmt|;
name|e
operator|.
name|setTitle
argument_list|(
operator|new
name|PlainTextConstruct
argument_list|(
name|insertString
argument_list|)
argument_list|)
expr_stmt|;
name|StorageEntryWrapper
name|wrapper
init|=
operator|new
name|StorageEntryWrapper
argument_list|(
name|e
argument_list|,
name|feedId
argument_list|,
name|StorageOperation
operator|.
name|UPDATE
argument_list|,
name|this
operator|.
name|profile
argument_list|)
decl_stmt|;
name|this
operator|.
name|modifier
operator|.
name|updateEntry
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|innerQuery
init|=
name|StorageCoreController
operator|.
name|getStorageCoreController
argument_list|()
operator|.
name|getStorageQuery
argument_list|()
decl_stmt|;
name|BaseEntry
name|fetchedEntry
init|=
name|innerQuery
operator|.
name|get
argument_list|()
operator|.
name|singleEntryQuery
argument_list|(
literal|""
operator|+
name|i
argument_list|,
name|feedId
argument_list|,
name|this
operator|.
name|profile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"updated Title:"
argument_list|,
name|insertString
argument_list|,
name|fetchedEntry
operator|.
name|getTitle
argument_list|()
operator|.
name|getPlainText
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// double updates
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|this
operator|.
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Entry
name|e
init|=
operator|new
name|Entry
argument_list|()
decl_stmt|;
name|e
operator|.
name|setId
argument_list|(
literal|""
operator|+
name|i
argument_list|)
expr_stmt|;
name|String
name|insertString
init|=
literal|"Hello world"
operator|+
name|i
decl_stmt|;
name|e
operator|.
name|setTitle
argument_list|(
operator|new
name|PlainTextConstruct
argument_list|(
name|insertString
argument_list|)
argument_list|)
expr_stmt|;
name|StorageEntryWrapper
name|wrapper
init|=
operator|new
name|StorageEntryWrapper
argument_list|(
name|e
argument_list|,
name|feedId
argument_list|,
name|StorageOperation
operator|.
name|UPDATE
argument_list|,
name|this
operator|.
name|profile
argument_list|)
decl_stmt|;
name|this
operator|.
name|modifier
operator|.
name|updateEntry
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
name|e
operator|=
operator|new
name|Entry
argument_list|()
expr_stmt|;
name|e
operator|.
name|setId
argument_list|(
literal|""
operator|+
name|i
argument_list|)
expr_stmt|;
name|insertString
operator|=
literal|"Foo Bar"
operator|+
name|i
expr_stmt|;
name|e
operator|.
name|setTitle
argument_list|(
operator|new
name|PlainTextConstruct
argument_list|(
name|insertString
argument_list|)
argument_list|)
expr_stmt|;
name|wrapper
operator|=
operator|new
name|StorageEntryWrapper
argument_list|(
name|e
argument_list|,
name|feedId
argument_list|,
name|StorageOperation
operator|.
name|UPDATE
argument_list|,
name|this
operator|.
name|profile
argument_list|)
expr_stmt|;
name|this
operator|.
name|modifier
operator|.
name|updateEntry
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|innerQuery
init|=
name|StorageCoreController
operator|.
name|getStorageCoreController
argument_list|()
operator|.
name|getStorageQuery
argument_list|()
decl_stmt|;
name|BaseEntry
name|fetchedEntry
init|=
name|innerQuery
operator|.
name|get
argument_list|()
operator|.
name|singleEntryQuery
argument_list|(
literal|""
operator|+
name|i
argument_list|,
name|feedId
argument_list|,
name|this
operator|.
name|profile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"updated Title:"
argument_list|,
name|insertString
argument_list|,
name|fetchedEntry
operator|.
name|getTitle
argument_list|()
operator|.
name|getPlainText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*       * Test method for       * 'org.apache.lucene.storage.lucenestorage.StorageModifier.insertEntry(StroageEntryWrapper)'       */
DECL|method|testInsertEntry
specifier|public
name|void
name|testInsertEntry
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|FeedNotFoundException
throws|,
name|ParseException
throws|,
name|StorageException
block|{
name|Thread
name|a
init|=
name|getRunnerThread
argument_list|(
name|this
operator|.
name|count
argument_list|)
decl_stmt|;
name|a
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
name|b
init|=
name|getRunnerThread
argument_list|(
operator|(
name|this
operator|.
name|count
operator|+=
literal|10
operator|)
argument_list|)
decl_stmt|;
name|b
operator|.
name|start
argument_list|()
expr_stmt|;
name|a
operator|.
name|join
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|this
operator|.
name|count
condition|;
name|i
operator|++
control|)
block|{
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|innerQuery
init|=
name|StorageCoreController
operator|.
name|getStorageCoreController
argument_list|()
operator|.
name|getStorageQuery
argument_list|()
decl_stmt|;
name|BaseEntry
name|e
init|=
name|innerQuery
operator|.
name|get
argument_list|()
operator|.
name|singleEntryQuery
argument_list|(
literal|""
operator|+
name|i
argument_list|,
name|feedId
argument_list|,
name|this
operator|.
name|profile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"get entry for id"
operator|+
name|i
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|e
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|join
argument_list|()
expr_stmt|;
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|query
init|=
name|StorageCoreController
operator|.
name|getStorageCoreController
argument_list|()
operator|.
name|getStorageQuery
argument_list|()
decl_stmt|;
name|this
operator|.
name|count
operator|+=
literal|10
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|this
operator|.
name|count
condition|;
name|i
operator|++
control|)
block|{
name|BaseEntry
name|e
init|=
name|query
operator|.
name|get
argument_list|()
operator|.
name|singleEntryQuery
argument_list|(
literal|""
operator|+
name|i
argument_list|,
name|feedId
argument_list|,
name|this
operator|.
name|profile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"get entry for id"
operator|+
name|i
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|e
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|BaseEntry
name|e
init|=
name|query
operator|.
name|get
argument_list|()
operator|.
name|singleEntryQuery
argument_list|(
literal|""
operator|+
name|this
operator|.
name|count
argument_list|,
name|feedId
argument_list|,
name|this
operator|.
name|profile
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"not entry for ID"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|query
operator|.
name|decrementRef
argument_list|()
expr_stmt|;
block|}
comment|/*       * Test method for       * 'org.apache.lucene.storage.lucenestorage.StorageModifier.deleteEntry(String)'       */
DECL|method|testDeleteEntry
specifier|public
name|void
name|testDeleteEntry
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|FeedNotFoundException
throws|,
name|ParseException
throws|,
name|StorageException
block|{
name|testInsertEntry
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|this
operator|.
name|count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
operator|||
name|i
operator|<
literal|10
condition|)
block|{
name|this
operator|.
name|modifier
operator|.
name|deleteEntry
argument_list|(
literal|""
operator|+
name|i
argument_list|,
name|feedId
argument_list|)
expr_stmt|;
block|}
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|query
init|=
name|StorageCoreController
operator|.
name|getStorageCoreController
argument_list|()
operator|.
name|getStorageQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
operator|||
name|i
operator|<
literal|10
condition|)
block|{
name|assertNull
argument_list|(
name|query
operator|.
name|get
argument_list|()
operator|.
name|singleEntryQuery
argument_list|(
literal|""
operator|+
name|i
argument_list|,
name|feedId
argument_list|,
name|this
operator|.
name|profile
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|assertEquals
argument_list|(
literal|""
operator|+
name|i
argument_list|,
name|query
operator|.
name|get
argument_list|()
operator|.
name|singleEntryQuery
argument_list|(
literal|""
operator|+
name|i
argument_list|,
name|feedId
argument_list|,
name|this
operator|.
name|profile
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|decrementRef
argument_list|()
expr_stmt|;
block|}
name|StorageCoreController
operator|.
name|getStorageCoreController
argument_list|()
operator|.
name|forceWrite
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|this
operator|.
name|dir
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|this
operator|.
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Query
name|luceneQuery
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|StorageEntryWrapper
operator|.
name|FIELD_ENTRY_ID
argument_list|,
literal|""
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|Hits
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|luceneQuery
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
operator|||
name|i
operator|<
literal|10
condition|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hits
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getRunnerThread
specifier|private
name|Thread
name|getRunnerThread
parameter_list|(
name|int
name|idIndex
parameter_list|)
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runner
argument_list|(
name|idIndex
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|t
return|;
block|}
DECL|class|Runner
specifier|private
class|class
name|Runner
implements|implements
name|Runnable
block|{
DECL|field|idIndex
specifier|private
name|int
name|idIndex
decl_stmt|;
DECL|method|Runner
specifier|public
name|Runner
parameter_list|(
name|int
name|idIndex
parameter_list|)
block|{
name|this
operator|.
name|idIndex
operator|=
name|idIndex
expr_stmt|;
block|}
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
name|idIndex
init|;
name|i
operator|<
name|idIndex
operator|+
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|BaseEntry
name|e
init|=
name|buildEntry
argument_list|(
literal|""
operator|+
name|i
argument_list|)
decl_stmt|;
try|try
block|{
name|StorageEntryWrapper
name|wrapper
init|=
operator|new
name|StorageEntryWrapper
argument_list|(
name|e
argument_list|,
name|feedId
argument_list|,
name|StorageOperation
operator|.
name|INSERT
argument_list|,
operator|new
name|ExtensionProfile
argument_list|()
argument_list|)
decl_stmt|;
name|modifier
operator|.
name|insertEntry
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
name|e1
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|//end run
DECL|method|buildEntry
specifier|private
name|BaseEntry
name|buildEntry
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|Entry
name|e
init|=
operator|new
name|Entry
argument_list|()
decl_stmt|;
name|e
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|e
operator|.
name|setTitle
argument_list|(
operator|new
name|PlainTextConstruct
argument_list|(
literal|"Monty Python"
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|setPublished
argument_list|(
name|DateTime
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setUpdated
argument_list|(
name|DateTime
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|content
init|=
literal|"1st soldier with a keen interest in birds: Who goes there?"
operator|+
literal|"King Arthur: It is I, Arthur, son of Uther Pendragon, from the castle of Camelot. King of the Britons, defeater of the Saxons, Sovereign of all England!"
operator|+
literal|"1st soldier with a keen interest in birds: Pull the other one!"
operator|+
literal|"King Arthur: I am, and this is my trusty servant Patsy. We have ridden the length and breadth of the land in search of knights who will join me in my court at Camelot. I must speak with your lord and master."
operator|+
literal|"1st soldier with a keen interest in birds: What? Ridden on a horse?"
operator|+
literal|"King Arthur: Yes!"
decl_stmt|;
name|e
operator|.
name|setContent
argument_list|(
operator|new
name|TextContent
argument_list|(
operator|new
name|PlainTextConstruct
argument_list|(
name|content
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|setSummary
argument_list|(
operator|new
name|PlainTextConstruct
argument_list|(
literal|"The Holy Grail"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|e
return|;
block|}
block|}
block|}
end_class
end_unit
