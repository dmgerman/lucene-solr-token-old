begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.search.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|search
operator|.
name|index
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import
begin_comment
comment|/**  * @author Simon Willnauer  *  */
end_comment
begin_class
DECL|class|FutureStub
specifier|public
class|class
name|FutureStub
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Future
argument_list|<
name|T
argument_list|>
block|{
DECL|field|object
name|T
name|object
decl_stmt|;
DECL|field|latch
name|CountDownLatch
name|latch
decl_stmt|;
DECL|field|wait
name|boolean
name|wait
decl_stmt|;
comment|/**      *       */
DECL|method|FutureStub
specifier|public
name|FutureStub
parameter_list|(
name|T
name|returnObject
parameter_list|,
name|CountDownLatch
name|latch
parameter_list|)
block|{
name|this
argument_list|(
name|returnObject
argument_list|,
name|latch
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      *       */
DECL|method|FutureStub
specifier|public
name|FutureStub
parameter_list|(
name|T
name|returnObject
parameter_list|,
name|CountDownLatch
name|latch
parameter_list|,
name|boolean
name|wait
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|object
operator|=
name|returnObject
expr_stmt|;
name|this
operator|.
name|latch
operator|=
name|latch
expr_stmt|;
name|this
operator|.
name|wait
operator|=
name|wait
expr_stmt|;
block|}
DECL|method|FutureStub
specifier|public
name|FutureStub
parameter_list|(
name|T
name|returnObject
parameter_list|)
block|{
name|this
argument_list|(
name|returnObject
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see java.util.concurrent.Future#cancel(boolean)      */
DECL|method|cancel
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|arg0
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
comment|/**      * @see java.util.concurrent.Future#isCancelled()      */
DECL|method|isCancelled
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * @see java.util.concurrent.Future#isDone()      */
DECL|method|isDone
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * @see java.util.concurrent.Future#get()      */
DECL|method|get
specifier|public
name|T
name|get
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|doLatch
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|object
return|;
block|}
comment|/**      * @see java.util.concurrent.Future#get(long, java.util.concurrent.TimeUnit)      */
DECL|method|get
specifier|public
name|T
name|get
parameter_list|(
name|long
name|arg0
parameter_list|,
name|TimeUnit
name|arg1
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
name|doLatch
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|object
return|;
block|}
DECL|method|doLatch
specifier|private
name|void
name|doLatch
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|latch
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|wait
condition|)
name|this
operator|.
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
else|else
name|this
operator|.
name|latch
operator|.
name|await
argument_list|(
literal|5000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
