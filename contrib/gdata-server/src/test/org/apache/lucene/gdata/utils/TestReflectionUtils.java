begin_unit
begin_comment
comment|/**   * Copyright 2004 The Apache Software Foundation   *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   *     http://www.apache.org/licenses/LICENSE-2.0   *   * Unless required by applicable law or agreed to in writing, software   * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.utils
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|utils
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|search
operator|.
name|analysis
operator|.
name|PlainTextStrategy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|search
operator|.
name|config
operator|.
name|IndexSchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|utils
operator|.
name|ReflectionUtils
operator|.
name|ReflectionException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|RangeQuery
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_class
DECL|class|TestReflectionUtils
specifier|public
class|class
name|TestReflectionUtils
extends|extends
name|TestCase
block|{
comment|/*      * Test method for 'org.apache.lucene.gdata.utils.ReflectionUtils.implementsType(Class, Class)'      */
DECL|method|testImplementsType
specifier|public
name|void
name|testImplementsType
parameter_list|()
block|{      }
comment|/*      * Test method for 'org.apache.lucene.gdata.utils.ReflectionUtils.extendsType(Class, Class)'      */
DECL|method|testExtendsType
specifier|public
name|void
name|testExtendsType
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|ReflectionUtils
operator|.
name|isTypeOf
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|Number
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ReflectionUtils
operator|.
name|isTypeOf
argument_list|(
literal|null
argument_list|,
name|CharSequence
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for 'org.apache.lucene.gdata.utils.ReflectionUtils.isTypeOf(Class, Class)'      */
DECL|method|testIsTypeOf
specifier|public
name|void
name|testIsTypeOf
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|ReflectionUtils
operator|.
name|isTypeOf
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|CharSequence
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ReflectionUtils
operator|.
name|isTypeOf
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|Number
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ReflectionUtils
operator|.
name|isTypeOf
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|CharSequence
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ReflectionUtils
operator|.
name|isTypeOf
argument_list|(
literal|null
argument_list|,
name|CharSequence
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ReflectionUtils
operator|.
name|isTypeOf
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for 'org.apache.lucene.gdata.utils.ReflectionUtils.getDefaultInstance(Class<T>)<T>'      */
DECL|method|testGetDefaultInstance
specifier|public
name|void
name|testGetDefaultInstance
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|()
argument_list|,
name|ReflectionUtils
operator|.
name|getDefaultInstance
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|ReflectionUtils
operator|.
name|getDefaultInstance
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"can not create instance"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReflectionException
name|e
parameter_list|)
block|{                      }
try|try
block|{
name|ReflectionUtils
operator|.
name|getDefaultInstance
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"can not create instance"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReflectionException
name|e
parameter_list|)
block|{                              }
block|}
comment|/*      * Test method for 'org.apache.lucene.gdata.utils.ReflectionUtils.canCreateInstance(Class)'      */
DECL|method|testCanCreateInstance
specifier|public
name|void
name|testCanCreateInstance
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|ReflectionUtils
operator|.
name|canCreateInstance
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ReflectionUtils
operator|.
name|canCreateInstance
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ReflectionUtils
operator|.
name|canCreateInstance
argument_list|(
name|Integer
operator|.
name|TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ReflectionUtils
operator|.
name|canCreateInstance
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for 'org.apache.lucene.gdata.utils.ReflectionUtils.getPrimitiveWrapper(Class)'      */
DECL|method|testGetPrimitiveWrapper
specifier|public
name|void
name|testGetPrimitiveWrapper
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|ReflectionUtils
operator|.
name|getPrimitiveWrapper
argument_list|(
name|Integer
operator|.
name|TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|ReflectionUtils
operator|.
name|getPrimitiveWrapper
argument_list|(
name|Long
operator|.
name|TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|class
argument_list|,
name|ReflectionUtils
operator|.
name|getPrimitiveWrapper
argument_list|(
name|Float
operator|.
name|TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Byte
operator|.
name|class
argument_list|,
name|ReflectionUtils
operator|.
name|getPrimitiveWrapper
argument_list|(
name|Byte
operator|.
name|TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|class
argument_list|,
name|ReflectionUtils
operator|.
name|getPrimitiveWrapper
argument_list|(
name|Double
operator|.
name|TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Short
operator|.
name|class
argument_list|,
name|ReflectionUtils
operator|.
name|getPrimitiveWrapper
argument_list|(
name|Short
operator|.
name|TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
name|ReflectionUtils
operator|.
name|getPrimitiveWrapper
argument_list|(
name|Boolean
operator|.
name|TYPE
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|ReflectionUtils
operator|.
name|getPrimitiveWrapper
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"type is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReflectionException
name|e
parameter_list|)
block|{                      }
try|try
block|{
name|ReflectionUtils
operator|.
name|getPrimitiveWrapper
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"type is not a primitive"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReflectionException
name|e
parameter_list|)
block|{                              }
block|}
DECL|method|testHasdesiredconstructor
specifier|public
name|void
name|testHasdesiredconstructor
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|ReflectionUtils
operator|.
name|hasDesiredConstructor
argument_list|(
name|PlainTextStrategy
operator|.
name|class
argument_list|,
operator|new
name|Class
index|[]
block|{
name|IndexSchemaField
operator|.
name|class
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ReflectionUtils
operator|.
name|hasDesiredConstructor
argument_list|(
name|PlainTextStrategy
operator|.
name|class
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ReflectionUtils
operator|.
name|hasDesiredConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|,
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
