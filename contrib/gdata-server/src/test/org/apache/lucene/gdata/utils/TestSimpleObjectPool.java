begin_unit
begin_package
DECL|package|org.apache.lucene.gdata.utils
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|utils
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_class
DECL|class|TestSimpleObjectPool
specifier|public
class|class
name|TestSimpleObjectPool
extends|extends
name|TestCase
block|{
DECL|field|testPool
specifier|private
name|Pool
name|testPool
decl_stmt|;
DECL|field|SIZE
specifier|private
name|int
name|SIZE
init|=
literal|10
decl_stmt|;
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|testPool
operator|=
operator|new
name|SimpleObjectPool
argument_list|(
name|SIZE
argument_list|,
operator|new
name|ObjectFactoryStub
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|tearDown
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/*      * Test method for 'org.apache.lucene.gdata.utils.SimpleObjectPool.SimpleObjectPool(int, PoolObjectFactory<Type>)'      */
DECL|method|testSimpleObjectPool
specifier|public
name|void
name|testSimpleObjectPool
parameter_list|()
block|{
name|SimpleObjectPool
name|pool
init|=
operator|new
name|SimpleObjectPool
argument_list|(
literal|1
argument_list|,
operator|new
name|ObjectFactoryStub
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|pool
operator|.
name|getSize
argument_list|()
argument_list|,
name|SimpleObjectPool
operator|.
name|MINIMALSIZE
argument_list|)
expr_stmt|;
name|pool
operator|=
operator|new
name|SimpleObjectPool
argument_list|(
operator|-
literal|100
argument_list|,
operator|new
name|ObjectFactoryStub
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pool
operator|.
name|getSize
argument_list|()
argument_list|,
name|SimpleObjectPool
operator|.
name|MINIMALSIZE
argument_list|)
expr_stmt|;
name|pool
operator|=
operator|new
name|SimpleObjectPool
argument_list|(
operator|new
name|ObjectFactoryStub
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pool
operator|.
name|getSize
argument_list|()
argument_list|,
name|SimpleObjectPool
operator|.
name|DEFAULTSIZE
argument_list|)
expr_stmt|;
name|pool
operator|=
operator|new
name|SimpleObjectPool
argument_list|(
literal|100
argument_list|,
operator|new
name|ObjectFactoryStub
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|pool
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|pool
operator|=
operator|new
name|SimpleObjectPool
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"factory must not be null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO: handle exception
block|}
block|}
comment|/*      * Test method for 'org.apache.lucene.gdata.utils.SimpleObjectPool.aquire()'      */
DECL|method|testAquire
specifier|public
name|void
name|testAquire
parameter_list|()
block|{
name|List
name|l
init|=
operator|new
name|ArrayList
argument_list|(
name|SIZE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SIZE
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o
init|=
name|this
operator|.
name|testPool
operator|.
name|aquire
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|l
operator|.
name|contains
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Object
name|object
range|:
name|l
control|)
block|{
name|this
operator|.
name|testPool
operator|.
name|release
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SIZE
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o
init|=
name|this
operator|.
name|testPool
operator|.
name|aquire
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|contains
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * Test method for 'org.apache.lucene.gdata.utils.SimpleObjectPool.release(Type)'      */
DECL|method|testRelease
specifier|public
name|void
name|testRelease
parameter_list|()
block|{
name|List
name|l
init|=
operator|new
name|ArrayList
argument_list|(
name|SIZE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SIZE
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o
init|=
name|this
operator|.
name|testPool
operator|.
name|aquire
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|l
operator|.
name|contains
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Object
name|object
range|:
name|l
control|)
block|{
name|this
operator|.
name|testPool
operator|.
name|release
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|testPool
operator|.
name|release
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SIZE
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o
init|=
name|this
operator|.
name|testPool
operator|.
name|aquire
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|contains
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//############################
for|for
control|(
name|Object
name|object
range|:
name|l
control|)
block|{
name|this
operator|.
name|testPool
operator|.
name|release
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SIZE
operator|+
name|SIZE
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o
init|=
name|this
operator|.
name|testPool
operator|.
name|aquire
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|SIZE
condition|)
name|assertFalse
argument_list|(
name|l
operator|.
name|contains
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|assertTrue
argument_list|(
name|l
operator|.
name|contains
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDestroy
specifier|public
name|void
name|testDestroy
parameter_list|()
block|{
name|this
operator|.
name|testPool
operator|.
name|destroy
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|testPool
operator|.
name|aquire
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"pool is already closed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO: handle exception
block|}
name|this
operator|.
name|testPool
operator|.
name|release
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|ObjectFactoryStub
specifier|static
class|class
name|ObjectFactoryStub
implements|implements
name|PoolObjectFactory
block|{
DECL|method|getInstance
specifier|public
name|Object
name|getInstance
parameter_list|()
block|{
return|return
operator|new
name|Object
argument_list|()
return|;
block|}
DECL|method|destroyInstance
specifier|public
name|void
name|destroyInstance
parameter_list|(
name|Object
name|type
parameter_list|)
block|{
comment|//
block|}
block|}
block|}
end_class
end_unit
