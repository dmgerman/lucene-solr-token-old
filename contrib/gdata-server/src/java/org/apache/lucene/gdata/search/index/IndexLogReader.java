begin_unit
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.search.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|search
operator|.
name|index
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Locator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|XMLReaderFactory
import|;
end_import
begin_comment
comment|/**  * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|IndexLogReader
class|class
name|IndexLogReader
block|{
DECL|method|readIndexLog
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|IndexAction
argument_list|>
name|readIndexLog
parameter_list|(
name|File
name|indexLogFile
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|IndexAction
argument_list|>
name|contentMap
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
name|XMLReader
name|reader
init|=
name|XMLReaderFactory
operator|.
name|createXMLReader
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|IndexAction
argument_list|>
name|logContent
init|=
name|contentMap
decl_stmt|;
if|if
condition|(
name|logContent
operator|==
literal|null
condition|)
name|logContent
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|IndexAction
argument_list|>
argument_list|(
literal|64
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
operator|new
name|IndexLogContentHandler
argument_list|(
name|logContent
argument_list|)
argument_list|)
expr_stmt|;
name|InputSource
name|source
init|=
operator|new
name|InputSource
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|indexLogFile
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|reader
operator|.
name|parse
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
comment|/*              * try to append the Root element end              * this happens if the server crashes.              * If it dies while writing an entry the log file has to be fixed manually              */
name|IndexLogWriter
operator|.
name|tryCloseRoot
argument_list|(
name|indexLogFile
argument_list|)
expr_stmt|;
name|source
operator|=
operator|new
name|InputSource
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|indexLogFile
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|parse
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
return|return
name|logContent
return|;
block|}
DECL|class|IndexLogContentHandler
specifier|private
specifier|static
class|class
name|IndexLogContentHandler
implements|implements
name|ContentHandler
block|{
DECL|field|logContent
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|IndexAction
argument_list|>
name|logContent
decl_stmt|;
DECL|field|currentID
specifier|private
name|String
name|currentID
decl_stmt|;
DECL|field|currentAction
specifier|private
name|String
name|currentAction
decl_stmt|;
DECL|field|isId
specifier|private
name|boolean
name|isId
decl_stmt|;
DECL|field|isAction
specifier|private
name|boolean
name|isAction
decl_stmt|;
DECL|method|IndexLogContentHandler
name|IndexLogContentHandler
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|IndexAction
argument_list|>
name|content
parameter_list|)
block|{
name|this
operator|.
name|logContent
operator|=
name|content
expr_stmt|;
block|}
comment|/**          * @see org.xml.sax.ContentHandler#setDocumentLocator(org.xml.sax.Locator)          */
DECL|method|setDocumentLocator
specifier|public
name|void
name|setDocumentLocator
parameter_list|(
name|Locator
name|locator
parameter_list|)
block|{         }
comment|/**          * @see org.xml.sax.ContentHandler#startDocument()          */
DECL|method|startDocument
specifier|public
name|void
name|startDocument
parameter_list|()
throws|throws
name|SAXException
block|{         }
comment|/**          * @see org.xml.sax.ContentHandler#endDocument()          */
DECL|method|endDocument
specifier|public
name|void
name|endDocument
parameter_list|()
throws|throws
name|SAXException
block|{         }
comment|/**          * @see org.xml.sax.ContentHandler#startPrefixMapping(java.lang.String, java.lang.String)          */
DECL|method|startPrefixMapping
specifier|public
name|void
name|startPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|SAXException
block|{         }
comment|/**          * @see org.xml.sax.ContentHandler#endPrefixMapping(java.lang.String)          */
DECL|method|endPrefixMapping
specifier|public
name|void
name|endPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|SAXException
block|{         }
comment|/**          * @see org.xml.sax.ContentHandler#startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)          */
DECL|method|startElement
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"entryid"
argument_list|)
condition|)
block|{
name|this
operator|.
name|isId
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"action"
argument_list|)
condition|)
block|{
name|this
operator|.
name|isAction
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**          * @see org.xml.sax.ContentHandler#endElement(java.lang.String, java.lang.String, java.lang.String)          */
DECL|method|endElement
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"entryid"
argument_list|)
condition|)
block|{
name|this
operator|.
name|isId
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"action"
argument_list|)
condition|)
block|{
name|this
operator|.
name|isAction
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"indexentry"
argument_list|)
condition|)
block|{
name|this
operator|.
name|logContent
operator|.
name|put
argument_list|(
name|this
operator|.
name|currentID
argument_list|,
name|IndexAction
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|currentAction
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * @see org.xml.sax.ContentHandler#characters(char[], int, int)          */
DECL|method|characters
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|this
operator|.
name|isId
condition|)
name|this
operator|.
name|currentID
operator|=
operator|new
name|String
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isAction
condition|)
name|this
operator|.
name|currentAction
operator|=
operator|new
name|String
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**          * @see org.xml.sax.ContentHandler#ignorableWhitespace(char[], int, int)          */
DECL|method|ignorableWhitespace
specifier|public
name|void
name|ignorableWhitespace
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{         }
comment|/**          * @see org.xml.sax.ContentHandler#processingInstruction(java.lang.String, java.lang.String)          */
DECL|method|processingInstruction
specifier|public
name|void
name|processingInstruction
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|data
parameter_list|)
throws|throws
name|SAXException
block|{         }
comment|/**          * @see org.xml.sax.ContentHandler#skippedEntity(java.lang.String)          */
DECL|method|skippedEntity
specifier|public
name|void
name|skippedEntity
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXException
block|{         }
block|}
block|}
end_class
end_unit
