begin_unit
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.server.authentication
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|authentication
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Provider
import|;
end_import
begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Security
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|BadPaddingException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Cipher
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|IllegalBlockSizeException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|KeyGenerator
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|data
operator|.
name|GDataAccount
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|data
operator|.
name|GDataAccount
operator|.
name|AccountRole
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|Component
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|ComponentType
import|;
end_import
begin_import
import|import
name|sun
operator|.
name|misc
operator|.
name|BASE64Decoder
import|;
end_import
begin_import
import|import
name|sun
operator|.
name|misc
operator|.
name|BASE64Encoder
import|;
end_import
begin_comment
comment|/**  * A  * {@link org.apache.lucene.gdata.server.authentication.AuthenticationController}  * implmentation using a<i>Blowfish</i> algorithmn to en/decrpyt the  * authentification token. The<i>Blowfish</i> algorithmn enables a stateless  * authetication of the client. The token contains all information to  * authenticate the client on possible other hosts.  *<p>  * The token contains the first 32 bit of the client ip (e.g. 192.168.0),  * account name, {@link org.apache.lucene.gdata.data.GDataAccount.AccountRole}  * and the cration time as a timestamp. The timestamp will be checked on every  * subsequent request. If the timestamp plus the configured timeout is less  * than the current time the client has to reauthenticate again.  *</p>  *<p>  * The auth token returned by the  * {@link BlowfishAuthenticationController#authenticatAccount(GDataAccount, String)}  * method is a BASE64 encoded string.  *</p>  *   * @see javax.crypto.Cipher  * @see sun.misc.BASE64Encoder  * @see sun.misc.BASE64Decoder  * @author Simon Willnauer  *   */
end_comment
begin_class
annotation|@
name|Component
argument_list|(
name|componentType
operator|=
name|ComponentType
operator|.
name|AUTHENTICATIONCONTROLLER
argument_list|)
DECL|class|BlowfishAuthenticationController
specifier|public
class|class
name|BlowfishAuthenticationController
implements|implements
name|AuthenticationController
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BlowfishAuthenticationController
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ALG
specifier|private
specifier|static
specifier|final
name|String
name|ALG
init|=
literal|"Blowfish"
decl_stmt|;
DECL|field|TOKEN_LIMITER
specifier|private
specifier|static
specifier|final
name|String
name|TOKEN_LIMITER
init|=
literal|"#"
decl_stmt|;
DECL|field|ENCODING
specifier|private
specifier|static
specifier|final
name|String
name|ENCODING
init|=
literal|"UTF-8"
decl_stmt|;
DECL|field|deCrypt
specifier|private
name|Cipher
name|deCrypt
decl_stmt|;
DECL|field|enCrypt
specifier|private
name|Cipher
name|enCrypt
decl_stmt|;
comment|// TODO make this configurable
DECL|field|minuteOffset
specifier|private
name|int
name|minuteOffset
init|=
literal|30
decl_stmt|;
DECL|field|milisecondOffset
specifier|private
name|long
name|milisecondOffset
decl_stmt|;
DECL|field|encoder
specifier|private
name|BASE64Encoder
name|encoder
init|=
operator|new
name|BASE64Encoder
argument_list|()
decl_stmt|;
DECL|field|decoder
specifier|private
name|BASE64Decoder
name|decoder
init|=
operator|new
name|BASE64Decoder
argument_list|()
decl_stmt|;
DECL|field|lock
specifier|private
name|ReentrantLock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
comment|// TODO make this configurable
DECL|field|key
specifier|private
name|String
name|key
init|=
literal|"myTestKey"
decl_stmt|;
comment|/**      * @see org.apache.lucene.gdata.server.authentication.AuthenticationController#initialize()      */
DECL|method|initialize
specifier|public
name|void
name|initialize
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|key
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Auth key must not be null"
argument_list|)
throw|;
if|if
condition|(
name|this
operator|.
name|key
operator|.
name|length
argument_list|()
operator|<
literal|5
operator|||
name|this
operator|.
name|key
operator|.
name|length
argument_list|()
operator|>
literal|16
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Auth key length must be greater than 4 and less than 17"
argument_list|)
throw|;
try|try
block|{
name|Provider
name|sunJce
init|=
operator|new
name|com
operator|.
name|sun
operator|.
name|crypto
operator|.
name|provider
operator|.
name|SunJCE
argument_list|()
decl_stmt|;
name|Security
operator|.
name|addProvider
argument_list|(
name|sunJce
argument_list|)
expr_stmt|;
name|KeyGenerator
name|kgen
init|=
name|KeyGenerator
operator|.
name|getInstance
argument_list|(
name|ALG
argument_list|)
decl_stmt|;
name|kgen
operator|.
name|init
argument_list|(
literal|448
argument_list|)
expr_stmt|;
comment|// 448 Bit^M
name|byte
index|[]
name|raw
init|=
name|this
operator|.
name|key
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|SecretKeySpec
name|skeySpec
init|=
operator|new
name|SecretKeySpec
argument_list|(
name|raw
argument_list|,
name|ALG
argument_list|)
decl_stmt|;
name|this
operator|.
name|deCrypt
operator|=
name|Cipher
operator|.
name|getInstance
argument_list|(
name|ALG
argument_list|)
expr_stmt|;
name|this
operator|.
name|enCrypt
operator|=
name|Cipher
operator|.
name|getInstance
argument_list|(
name|ALG
argument_list|)
expr_stmt|;
name|this
operator|.
name|deCrypt
operator|.
name|init
argument_list|(
name|Cipher
operator|.
name|DECRYPT_MODE
argument_list|,
name|skeySpec
argument_list|)
expr_stmt|;
name|this
operator|.
name|enCrypt
operator|.
name|init
argument_list|(
name|Cipher
operator|.
name|ENCRYPT_MODE
argument_list|,
name|skeySpec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AuthenticatorException
argument_list|(
literal|"Can't initialize BlowfishAuthenticationController -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|calculateTimeOffset
argument_list|()
expr_stmt|;
block|}
comment|/**      * @see org.apache.lucene.gdata.server.authentication.AuthenticationController#authenticatAccount(org.apache.lucene.gdata.data.GDataAccount,      *      java.lang.String)      */
DECL|method|authenticatAccount
specifier|public
name|String
name|authenticatAccount
parameter_list|(
name|GDataAccount
name|account
parameter_list|,
name|String
name|requestIp
parameter_list|)
block|{
try|try
block|{
name|String
name|passIp
init|=
name|requestIp
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|requestIp
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|role
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|account
operator|.
name|getRolesAsInt
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|calculateAuthToken
argument_list|(
name|passIp
argument_list|,
name|role
argument_list|,
name|account
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AuthenticatorException
argument_list|(
literal|"Can not authenticat account -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.server.authentication.AuthenticationController#authenticateToken(java.lang.String,      *      java.lang.String,      *      org.apache.lucene.gdata.data.GDataAccount.AccountRole,      *      java.lang.String)      */
DECL|method|authenticateToken
specifier|public
name|boolean
name|authenticateToken
parameter_list|(
specifier|final
name|String
name|token
parameter_list|,
specifier|final
name|String
name|requestIp
parameter_list|,
name|AccountRole
name|role
parameter_list|,
name|String
name|accountName
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"authenticate Token "
operator|+
name|token
operator|+
literal|" for requestIp: "
operator|+
name|requestIp
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
operator|||
name|requestIp
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|String
name|passIp
init|=
name|requestIp
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|requestIp
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|authString
init|=
literal|null
decl_stmt|;
try|try
block|{
name|authString
operator|=
name|deCryptAuthToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AuthenticatorException
argument_list|(
literal|"Can not decrypt token -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|authString
operator|==
literal|null
condition|)
return|return
literal|false
return|;
try|try
block|{
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|authString
argument_list|,
name|TOKEN_LIMITER
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tokenizer
operator|.
name|nextToken
argument_list|()
operator|.
name|equals
argument_list|(
name|passIp
argument_list|)
condition|)
return|return
literal|false
return|;
name|String
name|tempAccountName
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|int
name|intRole
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|tokenizer
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
comment|/*              * Authentication goes either for a account role or a account. For              * entry manipulation the account name will be retrieved by the              * feedId otherwise it will be null If it is null the authentication              * goes against the account role              */
if|if
condition|(
name|tempAccountName
operator|==
literal|null
operator|||
operator|(
operator|!
name|tempAccountName
operator|.
name|equals
argument_list|(
name|accountName
argument_list|)
operator|&&
operator|!
name|GDataAccount
operator|.
name|isInRole
argument_list|(
name|intRole
argument_list|,
name|role
argument_list|)
operator|)
condition|)
return|return
literal|false
return|;
name|long
name|timeout
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|tokenizer
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|timeout
operator|+
name|this
operator|.
name|milisecondOffset
operator|)
operator|>
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error occured while encrypting token "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|method|calculateTimeOffset
specifier|private
name|void
name|calculateTimeOffset
parameter_list|()
block|{
name|this
operator|.
name|milisecondOffset
operator|=
name|this
operator|.
name|minuteOffset
operator|*
literal|60
operator|*
literal|1000
expr_stmt|;
block|}
DECL|method|calculateAuthToken
specifier|protected
name|String
name|calculateAuthToken
parameter_list|(
specifier|final
name|String
name|ipAddress
parameter_list|,
specifier|final
name|String
name|role
parameter_list|,
name|String
name|accountName
parameter_list|)
throws|throws
name|IllegalBlockSizeException
throws|,
name|BadPaddingException
throws|,
name|UnsupportedEncodingException
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|ipAddress
argument_list|)
operator|.
name|append
argument_list|(
name|TOKEN_LIMITER
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|accountName
argument_list|)
operator|.
name|append
argument_list|(
name|TOKEN_LIMITER
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|role
argument_list|)
operator|.
name|append
argument_list|(
name|TOKEN_LIMITER
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|toencode
init|=
name|builder
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|ENCODING
argument_list|)
decl_stmt|;
name|byte
index|[]
name|result
init|=
name|this
operator|.
name|enCrypt
operator|.
name|doFinal
argument_list|(
name|toencode
argument_list|)
decl_stmt|;
return|return
name|this
operator|.
name|encoder
operator|.
name|encode
argument_list|(
name|result
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|deCryptAuthToken
specifier|protected
name|String
name|deCryptAuthToken
parameter_list|(
specifier|final
name|String
name|authToken
parameter_list|)
throws|throws
name|IOException
throws|,
name|IllegalBlockSizeException
throws|,
name|BadPaddingException
block|{
name|this
operator|.
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|input
init|=
name|this
operator|.
name|decoder
operator|.
name|decodeBuffer
argument_list|(
name|authToken
argument_list|)
decl_stmt|;
name|byte
index|[]
name|result
init|=
name|this
operator|.
name|deCrypt
operator|.
name|doFinal
argument_list|(
name|input
argument_list|)
decl_stmt|;
return|return
operator|new
name|String
argument_list|(
name|result
argument_list|,
name|ENCODING
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @return Returns the minuteOffset.      */
DECL|method|getMinuteOffset
specifier|public
name|int
name|getMinuteOffset
parameter_list|()
block|{
return|return
name|this
operator|.
name|minuteOffset
return|;
block|}
comment|/**      * @param minuteOffset      *            The minuteOffset to set.      */
DECL|method|setMinuteOffset
specifier|public
name|void
name|setMinuteOffset
parameter_list|(
name|int
name|minuteOffset
parameter_list|)
block|{
name|this
operator|.
name|minuteOffset
operator|=
name|minuteOffset
expr_stmt|;
name|calculateTimeOffset
argument_list|()
expr_stmt|;
block|}
comment|/**      * @return Returns the key.      */
DECL|method|getKey
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|this
operator|.
name|key
return|;
block|}
comment|/**      * @param key      *            The key to set.      */
DECL|method|setKey
specifier|public
name|void
name|setKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
comment|/**      * @see org.apache.lucene.gdata.server.registry.ServerComponent#destroy()      */
DECL|method|destroy
specifier|public
name|void
name|destroy
parameter_list|()
block|{
comment|//
block|}
block|}
end_class
end_unit
