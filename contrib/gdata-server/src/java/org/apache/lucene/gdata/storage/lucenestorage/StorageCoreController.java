begin_unit
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.storage.lucenestorage
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|data
operator|.
name|GDataAccount
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|Component
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|ComponentType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|configuration
operator|.
name|Requiered
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|IDGenerator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|Storage
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|StorageController
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
operator|.
name|recover
operator|.
name|RecoverController
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
operator|.
name|recover
operator|.
name|RecoverException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|utils
operator|.
name|ReferenceCounter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexModifier
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import
begin_comment
comment|/**  *    *   * @author Simon Willnauer  *   */
end_comment
begin_class
annotation|@
name|Component
argument_list|(
name|componentType
operator|=
name|ComponentType
operator|.
name|STORAGECONTROLLER
argument_list|)
DECL|class|StorageCoreController
specifier|public
class|class
name|StorageCoreController
implements|implements
name|StorageController
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StorageCoreController
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|searcher
specifier|private
name|IndexSearcher
name|searcher
decl_stmt|;
DECL|field|storageDir
specifier|private
name|Directory
name|storageDir
decl_stmt|;
DECL|field|modifier
specifier|private
name|StorageModifier
name|modifier
decl_stmt|;
DECL|field|storageQuery
specifier|private
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|storageQuery
decl_stmt|;
DECL|field|currentBuffer
specifier|private
name|StorageBuffer
name|currentBuffer
decl_stmt|;
DECL|field|isClosed
specifier|private
specifier|final
name|AtomicBoolean
name|isClosed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|storageControllerLock
specifier|private
specifier|final
name|ReentrantLock
name|storageControllerLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|closeCondition
specifier|private
specifier|final
name|Condition
name|closeCondition
decl_stmt|;
DECL|field|DEFAULT_STORAGE_BUFFER_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_STORAGE_BUFFER_SIZE
init|=
literal|3
decl_stmt|;
DECL|field|DEFAULT_STORAGE_PERSIST_FACTOR
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_STORAGE_PERSIST_FACTOR
init|=
literal|3
decl_stmt|;
DECL|field|RECOVERDIRECTORY
specifier|private
specifier|static
specifier|final
name|String
name|RECOVERDIRECTORY
init|=
literal|"recover"
decl_stmt|;
DECL|field|STORAGELOG
specifier|private
specifier|static
specifier|final
name|String
name|STORAGELOG
init|=
literal|".lucenestorage"
decl_stmt|;
DECL|field|idGenerator
specifier|private
name|IDGenerator
name|idGenerator
decl_stmt|;
DECL|field|storageLock
specifier|private
specifier|final
name|ConcurrentStorageLock
name|storageLock
decl_stmt|;
comment|/*      *properties set by configuration file e.g. Registry      */
DECL|field|indexOptimizeInterval
specifier|private
name|int
name|indexOptimizeInterval
decl_stmt|;
DECL|field|storageDirectory
specifier|private
name|String
name|storageDirectory
decl_stmt|;
DECL|field|keepRecoveredFiles
specifier|private
name|boolean
name|keepRecoveredFiles
decl_stmt|;
DECL|field|recover
specifier|private
name|boolean
name|recover
decl_stmt|;
DECL|field|storageBufferSize
specifier|private
name|int
name|storageBufferSize
decl_stmt|;
DECL|field|storagePersistFactor
specifier|private
name|int
name|storagePersistFactor
decl_stmt|;
DECL|field|recoverController
specifier|private
name|RecoverController
name|recoverController
decl_stmt|;
comment|/**      * @see org.apache.lucene.gdata.server.registry.ServerComponent#initialize()      */
DECL|method|initialize
specifier|public
name|void
name|initialize
parameter_list|()
block|{
synchronized|synchronized
init|(
name|StorageCoreController
operator|.
name|class
init|)
block|{
try|try
block|{
name|this
operator|.
name|idGenerator
operator|=
operator|new
name|IDGenerator
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can't create ID Generator"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|boolean
name|createNewStorage
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|storageDir
operator|==
literal|null
condition|)
block|{
name|File
name|storeDir
init|=
operator|new
name|File
argument_list|(
name|this
operator|.
name|storageDirectory
argument_list|)
decl_stmt|;
name|File
name|storageLog
init|=
operator|new
name|File
argument_list|(
name|storeDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
operator|+
name|STORAGELOG
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|storeDir
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
name|storageLog
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|createLuceneStorageLog
argument_list|(
name|storeDir
argument_list|)
condition|)
block|{
name|this
operator|.
name|storageDir
operator|=
name|FSDirectory
operator|.
name|getDirectory
argument_list|(
name|storeDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|createNewStorage
operator|=
literal|true
expr_stmt|;
block|}
else|else
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"could not create storage lock file in "
operator|+
name|this
operator|.
name|storageDirectory
argument_list|)
throw|;
block|}
else|else
name|this
operator|.
name|storageDir
operator|=
name|FSDirectory
operator|.
name|getDirectory
argument_list|(
name|storeDir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|storageLog
operator|.
name|delete
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|StorageException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|storageBufferSize
operator|=
name|this
operator|.
name|storageBufferSize
operator|<
name|DEFAULT_STORAGE_BUFFER_SIZE
condition|?
name|DEFAULT_STORAGE_BUFFER_SIZE
else|:
name|this
operator|.
name|storageBufferSize
expr_stmt|;
name|this
operator|.
name|storagePersistFactor
operator|=
name|this
operator|.
name|storagePersistFactor
operator|<
name|DEFAULT_STORAGE_PERSIST_FACTOR
condition|?
name|DEFAULT_STORAGE_PERSIST_FACTOR
else|:
name|this
operator|.
name|storagePersistFactor
expr_stmt|;
block|}
else|else
name|createNewStorage
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|currentBuffer
operator|=
operator|new
name|StorageBuffer
argument_list|(
name|this
operator|.
name|storageBufferSize
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|modifier
operator|=
name|createStorageModifier
argument_list|(
name|createNewStorage
argument_list|)
expr_stmt|;
name|this
operator|.
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|this
operator|.
name|storageDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not create Searcher/Modifier -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|createNewStorage
condition|)
name|createAdminAccount
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|recover
condition|)
return|return;
try|try
block|{
name|tryRecover
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Recovering failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Recovering failed -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|recoverController
operator|=
name|createRecoverController
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|recoverController
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Can not initialize recover controller"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not initialize recover controller -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/*      * reads the remaining recover files to store the failed entries      */
DECL|method|tryRecover
specifier|private
name|void
name|tryRecover
parameter_list|()
throws|throws
name|IOException
throws|,
name|RecoverException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|recover
condition|)
return|return;
name|LOG
operator|.
name|info
argument_list|(
literal|"try to recover files if there are any"
argument_list|)
expr_stmt|;
name|this
operator|.
name|recoverController
operator|=
name|createRecoverController
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|recoverController
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|this
operator|.
name|recoverController
operator|.
name|recoverEntries
argument_list|(
name|this
operator|.
name|modifier
argument_list|)
expr_stmt|;
name|this
operator|.
name|recoverController
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
DECL|method|createRecoverController
specifier|private
name|RecoverController
name|createRecoverController
parameter_list|(
name|boolean
name|doRecover
parameter_list|,
name|boolean
name|keepfiles
parameter_list|)
block|{
name|String
name|recoverDirectory
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|storageDirectory
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
operator|||
name|this
operator|.
name|storageDirectory
operator|.
name|endsWith
argument_list|(
literal|"\\"
argument_list|)
condition|)
name|recoverDirectory
operator|=
name|this
operator|.
name|storageDirectory
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|storageDirectory
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
operator|+
name|RECOVERDIRECTORY
expr_stmt|;
else|else
name|recoverDirectory
operator|=
name|this
operator|.
name|storageDirectory
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
operator|+
name|RECOVERDIRECTORY
expr_stmt|;
name|File
name|recoverDirectoryFile
init|=
operator|new
name|File
argument_list|(
name|recoverDirectory
argument_list|)
decl_stmt|;
return|return
operator|new
name|RecoverController
argument_list|(
name|recoverDirectoryFile
argument_list|,
name|doRecover
argument_list|,
name|keepfiles
argument_list|)
return|;
block|}
comment|/**      * Creates a new<tt>StoragCoreController</tt>      */
DECL|method|StorageCoreController
specifier|public
name|StorageCoreController
parameter_list|()
block|{
name|this
operator|.
name|closeCondition
operator|=
name|this
operator|.
name|storageControllerLock
operator|.
name|newCondition
argument_list|()
expr_stmt|;
name|this
operator|.
name|storageLock
operator|=
name|SingleHostConcurrentStorageLock
operator|.
name|getConcurrentStorageLock
argument_list|()
expr_stmt|;
block|}
DECL|method|createStorageModifier
specifier|private
name|StorageModifier
name|createStorageModifier
parameter_list|(
name|boolean
name|create
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexModifier
name|indexModifier
init|=
operator|new
name|IndexModifier
argument_list|(
name|this
operator|.
name|storageDir
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|()
argument_list|,
name|create
argument_list|)
decl_stmt|;
return|return
operator|new
name|StorageModifier
argument_list|(
name|this
argument_list|,
name|indexModifier
argument_list|,
name|this
operator|.
name|currentBuffer
argument_list|,
name|this
operator|.
name|storagePersistFactor
argument_list|,
name|this
operator|.
name|indexOptimizeInterval
argument_list|)
return|;
block|}
comment|/**      * returns the current storage modifier      *       * @return - the current storage modifier      */
DECL|method|getStorageModifier
specifier|protected
name|StorageModifier
name|getStorageModifier
parameter_list|()
block|{
return|return
name|this
operator|.
name|modifier
return|;
block|}
comment|/**      * returns a<tt>StorageQuery</tt> to query the storage index. The      * returned object is a reference counter to keep track of the references to      * the<tt>StorageQuery</tt>. The reference is already incremented before      * returned from this method.      *<p>      * if the reference counter has no remaining references the resource e.g.      * the<tt>StorageQuery</tt> will be closed. This ensures that a      *<tt>StorageQuery</tt> instance will be around as long as needed and      * the resources will be released. The reference counter should be      * decremented by clients after finished using the query instance.      *</p>      *       * @return a {@link ReferenceCounter} instance holding the StorageQuery as a      *         resource.      *       */
DECL|method|getStorageQuery
specifier|protected
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|getStorageQuery
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|isClosed
operator|.
name|get
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"StorageController is already closed -- server is shutting down"
argument_list|)
throw|;
name|this
operator|.
name|storageControllerLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|isClosed
operator|.
name|get
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"StorageController is already closed -- server is shutting down"
argument_list|)
throw|;
if|if
condition|(
name|this
operator|.
name|storageQuery
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|storageQuery
operator|=
name|getNewStorageQueryHolder
argument_list|(
operator|new
name|StorageQuery
argument_list|(
name|this
operator|.
name|currentBuffer
argument_list|,
name|this
operator|.
name|searcher
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"Release new StorageQuery"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|storageQuery
operator|.
name|increamentReference
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|storageQuery
return|;
block|}
finally|finally
block|{
try|try
block|{
name|this
operator|.
name|closeCondition
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|/**/
block|}
name|this
operator|.
name|storageControllerLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getNewStorageQueryHolder
specifier|private
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|getNewStorageQueryHolder
parameter_list|(
specifier|final
name|StorageQuery
name|query
parameter_list|)
block|{
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|holder
init|=
operator|new
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
argument_list|(
name|query
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"close StorageQuery -- zero references remaining"
argument_list|)
expr_stmt|;
name|this
operator|.
name|resource
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error during close call on StorageQuery"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|holder
operator|.
name|increamentReference
argument_list|()
expr_stmt|;
return|return
name|holder
return|;
block|}
comment|/**      * Forces the controller to register a new<tt>StorageQuery</tt> instance.      * This method will be called after an index has been modified to make the      * changes available for searching.      *       * @throws IOException -      *             if an IO exception occurs      */
DECL|method|registerNewStorageQuery
specifier|protected
name|void
name|registerNewStorageQuery
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|isClosed
operator|.
name|get
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"StorageController is already closed -- server is shutting down"
argument_list|)
throw|;
name|this
operator|.
name|storageControllerLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|isClosed
operator|.
name|get
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"StorageController is already closed -- server is shutting down"
argument_list|)
throw|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"new StorageQuery requested -- create new storage buffer"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|storageQuery
operator|!=
literal|null
condition|)
name|this
operator|.
name|storageQuery
operator|.
name|decrementRef
argument_list|()
expr_stmt|;
name|this
operator|.
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|this
operator|.
name|storageDir
argument_list|)
expr_stmt|;
name|this
operator|.
name|storageQuery
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|currentBuffer
operator|=
operator|new
name|StorageBuffer
argument_list|(
name|this
operator|.
name|storageBufferSize
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|this
operator|.
name|closeCondition
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|/**/
block|}
name|this
operator|.
name|storageControllerLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Creates a new StorageBuffer      *       * @return the new StorageBuffer      */
DECL|method|releaseNewStorageBuffer
specifier|protected
name|StorageBuffer
name|releaseNewStorageBuffer
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|isClosed
operator|.
name|get
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"StorageController is already closed -- server is shutting down"
argument_list|)
throw|;
name|this
operator|.
name|storageControllerLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|isClosed
operator|.
name|get
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"StorageController is already closed -- server is shutting down"
argument_list|)
throw|;
return|return
name|this
operator|.
name|currentBuffer
return|;
block|}
finally|finally
block|{
try|try
block|{
name|this
operator|.
name|closeCondition
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|/**/
block|}
name|this
operator|.
name|storageControllerLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Creates a new IndexModifier on the storage index      *       * @return - a new modifier      * @throws IOException -      *             if an IO exception occurs      */
DECL|method|createIndexModifier
specifier|protected
name|IndexModifier
name|createIndexModifier
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|isClosed
operator|.
name|get
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"StorageController is already closed -- server is shutting down"
argument_list|)
throw|;
name|this
operator|.
name|storageControllerLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|isClosed
operator|.
name|get
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"StorageController is already closed -- server is shutting down"
argument_list|)
throw|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"new IndexModifier created - release to StorageModifier"
argument_list|)
expr_stmt|;
return|return
operator|new
name|IndexModifier
argument_list|(
name|this
operator|.
name|storageDir
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
finally|finally
block|{
try|try
block|{
name|this
operator|.
name|closeCondition
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|/**/
block|}
name|this
operator|.
name|storageControllerLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|close
specifier|private
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|isClosed
operator|.
name|get
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"StorageController is already closed -- server is shutting down"
argument_list|)
throw|;
name|this
operator|.
name|storageControllerLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|isClosed
operator|.
name|get
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"StorageController is already closed -- server is shutting down"
argument_list|)
throw|;
name|this
operator|.
name|isClosed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
while|while
condition|(
name|this
operator|.
name|storageControllerLock
operator|.
name|getQueueLength
argument_list|()
operator|>
literal|0
condition|)
try|try
block|{
name|this
operator|.
name|closeCondition
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//
block|}
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"StorageController has been closed -- server is shutting down -- release all resources"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|storageQuery
operator|!=
literal|null
condition|)
name|this
operator|.
name|storageQuery
operator|.
name|decrementRef
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|recoverController
operator|!=
literal|null
condition|)
name|this
operator|.
name|recoverController
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|this
operator|.
name|storageLock
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|modifier
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|idGenerator
operator|.
name|stopIDGenerator
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|storageControllerLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Forces the StorageModifier to write all buffered changes.      *       * @throws IOException -      *             if an IO exception occurs      *       */
DECL|method|forceWrite
specifier|public
name|void
name|forceWrite
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|isClosed
operator|.
name|get
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"StorageController is already closed -- server is shutting down"
argument_list|)
throw|;
name|this
operator|.
name|modifier
operator|.
name|forceWrite
argument_list|()
expr_stmt|;
block|}
DECL|method|createLuceneStorageLog
specifier|private
name|boolean
name|createLuceneStorageLog
parameter_list|(
name|File
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|directory
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
name|directory
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|directory
operator|.
name|createNewFile
argument_list|()
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not create directory -- "
operator|+
name|directory
argument_list|)
throw|;
block|}
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|directory
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
operator|+
name|STORAGELOG
argument_list|)
decl_stmt|;
return|return
name|file
operator|.
name|createNewFile
argument_list|()
return|;
block|}
comment|/**      * Creates a unique ID to store as an id for      * {@link org.apache.lucene.gdata.data.ServerBaseEntry} instances      *       * @return - a unique id      * @throws StorageException -      *             if no id can be released      */
DECL|method|releaseId
specifier|public
specifier|synchronized
name|String
name|releaseId
parameter_list|()
block|{
try|try
block|{
return|return
name|this
operator|.
name|idGenerator
operator|.
name|getUID
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can't release new ID"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.StorageController#destroy()      */
DECL|method|destroy
specifier|public
name|void
name|destroy
parameter_list|()
block|{
try|try
block|{
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Closing StorageCoreController failed -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *       * @return - the lucene directory used as a storage      */
DECL|method|getDirectory
specifier|protected
name|Directory
name|getDirectory
parameter_list|()
block|{
return|return
name|this
operator|.
name|storageDir
return|;
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.StorageController#getStorage()      */
DECL|method|getStorage
specifier|public
name|Storage
name|getStorage
parameter_list|()
throws|throws
name|StorageException
block|{
try|try
block|{
return|return
operator|new
name|StorageImplementation
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|StorageException
name|ex
init|=
operator|new
name|StorageException
argument_list|(
literal|"Can't create Storage instance -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
DECL|method|createAdminAccount
specifier|private
name|void
name|createAdminAccount
parameter_list|()
throws|throws
name|StorageException
block|{
name|GDataAccount
name|adminAccount
init|=
name|GDataAccount
operator|.
name|createAdminAccount
argument_list|()
decl_stmt|;
name|StorageAccountWrapper
name|wrapper
init|=
operator|new
name|StorageAccountWrapper
argument_list|(
name|adminAccount
argument_list|)
decl_stmt|;
name|this
operator|.
name|getStorageModifier
argument_list|()
operator|.
name|createAccount
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
block|}
DECL|method|getLock
specifier|protected
name|ConcurrentStorageLock
name|getLock
parameter_list|()
block|{
return|return
name|this
operator|.
name|storageLock
return|;
block|}
comment|/**      * The size of the<tt>StorageBuffer</tt>.      *       * @return - storage buffer size      */
DECL|method|getBufferSize
specifier|public
name|int
name|getBufferSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|storageBufferSize
return|;
block|}
comment|/**      * The size of the<tt>StorageBuffer</tt>. This size should be at least      * as big as the persist factor to prevent the<tt>StorageBuffer</tt> from      * resizing      *       * @param storageBufferSize      */
annotation|@
name|Requiered
DECL|method|setBufferSize
specifier|public
name|void
name|setBufferSize
parameter_list|(
name|int
name|storageBufferSize
parameter_list|)
block|{
name|this
operator|.
name|storageBufferSize
operator|=
name|storageBufferSize
expr_stmt|;
block|}
comment|/**      * An integer value after how many changes to the StorageModifier the      * buffered changes will be persisted / written to the index      *       * @return - the persist factor      */
DECL|method|getPersistFactor
specifier|public
name|int
name|getPersistFactor
parameter_list|()
block|{
return|return
name|this
operator|.
name|storagePersistFactor
return|;
block|}
comment|/**      * @param storagePersistFactor      */
annotation|@
name|Requiered
DECL|method|setPersistFactor
specifier|public
name|void
name|setPersistFactor
parameter_list|(
name|int
name|storagePersistFactor
parameter_list|)
block|{
name|this
operator|.
name|storagePersistFactor
operator|=
name|storagePersistFactor
expr_stmt|;
block|}
comment|/**      * @return Returns the indexOptimizeInterval.      */
DECL|method|getIndexOptimizeInterval
specifier|public
name|int
name|getIndexOptimizeInterval
parameter_list|()
block|{
return|return
name|this
operator|.
name|indexOptimizeInterval
return|;
block|}
comment|/**      * @param indexOptimizeInterval The indexOptimizeInterval to set.      */
annotation|@
name|Requiered
DECL|method|setOptimizeInterval
specifier|public
name|void
name|setOptimizeInterval
parameter_list|(
name|int
name|indexOptimizeInterval
parameter_list|)
block|{
name|this
operator|.
name|indexOptimizeInterval
operator|=
name|indexOptimizeInterval
expr_stmt|;
block|}
comment|/**      * @return Returns the keepRecoveredFiles.      */
DECL|method|isKeepRecoveredFiles
specifier|public
name|boolean
name|isKeepRecoveredFiles
parameter_list|()
block|{
return|return
name|this
operator|.
name|keepRecoveredFiles
return|;
block|}
comment|/**      * @param keepRecoveredFiles The keepRecoveredFiles to set.      */
annotation|@
name|Requiered
DECL|method|setKeepRecoveredFiles
specifier|public
name|void
name|setKeepRecoveredFiles
parameter_list|(
name|boolean
name|keepRecoveredFiles
parameter_list|)
block|{
name|this
operator|.
name|keepRecoveredFiles
operator|=
name|keepRecoveredFiles
expr_stmt|;
block|}
comment|/**      * @return Returns the recover.      */
DECL|method|isRecover
specifier|public
name|boolean
name|isRecover
parameter_list|()
block|{
return|return
name|this
operator|.
name|recover
return|;
block|}
comment|/**      * @param recover The recover to set.      */
annotation|@
name|Requiered
DECL|method|setRecover
specifier|public
name|void
name|setRecover
parameter_list|(
name|boolean
name|recover
parameter_list|)
block|{
name|this
operator|.
name|recover
operator|=
name|recover
expr_stmt|;
block|}
comment|/**      * @param storageDir The storageDir to set.      */
DECL|method|setStorageDir
specifier|public
name|void
name|setStorageDir
parameter_list|(
name|Directory
name|storageDir
parameter_list|)
block|{
name|this
operator|.
name|storageDir
operator|=
name|storageDir
expr_stmt|;
block|}
comment|/**      * @param storageDirectory The storageDirectory to set.      */
annotation|@
name|Requiered
DECL|method|setDirectory
specifier|public
name|void
name|setDirectory
parameter_list|(
name|String
name|storageDirectory
parameter_list|)
block|{
name|this
operator|.
name|storageDirectory
operator|=
name|storageDirectory
expr_stmt|;
block|}
DECL|method|writeRecoverEntry
specifier|protected
name|void
name|writeRecoverEntry
parameter_list|(
name|StorageEntryWrapper
name|wrapper
parameter_list|)
throws|throws
name|RecoverException
block|{
if|if
condition|(
name|this
operator|.
name|recoverController
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|recoverController
operator|.
name|isRecovering
argument_list|()
condition|)
name|this
operator|.
name|recoverController
operator|.
name|storageModified
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
block|}
DECL|method|registerNewRecoverWriter
specifier|protected
name|void
name|registerNewRecoverWriter
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|recoverController
operator|==
literal|null
operator|||
name|this
operator|.
name|recoverController
operator|.
name|isRecovering
argument_list|()
condition|)
return|return;
name|this
operator|.
name|recoverController
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|this
operator|.
name|recoverController
operator|=
name|createRecoverController
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|recoverController
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
