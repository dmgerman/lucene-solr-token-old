begin_unit
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.storage.lucenestorage.recover
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
operator|.
name|recover
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|ProvidedService
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
operator|.
name|StorageEntryWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
operator|.
name|StorageEntryWrapper
operator|.
name|StorageOperation
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|BaseEntry
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|util
operator|.
name|common
operator|.
name|xml
operator|.
name|XmlWriter
import|;
end_import
begin_comment
comment|/**  * Writes the recover objects to the hard disc.  * @author Simon Willnauer  *  */
end_comment
begin_class
DECL|class|RecoverWriter
specifier|public
class|class
name|RecoverWriter
block|{
DECL|field|META_DATA_SEPARATOR
specifier|protected
specifier|static
specifier|final
name|String
name|META_DATA_SEPARATOR
init|=
literal|";"
decl_stmt|;
DECL|field|META_DATA_ENTRY_SEPARATOR
specifier|protected
specifier|static
specifier|final
name|String
name|META_DATA_ENTRY_SEPARATOR
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
DECL|field|STORAGE_OPERATION_SEPARATOR
specifier|protected
specifier|static
specifier|final
name|String
name|STORAGE_OPERATION_SEPARATOR
init|=
literal|"###########"
decl_stmt|;
DECL|field|OPERATION_DELETE
specifier|protected
specifier|static
specifier|final
name|String
name|OPERATION_DELETE
init|=
literal|"D"
decl_stmt|;
DECL|field|OPERATION_UPDATE
specifier|protected
specifier|static
specifier|final
name|String
name|OPERATION_UPDATE
init|=
literal|"U"
decl_stmt|;
DECL|field|OPERATION_INSERT
specifier|protected
specifier|static
specifier|final
name|String
name|OPERATION_INSERT
init|=
literal|"I"
decl_stmt|;
DECL|field|FILE_PREFIX
specifier|protected
specifier|static
specifier|final
name|String
name|FILE_PREFIX
init|=
literal|".strg"
decl_stmt|;
comment|/**      * @param wrapper       * @throws IOException       *       *       *       */
DECL|method|writeEntry
specifier|public
name|void
name|writeEntry
parameter_list|(
name|StorageEntryWrapper
name|wrapper
parameter_list|,
name|Writer
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|writeOperation
argument_list|(
name|wrapper
operator|.
name|getOperation
argument_list|()
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writeFeedID
argument_list|(
name|wrapper
operator|.
name|getFeedId
argument_list|()
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writeEntryID
argument_list|(
name|wrapper
operator|.
name|getEntryId
argument_list|()
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writeTimeStamp
argument_list|(
name|wrapper
operator|.
name|getTimestamp
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|writer
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wrapper
operator|.
name|getOperation
argument_list|()
operator|.
name|equals
argument_list|(
name|StorageOperation
operator|.
name|DELETE
argument_list|)
condition|)
block|{
name|writeService
argument_list|(
name|wrapper
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|META_DATA_ENTRY_SEPARATOR
argument_list|)
expr_stmt|;
name|BaseEntry
name|entry
init|=
name|wrapper
operator|.
name|getEntry
argument_list|()
decl_stmt|;
name|XmlWriter
name|xmlWriter
init|=
operator|new
name|XmlWriter
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|entry
operator|.
name|generateAtom
argument_list|(
name|xmlWriter
argument_list|,
name|wrapper
operator|.
name|getConfigurator
argument_list|()
operator|.
name|getExtensionProfile
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
name|META_DATA_ENTRY_SEPARATOR
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|STORAGE_OPERATION_SEPARATOR
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|META_DATA_ENTRY_SEPARATOR
argument_list|)
expr_stmt|;
block|}
DECL|method|writeTimeStamp
specifier|private
name|void
name|writeTimeStamp
parameter_list|(
name|String
name|timestamp
parameter_list|,
name|Writer
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|write
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|META_DATA_SEPARATOR
argument_list|)
expr_stmt|;
block|}
DECL|method|writeFeedID
specifier|private
name|void
name|writeFeedID
parameter_list|(
name|String
name|feedId
parameter_list|,
name|Writer
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|write
argument_list|(
name|feedId
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|META_DATA_SEPARATOR
argument_list|)
expr_stmt|;
block|}
DECL|method|writeEntryID
specifier|private
name|void
name|writeEntryID
parameter_list|(
name|String
name|entryId
parameter_list|,
name|Writer
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|write
argument_list|(
name|entryId
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|META_DATA_SEPARATOR
argument_list|)
expr_stmt|;
block|}
DECL|method|writeService
specifier|private
name|void
name|writeService
parameter_list|(
name|StorageEntryWrapper
name|wrapper
parameter_list|,
name|Writer
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|ProvidedService
name|config
init|=
name|wrapper
operator|.
name|getConfigurator
argument_list|()
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|config
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|META_DATA_SEPARATOR
argument_list|)
expr_stmt|;
block|}
DECL|method|writeOperation
specifier|private
name|void
name|writeOperation
parameter_list|(
name|StorageOperation
name|operation
parameter_list|,
name|Writer
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|operation
operator|.
name|equals
argument_list|(
name|StorageOperation
operator|.
name|INSERT
argument_list|)
condition|)
name|writer
operator|.
name|write
argument_list|(
name|OPERATION_INSERT
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|operation
operator|.
name|equals
argument_list|(
name|StorageOperation
operator|.
name|UPDATE
argument_list|)
condition|)
name|writer
operator|.
name|write
argument_list|(
name|OPERATION_UPDATE
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|operation
operator|.
name|equals
argument_list|(
name|StorageOperation
operator|.
name|DELETE
argument_list|)
condition|)
name|writer
operator|.
name|write
argument_list|(
name|OPERATION_DELETE
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|META_DATA_SEPARATOR
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
