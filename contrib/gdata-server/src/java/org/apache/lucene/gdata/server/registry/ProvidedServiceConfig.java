begin_unit
begin_comment
comment|/**   * Copyright 2004 The Apache Software Foundation   *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   *     http://www.apache.org/licenses/LICENSE-2.0   *   * Unless required by applicable law or agreed to in writing, software   * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.server.registry
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
package|;
end_package
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Templates
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerConfigurationException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|search
operator|.
name|config
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|utils
operator|.
name|Pool
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|utils
operator|.
name|PoolObjectFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|utils
operator|.
name|SimpleObjectPool
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|BaseEntry
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|BaseFeed
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|ExtensionProfile
import|;
end_import
begin_comment
comment|/**  * Standard implementation of  * {@link org.apache.lucene.gdata.server.registry.ProvidedService} to be used  * inside the  * {@link org.apache.lucene.gdata.server.registry.GDataServerRegistry}  *<p>  * ExtensionProfiles are used to generate and parse xml by the gdata api. For  * that case all methods are synchronized. This will slow down the application  * when performing lots of xml generation concurrently. For that case the  * extensionProfile for a specific service will be pooled and reused.  *</p>  *   *   * @author Simon Willnauer  *   */
end_comment
begin_class
annotation|@
name|Scope
argument_list|(
name|scope
operator|=
name|Scope
operator|.
name|ScopeType
operator|.
name|REQUEST
argument_list|)
DECL|class|ProvidedServiceConfig
specifier|public
class|class
name|ProvidedServiceConfig
implements|implements
name|ProvidedService
implements|,
name|ScopeVisitor
block|{
DECL|field|LOG
specifier|private
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ProvidedServiceConfig
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_POOL_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_POOL_SIZE
init|=
literal|5
decl_stmt|;
DECL|field|indexSchema
specifier|private
name|IndexSchema
name|indexSchema
decl_stmt|;
comment|/*      * To ensure a extension profile instance will not be shared within multiple      * threads each thread requesting a config will have one instance for the      * entire request.      */
DECL|field|extProfThreadLocal
specifier|protected
specifier|final
name|ThreadLocal
argument_list|<
name|ExtensionProfile
argument_list|>
name|extProfThreadLocal
init|=
operator|new
name|ThreadLocal
argument_list|<
name|ExtensionProfile
argument_list|>
argument_list|()
decl_stmt|;
comment|/*      * ExtensionProfiles are used to generate and parse xml by the gdata api.      * For that case all methodes are synchronized. This will slow down the      * application when performing lots of xml generation concurrently. for that      * case the extensionProfile for a specific service will be pooled and      * reused.      */
DECL|field|profilPool
specifier|private
name|Pool
argument_list|<
name|ExtensionProfile
argument_list|>
name|profilPool
decl_stmt|;
DECL|field|serviceName
specifier|private
name|String
name|serviceName
decl_stmt|;
DECL|field|entryType
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|BaseEntry
argument_list|>
name|entryType
decl_stmt|;
DECL|field|feedType
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|BaseFeed
argument_list|>
name|feedType
decl_stmt|;
DECL|field|extensionProfile
specifier|private
name|ExtensionProfile
name|extensionProfile
decl_stmt|;
DECL|field|poolSize
specifier|private
name|int
name|poolSize
init|=
name|DEFAULT_POOL_SIZE
decl_stmt|;
DECL|field|transformerTemplate
specifier|private
name|Templates
name|transformerTemplate
decl_stmt|;
comment|/**      * @return Returns the poolSize.      */
DECL|method|getPoolSize
specifier|public
name|int
name|getPoolSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|poolSize
return|;
block|}
comment|/**      * @param poolSize      *            The poolSize to set.      */
DECL|method|setPoolSize
specifier|public
name|void
name|setPoolSize
parameter_list|(
name|int
name|poolSize
parameter_list|)
block|{
name|this
operator|.
name|poolSize
operator|=
name|poolSize
operator|>=
name|DEFAULT_POOL_SIZE
condition|?
name|poolSize
else|:
name|DEFAULT_POOL_SIZE
expr_stmt|;
block|}
comment|/**      * Default constructor to instantiate via reflection      */
DECL|method|ProvidedServiceConfig
specifier|public
name|ProvidedServiceConfig
parameter_list|()
block|{
try|try
block|{
name|GDataServerRegistry
operator|.
name|getRegistry
argument_list|()
operator|.
name|registerScopeVisitor
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RegistryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can not register ScopeVisitor -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.server.registry.ProvidedService#getFeedType()      */
DECL|method|getFeedType
specifier|public
name|Class
name|getFeedType
parameter_list|()
block|{
return|return
name|this
operator|.
name|feedType
return|;
block|}
comment|/**      * @param feedType      *            The feedType to set.      */
DECL|method|setFeedType
specifier|public
name|void
name|setFeedType
parameter_list|(
name|Class
name|feedType
parameter_list|)
block|{
name|this
operator|.
name|feedType
operator|=
name|feedType
expr_stmt|;
block|}
comment|/**      * @see org.apache.lucene.gdata.server.registry.ProvidedService#getExtensionProfile()      */
DECL|method|getExtensionProfile
specifier|public
name|ExtensionProfile
name|getExtensionProfile
parameter_list|()
block|{
name|ExtensionProfile
name|ext
init|=
name|this
operator|.
name|extProfThreadLocal
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ext
operator|!=
literal|null
condition|)
block|{
return|return
name|ext
return|;
block|}
if|if
condition|(
name|this
operator|.
name|extensionProfile
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|this
operator|.
name|profilPool
operator|==
literal|null
condition|)
name|createProfilePool
argument_list|()
expr_stmt|;
name|ext
operator|=
name|this
operator|.
name|profilPool
operator|.
name|aquire
argument_list|()
expr_stmt|;
name|this
operator|.
name|extProfThreadLocal
operator|.
name|set
argument_list|(
name|ext
argument_list|)
expr_stmt|;
return|return
name|ext
return|;
block|}
comment|/**      * @param extensionProfil -      *            the extension profile for this feed configuration      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setExtensionProfile
specifier|public
name|void
name|setExtensionProfile
parameter_list|(
name|ExtensionProfile
name|extensionProfil
parameter_list|)
block|{
if|if
condition|(
name|extensionProfil
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ExtensionProfile  must not be null"
argument_list|)
throw|;
if|if
condition|(
name|this
operator|.
name|extensionProfile
operator|!=
literal|null
condition|)
return|return;
name|this
operator|.
name|extensionProfile
operator|=
name|extensionProfil
expr_stmt|;
block|}
DECL|method|createProfilePool
specifier|private
name|void
name|createProfilePool
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"Create ExtensionProfile pool with pool size:"
operator|+
name|this
operator|.
name|poolSize
operator|+
literal|" for service "
operator|+
name|this
operator|.
name|serviceName
argument_list|)
expr_stmt|;
name|this
operator|.
name|profilPool
operator|=
operator|new
name|SimpleObjectPool
argument_list|<
name|ExtensionProfile
argument_list|>
argument_list|(
name|this
operator|.
name|poolSize
argument_list|,
operator|new
name|ExtensionProfileFactory
argument_list|<
name|ExtensionProfile
argument_list|>
argument_list|(
name|this
operator|.
name|extensionProfile
operator|.
name|getClass
argument_list|()
argument_list|,
name|this
operator|.
name|entryType
argument_list|,
name|this
operator|.
name|feedType
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * TODO add comment      *       * @param<E>      * @param extensionProfileClass      * @throws InstantiationException      * @throws IllegalAccessException      */
DECL|method|setExtensionProfileClass
specifier|public
parameter_list|<
name|E
extends|extends
name|ExtensionProfile
parameter_list|>
name|void
name|setExtensionProfileClass
parameter_list|(
name|Class
argument_list|<
name|E
argument_list|>
name|extensionProfileClass
parameter_list|)
throws|throws
name|InstantiationException
throws|,
name|IllegalAccessException
block|{
if|if
condition|(
name|extensionProfileClass
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ExtensionProfile class must not be null"
argument_list|)
throw|;
name|setExtensionProfile
argument_list|(
name|extensionProfileClass
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see org.apache.lucene.gdata.server.registry.ProvidedService#getEntryType()      */
DECL|method|getEntryType
specifier|public
name|Class
name|getEntryType
parameter_list|()
block|{
return|return
name|this
operator|.
name|entryType
return|;
block|}
comment|/**      * @param entryType      */
DECL|method|setEntryType
specifier|public
name|void
name|setEntryType
parameter_list|(
name|Class
name|entryType
parameter_list|)
block|{
name|this
operator|.
name|entryType
operator|=
name|entryType
expr_stmt|;
block|}
comment|/**      * @see org.apache.lucene.gdata.server.registry.ProvidedService#getName()      */
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|serviceName
return|;
block|}
comment|/**      * @param serviceName      */
DECL|method|setName
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|serviceName
parameter_list|)
block|{
name|this
operator|.
name|serviceName
operator|=
name|serviceName
expr_stmt|;
block|}
comment|/**      * @see org.apache.lucene.gdata.server.registry.ProvidedService#destroy()      */
DECL|method|destroy
specifier|public
name|void
name|destroy
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|profilPool
operator|!=
literal|null
condition|)
name|this
operator|.
name|profilPool
operator|.
name|destroy
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"Destroy Service "
operator|+
name|this
operator|.
name|serviceName
operator|+
literal|" -- release all resources"
argument_list|)
expr_stmt|;
name|this
operator|.
name|feedType
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|entryType
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|extensionProfile
operator|=
literal|null
expr_stmt|;
block|}
DECL|class|ExtensionProfileFactory
specifier|private
specifier|static
class|class
name|ExtensionProfileFactory
parameter_list|<
name|Type
extends|extends
name|ExtensionProfile
parameter_list|>
implements|implements
name|PoolObjectFactory
argument_list|<
name|Type
argument_list|>
block|{
DECL|field|clazz
specifier|private
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|ExtensionProfile
argument_list|>
name|clazz
decl_stmt|;
DECL|field|constructor
specifier|private
specifier|final
name|Constructor
argument_list|<
name|?
extends|extends
name|ExtensionProfile
argument_list|>
name|constructor
decl_stmt|;
DECL|field|constArray
specifier|private
specifier|static
specifier|final
name|Object
index|[]
name|constArray
init|=
operator|new
name|Object
index|[
literal|0
index|]
decl_stmt|;
DECL|field|entry
specifier|private
name|BaseEntry
name|entry
decl_stmt|;
DECL|field|feed
specifier|private
name|BaseFeed
name|feed
decl_stmt|;
DECL|method|ExtensionProfileFactory
name|ExtensionProfileFactory
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|ExtensionProfile
argument_list|>
name|clazz
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|BaseEntry
argument_list|>
name|entryClass
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|BaseFeed
argument_list|>
name|feedClass
parameter_list|)
block|{
name|this
operator|.
name|clazz
operator|=
name|clazz
expr_stmt|;
try|try
block|{
name|this
operator|.
name|constructor
operator|=
name|clazz
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|entry
operator|=
name|entryClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|this
operator|.
name|feed
operator|=
name|feedClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The given class has no default constructor -- can not use as a ExtensionProfile -- "
operator|+
name|this
operator|.
name|clazz
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**          * @see org.apache.lucene.gdata.utils.PoolObjectFactory#getInstance()          */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getInstance
specifier|public
name|Type
name|getInstance
parameter_list|()
block|{
try|try
block|{
name|Type
name|retValue
init|=
operator|(
name|Type
operator|)
name|this
operator|.
name|constructor
operator|.
name|newInstance
argument_list|(
name|constArray
argument_list|)
decl_stmt|;
name|this
operator|.
name|entry
operator|.
name|declareExtensions
argument_list|(
name|retValue
argument_list|)
expr_stmt|;
name|this
operator|.
name|feed
operator|.
name|declareExtensions
argument_list|(
name|retValue
argument_list|)
expr_stmt|;
return|return
name|retValue
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can not instantiate new ExtensionProfile -- "
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**          * @param type -          *            the ExtensionProfile to destroy          * @see org.apache.lucene.gdata.utils.PoolObjectFactory#destroyInstance(Object)          */
DECL|method|destroyInstance
specifier|public
name|void
name|destroyInstance
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
comment|//
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.server.registry.ScopeVisitor#visiteInitialize()      */
DECL|method|visiteInitialize
specifier|public
name|void
name|visiteInitialize
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|profilPool
operator|==
literal|null
condition|)
name|createProfilePool
argument_list|()
expr_stmt|;
comment|/*          * don't set a extension profile for each thread. The current thread          * might use another service and does not need the extension profile of          * this service          */
block|}
comment|/**      * @see org.apache.lucene.gdata.server.registry.ScopeVisitor#visiteDestroy()      */
DECL|method|visiteDestroy
specifier|public
name|void
name|visiteDestroy
parameter_list|()
block|{
comment|/*          * Check every thread after request destroyed to release all profiles to          * the pool          */
name|ExtensionProfile
name|ext
init|=
name|this
operator|.
name|extProfThreadLocal
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ext
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"ThreadLocal owns no ExtensionProfile in requestDestroy for service "
operator|+
name|this
operator|.
name|serviceName
argument_list|)
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|extProfThreadLocal
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|profilPool
operator|.
name|release
argument_list|(
name|ext
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return Returns the indexSchema.      */
DECL|method|getIndexSchema
specifier|public
name|IndexSchema
name|getIndexSchema
parameter_list|()
block|{
return|return
name|this
operator|.
name|indexSchema
return|;
block|}
comment|/**      * @param indexSchema The indexSchema to set.      */
DECL|method|setIndexSchema
specifier|public
name|void
name|setIndexSchema
parameter_list|(
name|IndexSchema
name|indexSchema
parameter_list|)
block|{
name|this
operator|.
name|indexSchema
operator|=
name|indexSchema
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|indexSchema
operator|!=
literal|null
condition|)
name|this
operator|.
name|indexSchema
operator|.
name|setName
argument_list|(
name|this
operator|.
name|serviceName
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see org.apache.lucene.gdata.server.registry.ProvidedService#getTransformTemplate()      */
DECL|method|getTransformTemplate
specifier|public
name|Templates
name|getTransformTemplate
parameter_list|()
block|{
return|return
name|this
operator|.
name|transformerTemplate
return|;
block|}
comment|/**      * Sets and creates the preview transformer xslt template to provide a html formate for feeds and entries.      * The given file name must be available in the classpath.       * @param filename - the name of the file in the classpath      */
DECL|method|setXsltStylesheet
specifier|public
name|void
name|setXsltStylesheet
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
if|if
condition|(
name|filename
operator|==
literal|null
operator|||
name|filename
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No preview stylesheet configured for service "
operator|+
name|this
operator|.
name|serviceName
argument_list|)
expr_stmt|;
return|return;
block|}
name|TransformerFactory
name|factory
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
try|try
block|{
name|this
operator|.
name|transformerTemplate
operator|=
name|factory
operator|.
name|newTemplates
argument_list|(
operator|new
name|StreamSource
argument_list|(
name|ProvidedServiceConfig
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|filename
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|filename
else|:
literal|"/"
operator|+
name|filename
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransformerConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can not compile xslt stylesheet path: "
operator|+
name|filename
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class
end_unit
