begin_unit
begin_comment
comment|/**   * Copyright 2004 The Apache Software Foundation   *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   *     http://www.apache.org/licenses/LICENSE-2.0   *   * Unless required by applicable law or agreed to in writing, software   * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.data
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|data
package|;
end_package
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|Person
import|;
end_import
begin_comment
comment|/**  * The GData-Server system provides acccount to be associated with registered  * feed. Every feed has an owner account. The account holder is automaticaly in  * role to modify his feeds. One account can own<i>n</i> feeds having<i>m</i>  * entries.  *<p>  * Additionally an account can be in role to modify other feeds, create accounts  * or feeds. See {@link AccountRole} for detailed infomation about roles. One  * account can also have more than one role. All roles in {@link AccountRole}  * can be combined  *</p>  *<p>  * For each account values for author name, author email and author link can be  * set at creation time or during an update. These values will be used as the  * corresponding values for the feed  * {@link org.apache.lucene.gdata.data.ServerBaseFeed#addAuthor(Person)} if no  * value for the feed has be specified.  *</p>  *   * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|GDataAccount
specifier|public
class|class
name|GDataAccount
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|authorname
specifier|private
name|String
name|authorname
decl_stmt|;
DECL|field|authorMail
specifier|private
name|String
name|authorMail
decl_stmt|;
DECL|field|authorLink
specifier|private
name|URL
name|authorLink
decl_stmt|;
DECL|field|password
specifier|private
name|String
name|password
decl_stmt|;
DECL|field|roles
specifier|private
name|Set
argument_list|<
name|AccountRole
argument_list|>
name|roles
init|=
operator|new
name|HashSet
argument_list|<
name|AccountRole
argument_list|>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
comment|/**      * Creates a new GDataAccount. The default role {@link AccountRole#USER}      * will be set.      *       */
DECL|method|GDataAccount
specifier|public
name|GDataAccount
parameter_list|()
block|{
name|this
operator|.
name|roles
operator|.
name|add
argument_list|(
name|AccountRole
operator|.
name|USER
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return - the password      */
DECL|method|getPassword
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|this
operator|.
name|password
return|;
block|}
comment|/**      * @param password -      *            the account Password      */
DECL|method|setPassword
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
comment|/**      * @return - the account name      */
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
comment|/**      * @param name      *            The name to set.      */
DECL|method|setName
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * @return - the http link specified for the author      */
DECL|method|getAuthorLink
specifier|public
name|URL
name|getAuthorLink
parameter_list|()
block|{
return|return
name|this
operator|.
name|authorLink
return|;
block|}
comment|/**      * @param authorLink -      *            the http link specified for the author      */
DECL|method|setAuthorLink
specifier|public
name|void
name|setAuthorLink
parameter_list|(
name|URL
name|authorLink
parameter_list|)
block|{
name|this
operator|.
name|authorLink
operator|=
name|authorLink
expr_stmt|;
block|}
comment|/**      * @return - the authors mail address      */
DECL|method|getAuthorMail
specifier|public
name|String
name|getAuthorMail
parameter_list|()
block|{
return|return
name|this
operator|.
name|authorMail
return|;
block|}
comment|/**      * @param authorMail -      *            the authors mail address      */
DECL|method|setAuthorMail
specifier|public
name|void
name|setAuthorMail
parameter_list|(
name|String
name|authorMail
parameter_list|)
block|{
name|this
operator|.
name|authorMail
operator|=
name|authorMail
expr_stmt|;
block|}
comment|/**      * @return - the name specified as being the author name      */
DECL|method|getAuthorname
specifier|public
name|String
name|getAuthorname
parameter_list|()
block|{
return|return
name|this
operator|.
name|authorname
return|;
block|}
comment|/**      * @param authorname -      *            the name specified as being the author name      */
DECL|method|setAuthorname
specifier|public
name|void
name|setAuthorname
parameter_list|(
name|String
name|authorname
parameter_list|)
block|{
name|this
operator|.
name|authorname
operator|=
name|authorname
expr_stmt|;
block|}
comment|/**      * Adds the given role to the role list      *       * @param role -      *            the role to add to the role list      */
DECL|method|setRole
specifier|public
name|void
name|setRole
parameter_list|(
name|AccountRole
name|role
parameter_list|)
block|{
if|if
condition|(
name|role
operator|==
literal|null
condition|)
return|return;
name|this
operator|.
name|roles
operator|.
name|add
argument_list|(
name|role
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return - the set containing all roles      */
DECL|method|getRoles
specifier|public
name|Set
argument_list|<
name|AccountRole
argument_list|>
name|getRoles
parameter_list|()
block|{
return|return
name|this
operator|.
name|roles
return|;
block|}
comment|/**      * @param role -      *            the role to check      * @return<code>true</code> if the role list contains the given role      */
DECL|method|isUserInRole
specifier|public
name|boolean
name|isUserInRole
parameter_list|(
name|AccountRole
name|role
parameter_list|)
block|{
if|if
condition|(
name|role
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|this
operator|.
name|roles
operator|.
name|contains
argument_list|(
name|role
argument_list|)
return|;
block|}
comment|/**      * @see GDataAccount#setRolesAsInt(int)      * @return - the integer representation for the user roles      */
DECL|method|getRolesAsInt
specifier|public
name|int
name|getRolesAsInt
parameter_list|()
block|{
comment|// 1 as the Userrole is always set
name|int
name|bits
init|=
literal|1
decl_stmt|;
for|for
control|(
name|AccountRole
name|role
range|:
name|this
operator|.
name|roles
control|)
block|{
if|if
condition|(
name|role
operator|==
name|AccountRole
operator|.
name|ENTRYAMINISTRATOR
condition|)
name|bits
operator|^=
literal|2
expr_stmt|;
elseif|else
if|if
condition|(
name|role
operator|==
name|AccountRole
operator|.
name|FEEDAMINISTRATOR
condition|)
name|bits
operator|^=
literal|4
expr_stmt|;
elseif|else
if|if
condition|(
name|role
operator|==
name|AccountRole
operator|.
name|USERADMINISTRATOR
condition|)
name|bits
operator|^=
literal|8
expr_stmt|;
block|}
return|return
name|bits
return|;
block|}
comment|/**      * Sets the roles from a int representation.      *<ol>      *<li>The fist bit set indicates a {@link AccountRole#USER} - int value 1</li>      *<li>The second bit set indicates a {@link AccountRole#ENTRYAMINISTRATOR} -      * int value 2</li>      *<li>The third bit set indicates a {@link AccountRole#FEEDAMINISTRATOR} -      * int value 4</li>      *<li>The forth bit set indicates a {@link AccountRole#USERADMINISTRATOR} -      * int value 8</li>      *<ol>      * This method will only set roles, will not remove roles! A combination of      * roles is also possible e.g. the int value 6 combines      * {@link AccountRole#ENTRYAMINISTRATOR} and      * {@link AccountRole#FEEDAMINISTRATOR}.      *       * @param i -      *            the integer used to set the roles      */
DECL|method|setRolesAsInt
specifier|public
name|void
name|setRolesAsInt
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
operator|(
name|i
operator|&
literal|2
operator|)
operator|>
literal|0
condition|)
name|this
operator|.
name|roles
operator|.
name|add
argument_list|(
name|AccountRole
operator|.
name|ENTRYAMINISTRATOR
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|i
operator|&
literal|4
operator|)
operator|>
literal|0
condition|)
name|this
operator|.
name|roles
operator|.
name|add
argument_list|(
name|AccountRole
operator|.
name|FEEDAMINISTRATOR
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|i
operator|&
literal|8
operator|)
operator|>
literal|0
condition|)
name|this
operator|.
name|roles
operator|.
name|add
argument_list|(
name|AccountRole
operator|.
name|USERADMINISTRATOR
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see java.lang.Object#equals(java.lang.Object)      */
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|GDataAccount
operator|)
condition|)
return|return
literal|false
return|;
name|GDataAccount
name|toCompare
init|=
operator|(
name|GDataAccount
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|name
operator|.
name|equals
argument_list|(
name|toCompare
operator|.
name|name
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
comment|/**      * @see java.lang.Object#hashCode()      */
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|ret
init|=
literal|37
decl_stmt|;
name|ret
operator|=
literal|9
operator|*
name|ret
operator|+
name|this
operator|.
name|name
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**      * Checks the requiered values for creating an account are set. Required      * values are<tt>name</tt> and<tt>password</tt> the minimum length of      * these values is 6.      *       * @return<code>true</code> if an only if password and name are not<code>null</code> and the length is<tt>> 5</tt>      */
DECL|method|requiredValuesSet
specifier|public
name|boolean
name|requiredValuesSet
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|name
operator|!=
literal|null
operator|&&
name|this
operator|.
name|password
operator|!=
literal|null
operator|&&
name|this
operator|.
name|name
operator|.
name|length
argument_list|()
operator|>
literal|5
operator|&&
name|this
operator|.
name|password
operator|.
name|length
argument_list|()
operator|>
literal|5
operator|)
return|;
block|}
comment|/**      * @see java.lang.Object#toString()      */
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"GdataAccount: "
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"name: "
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" password: "
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|this
operator|.
name|password
operator|!=
literal|null
condition|?
literal|" length: "
operator|+
name|this
operator|.
name|password
operator|.
name|length
argument_list|()
else|:
literal|null
operator|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" author: "
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|authorname
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" author email: "
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|authorMail
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" author link: "
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|authorLink
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * checks whether the given integer matches the account role.      * @param intRole - integer representation of a role      * @param role - the accountrole to match      * @return<code>true</code> if and only if the given roles match, otherwise<code>false</code>      */
DECL|method|isInRole
specifier|public
specifier|static
name|boolean
name|isInRole
parameter_list|(
name|int
name|intRole
parameter_list|,
name|AccountRole
name|role
parameter_list|)
block|{
if|if
condition|(
name|role
operator|==
name|AccountRole
operator|.
name|USER
condition|)
return|return
operator|(
name|intRole
operator|&
literal|1
operator|)
operator|>
literal|0
return|;
if|if
condition|(
name|role
operator|==
name|AccountRole
operator|.
name|ENTRYAMINISTRATOR
condition|)
return|return
operator|(
name|intRole
operator|&
literal|2
operator|)
operator|>
literal|0
return|;
elseif|else
if|if
condition|(
name|role
operator|==
name|AccountRole
operator|.
name|FEEDAMINISTRATOR
condition|)
return|return
operator|(
name|intRole
operator|&
literal|4
operator|)
operator|>
literal|0
return|;
elseif|else
if|if
condition|(
name|role
operator|==
name|AccountRole
operator|.
name|USERADMINISTRATOR
condition|)
return|return
operator|(
name|intRole
operator|&
literal|8
operator|)
operator|>
literal|0
return|;
return|return
literal|false
return|;
block|}
comment|/**      * @return - a new Administartor accoutn       */
DECL|method|createAdminAccount
specifier|public
specifier|static
specifier|final
name|GDataAccount
name|createAdminAccount
parameter_list|()
block|{
name|GDataAccount
name|retVal
init|=
operator|new
name|GDataAccount
argument_list|()
decl_stmt|;
name|retVal
operator|.
name|setName
argument_list|(
literal|"administrator"
argument_list|)
expr_stmt|;
name|retVal
operator|.
name|setPassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|retVal
operator|.
name|setRole
argument_list|(
name|AccountRole
operator|.
name|USERADMINISTRATOR
argument_list|)
expr_stmt|;
name|retVal
operator|.
name|setRole
argument_list|(
name|AccountRole
operator|.
name|FEEDAMINISTRATOR
argument_list|)
expr_stmt|;
name|retVal
operator|.
name|setRole
argument_list|(
name|AccountRole
operator|.
name|ENTRYAMINISTRATOR
argument_list|)
expr_stmt|;
return|return
name|retVal
return|;
block|}
comment|/**      * This enum respesents all account roles an account can have.      *       * @author Simon Willnauer      *       */
DECL|enum|AccountRole
specifier|public
enum|enum
name|AccountRole
block|{
comment|/**          * Can create / alter user          */
DECL|enum constant|USERADMINISTRATOR
name|USERADMINISTRATOR
block|,
comment|/**          * Can create / alter feeds          */
DECL|enum constant|FEEDAMINISTRATOR
name|FEEDAMINISTRATOR
block|,
comment|/**          * Can create / alter entries          */
DECL|enum constant|ENTRYAMINISTRATOR
name|ENTRYAMINISTRATOR
block|,
comment|/**          * can create / alter his own feed entries          */
DECL|enum constant|USER
name|USER
block|}
block|}
end_class
end_unit
