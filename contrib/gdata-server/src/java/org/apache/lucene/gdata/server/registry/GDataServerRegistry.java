begin_unit
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.server.registry
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import
begin_comment
comment|/**  *   * The GDataServerRegistry represents the registry component of the GData  * Server. All provided services and server components will be registered here.  * The Gdata Server serves RSS / ATOM feeds for defined services. Each service  * provides<i>n</i> feeds of a defined subclass of  * {@link com.google.gdata.data.BaseFeed}. Each feed contains<i>m</i> entries  * of a defined subclass of {@link com.google.gdata.data.BaseEntry}. To  * generate RSS / ATOM formates a class of the type  * {@link com.google.gdata.data.ExtensionProfile} is also defined for a service.  *<p>  * The entry,feed and the ExtensionProfile classes are defined in the  * gdata-config.xml and will be loaded when the server starts up.  *</p>  *<p>  * The components defined in the gdata-config.xml will also be loaded and  * instanciated at startup. If a component can not be loaded or an Exception  * occures the server will not start up. To cause of the exception or error will  * be logged to the standart server output.  *</p>  *<p>The GDataServerRegistry is a Singleton</p>  *   *   * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|GDataServerRegistry
specifier|public
class|class
name|GDataServerRegistry
block|{
DECL|field|INSTANCE
specifier|private
specifier|static
name|GDataServerRegistry
name|INSTANCE
decl_stmt|;
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GDataServerRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|serviceTypeMap
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ProvidedService
argument_list|>
name|serviceTypeMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ProvidedService
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|componentMap
specifier|private
specifier|final
name|Map
argument_list|<
name|ComponentType
argument_list|,
name|ComponentBean
argument_list|>
name|componentMap
init|=
operator|new
name|HashMap
argument_list|<
name|ComponentType
argument_list|,
name|ComponentBean
argument_list|>
argument_list|(
literal|10
argument_list|)
decl_stmt|;
DECL|method|GDataServerRegistry
specifier|private
name|GDataServerRegistry
parameter_list|()
block|{
comment|// private - singleton
block|}
comment|/**      * @return a Sinleton registry instance      */
DECL|method|getRegistry
specifier|public
specifier|static
specifier|synchronized
name|GDataServerRegistry
name|getRegistry
parameter_list|()
block|{
if|if
condition|(
name|INSTANCE
operator|==
literal|null
condition|)
name|INSTANCE
operator|=
operator|new
name|GDataServerRegistry
argument_list|()
expr_stmt|;
return|return
name|INSTANCE
return|;
block|}
comment|/**      * Registers a {@link ProvidedService}      *       * @param configurator -      *            the configurator to register in the registry      */
DECL|method|registerService
specifier|public
name|void
name|registerService
parameter_list|(
name|ProvidedService
name|configurator
parameter_list|)
block|{
if|if
condition|(
name|configurator
operator|==
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Feedconfigurator is null -- skip registration"
argument_list|)
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|serviceTypeMap
operator|.
name|put
argument_list|(
name|configurator
operator|.
name|getName
argument_list|()
argument_list|,
name|configurator
argument_list|)
expr_stmt|;
block|}
comment|/**      * Looks up the {@link ProvidedServiceConfig} by the given service name.      *       * @param service      * @return - the {@link ProvidedServiceConfig} or<code>null</code> if the      *         no configuration for this service has been registered      */
DECL|method|getProvidedService
specifier|public
name|ProvidedService
name|getProvidedService
parameter_list|(
name|String
name|service
parameter_list|)
block|{
if|if
condition|(
name|service
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Service is null - must not be null to get registered feedtype"
argument_list|)
throw|;
return|return
name|this
operator|.
name|serviceTypeMap
operator|.
name|get
argument_list|(
name|service
argument_list|)
return|;
block|}
DECL|method|flushRegistry
specifier|protected
name|void
name|flushRegistry
parameter_list|()
block|{
name|this
operator|.
name|serviceTypeMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|componentMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * @param service -      *            the name of the service      * @return -<code>true</code> if and only if the service is registered,      *         otherwise<code>false</code>.      */
DECL|method|isServiceRegistered
specifier|public
name|boolean
name|isServiceRegistered
parameter_list|(
name|String
name|service
parameter_list|)
block|{
return|return
name|this
operator|.
name|serviceTypeMap
operator|.
name|containsKey
argument_list|(
name|service
argument_list|)
return|;
block|}
comment|/**      * Destroys the registry and release all resources      */
DECL|method|destroy
specifier|public
name|void
name|destroy
parameter_list|()
block|{
for|for
control|(
name|ComponentBean
name|component
range|:
name|this
operator|.
name|componentMap
operator|.
name|values
argument_list|()
control|)
block|{
name|component
operator|.
name|getObject
argument_list|()
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
name|flushRegistry
argument_list|()
expr_stmt|;
block|}
comment|/**      * This method is the main interface to the Component Lookup Service of the      * registry. Every GDATA - Server component like STORAGE or the INDEXER      * component will be accessible via this method. To get a Component from the      * lookup service specify the expected Class as an argument and the      * component type of the component to return. For a lookup of the      * STORAGECONTORLER the code looks like:      *<p>      *<code> registryInstance.lookup(StorageController.class,ComponentType.STORAGECONTROLLER);</code>      *</p>      *       * @param<R>      *            the type of the expected return value      * @param clazz -      *            Class object of the expected return value      * @param compType -      *            The component type      * @return the registered component or<code>null</code> if the component      *         can not looked up.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|lookup
specifier|public
parameter_list|<
name|R
parameter_list|>
name|R
name|lookup
parameter_list|(
name|Class
argument_list|<
name|R
argument_list|>
name|clazz
parameter_list|,
name|ComponentType
name|compType
parameter_list|)
block|{
name|ComponentBean
name|bean
init|=
name|this
operator|.
name|componentMap
operator|.
name|get
argument_list|(
name|compType
argument_list|)
decl_stmt|;
if|if
condition|(
name|bean
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|bean
operator|.
name|getSuperType
argument_list|()
operator|.
name|equals
argument_list|(
name|clazz
argument_list|)
condition|)
return|return
operator|(
name|R
operator|)
name|bean
operator|.
name|getObject
argument_list|()
return|;
return|return
literal|null
return|;
block|}
comment|/**      * @param<E>       * @param componentClass      * @throws RegistryException      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|registerComponent
specifier|public
parameter_list|<
name|E
extends|extends
name|ServerComponent
parameter_list|>
name|void
name|registerComponent
parameter_list|(
specifier|final
name|Class
argument_list|<
name|E
argument_list|>
name|componentClass
parameter_list|)
throws|throws
name|RegistryException
block|{
if|if
condition|(
name|componentClass
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"component class must not be null"
argument_list|)
throw|;
if|if
condition|(
operator|!
name|checkImplementsServerComponent
argument_list|(
name|componentClass
argument_list|)
condition|)
throw|throw
operator|new
name|RegistryException
argument_list|(
literal|"can not register component. the given class does not implement ServerComponent interface -- "
operator|+
name|componentClass
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
try|try
block|{
name|Component
name|annotation
init|=
name|componentClass
operator|.
name|getAnnotation
argument_list|(
name|Component
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotation
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RegistryException
argument_list|(
literal|"can not register component. the given class is not a component -- "
operator|+
name|componentClass
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
name|ComponentType
name|type
init|=
name|annotation
operator|.
name|componentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|componentMap
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
condition|)
throw|throw
operator|new
name|RegistryException
argument_list|(
literal|"component already registered -- "
operator|+
name|type
operator|.
name|name
argument_list|()
argument_list|)
throw|;
name|Class
name|superType
init|=
name|type
operator|.
name|getClass
argument_list|()
operator|.
name|getField
argument_list|(
name|type
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|getAnnotation
argument_list|(
name|SuperType
operator|.
name|class
argument_list|)
operator|.
name|superType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|checkSuperType
argument_list|(
name|componentClass
argument_list|,
name|superType
argument_list|)
condition|)
throw|throw
operator|new
name|RegistryException
argument_list|(
literal|"Considered Supertype<"
operator|+
name|superType
operator|.
name|getName
argument_list|()
operator|+
literal|"> is not a super type of<"
operator|+
name|componentClass
operator|+
literal|">"
argument_list|)
throw|;
name|ServerComponent
name|comp
init|=
name|componentClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|comp
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|ComponentBean
name|bean
init|=
operator|new
name|ComponentBean
argument_list|(
name|comp
argument_list|,
name|superType
argument_list|)
decl_stmt|;
name|this
operator|.
name|componentMap
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|bean
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RegistryException
argument_list|(
literal|"Can not register component -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|checkImplementsServerComponent
specifier|private
specifier|static
name|boolean
name|checkImplementsServerComponent
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|Object
operator|.
name|class
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|ServerComponent
operator|.
name|class
argument_list|)
condition|)
return|return
literal|true
return|;
name|Class
index|[]
name|compInterfaces
init|=
name|type
operator|.
name|getInterfaces
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|compInterfaces
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|checkImplementsServerComponent
argument_list|(
name|compInterfaces
index|[
name|i
index|]
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
name|checkImplementsServerComponent
argument_list|(
name|type
operator|.
name|getSuperclass
argument_list|()
argument_list|)
return|;
block|}
DECL|method|checkSuperType
specifier|private
specifier|static
name|boolean
name|checkSuperType
parameter_list|(
name|Class
name|type
parameter_list|,
name|Class
name|consideredSuperType
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|Object
operator|.
name|class
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|consideredSuperType
argument_list|)
condition|)
return|return
literal|true
return|;
name|Class
index|[]
name|interfaces
init|=
name|type
operator|.
name|getInterfaces
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|interfaces
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|interfaces
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|consideredSuperType
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
name|checkSuperType
argument_list|(
name|type
operator|.
name|getSuperclass
argument_list|()
argument_list|,
name|consideredSuperType
argument_list|)
return|;
block|}
DECL|class|ComponentBean
specifier|private
class|class
name|ComponentBean
block|{
DECL|field|superType
specifier|private
specifier|final
name|Class
name|superType
decl_stmt|;
DECL|field|object
specifier|private
specifier|final
name|ServerComponent
name|object
decl_stmt|;
DECL|method|ComponentBean
name|ComponentBean
parameter_list|(
specifier|final
name|ServerComponent
name|object
parameter_list|,
specifier|final
name|Class
name|superType
parameter_list|)
block|{
name|this
operator|.
name|superType
operator|=
name|superType
expr_stmt|;
name|this
operator|.
name|object
operator|=
name|object
expr_stmt|;
block|}
DECL|method|getObject
name|ServerComponent
name|getObject
parameter_list|()
block|{
return|return
name|this
operator|.
name|object
return|;
block|}
DECL|method|getSuperType
name|Class
name|getSuperType
parameter_list|()
block|{
return|return
name|this
operator|.
name|superType
return|;
block|}
block|}
block|}
end_class
end_unit
