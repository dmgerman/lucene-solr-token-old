begin_unit
begin_comment
comment|/**   * Copyright 2004 The Apache Software Foundation   *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   *     http://www.apache.org/licenses/LICENSE-2.0   *   * Unless required by applicable law or agreed to in writing, software   * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.server.registry
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|StorageController
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|ExtensionProfile
import|;
end_import
begin_comment
comment|/**   *    * The FeedRegistry represents the registry component of the GData Server. All   * feed configurations will be registered here. Feed configurations contain   * several informationsa about GData feed like:   *<ol>   *<li>the feed id - where the feed can be accessed via http methodes</li>   *<li>the feed type - feed types are implementations of the abstract   * {@link com.google.gdata.data.BaseFeed}</li>   *</ol>   * The registry will be set up at start up of the server application and can be   * accessed from other components to get configurations according to incoming   * requests.   *    * @author Simon Willnauer   *    */
end_comment
begin_class
DECL|class|GDataServerRegistry
specifier|public
class|class
name|GDataServerRegistry
block|{
DECL|field|INSTANCE
specifier|private
specifier|static
name|GDataServerRegistry
name|INSTANCE
decl_stmt|;
DECL|field|storageInstance
specifier|private
name|StorageController
name|storageInstance
decl_stmt|;
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GDataServerRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|feedTypMap
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|FeedInstanceConfigurator
argument_list|>
name|feedTypMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|FeedInstanceConfigurator
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|GDataServerRegistry
specifier|private
name|GDataServerRegistry
parameter_list|()
block|{
comment|// private - singleton
block|}
comment|/**       * @return a Sinleton registry instance       */
DECL|method|getRegistry
specifier|public
specifier|static
specifier|synchronized
name|GDataServerRegistry
name|getRegistry
parameter_list|()
block|{
if|if
condition|(
name|INSTANCE
operator|==
literal|null
condition|)
name|INSTANCE
operator|=
operator|new
name|GDataServerRegistry
argument_list|()
expr_stmt|;
return|return
name|INSTANCE
return|;
block|}
comment|/**       * Registers a {@link FeedInstanceConfigurator}       *        * @param configurator -       *            the configurator to register in the registry       */
DECL|method|registerFeed
specifier|public
name|void
name|registerFeed
parameter_list|(
name|FeedInstanceConfigurator
name|configurator
parameter_list|)
block|{
if|if
condition|(
name|configurator
operator|==
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Feedconfigurator is null -- skip registration"
argument_list|)
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|feedTypMap
operator|.
name|put
argument_list|(
name|configurator
operator|.
name|getFeedId
argument_list|()
argument_list|,
name|configurator
argument_list|)
expr_stmt|;
block|}
comment|/**       * Looks up the {@link FeedInstanceConfigurator} by the given feed id.       *        * @param feedId       * @return - the {@link FeedInstanceConfigurator} or<code>null</code> if       *         the no configuration for this feed has been registered       */
DECL|method|getFeedConfigurator
specifier|public
name|FeedInstanceConfigurator
name|getFeedConfigurator
parameter_list|(
name|String
name|feedId
parameter_list|)
block|{
if|if
condition|(
name|feedId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Feed URL is null - must not be null to get registered feedtype"
argument_list|)
throw|;
return|return
name|this
operator|.
name|feedTypMap
operator|.
name|get
argument_list|(
name|feedId
argument_list|)
return|;
block|}
DECL|method|flushRegistry
specifier|protected
name|void
name|flushRegistry
parameter_list|()
block|{
name|this
operator|.
name|feedTypMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**       * @param feedId -       *            the id of the feed as the feed is registered       * @return -<code>true</code> if and only if the feed is registered,       *         otherwise<code>false</code>.       */
DECL|method|isFeedRegistered
specifier|public
name|boolean
name|isFeedRegistered
parameter_list|(
name|String
name|feedId
parameter_list|)
block|{
return|return
name|this
operator|.
name|feedTypMap
operator|.
name|containsKey
argument_list|(
name|feedId
argument_list|)
return|;
block|}
comment|/**       * @param storage       */
DECL|method|registerStorage
specifier|public
name|void
name|registerStorage
parameter_list|(
name|StorageController
name|storage
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|storageInstance
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Storage already registered -- Instance of "
operator|+
name|this
operator|.
name|storageInstance
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
name|this
operator|.
name|storageInstance
operator|=
name|storage
expr_stmt|;
block|}
comment|/**       * Destroys the registry and release all resources       */
DECL|method|destroy
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|flushRegistry
argument_list|()
expr_stmt|;
name|this
operator|.
name|storageInstance
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|this
operator|.
name|storageInstance
operator|=
literal|null
expr_stmt|;
block|}
comment|/**       * Creates the  {@link ExtensionProfile} for a registered feed       * @param feedId - the feed id        * @return - the extension profil for this feed of<code>null</code> if       *         the feed is not registered or the extension profile could not be       *         instanciated       */
DECL|method|getExtensionProfile
specifier|public
name|ExtensionProfile
name|getExtensionProfile
parameter_list|(
specifier|final
name|String
name|feedId
parameter_list|)
block|{
name|FeedInstanceConfigurator
name|configurator
init|=
name|this
operator|.
name|feedTypMap
operator|.
name|get
argument_list|(
name|feedId
argument_list|)
decl_stmt|;
if|if
condition|(
name|configurator
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Class
name|clazz
init|=
name|configurator
operator|.
name|getExtensionProfilClass
argument_list|()
decl_stmt|;
try|try
block|{
return|return
operator|(
name|ExtensionProfile
operator|)
name|clazz
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Can not create instance of ExtensionProfil for class: "
operator|+
name|clazz
operator|+
literal|" -- feedId: "
operator|+
name|feedId
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class
end_unit
