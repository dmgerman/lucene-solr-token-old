begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.server.registry
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|configuration
operator|.
name|ComponentConfiguration
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|configuration
operator|.
name|PropertyInjector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|utils
operator|.
name|ReflectionUtils
import|;
end_import
begin_comment
comment|/**  *   * The GDataServerRegistry represents the registry component of the GData  * Server. All provided services and server components will be registered here.  * The GData Server serves RSS / ATOM feeds for defined services. Each service  * provides<i>n</i> feeds of a defined subclass of  * {@link com.google.gdata.data.BaseFeed}. Each feed contains<i>m</i> entries  * of a defined subclass of {@link com.google.gdata.data.BaseEntry}. To  * generate RSS / ATOM formates a class of the type  * {@link com.google.gdata.data.ExtensionProfile} is also defined for a service.  *<p>  * The entry,feed and the ExtensionProfile classes are defined in the  * gdata-config.xml and will be loaded when the server starts up.  *</p>  *<p>  * The components defined in the gdata-config.xml will also be loaded and  * instantiated at startup. If a component can not be loaded or an Exception  * occurs the server will not start up. To cause of the exception or error will  * be logged to the standard server output.  *</p>  *<p>  * The GDataServerRegistry is a Singleton  *</p>  *   *   * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|GDataServerRegistry
specifier|public
class|class
name|GDataServerRegistry
extends|extends
name|EntryEventMediator
block|{
DECL|field|INSTANCE
specifier|private
specifier|static
name|GDataServerRegistry
name|INSTANCE
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GDataServerRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|requestVisitable
specifier|private
name|ScopeVisitable
name|requestVisitable
decl_stmt|;
DECL|field|sessionVisitable
specifier|private
name|ScopeVisitable
name|sessionVisitable
decl_stmt|;
comment|// not available yet
DECL|field|contextVisitable
specifier|private
name|ScopeVisitable
name|contextVisitable
decl_stmt|;
DECL|field|visitorBuffer
specifier|private
name|List
argument_list|<
name|ScopeVisitor
argument_list|>
name|visitorBuffer
init|=
operator|new
name|ArrayList
argument_list|<
name|ScopeVisitor
argument_list|>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
DECL|field|serviceTypeMap
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ProvidedService
argument_list|>
name|serviceTypeMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ProvidedService
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|componentMap
specifier|private
specifier|final
name|Map
argument_list|<
name|ComponentType
argument_list|,
name|ComponentBean
argument_list|>
name|componentMap
init|=
operator|new
name|HashMap
argument_list|<
name|ComponentType
argument_list|,
name|ComponentBean
argument_list|>
argument_list|(
name|ComponentType
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
DECL|method|GDataServerRegistry
specifier|private
name|GDataServerRegistry
parameter_list|()
block|{
comment|// private - singleton
block|}
comment|/**      * @return a Singleton registry instance      */
DECL|method|getRegistry
specifier|public
specifier|static
specifier|synchronized
name|GDataServerRegistry
name|getRegistry
parameter_list|()
block|{
if|if
condition|(
name|INSTANCE
operator|==
literal|null
condition|)
name|INSTANCE
operator|=
operator|new
name|GDataServerRegistry
argument_list|()
expr_stmt|;
return|return
name|INSTANCE
return|;
block|}
comment|/**      * Registers a {@link ProvidedService}      *       * @param configurator -      *            the configurator to register in the registry      */
DECL|method|registerService
specifier|public
name|void
name|registerService
parameter_list|(
name|ProvidedService
name|configurator
parameter_list|)
block|{
if|if
condition|(
name|configurator
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Feed configurator is null -- skip registration"
argument_list|)
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|serviceTypeMap
operator|.
name|put
argument_list|(
name|configurator
operator|.
name|getName
argument_list|()
argument_list|,
name|configurator
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param visitor -      *            the visitor to register      * @throws RegistryException      */
DECL|method|registerScopeVisitor
specifier|public
specifier|synchronized
name|void
name|registerScopeVisitor
parameter_list|(
specifier|final
name|ScopeVisitor
name|visitor
parameter_list|)
throws|throws
name|RegistryException
block|{
if|if
condition|(
name|visitor
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"visitor must not be null"
argument_list|)
throw|;
name|Scope
name|scope
init|=
name|visitor
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|Scope
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|scope
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RegistryException
argument_list|(
literal|"Visitor has not Scope"
argument_list|)
throw|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"Register scope visitor -- "
operator|+
name|visitor
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|scope
operator|.
name|scope
argument_list|()
operator|.
name|equals
argument_list|(
name|Scope
operator|.
name|ScopeType
operator|.
name|REQUEST
argument_list|)
operator|&&
name|this
operator|.
name|requestVisitable
operator|!=
literal|null
condition|)
name|this
operator|.
name|requestVisitable
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|scope
operator|.
name|scope
argument_list|()
operator|==
name|Scope
operator|.
name|ScopeType
operator|.
name|SESSION
operator|&&
name|this
operator|.
name|sessionVisitable
operator|!=
literal|null
condition|)
name|this
operator|.
name|sessionVisitable
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|scope
operator|.
name|scope
argument_list|()
operator|==
name|Scope
operator|.
name|ScopeType
operator|.
name|CONTEXT
operator|&&
name|this
operator|.
name|contextVisitable
operator|!=
literal|null
condition|)
name|this
operator|.
name|sessionVisitable
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|this
operator|.
name|visitorBuffer
operator|.
name|contains
argument_list|(
name|visitor
argument_list|)
condition|)
name|this
operator|.
name|visitorBuffer
operator|.
name|add
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param visitable -      *            the instance to register      * @throws RegistryException      * @see ScopeVisitable      */
DECL|method|registerScopeVisitable
specifier|public
specifier|synchronized
name|void
name|registerScopeVisitable
parameter_list|(
specifier|final
name|ScopeVisitable
name|visitable
parameter_list|)
throws|throws
name|RegistryException
block|{
if|if
condition|(
name|visitable
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"visitable must not be null"
argument_list|)
throw|;
name|Scope
name|scope
init|=
name|visitable
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|Scope
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|scope
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RegistryException
argument_list|(
literal|"Visitable has not Scope"
argument_list|)
throw|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"Register scope visitable -- "
operator|+
name|visitable
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|scope
operator|.
name|scope
argument_list|()
operator|==
name|Scope
operator|.
name|ScopeType
operator|.
name|REQUEST
operator|&&
name|this
operator|.
name|requestVisitable
operator|==
literal|null
condition|)
name|this
operator|.
name|requestVisitable
operator|=
name|visitable
expr_stmt|;
elseif|else
if|if
condition|(
name|scope
operator|.
name|scope
argument_list|()
operator|==
name|Scope
operator|.
name|ScopeType
operator|.
name|SESSION
operator|&&
name|this
operator|.
name|sessionVisitable
operator|==
literal|null
condition|)
name|this
operator|.
name|sessionVisitable
operator|=
name|visitable
expr_stmt|;
elseif|else
if|if
condition|(
name|scope
operator|.
name|scope
argument_list|()
operator|==
name|Scope
operator|.
name|ScopeType
operator|.
name|CONTEXT
operator|&&
name|this
operator|.
name|contextVisitable
operator|==
literal|null
condition|)
name|this
operator|.
name|sessionVisitable
operator|=
name|visitable
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|visitorBuffer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ScopeVisitor
argument_list|>
name|tempList
init|=
name|this
operator|.
name|visitorBuffer
decl_stmt|;
name|this
operator|.
name|visitorBuffer
operator|=
operator|new
name|ArrayList
argument_list|<
name|ScopeVisitor
argument_list|>
argument_list|(
literal|5
argument_list|)
expr_stmt|;
for|for
control|(
name|ScopeVisitor
name|visitor
range|:
name|tempList
control|)
block|{
name|registerScopeVisitor
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
block|}
name|tempList
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Looks up the {@link ProvidedServiceConfig} by the given service name.      *       * @param service      * @return - the {@link ProvidedServiceConfig} or<code>null</code> if the      *         no configuration for this service has been registered      */
DECL|method|getProvidedService
specifier|public
name|ProvidedService
name|getProvidedService
parameter_list|(
name|String
name|service
parameter_list|)
block|{
if|if
condition|(
name|service
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Service is null - must not be null to get registered feed type"
argument_list|)
throw|;
return|return
name|this
operator|.
name|serviceTypeMap
operator|.
name|get
argument_list|(
name|service
argument_list|)
return|;
block|}
DECL|method|flushRegistry
specifier|protected
name|void
name|flushRegistry
parameter_list|()
block|{
name|Collection
argument_list|<
name|ProvidedService
argument_list|>
name|services
init|=
name|this
operator|.
name|serviceTypeMap
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|ProvidedService
name|service
range|:
name|services
control|)
block|{
name|service
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|serviceTypeMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|componentMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * @param service -      *            the name of the service      * @return -<code>true</code> if and only if the service is registered,      *         otherwise<code>false</code>.      */
DECL|method|isServiceRegistered
specifier|public
name|boolean
name|isServiceRegistered
parameter_list|(
name|String
name|service
parameter_list|)
block|{
return|return
name|this
operator|.
name|serviceTypeMap
operator|.
name|containsKey
argument_list|(
name|service
argument_list|)
return|;
block|}
comment|/**      * Destroys the registry and release all resources      */
DECL|method|destroy
specifier|public
name|void
name|destroy
parameter_list|()
block|{
for|for
control|(
name|ComponentBean
name|component
range|:
name|this
operator|.
name|componentMap
operator|.
name|values
argument_list|()
control|)
block|{
name|component
operator|.
name|getObject
argument_list|()
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
name|flushRegistry
argument_list|()
expr_stmt|;
block|}
comment|/**      * This method is the main interface to the Component Lookup Service of the      * registry. Every GDATA - Server component like STORAGE or the INDEXER      * component will be accessible via this method. To get a Component from the      * lookup service specify the expected Class as an argument and the      * component type of the component to return. For a lookup of the      * STORAGECONTORLER the code looks like:      *<p>      *<code> registryInstance.lookup(StorageController.class,ComponentType.STORAGECONTROLLER);</code>      *</p>      *       * @param<R>      *            the type of the expected return value      * @param clazz -      *            Class object of the expected return value      * @param compType -      *            The component type      * @return the registered component or<code>null</code> if the component      *         can not looked up.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|lookup
specifier|public
parameter_list|<
name|R
parameter_list|>
name|R
name|lookup
parameter_list|(
name|Class
argument_list|<
name|R
argument_list|>
name|clazz
parameter_list|,
name|ComponentType
name|compType
parameter_list|)
block|{
name|ComponentBean
name|bean
init|=
name|this
operator|.
name|componentMap
operator|.
name|get
argument_list|(
name|compType
argument_list|)
decl_stmt|;
if|if
condition|(
name|bean
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|bean
operator|.
name|getSuperType
argument_list|()
operator|.
name|equals
argument_list|(
name|clazz
argument_list|)
condition|)
return|return
operator|(
name|R
operator|)
name|bean
operator|.
name|getObject
argument_list|()
return|;
return|return
literal|null
return|;
block|}
comment|/**      * All registered {@link ServerComponent} registered via this method are      * available via the      * {@link GDataServerRegistry#lookup(Class, ComponentType)} method. For each      * {@link ComponentType} there will be one single instance registered in the      * registry.      *<p>      * Eventually this method invokes the initialize method of the      * ServerComponent interface to prepare the component to be available via      * the lookup service      *</p>      *       * @param<E> -      *            The interface of the component to register      * @param componentClass -      *            a implementation of a ServerComponent interface to register in      *            the registry      * @param configuration -      *            the component configuration {@link ComponentConfiguration}      * @throws RegistryException -      *             if the provided class does not implement the      *             {@link ServerComponent} interface, if the mandatory      *             annotations not visible at runtime or not set, if the super      *             type provided by the {@link ComponentType} for the class to      *             register is not a super type of the class or if the      *             invocation of the {@link ServerComponent#initialize()} method      *             throws an exception.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|registerComponent
specifier|public
parameter_list|<
name|E
extends|extends
name|ServerComponent
parameter_list|>
name|void
name|registerComponent
parameter_list|(
specifier|final
name|Class
argument_list|<
name|E
argument_list|>
name|componentClass
parameter_list|,
specifier|final
name|ComponentConfiguration
name|configuration
parameter_list|)
throws|throws
name|RegistryException
block|{
if|if
condition|(
name|componentClass
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"component class must not be null"
argument_list|)
throw|;
if|if
condition|(
operator|!
name|ReflectionUtils
operator|.
name|implementsType
argument_list|(
name|componentClass
argument_list|,
name|ServerComponent
operator|.
name|class
argument_list|)
condition|)
throw|throw
operator|new
name|RegistryException
argument_list|(
literal|"can not register component. the given class does not implement ServerComponent interface -- "
operator|+
name|componentClass
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
try|try
block|{
name|Component
name|annotation
init|=
name|componentClass
operator|.
name|getAnnotation
argument_list|(
name|Component
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotation
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RegistryException
argument_list|(
literal|"can not register component. the given class is not a component -- "
operator|+
name|componentClass
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
name|ComponentType
name|type
init|=
name|annotation
operator|.
name|componentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|componentMap
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
condition|)
throw|throw
operator|new
name|RegistryException
argument_list|(
literal|"component already registered -- "
operator|+
name|type
operator|.
name|name
argument_list|()
argument_list|)
throw|;
name|Class
name|superType
init|=
name|type
operator|.
name|getClass
argument_list|()
operator|.
name|getField
argument_list|(
name|type
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|getAnnotation
argument_list|(
name|SuperType
operator|.
name|class
argument_list|)
operator|.
name|superType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ReflectionUtils
operator|.
name|isTypeOf
argument_list|(
name|componentClass
argument_list|,
name|superType
argument_list|)
condition|)
throw|throw
operator|new
name|RegistryException
argument_list|(
literal|"Considered super type<"
operator|+
name|superType
operator|.
name|getName
argument_list|()
operator|+
literal|"> is not a super type of<"
operator|+
name|componentClass
operator|+
literal|">"
argument_list|)
throw|;
name|ServerComponent
name|comp
init|=
name|componentClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|configuration
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"no configuration for ComponentType: "
operator|+
name|type
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
name|configureComponent
argument_list|(
name|comp
argument_list|,
name|type
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
name|comp
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|ComponentBean
name|bean
init|=
operator|new
name|ComponentBean
argument_list|(
name|comp
argument_list|,
name|superType
argument_list|)
decl_stmt|;
name|this
operator|.
name|componentMap
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|bean
argument_list|)
expr_stmt|;
if|if
condition|(
name|ReflectionUtils
operator|.
name|implementsType
argument_list|(
name|componentClass
argument_list|,
name|ScopeVisitor
operator|.
name|class
argument_list|)
condition|)
name|this
operator|.
name|registerScopeVisitor
argument_list|(
operator|(
name|ScopeVisitor
operator|)
name|comp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RegistryException
argument_list|(
literal|"Can not register component -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/*      * Injects the configured properties located in the configuration into the      * given server component      */
DECL|method|configureComponent
specifier|private
name|void
name|configureComponent
parameter_list|(
specifier|final
name|ServerComponent
name|component
parameter_list|,
specifier|final
name|ComponentType
name|type
parameter_list|,
specifier|final
name|ComponentConfiguration
name|configuration
parameter_list|)
block|{
name|PropertyInjector
name|injector
init|=
operator|new
name|PropertyInjector
argument_list|()
decl_stmt|;
name|injector
operator|.
name|setTargetObject
argument_list|(
name|component
argument_list|)
expr_stmt|;
name|injector
operator|.
name|injectProperties
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
DECL|class|ComponentBean
specifier|private
specifier|static
class|class
name|ComponentBean
block|{
DECL|field|superType
specifier|private
specifier|final
name|Class
name|superType
decl_stmt|;
DECL|field|object
specifier|private
specifier|final
name|ServerComponent
name|object
decl_stmt|;
DECL|method|ComponentBean
name|ComponentBean
parameter_list|(
specifier|final
name|ServerComponent
name|object
parameter_list|,
specifier|final
name|Class
name|superType
parameter_list|)
block|{
name|this
operator|.
name|superType
operator|=
name|superType
expr_stmt|;
name|this
operator|.
name|object
operator|=
name|object
expr_stmt|;
block|}
DECL|method|getObject
name|ServerComponent
name|getObject
parameter_list|()
block|{
return|return
name|this
operator|.
name|object
return|;
block|}
DECL|method|getSuperType
name|Class
name|getSuperType
parameter_list|()
block|{
return|return
name|this
operator|.
name|superType
return|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.server.registry.EntryEventMediator#getEntryEventMediator()      */
annotation|@
name|Override
DECL|method|getEntryEventMediator
specifier|public
name|EntryEventMediator
name|getEntryEventMediator
parameter_list|()
block|{
return|return
name|this
return|;
block|}
comment|/**      * @return - all registered services      */
DECL|method|getServices
specifier|public
name|Collection
argument_list|<
name|ProvidedService
argument_list|>
name|getServices
parameter_list|()
block|{
return|return
name|this
operator|.
name|serviceTypeMap
operator|.
name|values
argument_list|()
return|;
block|}
block|}
end_class
end_unit
