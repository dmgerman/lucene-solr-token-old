begin_unit
begin_package
DECL|package|org.apache.lucene.gdata.storage.lucenestorage
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
operator|.
name|StorageEntryWrapper
operator|.
name|StorageOperation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexModifier
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_comment
comment|/**  * The StorageModifier is the a Singleton component of the LuceneStorage. There  * is one single instance of this class modifying the index used to store all  * the gdata Entities as Entries, Feeds and Users. This class contains an  * instance of {@link org.apache.lucene.index.IndexModifier} used to manage all  * delete and add actions to the storage.  *<p>  * To prevent the storage component from opening and closing the  * {@link org.apache.lucene.index.IndexModifier} for every modifying operation  * the incoming entry actions (DELETE, UPDATE, INSERT) will be buffered in a  * registered instance of  * {@link org.apache.lucene.gdata.storage.lucenestorage.StorageBuffer}. When a  * certain amout (specified as the persistfactor in the configuration file) of  * modifications have been executed the StorageModifier will persist the  * buffered entries.  *</p>  *<p>  * Feed and User operations won't be buffered. These actions occure not very  * often compared to entry actions. Every call of an user / feed modifying  * operation forces all changes to be written to the storage index.  *</p>  *   * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|StorageModifier
specifier|public
class|class
name|StorageModifier
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StorageModifier
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|deletedDocumentQueue
specifier|private
specifier|final
name|List
argument_list|<
name|Term
argument_list|>
name|deletedDocumentQueue
decl_stmt|;
DECL|field|deletedForUpdateDocumentQueue
specifier|private
specifier|final
name|List
argument_list|<
name|Term
argument_list|>
name|deletedForUpdateDocumentQueue
decl_stmt|;
DECL|field|documentMap
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Document
argument_list|>
name|documentMap
decl_stmt|;
DECL|field|forceWriteDocuments
specifier|private
specifier|final
name|List
argument_list|<
name|Document
argument_list|>
name|forceWriteDocuments
decl_stmt|;
DECL|field|forceWriteTerms
specifier|private
specifier|final
name|List
argument_list|<
name|Term
argument_list|>
name|forceWriteTerms
decl_stmt|;
DECL|field|persistFactor
specifier|private
specifier|volatile
name|int
name|persistFactor
decl_stmt|;
DECL|field|modifiedCounter
specifier|private
specifier|volatile
name|int
name|modifiedCounter
init|=
literal|0
decl_stmt|;
DECL|field|DEFAULT_PERSIST_FACTOR
specifier|private
specifier|static
name|int
name|DEFAULT_PERSIST_FACTOR
init|=
literal|10
decl_stmt|;
DECL|field|buffer
specifier|private
name|StorageBuffer
name|buffer
decl_stmt|;
DECL|field|modifier
specifier|private
name|IndexModifier
name|modifier
decl_stmt|;
DECL|field|lock
specifier|private
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|isClosed
specifier|private
specifier|final
name|AtomicBoolean
name|isClosed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|Lock
name|readLock
init|=
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|Lock
name|writeLock
init|=
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
DECL|field|DEFAULT_OPTIMIZE_INTERVAL
specifier|private
specifier|final
specifier|static
name|int
name|DEFAULT_OPTIMIZE_INTERVAL
init|=
literal|10
decl_stmt|;
DECL|field|optimizeInterval
specifier|private
specifier|final
name|int
name|optimizeInterval
decl_stmt|;
DECL|field|optimizeCounter
specifier|private
specifier|volatile
name|int
name|optimizeCounter
init|=
literal|0
decl_stmt|;
DECL|field|controller
specifier|private
specifier|final
name|StorageCoreController
name|controller
decl_stmt|;
comment|/**      * Creates a new StorageModifier      *       * @param controller -      *            the registered StorageController      * @param modifier -      *            the IndexModifier      * @param buffer -      *            the StorageBuffer      * @param persitsFactor -      *            the factor when the changes will be persisted to the storage      *            index      * @param optimizeInterval -      *            after how many storage operations the index will be optimized      */
DECL|method|StorageModifier
specifier|protected
name|StorageModifier
parameter_list|(
specifier|final
name|StorageCoreController
name|controller
parameter_list|,
specifier|final
name|IndexModifier
name|modifier
parameter_list|,
specifier|final
name|StorageBuffer
name|buffer
parameter_list|,
name|int
name|persitsFactor
parameter_list|,
name|int
name|optimizeInterval
parameter_list|)
block|{
name|this
operator|.
name|deletedDocumentQueue
operator|=
operator|new
name|LinkedList
argument_list|<
name|Term
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|deletedForUpdateDocumentQueue
operator|=
operator|new
name|LinkedList
argument_list|<
name|Term
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|documentMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Document
argument_list|>
argument_list|(
name|persitsFactor
argument_list|)
expr_stmt|;
name|this
operator|.
name|forceWriteDocuments
operator|=
operator|new
name|ArrayList
argument_list|<
name|Document
argument_list|>
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|this
operator|.
name|forceWriteTerms
operator|=
operator|new
name|ArrayList
argument_list|<
name|Term
argument_list|>
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
name|buffer
expr_stmt|;
name|this
operator|.
name|controller
operator|=
name|controller
expr_stmt|;
name|this
operator|.
name|persistFactor
operator|=
name|persitsFactor
operator|>
literal|0
condition|?
name|persitsFactor
else|:
name|DEFAULT_PERSIST_FACTOR
expr_stmt|;
name|this
operator|.
name|modifier
operator|=
name|modifier
expr_stmt|;
name|this
operator|.
name|optimizeInterval
operator|=
name|optimizeInterval
operator|<
name|DEFAULT_OPTIMIZE_INTERVAL
condition|?
name|DEFAULT_OPTIMIZE_INTERVAL
else|:
name|optimizeInterval
expr_stmt|;
block|}
comment|/**      * Updates the given entry. First the alredy persisted entry will be      * removed, after marking as deleted the new Entry will be written.      *       * @param wrapper -      *            the wrapper containing the entry      * @throws StorageException -      *             if the entry can not be stored      */
DECL|method|updateEntry
specifier|public
name|void
name|updateEntry
parameter_list|(
name|StorageEntryWrapper
name|wrapper
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|wrapper
operator|.
name|getOperation
argument_list|()
operator|!=
name|StorageOperation
operator|.
name|UPDATE
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Illegal method call -- updateEntry does not accept other storageOperations than update"
argument_list|)
throw|;
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Term
name|tempTerm
init|=
operator|new
name|Term
argument_list|(
name|StorageEntryWrapper
operator|.
name|FIELD_ENTRY_ID
argument_list|,
name|wrapper
operator|.
name|getEntryId
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|documentMap
operator|.
name|put
argument_list|(
name|wrapper
operator|.
name|getEntryId
argument_list|()
argument_list|,
name|wrapper
operator|.
name|getLuceneDocument
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|deletedForUpdateDocumentQueue
operator|.
name|add
argument_list|(
name|tempTerm
argument_list|)
expr_stmt|;
name|this
operator|.
name|buffer
operator|.
name|addEntry
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
name|storageModified
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Inserts a new Entry to the Lucene index storage      *       * @param wrapper -      *            the wrapper containing the entry      * @throws StorageException -      *             if the entry can not be stored      */
DECL|method|insertEntry
specifier|public
name|void
name|insertEntry
parameter_list|(
name|StorageEntryWrapper
name|wrapper
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|wrapper
operator|.
name|getOperation
argument_list|()
operator|!=
name|StorageOperation
operator|.
name|INSERT
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Illegal method call -- insertEntry does not accept other storage operations than insert"
argument_list|)
throw|;
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|documentMap
operator|.
name|put
argument_list|(
name|wrapper
operator|.
name|getEntryId
argument_list|()
argument_list|,
name|wrapper
operator|.
name|getLuceneDocument
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|buffer
operator|.
name|addEntry
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
name|storageModified
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Deletes the entry for the given entry id.      * @param wrapper - the wrapper containing the information to delete       *       * @throws StorageException -      *             if the entry can not be deleted      *       */
DECL|method|deleteEntry
specifier|public
name|void
name|deleteEntry
parameter_list|(
specifier|final
name|StorageEntryWrapper
name|wrapper
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|wrapper
operator|.
name|getOperation
argument_list|()
operator|!=
name|StorageOperation
operator|.
name|DELETE
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Illegal method call -- insertEntry does not accept other storage operations than delete"
argument_list|)
throw|;
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Term
name|tempTerm
init|=
operator|new
name|Term
argument_list|(
name|StorageEntryWrapper
operator|.
name|FIELD_ENTRY_ID
argument_list|,
name|wrapper
operator|.
name|getEntryId
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|deletedDocumentQueue
operator|.
name|add
argument_list|(
name|tempTerm
argument_list|)
expr_stmt|;
name|this
operator|.
name|buffer
operator|.
name|addDeleted
argument_list|(
name|wrapper
operator|.
name|getEntryId
argument_list|()
argument_list|,
name|wrapper
operator|.
name|getFeedId
argument_list|()
argument_list|)
expr_stmt|;
name|storageModified
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Adds a new Feed to the storage. Feed action will be not buffered. Call to      * this method forces the index to be written.      *       * @param wrapper -      *            the wrapper containing the feed;      * @throws StorageException -      *             if the feed can not be written      */
DECL|method|createFeed
specifier|public
name|void
name|createFeed
parameter_list|(
name|StorageFeedWrapper
name|wrapper
parameter_list|)
throws|throws
name|StorageException
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|forceWriteDocuments
operator|.
name|add
argument_list|(
name|wrapper
operator|.
name|getLuceneDocument
argument_list|()
argument_list|)
expr_stmt|;
name|storageModified
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Adds a new accountr to the storage. User action will be not buffered. Call to      * this method forces the index to be written.      *       * @param account      *            -the wrapper containig the user to be persisted      * @throws StorageException -      *             if the user can not be persisted.      */
DECL|method|createAccount
specifier|public
name|void
name|createAccount
parameter_list|(
name|StorageAccountWrapper
name|account
parameter_list|)
throws|throws
name|StorageException
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|forceWriteDocuments
operator|.
name|add
argument_list|(
name|account
operator|.
name|getLuceneDocument
argument_list|()
argument_list|)
expr_stmt|;
name|storageModified
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Deletes the user with the given username. User action will be not      * buffered. Call to this method forces the index to be written.      *       * @param accountName -      *            the user to be deleted      * @throws StorageException -      *             If the user could not be deleted      */
DECL|method|deleteAccount
specifier|public
name|void
name|deleteAccount
parameter_list|(
name|String
name|accountName
parameter_list|)
throws|throws
name|StorageException
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|//TODO delete all feeds and entries of this account
name|this
operator|.
name|forceWriteTerms
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|StorageAccountWrapper
operator|.
name|FIELD_ACCOUNTNAME
argument_list|,
name|accountName
argument_list|)
argument_list|)
expr_stmt|;
name|storageModified
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * User action will be not buffered. Call to this method forces the index to      * be written.      *       * @param user      *            -the wrapper containig the user to be persisted      * @throws StorageException -      *             if the user can not be persisted.      */
DECL|method|updateAccount
specifier|public
name|void
name|updateAccount
parameter_list|(
specifier|final
name|StorageAccountWrapper
name|user
parameter_list|)
throws|throws
name|StorageException
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|forceWriteTerms
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|StorageAccountWrapper
operator|.
name|FIELD_ACCOUNTNAME
argument_list|,
name|user
operator|.
name|getUser
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|forceWriteDocuments
operator|.
name|add
argument_list|(
name|user
operator|.
name|getLuceneDocument
argument_list|()
argument_list|)
expr_stmt|;
name|storageModified
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Feed action will be not buffered. Call to this method forces the index to      * be written.      *       * @param wrapper -      *            the wrapper containig the feed      * @throws StorageException -      *             if the feed can not be persisted      */
DECL|method|updateFeed
specifier|public
name|void
name|updateFeed
parameter_list|(
specifier|final
name|StorageFeedWrapper
name|wrapper
parameter_list|)
throws|throws
name|StorageException
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|forceWriteTerms
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|StorageFeedWrapper
operator|.
name|FIELD_FEED_ID
argument_list|,
name|wrapper
operator|.
name|getFeed
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|forceWriteDocuments
operator|.
name|add
argument_list|(
name|wrapper
operator|.
name|getLuceneDocument
argument_list|()
argument_list|)
expr_stmt|;
name|storageModified
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Deletes the feed with the given feed id Feed action will be not buffered.      * Call to this method forces the index to be written.      * All entries referencing the given feed id will be deleted as well!      * @param feedId -      *            the id of the feed to delete      * @throws StorageException -      *             if the feed can not be deleted      */
DECL|method|deleteFeed
specifier|public
name|void
name|deleteFeed
parameter_list|(
specifier|final
name|String
name|feedId
parameter_list|)
throws|throws
name|StorageException
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|deletedDocumentQueue
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|StorageEntryWrapper
operator|.
name|FIELD_FEED_REFERENCE
argument_list|,
name|feedId
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|forceWriteTerms
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|StorageFeedWrapper
operator|.
name|FIELD_FEED_ID
argument_list|,
name|feedId
argument_list|)
argument_list|)
expr_stmt|;
name|storageModified
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|storageModified
specifier|private
name|void
name|storageModified
parameter_list|()
throws|throws
name|StorageException
block|{
if|if
condition|(
name|this
operator|.
name|isClosed
operator|.
name|get
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"StorageModifier is already closed"
argument_list|)
throw|;
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|isClosed
operator|.
name|get
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"StorageModifier is already closed"
argument_list|)
throw|;
name|incrementCounter
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|persistFactor
operator|>
name|this
operator|.
name|modifiedCounter
operator|&&
name|this
operator|.
name|forceWriteDocuments
operator|.
name|size
argument_list|()
operator|<=
literal|0
operator|&&
name|this
operator|.
name|forceWriteTerms
operator|.
name|size
argument_list|()
operator|<=
literal|0
condition|)
return|return;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"Storage modified for "
operator|+
name|this
operator|.
name|modifiedCounter
operator|+
literal|" times. Write Persistent index"
argument_list|)
expr_stmt|;
name|writePersistentIndex
argument_list|(
operator|(
name|this
operator|.
name|optimizeCounter
operator|>=
name|this
operator|.
name|optimizeInterval
operator|)
argument_list|)
expr_stmt|;
name|requestNewIndexModifier
argument_list|()
expr_stmt|;
name|this
operator|.
name|modifiedCounter
operator|=
literal|0
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Writing persistent index failed - Recovering"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"could not write to storage index -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|forceWrite
specifier|protected
name|void
name|forceWrite
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|isClosed
operator|.
name|get
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"StorageModifier is already closed"
argument_list|)
throw|;
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"ForceWrite called -- current modifiedCounter: "
operator|+
name|this
operator|.
name|modifiedCounter
operator|+
literal|" - persisting changes"
argument_list|)
expr_stmt|;
name|writePersistentIndex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|requestNewIndexModifier
argument_list|()
expr_stmt|;
name|this
operator|.
name|modifiedCounter
operator|=
literal|0
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|requestNewIndexModifier
specifier|private
name|void
name|requestNewIndexModifier
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|controller
operator|.
name|registerNewStorageQuery
argument_list|()
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
name|this
operator|.
name|controller
operator|.
name|releaseNewStorageBuffer
argument_list|()
expr_stmt|;
name|this
operator|.
name|modifier
operator|=
name|this
operator|.
name|controller
operator|.
name|createIndexModifier
argument_list|()
expr_stmt|;
block|}
DECL|method|writePersistentIndex
specifier|private
name|void
name|writePersistentIndex
parameter_list|(
specifier|final
name|boolean
name|optimize
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|/*              * first delete all updated documents              */
for|for
control|(
name|Term
name|entryIdTerm
range|:
name|this
operator|.
name|deletedForUpdateDocumentQueue
control|)
block|{
name|this
operator|.
name|modifier
operator|.
name|deleteDocuments
argument_list|(
name|entryIdTerm
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Term
name|term
range|:
name|this
operator|.
name|forceWriteTerms
control|)
block|{
name|this
operator|.
name|modifier
operator|.
name|deleteDocuments
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
comment|/*              * add all documents              */
name|Collection
argument_list|<
name|Document
argument_list|>
name|documents
init|=
name|this
operator|.
name|documentMap
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|Document
name|doc
range|:
name|documents
control|)
block|{
name|this
operator|.
name|modifier
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|/*              * write all users or feeds              */
for|for
control|(
name|Document
name|docs
range|:
name|this
operator|.
name|forceWriteDocuments
control|)
block|{
name|this
operator|.
name|modifier
operator|.
name|addDocument
argument_list|(
name|docs
argument_list|)
expr_stmt|;
block|}
comment|/*              * delete all documents marked as deleted. As the DocumentIDs are              * unique the document marked as deleted must not persist after the              * index has been written. In the case of an update of a document              * and a previous delete the concurrency component will not allow an              * update. new inserted entries can not be deleted accidently-              */
for|for
control|(
name|Term
name|entryIdTerm
range|:
name|this
operator|.
name|deletedDocumentQueue
control|)
block|{
name|this
operator|.
name|modifier
operator|.
name|deleteDocuments
argument_list|(
name|entryIdTerm
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|modifier
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|optimize
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"Optimizing index -- optimize interval "
operator|+
name|this
operator|.
name|optimizeInterval
argument_list|)
expr_stmt|;
name|this
operator|.
name|modifier
operator|.
name|optimize
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|optimize
condition|)
name|this
operator|.
name|optimizeCounter
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|modifier
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|deletedForUpdateDocumentQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|deletedDocumentQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|documentMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|forceWriteDocuments
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|forceWriteTerms
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|close
specifier|protected
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|isClosed
operator|.
name|get
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"StorageModifier is already closed"
argument_list|)
throw|;
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|isClosed
operator|.
name|get
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"StorageModifier is already closed"
argument_list|)
throw|;
name|this
operator|.
name|isClosed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"ForceWrite called -- current modifiedCounter: "
operator|+
name|this
operator|.
name|modifiedCounter
operator|+
literal|" - persisting changes"
argument_list|)
expr_stmt|;
name|writePersistentIndex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|modifiedCounter
operator|=
literal|0
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|incrementCounter
specifier|private
name|void
name|incrementCounter
parameter_list|()
block|{
name|this
operator|.
name|optimizeCounter
operator|++
expr_stmt|;
name|this
operator|.
name|modifiedCounter
operator|++
expr_stmt|;
block|}
block|}
end_class
end_unit
