begin_unit
begin_package
DECL|package|org.apache.lucene.gdata.storage.lucenestorage
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexModifier
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_comment
comment|/**   * TODO document this   * @author Simon Willnauer   *   */
end_comment
begin_class
DECL|class|StorageModifier
specifier|public
class|class
name|StorageModifier
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StorageModifier
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|deletedDocumentQueue
specifier|private
specifier|final
name|List
argument_list|<
name|Term
argument_list|>
name|deletedDocumentQueue
decl_stmt|;
DECL|field|deletedForUpdateDocumentQueue
specifier|private
specifier|final
name|List
argument_list|<
name|Term
argument_list|>
name|deletedForUpdateDocumentQueue
decl_stmt|;
DECL|field|documentMap
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Document
argument_list|>
name|documentMap
decl_stmt|;
DECL|field|persistFactor
specifier|private
specifier|volatile
name|int
name|persistFactor
decl_stmt|;
DECL|field|modifiedCounter
specifier|private
specifier|volatile
name|int
name|modifiedCounter
init|=
literal|0
decl_stmt|;
DECL|field|DEFAULT_PERSIST_FACTOR
specifier|private
specifier|static
name|int
name|DEFAULT_PERSIST_FACTOR
init|=
literal|10
decl_stmt|;
DECL|field|buffer
specifier|private
name|StorageBuffer
name|buffer
decl_stmt|;
DECL|field|modifier
specifier|private
name|IndexModifier
name|modifier
decl_stmt|;
DECL|field|lock
specifier|private
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|readLock
specifier|private
name|Lock
name|readLock
init|=
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
decl_stmt|;
DECL|field|writeLock
specifier|private
name|Lock
name|writeLock
init|=
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
DECL|field|DEFAULT_OPTIMIZE_INTERVAL
specifier|private
specifier|final
specifier|static
name|int
name|DEFAULT_OPTIMIZE_INTERVAL
init|=
literal|10
decl_stmt|;
DECL|field|optimizeInterval
specifier|private
specifier|final
name|int
name|optimizeInterval
decl_stmt|;
DECL|field|optimizeCounter
specifier|private
name|int
name|optimizeCounter
init|=
literal|0
decl_stmt|;
comment|/**       * TODO document this       * @param modifier       * @param buffer       * @param persitsFactor       * @param optimizeInterval        */
DECL|method|StorageModifier
specifier|public
name|StorageModifier
parameter_list|(
specifier|final
name|IndexModifier
name|modifier
parameter_list|,
specifier|final
name|StorageBuffer
name|buffer
parameter_list|,
name|int
name|persitsFactor
parameter_list|,
name|int
name|optimizeInterval
parameter_list|)
block|{
name|this
operator|.
name|deletedDocumentQueue
operator|=
operator|new
name|LinkedList
argument_list|<
name|Term
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|deletedForUpdateDocumentQueue
operator|=
operator|new
name|LinkedList
argument_list|<
name|Term
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|documentMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Document
argument_list|>
argument_list|(
name|persitsFactor
argument_list|)
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
name|buffer
expr_stmt|;
name|this
operator|.
name|persistFactor
operator|=
name|persitsFactor
operator|>
literal|0
condition|?
name|persitsFactor
else|:
name|DEFAULT_PERSIST_FACTOR
expr_stmt|;
name|this
operator|.
name|modifier
operator|=
name|modifier
expr_stmt|;
name|this
operator|.
name|optimizeInterval
operator|=
name|optimizeInterval
operator|<
name|DEFAULT_OPTIMIZE_INTERVAL
condition|?
name|DEFAULT_OPTIMIZE_INTERVAL
else|:
name|optimizeInterval
expr_stmt|;
block|}
comment|/**       * TODO document this       * @param wrapper       * @throws StorageException       */
DECL|method|updateEntry
specifier|public
name|void
name|updateEntry
parameter_list|(
name|StorageEntryWrapper
name|wrapper
parameter_list|)
throws|throws
name|StorageException
block|{
try|try
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|Term
name|tempTerm
init|=
operator|new
name|Term
argument_list|(
name|StorageEntryWrapper
operator|.
name|FIELD_ENTRY_ID
argument_list|,
name|wrapper
operator|.
name|getEntryId
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|buffer
operator|.
name|addEntry
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
name|this
operator|.
name|deletedForUpdateDocumentQueue
operator|.
name|add
argument_list|(
name|tempTerm
argument_list|)
expr_stmt|;
name|this
operator|.
name|documentMap
operator|.
name|put
argument_list|(
name|wrapper
operator|.
name|getEntryId
argument_list|()
argument_list|,
name|wrapper
operator|.
name|getLuceneDocument
argument_list|()
argument_list|)
expr_stmt|;
name|storageModified
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**       * TODO document this       * @param wrapper       * @throws StorageException        */
DECL|method|insertEntry
specifier|public
name|void
name|insertEntry
parameter_list|(
name|StorageEntryWrapper
name|wrapper
parameter_list|)
throws|throws
name|StorageException
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|buffer
operator|.
name|addEntry
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
name|this
operator|.
name|documentMap
operator|.
name|put
argument_list|(
name|wrapper
operator|.
name|getEntryId
argument_list|()
argument_list|,
name|wrapper
operator|.
name|getLuceneDocument
argument_list|()
argument_list|)
expr_stmt|;
name|storageModified
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**       *TODO document this       * @param entryId       * @param feedId       * @throws StorageException        *       */
DECL|method|deleteEntry
specifier|public
name|void
name|deleteEntry
parameter_list|(
specifier|final
name|String
name|entryId
parameter_list|,
specifier|final
name|String
name|feedId
parameter_list|)
throws|throws
name|StorageException
block|{
try|try
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|Term
name|tempTerm
init|=
operator|new
name|Term
argument_list|(
name|StorageEntryWrapper
operator|.
name|FIELD_ENTRY_ID
argument_list|,
name|entryId
argument_list|)
decl_stmt|;
name|this
operator|.
name|buffer
operator|.
name|addDeleted
argument_list|(
name|entryId
argument_list|,
name|feedId
argument_list|)
expr_stmt|;
name|this
operator|.
name|deletedDocumentQueue
operator|.
name|add
argument_list|(
name|tempTerm
argument_list|)
expr_stmt|;
name|storageModified
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|storageModified
specifier|private
name|void
name|storageModified
parameter_list|()
throws|throws
name|StorageException
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|incrementCounter
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|persistFactor
operator|>
name|this
operator|.
name|modifiedCounter
condition|)
return|return;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"Storage modified for "
operator|+
name|this
operator|.
name|modifiedCounter
operator|+
literal|" times. Write Persistent index"
argument_list|)
expr_stmt|;
name|writePersistentIndex
argument_list|(
operator|(
name|this
operator|.
name|optimizeCounter
operator|>=
name|this
operator|.
name|optimizeInterval
operator|)
argument_list|)
expr_stmt|;
name|requestNewIndexModifier
argument_list|()
expr_stmt|;
name|this
operator|.
name|modifiedCounter
operator|=
literal|0
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Writing persistent index failed - Recovering"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|forceWrite
specifier|protected
name|void
name|forceWrite
parameter_list|()
throws|throws
name|IOException
throws|,
name|StorageException
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"ForceWrite called -- current modifiedCounter: "
operator|+
name|this
operator|.
name|modifiedCounter
operator|+
literal|" - persisting changes"
argument_list|)
expr_stmt|;
name|writePersistentIndex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|requestNewIndexModifier
argument_list|()
expr_stmt|;
name|this
operator|.
name|modifiedCounter
operator|=
literal|0
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|requestNewIndexModifier
specifier|private
name|void
name|requestNewIndexModifier
parameter_list|()
throws|throws
name|IOException
throws|,
name|StorageException
block|{
name|StorageCoreController
name|controller
init|=
name|StorageCoreController
operator|.
name|getStorageCoreController
argument_list|()
decl_stmt|;
name|controller
operator|.
name|registerNewStorageQuery
argument_list|()
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
name|controller
operator|.
name|releaseNewStorageBuffer
argument_list|()
expr_stmt|;
name|this
operator|.
name|modifier
operator|=
name|controller
operator|.
name|createIndexModifier
argument_list|()
expr_stmt|;
block|}
DECL|method|writePersistentIndex
specifier|private
name|void
name|writePersistentIndex
parameter_list|(
specifier|final
name|boolean
name|optimize
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|/*               * first delete all updated documents               */
for|for
control|(
name|Term
name|entryIdTerm
range|:
name|this
operator|.
name|deletedForUpdateDocumentQueue
control|)
block|{
name|this
operator|.
name|modifier
operator|.
name|deleteDocuments
argument_list|(
name|entryIdTerm
argument_list|)
expr_stmt|;
block|}
comment|/*               * add all documents               */
name|Collection
argument_list|<
name|Document
argument_list|>
name|documents
init|=
name|this
operator|.
name|documentMap
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|Document
name|doc
range|:
name|documents
control|)
block|{
name|this
operator|.
name|modifier
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|/*               * delete all documents marked as deleted. As the DocumentIDs are               * unique the document marked as deleted must not persist after the               * index has been written.               * In the case of an update of a document and a previous delete the concurrency component will not allow an update.               * new inserted entries can not be deleted accidently-               */
for|for
control|(
name|Term
name|entryIdTerm
range|:
name|this
operator|.
name|deletedDocumentQueue
control|)
block|{
name|this
operator|.
name|modifier
operator|.
name|deleteDocuments
argument_list|(
name|entryIdTerm
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|modifier
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|optimize
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"Optimizing index -- optimize interval "
operator|+
name|this
operator|.
name|optimizeInterval
argument_list|)
expr_stmt|;
name|this
operator|.
name|modifier
operator|.
name|optimize
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|optimize
condition|)
name|this
operator|.
name|optimizeCounter
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|modifier
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|deletedForUpdateDocumentQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|deletedDocumentQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|documentMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|close
specifier|protected
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"ForceWrite called -- current modifiedCounter: "
operator|+
name|this
operator|.
name|modifiedCounter
operator|+
literal|" - persisting changes"
argument_list|)
expr_stmt|;
name|writePersistentIndex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|modifiedCounter
operator|=
literal|0
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|incrementCounter
specifier|private
name|void
name|incrementCounter
parameter_list|()
block|{
name|this
operator|.
name|optimizeCounter
operator|++
expr_stmt|;
name|this
operator|.
name|modifiedCounter
operator|++
expr_stmt|;
block|}
block|}
end_class
end_unit
