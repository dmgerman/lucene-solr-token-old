begin_unit
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.search.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|search
operator|.
name|index
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|data
operator|.
name|ServerBaseEntry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|data
operator|.
name|ServerBaseFeed
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|search
operator|.
name|GDataSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|search
operator|.
name|SearchComponent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|search
operator|.
name|StandardGdataSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|search
operator|.
name|config
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|Component
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|ComponentType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|EntryEventListener
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|GDataServerRegistry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|ProvidedService
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|utils
operator|.
name|ReferenceCounter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNameFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import
begin_comment
comment|/**  * Default implementation of the {@link SearchComponent} interface. All actions  * on the index will be controlled from this class. Only this class grants read  * or write actions access to the index.  *   * @author Simon Willnauer  *   */
end_comment
begin_class
annotation|@
name|Component
argument_list|(
name|componentType
operator|=
name|ComponentType
operator|.
name|SEARCHCONTROLLER
argument_list|)
DECL|class|IndexController
specifier|public
class|class
name|IndexController
implements|implements
name|SearchComponent
implements|,
name|IndexEventListener
implements|,
name|EntryEventListener
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|IndexController
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|isInitialized
specifier|private
specifier|final
name|AtomicBoolean
name|isInitialized
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|destroyed
specifier|private
specifier|final
name|AtomicBoolean
name|destroyed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|indexerMap
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|ServiceIndex
argument_list|>
name|indexerMap
decl_stmt|;
DECL|field|taskExecutor
specifier|private
specifier|final
name|ExecutorService
name|taskExecutor
decl_stmt|;
comment|/**      * Creates a new IndexController -- call      * {@link IndexController#initialize()} to set up the controller.      */
DECL|method|IndexController
specifier|public
name|IndexController
parameter_list|()
block|{
name|this
operator|.
name|taskExecutor
operator|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
expr_stmt|;
block|}
comment|/**      * @see org.apache.lucene.gdata.search.SearchComponent#initialize()      */
DECL|method|initialize
specifier|public
specifier|synchronized
name|void
name|initialize
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|isInitialized
operator|.
name|get
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"IndexController is already initialized"
argument_list|)
throw|;
name|this
operator|.
name|destroyed
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|/*          * if this fails the server must not startup --> throw runtime exception          */
name|GDataServerRegistry
operator|.
name|getRegistry
argument_list|()
operator|.
name|registerEntryEventListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|GDataServerRegistry
operator|.
name|getRegistry
argument_list|()
operator|.
name|registerEntryEventListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|ProvidedService
argument_list|>
name|services
init|=
name|GDataServerRegistry
operator|.
name|getRegistry
argument_list|()
operator|.
name|getServices
argument_list|()
decl_stmt|;
name|this
operator|.
name|indexerMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|ServiceIndex
argument_list|>
argument_list|(
name|services
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ProvidedService
name|service
range|:
name|services
control|)
block|{
name|IndexSchema
name|schema
init|=
name|service
operator|.
name|getIndexSchema
argument_list|()
decl_stmt|;
comment|/*              * initialize will fail if mandatory values are not set. This is              * just a              */
name|schema
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|addIndexSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|isInitialized
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/*      * add a schema to the index controller and create the indexer. create      * directories and check out existing indexes      */
DECL|method|addIndexSchema
specifier|protected
name|void
name|addIndexSchema
parameter_list|(
specifier|final
name|IndexSchema
name|schema
parameter_list|)
block|{
name|checkDestroyed
argument_list|()
expr_stmt|;
if|if
condition|(
name|schema
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"schema has no name -- is not associated with any service"
argument_list|)
throw|;
if|if
condition|(
name|this
operator|.
name|indexerMap
operator|.
name|containsKey
argument_list|(
name|schema
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"schema for service "
operator|+
name|schema
operator|.
name|getName
argument_list|()
operator|+
literal|" is already registered"
argument_list|)
throw|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"add new IndexSchema for service "
operator|+
name|schema
operator|.
name|getName
argument_list|()
operator|+
literal|" -- "
operator|+
name|schema
argument_list|)
expr_stmt|;
try|try
block|{
name|ServiceIndex
name|bean
init|=
name|createIndexer
argument_list|(
name|schema
argument_list|)
decl_stmt|;
name|ReferenceCounter
argument_list|<
name|IndexSearcher
argument_list|>
name|searcher
init|=
name|getNewServiceSearcher
argument_list|(
name|bean
operator|.
name|getDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|bean
operator|.
name|setSearcher
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexerMap
operator|.
name|put
argument_list|(
name|schema
operator|.
name|getName
argument_list|()
argument_list|,
name|bean
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can not create indexer for service "
operator|+
name|schema
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|GdataIndexerException
argument_list|(
literal|"Can not create indexer for service "
operator|+
name|schema
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createIndexer
specifier|protected
name|ServiceIndex
name|createIndexer
parameter_list|(
specifier|final
name|IndexSchema
name|schema
parameter_list|)
throws|throws
name|IOException
block|{
name|GDataIndexer
name|indexer
decl_stmt|;
name|File
name|indexLocation
init|=
name|createIndexLocation
argument_list|(
name|schema
operator|.
name|getIndexLocation
argument_list|()
argument_list|,
name|schema
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|create
init|=
name|createIndexDirectory
argument_list|(
name|indexLocation
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
name|FSDirectory
operator|.
name|getDirectory
argument_list|(
name|indexLocation
argument_list|,
name|create
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"Create new Indexer for IndexSchema: "
operator|+
name|schema
argument_list|)
expr_stmt|;
comment|/*          * timed or committed indexer?! keep the possibility to let users decide          * to use scheduled commits          */
if|if
condition|(
name|schema
operator|.
name|isUseTimedIndexer
argument_list|()
condition|)
name|indexer
operator|=
name|GDataIndexer
operator|.
name|createTimedGdataIndexer
argument_list|(
name|schema
argument_list|,
name|dir
argument_list|,
name|create
argument_list|,
name|schema
operator|.
name|getIndexerIdleTime
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|indexer
operator|=
name|GDataIndexer
operator|.
name|createGdataIndexer
argument_list|(
name|schema
argument_list|,
name|dir
argument_list|,
name|create
argument_list|)
expr_stmt|;
name|indexer
operator|.
name|registerIndexEventListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
operator|new
name|ServiceIndex
argument_list|(
name|schema
argument_list|,
name|indexer
argument_list|,
name|dir
argument_list|)
return|;
block|}
comment|/*      * if this fails the server must not startup!!      */
DECL|method|createIndexLocation
specifier|protected
name|File
name|createIndexLocation
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
operator|||
name|name
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GdataIndexerException
argument_list|(
literal|"Path or Name of the index location is not set Path: "
operator|+
name|path
operator|+
literal|" name: "
operator|+
name|name
argument_list|)
throw|;
comment|/*          * check if parent e.g. the configured path is a directory          */
name|File
name|parent
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|parent
operator|.
name|isDirectory
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"the given path is not a directory -- "
operator|+
name|path
argument_list|)
throw|;
comment|/*          * try to create and throw ex if fail          */
if|if
condition|(
operator|!
name|parent
operator|.
name|exists
argument_list|()
condition|)
if|if
condition|(
operator|!
name|parent
operator|.
name|mkdir
argument_list|()
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can not create directory -- "
operator|+
name|path
argument_list|)
throw|;
comment|/*          * try to create and throw ex if fail          */
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isFile
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"A file with the name"
operator|+
name|name
operator|+
literal|" already exists in "
operator|+
name|path
operator|+
literal|" -- a file of the name of the service must not exist in the index location"
argument_list|)
throw|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|mkdir
argument_list|()
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can not create directory -- "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|file
return|;
block|}
DECL|method|createIndexDirectory
specifier|protected
name|boolean
name|createIndexDirectory
parameter_list|(
specifier|final
name|File
name|file
parameter_list|)
block|{
comment|/*          * use a lucene filename filter to figure out if there is an existing          * index in the defined directory          */
name|String
index|[]
name|luceneFiles
init|=
name|file
operator|.
name|list
argument_list|(
operator|new
name|IndexFileNameFilter
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|!
operator|(
name|luceneFiles
operator|.
name|length
operator|>
literal|0
operator|)
return|;
block|}
comment|/**      * @see org.apache.lucene.gdata.search.index.IndexEventListener#commitCallBack(java.lang.String)      */
DECL|method|commitCallBack
specifier|public
specifier|synchronized
name|void
name|commitCallBack
parameter_list|(
specifier|final
name|String
name|service
parameter_list|)
block|{
name|checkDestroyed
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"CommitCallback triggered - register new searcher for service: "
operator|+
name|service
argument_list|)
expr_stmt|;
comment|/*          * get the old searcher and replace it if possible.          */
name|ServiceIndex
name|index
init|=
name|this
operator|.
name|indexerMap
operator|.
name|get
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|ReferenceCounter
argument_list|<
name|IndexSearcher
argument_list|>
name|searcher
init|=
name|index
operator|.
name|getSearcher
argument_list|()
decl_stmt|;
try|try
block|{
name|index
operator|.
name|setSearcher
argument_list|(
name|getNewServiceSearcher
argument_list|(
name|index
operator|.
name|getDirectory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Can not create new Searcher -- keep the old one "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
comment|/*          * if new searcher if registered decrement old one to get it destroyed if unused          */
name|searcher
operator|.
name|decrementRef
argument_list|()
expr_stmt|;
block|}
comment|/*      * create a new ReferenceCounter for the indexSearcher.      * The reference is already incremented before returned      */
DECL|method|getNewServiceSearcher
specifier|private
name|ReferenceCounter
argument_list|<
name|IndexSearcher
argument_list|>
name|getNewServiceSearcher
parameter_list|(
specifier|final
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"Create new ServiceSearcher"
argument_list|)
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|ReferenceCounter
argument_list|<
name|IndexSearcher
argument_list|>
name|holder
init|=
operator|new
name|ReferenceCounter
argument_list|<
name|IndexSearcher
argument_list|>
argument_list|(
name|searcher
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Close IndexSearcher -- Zero references remaining"
argument_list|)
expr_stmt|;
name|this
operator|.
name|resource
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can not close IndexSearcher -- "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|holder
operator|.
name|increamentReference
argument_list|()
expr_stmt|;
return|return
name|holder
return|;
block|}
comment|/**      * @see org.apache.lucene.gdata.server.registry.EntryEventListener#fireUpdateEvent(org.apache.lucene.gdata.data.ServerBaseEntry)      */
DECL|method|fireUpdateEvent
specifier|public
name|void
name|fireUpdateEvent
parameter_list|(
specifier|final
name|ServerBaseEntry
name|entry
parameter_list|)
block|{
name|createNewIndexerTask
argument_list|(
name|entry
argument_list|,
name|IndexAction
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see org.apache.lucene.gdata.server.registry.EntryEventListener#fireInsertEvent(org.apache.lucene.gdata.data.ServerBaseEntry)      */
DECL|method|fireInsertEvent
specifier|public
name|void
name|fireInsertEvent
parameter_list|(
specifier|final
name|ServerBaseEntry
name|entry
parameter_list|)
block|{
name|createNewIndexerTask
argument_list|(
name|entry
argument_list|,
name|IndexAction
operator|.
name|INSERT
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see org.apache.lucene.gdata.server.registry.EntryEventListener#fireDeleteEvent(org.apache.lucene.gdata.data.ServerBaseEntry)      */
DECL|method|fireDeleteEvent
specifier|public
name|void
name|fireDeleteEvent
parameter_list|(
specifier|final
name|ServerBaseEntry
name|entry
parameter_list|)
block|{
name|createNewIndexerTask
argument_list|(
name|entry
argument_list|,
name|IndexAction
operator|.
name|DELETE
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see org.apache.lucene.gdata.server.registry.EntryEventListener#fireDeleteAllEntries(org.apache.lucene.gdata.data.ServerBaseFeed)      */
DECL|method|fireDeleteAllEntries
specifier|public
name|void
name|fireDeleteAllEntries
parameter_list|(
specifier|final
name|ServerBaseFeed
name|feed
parameter_list|)
block|{
name|createNewDeleteAllEntriesTask
argument_list|(
name|feed
argument_list|)
expr_stmt|;
block|}
DECL|method|createNewDeleteAllEntriesTask
specifier|private
name|void
name|createNewDeleteAllEntriesTask
parameter_list|(
specifier|final
name|ServerBaseFeed
name|feed
parameter_list|)
block|{
name|checkDestroyed
argument_list|()
expr_stmt|;
name|checkInitialized
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting all entries for feed dispatch new IndexDocumentBuilder -- "
operator|+
name|feed
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|serviceName
init|=
name|feed
operator|.
name|getServiceConfig
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ServiceIndex
name|bean
init|=
name|this
operator|.
name|indexerMap
operator|.
name|get
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|bean
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no indexer for service "
operator|+
name|serviceName
operator|+
literal|" registered"
argument_list|)
throw|;
name|Lock
name|lock
init|=
name|bean
operator|.
name|getLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|IndexDocumentBuilder
argument_list|<
name|IndexDocument
argument_list|>
name|callable
init|=
operator|new
name|IndexFeedDeleteTask
argument_list|(
name|feed
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|sumbitTask
argument_list|(
name|callable
argument_list|,
name|bean
operator|.
name|getIndexer
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|// TODO add test for this method!!
DECL|method|createNewIndexerTask
specifier|private
name|void
name|createNewIndexerTask
parameter_list|(
specifier|final
name|ServerBaseEntry
name|entry
parameter_list|,
specifier|final
name|IndexAction
name|action
parameter_list|)
block|{
name|checkDestroyed
argument_list|()
expr_stmt|;
name|checkInitialized
argument_list|()
expr_stmt|;
name|String
name|serviceName
init|=
name|entry
operator|.
name|getServiceConfig
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"New Indexer Task submitted - Action: "
operator|+
name|action
operator|+
literal|" for service: "
operator|+
name|serviceName
argument_list|)
expr_stmt|;
name|ServiceIndex
name|bean
init|=
name|this
operator|.
name|indexerMap
operator|.
name|get
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|bean
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no indexer for service "
operator|+
name|serviceName
operator|+
literal|" registered"
argument_list|)
throw|;
comment|/*          * lock on service to synchronize the event order. This lock has          * fairness parameter set to true. Grant access to the longest waiting          * thread. Using fairness is slower but is acceptable in this context          */
name|Lock
name|lock
init|=
name|bean
operator|.
name|getLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|IndexSchema
name|schema
init|=
name|bean
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|boolean
name|commitAfter
init|=
name|bean
operator|.
name|incrementActionAndReset
argument_list|(
name|schema
operator|.
name|getCommitAfterDocuments
argument_list|()
argument_list|)
decl_stmt|;
name|IndexDocumentBuilder
argument_list|<
name|IndexDocument
argument_list|>
name|callable
init|=
operator|new
name|IndexDocumentBuilderTask
argument_list|<
name|IndexDocument
argument_list|>
argument_list|(
name|entry
argument_list|,
name|bean
operator|.
name|getSchema
argument_list|()
argument_list|,
name|action
argument_list|,
name|commitAfter
argument_list|,
name|bean
operator|.
name|getOptimize
argument_list|(
name|schema
operator|.
name|getOptimizeAfterCommit
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|sumbitTask
argument_list|(
name|callable
argument_list|,
name|bean
operator|.
name|getIndexer
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|/*              * make sure to unlock              */
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|sumbitTask
specifier|private
name|void
name|sumbitTask
parameter_list|(
specifier|final
name|Callable
argument_list|<
name|IndexDocument
argument_list|>
name|callable
parameter_list|,
specifier|final
name|GDataIndexer
name|indexer
parameter_list|)
block|{
name|Future
argument_list|<
name|IndexDocument
argument_list|>
name|task
init|=
name|this
operator|.
name|taskExecutor
operator|.
name|submit
argument_list|(
name|callable
argument_list|)
decl_stmt|;
try|try
block|{
name|indexer
operator|.
name|addIndexableDocumentTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GdataIndexerException
argument_list|(
literal|"Can not accept any index tasks -- interrupted. "
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.search.SearchComponent#getServiceSearcher(org.apache.lucene.gdata.server.registry.ProvidedService)      */
DECL|method|getServiceSearcher
specifier|public
name|GDataSearcher
argument_list|<
name|String
argument_list|>
name|getServiceSearcher
parameter_list|(
specifier|final
name|ProvidedService
name|service
parameter_list|)
block|{
name|checkDestroyed
argument_list|()
expr_stmt|;
name|checkInitialized
argument_list|()
expr_stmt|;
comment|/*          * get and increment. searcher will be decremented if GdataSearcher is          * closed          */
name|ReferenceCounter
argument_list|<
name|IndexSearcher
argument_list|>
name|searcher
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|ServiceIndex
name|serviceIndex
init|=
name|this
operator|.
name|indexerMap
operator|.
name|get
argument_list|(
name|service
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|serviceIndex
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no index for service "
operator|+
name|service
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
name|searcher
operator|=
name|serviceIndex
operator|.
name|getSearcher
argument_list|()
expr_stmt|;
name|searcher
operator|.
name|increamentReference
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|StandardGdataSearcher
argument_list|(
name|searcher
argument_list|)
return|;
block|}
comment|/**      * @see org.apache.lucene.gdata.search.SearchComponent#destroy()      */
DECL|method|destroy
specifier|public
specifier|synchronized
name|void
name|destroy
parameter_list|()
block|{
name|checkDestroyed
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|isInitialized
operator|.
name|get
argument_list|()
condition|)
return|return;
name|this
operator|.
name|destroyed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|isInitialized
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down IndexController -- destroy has been called"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|ServiceIndex
argument_list|>
argument_list|>
name|entrySet
init|=
name|this
operator|.
name|indexerMap
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|ServiceIndex
argument_list|>
name|entry
range|:
name|entrySet
control|)
block|{
name|ServiceIndex
name|bean
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|bean
operator|.
name|getSearcher
argument_list|()
operator|.
name|decrementRef
argument_list|()
expr_stmt|;
name|GDataIndexer
name|indexer
init|=
name|bean
operator|.
name|getIndexer
argument_list|()
decl_stmt|;
try|try
block|{
name|indexer
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can not destroy indexer for service: "
operator|+
name|bean
operator|.
name|getSchema
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|taskExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|this
operator|.
name|indexerMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|checkDestroyed
specifier|private
name|void
name|checkDestroyed
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|destroyed
operator|.
name|get
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"IndexController has been destroyed"
argument_list|)
throw|;
block|}
DECL|method|checkInitialized
specifier|private
name|void
name|checkInitialized
parameter_list|()
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|isInitialized
operator|.
name|get
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"IndexController has not been initialized"
argument_list|)
throw|;
block|}
DECL|class|ServiceIndex
specifier|final
specifier|static
class|class
name|ServiceIndex
block|{
DECL|field|actionCount
specifier|private
name|AtomicInteger
name|actionCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|commitCount
specifier|private
name|AtomicInteger
name|commitCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|lock
specifier|private
specifier|final
name|Lock
name|lock
decl_stmt|;
DECL|field|schema
specifier|private
specifier|final
name|IndexSchema
name|schema
decl_stmt|;
DECL|field|indexer
specifier|private
specifier|final
name|GDataIndexer
name|indexer
decl_stmt|;
DECL|field|directory
specifier|private
specifier|final
name|Directory
name|directory
decl_stmt|;
DECL|field|addedDocumentFilter
specifier|private
name|Filter
name|addedDocumentFilter
decl_stmt|;
DECL|field|searcher
specifier|private
name|ReferenceCounter
argument_list|<
name|IndexSearcher
argument_list|>
name|searcher
decl_stmt|;
comment|// private final Map<String,IndexAction> actionMap;
DECL|method|ServiceIndex
name|ServiceIndex
parameter_list|(
specifier|final
name|IndexSchema
name|schema
parameter_list|,
name|GDataIndexer
name|indexer
parameter_list|,
name|Directory
name|directory
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|indexer
operator|=
name|indexer
expr_stmt|;
name|this
operator|.
name|lock
operator|=
operator|new
name|ReentrantLock
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
comment|// this.actionMap = new HashMap<String,IndexAction>(128);
block|}
DECL|method|getLock
name|Lock
name|getLock
parameter_list|()
block|{
return|return
name|this
operator|.
name|lock
return|;
block|}
comment|/**          * @return Returns the indexer.          */
DECL|method|getIndexer
name|GDataIndexer
name|getIndexer
parameter_list|()
block|{
return|return
name|this
operator|.
name|indexer
return|;
block|}
comment|/**          * @return Returns the schema.          */
DECL|method|getSchema
name|IndexSchema
name|getSchema
parameter_list|()
block|{
return|return
name|this
operator|.
name|schema
return|;
block|}
comment|// public void addAction(IndexAction action,ServerBaseEntry entry){
comment|//
comment|// }
comment|/**          * Counts how many actions have been executed on this index          *           * @param reset - count mod reset value equals 0 causes a commit          *                      * @return<code>true</code> if the count mod reset value equals 0, otherwise          *         false;          */
DECL|method|incrementActionAndReset
name|boolean
name|incrementActionAndReset
parameter_list|(
name|int
name|reset
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|actionCount
operator|.
name|incrementAndGet
argument_list|()
operator|%
name|reset
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**          * @return Returns the directory.          */
DECL|method|getDirectory
specifier|public
name|Directory
name|getDirectory
parameter_list|()
block|{
return|return
name|this
operator|.
name|directory
return|;
block|}
comment|/**          * @return Returns the addedDocumentFilter.          */
DECL|method|getAddedDocumentFilter
specifier|public
name|Filter
name|getAddedDocumentFilter
parameter_list|()
block|{
return|return
name|this
operator|.
name|addedDocumentFilter
return|;
block|}
comment|/**          * @param addedDocumentFilter The addedDocumentFilter to set.          */
DECL|method|setAddedDocumentFilter
specifier|public
name|void
name|setAddedDocumentFilter
parameter_list|(
name|Filter
name|addedDocumentFilter
parameter_list|)
block|{
name|this
operator|.
name|addedDocumentFilter
operator|=
name|addedDocumentFilter
expr_stmt|;
block|}
comment|/**          * @return Returns the searcher.          */
DECL|method|getSearcher
specifier|public
name|ReferenceCounter
argument_list|<
name|IndexSearcher
argument_list|>
name|getSearcher
parameter_list|()
block|{
return|return
name|this
operator|.
name|searcher
return|;
block|}
comment|/**          * @param searcher The searcher to set.          */
DECL|method|setSearcher
specifier|public
name|void
name|setSearcher
parameter_list|(
name|ReferenceCounter
argument_list|<
name|IndexSearcher
argument_list|>
name|searcher
parameter_list|)
block|{
name|this
operator|.
name|searcher
operator|=
name|searcher
expr_stmt|;
block|}
comment|/**          * @return Returns the commitCount.          */
DECL|method|commitCountIncrement
specifier|public
name|int
name|commitCountIncrement
parameter_list|()
block|{
return|return
name|this
operator|.
name|commitCount
operator|.
name|incrementAndGet
argument_list|()
return|;
block|}
comment|/**          * @param reset - the number after how many commits the index should be optimized          * @return<code>true</code> if and only if the commit count mod reset equals 0, otherwise<code>false</code>.          */
DECL|method|getOptimize
specifier|public
name|boolean
name|getOptimize
parameter_list|(
name|int
name|reset
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|commitCount
operator|.
name|get
argument_list|()
operator|%
name|reset
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class
end_unit
