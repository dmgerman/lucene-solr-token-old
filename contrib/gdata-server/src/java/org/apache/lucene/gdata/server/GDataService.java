begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.server
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|data
operator|.
name|ServerBaseEntry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|data
operator|.
name|ServerBaseFeed
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|ComponentType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|EntryEventMediator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|GDataServerRegistry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|ModificationConflictException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|ResourceNotFoundException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|Storage
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|StorageController
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|BaseEntry
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|BaseFeed
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|DateTime
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|Generator
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|Link
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|util
operator|.
name|ParseException
import|;
end_import
begin_comment
comment|/**  * default implementation of the {@link org.apache.lucene.gdata.server.Service}  * interface.  *   * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|GDataService
specifier|public
class|class
name|GDataService
implements|implements
name|Service
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GDataService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|storage
specifier|protected
name|Storage
name|storage
decl_stmt|;
DECL|field|registry
specifier|protected
name|GDataServerRegistry
name|registry
init|=
name|GDataServerRegistry
operator|.
name|getRegistry
argument_list|()
decl_stmt|;
DECL|field|generator
specifier|private
specifier|static
specifier|final
name|Generator
name|generator
decl_stmt|;
DECL|field|generatorName
specifier|private
specifier|static
specifier|final
name|String
name|generatorName
init|=
literal|"Lucene GData-Server"
decl_stmt|;
DECL|field|generatorURI
specifier|private
specifier|static
specifier|final
name|String
name|generatorURI
init|=
literal|"http://lucene.apache.org"
decl_stmt|;
DECL|field|XMLMIME
specifier|private
specifier|static
specifier|final
name|String
name|XMLMIME
init|=
literal|"application/atom+xml"
decl_stmt|;
DECL|field|entryEventMediator
specifier|protected
specifier|final
name|EntryEventMediator
name|entryEventMediator
decl_stmt|;
static|static
block|{
name|generator
operator|=
operator|new
name|Generator
argument_list|()
expr_stmt|;
name|generator
operator|.
name|setName
argument_list|(
name|generatorName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|setUri
argument_list|(
name|generatorURI
argument_list|)
expr_stmt|;
name|generator
operator|.
name|setVersion
argument_list|(
literal|"0.1"
argument_list|)
expr_stmt|;
block|}
DECL|method|GDataService
specifier|protected
name|GDataService
parameter_list|()
throws|throws
name|ServiceException
block|{
try|try
block|{
name|StorageController
name|controller
init|=
name|GDataServerRegistry
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookup
argument_list|(
name|StorageController
operator|.
name|class
argument_list|,
name|ComponentType
operator|.
name|STORAGECONTROLLER
argument_list|)
decl_stmt|;
if|if
condition|(
name|controller
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"StorageController is not registered"
argument_list|)
throw|;
name|this
operator|.
name|storage
operator|=
name|controller
operator|.
name|getStorage
argument_list|()
expr_stmt|;
name|this
operator|.
name|entryEventMediator
operator|=
name|GDataServerRegistry
operator|.
name|getRegistry
argument_list|()
operator|.
name|getEntryEventMediator
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Can't get Storage Instance -- can't serve any requests"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|ServiceException
name|ex
init|=
operator|new
name|ServiceException
argument_list|(
literal|"Can't get Storage instance"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|,
name|GDataResponse
operator|.
name|SERVER_ERROR
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.server.Service#createEntry(org.apache.lucene.gdata.server.GDataRequest,      *      org.apache.lucene.gdata.server.GDataResponse)      */
DECL|method|createEntry
specifier|public
name|BaseEntry
name|createEntry
parameter_list|(
name|GDataRequest
name|request
parameter_list|,
name|GDataResponse
name|response
parameter_list|)
throws|throws
name|ServiceException
block|{
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"create Entry for feedId: "
operator|+
name|request
operator|.
name|getFeedId
argument_list|()
argument_list|)
expr_stmt|;
name|ServerBaseEntry
name|entry
init|=
name|buildEntry
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setFeedId
argument_list|(
name|request
operator|.
name|getFeedId
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setServiceConfig
argument_list|(
name|request
operator|.
name|getConfigurator
argument_list|()
argument_list|)
expr_stmt|;
name|BaseEntry
name|tempEntry
init|=
name|entry
operator|.
name|getEntry
argument_list|()
decl_stmt|;
name|tempEntry
operator|.
name|setPublished
argument_list|(
name|getCurrentDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|tempEntry
operator|.
name|setUpdated
argument_list|(
name|getCurrentDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|BaseEntry
name|retVal
init|=
literal|null
decl_stmt|;
name|removeDynamicElements
argument_list|(
name|entry
operator|.
name|getEntry
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|retVal
operator|=
name|this
operator|.
name|storage
operator|.
name|storeEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ServiceException
name|ex
init|=
operator|new
name|ServiceException
argument_list|(
literal|"Could not store entry"
argument_list|,
name|e
argument_list|,
name|GDataResponse
operator|.
name|SERVER_ERROR
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
name|this
operator|.
name|entryEventMediator
operator|.
name|entryAdded
argument_list|(
name|entry
argument_list|)
expr_stmt|;
return|return
name|retVal
return|;
block|}
comment|/**      * @see org.apache.lucene.gdata.server.Service#deleteEntry(org.apache.lucene.gdata.server.GDataRequest,      *      org.apache.lucene.gdata.server.GDataResponse)      */
DECL|method|deleteEntry
specifier|public
name|BaseEntry
name|deleteEntry
parameter_list|(
name|GDataRequest
name|request
parameter_list|,
name|GDataResponse
name|response
parameter_list|)
throws|throws
name|ServiceException
block|{
name|ServerBaseEntry
name|entry
init|=
operator|new
name|ServerBaseEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setServiceConfig
argument_list|(
name|request
operator|.
name|getConfigurator
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setFeedId
argument_list|(
name|request
operator|.
name|getFeedId
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setId
argument_list|(
name|request
operator|.
name|getEntryId
argument_list|()
argument_list|)
expr_stmt|;
name|setVersionId
argument_list|(
name|entry
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|ServiceException
argument_list|(
literal|"entry id is null -- can not delete null entry"
argument_list|,
name|GDataResponse
operator|.
name|SERVER_ERROR
argument_list|)
throw|;
try|try
block|{
name|this
operator|.
name|storage
operator|.
name|deleteEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|e
parameter_list|)
block|{
name|ServiceException
name|ex
init|=
operator|new
name|ServiceException
argument_list|(
literal|"Could not delete entry"
argument_list|,
name|e
argument_list|,
name|GDataResponse
operator|.
name|BAD_REQUEST
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|ModificationConflictException
name|e
parameter_list|)
block|{
name|ServiceException
name|ex
init|=
operator|new
name|ServiceException
argument_list|(
literal|"Could not delete entry - version conflict"
argument_list|,
name|e
argument_list|,
name|GDataResponse
operator|.
name|CONFLICT
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|ServiceException
name|ex
init|=
operator|new
name|ServiceException
argument_list|(
literal|"Could not delete entry"
argument_list|,
name|e
argument_list|,
name|GDataResponse
operator|.
name|SERVER_ERROR
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
name|this
operator|.
name|entryEventMediator
operator|.
name|entryDeleted
argument_list|(
name|entry
argument_list|)
expr_stmt|;
comment|//TODO change ret value
return|return
literal|null
return|;
block|}
comment|/**      * @see org.apache.lucene.gdata.server.Service#updateEntry(org.apache.lucene.gdata.server.GDataRequest,      *      org.apache.lucene.gdata.server.GDataResponse)      */
DECL|method|updateEntry
specifier|public
name|BaseEntry
name|updateEntry
parameter_list|(
name|GDataRequest
name|request
parameter_list|,
name|GDataResponse
name|response
parameter_list|)
throws|throws
name|ServiceException
block|{
name|ServerBaseEntry
name|entry
init|=
name|buildEntry
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setFeedId
argument_list|(
name|request
operator|.
name|getFeedId
argument_list|()
argument_list|)
expr_stmt|;
name|setVersionId
argument_list|(
name|entry
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setServiceConfig
argument_list|(
name|request
operator|.
name|getConfigurator
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"update Entry"
operator|+
name|entry
operator|.
name|getId
argument_list|()
operator|+
literal|" for feedId: "
operator|+
name|request
operator|.
name|getFeedId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
literal|"Entry id is null can not update entry"
argument_list|,
name|GDataResponse
operator|.
name|BAD_REQUEST
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|entry
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getEntryId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"Entry id in the entry xml does not match the requested resource -- XML-ID:"
operator|+
name|entry
operator|.
name|getId
argument_list|()
operator|+
literal|"; Requested resource: "
operator|+
name|request
operator|.
name|getEntryId
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServiceException
argument_list|(
literal|"Entry id in the entry xml does not match the requested resource"
argument_list|,
name|GDataResponse
operator|.
name|BAD_REQUEST
argument_list|)
throw|;
block|}
name|BaseEntry
name|tempEntry
init|=
name|entry
operator|.
name|getEntry
argument_list|()
decl_stmt|;
name|tempEntry
operator|.
name|setUpdated
argument_list|(
name|getCurrentDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|removeDynamicElements
argument_list|(
name|entry
operator|.
name|getEntry
argument_list|()
argument_list|)
expr_stmt|;
name|BaseEntry
name|retVal
init|=
literal|null
decl_stmt|;
try|try
block|{
name|retVal
operator|=
name|this
operator|.
name|storage
operator|.
name|updateEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|e
parameter_list|)
block|{
name|ServiceException
name|ex
init|=
operator|new
name|ServiceException
argument_list|(
literal|"Could not update entry"
argument_list|,
name|e
argument_list|,
name|GDataResponse
operator|.
name|BAD_REQUEST
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|ModificationConflictException
name|e
parameter_list|)
block|{
name|ServiceException
name|ex
init|=
operator|new
name|ServiceException
argument_list|(
literal|"Could not update entry - version conflict"
argument_list|,
name|e
argument_list|,
name|GDataResponse
operator|.
name|CONFLICT
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|ServiceException
name|ex
init|=
operator|new
name|ServiceException
argument_list|(
literal|"Could not update entry"
argument_list|,
name|e
argument_list|,
name|GDataResponse
operator|.
name|SERVER_ERROR
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
name|this
operator|.
name|entryEventMediator
operator|.
name|entryUpdated
argument_list|(
name|entry
argument_list|)
expr_stmt|;
return|return
name|retVal
return|;
block|}
comment|/**      * @see org.apache.lucene.gdata.server.Service#getFeed(org.apache.lucene.gdata.server.GDataRequest,      *      org.apache.lucene.gdata.server.GDataResponse)      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getFeed
specifier|public
name|BaseFeed
name|getFeed
parameter_list|(
name|GDataRequest
name|request
parameter_list|,
name|GDataResponse
name|response
parameter_list|)
throws|throws
name|ServiceException
block|{
name|ServerBaseFeed
name|feed
init|=
operator|new
name|ServerBaseFeed
argument_list|()
decl_stmt|;
name|feed
operator|.
name|setId
argument_list|(
name|request
operator|.
name|getFeedId
argument_list|()
argument_list|)
expr_stmt|;
name|feed
operator|.
name|setStartIndex
argument_list|(
name|request
operator|.
name|getStartIndex
argument_list|()
argument_list|)
expr_stmt|;
name|feed
operator|.
name|setItemsPerPage
argument_list|(
name|request
operator|.
name|getItemsPerPage
argument_list|()
argument_list|)
expr_stmt|;
name|feed
operator|.
name|setServiceConfig
argument_list|(
name|request
operator|.
name|getConfigurator
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|/*              * the strategy executes either a search or a direct access.              */
name|BaseFeed
name|retVal
init|=
name|this
operator|.
name|storage
operator|.
name|getFeed
argument_list|(
name|feed
argument_list|)
decl_stmt|;
name|dynamicElementFeedStragey
argument_list|(
name|retVal
argument_list|,
name|request
argument_list|)
expr_stmt|;
return|return
name|retVal
return|;
comment|/*              * Resource not found will be detected in Gdata request.              * the request queries the storage for the feed to get the service for the feed              */
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|ServiceException
name|ex
init|=
operator|new
name|ServiceException
argument_list|(
literal|"Could not get feed"
argument_list|,
name|e
argument_list|,
name|GDataResponse
operator|.
name|NOT_FOUND
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
DECL|method|buildLink
specifier|private
name|Link
name|buildLink
parameter_list|(
name|String
name|rel
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|href
parameter_list|)
block|{
name|Link
name|retVal
init|=
operator|new
name|Link
argument_list|()
decl_stmt|;
name|retVal
operator|.
name|setHref
argument_list|(
name|href
argument_list|)
expr_stmt|;
name|retVal
operator|.
name|setRel
argument_list|(
name|rel
argument_list|)
expr_stmt|;
name|retVal
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|retVal
return|;
block|}
DECL|method|buildEntry
specifier|private
name|ServerBaseEntry
name|buildEntry
parameter_list|(
specifier|final
name|GDataRequest
name|request
parameter_list|,
specifier|final
name|GDataResponse
name|response
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|ServerBaseEntry
name|entry
init|=
operator|new
name|ServerBaseEntry
argument_list|(
name|GDataEntityBuilder
operator|.
name|buildEntry
argument_list|(
name|request
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|entry
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|ServiceException
name|ex
init|=
operator|new
name|ServiceException
argument_list|(
literal|"Could not parse entry from incoming request"
argument_list|,
name|e
argument_list|,
name|GDataResponse
operator|.
name|BAD_REQUEST
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ServiceException
name|ex
init|=
operator|new
name|ServiceException
argument_list|(
literal|"Could not read or open input stream"
argument_list|,
name|e
argument_list|,
name|GDataResponse
operator|.
name|BAD_REQUEST
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.server.Service#getSingleEntry(org.apache.lucene.gdata.server.GDataRequest,      *      org.apache.lucene.gdata.server.GDataResponse)      */
DECL|method|getSingleEntry
specifier|public
name|BaseEntry
name|getSingleEntry
parameter_list|(
name|GDataRequest
name|request
parameter_list|,
name|GDataResponse
name|response
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|ServerBaseEntry
name|entry
init|=
operator|new
name|ServerBaseEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setServiceConfig
argument_list|(
name|request
operator|.
name|getConfigurator
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setFeedId
argument_list|(
name|request
operator|.
name|getFeedId
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setId
argument_list|(
name|request
operator|.
name|getEntryId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
literal|"entry is null can't get entry"
argument_list|,
name|GDataResponse
operator|.
name|BAD_REQUEST
argument_list|)
throw|;
block|}
name|BaseEntry
name|retVal
init|=
literal|null
decl_stmt|;
name|retVal
operator|=
name|this
operator|.
name|storage
operator|.
name|getEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|dynamicElementEntryStragey
argument_list|(
name|retVal
argument_list|,
name|request
argument_list|)
expr_stmt|;
return|return
name|retVal
return|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|e
parameter_list|)
block|{
name|ServiceException
name|ex
init|=
operator|new
name|ServiceException
argument_list|(
literal|"Could not get entry"
argument_list|,
name|e
argument_list|,
name|GDataResponse
operator|.
name|BAD_REQUEST
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|ServiceException
name|ex
init|=
operator|new
name|ServiceException
argument_list|(
literal|"Could not get entry"
argument_list|,
name|e
argument_list|,
name|GDataResponse
operator|.
name|SERVER_ERROR
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/*      * adds all dynamic element to the entry      */
DECL|method|dynamicElementEntryStragey
specifier|private
name|void
name|dynamicElementEntryStragey
parameter_list|(
specifier|final
name|BaseEntry
name|entry
parameter_list|,
specifier|final
name|GDataRequest
name|request
parameter_list|)
block|{
name|setSelfLink
argument_list|(
name|entry
argument_list|,
name|request
operator|.
name|getContextPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * adds all dynamic element to the feed entries      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|dynamicElementFeedStragey
specifier|protected
name|void
name|dynamicElementFeedStragey
parameter_list|(
specifier|final
name|BaseFeed
name|feed
parameter_list|,
specifier|final
name|GDataRequest
name|request
parameter_list|)
block|{
name|buildDynamicFeedElements
argument_list|(
name|request
argument_list|,
name|feed
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BaseEntry
argument_list|>
name|entryList
init|=
name|feed
operator|.
name|getEntries
argument_list|()
decl_stmt|;
for|for
control|(
name|BaseEntry
name|entry
range|:
name|entryList
control|)
block|{
name|String
name|id
init|=
operator|new
name|StringBuilder
argument_list|(
name|request
operator|.
name|getContextPath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|setSelfLink
argument_list|(
name|entry
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * The selfLink is build from a prefix and the entry id. The prefix is the      * context path of the requested feed. This will be used to request the      * entry directly      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setSelfLink
specifier|private
name|BaseEntry
name|setSelfLink
parameter_list|(
specifier|final
name|BaseEntry
name|entry
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|Link
name|self
init|=
name|buildLink
argument_list|(
name|Link
operator|.
name|Rel
operator|.
name|SELF
argument_list|,
name|XMLMIME
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getVersionId
argument_list|()
argument_list|)
expr_stmt|;
name|Link
name|edit
init|=
name|buildLink
argument_list|(
name|Link
operator|.
name|Rel
operator|.
name|ENTRY_EDIT
argument_list|,
name|XMLMIME
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Link
argument_list|>
name|list
init|=
name|entry
operator|.
name|getLinks
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|edit
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|self
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
comment|/*      * build the dynamic elements like self link and next link      */
DECL|method|buildDynamicFeedElements
specifier|private
name|void
name|buildDynamicFeedElements
parameter_list|(
specifier|final
name|GDataRequest
name|request
parameter_list|,
specifier|final
name|BaseFeed
name|feed
parameter_list|)
block|{
name|feed
operator|.
name|setGenerator
argument_list|(
name|generator
argument_list|)
expr_stmt|;
name|feed
operator|.
name|setItemsPerPage
argument_list|(
name|request
operator|.
name|getItemsPerPage
argument_list|()
argument_list|)
expr_stmt|;
name|feed
operator|.
name|setStartIndex
argument_list|(
name|request
operator|.
name|getStartIndex
argument_list|()
argument_list|)
expr_stmt|;
name|feed
operator|.
name|setId
argument_list|(
name|request
operator|.
name|getContextPath
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Link
argument_list|>
name|links
init|=
name|feed
operator|.
name|getLinks
argument_list|()
decl_stmt|;
name|links
operator|.
name|add
argument_list|(
name|buildLink
argument_list|(
name|Link
operator|.
name|Rel
operator|.
name|SELF
argument_list|,
name|Link
operator|.
name|Type
operator|.
name|ATOM
argument_list|,
name|request
operator|.
name|getSelfId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|links
operator|.
name|add
argument_list|(
name|buildLink
argument_list|(
name|Link
operator|.
name|Rel
operator|.
name|NEXT
argument_list|,
name|XMLMIME
argument_list|,
name|request
operator|.
name|getNextId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|prevLink
init|=
name|request
operator|.
name|getPreviousId
argument_list|()
decl_stmt|;
if|if
condition|(
name|prevLink
operator|!=
literal|null
condition|)
name|links
operator|.
name|add
argument_list|(
name|buildLink
argument_list|(
name|Link
operator|.
name|Rel
operator|.
name|PREVIOUS
argument_list|,
name|XMLMIME
argument_list|,
name|prevLink
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see org.apache.lucene.gdata.server.Service#close()      */
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|this
operator|.
name|storage
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * @see org.apache.lucene.gdata.server.Service#getFeedLastModified(java.lang.String)      */
DECL|method|getFeedLastModified
specifier|public
name|Date
name|getFeedLastModified
parameter_list|(
specifier|final
name|String
name|feedId
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
return|return
operator|new
name|Date
argument_list|(
name|this
operator|.
name|storage
operator|.
name|getFeedLastModified
argument_list|(
name|feedId
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|ServiceException
name|ex
init|=
operator|new
name|ServiceException
argument_list|(
literal|"Could not get Last update for feed -- "
operator|+
name|feedId
argument_list|,
name|e
argument_list|,
name|GDataResponse
operator|.
name|SERVER_ERROR
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.server.Service#getEntryLastModified(java.lang.String, java.lang.String)      */
DECL|method|getEntryLastModified
specifier|public
name|Date
name|getEntryLastModified
parameter_list|(
specifier|final
name|String
name|entryId
parameter_list|,
specifier|final
name|String
name|feedId
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
return|return
operator|new
name|Date
argument_list|(
name|this
operator|.
name|storage
operator|.
name|getEntryLastModified
argument_list|(
name|entryId
argument_list|,
name|feedId
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|ServiceException
name|ex
init|=
operator|new
name|ServiceException
argument_list|(
literal|"Could not get Last update for entry  -- "
operator|+
name|entryId
argument_list|,
name|e
argument_list|,
name|GDataResponse
operator|.
name|SERVER_ERROR
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
DECL|method|setVersionId
specifier|private
name|ServerBaseEntry
name|setVersionId
parameter_list|(
specifier|final
name|ServerBaseEntry
name|entry
parameter_list|,
specifier|final
name|GDataRequest
name|request
parameter_list|,
specifier|final
name|GDataResponse
name|response
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|entry
operator|.
name|setVersion
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|request
operator|.
name|getEntryVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can not parse entry version -- version is not an integer -- versionid: "
operator|+
name|request
operator|.
name|getEntryVersion
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServiceException
argument_list|(
literal|"Can not parse entry version -- version is not an integer -- versionid: "
operator|+
name|request
operator|.
name|getEntryVersion
argument_list|()
argument_list|,
name|e
argument_list|,
name|GDataResponse
operator|.
name|BAD_REQUEST
argument_list|)
throw|;
block|}
block|}
comment|/*      * provide current time to set as published / updated values      * always use servertime to prevent client / server time lag      * Timezoneshift is 0      */
DECL|method|getCurrentDateTime
specifier|protected
name|DateTime
name|getCurrentDateTime
parameter_list|()
block|{
return|return
operator|new
name|DateTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|removeDynamicElements
specifier|private
name|void
name|removeDynamicElements
parameter_list|(
name|BaseEntry
name|entry
parameter_list|)
block|{
name|Link
name|selfLink
init|=
name|entry
operator|.
name|getSelfLink
argument_list|()
decl_stmt|;
if|if
condition|(
name|selfLink
operator|!=
literal|null
condition|)
name|entry
operator|.
name|getLinks
argument_list|()
operator|.
name|remove
argument_list|(
name|selfLink
argument_list|)
expr_stmt|;
name|Link
name|editLink
init|=
name|entry
operator|.
name|getEditLink
argument_list|()
decl_stmt|;
if|if
condition|(
name|editLink
operator|!=
literal|null
condition|)
name|entry
operator|.
name|getLinks
argument_list|()
operator|.
name|remove
argument_list|(
name|editLink
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
