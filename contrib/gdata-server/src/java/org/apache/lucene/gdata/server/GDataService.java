begin_unit
begin_comment
comment|/**   * Copyright 2004 The Apache Software Foundation   *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   *     http://www.apache.org/licenses/LICENSE-2.0   *   * Unless required by applicable law or agreed to in writing, software   * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.server
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|GDataServerRegistry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|Storage
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|StorageFactory
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|BaseEntry
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|BaseFeed
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|DateTime
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|Generator
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|Link
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|util
operator|.
name|ParseException
import|;
end_import
begin_comment
comment|/**   * @author Simon Willnauer   *    */
end_comment
begin_class
DECL|class|GDataService
specifier|public
class|class
name|GDataService
extends|extends
name|Service
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GDataService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|storage
specifier|private
name|Storage
name|storage
decl_stmt|;
DECL|field|registry
specifier|private
name|GDataServerRegistry
name|registry
init|=
name|GDataServerRegistry
operator|.
name|getRegistry
argument_list|()
decl_stmt|;
DECL|field|generator
specifier|private
specifier|static
specifier|final
name|Generator
name|generator
decl_stmt|;
DECL|field|generatorName
specifier|private
specifier|static
specifier|final
name|String
name|generatorName
init|=
literal|"Lucene GData-Server"
decl_stmt|;
DECL|field|generatorURI
specifier|private
specifier|static
specifier|final
name|String
name|generatorURI
init|=
literal|"http://lucene.apache.org"
decl_stmt|;
static|static
block|{
name|generator
operator|=
operator|new
name|Generator
argument_list|()
expr_stmt|;
name|generator
operator|.
name|setName
argument_list|(
name|generatorName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|setUri
argument_list|(
name|generatorURI
argument_list|)
expr_stmt|;
name|generator
operator|.
name|setVersion
argument_list|(
literal|"0.1"
argument_list|)
expr_stmt|;
block|}
DECL|method|GDataService
specifier|protected
name|GDataService
parameter_list|()
throws|throws
name|ServiceException
block|{
try|try
block|{
name|this
operator|.
name|storage
operator|=
name|StorageFactory
operator|.
name|getStorage
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|fatal
argument_list|(
literal|"Can't get Storage Instance -- can't serve any requests"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|ServiceException
name|ex
init|=
operator|new
name|ServiceException
argument_list|(
literal|"Can't get Storage instance"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**       * @see org.apache.lucene.gdata.server.Service#createEntry(org.apache.lucene.gdata.server.GDataRequest,       *      org.apache.lucene.gdata.server.GDataResponse)       */
annotation|@
name|Override
DECL|method|createEntry
specifier|public
name|BaseEntry
name|createEntry
parameter_list|(
name|GDataRequest
name|request
parameter_list|,
name|GDataResponse
name|response
parameter_list|)
throws|throws
name|ServiceException
block|{
name|checkFeedIsRegisterd
argument_list|(
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOGGER
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOGGER
operator|.
name|info
argument_list|(
literal|"create Entry for feedId: "
operator|+
name|request
operator|.
name|getFeedId
argument_list|()
argument_list|)
expr_stmt|;
name|BaseEntry
name|entry
init|=
name|buildEntry
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|setUpdateTime
argument_list|(
name|entry
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|storage
operator|.
name|storeEntry
argument_list|(
name|entry
argument_list|,
name|request
operator|.
name|getFeedId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ServiceException
name|ex
init|=
operator|new
name|ServiceException
argument_list|(
literal|"Could not store entry"
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
return|return
name|entry
return|;
block|}
comment|/**       * @see org.apache.lucene.gdata.server.Service#deleteEntry(org.apache.lucene.gdata.server.GDataRequest,       *      org.apache.lucene.gdata.server.GDataResponse)       */
annotation|@
name|Override
DECL|method|deleteEntry
specifier|public
name|BaseEntry
name|deleteEntry
parameter_list|(
name|GDataRequest
name|request
parameter_list|,
name|GDataResponse
name|response
parameter_list|)
throws|throws
name|ServiceException
block|{
name|checkFeedIsRegisterd
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|String
name|entryid
init|=
name|request
operator|.
name|getEntryId
argument_list|()
decl_stmt|;
name|String
name|feedid
init|=
name|request
operator|.
name|getFeedId
argument_list|()
decl_stmt|;
try|try
block|{
name|this
operator|.
name|storage
operator|.
name|deleteEntry
argument_list|(
name|entryid
argument_list|,
name|feedid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ServiceException
name|ex
init|=
operator|new
name|ServiceException
argument_list|(
literal|"Could not delete entry"
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
return|return
literal|null
return|;
block|}
comment|/**       * @see org.apache.lucene.gdata.server.Service#updateEntry(org.apache.lucene.gdata.server.GDataRequest,       *      org.apache.lucene.gdata.server.GDataResponse)       */
annotation|@
name|Override
DECL|method|updateEntry
specifier|public
name|BaseEntry
name|updateEntry
parameter_list|(
name|GDataRequest
name|request
parameter_list|,
name|GDataResponse
name|response
parameter_list|)
throws|throws
name|ServiceException
block|{
name|checkFeedIsRegisterd
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|BaseEntry
name|entry
init|=
name|buildEntry
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|String
name|feedid
init|=
name|request
operator|.
name|getFeedId
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOGGER
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOGGER
operator|.
name|info
argument_list|(
literal|"update Entry"
operator|+
name|entry
operator|.
name|getId
argument_list|()
operator|+
literal|" for feedId: "
operator|+
name|feedid
argument_list|)
expr_stmt|;
name|setUpdateTime
argument_list|(
name|entry
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|storage
operator|.
name|updateEntry
argument_list|(
name|entry
argument_list|,
name|feedid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|ServiceException
name|ex
init|=
operator|new
name|ServiceException
argument_list|(
literal|"Could not update entry"
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
return|return
name|entry
return|;
block|}
comment|/**       * @see org.apache.lucene.gdata.server.Service#getFeed(org.apache.lucene.gdata.server.GDataRequest,       *      org.apache.lucene.gdata.server.GDataResponse)       */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|getFeed
specifier|public
name|BaseFeed
name|getFeed
parameter_list|(
name|GDataRequest
name|request
parameter_list|,
name|GDataResponse
name|response
parameter_list|)
throws|throws
name|ServiceException
block|{
name|checkFeedIsRegisterd
argument_list|(
name|request
argument_list|)
expr_stmt|;
try|try
block|{
comment|// TODO remove when storing feeds is implemented just for
comment|// development
name|BaseFeed
name|feed
init|=
name|this
operator|.
name|storage
operator|.
name|getFeed
argument_list|(
name|request
operator|.
name|getFeedId
argument_list|()
argument_list|,
name|request
operator|.
name|getStartIndex
argument_list|()
argument_list|,
name|request
operator|.
name|getItemsPerPage
argument_list|()
argument_list|)
decl_stmt|;
name|buildDynamicFeedElements
argument_list|(
name|request
argument_list|,
name|feed
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BaseEntry
argument_list|>
name|list
init|=
name|feed
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|addContextPath
argument_list|(
name|list
argument_list|,
name|request
operator|.
name|getContextPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|feed
return|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|ServiceException
name|ex
init|=
operator|new
name|ServiceException
argument_list|(
literal|"Could not get feed"
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/*       * build the dynamic elements like self link and next link       */
DECL|method|buildDynamicFeedElements
specifier|private
name|void
name|buildDynamicFeedElements
parameter_list|(
specifier|final
name|GDataRequest
name|request
parameter_list|,
specifier|final
name|BaseFeed
name|feed
parameter_list|)
block|{
name|feed
operator|.
name|setGenerator
argument_list|(
name|generator
argument_list|)
expr_stmt|;
name|feed
operator|.
name|setItemsPerPage
argument_list|(
name|request
operator|.
name|getItemsPerPage
argument_list|()
argument_list|)
expr_stmt|;
name|feed
operator|.
name|getLinks
argument_list|()
operator|.
name|add
argument_list|(
name|buildLink
argument_list|(
name|Link
operator|.
name|Rel
operator|.
name|SELF
argument_list|,
name|Link
operator|.
name|Type
operator|.
name|ATOM
argument_list|,
name|request
operator|.
name|getSelfId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO add next link
block|}
DECL|method|buildLink
specifier|private
name|Link
name|buildLink
parameter_list|(
name|String
name|rel
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|href
parameter_list|)
block|{
name|Link
name|retVal
init|=
operator|new
name|Link
argument_list|()
decl_stmt|;
name|retVal
operator|.
name|setHref
argument_list|(
name|href
argument_list|)
expr_stmt|;
name|retVal
operator|.
name|setRel
argument_list|(
name|rel
argument_list|)
expr_stmt|;
name|retVal
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|retVal
return|;
block|}
comment|/*       * every entry has an ID which has to have a prefix. The prefix is the       * context path of the requested feed. This will be used to request the       * entry directly       */
DECL|method|addContextPath
specifier|private
name|void
name|addContextPath
parameter_list|(
name|List
argument_list|<
name|BaseEntry
argument_list|>
name|list
parameter_list|,
specifier|final
name|String
name|contextPath
parameter_list|)
block|{
for|for
control|(
name|BaseEntry
name|entry
range|:
name|list
control|)
block|{
name|addcontextPath
argument_list|(
name|entry
argument_list|,
name|contextPath
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|addcontextPath
specifier|private
name|BaseEntry
name|addcontextPath
parameter_list|(
specifier|final
name|BaseEntry
name|entry
parameter_list|,
specifier|final
name|String
name|contextPath
parameter_list|)
block|{
name|String
name|id
init|=
name|contextPath
operator|+
name|entry
operator|.
name|getId
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|Link
name|self
init|=
operator|new
name|Link
argument_list|()
decl_stmt|;
name|self
operator|.
name|setRel
argument_list|(
literal|"self"
argument_list|)
expr_stmt|;
name|self
operator|.
name|setHref
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|self
operator|.
name|setType
argument_list|(
literal|"application/atom+xml"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|getLinks
argument_list|()
operator|.
name|add
argument_list|(
name|self
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
DECL|method|buildEntry
specifier|private
name|BaseEntry
name|buildEntry
parameter_list|(
specifier|final
name|GDataRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
return|return
name|GDataEntityBuilder
operator|.
name|buildEntry
argument_list|(
name|request
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|ServiceException
name|ex
init|=
operator|new
name|ServiceException
argument_list|(
literal|"Could not parse entry from incoming request"
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ServiceException
name|ex
init|=
operator|new
name|ServiceException
argument_list|(
literal|"Could not read or open input stream"
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
comment|/*       * checks whether the reqeuested feed is registered       */
DECL|method|checkFeedIsRegisterd
specifier|private
name|void
name|checkFeedIsRegisterd
parameter_list|(
specifier|final
name|GDataRequest
name|request
parameter_list|)
throws|throws
name|FeedNotFoundException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|registry
operator|.
name|isFeedRegistered
argument_list|(
name|request
operator|.
name|getFeedId
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|FeedNotFoundException
argument_list|(
literal|"Feed could not be found - is not registed - Feed ID:"
operator|+
name|request
operator|.
name|getFeedId
argument_list|()
argument_list|)
throw|;
name|this
operator|.
name|storage
operator|.
name|setExtensionProfile
argument_list|(
name|request
operator|.
name|getExtensionProfile
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setUpdateTime
specifier|private
name|BaseEntry
name|setUpdateTime
parameter_list|(
specifier|final
name|BaseEntry
name|entry
parameter_list|)
block|{
name|entry
operator|.
name|setUpdated
argument_list|(
name|DateTime
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
comment|/**       * @see org.apache.lucene.gdata.server.Service#getSingleEntry(org.apache.lucene.gdata.server.GDataRequest,       *      org.apache.lucene.gdata.server.GDataResponse)       */
annotation|@
name|Override
DECL|method|getSingleEntry
specifier|public
name|BaseEntry
name|getSingleEntry
parameter_list|(
name|GDataRequest
name|request
parameter_list|,
name|GDataResponse
name|response
parameter_list|)
throws|throws
name|ServiceException
block|{
name|checkFeedIsRegisterd
argument_list|(
name|request
argument_list|)
expr_stmt|;
try|try
block|{
name|BaseEntry
name|entry
init|=
name|this
operator|.
name|storage
operator|.
name|getEntry
argument_list|(
name|request
operator|.
name|getEntryId
argument_list|()
argument_list|,
name|request
operator|.
name|getFeedId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|addcontextPath
argument_list|(
name|entry
argument_list|,
name|request
operator|.
name|getContextPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
catch|catch
parameter_list|(
name|StorageException
name|e
parameter_list|)
block|{
name|ServiceException
name|ex
init|=
operator|new
name|ServiceException
argument_list|(
literal|"Could not get feed"
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
block|}
end_class
end_unit
