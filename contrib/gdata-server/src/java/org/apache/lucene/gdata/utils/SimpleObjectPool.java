begin_unit
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.utils
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|utils
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import
begin_comment
comment|/**  * A Simple implementation of the {@link org.apache.lucene.gdata.utils.Pool}  * interface using a {@link java.util.Stack} as a buffer for the pooled objects.  * This implementation does not provide any timeout mechanismn. Objects will  * stay inside the pool until the pool is destroyed.  *<p>  * If any object will be released e.g. handover to the pool and the pool has  * already enought objects in the pool the released object will be destroyed. If  * the pool is empty a new Object will be created.  *</p>  *<p>  * This implementation does not track any references to the objects aquired by  * any other resource. The objects must be destroyed manually if not released to  * the pool after aquired.  *</p>  *   * @author Simon Willnauer  * @param<Type>  *   */
end_comment
begin_class
DECL|class|SimpleObjectPool
specifier|public
class|class
name|SimpleObjectPool
parameter_list|<
name|Type
parameter_list|>
implements|implements
name|Pool
argument_list|<
name|Type
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SimpleObjectPool
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|isDestroyed
specifier|private
specifier|volatile
name|boolean
name|isDestroyed
init|=
literal|false
decl_stmt|;
DECL|field|factory
specifier|private
specifier|final
name|PoolObjectFactory
argument_list|<
name|Type
argument_list|>
name|factory
decl_stmt|;
DECL|field|DEFAULTSIZE
specifier|static
specifier|final
name|int
name|DEFAULTSIZE
init|=
literal|5
decl_stmt|;
DECL|field|MINIMALSIZE
specifier|static
specifier|final
name|int
name|MINIMALSIZE
init|=
literal|1
decl_stmt|;
DECL|field|size
specifier|private
specifier|final
name|int
name|size
decl_stmt|;
DECL|field|pool
specifier|private
specifier|final
name|Stack
argument_list|<
name|Type
argument_list|>
name|pool
decl_stmt|;
DECL|field|masterLock
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|masterLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|Lock
name|readLock
init|=
name|this
operator|.
name|masterLock
operator|.
name|readLock
argument_list|()
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|Lock
name|writeLock
init|=
name|this
operator|.
name|masterLock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
comment|/**      * Constructs a new {@link SimpleObjectPool} and sets the ObjectFactory and the pool size       * @param size - the maximum size of the pool      * @param factory - factory to create and destroy pooled objects      *       */
DECL|method|SimpleObjectPool
specifier|public
name|SimpleObjectPool
parameter_list|(
name|int
name|size
parameter_list|,
name|PoolObjectFactory
argument_list|<
name|Type
argument_list|>
name|factory
parameter_list|)
block|{
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Factory must not be null"
argument_list|)
throw|;
name|this
operator|.
name|factory
operator|=
name|factory
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
operator|<
name|MINIMALSIZE
condition|?
name|MINIMALSIZE
else|:
name|size
expr_stmt|;
name|this
operator|.
name|pool
operator|=
operator|new
name|Stack
argument_list|<
name|Type
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|size
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|pool
operator|.
name|push
argument_list|(
name|this
operator|.
name|factory
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param factory      */
DECL|method|SimpleObjectPool
specifier|public
name|SimpleObjectPool
parameter_list|(
name|PoolObjectFactory
argument_list|<
name|Type
argument_list|>
name|factory
parameter_list|)
block|{
name|this
argument_list|(
name|DEFAULTSIZE
argument_list|,
name|factory
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see org.apache.lucene.gdata.utils.Pool#aquire()      */
DECL|method|aquire
specifier|public
name|Type
name|aquire
parameter_list|()
block|{
comment|// fail if writelock is aquired
if|if
condition|(
name|this
operator|.
name|readLock
operator|.
name|tryLock
argument_list|()
condition|)
block|{
try|try
block|{
if|if
condition|(
name|this
operator|.
name|isDestroyed
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The pool has already been closed"
argument_list|)
throw|;
if|if
condition|(
name|this
operator|.
name|pool
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|this
operator|.
name|factory
operator|.
name|getInstance
argument_list|()
return|;
return|return
name|this
operator|.
name|pool
operator|.
name|pop
argument_list|()
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The pool has already been closed"
argument_list|)
throw|;
block|}
comment|/**      *      * @param type - generic type      * @see org.apache.lucene.gdata.utils.Pool#release(Object)      */
DECL|method|release
specifier|public
name|void
name|release
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
comment|// fail if writelock is aquired
if|if
condition|(
name|this
operator|.
name|readLock
operator|.
name|tryLock
argument_list|()
condition|)
block|{
try|try
block|{
if|if
condition|(
name|this
operator|.
name|pool
operator|.
name|size
argument_list|()
operator|<
name|this
operator|.
name|size
operator|&&
operator|!
name|this
operator|.
name|isDestroyed
condition|)
name|this
operator|.
name|pool
operator|.
name|push
argument_list|(
name|type
argument_list|)
expr_stmt|;
else|else
name|this
operator|.
name|factory
operator|.
name|destroyInstance
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
comment|// enable object need to be destoryed
name|this
operator|.
name|factory
operator|.
name|destroyInstance
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see org.apache.lucene.gdata.utils.Pool#getSize()      */
DECL|method|getSize
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|size
return|;
block|}
comment|/**      * @see org.apache.lucene.gdata.utils.Pool#getExpireTime()      */
DECL|method|getExpireTime
specifier|public
name|long
name|getExpireTime
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
comment|/**      * @see org.apache.lucene.gdata.utils.Pool#expires()      */
DECL|method|expires
specifier|public
name|boolean
name|expires
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * @see org.apache.lucene.gdata.utils.Pool#destroy()      */
DECL|method|destroy
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|isDestroyed
condition|)
return|return;
name|this
operator|.
name|isDestroyed
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Destroy all elements in the pool -- poolsize: "
operator|+
name|this
operator|.
name|pool
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Type
name|type
range|:
name|this
operator|.
name|pool
control|)
block|{
name|this
operator|.
name|factory
operator|.
name|destroyInstance
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|pool
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
