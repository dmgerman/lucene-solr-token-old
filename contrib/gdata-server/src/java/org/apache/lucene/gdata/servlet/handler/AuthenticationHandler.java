begin_unit
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.servlet.handler
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|servlet
operator|.
name|handler
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|Cookie
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|data
operator|.
name|GDataAccount
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|GDataResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|ServiceException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|ServiceFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|administration
operator|.
name|AdminService
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|authentication
operator|.
name|AuthenticationController
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|authentication
operator|.
name|AuthenticationException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|ComponentType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|GDataServerRegistry
import|;
end_import
begin_comment
comment|/**  * @author Simon Willnauer  *  */
end_comment
begin_class
DECL|class|AuthenticationHandler
specifier|public
class|class
name|AuthenticationHandler
implements|implements
name|GDataRequestHandler
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AuthenticationHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|controller
specifier|private
specifier|final
name|AuthenticationController
name|controller
decl_stmt|;
DECL|field|errorKey
specifier|private
specifier|final
specifier|static
name|String
name|errorKey
init|=
literal|"Error"
decl_stmt|;
DECL|field|seperatory
specifier|private
specifier|final
specifier|static
name|char
name|seperatory
init|=
literal|'='
decl_stmt|;
DECL|field|serviceFactory
specifier|private
specifier|final
name|ServiceFactory
name|serviceFactory
decl_stmt|;
DECL|field|registry
specifier|private
specifier|final
name|GDataServerRegistry
name|registry
decl_stmt|;
comment|/**      *       */
DECL|method|AuthenticationHandler
specifier|public
name|AuthenticationHandler
parameter_list|()
block|{
name|this
operator|.
name|registry
operator|=
name|GDataServerRegistry
operator|.
name|getRegistry
argument_list|()
expr_stmt|;
name|this
operator|.
name|controller
operator|=
name|this
operator|.
name|registry
operator|.
name|lookup
argument_list|(
name|AuthenticationController
operator|.
name|class
argument_list|,
name|ComponentType
operator|.
name|AUTHENTICATIONCONTROLLER
argument_list|)
expr_stmt|;
name|this
operator|.
name|serviceFactory
operator|=
name|this
operator|.
name|registry
operator|.
name|lookup
argument_list|(
name|ServiceFactory
operator|.
name|class
argument_list|,
name|ComponentType
operator|.
name|SERVICEFACTORY
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see org.apache.lucene.gdata.servlet.handler.GDataRequestHandler#processRequest(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|processRequest
specifier|public
name|void
name|processRequest
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
try|try
block|{
name|String
name|serviceName
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|AuthenticationController
operator|.
name|SERVICE_PARAMETER
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|String
name|application
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|AuthenticationController
operator|.
name|APPLICATION_PARAMETER
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Authentication request for service: "
operator|+
name|serviceName
operator|+
literal|"; Application name: "
operator|+
name|application
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|registry
operator|.
name|isServiceRegistered
argument_list|(
name|serviceName
argument_list|)
condition|)
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"requested Service "
operator|+
name|serviceName
operator|+
literal|"is not registered"
argument_list|)
throw|;
name|String
name|password
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|AuthenticationController
operator|.
name|PASSWORD_PARAMETER
argument_list|)
decl_stmt|;
name|String
name|accountName
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|AuthenticationController
operator|.
name|ACCOUNT_PARAMETER
argument_list|)
decl_stmt|;
name|String
name|clientIp
init|=
name|request
operator|.
name|getRemoteHost
argument_list|()
decl_stmt|;
name|GDataAccount
name|account
init|=
name|getAccount
argument_list|(
name|accountName
argument_list|)
decl_stmt|;
if|if
condition|(
name|account
operator|==
literal|null
operator|||
operator|!
name|account
operator|.
name|getPassword
argument_list|()
operator|.
name|equals
argument_list|(
name|password
argument_list|)
condition|)
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"Account is null or password does not match"
argument_list|)
throw|;
name|String
name|token
init|=
name|this
operator|.
name|controller
operator|.
name|authenticatAccount
argument_list|(
name|account
argument_list|,
name|clientIp
argument_list|)
decl_stmt|;
name|sendToken
argument_list|(
name|response
argument_list|,
name|token
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Account authenticated -- "
operator|+
name|account
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"BadAuthentication -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|sendError
argument_list|(
name|response
argument_list|,
name|GDataResponse
operator|.
name|FORBIDDEN
argument_list|,
literal|"BadAuthentication"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected Exception -- SERVERERROR -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|sendError
argument_list|(
name|response
argument_list|,
name|GDataResponse
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Service not available"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getAccount
specifier|private
name|GDataAccount
name|getAccount
parameter_list|(
name|String
name|accountName
parameter_list|)
throws|throws
name|ServiceException
block|{
name|AdminService
name|service
init|=
name|this
operator|.
name|serviceFactory
operator|.
name|getAdminService
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|service
operator|.
name|getAccount
argument_list|(
name|accountName
argument_list|)
return|;
block|}
finally|finally
block|{
name|service
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|sendError
specifier|private
name|void
name|sendError
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|,
name|int
name|code
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|Writer
name|writer
init|=
name|response
operator|.
name|getWriter
argument_list|()
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|errorKey
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|seperatory
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendError
argument_list|(
name|code
argument_list|)
expr_stmt|;
block|}
DECL|method|sendToken
specifier|private
name|void
name|sendToken
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|,
name|String
name|token
parameter_list|)
throws|throws
name|IOException
block|{
name|Writer
name|responseWriter
init|=
name|response
operator|.
name|getWriter
argument_list|()
decl_stmt|;
name|Cookie
name|cookie
init|=
operator|new
name|Cookie
argument_list|(
name|AuthenticationController
operator|.
name|TOKEN_KEY
argument_list|,
name|token
argument_list|)
decl_stmt|;
name|response
operator|.
name|addCookie
argument_list|(
name|cookie
argument_list|)
expr_stmt|;
name|responseWriter
operator|.
name|write
argument_list|(
name|AuthenticationController
operator|.
name|TOKEN_KEY
argument_list|)
expr_stmt|;
name|responseWriter
operator|.
name|write
argument_list|(
name|seperatory
argument_list|)
expr_stmt|;
name|responseWriter
operator|.
name|write
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|responseWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
