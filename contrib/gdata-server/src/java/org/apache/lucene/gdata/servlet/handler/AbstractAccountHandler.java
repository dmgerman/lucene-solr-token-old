begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.servlet.handler
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|servlet
operator|.
name|handler
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|data
operator|.
name|GDataAccount
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|data
operator|.
name|GDataAccount
operator|.
name|AccountRole
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|GDataResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|ServiceException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|ServiceFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|administration
operator|.
name|AccountBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|administration
operator|.
name|AdminService
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|ComponentType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|GDataServerRegistry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import
begin_comment
comment|/**  * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|AbstractAccountHandler
specifier|public
specifier|abstract
class|class
name|AbstractAccountHandler
extends|extends
name|RequestAuthenticator
implements|implements
name|GDataRequestHandler
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AbstractAccountHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|authenticated
specifier|private
name|boolean
name|authenticated
init|=
literal|false
decl_stmt|;
DECL|field|error
specifier|private
name|int
name|error
decl_stmt|;
DECL|field|errorMessage
specifier|private
name|String
name|errorMessage
init|=
literal|""
decl_stmt|;
DECL|field|isError
specifier|private
name|boolean
name|isError
init|=
literal|false
decl_stmt|;
DECL|field|service
specifier|protected
name|AdminService
name|service
decl_stmt|;
comment|/**      * @see org.apache.lucene.gdata.servlet.handler.GDataRequestHandler#processRequest(javax.servlet.http.HttpServletRequest,      *      javax.servlet.http.HttpServletResponse)      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|processRequest
specifier|public
name|void
name|processRequest
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
try|try
block|{
name|this
operator|.
name|authenticated
operator|=
name|authenticateAccount
argument_list|(
name|request
argument_list|,
name|AccountRole
operator|.
name|USERADMINISTRATOR
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|authenticated
condition|)
block|{
name|GDataServerRegistry
name|registry
init|=
name|GDataServerRegistry
operator|.
name|getRegistry
argument_list|()
decl_stmt|;
name|ServiceFactory
name|factory
init|=
name|registry
operator|.
name|lookup
argument_list|(
name|ServiceFactory
operator|.
name|class
argument_list|,
name|ComponentType
operator|.
name|SERVICEFACTORY
argument_list|)
decl_stmt|;
try|try
block|{
name|GDataAccount
name|account
init|=
name|getAccountFromRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|account
operator|.
name|requiredValuesSet
argument_list|()
condition|)
block|{
name|setError
argument_list|(
name|GDataResponse
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Required server component not available"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AccountHandlerException
argument_list|(
literal|"Required values are not set -- account can not be saved -- "
operator|+
name|account
argument_list|)
throw|;
block|}
name|this
operator|.
name|service
operator|=
name|factory
operator|.
name|getAdminService
argument_list|()
expr_stmt|;
name|processServiceAction
argument_list|(
name|account
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't process account action -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|setError
argument_list|(
name|e
operator|.
name|getErrorCode
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccountHandlerException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't process account action -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|setError
argument_list|(
name|GDataResponse
operator|.
name|UNAUTHORIZED
argument_list|,
literal|"Authorization failed"
argument_list|)
expr_stmt|;
block|}
name|sendResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|this
operator|.
name|service
operator|!=
literal|null
condition|)
name|this
operator|.
name|service
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getAccountFromRequest
specifier|protected
name|GDataAccount
name|getAccountFromRequest
parameter_list|(
specifier|final
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|AccountHandlerException
block|{
try|try
block|{
name|GDataAccount
name|account
init|=
name|AccountBuilder
operator|.
name|buildAccount
argument_list|(
name|request
operator|.
name|getReader
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|account
operator|==
literal|null
condition|)
block|{
name|setError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|""
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AccountHandlerException
argument_list|(
literal|"unexpected value -- parsed account is null"
argument_list|)
throw|;
block|}
return|return
name|account
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|setError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
literal|"can not read input"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AccountHandlerException
argument_list|(
literal|"Can't read from request reader"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|setError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
literal|"can not parse gdata account"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AccountHandlerException
argument_list|(
literal|"Can not parse incoming gdata account"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|sendResponse
specifier|protected
name|void
name|sendResponse
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|isError
condition|)
return|return;
try|try
block|{
name|response
operator|.
name|sendError
argument_list|(
name|this
operator|.
name|error
argument_list|,
name|this
operator|.
name|errorMessage
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"can send error in RequestHandler "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setError
specifier|protected
name|void
name|setError
parameter_list|(
name|int
name|error
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|this
operator|.
name|error
operator|=
name|error
expr_stmt|;
name|this
operator|.
name|errorMessage
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|isError
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getErrorCode
specifier|protected
name|int
name|getErrorCode
parameter_list|()
block|{
return|return
name|this
operator|.
name|error
return|;
block|}
DECL|method|getErrorMessage
specifier|protected
name|String
name|getErrorMessage
parameter_list|()
block|{
return|return
name|this
operator|.
name|errorMessage
return|;
block|}
DECL|method|processServiceAction
specifier|protected
specifier|abstract
name|void
name|processServiceAction
parameter_list|(
specifier|final
name|GDataAccount
name|account
parameter_list|)
throws|throws
name|ServiceException
function_decl|;
DECL|class|AccountHandlerException
specifier|static
class|class
name|AccountHandlerException
extends|extends
name|Exception
block|{
comment|/**          *           */
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|3140463271122190694L
decl_stmt|;
comment|/**          * Constructs a new<tt>AccountHandlerException</tt> with an exception          * message and the exception caused this exception.          *           * @param arg0 -          *            the exception message          * @param arg1 -          *            the exception cause          */
DECL|method|AccountHandlerException
specifier|public
name|AccountHandlerException
parameter_list|(
name|String
name|arg0
parameter_list|,
name|Throwable
name|arg1
parameter_list|)
block|{
name|super
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|)
expr_stmt|;
block|}
comment|/**          * Constructs a new<tt>AccountHandlerException</tt> with an exception          * message.          *           * @param arg0 -          *            the exception message          */
DECL|method|AccountHandlerException
specifier|public
name|AccountHandlerException
parameter_list|(
name|String
name|arg0
parameter_list|)
block|{
name|super
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
