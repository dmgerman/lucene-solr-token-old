begin_unit
begin_comment
comment|/**   * Copyright 2004 The Apache Software Foundation   *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   *     http://www.apache.org/licenses/LICENSE-2.0   *   * Unless required by applicable law or agreed to in writing, software   * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.storage.lucenestorage
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|data
operator|.
name|GDataAccount
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|GDataEntityBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|ProvidedService
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|utils
operator|.
name|ModifiedEntryFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Hit
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Hits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Searcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|BaseEntry
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|BaseFeed
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|DateTime
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|util
operator|.
name|ParseException
import|;
end_import
begin_comment
comment|/**  * StorageQuery wraps a Lucene {@link org.apache.lucene.search.IndexSearcher}  * and a {@link org.apache.lucene.gdata.storage.lucenestorage.StorageBuffer} to  * perform all request on the lucene storage. The wrapped components are thread -  * safe.  *<p>  * An instance of this class will serve all client requests. To obtain the  * current instance of the {@link StorageQuery} the method  * {@link org.apache.lucene.gdata.storage.lucenestorage.StorageCoreController#getStorageQuery()}  * has to be invoked. This method will release the current StorageQuery.  *</p>  *   * @see org.apache.lucene.search.IndexSearcher  * @see org.apache.lucene.gdata.storage.lucenestorage.StorageCoreController  * @see org.apache.lucene.gdata.storage.lucenestorage.StorageBuffer  *   * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|StorageQuery
specifier|public
class|class
name|StorageQuery
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StorageQuery
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|buffer
specifier|private
specifier|final
name|StorageBuffer
name|buffer
decl_stmt|;
DECL|field|searcher
specifier|private
specifier|final
name|Searcher
name|searcher
decl_stmt|;
comment|/*      * Sort the result by timestamp desc      */
DECL|field|timeStampSort
specifier|private
specifier|final
name|Sort
name|timeStampSort
init|=
operator|new
name|Sort
argument_list|(
operator|new
name|SortField
argument_list|(
name|StorageEntryWrapper
operator|.
name|FIELD_TIMESTAMP
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * Creates a new StorageQuery      *       * @param buffer -      *            the buffer instance to get the buffered inserts, updates from.      * @param searcher -      *            the searcher instance to use to query the storage index.      *       *       */
DECL|method|StorageQuery
specifier|protected
name|StorageQuery
parameter_list|(
specifier|final
name|StorageBuffer
name|buffer
parameter_list|,
specifier|final
name|Searcher
name|searcher
parameter_list|)
block|{
name|this
operator|.
name|buffer
operator|=
name|buffer
expr_stmt|;
name|this
operator|.
name|searcher
operator|=
name|searcher
expr_stmt|;
block|}
DECL|method|storageQuery
specifier|private
name|Hits
name|storageQuery
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|entryId
parameter_list|)
throws|throws
name|IOException
block|{
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
comment|/*          * query the index using a BooleanQuery          */
for|for
control|(
name|String
name|id
range|:
name|entryId
control|)
block|{
name|TermQuery
name|termQuery
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|StorageEntryWrapper
operator|.
name|FIELD_ENTRY_ID
argument_list|,
name|id
argument_list|)
argument_list|)
decl_stmt|;
comment|// use an OR query
name|query
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
name|termQuery
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
operator|new
name|ModifiedEntryFilter
argument_list|(
name|this
operator|.
name|buffer
operator|.
name|getExculdList
argument_list|()
argument_list|,
name|StorageEntryWrapper
operator|.
name|FIELD_ENTRY_ID
argument_list|)
argument_list|)
return|;
block|}
comment|/*      * query the storage index for a entire feed.      */
DECL|method|storageFeedQuery
specifier|private
name|Hits
name|storageFeedQuery
parameter_list|(
specifier|final
name|String
name|feedId
parameter_list|,
specifier|final
name|Sort
name|sort
parameter_list|)
throws|throws
name|IOException
block|{
name|TermQuery
name|query
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|StorageEntryWrapper
operator|.
name|FIELD_FEED_REFERENCE
argument_list|,
name|feedId
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|this
operator|.
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
operator|new
name|ModifiedEntryFilter
argument_list|(
name|this
operator|.
name|buffer
operator|.
name|getExculdList
argument_list|()
argument_list|,
name|StorageEntryWrapper
operator|.
name|FIELD_ENTRY_ID
argument_list|)
argument_list|,
name|sort
argument_list|)
return|;
block|}
comment|/*      * get a single entry      */
DECL|method|storageQuery
specifier|private
name|Hits
name|storageQuery
parameter_list|(
name|String
name|entryId
parameter_list|)
throws|throws
name|IOException
block|{
name|TermQuery
name|termQuery
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|StorageEntryWrapper
operator|.
name|FIELD_ENTRY_ID
argument_list|,
name|entryId
argument_list|)
argument_list|)
decl_stmt|;
comment|/*          * Filter entries inside the buffer, buffered entries might contain          * deleted entries. These entries must be found!!          */
return|return
name|this
operator|.
name|searcher
operator|.
name|search
argument_list|(
name|termQuery
argument_list|,
operator|new
name|ModifiedEntryFilter
argument_list|(
name|this
operator|.
name|buffer
operator|.
name|getExculdList
argument_list|()
argument_list|,
name|StorageEntryWrapper
operator|.
name|FIELD_ENTRY_ID
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * This method fetches the latest feed entries from the storage. Feed      * usually requested via a search query or as a simple query to the REST      * interface.      *<p>      * The REST interface requests all the entries from a Storage. The Storage      * retrieves the entries corresponding to the parameters specified. This      * method first requests the latest entries or updated entries from the      * {@link StorageBuffer}. If the buffer already contains enough entries      * for the the specified result count the entries will be returned. If not,      * the underlying lucene index will be searcher for all documents of the      * specified feed sorted by storing timestamp desc.      *</p>      *<p>      * The entries will be searched in a feed context specified by the given      * feed ID      *</p>      *       *       * @param feedId -      *            the requested feed, this id will be used to retrieve the      *            entries.      * @param resultCount -      *            how many entries are requested      * @param startIndex -      *            the offset of the entry to start from.      * @param config -      *            the FeedInstanceConfiguration containing extension profile used      *            to create the entry instances      * @return - an ordered list of {@link BaseEntry} objects, or an empty list      *         if no entries could be found      * @throws IOException -      *             if the index could not be queries or the entries could not be      *             build      * @throws ParseException -      *             if an entry could not be parsed while building it from the      *             Lucene Document.      */
comment|// TODO check input parameter
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getLatestFeedQuery
specifier|public
name|BaseFeed
name|getLatestFeedQuery
parameter_list|(
specifier|final
name|String
name|feedId
parameter_list|,
specifier|final
name|int
name|resultCount
parameter_list|,
specifier|final
name|int
name|startIndex
parameter_list|,
specifier|final
name|ProvidedService
name|config
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|DateTime
name|updated
init|=
literal|null
decl_stmt|;
name|Hits
name|feedHits
init|=
name|storageFeedQuery
argument_list|(
name|feedId
argument_list|)
decl_stmt|;
if|if
condition|(
name|feedHits
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
name|BaseFeed
name|retVal
init|=
name|buildFeedFromLuceneDocument
argument_list|(
name|feedHits
operator|.
name|doc
argument_list|(
literal|0
argument_list|)
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BaseEntry
argument_list|>
name|returnList
init|=
operator|new
name|ArrayList
argument_list|<
name|BaseEntry
argument_list|>
argument_list|(
name|resultCount
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StorageEntryWrapper
argument_list|>
name|bufferedWrapperList
init|=
name|this
operator|.
name|buffer
operator|.
name|getSortedEntries
argument_list|(
name|feedId
argument_list|)
decl_stmt|;
name|int
name|alreadyAdded
init|=
literal|0
decl_stmt|;
name|int
name|offset
init|=
name|startIndex
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|bufferedWrapperList
operator|!=
literal|null
operator|&&
name|bufferedWrapperList
operator|.
name|size
argument_list|()
operator|>=
name|startIndex
condition|)
block|{
name|updated
operator|=
name|bufferedWrapperList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEntry
argument_list|()
operator|.
name|getUpdated
argument_list|()
expr_stmt|;
for|for
control|(
init|;
name|alreadyAdded
operator|<
name|resultCount
condition|;
name|alreadyAdded
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|bufferedWrapperList
operator|.
name|size
argument_list|()
operator|-
name|offset
operator|)
operator|>
literal|0
condition|)
block|{
name|StorageEntryWrapper
name|wrappedEntry
init|=
name|bufferedWrapperList
operator|.
name|get
argument_list|(
name|offset
operator|++
argument_list|)
decl_stmt|;
name|returnList
operator|.
name|add
argument_list|(
name|wrappedEntry
operator|.
name|getEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
break|break;
block|}
comment|// reset offset
name|offset
operator|=
name|startIndex
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|alreadyAdded
operator|==
name|resultCount
condition|)
block|{
name|retVal
operator|.
name|getEntries
argument_list|()
operator|.
name|addAll
argument_list|(
name|returnList
argument_list|)
expr_stmt|;
name|retVal
operator|.
name|setUpdated
argument_list|(
name|updated
argument_list|)
expr_stmt|;
return|return
name|retVal
return|;
block|}
block|}
else|else
block|{
comment|/*              * if the buffer size is less than the start index the buffer size must              * be considered. Sublists would not be a repeatable read part of              * the whole list              */
if|if
condition|(
name|bufferedWrapperList
operator|!=
literal|null
condition|)
name|offset
operator|=
name|startIndex
operator|-
literal|1
operator|-
name|bufferedWrapperList
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|Hits
name|hits
init|=
name|storageFeedQuery
argument_list|(
name|feedId
argument_list|,
name|this
operator|.
name|timeStampSort
argument_list|)
decl_stmt|;
if|if
condition|(
name|hits
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
init|;
operator|(
name|offset
operator|<
name|hits
operator|.
name|length
argument_list|()
operator|)
operator|&&
operator|(
name|alreadyAdded
operator|<
name|resultCount
operator|)
condition|;
name|offset
operator|++
operator|,
name|alreadyAdded
operator|++
control|)
block|{
name|Document
name|doc
init|=
name|hits
operator|.
name|doc
argument_list|(
name|offset
argument_list|)
decl_stmt|;
name|BaseEntry
name|entry
init|=
name|buildEntryFromLuceneDocument
argument_list|(
name|doc
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|returnList
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|updated
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|long
name|updatedTimeStamp
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|hits
operator|.
name|doc
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|StorageEntryWrapper
operator|.
name|FIELD_TIMESTAMP
argument_list|)
argument_list|)
decl_stmt|;
name|updated
operator|=
operator|new
name|DateTime
argument_list|(
name|updatedTimeStamp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"could not create DateTime -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|updated
operator|=
name|buildEntryFromLuceneDocument
argument_list|(
name|hits
operator|.
name|doc
argument_list|(
literal|0
argument_list|)
argument_list|,
name|config
argument_list|)
operator|.
name|getUpdated
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|retVal
operator|.
name|setUpdated
argument_list|(
name|updated
argument_list|)
expr_stmt|;
name|retVal
operator|.
name|getEntries
argument_list|()
operator|.
name|addAll
argument_list|(
name|returnList
argument_list|)
expr_stmt|;
return|return
name|retVal
return|;
block|}
comment|/**      * This method retrieves a single entry from the storage. If the      * {@link StorageBuffer} does not contain the requested entry the      * underlying storage index will be searched.      *<p>      * The Entry will be searched in a feed context specified by the given feed      * ID      *</p>      *       * @param entryId -      *            the entry to fetch      * @param feedId -      *            the feed id e.g. feed context      * @param config -      *            the FeedInstanceConfiguration containing extension profile used      *            to create the entry instances      * @return - the requested {@link BaseEntry} or<code>null</code> if the      *         entry can not be found      * @throws IOException -      *             if the index could not be queries or the entries could not be      *             build      * @throws ParseException -      *             if an entry could not be parsed while building it from the      *             Lucene Document.      */
DECL|method|singleEntryQuery
specifier|public
name|BaseEntry
name|singleEntryQuery
parameter_list|(
specifier|final
name|String
name|entryId
parameter_list|,
specifier|final
name|String
name|feedId
parameter_list|,
specifier|final
name|ProvidedService
name|config
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|StorageEntryWrapper
name|wrapper
init|=
name|this
operator|.
name|buffer
operator|.
name|getEntry
argument_list|(
name|entryId
argument_list|,
name|feedId
argument_list|)
decl_stmt|;
if|if
condition|(
name|wrapper
operator|==
literal|null
condition|)
block|{
name|Hits
name|hits
init|=
name|storageQuery
argument_list|(
name|entryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|hits
operator|.
name|length
argument_list|()
operator|<=
literal|0
condition|)
return|return
literal|null
return|;
name|Document
name|doc
init|=
name|hits
operator|.
name|doc
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|buildEntryFromLuceneDocument
argument_list|(
name|doc
argument_list|,
name|config
argument_list|)
return|;
block|}
comment|/*          * ServerBaseEntry enables the dynamic element of the entry like the          * links to be dynamic. BufferedEntries will be reused until they are          * written.          */
return|return
name|wrapper
operator|.
name|getEntry
argument_list|()
return|;
block|}
comment|/**      * Fetches the requested entries from the storage. The given list contains      * entry id's to be looked up in the storage. First the {@link StorageBuffer}      * will be queried for the entry id's. If not all of the entries remain in      * the buffer the underlying lucene index will be searched. The entries are      * not guaranteed to be in the same order as they are in the given id list.      * Entry ID's not found in the index or the buffer will be omitted.      *<p>      * The entries will be searched in a feed context specified by the given      * feed ID      *</p>      *       * @param entryIds -      *            the entry id's to fetch.      * @param feedId -      *            the feed id e.g. feed context.      * @param config -      *            the FeedInstanceConfiguration containing extension profile used      *            to create the entry instances      *       * @return - the list of entries corresponding to the given entry id list.      * @throws IOException -      *             if the index could not be queries or the entries could not be      *             build      * @throws ParseException -      *             if an entry could not be parsed while building it from the      *             Lucene Document.      */
DECL|method|entryQuery
specifier|public
name|List
argument_list|<
name|BaseEntry
argument_list|>
name|entryQuery
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|entryIds
parameter_list|,
specifier|final
name|String
name|feedId
parameter_list|,
specifier|final
name|ProvidedService
name|config
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|List
argument_list|<
name|BaseEntry
argument_list|>
name|resultList
init|=
operator|new
name|ArrayList
argument_list|<
name|BaseEntry
argument_list|>
argument_list|(
name|entryIds
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|searchList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|entryIds
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|entry
range|:
name|entryIds
control|)
block|{
name|StorageEntryWrapper
name|bufferedEntry
init|=
name|this
operator|.
name|buffer
operator|.
name|getEntry
argument_list|(
name|entry
argument_list|,
name|feedId
argument_list|)
decl_stmt|;
if|if
condition|(
name|bufferedEntry
operator|!=
literal|null
condition|)
block|{
name|resultList
operator|.
name|add
argument_list|(
name|bufferedEntry
operator|.
name|getEntry
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
name|searchList
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|searchList
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|resultList
return|;
name|Hits
name|hits
init|=
name|storageQuery
argument_list|(
name|searchList
argument_list|)
decl_stmt|;
name|Iterator
name|hitIterator
init|=
name|hits
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|hitIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Hit
name|hit
init|=
operator|(
name|Hit
operator|)
name|hitIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|hit
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|BaseEntry
name|entry
init|=
name|buildEntryFromLuceneDocument
argument_list|(
name|doc
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|resultList
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
return|return
name|resultList
return|;
block|}
DECL|method|buildEntryFromLuceneDocument
specifier|private
name|BaseEntry
name|buildEntryFromLuceneDocument
parameter_list|(
specifier|final
name|Document
name|doc
parameter_list|,
specifier|final
name|ProvidedService
name|config
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|Reader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
name|doc
operator|.
name|getField
argument_list|(
name|StorageEntryWrapper
operator|.
name|FIELD_CONTENT
argument_list|)
operator|.
name|stringValue
argument_list|()
argument_list|)
decl_stmt|;
name|BaseEntry
name|entry
init|=
name|GDataEntityBuilder
operator|.
name|buildEntry
argument_list|(
name|reader
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setVersionId
argument_list|(
name|doc
operator|.
name|getField
argument_list|(
name|StorageEntryWrapper
operator|.
name|FIELD_VERSION
argument_list|)
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
DECL|method|buildFeedFromLuceneDocument
specifier|private
name|BaseFeed
name|buildFeedFromLuceneDocument
parameter_list|(
specifier|final
name|Document
name|doc
parameter_list|,
specifier|final
name|ProvidedService
name|config
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|Reader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
name|doc
operator|.
name|getField
argument_list|(
name|StorageFeedWrapper
operator|.
name|FIELD_CONTENT
argument_list|)
operator|.
name|stringValue
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|GDataEntityBuilder
operator|.
name|buildFeed
argument_list|(
name|reader
argument_list|,
name|config
argument_list|)
return|;
block|}
comment|/**      * Queries the storage for an user instance      *       * @param username -      *            the username (primary key)      * @return - the user instance if found or<code>null</code> if not exists      * @throws IOException -      *             if the storage can not be accessed.      */
DECL|method|getUser
specifier|public
name|GDataAccount
name|getUser
parameter_list|(
specifier|final
name|String
name|username
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|username
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|TermQuery
name|query
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|StorageAccountWrapper
operator|.
name|FIELD_ACCOUNTNAME
argument_list|,
name|username
argument_list|)
argument_list|)
decl_stmt|;
name|Hits
name|h
init|=
name|this
operator|.
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|h
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|StorageAccountWrapper
operator|.
name|buildEntity
argument_list|(
name|h
operator|.
name|doc
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Closes all resources used in the {@link StorageQuery}. The instance can      * not be reused after invoking this method.      *       * @throws IOException -      *             if the resources can not be closed      */
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|buffer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Checks whether a feed for the given feedID is stored      *       * @param feedId -      *            the feed ID      * @return<code>true</code> if and only if a feed is stored for the      *         provided feed ID,<code>false</code> if no feed for the given      *         id is stored      * @throws IOException      */
DECL|method|isFeedStored
specifier|public
name|boolean
name|isFeedStored
parameter_list|(
name|String
name|feedId
parameter_list|)
throws|throws
name|IOException
block|{
name|Hits
name|h
init|=
name|storageFeedQuery
argument_list|(
name|feedId
argument_list|)
decl_stmt|;
return|return
operator|(
name|h
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
return|;
block|}
comment|/**      * Looks up the feed type for the given feed ID      *       * @param feedID -      *            the feed ID      * @return - the feed type      * @throws IOException -      *             if the storage can not be accessed      */
DECL|method|getService
specifier|public
name|String
name|getService
parameter_list|(
name|String
name|feedID
parameter_list|)
throws|throws
name|IOException
block|{
name|Hits
name|hits
init|=
name|storageFeedQuery
argument_list|(
name|feedID
argument_list|)
decl_stmt|;
if|if
condition|(
name|hits
operator|.
name|length
argument_list|()
operator|<=
literal|0
condition|)
return|return
literal|null
return|;
name|Document
name|doc
init|=
name|hits
operator|.
name|doc
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|feedType
init|=
name|doc
operator|.
name|get
argument_list|(
name|StorageFeedWrapper
operator|.
name|FIELD_SERVICE_ID
argument_list|)
decl_stmt|;
return|return
name|feedType
return|;
block|}
DECL|method|storageFeedQuery
specifier|private
name|Hits
name|storageFeedQuery
parameter_list|(
name|String
name|feedId
parameter_list|)
throws|throws
name|IOException
block|{
name|TermQuery
name|query
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|StorageFeedWrapper
operator|.
name|FIELD_FEED_ID
argument_list|,
name|feedId
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|this
operator|.
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|)
return|;
block|}
comment|/**      * Looks up the account reference for the given feed id      *       * @param feedId -      *            id of the feed      * @return - the name of the account associated with the feed for the given      *         feed id, or<code>null</code> if the feed is not stored      * @throws IOException -      *             if the storage can not be accessed      */
DECL|method|getAccountNameForFeedId
specifier|public
name|String
name|getAccountNameForFeedId
parameter_list|(
name|String
name|feedId
parameter_list|)
throws|throws
name|IOException
block|{
name|Hits
name|h
init|=
name|storageFeedQuery
argument_list|(
name|feedId
argument_list|)
decl_stmt|;
if|if
condition|(
name|h
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
name|Document
name|doc
init|=
name|h
operator|.
name|doc
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|doc
operator|.
name|get
argument_list|(
name|StorageFeedWrapper
operator|.
name|FIELD_ACCOUNTREFERENCE
argument_list|)
return|;
block|}
DECL|method|getEntryLastModified
specifier|protected
name|long
name|getEntryLastModified
parameter_list|(
specifier|final
name|String
name|entryId
parameter_list|,
specifier|final
name|String
name|feedId
parameter_list|)
throws|throws
name|IOException
throws|,
name|StorageException
block|{
name|StorageEntryWrapper
name|wrapper
init|=
name|this
operator|.
name|buffer
operator|.
name|getEntry
argument_list|(
name|entryId
argument_list|,
name|feedId
argument_list|)
decl_stmt|;
if|if
condition|(
name|wrapper
operator|!=
literal|null
condition|)
return|return
name|wrapper
operator|.
name|getTimestamp
argument_list|()
return|;
name|Hits
name|h
init|=
name|storageQuery
argument_list|(
name|entryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|h
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
try|try
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|h
operator|.
name|doc
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|StorageEntryWrapper
operator|.
name|FIELD_TIMESTAMP
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can not parse timestamp from entry -- "
operator|+
name|h
operator|.
name|doc
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|StorageEntryWrapper
operator|.
name|FIELD_TIMESTAMP
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Entry not found"
argument_list|)
throw|;
return|return
literal|0
return|;
block|}
DECL|method|getFeedLastModified
specifier|protected
name|long
name|getFeedLastModified
parameter_list|(
specifier|final
name|String
name|feedId
parameter_list|)
throws|throws
name|IOException
block|{
name|Long
name|bufferedTime
init|=
name|this
operator|.
name|buffer
operator|.
name|getFeedLastModified
argument_list|(
name|feedId
argument_list|)
decl_stmt|;
if|if
condition|(
name|bufferedTime
operator|!=
literal|null
condition|)
return|return
name|bufferedTime
return|;
name|Hits
name|entryHits
init|=
name|storageFeedQuery
argument_list|(
name|feedId
argument_list|,
name|this
operator|.
name|timeStampSort
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryHits
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|entryHits
operator|.
name|doc
argument_list|(
literal|0
argument_list|)
operator|.
name|getField
argument_list|(
name|StorageEntryWrapper
operator|.
name|FIELD_TIMESTAMP
argument_list|)
operator|.
name|stringValue
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can not parse timestamp from entry -- "
operator|+
name|entryHits
operator|.
name|doc
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|StorageEntryWrapper
operator|.
name|FIELD_TIMESTAMP
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|0
return|;
block|}
DECL|method|isEntryStored
specifier|protected
name|boolean
name|isEntryStored
parameter_list|(
name|String
name|entryId
parameter_list|,
name|String
name|feedId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checking isEntryStored for entryid "
operator|+
name|entryId
operator|+
literal|" feedid: "
operator|+
name|feedId
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|buffer
operator|.
name|getEntry
argument_list|(
name|entryId
argument_list|,
name|feedId
argument_list|)
operator|!=
literal|null
condition|)
return|return
literal|true
return|;
name|Hits
name|h
init|=
name|storageQuery
argument_list|(
name|entryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|h
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
DECL|method|checkEntryVersion
specifier|protected
name|boolean
name|checkEntryVersion
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|feedId
parameter_list|,
name|int
name|version
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checking entry version for entryid "
operator|+
name|id
operator|+
literal|" feedid: "
operator|+
name|feedId
operator|+
literal|" version: "
operator|+
name|version
argument_list|)
expr_stmt|;
name|StorageEntryWrapper
name|wrapper
init|=
name|this
operator|.
name|buffer
operator|.
name|getEntry
argument_list|(
name|id
argument_list|,
name|feedId
argument_list|)
decl_stmt|;
if|if
condition|(
name|wrapper
operator|!=
literal|null
condition|)
return|return
name|wrapper
operator|.
name|getVersion
argument_list|()
operator|==
name|version
return|;
name|Hits
name|h
init|=
name|storageQuery
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|h
operator|.
name|length
argument_list|()
operator|<
literal|1
condition|)
return|return
literal|false
return|;
name|Document
name|doc
init|=
name|h
operator|.
name|doc
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|fieldValue
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fieldValue
operator|=
name|doc
operator|.
name|getField
argument_list|(
name|StorageEntryWrapper
operator|.
name|FIELD_VERSION
argument_list|)
operator|.
name|stringValue
argument_list|()
expr_stmt|;
name|int
name|storedVersion
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|fieldValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"StoredEntry has version "
operator|+
name|storedVersion
operator|+
literal|" return compare result"
argument_list|)
expr_stmt|;
return|return
name|storedVersion
operator|==
name|version
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Entry has no parable Version id or field is not set -- "
operator|+
name|fieldValue
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class
end_unit
