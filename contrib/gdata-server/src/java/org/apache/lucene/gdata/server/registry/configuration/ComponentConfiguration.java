begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.server.registry.configuration
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|configuration
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/**  * Simple configuration class storing properties as key with defined property  * values as values in a<code>Map<String,String></code>. As a map cannot  * contain duplicate keys the first use of a key can not be replaced. If a key  * is used twice a {@link java.lang.IllegalArgumentException} will be thrown.  * @see Map  * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|ComponentConfiguration
specifier|public
class|class
name|ComponentConfiguration
block|{
DECL|field|configMap
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configMap
decl_stmt|;
comment|/**      * Creates a new ComponentConfiguration object and initializes the internal      * map.      */
DECL|method|ComponentConfiguration
specifier|public
name|ComponentConfiguration
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|configMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**      * Stores a key / value pair as a property. If a key is used twice the first      * call will set the key / value pair. Any subsequent calls with a already      * set key will throw a IllegalArgumentException.      *       * @param key -      *            the property as a key      * @param value -      *            the value for the key      *@see Map#put(Object, Object)      */
DECL|method|set
specifier|public
name|void
name|set
parameter_list|(
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|configMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"key has already been used"
argument_list|)
throw|;
name|this
operator|.
name|configMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the value of the key or<code>null</code> if the key is not set.      * @param key - the key      * @return - the value for the key or<code>null</code> if the key is not set.      * @see Map#get(java.lang.Object)       */
DECL|method|get
specifier|public
name|String
name|get
parameter_list|(
specifier|final
name|String
name|key
parameter_list|)
block|{
return|return
name|this
operator|.
name|configMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**      * @param key - a string key      * @return -<code>true</code> if the key is set, otherwise<code>false</code>      * @see Map#containsKey(java.lang.Object)      */
DECL|method|contains
specifier|public
name|boolean
name|contains
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|this
operator|.
name|configMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
end_class
end_unit
