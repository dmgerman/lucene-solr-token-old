begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.storage.lucenestorage
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import
begin_comment
comment|/**  * @author Simon Willnauer  *  */
end_comment
begin_class
DECL|class|SingleHostConcurrentStorageLock
specifier|public
class|class
name|SingleHostConcurrentStorageLock
implements|implements
name|ConcurrentStorageLock
block|{
DECL|field|INSTANCE
specifier|private
specifier|volatile
specifier|static
name|ConcurrentStorageLock
name|INSTANCE
init|=
literal|null
decl_stmt|;
DECL|field|locks
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Thread
argument_list|>
name|locks
decl_stmt|;
DECL|field|threads
specifier|private
specifier|final
name|Map
argument_list|<
name|Thread
argument_list|,
name|String
argument_list|>
name|threads
decl_stmt|;
DECL|field|synLock
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|synLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|Lock
name|readLock
init|=
name|this
operator|.
name|synLock
operator|.
name|readLock
argument_list|()
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|Lock
name|writeLock
init|=
name|this
operator|.
name|synLock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
DECL|field|isClosed
specifier|private
specifier|final
name|AtomicBoolean
name|isClosed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|/**      *       */
DECL|method|SingleHostConcurrentStorageLock
specifier|private
name|SingleHostConcurrentStorageLock
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|locks
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Thread
argument_list|>
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|this
operator|.
name|threads
operator|=
operator|new
name|HashMap
argument_list|<
name|Thread
argument_list|,
name|String
argument_list|>
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
DECL|method|getConcurrentStorageLock
specifier|protected
specifier|static
specifier|synchronized
name|ConcurrentStorageLock
name|getConcurrentStorageLock
parameter_list|()
block|{
if|if
condition|(
name|INSTANCE
operator|==
literal|null
condition|)
name|INSTANCE
operator|=
operator|new
name|SingleHostConcurrentStorageLock
argument_list|()
expr_stmt|;
return|return
name|INSTANCE
return|;
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.lucenestorage.ConcurrentStorageLock#setLock(java.lang.String)      */
DECL|method|setLock
specifier|public
name|boolean
name|setLock
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|isClosed
operator|.
name|get
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Lock has been closed"
argument_list|)
throw|;
name|Thread
name|t
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|threads
operator|.
name|containsKey
argument_list|(
name|t
argument_list|)
condition|)
throw|throw
operator|new
name|ConcurrencyException
argument_list|(
literal|"one thread must not obtain more than one lock -- single thread can not modify more than one resource"
argument_list|)
throw|;
if|if
condition|(
name|this
operator|.
name|locks
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|this
operator|.
name|locks
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|this
operator|.
name|threads
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.lucenestorage.ConcurrentStorageLock#releaseLock(java.lang.String)      */
DECL|method|releaseLock
specifier|public
name|boolean
name|releaseLock
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|isClosed
operator|.
name|get
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Lock has been closed"
argument_list|)
throw|;
name|Thread
name|t
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|threads
operator|.
name|containsKey
argument_list|(
name|t
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|locks
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|t
operator|!=
name|this
operator|.
name|locks
operator|.
name|get
argument_list|(
name|key
argument_list|)
condition|)
throw|throw
operator|new
name|ConcurrencyException
argument_list|(
literal|"Illegal lock access -- current thread is not owner"
argument_list|)
throw|;
name|this
operator|.
name|locks
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|this
operator|.
name|threads
operator|.
name|remove
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.lucenestorage.ConcurrentStorageLock#releaseThreadLocks()      */
DECL|method|releaseThreadLocks
specifier|public
name|boolean
name|releaseThreadLocks
parameter_list|()
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|isClosed
operator|.
name|get
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Lock has been closed"
argument_list|)
throw|;
name|Thread
name|t
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|threads
operator|.
name|containsKey
argument_list|(
name|t
argument_list|)
condition|)
return|return
literal|false
return|;
name|String
name|key
init|=
name|this
operator|.
name|threads
operator|.
name|get
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|this
operator|.
name|threads
operator|.
name|remove
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|locks
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
return|return
literal|false
return|;
name|this
operator|.
name|locks
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.lucenestorage.ConcurrentStorageLock#isKeyLocked(java.lang.String)      */
DECL|method|isKeyLocked
specifier|public
name|boolean
name|isKeyLocked
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|isClosed
operator|.
name|get
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Lock has been closed"
argument_list|)
throw|;
return|return
name|this
operator|.
name|locks
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.lucenestorage.ConcurrentStorageLock#close()      */
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|isClosed
operator|.
name|get
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Lock has been closed"
argument_list|)
throw|;
name|this
operator|.
name|isClosed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|locks
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|threads
operator|.
name|clear
argument_list|()
expr_stmt|;
name|INSTANCE
operator|=
operator|new
name|SingleHostConcurrentStorageLock
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|forceClear
specifier|protected
name|void
name|forceClear
parameter_list|()
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|isClosed
operator|.
name|get
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Lock has been closed"
argument_list|)
throw|;
name|this
operator|.
name|locks
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|threads
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|ConcurrencyException
specifier|static
class|class
name|ConcurrencyException
extends|extends
name|RuntimeException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|6388236477729760962L
decl_stmt|;
DECL|method|ConcurrencyException
name|ConcurrencyException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
