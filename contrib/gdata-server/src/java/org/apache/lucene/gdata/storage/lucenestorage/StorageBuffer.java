begin_unit
begin_comment
comment|/**   * Copyright 2004 The Apache Software Foundation   *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   *     http://www.apache.org/licenses/LICENSE-2.0   *   * Unless required by applicable law or agreed to in writing, software   * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.storage.lucenestorage
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
operator|.
name|StorageEntryWrapper
operator|.
name|StorageOperation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|utils
operator|.
name|ModifiedEntryFilter
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|BaseEntry
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|ExtensionProfile
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|Link
import|;
end_import
begin_comment
comment|/**  * The StorageBuffer is used to buffer incoming updates, deletes and inserts to  * the storage. The storage uses an lucene index to store the enries. As  * modifying the index all the time an altering request comes in is not  * efficent. The entries will be added to the buffer to be available for  * incoming storage queries. If the loadfactor for the  * {@link org.apache.lucene.gdata.storage.lucenestorage.StorageModifier} is  * reached the modifier will perform a batch update on the index. Each entry  * will be associated with a feed id inside a associative datastructure to  * return a requested entry efficiently.  *<p>  * This implementation uses {@link java.util.concurrent.locks.ReadWriteLock}.  * The read lock may be held simultaneously by multiple reader threads, so long  * as there are no writers. The write lock is exclusive.  *</p>  *<p>  * The entry and feed ID's must not be a composite key. The entry and feed ID  * must be unique.  *</p>  *   * @see java.util.concurrent.locks.ReentrantReadWriteLock  * @see org.apache.lucene.gdata.storage.lucenestorage.StorageModifier  * @see org.apache.lucene.gdata.storage.lucenestorage.StorageCoreController  *   * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|StorageBuffer
specifier|public
class|class
name|StorageBuffer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StorageBuffer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|bufferMap
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|StorageEntryWrapper
argument_list|>
argument_list|>
name|bufferMap
decl_stmt|;
DECL|field|modifiyMap
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|modifiyMap
decl_stmt|;
DECL|field|excludeList
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|excludeList
decl_stmt|;
DECL|field|lock
specifier|private
specifier|final
name|ReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|(
literal|true
argument_list|)
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|Lock
name|readLock
init|=
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|Lock
name|writeLock
init|=
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
DECL|field|bufferSize
specifier|private
specifier|final
name|int
name|bufferSize
decl_stmt|;
DECL|field|DEFAULT_BUFFER_COUNT
specifier|protected
specifier|final
specifier|static
name|int
name|DEFAULT_BUFFER_COUNT
init|=
literal|10
decl_stmt|;
comment|/**      * Constructs a new StorageBuffer.      *<p>      * The expectedBufferCount sould be higher than the maximum of entries added      * to the buffer, resizing the buffer is very efficient. For detailed      * infomation {@link HashMap} as this is used inside the buffer      *</p>      *       * @param expectedBufferCount -      *            the expected size of the buffer      *       */
DECL|method|StorageBuffer
specifier|protected
name|StorageBuffer
parameter_list|(
specifier|final
name|int
name|expectedBufferCount
parameter_list|)
block|{
name|this
operator|.
name|bufferSize
operator|=
name|expectedBufferCount
operator|<
name|DEFAULT_BUFFER_COUNT
condition|?
name|DEFAULT_BUFFER_COUNT
else|:
name|expectedBufferCount
expr_stmt|;
name|this
operator|.
name|bufferMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|StorageEntryWrapper
argument_list|>
argument_list|>
argument_list|(
name|this
operator|.
name|bufferSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|excludeList
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|this
operator|.
name|bufferSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|modifiyMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|(
name|this
operator|.
name|bufferSize
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a {@link StorageEntryWrapper} to the buffer. If a wrapper      * representing the same entry are already in the buffer the wrapper will be      * replaced.      *<p>      * This method does ignore already delted entries. This should before the      * entry is added to the buffer.      *</p>      *       * @param wrapper -      *            the wrapper to buffer      */
DECL|method|addEntry
specifier|public
name|void
name|addEntry
parameter_list|(
specifier|final
name|StorageEntryWrapper
name|wrapper
parameter_list|)
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|" Buffering wrapper - "
operator|+
name|wrapper
operator|.
name|getOperation
argument_list|()
operator|+
literal|" ID: "
operator|+
name|wrapper
operator|.
name|getEntryId
argument_list|()
operator|+
literal|" FeedID: "
operator|+
name|wrapper
operator|.
name|getFeedId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|wrapper
operator|.
name|getOperation
argument_list|()
operator|.
name|equals
argument_list|(
name|StorageOperation
operator|.
name|DELETE
argument_list|)
condition|)
return|return;
name|String
name|feedId
init|=
name|wrapper
operator|.
name|getFeedId
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|bufferMap
operator|.
name|containsKey
argument_list|(
name|feedId
argument_list|)
condition|)
name|this
operator|.
name|bufferMap
operator|.
name|get
argument_list|(
name|feedId
argument_list|)
operator|.
name|put
argument_list|(
name|wrapper
operator|.
name|getEntryId
argument_list|()
argument_list|,
name|wrapper
argument_list|)
expr_stmt|;
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|StorageEntryWrapper
argument_list|>
name|newFeedMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|StorageEntryWrapper
argument_list|>
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|newFeedMap
operator|.
name|put
argument_list|(
name|wrapper
operator|.
name|getEntryId
argument_list|()
argument_list|,
name|wrapper
argument_list|)
expr_stmt|;
name|this
operator|.
name|bufferMap
operator|.
name|put
argument_list|(
name|feedId
argument_list|,
name|newFeedMap
argument_list|)
expr_stmt|;
block|}
name|addLastModified
argument_list|(
name|wrapper
operator|.
name|getFeedId
argument_list|()
argument_list|,
name|wrapper
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
comment|/*              * add to exclude from searches doc will be available via the buffer              * if the entry is not already in the buffer              */
if|if
condition|(
operator|!
name|this
operator|.
name|excludeList
operator|.
name|contains
argument_list|(
name|wrapper
operator|.
name|getEntryId
argument_list|()
argument_list|)
condition|)
name|this
operator|.
name|excludeList
operator|.
name|add
argument_list|(
name|wrapper
operator|.
name|getEntryId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addLastModified
specifier|private
name|void
name|addLastModified
parameter_list|(
specifier|final
name|String
name|feedId
parameter_list|,
name|Long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|modifiyMap
operator|.
name|containsKey
argument_list|(
name|feedId
argument_list|)
condition|)
name|this
operator|.
name|modifiyMap
operator|.
name|remove
argument_list|(
name|feedId
argument_list|)
expr_stmt|;
name|this
operator|.
name|modifiyMap
operator|.
name|put
argument_list|(
name|feedId
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * the timestamp of the last modification for the given feed id      *       * @param feedId -      *            feed id      * @return timestamp      */
DECL|method|getFeedLastModified
specifier|protected
name|Long
name|getFeedLastModified
parameter_list|(
specifier|final
name|String
name|feedId
parameter_list|)
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|modifiyMap
operator|.
name|get
argument_list|(
name|feedId
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getLastModified
specifier|protected
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|getLastModified
parameter_list|()
block|{
return|return
name|this
operator|.
name|modifiyMap
operator|.
name|entrySet
argument_list|()
return|;
block|}
comment|/**      * Returns all entries for the given feed id sorted by the update timestamp      * desc.      *       * @param feedId -      *            the feed id      * @return a {@link List} of all {@link StorageEntryWrapper} object buffered      *         in this buffer or an empty list if not entry has been buffered      *         for the given feed      */
DECL|method|getSortedEntries
specifier|public
name|List
argument_list|<
name|StorageEntryWrapper
argument_list|>
name|getSortedEntries
parameter_list|(
name|String
name|feedId
parameter_list|)
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|bufferMap
operator|.
name|containsKey
argument_list|(
name|feedId
argument_list|)
condition|)
return|return
literal|null
return|;
name|Map
argument_list|<
name|String
argument_list|,
name|StorageEntryWrapper
argument_list|>
name|tempMap
init|=
name|this
operator|.
name|bufferMap
operator|.
name|get
argument_list|(
name|feedId
argument_list|)
decl_stmt|;
if|if
condition|(
name|tempMap
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Collection
argument_list|<
name|StorageEntryWrapper
argument_list|>
name|col
init|=
name|tempMap
operator|.
name|values
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|StorageEntryWrapper
argument_list|>
name|returnList
init|=
operator|new
name|ArrayList
argument_list|<
name|StorageEntryWrapper
argument_list|>
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|returnList
argument_list|)
expr_stmt|;
return|return
name|returnList
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Adds a deleted entry to the buffer.      *       * @param entryId -      *            the deleted entry id      * @param feedId -      *            the feed of the entry      */
DECL|method|addDeleted
specifier|public
name|void
name|addDeleted
parameter_list|(
specifier|final
name|String
name|entryId
parameter_list|,
specifier|final
name|String
name|feedId
parameter_list|)
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|StorageEntryWrapper
argument_list|>
name|tempMap
init|=
name|this
operator|.
name|bufferMap
operator|.
name|get
argument_list|(
name|feedId
argument_list|)
decl_stmt|;
if|if
condition|(
name|tempMap
operator|!=
literal|null
condition|)
block|{
name|tempMap
operator|.
name|remove
argument_list|(
name|entryId
argument_list|)
expr_stmt|;
name|this
operator|.
name|addLastModified
argument_list|(
name|feedId
argument_list|,
operator|new
name|Long
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*              * add to exclude from searches              */
if|if
condition|(
operator|!
name|this
operator|.
name|excludeList
operator|.
name|contains
argument_list|(
name|entryId
argument_list|)
condition|)
name|this
operator|.
name|excludeList
operator|.
name|add
argument_list|(
name|entryId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Returns an entry for the given entry id in the feed context spezified by      * the feed id;      *       * @param entryId -      *            the id of the entry to return      * @param feedId -      *            the feed containing the entry      * @return - the entry or<code>null</code> if the corresponding entry is      *         not in the buffer.      */
DECL|method|getEntry
specifier|public
name|StorageEntryWrapper
name|getEntry
parameter_list|(
specifier|final
name|String
name|entryId
parameter_list|,
specifier|final
name|String
name|feedId
parameter_list|)
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|bufferMap
operator|.
name|containsKey
argument_list|(
name|feedId
argument_list|)
condition|)
return|return
name|this
operator|.
name|bufferMap
operator|.
name|get
argument_list|(
name|feedId
argument_list|)
operator|.
name|get
argument_list|(
name|entryId
argument_list|)
return|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * The buffer contains updated and delete entries. These entries are already      * available in the lucene index but should not be found during search.      *       *<p>      * This list contains all entries should not be found by the index searcher.      * This method creates a copy of the current list to prevent concurrent      * modification exceptions while iteration over the collection.      *</p>      *       *       * @see ModifiedEntryFilter      * @return - a String array of entries to be omitted from a lucene index      *         search      */
DECL|method|getExculdList
specifier|public
name|String
index|[]
name|getExculdList
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|excludeList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|this
operator|.
name|excludeList
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|// not synchronized --> see close()
DECL|method|clearBuffer
specifier|private
name|void
name|clearBuffer
parameter_list|()
block|{
name|this
operator|.
name|bufferMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|excludeList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|modifiyMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * clears the buffer -      */
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|clearBuffer
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|BufferableEntry
specifier|static
class|class
name|BufferableEntry
extends|extends
name|BaseEntry
block|{
comment|/**          *           */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|BufferableEntry
specifier|public
name|BufferableEntry
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|links
operator|=
operator|new
name|LinkedList
argument_list|<
name|Link
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**          * @param arg0          */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|BufferableEntry
specifier|public
name|BufferableEntry
parameter_list|(
name|BaseEntry
name|arg0
parameter_list|)
block|{
name|super
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|links
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LinkedList
name|list
init|=
operator|new
name|LinkedList
argument_list|<
name|Link
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|links
argument_list|)
expr_stmt|;
name|this
operator|.
name|links
operator|=
name|list
expr_stmt|;
block|}
else|else
name|this
operator|.
name|links
operator|=
operator|new
name|LinkedList
argument_list|<
name|Link
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**          * @see com.google.gdata.data.BaseEntry#declareExtensions(com.google.gdata.data.ExtensionProfile)          */
annotation|@
name|Override
DECL|method|declareExtensions
specifier|public
name|void
name|declareExtensions
parameter_list|(
name|ExtensionProfile
name|arg0
parameter_list|)
block|{
comment|//
block|}
block|}
comment|/**      * @return Returns the bufferSize.      */
DECL|method|getBufferSize
specifier|public
name|int
name|getBufferSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|bufferSize
return|;
block|}
block|}
end_class
end_unit
