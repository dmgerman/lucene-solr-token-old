begin_unit
begin_comment
comment|/**   * Copyright 2004 The Apache Software Foundation   *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   *     http://www.apache.org/licenses/LICENSE-2.0   *   * Unless required by applicable law or agreed to in writing, software   * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.server
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|DataBuilderException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|FeedInstanceConfigurator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|GDataServerRegistry
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|BaseEntry
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|BaseFeed
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|ExtensionProfile
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|util
operator|.
name|ParseException
import|;
end_import
begin_comment
comment|/**   * {@link com.google.gdata.data.BaseFeed},   * {@link com.google.gdata.data.BaseEntry} instances have to be build from a   * {@link java.io.Reader} instance as they come in from a client request or out   * of a storage.   *<p>   * To provide a generic builder class the {@link GDataEntityBuilder} requests   * the type of the feed / entry and the corresponding   * {@link com.google.gdata.data.ExtensionProfile} form the global   * {@link org.apache.lucene.gdata.server.registry.GDataServerRegistry} and builds the   * instances from the provided reader.   *</p>   *    * @author Simon Willnauer   *    */
end_comment
begin_class
DECL|class|GDataEntityBuilder
specifier|public
class|class
name|GDataEntityBuilder
block|{
DECL|field|REGISTRY
specifier|private
specifier|static
specifier|final
name|GDataServerRegistry
name|REGISTRY
init|=
name|GDataServerRegistry
operator|.
name|getRegistry
argument_list|()
decl_stmt|;
comment|// TODO find another way for getting the registered feeds
comment|/**       * Builds a {@link BaseFeed} instance from the {@link Reader} provided by       * the {@link GDataRequest}       *        * @param request -       *            the request to build the instance from       * @return - a BaseFeed instance       * @throws FeedNotFoundException -       *             if the feed is not registered       * @throws IOException -       *             if an I/O Exception occures on the provided reader       * @throws ParseException -       *             if the feed could not be parsed       */
DECL|method|buildFeed
specifier|public
specifier|static
name|BaseFeed
name|buildFeed
parameter_list|(
specifier|final
name|GDataRequest
name|request
parameter_list|)
throws|throws
name|FeedNotFoundException
throws|,
name|IOException
throws|,
name|ParseException
block|{
if|if
condition|(
name|request
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"request must not be null"
argument_list|)
throw|;
return|return
name|buildFeed
argument_list|(
name|request
operator|.
name|getFeedId
argument_list|()
argument_list|,
name|request
operator|.
name|getReader
argument_list|()
argument_list|,
name|request
operator|.
name|getExtensionProfile
argument_list|()
argument_list|)
return|;
block|}
comment|/**       * Builds a {@link BaseFeed} from the provided {@link Reader}       *        * @param feedId -       *            the feed ID to request the feed type from the registry       * @param reader -       *            the reader to build the feed from       * @param profile - extension profile to parse the resource       * @return - a BaseFeed instance       * @throws FeedNotFoundException -       *             if the feed is not registered       * @throws IOException -       *             if an I/O Exception occures on the provided reader       * @throws ParseException -       *             if the feed could not be parsed       */
DECL|method|buildFeed
specifier|public
specifier|static
name|BaseFeed
name|buildFeed
parameter_list|(
specifier|final
name|String
name|feedId
parameter_list|,
specifier|final
name|Reader
name|reader
parameter_list|,
specifier|final
name|ExtensionProfile
name|profile
parameter_list|)
throws|throws
name|FeedNotFoundException
throws|,
name|ParseException
throws|,
name|IOException
block|{
name|BaseFeed
name|retVal
init|=
literal|null
decl_stmt|;
try|try
block|{
name|retVal
operator|=
operator|(
name|BaseFeed
operator|)
name|createEntityInstance
argument_list|(
name|feedId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FeedNotFoundException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|DataBuilderException
name|ex
init|=
operator|new
name|DataBuilderException
argument_list|(
literal|"Could not build Feed for Feed class "
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
name|retVal
operator|.
name|parseAtom
argument_list|(
name|profile
argument_list|,
name|reader
argument_list|)
expr_stmt|;
return|return
name|retVal
return|;
block|}
comment|/**       * Builds a {@link BaseEntry} instance from the {@link Reader} provided by       * the {@link GDataRequest}       *        * @param request -       *            the request to build the instance from       * @return - a BaseEntry instance       * @throws FeedNotFoundException -       *             if the feed, requested by the client is not registered       * @throws IOException -       *             if an I/O Exception occures on the provided reader       * @throws ParseException -       *             if the entry could not be parsed       */
DECL|method|buildEntry
specifier|public
specifier|static
name|BaseEntry
name|buildEntry
parameter_list|(
specifier|final
name|GDataRequest
name|request
parameter_list|)
throws|throws
name|FeedNotFoundException
throws|,
name|IOException
throws|,
name|ParseException
block|{
if|if
condition|(
name|request
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"request must not be null"
argument_list|)
throw|;
return|return
name|buildEntry
argument_list|(
name|request
operator|.
name|getFeedId
argument_list|()
argument_list|,
name|request
operator|.
name|getReader
argument_list|()
argument_list|,
name|request
operator|.
name|getExtensionProfile
argument_list|()
argument_list|)
return|;
block|}
comment|/**       * Builds a {@link BaseFeed} instance from the {@link Reader} provided by       * the {@link GDataRequest}       * @param feedId -       *            the feed ID to request the feed type from the registry       * @param reader -       *            the reader to build the feed from        * @param profile - extension profile to parse the resource       * @return - a BaseFeed instance       * @throws FeedNotFoundException -       *             if the feed is not registered       * @throws IOException -       *             if an I/O Exception occures on the provided reader       * @throws ParseException -       *             if the entry could not be parsed       */
DECL|method|buildEntry
specifier|public
specifier|static
name|BaseEntry
name|buildEntry
parameter_list|(
specifier|final
name|String
name|feedId
parameter_list|,
specifier|final
name|Reader
name|reader
parameter_list|,
specifier|final
name|ExtensionProfile
name|profile
parameter_list|)
throws|throws
name|FeedNotFoundException
throws|,
name|ParseException
throws|,
name|IOException
block|{
name|BaseEntry
name|retVal
init|=
literal|null
decl_stmt|;
try|try
block|{
name|retVal
operator|=
operator|(
operator|(
name|BaseFeed
operator|)
name|createEntityInstance
argument_list|(
name|feedId
argument_list|)
operator|)
operator|.
name|createEntry
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FeedNotFoundException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|DataBuilderException
name|ex
init|=
operator|new
name|DataBuilderException
argument_list|(
literal|"Could not build Entry for Entry class "
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
name|retVal
operator|.
name|parseAtom
argument_list|(
operator|new
name|ExtensionProfile
argument_list|()
argument_list|,
name|reader
argument_list|)
expr_stmt|;
return|return
name|retVal
return|;
block|}
DECL|method|createEntityInstance
specifier|private
specifier|static
name|Object
name|createEntityInstance
parameter_list|(
name|String
name|feedId
parameter_list|)
throws|throws
name|FeedNotFoundException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
block|{
name|FeedInstanceConfigurator
name|config
init|=
name|REGISTRY
operator|.
name|getFeedConfigurator
argument_list|(
name|feedId
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|==
literal|null
condition|)
throw|throw
operator|new
name|FeedNotFoundException
argument_list|(
literal|"No feed for requested feed ID found - "
operator|+
name|feedId
argument_list|)
throw|;
name|Class
name|feedClass
init|=
name|config
operator|.
name|getFeedType
argument_list|()
decl_stmt|;
return|return
name|feedClass
operator|.
name|newInstance
argument_list|()
return|;
block|}
block|}
end_class
end_unit
