begin_unit
begin_comment
comment|/**   * Copyright 2004 The Apache Software Foundation   *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   *     http://www.apache.org/licenses/LICENSE-2.0   *   * Unless required by applicable law or agreed to in writing, software   * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.server
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|ProvidedService
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|BaseEntry
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|BaseFeed
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|util
operator|.
name|ParseException
import|;
end_import
begin_comment
comment|/**  * {@link com.google.gdata.data.BaseFeed},  * {@link com.google.gdata.data.BaseEntry} instances have to be build from a  * {@link java.io.Reader} instance as they come in from a client request or out  * of a storage.  *<p>  * To provide a generic builder class the {@link GDataEntityBuilder} requests  * the type of the feed / entry and the corresponding  * {@link com.google.gdata.data.ExtensionProfile} form the global  * {@link org.apache.lucene.gdata.server.registry.GDataServerRegistry} and  * builds the instances from the provided reader.  *</p>  *<p>  * This build will not returne the abstract base classes.  *</p>  *   * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|GDataEntityBuilder
specifier|public
class|class
name|GDataEntityBuilder
block|{
comment|/**      * Builds a {@link BaseFeed} instance from the {@link Reader} provided by      * the {@link GDataRequest}      *       * @param request -      *            the request to build the instance from      * @return - a BaseFeed instance      *       * @throws IOException -      *             if an I/O Exception occures on the provided reader      * @throws ParseException -      *             if the feed could not be parsed      */
DECL|method|buildFeed
specifier|public
specifier|static
name|BaseFeed
name|buildFeed
parameter_list|(
specifier|final
name|GDataRequest
name|request
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
block|{
if|if
condition|(
name|request
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"request must not be null"
argument_list|)
throw|;
name|ProvidedService
name|config
init|=
name|request
operator|.
name|getConfigurator
argument_list|()
decl_stmt|;
return|return
name|buildFeed
argument_list|(
name|request
operator|.
name|getReader
argument_list|()
argument_list|,
name|config
argument_list|)
return|;
block|}
comment|/**      * Builds a {@link BaseFeed} from the provided {@link Reader}      *       *       * @param reader -      *            the reader to build the feed from      * @param config -      *            the feed instance config containing the extension profile to      *            parse the resource      * @return - a BaseFeed instance      *       * @throws IOException -      *             if an I/O Exception occures on the provided reader      * @throws ParseException -      *             if the feed could not be parsed      */
DECL|method|buildFeed
specifier|public
specifier|static
name|BaseFeed
name|buildFeed
parameter_list|(
specifier|final
name|Reader
name|reader
parameter_list|,
specifier|final
name|ProvidedService
name|config
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|BaseFeed
name|retVal
init|=
literal|null
decl_stmt|;
name|retVal
operator|=
name|createEntityInstance
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|retVal
operator|.
name|parseAtom
argument_list|(
name|config
operator|.
name|getExtensionProfile
argument_list|()
argument_list|,
name|reader
argument_list|)
expr_stmt|;
return|return
name|retVal
return|;
block|}
comment|/**      * Builds a {@link BaseEntry} instance from the {@link Reader} provided by      * the {@link GDataRequest}      *       * @param request -      *            the request to build the instance from      * @return - a BaseEntry instance      *       * @throws IOException -      *             if an I/O Exception occures on the provided reader      * @throws ParseException -      *             if the entry could not be parsed      */
DECL|method|buildEntry
specifier|public
specifier|static
name|BaseEntry
name|buildEntry
parameter_list|(
specifier|final
name|GDataRequest
name|request
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
block|{
if|if
condition|(
name|request
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"request must not be null"
argument_list|)
throw|;
name|ProvidedService
name|config
init|=
name|request
operator|.
name|getConfigurator
argument_list|()
decl_stmt|;
return|return
name|buildEntry
argument_list|(
name|request
operator|.
name|getReader
argument_list|()
argument_list|,
name|config
argument_list|)
return|;
block|}
comment|/**      * Builds a {@link BaseFeed} instance from the {@link Reader} provided by      * the {@link GDataRequest}      *       * @param reader -      *            the reader to build the feed from      * @param config -      *            the instance config containing the extension profile to parse      *            the resource      * @return - a BaseFeed instance      *       * @throws IOException -      *             if an I/O Exception occures on the provided reader      * @throws ParseException -      *             if the entry could not be parsed      */
DECL|method|buildEntry
specifier|public
specifier|static
name|BaseEntry
name|buildEntry
parameter_list|(
specifier|final
name|Reader
name|reader
parameter_list|,
specifier|final
name|ProvidedService
name|config
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|BaseEntry
name|e
init|=
name|createEntityInstance
argument_list|(
name|config
argument_list|)
operator|.
name|createEntry
argument_list|()
decl_stmt|;
name|e
operator|.
name|parseAtom
argument_list|(
name|config
operator|.
name|getExtensionProfile
argument_list|()
argument_list|,
name|reader
argument_list|)
expr_stmt|;
return|return
name|e
return|;
block|}
DECL|method|createEntityInstance
specifier|private
specifier|static
name|BaseFeed
name|createEntityInstance
parameter_list|(
specifier|final
name|ProvidedService
name|config
parameter_list|)
block|{
if|if
condition|(
name|config
operator|.
name|getFeedType
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"feedtype is null in ProvidedService"
argument_list|)
throw|;
name|BaseFeed
name|retVal
init|=
literal|null
decl_stmt|;
try|try
block|{
name|retVal
operator|=
operator|(
name|BaseFeed
operator|)
name|config
operator|.
name|getFeedType
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EntityBuilderException
argument_list|(
literal|"Can't instanciate Feed for feedType "
operator|+
name|config
operator|.
name|getFeedType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|retVal
return|;
block|}
DECL|class|EntityBuilderException
specifier|static
class|class
name|EntityBuilderException
extends|extends
name|RuntimeException
block|{
comment|/**          *           */
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|7224011324202237951L
decl_stmt|;
DECL|method|EntityBuilderException
name|EntityBuilderException
parameter_list|(
name|String
name|arg0
parameter_list|)
block|{
name|super
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
DECL|method|EntityBuilderException
name|EntityBuilderException
parameter_list|(
name|String
name|arg0
parameter_list|,
name|Throwable
name|arg1
parameter_list|)
block|{
name|super
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
