begin_unit
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.storage.lucenestorage
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|data
operator|.
name|GDataAccount
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|data
operator|.
name|ServerBaseEntry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|data
operator|.
name|ServerBaseFeed
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|ComponentType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
operator|.
name|GDataServerRegistry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|ResourceNotFoundException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|Storage
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|StorageController
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|StorageException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
operator|.
name|StorageEntryWrapper
operator|.
name|StorageOperation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|storage
operator|.
name|lucenestorage
operator|.
name|util
operator|.
name|ReferenceCounter
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|BaseEntry
import|;
end_import
begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|data
operator|.
name|BaseFeed
import|;
end_import
begin_comment
comment|/**  * This is an implementation of the  * {@link org.apache.lucene.gdata.storage.Storage} interface. The  * StorageImplementation provides access to the  * {@link org.apache.lucene.gdata.storage.lucenestorage.StorageQuery} and the  * {@link org.apache.lucene.gdata.storage.lucenestorage.StorageModifier}. This  * class will be instanciated per client request.  *   *   *   * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|StorageImplementation
specifier|public
class|class
name|StorageImplementation
implements|implements
name|Storage
block|{
DECL|field|controller
specifier|private
specifier|final
name|StorageCoreController
name|controller
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StorageImplementation
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Creates a new StorageImplementation      *       * @throws StorageException -      *             if the storage controller can not be obtained      *       *       *       */
DECL|method|StorageImplementation
specifier|public
name|StorageImplementation
parameter_list|()
throws|throws
name|StorageException
block|{
name|this
operator|.
name|controller
operator|=
operator|(
name|StorageCoreController
operator|)
name|GDataServerRegistry
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookup
argument_list|(
name|StorageController
operator|.
name|class
argument_list|,
name|ComponentType
operator|.
name|STORAGECONTROLLER
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|controller
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can't get registered StorageController"
argument_list|)
throw|;
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#storeEntry(org.apache.lucene.gdata.data.ServerBaseEntry)      */
DECL|method|storeEntry
specifier|public
name|BaseEntry
name|storeEntry
parameter_list|(
specifier|final
name|ServerBaseEntry
name|entry
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"entry is null"
argument_list|)
throw|;
name|StorageModifier
name|modifier
init|=
name|this
operator|.
name|controller
operator|.
name|getStorageModifier
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|this
operator|.
name|controller
operator|.
name|releaseID
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setId
argument_list|(
name|entry
operator|.
name|getFeedId
argument_list|()
operator|+
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"Store entry "
operator|+
name|id
operator|+
literal|" -- feed: "
operator|+
name|entry
operator|.
name|getFeedId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|StorageEntryWrapper
name|wrapper
init|=
operator|new
name|StorageEntryWrapper
argument_list|(
name|entry
argument_list|,
name|StorageOperation
operator|.
name|INSERT
argument_list|)
decl_stmt|;
name|modifier
operator|.
name|insertEntry
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|StorageException
name|ex
init|=
operator|new
name|StorageException
argument_list|(
literal|"Can't create Entry -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
return|return
name|entry
operator|.
name|getEntry
argument_list|()
return|;
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#deleteEntry(org.apache.lucene.gdata.data.ServerBaseEntry)      */
DECL|method|deleteEntry
specifier|public
name|void
name|deleteEntry
parameter_list|(
specifier|final
name|ServerBaseEntry
name|entry
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Entry is null"
argument_list|)
throw|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"delete entry "
operator|+
name|entry
operator|.
name|getId
argument_list|()
operator|+
literal|" -- feed: "
operator|+
name|entry
operator|.
name|getFeedId
argument_list|()
argument_list|)
expr_stmt|;
name|StorageModifier
name|modifier
init|=
name|this
operator|.
name|controller
operator|.
name|getStorageModifier
argument_list|()
decl_stmt|;
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|query
init|=
name|this
operator|.
name|controller
operator|.
name|getStorageQuery
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|query
operator|.
name|get
argument_list|()
operator|.
name|isEntryStored
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|,
name|entry
operator|.
name|getFeedId
argument_list|()
argument_list|)
condition|)
block|{
name|modifier
operator|.
name|deleteEntry
argument_list|(
operator|new
name|StorageEntryWrapper
argument_list|(
name|entry
argument_list|,
name|StorageOperation
operator|.
name|DELETE
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|(
literal|"Entry for entry id: "
operator|+
name|entry
operator|.
name|getId
argument_list|()
operator|+
literal|" is not stored"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not access storage"
argument_list|)
throw|;
block|}
finally|finally
block|{
name|query
operator|.
name|decrementRef
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#updateEntry(org.apache.lucene.gdata.data.ServerBaseEntry)      */
DECL|method|updateEntry
specifier|public
name|BaseEntry
name|updateEntry
parameter_list|(
name|ServerBaseEntry
name|entry
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"entry is null"
argument_list|)
throw|;
if|if
condition|(
name|entry
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"entry id is null"
argument_list|)
throw|;
if|if
condition|(
name|entry
operator|.
name|getFeedId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"feed id is null"
argument_list|)
throw|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"update entry "
operator|+
name|entry
operator|.
name|getId
argument_list|()
operator|+
literal|" -- feed: "
operator|+
name|entry
operator|.
name|getFeedId
argument_list|()
argument_list|)
expr_stmt|;
name|StorageModifier
name|modifier
init|=
name|this
operator|.
name|controller
operator|.
name|getStorageModifier
argument_list|()
decl_stmt|;
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|query
init|=
name|this
operator|.
name|controller
operator|.
name|getStorageQuery
argument_list|()
decl_stmt|;
try|try
block|{
name|StorageEntryWrapper
name|wrapper
init|=
operator|new
name|StorageEntryWrapper
argument_list|(
name|entry
argument_list|,
name|StorageOperation
operator|.
name|UPDATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|get
argument_list|()
operator|.
name|isEntryStored
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|,
name|entry
operator|.
name|getFeedId
argument_list|()
argument_list|)
condition|)
name|modifier
operator|.
name|updateEntry
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
else|else
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|(
literal|"Entry for entry id: "
operator|+
name|entry
operator|.
name|getId
argument_list|()
operator|+
literal|" is not stored"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't update entry for feedID: "
operator|+
name|entry
operator|.
name|getFeedId
argument_list|()
operator|+
literal|"; entryId: "
operator|+
name|entry
operator|.
name|getId
argument_list|()
operator|+
literal|" -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|StorageException
name|ex
init|=
operator|new
name|StorageException
argument_list|(
literal|"Can't create Entry -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
return|return
name|entry
operator|.
name|getEntry
argument_list|()
return|;
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#getFeed(org.apache.lucene.gdata.data.ServerBaseFeed)      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getFeed
specifier|public
name|BaseFeed
name|getFeed
parameter_list|(
specifier|final
name|ServerBaseFeed
name|feed
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|feed
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"feed is null"
argument_list|)
throw|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"get feed: "
operator|+
name|feed
operator|.
name|getId
argument_list|()
operator|+
literal|" startindex: "
operator|+
name|feed
operator|.
name|getStartIndex
argument_list|()
operator|+
literal|" resultCount: "
operator|+
name|feed
operator|.
name|getItemsPerPage
argument_list|()
argument_list|)
expr_stmt|;
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|query
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorageQuery
argument_list|()
expr_stmt|;
name|BaseFeed
name|retVal
init|=
name|query
operator|.
name|get
argument_list|()
operator|.
name|getLatestFeedQuery
argument_list|(
name|feed
operator|.
name|getId
argument_list|()
argument_list|,
name|feed
operator|.
name|getItemsPerPage
argument_list|()
argument_list|,
name|feed
operator|.
name|getStartIndex
argument_list|()
argument_list|,
name|feed
operator|.
name|getServiceConfig
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|retVal
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't get latest feed for feedID: "
operator|+
name|feed
operator|.
name|getId
argument_list|()
operator|+
literal|" -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|StorageException
name|ex
init|=
operator|new
name|StorageException
argument_list|(
literal|"Can't create Entry -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
name|query
operator|.
name|decrementRef
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#getEntry(org.apache.lucene.gdata.data.ServerBaseEntry)      */
DECL|method|getEntry
specifier|public
name|BaseEntry
name|getEntry
parameter_list|(
specifier|final
name|ServerBaseEntry
name|entry
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"No entry  specified -- is null"
argument_list|)
throw|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"get entry "
operator|+
name|entry
operator|.
name|getId
argument_list|()
operator|+
literal|" -- feed: "
operator|+
name|entry
operator|.
name|getFeedId
argument_list|()
argument_list|)
expr_stmt|;
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|query
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorageQuery
argument_list|()
expr_stmt|;
name|BaseEntry
name|retVal
init|=
name|query
operator|.
name|get
argument_list|()
operator|.
name|singleEntryQuery
argument_list|(
name|entry
operator|.
name|getId
argument_list|()
argument_list|,
name|entry
operator|.
name|getFeedId
argument_list|()
argument_list|,
name|entry
operator|.
name|getServiceConfig
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|retVal
operator|==
literal|null
condition|)
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|(
literal|"can not get entry for entry ID "
operator|+
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
return|return
name|retVal
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't get entry for feedID: "
operator|+
name|entry
operator|.
name|getFeedId
argument_list|()
operator|+
literal|"; entryId: "
operator|+
name|entry
operator|.
name|getId
argument_list|()
operator|+
literal|" -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|StorageException
name|ex
init|=
operator|new
name|StorageException
argument_list|(
literal|"Can't create Entry -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
name|query
operator|.
name|decrementRef
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#close()      */
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|//
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#storeAccount(org.apache.lucene.gdata.data.GDataAccount)      */
DECL|method|storeAccount
specifier|public
name|void
name|storeAccount
parameter_list|(
name|GDataAccount
name|Account
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|Account
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not save null Account"
argument_list|)
throw|;
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|query
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorageQuery
argument_list|()
expr_stmt|;
if|if
condition|(
name|query
operator|.
name|get
argument_list|()
operator|.
name|getUser
argument_list|(
name|Account
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Account already exists"
argument_list|)
throw|;
name|StorageModifier
name|modifier
init|=
name|this
operator|.
name|controller
operator|.
name|getStorageModifier
argument_list|()
decl_stmt|;
name|StorageAccountWrapper
name|wrapper
init|=
operator|new
name|StorageAccountWrapper
argument_list|(
name|Account
argument_list|)
decl_stmt|;
name|modifier
operator|.
name|createAccount
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't save Account -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|StorageException
name|ex
init|=
operator|new
name|StorageException
argument_list|(
literal|"Can't save Account -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
name|query
operator|.
name|decrementRef
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#updateAccount(org.apache.lucene.gdata.data.GDataAccount)      */
DECL|method|updateAccount
specifier|public
name|void
name|updateAccount
parameter_list|(
name|GDataAccount
name|Account
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|Account
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not update null Account"
argument_list|)
throw|;
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|query
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorageQuery
argument_list|()
expr_stmt|;
if|if
condition|(
name|query
operator|.
name|get
argument_list|()
operator|.
name|getUser
argument_list|(
name|Account
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Account does not exist"
argument_list|)
throw|;
name|StorageModifier
name|modifier
init|=
name|this
operator|.
name|controller
operator|.
name|getStorageModifier
argument_list|()
decl_stmt|;
name|StorageAccountWrapper
name|wrapper
init|=
operator|new
name|StorageAccountWrapper
argument_list|(
name|Account
argument_list|)
decl_stmt|;
name|modifier
operator|.
name|updateAccount
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't update Account -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|StorageException
name|ex
init|=
operator|new
name|StorageException
argument_list|(
literal|"Can't update Account -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
name|query
operator|.
name|decrementRef
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#deleteAccount(java.lang.String)      */
DECL|method|deleteAccount
specifier|public
name|void
name|deleteAccount
parameter_list|(
name|String
name|Accountname
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|Accountname
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"can not delete null Account"
argument_list|)
throw|;
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|query
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorageQuery
argument_list|()
expr_stmt|;
if|if
condition|(
name|query
operator|.
name|get
argument_list|()
operator|.
name|getUser
argument_list|(
name|Accountname
argument_list|)
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Account does not exist"
argument_list|)
throw|;
name|StorageModifier
name|modifier
init|=
name|this
operator|.
name|controller
operator|.
name|getStorageModifier
argument_list|()
decl_stmt|;
name|modifier
operator|.
name|deleteAccount
argument_list|(
name|Accountname
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't update Account -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|StorageException
name|ex
init|=
operator|new
name|StorageException
argument_list|(
literal|"Can't update Account -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
name|query
operator|.
name|decrementRef
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#storeFeed(org.apache.lucene.gdata.data.ServerBaseFeed,      *      java.lang.String)      */
DECL|method|storeFeed
specifier|public
name|void
name|storeFeed
parameter_list|(
name|ServerBaseFeed
name|feed
parameter_list|,
name|String
name|accountName
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|feed
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"can not insert null feed"
argument_list|)
throw|;
if|if
condition|(
name|accountName
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"accountName must not be null"
argument_list|)
throw|;
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|query
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorageQuery
argument_list|()
expr_stmt|;
if|if
condition|(
name|query
operator|.
name|get
argument_list|()
operator|.
name|isFeedStored
argument_list|(
name|feed
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"feed with feedID "
operator|+
name|feed
operator|.
name|getId
argument_list|()
operator|+
literal|" is already stored"
argument_list|)
throw|;
name|StorageModifier
name|modifier
init|=
name|this
operator|.
name|controller
operator|.
name|getStorageModifier
argument_list|()
decl_stmt|;
name|StorageFeedWrapper
name|wrapper
init|=
operator|new
name|StorageFeedWrapper
argument_list|(
name|feed
argument_list|,
name|accountName
argument_list|)
decl_stmt|;
name|modifier
operator|.
name|createFeed
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't create feed -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|StorageException
name|ex
init|=
operator|new
name|StorageException
argument_list|(
literal|"Can't create feed -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
name|query
operator|.
name|decrementRef
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#deleteFeed(java.lang.String)      */
DECL|method|deleteFeed
specifier|public
name|void
name|deleteFeed
parameter_list|(
name|String
name|feedId
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|feedId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"can not delete feed id is null "
argument_list|)
throw|;
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|query
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorageQuery
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|query
operator|.
name|get
argument_list|()
operator|.
name|isFeedStored
argument_list|(
name|feedId
argument_list|)
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Account does not exist"
argument_list|)
throw|;
name|StorageModifier
name|modifier
init|=
name|this
operator|.
name|controller
operator|.
name|getStorageModifier
argument_list|()
decl_stmt|;
name|modifier
operator|.
name|deleteFeed
argument_list|(
name|feedId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't delete feed -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|StorageException
name|ex
init|=
operator|new
name|StorageException
argument_list|(
literal|"Can't create feed -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|query
operator|==
literal|null
condition|)
name|query
operator|.
name|decrementRef
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#updateFeed(org.apache.lucene.gdata.data.ServerBaseFeed,      *      java.lang.String)      */
DECL|method|updateFeed
specifier|public
name|void
name|updateFeed
parameter_list|(
name|ServerBaseFeed
name|feed
parameter_list|,
name|String
name|accountName
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|feed
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"can not update null feed"
argument_list|)
throw|;
if|if
condition|(
name|accountName
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"accountName must not be null"
argument_list|)
throw|;
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|query
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorageQuery
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|query
operator|.
name|get
argument_list|()
operator|.
name|isFeedStored
argument_list|(
name|feed
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Account does not exist"
argument_list|)
throw|;
name|StorageModifier
name|modifier
init|=
name|this
operator|.
name|controller
operator|.
name|getStorageModifier
argument_list|()
decl_stmt|;
name|StorageFeedWrapper
name|wrapper
init|=
operator|new
name|StorageFeedWrapper
argument_list|(
name|feed
argument_list|,
name|accountName
argument_list|)
decl_stmt|;
name|modifier
operator|.
name|updateFeed
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't create feed -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|StorageException
name|ex
init|=
operator|new
name|StorageException
argument_list|(
literal|"Can't create feed -- "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|query
operator|==
literal|null
condition|)
name|query
operator|.
name|decrementRef
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#getServiceForFeed(java.lang.String)      */
DECL|method|getServiceForFeed
specifier|public
name|String
name|getServiceForFeed
parameter_list|(
name|String
name|feedId
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|feedId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"no feed for the feedID == null"
argument_list|)
throw|;
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|query
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorageQuery
argument_list|()
expr_stmt|;
name|String
name|type
init|=
name|query
operator|.
name|get
argument_list|()
operator|.
name|getService
argument_list|(
name|feedId
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"no feed for the feedID == "
operator|+
name|feedId
operator|+
literal|" found"
argument_list|)
throw|;
return|return
name|type
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not access storage"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
name|query
operator|.
name|decrementRef
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#getAccount(java.lang.String)      */
DECL|method|getAccount
specifier|public
name|GDataAccount
name|getAccount
parameter_list|(
name|String
name|accountName
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|accountName
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"account name must not be null"
argument_list|)
throw|;
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|query
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorageQuery
argument_list|()
expr_stmt|;
return|return
name|query
operator|.
name|get
argument_list|()
operator|.
name|getUser
argument_list|(
name|accountName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not access storage"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
name|query
operator|.
name|decrementRef
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#getAccountNameForFeedId(java.lang.String)      */
DECL|method|getAccountNameForFeedId
specifier|public
name|String
name|getAccountNameForFeedId
parameter_list|(
name|String
name|feedId
parameter_list|)
throws|throws
name|StorageException
block|{
if|if
condition|(
name|feedId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"feedid must not be null"
argument_list|)
throw|;
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|query
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorageQuery
argument_list|()
expr_stmt|;
name|String
name|accountName
init|=
name|query
operator|.
name|get
argument_list|()
operator|.
name|getAccountNameForFeedId
argument_list|(
name|feedId
argument_list|)
decl_stmt|;
if|if
condition|(
name|accountName
operator|==
literal|null
condition|)
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"no feed for feedId "
operator|+
name|feedId
operator|+
literal|" found"
argument_list|)
throw|;
return|return
name|accountName
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not access storage - "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
name|query
operator|.
name|decrementRef
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#getEntryLastModified(java.lang.String, java.lang.String)      */
DECL|method|getEntryLastModified
specifier|public
name|Long
name|getEntryLastModified
parameter_list|(
name|String
name|entryId
parameter_list|,
name|String
name|feedId
parameter_list|)
throws|throws
name|StorageException
block|{
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|query
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorageQuery
argument_list|()
expr_stmt|;
return|return
operator|new
name|Long
argument_list|(
name|query
operator|.
name|get
argument_list|()
operator|.
name|getEntryLastModified
argument_list|(
name|entryId
argument_list|,
name|feedId
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not access storage - "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
name|query
operator|.
name|decrementRef
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @see org.apache.lucene.gdata.storage.Storage#getFeedLastModified(java.lang.String)      */
DECL|method|getFeedLastModified
specifier|public
name|Long
name|getFeedLastModified
parameter_list|(
name|String
name|feedId
parameter_list|)
throws|throws
name|StorageException
block|{
name|ReferenceCounter
argument_list|<
name|StorageQuery
argument_list|>
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|query
operator|=
name|this
operator|.
name|controller
operator|.
name|getStorageQuery
argument_list|()
expr_stmt|;
return|return
operator|new
name|Long
argument_list|(
name|query
operator|.
name|get
argument_list|()
operator|.
name|getFeedLastModified
argument_list|(
name|feedId
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|StorageException
argument_list|(
literal|"Can not access storage - "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
name|query
operator|.
name|decrementRef
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
