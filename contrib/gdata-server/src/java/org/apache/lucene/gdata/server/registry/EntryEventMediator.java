begin_unit
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.server.registry
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|server
operator|.
name|registry
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|data
operator|.
name|ServerBaseEntry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|data
operator|.
name|ServerBaseFeed
import|;
end_import
begin_comment
comment|/**  * This class will be informed about every successful entry event and  * distributes all event to all registered  * {@link org.apache.lucene.gdata.server.registry.EntryEventListener}  *   * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|EntryEventMediator
specifier|public
specifier|abstract
class|class
name|EntryEventMediator
block|{
DECL|field|entryEventListener
specifier|private
specifier|final
name|List
argument_list|<
name|EntryEventListener
argument_list|>
name|entryEventListener
init|=
operator|new
name|ArrayList
argument_list|<
name|EntryEventListener
argument_list|>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
comment|/**      * @return - a entry event mediator instance      */
DECL|method|getEntryEventMediator
specifier|public
specifier|abstract
name|EntryEventMediator
name|getEntryEventMediator
parameter_list|()
function_decl|;
comment|/**      * Registers a {@link EntryEventListener}. This listener will be fired if an      * entry update, insert or delete occurs      *       * @param listener -      *            listener to register      */
DECL|method|registerEntryEventListener
specifier|public
name|void
name|registerEntryEventListener
parameter_list|(
specifier|final
name|EntryEventListener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|==
literal|null
operator|||
name|this
operator|.
name|entryEventListener
operator|.
name|contains
argument_list|(
name|listener
argument_list|)
condition|)
return|return;
name|this
operator|.
name|entryEventListener
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param entry -      *            the updated entry      */
DECL|method|entryUpdated
specifier|public
name|void
name|entryUpdated
parameter_list|(
specifier|final
name|ServerBaseEntry
name|entry
parameter_list|)
block|{
for|for
control|(
name|EntryEventListener
name|listener
range|:
name|this
operator|.
name|entryEventListener
control|)
block|{
name|listener
operator|.
name|fireUpdateEvent
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param entry -      *            the added entry      */
DECL|method|entryAdded
specifier|public
name|void
name|entryAdded
parameter_list|(
specifier|final
name|ServerBaseEntry
name|entry
parameter_list|)
block|{
for|for
control|(
name|EntryEventListener
name|listener
range|:
name|this
operator|.
name|entryEventListener
control|)
block|{
name|listener
operator|.
name|fireInsertEvent
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param feed - the feed to delete all entries for      */
DECL|method|allEntriesDeleted
specifier|public
name|void
name|allEntriesDeleted
parameter_list|(
specifier|final
name|ServerBaseFeed
name|feed
parameter_list|)
block|{
for|for
control|(
name|EntryEventListener
name|listener
range|:
name|this
operator|.
name|entryEventListener
control|)
block|{
name|listener
operator|.
name|fireDeleteAllEntries
argument_list|(
name|feed
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param entry -      *            the deleted entry      */
DECL|method|entryDeleted
specifier|public
name|void
name|entryDeleted
parameter_list|(
specifier|final
name|ServerBaseEntry
name|entry
parameter_list|)
block|{
for|for
control|(
name|EntryEventListener
name|listener
range|:
name|this
operator|.
name|entryEventListener
control|)
block|{
name|listener
operator|.
name|fireDeleteEvent
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * checks if the listener is already registered.      * @param listner - the listener to check      * @return<code>true</code> if and only if the given listener is already registered, otherwise<code>false</code>.      */
DECL|method|isListenerRegistered
specifier|public
name|boolean
name|isListenerRegistered
parameter_list|(
specifier|final
name|EntryEventListener
name|listner
parameter_list|)
block|{
return|return
name|listner
operator|!=
literal|null
operator|&&
name|this
operator|.
name|entryEventListener
operator|.
name|contains
argument_list|(
name|listner
argument_list|)
return|;
block|}
block|}
end_class
end_unit
