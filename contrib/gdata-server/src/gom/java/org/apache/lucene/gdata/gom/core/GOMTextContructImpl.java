begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.gom.core
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLOutputFactory
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|ContentType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMTextConstruct
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
operator|.
name|utils
operator|.
name|GOMUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|writer
operator|.
name|GOMOutputWriter
import|;
end_import
begin_comment
comment|/**  * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|GOMTextContructImpl
specifier|public
specifier|abstract
class|class
name|GOMTextContructImpl
extends|extends
name|AbstractGOMElement
implements|implements
name|GOMTextConstruct
block|{
DECL|field|contentType
specifier|protected
name|ContentType
name|contentType
decl_stmt|;
DECL|field|rssLocalName
specifier|protected
name|String
name|rssLocalName
decl_stmt|;
comment|/* 	 * parses the xhtml content 	 */
DECL|field|blobParser
specifier|protected
specifier|transient
name|XMLBlobContentParser
name|blobParser
init|=
literal|null
decl_stmt|;
comment|/* 	 * this string builder contains the html while parsing the incoming text 	 * contruct. process element value will be called multiple times 	 */
DECL|field|htmlBuilder
specifier|protected
specifier|transient
name|StringBuilder
name|htmlBuilder
init|=
literal|null
decl_stmt|;
comment|/** 	 * @return the contentType 	 *  	 */
DECL|method|getContentType
specifier|public
name|ContentType
name|getContentType
parameter_list|()
block|{
return|return
name|this
operator|.
name|contentType
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.core.AtomParser#processElementValue(java.lang.String) 	 */
DECL|method|processElementValue
specifier|public
name|void
name|processElementValue
parameter_list|(
name|String
name|aValue
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|htmlBuilder
operator|!=
literal|null
condition|)
name|this
operator|.
name|htmlBuilder
operator|.
name|append
argument_list|(
name|aValue
argument_list|)
expr_stmt|;
else|else
block|{
name|this
operator|.
name|textValue
operator|=
name|aValue
expr_stmt|;
block|}
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.core.AtomParser#processAttribute(javax.xml.namespace.QName, 	 *      java.lang.String) 	 */
DECL|method|processAttribute
specifier|public
name|void
name|processAttribute
parameter_list|(
name|QName
name|aQName
parameter_list|,
name|String
name|aValue
parameter_list|)
block|{
if|if
condition|(
name|aQName
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
literal|"QName must not be null"
argument_list|)
throw|;
if|if
condition|(
literal|"type"
operator|.
name|equals
argument_list|(
name|aQName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
operator|&&
name|aValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|contentType
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|DUPLICATE_ATTRIBUTE
argument_list|,
literal|"type"
argument_list|)
argument_list|)
throw|;
name|this
operator|.
name|contentType
operator|=
name|ContentType
operator|.
name|valueOf
argument_list|(
name|aValue
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|contentType
operator|==
name|ContentType
operator|.
name|HTML
condition|)
name|this
operator|.
name|htmlBuilder
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|processAttribute
argument_list|(
name|aQName
argument_list|,
name|aValue
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.core.AtomParser#processEndElement() 	 */
DECL|method|processEndElement
specifier|public
name|void
name|processEndElement
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|contentType
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|MISSING_ELEMENT_ATTRIBUTE
argument_list|,
name|this
operator|.
name|qname
argument_list|,
literal|"type"
argument_list|)
argument_list|)
throw|;
switch|switch
condition|(
name|this
operator|.
name|contentType
condition|)
block|{
case|case
name|XHTML
case|:
if|if
condition|(
name|this
operator|.
name|blobParser
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|textValue
operator|=
name|this
operator|.
name|blobParser
operator|.
name|toString
argument_list|()
expr_stmt|;
name|this
operator|.
name|blobParser
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|blobParser
operator|=
literal|null
expr_stmt|;
block|}
break|break;
case|case
name|HTML
case|:
if|if
condition|(
name|this
operator|.
name|htmlBuilder
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|textValue
operator|=
name|this
operator|.
name|htmlBuilder
operator|.
name|toString
argument_list|()
expr_stmt|;
name|this
operator|.
name|htmlBuilder
operator|=
literal|null
expr_stmt|;
block|}
default|default:
break|break;
block|}
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMElement#writeAtomOutput(org.apache.lucene.gdata.gom.writer.GOMStaxWriter) 	 */
DECL|method|writeAtomOutput
specifier|public
name|void
name|writeAtomOutput
parameter_list|(
name|GOMOutputWriter
name|aStreamWriter
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|List
argument_list|<
name|GOMAttribute
argument_list|>
name|xmlNamespaceAttributes
init|=
name|getXmlNamespaceAttributes
argument_list|()
decl_stmt|;
name|xmlNamespaceAttributes
operator|.
name|add
argument_list|(
name|GOMUtils
operator|.
name|getAttributeByContentTypeDefaultNs
argument_list|(
name|this
operator|.
name|contentType
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|contentType
operator|==
name|ContentType
operator|.
name|XHTML
condition|)
block|{
comment|/* 			 * if the content is xhtml write it unescaped 			 */
name|aStreamWriter
operator|.
name|writeStartElement
argument_list|(
name|this
operator|.
name|localName
argument_list|,
name|xmlNamespaceAttributes
argument_list|)
expr_stmt|;
name|aStreamWriter
operator|.
name|writeContentUnescaped
argument_list|(
name|this
operator|.
name|textValue
argument_list|)
expr_stmt|;
name|aStreamWriter
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// html and text will be escaped by stax writer
name|aStreamWriter
operator|.
name|writeSimpleXMLElement
argument_list|(
name|this
operator|.
name|localName
argument_list|,
name|xmlNamespaceAttributes
argument_list|,
name|this
operator|.
name|textValue
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMElement#writeRssOutput(org.apache.lucene.gdata.gom.writer.GOMStaxWriter) 	 */
DECL|method|writeRssOutput
specifier|public
name|void
name|writeRssOutput
parameter_list|(
name|GOMOutputWriter
name|aStreamWriter
parameter_list|)
throws|throws
name|XMLStreamException
block|{
comment|/* 		 * RSS does not support markup as child elements StaX Writer will encode 		 * all containing markup into valid xml entities 		 */
name|aStreamWriter
operator|.
name|writeSimpleXMLElement
argument_list|(
name|this
operator|.
name|rssLocalName
argument_list|,
name|getXmlNamespaceAttributes
argument_list|()
argument_list|,
name|this
operator|.
name|textValue
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.core.AtomParser#getChildParser(javax.xml.namespace.QName) 	 */
annotation|@
name|Override
DECL|method|getChildParser
specifier|public
name|AtomParser
name|getChildParser
parameter_list|(
name|QName
name|aName
parameter_list|)
block|{
if|if
condition|(
name|aName
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
literal|"QName must not be null"
argument_list|)
throw|;
if|if
condition|(
name|this
operator|.
name|contentType
operator|==
name|ContentType
operator|.
name|XHTML
operator|&&
name|aName
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|"div"
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|blobParser
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|DUPLICATE_ELEMENT
argument_list|,
literal|"div"
argument_list|)
argument_list|)
throw|;
name|this
operator|.
name|blobParser
operator|=
operator|new
name|XMLBlobContentParser
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|blobParser
operator|.
name|getChildParser
argument_list|(
name|aName
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|getChildParser
argument_list|(
name|aName
argument_list|)
return|;
block|}
DECL|class|XMLBlobContentParser
class|class
name|XMLBlobContentParser
implements|implements
name|AtomParser
block|{
DECL|field|writer
specifier|private
name|StringWriter
name|writer
decl_stmt|;
DECL|field|xmlWriter
specifier|private
name|XMLStreamWriter
name|xmlWriter
decl_stmt|;
comment|/** 		 *  		 */
DECL|method|XMLBlobContentParser
specifier|public
name|XMLBlobContentParser
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|writer
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|xmlWriter
operator|=
name|XMLOutputFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|createXMLStreamWriter
argument_list|(
name|this
operator|.
name|writer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** 		 * @see org.apache.lucene.gdata.gom.core.AtomParser#processElementValue(java.lang.String) 		 */
DECL|method|processElementValue
specifier|public
name|void
name|processElementValue
parameter_list|(
name|String
name|aValue
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|xmlWriter
operator|.
name|writeCharacters
argument_list|(
name|aValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** 		 * @see org.apache.lucene.gdata.gom.core.AtomParser#processAttribute(javax.xml.namespace.QName, 		 *      java.lang.String) 		 */
DECL|method|processAttribute
specifier|public
name|void
name|processAttribute
parameter_list|(
name|QName
name|aQName
parameter_list|,
name|String
name|aValue
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|xmlWriter
operator|.
name|writeAttribute
argument_list|(
name|aQName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|aQName
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|aQName
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|aValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** 		 * @see org.apache.lucene.gdata.gom.core.AtomParser#processEndElement() 		 */
DECL|method|processEndElement
specifier|public
name|void
name|processEndElement
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|xmlWriter
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** 		 * @see org.apache.lucene.gdata.gom.core.AtomParser#getChildParser(javax.xml.namespace.QName) 		 */
DECL|method|getChildParser
specifier|public
name|AtomParser
name|getChildParser
parameter_list|(
name|QName
name|aName
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|xmlWriter
operator|.
name|writeStartElement
argument_list|(
name|aName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|aName
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|aName
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|this
return|;
block|}
comment|/** 		 * @see java.lang.Object#toString() 		 */
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** 		 *  		 */
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|xmlWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class
end_unit
