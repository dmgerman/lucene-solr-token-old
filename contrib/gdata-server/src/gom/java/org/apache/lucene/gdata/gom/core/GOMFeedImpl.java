begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.gom.core
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMAuthor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMCategory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMEntry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMExtension
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMFeed
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMLink
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMNamespace
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
operator|.
name|extension
operator|.
name|GOMExtensionFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
operator|.
name|utils
operator|.
name|GOMUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|writer
operator|.
name|GOMOutputWriter
import|;
end_import
begin_comment
comment|/**  * atom:feed { atomCommonAttributes, (atomAuthor*& atomCategory*&  * atomContributor*& atomGenerator?& atomIcon?& atomId& atomLink*&  * atomLogo?& atomRights?& atomSubtitle?& atomTitle& atomUpdated&  * extensionElement*), atomEntry* }  *   * @author Simon Willnauer  */
end_comment
begin_class
DECL|class|GOMFeedImpl
class|class
name|GOMFeedImpl
extends|extends
name|GOMSourceImpl
implements|implements
name|GOMFeed
block|{
comment|// TODO add totalResults OS namespace
DECL|field|DEFAULT_START_INDEX
specifier|static
specifier|final
name|int
name|DEFAULT_START_INDEX
init|=
literal|1
decl_stmt|;
DECL|field|DEFAULT_ITEMS_PER_PAGE
specifier|static
specifier|final
name|int
name|DEFAULT_ITEMS_PER_PAGE
init|=
literal|25
decl_stmt|;
DECL|field|RSS_VERSION_ATTRIBUTE
specifier|private
specifier|static
specifier|final
name|GOMAttribute
name|RSS_VERSION_ATTRIBUTE
init|=
operator|new
name|GOMAttributeImpl
argument_list|(
literal|"version"
argument_list|,
literal|"2.0"
argument_list|)
decl_stmt|;
DECL|field|entries
specifier|protected
name|List
argument_list|<
name|GOMEntry
argument_list|>
name|entries
init|=
operator|new
name|LinkedList
argument_list|<
name|GOMEntry
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|extensions
specifier|protected
name|List
argument_list|<
name|GOMExtension
argument_list|>
name|extensions
init|=
operator|new
name|LinkedList
argument_list|<
name|GOMExtension
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|namespaces
specifier|protected
name|List
argument_list|<
name|GOMNamespace
argument_list|>
name|namespaces
init|=
operator|new
name|LinkedList
argument_list|<
name|GOMNamespace
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|startIndexElement
specifier|private
name|SimpleGOMElementImpl
name|startIndexElement
decl_stmt|;
DECL|field|itemsPerPageElement
specifier|private
name|SimpleGOMElementImpl
name|itemsPerPageElement
decl_stmt|;
DECL|field|extensionFactory
specifier|private
name|GOMExtensionFactory
name|extensionFactory
decl_stmt|;
DECL|field|defaultNamespace
specifier|private
name|GOMNamespace
name|defaultNamespace
init|=
name|GOMNamespace
operator|.
name|ATOM_NAMESPACE
decl_stmt|;
DECL|method|GOMFeedImpl
name|GOMFeedImpl
parameter_list|()
block|{
name|this
operator|.
name|localName
operator|=
name|GOMFeed
operator|.
name|LOCALNAME
expr_stmt|;
name|this
operator|.
name|qname
operator|=
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
name|this
operator|.
name|localName
argument_list|)
expr_stmt|;
name|startIndexElement
operator|=
operator|new
name|SimpleGOMElementImpl
argument_list|(
name|SimpleGOMElementImpl
operator|.
name|ELEMENT_OS_START_INDEX
argument_list|,
name|GOMNamespace
operator|.
name|OPENSEARCH_NAMESPACE
argument_list|)
expr_stmt|;
name|itemsPerPageElement
operator|=
operator|new
name|SimpleGOMElementImpl
argument_list|(
name|SimpleGOMElementImpl
operator|.
name|ELEMENT_OS_ITEMS_PER_PAGE
argument_list|,
name|GOMNamespace
operator|.
name|OPENSEARCH_NAMESPACE
argument_list|)
expr_stmt|;
name|itemsPerPageElement
operator|.
name|setTextValue
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|DEFAULT_ITEMS_PER_PAGE
argument_list|)
argument_list|)
expr_stmt|;
name|startIndexElement
operator|.
name|setTextValue
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|DEFAULT_START_INDEX
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMSource#addEntry(org.apache.lucene.gdata.gom.GOMEntry) 	 */
DECL|method|addEntry
specifier|public
name|void
name|addEntry
parameter_list|(
name|GOMEntry
name|aEntry
parameter_list|)
block|{
if|if
condition|(
name|aEntry
operator|!=
literal|null
condition|)
name|this
operator|.
name|entries
operator|.
name|add
argument_list|(
name|aEntry
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMFeed#getEntries() 	 */
DECL|method|getEntries
specifier|public
name|List
argument_list|<
name|GOMEntry
argument_list|>
name|getEntries
parameter_list|()
block|{
return|return
name|this
operator|.
name|entries
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMFeed#getItemsPerPage() 	 */
DECL|method|getItemsPerPage
specifier|public
name|int
name|getItemsPerPage
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|this
operator|.
name|itemsPerPageElement
operator|.
name|getTextValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMFeed#getStartIndex() 	 */
DECL|method|getStartIndex
specifier|public
name|int
name|getStartIndex
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|this
operator|.
name|startIndexElement
operator|.
name|getTextValue
argument_list|()
argument_list|)
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMFeed#setStartIndex(int) 	 */
DECL|method|setStartIndex
specifier|public
name|void
name|setStartIndex
parameter_list|(
name|int
name|aIndex
parameter_list|)
block|{
if|if
condition|(
name|aIndex
operator|<
literal|1
condition|)
return|return;
name|this
operator|.
name|startIndexElement
operator|.
name|textValue
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|aIndex
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMFeed#setItemsPerPage(int) 	 */
DECL|method|setItemsPerPage
specifier|public
name|void
name|setItemsPerPage
parameter_list|(
name|int
name|aInt
parameter_list|)
block|{
if|if
condition|(
name|aInt
operator|<
literal|0
condition|)
return|return;
name|this
operator|.
name|itemsPerPageElement
operator|.
name|textValue
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|aInt
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMFeed#addNamespace(org.apache.lucene.gdata.gom.GOMNamespace) 	 */
DECL|method|addNamespace
specifier|public
name|void
name|addNamespace
parameter_list|(
name|GOMNamespace
name|aNamespace
parameter_list|)
block|{
if|if
condition|(
name|aNamespace
operator|==
literal|null
condition|)
return|return;
comment|// namespace overrides hash / equals
if|if
condition|(
name|this
operator|.
name|namespaces
operator|.
name|contains
argument_list|(
name|aNamespace
argument_list|)
condition|)
return|return;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|aNamespace
operator|.
name|getNamespacePrefix
argument_list|()
argument_list|)
operator|||
name|aNamespace
operator|.
name|getNamespaceUri
argument_list|()
operator|.
name|equals
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|)
condition|)
return|return;
else|else
name|this
operator|.
name|namespaces
operator|.
name|add
argument_list|(
name|aNamespace
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMFeed#getDefaultNamespace() 	 */
DECL|method|getDefaultNamespace
specifier|public
name|GOMNamespace
name|getDefaultNamespace
parameter_list|()
block|{
return|return
name|this
operator|.
name|defaultNamespace
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMFeed#getNamespaces() 	 *  	 */
DECL|method|getNamespaces
specifier|public
name|List
argument_list|<
name|GOMNamespace
argument_list|>
name|getNamespaces
parameter_list|()
block|{
return|return
name|this
operator|.
name|namespaces
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.core.AtomParser#getChildParser(javax.xml.namespace.QName) 	 */
DECL|method|getChildParser
specifier|public
name|AtomParser
name|getChildParser
parameter_list|(
name|QName
name|aName
parameter_list|)
block|{
if|if
condition|(
name|aName
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|GOMNamespace
operator|.
name|OPENSEARCH_NS_URI
argument_list|)
condition|)
block|{
if|if
condition|(
name|aName
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|SimpleGOMElementImpl
operator|.
name|ELEMENT_OS_ITEMS_PER_PAGE
argument_list|)
condition|)
block|{
name|this
operator|.
name|itemsPerPageElement
operator|=
operator|new
name|SimpleGOMElementImpl
argument_list|(
name|SimpleGOMElementImpl
operator|.
name|ELEMENT_OS_ITEMS_PER_PAGE
argument_list|,
name|GOMNamespace
operator|.
name|OPENSEARCH_NAMESPACE
argument_list|)
expr_stmt|;
name|this
operator|.
name|itemsPerPageElement
operator|.
name|setValidator
argument_list|(
operator|new
name|PositiveIntegerValidator
argument_list|(
name|SimpleGOMElementImpl
operator|.
name|ELEMENT_OS_ITEMS_PER_PAGE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|itemsPerPageElement
return|;
block|}
if|if
condition|(
name|aName
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|SimpleGOMElementImpl
operator|.
name|ELEMENT_OS_START_INDEX
argument_list|)
condition|)
block|{
name|this
operator|.
name|startIndexElement
operator|=
operator|new
name|SimpleGOMElementImpl
argument_list|(
name|SimpleGOMElementImpl
operator|.
name|ELEMENT_OS_START_INDEX
argument_list|,
name|GOMNamespace
operator|.
name|OPENSEARCH_NAMESPACE
argument_list|)
expr_stmt|;
name|this
operator|.
name|startIndexElement
operator|.
name|setValidator
argument_list|(
operator|new
name|PositiveIntegerValidator
argument_list|(
name|SimpleGOMElementImpl
operator|.
name|ELEMENT_OS_START_INDEX
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|startIndexElement
return|;
block|}
block|}
if|if
condition|(
name|aName
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|)
operator|&&
name|aName
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|GOMEntry
operator|.
name|LOCALNAME
argument_list|)
condition|)
block|{
name|GOMEntry
name|entry
init|=
operator|new
name|GOMEntryImpl
argument_list|()
decl_stmt|;
name|this
operator|.
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
if|if
condition|(
name|this
operator|.
name|extensionFactory
operator|!=
literal|null
condition|)
block|{
name|GOMExtension
name|extension
init|=
name|this
operator|.
name|extensionFactory
operator|.
name|canHandleExtensionElement
argument_list|(
name|aName
argument_list|)
decl_stmt|;
if|if
condition|(
name|extension
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|extensions
operator|.
name|add
argument_list|(
name|extension
argument_list|)
expr_stmt|;
return|return
name|extension
return|;
block|}
block|}
return|return
name|super
operator|.
name|getChildParser
argument_list|(
name|aName
argument_list|)
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMElement#writeAtomOutput(org.apache.lucene.gdata.gom.writer.GOMStaxWriter) 	 */
DECL|method|writeAtomOutput
specifier|public
name|void
name|writeAtomOutput
parameter_list|(
name|GOMOutputWriter
name|aStreamWriter
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|aStreamWriter
operator|.
name|writeStartElement
argument_list|(
name|this
operator|.
name|localName
argument_list|,
name|this
operator|.
name|extensionAttributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|defaultNamespace
operator|!=
literal|null
condition|)
name|aStreamWriter
operator|.
name|writeDefaultNamespace
argument_list|(
name|this
operator|.
name|defaultNamespace
argument_list|)
expr_stmt|;
for|for
control|(
name|GOMNamespace
name|namespace
range|:
name|this
operator|.
name|namespaces
control|)
block|{
name|aStreamWriter
operator|.
name|writeNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|GOMAttribute
argument_list|>
name|xmlNamespaceAttributes
init|=
name|getXmlNamespaceAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|GOMAttribute
name|attribute
range|:
name|xmlNamespaceAttributes
control|)
block|{
name|aStreamWriter
operator|.
name|writeAttribute
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
block|}
name|writeInnerAtomOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|itemsPerPageElement
operator|!=
literal|null
condition|)
name|this
operator|.
name|itemsPerPageElement
operator|.
name|writeAtomOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|startIndexElement
operator|!=
literal|null
condition|)
name|this
operator|.
name|startIndexElement
operator|.
name|writeAtomOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
for|for
control|(
name|GOMExtension
name|extension
range|:
name|this
operator|.
name|extensions
control|)
block|{
name|extension
operator|.
name|writeAtomOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|GOMEntry
name|entry
range|:
name|this
operator|.
name|entries
control|)
block|{
name|entry
operator|.
name|writeAtomOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
block|}
name|aStreamWriter
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMElement#writeRssOutput(org.apache.lucene.gdata.gom.writer.GOMStaxWriter) 	 */
DECL|method|writeRssOutput
specifier|public
name|void
name|writeRssOutput
parameter_list|(
name|GOMOutputWriter
name|aStreamWriter
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|aStreamWriter
operator|.
name|writeStartElement
argument_list|(
name|LOCALNAME_RSS
argument_list|,
name|this
operator|.
name|extensionAttributes
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|GOMAttribute
argument_list|>
name|xmlNamespaceAttributes
init|=
name|getXmlNamespaceAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|GOMAttribute
name|attribute
range|:
name|xmlNamespaceAttributes
control|)
block|{
name|aStreamWriter
operator|.
name|writeAttribute
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|defaultNamespace
operator|!=
literal|null
condition|)
name|aStreamWriter
operator|.
name|writeNamespace
argument_list|(
name|this
operator|.
name|defaultNamespace
argument_list|)
expr_stmt|;
for|for
control|(
name|GOMNamespace
name|namespace
range|:
name|this
operator|.
name|namespaces
control|)
block|{
name|aStreamWriter
operator|.
name|writeNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
name|aStreamWriter
operator|.
name|writeAttribute
argument_list|(
name|RSS_VERSION_ATTRIBUTE
argument_list|)
expr_stmt|;
name|aStreamWriter
operator|.
name|writeStartElement
argument_list|(
name|RSS_CHANNEL_ELEMENT_NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|id
operator|!=
literal|null
condition|)
name|this
operator|.
name|id
operator|.
name|writeRssOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|title
operator|!=
literal|null
condition|)
name|this
operator|.
name|title
operator|.
name|writeRssOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|subtitle
operator|!=
literal|null
condition|)
name|this
operator|.
name|subtitle
operator|.
name|writeRssOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|rights
operator|!=
literal|null
condition|)
name|this
operator|.
name|rights
operator|.
name|writeRssOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
for|for
control|(
name|GOMAuthor
name|authors
range|:
name|this
operator|.
name|authors
control|)
block|{
name|authors
operator|.
name|writeRssOutput
argument_list|(
name|aStreamWriter
argument_list|,
literal|"managingEditor"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|GOMCategory
name|category
range|:
name|this
operator|.
name|categories
control|)
block|{
name|category
operator|.
name|writeRssOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|GOMLink
name|link
range|:
name|this
operator|.
name|links
control|)
block|{
name|link
operator|.
name|writeRssOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|updated
operator|!=
literal|null
condition|)
block|{
comment|// udated.getDate can not be null
name|aStreamWriter
operator|.
name|writeSimpleXMLElement
argument_list|(
literal|"lastBuildDate"
argument_list|,
name|GOMUtils
operator|.
name|buildRfc822Date
argument_list|(
name|this
operator|.
name|updated
operator|.
name|getDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|logo
operator|!=
literal|null
operator|||
name|this
operator|.
name|icon
operator|!=
literal|null
condition|)
block|{
name|aStreamWriter
operator|.
name|writeStartElement
argument_list|(
literal|"image"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|logo
operator|!=
literal|null
condition|)
name|this
operator|.
name|logo
operator|.
name|writeRssOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
else|else
name|this
operator|.
name|icon
operator|.
name|writeRssOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
name|aStreamWriter
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|generator
operator|!=
literal|null
condition|)
name|this
operator|.
name|generator
operator|.
name|writeRssOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|itemsPerPageElement
operator|!=
literal|null
condition|)
name|this
operator|.
name|itemsPerPageElement
operator|.
name|writeRssOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|startIndexElement
operator|!=
literal|null
condition|)
name|this
operator|.
name|startIndexElement
operator|.
name|writeRssOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
for|for
control|(
name|GOMExtension
name|extension
range|:
name|this
operator|.
name|extensions
control|)
block|{
name|extension
operator|.
name|writeRssOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|GOMExtension
name|extension
range|:
name|this
operator|.
name|extensions
control|)
block|{
name|extension
operator|.
name|writeRssOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|GOMEntry
name|entry
range|:
name|this
operator|.
name|entries
control|)
block|{
name|entry
operator|.
name|writeRssOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
block|}
comment|// channel
name|aStreamWriter
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// rss
name|aStreamWriter
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
DECL|class|PositiveIntegerValidator
specifier|static
class|class
name|PositiveIntegerValidator
extends|extends
name|SimpleGOMElementImpl
operator|.
name|SimpleValidator
block|{
DECL|method|PositiveIntegerValidator
specifier|protected
name|PositiveIntegerValidator
parameter_list|(
name|String
name|aLocalName
parameter_list|)
block|{
name|super
argument_list|(
name|aLocalName
argument_list|)
expr_stmt|;
block|}
comment|/** 		 * @see org.apache.lucene.gdata.gom.core.SimpleGOMElementImpl.SimpleValidator#validate(java.lang.String) 		 */
annotation|@
name|Override
DECL|method|validate
specifier|protected
name|void
name|validate
parameter_list|(
name|String
name|aTextValue
parameter_list|)
block|{
name|super
operator|.
name|validate
argument_list|(
name|aTextValue
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|i
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|aTextValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AtomParser
operator|.
name|INVALID_ELEMENT_VALUE
argument_list|,
name|this
operator|.
name|localName
argument_list|,
literal|"positive integer value"
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AtomParser
operator|.
name|INVALID_ELEMENT_VALUE
argument_list|,
name|this
operator|.
name|localName
argument_list|,
literal|"positive integer value"
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMFeed#getExtensions() 	 */
DECL|method|getExtensions
specifier|public
name|List
argument_list|<
name|GOMExtension
argument_list|>
name|getExtensions
parameter_list|()
block|{
return|return
name|this
operator|.
name|extensions
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMFeed#setExtensionFactory(org.apache.lucene.gdata.gom.core.extension.GOMExtensionFactory) 	 */
DECL|method|setExtensionFactory
specifier|public
name|void
name|setExtensionFactory
parameter_list|(
name|GOMExtensionFactory
name|aFactory
parameter_list|)
block|{
if|if
condition|(
name|extensionFactory
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|GOMNamespace
argument_list|>
name|namespaces2
init|=
name|extensionFactory
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
if|if
condition|(
name|namespaces2
operator|!=
literal|null
condition|)
for|for
control|(
name|GOMNamespace
name|namespace
range|:
name|namespaces2
control|)
block|{
name|this
operator|.
name|addNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|extensionFactory
operator|=
name|aFactory
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMFeed#addLink(org.apache.lucene.gdata.gom.GOMLink) 	 */
DECL|method|addLink
specifier|public
name|void
name|addLink
parameter_list|(
name|GOMLink
name|aLink
parameter_list|)
block|{
if|if
condition|(
name|aLink
operator|==
literal|null
condition|)
return|return;
name|this
operator|.
name|links
operator|.
name|add
argument_list|(
name|aLink
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
