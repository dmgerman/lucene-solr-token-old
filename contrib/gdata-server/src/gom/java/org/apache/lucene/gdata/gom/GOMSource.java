begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.gom
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_comment
comment|/**  * If an atom:entry is copied from one feed into another feed, then the source  * atom:feed's metadata (all child elements of atom:feed other than the  * atom:entry elements) MAY be preserved within the copied entry by adding an  * atom:source child element, if it is not already present in the entry, and  * including some or all of the source feed's Metadata elements as the  * atom:source element's children. Such metadata SHOULD be preserved if the  * source atom:feed contains any of the child elements atom:author,  * atom:contributor, atom:rights, or atom:category and those child elements are  * not present in the source atom:entry.  *   *<pre>  *    atomSource =  *    element atom:source {  *    atomCommonAttributes,  *    (atomAuthor*  *&amp; atomCategory*  *&amp; atomContributor*  *&amp; atomGenerator?  *&amp; atomIcon?  *&amp; atomId?  *&amp; atomLink*  *&amp; atomLogo?  *&amp; atomRights?  *&amp; atomSubtitle?  *&amp; atomTitle?  *&amp; atomUpdated?  *&amp; extensionElement*)  *    }  *</pre>  *   * @author Simon Willnauer  *   */
end_comment
begin_interface
DECL|interface|GOMSource
specifier|public
interface|interface
name|GOMSource
extends|extends
name|GOMXmlEntity
extends|,
name|GOMElement
block|{
DECL|field|LOCALNAME
specifier|public
specifier|static
specifier|final
name|String
name|LOCALNAME
init|=
literal|"source"
decl_stmt|;
comment|/** 	 * @param aAuthor 	 */
DECL|method|addAuthor
specifier|public
name|void
name|addAuthor
parameter_list|(
name|GOMAuthor
name|aAuthor
parameter_list|)
function_decl|;
comment|/** 	 * @param aCategory 	 */
DECL|method|addCategory
specifier|public
name|void
name|addCategory
parameter_list|(
name|GOMCategory
name|aCategory
parameter_list|)
function_decl|;
comment|/** 	 * @param aContributor 	 */
DECL|method|addContributor
specifier|public
name|void
name|addContributor
parameter_list|(
name|GOMContributor
name|aContributor
parameter_list|)
function_decl|;
comment|/** 	 * @param aLink 	 */
DECL|method|addLink
specifier|public
name|void
name|addLink
parameter_list|(
name|GOMLink
name|aLink
parameter_list|)
function_decl|;
DECL|method|getAuthors
specifier|public
name|List
argument_list|<
name|GOMAuthor
argument_list|>
name|getAuthors
parameter_list|()
function_decl|;
DECL|method|getCategories
specifier|public
name|List
argument_list|<
name|GOMCategory
argument_list|>
name|getCategories
parameter_list|()
function_decl|;
DECL|method|getContributor
specifier|public
name|List
argument_list|<
name|GOMContributor
argument_list|>
name|getContributor
parameter_list|()
function_decl|;
DECL|method|getGenerator
specifier|public
name|GOMGenerator
name|getGenerator
parameter_list|()
function_decl|;
DECL|method|getId
specifier|public
name|GOMId
name|getId
parameter_list|()
function_decl|;
DECL|method|setGenerator
specifier|public
name|void
name|setGenerator
parameter_list|(
name|GOMGenerator
name|aGenerator
parameter_list|)
function_decl|;
DECL|method|setIcon
specifier|public
name|void
name|setIcon
parameter_list|(
name|GOMIcon
name|aIcon
parameter_list|)
function_decl|;
DECL|method|setId
specifier|public
name|void
name|setId
parameter_list|(
name|GOMId
name|aId
parameter_list|)
function_decl|;
DECL|method|getLogo
specifier|public
name|GOMLogo
name|getLogo
parameter_list|()
function_decl|;
DECL|method|setLogo
specifier|public
name|void
name|setLogo
parameter_list|(
name|GOMLogo
name|aLogo
parameter_list|)
function_decl|;
DECL|method|getRights
specifier|public
name|GOMRights
name|getRights
parameter_list|()
function_decl|;
DECL|method|setRights
specifier|public
name|void
name|setRights
parameter_list|(
name|GOMRights
name|aRights
parameter_list|)
function_decl|;
DECL|method|getSubtitle
specifier|public
name|GOMSubtitle
name|getSubtitle
parameter_list|()
function_decl|;
DECL|method|setSubtitle
specifier|public
name|void
name|setSubtitle
parameter_list|(
name|GOMSubtitle
name|aSubtitle
parameter_list|)
function_decl|;
DECL|method|getTitle
specifier|public
name|GOMTitle
name|getTitle
parameter_list|()
function_decl|;
DECL|method|setTitle
specifier|public
name|void
name|setTitle
parameter_list|(
name|GOMTitle
name|aTitle
parameter_list|)
function_decl|;
DECL|method|getUpdated
specifier|public
name|GOMUpdated
name|getUpdated
parameter_list|()
function_decl|;
DECL|method|setUpdated
specifier|public
name|void
name|setUpdated
parameter_list|(
name|GOMUpdated
name|aUpdated
parameter_list|)
function_decl|;
DECL|method|getIcon
specifier|public
name|GOMIcon
name|getIcon
parameter_list|()
function_decl|;
DECL|method|getLinks
specifier|public
name|List
argument_list|<
name|GOMLink
argument_list|>
name|getLinks
parameter_list|()
function_decl|;
comment|//TODO needs extension elements
block|}
end_interface
end_unit
