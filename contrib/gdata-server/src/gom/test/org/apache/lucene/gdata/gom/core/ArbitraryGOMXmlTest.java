begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.gom.core
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|FactoryConfigurationError
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|writer
operator|.
name|GOMStaxWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|writer
operator|.
name|GOMOutputWriter
import|;
end_import
begin_comment
comment|/**  * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|ArbitraryGOMXmlTest
specifier|public
class|class
name|ArbitraryGOMXmlTest
extends|extends
name|TestCase
block|{
DECL|field|arbXML
specifier|private
name|ArbitraryGOMXml
name|arbXML
decl_stmt|;
DECL|field|name
specifier|private
name|QName
name|name
init|=
operator|new
name|QName
argument_list|(
literal|"testme"
argument_list|)
decl_stmt|;
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|arbXML
operator|=
operator|new
name|ArbitraryGOMXml
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|tearDown
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.ArbitraryGOMXml.getChildParser(QName)' 	 */
DECL|method|testGetChildParser
specifier|public
name|void
name|testGetChildParser
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|arbXML
operator|.
name|getChildParser
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"qname is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|arbXML
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|AtomParser
name|childParser
init|=
name|this
operator|.
name|arbXML
operator|.
name|getChildParser
argument_list|(
name|this
operator|.
name|name
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|childParser
operator|instanceof
name|ArbitraryGOMXml
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|name
argument_list|,
operator|(
operator|(
name|ArbitraryGOMXml
operator|)
name|childParser
operator|)
operator|.
name|getQname
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|,
operator|(
operator|(
name|ArbitraryGOMXml
operator|)
name|childParser
operator|)
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|arbXML
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.ArbitraryGOMXml.processAttribute(QName, 	 * String)' 	 */
DECL|method|testProcessAttribute
specifier|public
name|void
name|testProcessAttribute
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|arbXML
operator|.
name|processAttribute
argument_list|(
literal|null
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"qname is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|this
operator|.
name|arbXML
operator|.
name|getAttributes
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|arbXML
operator|.
name|processAttribute
argument_list|(
name|name
argument_list|,
literal|"testme"
argument_list|)
expr_stmt|;
block|{
name|List
argument_list|<
name|GOMAttribute
argument_list|>
name|attributes
init|=
name|this
operator|.
name|arbXML
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|attributes
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|GOMAttribute
name|attribute
init|=
name|attributes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|name
argument_list|,
name|attribute
operator|.
name|getQname
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|attribute
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testme"
argument_list|,
name|attribute
operator|.
name|getTextValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|this
operator|.
name|arbXML
operator|.
name|processAttribute
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|GOMAttribute
argument_list|>
name|attributes
init|=
name|this
operator|.
name|arbXML
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|attributes
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|GOMAttribute
name|attribute
init|=
name|attributes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|name
argument_list|,
name|attribute
operator|.
name|getQname
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|attribute
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|attribute
operator|.
name|getTextValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.ArbitraryGOMXml.processElementValue(String)' 	 */
DECL|method|testProcessElementValue
specifier|public
name|void
name|testProcessElementValue
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|arbXML
operator|.
name|processElementValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"name is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
name|this
operator|.
name|arbXML
operator|.
name|processElementValue
argument_list|(
literal|"test value"
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|arbXML
operator|.
name|processElementValue
argument_list|(
literal|"test value"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"value is already set"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
name|assertEquals
argument_list|(
literal|"test value"
argument_list|,
name|this
operator|.
name|arbXML
operator|.
name|getTextValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.ArbitraryGOMXml.ArbitraryGOMXml(QName)' 	 */
DECL|method|testArbitraryGOMXml
specifier|public
name|void
name|testArbitraryGOMXml
parameter_list|()
block|{
try|try
block|{
operator|new
name|ArbitraryGOMXml
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"qname is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{  		}
name|ArbitraryGOMXml
name|xml
init|=
operator|new
name|ArbitraryGOMXml
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|name
argument_list|,
name|xml
operator|.
name|getQname
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|xml
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.ArbitraryGOMXml.writeAtomOutput(GOMWriter)' 	 */
DECL|method|testWriteAtomOutput
specifier|public
name|void
name|testWriteAtomOutput
parameter_list|()
throws|throws
name|XMLStreamException
throws|,
name|FactoryConfigurationError
block|{
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GOMOutputWriter
name|w
init|=
operator|new
name|GOMStaxWriter
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|this
operator|.
name|arbXML
operator|.
name|writeAtomOutput
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|w
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<"
operator|+
name|this
operator|.
name|name
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"/>"
argument_list|,
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|this
operator|.
name|arbXML
operator|.
name|writeAtomOutput
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"writer is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|//
block|}
block|{
name|this
operator|.
name|arbXML
operator|.
name|processAttribute
argument_list|(
name|name
argument_list|,
literal|"testme1"
argument_list|)
expr_stmt|;
name|this
operator|.
name|arbXML
operator|.
name|processElementValue
argument_list|(
literal|"testme2"
argument_list|)
expr_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GOMOutputWriter
name|w
init|=
operator|new
name|GOMStaxWriter
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|this
operator|.
name|arbXML
operator|.
name|writeAtomOutput
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<"
operator|+
name|this
operator|.
name|name
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|" testme=\"testme1\">"
operator|+
literal|"testme2"
operator|+
literal|"</"
operator|+
name|this
operator|.
name|name
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|">"
argument_list|,
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
