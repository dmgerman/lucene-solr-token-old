begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.gom
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
package|;
end_package
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_comment
comment|/**  * Testcase for GOMNamespace  *   * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|GOMNamespaceTest
specifier|public
class|class
name|GOMNamespaceTest
extends|extends
name|TestCase
block|{
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.GOMNamespace.GOMNamespace(String, String)' 	 */
DECL|method|testGOMNamespace
specifier|public
name|void
name|testGOMNamespace
parameter_list|()
block|{
try|try
block|{
name|GOMNamespace
name|namespace
init|=
operator|new
name|GOMNamespace
argument_list|(
literal|null
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"uri is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//
block|}
try|try
block|{
operator|new
name|GOMNamespace
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"unexp. exc"
argument_list|)
expr_stmt|;
block|}
name|GOMNamespace
name|namespace
init|=
operator|new
name|GOMNamespace
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
name|GOMNamespace
operator|.
name|ATOM_NS_PREFIX
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_PREFIX
argument_list|,
name|namespace
operator|.
name|getNamespacePrefix
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
name|namespace
operator|.
name|getNamespaceUri
argument_list|()
argument_list|)
expr_stmt|;
comment|//
block|}
block|}
end_class
end_unit
