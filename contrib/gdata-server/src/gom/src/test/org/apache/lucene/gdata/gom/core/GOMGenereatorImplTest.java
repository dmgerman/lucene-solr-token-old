begin_unit
begin_package
DECL|package|org.apache.lucene.gdata.gom.core
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|FactoryConfigurationError
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMGenerator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMNamespace
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|writer
operator|.
name|GOMStaxWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|writer
operator|.
name|GOMOutputWriter
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_class
DECL|class|GOMGenereatorImplTest
specifier|public
class|class
name|GOMGenereatorImplTest
extends|extends
name|TestCase
block|{
DECL|field|impl
specifier|private
name|GOMGeneratorImpl
name|impl
decl_stmt|;
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|impl
operator|=
operator|new
name|GOMGeneratorImpl
argument_list|()
expr_stmt|;
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.GOMGeneratorImpl.processAttribute(QName, 	 * String)' 	 */
DECL|method|testProcessAttribute
specifier|public
name|void
name|testProcessAttribute
parameter_list|()
block|{
name|this
operator|.
name|impl
operator|.
name|processAttribute
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"uri"
argument_list|)
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|processAttribute
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"uri"
argument_list|)
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"duplicated"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{  		}
name|this
operator|.
name|impl
operator|.
name|processAttribute
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"version"
argument_list|)
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getGeneratorVersion
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|processAttribute
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"version"
argument_list|)
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"duplicated"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{  		}
comment|// check call to super.processAttribute
name|this
operator|.
name|impl
operator|.
name|processAttribute
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|XML_NS_URI
argument_list|,
literal|"base"
argument_list|,
name|GOMNamespace
operator|.
name|XML_NS_PREFIX
argument_list|)
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|this
operator|.
name|impl
operator|.
name|xmlBase
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|processAttribute
argument_list|(
literal|null
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"qname is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//
block|}
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|processAttribute
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|XML_NS_URI
argument_list|,
literal|"base"
argument_list|,
name|GOMNamespace
operator|.
name|XML_NS_PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"value is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.GOMGeneratorImpl.processElementValue(String)' 	 */
DECL|method|testProcessElementValue
specifier|public
name|void
name|testProcessElementValue
parameter_list|()
block|{
name|this
operator|.
name|impl
operator|.
name|processElementValue
argument_list|(
literal|"myGenerator"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myGenerator"
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getTextValue
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|processElementValue
argument_list|(
literal|"testme"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"duplicated"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.GOMGeneratorImpl.processEndElement()' 	 */
DECL|method|testProcessEndElement
specifier|public
name|void
name|testProcessEndElement
parameter_list|()
block|{
name|this
operator|.
name|impl
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
block|{
name|this
operator|.
name|impl
operator|.
name|setUri
argument_list|(
literal|"some invalid uri"
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"must be an absolute uri"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
block|{
name|this
operator|.
name|impl
operator|.
name|setUri
argument_list|(
literal|"/uri"
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"must be an absolute uri or xml:base must be set"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
name|this
operator|.
name|impl
operator|.
name|xmlBase
operator|=
literal|"http://apache.org"
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|xmlBase
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setUri
argument_list|(
literal|"http://apache.org/uri"
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.GOMGeneratorImpl.GOMGeneratorImpl()' 	 */
DECL|method|testGOMGeneratorImpl
specifier|public
name|void
name|testGOMGeneratorImpl
parameter_list|()
block|{
name|this
operator|.
name|impl
operator|=
operator|new
name|GOMGeneratorImpl
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|GOMGenerator
operator|.
name|LOCALNAME
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GOMGenerator
operator|.
name|LOCALNAME
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getQname
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getQname
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.GOMGeneratorImpl.writeAtomOutput(GOMWriter)' 	 */
DECL|method|testWriteAtomOutput
specifier|public
name|void
name|testWriteAtomOutput
parameter_list|()
throws|throws
name|XMLStreamException
block|{
block|{
name|StringWriter
name|stW
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GOMOutputWriter
name|writer
init|=
operator|new
name|GOMStaxWriter
argument_list|(
name|stW
argument_list|)
decl_stmt|;
name|this
operator|.
name|impl
operator|.
name|writeAtomOutput
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<"
operator|+
name|this
operator|.
name|impl
operator|.
name|getLocalName
argument_list|()
operator|+
literal|"/>"
argument_list|,
name|stW
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|StringWriter
name|stW
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GOMOutputWriter
name|writer
init|=
operator|new
name|GOMStaxWriter
argument_list|(
name|stW
argument_list|)
decl_stmt|;
name|this
operator|.
name|impl
operator|.
name|setTextValue
argument_list|(
literal|"Lucene"
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|writeAtomOutput
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<"
operator|+
name|this
operator|.
name|impl
operator|.
name|getLocalName
argument_list|()
operator|+
literal|">Lucene</"
operator|+
name|this
operator|.
name|impl
operator|.
name|getLocalName
argument_list|()
operator|+
literal|">"
argument_list|,
name|stW
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|StringWriter
name|stW
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GOMOutputWriter
name|writer
init|=
operator|new
name|GOMStaxWriter
argument_list|(
name|stW
argument_list|)
decl_stmt|;
name|this
operator|.
name|impl
operator|.
name|setUri
argument_list|(
literal|"http://apache.org"
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|writeAtomOutput
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<"
operator|+
name|this
operator|.
name|impl
operator|.
name|getLocalName
argument_list|()
operator|+
literal|" uri=\"http://apache.org\">Lucene</"
operator|+
name|this
operator|.
name|impl
operator|.
name|getLocalName
argument_list|()
operator|+
literal|">"
argument_list|,
name|stW
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|StringWriter
name|stW
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GOMOutputWriter
name|writer
init|=
operator|new
name|GOMStaxWriter
argument_list|(
name|stW
argument_list|)
decl_stmt|;
name|this
operator|.
name|impl
operator|.
name|setGeneratorVersion
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|writeAtomOutput
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<"
operator|+
name|this
operator|.
name|impl
operator|.
name|getLocalName
argument_list|()
operator|+
literal|" uri=\"http://apache.org\" version=\"1\">Lucene</"
operator|+
name|this
operator|.
name|impl
operator|.
name|getLocalName
argument_list|()
operator|+
literal|">"
argument_list|,
name|stW
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.GOMGeneratorImpl.writeRssOutput(GOMWriter)' 	 */
DECL|method|testWriteRssOutput
specifier|public
name|void
name|testWriteRssOutput
parameter_list|()
throws|throws
name|XMLStreamException
throws|,
name|FactoryConfigurationError
block|{
block|{
name|StringWriter
name|stW
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GOMOutputWriter
name|writer
init|=
operator|new
name|GOMStaxWriter
argument_list|(
name|stW
argument_list|)
decl_stmt|;
name|this
operator|.
name|impl
operator|.
name|setTextValue
argument_list|(
literal|"Lucene"
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|writeRssOutput
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<"
operator|+
name|this
operator|.
name|impl
operator|.
name|getLocalName
argument_list|()
operator|+
literal|">Lucene</"
operator|+
name|this
operator|.
name|impl
operator|.
name|getLocalName
argument_list|()
operator|+
literal|">"
argument_list|,
name|stW
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|StringWriter
name|stW
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GOMOutputWriter
name|writer
init|=
operator|new
name|GOMStaxWriter
argument_list|(
name|stW
argument_list|)
decl_stmt|;
name|this
operator|.
name|impl
operator|.
name|setUri
argument_list|(
literal|"http://apache.org"
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setGeneratorVersion
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|writeRssOutput
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<"
operator|+
name|this
operator|.
name|impl
operator|.
name|getLocalName
argument_list|()
operator|+
literal|">Lucene</"
operator|+
name|this
operator|.
name|impl
operator|.
name|getLocalName
argument_list|()
operator|+
literal|">"
argument_list|,
name|stW
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
