begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.gom.core
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMNamespace
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|writer
operator|.
name|GOMStaxWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|writer
operator|.
name|GOMOutputWriter
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_comment
comment|/**  * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|GOMCategoryTest
specifier|public
class|class
name|GOMCategoryTest
extends|extends
name|TestCase
block|{
DECL|field|qname
specifier|private
name|QName
name|qname
init|=
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"testme"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
DECL|field|cat
name|GOMCategoryImpl
name|cat
decl_stmt|;
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|cat
operator|=
operator|new
name|GOMCategoryImpl
argument_list|()
expr_stmt|;
block|}
DECL|method|tearDown
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.GOMCategoryImpl.writeAtomOutput(GOMWriter)' 	 */
DECL|method|testWriteAtomOutput
specifier|public
name|void
name|testWriteAtomOutput
parameter_list|()
throws|throws
name|XMLStreamException
block|{
try|try
block|{
name|this
operator|.
name|cat
operator|.
name|writeAtomOutput
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"wirter is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|//
block|}
block|{
name|StringWriter
name|strWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GOMOutputWriter
name|writer
init|=
operator|new
name|GOMStaxWriter
argument_list|(
name|strWriter
argument_list|)
decl_stmt|;
name|this
operator|.
name|cat
operator|.
name|writeAtomOutput
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<category term=\"\"/>"
argument_list|,
name|strWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|StringWriter
name|strWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GOMOutputWriter
name|writer
init|=
operator|new
name|GOMStaxWriter
argument_list|(
name|strWriter
argument_list|)
decl_stmt|;
name|this
operator|.
name|cat
operator|.
name|term
operator|=
literal|"test"
expr_stmt|;
name|this
operator|.
name|cat
operator|.
name|writeAtomOutput
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<category term=\"test\"/>"
argument_list|,
name|strWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|StringWriter
name|strWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GOMOutputWriter
name|writer
init|=
operator|new
name|GOMStaxWriter
argument_list|(
name|strWriter
argument_list|)
decl_stmt|;
name|this
operator|.
name|cat
operator|.
name|label
operator|=
literal|"python"
expr_stmt|;
name|this
operator|.
name|cat
operator|.
name|scheme
operator|=
literal|"monty"
expr_stmt|;
name|this
operator|.
name|cat
operator|.
name|writeAtomOutput
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<category term=\"test\" scheme=\"monty\" label=\"python\"/>"
argument_list|,
name|strWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.GOMCategoryImpl.writeRssOutput(GOMWriter)' 	 */
DECL|method|testWriteRssOutput
specifier|public
name|void
name|testWriteRssOutput
parameter_list|()
throws|throws
name|XMLStreamException
block|{
try|try
block|{
name|this
operator|.
name|cat
operator|.
name|writeRssOutput
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"wirter is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|//
block|}
block|{
name|StringWriter
name|strWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GOMOutputWriter
name|writer
init|=
operator|new
name|GOMStaxWriter
argument_list|(
name|strWriter
argument_list|)
decl_stmt|;
name|this
operator|.
name|cat
operator|.
name|writeRssOutput
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<category domain=\"\"/>"
argument_list|,
name|strWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|StringWriter
name|strWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GOMOutputWriter
name|writer
init|=
operator|new
name|GOMStaxWriter
argument_list|(
name|strWriter
argument_list|)
decl_stmt|;
name|this
operator|.
name|cat
operator|.
name|scheme
operator|=
literal|"www.apache.org"
expr_stmt|;
name|this
operator|.
name|cat
operator|.
name|writeRssOutput
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<category domain=\"www.apache.org\"/>"
argument_list|,
name|strWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|StringWriter
name|strWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GOMOutputWriter
name|writer
init|=
operator|new
name|GOMStaxWriter
argument_list|(
name|strWriter
argument_list|)
decl_stmt|;
name|this
operator|.
name|cat
operator|.
name|scheme
operator|=
literal|"www.apache.org"
expr_stmt|;
name|this
operator|.
name|cat
operator|.
name|term
operator|=
literal|"Goo Data"
expr_stmt|;
name|this
operator|.
name|cat
operator|.
name|writeRssOutput
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<category domain=\"www.apache.org\">Goo Data</category>"
argument_list|,
name|strWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|StringWriter
name|strWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GOMOutputWriter
name|writer
init|=
operator|new
name|GOMStaxWriter
argument_list|(
name|strWriter
argument_list|)
decl_stmt|;
name|this
operator|.
name|cat
operator|.
name|scheme
operator|=
literal|"www.apache.org"
expr_stmt|;
name|this
operator|.
name|cat
operator|.
name|term
operator|=
literal|"Goo Data"
expr_stmt|;
name|this
operator|.
name|cat
operator|.
name|label
operator|=
literal|"ignore"
expr_stmt|;
name|this
operator|.
name|cat
operator|.
name|writeRssOutput
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<category domain=\"www.apache.org\">Goo Data</category>"
argument_list|,
name|strWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.AbstractGOMElement.processAttribute(QName, 	 * String)' 	 */
DECL|method|testProcessAttribute
specifier|public
name|void
name|testProcessAttribute
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|cat
operator|.
name|processAttribute
argument_list|(
literal|null
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"qname is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
block|{
name|QName
name|name
init|=
operator|new
name|QName
argument_list|(
literal|"term"
argument_list|)
decl_stmt|;
name|this
operator|.
name|cat
operator|.
name|processAttribute
argument_list|(
name|name
argument_list|,
literal|"helloworld"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"helloworld"
argument_list|,
name|this
operator|.
name|cat
operator|.
name|getTerm
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|cat
operator|.
name|processAttribute
argument_list|(
name|name
argument_list|,
literal|"helloworld"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"duplicated attribute"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
block|{
name|QName
name|name
init|=
operator|new
name|QName
argument_list|(
literal|"scheme"
argument_list|)
decl_stmt|;
name|this
operator|.
name|cat
operator|.
name|processAttribute
argument_list|(
name|name
argument_list|,
literal|"helloworld1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"helloworld1"
argument_list|,
name|this
operator|.
name|cat
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|cat
operator|.
name|processAttribute
argument_list|(
name|name
argument_list|,
literal|"helloworld1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"duplicated attribute"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
block|{
name|QName
name|name
init|=
operator|new
name|QName
argument_list|(
literal|"label"
argument_list|)
decl_stmt|;
name|this
operator|.
name|cat
operator|.
name|processAttribute
argument_list|(
name|name
argument_list|,
literal|"John Cleese"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"John Cleese"
argument_list|,
name|this
operator|.
name|cat
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|cat
operator|.
name|processAttribute
argument_list|(
name|name
argument_list|,
literal|"John Cleese"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"duplicated attribute"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.AbstractGOMElement.processElementValue(String)' 	 */
DECL|method|testProcessElementValue
specifier|public
name|void
name|testProcessElementValue
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|cat
operator|.
name|processElementValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"element value is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
try|try
block|{
name|this
operator|.
name|cat
operator|.
name|processElementValue
argument_list|(
literal|"and again"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"can't contain a text value"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
name|assertNull
argument_list|(
name|this
operator|.
name|cat
operator|.
name|getTextValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.AbstractGOMElement.processEndElement()' 	 */
DECL|method|testProcessEndElement
specifier|public
name|void
name|testProcessEndElement
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|cat
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"term is not set"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
name|this
operator|.
name|cat
operator|.
name|setTerm
argument_list|(
literal|"my Term"
argument_list|)
expr_stmt|;
name|this
operator|.
name|cat
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
name|this
operator|.
name|cat
operator|.
name|setScheme
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|cat
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"scheme is not a absoulte uri"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
name|this
operator|.
name|cat
operator|.
name|setScheme
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|cat
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"scheme is not a absoulte uri and no xmlbase is set"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
block|{
name|this
operator|.
name|cat
operator|.
name|xmlBase
operator|=
literal|"http://www.apache.org"
expr_stmt|;
name|this
operator|.
name|cat
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
block|}
block|{
name|this
operator|.
name|cat
operator|.
name|xmlBase
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|cat
operator|.
name|setScheme
argument_list|(
literal|"http://www.apache.org/test"
argument_list|)
expr_stmt|;
name|this
operator|.
name|cat
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
