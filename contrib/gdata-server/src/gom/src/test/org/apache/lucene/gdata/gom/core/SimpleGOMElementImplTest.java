begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.gom.core
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|FactoryConfigurationError
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMNamespace
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|writer
operator|.
name|GOMStaxWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|writer
operator|.
name|GOMOutputWriter
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_comment
comment|/**  * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|SimpleGOMElementImplTest
specifier|public
class|class
name|SimpleGOMElementImplTest
extends|extends
name|TestCase
block|{
DECL|field|localName
name|String
name|localName
init|=
literal|"test"
decl_stmt|;
DECL|field|impl
name|SimpleGOMElementImpl
name|impl
decl_stmt|;
comment|/** 	 * @see junit.framework.TestCase#setUp() 	 */
annotation|@
name|Override
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|impl
operator|=
operator|new
name|SimpleGOMElementImpl
argument_list|(
name|localName
argument_list|,
name|GOMNamespace
operator|.
name|ATOM_NAMESPACE
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.SimpleGOMElementImpl.processElementValue(String)' 	 */
DECL|method|testProcessElementValue
specifier|public
name|void
name|testProcessElementValue
parameter_list|()
block|{
name|this
operator|.
name|impl
operator|.
name|processElementValue
argument_list|(
literal|"myValue"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myValue"
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getTextValue
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|processElementValue
argument_list|(
literal|"myValue"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"duplicated"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.SimpleGOMElementImpl.processEndElement()' 	 */
DECL|method|testProcessEndElement
specifier|public
name|void
name|testProcessEndElement
parameter_list|()
block|{
comment|// depends validator
name|this
operator|.
name|impl
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setValidator
argument_list|(
operator|new
name|GOMFeedImpl
operator|.
name|PositiveIntegerValidator
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"value is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"requires a element value"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|impl
operator|.
name|setTextValue
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.SimpleGOMElementImpl.SimpleGOMElementImpl(String, 	 * GOMNamespace)' 	 */
DECL|method|testSimpleGOMElementImpl
specifier|public
name|void
name|testSimpleGOMElementImpl
parameter_list|()
block|{
try|try
block|{
operator|new
name|SimpleGOMElementImpl
argument_list|(
literal|null
argument_list|,
name|GOMNamespace
operator|.
name|ATOM_NAMESPACE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"localname is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//
block|}
try|try
block|{
operator|new
name|SimpleGOMElementImpl
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"namespace is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//
block|}
name|SimpleGOMElementImpl
name|impl2
init|=
operator|new
name|SimpleGOMElementImpl
argument_list|(
name|this
operator|.
name|localName
argument_list|,
name|GOMNamespace
operator|.
name|ATOM_NAMESPACE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|impl2
operator|.
name|getQname
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|impl2
operator|.
name|getQname
argument_list|()
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|GOMNamespace
operator|.
name|ATOM_NS_PREFIX
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|impl2
operator|.
name|getQname
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|this
operator|.
name|localName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|impl2
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|this
operator|.
name|localName
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.SimpleGOMElementImpl.writeAtomOutput(GOMWriter)' 	 */
DECL|method|testWriteAtomOutput
specifier|public
name|void
name|testWriteAtomOutput
parameter_list|()
throws|throws
name|XMLStreamException
throws|,
name|FactoryConfigurationError
block|{
block|{
name|StringWriter
name|strWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GOMOutputWriter
name|writer
init|=
operator|new
name|GOMStaxWriter
argument_list|(
name|strWriter
argument_list|)
decl_stmt|;
name|this
operator|.
name|impl
operator|.
name|writeAtomOutput
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<atom:"
operator|+
name|this
operator|.
name|localName
operator|+
literal|"/>"
argument_list|,
name|strWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|StringWriter
name|strWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GOMOutputWriter
name|writer
init|=
operator|new
name|GOMStaxWriter
argument_list|(
name|strWriter
argument_list|)
decl_stmt|;
name|this
operator|.
name|impl
operator|.
name|setTextValue
argument_list|(
literal|"hello world"
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|writeAtomOutput
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<atom:"
operator|+
name|this
operator|.
name|localName
operator|+
literal|">hello world</atom:"
operator|+
name|this
operator|.
name|localName
operator|+
literal|">"
argument_list|,
name|strWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
