begin_unit
begin_package
DECL|package|org.apache.lucene.gdata.gom.core
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|FactoryConfigurationError
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMAuthor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMCategory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMContributor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMElement
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMEntry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMExtension
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMFeed
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMGenerator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMIcon
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMId
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMLink
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMLogo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMNamespace
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMRights
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMSubtitle
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMTitle
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMUpdated
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
operator|.
name|extension
operator|.
name|GOMExtensionFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|writer
operator|.
name|GOMStaxWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|writer
operator|.
name|GOMOutputWriter
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_class
DECL|class|GOMFeedImplTest
specifier|public
class|class
name|GOMFeedImplTest
extends|extends
name|TestCase
block|{
DECL|field|TEST_LOCAL_NAME
specifier|static
specifier|final
name|String
name|TEST_LOCAL_NAME
init|=
literal|"testelement"
decl_stmt|;
DECL|field|impl
name|GOMFeedImpl
name|impl
decl_stmt|;
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|impl
operator|=
operator|new
name|GOMFeedImpl
argument_list|()
expr_stmt|;
block|}
DECL|method|testSetNamespace
specifier|public
name|void
name|testSetNamespace
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getNamespaces
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|this
operator|.
name|impl
operator|.
name|getDefaultNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|addNamespace
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NAMESPACE
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NAMESPACE
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getDefaultNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|addNamespace
argument_list|(
name|GOMNamespace
operator|.
name|OPENSEARCH_NAMESPACE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getNamespaces
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|GOMNamespace
operator|.
name|OPENSEARCH_NAMESPACE
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getNamespaces
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// detect defaul ns
name|this
operator|.
name|impl
operator|.
name|addNamespace
argument_list|(
operator|new
name|GOMNamespace
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getNamespaces
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.GOMFeedImpl.getChildParser(QName)' 	 */
DECL|method|testGetChildParser
specifier|public
name|void
name|testGetChildParser
parameter_list|()
block|{
block|{
comment|// atomAuthor*
name|AtomParser
name|parser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"author"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|instanceof
name|GOMAuthor
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getAuthors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getAuthors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// atomCategory*
name|AtomParser
name|parser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"category"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|instanceof
name|GOMCategory
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getCategories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"category"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getCategories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// atomContributor*
name|AtomParser
name|parser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"contributor"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|instanceof
name|GOMContributor
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getContributor
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"contributor"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getContributor
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// atomGenerator?
name|AtomParser
name|parser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"generator"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|instanceof
name|GOMGenerator
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|parser
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getGenerator
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"generator"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"one or zero"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
block|{
comment|// atomIcon?
name|AtomParser
name|parser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"icon"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|instanceof
name|GOMIcon
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|parser
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getIcon
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"icon"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"one or zero"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
block|{
comment|// atomId
name|AtomParser
name|parser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"id"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|instanceof
name|GOMId
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|parser
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exactly one time "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
block|{
comment|// atomLink*
name|AtomParser
name|parser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"link"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|instanceof
name|GOMLink
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getLinks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"link"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getLinks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// atomLogo?
name|AtomParser
name|parser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"logo"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|instanceof
name|GOMLogo
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|parser
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getLogo
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"logo"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"zero or one"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
block|{
comment|// atomRights?
name|AtomParser
name|parser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"rights"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|instanceof
name|GOMRights
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|parser
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getRights
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"rights"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"zero or one"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
block|{
comment|// atomSubtitle?
name|AtomParser
name|parser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"subtitle"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|instanceof
name|GOMSubtitle
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|parser
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getSubtitle
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"subtitle"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"zero or one"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
block|{
comment|// atomTitle
name|AtomParser
name|parser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"title"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|instanceof
name|GOMTitle
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|parser
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exactly one time "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
block|{
comment|// atomUpdated
name|AtomParser
name|parser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"updated"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|instanceof
name|GOMUpdated
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|parser
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getUpdated
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"updated"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exactly one time "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
block|{
comment|// atomEntry*
name|AtomParser
name|parser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"entry"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|instanceof
name|GOMEntry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"entry"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// openSearch
block|{
comment|// startIndex
name|AtomParser
name|parser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|OPENSEARCH_NS_URI
argument_list|,
literal|"startIndex"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
block|{
comment|// startIndex
name|AtomParser
name|parser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|OPENSEARCH_NS_URI
argument_list|,
literal|"itemsPerPage"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.GOMFeedImpl.processElementValue(String)' 	 */
DECL|method|testProcessElementValue
specifier|public
name|void
name|testProcessElementValue
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|processElementValue
argument_list|(
literal|"some"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no element text"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.GOMFeedImpl.processEndElement()' 	 *  	 * atomFeed = element atom:feed { atomCommonAttributes, (atomAuthor*& 	 * atomCategory*& atomContributor*& atomGenerator?& atomIcon?& atomId& 	 * atomLink*& atomLogo?& atomRights?& atomSubtitle?& atomTitle& 	 * atomUpdated& extensionElement*), atomEntry* } 	 */
DECL|method|testProcessEndElement
specifier|public
name|void
name|testProcessEndElement
parameter_list|()
block|{
name|this
operator|.
name|impl
operator|.
name|addAuthor
argument_list|(
operator|new
name|GOMAuthorImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setId
argument_list|(
operator|new
name|GOMIdImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setUpdated
argument_list|(
operator|new
name|GOMUpdatedImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setTitle
argument_list|(
operator|new
name|GOMTitleImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
block|{
comment|// author missing
name|this
operator|.
name|impl
operator|.
name|getAuthors
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"missing elements"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
name|this
operator|.
name|impl
operator|.
name|addAuthor
argument_list|(
operator|new
name|GOMAuthorImpl
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// id missing
name|this
operator|.
name|impl
operator|.
name|setId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"missing elements"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
name|this
operator|.
name|impl
operator|.
name|setId
argument_list|(
operator|new
name|GOMIdImpl
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// title missing
name|this
operator|.
name|impl
operator|.
name|setTitle
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"missing elements"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
name|this
operator|.
name|impl
operator|.
name|setTitle
argument_list|(
operator|new
name|GOMTitleImpl
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// updated missing
name|this
operator|.
name|impl
operator|.
name|setUpdated
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"missing elements"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
name|this
operator|.
name|impl
operator|.
name|setUpdated
argument_list|(
operator|new
name|GOMUpdatedImpl
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* 		 * atom:feed elements MUST NOT contain more than one atom:link element 		 * with a rel attribute value of "alternate" that has the same 		 * combination of type and hreflang attribute values. 		 */
block|{
comment|// two identical alternate links missing
name|GOMLink
name|link
init|=
operator|new
name|GOMLinkImpl
argument_list|()
decl_stmt|;
name|link
operator|.
name|setRel
argument_list|(
literal|"alternate"
argument_list|)
expr_stmt|;
name|link
operator|.
name|setHrefLang
argument_list|(
literal|"http://www.apache.org"
argument_list|)
expr_stmt|;
name|link
operator|.
name|setType
argument_list|(
literal|"text/html"
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|addLink
argument_list|(
name|link
argument_list|)
expr_stmt|;
comment|// one is allowed
name|this
operator|.
name|impl
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
comment|// add a second link
name|link
operator|=
operator|new
name|GOMLinkImpl
argument_list|()
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|addLink
argument_list|(
name|link
argument_list|)
expr_stmt|;
name|link
operator|.
name|setRel
argument_list|(
literal|"next"
argument_list|)
expr_stmt|;
name|link
operator|.
name|setHrefLang
argument_list|(
literal|"http://www.apache.org"
argument_list|)
expr_stmt|;
name|link
operator|.
name|setType
argument_list|(
literal|"text/html"
argument_list|)
expr_stmt|;
comment|// one is alternate the other is next
name|this
operator|.
name|impl
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
comment|// a second "identical" alternate link
name|link
operator|=
operator|new
name|GOMLinkImpl
argument_list|()
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|addLink
argument_list|(
name|link
argument_list|)
expr_stmt|;
name|link
operator|.
name|setRel
argument_list|(
literal|"alternate"
argument_list|)
expr_stmt|;
name|link
operator|.
name|setHrefLang
argument_list|(
literal|"http://www.apache.org"
argument_list|)
expr_stmt|;
name|link
operator|.
name|setType
argument_list|(
literal|"text/html"
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"missing elements"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
name|this
operator|.
name|impl
operator|.
name|setUpdated
argument_list|(
operator|new
name|GOMUpdatedImpl
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.GOMFeedImpl.GOMFeedImpl()' 	 */
DECL|method|testGOMFeedImpl
specifier|public
name|void
name|testGOMFeedImpl
parameter_list|()
block|{
name|GOMFeedImpl
name|impl2
init|=
operator|new
name|GOMFeedImpl
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|GOMFeed
operator|.
name|LOCALNAME
argument_list|,
name|impl2
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GOMFeed
operator|.
name|LOCALNAME
argument_list|,
name|impl2
operator|.
name|getQname
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
name|impl2
operator|.
name|getQname
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.GOMFeedImpl.getStartIndex()' and 	 * 'org.apache.lucene.gdata.gom.core.GOMFeedImpl.setStartIndex(int)' 	 */
DECL|method|testGetSetStartIndex
specifier|public
name|void
name|testGetSetStartIndex
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|GOMFeedImpl
operator|.
name|DEFAULT_START_INDEX
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getStartIndex
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setStartIndex
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getStartIndex
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setStartIndex
argument_list|(
operator|-
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getStartIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.GOMFeedImpl.setItemsPerPage(int)' and 	 * 'org.apache.lucene.gdata.gom.core.GOMFeedImpl.getNamespaces()' 	 */
DECL|method|testGetSetItemsPerPage
specifier|public
name|void
name|testGetSetItemsPerPage
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|GOMFeedImpl
operator|.
name|DEFAULT_ITEMS_PER_PAGE
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getItemsPerPage
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setItemsPerPage
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getItemsPerPage
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setItemsPerPage
argument_list|(
operator|-
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getItemsPerPage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.GOMFeedImpl.writeAtomOutput(GOMWriter)' 	 */
DECL|method|testWriteAtomOutput
specifier|public
name|void
name|testWriteAtomOutput
parameter_list|()
throws|throws
name|XMLStreamException
throws|,
name|FactoryConfigurationError
block|{
comment|// write a whole feed and check if all elements are written
name|this
operator|.
name|impl
operator|.
name|addAuthor
argument_list|(
operator|new
name|GOMAuthorImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|addCategory
argument_list|(
operator|new
name|GOMCategoryImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|addContributor
argument_list|(
operator|new
name|GOMContributorImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|addLink
argument_list|(
operator|new
name|GOMLinkImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|addNamespace
argument_list|(
name|GOMNamespace
operator|.
name|OPENSEARCH_NAMESPACE
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setGenerator
argument_list|(
operator|new
name|GOMGeneratorImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setIcon
argument_list|(
operator|new
name|GOMIconImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setId
argument_list|(
operator|new
name|GOMIdImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setLogo
argument_list|(
operator|new
name|GOMLogoImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setRights
argument_list|(
operator|new
name|GOMRightsImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setSubtitle
argument_list|(
operator|new
name|GOMSubtitleImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setTitle
argument_list|(
operator|new
name|GOMTitleImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setUpdated
argument_list|(
operator|new
name|GOMUpdatedImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|extensions
operator|.
name|add
argument_list|(
operator|new
name|TestExtension
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|addNamespace
argument_list|(
name|GOMNamespace
operator|.
name|OPENSEARCH_NAMESPACE
argument_list|)
expr_stmt|;
name|StringWriter
name|stW
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GOMOutputWriter
name|writer
init|=
operator|new
name|GOMStaxWriter
argument_list|(
name|stW
argument_list|)
decl_stmt|;
name|this
operator|.
name|impl
operator|.
name|writeAtomOutput
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|String
name|string
init|=
name|stW
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"xmlns:openSearch"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"xmlns=\"http://www.w3.org/2005/Atom\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<"
operator|+
name|GOMAuthor
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<"
operator|+
name|GOMCategory
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<"
operator|+
name|GOMContributor
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<"
operator|+
name|GOMLink
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<"
operator|+
name|GOMGenerator
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<"
operator|+
name|GOMIcon
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<"
operator|+
name|GOMId
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<"
operator|+
name|GOMLogo
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<"
operator|+
name|GOMRights
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<"
operator|+
name|GOMSubtitle
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<"
operator|+
name|GOMTitle
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<"
operator|+
name|GOMUpdated
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<openSearch:itemsPerPage>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<openSearch:startIndex>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.GOMFeedImpl.writeRssOutput(GOMWriter)' 	 */
DECL|method|testWriteRssOutput
specifier|public
name|void
name|testWriteRssOutput
parameter_list|()
throws|throws
name|XMLStreamException
throws|,
name|FactoryConfigurationError
block|{
comment|// write a whole feed and check if all elements are written
name|this
operator|.
name|impl
operator|.
name|addAuthor
argument_list|(
operator|new
name|GOMAuthorImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|addCategory
argument_list|(
operator|new
name|GOMCategoryImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|addContributor
argument_list|(
operator|new
name|GOMContributorImpl
argument_list|()
argument_list|)
expr_stmt|;
name|GOMLinkImpl
name|impl2
init|=
operator|new
name|GOMLinkImpl
argument_list|()
decl_stmt|;
name|impl2
operator|.
name|setHref
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|impl2
operator|.
name|setRel
argument_list|(
literal|"alternate"
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|addLink
argument_list|(
name|impl2
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|addNamespace
argument_list|(
name|GOMNamespace
operator|.
name|OPENSEARCH_NAMESPACE
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setGenerator
argument_list|(
operator|new
name|GOMGeneratorImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setIcon
argument_list|(
operator|new
name|GOMIconImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setId
argument_list|(
operator|new
name|GOMIdImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setLogo
argument_list|(
operator|new
name|GOMLogoImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setRights
argument_list|(
operator|new
name|GOMRightsImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setSubtitle
argument_list|(
operator|new
name|GOMSubtitleImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setTitle
argument_list|(
operator|new
name|GOMTitleImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setUpdated
argument_list|(
operator|new
name|GOMUpdatedImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|addNamespace
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NAMESPACE
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|addNamespace
argument_list|(
name|GOMNamespace
operator|.
name|OPENSEARCH_NAMESPACE
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|extensions
operator|.
name|add
argument_list|(
operator|new
name|TestExtension
argument_list|()
argument_list|)
expr_stmt|;
name|StringWriter
name|stW
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GOMOutputWriter
name|writer
init|=
operator|new
name|GOMStaxWriter
argument_list|(
name|stW
argument_list|)
decl_stmt|;
name|this
operator|.
name|impl
operator|.
name|writeRssOutput
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|String
name|string
init|=
name|stW
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"xmlns:openSearch"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"xmlns:atom"
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO
comment|// assertTrue(string.contains("<language"));
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<"
operator|+
name|GOMCategory
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// author
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<managingEditor"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<"
operator|+
name|GOMLink
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<"
operator|+
name|GOMGenerator
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<image><url"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<atom:"
operator|+
name|GOMId
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<copyright"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<"
operator|+
name|GOMTitle
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<lastBuildDate"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<openSearch:itemsPerPage>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<openSearch:startIndex>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<atom:test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.GOMFeedImpl.getExtensions()' 	 */
DECL|method|testGetExtensions
specifier|public
name|void
name|testGetExtensions
parameter_list|()
block|{
block|{
name|List
argument_list|<
name|GOMExtension
argument_list|>
name|extensions
init|=
name|this
operator|.
name|impl
operator|.
name|getExtensions
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|extensions
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|extensions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QName
name|name
init|=
operator|new
name|QName
argument_list|(
name|TEST_LOCAL_NAME
argument_list|)
decl_stmt|;
name|this
operator|.
name|impl
operator|.
name|setExtensionFactory
argument_list|(
operator|new
name|TestExtendsionFactory
argument_list|()
argument_list|)
expr_stmt|;
name|AtomParser
name|childParser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|childParser
operator|instanceof
name|TestExtension
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|GOMExtension
argument_list|>
name|extensions
init|=
name|this
operator|.
name|impl
operator|.
name|getExtensions
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|extensions
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|extensions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|childParser
argument_list|,
name|extensions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.GOMFeedImpl.setExtensionFactory(GOMExtensionFactory)' 	 */
DECL|method|testSetExtensionFactory
specifier|public
name|void
name|testSetExtensionFactory
parameter_list|()
block|{
name|QName
name|name
init|=
operator|new
name|QName
argument_list|(
name|TEST_LOCAL_NAME
argument_list|)
decl_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no child hander for this qname"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
name|this
operator|.
name|impl
operator|.
name|setExtensionFactory
argument_list|(
operator|new
name|TestExtendsionFactory
argument_list|()
argument_list|)
expr_stmt|;
name|AtomParser
name|childParser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|childParser
operator|instanceof
name|TestExtension
argument_list|)
expr_stmt|;
block|}
DECL|class|TestExtendsionFactory
specifier|static
class|class
name|TestExtendsionFactory
implements|implements
name|GOMExtensionFactory
block|{
DECL|method|canHandleExtensionElement
specifier|public
name|GOMExtension
name|canHandleExtensionElement
parameter_list|(
name|QName
name|aName
parameter_list|)
block|{
if|if
condition|(
name|aName
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|TEST_LOCAL_NAME
argument_list|)
condition|)
return|return
operator|new
name|TestExtension
argument_list|()
return|;
return|return
literal|null
return|;
block|}
DECL|method|getNamespaces
specifier|public
name|List
argument_list|<
name|GOMNamespace
argument_list|>
name|getNamespaces
parameter_list|()
block|{
name|LinkedList
argument_list|<
name|GOMNamespace
argument_list|>
name|name
init|=
operator|new
name|LinkedList
argument_list|<
name|GOMNamespace
argument_list|>
argument_list|()
decl_stmt|;
name|name
operator|.
name|add
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NAMESPACE
argument_list|)
expr_stmt|;
return|return
name|name
return|;
block|}
block|}
DECL|class|TestExtension
specifier|static
class|class
name|TestExtension
implements|implements
name|GOMExtension
block|{
DECL|method|getQname
specifier|public
name|QName
name|getQname
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
DECL|method|setNamespaceUri
specifier|public
name|void
name|setNamespaceUri
parameter_list|(
name|String
name|aString
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
DECL|method|setNamespacePrefix
specifier|public
name|void
name|setNamespacePrefix
parameter_list|(
name|String
name|aString
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
DECL|method|setLocalName
specifier|public
name|void
name|setLocalName
parameter_list|(
name|String
name|aLocalName
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
DECL|method|getLocalName
specifier|public
name|String
name|getLocalName
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
DECL|method|getTextValue
specifier|public
name|String
name|getTextValue
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
DECL|method|setTextValue
specifier|public
name|void
name|setTextValue
parameter_list|(
name|String
name|aTextValue
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
DECL|method|addChild
specifier|public
name|void
name|addChild
parameter_list|(
name|GOMElement
name|aElement
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
DECL|method|getParent
specifier|public
name|GOMElement
name|getParent
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
DECL|method|writeAtomOutput
specifier|public
name|void
name|writeAtomOutput
parameter_list|(
name|GOMOutputWriter
name|aStreamWriter
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|aStreamWriter
operator|.
name|writeSimpleXMLElement
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|,
literal|"helloworld"
argument_list|)
expr_stmt|;
block|}
DECL|method|writeRssOutput
specifier|public
name|void
name|writeRssOutput
parameter_list|(
name|GOMOutputWriter
name|aStreamWriter
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|aStreamWriter
operator|.
name|writeSimpleXMLElement
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"test"
argument_list|,
name|GOMNamespace
operator|.
name|ATOM_NS_PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|"helloworld"
argument_list|)
expr_stmt|;
block|}
DECL|method|processElementValue
specifier|public
name|void
name|processElementValue
parameter_list|(
name|String
name|aValue
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
DECL|method|processAttribute
specifier|public
name|void
name|processAttribute
parameter_list|(
name|QName
name|aQName
parameter_list|,
name|String
name|aValue
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
DECL|method|processEndElement
specifier|public
name|void
name|processEndElement
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
block|}
DECL|method|getChildParser
specifier|public
name|AtomParser
name|getChildParser
parameter_list|(
name|QName
name|aName
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
DECL|method|writeRssOutput
specifier|public
name|void
name|writeRssOutput
parameter_list|(
name|GOMOutputWriter
name|aStreamWriter
parameter_list|,
name|String
name|aRssName
parameter_list|)
throws|throws
name|XMLStreamException
block|{  		}
DECL|method|getXmlBase
specifier|public
name|String
name|getXmlBase
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
DECL|method|getXmlLang
specifier|public
name|String
name|getXmlLang
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
block|}
block|}
end_class
end_unit
