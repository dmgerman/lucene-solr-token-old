begin_unit
begin_package
DECL|package|org.apache.lucene.gdata.gom.core
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMAuthor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|writer
operator|.
name|GOMStaxWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|writer
operator|.
name|GOMOutputWriter
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_comment
comment|/**  * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|GOMAuthorImplTest
specifier|public
class|class
name|GOMAuthorImplTest
extends|extends
name|TestCase
block|{
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.GOMAuthorImpl.writeRssOutput(GOMWriter)' 	 */
DECL|method|testWriteRssOutput
specifier|public
name|void
name|testWriteRssOutput
parameter_list|()
throws|throws
name|XMLStreamException
block|{
name|GOMAuthorImpl
name|impl
init|=
operator|new
name|GOMAuthorImpl
argument_list|()
decl_stmt|;
try|try
block|{
name|impl
operator|.
name|writeRssOutput
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"writer is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{ 		}
name|StringWriter
name|writer2
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GOMOutputWriter
name|writer
init|=
operator|new
name|GOMStaxWriter
argument_list|(
name|writer2
argument_list|)
decl_stmt|;
name|impl
operator|.
name|writeRssOutput
argument_list|(
name|writer
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer2
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<test></test>"
argument_list|,
name|writer2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|impl
operator|.
name|setEmail
argument_list|(
literal|"simonw@apache.org"
argument_list|)
expr_stmt|;
name|impl
operator|.
name|setUri
argument_list|(
literal|"someuri"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer2
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|GOMStaxWriter
argument_list|(
name|writer2
argument_list|)
expr_stmt|;
name|impl
operator|.
name|writeRssOutput
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer2
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|writer2
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<"
operator|+
name|GOMAuthor
operator|.
name|LOCALNAME
operator|+
literal|">"
operator|+
name|impl
operator|.
name|getEmail
argument_list|()
operator|+
literal|"</"
operator|+
name|GOMAuthor
operator|.
name|LOCALNAME
operator|+
literal|">"
argument_list|,
name|writer2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|impl
operator|.
name|setName
argument_list|(
literal|"simonw"
argument_list|)
expr_stmt|;
name|writer2
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|GOMStaxWriter
argument_list|(
name|writer2
argument_list|)
expr_stmt|;
name|impl
operator|.
name|writeRssOutput
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer2
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|writer2
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<"
operator|+
name|GOMAuthor
operator|.
name|LOCALNAME
operator|+
literal|">"
operator|+
name|impl
operator|.
name|getEmail
argument_list|()
operator|+
literal|"("
operator|+
name|impl
operator|.
name|getName
argument_list|()
operator|+
literal|")</"
operator|+
name|GOMAuthor
operator|.
name|LOCALNAME
operator|+
literal|">"
argument_list|,
name|writer2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
