begin_unit
begin_package
DECL|package|org.apache.lucene.gdata.gom.core
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|FactoryConfigurationError
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|AtomMediaType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMAuthor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMCategory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMContent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMContributor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMEntry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMExtension
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMGenerator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMIcon
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMId
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMLink
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMLogo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMNamespace
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMPublished
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMRights
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMSubtitle
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMSummary
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMTitle
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMUpdated
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
operator|.
name|GOMFeedImplTest
operator|.
name|TestExtendsionFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
operator|.
name|GOMFeedImplTest
operator|.
name|TestExtension
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|writer
operator|.
name|GOMOutputWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|writer
operator|.
name|GOMStaxWriter
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_class
DECL|class|GOMEntryImplTest
specifier|public
class|class
name|GOMEntryImplTest
extends|extends
name|TestCase
block|{
DECL|field|TEST_LOCAL_NAME
specifier|private
specifier|static
specifier|final
name|String
name|TEST_LOCAL_NAME
init|=
name|GOMFeedImplTest
operator|.
name|TEST_LOCAL_NAME
decl_stmt|;
DECL|field|impl
specifier|private
name|GOMEntryImpl
name|impl
decl_stmt|;
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|this
operator|.
name|impl
operator|=
operator|new
name|GOMEntryImpl
argument_list|()
expr_stmt|;
block|}
DECL|method|testSetNamespace
specifier|public
name|void
name|testSetNamespace
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getNamespaces
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|this
operator|.
name|impl
operator|.
name|getDefaultNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|addNamespace
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NAMESPACE
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NAMESPACE
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getDefaultNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|addNamespace
argument_list|(
name|GOMNamespace
operator|.
name|OPENSEARCH_NAMESPACE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getNamespaces
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|GOMNamespace
operator|.
name|OPENSEARCH_NAMESPACE
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getNamespaces
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// detect defaul ns
name|this
operator|.
name|impl
operator|.
name|addNamespace
argument_list|(
operator|new
name|GOMNamespace
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getNamespaces
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.GOMEntryImpl.getChildParser(QName)' 	 */
DECL|method|testGetChildParser
specifier|public
name|void
name|testGetChildParser
parameter_list|()
block|{
block|{
comment|// atomAuthor*
name|AtomParser
name|parser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"author"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|instanceof
name|GOMAuthor
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getAuthors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"author"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getAuthors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// atomCategory*
name|AtomParser
name|parser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"category"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|instanceof
name|GOMCategory
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getCategories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"category"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getCategories
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// atomContributor*
name|AtomParser
name|parser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"contributor"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|instanceof
name|GOMContributor
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getContributor
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"contributor"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getContributor
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// atomId
name|AtomParser
name|parser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"id"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|instanceof
name|GOMId
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|parser
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exactly one time "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
block|{
comment|// atomLink*
name|AtomParser
name|parser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"link"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|instanceof
name|GOMLink
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getLinks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"link"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getLinks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// atomRights?
name|AtomParser
name|parser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"rights"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|instanceof
name|GOMRights
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|parser
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getRights
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"rights"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"zero or one"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
block|{
comment|// atomTitle
name|AtomParser
name|parser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"title"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|instanceof
name|GOMTitle
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|parser
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exactly one time "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
block|{
comment|// atomUpdated
name|AtomParser
name|parser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"updated"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|instanceof
name|GOMUpdated
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|parser
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getUpdated
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"updated"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exactly one time "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
block|{
comment|// atomSource?
name|AtomParser
name|parser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"source"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|instanceof
name|GOMSource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parser
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"source"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"duplicated element"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
block|{
comment|// atomSummary?
name|AtomParser
name|parser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"summary"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|instanceof
name|GOMSummary
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parser
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getSummary
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"summary"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"duplicated element"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
block|{
comment|// atomContent?
name|AtomParser
name|parser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"content"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|instanceof
name|GOMContent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parser
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"content"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"duplicated element"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
block|{
comment|// atomContent?
name|AtomParser
name|parser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"published"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|parser
operator|instanceof
name|GOMPublished
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parser
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getPublished
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
literal|"published"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"duplicated element"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.GOMEntryImpl.processEndElement()' 	 */
DECL|method|testProcessEndElement
specifier|public
name|void
name|testProcessEndElement
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"missing elements"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
comment|// atom:entry elements MUST contain exactly one atom:id element.
name|this
operator|.
name|impl
operator|.
name|setId
argument_list|(
operator|new
name|GOMIdImpl
argument_list|()
argument_list|)
expr_stmt|;
comment|/* 		 * atom:entry elements that contain no child atom:content element MUST 		 * contain at least one atom:link element with a rel attribute value of 		 * "alternate". 		 */
name|GOMLink
name|link
init|=
operator|new
name|GOMLinkImpl
argument_list|()
decl_stmt|;
name|link
operator|.
name|setRel
argument_list|(
literal|"alternate"
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|addLink
argument_list|(
name|link
argument_list|)
expr_stmt|;
comment|/* 		 * atom:entry elements MUST contain exactly one atom:title element. 		 */
name|this
operator|.
name|impl
operator|.
name|setTitle
argument_list|(
operator|new
name|GOMTitleImpl
argument_list|()
argument_list|)
expr_stmt|;
comment|/* 		 * atom:entry elements MUST contain exactly one atom:updated element. 		 */
name|this
operator|.
name|impl
operator|.
name|setUpdated
argument_list|(
operator|new
name|GOMUpdatedImpl
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|this
operator|.
name|impl
operator|.
name|setId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"id is missing"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
name|this
operator|.
name|impl
operator|.
name|setId
argument_list|(
operator|new
name|GOMIdImpl
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|this
operator|.
name|impl
operator|.
name|getLinks
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"link alternate is missing"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
name|this
operator|.
name|impl
operator|.
name|setContent
argument_list|(
operator|new
name|GOMContentImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setContent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|addLink
argument_list|(
name|link
argument_list|)
expr_stmt|;
block|}
block|{
name|this
operator|.
name|impl
operator|.
name|setTitle
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"title is missing"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
name|this
operator|.
name|impl
operator|.
name|setTitle
argument_list|(
operator|new
name|GOMTitleImpl
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|this
operator|.
name|impl
operator|.
name|setUpdated
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Updated is missing"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
name|this
operator|.
name|impl
operator|.
name|setUpdated
argument_list|(
operator|new
name|GOMUpdatedImpl
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* 		 * atom:entry elements MUST NOT contain more than one atom:link element 		 * with a rel attribute value of "alternate" that has the same 		 * combination of type and hreflang attribute values. 		 */
name|link
operator|.
name|setType
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|link
operator|.
name|setHrefLang
argument_list|(
literal|"http://www.apache.org"
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|addLink
argument_list|(
name|link
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"doulbe alternate link with same type and hreflang"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
name|this
operator|.
name|impl
operator|.
name|getLinks
argument_list|()
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|/* 		 * # atom:entry elements MUST contain an atom:summary element in either 		 * of the following cases: 		 *  		 * the atom:entry contains an atom:content that has a "src" attribute 		 * (and is thus empty). the atom:entry contains content that is encoded 		 * in Base64; i.e., the "type" attribute of atom:content is a MIME media 		 * type [MIMEREG], but is not an XML media type [RFC3023], does not 		 * begin with "text/", and does not end with "/xml" or "+xml". 		 *  		 *  		 */
name|GOMContent
name|c
init|=
operator|new
name|GOMContentImpl
argument_list|()
decl_stmt|;
name|c
operator|.
name|setSrc
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setContent
argument_list|(
name|c
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"no summary"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
name|c
operator|.
name|setSrc
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|c
operator|.
name|setAtomMediaType
argument_list|(
name|AtomMediaType
operator|.
name|BINARY
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"no summary"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.GOMEntryImpl.GOMEntryImpl()' 	 */
DECL|method|testGOMEntryImpl
specifier|public
name|void
name|testGOMEntryImpl
parameter_list|()
block|{
name|GOMEntryImpl
name|impl2
init|=
operator|new
name|GOMEntryImpl
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|impl2
operator|.
name|getQname
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GOMEntry
operator|.
name|LOCALNAME
argument_list|,
name|impl
operator|.
name|getQname
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GOMEntry
operator|.
name|LOCALNAME
argument_list|,
name|this
operator|.
name|impl
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
name|impl
operator|.
name|getQname
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.GOMEntryImpl.writeAtomOutput(GOMOutputWriter)' 	 */
DECL|method|testWriteAtomOutput
specifier|public
name|void
name|testWriteAtomOutput
parameter_list|()
throws|throws
name|XMLStreamException
throws|,
name|FactoryConfigurationError
block|{
comment|// write a whole feed and check if all elements are written
name|this
operator|.
name|impl
operator|.
name|addAuthor
argument_list|(
operator|new
name|GOMAuthorImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|addCategory
argument_list|(
operator|new
name|GOMCategoryImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|addContributor
argument_list|(
operator|new
name|GOMContributorImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|addLink
argument_list|(
operator|new
name|GOMLinkImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setContent
argument_list|(
operator|new
name|GOMContentImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setId
argument_list|(
operator|new
name|GOMIdImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setRights
argument_list|(
operator|new
name|GOMRightsImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setSummary
argument_list|(
operator|new
name|GOMSummaryImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setTitle
argument_list|(
operator|new
name|GOMTitleImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setUpdated
argument_list|(
operator|new
name|GOMUpdatedImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setSource
argument_list|(
operator|new
name|GOMSourceImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setPublished
argument_list|(
operator|new
name|GOMPublishedImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|extensions
operator|.
name|add
argument_list|(
operator|new
name|GOMFeedImplTest
operator|.
name|TestExtension
argument_list|()
argument_list|)
expr_stmt|;
name|StringWriter
name|stW
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GOMOutputWriter
name|writer
init|=
operator|new
name|GOMStaxWriter
argument_list|(
name|stW
argument_list|)
decl_stmt|;
name|this
operator|.
name|impl
operator|.
name|writeAtomOutput
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|String
name|string
init|=
name|stW
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"xmlns=\"http://www.w3.org/2005/Atom\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|startsWith
argument_list|(
literal|"<"
operator|+
name|GOMEntry
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<"
operator|+
name|GOMAuthor
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<"
operator|+
name|GOMCategory
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<"
operator|+
name|GOMContributor
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<"
operator|+
name|GOMLink
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<"
operator|+
name|GOMId
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<"
operator|+
name|GOMRights
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<"
operator|+
name|GOMSummary
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<"
operator|+
name|GOMContent
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<"
operator|+
name|GOMTitle
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<"
operator|+
name|GOMUpdated
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<"
operator|+
name|GOMSource
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<"
operator|+
name|GOMPublished
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|endsWith
argument_list|(
literal|"</entry>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.GOMEntryImpl.writeRssOutput(GOMOutputWriter)' 	 */
DECL|method|testWriteRssOutputGOMOutputWriter
specifier|public
name|void
name|testWriteRssOutputGOMOutputWriter
parameter_list|()
throws|throws
name|XMLStreamException
throws|,
name|FactoryConfigurationError
block|{
comment|// write a whole feed and check if all elements are written
name|this
operator|.
name|impl
operator|.
name|addAuthor
argument_list|(
operator|new
name|GOMAuthorImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|addCategory
argument_list|(
operator|new
name|GOMCategoryImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|addContributor
argument_list|(
operator|new
name|GOMContributorImpl
argument_list|()
argument_list|)
expr_stmt|;
name|GOMLink
name|link
init|=
operator|new
name|GOMLinkImpl
argument_list|()
decl_stmt|;
name|link
operator|.
name|setRel
argument_list|(
literal|"enclosure"
argument_list|)
expr_stmt|;
name|link
operator|.
name|setHref
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|link
operator|.
name|setType
argument_list|(
literal|"testType"
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|addLink
argument_list|(
name|link
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setContent
argument_list|(
operator|new
name|GOMContentImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setId
argument_list|(
operator|new
name|GOMIdImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setRights
argument_list|(
operator|new
name|GOMRightsImpl
argument_list|()
argument_list|)
expr_stmt|;
name|GOMSummaryImpl
name|summ
init|=
operator|new
name|GOMSummaryImpl
argument_list|()
decl_stmt|;
name|summ
operator|.
name|xmlLang
operator|=
literal|"de"
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setSummary
argument_list|(
name|summ
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setTitle
argument_list|(
operator|new
name|GOMTitleImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setUpdated
argument_list|(
operator|new
name|GOMUpdatedImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setSource
argument_list|(
operator|new
name|GOMSourceImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|setPublished
argument_list|(
operator|new
name|GOMPublishedImpl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|impl
operator|.
name|extensions
operator|.
name|add
argument_list|(
operator|new
name|GOMFeedImplTest
operator|.
name|TestExtension
argument_list|()
argument_list|)
expr_stmt|;
name|StringWriter
name|stW
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GOMOutputWriter
name|writer
init|=
operator|new
name|GOMStaxWriter
argument_list|(
name|stW
argument_list|)
decl_stmt|;
name|this
operator|.
name|impl
operator|.
name|writeRssOutput
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|String
name|string
init|=
name|stW
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"xmlns:atom=\"http://www.w3.org/2005/Atom\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|startsWith
argument_list|(
literal|"<"
operator|+
name|GOMEntry
operator|.
name|LOCALNAME_RSS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<"
operator|+
name|GOMId
operator|.
name|LOCALNAME_RSS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<pubDate"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<atom:"
operator|+
name|GOMUpdated
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<"
operator|+
name|GOMId
operator|.
name|LOCALNAME_RSS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<language"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<category domain=\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<title"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<atom:summary"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<description"
argument_list|)
argument_list|)
expr_stmt|;
comment|// a link element
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<enclosure"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<author"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|contains
argument_list|(
literal|"<atom:test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|string
operator|.
name|endsWith
argument_list|(
literal|"</item>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.GOMEntryImpl.getExtensions()' 	 */
DECL|method|testGetExtensions
specifier|public
name|void
name|testGetExtensions
parameter_list|()
block|{
block|{
name|List
argument_list|<
name|GOMExtension
argument_list|>
name|extensions
init|=
name|this
operator|.
name|impl
operator|.
name|getExtensions
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|extensions
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|extensions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QName
name|name
init|=
operator|new
name|QName
argument_list|(
name|TEST_LOCAL_NAME
argument_list|)
decl_stmt|;
name|this
operator|.
name|impl
operator|.
name|setExtensionFactory
argument_list|(
operator|new
name|TestExtendsionFactory
argument_list|()
argument_list|)
expr_stmt|;
name|AtomParser
name|childParser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|childParser
operator|instanceof
name|TestExtension
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|GOMExtension
argument_list|>
name|extensions
init|=
name|this
operator|.
name|impl
operator|.
name|getExtensions
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|extensions
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|extensions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|childParser
argument_list|,
name|extensions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.GOMEntryImpl.setExtensionFactory(GOMExtensionFactory)' 	 */
DECL|method|testSetExtensionFactory
specifier|public
name|void
name|testSetExtensionFactory
parameter_list|()
block|{
name|QName
name|name
init|=
operator|new
name|QName
argument_list|(
name|TEST_LOCAL_NAME
argument_list|)
decl_stmt|;
try|try
block|{
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no child hander for this qname"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
name|this
operator|.
name|impl
operator|.
name|setExtensionFactory
argument_list|(
operator|new
name|TestExtendsionFactory
argument_list|()
argument_list|)
expr_stmt|;
name|AtomParser
name|childParser
init|=
name|this
operator|.
name|impl
operator|.
name|getChildParser
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|childParser
operator|instanceof
name|TestExtension
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
