begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.gom.core
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|FactoryConfigurationError
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|writer
operator|.
name|GOMStaxWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|writer
operator|.
name|GOMOutputWriter
import|;
end_import
begin_comment
comment|/**  * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|GOMDateConstructImplTest
specifier|public
class|class
name|GOMDateConstructImplTest
extends|extends
name|TestCase
block|{
DECL|field|DATE
specifier|private
specifier|static
specifier|final
name|String
name|DATE
init|=
literal|"2003-12-13T18:30:02+02:00"
decl_stmt|;
DECL|field|DATE_RSS
specifier|private
specifier|static
specifier|final
name|String
name|DATE_RSS
init|=
literal|"Sat, 13 Dec 2003 16:30:02 +0000"
decl_stmt|;
DECL|field|DATE1
specifier|private
specifier|static
specifier|final
name|String
name|DATE1
init|=
literal|"2003-12-13T18:30:02.25Z"
decl_stmt|;
DECL|field|updateImpl
specifier|private
name|GOMUpdatedImpl
name|updateImpl
decl_stmt|;
DECL|field|publishImpl
specifier|private
name|GOMPublishedImpl
name|publishImpl
decl_stmt|;
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|updateImpl
operator|=
operator|new
name|GOMUpdatedImpl
argument_list|()
expr_stmt|;
name|this
operator|.
name|publishImpl
operator|=
operator|new
name|GOMPublishedImpl
argument_list|()
expr_stmt|;
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.GOMDateConstructImpl.processElementValue(String)' 	 */
DECL|method|testProcessElementValue
specifier|public
name|void
name|testProcessElementValue
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|updateImpl
operator|.
name|processElementValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must not be null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//
block|}
try|try
block|{
name|this
operator|.
name|updateImpl
operator|.
name|processElementValue
argument_list|(
literal|"not a date"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"illegal string"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
name|this
operator|.
name|updateImpl
operator|.
name|processElementValue
argument_list|(
name|DATE
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|this
operator|.
name|updateImpl
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|updateImpl
operator|.
name|processElementValue
argument_list|(
name|DATE1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|this
operator|.
name|updateImpl
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.GOMDateConstructImpl.processEndElement()' 	 */
DECL|method|testProcessEndElement
specifier|public
name|void
name|testProcessEndElement
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|updateImpl
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"no element value"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GDataParseException
name|e
parameter_list|)
block|{
comment|//
block|}
name|this
operator|.
name|updateImpl
operator|.
name|setDate
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|updateImpl
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.GOMDateConstructImpl.writeAtomOutput(GOMWriter)' 	 */
DECL|method|testWriteAtomOutput
specifier|public
name|void
name|testWriteAtomOutput
parameter_list|()
throws|throws
name|XMLStreamException
throws|,
name|FactoryConfigurationError
block|{
block|{
name|StringWriter
name|strWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GOMOutputWriter
name|writer
init|=
operator|new
name|GOMStaxWriter
argument_list|(
name|strWriter
argument_list|)
decl_stmt|;
name|this
operator|.
name|updateImpl
operator|.
name|writeAtomOutput
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|strWriter
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"<updated>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|strWriter
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"</updated>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|this
operator|.
name|updateImpl
operator|.
name|processElementValue
argument_list|(
name|DATE
argument_list|)
expr_stmt|;
name|StringWriter
name|strWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GOMOutputWriter
name|writer
init|=
operator|new
name|GOMStaxWriter
argument_list|(
name|strWriter
argument_list|)
decl_stmt|;
name|this
operator|.
name|updateImpl
operator|.
name|writeAtomOutput
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<updated>"
operator|+
name|DATE
operator|+
literal|"</updated>"
argument_list|,
name|strWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|StringWriter
name|strWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GOMOutputWriter
name|writer
init|=
operator|new
name|GOMStaxWriter
argument_list|(
name|strWriter
argument_list|)
decl_stmt|;
name|this
operator|.
name|publishImpl
operator|.
name|writeAtomOutput
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|strWriter
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"<published>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|strWriter
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"</published>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|this
operator|.
name|publishImpl
operator|.
name|processElementValue
argument_list|(
name|DATE
argument_list|)
expr_stmt|;
name|StringWriter
name|strWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GOMOutputWriter
name|writer
init|=
operator|new
name|GOMStaxWriter
argument_list|(
name|strWriter
argument_list|)
decl_stmt|;
name|this
operator|.
name|publishImpl
operator|.
name|writeAtomOutput
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<published>"
operator|+
name|DATE
operator|+
literal|"</published>"
argument_list|,
name|strWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* 	 * Test method for 	 * 'org.apache.lucene.gdata.gom.core.GOMDateConstructImpl.writeRssOutput(GOMWriter)' 	 */
DECL|method|testWriteRssOutput
specifier|public
name|void
name|testWriteRssOutput
parameter_list|()
throws|throws
name|XMLStreamException
throws|,
name|FactoryConfigurationError
block|{
block|{
name|StringWriter
name|strWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GOMOutputWriter
name|writer
init|=
operator|new
name|GOMStaxWriter
argument_list|(
name|strWriter
argument_list|)
decl_stmt|;
name|this
operator|.
name|updateImpl
operator|.
name|writeRssOutput
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|strWriter
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"<atom:updated>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|strWriter
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"</atom:updated>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|this
operator|.
name|updateImpl
operator|.
name|processElementValue
argument_list|(
name|DATE
argument_list|)
expr_stmt|;
name|StringWriter
name|strWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GOMOutputWriter
name|writer
init|=
operator|new
name|GOMStaxWriter
argument_list|(
name|strWriter
argument_list|)
decl_stmt|;
name|this
operator|.
name|updateImpl
operator|.
name|writeRssOutput
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<atom:updated>"
operator|+
name|DATE
operator|+
literal|"</atom:updated>"
argument_list|,
name|strWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|StringWriter
name|strWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GOMOutputWriter
name|writer
init|=
operator|new
name|GOMStaxWriter
argument_list|(
name|strWriter
argument_list|)
decl_stmt|;
name|this
operator|.
name|publishImpl
operator|.
name|writeRssOutput
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|strWriter
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"<pubDate>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|strWriter
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"</pubDate>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|this
operator|.
name|publishImpl
operator|.
name|processElementValue
argument_list|(
name|DATE
argument_list|)
expr_stmt|;
name|StringWriter
name|strWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|GOMOutputWriter
name|writer
init|=
operator|new
name|GOMStaxWriter
argument_list|(
name|strWriter
argument_list|)
decl_stmt|;
name|this
operator|.
name|publishImpl
operator|.
name|writeRssOutput
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<pubDate>"
operator|+
name|DATE_RSS
operator|+
literal|"</pubDate>"
argument_list|,
name|strWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
