begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.gom.core
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMDateConstruct
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
operator|.
name|utils
operator|.
name|GOMUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|writer
operator|.
name|GOMOutputWriter
import|;
end_import
begin_comment
comment|/**  * A Date construct is an element whose content MUST conform to the "date-time"  * production in [RFC3339]. In addition, an uppercase "T" character MUST be used  * to separate date and time, and an uppercase "Z" character MUST be present in  * the absence of a numeric time zone offset.  *   * @author Simon Willnauer  */
end_comment
begin_class
DECL|class|GOMDateConstructImpl
specifier|public
specifier|abstract
class|class
name|GOMDateConstructImpl
extends|extends
name|AbstractGOMElement
implements|implements
name|GOMDateConstruct
block|{
DECL|field|date
specifier|protected
name|long
name|date
decl_stmt|;
comment|/* 	 * save the rfcString to skip the building while rendering the element 	 */
DECL|field|rfc3339String
specifier|protected
name|String
name|rfc3339String
decl_stmt|;
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMDateConstruct#setDate(java.util.Date) 	 */
DECL|method|setDate
specifier|public
name|void
name|setDate
parameter_list|(
name|Date
name|aDate
parameter_list|)
block|{
if|if
condition|(
name|aDate
operator|==
literal|null
condition|)
return|return;
name|this
operator|.
name|date
operator|=
name|aDate
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|this
operator|.
name|rfc3339String
operator|=
name|GOMUtils
operator|.
name|buildRfc3339DateFormat
argument_list|(
name|this
operator|.
name|date
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMDateConstruct#getDate() 	 */
DECL|method|getDate
specifier|public
name|Date
name|getDate
parameter_list|()
block|{
return|return
operator|new
name|Date
argument_list|(
name|this
operator|.
name|date
argument_list|)
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.core.AbstractGOMElement#processElementValue(java.lang.String) 	 */
annotation|@
name|Override
DECL|method|processElementValue
specifier|public
name|void
name|processElementValue
parameter_list|(
name|String
name|aValue
parameter_list|)
block|{
if|if
condition|(
name|aValue
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"element value must not be null"
argument_list|)
throw|;
name|this
operator|.
name|date
operator|=
name|GOMUtils
operator|.
name|parseRfc3339DateFormat
argument_list|(
name|aValue
argument_list|)
expr_stmt|;
name|this
operator|.
name|rfc3339String
operator|=
name|aValue
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.core.AbstractGOMElement#processEndElement() 	 */
annotation|@
name|Override
DECL|method|processEndElement
specifier|public
name|void
name|processEndElement
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|rfc3339String
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|MISSING_ELEMENT_VALUE
argument_list|,
name|this
operator|.
name|localName
argument_list|,
literal|"RFC3339 Date Time"
argument_list|)
argument_list|)
throw|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMElement#writeAtomOutput(org.apache.lucene.gdata.gom.writer.GOMOutputWriter) 	 */
DECL|method|writeAtomOutput
specifier|public
name|void
name|writeAtomOutput
parameter_list|(
name|GOMOutputWriter
name|aStreamWriter
parameter_list|)
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
name|this
operator|.
name|rfc3339String
operator|==
literal|null
condition|)
name|this
operator|.
name|rfc3339String
operator|=
name|GOMUtils
operator|.
name|buildRfc3339DateFormat
argument_list|(
name|this
operator|.
name|date
operator|==
literal|0
condition|?
name|System
operator|.
name|currentTimeMillis
argument_list|()
else|:
name|this
operator|.
name|date
argument_list|)
expr_stmt|;
name|aStreamWriter
operator|.
name|writeSimpleXMLElement
argument_list|(
name|this
operator|.
name|qname
argument_list|,
name|getXmlNamespaceAttributes
argument_list|()
argument_list|,
name|this
operator|.
name|rfc3339String
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
