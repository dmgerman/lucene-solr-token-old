begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.gom.core
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
package|;
end_package
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMCategory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMNamespace
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
operator|.
name|utils
operator|.
name|AtomParserUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
operator|.
name|utils
operator|.
name|GOMUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|writer
operator|.
name|GOMOutputWriter
import|;
end_import
begin_comment
comment|/**  * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|GOMCategoryImpl
specifier|public
class|class
name|GOMCategoryImpl
extends|extends
name|AbstractGOMElement
implements|implements
name|GOMCategory
block|{
DECL|field|DOMAIN
specifier|private
specifier|static
specifier|final
name|String
name|DOMAIN
init|=
literal|"domain"
decl_stmt|;
DECL|field|term
specifier|protected
name|String
name|term
decl_stmt|;
DECL|field|label
specifier|protected
name|String
name|label
decl_stmt|;
DECL|field|scheme
specifier|protected
name|String
name|scheme
decl_stmt|;
comment|/** 	 *  	 */
DECL|method|GOMCategoryImpl
specifier|public
name|GOMCategoryImpl
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|localName
operator|=
name|LOCALNAME
expr_stmt|;
name|this
operator|.
name|qname
operator|=
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
name|this
operator|.
name|localName
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMCategory#setTerm(java.lang.String) 	 */
DECL|method|setTerm
specifier|public
name|void
name|setTerm
parameter_list|(
name|String
name|aTerm
parameter_list|)
block|{
name|this
operator|.
name|term
operator|=
name|aTerm
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMCategory#setLabel(java.lang.String) 	 */
DECL|method|setLabel
specifier|public
name|void
name|setLabel
parameter_list|(
name|String
name|aLabel
parameter_list|)
block|{
name|this
operator|.
name|label
operator|=
name|aLabel
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMCategory#setScheme(java.lang.String) 	 */
DECL|method|setScheme
specifier|public
name|void
name|setScheme
parameter_list|(
name|String
name|aScheme
parameter_list|)
block|{
name|this
operator|.
name|scheme
operator|=
name|aScheme
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMCategory#getTerm() 	 */
DECL|method|getTerm
specifier|public
name|String
name|getTerm
parameter_list|()
block|{
return|return
name|this
operator|.
name|term
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMCategory#getScheme() 	 */
DECL|method|getScheme
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
name|this
operator|.
name|scheme
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMCategory#getLabel() 	 */
DECL|method|getLabel
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
name|this
operator|.
name|label
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.core.AbstractGOMElement#processAttribute(javax.xml.namespace.QName, 	 *      java.lang.String) 	 */
annotation|@
name|Override
DECL|method|processAttribute
specifier|public
name|void
name|processAttribute
parameter_list|(
name|QName
name|aQName
parameter_list|,
name|String
name|aValue
parameter_list|)
block|{
if|if
condition|(
name|aQName
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
literal|"QName must not be null"
argument_list|)
throw|;
if|if
condition|(
name|aQName
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|)
operator|||
name|aQName
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|String
name|localPart
init|=
name|aQName
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
if|if
condition|(
name|localPart
operator|.
name|equals
argument_list|(
name|TERM_ATTRIBUTE
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|term
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AtomParser
operator|.
name|DUPLICATE_ATTRIBUTE
argument_list|,
name|TERM_ATTRIBUTE
argument_list|)
argument_list|)
throw|;
name|this
operator|.
name|term
operator|=
name|aValue
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localPart
operator|.
name|equals
argument_list|(
name|LABLE_ATTRIBUTE
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|label
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AtomParser
operator|.
name|DUPLICATE_ATTRIBUTE
argument_list|,
name|LABLE_ATTRIBUTE
argument_list|)
argument_list|)
throw|;
name|this
operator|.
name|label
operator|=
name|aValue
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localPart
operator|.
name|equals
argument_list|(
name|SCHEME_ATTRIBUTE
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|scheme
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AtomParser
operator|.
name|DUPLICATE_ATTRIBUTE
argument_list|,
name|SCHEME_ATTRIBUTE
argument_list|)
argument_list|)
throw|;
name|this
operator|.
name|scheme
operator|=
name|aValue
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|processAttribute
argument_list|(
name|aQName
argument_list|,
name|aValue
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|super
operator|.
name|processAttribute
argument_list|(
name|aQName
argument_list|,
name|aValue
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.core.AbstractGOMElement#processEndElement() 	 */
annotation|@
name|Override
DECL|method|processEndElement
specifier|public
name|void
name|processEndElement
parameter_list|()
block|{
comment|/* 		 * ATOM defines "undefinedContent" for this. GData defines this as no 		 * content containing element 		 */
if|if
condition|(
name|this
operator|.
name|term
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AtomParser
operator|.
name|MISSING_ELEMENT_ATTRIBUTE
argument_list|,
name|this
operator|.
name|localName
argument_list|,
name|TERM_ATTRIBUTE
argument_list|)
argument_list|)
throw|;
if|if
condition|(
name|this
operator|.
name|scheme
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|AtomParserUtils
operator|.
name|getAbsolutAtomURI
argument_list|(
name|this
operator|.
name|xmlBase
argument_list|,
name|this
operator|.
name|scheme
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AtomParser
operator|.
name|INVALID_ATTRIBUTE
argument_list|,
name|this
operator|.
name|localName
operator|+
literal|" attribute "
operator|+
name|GOMCategory
operator|.
name|SCHEME_ATTRIBUTE
argument_list|,
literal|"absolute uri"
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMElement#writeAtomOutput(org.apache.lucene.gdata.gom.writer.GOMOutputWriter) 	 */
DECL|method|writeAtomOutput
specifier|public
name|void
name|writeAtomOutput
parameter_list|(
name|GOMOutputWriter
name|aStreamWriter
parameter_list|)
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
name|aStreamWriter
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"StreamWriter is null"
argument_list|)
throw|;
name|List
argument_list|<
name|GOMAttribute
argument_list|>
name|list
init|=
operator|new
name|LinkedList
argument_list|<
name|GOMAttribute
argument_list|>
argument_list|()
decl_stmt|;
comment|/* 		 * term attribute is requiered for a category. attribute term { text }, 		 */
name|list
operator|.
name|add
argument_list|(
name|GOMUtils
operator|.
name|buildDefaultNamespaceAttribute
argument_list|(
name|this
operator|.
name|term
argument_list|,
name|TERM_ATTRIBUTE
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|scheme
operator|!=
literal|null
condition|)
name|list
operator|.
name|add
argument_list|(
name|GOMUtils
operator|.
name|buildDefaultNamespaceAttribute
argument_list|(
name|this
operator|.
name|scheme
argument_list|,
name|SCHEME_ATTRIBUTE
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|label
operator|!=
literal|null
condition|)
name|list
operator|.
name|add
argument_list|(
name|GOMUtils
operator|.
name|buildDefaultNamespaceAttribute
argument_list|(
name|this
operator|.
name|label
argument_list|,
name|LABLE_ATTRIBUTE
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|xmlLang
operator|!=
literal|null
condition|)
name|list
operator|.
name|add
argument_list|(
name|GOMUtils
operator|.
name|buildXMLNamespaceAttribute
argument_list|(
name|this
operator|.
name|xmlLang
argument_list|,
name|XML_LANG
argument_list|)
argument_list|)
expr_stmt|;
name|aStreamWriter
operator|.
name|writeSimpleXMLElement
argument_list|(
name|this
operator|.
name|localName
argument_list|,
name|list
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMElement#writeRssOutput(org.apache.lucene.gdata.gom.writer.GOMOutputWriter) 	 */
DECL|method|writeRssOutput
specifier|public
name|void
name|writeRssOutput
parameter_list|(
name|GOMOutputWriter
name|aStreamWriter
parameter_list|)
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
name|aStreamWriter
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"StreamWriter is null"
argument_list|)
throw|;
name|List
argument_list|<
name|GOMAttribute
argument_list|>
name|list
init|=
name|getXmlNamespaceAttributes
argument_list|()
decl_stmt|;
comment|/* 		 * build this domain attr. even if scheme is null or empty 		 */
name|list
operator|.
name|add
argument_list|(
name|GOMUtils
operator|.
name|buildDefaultNamespaceAttribute
argument_list|(
name|this
operator|.
name|scheme
argument_list|,
name|DOMAIN
argument_list|)
argument_list|)
expr_stmt|;
name|aStreamWriter
operator|.
name|writeSimpleXMLElement
argument_list|(
name|this
operator|.
name|localName
argument_list|,
name|list
argument_list|,
name|this
operator|.
name|term
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
