begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.gom.core
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
package|;
end_package
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMLink
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMNamespace
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
operator|.
name|utils
operator|.
name|AtomParserUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
operator|.
name|utils
operator|.
name|GOMUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|writer
operator|.
name|GOMOutputWriter
import|;
end_import
begin_comment
comment|/**  * element atom:link { atomCommonAttributes, attribute href { atomUri },  * attribute rel { atomNCName | atomUri }?, attribute type { atomMediaType }?,  * attribute hreflang { atomLanguageTag }?, attribute title { text }?, attribute  * length { text }?, undefinedContent }  *   * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|GOMLinkImpl
specifier|public
class|class
name|GOMLinkImpl
extends|extends
name|AbstractGOMElement
implements|implements
name|GOMLink
block|{
DECL|field|href
specifier|private
name|String
name|href
decl_stmt|;
DECL|field|rel
specifier|private
name|String
name|rel
decl_stmt|;
DECL|field|type
specifier|private
name|String
name|type
decl_stmt|;
DECL|field|hrefLang
specifier|private
name|String
name|hrefLang
decl_stmt|;
DECL|field|title
specifier|private
name|String
name|title
decl_stmt|;
DECL|field|length
specifier|private
name|Integer
name|length
decl_stmt|;
comment|/** 	 *  	 */
DECL|method|GOMLinkImpl
specifier|public
name|GOMLinkImpl
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|localName
operator|=
name|LOCALNAME
expr_stmt|;
name|this
operator|.
name|qname
operator|=
operator|new
name|QName
argument_list|(
name|this
operator|.
name|localName
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMLink#getHref() 	 */
DECL|method|getHref
specifier|public
name|String
name|getHref
parameter_list|()
block|{
return|return
name|this
operator|.
name|href
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMLink#setHref(java.lang.String) 	 */
DECL|method|setHref
specifier|public
name|void
name|setHref
parameter_list|(
name|String
name|aHref
parameter_list|)
block|{
name|href
operator|=
name|aHref
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMLink#getHrefLang() 	 */
DECL|method|getHrefLang
specifier|public
name|String
name|getHrefLang
parameter_list|()
block|{
return|return
name|this
operator|.
name|hrefLang
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMLink#setHrefLang(java.lang.String) 	 */
DECL|method|setHrefLang
specifier|public
name|void
name|setHrefLang
parameter_list|(
name|String
name|aHrefLang
parameter_list|)
block|{
name|hrefLang
operator|=
name|aHrefLang
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMLink#getLength() 	 */
DECL|method|getLength
specifier|public
name|Integer
name|getLength
parameter_list|()
block|{
return|return
name|this
operator|.
name|length
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMLink#setLength(java.lang.Integer) 	 */
DECL|method|setLength
specifier|public
name|void
name|setLength
parameter_list|(
name|Integer
name|aLength
parameter_list|)
block|{
name|length
operator|=
name|aLength
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMLink#getRel() 	 */
DECL|method|getRel
specifier|public
name|String
name|getRel
parameter_list|()
block|{
return|return
name|this
operator|.
name|rel
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMLink#setRel(java.lang.String) 	 */
DECL|method|setRel
specifier|public
name|void
name|setRel
parameter_list|(
name|String
name|aRel
parameter_list|)
block|{
name|rel
operator|=
name|aRel
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMLink#getTitle() 	 */
DECL|method|getTitle
specifier|public
name|String
name|getTitle
parameter_list|()
block|{
return|return
name|this
operator|.
name|title
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMLink#setTitle(java.lang.String) 	 */
DECL|method|setTitle
specifier|public
name|void
name|setTitle
parameter_list|(
name|String
name|aTitle
parameter_list|)
block|{
name|title
operator|=
name|aTitle
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMLink#getType() 	 */
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMLink#setType(java.lang.String) 	 */
DECL|method|setType
specifier|public
name|void
name|setType
parameter_list|(
name|String
name|aType
parameter_list|)
block|{
name|type
operator|=
name|aType
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.core.AbstractGOMElement#processAttribute(javax.xml.namespace.QName, 	 *      java.lang.String) 	 */
annotation|@
name|Override
DECL|method|processAttribute
specifier|public
name|void
name|processAttribute
parameter_list|(
name|QName
name|aQName
parameter_list|,
name|String
name|aValue
parameter_list|)
block|{
if|if
condition|(
name|aQName
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"QName must not be null"
argument_list|)
throw|;
if|if
condition|(
name|aQName
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|)
operator|||
name|aQName
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|String
name|localName
init|=
name|aQName
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"href"
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|href
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|DUPLICATE_ATTRIBUTE
argument_list|,
literal|"href"
argument_list|)
argument_list|)
throw|;
name|this
operator|.
name|href
operator|=
name|aValue
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"type"
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|type
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|DUPLICATE_ATTRIBUTE
argument_list|,
literal|"type"
argument_list|)
argument_list|)
throw|;
name|this
operator|.
name|type
operator|=
name|aValue
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"rel"
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|rel
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|DUPLICATE_ATTRIBUTE
argument_list|,
literal|"rel"
argument_list|)
argument_list|)
throw|;
name|this
operator|.
name|rel
operator|=
name|aValue
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"title"
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|title
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|DUPLICATE_ATTRIBUTE
argument_list|,
literal|"title"
argument_list|)
argument_list|)
throw|;
name|this
operator|.
name|title
operator|=
name|aValue
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"hreflang"
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|hrefLang
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|DUPLICATE_ATTRIBUTE
argument_list|,
literal|"hreflang"
argument_list|)
argument_list|)
throw|;
name|this
operator|.
name|hrefLang
operator|=
name|aValue
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
literal|"length"
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|length
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|DUPLICATE_ATTRIBUTE
argument_list|,
literal|"length"
argument_list|)
argument_list|)
throw|;
try|try
block|{
name|this
operator|.
name|length
operator|=
operator|new
name|Integer
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|aValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GDataParseException
argument_list|(
literal|"attribute lenght must be an integer"
argument_list|)
throw|;
block|}
block|}
block|}
name|super
operator|.
name|processAttribute
argument_list|(
name|aQName
argument_list|,
name|aValue
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.core.AbstractGOMElement#processEndElement() 	 */
annotation|@
name|Override
DECL|method|processEndElement
specifier|public
name|void
name|processEndElement
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|href
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|MISSING_ELEMENT_ATTRIBUTE
argument_list|,
name|this
operator|.
name|localName
argument_list|,
literal|"href"
argument_list|)
argument_list|)
throw|;
try|try
block|{
name|AtomParserUtils
operator|.
name|getAbsolutAtomURI
argument_list|(
name|this
operator|.
name|xmlBase
argument_list|,
name|this
operator|.
name|href
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|INVALID_ATTRIBUTE
argument_list|,
literal|"href"
argument_list|,
literal|"absolute uri"
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMElement#writeAtomOutput(org.apache.lucene.gdata.gom.writer.GOMOutputWriter) 	 */
DECL|method|writeAtomOutput
specifier|public
name|void
name|writeAtomOutput
parameter_list|(
name|GOMOutputWriter
name|aStreamWriter
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|List
argument_list|<
name|GOMAttribute
argument_list|>
name|attList
init|=
name|getXmlNamespaceAttributes
argument_list|()
decl_stmt|;
name|attList
operator|.
name|add
argument_list|(
name|GOMUtils
operator|.
name|buildDefaultNamespaceAttribute
argument_list|(
name|this
operator|.
name|href
operator|==
literal|null
condition|?
literal|""
else|:
name|this
operator|.
name|href
argument_list|,
literal|"href"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|rel
operator|!=
literal|null
condition|)
name|attList
operator|.
name|add
argument_list|(
name|GOMUtils
operator|.
name|buildDefaultNamespaceAttribute
argument_list|(
name|this
operator|.
name|rel
argument_list|,
literal|"rel"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|title
operator|!=
literal|null
condition|)
name|attList
operator|.
name|add
argument_list|(
name|GOMUtils
operator|.
name|buildDefaultNamespaceAttribute
argument_list|(
name|this
operator|.
name|title
argument_list|,
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|type
operator|!=
literal|null
condition|)
name|attList
operator|.
name|add
argument_list|(
name|GOMUtils
operator|.
name|buildDefaultNamespaceAttribute
argument_list|(
name|this
operator|.
name|type
argument_list|,
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|hrefLang
operator|!=
literal|null
condition|)
name|attList
operator|.
name|add
argument_list|(
name|GOMUtils
operator|.
name|buildDefaultNamespaceAttribute
argument_list|(
name|this
operator|.
name|hrefLang
argument_list|,
literal|"hreflang"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|length
operator|!=
literal|null
condition|)
name|attList
operator|.
name|add
argument_list|(
name|GOMUtils
operator|.
name|buildDefaultNamespaceAttribute
argument_list|(
name|this
operator|.
name|length
operator|.
name|toString
argument_list|()
argument_list|,
literal|"length"
argument_list|)
argument_list|)
expr_stmt|;
name|aStreamWriter
operator|.
name|writeSimpleXMLElement
argument_list|(
name|this
operator|.
name|qname
argument_list|,
name|attList
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMElement#writeRssOutput(org.apache.lucene.gdata.gom.writer.GOMOutputWriter) 	 */
DECL|method|writeRssOutput
specifier|public
name|void
name|writeRssOutput
parameter_list|(
name|GOMOutputWriter
name|aStreamWriter
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|List
argument_list|<
name|GOMAttribute
argument_list|>
name|xmlNamespaceAttributes
init|=
name|getXmlNamespaceAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|rel
operator|!=
literal|null
operator|&&
name|rel
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"enclosure"
argument_list|)
condition|)
block|{
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
name|xmlNamespaceAttributes
operator|.
name|add
argument_list|(
name|GOMUtils
operator|.
name|buildDefaultNamespaceAttribute
argument_list|(
name|type
argument_list|,
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|href
operator|!=
literal|null
condition|)
name|xmlNamespaceAttributes
operator|.
name|add
argument_list|(
name|GOMUtils
operator|.
name|buildDefaultNamespaceAttribute
argument_list|(
name|href
argument_list|,
literal|"href"
argument_list|)
argument_list|)
expr_stmt|;
name|aStreamWriter
operator|.
name|writeSimpleXMLElement
argument_list|(
literal|"enclosure"
argument_list|,
name|xmlNamespaceAttributes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"comments"
operator|.
name|equalsIgnoreCase
argument_list|(
name|this
operator|.
name|rel
argument_list|)
condition|)
name|aStreamWriter
operator|.
name|writeSimpleXMLElement
argument_list|(
literal|"comments"
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|href
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
literal|"alternate"
operator|.
name|equalsIgnoreCase
argument_list|(
name|this
operator|.
name|rel
argument_list|)
condition|)
name|aStreamWriter
operator|.
name|writeSimpleXMLElement
argument_list|(
literal|"link"
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|href
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
