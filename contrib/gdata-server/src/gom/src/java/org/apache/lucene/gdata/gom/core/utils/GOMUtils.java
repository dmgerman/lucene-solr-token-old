begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.gom.core.utils
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
operator|.
name|utils
package|;
end_package
begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|ContentType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMLink
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMNamespace
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
operator|.
name|GDataParseException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
operator|.
name|GOMAttributeImpl
import|;
end_import
begin_comment
comment|/**  * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|GOMUtils
specifier|public
class|class
name|GOMUtils
block|{
comment|/* 	 * Possible values 2003-12-13T18:30:02Z 2003-12-13T18:30:02.25Z 	 * 2003-12-13T18:30:02+01:00 2003-12-13T18:30:02.25+01:00 	 */
DECL|field|RFC3339_DATE_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|RFC3339_DATE_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(\\d\\d\\d\\d)"
operator|+
comment|// #YEAR
literal|"\\-(\\d\\d)"
operator|+
comment|// #MONTH
literal|"\\-(\\d\\d)[Tt]"
operator|+
comment|// #DAY
literal|"(\\d\\d)"
operator|+
comment|// #HOURS
literal|":(\\d\\d)"
operator|+
comment|// #MINUTES
literal|":(\\d\\d)"
operator|+
comment|// #SECONDS
literal|"(\\.(\\d+))?"
operator|+
comment|// #MILLISorless
literal|"([Zz]|((\\+|\\-)(\\d\\d):(\\d\\d)))?"
comment|// #TIMEZONESHIFT
argument_list|,
name|Pattern
operator|.
name|COMMENTS
argument_list|)
decl_stmt|;
DECL|field|ATTRIBUTE_TYPE
specifier|static
specifier|final
name|String
name|ATTRIBUTE_TYPE
init|=
literal|"type"
decl_stmt|;
DECL|field|TEXT_TYPE
specifier|static
specifier|final
name|GOMAttribute
name|TEXT_TYPE
decl_stmt|;
DECL|field|HTML_TYPE
specifier|static
specifier|final
name|GOMAttribute
name|HTML_TYPE
decl_stmt|;
DECL|field|XHTML_TYPE
specifier|static
specifier|final
name|GOMAttribute
name|XHTML_TYPE
decl_stmt|;
DECL|field|TEXT_TYPE_DEFAULT_NS
specifier|static
specifier|final
name|GOMAttribute
name|TEXT_TYPE_DEFAULT_NS
decl_stmt|;
DECL|field|HTML_TYPE_DEFAULT_NS
specifier|static
specifier|final
name|GOMAttribute
name|HTML_TYPE_DEFAULT_NS
decl_stmt|;
DECL|field|XHTML_TYPE_DEFAULT_NS
specifier|static
specifier|final
name|GOMAttribute
name|XHTML_TYPE_DEFAULT_NS
decl_stmt|;
static|static
block|{
name|TEXT_TYPE
operator|=
operator|new
name|GOMAttributeImpl
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
name|GOMNamespace
operator|.
name|ATOM_NS_PREFIX
argument_list|,
name|ATTRIBUTE_TYPE
argument_list|,
name|ContentType
operator|.
name|TEXT
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|HTML_TYPE
operator|=
operator|new
name|GOMAttributeImpl
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
name|GOMNamespace
operator|.
name|ATOM_NS_PREFIX
argument_list|,
name|ATTRIBUTE_TYPE
argument_list|,
name|ContentType
operator|.
name|HTML
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|XHTML_TYPE
operator|=
operator|new
name|GOMAttributeImpl
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
name|GOMNamespace
operator|.
name|ATOM_NS_PREFIX
argument_list|,
name|ATTRIBUTE_TYPE
argument_list|,
name|ContentType
operator|.
name|XHTML
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|TEXT_TYPE_DEFAULT_NS
operator|=
operator|new
name|GOMAttributeImpl
argument_list|(
name|ATTRIBUTE_TYPE
argument_list|,
name|ContentType
operator|.
name|TEXT
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|HTML_TYPE_DEFAULT_NS
operator|=
operator|new
name|GOMAttributeImpl
argument_list|(
name|ATTRIBUTE_TYPE
argument_list|,
name|ContentType
operator|.
name|HTML
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|XHTML_TYPE_DEFAULT_NS
operator|=
operator|new
name|GOMAttributeImpl
argument_list|(
name|ATTRIBUTE_TYPE
argument_list|,
name|ContentType
operator|.
name|XHTML
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getAttributeByContentType
specifier|public
specifier|static
name|GOMAttribute
name|getAttributeByContentType
parameter_list|(
name|ContentType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|HTML
case|:
return|return
name|HTML_TYPE
return|;
case|case
name|XHTML
case|:
return|return
name|XHTML_TYPE
return|;
default|default:
return|return
name|TEXT_TYPE
return|;
block|}
block|}
DECL|method|getAttributeByContentTypeDefaultNs
specifier|public
specifier|static
name|GOMAttribute
name|getAttributeByContentTypeDefaultNs
parameter_list|(
name|ContentType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
return|return
name|TEXT_TYPE_DEFAULT_NS
return|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|HTML
case|:
return|return
name|HTML_TYPE_DEFAULT_NS
return|;
case|case
name|XHTML
case|:
return|return
name|XHTML_TYPE_DEFAULT_NS
return|;
default|default:
return|return
name|TEXT_TYPE_DEFAULT_NS
return|;
block|}
block|}
comment|/** 	 * Builds a atom namespace attribute 	 *  	 * @param aValue 	 *            attribute value 	 * @param aName 	 *            attribute name 	 * @return a GOMAttribute 	 */
DECL|method|buildAtomAttribute
specifier|public
specifier|static
name|GOMAttribute
name|buildAtomAttribute
parameter_list|(
name|String
name|aValue
parameter_list|,
name|String
name|aName
parameter_list|)
block|{
return|return
operator|new
name|GOMAttributeImpl
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
name|GOMNamespace
operator|.
name|ATOM_NS_PREFIX
argument_list|,
name|aName
argument_list|,
name|aValue
argument_list|)
return|;
block|}
DECL|method|buildDefaultNamespaceAttribute
specifier|public
specifier|static
name|GOMAttribute
name|buildDefaultNamespaceAttribute
parameter_list|(
name|String
name|aValue
parameter_list|,
name|String
name|aName
parameter_list|)
block|{
return|return
operator|new
name|GOMAttributeImpl
argument_list|(
name|aName
argument_list|,
name|aValue
argument_list|)
return|;
block|}
DECL|method|buildXMLNamespaceAttribute
specifier|public
specifier|static
name|GOMAttribute
name|buildXMLNamespaceAttribute
parameter_list|(
name|String
name|aValue
parameter_list|,
name|String
name|aName
parameter_list|)
block|{
return|return
operator|new
name|GOMAttributeImpl
argument_list|(
name|GOMNamespace
operator|.
name|XML_NS_URI
argument_list|,
name|GOMNamespace
operator|.
name|XML_NS_PREFIX
argument_list|,
name|aName
argument_list|,
name|aValue
argument_list|)
return|;
block|}
DECL|method|isRfc3339DateFormat
specifier|public
specifier|static
name|boolean
name|isRfc3339DateFormat
parameter_list|(
name|String
name|aString
parameter_list|)
block|{
name|Matcher
name|aMatcher
init|=
name|RFC3339_DATE_PATTERN
operator|.
name|matcher
argument_list|(
name|aString
argument_list|)
decl_stmt|;
return|return
name|aMatcher
operator|.
name|matches
argument_list|()
return|;
block|}
DECL|method|parseRfc3339DateFormat
specifier|public
specifier|static
name|long
name|parseRfc3339DateFormat
parameter_list|(
name|String
name|aString
parameter_list|)
block|{
if|if
condition|(
name|aString
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Date-Time String must not be null"
argument_list|)
throw|;
name|Matcher
name|aMatcher
init|=
name|RFC3339_DATE_PATTERN
operator|.
name|matcher
argument_list|(
name|aString
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|aMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|GDataParseException
argument_list|(
literal|"Invalid RFC3339 date / time pattern -- "
operator|+
name|aString
argument_list|)
throw|;
block|}
name|int
name|grCount
init|=
name|aMatcher
operator|.
name|groupCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|grCount
operator|>
literal|13
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
literal|"Invalid RFC3339 date / time pattern -- "
operator|+
name|aString
argument_list|)
throw|;
name|Integer
name|timeZoneShift
init|=
literal|null
decl_stmt|;
name|Calendar
name|dateTime
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|aMatcher
operator|.
name|group
argument_list|(
literal|9
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// skip time zone
block|}
elseif|else
if|if
condition|(
name|aMatcher
operator|.
name|group
argument_list|(
literal|9
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Z"
argument_list|)
condition|)
block|{
name|timeZoneShift
operator|=
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|timeZoneShift
operator|=
operator|new
name|Integer
argument_list|(
operator|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|aMatcher
operator|.
name|group
argument_list|(
literal|12
argument_list|)
argument_list|)
operator|*
literal|60
operator|+
name|Integer
operator|.
name|valueOf
argument_list|(
name|aMatcher
operator|.
name|group
argument_list|(
literal|13
argument_list|)
argument_list|)
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|aMatcher
operator|.
name|group
argument_list|(
literal|11
argument_list|)
operator|.
name|equals
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|timeZoneShift
operator|=
operator|new
name|Integer
argument_list|(
operator|-
name|timeZoneShift
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|dateTime
operator|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"GMT"
argument_list|)
argument_list|)
expr_stmt|;
empty_stmt|;
name|dateTime
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dateTime
operator|.
name|set
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|aMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|aMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|-
literal|1
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|aMatcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|aMatcher
operator|.
name|group
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|aMatcher
operator|.
name|group
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|aMatcher
operator|.
name|group
argument_list|(
literal|6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// seconds with milliseconds
if|if
condition|(
name|aMatcher
operator|.
name|group
argument_list|(
literal|8
argument_list|)
operator|!=
literal|null
operator|&&
name|aMatcher
operator|.
name|group
argument_list|(
literal|8
argument_list|)
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|dateTime
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|"0."
comment|/* 																		 * use 																		 * big 																		 * dec 																		 * this 																		 * could 																		 * be 																		 * big!! 																		 */
operator|+
name|aMatcher
operator|.
name|group
argument_list|(
literal|8
argument_list|)
argument_list|)
operator|.
name|movePointRight
argument_list|(
literal|3
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GDataParseException
argument_list|(
literal|"Invalid RFC3339 date / time pattern -- "
operator|+
name|aString
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|long
name|retVal
init|=
name|dateTime
operator|.
name|getTimeInMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|timeZoneShift
operator|!=
literal|null
condition|)
block|{
name|retVal
operator|-=
name|timeZoneShift
operator|.
name|intValue
argument_list|()
operator|*
literal|60000
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
DECL|method|buildRfc3339DateFormat
specifier|public
specifier|static
name|String
name|buildRfc3339DateFormat
parameter_list|(
name|long
name|aMillisecondLong
parameter_list|)
block|{
name|Calendar
name|instance
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"GMT"
argument_list|)
argument_list|)
decl_stmt|;
name|instance
operator|.
name|setTimeInMillis
argument_list|(
name|aMillisecondLong
argument_list|)
expr_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// 2003-12-13T18:30:02.25+01:00
name|int
name|time
init|=
literal|0
decl_stmt|;
name|time
operator|=
name|instance
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
expr_stmt|;
if|if
condition|(
name|time
operator|<
literal|1000
condition|)
name|builder
operator|.
name|append
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
if|if
condition|(
name|time
operator|<
literal|100
condition|)
name|builder
operator|.
name|append
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
if|if
condition|(
name|time
operator|<
literal|10
condition|)
name|builder
operator|.
name|append
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|time
operator|=
name|instance
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
expr_stmt|;
if|if
condition|(
name|time
operator|<
literal|10
condition|)
name|builder
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|time
operator|=
name|instance
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
expr_stmt|;
if|if
condition|(
name|time
operator|<
literal|10
condition|)
name|builder
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|'T'
argument_list|)
expr_stmt|;
name|time
operator|=
name|instance
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
expr_stmt|;
if|if
condition|(
name|time
operator|<
literal|10
condition|)
name|builder
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|time
operator|=
name|instance
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
expr_stmt|;
if|if
condition|(
name|time
operator|<
literal|10
condition|)
name|builder
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|time
operator|=
name|instance
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
expr_stmt|;
if|if
condition|(
name|time
operator|<
literal|10
condition|)
name|builder
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|instance
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|)
argument_list|)
expr_stmt|;
comment|// this is always GMT offset -> 0
name|builder
operator|.
name|append
argument_list|(
literal|'Z'
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|buildRfc822Date
specifier|public
specifier|static
name|String
name|buildRfc822Date
parameter_list|(
name|long
name|aMillisecondLong
parameter_list|)
block|{
comment|/* 		 * Rather implement it for a special case as use SDF. SDF is very 		 * expensive to create and not thread safe so it should be synchronized 		 * of pooled 		 */
name|Calendar
name|instance
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"GMT"
argument_list|)
argument_list|)
decl_stmt|;
name|instance
operator|.
name|setTimeInMillis
argument_list|(
name|aMillisecondLong
argument_list|)
expr_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// Sun, 06 Aug 2006 00:53:49 +0000
comment|// EEE, dd MMM yyyy HH:mm:ss Z
switch|switch
condition|(
name|instance
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
condition|)
block|{
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"Sun"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|MONDAY
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"Mon"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"Tue"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"Wed"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"Thu"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"Fri"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"Sat"
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|int
name|time
init|=
literal|0
decl_stmt|;
name|time
operator|=
name|instance
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
expr_stmt|;
if|if
condition|(
name|time
operator|<
literal|10
condition|)
name|builder
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|instance
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
condition|)
block|{
case|case
name|Calendar
operator|.
name|JANUARY
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"Jan"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FEBRUARY
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"Feb"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|MARCH
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"Mar"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|APRIL
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"Apr"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|MAY
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"May"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|JUNE
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"Jun"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|JULY
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"Jul"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|AUGUST
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"Aug"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SEPTEMBER
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"Sep"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|OCTOBER
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"Oct"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|NOVEMBER
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"Nov"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|DECEMBER
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"Dec"
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|time
operator|=
name|instance
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
expr_stmt|;
if|if
condition|(
name|time
operator|<
literal|1000
condition|)
name|builder
operator|.
name|append
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
if|if
condition|(
name|time
operator|<
literal|100
condition|)
name|builder
operator|.
name|append
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
if|if
condition|(
name|time
operator|<
literal|10
condition|)
name|builder
operator|.
name|append
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|time
operator|=
name|instance
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
expr_stmt|;
if|if
condition|(
name|time
operator|<
literal|10
condition|)
name|builder
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|time
operator|=
name|instance
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
expr_stmt|;
if|if
condition|(
name|time
operator|<
literal|10
condition|)
name|builder
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|time
operator|=
name|instance
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
expr_stmt|;
if|if
condition|(
name|time
operator|<
literal|10
condition|)
name|builder
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|time
argument_list|)
expr_stmt|;
comment|// this is always GMT offset -> 0
name|builder
operator|.
name|append
argument_list|(
literal|" +0000"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getHtmlLink
specifier|public
name|GOMLink
name|getHtmlLink
parameter_list|(
name|List
argument_list|<
name|GOMLink
argument_list|>
name|links
parameter_list|)
block|{
for|for
control|(
name|GOMLink
name|link
range|:
name|links
control|)
block|{
if|if
condition|(
operator|(
name|link
operator|.
name|getRel
argument_list|()
operator|==
literal|null
operator|||
name|link
operator|.
name|getRel
argument_list|()
operator|.
name|equals
argument_list|(
literal|"alternate"
argument_list|)
operator|)
operator|&&
operator|(
name|link
operator|.
name|getType
argument_list|()
operator|==
literal|null
operator|||
name|link
operator|.
name|getType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"html"
argument_list|)
operator|)
condition|)
return|return
name|link
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class
end_unit
