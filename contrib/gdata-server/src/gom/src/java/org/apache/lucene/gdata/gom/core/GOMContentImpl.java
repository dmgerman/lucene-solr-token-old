begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.gom.core
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
package|;
end_package
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|AtomMediaType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMContent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMNamespace
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
operator|.
name|utils
operator|.
name|AtomParserUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
operator|.
name|utils
operator|.
name|GOMUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|writer
operator|.
name|GOMOutputWriter
import|;
end_import
begin_comment
comment|/**  * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|GOMContentImpl
specifier|public
class|class
name|GOMContentImpl
extends|extends
name|GOMTextContructImpl
implements|implements
name|GOMContent
block|{
DECL|field|src
specifier|private
name|String
name|src
decl_stmt|;
DECL|field|type
specifier|private
name|String
name|type
decl_stmt|;
DECL|field|mediaType
specifier|private
name|AtomMediaType
name|mediaType
decl_stmt|;
comment|/** 	 *  	 */
DECL|method|GOMContentImpl
specifier|public
name|GOMContentImpl
parameter_list|()
block|{
name|this
operator|.
name|localName
operator|=
name|GOMContent
operator|.
name|LOCALNAME
expr_stmt|;
name|this
operator|.
name|qname
operator|=
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
name|this
operator|.
name|localName
argument_list|)
expr_stmt|;
name|this
operator|.
name|rssLocalName
operator|=
name|GOMContent
operator|.
name|LOCAL_NAME_RSS
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMContent#getSrc() 	 */
DECL|method|getSrc
specifier|public
name|String
name|getSrc
parameter_list|()
block|{
return|return
name|this
operator|.
name|src
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMContent#setSrc(java.lang.String) 	 */
DECL|method|setSrc
specifier|public
name|void
name|setSrc
parameter_list|(
name|String
name|aSrc
parameter_list|)
block|{
name|this
operator|.
name|src
operator|=
name|aSrc
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.core.GOMTextContructImpl#processAttribute(javax.xml.namespace.QName, 	 *      java.lang.String) 	 */
annotation|@
name|Override
DECL|method|processAttribute
specifier|public
name|void
name|processAttribute
parameter_list|(
name|QName
name|aQName
parameter_list|,
name|String
name|aValue
parameter_list|)
block|{
if|if
condition|(
name|aQName
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
literal|"QName must not be null"
argument_list|)
throw|;
if|if
condition|(
name|aValue
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
literal|"Value must not be null"
argument_list|)
throw|;
if|if
condition|(
literal|"src"
operator|.
name|equals
argument_list|(
name|aQName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|src
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|DUPLICATE_ATTRIBUTE
argument_list|,
literal|"src"
argument_list|)
argument_list|)
throw|;
name|this
operator|.
name|src
operator|=
name|aValue
expr_stmt|;
return|return;
block|}
if|if
condition|(
literal|"type"
operator|.
name|equals
argument_list|(
name|aQName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|contentType
operator|!=
literal|null
operator|||
name|this
operator|.
name|mediaType
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|DUPLICATE_ATTRIBUTE
argument_list|,
literal|"type"
argument_list|)
argument_list|)
throw|;
if|if
condition|(
name|AtomParserUtils
operator|.
name|isAtomMediaType
argument_list|(
name|aValue
argument_list|)
condition|)
block|{
name|this
operator|.
name|type
operator|=
name|aValue
expr_stmt|;
name|this
operator|.
name|mediaType
operator|=
name|AtomParserUtils
operator|.
name|getAtomMediaType
argument_list|(
name|aValue
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|super
operator|.
name|processAttribute
argument_list|(
name|aQName
argument_list|,
name|aValue
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.core.GOMTextContructImpl#processElementValue(java.lang.String) 	 */
annotation|@
name|Override
DECL|method|processElementValue
specifier|public
name|void
name|processElementValue
parameter_list|(
name|String
name|aValue
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|src
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AtomParser
operator|.
name|UNEXPECTED_ELEMENT_VALUE
argument_list|,
name|this
operator|.
name|localName
operator|+
literal|" with attribute src set "
argument_list|)
argument_list|)
throw|;
name|super
operator|.
name|processElementValue
argument_list|(
name|aValue
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.core.GOMTextContructImpl#processEndElement() 	 */
annotation|@
name|Override
DECL|method|processEndElement
specifier|public
name|void
name|processEndElement
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|src
operator|!=
literal|null
condition|)
try|try
block|{
name|AtomParserUtils
operator|.
name|getAbsolutAtomURI
argument_list|(
name|this
operator|.
name|xmlBase
argument_list|,
name|this
operator|.
name|src
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|INVALID_ATTRIBUTE
argument_list|,
literal|"src"
argument_list|,
literal|"absolute uri"
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|mediaType
operator|==
literal|null
condition|)
name|super
operator|.
name|processEndElement
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|this
operator|.
name|blobParser
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|textValue
operator|=
name|this
operator|.
name|blobParser
operator|.
name|toString
argument_list|()
expr_stmt|;
name|this
operator|.
name|blobParser
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|blobParser
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.core.GOMTextContructImpl#getChildParser(javax.xml.namespace.QName) 	 */
annotation|@
name|Override
DECL|method|getChildParser
specifier|public
name|AtomParser
name|getChildParser
parameter_list|(
name|QName
name|aName
parameter_list|)
block|{
if|if
condition|(
name|aName
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
literal|"QName must not be null"
argument_list|)
throw|;
if|if
condition|(
name|this
operator|.
name|mediaType
operator|==
name|AtomMediaType
operator|.
name|XML
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|blobParser
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|DUPLICATE_ELEMENT
argument_list|,
name|aName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
argument_list|)
throw|;
name|this
operator|.
name|blobParser
operator|=
operator|new
name|XMLBlobContentParser
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|blobParser
operator|.
name|getChildParser
argument_list|(
name|aName
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|getChildParser
argument_list|(
name|aName
argument_list|)
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMElement#writeAtomOutput(org.apache.lucene.gdata.gom.writer.GOMOutputWriter) 	 */
DECL|method|writeAtomOutput
specifier|public
name|void
name|writeAtomOutput
parameter_list|(
name|GOMOutputWriter
name|aStreamWriter
parameter_list|)
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
name|this
operator|.
name|mediaType
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|GOMAttribute
argument_list|>
name|xmlNamespaceAttributes
init|=
name|getXmlNamespaceAttributes
argument_list|()
decl_stmt|;
name|xmlNamespaceAttributes
operator|.
name|add
argument_list|(
name|GOMUtils
operator|.
name|buildDefaultNamespaceAttribute
argument_list|(
name|this
operator|.
name|type
argument_list|,
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|aStreamWriter
operator|.
name|writeStartElement
argument_list|(
name|this
operator|.
name|localName
argument_list|,
name|xmlNamespaceAttributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|src
operator|==
literal|null
condition|)
name|aStreamWriter
operator|.
name|writeContentUnescaped
argument_list|(
name|this
operator|.
name|textValue
argument_list|)
expr_stmt|;
else|else
name|aStreamWriter
operator|.
name|writeAttribute
argument_list|(
name|GOMUtils
operator|.
name|buildDefaultNamespaceAttribute
argument_list|(
name|this
operator|.
name|src
argument_list|,
literal|"src"
argument_list|)
argument_list|)
expr_stmt|;
name|aStreamWriter
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|writeAtomOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.core.GOMTextContructImpl#writeRssOutput(org.apache.lucene.gdata.gom.writer.GOMOutputWriter) 	 */
annotation|@
name|Override
DECL|method|writeRssOutput
specifier|public
name|void
name|writeRssOutput
parameter_list|(
name|GOMOutputWriter
name|aStreamWriter
parameter_list|)
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
name|this
operator|.
name|mediaType
operator|!=
literal|null
condition|)
block|{
comment|// if content is atomOutOfLineContent (has not textValue) ->
comment|// generate a<link> element.
if|if
condition|(
name|src
operator|!=
literal|null
condition|)
block|{
name|aStreamWriter
operator|.
name|writeSimpleXMLElement
argument_list|(
literal|"link"
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|src
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|mediaType
operator|==
name|AtomMediaType
operator|.
name|TEXT
condition|)
block|{
name|aStreamWriter
operator|.
name|writeSimpleXMLElement
argument_list|(
literal|"description"
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|textValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// RSS doesn't support non-text content --> write atom type
name|this
operator|.
name|writeAtomOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|super
operator|.
name|writeRssOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMContent#setAtomMediaType(org.apache.lucene.gdata.gom.AtomMediaType) 	 */
DECL|method|setAtomMediaType
specifier|public
name|void
name|setAtomMediaType
parameter_list|(
name|AtomMediaType
name|aMediaType
parameter_list|)
block|{
name|this
operator|.
name|mediaType
operator|=
name|aMediaType
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMContent#getAtomMediaType() 	 */
DECL|method|getAtomMediaType
specifier|public
name|AtomMediaType
name|getAtomMediaType
parameter_list|()
block|{
return|return
name|this
operator|.
name|mediaType
return|;
block|}
block|}
end_class
end_unit
