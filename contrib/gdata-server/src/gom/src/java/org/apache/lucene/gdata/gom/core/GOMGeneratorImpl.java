begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.gom.core
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
package|;
end_package
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMGenerator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMNamespace
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
operator|.
name|utils
operator|.
name|AtomParserUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|writer
operator|.
name|GOMOutputWriter
import|;
end_import
begin_comment
comment|/**  * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|GOMGeneratorImpl
specifier|public
class|class
name|GOMGeneratorImpl
extends|extends
name|AbstractGOMElement
implements|implements
name|GOMGenerator
block|{
DECL|field|generatorVersion
specifier|private
name|String
name|generatorVersion
decl_stmt|;
DECL|field|uri
specifier|private
name|String
name|uri
decl_stmt|;
comment|/** 	 *  	 */
DECL|method|GOMGeneratorImpl
specifier|public
name|GOMGeneratorImpl
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|localName
operator|=
name|GOMGenerator
operator|.
name|LOCALNAME
expr_stmt|;
name|this
operator|.
name|qname
operator|=
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
name|this
operator|.
name|localName
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMGenerator#setUri(java.lang.String) 	 */
DECL|method|setUri
specifier|public
name|void
name|setUri
parameter_list|(
name|String
name|aUri
parameter_list|)
block|{
name|this
operator|.
name|uri
operator|=
name|aUri
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMGenerator#setGeneratorVersion(java.lang.String) 	 */
DECL|method|setGeneratorVersion
specifier|public
name|void
name|setGeneratorVersion
parameter_list|(
name|String
name|aVersion
parameter_list|)
block|{
name|this
operator|.
name|generatorVersion
operator|=
name|aVersion
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMGenerator#getGeneratorVersion() 	 */
DECL|method|getGeneratorVersion
specifier|public
name|String
name|getGeneratorVersion
parameter_list|()
block|{
return|return
name|this
operator|.
name|generatorVersion
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMGenerator#getUri() 	 */
DECL|method|getUri
specifier|public
name|String
name|getUri
parameter_list|()
block|{
return|return
name|this
operator|.
name|uri
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.core.AbstractGOMElement#processAttribute(javax.xml.namespace.QName, 	 *      java.lang.String) 	 */
annotation|@
name|Override
DECL|method|processAttribute
specifier|public
name|void
name|processAttribute
parameter_list|(
name|QName
name|aQName
parameter_list|,
name|String
name|aValue
parameter_list|)
block|{
if|if
condition|(
name|aQName
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Qname must not be null"
argument_list|)
throw|;
if|if
condition|(
name|aValue
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Value must not be null"
argument_list|)
throw|;
if|if
condition|(
name|aQName
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|)
condition|)
block|{
if|if
condition|(
name|aQName
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|"uri"
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|uri
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AtomParser
operator|.
name|DUPLICATE_ATTRIBUTE
argument_list|,
literal|"uri"
argument_list|)
argument_list|)
throw|;
name|this
operator|.
name|uri
operator|=
name|aValue
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|aQName
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|"version"
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|generatorVersion
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AtomParser
operator|.
name|DUPLICATE_ATTRIBUTE
argument_list|,
literal|"version"
argument_list|)
argument_list|)
throw|;
name|this
operator|.
name|generatorVersion
operator|=
name|aValue
expr_stmt|;
block|}
block|}
name|super
operator|.
name|processAttribute
argument_list|(
name|aQName
argument_list|,
name|aValue
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.core.AbstractGOMElement#processElementValue(java.lang.String) 	 */
annotation|@
name|Override
DECL|method|processElementValue
specifier|public
name|void
name|processElementValue
parameter_list|(
name|String
name|aValue
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|textValue
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AtomParser
operator|.
name|DUPLICATE_ELEMENT_VALUE
argument_list|,
name|this
operator|.
name|localName
argument_list|)
argument_list|)
throw|;
name|this
operator|.
name|textValue
operator|=
name|aValue
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.core.AbstractGOMElement#processEndElement() 	 */
annotation|@
name|Override
DECL|method|processEndElement
specifier|public
name|void
name|processEndElement
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|uri
operator|!=
literal|null
condition|)
try|try
block|{
name|AtomParserUtils
operator|.
name|getAbsolutAtomURI
argument_list|(
name|this
operator|.
name|xmlBase
argument_list|,
name|this
operator|.
name|uri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AtomParser
operator|.
name|INVALID_ELEMENT_VALUE
argument_list|,
name|this
operator|.
name|localName
argument_list|,
literal|"absolute uri"
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMElement#writeAtomOutput(org.apache.lucene.gdata.gom.writer.GOMOutputWriter) 	 */
DECL|method|writeAtomOutput
specifier|public
name|void
name|writeAtomOutput
parameter_list|(
name|GOMOutputWriter
name|aStreamWriter
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|List
argument_list|<
name|GOMAttribute
argument_list|>
name|list
init|=
name|getXmlNamespaceAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|uri
operator|!=
literal|null
condition|)
name|list
operator|.
name|add
argument_list|(
operator|new
name|GOMAttributeImpl
argument_list|(
literal|"uri"
argument_list|,
name|this
operator|.
name|uri
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|generatorVersion
operator|!=
literal|null
condition|)
name|list
operator|.
name|add
argument_list|(
operator|new
name|GOMAttributeImpl
argument_list|(
literal|"version"
argument_list|,
name|this
operator|.
name|generatorVersion
argument_list|)
argument_list|)
expr_stmt|;
name|aStreamWriter
operator|.
name|writeSimpleXMLElement
argument_list|(
name|this
operator|.
name|qname
argument_list|,
name|list
argument_list|,
name|this
operator|.
name|textValue
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMElement#writeRssOutput(org.apache.lucene.gdata.gom.writer.GOMOutputWriter) 	 */
DECL|method|writeRssOutput
specifier|public
name|void
name|writeRssOutput
parameter_list|(
name|GOMOutputWriter
name|aStreamWriter
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|aStreamWriter
operator|.
name|writeSimpleXMLElement
argument_list|(
name|this
operator|.
name|localName
argument_list|,
name|getXmlNamespaceAttributes
argument_list|()
argument_list|,
name|this
operator|.
name|textValue
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
