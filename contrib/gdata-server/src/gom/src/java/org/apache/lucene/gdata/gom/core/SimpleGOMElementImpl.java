begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.gom.core
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
package|;
end_package
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMNamespace
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|writer
operator|.
name|GOMOutputWriter
import|;
end_import
begin_comment
comment|/**  * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|SimpleGOMElementImpl
specifier|public
class|class
name|SimpleGOMElementImpl
extends|extends
name|AbstractGOMElement
block|{
DECL|field|ELEMENT_OS_ITEMS_PER_PAGE
specifier|public
specifier|static
specifier|final
name|String
name|ELEMENT_OS_ITEMS_PER_PAGE
init|=
literal|"itemsPerPage"
decl_stmt|;
DECL|field|ELEMENT_OS_START_INDEX
specifier|public
specifier|static
specifier|final
name|String
name|ELEMENT_OS_START_INDEX
init|=
literal|"startIndex"
decl_stmt|;
DECL|field|validator
specifier|private
name|SimpleValidator
name|validator
decl_stmt|;
comment|/** 	 *  	 */
DECL|method|SimpleGOMElementImpl
specifier|public
name|SimpleGOMElementImpl
parameter_list|(
name|String
name|aLocalName
parameter_list|,
name|GOMNamespace
name|aNamespace
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
if|if
condition|(
name|aLocalName
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"localname must not be null"
argument_list|)
throw|;
if|if
condition|(
name|aNamespace
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Namespace must not be null"
argument_list|)
throw|;
name|this
operator|.
name|localName
operator|=
name|aLocalName
expr_stmt|;
name|this
operator|.
name|qname
operator|=
operator|new
name|QName
argument_list|(
name|aNamespace
operator|.
name|getNamespaceUri
argument_list|()
argument_list|,
name|this
operator|.
name|localName
argument_list|,
name|aNamespace
operator|.
name|getNamespacePrefix
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|SimpleGOMElementImpl
name|SimpleGOMElementImpl
parameter_list|()
block|{
comment|// for subclasses
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.core.AbstractGOMElement#processElementValue(java.lang.String) 	 */
annotation|@
name|Override
DECL|method|processElementValue
specifier|public
name|void
name|processElementValue
parameter_list|(
name|String
name|aValue
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|textValue
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AtomParser
operator|.
name|DUPLICATE_ELEMENT_VALUE
argument_list|,
name|this
operator|.
name|localName
argument_list|)
argument_list|)
throw|;
name|this
operator|.
name|textValue
operator|=
name|aValue
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.core.AbstractGOMElement#processEndElement() 	 */
annotation|@
name|Override
DECL|method|processEndElement
specifier|public
name|void
name|processEndElement
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|validator
operator|!=
literal|null
condition|)
name|this
operator|.
name|validator
operator|.
name|validate
argument_list|(
name|this
operator|.
name|textValue
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMElement#writeAtomOutput(org.apache.lucene.gdata.gom.writer.GOMStaxWriter) 	 */
DECL|method|writeAtomOutput
specifier|public
name|void
name|writeAtomOutput
parameter_list|(
name|GOMOutputWriter
name|aStreamWriter
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|aStreamWriter
operator|.
name|writeSimpleXMLElement
argument_list|(
name|this
operator|.
name|qname
argument_list|,
name|getXmlNamespaceAttributes
argument_list|()
argument_list|,
name|this
operator|.
name|textValue
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMElement#writeRssOutput(org.apache.lucene.gdata.gom.writer.GOMStaxWriter) 	 */
DECL|method|writeRssOutput
specifier|public
name|void
name|writeRssOutput
parameter_list|(
name|GOMOutputWriter
name|aStreamWriter
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|writeAtomOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
block|}
DECL|class|SimpleValidator
specifier|protected
specifier|abstract
specifier|static
class|class
name|SimpleValidator
block|{
DECL|field|localName
name|String
name|localName
decl_stmt|;
DECL|method|SimpleValidator
specifier|protected
name|SimpleValidator
parameter_list|(
name|String
name|aLocalName
parameter_list|)
block|{
name|this
operator|.
name|localName
operator|=
name|aLocalName
expr_stmt|;
block|}
comment|/** 		 * @param aTextValue 		 */
DECL|method|validate
specifier|protected
name|void
name|validate
parameter_list|(
name|String
name|aTextValue
parameter_list|)
block|{
if|if
condition|(
name|aTextValue
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AtomParser
operator|.
name|MISSING_ELEMENT_VALUE_PLAIN
argument_list|,
name|this
operator|.
name|localName
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * @param aValidator 	 *            The validator to set. 	 */
DECL|method|setValidator
specifier|public
name|void
name|setValidator
parameter_list|(
name|SimpleValidator
name|aValidator
parameter_list|)
block|{
name|validator
operator|=
name|aValidator
expr_stmt|;
block|}
block|}
end_class
end_unit
