begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.gom.core
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|AtomMediaType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMAuthor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMCategory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMContent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMContributor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMEntry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMExtension
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMId
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMLink
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMNamespace
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMPublished
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMRights
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMSummary
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMTitle
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|GOMUpdated
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
operator|.
name|extension
operator|.
name|GOMExtensionFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|core
operator|.
name|utils
operator|.
name|AtomParserUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|writer
operator|.
name|GOMOutputWriter
import|;
end_import
begin_comment
comment|/**  *   * The default implementation of {@link org.apache.lucene.gdata.gom.GOMEntry}  *   *<pre>  *         atomEntry =  *         element atom:entry {  *         atomCommonAttributes,  *         (	atomAuthor*  *&amp; atomCategory*  *&amp; atomContent?  *&amp; atomContributor*  *&amp; atomId  *&amp; atomLink*  *&amp; atomPublished?  *&amp; atomRights?  *&amp; atomSource?  *&amp; atomSummary?  *&amp; atomTitle  *&amp; atomUpdated  *&amp; extensionElement*)  *         }  *</pre>  *   * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|GOMEntryImpl
specifier|public
class|class
name|GOMEntryImpl
extends|extends
name|AbstractGOMElement
implements|implements
name|GOMEntry
block|{
DECL|field|namespaces
specifier|protected
name|List
argument_list|<
name|GOMNamespace
argument_list|>
name|namespaces
init|=
operator|new
name|LinkedList
argument_list|<
name|GOMNamespace
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|extensions
specifier|protected
name|List
argument_list|<
name|GOMExtension
argument_list|>
name|extensions
init|=
operator|new
name|LinkedList
argument_list|<
name|GOMExtension
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|authors
specifier|private
name|List
argument_list|<
name|GOMAuthor
argument_list|>
name|authors
init|=
operator|new
name|LinkedList
argument_list|<
name|GOMAuthor
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|categories
specifier|private
name|List
argument_list|<
name|GOMCategory
argument_list|>
name|categories
init|=
operator|new
name|LinkedList
argument_list|<
name|GOMCategory
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|contributors
specifier|private
name|List
argument_list|<
name|GOMContributor
argument_list|>
name|contributors
init|=
operator|new
name|LinkedList
argument_list|<
name|GOMContributor
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|id
specifier|private
name|GOMId
name|id
decl_stmt|;
DECL|field|links
specifier|private
name|List
argument_list|<
name|GOMLink
argument_list|>
name|links
init|=
operator|new
name|LinkedList
argument_list|<
name|GOMLink
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|published
specifier|private
name|GOMPublished
name|published
decl_stmt|;
DECL|field|rights
specifier|private
name|GOMRights
name|rights
decl_stmt|;
DECL|field|source
specifier|private
name|GOMSource
name|source
decl_stmt|;
DECL|field|summary
specifier|private
name|GOMSummary
name|summary
decl_stmt|;
DECL|field|title
specifier|private
name|GOMTitle
name|title
decl_stmt|;
DECL|field|updated
specifier|private
name|GOMUpdated
name|updated
decl_stmt|;
DECL|field|extensionFactory
specifier|private
name|GOMExtensionFactory
name|extensionFactory
decl_stmt|;
DECL|field|content
specifier|private
name|GOMContent
name|content
decl_stmt|;
DECL|field|defaultNamespace
specifier|private
specifier|final
name|GOMNamespace
name|defaultNamespace
init|=
name|GOMNamespace
operator|.
name|ATOM_NAMESPACE
decl_stmt|;
comment|/** 	 *  	 */
DECL|method|GOMEntryImpl
specifier|public
name|GOMEntryImpl
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|localName
operator|=
name|GOMEntry
operator|.
name|LOCALNAME
expr_stmt|;
name|this
operator|.
name|qname
operator|=
operator|new
name|QName
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|,
name|this
operator|.
name|localName
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMEntry#addAuthor(org.apache.lucene.gdata.gom.GOMAuthor) 	 */
DECL|method|addAuthor
specifier|public
name|void
name|addAuthor
parameter_list|(
name|GOMAuthor
name|aAuthor
parameter_list|)
block|{
if|if
condition|(
name|aAuthor
operator|!=
literal|null
condition|)
name|this
operator|.
name|authors
operator|.
name|add
argument_list|(
name|aAuthor
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMEntry#addCategory(org.apache.lucene.gdata.gom.GOMCategory) 	 */
DECL|method|addCategory
specifier|public
name|void
name|addCategory
parameter_list|(
name|GOMCategory
name|aCategory
parameter_list|)
block|{
if|if
condition|(
name|aCategory
operator|!=
literal|null
condition|)
name|this
operator|.
name|categories
operator|.
name|add
argument_list|(
name|aCategory
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMEntry#addContributor(org.apache.lucene.gdata.gom.GOMContributor) 	 */
DECL|method|addContributor
specifier|public
name|void
name|addContributor
parameter_list|(
name|GOMContributor
name|aContributor
parameter_list|)
block|{
if|if
condition|(
name|aContributor
operator|!=
literal|null
condition|)
name|this
operator|.
name|contributors
operator|.
name|add
argument_list|(
name|aContributor
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMEntry#addLink(org.apache.lucene.gdata.gom.GOMLink) 	 */
DECL|method|addLink
specifier|public
name|void
name|addLink
parameter_list|(
name|GOMLink
name|aLink
parameter_list|)
block|{
if|if
condition|(
name|aLink
operator|!=
literal|null
condition|)
name|this
operator|.
name|links
operator|.
name|add
argument_list|(
name|aLink
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMEntry#getAuthors() 	 */
DECL|method|getAuthors
specifier|public
name|List
argument_list|<
name|GOMAuthor
argument_list|>
name|getAuthors
parameter_list|()
block|{
return|return
name|this
operator|.
name|authors
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMEntry#getCategories() 	 */
DECL|method|getCategories
specifier|public
name|List
argument_list|<
name|GOMCategory
argument_list|>
name|getCategories
parameter_list|()
block|{
return|return
name|this
operator|.
name|categories
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMEntry#getContributor() 	 */
DECL|method|getContributor
specifier|public
name|List
argument_list|<
name|GOMContributor
argument_list|>
name|getContributor
parameter_list|()
block|{
return|return
name|this
operator|.
name|contributors
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMEntry#getId() 	 */
DECL|method|getId
specifier|public
name|GOMId
name|getId
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMEntry#getLinks() 	 */
DECL|method|getLinks
specifier|public
name|List
argument_list|<
name|GOMLink
argument_list|>
name|getLinks
parameter_list|()
block|{
return|return
name|this
operator|.
name|links
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMEntry#getPublished() 	 */
DECL|method|getPublished
specifier|public
name|GOMPublished
name|getPublished
parameter_list|()
block|{
return|return
name|this
operator|.
name|published
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMEntry#getRights() 	 */
DECL|method|getRights
specifier|public
name|GOMRights
name|getRights
parameter_list|()
block|{
return|return
name|this
operator|.
name|rights
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMEntry#getSource() 	 */
DECL|method|getSource
specifier|public
name|GOMSource
name|getSource
parameter_list|()
block|{
return|return
name|this
operator|.
name|source
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMEntry#getSummary() 	 */
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMEntry#getSummary() 	 */
DECL|method|getSummary
specifier|public
name|GOMSummary
name|getSummary
parameter_list|()
block|{
return|return
name|this
operator|.
name|summary
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMEntry#getTitle() 	 */
DECL|method|getTitle
specifier|public
name|GOMTitle
name|getTitle
parameter_list|()
block|{
return|return
name|this
operator|.
name|title
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMEntry#getUpdated() 	 */
DECL|method|getUpdated
specifier|public
name|GOMUpdated
name|getUpdated
parameter_list|()
block|{
return|return
name|this
operator|.
name|updated
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMEntry#setId(org.apache.lucene.gdata.gom.GOMId) 	 */
DECL|method|setId
specifier|public
name|void
name|setId
parameter_list|(
name|GOMId
name|aId
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|aId
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMEntry#setPublished(org.apache.lucene.gdata.gom.GOMPublished) 	 */
DECL|method|setPublished
specifier|public
name|void
name|setPublished
parameter_list|(
name|GOMPublished
name|aPublished
parameter_list|)
block|{
name|this
operator|.
name|published
operator|=
name|aPublished
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMEntry#setRights(org.apache.lucene.gdata.gom.GOMRights) 	 */
DECL|method|setRights
specifier|public
name|void
name|setRights
parameter_list|(
name|GOMRights
name|aRights
parameter_list|)
block|{
name|this
operator|.
name|rights
operator|=
name|aRights
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMEntry#setSource(org.apache.lucene.gdata.gom.GOMSource) 	 */
DECL|method|setSource
specifier|public
name|void
name|setSource
parameter_list|(
name|GOMSource
name|aSource
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|aSource
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMEntry#setSummary(org.apache.lucene.gdata.gom.GOMSummary) 	 */
DECL|method|setSummary
specifier|public
name|void
name|setSummary
parameter_list|(
name|GOMSummary
name|aSummary
parameter_list|)
block|{
name|this
operator|.
name|summary
operator|=
name|aSummary
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMEntry#setTitle(org.apache.lucene.gdata.gom.GOMTitle) 	 */
DECL|method|setTitle
specifier|public
name|void
name|setTitle
parameter_list|(
name|GOMTitle
name|aTitle
parameter_list|)
block|{
name|this
operator|.
name|title
operator|=
name|aTitle
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMEntry#setUpdated(org.apache.lucene.gdata.gom.GOMUpdated) 	 */
DECL|method|setUpdated
specifier|public
name|void
name|setUpdated
parameter_list|(
name|GOMUpdated
name|aUpdated
parameter_list|)
block|{
name|this
operator|.
name|updated
operator|=
name|aUpdated
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMEntry#addNamespace(org.apache.lucene.gdata.gom.GOMNamespace) 	 */
DECL|method|addNamespace
specifier|public
name|void
name|addNamespace
parameter_list|(
name|GOMNamespace
name|aNamespace
parameter_list|)
block|{
if|if
condition|(
name|aNamespace
operator|==
literal|null
condition|)
return|return;
comment|// namespace overrides hash / equals
if|if
condition|(
name|this
operator|.
name|namespaces
operator|.
name|contains
argument_list|(
name|aNamespace
argument_list|)
condition|)
return|return;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|aNamespace
operator|.
name|getNamespacePrefix
argument_list|()
argument_list|)
operator|||
name|aNamespace
operator|.
name|getNamespaceUri
argument_list|()
operator|.
name|equals
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|)
condition|)
return|return;
else|else
name|this
operator|.
name|namespaces
operator|.
name|add
argument_list|(
name|aNamespace
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMEntry#getNamespaces() 	 */
DECL|method|getNamespaces
specifier|public
name|List
argument_list|<
name|GOMNamespace
argument_list|>
name|getNamespaces
parameter_list|()
block|{
return|return
name|this
operator|.
name|namespaces
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMEntry#getDefaultNamespace() 	 */
DECL|method|getDefaultNamespace
specifier|public
name|GOMNamespace
name|getDefaultNamespace
parameter_list|()
block|{
return|return
name|this
operator|.
name|defaultNamespace
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMElement#writeAtomOutput(org.apache.lucene.gdata.gom.writer.GOMOutputWriter) 	 */
DECL|method|writeAtomOutput
specifier|public
name|void
name|writeAtomOutput
parameter_list|(
name|GOMOutputWriter
name|aStreamWriter
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|aStreamWriter
operator|.
name|writeStartElement
argument_list|(
name|this
operator|.
name|qname
argument_list|,
name|getXmlNamespaceAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|defaultNamespace
operator|!=
literal|null
condition|)
name|aStreamWriter
operator|.
name|writeDefaultNamespace
argument_list|(
name|this
operator|.
name|defaultNamespace
argument_list|)
expr_stmt|;
for|for
control|(
name|GOMNamespace
name|namespace
range|:
name|this
operator|.
name|namespaces
control|)
block|{
name|aStreamWriter
operator|.
name|writeNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|id
operator|!=
literal|null
condition|)
name|this
operator|.
name|id
operator|.
name|writeAtomOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|published
operator|!=
literal|null
condition|)
name|this
operator|.
name|published
operator|.
name|writeAtomOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|updated
operator|!=
literal|null
condition|)
name|this
operator|.
name|updated
operator|.
name|writeAtomOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
for|for
control|(
name|GOMCategory
name|category
range|:
name|this
operator|.
name|categories
control|)
block|{
name|category
operator|.
name|writeAtomOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|title
operator|!=
literal|null
condition|)
name|this
operator|.
name|title
operator|.
name|writeAtomOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|summary
operator|!=
literal|null
condition|)
name|this
operator|.
name|summary
operator|.
name|writeAtomOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|content
operator|!=
literal|null
condition|)
name|this
operator|.
name|content
operator|.
name|writeAtomOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
for|for
control|(
name|GOMLink
name|link
range|:
name|this
operator|.
name|links
control|)
block|{
name|link
operator|.
name|writeAtomOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|GOMAuthor
name|autor
range|:
name|this
operator|.
name|authors
control|)
block|{
name|autor
operator|.
name|writeAtomOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|GOMContributor
name|contributor
range|:
name|this
operator|.
name|contributors
control|)
block|{
name|contributor
operator|.
name|writeAtomOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|rights
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|rights
operator|.
name|writeAtomOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|source
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|source
operator|.
name|writeAtomOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|GOMExtension
name|extension
range|:
name|this
operator|.
name|extensions
control|)
block|{
name|extension
operator|.
name|writeAtomOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
block|}
name|aStreamWriter
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMElement#writeRssOutput(org.apache.lucene.gdata.gom.writer.GOMOutputWriter) 	 */
DECL|method|writeRssOutput
specifier|public
name|void
name|writeRssOutput
parameter_list|(
name|GOMOutputWriter
name|aStreamWriter
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|aStreamWriter
operator|.
name|writeStartElement
argument_list|(
name|GOMEntry
operator|.
name|LOCALNAME_RSS
argument_list|,
name|getXmlNamespaceAttributes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|defaultNamespace
operator|!=
literal|null
condition|)
name|aStreamWriter
operator|.
name|writeNamespace
argument_list|(
name|this
operator|.
name|defaultNamespace
argument_list|)
expr_stmt|;
for|for
control|(
name|GOMNamespace
name|namespace
range|:
name|this
operator|.
name|namespaces
control|)
block|{
name|aStreamWriter
operator|.
name|writeNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|id
operator|!=
literal|null
condition|)
name|this
operator|.
name|id
operator|.
name|writeRssOutput
argument_list|(
name|aStreamWriter
argument_list|,
name|GOMId
operator|.
name|LOCALNAME_RSS
argument_list|)
expr_stmt|;
name|String
name|xmlLang
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|content
operator|!=
literal|null
condition|)
block|{
name|xmlLang
operator|=
name|this
operator|.
name|content
operator|.
name|getXmlLang
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|xmlLang
operator|==
literal|null
operator|&&
name|this
operator|.
name|summary
operator|!=
literal|null
condition|)
block|{
name|xmlLang
operator|=
name|this
operator|.
name|summary
operator|.
name|getXmlLang
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|xmlLang
operator|==
literal|null
operator|&&
name|this
operator|.
name|title
operator|!=
literal|null
condition|)
block|{
name|xmlLang
operator|=
name|this
operator|.
name|title
operator|.
name|getXmlLang
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|xmlLang
operator|!=
literal|null
condition|)
block|{
name|aStreamWriter
operator|.
name|writeSimpleXMLElement
argument_list|(
literal|"language"
argument_list|,
name|xmlLang
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|published
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|published
operator|.
name|writeRssOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|updated
operator|!=
literal|null
condition|)
name|this
operator|.
name|updated
operator|.
name|writeRssOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
for|for
control|(
name|GOMCategory
name|category
range|:
name|this
operator|.
name|categories
control|)
block|{
name|category
operator|.
name|writeRssOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|title
operator|!=
literal|null
condition|)
name|this
operator|.
name|title
operator|.
name|writeRssOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|summary
operator|!=
literal|null
condition|)
name|this
operator|.
name|summary
operator|.
name|writeRssOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|content
operator|!=
literal|null
condition|)
name|this
operator|.
name|content
operator|.
name|writeRssOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
for|for
control|(
name|GOMLink
name|link
range|:
name|this
operator|.
name|links
control|)
block|{
name|link
operator|.
name|writeRssOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|GOMAuthor
name|author
range|:
name|this
operator|.
name|authors
control|)
block|{
name|author
operator|.
name|writeRssOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|GOMContributor
name|contributors
range|:
name|this
operator|.
name|contributors
control|)
block|{
name|contributors
operator|.
name|writeRssOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|GOMExtension
name|extension
range|:
name|this
operator|.
name|extensions
control|)
block|{
name|extension
operator|.
name|writeRssOutput
argument_list|(
name|aStreamWriter
argument_list|)
expr_stmt|;
block|}
name|aStreamWriter
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.core.AbstractGOMElement#getChildParser(javax.xml.namespace.QName) 	 */
annotation|@
name|Override
DECL|method|getChildParser
specifier|public
name|AtomParser
name|getChildParser
parameter_list|(
name|QName
name|aName
parameter_list|)
block|{
if|if
condition|(
name|aName
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|GOMNamespace
operator|.
name|ATOM_NS_URI
argument_list|)
condition|)
block|{
if|if
condition|(
name|aName
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|GOMId
operator|.
name|LOCALNAME
argument_list|)
condition|)
block|{
comment|// atom:feed elements MUST contain exactly one atom:id element.
if|if
condition|(
name|this
operator|.
name|id
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AtomParser
operator|.
name|DUPLICATE_ELEMENT
argument_list|,
name|GOMId
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
throw|;
name|this
operator|.
name|id
operator|=
operator|new
name|GOMIdImpl
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|id
return|;
block|}
if|if
condition|(
name|aName
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|GOMTitle
operator|.
name|LOCALNAME
argument_list|)
condition|)
block|{
comment|// atom:entry elements MUST contain exactly one atom:title
comment|// element.
if|if
condition|(
name|this
operator|.
name|title
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AtomParser
operator|.
name|DUPLICATE_ELEMENT
argument_list|,
name|GOMTitle
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
throw|;
name|this
operator|.
name|title
operator|=
operator|new
name|GOMTitleImpl
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|title
return|;
block|}
if|if
condition|(
name|aName
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|GOMAuthor
operator|.
name|LOCALNAME
argument_list|)
condition|)
block|{
name|GOMAuthor
name|author
init|=
operator|new
name|GOMAuthorImpl
argument_list|()
decl_stmt|;
name|this
operator|.
name|authors
operator|.
name|add
argument_list|(
name|author
argument_list|)
expr_stmt|;
return|return
name|author
return|;
block|}
if|if
condition|(
name|aName
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|GOMCategory
operator|.
name|LOCALNAME
argument_list|)
condition|)
block|{
name|GOMCategory
name|category
init|=
operator|new
name|GOMCategoryImpl
argument_list|()
decl_stmt|;
name|this
operator|.
name|categories
operator|.
name|add
argument_list|(
name|category
argument_list|)
expr_stmt|;
return|return
name|category
return|;
block|}
if|if
condition|(
name|aName
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|GOMContributor
operator|.
name|LOCALNAME
argument_list|)
condition|)
block|{
name|GOMContributorImpl
name|impl
init|=
operator|new
name|GOMContributorImpl
argument_list|()
decl_stmt|;
name|this
operator|.
name|contributors
operator|.
name|add
argument_list|(
name|impl
argument_list|)
expr_stmt|;
return|return
name|impl
return|;
block|}
if|if
condition|(
name|aName
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|GOMLink
operator|.
name|LOCALNAME
argument_list|)
condition|)
block|{
name|GOMLinkImpl
name|impl
init|=
operator|new
name|GOMLinkImpl
argument_list|()
decl_stmt|;
name|this
operator|.
name|links
operator|.
name|add
argument_list|(
name|impl
argument_list|)
expr_stmt|;
return|return
name|impl
return|;
block|}
if|if
condition|(
name|aName
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|GOMUpdated
operator|.
name|LOCALNAME
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|updated
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AtomParser
operator|.
name|DUPLICATE_ELEMENT
argument_list|,
name|GOMUpdated
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
throw|;
name|GOMUpdated
name|updatedImpl
init|=
operator|new
name|GOMUpdatedImpl
argument_list|()
decl_stmt|;
name|this
operator|.
name|updated
operator|=
name|updatedImpl
expr_stmt|;
return|return
name|this
operator|.
name|updated
return|;
block|}
if|if
condition|(
name|aName
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|GOMRights
operator|.
name|LOCALNAME
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|rights
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AtomParser
operator|.
name|DUPLICATE_ELEMENT
argument_list|,
name|GOMRights
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
throw|;
name|this
operator|.
name|rights
operator|=
operator|new
name|GOMRightsImpl
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|rights
return|;
block|}
if|if
condition|(
name|aName
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|GOMSource
operator|.
name|LOCALNAME
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|source
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AtomParser
operator|.
name|DUPLICATE_ELEMENT
argument_list|,
name|GOMSource
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
throw|;
name|this
operator|.
name|source
operator|=
operator|new
name|GOMSourceImpl
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|source
return|;
block|}
if|if
condition|(
name|aName
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|GOMSummary
operator|.
name|LOCALNAME
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|summary
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AtomParser
operator|.
name|DUPLICATE_ELEMENT
argument_list|,
name|GOMSummary
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
throw|;
name|this
operator|.
name|summary
operator|=
operator|new
name|GOMSummaryImpl
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|summary
return|;
block|}
if|if
condition|(
name|aName
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|GOMPublished
operator|.
name|LOCALNAME
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|published
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AtomParser
operator|.
name|DUPLICATE_ELEMENT
argument_list|,
name|GOMPublished
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
throw|;
name|this
operator|.
name|published
operator|=
operator|new
name|GOMPublishedImpl
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|published
return|;
block|}
if|if
condition|(
name|aName
operator|.
name|getLocalPart
argument_list|()
operator|.
name|endsWith
argument_list|(
name|GOMContent
operator|.
name|LOCALNAME
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|content
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|AtomParser
operator|.
name|DUPLICATE_ELEMENT
argument_list|,
name|GOMContent
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
throw|;
name|this
operator|.
name|content
operator|=
operator|new
name|GOMContentImpl
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|content
return|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|extensionFactory
operator|!=
literal|null
condition|)
block|{
name|GOMExtension
name|extension
init|=
name|this
operator|.
name|extensionFactory
operator|.
name|canHandleExtensionElement
argument_list|(
name|aName
argument_list|)
decl_stmt|;
if|if
condition|(
name|extension
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|extensions
operator|.
name|add
argument_list|(
name|extension
argument_list|)
expr_stmt|;
return|return
name|extension
return|;
block|}
block|}
return|return
name|super
operator|.
name|getChildParser
argument_list|(
name|aName
argument_list|)
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.core.AbstractGOMElement#processEndElement() 	 */
annotation|@
name|Override
DECL|method|processEndElement
specifier|public
name|void
name|processEndElement
parameter_list|()
block|{
comment|/* 		 * atom:entry elements MUST contain an atom:summary element in either of 		 * the following cases: 		 *  		 * the atom:entry contains an atom:content that has a "src" attribute 		 * (and is thus empty). the atom:entry contains content that is encoded 		 * in Base64; i.e., the "type" attribute of atom:content is a MIME media 		 * type [MIMEREG], but is not an XML media type [RFC3023], does not 		 * begin with "text/", and does not end with "/xml" or "+xml". 		 *  		 *  		 */
if|if
condition|(
name|this
operator|.
name|summary
operator|==
literal|null
operator|&&
name|this
operator|.
name|content
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|content
operator|.
name|getAtomMediaType
argument_list|()
operator|==
name|AtomMediaType
operator|.
name|BINARY
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|this
operator|.
name|content
operator|.
name|getSrc
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|MISSING_ELEMENT_CHILD
argument_list|,
name|this
operator|.
name|localName
argument_list|,
name|GOMSummary
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/* 		 * atom:entry elements MUST contain exactly one atom:id element. 		 */
if|if
condition|(
name|this
operator|.
name|id
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|MISSING_ELEMENT_CHILD
argument_list|,
name|this
operator|.
name|localName
argument_list|,
name|GOMId
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
throw|;
comment|/* 		 * atom:entry elements MUST contain exactly one atom:title element. 		 */
if|if
condition|(
name|this
operator|.
name|title
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|MISSING_ELEMENT_CHILD
argument_list|,
name|this
operator|.
name|localName
argument_list|,
name|GOMTitle
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
throw|;
comment|/* 		 * atom:entry elements MUST contain exactly one atom:updated element. 		 */
if|if
condition|(
name|this
operator|.
name|updated
operator|==
literal|null
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|MISSING_ELEMENT_CHILD
argument_list|,
name|this
operator|.
name|localName
argument_list|,
name|GOMUpdated
operator|.
name|LOCALNAME
argument_list|)
argument_list|)
throw|;
comment|/* 		 * atom:entry elements MUST NOT contain more than one atom:link element 		 * with a rel attribute value of "alternate" that has the same 		 * combination of type and hreflang attribute values. 		 */
name|List
argument_list|<
name|GOMLink
argument_list|>
name|alternateLinks
init|=
operator|new
name|LinkedList
argument_list|<
name|GOMLink
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|GOMLink
name|link
range|:
name|this
operator|.
name|links
control|)
block|{
comment|/* 			 * atom:link elements MAY have a "rel" attribute that indicates the 			 * link relation type. If the "rel" attribute is not present, the 			 * link element MUST be interpreted as if the link relation type is 			 * "alternate". 			 */
if|if
condition|(
name|link
operator|.
name|getRel
argument_list|()
operator|==
literal|null
operator|||
name|link
operator|.
name|getRel
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"alternate"
argument_list|)
condition|)
name|alternateLinks
operator|.
name|add
argument_list|(
name|link
argument_list|)
expr_stmt|;
block|}
comment|/* 		 * atom:entry elements MUST NOT contain more than one atom:link element 		 * with a rel attribute value of "alternate" that has the same 		 * combination of type and hreflang attribute values. 		 */
if|if
condition|(
name|alternateLinks
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|GOMLink
name|link
range|:
name|alternateLinks
control|)
block|{
for|for
control|(
name|GOMLink
name|link2
range|:
name|alternateLinks
control|)
block|{
if|if
condition|(
name|AtomParserUtils
operator|.
name|compareAlternateLinks
argument_list|(
name|link
argument_list|,
name|link2
argument_list|)
condition|)
throw|throw
operator|new
name|GDataParseException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|DUPLICATE_ELEMENT
argument_list|,
literal|"link with rel=\"alternate\" and same href and type attributes"
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|content
operator|==
literal|null
operator|&&
name|alternateLinks
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|GDataParseException
argument_list|(
literal|"Element Entry must contain a element link with attribute alternate if no content element is set"
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMExtensible#getExtensions() 	 */
DECL|method|getExtensions
specifier|public
name|List
argument_list|<
name|GOMExtension
argument_list|>
name|getExtensions
parameter_list|()
block|{
return|return
name|this
operator|.
name|extensions
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMExtensible#setExtensionFactory(org.apache.lucene.gdata.gom.core.extension.GOMExtensionFactory) 	 */
DECL|method|setExtensionFactory
specifier|public
name|void
name|setExtensionFactory
parameter_list|(
name|GOMExtensionFactory
name|aFactory
parameter_list|)
block|{
if|if
condition|(
name|extensionFactory
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|GOMNamespace
argument_list|>
name|namespaces2
init|=
name|extensionFactory
operator|.
name|getNamespaces
argument_list|()
decl_stmt|;
if|if
condition|(
name|namespaces2
operator|!=
literal|null
condition|)
for|for
control|(
name|GOMNamespace
name|namespace
range|:
name|namespaces2
control|)
block|{
name|this
operator|.
name|addNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|extensionFactory
operator|=
name|aFactory
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMEntry#getContent() 	 */
DECL|method|getContent
specifier|public
name|GOMContent
name|getContent
parameter_list|()
block|{
return|return
name|this
operator|.
name|content
return|;
block|}
comment|/** 	 * @see org.apache.lucene.gdata.gom.GOMEntry#setContent(org.apache.lucene.gdata.gom.GOMContent) 	 */
DECL|method|setContent
specifier|public
name|void
name|setContent
parameter_list|(
name|GOMContent
name|aContent
parameter_list|)
block|{
name|this
operator|.
name|content
operator|=
name|aContent
expr_stmt|;
block|}
block|}
end_class
end_unit
