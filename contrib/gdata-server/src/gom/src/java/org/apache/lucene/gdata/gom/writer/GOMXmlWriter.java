begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.gdata.gom.writer
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|gdata
operator|.
name|gom
operator|.
name|writer
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharsetEncoder
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import
begin_import
import|import
name|com
operator|.
name|bea
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLWriterBase
import|;
end_import
begin_comment
comment|/**  * @author Simon Willnauer  *   */
end_comment
begin_class
DECL|class|GOMXmlWriter
specifier|public
class|class
name|GOMXmlWriter
extends|extends
name|XMLWriterBase
block|{
DECL|field|encoder
specifier|private
name|CharsetEncoder
name|encoder
decl_stmt|;
comment|/** 	 *  	 */
DECL|method|GOMXmlWriter
specifier|public
name|GOMXmlWriter
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * @param arg0 	 */
DECL|method|GOMXmlWriter
specifier|public
name|GOMXmlWriter
parameter_list|(
name|Writer
name|arg0
parameter_list|)
block|{
name|super
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see com.bea.xml.stream.XMLWriterBase#writeCharacters(java.lang.String) 	 */
annotation|@
name|Override
DECL|method|writeCharacters
specifier|public
name|void
name|writeCharacters
parameter_list|(
name|String
name|aString
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|closeStartElement
argument_list|()
expr_stmt|;
name|char
index|[]
name|ch
init|=
name|aString
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|escapeCharacters
argument_list|(
name|ch
argument_list|,
literal|0
argument_list|,
name|ch
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * The default implementation escapes all xml chars in the writeCharacters 	 * method. This is not expected for xhtml blobs. To make it easier to write 	 * xhtml blobs the writeCharacters(String) mehtod will be reimplemented for 	 * internal use. 	 */
DECL|method|escapeCharacters
specifier|private
name|void
name|escapeCharacters
parameter_list|(
name|char
name|chars
index|[]
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|XMLStreamException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|char
name|c
init|=
name|chars
index|[
name|i
operator|+
name|start
index|]
decl_stmt|;
if|if
condition|(
name|c
operator|<
literal|32
condition|)
block|{
if|if
condition|(
operator|(
name|c
operator|!=
literal|'\t'
operator|&&
name|c
operator|!=
literal|'\n'
operator|)
condition|)
block|{
name|write
argument_list|(
literal|"&#"
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
elseif|else
if|if
condition|(
name|c
operator|>
literal|127
operator|&&
name|encoder
operator|!=
literal|null
operator|&&
operator|!
name|encoder
operator|.
name|canEncode
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|write
argument_list|(
literal|"&#"
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
