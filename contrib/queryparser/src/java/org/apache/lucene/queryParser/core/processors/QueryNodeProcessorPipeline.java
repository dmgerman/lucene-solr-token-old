begin_unit
begin_package
DECL|package|org.apache.lucene.queryParser.core.processors
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|core
operator|.
name|processors
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|core
operator|.
name|QueryNodeException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|core
operator|.
name|config
operator|.
name|QueryConfigHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|core
operator|.
name|nodes
operator|.
name|QueryNode
import|;
end_import
begin_comment
comment|/**  * A {@link QueryNodeProcessorPipeline} class should be used to build a query  * node processor pipeline.  *   * When a query node tree is processed using this class, it passes the query  * node tree to each processor on the pipeline and the result from each  * processor is passed to the next one, always following the order the  * processors were on the pipeline.  *   * When a {@link QueryConfigHandler} object is set on a  * {@link QueryNodeProcessorPipeline}, it takes care of also setting this  * {@link QueryConfigHandler} on all processor on pipeline.  *   */
end_comment
begin_class
DECL|class|QueryNodeProcessorPipeline
specifier|public
class|class
name|QueryNodeProcessorPipeline
implements|implements
name|QueryNodeProcessor
block|{
DECL|field|processors
specifier|private
name|LinkedList
argument_list|<
name|QueryNodeProcessor
argument_list|>
name|processors
init|=
operator|new
name|LinkedList
argument_list|<
name|QueryNodeProcessor
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|queryConfig
specifier|private
name|QueryConfigHandler
name|queryConfig
decl_stmt|;
comment|/**    * Constructs an empty query node processor pipeline.    */
DECL|method|QueryNodeProcessorPipeline
specifier|public
name|QueryNodeProcessorPipeline
parameter_list|()
block|{
comment|// empty constructor
block|}
comment|/**    * Constructs with a {@link QueryConfigHandler} object.    */
DECL|method|QueryNodeProcessorPipeline
specifier|public
name|QueryNodeProcessorPipeline
parameter_list|(
name|QueryConfigHandler
name|queryConfigHandler
parameter_list|)
block|{
name|this
operator|.
name|queryConfig
operator|=
name|queryConfigHandler
expr_stmt|;
block|}
comment|/**    * For reference about this method check:    * {@link QueryNodeProcessor#getQueryConfigHandler()}.    *     * @return QueryConfigHandler the query configuration handler to be set.    *     * @see QueryNodeProcessor#setQueryConfigHandler(QueryConfigHandler)    * @see QueryConfigHandler    */
DECL|method|getQueryConfigHandler
specifier|public
name|QueryConfigHandler
name|getQueryConfigHandler
parameter_list|()
block|{
return|return
name|this
operator|.
name|queryConfig
return|;
block|}
comment|/**    * For reference about this method check:    * {@link QueryNodeProcessor#process(QueryNode)}.    *     * @param queryTree    *          the query node tree to be processed    *     * @throws QueryNodeException    *           if something goes wrong during the query node processing    *     * @see QueryNode    */
DECL|method|process
specifier|public
name|QueryNode
name|process
parameter_list|(
name|QueryNode
name|queryTree
parameter_list|)
throws|throws
name|QueryNodeException
block|{
for|for
control|(
name|QueryNodeProcessor
name|processor
range|:
name|this
operator|.
name|processors
control|)
block|{
name|queryTree
operator|=
name|processor
operator|.
name|process
argument_list|(
name|queryTree
argument_list|)
expr_stmt|;
block|}
return|return
name|queryTree
return|;
block|}
comment|/**    * Adds a processor to the pipeline, it's always added to the end of the    * pipeline.    *     * @param processor    *          the processor to be added    */
DECL|method|addProcessor
specifier|public
name|void
name|addProcessor
parameter_list|(
name|QueryNodeProcessor
name|processor
parameter_list|)
block|{
name|this
operator|.
name|processors
operator|.
name|add
argument_list|(
name|processor
argument_list|)
expr_stmt|;
name|processor
operator|.
name|setQueryConfigHandler
argument_list|(
name|this
operator|.
name|queryConfig
argument_list|)
expr_stmt|;
block|}
comment|/**    * For reference about this method check:    * {@link QueryNodeProcessor#setQueryConfigHandler(QueryConfigHandler)}.    *     * @param queryConfigHandler    *          the query configuration handler to be set.    *     * @see QueryNodeProcessor#getQueryConfigHandler()    * @see QueryConfigHandler    */
DECL|method|setQueryConfigHandler
specifier|public
name|void
name|setQueryConfigHandler
parameter_list|(
name|QueryConfigHandler
name|queryConfigHandler
parameter_list|)
block|{
name|this
operator|.
name|queryConfig
operator|=
name|queryConfigHandler
expr_stmt|;
for|for
control|(
name|QueryNodeProcessor
name|processor
range|:
name|this
operator|.
name|processors
control|)
block|{
name|processor
operator|.
name|setQueryConfigHandler
argument_list|(
name|this
operator|.
name|queryConfig
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
