begin_unit
begin_package
DECL|package|org.apache.lucene.queryParser.standard
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|standard
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|Collator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DateTools
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DateTools
operator|.
name|Resolution
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|QueryParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|core
operator|.
name|QueryNodeException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|core
operator|.
name|config
operator|.
name|FieldConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|core
operator|.
name|config
operator|.
name|QueryConfigHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|core
operator|.
name|nodes
operator|.
name|QueryNode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|core
operator|.
name|parser
operator|.
name|SyntaxParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|core
operator|.
name|processors
operator|.
name|QueryNodeProcessor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|standard
operator|.
name|builders
operator|.
name|StandardQueryBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|standard
operator|.
name|builders
operator|.
name|StandardQueryTreeBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|standard
operator|.
name|config
operator|.
name|AllowLeadingWildcardAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|standard
operator|.
name|config
operator|.
name|AnalyzerAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|standard
operator|.
name|config
operator|.
name|DateResolutionAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|standard
operator|.
name|config
operator|.
name|DefaultOperatorAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|standard
operator|.
name|config
operator|.
name|DefaultPhraseSlopAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|standard
operator|.
name|config
operator|.
name|LocaleAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|standard
operator|.
name|config
operator|.
name|LowercaseExpandedTermsAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|standard
operator|.
name|config
operator|.
name|MultiTermRewriteMethodAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|standard
operator|.
name|config
operator|.
name|PositionIncrementsAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|standard
operator|.
name|config
operator|.
name|RangeCollatorAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|standard
operator|.
name|config
operator|.
name|StandardQueryConfigHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|standard
operator|.
name|parser
operator|.
name|StandardSyntaxParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|standard
operator|.
name|processors
operator|.
name|StandardQueryNodeProcessorPipeline
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FuzzyQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiTermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Parameter
import|;
end_import
begin_comment
comment|/**  * This class performs the query parsing using the new query parser  * implementation, but keeps the old {@link QueryParser} API.<br/>  *<br/>  * This class should be used when the new query parser features are and the old  * {@link QueryParser} API are needed at the same time.<br/>  *   * @deprecated this class will be removed soon, it's a temporary class to be  *             used along the transition from the old query parser to the new  *             one  */
end_comment
begin_class
DECL|class|QueryParserWrapper
specifier|public
class|class
name|QueryParserWrapper
block|{
comment|/**    * The default operator for parsing queries. Use    * {@link QueryParserWrapper#setDefaultOperator} to change it.    */
DECL|class|Operator
specifier|static
specifier|public
specifier|final
class|class
name|Operator
extends|extends
name|Parameter
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|3550299139196880290L
decl_stmt|;
DECL|method|Operator
specifier|private
name|Operator
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|field|OR
specifier|static
specifier|public
specifier|final
name|Operator
name|OR
init|=
operator|new
name|Operator
argument_list|(
literal|"OR"
argument_list|)
decl_stmt|;
DECL|field|AND
specifier|static
specifier|public
specifier|final
name|Operator
name|AND
init|=
operator|new
name|Operator
argument_list|(
literal|"AND"
argument_list|)
decl_stmt|;
block|}
comment|// the nested class:
comment|/** Alternative form of QueryParser.Operator.AND */
DECL|field|AND_OPERATOR
specifier|public
specifier|static
specifier|final
name|Operator
name|AND_OPERATOR
init|=
name|Operator
operator|.
name|AND
decl_stmt|;
comment|/** Alternative form of QueryParser.Operator.OR */
DECL|field|OR_OPERATOR
specifier|public
specifier|static
specifier|final
name|Operator
name|OR_OPERATOR
init|=
name|Operator
operator|.
name|OR
decl_stmt|;
comment|/**    * Returns a String where those characters that QueryParser expects to be    * escaped are escaped by a preceding<code>\</code>.    */
DECL|method|escape
specifier|public
specifier|static
name|String
name|escape
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// These characters are part of the query syntax and must be escaped
if|if
condition|(
name|c
operator|==
literal|'\\'
operator|||
name|c
operator|==
literal|'+'
operator|||
name|c
operator|==
literal|'-'
operator|||
name|c
operator|==
literal|'!'
operator|||
name|c
operator|==
literal|'('
operator|||
name|c
operator|==
literal|')'
operator|||
name|c
operator|==
literal|':'
operator|||
name|c
operator|==
literal|'^'
operator|||
name|c
operator|==
literal|'['
operator|||
name|c
operator|==
literal|']'
operator|||
name|c
operator|==
literal|'\"'
operator|||
name|c
operator|==
literal|'{'
operator|||
name|c
operator|==
literal|'}'
operator|||
name|c
operator|==
literal|'~'
operator|||
name|c
operator|==
literal|'*'
operator|||
name|c
operator|==
literal|'?'
operator|||
name|c
operator|==
literal|'|'
operator|||
name|c
operator|==
literal|'&'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|field|syntaxParser
specifier|private
name|SyntaxParser
name|syntaxParser
init|=
operator|new
name|StandardSyntaxParser
argument_list|()
decl_stmt|;
DECL|field|config
specifier|private
name|StandardQueryConfigHandler
name|config
decl_stmt|;
DECL|field|qpHelper
specifier|private
name|StandardQueryParser
name|qpHelper
decl_stmt|;
DECL|field|processorPipeline
specifier|private
name|QueryNodeProcessor
name|processorPipeline
decl_stmt|;
DECL|field|builder
specifier|private
name|StandardQueryBuilder
name|builder
init|=
operator|new
name|StandardQueryTreeBuilder
argument_list|()
decl_stmt|;
DECL|field|defaultField
specifier|private
name|String
name|defaultField
decl_stmt|;
DECL|method|QueryParserWrapper
specifier|public
name|QueryParserWrapper
parameter_list|(
name|String
name|defaultField
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
block|{
name|this
operator|.
name|defaultField
operator|=
name|defaultField
expr_stmt|;
name|this
operator|.
name|qpHelper
operator|=
operator|new
name|StandardQueryParser
argument_list|()
expr_stmt|;
name|this
operator|.
name|config
operator|=
operator|(
name|StandardQueryConfigHandler
operator|)
name|qpHelper
operator|.
name|getQueryConfigHandler
argument_list|()
expr_stmt|;
name|this
operator|.
name|qpHelper
operator|.
name|setAnalyzer
argument_list|(
name|analyzer
argument_list|)
expr_stmt|;
name|this
operator|.
name|processorPipeline
operator|=
operator|new
name|StandardQueryNodeProcessorPipeline
argument_list|(
name|this
operator|.
name|config
argument_list|)
expr_stmt|;
block|}
DECL|method|getQueryParserHelper
name|StandardQueryParser
name|getQueryParserHelper
parameter_list|()
block|{
return|return
name|qpHelper
return|;
block|}
DECL|method|getField
specifier|public
name|String
name|getField
parameter_list|()
block|{
return|return
name|this
operator|.
name|defaultField
return|;
block|}
DECL|method|getAnalyzer
specifier|public
name|Analyzer
name|getAnalyzer
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|config
operator|!=
literal|null
operator|&&
name|this
operator|.
name|config
operator|.
name|hasAttribute
argument_list|(
name|AnalyzerAttribute
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|config
operator|.
name|getAttribute
argument_list|(
name|AnalyzerAttribute
operator|.
name|class
argument_list|)
operator|.
name|getAnalyzer
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Sets the {@link StandardQueryBuilder} used to generate a {@link Query}    * object from the parsed and processed query node tree.    *     * @param builder the builder    */
DECL|method|setQueryBuilder
specifier|public
name|void
name|setQueryBuilder
parameter_list|(
name|StandardQueryBuilder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|builder
operator|=
name|builder
expr_stmt|;
block|}
comment|/**    * Sets the {@link QueryNodeProcessor} used to process the query node tree    * generated by the    * {@link org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser}.    *     * @param processor the processor    */
DECL|method|setQueryProcessor
specifier|public
name|void
name|setQueryProcessor
parameter_list|(
name|QueryNodeProcessor
name|processor
parameter_list|)
block|{
name|this
operator|.
name|processorPipeline
operator|=
name|processor
expr_stmt|;
name|this
operator|.
name|processorPipeline
operator|.
name|setQueryConfigHandler
argument_list|(
name|this
operator|.
name|config
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets the {@link QueryConfigHandler} used by the {@link QueryNodeProcessor}    * set to this object.    *     * @param queryConfig the query config handler    */
DECL|method|setQueryConfig
specifier|public
name|void
name|setQueryConfig
parameter_list|(
name|StandardQueryConfigHandler
name|queryConfig
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|queryConfig
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|processorPipeline
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|processorPipeline
operator|.
name|setQueryConfigHandler
argument_list|(
name|this
operator|.
name|config
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns the query config handler used by this query parser    *     * @return the query config handler    */
DECL|method|getQueryConfigHandler
specifier|public
name|QueryConfigHandler
name|getQueryConfigHandler
parameter_list|()
block|{
return|return
name|this
operator|.
name|config
return|;
block|}
comment|/**    * Returns {@link QueryNodeProcessor} used to process the query node tree    * generated by the    * {@link org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser}.    *     * @return the query processor    */
DECL|method|getQueryProcessor
specifier|public
name|QueryNodeProcessor
name|getQueryProcessor
parameter_list|()
block|{
return|return
name|this
operator|.
name|processorPipeline
return|;
block|}
DECL|method|generateParseException
specifier|public
name|ParseException
name|generateParseException
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|getAllowLeadingWildcard
specifier|public
name|boolean
name|getAllowLeadingWildcard
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|config
operator|!=
literal|null
operator|&&
name|this
operator|.
name|config
operator|.
name|hasAttribute
argument_list|(
name|AllowLeadingWildcardAttribute
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|config
operator|.
name|getAttribute
argument_list|(
name|AllowLeadingWildcardAttribute
operator|.
name|class
argument_list|)
operator|.
name|isAllowLeadingWildcard
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|getMultiTermRewriteMethod
specifier|public
name|MultiTermQuery
operator|.
name|RewriteMethod
name|getMultiTermRewriteMethod
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|config
operator|!=
literal|null
operator|&&
name|this
operator|.
name|config
operator|.
name|hasAttribute
argument_list|(
name|MultiTermRewriteMethodAttribute
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|config
operator|.
name|getAttribute
argument_list|(
name|MultiTermRewriteMethodAttribute
operator|.
name|class
argument_list|)
operator|.
name|getMultiTermRewriteMethod
argument_list|()
return|;
block|}
return|return
name|MultiTermQuery
operator|.
name|CONSTANT_SCORE_AUTO_REWRITE_DEFAULT
return|;
block|}
DECL|method|getDateResolution
specifier|public
name|Resolution
name|getDateResolution
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|config
operator|!=
literal|null
condition|)
block|{
name|FieldConfig
name|fieldConfig
init|=
name|this
operator|.
name|config
operator|.
name|getFieldConfig
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldConfig
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|config
operator|.
name|hasAttribute
argument_list|(
name|DateResolutionAttribute
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|config
operator|.
name|getAttribute
argument_list|(
name|DateResolutionAttribute
operator|.
name|class
argument_list|)
operator|.
name|getDateResolution
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getEnablePositionIncrements
specifier|public
name|boolean
name|getEnablePositionIncrements
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|config
operator|!=
literal|null
operator|&&
name|this
operator|.
name|config
operator|.
name|hasAttribute
argument_list|(
name|PositionIncrementsAttribute
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|config
operator|.
name|getAttribute
argument_list|(
name|PositionIncrementsAttribute
operator|.
name|class
argument_list|)
operator|.
name|isPositionIncrementsEnabled
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|getFuzzyMinSim
specifier|public
name|float
name|getFuzzyMinSim
parameter_list|()
block|{
return|return
name|FuzzyQuery
operator|.
name|defaultMinSimilarity
return|;
block|}
DECL|method|getFuzzyPrefixLength
specifier|public
name|int
name|getFuzzyPrefixLength
parameter_list|()
block|{
return|return
name|FuzzyQuery
operator|.
name|defaultPrefixLength
return|;
block|}
DECL|method|getLocale
specifier|public
name|Locale
name|getLocale
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|config
operator|!=
literal|null
operator|&&
name|this
operator|.
name|config
operator|.
name|hasAttribute
argument_list|(
name|LocaleAttribute
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|config
operator|.
name|getAttribute
argument_list|(
name|LocaleAttribute
operator|.
name|class
argument_list|)
operator|.
name|getLocale
argument_list|()
return|;
block|}
return|return
name|Locale
operator|.
name|getDefault
argument_list|()
return|;
block|}
DECL|method|getLowercaseExpandedTerms
specifier|public
name|boolean
name|getLowercaseExpandedTerms
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|config
operator|!=
literal|null
operator|&&
name|this
operator|.
name|config
operator|.
name|hasAttribute
argument_list|(
name|LowercaseExpandedTermsAttribute
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|config
operator|.
name|getAttribute
argument_list|(
name|LowercaseExpandedTermsAttribute
operator|.
name|class
argument_list|)
operator|.
name|isLowercaseExpandedTerms
argument_list|()
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|getPhraseSlop
specifier|public
name|int
name|getPhraseSlop
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|config
operator|!=
literal|null
operator|&&
name|this
operator|.
name|config
operator|.
name|hasAttribute
argument_list|(
name|AllowLeadingWildcardAttribute
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|config
operator|.
name|getAttribute
argument_list|(
name|DefaultPhraseSlopAttribute
operator|.
name|class
argument_list|)
operator|.
name|getDefaultPhraseSlop
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|method|getRangeCollator
specifier|public
name|Collator
name|getRangeCollator
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|config
operator|!=
literal|null
operator|&&
name|this
operator|.
name|config
operator|.
name|hasAttribute
argument_list|(
name|RangeCollatorAttribute
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|config
operator|.
name|getAttribute
argument_list|(
name|RangeCollatorAttribute
operator|.
name|class
argument_list|)
operator|.
name|getRangeCollator
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getUseOldRangeQuery
specifier|public
name|boolean
name|getUseOldRangeQuery
parameter_list|()
block|{
if|if
condition|(
name|getMultiTermRewriteMethod
argument_list|()
operator|==
name|MultiTermQuery
operator|.
name|SCORING_BOOLEAN_QUERY_REWRITE
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|parse
specifier|public
name|Query
name|parse
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|ParseException
block|{
try|try
block|{
name|QueryNode
name|queryTree
init|=
name|this
operator|.
name|syntaxParser
operator|.
name|parse
argument_list|(
name|query
argument_list|,
name|getField
argument_list|()
argument_list|)
decl_stmt|;
name|queryTree
operator|=
name|this
operator|.
name|processorPipeline
operator|.
name|process
argument_list|(
name|queryTree
argument_list|)
expr_stmt|;
return|return
operator|(
name|Query
operator|)
name|this
operator|.
name|builder
operator|.
name|build
argument_list|(
name|queryTree
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|QueryNodeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"parse exception"
argument_list|)
throw|;
block|}
block|}
DECL|method|setAllowLeadingWildcard
specifier|public
name|void
name|setAllowLeadingWildcard
parameter_list|(
name|boolean
name|allowLeadingWildcard
parameter_list|)
block|{
name|this
operator|.
name|qpHelper
operator|.
name|setAllowLeadingWildcard
argument_list|(
name|allowLeadingWildcard
argument_list|)
expr_stmt|;
block|}
DECL|method|setMultiTermRewriteMethod
specifier|public
name|void
name|setMultiTermRewriteMethod
parameter_list|(
name|MultiTermQuery
operator|.
name|RewriteMethod
name|method
parameter_list|)
block|{
name|this
operator|.
name|qpHelper
operator|.
name|setMultiTermRewriteMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
DECL|method|setDateResolution
specifier|public
name|void
name|setDateResolution
parameter_list|(
name|Resolution
name|dateResolution
parameter_list|)
block|{
name|this
operator|.
name|qpHelper
operator|.
name|setDateResolution
argument_list|(
name|dateResolution
argument_list|)
expr_stmt|;
block|}
DECL|field|dateRes
specifier|private
name|Map
argument_list|<
name|CharSequence
argument_list|,
name|DateTools
operator|.
name|Resolution
argument_list|>
name|dateRes
init|=
operator|new
name|HashMap
argument_list|<
name|CharSequence
argument_list|,
name|DateTools
operator|.
name|Resolution
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|setDateResolution
specifier|public
name|void
name|setDateResolution
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Resolution
name|dateResolution
parameter_list|)
block|{
name|dateRes
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|dateResolution
argument_list|)
expr_stmt|;
name|this
operator|.
name|qpHelper
operator|.
name|setDateResolution
argument_list|(
name|dateRes
argument_list|)
expr_stmt|;
block|}
DECL|method|setDefaultOperator
specifier|public
name|void
name|setDefaultOperator
parameter_list|(
name|Operator
name|op
parameter_list|)
block|{
name|this
operator|.
name|qpHelper
operator|.
name|setDefaultOperator
argument_list|(
name|OR_OPERATOR
operator|.
name|equals
argument_list|(
name|op
argument_list|)
condition|?
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|standard
operator|.
name|config
operator|.
name|DefaultOperatorAttribute
operator|.
name|Operator
operator|.
name|OR
else|:
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|standard
operator|.
name|config
operator|.
name|DefaultOperatorAttribute
operator|.
name|Operator
operator|.
name|AND
argument_list|)
expr_stmt|;
block|}
DECL|method|getDefaultOperator
specifier|public
name|Operator
name|getDefaultOperator
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|config
operator|!=
literal|null
operator|&&
name|this
operator|.
name|config
operator|.
name|hasAttribute
argument_list|(
name|DefaultOperatorAttribute
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
operator|(
name|this
operator|.
name|config
operator|.
name|getAttribute
argument_list|(
name|DefaultOperatorAttribute
operator|.
name|class
argument_list|)
operator|.
name|getOperator
argument_list|()
operator|==
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|standard
operator|.
name|config
operator|.
name|DefaultOperatorAttribute
operator|.
name|Operator
operator|.
name|AND
operator|)
condition|?
name|AND_OPERATOR
else|:
name|OR_OPERATOR
return|;
block|}
return|return
name|OR_OPERATOR
return|;
block|}
DECL|method|setEnablePositionIncrements
specifier|public
name|void
name|setEnablePositionIncrements
parameter_list|(
name|boolean
name|enable
parameter_list|)
block|{
name|this
operator|.
name|qpHelper
operator|.
name|setEnablePositionIncrements
argument_list|(
name|enable
argument_list|)
expr_stmt|;
block|}
DECL|method|setFuzzyMinSim
specifier|public
name|void
name|setFuzzyMinSim
parameter_list|(
name|float
name|fuzzyMinSim
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
DECL|method|setFuzzyPrefixLength
specifier|public
name|void
name|setFuzzyPrefixLength
parameter_list|(
name|int
name|fuzzyPrefixLength
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
DECL|method|setLocale
specifier|public
name|void
name|setLocale
parameter_list|(
name|Locale
name|locale
parameter_list|)
block|{
name|this
operator|.
name|qpHelper
operator|.
name|setLocale
argument_list|(
name|locale
argument_list|)
expr_stmt|;
block|}
DECL|method|setLowercaseExpandedTerms
specifier|public
name|void
name|setLowercaseExpandedTerms
parameter_list|(
name|boolean
name|lowercaseExpandedTerms
parameter_list|)
block|{
name|this
operator|.
name|qpHelper
operator|.
name|setLowercaseExpandedTerms
argument_list|(
name|lowercaseExpandedTerms
argument_list|)
expr_stmt|;
block|}
DECL|method|setPhraseSlop
specifier|public
name|void
name|setPhraseSlop
parameter_list|(
name|int
name|phraseSlop
parameter_list|)
block|{
name|this
operator|.
name|qpHelper
operator|.
name|setDefaultPhraseSlop
argument_list|(
name|phraseSlop
argument_list|)
expr_stmt|;
block|}
DECL|method|setRangeCollator
specifier|public
name|void
name|setRangeCollator
parameter_list|(
name|Collator
name|rc
parameter_list|)
block|{
name|this
operator|.
name|qpHelper
operator|.
name|setRangeCollator
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
DECL|method|setUseOldRangeQuery
specifier|public
name|void
name|setUseOldRangeQuery
parameter_list|(
name|boolean
name|useOldRangeQuery
parameter_list|)
block|{
if|if
condition|(
name|useOldRangeQuery
condition|)
block|{
name|setMultiTermRewriteMethod
argument_list|(
name|MultiTermQuery
operator|.
name|SCORING_BOOLEAN_QUERY_REWRITE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setMultiTermRewriteMethod
argument_list|(
name|MultiTermQuery
operator|.
name|CONSTANT_SCORE_AUTO_REWRITE_DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPrefixQuery
specifier|protected
name|Query
name|getPrefixQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|)
throws|throws
name|ParseException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|getWildcardQuery
specifier|protected
name|Query
name|getWildcardQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|)
throws|throws
name|ParseException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|getFuzzyQuery
specifier|protected
name|Query
name|getFuzzyQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|,
name|float
name|minSimilarity
parameter_list|)
throws|throws
name|ParseException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * @exception ParseException throw in overridden method to disallow    */
DECL|method|getFieldQuery
specifier|protected
name|Query
name|getFieldQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|queryText
parameter_list|)
throws|throws
name|ParseException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getBooleanQuery
specifier|protected
name|Query
name|getBooleanQuery
parameter_list|(
name|List
name|clauses
parameter_list|,
name|boolean
name|disableCoord
parameter_list|)
throws|throws
name|ParseException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Base implementation delegates to {@link #getFieldQuery(String,String)}.    * This method may be overridden, for example, to return a SpanNearQuery    * instead of a PhraseQuery.    *     * @exception ParseException throw in overridden method to disallow    */
DECL|method|getFieldQuery
specifier|protected
name|Query
name|getFieldQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|queryText
parameter_list|,
name|int
name|slop
parameter_list|)
throws|throws
name|ParseException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * @exception ParseException throw in overridden method to disallow    */
DECL|method|getRangeQuery
specifier|protected
name|Query
name|getRangeQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|part1
parameter_list|,
name|String
name|part2
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
throws|throws
name|ParseException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class
end_unit
