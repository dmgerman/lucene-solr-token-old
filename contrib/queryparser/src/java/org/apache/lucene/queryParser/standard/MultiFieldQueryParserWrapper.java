begin_unit
begin_package
DECL|package|org.apache.lucene.queryParser.standard
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|standard
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_comment
comment|/**  * This class behaves as the as the lucene 2.4 MultiFieldQueryParser class, but uses the new  * query parser interface instead of the old one.<br/>  *<br/>  * This class should be used when the new query parser features are needed and  * also keep at the same time the old query parser interface.<br/>  *   * @deprecated this class will be removed soon, it's a temporary class to be  *             used along the transition from the old query parser to the new  *             one  */
end_comment
begin_class
annotation|@
name|Deprecated
DECL|class|MultiFieldQueryParserWrapper
specifier|public
class|class
name|MultiFieldQueryParserWrapper
extends|extends
name|QueryParserWrapper
block|{
comment|/**    * Creates a MultiFieldQueryParser. Allows passing of a map with term to    * Boost, and the boost to apply to each term.    *     *<p>    * It will, when parse(String query) is called, construct a query like this    * (assuming the query consists of two terms and you specify the two fields    *<code>title</code> and<code>body</code>):    *</p>    *     *<code>      * (title:term1 body:term1) (title:term2 body:term2)      *</code>    *     *<p>    * When setDefaultOperator(AND_OPERATOR) is set, the result will be:    *</p>    *     *<code>      * +(title:term1 body:term1) +(title:term2 body:term2)      *</code>    *     *<p>    * When you pass a boost (title=>5 body=>10) you can get    *</p>    *     *<code>      * +(title:term1^5.0 body:term1^10.0) +(title:term2^5.0 body:term2^10.0)      *</code>    *     *<p>    * In other words, all the query's terms must appear, but it doesn't matter in    * what fields they appear.    *</p>    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|MultiFieldQueryParserWrapper
specifier|public
name|MultiFieldQueryParserWrapper
parameter_list|(
name|String
index|[]
name|fields
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|,
name|Map
name|boosts
parameter_list|)
block|{
name|this
argument_list|(
name|fields
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|StandardQueryParser
name|qpHelper
init|=
operator|(
name|StandardQueryParser
operator|)
name|getQueryParserHelper
argument_list|()
decl_stmt|;
name|qpHelper
operator|.
name|setMultiFields
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|qpHelper
operator|.
name|setFieldsBoost
argument_list|(
name|boosts
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a MultiFieldQueryParser.    *     *<p>    * It will, when parse(String query) is called, construct a query like this    * (assuming the query consists of two terms and you specify the two fields    *<code>title</code> and<code>body</code>):    *</p>    *     *<code>      * (title:term1 body:term1) (title:term2 body:term2)      *</code>    *     *<p>    * When setDefaultOperator(AND_OPERATOR) is set, the result will be:    *</p>    *     *<code>      * +(title:term1 body:term1) +(title:term2 body:term2)      *</code>    *     *<p>    * In other words, all the query's terms must appear, but it doesn't matter in    * what fields they appear.    *</p>    */
DECL|method|MultiFieldQueryParserWrapper
specifier|public
name|MultiFieldQueryParserWrapper
parameter_list|(
name|String
index|[]
name|fields
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|StandardQueryParser
name|qpHelper
init|=
operator|(
name|StandardQueryParser
operator|)
name|getQueryParserHelper
argument_list|()
decl_stmt|;
name|qpHelper
operator|.
name|setAnalyzer
argument_list|(
name|analyzer
argument_list|)
expr_stmt|;
name|qpHelper
operator|.
name|setMultiFields
argument_list|(
name|fields
argument_list|)
expr_stmt|;
block|}
comment|/**    * Parses a query which searches on the fields specified.    *<p>    * If x fields are specified, this effectively constructs:    *     *<pre>    *&lt;code&gt;    * (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx)    *&lt;/code&gt;    *</pre>    *     * @param queries    *          Queries strings to parse    * @param fields    *          Fields to search on    * @param analyzer    *          Analyzer to use    * @throws ParseException    *           if query parsing fails    * @throws IllegalArgumentException    *           if the length of the queries array differs from the length of the    *           fields array    */
DECL|method|parse
specifier|public
specifier|static
name|Query
name|parse
parameter_list|(
name|String
index|[]
name|queries
parameter_list|,
name|String
index|[]
name|fields
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|queries
operator|.
name|length
operator|!=
name|fields
operator|.
name|length
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"queries.length != fields.length"
argument_list|)
throw|;
name|BooleanQuery
name|bQuery
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|QueryParserWrapper
name|qp
init|=
operator|new
name|QueryParserWrapper
argument_list|(
name|fields
index|[
name|i
index|]
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
name|Query
name|q
init|=
name|qp
operator|.
name|parse
argument_list|(
name|queries
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
operator|&&
comment|// q never null, just being defensive
operator|(
operator|!
operator|(
name|q
operator|instanceof
name|BooleanQuery
operator|)
operator|||
operator|(
operator|(
name|BooleanQuery
operator|)
name|q
operator|)
operator|.
name|getClauses
argument_list|()
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
name|bQuery
operator|.
name|add
argument_list|(
name|q
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|bQuery
return|;
block|}
comment|/**    * Parses a query, searching on the fields specified. Use this if you need to    * specify certain fields as required, and others as prohibited.    *<p>    *     *<pre>    * Usage:    *&lt;code&gt;    * String[] fields = {&quot;filename&quot;,&quot;contents&quot;,&quot;description&quot;};    * BooleanClause.Occur[] flags = {BooleanClause.Occur.SHOULD,    *                BooleanClause.Occur.MUST,    *                BooleanClause.Occur.MUST_NOT};    * MultiFieldQueryParser.parse(&quot;query&quot;, fields, flags, analyzer);    *&lt;/code&gt;    *</pre>    *<p>    * The code above would construct a query:    *     *<pre>    *&lt;code&gt;    * (filename:query) +(contents:query) -(description:query)    *&lt;/code&gt;    *</pre>    *     * @param query    *          Query string to parse    * @param fields    *          Fields to search on    * @param flags    *          Flags describing the fields    * @param analyzer    *          Analyzer to use    * @throws ParseException    *           if query parsing fails    * @throws IllegalArgumentException    *           if the length of the fields array differs from the length of the    *           flags array    */
DECL|method|parse
specifier|public
specifier|static
name|Query
name|parse
parameter_list|(
name|String
name|query
parameter_list|,
name|String
index|[]
name|fields
parameter_list|,
name|BooleanClause
operator|.
name|Occur
index|[]
name|flags
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|fields
operator|.
name|length
operator|!=
name|flags
operator|.
name|length
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"fields.length != flags.length"
argument_list|)
throw|;
name|BooleanQuery
name|bQuery
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|QueryParserWrapper
name|qp
init|=
operator|new
name|QueryParserWrapper
argument_list|(
name|fields
index|[
name|i
index|]
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
name|Query
name|q
init|=
name|qp
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
operator|&&
comment|// q never null, just being defensive
operator|(
operator|!
operator|(
name|q
operator|instanceof
name|BooleanQuery
operator|)
operator|||
operator|(
operator|(
name|BooleanQuery
operator|)
name|q
operator|)
operator|.
name|getClauses
argument_list|()
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
name|bQuery
operator|.
name|add
argument_list|(
name|q
argument_list|,
name|flags
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|bQuery
return|;
block|}
comment|/**    * Parses a query, searching on the fields specified. Use this if you need to    * specify certain fields as required, and others as prohibited.    *<p>    *     *<pre>    * Usage:    *&lt;code&gt;    * String[] query = {&quot;query1&quot;,&quot;query2&quot;,&quot;query3&quot;};    * String[] fields = {&quot;filename&quot;,&quot;contents&quot;,&quot;description&quot;};    * BooleanClause.Occur[] flags = {BooleanClause.Occur.SHOULD,    *                BooleanClause.Occur.MUST,    *                BooleanClause.Occur.MUST_NOT};    * MultiFieldQueryParser.parse(query, fields, flags, analyzer);    *&lt;/code&gt;    *</pre>    *<p>    * The code above would construct a query:    *     *<pre>    *&lt;code&gt;    * (filename:query1) +(contents:query2) -(description:query3)    *&lt;/code&gt;    *</pre>    *     * @param queries    *          Queries string to parse    * @param fields    *          Fields to search on    * @param flags    *          Flags describing the fields    * @param analyzer    *          Analyzer to use    * @throws ParseException    *           if query parsing fails    * @throws IllegalArgumentException    *           if the length of the queries, fields, and flags array differ    */
DECL|method|parse
specifier|public
specifier|static
name|Query
name|parse
parameter_list|(
name|String
index|[]
name|queries
parameter_list|,
name|String
index|[]
name|fields
parameter_list|,
name|BooleanClause
operator|.
name|Occur
index|[]
name|flags
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
operator|!
operator|(
name|queries
operator|.
name|length
operator|==
name|fields
operator|.
name|length
operator|&&
name|queries
operator|.
name|length
operator|==
name|flags
operator|.
name|length
operator|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"queries, fields, and flags array have have different length"
argument_list|)
throw|;
name|BooleanQuery
name|bQuery
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|QueryParserWrapper
name|qp
init|=
operator|new
name|QueryParserWrapper
argument_list|(
name|fields
index|[
name|i
index|]
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
name|Query
name|q
init|=
name|qp
operator|.
name|parse
argument_list|(
name|queries
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
operator|&&
comment|// q never null, just being defensive
operator|(
operator|!
operator|(
name|q
operator|instanceof
name|BooleanQuery
operator|)
operator|||
operator|(
operator|(
name|BooleanQuery
operator|)
name|q
operator|)
operator|.
name|getClauses
argument_list|()
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
name|bQuery
operator|.
name|add
argument_list|(
name|q
argument_list|,
name|flags
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|bQuery
return|;
block|}
block|}
end_class
end_unit
