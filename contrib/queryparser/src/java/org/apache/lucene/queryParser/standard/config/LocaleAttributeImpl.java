begin_unit
begin_package
DECL|package|org.apache.lucene.queryParser.standard.config
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|standard
operator|.
name|config
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|core
operator|.
name|config
operator|.
name|QueryConfigHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|standard
operator|.
name|processors
operator|.
name|ParametricRangeQueryNodeProcessor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeImpl
import|;
end_import
begin_comment
comment|/**  * This attribute is used by processor {@link ParametricRangeQueryNodeProcessor}  * and must be defined in the {@link QueryConfigHandler}. This attribute tells  * the processor what is the default {@link Locale} used to parse a date.<br/>  *   * @see org.apache.lucene.queryParser.standard.config.LocaleAttribute  */
end_comment
begin_class
DECL|class|LocaleAttributeImpl
specifier|public
class|class
name|LocaleAttributeImpl
extends|extends
name|AttributeImpl
implements|implements
name|LocaleAttribute
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|6804760312720049526L
decl_stmt|;
DECL|field|locale
specifier|private
name|Locale
name|locale
init|=
name|Locale
operator|.
name|getDefault
argument_list|()
decl_stmt|;
DECL|method|LocaleAttributeImpl
specifier|public
name|LocaleAttributeImpl
parameter_list|()
block|{
name|locale
operator|=
name|Locale
operator|.
name|getDefault
argument_list|()
expr_stmt|;
comment|//default in 2.4
block|}
DECL|method|setLocale
specifier|public
name|void
name|setLocale
parameter_list|(
name|Locale
name|locale
parameter_list|)
block|{
name|this
operator|.
name|locale
operator|=
name|locale
expr_stmt|;
block|}
DECL|method|getLocale
specifier|public
name|Locale
name|getLocale
parameter_list|()
block|{
return|return
name|this
operator|.
name|locale
return|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|copyTo
specifier|public
name|void
name|copyTo
parameter_list|(
name|AttributeImpl
name|target
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|LocaleAttributeImpl
condition|)
block|{
name|LocaleAttributeImpl
name|localeAttr
init|=
operator|(
name|LocaleAttributeImpl
operator|)
name|other
decl_stmt|;
if|if
condition|(
name|localeAttr
operator|.
name|locale
operator|==
name|this
operator|.
name|locale
operator|||
operator|(
name|this
operator|.
name|locale
operator|!=
literal|null
operator|&&
name|localeAttr
operator|.
name|locale
operator|!=
literal|null
operator|&&
name|this
operator|.
name|locale
operator|.
name|equals
argument_list|(
name|localeAttr
operator|.
name|locale
argument_list|)
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|locale
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|locale
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"<localeAttribute locale="
operator|+
name|this
operator|.
name|locale
operator|+
literal|"/>"
return|;
block|}
block|}
end_class
end_unit
