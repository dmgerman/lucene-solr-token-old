begin_unit
begin_package
DECL|package|org.apache.solr.handler
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|AbstractSolrTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|LocalSolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ContentStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ContentStreamBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|extraction
operator|.
name|ExtractingParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|extraction
operator|.
name|ExtractingRequestHandler
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_comment
comment|/**  *  *  **/
end_comment
begin_class
DECL|class|ExtractingRequestHandlerTest
specifier|public
class|class
name|ExtractingRequestHandlerTest
extends|extends
name|AbstractSolrTestCase
block|{
annotation|@
name|Override
DECL|method|getSchemaFile
specifier|public
name|String
name|getSchemaFile
parameter_list|()
block|{
return|return
literal|"schema.xml"
return|;
block|}
annotation|@
name|Override
DECL|method|getSolrConfigFile
specifier|public
name|String
name|getSolrConfigFile
parameter_list|()
block|{
return|return
literal|"solrconfig.xml"
return|;
block|}
DECL|method|testExtraction
specifier|public
name|void
name|testExtraction
parameter_list|()
throws|throws
name|Exception
block|{
name|ExtractingRequestHandler
name|handler
init|=
operator|(
name|ExtractingRequestHandler
operator|)
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getRequestHandler
argument_list|(
literal|"/update/extract"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"handler is null and it shouldn't be"
argument_list|,
name|handler
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|loadLocal
argument_list|(
literal|"solr-word.pdf"
argument_list|,
literal|"ext.map.created"
argument_list|,
literal|"extractedDate"
argument_list|,
literal|"ext.map.producer"
argument_list|,
literal|"extractedProducer"
argument_list|,
literal|"ext.map.creator"
argument_list|,
literal|"extractedCreator"
argument_list|,
literal|"ext.map.Keywords"
argument_list|,
literal|"extractedKeywords"
argument_list|,
literal|"ext.map.Author"
argument_list|,
literal|"extractedAuthor"
argument_list|,
literal|"ext.def.fl"
argument_list|,
literal|"extractedContent"
argument_list|,
literal|"ext.literal.id"
argument_list|,
literal|"one"
argument_list|,
literal|"ext.map.Last-Modified"
argument_list|,
literal|"extractedDate"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"title:solr-word"
argument_list|)
argument_list|,
literal|"//*[@numFound='0']"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"title:solr-word"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
name|loadLocal
argument_list|(
literal|"simple.html"
argument_list|,
literal|"ext.map.created"
argument_list|,
literal|"extractedDate"
argument_list|,
literal|"ext.map.producer"
argument_list|,
literal|"extractedProducer"
argument_list|,
literal|"ext.map.creator"
argument_list|,
literal|"extractedCreator"
argument_list|,
literal|"ext.map.Keywords"
argument_list|,
literal|"extractedKeywords"
argument_list|,
literal|"ext.map.Author"
argument_list|,
literal|"extractedAuthor"
argument_list|,
literal|"ext.map.language"
argument_list|,
literal|"extractedLanguage"
argument_list|,
literal|"ext.literal.id"
argument_list|,
literal|"two"
argument_list|,
literal|"ext.def.fl"
argument_list|,
literal|"extractedContent"
argument_list|,
literal|"ext.map.Last-Modified"
argument_list|,
literal|"extractedDate"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"title:Welcome"
argument_list|)
argument_list|,
literal|"//*[@numFound='0']"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"title:Welcome"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
name|loadLocal
argument_list|(
literal|"version_control.xml"
argument_list|,
literal|"ext.map.created"
argument_list|,
literal|"extractedDate"
argument_list|,
literal|"ext.map.producer"
argument_list|,
literal|"extractedProducer"
argument_list|,
literal|"ext.map.creator"
argument_list|,
literal|"extractedCreator"
argument_list|,
literal|"ext.map.Keywords"
argument_list|,
literal|"extractedKeywords"
argument_list|,
literal|"ext.map.Author"
argument_list|,
literal|"extractedAuthor"
argument_list|,
literal|"ext.literal.id"
argument_list|,
literal|"three"
argument_list|,
literal|"ext.def.fl"
argument_list|,
literal|"extractedContent"
argument_list|,
literal|"ext.map.language"
argument_list|,
literal|"extractedLanguage"
argument_list|,
literal|"ext.map.Last-Modified"
argument_list|,
literal|"extractedDate"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"stream_name:version_control.xml"
argument_list|)
argument_list|,
literal|"//*[@numFound='0']"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"stream_name:version_control.xml"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testLiterals
specifier|public
name|void
name|testLiterals
parameter_list|()
throws|throws
name|Exception
block|{
name|ExtractingRequestHandler
name|handler
init|=
operator|(
name|ExtractingRequestHandler
operator|)
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getRequestHandler
argument_list|(
literal|"/update/extract"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"handler is null and it shouldn't be"
argument_list|,
name|handler
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|//test literal
name|loadLocal
argument_list|(
literal|"version_control.xml"
argument_list|,
literal|"ext.map.created"
argument_list|,
literal|"extractedDate"
argument_list|,
literal|"ext.map.producer"
argument_list|,
literal|"extractedProducer"
argument_list|,
literal|"ext.map.creator"
argument_list|,
literal|"extractedCreator"
argument_list|,
literal|"ext.map.Keywords"
argument_list|,
literal|"extractedKeywords"
argument_list|,
literal|"ext.map.Author"
argument_list|,
literal|"extractedAuthor"
argument_list|,
literal|"ext.def.fl"
argument_list|,
literal|"extractedContent"
argument_list|,
literal|"ext.literal.id"
argument_list|,
literal|"one"
argument_list|,
literal|"ext.map.language"
argument_list|,
literal|"extractedLanguage"
argument_list|,
literal|"ext.literal.extractionLiteralMV"
argument_list|,
literal|"one"
argument_list|,
literal|"ext.literal.extractionLiteralMV"
argument_list|,
literal|"two"
argument_list|,
literal|"ext.map.Last-Modified"
argument_list|,
literal|"extractedDate"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"stream_name:version_control.xml"
argument_list|)
argument_list|,
literal|"//*[@numFound='0']"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"stream_name:version_control.xml"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"extractionLiteralMV:one"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"extractionLiteralMV:two"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
try|try
block|{
name|loadLocal
argument_list|(
literal|"version_control.xml"
argument_list|,
literal|"ext.map.created"
argument_list|,
literal|"extractedDate"
argument_list|,
literal|"ext.map.producer"
argument_list|,
literal|"extractedProducer"
argument_list|,
literal|"ext.map.creator"
argument_list|,
literal|"extractedCreator"
argument_list|,
literal|"ext.map.Keywords"
argument_list|,
literal|"extractedKeywords"
argument_list|,
literal|"ext.map.Author"
argument_list|,
literal|"extractedAuthor"
argument_list|,
literal|"ext.def.fl"
argument_list|,
literal|"extractedContent"
argument_list|,
literal|"ext.literal.id"
argument_list|,
literal|"two"
argument_list|,
literal|"ext.map.language"
argument_list|,
literal|"extractedLanguage"
argument_list|,
literal|"ext.literal.extractionLiteral"
argument_list|,
literal|"one"
argument_list|,
literal|"ext.literal.extractionLiteral"
argument_list|,
literal|"two"
argument_list|,
literal|"ext.map.Last-Modified"
argument_list|,
literal|"extractedDate"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Exception should have been thrown"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
comment|//nothing to see here, move along
block|}
name|loadLocal
argument_list|(
literal|"version_control.xml"
argument_list|,
literal|"ext.map.created"
argument_list|,
literal|"extractedDate"
argument_list|,
literal|"ext.map.producer"
argument_list|,
literal|"extractedProducer"
argument_list|,
literal|"ext.map.creator"
argument_list|,
literal|"extractedCreator"
argument_list|,
literal|"ext.map.Keywords"
argument_list|,
literal|"extractedKeywords"
argument_list|,
literal|"ext.map.Author"
argument_list|,
literal|"extractedAuthor"
argument_list|,
literal|"ext.def.fl"
argument_list|,
literal|"extractedContent"
argument_list|,
literal|"ext.literal.id"
argument_list|,
literal|"three"
argument_list|,
literal|"ext.map.language"
argument_list|,
literal|"extractedLanguage"
argument_list|,
literal|"ext.literal.extractionLiteral"
argument_list|,
literal|"one"
argument_list|,
literal|"ext.map.Last-Modified"
argument_list|,
literal|"extractedDate"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"extractionLiteral:one"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testPlainTextSpecifyingMimeType
specifier|public
name|void
name|testPlainTextSpecifyingMimeType
parameter_list|()
throws|throws
name|Exception
block|{
name|ExtractingRequestHandler
name|handler
init|=
operator|(
name|ExtractingRequestHandler
operator|)
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getRequestHandler
argument_list|(
literal|"/update/extract"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"handler is null and it shouldn't be"
argument_list|,
name|handler
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// Load plain text specifying MIME type:
name|loadLocal
argument_list|(
literal|"version_control.txt"
argument_list|,
literal|"ext.map.created"
argument_list|,
literal|"extractedDate"
argument_list|,
literal|"ext.map.producer"
argument_list|,
literal|"extractedProducer"
argument_list|,
literal|"ext.map.creator"
argument_list|,
literal|"extractedCreator"
argument_list|,
literal|"ext.map.Keywords"
argument_list|,
literal|"extractedKeywords"
argument_list|,
literal|"ext.map.Author"
argument_list|,
literal|"extractedAuthor"
argument_list|,
literal|"ext.literal.id"
argument_list|,
literal|"one"
argument_list|,
literal|"ext.map.language"
argument_list|,
literal|"extractedLanguage"
argument_list|,
literal|"ext.def.fl"
argument_list|,
literal|"extractedContent"
argument_list|,
name|ExtractingParams
operator|.
name|STREAM_TYPE
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"extractedContent:Apache"
argument_list|)
argument_list|,
literal|"//*[@numFound='0']"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"extractedContent:Apache"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testPlainTextSpecifyingResourceName
specifier|public
name|void
name|testPlainTextSpecifyingResourceName
parameter_list|()
throws|throws
name|Exception
block|{
name|ExtractingRequestHandler
name|handler
init|=
operator|(
name|ExtractingRequestHandler
operator|)
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getRequestHandler
argument_list|(
literal|"/update/extract"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"handler is null and it shouldn't be"
argument_list|,
name|handler
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// Load plain text specifying filename
name|loadLocal
argument_list|(
literal|"version_control.txt"
argument_list|,
literal|"ext.map.created"
argument_list|,
literal|"extractedDate"
argument_list|,
literal|"ext.map.producer"
argument_list|,
literal|"extractedProducer"
argument_list|,
literal|"ext.map.creator"
argument_list|,
literal|"extractedCreator"
argument_list|,
literal|"ext.map.Keywords"
argument_list|,
literal|"extractedKeywords"
argument_list|,
literal|"ext.map.Author"
argument_list|,
literal|"extractedAuthor"
argument_list|,
literal|"ext.literal.id"
argument_list|,
literal|"one"
argument_list|,
literal|"ext.map.language"
argument_list|,
literal|"extractedLanguage"
argument_list|,
literal|"ext.def.fl"
argument_list|,
literal|"extractedContent"
argument_list|,
name|ExtractingParams
operator|.
name|RESOURCE_NAME
argument_list|,
literal|"version_control.txt"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"extractedContent:Apache"
argument_list|)
argument_list|,
literal|"//*[@numFound='0']"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"extractedContent:Apache"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
block|}
comment|// Note: If you load a plain text file specifying neither MIME type nor filename, extraction will silently fail. This is because Tika's
comment|// automatic MIME type detection will fail, and it will default to using an empty-string-returning default parser
DECL|method|testExtractOnly
specifier|public
name|void
name|testExtractOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|ExtractingRequestHandler
name|handler
init|=
operator|(
name|ExtractingRequestHandler
operator|)
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getRequestHandler
argument_list|(
literal|"/update/extract"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"handler is null and it shouldn't be"
argument_list|,
name|handler
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|SolrQueryResponse
name|rsp
init|=
name|loadLocal
argument_list|(
literal|"solr-word.pdf"
argument_list|,
name|ExtractingParams
operator|.
name|EXTRACT_ONLY
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"rsp is null and it shouldn't be"
argument_list|,
name|rsp
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|NamedList
name|list
init|=
name|rsp
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|String
name|extraction
init|=
operator|(
name|String
operator|)
name|list
operator|.
name|get
argument_list|(
literal|"solr-word.pdf"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"extraction is null and it shouldn't be"
argument_list|,
name|extraction
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|extraction
operator|+
literal|" does not contain "
operator|+
literal|"solr-word"
argument_list|,
name|extraction
operator|.
name|indexOf
argument_list|(
literal|"solr-word"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|NamedList
name|nl
init|=
operator|(
name|NamedList
operator|)
name|list
operator|.
name|get
argument_list|(
literal|"solr-word.pdf_metadata"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"nl is null and it shouldn't be"
argument_list|,
name|nl
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Object
name|title
init|=
name|nl
operator|.
name|get
argument_list|(
literal|"title"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"title is null and it shouldn't be"
argument_list|,
name|title
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testXPath
specifier|public
name|void
name|testXPath
parameter_list|()
throws|throws
name|Exception
block|{
name|ExtractingRequestHandler
name|handler
init|=
operator|(
name|ExtractingRequestHandler
operator|)
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getRequestHandler
argument_list|(
literal|"/update/extract"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"handler is null and it shouldn't be"
argument_list|,
name|handler
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|SolrQueryResponse
name|rsp
init|=
name|loadLocal
argument_list|(
literal|"example.html"
argument_list|,
name|ExtractingParams
operator|.
name|XPATH_EXPRESSION
argument_list|,
literal|"/xhtml:html/xhtml:body/xhtml:a/descendant:node()"
argument_list|,
name|ExtractingParams
operator|.
name|EXTRACT_ONLY
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"rsp is null and it shouldn't be"
argument_list|,
name|rsp
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|NamedList
name|list
init|=
name|rsp
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|String
name|val
init|=
operator|(
name|String
operator|)
name|list
operator|.
name|get
argument_list|(
literal|"example.html"
argument_list|)
decl_stmt|;
name|val
operator|=
name|val
operator|.
name|trim
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|val
operator|+
literal|" is not equal to "
operator|+
literal|"linkNews"
argument_list|,
name|val
operator|.
name|equals
argument_list|(
literal|"linkNews"
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
comment|//there are two<a> tags, and they get collapesd
block|}
DECL|method|loadLocal
name|SolrQueryResponse
name|loadLocal
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|LocalSolrQueryRequest
name|req
init|=
operator|(
name|LocalSolrQueryRequest
operator|)
name|req
argument_list|(
name|args
argument_list|)
decl_stmt|;
comment|// TODO: stop using locally defined streams once stream.file and
comment|// stream.body work everywhere
name|List
argument_list|<
name|ContentStream
argument_list|>
name|cs
init|=
operator|new
name|ArrayList
argument_list|<
name|ContentStream
argument_list|>
argument_list|()
decl_stmt|;
name|cs
operator|.
name|add
argument_list|(
operator|new
name|ContentStreamBase
operator|.
name|FileStream
argument_list|(
operator|new
name|File
argument_list|(
name|filename
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|req
operator|.
name|setContentStreams
argument_list|(
name|cs
argument_list|)
expr_stmt|;
return|return
name|h
operator|.
name|queryAndResponse
argument_list|(
literal|"/update/extract"
argument_list|,
name|req
argument_list|)
return|;
block|}
block|}
end_class
end_unit
