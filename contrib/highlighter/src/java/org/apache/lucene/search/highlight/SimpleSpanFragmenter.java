begin_unit
begin_package
DECL|package|org.apache.lucene.search.highlight
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|Spans
import|;
end_import
begin_comment
comment|/**  * {@link Fragmenter} implementation which breaks text up into same-size  * fragments but does not split up {@link Spans}. This is a simple sample class.  */
end_comment
begin_class
DECL|class|SimpleSpanFragmenter
specifier|public
class|class
name|SimpleSpanFragmenter
implements|implements
name|Fragmenter
block|{
DECL|field|DEFAULT_FRAGMENT_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_FRAGMENT_SIZE
init|=
literal|100
decl_stmt|;
DECL|field|fragmentSize
specifier|private
name|int
name|fragmentSize
decl_stmt|;
DECL|field|currentNumFrags
specifier|private
name|int
name|currentNumFrags
decl_stmt|;
DECL|field|position
specifier|private
name|int
name|position
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|queryScorer
specifier|private
name|QueryScorer
name|queryScorer
decl_stmt|;
DECL|field|waitForPos
specifier|private
name|int
name|waitForPos
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|textSize
specifier|private
name|int
name|textSize
decl_stmt|;
DECL|field|termAtt
specifier|private
name|TermAttribute
name|termAtt
decl_stmt|;
DECL|field|posIncAtt
specifier|private
name|PositionIncrementAttribute
name|posIncAtt
decl_stmt|;
DECL|field|offsetAtt
specifier|private
name|OffsetAttribute
name|offsetAtt
decl_stmt|;
comment|/**    * @param queryScorer QueryScorer that was used to score hits    */
DECL|method|SimpleSpanFragmenter
specifier|public
name|SimpleSpanFragmenter
parameter_list|(
name|QueryScorer
name|queryScorer
parameter_list|)
block|{
name|this
argument_list|(
name|queryScorer
argument_list|,
name|DEFAULT_FRAGMENT_SIZE
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param queryScorer QueryScorer that was used to score hits    * @param fragmentSize size in bytes of each fragment    */
DECL|method|SimpleSpanFragmenter
specifier|public
name|SimpleSpanFragmenter
parameter_list|(
name|QueryScorer
name|queryScorer
parameter_list|,
name|int
name|fragmentSize
parameter_list|)
block|{
name|this
operator|.
name|fragmentSize
operator|=
name|fragmentSize
expr_stmt|;
name|this
operator|.
name|queryScorer
operator|=
name|queryScorer
expr_stmt|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.lucene.search.highlight.Fragmenter#isNewFragment()    */
DECL|method|isNewFragment
specifier|public
name|boolean
name|isNewFragment
parameter_list|()
block|{
name|position
operator|+=
name|posIncAtt
operator|.
name|getPositionIncrement
argument_list|()
expr_stmt|;
if|if
condition|(
name|waitForPos
operator|==
name|position
condition|)
block|{
name|waitForPos
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|waitForPos
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
name|WeightedSpanTerm
name|wSpanTerm
init|=
name|queryScorer
operator|.
name|getWeightedSpanTerm
argument_list|(
name|termAtt
operator|.
name|term
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|wSpanTerm
operator|!=
literal|null
condition|)
block|{
name|List
name|positionSpans
init|=
name|wSpanTerm
operator|.
name|getPositionSpans
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|positionSpans
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|PositionSpan
operator|)
name|positionSpans
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|start
operator|==
name|position
condition|)
block|{
name|waitForPos
operator|=
operator|(
operator|(
name|PositionSpan
operator|)
name|positionSpans
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|end
operator|+
literal|1
expr_stmt|;
break|break;
block|}
block|}
block|}
name|boolean
name|isNewFrag
init|=
name|offsetAtt
operator|.
name|endOffset
argument_list|()
operator|>=
operator|(
name|fragmentSize
operator|*
name|currentNumFrags
operator|)
operator|&&
operator|(
name|textSize
operator|-
name|offsetAtt
operator|.
name|endOffset
argument_list|()
operator|)
operator|>=
operator|(
name|fragmentSize
operator|>>>
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|isNewFrag
condition|)
block|{
name|currentNumFrags
operator|++
expr_stmt|;
block|}
return|return
name|isNewFrag
return|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.lucene.search.highlight.Fragmenter#start(java.lang.String, org.apache.lucene.analysis.TokenStream)    */
DECL|method|start
specifier|public
name|void
name|start
parameter_list|(
name|String
name|originalText
parameter_list|,
name|TokenStream
name|tokenStream
parameter_list|)
block|{
name|position
operator|=
operator|-
literal|1
expr_stmt|;
name|currentNumFrags
operator|=
literal|1
expr_stmt|;
name|textSize
operator|=
name|originalText
operator|.
name|length
argument_list|()
expr_stmt|;
name|termAtt
operator|=
operator|(
name|TermAttribute
operator|)
name|tokenStream
operator|.
name|getAttribute
argument_list|(
name|TermAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|posIncAtt
operator|=
operator|(
name|PositionIncrementAttribute
operator|)
name|tokenStream
operator|.
name|getAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|offsetAtt
operator|=
operator|(
name|OffsetAttribute
operator|)
name|tokenStream
operator|.
name|getAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
