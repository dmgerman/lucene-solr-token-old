begin_unit
begin_package
DECL|package|org.apache.lucene.search.highlight
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_comment
comment|/**  * {@link Fragmenter} implementation which breaks text up into same-size   * fragments with no concerns over spotting sentence boundaries.  * @author mark@searcharea.co.uk  */
end_comment
begin_class
DECL|class|SimpleFragmenter
specifier|public
class|class
name|SimpleFragmenter
implements|implements
name|Fragmenter
block|{
DECL|field|DEFAULT_FRAGMENT_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_FRAGMENT_SIZE
init|=
literal|100
decl_stmt|;
DECL|field|currentNumFrags
specifier|private
name|int
name|currentNumFrags
decl_stmt|;
DECL|field|fragmentSize
specifier|private
name|int
name|fragmentSize
decl_stmt|;
DECL|method|SimpleFragmenter
specifier|public
name|SimpleFragmenter
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_FRAGMENT_SIZE
argument_list|)
expr_stmt|;
block|}
comment|/** 	 *  	 * @param fragmentSize size in bytes of each fragment 	 */
DECL|method|SimpleFragmenter
specifier|public
name|SimpleFragmenter
parameter_list|(
name|int
name|fragmentSize
parameter_list|)
block|{
name|this
operator|.
name|fragmentSize
operator|=
name|fragmentSize
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.apache.lucene.search.highlight.TextFragmenter#start(java.lang.String) 	 */
DECL|method|start
specifier|public
name|void
name|start
parameter_list|(
name|String
name|originalText
parameter_list|)
block|{
name|currentNumFrags
operator|=
literal|1
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.apache.lucene.search.highlight.TextFragmenter#isNewFragment(org.apache.lucene.analysis.Token) 	 */
DECL|method|isNewFragment
specifier|public
name|boolean
name|isNewFragment
parameter_list|(
name|Token
name|token
parameter_list|)
block|{
name|boolean
name|isNewFrag
init|=
name|token
operator|.
name|endOffset
argument_list|()
operator|>=
operator|(
name|fragmentSize
operator|*
name|currentNumFrags
operator|)
decl_stmt|;
if|if
condition|(
name|isNewFrag
condition|)
block|{
name|currentNumFrags
operator|++
expr_stmt|;
block|}
return|return
name|isNewFrag
return|;
block|}
comment|/** 	 * @return size in bytes of each fragment 	 */
DECL|method|getFragmentSize
specifier|public
name|int
name|getFragmentSize
parameter_list|()
block|{
return|return
name|fragmentSize
return|;
block|}
comment|/** 	 * @param size size in bytes of each fragment 	 */
DECL|method|setFragmentSize
specifier|public
name|void
name|setFragmentSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|fragmentSize
operator|=
name|size
expr_stmt|;
block|}
block|}
end_class
end_unit
