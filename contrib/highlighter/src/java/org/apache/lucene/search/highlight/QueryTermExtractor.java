begin_unit
begin_package
DECL|package|org.apache.lucene.search.highlight
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
package|;
end_package
begin_comment
comment|/**  * Copyright 2002-2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PhraseQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanNearQuery
import|;
end_import
begin_comment
comment|/**  * Utility class used to extract the terms used in a query, plus any weights.  * This class will not find terms for MultiTermQuery, RangeQuery and PrefixQuery classes  * so the caller must pass a rewritten query (see Query.rewrite) to obtain a list of   * expanded terms.   *   */
end_comment
begin_class
DECL|class|QueryTermExtractor
specifier|public
specifier|final
class|class
name|QueryTermExtractor
block|{
comment|/** 	 * Extracts all terms texts of a given Query into an array of WeightedTerms 	 * 	 * @param query      Query to extract term texts from 	 * @return an array of the terms used in a query, plus their weights. 	 */
DECL|method|getTerms
specifier|public
specifier|static
specifier|final
name|WeightedTerm
index|[]
name|getTerms
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
return|return
name|getTerms
argument_list|(
name|query
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/** 	 * Extracts all terms texts of a given Query into an array of WeightedTerms 	 * 	 * @param query      Query to extract term texts from 	 * @param reader used to compute IDF which can be used to a) score selected fragments better  	 * b) use graded highlights eg chaning intensity of font color 	 * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based 	 * @return an array of the terms used in a query, plus their weights. 	 */
DECL|method|getIdfWeightedTerms
specifier|public
specifier|static
specifier|final
name|WeightedTerm
index|[]
name|getIdfWeightedTerms
parameter_list|(
name|Query
name|query
parameter_list|,
name|IndexReader
name|reader
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|WeightedTerm
index|[]
name|terms
init|=
name|getTerms
argument_list|(
name|query
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|totalNumDocs
init|=
name|reader
operator|.
name|numDocs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|int
name|docFreq
init|=
name|reader
operator|.
name|docFreq
argument_list|(
operator|new
name|Term
argument_list|(
name|fieldName
argument_list|,
name|terms
index|[
name|i
index|]
operator|.
name|term
argument_list|)
argument_list|)
decl_stmt|;
comment|//IDF algorithm taken from DefaultSimilarity class
name|float
name|idf
init|=
call|(
name|float
call|)
argument_list|(
name|Math
operator|.
name|log
argument_list|(
operator|(
name|float
operator|)
name|totalNumDocs
operator|/
call|(
name|double
call|)
argument_list|(
name|docFreq
operator|+
literal|1
argument_list|)
argument_list|)
operator|+
literal|1.0
argument_list|)
decl_stmt|;
name|terms
index|[
name|i
index|]
operator|.
name|weight
operator|*=
name|idf
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
return|return
name|terms
return|;
block|}
comment|/** 	 * Extracts all terms texts of a given Query into an array of WeightedTerms 	 * 	 * @param query      Query to extract term texts from 	 * @param prohibited<code>true</code> to extract "prohibited" terms, too    * @return an array of the terms used in a query, plus their weights.    */
DECL|method|getTerms
specifier|public
specifier|static
specifier|final
name|WeightedTerm
index|[]
name|getTerms
parameter_list|(
name|Query
name|query
parameter_list|,
name|boolean
name|prohibited
parameter_list|)
block|{
name|HashSet
name|terms
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|getTerms
argument_list|(
name|query
argument_list|,
name|terms
argument_list|,
name|prohibited
argument_list|)
expr_stmt|;
return|return
operator|(
name|WeightedTerm
index|[]
operator|)
name|terms
operator|.
name|toArray
argument_list|(
operator|new
name|WeightedTerm
index|[
literal|0
index|]
argument_list|)
return|;
block|}
DECL|method|getTerms
specifier|private
specifier|static
specifier|final
name|void
name|getTerms
parameter_list|(
name|Query
name|query
parameter_list|,
name|HashSet
name|terms
parameter_list|,
name|boolean
name|prohibited
parameter_list|)
block|{
if|if
condition|(
name|query
operator|instanceof
name|BooleanQuery
condition|)
name|getTermsFromBooleanQuery
argument_list|(
operator|(
name|BooleanQuery
operator|)
name|query
argument_list|,
name|terms
argument_list|,
name|prohibited
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|PhraseQuery
condition|)
name|getTermsFromPhraseQuery
argument_list|(
operator|(
name|PhraseQuery
operator|)
name|query
argument_list|,
name|terms
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|TermQuery
condition|)
name|getTermsFromTermQuery
argument_list|(
operator|(
name|TermQuery
operator|)
name|query
argument_list|,
name|terms
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|SpanNearQuery
condition|)
name|getTermsFromSpanNearQuery
argument_list|(
operator|(
name|SpanNearQuery
operator|)
name|query
argument_list|,
name|terms
argument_list|)
expr_stmt|;
block|}
DECL|method|getTermsFromBooleanQuery
specifier|private
specifier|static
specifier|final
name|void
name|getTermsFromBooleanQuery
parameter_list|(
name|BooleanQuery
name|query
parameter_list|,
name|HashSet
name|terms
parameter_list|,
name|boolean
name|prohibited
parameter_list|)
block|{
name|BooleanClause
index|[]
name|queryClauses
init|=
name|query
operator|.
name|getClauses
argument_list|()
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|queryClauses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|prohibited
operator|||
operator|!
name|queryClauses
index|[
name|i
index|]
operator|.
name|prohibited
condition|)
name|getTerms
argument_list|(
name|queryClauses
index|[
name|i
index|]
operator|.
name|query
argument_list|,
name|terms
argument_list|,
name|prohibited
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getTermsFromPhraseQuery
specifier|private
specifier|static
specifier|final
name|void
name|getTermsFromPhraseQuery
parameter_list|(
name|PhraseQuery
name|query
parameter_list|,
name|HashSet
name|terms
parameter_list|)
block|{
name|Term
index|[]
name|queryTerms
init|=
name|query
operator|.
name|getTerms
argument_list|()
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|queryTerms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|terms
operator|.
name|add
argument_list|(
operator|new
name|WeightedTerm
argument_list|(
name|query
operator|.
name|getBoost
argument_list|()
argument_list|,
name|queryTerms
index|[
name|i
index|]
operator|.
name|text
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getTermsFromTermQuery
specifier|private
specifier|static
specifier|final
name|void
name|getTermsFromTermQuery
parameter_list|(
name|TermQuery
name|query
parameter_list|,
name|HashSet
name|terms
parameter_list|)
block|{
name|terms
operator|.
name|add
argument_list|(
operator|new
name|WeightedTerm
argument_list|(
name|query
operator|.
name|getBoost
argument_list|()
argument_list|,
name|query
operator|.
name|getTerm
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getTermsFromSpanNearQuery
specifier|private
specifier|static
specifier|final
name|void
name|getTermsFromSpanNearQuery
parameter_list|(
name|SpanNearQuery
name|query
parameter_list|,
name|HashSet
name|terms
parameter_list|)
block|{
name|Collection
name|queryTerms
init|=
name|query
operator|.
name|getTerms
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iterator
init|=
name|queryTerms
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
comment|// break it out for debugging.
name|Term
name|term
init|=
operator|(
name|Term
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|text
init|=
name|term
operator|.
name|text
argument_list|()
decl_stmt|;
name|terms
operator|.
name|add
argument_list|(
operator|new
name|WeightedTerm
argument_list|(
name|query
operator|.
name|getBoost
argument_list|()
argument_list|,
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
