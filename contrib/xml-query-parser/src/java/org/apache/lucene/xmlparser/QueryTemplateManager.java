begin_unit
begin_package
DECL|package|org.apache.lucene.xmlparser
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|xmlparser
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Result
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMResult
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import
begin_comment
comment|/**  * Provides utilities for turning query form input (such as from a web page or Swing gui) into   * Lucene XML queries by using XSL templates.  This approach offers a convenient way of externalizing   * and changing how user input is turned into Lucene queries.   * Database applications often adopt similar practices by externalizing SQL in template files that can  * be easily changed/optimized by a DBA.    * @author Mark Harwood  */
end_comment
begin_class
DECL|class|QueryTemplateManager
specifier|public
class|class
name|QueryTemplateManager
block|{
DECL|field|dbf
specifier|static
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
DECL|field|tFactory
specifier|static
name|TransformerFactory
name|tFactory
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
DECL|method|getQueryAsXmlString
specifier|public
specifier|static
name|String
name|getQueryAsXmlString
parameter_list|(
name|Properties
name|formProperties
parameter_list|,
name|String
name|templateName
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|ParserConfigurationException
throws|,
name|TransformerException
block|{
return|return
name|getQueryAsXmlString
argument_list|(
name|formProperties
argument_list|,
name|getDOMSource
argument_list|(
name|QueryTemplateManager
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|templateName
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getQueryAsXmlString
specifier|public
specifier|static
name|String
name|getQueryAsXmlString
parameter_list|(
name|Properties
name|formProperties
parameter_list|,
name|Source
name|xslDs
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|ParserConfigurationException
throws|,
name|TransformerException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|StreamResult
name|result
init|=
operator|new
name|StreamResult
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|transformCriteria
argument_list|(
name|formProperties
argument_list|,
name|xslDs
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|baos
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getQueryAsDOM
specifier|public
specifier|static
name|Document
name|getQueryAsDOM
parameter_list|(
name|Properties
name|formProperties
parameter_list|,
name|String
name|templateName
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|ParserConfigurationException
throws|,
name|TransformerException
block|{
return|return
name|getQueryAsDOM
argument_list|(
name|formProperties
argument_list|,
name|getDOMSource
argument_list|(
name|QueryTemplateManager
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|templateName
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getQueryAsDOM
specifier|public
specifier|static
name|Document
name|getQueryAsDOM
parameter_list|(
name|Properties
name|formProperties
parameter_list|,
name|InputStream
name|xslIs
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|ParserConfigurationException
throws|,
name|TransformerException
block|{
return|return
name|getQueryAsDOM
argument_list|(
name|formProperties
argument_list|,
name|getDOMSource
argument_list|(
name|xslIs
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getQueryAsDOM
specifier|public
specifier|static
name|Document
name|getQueryAsDOM
parameter_list|(
name|Properties
name|formProperties
parameter_list|,
name|Source
name|xslDs
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|ParserConfigurationException
throws|,
name|TransformerException
block|{
name|DOMResult
name|result
init|=
operator|new
name|DOMResult
argument_list|()
decl_stmt|;
name|transformCriteria
argument_list|(
name|formProperties
argument_list|,
name|xslDs
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
operator|(
name|Document
operator|)
name|result
operator|.
name|getNode
argument_list|()
return|;
block|}
DECL|method|transformCriteria
specifier|public
specifier|static
name|void
name|transformCriteria
parameter_list|(
name|Properties
name|formProperties
parameter_list|,
name|Source
name|xslDs
parameter_list|,
name|Result
name|result
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|ParserConfigurationException
throws|,
name|TransformerException
block|{
name|dbf
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Transformer
name|transformer
init|=
name|tFactory
operator|.
name|newTransformer
argument_list|(
name|xslDs
argument_list|)
decl_stmt|;
comment|//Create an XML document representing the search index document.
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
name|doc
init|=
name|db
operator|.
name|newDocument
argument_list|()
decl_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"Document"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|appendChild
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|Enumeration
name|keysEnum
init|=
name|formProperties
operator|.
name|keys
argument_list|()
decl_stmt|;
while|while
condition|(
name|keysEnum
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|keysEnum
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|formProperties
operator|.
name|getProperty
argument_list|(
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|value
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|value
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|DOMUtils
operator|.
name|insertChild
argument_list|(
name|root
argument_list|,
name|propName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Use XSLT to to transform into an XML query string using the  queryTemplate
name|DOMSource
name|xml
init|=
operator|new
name|DOMSource
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
name|xml
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|getDOMSource
specifier|public
specifier|static
name|DOMSource
name|getDOMSource
parameter_list|(
name|InputStream
name|xslIs
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|SAXException
throws|,
name|IOException
block|{
name|dbf
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|builder
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
name|xslDoc
init|=
name|builder
operator|.
name|parse
argument_list|(
name|xslIs
argument_list|)
decl_stmt|;
return|return
operator|new
name|DOMSource
argument_list|(
name|xslDoc
argument_list|)
return|;
block|}
block|}
end_class
end_unit
