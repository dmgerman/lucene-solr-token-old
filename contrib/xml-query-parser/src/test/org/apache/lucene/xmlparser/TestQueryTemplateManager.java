begin_unit
begin_package
DECL|package|org.apache.lucene.xmlparser
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|xmlparser
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|QueryParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Hits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import
begin_comment
comment|/**  * This class illustrates how form input (such as from a web page or Swing gui) can be  * turned into Lucene queries using a choice of XSL templates for different styles of queries.   * @author maharwood  */
end_comment
begin_class
DECL|class|TestQueryTemplateManager
specifier|public
class|class
name|TestQueryTemplateManager
extends|extends
name|TestCase
block|{
DECL|field|builder
name|CoreParser
name|builder
decl_stmt|;
DECL|field|analyzer
name|Analyzer
name|analyzer
init|=
operator|new
name|StandardAnalyzer
argument_list|()
decl_stmt|;
DECL|field|templates
name|HashMap
name|templates
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
DECL|field|searcher
specifier|private
name|IndexSearcher
name|searcher
decl_stmt|;
comment|//A collection of documents' field values for use in our tests
DECL|field|docFieldValues
name|String
name|docFieldValues
index|[]
init|=
block|{
literal|"artist=Jeff Buckley \talbum=Grace \treleaseDate=1999 \tgenre=rock"
block|,
literal|"artist=Fugazi \talbum=Repeater \treleaseDate=1990 \tgenre=alternative"
block|,
literal|"artist=Fugazi \talbum=Red Medicine \treleaseDate=1995 \tgenre=alternative"
block|,
literal|"artist=Peeping Tom \talbum=Peeping Tom \treleaseDate=2006 \tgenre=rock"
block|,
literal|"artist=Red Snapper \talbum=Prince Blimey \treleaseDate=1996 \tgenre=electronic"
block|}
decl_stmt|;
comment|//A collection of example queries, consisting of name/value pairs representing form content plus
comment|// a choice of query style template to use in the test, with expected number of hits
DECL|field|queryForms
name|String
name|queryForms
index|[]
init|=
block|{
literal|"artist=Fugazi \texpectedMatches=2 \ttemplate=albumBooleanQuery.xsl"
block|,
literal|"artist=Fugazi \treleaseDate=1990 \texpectedMatches=1 \ttemplate=albumBooleanQuery.xsl"
block|,
literal|"artist=Buckley \tgenre=rock \texpectedMatches=1 \ttemplate=albumFilteredQuery.xsl"
block|,
literal|"artist=Buckley \tgenre=electronic \texpectedMatches=0 \ttemplate=albumFilteredQuery.xsl"
block|,
literal|"queryString=artist:buckly~ NOT genre:electronic \texpectedMatches=1 \ttemplate=albumLuceneClassicQuery.xsl"
block|}
decl_stmt|;
DECL|method|testFormTransforms
specifier|public
name|void
name|testFormTransforms
parameter_list|()
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|ParserConfigurationException
throws|,
name|TransformerException
throws|,
name|ParserException
block|{
comment|//Run all of our test queries
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queryForms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Properties
name|queryFormProperties
init|=
name|getPropsFromString
argument_list|(
name|queryForms
index|[
name|i
index|]
argument_list|)
decl_stmt|;
comment|//Get the required query XSL template for this test
name|Source
name|template
init|=
name|getTemplate
argument_list|(
name|queryFormProperties
operator|.
name|getProperty
argument_list|(
literal|"template"
argument_list|)
argument_list|)
decl_stmt|;
comment|//Transform the queryFormProperties into a Lucene XML query
name|Document
name|doc
init|=
name|QueryTemplateManager
operator|.
name|getQueryAsDOM
argument_list|(
name|queryFormProperties
argument_list|,
name|template
argument_list|)
decl_stmt|;
comment|//Parse the XML query using the XML parser
name|Query
name|q
init|=
name|builder
operator|.
name|getQuery
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
decl_stmt|;
comment|//Run the query
name|Hits
name|h
init|=
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|)
decl_stmt|;
comment|//Check we have the expected number of results
name|int
name|expectedHits
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|queryFormProperties
operator|.
name|getProperty
argument_list|(
literal|"expectedMatches"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number of results should match for query "
operator|+
name|queryForms
index|[
name|i
index|]
argument_list|,
name|expectedHits
argument_list|,
name|h
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getTemplate
specifier|private
name|Source
name|getTemplate
parameter_list|(
name|String
name|templateName
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|SAXException
throws|,
name|IOException
block|{
name|Source
name|result
init|=
operator|(
name|Source
operator|)
name|templates
operator|.
name|get
argument_list|(
name|templateName
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
comment|//Not yet loaded - load the stylesheet
name|result
operator|=
name|QueryTemplateManager
operator|.
name|getDOMSource
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|templateName
argument_list|)
argument_list|)
expr_stmt|;
name|templates
operator|.
name|put
argument_list|(
name|templateName
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|//Helper method to construct Lucene query forms used in our test
DECL|method|getPropsFromString
name|Properties
name|getPropsFromString
parameter_list|(
name|String
name|nameValuePairs
parameter_list|)
block|{
name|Properties
name|result
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|nameValuePairs
argument_list|,
literal|"\t="
argument_list|)
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|st
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|value
init|=
name|st
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|result
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|//Helper method to construct Lucene documents used in our tests
DECL|method|getDocumentFromString
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
name|getDocumentFromString
parameter_list|(
name|String
name|nameValuePairs
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
name|result
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
argument_list|()
decl_stmt|;
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|nameValuePairs
argument_list|,
literal|"\t="
argument_list|)
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|st
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|value
init|=
name|st
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/* 	 * @see TestCase#setUp() 	 */
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|//Create an index
name|RAMDirectory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|analyzer
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docFieldValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|getDocumentFromString
argument_list|(
name|docFieldValues
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|//initialize the parser
name|builder
operator|=
operator|new
name|CorePlusExtensionsParser
argument_list|(
name|analyzer
argument_list|,
operator|new
name|QueryParser
argument_list|(
literal|"artist"
argument_list|,
name|analyzer
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|tearDown
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
