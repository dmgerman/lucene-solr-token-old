begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.compound
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|compound
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CharArraySet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_comment
comment|/**  * Base class for decomposition token filters.  */
end_comment
begin_class
DECL|class|CompoundWordTokenFilterBase
specifier|public
specifier|abstract
class|class
name|CompoundWordTokenFilterBase
extends|extends
name|TokenFilter
block|{
comment|/**    * The default for minimal word length that gets decomposed    */
DECL|field|DEFAULT_MIN_WORD_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MIN_WORD_SIZE
init|=
literal|5
decl_stmt|;
comment|/**    * The default for minimal length of subwords that get propagated to the output of this filter    */
DECL|field|DEFAULT_MIN_SUBWORD_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MIN_SUBWORD_SIZE
init|=
literal|2
decl_stmt|;
comment|/**    * The default for maximal length of subwords that get propagated to the output of this filter    */
DECL|field|DEFAULT_MAX_SUBWORD_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_SUBWORD_SIZE
init|=
literal|15
decl_stmt|;
DECL|field|dictionary
specifier|protected
specifier|final
name|CharArraySet
name|dictionary
decl_stmt|;
DECL|field|tokens
specifier|protected
specifier|final
name|LinkedList
name|tokens
decl_stmt|;
DECL|field|minWordSize
specifier|protected
specifier|final
name|int
name|minWordSize
decl_stmt|;
DECL|field|minSubwordSize
specifier|protected
specifier|final
name|int
name|minSubwordSize
decl_stmt|;
DECL|field|maxSubwordSize
specifier|protected
specifier|final
name|int
name|maxSubwordSize
decl_stmt|;
DECL|field|onlyLongestMatch
specifier|protected
specifier|final
name|boolean
name|onlyLongestMatch
decl_stmt|;
DECL|method|CompoundWordTokenFilterBase
specifier|protected
name|CompoundWordTokenFilterBase
parameter_list|(
name|TokenStream
name|input
parameter_list|,
name|String
index|[]
name|dictionary
parameter_list|,
name|int
name|minWordSize
parameter_list|,
name|int
name|minSubwordSize
parameter_list|,
name|int
name|maxSubwordSize
parameter_list|,
name|boolean
name|onlyLongestMatch
parameter_list|)
block|{
name|this
argument_list|(
name|input
argument_list|,
name|makeDictionary
argument_list|(
name|dictionary
argument_list|)
argument_list|,
name|minWordSize
argument_list|,
name|minSubwordSize
argument_list|,
name|maxSubwordSize
argument_list|,
name|onlyLongestMatch
argument_list|)
expr_stmt|;
block|}
DECL|method|CompoundWordTokenFilterBase
specifier|protected
name|CompoundWordTokenFilterBase
parameter_list|(
name|TokenStream
name|input
parameter_list|,
name|String
index|[]
name|dictionary
parameter_list|,
name|boolean
name|onlyLongestMatch
parameter_list|)
block|{
name|this
argument_list|(
name|input
argument_list|,
name|makeDictionary
argument_list|(
name|dictionary
argument_list|)
argument_list|,
name|DEFAULT_MIN_WORD_SIZE
argument_list|,
name|DEFAULT_MIN_SUBWORD_SIZE
argument_list|,
name|DEFAULT_MAX_SUBWORD_SIZE
argument_list|,
name|onlyLongestMatch
argument_list|)
expr_stmt|;
block|}
DECL|method|CompoundWordTokenFilterBase
specifier|protected
name|CompoundWordTokenFilterBase
parameter_list|(
name|TokenStream
name|input
parameter_list|,
name|Set
name|dictionary
parameter_list|,
name|boolean
name|onlyLongestMatch
parameter_list|)
block|{
name|this
argument_list|(
name|input
argument_list|,
name|dictionary
argument_list|,
name|DEFAULT_MIN_WORD_SIZE
argument_list|,
name|DEFAULT_MIN_SUBWORD_SIZE
argument_list|,
name|DEFAULT_MAX_SUBWORD_SIZE
argument_list|,
name|onlyLongestMatch
argument_list|)
expr_stmt|;
block|}
DECL|method|CompoundWordTokenFilterBase
specifier|protected
name|CompoundWordTokenFilterBase
parameter_list|(
name|TokenStream
name|input
parameter_list|,
name|String
index|[]
name|dictionary
parameter_list|)
block|{
name|this
argument_list|(
name|input
argument_list|,
name|makeDictionary
argument_list|(
name|dictionary
argument_list|)
argument_list|,
name|DEFAULT_MIN_WORD_SIZE
argument_list|,
name|DEFAULT_MIN_SUBWORD_SIZE
argument_list|,
name|DEFAULT_MAX_SUBWORD_SIZE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|CompoundWordTokenFilterBase
specifier|protected
name|CompoundWordTokenFilterBase
parameter_list|(
name|TokenStream
name|input
parameter_list|,
name|Set
name|dictionary
parameter_list|)
block|{
name|this
argument_list|(
name|input
argument_list|,
name|dictionary
argument_list|,
name|DEFAULT_MIN_WORD_SIZE
argument_list|,
name|DEFAULT_MIN_SUBWORD_SIZE
argument_list|,
name|DEFAULT_MAX_SUBWORD_SIZE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|CompoundWordTokenFilterBase
specifier|protected
name|CompoundWordTokenFilterBase
parameter_list|(
name|TokenStream
name|input
parameter_list|,
name|Set
name|dictionary
parameter_list|,
name|int
name|minWordSize
parameter_list|,
name|int
name|minSubwordSize
parameter_list|,
name|int
name|maxSubwordSize
parameter_list|,
name|boolean
name|onlyLongestMatch
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|this
operator|.
name|tokens
operator|=
operator|new
name|LinkedList
argument_list|()
expr_stmt|;
name|this
operator|.
name|minWordSize
operator|=
name|minWordSize
expr_stmt|;
name|this
operator|.
name|minSubwordSize
operator|=
name|minSubwordSize
expr_stmt|;
name|this
operator|.
name|maxSubwordSize
operator|=
name|maxSubwordSize
expr_stmt|;
name|this
operator|.
name|onlyLongestMatch
operator|=
name|onlyLongestMatch
expr_stmt|;
if|if
condition|(
name|dictionary
operator|instanceof
name|CharArraySet
condition|)
block|{
name|this
operator|.
name|dictionary
operator|=
operator|(
name|CharArraySet
operator|)
name|dictionary
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|dictionary
operator|=
operator|new
name|CharArraySet
argument_list|(
name|dictionary
operator|.
name|size
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addAllLowerCase
argument_list|(
name|this
operator|.
name|dictionary
argument_list|,
name|dictionary
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create a set of words from an array    * The resulting Set does case insensitive matching    * TODO We should look for a faster dictionary lookup approach.    * @param dictionary    * @return    */
DECL|method|makeDictionary
specifier|public
specifier|static
specifier|final
name|Set
name|makeDictionary
parameter_list|(
specifier|final
name|String
index|[]
name|dictionary
parameter_list|)
block|{
name|CharArraySet
name|dict
init|=
operator|new
name|CharArraySet
argument_list|(
name|dictionary
operator|.
name|length
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|addAllLowerCase
argument_list|(
name|dict
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|dictionary
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|dict
return|;
block|}
DECL|method|next
specifier|public
name|Token
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|tokens
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|(
name|Token
operator|)
name|tokens
operator|.
name|removeFirst
argument_list|()
return|;
block|}
name|Token
name|token
init|=
name|input
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|decompose
argument_list|(
name|token
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokens
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|(
name|Token
operator|)
name|tokens
operator|.
name|removeFirst
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|addAllLowerCase
specifier|protected
specifier|static
specifier|final
name|void
name|addAllLowerCase
parameter_list|(
name|Set
name|target
parameter_list|,
name|Collection
name|col
parameter_list|)
block|{
name|Iterator
name|iter
init|=
name|col
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|target
operator|.
name|add
argument_list|(
operator|(
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
operator|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|makeLowerCaseCopy
specifier|protected
specifier|static
name|char
index|[]
name|makeLowerCaseCopy
parameter_list|(
specifier|final
name|char
index|[]
name|buffer
parameter_list|)
block|{
name|char
index|[]
name|result
init|=
operator|new
name|char
index|[
name|buffer
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buffer
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|Character
operator|.
name|toLowerCase
argument_list|(
name|buffer
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|createToken
specifier|protected
specifier|final
name|Token
name|createToken
parameter_list|(
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|length
parameter_list|,
specifier|final
name|Token
name|prototype
parameter_list|)
block|{
name|Token
name|t
init|=
operator|new
name|Token
argument_list|(
name|prototype
operator|.
name|startOffset
argument_list|()
operator|+
name|offset
argument_list|,
name|prototype
operator|.
name|startOffset
argument_list|()
operator|+
name|offset
operator|+
name|length
argument_list|,
name|prototype
operator|.
name|type
argument_list|()
argument_list|)
decl_stmt|;
name|t
operator|.
name|setTermBuffer
argument_list|(
name|prototype
operator|.
name|termBuffer
argument_list|()
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|t
operator|.
name|setPositionIncrement
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
DECL|method|decompose
specifier|protected
name|void
name|decompose
parameter_list|(
specifier|final
name|Token
name|token
parameter_list|)
block|{
comment|// In any case we give the original token back
name|tokens
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
comment|// Only words longer than minWordSize get processed
if|if
condition|(
name|token
operator|.
name|termLength
argument_list|()
operator|<
name|this
operator|.
name|minWordSize
condition|)
block|{
return|return;
block|}
name|decomposeInternal
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
DECL|method|decomposeInternal
specifier|protected
specifier|abstract
name|void
name|decomposeInternal
parameter_list|(
specifier|final
name|Token
name|token
parameter_list|)
function_decl|;
block|}
end_class
end_unit
