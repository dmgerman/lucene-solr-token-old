begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.fr
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|fr
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_comment
comment|/**  * Removes elisions from a token stream. For example, "l'avion" (the plane) will be  * tokenized as "avion" (plane).  *<p>  * Note that StandardTokenizer sees " ' " as a space, and cuts it out.  *   * @see<a href="http://fr.wikipedia.org/wiki/%C3%89lision">Elision in Wikipedia</a>   * @author<a href="mailto:mlecarme@openwide.fr">Mathieu Lecarme</a>  */
end_comment
begin_class
DECL|class|ElisionFilter
specifier|public
class|class
name|ElisionFilter
extends|extends
name|TokenFilter
block|{
DECL|field|articles
specifier|private
name|Set
name|articles
init|=
literal|null
decl_stmt|;
DECL|field|apostrophes
specifier|private
specifier|static
name|char
index|[]
name|apostrophes
init|=
block|{
literal|'\''
block|,
literal|'â'
block|}
decl_stmt|;
DECL|method|setArticles
specifier|public
name|void
name|setArticles
parameter_list|(
name|Set
name|articles
parameter_list|)
block|{
name|this
operator|.
name|articles
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|Iterator
name|iter
init|=
name|articles
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|this
operator|.
name|articles
operator|.
name|add
argument_list|(
operator|(
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
operator|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Constructs an elision filter with standard stop words    */
DECL|method|ElisionFilter
specifier|protected
name|ElisionFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|this
operator|.
name|articles
operator|=
operator|new
name|HashSet
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"l"
block|,
literal|"m"
block|,
literal|"t"
block|,
literal|"qu"
block|,
literal|"n"
block|,
literal|"s"
block|,
literal|"j"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs an elision filter with a Set of stop words    */
DECL|method|ElisionFilter
specifier|public
name|ElisionFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|,
name|Set
name|articles
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|setArticles
argument_list|(
name|articles
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs an elision filter with an array of stop words    */
DECL|method|ElisionFilter
specifier|public
name|ElisionFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|,
name|String
index|[]
name|articles
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|setArticles
argument_list|(
operator|new
name|HashSet
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|articles
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the next input Token with term() without elisioned start    */
DECL|method|next
specifier|public
name|Token
name|next
parameter_list|(
specifier|final
name|Token
name|reusableToken
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|reusableToken
operator|!=
literal|null
assert|;
name|Token
name|nextToken
init|=
name|input
operator|.
name|next
argument_list|(
name|reusableToken
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextToken
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|char
index|[]
name|termBuffer
init|=
name|nextToken
operator|.
name|termBuffer
argument_list|()
decl_stmt|;
name|int
name|termLength
init|=
name|nextToken
operator|.
name|termLength
argument_list|()
decl_stmt|;
name|int
name|minPoz
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|apostrophes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|char
name|apos
init|=
name|apostrophes
index|[
name|i
index|]
decl_stmt|;
comment|// The equivalent of String.indexOf(ch)
for|for
control|(
name|int
name|poz
init|=
literal|0
init|;
name|poz
operator|<
name|termLength
condition|;
name|poz
operator|++
control|)
block|{
if|if
condition|(
name|termBuffer
index|[
name|poz
index|]
operator|==
name|apos
condition|)
block|{
name|minPoz
operator|=
name|Math
operator|.
name|min
argument_list|(
name|poz
argument_list|,
name|minPoz
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|// An apostrophe has been found. If the prefix is an article strip it off.
if|if
condition|(
name|minPoz
operator|!=
name|Integer
operator|.
name|MAX_VALUE
operator|&&
name|articles
operator|.
name|contains
argument_list|(
operator|new
name|String
argument_list|(
name|nextToken
operator|.
name|termBuffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|minPoz
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|nextToken
operator|.
name|setTermBuffer
argument_list|(
name|nextToken
operator|.
name|termBuffer
argument_list|()
argument_list|,
name|minPoz
operator|+
literal|1
argument_list|,
name|nextToken
operator|.
name|termLength
argument_list|()
operator|-
operator|(
name|minPoz
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|nextToken
return|;
block|}
block|}
end_class
end_unit
