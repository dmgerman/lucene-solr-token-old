begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.miscellaneous
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Payload
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * Joins two token streams and leaves the last token of the first stream available  * to be used when updating the token values in the second stream based on that token.  *  * The default implementation adds last prefix token end offset to the suffix token start and end offsets.  */
end_comment
begin_class
DECL|class|PrefixAwareTokenFilter
specifier|public
class|class
name|PrefixAwareTokenFilter
extends|extends
name|TokenStream
block|{
DECL|field|prefix
specifier|private
name|TokenStream
name|prefix
decl_stmt|;
DECL|field|suffix
specifier|private
name|TokenStream
name|suffix
decl_stmt|;
DECL|method|PrefixAwareTokenFilter
specifier|public
name|PrefixAwareTokenFilter
parameter_list|(
name|TokenStream
name|prefix
parameter_list|,
name|TokenStream
name|suffix
parameter_list|)
block|{
name|this
operator|.
name|suffix
operator|=
name|suffix
expr_stmt|;
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
name|prefixExhausted
operator|=
literal|false
expr_stmt|;
block|}
DECL|field|previousPrefixToken
specifier|private
name|CopyableToken
name|previousPrefixToken
init|=
operator|new
name|CopyableToken
argument_list|()
decl_stmt|;
DECL|field|prefixExhausted
specifier|private
name|boolean
name|prefixExhausted
decl_stmt|;
DECL|method|next
specifier|public
name|Token
name|next
parameter_list|(
name|Token
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|Token
name|buf
init|=
name|result
decl_stmt|;
if|if
condition|(
operator|!
name|prefixExhausted
condition|)
block|{
name|result
operator|=
name|prefix
operator|.
name|next
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|prefixExhausted
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|previousPrefixToken
operator|.
name|copyFrom
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
name|result
operator|=
name|suffix
operator|.
name|next
argument_list|(
name|buf
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|updateSuffixToken
argument_list|(
name|result
argument_list|,
name|previousPrefixToken
argument_list|)
return|;
block|}
comment|/**    * The default implementation adds last prefix token end offset to the suffix token start and end offsets.    *    * @param suffixToken a token from the suffix stream    * @param lastPrefixToken the last token from the prefix stream    * @return consumer token    */
DECL|method|updateSuffixToken
specifier|public
name|Token
name|updateSuffixToken
parameter_list|(
name|Token
name|suffixToken
parameter_list|,
name|Token
name|lastPrefixToken
parameter_list|)
block|{
name|suffixToken
operator|.
name|setStartOffset
argument_list|(
name|lastPrefixToken
operator|.
name|endOffset
argument_list|()
operator|+
name|suffixToken
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|suffixToken
operator|.
name|setEndOffset
argument_list|(
name|lastPrefixToken
operator|.
name|endOffset
argument_list|()
operator|+
name|suffixToken
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|suffixToken
return|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|prefix
operator|.
name|close
argument_list|()
expr_stmt|;
name|suffix
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
name|prefixExhausted
operator|=
literal|false
expr_stmt|;
name|prefix
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|suffix
operator|!=
literal|null
condition|)
block|{
name|suffix
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getPrefix
specifier|public
name|TokenStream
name|getPrefix
parameter_list|()
block|{
return|return
name|prefix
return|;
block|}
DECL|method|setPrefix
specifier|public
name|void
name|setPrefix
parameter_list|(
name|TokenStream
name|prefix
parameter_list|)
block|{
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
block|}
DECL|method|getSuffix
specifier|public
name|TokenStream
name|getSuffix
parameter_list|()
block|{
return|return
name|suffix
return|;
block|}
DECL|method|setSuffix
specifier|public
name|void
name|setSuffix
parameter_list|(
name|TokenStream
name|suffix
parameter_list|)
block|{
name|this
operator|.
name|suffix
operator|=
name|suffix
expr_stmt|;
block|}
DECL|class|CopyableToken
specifier|public
specifier|static
class|class
name|CopyableToken
extends|extends
name|Token
block|{
DECL|field|buf
specifier|private
name|Payload
name|buf
init|=
operator|new
name|Payload
argument_list|()
decl_stmt|;
DECL|method|copyFrom
specifier|public
name|void
name|copyFrom
parameter_list|(
name|Token
name|source
parameter_list|)
block|{
if|if
condition|(
name|source
operator|.
name|termBuffer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setTermBuffer
argument_list|(
name|source
operator|.
name|termBuffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|source
operator|.
name|termLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setTermText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setTermLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|setPositionIncrement
argument_list|(
name|source
operator|.
name|getPositionIncrement
argument_list|()
argument_list|)
expr_stmt|;
name|setFlags
argument_list|(
name|source
operator|.
name|getFlags
argument_list|()
argument_list|)
expr_stmt|;
name|setStartOffset
argument_list|(
name|source
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|setEndOffset
argument_list|(
name|source
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|setType
argument_list|(
name|source
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|source
operator|.
name|getPayload
argument_list|()
operator|==
literal|null
condition|)
block|{
name|setPayload
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setPayload
argument_list|(
name|buf
argument_list|)
expr_stmt|;
if|if
condition|(
name|buf
operator|.
name|getData
argument_list|()
operator|==
literal|null
operator|||
name|buf
operator|.
name|getData
argument_list|()
operator|.
name|length
operator|<
name|source
operator|.
name|getPayload
argument_list|()
operator|.
name|length
argument_list|()
condition|)
block|{
name|buf
operator|.
name|setData
argument_list|(
operator|new
name|byte
index|[
name|source
operator|.
name|getPayload
argument_list|()
operator|.
name|length
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
name|source
operator|.
name|getPayload
argument_list|()
operator|.
name|copyTo
argument_list|(
name|buf
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|buf
operator|.
name|setData
argument_list|(
name|buf
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|source
operator|.
name|getPayload
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
