begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.analysis.cn.smart
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|cn
operator|.
name|smart
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import
begin_comment
comment|/**  *   * åå«ä¸ä¸ªå®æ´å¥å­çTokenï¼ä»æä»¶ä¸­è¯»åºï¼æ¯ä¸ä¸æ­¥åè¯çå¯¹è±¡  *   */
end_comment
begin_class
DECL|class|SentenceTokenizer
specifier|public
class|class
name|SentenceTokenizer
extends|extends
name|Tokenizer
block|{
comment|/**    * ç¨æ¥åæ­å¥å­çæ ç¹ç¬¦å· ãï¼ï¼ï¼ï¼,!?;    */
DECL|field|PUNCTION
specifier|public
specifier|final
specifier|static
name|String
name|PUNCTION
init|=
literal|"ãï¼ï¼ï¼ï¼,!?;"
decl_stmt|;
DECL|field|buffer
specifier|private
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
DECL|field|bufferInput
specifier|private
name|BufferedReader
name|bufferInput
decl_stmt|;
DECL|field|tokenStart
DECL|field|tokenEnd
specifier|private
name|int
name|tokenStart
init|=
literal|0
decl_stmt|,
name|tokenEnd
init|=
literal|0
decl_stmt|;
DECL|field|t
specifier|private
name|Token
name|t
init|=
operator|new
name|Token
argument_list|()
decl_stmt|;
DECL|method|SentenceTokenizer
specifier|public
name|SentenceTokenizer
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
name|super
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|bufferInput
operator|=
operator|new
name|BufferedReader
argument_list|(
name|reader
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
block|}
DECL|method|next
specifier|public
name|Token
name|next
parameter_list|()
throws|throws
name|IOException
block|{
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|ci
decl_stmt|;
name|char
name|ch
decl_stmt|,
name|pch
decl_stmt|;
name|boolean
name|atBegin
init|=
literal|true
decl_stmt|;
name|tokenStart
operator|=
name|tokenEnd
expr_stmt|;
name|ci
operator|=
name|bufferInput
operator|.
name|read
argument_list|()
expr_stmt|;
name|ch
operator|=
operator|(
name|char
operator|)
name|ci
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|ci
operator|==
operator|-
literal|1
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|PUNCTION
operator|.
name|indexOf
argument_list|(
name|ch
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// æ¾å°äºå¥å­æ«å°¾
name|buffer
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|tokenEnd
operator|++
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|atBegin
operator|&&
name|Utility
operator|.
name|SPACES
operator|.
name|indexOf
argument_list|(
name|ch
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|tokenStart
operator|++
expr_stmt|;
name|tokenEnd
operator|++
expr_stmt|;
name|ci
operator|=
name|bufferInput
operator|.
name|read
argument_list|()
expr_stmt|;
name|ch
operator|=
operator|(
name|char
operator|)
name|ci
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|atBegin
operator|=
literal|false
expr_stmt|;
name|tokenEnd
operator|++
expr_stmt|;
name|pch
operator|=
name|ch
expr_stmt|;
name|ci
operator|=
name|bufferInput
operator|.
name|read
argument_list|()
expr_stmt|;
name|ch
operator|=
operator|(
name|char
operator|)
name|ci
expr_stmt|;
comment|// å¦æç¢°ä¸äºä¸¤ä¸ªè¿ç»­çskipå­ç¬¦ï¼ä¾å¦ä¸¤ä¸ªåè½¦ï¼ä¸¤ä¸ªç©ºæ ¼æèï¼
comment|// ä¸ä¸ªåè½¦ï¼ä¸ä¸ªç©ºæ ¼ç­ç­ï¼å°å¶è§ä¸ºå¥å­ç»æï¼ä»¥åå¥å­å¤ªé¿èåå­ä¸è¶³
if|if
condition|(
name|Utility
operator|.
name|SPACES
operator|.
name|indexOf
argument_list|(
name|ch
argument_list|)
operator|!=
operator|-
literal|1
operator|&&
name|Utility
operator|.
name|SPACES
operator|.
name|indexOf
argument_list|(
name|pch
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// buffer.append(ch);
name|tokenEnd
operator|++
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|buffer
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
else|else
block|{
name|t
operator|.
name|clear
argument_list|()
expr_stmt|;
name|t
operator|.
name|reinit
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|,
name|input
operator|.
name|correctOffset
argument_list|(
name|tokenStart
argument_list|)
argument_list|,
name|input
operator|.
name|correctOffset
argument_list|(
name|tokenEnd
argument_list|)
argument_list|,
literal|"sentence"
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|bufferInput
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
