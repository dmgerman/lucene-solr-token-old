begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.payloads
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|payloads
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Payload
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * Assigns a payload to a token based on the {@link org.apache.lucene.analysis.Token#type()}  *  **/
end_comment
begin_class
DECL|class|NumericPayloadTokenFilter
specifier|public
class|class
name|NumericPayloadTokenFilter
extends|extends
name|TokenFilter
block|{
DECL|field|typeMatch
specifier|private
name|String
name|typeMatch
decl_stmt|;
DECL|field|thePayload
specifier|private
name|Payload
name|thePayload
decl_stmt|;
DECL|method|NumericPayloadTokenFilter
specifier|public
name|NumericPayloadTokenFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|,
name|float
name|payload
parameter_list|,
name|String
name|typeMatch
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
comment|//Need to encode the payload
name|thePayload
operator|=
operator|new
name|Payload
argument_list|(
name|encodePayload
argument_list|(
name|payload
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|typeMatch
operator|=
name|typeMatch
expr_stmt|;
block|}
DECL|method|encodePayload
specifier|public
specifier|static
name|byte
index|[]
name|encodePayload
parameter_list|(
name|float
name|payload
parameter_list|)
block|{
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|int
name|tmp
init|=
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|payload
argument_list|)
decl_stmt|;
name|result
index|[
literal|0
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|tmp
operator|>>
literal|24
argument_list|)
expr_stmt|;
name|result
index|[
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|tmp
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|result
index|[
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|tmp
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|result
index|[
literal|3
index|]
operator|=
operator|(
name|byte
operator|)
name|tmp
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * @see #decodePayload(byte[], int)    * @see #encodePayload(float)    */
DECL|method|decodePayload
specifier|public
specifier|static
name|float
name|decodePayload
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|decodePayload
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**    * Decode the payload that was encoded using {@link #encodePayload(float)}.    * NOTE: the length of the array must be at least offset + 4 long.    * @param bytes The bytes to decode    * @param offset The offset into the array.    * @return The float that was encoded    *    * @see #encodePayload(float)     */
DECL|method|decodePayload
specifier|public
specifier|static
specifier|final
name|float
name|decodePayload
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|int
name|tmp
init|=
operator|(
operator|(
name|bytes
index|[
name|offset
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|bytes
index|[
name|offset
operator|+
literal|1
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|bytes
index|[
name|offset
operator|+
literal|2
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|bytes
index|[
name|offset
operator|+
literal|3
index|]
operator|&
literal|0xFF
operator|)
decl_stmt|;
return|return
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|tmp
argument_list|)
return|;
block|}
DECL|method|next
specifier|public
name|Token
name|next
parameter_list|(
name|Token
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|result
operator|=
name|input
operator|.
name|next
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
name|result
operator|.
name|type
argument_list|()
operator|.
name|equals
argument_list|(
name|typeMatch
argument_list|)
condition|)
block|{
name|result
operator|.
name|setPayload
argument_list|(
name|thePayload
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class
end_unit
