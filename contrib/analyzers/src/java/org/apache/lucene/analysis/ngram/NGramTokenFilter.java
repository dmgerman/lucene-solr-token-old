begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.ngram
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ngram
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_comment
comment|/**  * Tokenizes the input into n-grams of the given size(s).  * @author Otis Gospodnetic  */
end_comment
begin_class
DECL|class|NGramTokenFilter
specifier|public
class|class
name|NGramTokenFilter
extends|extends
name|TokenFilter
block|{
DECL|field|DEFAULT_MIN_NGRAM_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MIN_NGRAM_SIZE
init|=
literal|1
decl_stmt|;
DECL|field|DEFAULT_MAX_NGRAM_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_NGRAM_SIZE
init|=
literal|2
decl_stmt|;
DECL|field|minGram
DECL|field|maxGram
specifier|private
name|int
name|minGram
decl_stmt|,
name|maxGram
decl_stmt|;
DECL|field|ngrams
specifier|private
name|LinkedList
name|ngrams
decl_stmt|;
comment|/**    * Creates NGramTokenFilter with given min and max n-grams.    * @param input TokenStream holding the input to be tokenized    * @param minGram the smallest n-gram to generate    * @param maxGram the largest n-gram to generate    */
DECL|method|NGramTokenFilter
specifier|public
name|NGramTokenFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|,
name|int
name|minGram
parameter_list|,
name|int
name|maxGram
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
if|if
condition|(
name|minGram
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"minGram must be greater than zero"
argument_list|)
throw|;
block|}
if|if
condition|(
name|minGram
operator|>
name|maxGram
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"minGram must not be greater than maxGram"
argument_list|)
throw|;
block|}
name|this
operator|.
name|minGram
operator|=
name|minGram
expr_stmt|;
name|this
operator|.
name|maxGram
operator|=
name|maxGram
expr_stmt|;
name|this
operator|.
name|ngrams
operator|=
operator|new
name|LinkedList
argument_list|()
expr_stmt|;
block|}
comment|/**    * Creates NGramTokenFilter with default min and max n-grams.    * @param input TokenStream holding the input to be tokenized    */
DECL|method|NGramTokenFilter
specifier|public
name|NGramTokenFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|this
argument_list|(
name|input
argument_list|,
name|DEFAULT_MIN_NGRAM_SIZE
argument_list|,
name|DEFAULT_MAX_NGRAM_SIZE
argument_list|)
expr_stmt|;
block|}
comment|/** Returns the next token in the stream, or null at EOS. */
DECL|method|next
specifier|public
specifier|final
name|Token
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|ngrams
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|(
name|Token
operator|)
name|ngrams
operator|.
name|removeFirst
argument_list|()
return|;
block|}
name|Token
name|token
init|=
name|input
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ngram
argument_list|(
name|token
argument_list|)
expr_stmt|;
if|if
condition|(
name|ngrams
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
return|return
operator|(
name|Token
operator|)
name|ngrams
operator|.
name|removeFirst
argument_list|()
return|;
else|else
return|return
literal|null
return|;
block|}
DECL|method|ngram
specifier|private
name|void
name|ngram
parameter_list|(
name|Token
name|token
parameter_list|)
block|{
name|String
name|inStr
init|=
name|token
operator|.
name|termText
argument_list|()
decl_stmt|;
name|int
name|inLen
init|=
name|inStr
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|gramSize
init|=
name|minGram
decl_stmt|;
while|while
condition|(
name|gramSize
operator|<=
name|maxGram
condition|)
block|{
name|int
name|pos
init|=
literal|0
decl_stmt|;
comment|// reset to beginning of string
while|while
condition|(
name|pos
operator|+
name|gramSize
operator|<=
name|inLen
condition|)
block|{
comment|// while there is input
name|String
name|gram
init|=
name|inStr
operator|.
name|substring
argument_list|(
name|pos
argument_list|,
name|pos
operator|+
name|gramSize
argument_list|)
decl_stmt|;
name|Token
name|tok
init|=
operator|new
name|Token
argument_list|(
name|gram
argument_list|,
name|pos
argument_list|,
name|pos
operator|+
name|gramSize
argument_list|)
decl_stmt|;
comment|//        tok.setPositionIncrement(pos);
name|ngrams
operator|.
name|add
argument_list|(
name|tok
argument_list|)
expr_stmt|;
name|pos
operator|++
expr_stmt|;
block|}
name|gramSize
operator|++
expr_stmt|;
comment|// increase n-gram size
block|}
block|}
block|}
end_class
end_unit
