begin_unit
begin_comment
comment|/**  * Copyright 2009 www.imdict.net  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.analysis.cn.smart.hhmm
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|cn
operator|.
name|smart
operator|.
name|hhmm
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|cn
operator|.
name|smart
operator|.
name|Utility
import|;
end_import
begin_class
DECL|class|BiSegGraph
specifier|public
class|class
name|BiSegGraph
block|{
DECL|field|tokenPairListTable
specifier|private
name|Map
name|tokenPairListTable
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
DECL|field|segTokenList
specifier|private
name|List
name|segTokenList
decl_stmt|;
DECL|field|bigramDict
specifier|private
specifier|static
name|BigramDictionary
name|bigramDict
init|=
name|BigramDictionary
operator|.
name|getInstance
argument_list|()
decl_stmt|;
DECL|method|BiSegGraph
specifier|public
name|BiSegGraph
parameter_list|(
name|SegGraph
name|segGraph
parameter_list|)
block|{
name|segTokenList
operator|=
name|segGraph
operator|.
name|makeIndex
argument_list|()
expr_stmt|;
name|generateBiSegGraph
argument_list|(
name|segGraph
argument_list|)
expr_stmt|;
block|}
comment|/**    * çæä¸¤ä¸¤è¯ä¹é´çäºåå¾è¡¨ï¼å°ç»æä¿å­å¨ä¸ä¸ªMultiTokenPairMapä¸­    *     * @param segGraph ææçTokenåè¡¨    * @param smooth å¹³æ»ç³»æ°    * @param biDict äºåè¯å¸    * @return    *     * @see MultiTokenPairMap    */
DECL|method|generateBiSegGraph
specifier|private
name|void
name|generateBiSegGraph
parameter_list|(
name|SegGraph
name|segGraph
parameter_list|)
block|{
name|double
name|smooth
init|=
literal|0.1
decl_stmt|;
name|int
name|wordPairFreq
init|=
literal|0
decl_stmt|;
name|int
name|maxStart
init|=
name|segGraph
operator|.
name|getMaxStart
argument_list|()
decl_stmt|;
name|double
name|oneWordFreq
decl_stmt|,
name|weight
decl_stmt|,
name|tinyDouble
init|=
literal|1.0
operator|/
name|Utility
operator|.
name|MAX_FREQUENCE
decl_stmt|;
name|int
name|next
decl_stmt|;
name|char
index|[]
name|idBuffer
decl_stmt|;
comment|// ä¸ºsegGraphä¸­çæ¯ä¸ªåç´ èµä»¥ä¸ä¸ªä¸æ 
name|segTokenList
operator|=
name|segGraph
operator|.
name|makeIndex
argument_list|()
expr_stmt|;
comment|// å ä¸ºstartTokenï¼"å§##å§"ï¼çèµ·å§ä½ç½®æ¯-1å æ­¤keyä¸º-1æ¶å¯ä»¥ååºstartToken
name|int
name|key
init|=
operator|-
literal|1
decl_stmt|;
name|List
name|nextTokens
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|key
operator|<
name|maxStart
condition|)
block|{
if|if
condition|(
name|segGraph
operator|.
name|isStartExist
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|List
name|tokenList
init|=
name|segGraph
operator|.
name|getStartList
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// ä¸ºæä¸ä¸ªkeyå¯¹åºçææTokené½è®¡ç®ä¸æ¬¡
for|for
control|(
name|Iterator
name|iter
init|=
name|tokenList
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SegToken
name|t1
init|=
operator|(
name|SegToken
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|oneWordFreq
operator|=
name|t1
operator|.
name|weight
expr_stmt|;
name|next
operator|=
name|t1
operator|.
name|endOffset
expr_stmt|;
name|nextTokens
operator|=
literal|null
expr_stmt|;
comment|// æ¾å°ä¸ä¸ä¸ªå¯¹åºçTokenï¼ä¾å¦âé³åæµ·å²¸âï¼å½åTokenæ¯âé³åâï¼ ä¸ä¸ä¸ªTokenå¯ä»¥æ¯âæµ·âæèâæµ·å²¸â
comment|// å¦ææ¾ä¸å°ä¸ä¸ä¸ªTokenï¼åè¯´æå°äºæ«å°¾ï¼éæ°å¾ªç¯ã
while|while
condition|(
name|next
operator|<=
name|maxStart
condition|)
block|{
comment|// å ä¸ºendTokençèµ·å§ä½ç½®æ¯sentenceLenï¼å æ­¤ç­äºsentenceLenæ¯å¯ä»¥æ¾å°endToken
if|if
condition|(
name|segGraph
operator|.
name|isStartExist
argument_list|(
name|next
argument_list|)
condition|)
block|{
name|nextTokens
operator|=
name|segGraph
operator|.
name|getStartList
argument_list|(
name|next
argument_list|)
expr_stmt|;
break|break;
block|}
name|next
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|nextTokens
operator|==
literal|null
condition|)
block|{
break|break;
block|}
for|for
control|(
name|Iterator
name|iter2
init|=
name|nextTokens
operator|.
name|iterator
argument_list|()
init|;
name|iter2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SegToken
name|t2
init|=
operator|(
name|SegToken
operator|)
name|iter2
operator|.
name|next
argument_list|()
decl_stmt|;
name|idBuffer
operator|=
operator|new
name|char
index|[
name|t1
operator|.
name|charArray
operator|.
name|length
operator|+
name|t2
operator|.
name|charArray
operator|.
name|length
operator|+
literal|1
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|t1
operator|.
name|charArray
argument_list|,
literal|0
argument_list|,
name|idBuffer
argument_list|,
literal|0
argument_list|,
name|t1
operator|.
name|charArray
operator|.
name|length
argument_list|)
expr_stmt|;
name|idBuffer
index|[
name|t1
operator|.
name|charArray
operator|.
name|length
index|]
operator|=
name|BigramDictionary
operator|.
name|WORD_SEGMENT_CHAR
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|t2
operator|.
name|charArray
argument_list|,
literal|0
argument_list|,
name|idBuffer
argument_list|,
name|t1
operator|.
name|charArray
operator|.
name|length
operator|+
literal|1
argument_list|,
name|t2
operator|.
name|charArray
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Two linked Words frequency
name|wordPairFreq
operator|=
name|bigramDict
operator|.
name|getFrequency
argument_list|(
name|idBuffer
argument_list|)
expr_stmt|;
comment|// Smoothing
comment|// -log{a*P(Ci-1)+(1-a)P(Ci|Ci-1)} Note 0<a<1
name|weight
operator|=
operator|-
name|Math
operator|.
name|log
argument_list|(
name|smooth
operator|*
operator|(
literal|1.0
operator|+
name|oneWordFreq
operator|)
operator|/
operator|(
name|Utility
operator|.
name|MAX_FREQUENCE
operator|+
literal|0.0
operator|)
operator|+
operator|(
literal|1.0
operator|-
name|smooth
operator|)
operator|*
operator|(
operator|(
literal|1.0
operator|-
name|tinyDouble
operator|)
operator|*
name|wordPairFreq
operator|/
operator|(
literal|1.0
operator|+
name|oneWordFreq
operator|)
operator|+
name|tinyDouble
operator|)
argument_list|)
expr_stmt|;
name|SegTokenPair
name|tokenPair
init|=
operator|new
name|SegTokenPair
argument_list|(
name|idBuffer
argument_list|,
name|t1
operator|.
name|index
argument_list|,
name|t2
operator|.
name|index
argument_list|,
name|weight
argument_list|)
decl_stmt|;
name|this
operator|.
name|addSegTokenPair
argument_list|(
name|tokenPair
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|key
operator|++
expr_stmt|;
block|}
block|}
comment|/**    * æ¥çSegTokenPairçç»æä½ç½®ä¸ºto(SegTokenPair.toä¸ºto)æ¯å¦å­å¨SegTokenPairï¼    * å¦ææ²¡æåè¯´ætoå¤æ²¡æSegTokenPairæèè¿æ²¡ææ·»å     *     * @param to SegTokenPair.to    * @return    */
DECL|method|isToExist
specifier|public
name|boolean
name|isToExist
parameter_list|(
name|int
name|to
parameter_list|)
block|{
return|return
name|tokenPairListTable
operator|.
name|get
argument_list|(
operator|new
name|Integer
argument_list|(
name|to
argument_list|)
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**    * ååºSegTokenPair.toä¸ºtoçææSegTokenPairï¼å¦ææ²¡æåè¿ånull    *     * @param to    * @return ææç¸åSegTokenPair.toçSegTokenPairçåºå    */
DECL|method|getToList
specifier|public
name|List
name|getToList
parameter_list|(
name|int
name|to
parameter_list|)
block|{
return|return
operator|(
name|List
operator|)
name|tokenPairListTable
operator|.
name|get
argument_list|(
operator|new
name|Integer
argument_list|(
name|to
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * åBiSegGraphä¸­å¢å ä¸ä¸ªSegTokenPairï¼è¿äºSegTokenPairæç§ç¸åSegTokenPair.    * toæ¾å¨åä¸ä¸ªArrayListä¸­    *     * @param tokenPair    */
DECL|method|addSegTokenPair
specifier|public
name|void
name|addSegTokenPair
parameter_list|(
name|SegTokenPair
name|tokenPair
parameter_list|)
block|{
name|int
name|to
init|=
name|tokenPair
operator|.
name|to
decl_stmt|;
if|if
condition|(
operator|!
name|isToExist
argument_list|(
name|to
argument_list|)
condition|)
block|{
name|ArrayList
name|newlist
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|newlist
operator|.
name|add
argument_list|(
name|tokenPair
argument_list|)
expr_stmt|;
name|tokenPairListTable
operator|.
name|put
argument_list|(
operator|new
name|Integer
argument_list|(
name|to
argument_list|)
argument_list|,
name|newlist
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
name|tokenPairList
init|=
operator|(
name|List
operator|)
name|tokenPairListTable
operator|.
name|get
argument_list|(
operator|new
name|Integer
argument_list|(
name|to
argument_list|)
argument_list|)
decl_stmt|;
name|tokenPairList
operator|.
name|add
argument_list|(
name|tokenPair
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @return TokenPairçåæ°ï¼ä¹å°±æ¯Mapä¸­ä¸ååå·çTokenPairç§æ°ã    */
DECL|method|getToCount
specifier|public
name|int
name|getToCount
parameter_list|()
block|{
return|return
name|tokenPairListTable
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * ç¨veterbiç®æ³è®¡ç®ä»èµ·ç¹å°ç»ç¹çæç­è·¯å¾    *     * @return    */
DECL|method|getShortPath
specifier|public
name|List
name|getShortPath
parameter_list|()
block|{
name|int
name|current
decl_stmt|;
name|int
name|nodeCount
init|=
name|getToCount
argument_list|()
decl_stmt|;
name|List
name|path
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|PathNode
name|zeroPath
init|=
operator|new
name|PathNode
argument_list|()
decl_stmt|;
name|zeroPath
operator|.
name|weight
operator|=
literal|0
expr_stmt|;
name|zeroPath
operator|.
name|preNode
operator|=
literal|0
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|zeroPath
argument_list|)
expr_stmt|;
for|for
control|(
name|current
operator|=
literal|1
init|;
name|current
operator|<=
name|nodeCount
condition|;
name|current
operator|++
control|)
block|{
name|double
name|weight
decl_stmt|;
name|List
name|edges
init|=
name|getToList
argument_list|(
name|current
argument_list|)
decl_stmt|;
name|double
name|minWeight
init|=
name|Double
operator|.
name|MAX_VALUE
decl_stmt|;
name|SegTokenPair
name|minEdge
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|iter1
init|=
name|edges
operator|.
name|iterator
argument_list|()
init|;
name|iter1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SegTokenPair
name|edge
init|=
operator|(
name|SegTokenPair
operator|)
name|iter1
operator|.
name|next
argument_list|()
decl_stmt|;
name|weight
operator|=
name|edge
operator|.
name|weight
expr_stmt|;
name|PathNode
name|preNode
init|=
operator|(
name|PathNode
operator|)
name|path
operator|.
name|get
argument_list|(
name|edge
operator|.
name|from
argument_list|)
decl_stmt|;
if|if
condition|(
name|preNode
operator|.
name|weight
operator|+
name|weight
operator|<
name|minWeight
condition|)
block|{
name|minWeight
operator|=
name|preNode
operator|.
name|weight
operator|+
name|weight
expr_stmt|;
name|minEdge
operator|=
name|edge
expr_stmt|;
block|}
block|}
name|PathNode
name|newNode
init|=
operator|new
name|PathNode
argument_list|()
decl_stmt|;
name|newNode
operator|.
name|weight
operator|=
name|minWeight
expr_stmt|;
name|newNode
operator|.
name|preNode
operator|=
name|minEdge
operator|.
name|from
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
block|}
comment|// æ¥ä¸æ¥ä»nodePathsä¸­è®¡ç®ä»èµ·ç¹å°ç»ç¹ççå®è·¯å¾
name|int
name|preNode
decl_stmt|,
name|lastNode
decl_stmt|;
name|lastNode
operator|=
name|path
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
name|current
operator|=
name|lastNode
expr_stmt|;
name|List
name|rpath
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
name|resultPath
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|rpath
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|current
operator|!=
literal|0
condition|)
block|{
name|PathNode
name|currentPathNode
init|=
operator|(
name|PathNode
operator|)
name|path
operator|.
name|get
argument_list|(
name|current
argument_list|)
decl_stmt|;
name|preNode
operator|=
name|currentPathNode
operator|.
name|preNode
expr_stmt|;
name|rpath
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|preNode
argument_list|)
argument_list|)
expr_stmt|;
name|current
operator|=
name|preNode
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
name|rpath
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|j
operator|>=
literal|0
condition|;
name|j
operator|--
control|)
block|{
name|Integer
name|idInteger
init|=
operator|(
name|Integer
operator|)
name|rpath
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|int
name|id
init|=
name|idInteger
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|SegToken
name|t
init|=
operator|(
name|SegToken
operator|)
name|segTokenList
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|resultPath
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
return|return
name|resultPath
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Collection
name|values
init|=
name|tokenPairListTable
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter1
init|=
name|values
operator|.
name|iterator
argument_list|()
init|;
name|iter1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|List
name|segList
init|=
operator|(
name|List
operator|)
name|iter1
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter2
init|=
name|segList
operator|.
name|iterator
argument_list|()
init|;
name|iter2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SegTokenPair
name|pair
init|=
operator|(
name|SegTokenPair
operator|)
name|iter2
operator|.
name|next
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|pair
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class
end_unit
