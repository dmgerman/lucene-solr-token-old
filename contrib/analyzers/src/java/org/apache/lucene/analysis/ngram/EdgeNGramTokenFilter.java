begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.ngram
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ngram
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_comment
comment|/**  * Tokenizes the given token into n-grams of given size(s).  *  * This filter create n-grams from the beginning edge or ending edge of a input token.  *   */
end_comment
begin_class
DECL|class|EdgeNGramTokenFilter
specifier|public
class|class
name|EdgeNGramTokenFilter
extends|extends
name|TokenFilter
block|{
DECL|field|DEFAULT_SIDE
specifier|public
specifier|static
specifier|final
name|Side
name|DEFAULT_SIDE
init|=
name|Side
operator|.
name|FRONT
decl_stmt|;
DECL|field|DEFAULT_MAX_GRAM_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_GRAM_SIZE
init|=
literal|1
decl_stmt|;
DECL|field|DEFAULT_MIN_GRAM_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MIN_GRAM_SIZE
init|=
literal|1
decl_stmt|;
comment|// Replace this with an enum when the Java 1.5 upgrade is made, the impl will be simplified
comment|/** Specifies which side of the input the n-gram should be generated from */
DECL|class|Side
specifier|public
specifier|static
class|class
name|Side
block|{
DECL|field|label
specifier|private
name|String
name|label
decl_stmt|;
comment|/** Get the n-gram from the front of the input */
DECL|field|FRONT
specifier|public
specifier|static
name|Side
name|FRONT
init|=
operator|new
name|Side
argument_list|(
literal|"front"
argument_list|)
decl_stmt|;
comment|/** Get the n-gram from the end of the input */
DECL|field|BACK
specifier|public
specifier|static
name|Side
name|BACK
init|=
operator|new
name|Side
argument_list|(
literal|"back"
argument_list|)
decl_stmt|;
comment|// Private ctor
DECL|method|Side
specifier|private
name|Side
parameter_list|(
name|String
name|label
parameter_list|)
block|{
name|this
operator|.
name|label
operator|=
name|label
expr_stmt|;
block|}
DECL|method|getLabel
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
name|label
return|;
block|}
comment|// Get the appropriate Side from a string
DECL|method|getSide
specifier|public
specifier|static
name|Side
name|getSide
parameter_list|(
name|String
name|sideName
parameter_list|)
block|{
if|if
condition|(
name|FRONT
operator|.
name|getLabel
argument_list|()
operator|.
name|equals
argument_list|(
name|sideName
argument_list|)
condition|)
block|{
return|return
name|FRONT
return|;
block|}
elseif|else
if|if
condition|(
name|BACK
operator|.
name|getLabel
argument_list|()
operator|.
name|equals
argument_list|(
name|sideName
argument_list|)
condition|)
block|{
return|return
name|BACK
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
DECL|field|minGram
specifier|private
name|int
name|minGram
decl_stmt|;
DECL|field|maxGram
specifier|private
name|int
name|maxGram
decl_stmt|;
DECL|field|side
specifier|private
name|Side
name|side
decl_stmt|;
DECL|field|ngrams
specifier|private
name|LinkedList
name|ngrams
decl_stmt|;
DECL|method|EdgeNGramTokenFilter
specifier|protected
name|EdgeNGramTokenFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|this
operator|.
name|ngrams
operator|=
operator|new
name|LinkedList
argument_list|()
expr_stmt|;
block|}
comment|/**    * Creates EdgeNGramTokenFilter that can generate n-grams in the sizes of the given range    *    * @param input TokenStream holding the input to be tokenized    * @param side the {@link Side} from which to chop off an n-gram    * @param minGram the smallest n-gram to generate    * @param maxGram the largest n-gram to generate    */
DECL|method|EdgeNGramTokenFilter
specifier|public
name|EdgeNGramTokenFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|,
name|Side
name|side
parameter_list|,
name|int
name|minGram
parameter_list|,
name|int
name|maxGram
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
if|if
condition|(
name|side
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"sideLabel must be either front or back"
argument_list|)
throw|;
block|}
if|if
condition|(
name|minGram
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"minGram must be greater than zero"
argument_list|)
throw|;
block|}
if|if
condition|(
name|minGram
operator|>
name|maxGram
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"minGram must not be greater than maxGram"
argument_list|)
throw|;
block|}
name|this
operator|.
name|minGram
operator|=
name|minGram
expr_stmt|;
name|this
operator|.
name|maxGram
operator|=
name|maxGram
expr_stmt|;
name|this
operator|.
name|side
operator|=
name|side
expr_stmt|;
name|this
operator|.
name|ngrams
operator|=
operator|new
name|LinkedList
argument_list|()
expr_stmt|;
block|}
comment|/**    * Creates EdgeNGramTokenFilter that can generate n-grams in the sizes of the given range    *    * @param input TokenStream holding the input to be tokenized    * @param sideLabel the name of the {@link Side} from which to chop off an n-gram    * @param minGram the smallest n-gram to generate    * @param maxGram the largest n-gram to generate    */
DECL|method|EdgeNGramTokenFilter
specifier|public
name|EdgeNGramTokenFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|,
name|String
name|sideLabel
parameter_list|,
name|int
name|minGram
parameter_list|,
name|int
name|maxGram
parameter_list|)
block|{
name|this
argument_list|(
name|input
argument_list|,
name|Side
operator|.
name|getSide
argument_list|(
name|sideLabel
argument_list|)
argument_list|,
name|minGram
argument_list|,
name|maxGram
argument_list|)
expr_stmt|;
block|}
comment|/** Returns the next token in the stream, or null at EOS. */
DECL|method|next
specifier|public
specifier|final
name|Token
name|next
parameter_list|(
specifier|final
name|Token
name|reusableToken
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|reusableToken
operator|!=
literal|null
assert|;
if|if
condition|(
operator|!
name|ngrams
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|(
name|Token
operator|)
name|ngrams
operator|.
name|removeFirst
argument_list|()
return|;
block|}
name|Token
name|token
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|ngrams
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|token
operator|=
name|input
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|ngram
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|ngrams
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|(
name|Token
operator|)
name|ngrams
operator|.
name|removeFirst
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|ngram
specifier|private
name|void
name|ngram
parameter_list|(
specifier|final
name|Token
name|token
parameter_list|)
block|{
name|int
name|termLength
init|=
name|token
operator|.
name|termLength
argument_list|()
decl_stmt|;
name|char
index|[]
name|termBuffer
init|=
name|token
operator|.
name|termBuffer
argument_list|()
decl_stmt|;
name|int
name|gramSize
init|=
name|minGram
decl_stmt|;
while|while
condition|(
name|gramSize
operator|<=
name|maxGram
condition|)
block|{
comment|// if the remaining input is too short, we can't generate any n-grams
if|if
condition|(
name|gramSize
operator|>
name|termLength
condition|)
block|{
return|return;
block|}
comment|// if we have hit the end of our n-gram size range, quit
if|if
condition|(
name|gramSize
operator|>
name|maxGram
condition|)
block|{
return|return;
block|}
comment|// grab gramSize chars from front or back
name|int
name|start
init|=
name|side
operator|==
name|Side
operator|.
name|FRONT
condition|?
literal|0
else|:
name|termLength
operator|-
name|gramSize
decl_stmt|;
name|int
name|end
init|=
name|start
operator|+
name|gramSize
decl_stmt|;
name|Token
name|tok
init|=
operator|(
name|Token
operator|)
name|token
operator|.
name|clone
argument_list|()
decl_stmt|;
name|tok
operator|.
name|setStartOffset
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|tok
operator|.
name|setEndOffset
argument_list|(
name|end
argument_list|)
expr_stmt|;
name|tok
operator|.
name|setTermBuffer
argument_list|(
name|termBuffer
argument_list|,
name|start
argument_list|,
name|gramSize
argument_list|)
expr_stmt|;
name|ngrams
operator|.
name|add
argument_list|(
name|tok
argument_list|)
expr_stmt|;
name|gramSize
operator|++
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
