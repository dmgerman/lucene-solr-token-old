begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.analysis.cn.smart.hhmm
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|cn
operator|.
name|smart
operator|.
name|hhmm
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|cn
operator|.
name|smart
operator|.
name|CharType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|cn
operator|.
name|smart
operator|.
name|Utility
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|cn
operator|.
name|smart
operator|.
name|WordType
import|;
end_import
begin_comment
comment|/**  * Finds the optimal segmentation of a sentence into Chinese words  */
end_comment
begin_class
DECL|class|HHMMSegmenter
specifier|public
class|class
name|HHMMSegmenter
block|{
DECL|field|wordDict
specifier|private
specifier|static
name|WordDictionary
name|wordDict
init|=
name|WordDictionary
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|/**    * Create the {@link SegGraph} for a sentence.    *     * @param sentence input sentence, without start and end markers    * @return {@link SegGraph} corresponding to the input sentence.    */
DECL|method|createSegGraph
specifier|private
name|SegGraph
name|createSegGraph
parameter_list|(
name|String
name|sentence
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|,
name|j
decl_stmt|;
name|int
name|length
init|=
name|sentence
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|foundIndex
decl_stmt|;
name|int
index|[]
name|charTypeArray
init|=
name|getCharTypes
argument_list|(
name|sentence
argument_list|)
decl_stmt|;
name|StringBuffer
name|wordBuf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|SegToken
name|token
decl_stmt|;
name|int
name|frequency
init|=
literal|0
decl_stmt|;
comment|// wordçåºç°æ¬¡æ°
name|boolean
name|hasFullWidth
decl_stmt|;
name|int
name|wordType
decl_stmt|;
name|char
index|[]
name|charArray
decl_stmt|;
name|SegGraph
name|segGraph
init|=
operator|new
name|SegGraph
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|length
condition|)
block|{
name|hasFullWidth
operator|=
literal|false
expr_stmt|;
switch|switch
condition|(
name|charTypeArray
index|[
name|i
index|]
condition|)
block|{
case|case
name|CharType
operator|.
name|SPACE_LIKE
case|:
name|i
operator|++
expr_stmt|;
break|break;
case|case
name|CharType
operator|.
name|HANZI
case|:
name|j
operator|=
name|i
operator|+
literal|1
expr_stmt|;
name|wordBuf
operator|.
name|delete
argument_list|(
literal|0
argument_list|,
name|wordBuf
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// ä¸ç®¡åä¸ªæ±å­è½ä¸è½ææè¯ï¼é½å°åä¸ªæ±å­å­å°segGraphä¸­å»ï¼å¦åä¼é æåæ­¤å¾æ­å­
name|wordBuf
operator|.
name|append
argument_list|(
name|sentence
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|charArray
operator|=
operator|new
name|char
index|[]
block|{
name|sentence
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
block|}
expr_stmt|;
name|frequency
operator|=
name|wordDict
operator|.
name|getFrequency
argument_list|(
name|charArray
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|SegToken
argument_list|(
name|charArray
argument_list|,
name|i
argument_list|,
name|j
argument_list|,
name|WordType
operator|.
name|CHINESE_WORD
argument_list|,
name|frequency
argument_list|)
expr_stmt|;
name|segGraph
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|foundIndex
operator|=
name|wordDict
operator|.
name|getPrefixMatch
argument_list|(
name|charArray
argument_list|)
expr_stmt|;
while|while
condition|(
name|j
operator|<=
name|length
operator|&&
name|foundIndex
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|wordDict
operator|.
name|isEqual
argument_list|(
name|charArray
argument_list|,
name|foundIndex
argument_list|)
operator|&&
name|charArray
operator|.
name|length
operator|>
literal|1
condition|)
block|{
comment|// å°±æ¯æä»¬è¦æ¾çè¯ï¼ ä¹å°±æ¯è¯´æ¾å°äºä»iå°jçä¸ä¸ªæè¯SegTokenï¼å¹¶ä¸ä¸æ¯åå­è¯
name|frequency
operator|=
name|wordDict
operator|.
name|getFrequency
argument_list|(
name|charArray
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|SegToken
argument_list|(
name|charArray
argument_list|,
name|i
argument_list|,
name|j
argument_list|,
name|WordType
operator|.
name|CHINESE_WORD
argument_list|,
name|frequency
argument_list|)
expr_stmt|;
name|segGraph
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|j
operator|<
name|length
operator|&&
name|charTypeArray
index|[
name|j
index|]
operator|==
name|CharType
operator|.
name|SPACE_LIKE
condition|)
name|j
operator|++
expr_stmt|;
if|if
condition|(
name|j
operator|<
name|length
operator|&&
name|charTypeArray
index|[
name|j
index|]
operator|==
name|CharType
operator|.
name|HANZI
condition|)
block|{
name|wordBuf
operator|.
name|append
argument_list|(
name|sentence
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|charArray
operator|=
operator|new
name|char
index|[
name|wordBuf
operator|.
name|length
argument_list|()
index|]
expr_stmt|;
name|wordBuf
operator|.
name|getChars
argument_list|(
literal|0
argument_list|,
name|charArray
operator|.
name|length
argument_list|,
name|charArray
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// idArrayä½ä¸ºåç¼å·²ç»æ¾å°è¿(foundWordIndex!=-1),
comment|// å æ­¤å é¿è¿åçidArrayåªå¯è½åºç°å¨foundWordIndexä»¥å,
comment|// æä»foundWordIndexä¹åå¼å§æ¥æ¾
name|foundIndex
operator|=
name|wordDict
operator|.
name|getPrefixMatch
argument_list|(
name|charArray
argument_list|,
name|foundIndex
argument_list|)
expr_stmt|;
name|j
operator|++
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|i
operator|++
expr_stmt|;
break|break;
case|case
name|CharType
operator|.
name|FULLWIDTH_LETTER
case|:
name|hasFullWidth
operator|=
literal|true
expr_stmt|;
case|case
name|CharType
operator|.
name|LETTER
case|:
name|j
operator|=
name|i
operator|+
literal|1
expr_stmt|;
while|while
condition|(
name|j
operator|<
name|length
operator|&&
operator|(
name|charTypeArray
index|[
name|j
index|]
operator|==
name|CharType
operator|.
name|LETTER
operator|||
name|charTypeArray
index|[
name|j
index|]
operator|==
name|CharType
operator|.
name|FULLWIDTH_LETTER
operator|)
condition|)
block|{
if|if
condition|(
name|charTypeArray
index|[
name|j
index|]
operator|==
name|CharType
operator|.
name|FULLWIDTH_LETTER
condition|)
name|hasFullWidth
operator|=
literal|true
expr_stmt|;
name|j
operator|++
expr_stmt|;
block|}
comment|// æ¾å°äºä»iå°jçä¸ä¸ªTokenï¼ç±»åä¸ºLETTERçå­ç¬¦ä¸²
name|charArray
operator|=
name|Utility
operator|.
name|STRING_CHAR_ARRAY
expr_stmt|;
name|frequency
operator|=
name|wordDict
operator|.
name|getFrequency
argument_list|(
name|charArray
argument_list|)
expr_stmt|;
name|wordType
operator|=
name|hasFullWidth
condition|?
name|WordType
operator|.
name|FULLWIDTH_STRING
else|:
name|WordType
operator|.
name|STRING
expr_stmt|;
name|token
operator|=
operator|new
name|SegToken
argument_list|(
name|charArray
argument_list|,
name|i
argument_list|,
name|j
argument_list|,
name|wordType
argument_list|,
name|frequency
argument_list|)
expr_stmt|;
name|segGraph
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|i
operator|=
name|j
expr_stmt|;
break|break;
case|case
name|CharType
operator|.
name|FULLWIDTH_DIGIT
case|:
name|hasFullWidth
operator|=
literal|true
expr_stmt|;
case|case
name|CharType
operator|.
name|DIGIT
case|:
name|j
operator|=
name|i
operator|+
literal|1
expr_stmt|;
while|while
condition|(
name|j
operator|<
name|length
operator|&&
operator|(
name|charTypeArray
index|[
name|j
index|]
operator|==
name|CharType
operator|.
name|DIGIT
operator|||
name|charTypeArray
index|[
name|j
index|]
operator|==
name|CharType
operator|.
name|FULLWIDTH_DIGIT
operator|)
condition|)
block|{
if|if
condition|(
name|charTypeArray
index|[
name|j
index|]
operator|==
name|CharType
operator|.
name|FULLWIDTH_DIGIT
condition|)
name|hasFullWidth
operator|=
literal|true
expr_stmt|;
name|j
operator|++
expr_stmt|;
block|}
comment|// æ¾å°äºä»iå°jçä¸ä¸ªTokenï¼ç±»åä¸ºNUMBERçå­ç¬¦ä¸²
name|charArray
operator|=
name|Utility
operator|.
name|NUMBER_CHAR_ARRAY
expr_stmt|;
name|frequency
operator|=
name|wordDict
operator|.
name|getFrequency
argument_list|(
name|charArray
argument_list|)
expr_stmt|;
name|wordType
operator|=
name|hasFullWidth
condition|?
name|WordType
operator|.
name|FULLWIDTH_NUMBER
else|:
name|WordType
operator|.
name|NUMBER
expr_stmt|;
name|token
operator|=
operator|new
name|SegToken
argument_list|(
name|charArray
argument_list|,
name|i
argument_list|,
name|j
argument_list|,
name|wordType
argument_list|,
name|frequency
argument_list|)
expr_stmt|;
name|segGraph
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|i
operator|=
name|j
expr_stmt|;
break|break;
case|case
name|CharType
operator|.
name|DELIMITER
case|:
name|j
operator|=
name|i
operator|+
literal|1
expr_stmt|;
comment|// æ ç¹ç¬¦å·çweightä¸ç¨æ¥äºï¼éä¸ªæå¤§çé¢çå³å¯
name|frequency
operator|=
name|Utility
operator|.
name|MAX_FREQUENCE
expr_stmt|;
name|charArray
operator|=
operator|new
name|char
index|[]
block|{
name|sentence
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
block|}
expr_stmt|;
name|token
operator|=
operator|new
name|SegToken
argument_list|(
name|charArray
argument_list|,
name|i
argument_list|,
name|j
argument_list|,
name|WordType
operator|.
name|DELIMITER
argument_list|,
name|frequency
argument_list|)
expr_stmt|;
name|segGraph
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|i
operator|=
name|j
expr_stmt|;
break|break;
default|default:
name|j
operator|=
name|i
operator|+
literal|1
expr_stmt|;
comment|// æä¸è®¤è¯çå­ç¬¦å½ä½æªç¥ä¸²çå¾ï¼ä¾å¦GB2312ç¼ç ä¹å¤çå­ç¬¦ï¼æ¯ä¸ªå­ç¬¦å½ä½ä¸ä¸ª
name|charArray
operator|=
name|Utility
operator|.
name|STRING_CHAR_ARRAY
expr_stmt|;
name|frequency
operator|=
name|wordDict
operator|.
name|getFrequency
argument_list|(
name|charArray
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|SegToken
argument_list|(
name|charArray
argument_list|,
name|i
argument_list|,
name|j
argument_list|,
name|WordType
operator|.
name|STRING
argument_list|,
name|frequency
argument_list|)
expr_stmt|;
name|segGraph
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|i
operator|=
name|j
expr_stmt|;
break|break;
block|}
block|}
comment|// ä¸ºsegGraphå¢å ä¸¤ä¸ªæ°Tokenï¼ "å§##å§","æ«##æ«"
name|charArray
operator|=
name|Utility
operator|.
name|START_CHAR_ARRAY
expr_stmt|;
name|frequency
operator|=
name|wordDict
operator|.
name|getFrequency
argument_list|(
name|charArray
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|SegToken
argument_list|(
name|charArray
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|WordType
operator|.
name|SENTENCE_BEGIN
argument_list|,
name|frequency
argument_list|)
expr_stmt|;
name|segGraph
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
comment|// "æ«##æ«"
name|charArray
operator|=
name|Utility
operator|.
name|END_CHAR_ARRAY
expr_stmt|;
name|frequency
operator|=
name|wordDict
operator|.
name|getFrequency
argument_list|(
name|charArray
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|SegToken
argument_list|(
name|charArray
argument_list|,
name|length
argument_list|,
name|length
operator|+
literal|1
argument_list|,
name|WordType
operator|.
name|SENTENCE_END
argument_list|,
name|frequency
argument_list|)
expr_stmt|;
name|segGraph
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
return|return
name|segGraph
return|;
block|}
comment|/**    * Get the character types for every character in a sentence.    *     * @see Utility.charType(char)    * @param sentence input sentence    * @return array of character types corresponding to character positions in the sentence    */
DECL|method|getCharTypes
specifier|private
specifier|static
name|int
index|[]
name|getCharTypes
parameter_list|(
name|String
name|sentence
parameter_list|)
block|{
name|int
name|length
init|=
name|sentence
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
index|[]
name|charTypeArray
init|=
operator|new
name|int
index|[
name|length
index|]
decl_stmt|;
comment|// the type of each character by position
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|charTypeArray
index|[
name|i
index|]
operator|=
name|Utility
operator|.
name|getCharType
argument_list|(
name|sentence
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|charTypeArray
return|;
block|}
comment|/**    * Return a list of {@link PathNode} representing the best segmentation of a sentence    * @param sentence input sentence    * @return best segmentation as a {@link List}    */
DECL|method|process
specifier|public
name|List
name|process
parameter_list|(
name|String
name|sentence
parameter_list|)
block|{
name|SegGraph
name|segGraph
init|=
name|createSegGraph
argument_list|(
name|sentence
argument_list|)
decl_stmt|;
name|BiSegGraph
name|biSegGraph
init|=
operator|new
name|BiSegGraph
argument_list|(
name|segGraph
argument_list|)
decl_stmt|;
name|List
name|shortPath
init|=
name|biSegGraph
operator|.
name|getShortPath
argument_list|()
decl_stmt|;
return|return
name|shortPath
return|;
block|}
block|}
end_class
end_unit
