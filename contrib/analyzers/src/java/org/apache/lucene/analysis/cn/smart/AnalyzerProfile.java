begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.analysis.cn.smart
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|cn
operator|.
name|smart
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_comment
comment|/**  * å¨é»è®¤æåµä¸ï¼SmartChineseAnalyzeråç½®æè¯å¸åºãé»è®¤åæ­¢è¯åºï¼å·²ç»ç»è¿å°è£ï¼ç¨æ·å¯ä»¥ç´æ¥ä½¿ç¨ã  *   * ç¹æ®æåµä¸ï¼ç¨æ·éè¦ä½¿ç¨æå®çè¯å¸åºååæ­¢è¯åºï¼æ­¤æ¶éè¦å é¤org.apache.lucene.analysis.cn.smart. hhmmä¸ç  * coredict.mem å bigramdict.memï¼ ç¶åä½¿ç¨AnalyzerProfileæ¥æå®è¯å¸åºç®å½ã  *   * AnalyzerProfile ç¨æ¥å¯»æ¾å­æ¾åè¯è¯åºæ°æ® ååç¨è¯æ°æ®çç®å½ï¼ è¯¥ç®å½ä¸åºè¯¥æ bigramdict.dct, coredict.dct,  * stopwords_utf8.txt, æ¥æ¾è¿ç¨ä¾æ¬¡å¦ä¸ï¼  *   *<ol>  *<li>è¯»åç³»ç»è¿è¡æ¶åæ°ï¼-Danalysis.data.dir=/path/to/analysis-dataï¼å¦ææ²¡æï¼ç»§ç»­ä¸ä¸æ¡</li>  *<li>æ§è¡å½ä»¤çå½åç®å½ä¸­æ¯å¦å­å¨analysis-dataç®å½</li>  *<li>æ§è¡å½ä»¤çlib/ç®å½ä¸­æ¯å¦å­å¨analysis-dataç®å½</li>  *<li>æ§è¡å½ä»¤çå½åç®å½ä¸­æ¯å¦å­å¨analysis.propertiesæä»¶</li>  *<li>æ§è¡å½ä»¤çlib/ç®å½ä¸­æ¯å¦å­å¨analysis.propertiesæä»¶</li>  *</ol>  *   * å¶ä¸­analysis.propertiesæä»¶analysis.data.dirææanalysis-dataç®å½æå¨ä½ç½®.  * analysis.propertiesæä»¶çåå®¹ç¤ºä¾ï¼  *   *<pre>  * analysis.data.dir=D:/path/to/analysis-data/  *</pre>  *   * å½æ¾ä¸å°analysis-dataç®å½æ¶ï¼ANALYSIS_DATA_DIRè®¾ç½®ä¸º""ï¼å æ­¤å¨ä½¿ç¨åï¼å¿é¡»å¨ç¨åºéæ¾å¼æå®dataç®å½ï¼ä¾å¦ï¼  *   *<pre>  * AnalyzerProfile.ANALYSIS_DATA_DIR =&quot;/path/to/analysis-data&quot;;  *</pre>  *   */
end_comment
begin_class
DECL|class|AnalyzerProfile
specifier|public
class|class
name|AnalyzerProfile
block|{
DECL|field|ANALYSIS_DATA_DIR
specifier|public
specifier|static
name|String
name|ANALYSIS_DATA_DIR
init|=
literal|""
decl_stmt|;
static|static
block|{
name|init
argument_list|()
expr_stmt|;
block|}
DECL|method|init
specifier|private
specifier|static
name|void
name|init
parameter_list|()
block|{
name|String
name|dirName
init|=
literal|"analysis-data"
decl_stmt|;
name|String
name|propName
init|=
literal|"analysis.properties"
decl_stmt|;
comment|// è¯»åç³»ç»è®¾ç½®ï¼å¨è¿è¡æ¶å å¥åæ°ï¼-Danalysis.data.dir=/path/to/analysis-data
name|ANALYSIS_DATA_DIR
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"analysis.data.dir"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|ANALYSIS_DATA_DIR
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
return|return;
name|File
index|[]
name|cadidateFiles
init|=
operator|new
name|File
index|[]
block|{
operator|new
name|File
argument_list|(
literal|"./"
operator|+
name|dirName
argument_list|)
block|,
operator|new
name|File
argument_list|(
literal|"./lib/"
operator|+
name|dirName
argument_list|)
block|,
operator|new
name|File
argument_list|(
literal|"./"
operator|+
name|propName
argument_list|)
block|,
operator|new
name|File
argument_list|(
literal|"./lib/"
operator|+
name|propName
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cadidateFiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|file
init|=
name|cadidateFiles
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|ANALYSIS_DATA_DIR
operator|=
name|file
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|file
operator|.
name|isFile
argument_list|()
operator|&&
name|getAnalysisDataDir
argument_list|(
name|file
argument_list|)
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|ANALYSIS_DATA_DIR
operator|=
name|getAnalysisDataDir
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
if|if
condition|(
name|ANALYSIS_DATA_DIR
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// æç¤ºç¨æ·æªæ¾å°è¯å¸æä»¶å¤¹
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"WARNING: Can not found lexical dictionary directory!"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"WARNING: This will cause unpredictable exceptions in your application!"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"WARNING: Please refer to the manual to download the dictionaries."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getAnalysisDataDir
specifier|private
specifier|static
name|String
name|getAnalysisDataDir
parameter_list|(
name|File
name|propFile
parameter_list|)
block|{
name|Properties
name|prop
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
block|{
name|FileInputStream
name|input
init|=
operator|new
name|FileInputStream
argument_list|(
name|propFile
argument_list|)
decl_stmt|;
name|prop
operator|.
name|load
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|String
name|dir
init|=
name|prop
operator|.
name|getProperty
argument_list|(
literal|"analysis.data.dir"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|dir
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
return|return
literal|""
return|;
block|}
block|}
end_class
end_unit
