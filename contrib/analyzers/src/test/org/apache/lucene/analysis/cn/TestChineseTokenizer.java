begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.cn
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|cn
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_comment
comment|/**  * @author rayt  */
end_comment
begin_class
DECL|class|TestChineseTokenizer
specifier|public
class|class
name|TestChineseTokenizer
extends|extends
name|TestCase
block|{
DECL|method|testOtherLetterOffset
specifier|public
name|void
name|testOtherLetterOffset
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|s
init|=
literal|"aå¤©b"
decl_stmt|;
name|ChineseTokenizer
name|tokenizer
init|=
operator|new
name|ChineseTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|Token
name|token
decl_stmt|;
name|int
name|correctStartOffset
init|=
literal|0
decl_stmt|;
name|int
name|correctEndOffset
init|=
literal|1
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|tokenizer
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|correctStartOffset
argument_list|,
name|token
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|correctEndOffset
argument_list|,
name|token
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|correctStartOffset
operator|++
expr_stmt|;
name|correctEndOffset
operator|++
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
