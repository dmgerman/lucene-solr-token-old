begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.el
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|el
package|;
end_package
begin_comment
comment|/**  * Copyright 2005 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CharArraySet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ReusableAnalyzerBase
operator|.
name|TokenStreamComponents
import|;
end_import
begin_comment
comment|// javadoc @link
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|StopFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|StopwordAnalyzerBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardAnalyzer
import|;
end_import
begin_comment
comment|// for javadoc
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_comment
comment|/**  * {@link Analyzer} for the Greek language.   *<p>  * Supports an external list of stopwords (words  * that will not be indexed at all).  * A default set of stopwords is used unless an alternative list is specified.  *</p>  *  *<a name="version"/>  *<p>You must specify the required {@link Version}  * compatibility when creating GreekAnalyzer:  *<ul>  *<li> As of 3.1, StandardFilter is used by default.  *<li> As of 2.9, StopFilter preserves position  *        increments  *</ul>  *   *<p><b>NOTE</b>: This class uses the same {@link Version}  * dependent settings as {@link StandardAnalyzer}.</p>  */
end_comment
begin_class
DECL|class|GreekAnalyzer
specifier|public
specifier|final
class|class
name|GreekAnalyzer
extends|extends
name|StopwordAnalyzerBase
block|{
comment|/**      * List of typical Greek stopwords.      */
DECL|field|GREEK_STOP_WORDS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|GREEK_STOP_WORDS
init|=
block|{
literal|"Î¿"
block|,
literal|"Î·"
block|,
literal|"ÏÎ¿"
block|,
literal|"Î¿Î¹"
block|,
literal|"ÏÎ±"
block|,
literal|"ÏÎ¿Ï"
block|,
literal|"ÏÎ·Ï"
block|,
literal|"ÏÏÎ½"
block|,
literal|"ÏÎ¿Î½"
block|,
literal|"ÏÎ·Î½"
block|,
literal|"ÎºÎ±Î¹"
block|,
literal|"ÎºÎ¹"
block|,
literal|"Îº"
block|,
literal|"ÎµÎ¹Î¼Î±Î¹"
block|,
literal|"ÎµÎ¹ÏÎ±Î¹"
block|,
literal|"ÎµÎ¹Î½Î±Î¹"
block|,
literal|"ÎµÎ¹Î¼Î±ÏÏÎµ"
block|,
literal|"ÎµÎ¹ÏÏÎµ"
block|,
literal|"ÏÏÎ¿"
block|,
literal|"ÏÏÎ¿Î½"
block|,
literal|"ÏÏÎ·"
block|,
literal|"ÏÏÎ·Î½"
block|,
literal|"Î¼Î±"
block|,
literal|"Î±Î»Î»Î±"
block|,
literal|"Î±ÏÎ¿"
block|,
literal|"Î³Î¹Î±"
block|,
literal|"ÏÏÎ¿Ï"
block|,
literal|"Î¼Îµ"
block|,
literal|"ÏÎµ"
block|,
literal|"ÏÏ"
block|,
literal|"ÏÎ±ÏÎ±"
block|,
literal|"Î±Î½ÏÎ¹"
block|,
literal|"ÎºÎ±ÏÎ±"
block|,
literal|"Î¼ÎµÏÎ±"
block|,
literal|"Î¸Î±"
block|,
literal|"Î½Î±"
block|,
literal|"Î´Îµ"
block|,
literal|"Î´ÎµÎ½"
block|,
literal|"Î¼Î·"
block|,
literal|"Î¼Î·Î½"
block|,
literal|"ÎµÏÎ¹"
block|,
literal|"ÎµÎ½Ï"
block|,
literal|"ÎµÎ±Î½"
block|,
literal|"Î±Î½"
block|,
literal|"ÏÎ¿ÏÎµ"
block|,
literal|"ÏÎ¿Ï"
block|,
literal|"ÏÏÏ"
block|,
literal|"ÏÎ¿Î¹Î¿Ï"
block|,
literal|"ÏÎ¿Î¹Î±"
block|,
literal|"ÏÎ¿Î¹Î¿"
block|,
literal|"ÏÎ¿Î¹Î¿Î¹"
block|,
literal|"ÏÎ¿Î¹ÎµÏ"
block|,
literal|"ÏÎ¿Î¹ÏÎ½"
block|,
literal|"ÏÎ¿Î¹Î¿ÏÏ"
block|,
literal|"Î±ÏÏÎ¿Ï"
block|,
literal|"Î±ÏÏÎ·"
block|,
literal|"Î±ÏÏÎ¿"
block|,
literal|"Î±ÏÏÎ¿Î¹"
block|,
literal|"Î±ÏÏÏÎ½"
block|,
literal|"Î±ÏÏÎ¿ÏÏ"
block|,
literal|"Î±ÏÏÎµÏ"
block|,
literal|"Î±ÏÏÎ±"
block|,
literal|"ÎµÎºÎµÎ¹Î½Î¿Ï"
block|,
literal|"ÎµÎºÎµÎ¹Î½Î·"
block|,
literal|"ÎµÎºÎµÎ¹Î½Î¿"
block|,
literal|"ÎµÎºÎµÎ¹Î½Î¿Î¹"
block|,
literal|"ÎµÎºÎµÎ¹Î½ÎµÏ"
block|,
literal|"ÎµÎºÎµÎ¹Î½Î±"
block|,
literal|"ÎµÎºÎµÎ¹Î½ÏÎ½"
block|,
literal|"ÎµÎºÎµÎ¹Î½Î¿ÏÏ"
block|,
literal|"Î¿ÏÏÏ"
block|,
literal|"Î¿Î¼ÏÏ"
block|,
literal|"Î¹ÏÏÏ"
block|,
literal|"Î¿ÏÎ¿"
block|,
literal|"Î¿ÏÎ¹"
block|}
decl_stmt|;
comment|/**      * Returns a set of default Greek-stopwords       * @return a set of default Greek-stopwords       */
DECL|method|getDefaultStopSet
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|?
argument_list|>
name|getDefaultStopSet
parameter_list|()
block|{
return|return
name|DefaultSetHolder
operator|.
name|DEFAULT_SET
return|;
block|}
DECL|class|DefaultSetHolder
specifier|private
specifier|static
class|class
name|DefaultSetHolder
block|{
DECL|field|DEFAULT_SET
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|?
argument_list|>
name|DEFAULT_SET
init|=
name|CharArraySet
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|CharArraySet
argument_list|(
name|Version
operator|.
name|LUCENE_CURRENT
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|GREEK_STOP_WORDS
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
block|}
DECL|method|GreekAnalyzer
specifier|public
name|GreekAnalyzer
parameter_list|(
name|Version
name|matchVersion
parameter_list|)
block|{
name|this
argument_list|(
name|matchVersion
argument_list|,
name|DefaultSetHolder
operator|.
name|DEFAULT_SET
argument_list|)
expr_stmt|;
block|}
comment|/**      * Builds an analyzer with the given stop words       *       * @param matchVersion      *          lucene compatibility version      * @param stopwords      *          a stopword set      */
DECL|method|GreekAnalyzer
specifier|public
name|GreekAnalyzer
parameter_list|(
name|Version
name|matchVersion
parameter_list|,
name|Set
argument_list|<
name|?
argument_list|>
name|stopwords
parameter_list|)
block|{
name|super
argument_list|(
name|matchVersion
argument_list|,
name|stopwords
argument_list|)
expr_stmt|;
block|}
comment|/**      * Builds an analyzer with the given stop words.      * @param stopwords Array of stopwords to use.      * @deprecated use {@link #GreekAnalyzer(Version, Set)} instead      */
annotation|@
name|Deprecated
DECL|method|GreekAnalyzer
specifier|public
name|GreekAnalyzer
parameter_list|(
name|Version
name|matchVersion
parameter_list|,
name|String
modifier|...
name|stopwords
parameter_list|)
block|{
name|this
argument_list|(
name|matchVersion
argument_list|,
name|StopFilter
operator|.
name|makeStopSet
argument_list|(
name|matchVersion
argument_list|,
name|stopwords
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Builds an analyzer with the given stop words.      * @deprecated use {@link #GreekAnalyzer(Version, Set)} instead      */
annotation|@
name|Deprecated
DECL|method|GreekAnalyzer
specifier|public
name|GreekAnalyzer
parameter_list|(
name|Version
name|matchVersion
parameter_list|,
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|stopwords
parameter_list|)
block|{
name|this
argument_list|(
name|matchVersion
argument_list|,
name|stopwords
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**     * Creates {@link TokenStreamComponents} used to tokenize all the text in the     * provided {@link Reader}.     *      * @return {@link TokenStreamComponents} built from a     *         {@link StandardTokenizer} filtered with     *         {@link GreekLowerCaseFilter}, {@link StandardFilter} and {@link StopFilter}     */
annotation|@
name|Override
DECL|method|createComponents
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
specifier|final
name|Tokenizer
name|source
init|=
operator|new
name|StandardTokenizer
argument_list|(
name|matchVersion
argument_list|,
name|reader
argument_list|)
decl_stmt|;
name|TokenStream
name|result
init|=
operator|new
name|GreekLowerCaseFilter
argument_list|(
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchVersion
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|LUCENE_31
argument_list|)
condition|)
name|result
operator|=
operator|new
name|StandardFilter
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|source
argument_list|,
operator|new
name|StopFilter
argument_list|(
name|matchVersion
argument_list|,
name|result
argument_list|,
name|stopwords
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class
end_unit
