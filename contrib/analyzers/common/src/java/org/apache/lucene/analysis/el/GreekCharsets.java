begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.el
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|el
package|;
end_package
begin_comment
comment|/**  * Copyright 2005 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * GreekCharsets class contains encodings schemes (charsets) and toLowerCase() method implementation  * for greek characters in Unicode, ISO-8859-7 and Microsoft Windows CP1253.  *<p>  * Each encoding scheme contains lowercase (positions 0-35) and uppercase (position 36-68) characters,  * including accented ones. One should be able to add other encoding schemes (see RFC 1947) by adding  * the definition of a new charset as well as the required logic in the toLowerCase() method.  *</p>  */
end_comment
begin_class
DECL|class|GreekCharsets
specifier|public
class|class
name|GreekCharsets
block|{
comment|// Unicode Greek charset
DECL|field|UnicodeGreek
specifier|public
specifier|static
name|char
index|[]
name|UnicodeGreek
init|=
block|{
comment|// lower case
literal|'\u0390'
block|,
literal|'\u03AC'
block|,
literal|'\u03AD'
block|,
literal|'\u03AE'
block|,
literal|'\u03AF'
block|,
literal|'\u03B0'
block|,
literal|'\u03B1'
block|,
literal|'\u03B2'
block|,
literal|'\u03B3'
block|,
literal|'\u03B4'
block|,
literal|'\u03B5'
block|,
literal|'\u03B6'
block|,
literal|'\u03B7'
block|,
literal|'\u03B8'
block|,
literal|'\u03B9'
block|,
literal|'\u03BA'
block|,
literal|'\u03BB'
block|,
literal|'\u03BC'
block|,
literal|'\u03BD'
block|,
literal|'\u03BE'
block|,
literal|'\u03BF'
block|,
literal|'\u03C0'
block|,
literal|'\u03C1'
block|,
literal|'\u03C2'
block|,
literal|'\u03C3'
block|,
literal|'\u03C4'
block|,
literal|'\u03C5'
block|,
literal|'\u03C6'
block|,
literal|'\u03C7'
block|,
literal|'\u03C8'
block|,
literal|'\u03C9'
block|,
literal|'\u03CA'
block|,
literal|'\u03CB'
block|,
literal|'\u03CC'
block|,
literal|'\u03CD'
block|,
literal|'\u03CE'
block|,
comment|// upper case
literal|'\u0386'
block|,
literal|'\u0388'
block|,
literal|'\u0389'
block|,
literal|'\u038A'
block|,
literal|'\u038C'
block|,
literal|'\u038E'
block|,
literal|'\u038F'
block|,
literal|'\u0391'
block|,
literal|'\u0392'
block|,
literal|'\u0393'
block|,
literal|'\u0394'
block|,
literal|'\u0395'
block|,
literal|'\u0396'
block|,
literal|'\u0397'
block|,
literal|'\u0398'
block|,
literal|'\u0399'
block|,
literal|'\u039A'
block|,
literal|'\u039B'
block|,
literal|'\u039C'
block|,
literal|'\u039D'
block|,
literal|'\u039E'
block|,
literal|'\u039F'
block|,
literal|'\u03A0'
block|,
literal|'\u03A1'
block|,
literal|'\u03A3'
block|,
literal|'\u03A4'
block|,
literal|'\u03A5'
block|,
literal|'\u03A6'
block|,
literal|'\u03A7'
block|,
literal|'\u03A8'
block|,
literal|'\u03A9'
block|,
literal|'\u03AA'
block|,
literal|'\u03AB'
block|}
decl_stmt|;
comment|// ISO-8859-7 charset (ELOT-928)
DECL|field|ISO
specifier|public
specifier|static
name|char
index|[]
name|ISO
init|=
block|{
comment|// lower case
literal|0xc0
block|,
literal|0xdc
block|,
literal|0xdd
block|,
literal|0xde
block|,
literal|0xdf
block|,
literal|0xe0
block|,
literal|0xe1
block|,
literal|0xe2
block|,
literal|0xe3
block|,
literal|0xe4
block|,
literal|0xe5
block|,
literal|0xe6
block|,
literal|0xe7
block|,
literal|0xe8
block|,
literal|0xe9
block|,
literal|0xea
block|,
literal|0xeb
block|,
literal|0xec
block|,
literal|0xed
block|,
literal|0xee
block|,
literal|0xef
block|,
literal|0xf0
block|,
literal|0xf1
block|,
literal|0xf2
block|,
literal|0xf3
block|,
literal|0xf4
block|,
literal|0xf5
block|,
literal|0xf6
block|,
literal|0xf7
block|,
literal|0xf8
block|,
literal|0xf9
block|,
literal|0xfa
block|,
literal|0xfb
block|,
literal|0xfc
block|,
literal|0xfd
block|,
literal|0xfe
block|,
comment|// upper case
literal|0xb6
block|,
literal|0xb8
block|,
literal|0xb9
block|,
literal|0xba
block|,
literal|0xbc
block|,
literal|0xbe
block|,
literal|0xbf
block|,
literal|0xc1
block|,
literal|0xc2
block|,
literal|0xc3
block|,
literal|0xc4
block|,
literal|0xc5
block|,
literal|0xc6
block|,
literal|0xc7
block|,
literal|0xc8
block|,
literal|0xc9
block|,
literal|0xca
block|,
literal|0xcb
block|,
literal|0xcc
block|,
literal|0xcd
block|,
literal|0xce
block|,
literal|0xcf
block|,
literal|0xd0
block|,
literal|0xd1
block|,
literal|0xd3
block|,
literal|0xd4
block|,
literal|0xd5
block|,
literal|0xd6
block|,
literal|0xd7
block|,
literal|0xd8
block|,
literal|0xd9
block|,
literal|0xda
block|,
literal|0xdb
block|}
decl_stmt|;
comment|// CP1253 charset
DECL|field|CP1253
specifier|public
specifier|static
name|char
index|[]
name|CP1253
init|=
block|{
comment|// lower case
literal|0xc0
block|,
literal|0xdc
block|,
literal|0xdd
block|,
literal|0xde
block|,
literal|0xdf
block|,
literal|0xe0
block|,
literal|0xe1
block|,
literal|0xe2
block|,
literal|0xe3
block|,
literal|0xe4
block|,
literal|0xe5
block|,
literal|0xe6
block|,
literal|0xe7
block|,
literal|0xe8
block|,
literal|0xe9
block|,
literal|0xea
block|,
literal|0xeb
block|,
literal|0xec
block|,
literal|0xed
block|,
literal|0xee
block|,
literal|0xef
block|,
literal|0xf0
block|,
literal|0xf1
block|,
literal|0xf2
block|,
literal|0xf3
block|,
literal|0xf4
block|,
literal|0xf5
block|,
literal|0xf6
block|,
literal|0xf7
block|,
literal|0xf8
block|,
literal|0xf9
block|,
literal|0xfa
block|,
literal|0xfb
block|,
literal|0xfc
block|,
literal|0xfd
block|,
literal|0xfe
block|,
comment|// upper case
literal|0xa2
block|,
literal|0xb8
block|,
literal|0xb9
block|,
literal|0xba
block|,
literal|0xbc
block|,
literal|0xbe
block|,
literal|0xbf
block|,
literal|0xc1
block|,
literal|0xc2
block|,
literal|0xc3
block|,
literal|0xc4
block|,
literal|0xc5
block|,
literal|0xc6
block|,
literal|0xc7
block|,
literal|0xc8
block|,
literal|0xc9
block|,
literal|0xca
block|,
literal|0xcb
block|,
literal|0xcc
block|,
literal|0xcd
block|,
literal|0xce
block|,
literal|0xcf
block|,
literal|0xd0
block|,
literal|0xd1
block|,
literal|0xd3
block|,
literal|0xd4
block|,
literal|0xd5
block|,
literal|0xd6
block|,
literal|0xd7
block|,
literal|0xd8
block|,
literal|0xd9
block|,
literal|0xda
block|,
literal|0xdb
block|}
decl_stmt|;
DECL|method|toLowerCase
specifier|public
specifier|static
name|char
name|toLowerCase
parameter_list|(
name|char
name|letter
parameter_list|,
name|char
index|[]
name|charset
parameter_list|)
block|{
if|if
condition|(
name|charset
operator|==
name|UnicodeGreek
condition|)
block|{
comment|// First deal with lower case, not accented letters
if|if
condition|(
name|letter
operator|>=
literal|'\u03B1'
operator|&&
name|letter
operator|<=
literal|'\u03C9'
condition|)
block|{
comment|// Special case 'small final sigma', where we return 'small sigma'
if|if
condition|(
name|letter
operator|==
literal|'\u03C2'
condition|)
block|{
return|return
literal|'\u03C3'
return|;
block|}
else|else
block|{
return|return
name|letter
return|;
block|}
block|}
comment|// Then deal with lower case, accented letters
comment|// alpha with acute
if|if
condition|(
name|letter
operator|==
literal|'\u03AC'
condition|)
block|{
return|return
literal|'\u03B1'
return|;
block|}
comment|// epsilon with acute
if|if
condition|(
name|letter
operator|==
literal|'\u03AD'
condition|)
block|{
return|return
literal|'\u03B5'
return|;
block|}
comment|// eta with acute
if|if
condition|(
name|letter
operator|==
literal|'\u03AE'
condition|)
block|{
return|return
literal|'\u03B7'
return|;
block|}
comment|// iota with acute, iota with diaeresis, iota with acute and diaeresis
if|if
condition|(
name|letter
operator|==
literal|'\u03AF'
operator|||
name|letter
operator|==
literal|'\u03CA'
operator|||
name|letter
operator|==
literal|'\u0390'
condition|)
block|{
return|return
literal|'\u03B9'
return|;
block|}
comment|// upsilon with acute, upsilon with diaeresis, upsilon with acute and diaeresis
if|if
condition|(
name|letter
operator|==
literal|'\u03CD'
operator|||
name|letter
operator|==
literal|'\u03CB'
operator|||
name|letter
operator|==
literal|'\u03B0'
condition|)
block|{
return|return
literal|'\u03C5'
return|;
block|}
comment|// omicron with acute
if|if
condition|(
name|letter
operator|==
literal|'\u03CC'
condition|)
block|{
return|return
literal|'\u03BF'
return|;
block|}
comment|// omega with acute
if|if
condition|(
name|letter
operator|==
literal|'\u03CE'
condition|)
block|{
return|return
literal|'\u03C9'
return|;
block|}
comment|// After that, deal with upper case, not accented letters
if|if
condition|(
name|letter
operator|>=
literal|'\u0391'
operator|&&
name|letter
operator|<=
literal|'\u03A9'
condition|)
block|{
return|return
call|(
name|char
call|)
argument_list|(
name|letter
operator|+
literal|32
argument_list|)
return|;
block|}
comment|// Finally deal with upper case, accented letters
comment|// alpha with acute
if|if
condition|(
name|letter
operator|==
literal|'\u0386'
condition|)
block|{
return|return
literal|'\u03B1'
return|;
block|}
comment|// epsilon with acute
if|if
condition|(
name|letter
operator|==
literal|'\u0388'
condition|)
block|{
return|return
literal|'\u03B5'
return|;
block|}
comment|// eta with acute
if|if
condition|(
name|letter
operator|==
literal|'\u0389'
condition|)
block|{
return|return
literal|'\u03B7'
return|;
block|}
comment|// iota with acute, iota with diaeresis
if|if
condition|(
name|letter
operator|==
literal|'\u038A'
operator|||
name|letter
operator|==
literal|'\u03AA'
condition|)
block|{
return|return
literal|'\u03B9'
return|;
block|}
comment|// upsilon with acute, upsilon with diaeresis
if|if
condition|(
name|letter
operator|==
literal|'\u038E'
operator|||
name|letter
operator|==
literal|'\u03AB'
condition|)
block|{
return|return
literal|'\u03C5'
return|;
block|}
comment|// omicron with acute
if|if
condition|(
name|letter
operator|==
literal|'\u038C'
condition|)
block|{
return|return
literal|'\u03BF'
return|;
block|}
comment|// omega with acute
if|if
condition|(
name|letter
operator|==
literal|'\u038F'
condition|)
block|{
return|return
literal|'\u03C9'
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|charset
operator|==
name|ISO
condition|)
block|{
comment|// First deal with lower case, not accented letters
if|if
condition|(
name|letter
operator|>=
literal|0xe1
operator|&&
name|letter
operator|<=
literal|0xf9
condition|)
block|{
comment|// Special case 'small final sigma', where we return 'small sigma'
if|if
condition|(
name|letter
operator|==
literal|0xf2
condition|)
block|{
return|return
literal|0xf3
return|;
block|}
else|else
block|{
return|return
name|letter
return|;
block|}
block|}
comment|// Then deal with lower case, accented letters
comment|// alpha with acute
if|if
condition|(
name|letter
operator|==
literal|0xdc
condition|)
block|{
return|return
literal|0xe1
return|;
block|}
comment|// epsilon with acute
if|if
condition|(
name|letter
operator|==
literal|0xdd
condition|)
block|{
return|return
literal|0xe5
return|;
block|}
comment|// eta with acute
if|if
condition|(
name|letter
operator|==
literal|0xde
condition|)
block|{
return|return
literal|0xe7
return|;
block|}
comment|// iota with acute, iota with diaeresis, iota with acute and diaeresis
if|if
condition|(
name|letter
operator|==
literal|0xdf
operator|||
name|letter
operator|==
literal|0xfa
operator|||
name|letter
operator|==
literal|0xc0
condition|)
block|{
return|return
literal|'\u03B9'
return|;
block|}
comment|// upsilon with acute, upsilon with diaeresis, upsilon with acute and diaeresis
if|if
condition|(
name|letter
operator|==
literal|0xfd
operator|||
name|letter
operator|==
literal|0xfb
operator|||
name|letter
operator|==
literal|0xe0
condition|)
block|{
return|return
literal|0xf5
return|;
block|}
comment|// omicron with acute
if|if
condition|(
name|letter
operator|==
literal|0xfc
condition|)
block|{
return|return
literal|0xef
return|;
block|}
comment|// omega with acute
if|if
condition|(
name|letter
operator|==
literal|0xfe
condition|)
block|{
return|return
literal|0xf9
return|;
block|}
comment|// After that, deal with upper case, not accented letters
if|if
condition|(
name|letter
operator|>=
literal|0xc1
operator|&&
name|letter
operator|<=
literal|0xd9
condition|)
block|{
return|return
call|(
name|char
call|)
argument_list|(
name|letter
operator|+
literal|32
argument_list|)
return|;
block|}
comment|// Finally deal with upper case, accented letters
comment|// alpha with acute
if|if
condition|(
name|letter
operator|==
literal|0xb6
condition|)
block|{
return|return
literal|0xe1
return|;
block|}
comment|// epsilon with acute
if|if
condition|(
name|letter
operator|==
literal|0xb8
condition|)
block|{
return|return
literal|0xe5
return|;
block|}
comment|// eta with acute
if|if
condition|(
name|letter
operator|==
literal|0xb9
condition|)
block|{
return|return
literal|0xe7
return|;
block|}
comment|// iota with acute, iota with diaeresis
if|if
condition|(
name|letter
operator|==
literal|0xba
operator|||
name|letter
operator|==
literal|0xda
condition|)
block|{
return|return
literal|0xe9
return|;
block|}
comment|// upsilon with acute, upsilon with diaeresis
if|if
condition|(
name|letter
operator|==
literal|0xbe
operator|||
name|letter
operator|==
literal|0xdb
condition|)
block|{
return|return
literal|0xf5
return|;
block|}
comment|// omicron with acute
if|if
condition|(
name|letter
operator|==
literal|0xbc
condition|)
block|{
return|return
literal|0xef
return|;
block|}
comment|// omega with acute
if|if
condition|(
name|letter
operator|==
literal|0xbf
condition|)
block|{
return|return
literal|0xf9
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|charset
operator|==
name|CP1253
condition|)
block|{
comment|// First deal with lower case, not accented letters
if|if
condition|(
name|letter
operator|>=
literal|0xe1
operator|&&
name|letter
operator|<=
literal|0xf9
condition|)
block|{
comment|// Special case 'small final sigma', where we return 'small sigma'
if|if
condition|(
name|letter
operator|==
literal|0xf2
condition|)
block|{
return|return
literal|0xf3
return|;
block|}
else|else
block|{
return|return
name|letter
return|;
block|}
block|}
comment|// Then deal with lower case, accented letters
comment|// alpha with acute
if|if
condition|(
name|letter
operator|==
literal|0xdc
condition|)
block|{
return|return
literal|0xe1
return|;
block|}
comment|// epsilon with acute
if|if
condition|(
name|letter
operator|==
literal|0xdd
condition|)
block|{
return|return
literal|0xe5
return|;
block|}
comment|// eta with acute
if|if
condition|(
name|letter
operator|==
literal|0xde
condition|)
block|{
return|return
literal|0xe7
return|;
block|}
comment|// iota with acute, iota with diaeresis, iota with acute and diaeresis
if|if
condition|(
name|letter
operator|==
literal|0xdf
operator|||
name|letter
operator|==
literal|0xfa
operator|||
name|letter
operator|==
literal|0xc0
condition|)
block|{
return|return
literal|'\u03B9'
return|;
block|}
comment|// upsilon with acute, upsilon with diaeresis, upsilon with acute and diaeresis
if|if
condition|(
name|letter
operator|==
literal|0xfd
operator|||
name|letter
operator|==
literal|0xfb
operator|||
name|letter
operator|==
literal|0xe0
condition|)
block|{
return|return
literal|0xf5
return|;
block|}
comment|// omicron with acute
if|if
condition|(
name|letter
operator|==
literal|0xfc
condition|)
block|{
return|return
literal|0xef
return|;
block|}
comment|// omega with acute
if|if
condition|(
name|letter
operator|==
literal|0xfe
condition|)
block|{
return|return
literal|0xf9
return|;
block|}
comment|// After that, deal with upper case, not accented letters
if|if
condition|(
name|letter
operator|>=
literal|0xc1
operator|&&
name|letter
operator|<=
literal|0xd9
condition|)
block|{
return|return
call|(
name|char
call|)
argument_list|(
name|letter
operator|+
literal|32
argument_list|)
return|;
block|}
comment|// Finally deal with upper case, accented letters
comment|// alpha with acute
if|if
condition|(
name|letter
operator|==
literal|0xa2
condition|)
block|{
return|return
literal|0xe1
return|;
block|}
comment|// epsilon with acute
if|if
condition|(
name|letter
operator|==
literal|0xb8
condition|)
block|{
return|return
literal|0xe5
return|;
block|}
comment|// eta with acute
if|if
condition|(
name|letter
operator|==
literal|0xb9
condition|)
block|{
return|return
literal|0xe7
return|;
block|}
comment|// iota with acute, iota with diaeresis
if|if
condition|(
name|letter
operator|==
literal|0xba
operator|||
name|letter
operator|==
literal|0xda
condition|)
block|{
return|return
literal|0xe9
return|;
block|}
comment|// upsilon with acute, upsilon with diaeresis
if|if
condition|(
name|letter
operator|==
literal|0xbe
operator|||
name|letter
operator|==
literal|0xdb
condition|)
block|{
return|return
literal|0xf5
return|;
block|}
comment|// omicron with acute
if|if
condition|(
name|letter
operator|==
literal|0xbc
condition|)
block|{
return|return
literal|0xef
return|;
block|}
comment|// omega with acute
if|if
condition|(
name|letter
operator|==
literal|0xbf
condition|)
block|{
return|return
literal|0xf9
return|;
block|}
block|}
return|return
name|Character
operator|.
name|toLowerCase
argument_list|(
name|letter
argument_list|)
return|;
block|}
block|}
end_class
end_unit
