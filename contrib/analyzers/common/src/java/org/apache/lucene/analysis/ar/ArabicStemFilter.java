begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.ar
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ar
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_comment
comment|/**  * A TokenFilter that applies {@link ArabicStemmer} to stem Arabic words..  *   */
end_comment
begin_class
DECL|class|ArabicStemFilter
specifier|public
class|class
name|ArabicStemFilter
extends|extends
name|TokenFilter
block|{
DECL|field|stemmer
specifier|protected
name|ArabicStemmer
name|stemmer
init|=
literal|null
decl_stmt|;
DECL|method|ArabicStemFilter
specifier|public
name|ArabicStemFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|stemmer
operator|=
operator|new
name|ArabicStemmer
argument_list|()
expr_stmt|;
block|}
comment|/**    * @return  Returns the next token in the stream, or null at EOS    */
DECL|method|next
specifier|public
name|Token
name|next
parameter_list|(
name|Token
name|reusableToken
parameter_list|)
throws|throws
name|IOException
block|{
comment|/**      * The actual token in the input stream.      */
if|if
condition|(
operator|(
name|reusableToken
operator|=
name|input
operator|.
name|next
argument_list|(
name|reusableToken
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|int
name|oldlen
init|=
name|reusableToken
operator|.
name|termLength
argument_list|()
decl_stmt|;
name|int
name|newlen
init|=
name|stemmer
operator|.
name|stem
argument_list|(
name|reusableToken
operator|.
name|termBuffer
argument_list|()
argument_list|,
name|oldlen
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldlen
operator|!=
name|newlen
condition|)
name|reusableToken
operator|.
name|setTermLength
argument_list|(
name|newlen
argument_list|)
expr_stmt|;
return|return
name|reusableToken
return|;
block|}
block|}
block|}
end_class
end_unit
