begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.analysis.compound.hyphenation
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|compound
operator|.
name|hyphenation
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import
begin_comment
comment|/**  * This class represents a hyphen. A 'full' hyphen is made of 3 parts: the  * pre-break text, post-break text and no-break. If no line-break is generated  * at this position, the no-break text is used, otherwise, pre-break and  * post-break are used. Typically, pre-break is equal to the hyphen character  * and the others are empty. However, this general scheme allows support for  * cases in some languages where words change spelling if they're split across  * lines, like german's 'backen' which hyphenates 'bak-ken'. BTW, this comes  * from TeX.  *   * This class has been taken from the Apache FOP project (http://xmlgraphics.apache.org/fop/). They have been slightly modified.   */
end_comment
begin_class
DECL|class|Hyphen
specifier|public
class|class
name|Hyphen
implements|implements
name|Serializable
block|{
DECL|field|preBreak
specifier|public
name|String
name|preBreak
decl_stmt|;
DECL|field|noBreak
specifier|public
name|String
name|noBreak
decl_stmt|;
DECL|field|postBreak
specifier|public
name|String
name|postBreak
decl_stmt|;
DECL|method|Hyphen
name|Hyphen
parameter_list|(
name|String
name|pre
parameter_list|,
name|String
name|no
parameter_list|,
name|String
name|post
parameter_list|)
block|{
name|preBreak
operator|=
name|pre
expr_stmt|;
name|noBreak
operator|=
name|no
expr_stmt|;
name|postBreak
operator|=
name|post
expr_stmt|;
block|}
DECL|method|Hyphen
name|Hyphen
parameter_list|(
name|String
name|pre
parameter_list|)
block|{
name|preBreak
operator|=
name|pre
expr_stmt|;
name|noBreak
operator|=
literal|null
expr_stmt|;
name|postBreak
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|noBreak
operator|==
literal|null
operator|&&
name|postBreak
operator|==
literal|null
operator|&&
name|preBreak
operator|!=
literal|null
operator|&&
name|preBreak
operator|.
name|equals
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
return|return
literal|"-"
return|;
block|}
name|StringBuilder
name|res
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"{"
argument_list|)
decl_stmt|;
name|res
operator|.
name|append
argument_list|(
name|preBreak
argument_list|)
expr_stmt|;
name|res
operator|.
name|append
argument_list|(
literal|"}{"
argument_list|)
expr_stmt|;
name|res
operator|.
name|append
argument_list|(
name|postBreak
argument_list|)
expr_stmt|;
name|res
operator|.
name|append
argument_list|(
literal|"}{"
argument_list|)
expr_stmt|;
name|res
operator|.
name|append
argument_list|(
name|noBreak
argument_list|)
expr_stmt|;
name|res
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class
end_unit
