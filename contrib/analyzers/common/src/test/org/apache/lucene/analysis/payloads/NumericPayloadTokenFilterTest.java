begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.payloads
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|payloads
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|WhitespaceTokenizer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_class
DECL|class|NumericPayloadTokenFilterTest
specifier|public
class|class
name|NumericPayloadTokenFilterTest
extends|extends
name|TestCase
block|{
DECL|method|NumericPayloadTokenFilterTest
specifier|public
name|NumericPayloadTokenFilterTest
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
block|{   }
DECL|method|tearDown
specifier|protected
name|void
name|tearDown
parameter_list|()
block|{    }
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|test
init|=
literal|"The quick red fox jumped over the lazy brown dogs"
decl_stmt|;
name|NumericPayloadTokenFilter
name|nptf
init|=
operator|new
name|NumericPayloadTokenFilter
argument_list|(
operator|new
name|WordTokenFilter
argument_list|(
operator|new
name|WhitespaceTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|3
argument_list|,
literal|"D"
argument_list|)
decl_stmt|;
name|boolean
name|seenDogs
init|=
literal|false
decl_stmt|;
specifier|final
name|Token
name|reusableToken
init|=
operator|new
name|Token
argument_list|()
decl_stmt|;
for|for
control|(
name|Token
name|nextToken
init|=
name|nptf
operator|.
name|next
argument_list|(
name|reusableToken
argument_list|)
init|;
name|nextToken
operator|!=
literal|null
condition|;
name|nextToken
operator|=
name|nptf
operator|.
name|next
argument_list|(
name|reusableToken
argument_list|)
control|)
block|{
if|if
condition|(
name|nextToken
operator|.
name|term
argument_list|()
operator|.
name|equals
argument_list|(
literal|"dogs"
argument_list|)
condition|)
block|{
name|seenDogs
operator|=
literal|true
expr_stmt|;
name|assertTrue
argument_list|(
name|nextToken
operator|.
name|type
argument_list|()
operator|+
literal|" is not equal to "
operator|+
literal|"D"
argument_list|,
name|nextToken
operator|.
name|type
argument_list|()
operator|.
name|equals
argument_list|(
literal|"D"
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"nextToken.getPayload() is null and it shouldn't be"
argument_list|,
name|nextToken
operator|.
name|getPayload
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|nextToken
operator|.
name|getPayload
argument_list|()
operator|.
name|getData
argument_list|()
decl_stmt|;
comment|//safe here to just use the bytes, otherwise we should use offset, length
name|assertTrue
argument_list|(
name|bytes
operator|.
name|length
operator|+
literal|" does not equal: "
operator|+
name|nextToken
operator|.
name|getPayload
argument_list|()
operator|.
name|length
argument_list|()
argument_list|,
name|bytes
operator|.
name|length
operator|==
name|nextToken
operator|.
name|getPayload
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nextToken
operator|.
name|getPayload
argument_list|()
operator|.
name|getOffset
argument_list|()
operator|+
literal|" does not equal: "
operator|+
literal|0
argument_list|,
name|nextToken
operator|.
name|getPayload
argument_list|()
operator|.
name|getOffset
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|float
name|pay
init|=
name|PayloadHelper
operator|.
name|decodeFloat
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pay
operator|+
literal|" does not equal: "
operator|+
literal|3
argument_list|,
name|pay
operator|==
literal|3
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|nextToken
operator|.
name|type
argument_list|()
operator|+
literal|" is not null and it should be"
argument_list|,
name|nextToken
operator|.
name|type
argument_list|()
operator|.
name|equals
argument_list|(
literal|"word"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|seenDogs
operator|+
literal|" does not equal: "
operator|+
literal|true
argument_list|,
name|seenDogs
operator|==
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|class|WordTokenFilter
specifier|private
class|class
name|WordTokenFilter
extends|extends
name|TokenFilter
block|{
DECL|method|WordTokenFilter
specifier|private
name|WordTokenFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
DECL|method|next
specifier|public
name|Token
name|next
parameter_list|(
specifier|final
name|Token
name|reusableToken
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|reusableToken
operator|!=
literal|null
assert|;
name|Token
name|nextToken
init|=
name|input
operator|.
name|next
argument_list|(
name|reusableToken
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextToken
operator|!=
literal|null
operator|&&
name|nextToken
operator|.
name|term
argument_list|()
operator|.
name|equals
argument_list|(
literal|"dogs"
argument_list|)
condition|)
block|{
name|nextToken
operator|.
name|setType
argument_list|(
literal|"D"
argument_list|)
expr_stmt|;
block|}
return|return
name|nextToken
return|;
block|}
block|}
block|}
end_class
end_unit
