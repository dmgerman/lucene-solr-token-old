begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.ngram
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ngram
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TermAttribute
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_comment
comment|/**  * Tests {@link NGramTokenizer} for correctness.  */
end_comment
begin_class
DECL|class|NGramTokenizerTest
specifier|public
class|class
name|NGramTokenizerTest
extends|extends
name|TestCase
block|{
DECL|field|input
specifier|private
name|StringReader
name|input
decl_stmt|;
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|input
operator|=
operator|new
name|StringReader
argument_list|(
literal|"abcde"
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidInput
specifier|public
name|void
name|testInvalidInput
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|gotException
init|=
literal|false
decl_stmt|;
try|try
block|{
operator|new
name|NGramTokenizer
argument_list|(
name|input
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|gotException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|gotException
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidInput2
specifier|public
name|void
name|testInvalidInput2
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|gotException
init|=
literal|false
decl_stmt|;
try|try
block|{
operator|new
name|NGramTokenizer
argument_list|(
name|input
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|gotException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|gotException
argument_list|)
expr_stmt|;
block|}
DECL|method|checkStream
specifier|private
name|void
name|checkStream
parameter_list|(
name|TokenStream
name|stream
parameter_list|,
name|String
index|[]
name|exp
parameter_list|)
throws|throws
name|IOException
block|{
name|TermAttribute
name|termAtt
init|=
operator|(
name|TermAttribute
operator|)
name|stream
operator|.
name|addAttribute
argument_list|(
name|TermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exp
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|stream
operator|.
name|incrementToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exp
index|[
name|i
index|]
argument_list|,
name|termAtt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|stream
operator|.
name|incrementToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnigrams
specifier|public
name|void
name|testUnigrams
parameter_list|()
throws|throws
name|Exception
block|{
name|NGramTokenizer
name|tokenizer
init|=
operator|new
name|NGramTokenizer
argument_list|(
name|input
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|exp
init|=
operator|new
name|String
index|[]
block|{
literal|"(a,0,1)"
block|,
literal|"(b,1,2)"
block|,
literal|"(c,2,3)"
block|,
literal|"(d,3,4)"
block|,
literal|"(e,4,5)"
block|}
decl_stmt|;
name|checkStream
argument_list|(
name|tokenizer
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
DECL|method|testBigrams
specifier|public
name|void
name|testBigrams
parameter_list|()
throws|throws
name|Exception
block|{
name|NGramTokenizer
name|tokenizer
init|=
operator|new
name|NGramTokenizer
argument_list|(
name|input
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|String
index|[]
name|exp
init|=
operator|new
name|String
index|[]
block|{
literal|"(ab,0,2)"
block|,
literal|"(bc,1,3)"
block|,
literal|"(cd,2,4)"
block|,
literal|"(de,3,5)"
block|}
decl_stmt|;
name|checkStream
argument_list|(
name|tokenizer
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
DECL|method|testNgrams
specifier|public
name|void
name|testNgrams
parameter_list|()
throws|throws
name|Exception
block|{
name|NGramTokenizer
name|tokenizer
init|=
operator|new
name|NGramTokenizer
argument_list|(
name|input
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|String
index|[]
name|exp
init|=
operator|new
name|String
index|[]
block|{
literal|"(a,0,1)"
block|,
literal|"(b,1,2)"
block|,
literal|"(c,2,3)"
block|,
literal|"(d,3,4)"
block|,
literal|"(e,4,5)"
block|,
literal|"(ab,0,2)"
block|,
literal|"(bc,1,3)"
block|,
literal|"(cd,2,4)"
block|,
literal|"(de,3,5)"
block|,
literal|"(abc,0,3)"
block|,
literal|"(bcd,1,4)"
block|,
literal|"(cde,2,5)"
block|}
decl_stmt|;
name|checkStream
argument_list|(
name|tokenizer
argument_list|,
name|exp
argument_list|)
expr_stmt|;
block|}
DECL|method|testOversizedNgrams
specifier|public
name|void
name|testOversizedNgrams
parameter_list|()
throws|throws
name|Exception
block|{
name|NGramTokenizer
name|tokenizer
init|=
operator|new
name|NGramTokenizer
argument_list|(
name|input
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|tokenizer
operator|.
name|incrementToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testReset
specifier|public
name|void
name|testReset
parameter_list|()
throws|throws
name|Exception
block|{
name|NGramTokenizer
name|tokenizer
init|=
operator|new
name|NGramTokenizer
argument_list|(
name|input
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|TermAttribute
name|termAtt
init|=
operator|(
name|TermAttribute
operator|)
name|tokenizer
operator|.
name|getAttribute
argument_list|(
name|TermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tokenizer
operator|.
name|incrementToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"(a,0,1)"
argument_list|,
name|termAtt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenizer
operator|.
name|incrementToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"(b,1,2)"
argument_list|,
name|termAtt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tokenizer
operator|.
name|reset
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"abcde"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tokenizer
operator|.
name|incrementToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"(a,0,1)"
argument_list|,
name|termAtt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
