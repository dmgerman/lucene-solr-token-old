begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.ar
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ar
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TermAttribute
import|;
end_import
begin_comment
comment|/**  * Test the Arabic Normalization Filter  *  */
end_comment
begin_class
DECL|class|TestArabicStemFilter
specifier|public
class|class
name|TestArabicStemFilter
extends|extends
name|TestCase
block|{
DECL|method|testAlPrefix
specifier|public
name|void
name|testAlPrefix
parameter_list|()
throws|throws
name|IOException
block|{
name|check
argument_list|(
literal|"Ø§ÙØ­Ø³Ù"
argument_list|,
literal|"Ø­Ø³Ù"
argument_list|)
expr_stmt|;
block|}
DECL|method|testWalPrefix
specifier|public
name|void
name|testWalPrefix
parameter_list|()
throws|throws
name|IOException
block|{
name|check
argument_list|(
literal|"ÙØ§ÙØ­Ø³Ù"
argument_list|,
literal|"Ø­Ø³Ù"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBalPrefix
specifier|public
name|void
name|testBalPrefix
parameter_list|()
throws|throws
name|IOException
block|{
name|check
argument_list|(
literal|"Ø¨Ø§ÙØ­Ø³Ù"
argument_list|,
literal|"Ø­Ø³Ù"
argument_list|)
expr_stmt|;
block|}
DECL|method|testKalPrefix
specifier|public
name|void
name|testKalPrefix
parameter_list|()
throws|throws
name|IOException
block|{
name|check
argument_list|(
literal|"ÙØ§ÙØ­Ø³Ù"
argument_list|,
literal|"Ø­Ø³Ù"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFalPrefix
specifier|public
name|void
name|testFalPrefix
parameter_list|()
throws|throws
name|IOException
block|{
name|check
argument_list|(
literal|"ÙØ§ÙØ­Ø³Ù"
argument_list|,
literal|"Ø­Ø³Ù"
argument_list|)
expr_stmt|;
block|}
DECL|method|testWaPrefix
specifier|public
name|void
name|testWaPrefix
parameter_list|()
throws|throws
name|IOException
block|{
name|check
argument_list|(
literal|"ÙØ­Ø³Ù"
argument_list|,
literal|"Ø­Ø³Ù"
argument_list|)
expr_stmt|;
block|}
DECL|method|testAhSuffix
specifier|public
name|void
name|testAhSuffix
parameter_list|()
throws|throws
name|IOException
block|{
name|check
argument_list|(
literal|"Ø²ÙØ¬ÙØ§"
argument_list|,
literal|"Ø²ÙØ¬"
argument_list|)
expr_stmt|;
block|}
DECL|method|testAnSuffix
specifier|public
name|void
name|testAnSuffix
parameter_list|()
throws|throws
name|IOException
block|{
name|check
argument_list|(
literal|"Ø³Ø§ÙØ¯Ø§Ù"
argument_list|,
literal|"Ø³Ø§ÙØ¯"
argument_list|)
expr_stmt|;
block|}
DECL|method|testAtSuffix
specifier|public
name|void
name|testAtSuffix
parameter_list|()
throws|throws
name|IOException
block|{
name|check
argument_list|(
literal|"Ø³Ø§ÙØ¯Ø§Øª"
argument_list|,
literal|"Ø³Ø§ÙØ¯"
argument_list|)
expr_stmt|;
block|}
DECL|method|testWnSuffix
specifier|public
name|void
name|testWnSuffix
parameter_list|()
throws|throws
name|IOException
block|{
name|check
argument_list|(
literal|"Ø³Ø§ÙØ¯ÙÙ"
argument_list|,
literal|"Ø³Ø§ÙØ¯"
argument_list|)
expr_stmt|;
block|}
DECL|method|testYnSuffix
specifier|public
name|void
name|testYnSuffix
parameter_list|()
throws|throws
name|IOException
block|{
name|check
argument_list|(
literal|"Ø³Ø§ÙØ¯ÙÙ"
argument_list|,
literal|"Ø³Ø§ÙØ¯"
argument_list|)
expr_stmt|;
block|}
DECL|method|testYhSuffix
specifier|public
name|void
name|testYhSuffix
parameter_list|()
throws|throws
name|IOException
block|{
name|check
argument_list|(
literal|"Ø³Ø§ÙØ¯ÙÙ"
argument_list|,
literal|"Ø³Ø§ÙØ¯"
argument_list|)
expr_stmt|;
block|}
DECL|method|testYpSuffix
specifier|public
name|void
name|testYpSuffix
parameter_list|()
throws|throws
name|IOException
block|{
name|check
argument_list|(
literal|"Ø³Ø§ÙØ¯ÙØ©"
argument_list|,
literal|"Ø³Ø§ÙØ¯"
argument_list|)
expr_stmt|;
block|}
DECL|method|testHSuffix
specifier|public
name|void
name|testHSuffix
parameter_list|()
throws|throws
name|IOException
block|{
name|check
argument_list|(
literal|"Ø³Ø§ÙØ¯Ù"
argument_list|,
literal|"Ø³Ø§ÙØ¯"
argument_list|)
expr_stmt|;
block|}
DECL|method|testPSuffix
specifier|public
name|void
name|testPSuffix
parameter_list|()
throws|throws
name|IOException
block|{
name|check
argument_list|(
literal|"Ø³Ø§ÙØ¯Ø©"
argument_list|,
literal|"Ø³Ø§ÙØ¯"
argument_list|)
expr_stmt|;
block|}
DECL|method|testYSuffix
specifier|public
name|void
name|testYSuffix
parameter_list|()
throws|throws
name|IOException
block|{
name|check
argument_list|(
literal|"Ø³Ø§ÙØ¯Ù"
argument_list|,
literal|"Ø³Ø§ÙØ¯"
argument_list|)
expr_stmt|;
block|}
DECL|method|testComboPrefSuf
specifier|public
name|void
name|testComboPrefSuf
parameter_list|()
throws|throws
name|IOException
block|{
name|check
argument_list|(
literal|"ÙØ³Ø§ÙØ¯ÙÙ"
argument_list|,
literal|"Ø³Ø§ÙØ¯"
argument_list|)
expr_stmt|;
block|}
DECL|method|testComboSuf
specifier|public
name|void
name|testComboSuf
parameter_list|()
throws|throws
name|IOException
block|{
name|check
argument_list|(
literal|"Ø³Ø§ÙØ¯ÙØ§Øª"
argument_list|,
literal|"Ø³Ø§ÙØ¯"
argument_list|)
expr_stmt|;
block|}
DECL|method|testShouldntStem
specifier|public
name|void
name|testShouldntStem
parameter_list|()
throws|throws
name|IOException
block|{
name|check
argument_list|(
literal|"Ø§ÙÙ"
argument_list|,
literal|"Ø§ÙÙ"
argument_list|)
expr_stmt|;
block|}
DECL|method|testNonArabic
specifier|public
name|void
name|testNonArabic
parameter_list|()
throws|throws
name|IOException
block|{
name|check
argument_list|(
literal|"English"
argument_list|,
literal|"English"
argument_list|)
expr_stmt|;
block|}
DECL|method|check
specifier|private
name|void
name|check
parameter_list|(
specifier|final
name|String
name|input
parameter_list|,
specifier|final
name|String
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|ArabicLetterTokenizer
name|tokenStream
init|=
operator|new
name|ArabicLetterTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|ArabicStemFilter
name|filter
init|=
operator|new
name|ArabicStemFilter
argument_list|(
name|tokenStream
argument_list|)
decl_stmt|;
name|TermAttribute
name|termAtt
init|=
operator|(
name|TermAttribute
operator|)
name|filter
operator|.
name|getAttribute
argument_list|(
name|TermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|incrementToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|termAtt
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
name|filter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
