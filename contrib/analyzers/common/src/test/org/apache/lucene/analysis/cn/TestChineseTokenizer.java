begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.cn
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|cn
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import
begin_class
DECL|class|TestChineseTokenizer
specifier|public
class|class
name|TestChineseTokenizer
extends|extends
name|TestCase
block|{
DECL|method|testOtherLetterOffset
specifier|public
name|void
name|testOtherLetterOffset
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|s
init|=
literal|"aå¤©b"
decl_stmt|;
name|ChineseTokenizer
name|tokenizer
init|=
operator|new
name|ChineseTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|correctStartOffset
init|=
literal|0
decl_stmt|;
name|int
name|correctEndOffset
init|=
literal|1
decl_stmt|;
name|OffsetAttribute
name|offsetAtt
init|=
operator|(
name|OffsetAttribute
operator|)
name|tokenizer
operator|.
name|getAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|correctStartOffset
argument_list|,
name|offsetAtt
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|correctEndOffset
argument_list|,
name|offsetAtt
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|correctStartOffset
operator|++
expr_stmt|;
name|correctEndOffset
operator|++
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
