begin_unit
begin_package
DECL|package|org.apache.lucene.store.instantiated
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|instantiated
package|;
end_package
begin_comment
comment|/**  * Copyright 2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermPositions
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * A {@link org.apache.lucene.index.TermPositions} navigating an {@link InstantiatedIndexReader}.  */
end_comment
begin_class
DECL|class|InstantiatedTermPositions
specifier|public
class|class
name|InstantiatedTermPositions
extends|extends
name|InstantiatedTermDocs
implements|implements
name|TermPositions
block|{
DECL|method|getPayloadLength
specifier|public
name|int
name|getPayloadLength
parameter_list|()
block|{
return|return
name|currentDocumentInformation
operator|.
name|getPayloads
argument_list|()
index|[
name|currentTermPositionIndex
index|]
operator|.
name|length
return|;
block|}
DECL|method|getPayload
specifier|public
name|byte
index|[]
name|getPayload
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|payloads
init|=
name|currentDocumentInformation
operator|.
name|getPayloads
argument_list|()
index|[
name|currentTermPositionIndex
index|]
decl_stmt|;
comment|// read payloads lazily
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|data
operator|.
name|length
operator|-
name|offset
operator|<
name|getPayloadLength
argument_list|()
condition|)
block|{
comment|// the array is too small to store the payload data,
return|return
name|payloads
return|;
block|}
else|else
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|payloads
argument_list|,
literal|0
argument_list|,
name|data
argument_list|,
name|offset
argument_list|,
name|payloads
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
block|}
DECL|method|isPayloadAvailable
specifier|public
name|boolean
name|isPayloadAvailable
parameter_list|()
block|{
return|return
name|currentDocumentInformation
operator|.
name|getPayloads
argument_list|()
index|[
name|currentTermPositionIndex
index|]
operator|!=
literal|null
return|;
block|}
DECL|method|InstantiatedTermPositions
specifier|public
name|InstantiatedTermPositions
parameter_list|(
name|InstantiatedIndexReader
name|reader
parameter_list|)
block|{
name|super
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns next position in the current document.  It is an error to call    * this more than {@link #freq()} times    * without calling {@link #next()}<p> This is    * invalid until {@link #next()} is called for    * the first time.    */
DECL|method|nextPosition
specifier|public
name|int
name|nextPosition
parameter_list|()
block|{
name|currentTermPositionIndex
operator|++
expr_stmt|;
comment|// if you get an array out of index exception here,
comment|// it might be due to currentDocumentInformation.getIndexFromTerm not beeing set!!
return|return
name|currentDocumentInformation
operator|.
name|getTermPositions
argument_list|()
index|[
name|currentTermPositionIndex
index|]
return|;
block|}
DECL|field|currentTermPositionIndex
specifier|private
name|int
name|currentTermPositionIndex
decl_stmt|;
comment|/**    * Moves to the next pair in the enumeration.    *<p> Returns true if there is such a next pair in the enumeration.    */
annotation|@
name|Override
DECL|method|next
specifier|public
name|boolean
name|next
parameter_list|()
block|{
name|currentTermPositionIndex
operator|=
operator|-
literal|1
expr_stmt|;
return|return
name|super
operator|.
name|next
argument_list|()
return|;
block|}
comment|/**    * Skips entries to the first beyond the current whose document number is    * greater than or equal to<currentTermPositionIndex>target</currentTermPositionIndex>.<p>Returns true iff there is such    * an entry.<p>Behaves as if written:<pre>    *   boolean skipTo(int target) {    *     do {    *       if (!next())    * 	     return false;    *     } while (target> doc());    *     return true;    *   }    *</pre>    * Some implementations are considerably more efficient than that.    */
annotation|@
name|Override
DECL|method|skipTo
specifier|public
name|boolean
name|skipTo
parameter_list|(
name|int
name|target
parameter_list|)
block|{
name|currentTermPositionIndex
operator|=
operator|-
literal|1
expr_stmt|;
return|return
name|super
operator|.
name|skipTo
argument_list|(
name|target
argument_list|)
return|;
block|}
block|}
end_class
end_unit
