begin_unit
begin_package
DECL|package|org.apache.lucene.store.instantiated
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|instantiated
package|;
end_package
begin_comment
comment|/**  * Copyright 2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermVectorOffsetInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DefaultSimilarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Similarity
import|;
end_import
begin_comment
comment|/**  * This class, similar to {@link org.apache.lucene.index.IndexWriter}, has no locking mechanism.  *<p>  * {@link org.apache.lucene.store.instantiated.InstantiatedIndexReader} is navigating  * the same instances in memory as this writer is updating so searchers active while  * you are committing are bound to throw exceptions.  *<p>  * Consider using InstantiatedIndex as if it was immutable.  *  * @see org.apache.lucene.index.IndexWriter   */
end_comment
begin_class
DECL|class|InstantiatedIndexWriter
specifier|public
class|class
name|InstantiatedIndexWriter
block|{
DECL|field|infoStream
specifier|private
name|PrintStream
name|infoStream
init|=
literal|null
decl_stmt|;
DECL|field|maxFieldLength
specifier|private
name|int
name|maxFieldLength
init|=
name|IndexWriter
operator|.
name|DEFAULT_MAX_FIELD_LENGTH
decl_stmt|;
DECL|field|index
specifier|private
specifier|final
name|InstantiatedIndex
name|index
decl_stmt|;
DECL|field|analyzer
specifier|private
specifier|final
name|Analyzer
name|analyzer
decl_stmt|;
DECL|field|similarity
specifier|private
name|Similarity
name|similarity
init|=
name|Similarity
operator|.
name|getDefault
argument_list|()
decl_stmt|;
comment|// how to normalize;
DECL|field|fieldNameBuffer
specifier|private
specifier|transient
name|Set
argument_list|<
name|String
argument_list|>
name|fieldNameBuffer
decl_stmt|;
comment|/**    * linked to ensure chronological order    */
DECL|field|termDocumentInformationFactoryByDocument
specifier|private
name|Map
argument_list|<
name|InstantiatedDocument
argument_list|,
name|Map
argument_list|<
name|FieldSetting
argument_list|,
name|Map
argument_list|<
name|String
comment|/*text*/
argument_list|,
name|TermDocumentInformationFactory
argument_list|>
argument_list|>
argument_list|>
name|termDocumentInformationFactoryByDocument
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|InstantiatedDocument
argument_list|,
name|Map
argument_list|<
name|FieldSetting
argument_list|,
name|Map
argument_list|<
name|String
comment|/*text*/
argument_list|,
name|TermDocumentInformationFactory
argument_list|>
argument_list|>
argument_list|>
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
DECL|field|unflushedDocuments
specifier|private
name|Set
argument_list|<
name|InstantiatedDocument
argument_list|>
name|unflushedDocuments
init|=
operator|new
name|HashSet
argument_list|<
name|InstantiatedDocument
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|InstantiatedIndexWriter
specifier|public
name|InstantiatedIndexWriter
parameter_list|(
name|InstantiatedIndex
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|index
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|InstantiatedIndexWriter
specifier|public
name|InstantiatedIndexWriter
parameter_list|(
name|InstantiatedIndex
name|index
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|index
argument_list|,
name|analyzer
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|InstantiatedIndexWriter
specifier|public
name|InstantiatedIndexWriter
parameter_list|(
name|InstantiatedIndex
name|index
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|,
name|boolean
name|create
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|analyzer
operator|=
name|analyzer
expr_stmt|;
name|fieldNameBuffer
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|create
condition|)
block|{
name|this
operator|.
name|index
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
block|}
DECL|field|mergeFactor
specifier|private
name|int
name|mergeFactor
init|=
literal|2500
decl_stmt|;
comment|/**    * The sweetspot for this implementation is somewhere around 2500 at 2K text large documents.    *<p/>    * Benchmark output:    *<pre>    *  ------------> Report sum by Prefix (MAddDocs) and Round (8 about 8 out of 160153)    *  Operation      round  mrg buf cmpnd   runCnt   recsPerRun        rec/s  elapsedSec    avgUsedMem    avgTotalMem    *  MAddDocs_20000     0   10  10  true        1        20000         81,4      245,68   200 325 152    268 156 928    *  MAddDocs_20000 -   1 1000  10  true -  -   1 -  -   20000 -  -   494,1 -  -  40,47 - 247 119 072 -  347 025 408    *  MAddDocs_20000     2   10 100  true        1        20000        104,8      190,81   233 895 552    363 720 704    *  MAddDocs_20000 -   3 2000 100  true -  -   1 -  -   20000 -  -   527,2 -  -  37,94 - 266 136 448 -  378 273 792    *  MAddDocs_20000     4   10  10 false        1        20000        103,2      193,75   222 089 792    378 273 792    *  MAddDocs_20000 -   5 3000  10 false -  -   1 -  -   20000 -  -   545,2 -  -  36,69 - 237 917 152 -  378 273 792    *  MAddDocs_20000     6   10 100 false        1        20000        102,7      194,67   237 018 976    378 273 792    *  MAddDocs_20000 -   7 4000 100 false -  -   1 -  -   20000 -  -   535,8 -  -  37,33 - 309 680 640 -  501 968 896    *</pre>    *    * @see org.apache.lucene.index.IndexWriter#setMergeFactor(int)    */
DECL|method|setMergeFactor
specifier|public
name|void
name|setMergeFactor
parameter_list|(
name|int
name|mergeFactor
parameter_list|)
block|{
name|this
operator|.
name|mergeFactor
operator|=
name|mergeFactor
expr_stmt|;
block|}
comment|/**    * @see org.apache.lucene.index.IndexWriter#getMergeFactor()    */
DECL|method|getMergeFactor
specifier|public
name|int
name|getMergeFactor
parameter_list|()
block|{
return|return
name|mergeFactor
return|;
block|}
comment|/**    * If non-null, information about merges and a message when    * maxFieldLength is reached could be printed to this -- currently    * not yet implemented.    */
DECL|method|setInfoStream
specifier|public
name|void
name|setInfoStream
parameter_list|(
name|PrintStream
name|infoStream
parameter_list|)
block|{
name|this
operator|.
name|infoStream
operator|=
name|infoStream
expr_stmt|;
block|}
DECL|method|abort
specifier|public
name|void
name|abort
parameter_list|()
throws|throws
name|IOException
block|{
comment|// what not
block|}
DECL|method|addIndexes
specifier|public
name|void
name|addIndexes
parameter_list|(
name|IndexReader
index|[]
name|readers
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not implemented"
argument_list|)
throw|;
block|}
DECL|method|getInfoStream
specifier|public
name|PrintStream
name|getInfoStream
parameter_list|()
block|{
return|return
name|infoStream
return|;
block|}
comment|/**    * Flushes all changes to an index and closes all associated files.    */
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|commit
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns the number of documents currently in this index.    */
DECL|method|docCount
specifier|public
name|int
name|docCount
parameter_list|()
block|{
comment|// todo: not certain. see http://www.nabble.com/IndexWriter.docCount-tf3128882.html#a8669483
return|return
name|index
operator|.
name|getDocumentsByNumber
argument_list|()
operator|.
name|length
comment|/* - index.getDeletedDocuments().size() */
operator|+
name|unflushedDocuments
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Locks the index and commits the buffered documents.    */
DECL|method|commit
specifier|public
name|void
name|commit
parameter_list|()
throws|throws
name|IOException
block|{
comment|// todo write lock, unless held by caller
name|boolean
name|orderedTermsDirty
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|InstantiatedTerm
argument_list|>
name|dirtyTerms
init|=
operator|new
name|HashSet
argument_list|<
name|InstantiatedTerm
argument_list|>
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FieldSetting
argument_list|>
name|fieldSettingsByFieldName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|FieldSetting
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|fieldNameBuffer
control|)
block|{
name|fieldSettingsByFieldName
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
operator|new
name|FieldSetting
argument_list|(
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|InstantiatedDocument
index|[]
name|documentsByNumber
init|=
operator|new
name|InstantiatedDocument
index|[
name|index
operator|.
name|getDocumentsByNumber
argument_list|()
operator|.
name|length
operator|+
name|termDocumentInformationFactoryByDocument
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|index
operator|.
name|getDocumentsByNumber
argument_list|()
argument_list|,
literal|0
argument_list|,
name|documentsByNumber
argument_list|,
literal|0
argument_list|,
name|index
operator|.
name|getDocumentsByNumber
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|documentNumber
init|=
name|index
operator|.
name|getDocumentsByNumber
argument_list|()
operator|.
name|length
decl_stmt|;
name|List
argument_list|<
name|InstantiatedTerm
argument_list|>
name|orderedTerms
init|=
operator|new
name|ArrayList
argument_list|<
name|InstantiatedTerm
argument_list|>
argument_list|(
name|index
operator|.
name|getOrderedTerms
argument_list|()
operator|.
name|length
operator|+
literal|5000
argument_list|)
decl_stmt|;
for|for
control|(
name|InstantiatedTerm
name|instantiatedTerm
range|:
name|index
operator|.
name|getOrderedTerms
argument_list|()
control|)
block|{
name|orderedTerms
operator|.
name|add
argument_list|(
name|instantiatedTerm
argument_list|)
expr_stmt|;
block|}
comment|// update norm array with fake values for new documents
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|normsByFieldNameAndDocumentNumber
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|(
name|index
operator|.
name|getTermsByFieldAndText
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|fieldNames
operator|.
name|addAll
argument_list|(
name|index
operator|.
name|getNormsByFieldNameAndDocumentNumber
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|fieldNames
operator|.
name|addAll
argument_list|(
name|fieldNameBuffer
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|field
range|:
name|index
operator|.
name|getTermsByFieldAndText
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|norms
init|=
operator|new
name|byte
index|[
name|index
operator|.
name|getDocumentsByNumber
argument_list|()
operator|.
name|length
operator|+
name|termDocumentInformationFactoryByDocument
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|byte
index|[]
name|oldNorms
init|=
name|index
operator|.
name|getNormsByFieldNameAndDocumentNumber
argument_list|()
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldNorms
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|oldNorms
argument_list|,
literal|0
argument_list|,
name|norms
argument_list|,
literal|0
argument_list|,
name|oldNorms
operator|.
name|length
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|norms
argument_list|,
name|oldNorms
operator|.
name|length
argument_list|,
name|norms
operator|.
name|length
argument_list|,
name|DefaultSimilarity
operator|.
name|encodeNorm
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|norms
argument_list|,
literal|0
argument_list|,
name|norms
operator|.
name|length
argument_list|,
name|DefaultSimilarity
operator|.
name|encodeNorm
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|normsByFieldNameAndDocumentNumber
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|norms
argument_list|)
expr_stmt|;
name|fieldNames
operator|.
name|remove
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|field
range|:
name|fieldNames
control|)
block|{
comment|//System.out.println(field);
name|byte
index|[]
name|norms
init|=
operator|new
name|byte
index|[
name|index
operator|.
name|getDocumentsByNumber
argument_list|()
operator|.
name|length
operator|+
name|termDocumentInformationFactoryByDocument
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|norms
argument_list|,
literal|0
argument_list|,
name|norms
operator|.
name|length
argument_list|,
name|DefaultSimilarity
operator|.
name|encodeNorm
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|normsByFieldNameAndDocumentNumber
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|norms
argument_list|)
expr_stmt|;
block|}
name|fieldNames
operator|.
name|clear
argument_list|()
expr_stmt|;
name|index
operator|.
name|setNormsByFieldNameAndDocumentNumber
argument_list|(
name|normsByFieldNameAndDocumentNumber
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|InstantiatedDocument
argument_list|,
name|Map
argument_list|<
name|FieldSetting
argument_list|,
name|Map
argument_list|<
name|String
comment|/*text*/
argument_list|,
name|TermDocumentInformationFactory
argument_list|>
argument_list|>
argument_list|>
name|eDocumentTermDocInfoByTermTextAndField
range|:
name|termDocumentInformationFactoryByDocument
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|InstantiatedDocument
name|document
init|=
name|eDocumentTermDocInfoByTermTextAndField
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|// assign document number
name|document
operator|.
name|setDocumentNumber
argument_list|(
name|documentNumber
operator|++
argument_list|)
expr_stmt|;
name|documentsByNumber
index|[
name|document
operator|.
name|getDocumentNumber
argument_list|()
index|]
operator|=
name|document
expr_stmt|;
comment|// set norms, prepare document and create optimized size collections.
name|int
name|numFieldsWithTermVectorsInDocument
init|=
literal|0
decl_stmt|;
name|int
name|termsInDocument
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|FieldSetting
argument_list|,
name|Map
argument_list|<
name|String
comment|/*text*/
argument_list|,
name|TermDocumentInformationFactory
argument_list|>
argument_list|>
name|eFieldTermDocInfoFactoriesByTermText
range|:
name|eDocumentTermDocInfoByTermTextAndField
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|eFieldTermDocInfoFactoriesByTermText
operator|.
name|getKey
argument_list|()
operator|.
name|storeTermVector
condition|)
block|{
name|numFieldsWithTermVectorsInDocument
operator|+=
name|eFieldTermDocInfoFactoriesByTermText
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|termsInDocument
operator|+=
name|eFieldTermDocInfoFactoriesByTermText
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|eFieldTermDocInfoFactoriesByTermText
operator|.
name|getKey
argument_list|()
operator|.
name|indexed
operator|&&
operator|!
name|eFieldTermDocInfoFactoriesByTermText
operator|.
name|getKey
argument_list|()
operator|.
name|omitNorms
condition|)
block|{
name|float
name|norm
init|=
name|eFieldTermDocInfoFactoriesByTermText
operator|.
name|getKey
argument_list|()
operator|.
name|boost
decl_stmt|;
name|norm
operator|*=
name|document
operator|.
name|getDocument
argument_list|()
operator|.
name|getBoost
argument_list|()
expr_stmt|;
name|norm
operator|*=
name|similarity
operator|.
name|lengthNorm
argument_list|(
name|eFieldTermDocInfoFactoriesByTermText
operator|.
name|getKey
argument_list|()
operator|.
name|fieldName
argument_list|,
name|eFieldTermDocInfoFactoriesByTermText
operator|.
name|getKey
argument_list|()
operator|.
name|fieldLength
argument_list|)
expr_stmt|;
name|normsByFieldNameAndDocumentNumber
operator|.
name|get
argument_list|(
name|eFieldTermDocInfoFactoriesByTermText
operator|.
name|getKey
argument_list|()
operator|.
name|fieldName
argument_list|)
index|[
name|document
operator|.
name|getDocumentNumber
argument_list|()
index|]
operator|=
name|Similarity
operator|.
name|encodeNorm
argument_list|(
name|norm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** used for term vectors only, i think.. */
name|Map
argument_list|<
name|InstantiatedTerm
argument_list|,
name|InstantiatedTermDocumentInformation
argument_list|>
name|informationByTermOfCurrentDocument
init|=
operator|new
name|HashMap
argument_list|<
name|InstantiatedTerm
argument_list|,
name|InstantiatedTermDocumentInformation
argument_list|>
argument_list|(
name|termsInDocument
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|FieldSetting
argument_list|>
name|documentFieldSettingsByFieldName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|FieldSetting
argument_list|>
argument_list|(
name|eDocumentTermDocInfoByTermTextAndField
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// terms...
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|FieldSetting
argument_list|,
name|Map
argument_list|<
name|String
comment|/*text*/
argument_list|,
name|TermDocumentInformationFactory
argument_list|>
argument_list|>
name|eFieldSetting_TermDocInfoFactoriesByTermText
range|:
name|eDocumentTermDocInfoByTermTextAndField
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|documentFieldSettingsByFieldName
operator|.
name|put
argument_list|(
name|eFieldSetting_TermDocInfoFactoriesByTermText
operator|.
name|getKey
argument_list|()
operator|.
name|fieldName
argument_list|,
name|eFieldSetting_TermDocInfoFactoriesByTermText
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
comment|// find or create term
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
comment|/*text*/
argument_list|,
name|TermDocumentInformationFactory
argument_list|>
name|eTermText_TermDocInfoFactory
range|:
name|eFieldSetting_TermDocInfoFactoriesByTermText
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// get term..
name|InstantiatedTerm
name|term
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|InstantiatedTerm
argument_list|>
name|termsByText
init|=
name|index
operator|.
name|getTermsByFieldAndText
argument_list|()
operator|.
name|get
argument_list|(
name|eFieldSetting_TermDocInfoFactoriesByTermText
operator|.
name|getKey
argument_list|()
operator|.
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|termsByText
operator|==
literal|null
condition|)
block|{
name|termsByText
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|InstantiatedTerm
argument_list|>
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|index
operator|.
name|getTermsByFieldAndText
argument_list|()
operator|.
name|put
argument_list|(
name|eFieldSetting_TermDocInfoFactoriesByTermText
operator|.
name|getKey
argument_list|()
operator|.
name|fieldName
argument_list|,
name|termsByText
argument_list|)
expr_stmt|;
name|term
operator|=
operator|new
name|InstantiatedTerm
argument_list|(
name|eFieldSetting_TermDocInfoFactoriesByTermText
operator|.
name|getKey
argument_list|()
operator|.
name|fieldName
argument_list|,
name|eTermText_TermDocInfoFactory
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|termsByText
operator|.
name|put
argument_list|(
name|eTermText_TermDocInfoFactory
operator|.
name|getKey
argument_list|()
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|orderedTerms
argument_list|,
name|term
argument_list|,
name|InstantiatedTerm
operator|.
name|comparator
argument_list|)
decl_stmt|;
name|pos
operator|=
operator|-
literal|1
operator|-
name|pos
expr_stmt|;
name|orderedTerms
operator|.
name|add
argument_list|(
name|pos
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|orderedTermsDirty
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|term
operator|=
name|termsByText
operator|.
name|get
argument_list|(
name|eTermText_TermDocInfoFactory
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
name|term
operator|=
operator|new
name|InstantiatedTerm
argument_list|(
name|eFieldSetting_TermDocInfoFactoriesByTermText
operator|.
name|getKey
argument_list|()
operator|.
name|fieldName
argument_list|,
name|eTermText_TermDocInfoFactory
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|termsByText
operator|.
name|put
argument_list|(
name|eTermText_TermDocInfoFactory
operator|.
name|getKey
argument_list|()
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|orderedTerms
argument_list|,
name|term
argument_list|,
name|InstantiatedTerm
operator|.
name|comparator
argument_list|)
decl_stmt|;
name|pos
operator|=
operator|-
literal|1
operator|-
name|pos
expr_stmt|;
name|orderedTerms
operator|.
name|add
argument_list|(
name|pos
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|orderedTermsDirty
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// create association term document infomation
comment|//
comment|// [Term]-- {0..*} | {0..* ordered} --(field)[Document]
comment|//
comment|//                 |
comment|//        [TermDocumentInformation]
name|int
index|[]
name|positions
init|=
operator|new
name|int
index|[
name|eTermText_TermDocInfoFactory
operator|.
name|getValue
argument_list|()
operator|.
name|termPositions
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|positions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|positions
index|[
name|i
index|]
operator|=
name|eTermText_TermDocInfoFactory
operator|.
name|getValue
argument_list|()
operator|.
name|termPositions
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
index|[]
name|payloads
init|=
operator|new
name|byte
index|[
name|eTermText_TermDocInfoFactory
operator|.
name|getValue
argument_list|()
operator|.
name|payloads
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|payloads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|payloads
index|[
name|i
index|]
operator|=
name|eTermText_TermDocInfoFactory
operator|.
name|getValue
argument_list|()
operator|.
name|payloads
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
comment|// couple
name|InstantiatedTermDocumentInformation
name|info
init|=
operator|new
name|InstantiatedTermDocumentInformation
argument_list|(
name|term
argument_list|,
name|document
argument_list|,
comment|/*eTermText_TermDocInfoFactory.getValue().termFrequency,*/
name|positions
argument_list|,
name|payloads
argument_list|)
decl_stmt|;
comment|// todo optimize, this should be chached and updated to array in batches rather than appending the array once for every position!
name|InstantiatedTermDocumentInformation
index|[]
name|associatedDocuments
decl_stmt|;
if|if
condition|(
name|term
operator|.
name|getAssociatedDocuments
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|associatedDocuments
operator|=
operator|new
name|InstantiatedTermDocumentInformation
index|[
name|term
operator|.
name|getAssociatedDocuments
argument_list|()
operator|.
name|length
operator|+
literal|1
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|term
operator|.
name|getAssociatedDocuments
argument_list|()
argument_list|,
literal|0
argument_list|,
name|associatedDocuments
argument_list|,
literal|0
argument_list|,
name|term
operator|.
name|getAssociatedDocuments
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|associatedDocuments
operator|=
operator|new
name|InstantiatedTermDocumentInformation
index|[
literal|1
index|]
expr_stmt|;
block|}
name|associatedDocuments
index|[
name|associatedDocuments
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|info
expr_stmt|;
name|term
operator|.
name|setAssociatedDocuments
argument_list|(
name|associatedDocuments
argument_list|)
expr_stmt|;
comment|// todo optimize, only if term vector?
name|informationByTermOfCurrentDocument
operator|.
name|put
argument_list|(
name|term
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|dirtyTerms
operator|.
name|add
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
comment|// term vector offsets
if|if
condition|(
name|eFieldSetting_TermDocInfoFactoriesByTermText
operator|.
name|getKey
argument_list|()
operator|.
name|storeOffsetWithTermVector
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|InstantiatedTerm
argument_list|,
name|InstantiatedTermDocumentInformation
argument_list|>
name|e
range|:
name|informationByTermOfCurrentDocument
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|eFieldSetting_TermDocInfoFactoriesByTermText
operator|.
name|getKey
argument_list|()
operator|.
name|fieldName
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
condition|)
block|{
name|TermDocumentInformationFactory
name|factory
init|=
name|eFieldSetting_TermDocInfoFactoriesByTermText
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
decl_stmt|;
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|setTermOffsets
argument_list|(
name|factory
operator|.
name|termOffsets
operator|.
name|toArray
argument_list|(
operator|new
name|TermVectorOffsetInfo
index|[
name|factory
operator|.
name|termOffsets
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|InstantiatedTermDocumentInformation
argument_list|>
argument_list|>
name|termDocumentInformationsByField
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|InstantiatedTermDocumentInformation
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|InstantiatedTerm
argument_list|,
name|InstantiatedTermDocumentInformation
argument_list|>
name|eTerm_TermDocumentInformation
range|:
name|informationByTermOfCurrentDocument
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|InstantiatedTermDocumentInformation
argument_list|>
name|termDocumentInformations
init|=
name|termDocumentInformationsByField
operator|.
name|get
argument_list|(
name|eTerm_TermDocumentInformation
operator|.
name|getKey
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|termDocumentInformations
operator|==
literal|null
condition|)
block|{
name|termDocumentInformations
operator|=
operator|new
name|ArrayList
argument_list|<
name|InstantiatedTermDocumentInformation
argument_list|>
argument_list|()
expr_stmt|;
name|termDocumentInformationsByField
operator|.
name|put
argument_list|(
name|eTerm_TermDocumentInformation
operator|.
name|getKey
argument_list|()
operator|.
name|field
argument_list|()
argument_list|,
name|termDocumentInformations
argument_list|)
expr_stmt|;
block|}
name|termDocumentInformations
operator|.
name|add
argument_list|(
name|eTerm_TermDocumentInformation
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|InstantiatedTermDocumentInformation
argument_list|>
argument_list|>
name|eField_TermDocInfos
range|:
name|termDocumentInformationsByField
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|eField_TermDocInfos
operator|.
name|getValue
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|InstantiatedTermDocumentInformation
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|InstantiatedTermDocumentInformation
name|instantiatedTermDocumentInformation
parameter_list|,
name|InstantiatedTermDocumentInformation
name|instantiatedTermDocumentInformation1
parameter_list|)
block|{
return|return
name|instantiatedTermDocumentInformation
operator|.
name|getTerm
argument_list|()
operator|.
name|getTerm
argument_list|()
operator|.
name|compareTo
argument_list|(
name|instantiatedTermDocumentInformation1
operator|.
name|getTerm
argument_list|()
operator|.
name|getTerm
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// add term vector
if|if
condition|(
name|documentFieldSettingsByFieldName
operator|.
name|get
argument_list|(
name|eField_TermDocInfos
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|storeTermVector
condition|)
block|{
if|if
condition|(
name|document
operator|.
name|getVectorSpace
argument_list|()
operator|==
literal|null
condition|)
block|{
name|document
operator|.
name|setVectorSpace
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|InstantiatedTermDocumentInformation
argument_list|>
argument_list|>
argument_list|(
name|documentFieldSettingsByFieldName
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|document
operator|.
name|getVectorSpace
argument_list|()
operator|.
name|put
argument_list|(
name|eField_TermDocInfos
operator|.
name|getKey
argument_list|()
argument_list|,
name|eField_TermDocInfos
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|fieldSettingsByFieldName
operator|.
name|putAll
argument_list|(
name|documentFieldSettingsByFieldName
argument_list|)
expr_stmt|;
block|}
comment|// order document informations in dirty terms
for|for
control|(
name|InstantiatedTerm
name|term
range|:
name|dirtyTerms
control|)
block|{
comment|// todo optimize, i belive this is useless, that the natural order is document number?
name|Arrays
operator|.
name|sort
argument_list|(
name|term
operator|.
name|getAssociatedDocuments
argument_list|()
argument_list|,
name|InstantiatedTermDocumentInformation
operator|.
name|documentNumberComparator
argument_list|)
expr_stmt|;
comment|//      // update association class reference for speedy skipTo()
comment|//      for (int i = 0; i< term.getAssociatedDocuments().length; i++) {
comment|//        term.getAssociatedDocuments()[i].setIndexFromTerm(i);
comment|//      }
block|}
comment|// flush to writer
name|index
operator|.
name|setDocumentsByNumber
argument_list|(
name|documentsByNumber
argument_list|)
expr_stmt|;
name|index
operator|.
name|setOrderedTerms
argument_list|(
name|orderedTerms
operator|.
name|toArray
argument_list|(
operator|new
name|InstantiatedTerm
index|[
name|orderedTerms
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldSetting
name|fieldSetting
range|:
name|fieldSettingsByFieldName
operator|.
name|values
argument_list|()
control|)
block|{
name|index
operator|.
name|getFieldSettings
argument_list|()
operator|.
name|merge
argument_list|(
name|fieldSetting
argument_list|)
expr_stmt|;
block|}
comment|// set term index
if|if
condition|(
name|orderedTermsDirty
condition|)
block|{
comment|// todo optimize, only update from start position
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
operator|.
name|getOrderedTerms
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|index
operator|.
name|getOrderedTerms
argument_list|()
index|[
name|i
index|]
operator|.
name|setTermIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|// remove deleted documents
name|IndexReader
name|indexDeleter
init|=
name|index
operator|.
name|indexReaderFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|unflushedDeletions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Term
name|term
range|:
name|unflushedDeletions
control|)
block|{
name|indexDeleter
operator|.
name|deleteDocuments
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
name|unflushedDeletions
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// all done, clear buffers
name|unflushedDocuments
operator|.
name|clear
argument_list|()
expr_stmt|;
name|termDocumentInformationFactoryByDocument
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fieldNameBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|index
operator|.
name|setVersion
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
comment|// todo unlock
name|indexDeleter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Adds a document to this index.  If the document contains more than    * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are    * discarded.    */
DECL|method|addDocument
specifier|public
name|void
name|addDocument
parameter_list|(
name|Document
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|addDocument
argument_list|(
name|doc
argument_list|,
name|getAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds a document to this index, using the provided analyzer instead of the    * value of {@link #getAnalyzer()}.  If the document contains more than    * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are    * discarded.    *    * @param doc    * @param analyzer    * @throws IOException    */
DECL|method|addDocument
specifier|public
name|void
name|addDocument
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|IOException
block|{
name|addDocument
argument_list|(
operator|new
name|InstantiatedDocument
argument_list|(
name|doc
argument_list|)
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tokenizes a document and adds it to the buffer.    * Try to do all calculations in this method rather than in commit, as this is a non locking method.    * Remember, this index implementation expects unlimited memory for maximum speed.    *    * @param document    * @param analyzer    * @throws IOException    */
DECL|method|addDocument
specifier|protected
name|void
name|addDocument
parameter_list|(
name|InstantiatedDocument
name|document
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|document
operator|.
name|getDocumentNumber
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Document number already set! Are you trying to add a document that already is bound to this or another index?"
argument_list|)
throw|;
block|}
comment|// todo: write lock
comment|// normalize settings per field name in document
name|Map
argument_list|<
name|String
comment|/* field name */
argument_list|,
name|FieldSetting
argument_list|>
name|fieldSettingsByFieldName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|FieldSetting
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
operator|(
name|List
argument_list|<
name|Field
argument_list|>
operator|)
name|document
operator|.
name|getDocument
argument_list|()
operator|.
name|getFields
argument_list|()
control|)
block|{
name|FieldSetting
name|fieldSetting
init|=
name|fieldSettingsByFieldName
operator|.
name|get
argument_list|(
name|field
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldSetting
operator|==
literal|null
condition|)
block|{
name|fieldSetting
operator|=
operator|new
name|FieldSetting
argument_list|()
expr_stmt|;
name|fieldSetting
operator|.
name|fieldName
operator|=
name|field
operator|.
name|name
argument_list|()
operator|.
name|intern
argument_list|()
expr_stmt|;
name|fieldSettingsByFieldName
operator|.
name|put
argument_list|(
name|fieldSetting
operator|.
name|fieldName
argument_list|,
name|fieldSetting
argument_list|)
expr_stmt|;
name|fieldNameBuffer
operator|.
name|add
argument_list|(
name|fieldSetting
operator|.
name|fieldName
argument_list|)
expr_stmt|;
block|}
comment|// todo: fixme: multiple fields with the same name does not mean field boost += more boost.
name|fieldSetting
operator|.
name|boost
operator|*=
name|field
operator|.
name|getBoost
argument_list|()
expr_stmt|;
comment|//fieldSettings.dimensions++;
comment|// once fieldSettings, always fieldSettings.
if|if
condition|(
name|field
operator|.
name|getOmitNorms
argument_list|()
condition|)
block|{
name|fieldSetting
operator|.
name|omitNorms
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|field
operator|.
name|isIndexed
argument_list|()
condition|)
block|{
name|fieldSetting
operator|.
name|indexed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|field
operator|.
name|isTokenized
argument_list|()
condition|)
block|{
name|fieldSetting
operator|.
name|tokenized
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|field
operator|.
name|isCompressed
argument_list|()
condition|)
block|{
name|fieldSetting
operator|.
name|compressed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|field
operator|.
name|isStored
argument_list|()
condition|)
block|{
name|fieldSetting
operator|.
name|stored
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|field
operator|.
name|isBinary
argument_list|()
condition|)
block|{
name|fieldSetting
operator|.
name|isBinary
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|field
operator|.
name|isTermVectorStored
argument_list|()
condition|)
block|{
name|fieldSetting
operator|.
name|storeTermVector
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|field
operator|.
name|isStorePositionWithTermVector
argument_list|()
condition|)
block|{
name|fieldSetting
operator|.
name|storePositionWithTermVector
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|field
operator|.
name|isStoreOffsetWithTermVector
argument_list|()
condition|)
block|{
name|fieldSetting
operator|.
name|storeOffsetWithTermVector
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|Field
argument_list|,
name|LinkedList
argument_list|<
name|Token
argument_list|>
argument_list|>
name|tokensByField
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Field
argument_list|,
name|LinkedList
argument_list|<
name|Token
argument_list|>
argument_list|>
argument_list|(
literal|20
argument_list|)
decl_stmt|;
comment|// tokenize indexed fields.
for|for
control|(
name|Iterator
argument_list|<
name|Field
argument_list|>
name|it
init|=
operator|(
name|Iterator
argument_list|<
name|Field
argument_list|>
operator|)
name|document
operator|.
name|getDocument
argument_list|()
operator|.
name|getFields
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Field
name|field
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|FieldSetting
name|fieldSetting
init|=
name|fieldSettingsByFieldName
operator|.
name|get
argument_list|(
name|field
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|isIndexed
argument_list|()
condition|)
block|{
name|LinkedList
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
operator|new
name|LinkedList
argument_list|<
name|Token
argument_list|>
argument_list|()
decl_stmt|;
name|tokensByField
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|tokens
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|isTokenized
argument_list|()
condition|)
block|{
name|int
name|termCounter
init|=
literal|0
decl_stmt|;
specifier|final
name|TokenStream
name|tokenStream
decl_stmt|;
comment|// todo readerValue(), binaryValue()
if|if
condition|(
name|field
operator|.
name|tokenStreamValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tokenStream
operator|=
name|field
operator|.
name|tokenStreamValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|tokenStream
operator|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|field
operator|.
name|name
argument_list|()
argument_list|,
operator|new
name|StringReader
argument_list|(
name|field
operator|.
name|stringValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// reset the TokenStream to the first token
name|tokenStream
operator|.
name|reset
argument_list|()
expr_stmt|;
specifier|final
name|Token
name|reusableToken
init|=
operator|new
name|Token
argument_list|()
decl_stmt|;
for|for
control|(
name|Token
name|nextToken
init|=
name|tokenStream
operator|.
name|next
argument_list|(
name|reusableToken
argument_list|)
init|;
name|nextToken
operator|!=
literal|null
condition|;
name|nextToken
operator|=
name|tokenStream
operator|.
name|next
argument_list|(
name|reusableToken
argument_list|)
control|)
block|{
name|tokens
operator|.
name|add
argument_list|(
operator|(
name|Token
operator|)
name|nextToken
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
comment|// the vector will be built on commit.
name|fieldSetting
operator|.
name|fieldLength
operator|++
expr_stmt|;
if|if
condition|(
name|fieldSetting
operator|.
name|fieldLength
operator|>
name|maxFieldLength
condition|)
block|{
break|break;
block|}
block|}
block|}
else|else
block|{
comment|// untokenized
name|String
name|fieldVal
init|=
name|field
operator|.
name|stringValue
argument_list|()
decl_stmt|;
name|Token
name|token
init|=
operator|new
name|Token
argument_list|(
literal|0
argument_list|,
name|fieldVal
operator|.
name|length
argument_list|()
argument_list|,
literal|"untokenized"
argument_list|)
decl_stmt|;
name|token
operator|.
name|setTermBuffer
argument_list|(
name|fieldVal
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|fieldSetting
operator|.
name|fieldLength
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|field
operator|.
name|isStored
argument_list|()
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|FieldSetting
argument_list|,
name|Map
argument_list|<
name|String
comment|/*text*/
argument_list|,
name|TermDocumentInformationFactory
argument_list|>
argument_list|>
name|termDocumentInformationFactoryByTermTextAndFieldSetting
init|=
operator|new
name|HashMap
argument_list|<
name|FieldSetting
argument_list|,
name|Map
argument_list|<
name|String
comment|/*text*/
argument_list|,
name|TermDocumentInformationFactory
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|termDocumentInformationFactoryByDocument
operator|.
name|put
argument_list|(
name|document
argument_list|,
name|termDocumentInformationFactoryByTermTextAndFieldSetting
argument_list|)
expr_stmt|;
comment|// build term vector, term positions and term offsets
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Field
argument_list|,
name|LinkedList
argument_list|<
name|Token
argument_list|>
argument_list|>
name|eField_Tokens
range|:
name|tokensByField
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|FieldSetting
name|fieldSetting
init|=
name|fieldSettingsByFieldName
operator|.
name|get
argument_list|(
name|eField_Tokens
operator|.
name|getKey
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|TermDocumentInformationFactory
argument_list|>
name|termDocumentInformationFactoryByTermText
init|=
name|termDocumentInformationFactoryByTermTextAndFieldSetting
operator|.
name|get
argument_list|(
name|fieldSettingsByFieldName
operator|.
name|get
argument_list|(
name|eField_Tokens
operator|.
name|getKey
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|termDocumentInformationFactoryByTermText
operator|==
literal|null
condition|)
block|{
name|termDocumentInformationFactoryByTermText
operator|=
operator|new
name|HashMap
argument_list|<
name|String
comment|/*text*/
argument_list|,
name|TermDocumentInformationFactory
argument_list|>
argument_list|()
expr_stmt|;
name|termDocumentInformationFactoryByTermTextAndFieldSetting
operator|.
name|put
argument_list|(
name|fieldSettingsByFieldName
operator|.
name|get
argument_list|(
name|eField_Tokens
operator|.
name|getKey
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|termDocumentInformationFactoryByTermText
argument_list|)
expr_stmt|;
block|}
name|int
name|lastOffset
init|=
literal|0
decl_stmt|;
comment|// for each new field, move positions a bunch.
if|if
condition|(
name|fieldSetting
operator|.
name|position
operator|>
literal|0
condition|)
block|{
comment|// todo what if no analyzer set, multiple fields with same name and index without tokenization?
name|fieldSetting
operator|.
name|position
operator|+=
name|analyzer
operator|.
name|getPositionIncrementGap
argument_list|(
name|fieldSetting
operator|.
name|fieldName
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Token
name|token
range|:
name|eField_Tokens
operator|.
name|getValue
argument_list|()
control|)
block|{
name|TermDocumentInformationFactory
name|termDocumentInformationFactory
init|=
name|termDocumentInformationFactoryByTermText
operator|.
name|get
argument_list|(
name|token
operator|.
name|term
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|termDocumentInformationFactory
operator|==
literal|null
condition|)
block|{
name|termDocumentInformationFactory
operator|=
operator|new
name|TermDocumentInformationFactory
argument_list|()
expr_stmt|;
name|termDocumentInformationFactoryByTermText
operator|.
name|put
argument_list|(
name|token
operator|.
name|term
argument_list|()
argument_list|,
name|termDocumentInformationFactory
argument_list|)
expr_stmt|;
block|}
comment|//termDocumentInformationFactory.termFrequency++;
name|fieldSetting
operator|.
name|position
operator|+=
operator|(
name|token
operator|.
name|getPositionIncrement
argument_list|()
operator|-
literal|1
operator|)
expr_stmt|;
name|termDocumentInformationFactory
operator|.
name|termPositions
operator|.
name|add
argument_list|(
name|fieldSetting
operator|.
name|position
operator|++
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|getPayload
argument_list|()
operator|!=
literal|null
operator|&&
name|token
operator|.
name|getPayload
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|termDocumentInformationFactory
operator|.
name|payloads
operator|.
name|add
argument_list|(
name|token
operator|.
name|getPayload
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|fieldSetting
operator|.
name|storePayloads
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|termDocumentInformationFactory
operator|.
name|payloads
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|eField_Tokens
operator|.
name|getKey
argument_list|()
operator|.
name|isStoreOffsetWithTermVector
argument_list|()
condition|)
block|{
name|termDocumentInformationFactory
operator|.
name|termOffsets
operator|.
name|add
argument_list|(
operator|new
name|TermVectorOffsetInfo
argument_list|(
name|fieldSetting
operator|.
name|offset
operator|+
name|token
operator|.
name|startOffset
argument_list|()
argument_list|,
name|fieldSetting
operator|.
name|offset
operator|+
name|token
operator|.
name|endOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|lastOffset
operator|=
name|fieldSetting
operator|.
name|offset
operator|+
name|token
operator|.
name|endOffset
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|eField_Tokens
operator|.
name|getKey
argument_list|()
operator|.
name|isStoreOffsetWithTermVector
argument_list|()
condition|)
block|{
name|fieldSetting
operator|.
name|offset
operator|=
name|lastOffset
operator|+
literal|1
expr_stmt|;
block|}
block|}
name|unflushedDocuments
operator|.
name|add
argument_list|(
name|document
argument_list|)
expr_stmt|;
comment|// if too many documents in buffer, commit.
if|if
condition|(
name|unflushedDocuments
operator|.
name|size
argument_list|()
operator|>=
name|getMergeFactor
argument_list|()
condition|)
block|{
name|commit
argument_list|(
comment|/*lock*/
argument_list|)
expr_stmt|;
block|}
comment|// todo: unlock write lock
block|}
DECL|field|unflushedDeletions
specifier|private
name|Set
argument_list|<
name|Term
argument_list|>
name|unflushedDeletions
init|=
operator|new
name|HashSet
argument_list|<
name|Term
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|deleteDocuments
specifier|public
name|void
name|deleteDocuments
parameter_list|(
name|Term
name|term
parameter_list|)
throws|throws
name|IOException
block|{
name|unflushedDeletions
operator|.
name|add
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteDocuments
specifier|public
name|void
name|deleteDocuments
parameter_list|(
name|Term
index|[]
name|terms
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Term
name|term
range|:
name|terms
control|)
block|{
name|deleteDocuments
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateDocument
specifier|public
name|void
name|updateDocument
parameter_list|(
name|Term
name|term
parameter_list|,
name|Document
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|updateDocument
argument_list|(
name|term
argument_list|,
name|doc
argument_list|,
name|getAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|updateDocument
specifier|public
name|void
name|updateDocument
parameter_list|(
name|Term
name|term
parameter_list|,
name|Document
name|doc
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteDocuments
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|addDocument
argument_list|(
name|doc
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
block|}
DECL|method|getMaxFieldLength
specifier|public
name|int
name|getMaxFieldLength
parameter_list|()
block|{
return|return
name|maxFieldLength
return|;
block|}
DECL|method|setMaxFieldLength
specifier|public
name|void
name|setMaxFieldLength
parameter_list|(
name|int
name|maxFieldLength
parameter_list|)
block|{
name|this
operator|.
name|maxFieldLength
operator|=
name|maxFieldLength
expr_stmt|;
block|}
DECL|method|getSimilarity
specifier|public
name|Similarity
name|getSimilarity
parameter_list|()
block|{
return|return
name|similarity
return|;
block|}
DECL|method|setSimilarity
specifier|public
name|void
name|setSimilarity
parameter_list|(
name|Similarity
name|similarity
parameter_list|)
block|{
name|this
operator|.
name|similarity
operator|=
name|similarity
expr_stmt|;
block|}
DECL|method|getAnalyzer
specifier|public
name|Analyzer
name|getAnalyzer
parameter_list|()
block|{
return|return
name|analyzer
return|;
block|}
DECL|class|TermDocumentInformationFactory
specifier|private
class|class
name|TermDocumentInformationFactory
block|{
DECL|field|payloads
specifier|private
name|LinkedList
argument_list|<
name|byte
index|[]
argument_list|>
name|payloads
init|=
operator|new
name|LinkedList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|termPositions
specifier|private
name|LinkedList
argument_list|<
name|Integer
argument_list|>
name|termPositions
init|=
operator|new
name|LinkedList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|termOffsets
specifier|private
name|LinkedList
argument_list|<
name|TermVectorOffsetInfo
argument_list|>
name|termOffsets
init|=
operator|new
name|LinkedList
argument_list|<
name|TermVectorOffsetInfo
argument_list|>
argument_list|()
decl_stmt|;
block|}
DECL|class|FieldSetting
specifier|static
class|class
name|FieldSetting
extends|extends
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|instantiated
operator|.
name|FieldSetting
block|{
DECL|field|boost
name|float
name|boost
init|=
literal|1
decl_stmt|;
DECL|field|position
name|int
name|position
init|=
literal|0
decl_stmt|;
DECL|field|offset
name|int
name|offset
decl_stmt|;
DECL|field|fieldLength
name|int
name|fieldLength
init|=
literal|0
decl_stmt|;
DECL|field|omitNorms
name|boolean
name|omitNorms
init|=
literal|false
decl_stmt|;
DECL|field|isBinary
name|boolean
name|isBinary
init|=
literal|false
decl_stmt|;
DECL|method|FieldSetting
specifier|private
name|FieldSetting
parameter_list|()
block|{     }
DECL|method|FieldSetting
specifier|private
name|FieldSetting
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|super
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
