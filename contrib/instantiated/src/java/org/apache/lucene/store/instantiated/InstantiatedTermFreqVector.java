begin_unit
begin_package
DECL|package|org.apache.lucene.store.instantiated
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|instantiated
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermFreqVector
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_comment
comment|/**  * Copyright 2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Vector space view of a document in an {@link InstantiatedIndexReader}.  *  * @see org.apache.lucene.index.TermFreqVector  */
end_comment
begin_class
DECL|class|InstantiatedTermFreqVector
specifier|public
class|class
name|InstantiatedTermFreqVector
implements|implements
name|TermFreqVector
implements|,
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1l
decl_stmt|;
DECL|field|termDocumentInformations
specifier|private
specifier|final
name|List
argument_list|<
name|InstantiatedTermDocumentInformation
argument_list|>
name|termDocumentInformations
decl_stmt|;
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|terms
specifier|private
specifier|final
name|String
name|terms
index|[]
decl_stmt|;
DECL|field|termFrequencies
specifier|private
specifier|final
name|int
name|termFrequencies
index|[]
decl_stmt|;
DECL|method|InstantiatedTermFreqVector
specifier|public
name|InstantiatedTermFreqVector
parameter_list|(
name|InstantiatedDocument
name|document
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|termDocumentInformations
operator|=
name|document
operator|.
name|getVectorSpace
argument_list|()
operator|.
name|get
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|terms
operator|=
operator|new
name|String
index|[
name|termDocumentInformations
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|termFrequencies
operator|=
operator|new
name|int
index|[
name|termDocumentInformations
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|termDocumentInformations
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|InstantiatedTermDocumentInformation
name|termDocumentInformation
init|=
name|termDocumentInformations
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|terms
index|[
name|i
index|]
operator|=
name|termDocumentInformation
operator|.
name|getTerm
argument_list|()
operator|.
name|text
argument_list|()
expr_stmt|;
name|termFrequencies
index|[
name|i
index|]
operator|=
name|termDocumentInformation
operator|.
name|getTermPositions
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
block|}
comment|/**    * @return The number of the field this vector is associated with    */
DECL|method|getField
specifier|public
name|String
name|getField
parameter_list|()
block|{
return|return
name|field
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|field
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|terms
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|termFrequencies
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|terms
operator|==
literal|null
condition|?
literal|0
else|:
name|terms
operator|.
name|length
return|;
block|}
DECL|method|getTerms
specifier|public
name|String
index|[]
name|getTerms
parameter_list|()
block|{
return|return
name|terms
return|;
block|}
DECL|method|getTermFrequencies
specifier|public
name|int
index|[]
name|getTermFrequencies
parameter_list|()
block|{
return|return
name|termFrequencies
return|;
block|}
DECL|method|indexOf
specifier|public
name|int
name|indexOf
parameter_list|(
name|String
name|termText
parameter_list|)
block|{
if|if
condition|(
name|terms
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|res
init|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|terms
argument_list|,
name|termText
argument_list|)
decl_stmt|;
return|return
name|res
operator|>=
literal|0
condition|?
name|res
else|:
operator|-
literal|1
return|;
block|}
DECL|method|indexesOf
specifier|public
name|int
index|[]
name|indexesOf
parameter_list|(
name|String
index|[]
name|termNumbers
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|)
block|{
comment|// TODO: there must be a more efficient way of doing this.
comment|//       At least, we could advance the lower bound of the terms array
comment|//       as we find valid indices. Also, it might be possible to leverage
comment|//       this even more by starting in the middle of the termNumbers array
comment|//       and thus dividing the terms array maybe in half with each found index.
name|int
name|res
index|[]
init|=
operator|new
name|int
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|res
index|[
name|i
index|]
operator|=
name|indexOf
argument_list|(
name|termNumbers
index|[
name|start
operator|+
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
DECL|method|getTermDocumentInformations
specifier|public
name|List
argument_list|<
name|InstantiatedTermDocumentInformation
argument_list|>
name|getTermDocumentInformations
parameter_list|()
block|{
return|return
name|termDocumentInformations
return|;
block|}
block|}
end_class
end_unit
