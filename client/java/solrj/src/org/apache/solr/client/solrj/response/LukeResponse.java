begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.response
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_comment
comment|/**  * This is an incomplete representation of the data returned from Luke  *   * @version $Id$  * @since solr 1.3  */
end_comment
begin_class
DECL|class|LukeResponse
specifier|public
class|class
name|LukeResponse
extends|extends
name|SolrResponseBase
block|{
DECL|class|FieldInfo
specifier|public
specifier|static
class|class
name|FieldInfo
block|{
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|type
name|String
name|type
decl_stmt|;
DECL|field|schema
name|String
name|schema
decl_stmt|;
DECL|field|docs
name|int
name|docs
decl_stmt|;
DECL|field|distinct
name|int
name|distinct
decl_stmt|;
DECL|field|cacheableFaceting
name|boolean
name|cacheableFaceting
decl_stmt|;
DECL|field|topTerms
name|NamedList
argument_list|<
name|Integer
argument_list|>
name|topTerms
decl_stmt|;
DECL|method|FieldInfo
specifier|public
name|FieldInfo
parameter_list|(
name|String
name|n
parameter_list|)
block|{
name|name
operator|=
name|n
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|read
specifier|public
name|void
name|read
parameter_list|(
name|NamedList
argument_list|<
name|Object
argument_list|>
name|nl
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|nl
control|)
block|{
if|if
condition|(
literal|"type"
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|type
operator|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"schema"
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|schema
operator|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"docs"
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|docs
operator|=
operator|(
name|Integer
operator|)
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"distinct"
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|distinct
operator|=
operator|(
name|Integer
operator|)
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"cacheableFaceting"
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|cacheableFaceting
operator|=
operator|(
name|Boolean
operator|)
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"topTerms"
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|topTerms
operator|=
operator|(
name|NamedList
argument_list|<
name|Integer
argument_list|>
operator|)
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|isCacheableFaceting
specifier|public
name|boolean
name|isCacheableFaceting
parameter_list|()
block|{
return|return
name|cacheableFaceting
return|;
block|}
DECL|method|getDistinct
specifier|public
name|int
name|getDistinct
parameter_list|()
block|{
return|return
name|distinct
return|;
block|}
DECL|method|getDocs
specifier|public
name|int
name|getDocs
parameter_list|()
block|{
return|return
name|docs
return|;
block|}
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getSchema
specifier|public
name|String
name|getSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
DECL|method|getTopTerms
specifier|public
name|NamedList
argument_list|<
name|Integer
argument_list|>
name|getTopTerms
parameter_list|()
block|{
return|return
name|topTerms
return|;
block|}
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
block|}
empty_stmt|;
DECL|field|indexInfo
specifier|private
name|NamedList
argument_list|<
name|Object
argument_list|>
name|indexInfo
decl_stmt|;
DECL|field|fieldInfo
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|FieldInfo
argument_list|>
name|fieldInfo
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|LukeResponse
specifier|public
name|LukeResponse
parameter_list|(
name|NamedList
argument_list|<
name|Object
argument_list|>
name|res
parameter_list|)
block|{
name|super
argument_list|(
name|res
argument_list|)
expr_stmt|;
comment|// Parse indexinfo
name|indexInfo
operator|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|res
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|flds
init|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|res
operator|.
name|get
argument_list|(
literal|"fields"
argument_list|)
decl_stmt|;
if|if
condition|(
name|flds
operator|==
literal|null
condition|)
block|{
name|flds
operator|=
call|(
name|NamedList
argument_list|<
name|Object
argument_list|>
call|)
argument_list|(
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|res
operator|.
name|get
argument_list|(
literal|"schema"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"fields"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flds
operator|!=
literal|null
condition|)
block|{
name|fieldInfo
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|FieldInfo
argument_list|>
argument_list|( )
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|field
range|:
name|flds
control|)
block|{
name|FieldInfo
name|f
init|=
operator|new
name|FieldInfo
argument_list|(
name|field
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|f
operator|.
name|read
argument_list|(
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|field
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|fieldInfo
operator|.
name|put
argument_list|(
name|field
operator|.
name|getKey
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//----------------------------------------------------------------
comment|//----------------------------------------------------------------
DECL|method|getIndexDirectory
specifier|public
name|String
name|getIndexDirectory
parameter_list|()
block|{
if|if
condition|(
name|indexInfo
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|(
name|String
operator|)
name|indexInfo
operator|.
name|get
argument_list|(
literal|"directory"
argument_list|)
return|;
block|}
DECL|method|getNumDocs
specifier|public
name|Integer
name|getNumDocs
parameter_list|()
block|{
if|if
condition|(
name|indexInfo
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|(
name|Integer
operator|)
name|indexInfo
operator|.
name|get
argument_list|(
literal|"numDocs"
argument_list|)
return|;
block|}
DECL|method|getMaxDoc
specifier|public
name|Integer
name|getMaxDoc
parameter_list|()
block|{
if|if
condition|(
name|indexInfo
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|(
name|Integer
operator|)
name|indexInfo
operator|.
name|get
argument_list|(
literal|"maxDoc"
argument_list|)
return|;
block|}
DECL|method|getNumTerms
specifier|public
name|Integer
name|getNumTerms
parameter_list|()
block|{
if|if
condition|(
name|indexInfo
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|(
name|Integer
operator|)
name|indexInfo
operator|.
name|get
argument_list|(
literal|"numTerms"
argument_list|)
return|;
block|}
DECL|method|getFieldInfo
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|FieldInfo
argument_list|>
name|getFieldInfo
parameter_list|()
block|{
return|return
name|fieldInfo
return|;
block|}
DECL|method|getFieldInfo
specifier|public
name|FieldInfo
name|getFieldInfo
parameter_list|(
name|String
name|f
parameter_list|)
block|{
return|return
name|fieldInfo
operator|.
name|get
argument_list|(
name|f
argument_list|)
return|;
block|}
comment|//----------------------------------------------------------------
comment|//----------------------------------------------------------------
block|}
end_class
end_unit
