begin_unit
begin_package
DECL|package|org.apache.lucene
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
package|;
end_package
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache Lucene" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Lucene", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|HTMLParser
operator|.
name|HTMLParser
import|;
end_import
begin_comment
comment|/** A utility for making Lucene Documents for HTML documents. */
end_comment
begin_class
DECL|class|HTMLDocument
specifier|public
class|class
name|HTMLDocument
block|{
DECL|field|dirSep
specifier|static
name|char
name|dirSep
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|method|uid
specifier|public
specifier|static
name|String
name|uid
parameter_list|(
name|File
name|f
parameter_list|)
block|{
comment|// Append path and date into a string in such a way that lexicographic
comment|// sorting gives the same results as a walk of the file hierarchy.  Thus
comment|// null (\u0000) is used both to separate directory components and to
comment|// separate the path from the date.
return|return
name|f
operator|.
name|getPath
argument_list|()
operator|.
name|replace
argument_list|(
name|dirSep
argument_list|,
literal|'\u0000'
argument_list|)
operator|+
literal|"\u0000"
operator|+
name|DateField
operator|.
name|timeToString
argument_list|(
name|f
operator|.
name|lastModified
argument_list|()
argument_list|)
return|;
block|}
DECL|method|uid2url
specifier|public
specifier|static
name|String
name|uid2url
parameter_list|(
name|String
name|uid
parameter_list|)
block|{
name|String
name|url
init|=
name|uid
operator|.
name|replace
argument_list|(
literal|'\u0000'
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
comment|// replace nulls with slashes
return|return
name|url
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|url
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
argument_list|)
return|;
comment|// remove date from end
block|}
DECL|method|Document
specifier|public
specifier|static
name|Document
name|Document
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// make a new, empty document
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
comment|// Add the url as a field named "url".  Use an UnIndexed field, so
comment|// that the url is just stored with the document, but is not searchable.
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|UnIndexed
argument_list|(
literal|"url"
argument_list|,
name|f
operator|.
name|getPath
argument_list|()
operator|.
name|replace
argument_list|(
name|dirSep
argument_list|,
literal|'/'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add the last modified date of the file a field named "modified".  Use a
comment|// Keyword field, so that it's searchable, but so that no attempt is made
comment|// to tokenize the field into words.
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Keyword
argument_list|(
literal|"modified"
argument_list|,
name|DateField
operator|.
name|timeToString
argument_list|(
name|f
operator|.
name|lastModified
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add the uid as a field, so that index can be incrementally maintained.
comment|// This field is not stored with document, it is indexed, but it is not
comment|// tokenized prior to indexing.
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"uid"
argument_list|,
name|uid
argument_list|(
name|f
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|HTMLParser
name|parser
init|=
operator|new
name|HTMLParser
argument_list|(
name|f
argument_list|)
decl_stmt|;
comment|// Add the tag-stripped contents as a Reader-valued Text field so it will
comment|// get tokenized and indexed.
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
literal|"contents"
argument_list|,
name|parser
operator|.
name|getReader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add the summary as an UnIndexed field, so that it is stored and returned
comment|// with hit documents for display.
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|UnIndexed
argument_list|(
literal|"summary"
argument_list|,
name|parser
operator|.
name|getSummary
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add the title as a separate Text field, so that it can be searched
comment|// separately.
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
literal|"title"
argument_list|,
name|parser
operator|.
name|getTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// return the document
return|return
name|doc
return|;
block|}
DECL|method|HTMLDocument
specifier|private
name|HTMLDocument
parameter_list|()
block|{}
block|}
end_class
end_unit
