begin_unit
begin_package
DECL|package|org.apache.lucene.demo
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|demo
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|demo
operator|.
name|html
operator|.
name|HTMLParser
import|;
end_import
begin_comment
comment|/** A utility for making Lucene Documents for HTML documents. */
end_comment
begin_class
DECL|class|HTMLDocument
specifier|public
class|class
name|HTMLDocument
block|{
DECL|field|dirSep
specifier|static
name|char
name|dirSep
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|method|uid
specifier|public
specifier|static
name|String
name|uid
parameter_list|(
name|File
name|f
parameter_list|)
block|{
comment|// Append path and date into a string in such a way that lexicographic
comment|// sorting gives the same results as a walk of the file hierarchy.  Thus
comment|// null (\u0000) is used both to separate directory components and to
comment|// separate the path from the date.
return|return
name|f
operator|.
name|getPath
argument_list|()
operator|.
name|replace
argument_list|(
name|dirSep
argument_list|,
literal|'\u0000'
argument_list|)
operator|+
literal|"\u0000"
operator|+
name|DateField
operator|.
name|timeToString
argument_list|(
name|f
operator|.
name|lastModified
argument_list|()
argument_list|)
return|;
block|}
DECL|method|uid2url
specifier|public
specifier|static
name|String
name|uid2url
parameter_list|(
name|String
name|uid
parameter_list|)
block|{
name|String
name|url
init|=
name|uid
operator|.
name|replace
argument_list|(
literal|'\u0000'
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
comment|// replace nulls with slashes
return|return
name|url
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|url
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
argument_list|)
return|;
comment|// remove date from end
block|}
DECL|method|Document
specifier|public
specifier|static
name|Document
name|Document
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// make a new, empty document
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
comment|// Add the url as a field named "path".  Use a Keyword field, so
comment|// that it's searchable, but so that no attempt is made
comment|// to tokenize the field into words.
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Keyword
argument_list|(
literal|"path"
argument_list|,
name|f
operator|.
name|getPath
argument_list|()
operator|.
name|replace
argument_list|(
name|dirSep
argument_list|,
literal|'/'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add the last modified date of the file a field named "modified".  Use a
comment|// Keyword field, so that it's searchable, but so that no attempt is made
comment|// to tokenize the field into words.
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Keyword
argument_list|(
literal|"modified"
argument_list|,
name|DateField
operator|.
name|timeToString
argument_list|(
name|f
operator|.
name|lastModified
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add the uid as a field, so that index can be incrementally maintained.
comment|// This field is not stored with document, it is indexed, but it is not
comment|// tokenized prior to indexing.
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"uid"
argument_list|,
name|uid
argument_list|(
name|f
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|FileInputStream
name|fis
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fis
operator|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|HTMLParser
name|parser
init|=
operator|new
name|HTMLParser
argument_list|(
name|fis
argument_list|)
decl_stmt|;
comment|// Add the tag-stripped contents as a Reader-valued Text field so it will
comment|// get tokenized and indexed.
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
literal|"contents"
argument_list|,
name|parser
operator|.
name|getReader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add the summary as an UnIndexed field, so that it is stored and returned
comment|// with hit documents for display.
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|UnIndexed
argument_list|(
literal|"summary"
argument_list|,
name|parser
operator|.
name|getSummary
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add the title as a separate Text field, so that it can be searched
comment|// separately.
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
literal|"title"
argument_list|,
name|parser
operator|.
name|getTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fis
operator|!=
literal|null
condition|)
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// return the document
return|return
name|doc
return|;
block|}
DECL|method|HTMLDocument
specifier|private
name|HTMLDocument
parameter_list|()
block|{}
block|}
end_class
end_unit
