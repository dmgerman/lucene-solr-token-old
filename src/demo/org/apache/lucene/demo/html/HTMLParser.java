begin_unit
begin_comment
comment|/* Generated By:JavaCC: Do not edit this line. HTMLParser.java */
end_comment
begin_package
DECL|package|org.apache.lucene.demo.html
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|demo
operator|.
name|html
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import
begin_class
DECL|class|HTMLParser
specifier|public
class|class
name|HTMLParser
implements|implements
name|HTMLParserConstants
block|{
DECL|field|SUMMARY_LENGTH
specifier|public
specifier|static
name|int
name|SUMMARY_LENGTH
init|=
literal|200
decl_stmt|;
DECL|field|title
name|StringBuffer
name|title
init|=
operator|new
name|StringBuffer
argument_list|(
name|SUMMARY_LENGTH
argument_list|)
decl_stmt|;
DECL|field|summary
name|StringBuffer
name|summary
init|=
operator|new
name|StringBuffer
argument_list|(
name|SUMMARY_LENGTH
operator|*
literal|2
argument_list|)
decl_stmt|;
DECL|field|metaTags
name|Properties
name|metaTags
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
DECL|field|currentMetaTag
name|String
name|currentMetaTag
init|=
literal|null
decl_stmt|;
DECL|field|currentMetaContent
name|String
name|currentMetaContent
init|=
literal|null
decl_stmt|;
DECL|field|length
name|int
name|length
init|=
literal|0
decl_stmt|;
DECL|field|titleComplete
name|boolean
name|titleComplete
init|=
literal|false
decl_stmt|;
DECL|field|inTitle
name|boolean
name|inTitle
init|=
literal|false
decl_stmt|;
DECL|field|inMetaTag
name|boolean
name|inMetaTag
init|=
literal|false
decl_stmt|;
DECL|field|inStyle
name|boolean
name|inStyle
init|=
literal|false
decl_stmt|;
DECL|field|afterTag
name|boolean
name|afterTag
init|=
literal|false
decl_stmt|;
DECL|field|afterSpace
name|boolean
name|afterSpace
init|=
literal|false
decl_stmt|;
DECL|field|eol
name|String
name|eol
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
DECL|field|pipeIn
name|Reader
name|pipeIn
init|=
literal|null
decl_stmt|;
DECL|field|pipeOut
name|Writer
name|pipeOut
decl_stmt|;
DECL|field|pipeInStream
specifier|private
name|MyPipedInputStream
name|pipeInStream
init|=
literal|null
decl_stmt|;
DECL|field|pipeOutStream
specifier|private
name|PipedOutputStream
name|pipeOutStream
init|=
literal|null
decl_stmt|;
DECL|class|MyPipedInputStream
specifier|private
class|class
name|MyPipedInputStream
extends|extends
name|PipedInputStream
block|{
DECL|method|MyPipedInputStream
specifier|public
name|MyPipedInputStream
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|MyPipedInputStream
specifier|public
name|MyPipedInputStream
parameter_list|(
name|PipedOutputStream
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
DECL|method|full
specifier|public
name|boolean
name|full
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|available
argument_list|()
operator|>=
name|PipedInputStream
operator|.
name|PIPE_SIZE
return|;
block|}
block|}
comment|/**    * @deprecated Use HTMLParser(FileInputStream) instead    */
DECL|method|HTMLParser
specifier|public
name|HTMLParser
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|this
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getTitle
specifier|public
name|String
name|getTitle
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|pipeIn
operator|==
literal|null
condition|)
name|getReader
argument_list|()
expr_stmt|;
comment|// spawn parsing thread
while|while
condition|(
literal|true
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|titleComplete
operator|||
name|pipeInStream
operator|.
name|full
argument_list|()
condition|)
break|break;
name|wait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|title
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
return|;
block|}
DECL|method|getMetaTags
specifier|public
name|Properties
name|getMetaTags
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|pipeIn
operator|==
literal|null
condition|)
name|getReader
argument_list|()
expr_stmt|;
comment|// spawn parsing thread
while|while
condition|(
literal|true
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|titleComplete
operator|||
name|pipeInStream
operator|.
name|full
argument_list|()
condition|)
break|break;
name|wait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|metaTags
return|;
block|}
DECL|method|getSummary
specifier|public
name|String
name|getSummary
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|pipeIn
operator|==
literal|null
condition|)
name|getReader
argument_list|()
expr_stmt|;
comment|// spawn parsing thread
while|while
condition|(
literal|true
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|summary
operator|.
name|length
argument_list|()
operator|>=
name|SUMMARY_LENGTH
operator|||
name|pipeInStream
operator|.
name|full
argument_list|()
condition|)
break|break;
name|wait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|summary
operator|.
name|length
argument_list|()
operator|>
name|SUMMARY_LENGTH
condition|)
name|summary
operator|.
name|setLength
argument_list|(
name|SUMMARY_LENGTH
argument_list|)
expr_stmt|;
name|String
name|sum
init|=
name|summary
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|tit
init|=
name|getTitle
argument_list|()
decl_stmt|;
if|if
condition|(
name|sum
operator|.
name|startsWith
argument_list|(
name|tit
argument_list|)
operator|||
name|sum
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
return|return
name|tit
return|;
else|else
return|return
name|sum
return|;
block|}
DECL|method|getReader
specifier|public
name|Reader
name|getReader
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|pipeIn
operator|==
literal|null
condition|)
block|{
name|pipeInStream
operator|=
operator|new
name|MyPipedInputStream
argument_list|()
expr_stmt|;
name|pipeOutStream
operator|=
operator|new
name|PipedOutputStream
argument_list|(
name|pipeInStream
argument_list|)
expr_stmt|;
name|pipeIn
operator|=
operator|new
name|InputStreamReader
argument_list|(
name|pipeInStream
argument_list|,
literal|"UTF-16BE"
argument_list|)
expr_stmt|;
name|pipeOut
operator|=
operator|new
name|OutputStreamWriter
argument_list|(
name|pipeOutStream
argument_list|,
literal|"UTF-16BE"
argument_list|)
expr_stmt|;
name|Thread
name|thread
init|=
operator|new
name|ParserThread
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// start parsing
block|}
return|return
name|pipeIn
return|;
block|}
DECL|method|addToSummary
name|void
name|addToSummary
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|summary
operator|.
name|length
argument_list|()
operator|<
name|SUMMARY_LENGTH
condition|)
block|{
name|summary
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|summary
operator|.
name|length
argument_list|()
operator|>=
name|SUMMARY_LENGTH
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|addText
name|void
name|addText
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|inStyle
condition|)
return|return;
if|if
condition|(
name|inTitle
condition|)
name|title
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
else|else
block|{
name|addToSummary
argument_list|(
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|titleComplete
operator|&&
operator|!
name|title
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
comment|// finished title
synchronized|synchronized
init|(
name|this
init|)
block|{
name|titleComplete
operator|=
literal|true
expr_stmt|;
comment|// tell waiting threads
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|length
operator|+=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|pipeOut
operator|.
name|write
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|afterSpace
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|addMetaTag
name|void
name|addMetaTag
parameter_list|()
block|{
name|metaTags
operator|.
name|setProperty
argument_list|(
name|currentMetaTag
argument_list|,
name|currentMetaContent
argument_list|)
expr_stmt|;
name|currentMetaTag
operator|=
literal|null
expr_stmt|;
name|currentMetaContent
operator|=
literal|null
expr_stmt|;
return|return;
block|}
DECL|method|addSpace
name|void
name|addSpace
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|afterSpace
condition|)
block|{
if|if
condition|(
name|inTitle
condition|)
name|title
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
else|else
name|addToSummary
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|String
name|space
init|=
name|afterTag
condition|?
name|eol
else|:
literal|" "
decl_stmt|;
name|length
operator|+=
name|space
operator|.
name|length
argument_list|()
expr_stmt|;
name|pipeOut
operator|.
name|write
argument_list|(
name|space
argument_list|)
expr_stmt|;
name|afterSpace
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|HTMLDocument
specifier|final
specifier|public
name|void
name|HTMLDocument
parameter_list|()
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|Token
name|t
decl_stmt|;
name|label_1
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ScriptStart
case|:
case|case
name|TagName
case|:
case|case
name|DeclName
case|:
case|case
name|Comment1
case|:
case|case
name|Comment2
case|:
case|case
name|Word
case|:
case|case
name|Entity
case|:
case|case
name|Space
case|:
case|case
name|Punct
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|0
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_1
break|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|TagName
case|:
name|Tag
argument_list|()
expr_stmt|;
name|afterTag
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|DeclName
case|:
name|t
operator|=
name|Decl
argument_list|()
expr_stmt|;
name|afterTag
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Comment1
case|:
case|case
name|Comment2
case|:
name|CommentTag
argument_list|()
expr_stmt|;
name|afterTag
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|ScriptStart
case|:
name|ScriptTag
argument_list|()
expr_stmt|;
name|afterTag
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Word
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|Word
argument_list|)
expr_stmt|;
name|addText
argument_list|(
name|t
operator|.
name|image
argument_list|)
expr_stmt|;
name|afterTag
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|Entity
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|Entity
argument_list|)
expr_stmt|;
name|addText
argument_list|(
name|Entities
operator|.
name|decode
argument_list|(
name|t
operator|.
name|image
argument_list|)
argument_list|)
expr_stmt|;
name|afterTag
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|Punct
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|Punct
argument_list|)
expr_stmt|;
name|addText
argument_list|(
name|t
operator|.
name|image
argument_list|)
expr_stmt|;
name|afterTag
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|Space
case|:
name|jj_consume_token
argument_list|(
name|Space
argument_list|)
expr_stmt|;
name|addSpace
argument_list|()
expr_stmt|;
name|afterTag
operator|=
literal|false
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|1
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
name|jj_consume_token
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|Tag
specifier|final
specifier|public
name|void
name|Tag
parameter_list|()
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|Token
name|t1
decl_stmt|,
name|t2
decl_stmt|;
name|boolean
name|inImg
init|=
literal|false
decl_stmt|;
name|t1
operator|=
name|jj_consume_token
argument_list|(
name|TagName
argument_list|)
expr_stmt|;
name|String
name|tagName
init|=
name|t1
operator|.
name|image
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|Tags
operator|.
name|WS_ELEMS
operator|.
name|contains
argument_list|(
name|tagName
argument_list|)
condition|)
block|{
name|addSpace
argument_list|()
expr_stmt|;
block|}
name|inTitle
operator|=
name|tagName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"<title"
argument_list|)
expr_stmt|;
comment|// keep track if in<TITLE>
name|inMetaTag
operator|=
name|tagName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"<META"
argument_list|)
expr_stmt|;
comment|// keep track if in<META>
name|inStyle
operator|=
name|tagName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"<STYLE"
argument_list|)
expr_stmt|;
comment|// keep track if in<STYLE>
name|inImg
operator|=
name|tagName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"<img"
argument_list|)
expr_stmt|;
comment|// keep track if in<IMG>
name|label_2
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ArgName
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|2
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_2
break|;
block|}
name|t1
operator|=
name|jj_consume_token
argument_list|(
name|ArgName
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ArgEquals
case|:
name|jj_consume_token
argument_list|(
name|ArgEquals
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ArgValue
case|:
case|case
name|ArgQuote1
case|:
case|case
name|ArgQuote2
case|:
name|t2
operator|=
name|ArgValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|inImg
operator|&&
name|t1
operator|.
name|image
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"alt"
argument_list|)
operator|&&
name|t2
operator|!=
literal|null
condition|)
name|addText
argument_list|(
literal|"["
operator|+
name|t2
operator|.
name|image
operator|+
literal|"]"
argument_list|)
expr_stmt|;
if|if
condition|(
name|inMetaTag
operator|&&
operator|(
name|t1
operator|.
name|image
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"name"
argument_list|)
operator|||
name|t1
operator|.
name|image
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"HTTP-EQUIV"
argument_list|)
operator|)
operator|&&
name|t2
operator|!=
literal|null
condition|)
block|{
name|currentMetaTag
operator|=
name|t2
operator|.
name|image
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentMetaTag
operator|!=
literal|null
operator|&&
name|currentMetaContent
operator|!=
literal|null
condition|)
block|{
name|addMetaTag
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|inMetaTag
operator|&&
name|t1
operator|.
name|image
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"content"
argument_list|)
operator|&&
name|t2
operator|!=
literal|null
condition|)
block|{
name|currentMetaContent
operator|=
name|t2
operator|.
name|image
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentMetaTag
operator|!=
literal|null
operator|&&
name|currentMetaContent
operator|!=
literal|null
condition|)
block|{
name|addMetaTag
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|3
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|4
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
block|}
name|jj_consume_token
argument_list|(
name|TagEnd
argument_list|)
expr_stmt|;
block|}
DECL|method|ArgValue
specifier|final
specifier|public
name|Token
name|ArgValue
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|t
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ArgValue
case|:
name|t
operator|=
name|jj_consume_token
argument_list|(
name|ArgValue
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|t
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|5
index|]
operator|=
name|jj_gen
expr_stmt|;
if|if
condition|(
name|jj_2_1
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|jj_consume_token
argument_list|(
name|ArgQuote1
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|CloseQuote1
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|t
return|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ArgQuote1
case|:
name|jj_consume_token
argument_list|(
name|ArgQuote1
argument_list|)
expr_stmt|;
name|t
operator|=
name|jj_consume_token
argument_list|(
name|Quote1Text
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|CloseQuote1
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|t
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|6
index|]
operator|=
name|jj_gen
expr_stmt|;
if|if
condition|(
name|jj_2_2
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|jj_consume_token
argument_list|(
name|ArgQuote2
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|CloseQuote2
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|t
return|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ArgQuote2
case|:
name|jj_consume_token
argument_list|(
name|ArgQuote2
argument_list|)
expr_stmt|;
name|t
operator|=
name|jj_consume_token
argument_list|(
name|Quote2Text
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|CloseQuote2
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|t
return|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|7
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
block|}
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|Decl
specifier|final
specifier|public
name|Token
name|Decl
parameter_list|()
throws|throws
name|ParseException
block|{
name|Token
name|t
decl_stmt|;
name|t
operator|=
name|jj_consume_token
argument_list|(
name|DeclName
argument_list|)
expr_stmt|;
name|label_3
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ArgName
case|:
case|case
name|ArgEquals
case|:
case|case
name|ArgValue
case|:
case|case
name|ArgQuote1
case|:
case|case
name|ArgQuote2
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|8
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_3
break|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ArgName
case|:
name|jj_consume_token
argument_list|(
name|ArgName
argument_list|)
expr_stmt|;
break|break;
case|case
name|ArgValue
case|:
case|case
name|ArgQuote1
case|:
case|case
name|ArgQuote2
case|:
name|ArgValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|ArgEquals
case|:
name|jj_consume_token
argument_list|(
name|ArgEquals
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|9
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
name|jj_consume_token
argument_list|(
name|TagEnd
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|t
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|CommentTag
specifier|final
specifier|public
name|void
name|CommentTag
parameter_list|()
throws|throws
name|ParseException
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|Comment1
case|:
name|jj_consume_token
argument_list|(
name|Comment1
argument_list|)
expr_stmt|;
name|label_4
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|CommentText1
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|10
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_4
break|;
block|}
name|jj_consume_token
argument_list|(
name|CommentText1
argument_list|)
expr_stmt|;
block|}
name|jj_consume_token
argument_list|(
name|CommentEnd1
argument_list|)
expr_stmt|;
break|break;
case|case
name|Comment2
case|:
name|jj_consume_token
argument_list|(
name|Comment2
argument_list|)
expr_stmt|;
name|label_5
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|CommentText2
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|11
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_5
break|;
block|}
name|jj_consume_token
argument_list|(
name|CommentText2
argument_list|)
expr_stmt|;
block|}
name|jj_consume_token
argument_list|(
name|CommentEnd2
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|12
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
DECL|method|ScriptTag
specifier|final
specifier|public
name|void
name|ScriptTag
parameter_list|()
throws|throws
name|ParseException
block|{
name|jj_consume_token
argument_list|(
name|ScriptStart
argument_list|)
expr_stmt|;
name|label_6
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|ScriptText
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|13
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_6
break|;
block|}
name|jj_consume_token
argument_list|(
name|ScriptText
argument_list|)
expr_stmt|;
block|}
name|jj_consume_token
argument_list|(
name|ScriptEnd
argument_list|)
expr_stmt|;
block|}
DECL|method|jj_2_1
specifier|final
specifier|private
name|boolean
name|jj_2_1
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_1
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|0
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|jj_2_2
specifier|final
specifier|private
name|boolean
name|jj_2_2
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_2
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|1
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|jj_3_1
specifier|final
specifier|private
name|boolean
name|jj_3_1
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|ArgQuote1
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|CloseQuote1
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
DECL|method|jj_3_2
specifier|final
specifier|private
name|boolean
name|jj_3_2
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|ArgQuote2
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|CloseQuote2
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
DECL|field|token_source
specifier|public
name|HTMLParserTokenManager
name|token_source
decl_stmt|;
DECL|field|jj_input_stream
name|SimpleCharStream
name|jj_input_stream
decl_stmt|;
DECL|field|token
DECL|field|jj_nt
specifier|public
name|Token
name|token
decl_stmt|,
name|jj_nt
decl_stmt|;
DECL|field|jj_ntk
specifier|private
name|int
name|jj_ntk
decl_stmt|;
DECL|field|jj_scanpos
DECL|field|jj_lastpos
specifier|private
name|Token
name|jj_scanpos
decl_stmt|,
name|jj_lastpos
decl_stmt|;
DECL|field|jj_la
specifier|private
name|int
name|jj_la
decl_stmt|;
DECL|field|lookingAhead
specifier|public
name|boolean
name|lookingAhead
init|=
literal|false
decl_stmt|;
DECL|field|jj_semLA
specifier|private
name|boolean
name|jj_semLA
decl_stmt|;
DECL|field|jj_gen
specifier|private
name|int
name|jj_gen
decl_stmt|;
DECL|field|jj_la1
specifier|final
specifier|private
name|int
index|[]
name|jj_la1
init|=
operator|new
name|int
index|[
literal|14
index|]
decl_stmt|;
DECL|field|jj_la1_0
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_0
decl_stmt|;
static|static
block|{
name|jj_la1_0
argument_list|()
expr_stmt|;
block|}
DECL|method|jj_la1_0
specifier|private
specifier|static
name|void
name|jj_la1_0
parameter_list|()
block|{
name|jj_la1_0
operator|=
operator|new
name|int
index|[]
block|{
literal|0x2c7e
block|,
literal|0x2c7e
block|,
literal|0x10000
block|,
literal|0x380000
block|,
literal|0x20000
block|,
literal|0x80000
block|,
literal|0x100000
block|,
literal|0x200000
block|,
literal|0x3b0000
block|,
literal|0x3b0000
block|,
literal|0x8000000
block|,
literal|0x20000000
block|,
literal|0x30
block|,
literal|0x4000
block|,}
expr_stmt|;
block|}
DECL|field|jj_2_rtns
specifier|final
specifier|private
name|JJCalls
index|[]
name|jj_2_rtns
init|=
operator|new
name|JJCalls
index|[
literal|2
index|]
decl_stmt|;
DECL|field|jj_rescan
specifier|private
name|boolean
name|jj_rescan
init|=
literal|false
decl_stmt|;
DECL|field|jj_gc
specifier|private
name|int
name|jj_gc
init|=
literal|0
decl_stmt|;
DECL|method|HTMLParser
specifier|public
name|HTMLParser
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|)
block|{
name|jj_input_stream
operator|=
operator|new
name|SimpleCharStream
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token_source
operator|=
operator|new
name|HTMLParserTokenManager
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|14
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
DECL|method|ReInit
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|)
block|{
name|jj_input_stream
operator|.
name|ReInit
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token_source
operator|.
name|ReInit
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|14
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
DECL|method|HTMLParser
specifier|public
name|HTMLParser
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|stream
parameter_list|)
block|{
name|jj_input_stream
operator|=
operator|new
name|SimpleCharStream
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token_source
operator|=
operator|new
name|HTMLParserTokenManager
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|14
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
DECL|method|ReInit
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|stream
parameter_list|)
block|{
name|jj_input_stream
operator|.
name|ReInit
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token_source
operator|.
name|ReInit
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|14
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
DECL|method|HTMLParser
specifier|public
name|HTMLParser
parameter_list|(
name|HTMLParserTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|14
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
DECL|method|ReInit
specifier|public
name|void
name|ReInit
parameter_list|(
name|HTMLParserTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|14
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
DECL|method|jj_consume_token
specifier|final
specifier|private
name|Token
name|jj_consume_token
parameter_list|(
name|int
name|kind
parameter_list|)
throws|throws
name|ParseException
block|{
name|Token
name|oldToken
decl_stmt|;
if|if
condition|(
operator|(
name|oldToken
operator|=
name|token
operator|)
operator|.
name|next
operator|!=
literal|null
condition|)
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
else|else
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|kind
operator|==
name|kind
condition|)
block|{
name|jj_gen
operator|++
expr_stmt|;
if|if
condition|(
operator|++
name|jj_gc
operator|>
literal|100
condition|)
block|{
name|jj_gc
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|JJCalls
name|c
init|=
name|jj_2_rtns
index|[
name|i
index|]
decl_stmt|;
while|while
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|gen
operator|<
name|jj_gen
condition|)
name|c
operator|.
name|first
operator|=
literal|null
expr_stmt|;
name|c
operator|=
name|c
operator|.
name|next
expr_stmt|;
block|}
block|}
block|}
return|return
name|token
return|;
block|}
name|token
operator|=
name|oldToken
expr_stmt|;
name|jj_kind
operator|=
name|kind
expr_stmt|;
throw|throw
name|generateParseException
argument_list|()
throw|;
block|}
DECL|class|LookaheadSuccess
specifier|static
specifier|private
specifier|final
class|class
name|LookaheadSuccess
extends|extends
name|java
operator|.
name|lang
operator|.
name|Error
block|{ }
DECL|field|jj_ls
specifier|final
specifier|private
name|LookaheadSuccess
name|jj_ls
init|=
operator|new
name|LookaheadSuccess
argument_list|()
decl_stmt|;
DECL|method|jj_scan_token
specifier|final
specifier|private
name|boolean
name|jj_scan_token
parameter_list|(
name|int
name|kind
parameter_list|)
block|{
if|if
condition|(
name|jj_scanpos
operator|==
name|jj_lastpos
condition|)
block|{
name|jj_la
operator|--
expr_stmt|;
if|if
condition|(
name|jj_scanpos
operator|.
name|next
operator|==
literal|null
condition|)
block|{
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|jj_scanpos
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|jj_scanpos
operator|.
name|next
expr_stmt|;
block|}
block|}
else|else
block|{
name|jj_scanpos
operator|=
name|jj_scanpos
operator|.
name|next
expr_stmt|;
block|}
if|if
condition|(
name|jj_rescan
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|Token
name|tok
init|=
name|token
decl_stmt|;
while|while
condition|(
name|tok
operator|!=
literal|null
operator|&&
name|tok
operator|!=
name|jj_scanpos
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|tok
operator|=
name|tok
operator|.
name|next
expr_stmt|;
block|}
if|if
condition|(
name|tok
operator|!=
literal|null
condition|)
name|jj_add_error_token
argument_list|(
name|kind
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jj_scanpos
operator|.
name|kind
operator|!=
name|kind
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_la
operator|==
literal|0
operator|&&
name|jj_scanpos
operator|==
name|jj_lastpos
condition|)
throw|throw
name|jj_ls
throw|;
return|return
literal|false
return|;
block|}
DECL|method|getNextToken
specifier|final
specifier|public
name|Token
name|getNextToken
parameter_list|()
block|{
if|if
condition|(
name|token
operator|.
name|next
operator|!=
literal|null
condition|)
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
else|else
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|++
expr_stmt|;
return|return
name|token
return|;
block|}
DECL|method|getToken
specifier|final
specifier|public
name|Token
name|getToken
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Token
name|t
init|=
name|lookingAhead
condition|?
name|jj_scanpos
else|:
name|token
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|t
operator|.
name|next
operator|!=
literal|null
condition|)
name|t
operator|=
name|t
operator|.
name|next
expr_stmt|;
else|else
name|t
operator|=
name|t
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
DECL|method|jj_ntk
specifier|final
specifier|private
name|int
name|jj_ntk
parameter_list|()
block|{
if|if
condition|(
operator|(
name|jj_nt
operator|=
name|token
operator|.
name|next
operator|)
operator|==
literal|null
condition|)
return|return
operator|(
name|jj_ntk
operator|=
operator|(
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
operator|)
operator|.
name|kind
operator|)
return|;
else|else
return|return
operator|(
name|jj_ntk
operator|=
name|jj_nt
operator|.
name|kind
operator|)
return|;
block|}
DECL|field|jj_expentries
specifier|private
name|java
operator|.
name|util
operator|.
name|Vector
name|jj_expentries
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|Vector
argument_list|()
decl_stmt|;
DECL|field|jj_expentry
specifier|private
name|int
index|[]
name|jj_expentry
decl_stmt|;
DECL|field|jj_kind
specifier|private
name|int
name|jj_kind
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|jj_lasttokens
specifier|private
name|int
index|[]
name|jj_lasttokens
init|=
operator|new
name|int
index|[
literal|100
index|]
decl_stmt|;
DECL|field|jj_endpos
specifier|private
name|int
name|jj_endpos
decl_stmt|;
DECL|method|jj_add_error_token
specifier|private
name|void
name|jj_add_error_token
parameter_list|(
name|int
name|kind
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
if|if
condition|(
name|pos
operator|>=
literal|100
condition|)
return|return;
if|if
condition|(
name|pos
operator|==
name|jj_endpos
operator|+
literal|1
condition|)
block|{
name|jj_lasttokens
index|[
name|jj_endpos
operator|++
index|]
operator|=
name|kind
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|jj_endpos
operator|!=
literal|0
condition|)
block|{
name|jj_expentry
operator|=
operator|new
name|int
index|[
name|jj_endpos
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_endpos
condition|;
name|i
operator|++
control|)
block|{
name|jj_expentry
index|[
name|i
index|]
operator|=
name|jj_lasttokens
index|[
name|i
index|]
expr_stmt|;
block|}
name|boolean
name|exists
init|=
literal|false
decl_stmt|;
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Enumeration
name|e
init|=
name|jj_expentries
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|int
index|[]
name|oldentry
init|=
operator|(
name|int
index|[]
operator|)
operator|(
name|e
operator|.
name|nextElement
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|oldentry
operator|.
name|length
operator|==
name|jj_expentry
operator|.
name|length
condition|)
block|{
name|exists
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_expentry
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|oldentry
index|[
name|i
index|]
operator|!=
name|jj_expentry
index|[
name|i
index|]
condition|)
block|{
name|exists
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|exists
condition|)
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|exists
condition|)
name|jj_expentries
operator|.
name|addElement
argument_list|(
name|jj_expentry
argument_list|)
expr_stmt|;
if|if
condition|(
name|pos
operator|!=
literal|0
condition|)
name|jj_lasttokens
index|[
operator|(
name|jj_endpos
operator|=
name|pos
operator|)
operator|-
literal|1
index|]
operator|=
name|kind
expr_stmt|;
block|}
block|}
DECL|method|generateParseException
specifier|public
name|ParseException
name|generateParseException
parameter_list|()
block|{
name|jj_expentries
operator|.
name|removeAllElements
argument_list|()
expr_stmt|;
name|boolean
index|[]
name|la1tokens
init|=
operator|new
name|boolean
index|[
literal|31
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|31
condition|;
name|i
operator|++
control|)
block|{
name|la1tokens
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|jj_kind
operator|>=
literal|0
condition|)
block|{
name|la1tokens
index|[
name|jj_kind
index|]
operator|=
literal|true
expr_stmt|;
name|jj_kind
operator|=
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|14
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|jj_la1
index|[
name|i
index|]
operator|==
name|jj_gen
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|32
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|jj_la1_0
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|31
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|la1tokens
index|[
name|i
index|]
condition|)
block|{
name|jj_expentry
operator|=
operator|new
name|int
index|[
literal|1
index|]
expr_stmt|;
name|jj_expentry
index|[
literal|0
index|]
operator|=
name|i
expr_stmt|;
name|jj_expentries
operator|.
name|addElement
argument_list|(
name|jj_expentry
argument_list|)
expr_stmt|;
block|}
block|}
name|jj_endpos
operator|=
literal|0
expr_stmt|;
name|jj_rescan_token
argument_list|()
expr_stmt|;
name|jj_add_error_token
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|exptokseq
init|=
operator|new
name|int
index|[
name|jj_expentries
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_expentries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|exptokseq
index|[
name|i
index|]
operator|=
operator|(
name|int
index|[]
operator|)
name|jj_expentries
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ParseException
argument_list|(
name|token
argument_list|,
name|exptokseq
argument_list|,
name|tokenImage
argument_list|)
return|;
block|}
DECL|method|enable_tracing
specifier|final
specifier|public
name|void
name|enable_tracing
parameter_list|()
block|{   }
DECL|method|disable_tracing
specifier|final
specifier|public
name|void
name|disable_tracing
parameter_list|()
block|{   }
DECL|method|jj_rescan_token
specifier|final
specifier|private
name|void
name|jj_rescan_token
parameter_list|()
block|{
name|jj_rescan
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|JJCalls
name|p
init|=
name|jj_2_rtns
index|[
name|i
index|]
decl_stmt|;
do|do
block|{
if|if
condition|(
name|p
operator|.
name|gen
operator|>
name|jj_gen
condition|)
block|{
name|jj_la
operator|=
name|p
operator|.
name|arg
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|p
operator|.
name|first
expr_stmt|;
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
name|jj_3_1
argument_list|()
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|jj_3_2
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|p
operator|=
name|p
operator|.
name|next
expr_stmt|;
block|}
do|while
condition|(
name|p
operator|!=
literal|null
condition|)
do|;
block|}
name|jj_rescan
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|jj_save
specifier|final
specifier|private
name|void
name|jj_save
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|xla
parameter_list|)
block|{
name|JJCalls
name|p
init|=
name|jj_2_rtns
index|[
name|index
index|]
decl_stmt|;
while|while
condition|(
name|p
operator|.
name|gen
operator|>
name|jj_gen
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|next
operator|==
literal|null
condition|)
block|{
name|p
operator|=
name|p
operator|.
name|next
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
break|break;
block|}
name|p
operator|=
name|p
operator|.
name|next
expr_stmt|;
block|}
name|p
operator|.
name|gen
operator|=
name|jj_gen
operator|+
name|xla
operator|-
name|jj_la
expr_stmt|;
name|p
operator|.
name|first
operator|=
name|token
expr_stmt|;
name|p
operator|.
name|arg
operator|=
name|xla
expr_stmt|;
block|}
DECL|class|JJCalls
specifier|static
specifier|final
class|class
name|JJCalls
block|{
DECL|field|gen
name|int
name|gen
decl_stmt|;
DECL|field|first
name|Token
name|first
decl_stmt|;
DECL|field|arg
name|int
name|arg
decl_stmt|;
DECL|field|next
name|JJCalls
name|next
decl_stmt|;
block|}
comment|//    void handleException(Exception e) {
comment|//      System.out.println(e.toString());  // print the error message
comment|//      System.out.println("Skipping...");
comment|//      Token t;
comment|//      do {
comment|//        t = getNextToken();
comment|//      } while (t.kind != TagEnd);
comment|//    }
block|}
end_class
end_unit
