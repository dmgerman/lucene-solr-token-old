begin_unit
begin_package
DECL|package|org.apache.lucene.demo.html
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|demo
operator|.
name|html
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import
begin_class
DECL|class|Test
class|class
name|Test
block|{
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
literal|"-dir"
operator|.
name|equals
argument_list|(
name|argv
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|String
index|[]
name|files
init|=
operator|new
name|File
argument_list|(
name|argv
index|[
literal|1
index|]
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|sort
argument_list|(
name|files
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|files
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|argv
index|[
literal|1
index|]
argument_list|,
name|files
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|parse
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|parse
argument_list|(
operator|new
name|File
argument_list|(
name|argv
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|parse
specifier|public
specifier|static
name|void
name|parse
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|Exception
block|{
name|HTMLParser
name|parser
init|=
operator|new
name|HTMLParser
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Title: "
operator|+
name|Entities
operator|.
name|encode
argument_list|(
name|parser
operator|.
name|getTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Summary: "
operator|+
name|Entities
operator|.
name|encode
argument_list|(
name|parser
operator|.
name|getSummary
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LineNumberReader
name|reader
init|=
operator|new
name|LineNumberReader
argument_list|(
name|parser
operator|.
name|getReader
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|l
init|=
name|reader
operator|.
name|readLine
argument_list|()
init|;
name|l
operator|!=
literal|null
condition|;
name|l
operator|=
name|reader
operator|.
name|readLine
argument_list|()
control|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
