#!/bin/bash
#
# $Id$
# $Source: /cvs/main/searching/solr-tools/backup.template,v $
# $Name: r20050725_standardized_server_enabled $
#
# Shell script to make a backup of a Solr Lucene collection.

export PATH=/sbin:/usr/sbin:/bin:/usr/bin:$PATH

# sudo to app user if necessary
if [[ $(whoami) != app ]]
then
    sudo -u app $0 "$@"
    exit $?
fi

oldwhoami=$(who -m | cut -d' ' -f1 | sed -e's/^.*!//')

if [[ "${oldwhoami}" == "" ]]
then
  oldwhoami=`ps h -Hfp $(pgrep -g0 ${0##*/}) | tail -1|cut -f1 -d" "`
fi

# set up variables
prog=${0##*/}
log=logs/${prog}.log

# define usage string
USAGE="\
usage: $prog [ -v ]
       -v          increase verbosity
"

unset verbose

# parse args
originalargs="$@"
while getopts v OPTION
do
    case $OPTION in
    v)
        verbose="v"
        ;;
    *)
        echo "$USAGE"
        exit 1
    esac
done
shift $(( OPTIND - 1 ))

start=`date +"%s"`

function timeStamp
{
    date +'%Y%m%d-%H%M%S'
}

function logMessage
{
    echo $(timeStamp) $@>>$log
    if [[ -n ${verbose} ]]
    then
	echo $@
    fi
}

function logExit
{
    end=`date +"%s"`
    diff=`expr $end - $start`
    echo "$(timeStamp) $1 (elapsed time: $diff sec)">>$log
    exit $2
}

cd ${0%/*}/../..
logMessage started by $oldwhoami
logMessage command: $0 $originalargs
name=backup.`date +"%Y%m%d%H%M%S"`
temp=temp-${name}

if [[ -d ${name} ]]
then
    logMessage backup directory ${name} already exists
    logExit aborted 1
fi

if [[ -d ${temp} ]]
then
    logMessage backingup of ${name} in progress
    logExit aborted 1
fi

# clean up after INT/TERM
trap 'echo cleaning up, please wait ...;/bin/rm -rf ${name} ${temp};logExit aborted 13' INT TERM

logMessage making backup ${name}

# make a backup using hard links into temporary location
# then move it into place atomically
cp -lr index ${temp}
mv ${temp} ${name}

logExit ended 0

