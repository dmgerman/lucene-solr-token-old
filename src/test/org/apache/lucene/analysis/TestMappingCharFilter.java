begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_class
DECL|class|TestMappingCharFilter
specifier|public
class|class
name|TestMappingCharFilter
extends|extends
name|BaseTokenTestCase
block|{
DECL|field|normMap
name|NormalizeCharMap
name|normMap
decl_stmt|;
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|normMap
operator|=
operator|new
name|NormalizeCharMap
argument_list|()
expr_stmt|;
name|normMap
operator|.
name|add
argument_list|(
literal|"aa"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|normMap
operator|.
name|add
argument_list|(
literal|"bbb"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|normMap
operator|.
name|add
argument_list|(
literal|"cccc"
argument_list|,
literal|"cc"
argument_list|)
expr_stmt|;
name|normMap
operator|.
name|add
argument_list|(
literal|"h"
argument_list|,
literal|"i"
argument_list|)
expr_stmt|;
name|normMap
operator|.
name|add
argument_list|(
literal|"j"
argument_list|,
literal|"jj"
argument_list|)
expr_stmt|;
name|normMap
operator|.
name|add
argument_list|(
literal|"k"
argument_list|,
literal|"kkk"
argument_list|)
expr_stmt|;
name|normMap
operator|.
name|add
argument_list|(
literal|"ll"
argument_list|,
literal|"llll"
argument_list|)
expr_stmt|;
name|normMap
operator|.
name|add
argument_list|(
literal|"empty"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|testNothingChange
specifier|public
name|void
name|testNothingChange
parameter_list|()
throws|throws
name|Exception
block|{
name|CharStream
name|cs
init|=
operator|new
name|MappingCharFilter
argument_list|(
name|normMap
argument_list|,
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|WhitespaceTokenizer
argument_list|(
name|cs
argument_list|)
decl_stmt|;
name|List
name|real
init|=
name|getTokens
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|List
name|expect
init|=
name|tokens
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|assertTokEqualOff
argument_list|(
name|expect
argument_list|,
name|real
argument_list|)
expr_stmt|;
block|}
DECL|method|test1to1
specifier|public
name|void
name|test1to1
parameter_list|()
throws|throws
name|Exception
block|{
name|CharStream
name|cs
init|=
operator|new
name|MappingCharFilter
argument_list|(
name|normMap
argument_list|,
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"h"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|WhitespaceTokenizer
argument_list|(
name|cs
argument_list|)
decl_stmt|;
name|List
name|real
init|=
name|getTokens
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|List
name|expect
init|=
name|tokens
argument_list|(
literal|"i"
argument_list|)
decl_stmt|;
name|assertTokEqualOff
argument_list|(
name|expect
argument_list|,
name|real
argument_list|)
expr_stmt|;
block|}
DECL|method|test1to2
specifier|public
name|void
name|test1to2
parameter_list|()
throws|throws
name|Exception
block|{
name|CharStream
name|cs
init|=
operator|new
name|MappingCharFilter
argument_list|(
name|normMap
argument_list|,
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"j"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|WhitespaceTokenizer
argument_list|(
name|cs
argument_list|)
decl_stmt|;
name|List
name|real
init|=
name|getTokens
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|List
name|expect
init|=
name|tokens
argument_list|(
literal|"jj,1,0,1"
argument_list|)
decl_stmt|;
name|assertTokEqualOff
argument_list|(
name|expect
argument_list|,
name|real
argument_list|)
expr_stmt|;
block|}
DECL|method|test1to3
specifier|public
name|void
name|test1to3
parameter_list|()
throws|throws
name|Exception
block|{
name|CharStream
name|cs
init|=
operator|new
name|MappingCharFilter
argument_list|(
name|normMap
argument_list|,
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"k"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|WhitespaceTokenizer
argument_list|(
name|cs
argument_list|)
decl_stmt|;
name|List
name|real
init|=
name|getTokens
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|List
name|expect
init|=
name|tokens
argument_list|(
literal|"kkk,1,0,1"
argument_list|)
decl_stmt|;
name|assertTokEqualOff
argument_list|(
name|expect
argument_list|,
name|real
argument_list|)
expr_stmt|;
block|}
DECL|method|test2to4
specifier|public
name|void
name|test2to4
parameter_list|()
throws|throws
name|Exception
block|{
name|CharStream
name|cs
init|=
operator|new
name|MappingCharFilter
argument_list|(
name|normMap
argument_list|,
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"ll"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|WhitespaceTokenizer
argument_list|(
name|cs
argument_list|)
decl_stmt|;
name|List
name|real
init|=
name|getTokens
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|List
name|expect
init|=
name|tokens
argument_list|(
literal|"llll,1,0,2"
argument_list|)
decl_stmt|;
name|assertTokEqualOff
argument_list|(
name|expect
argument_list|,
name|real
argument_list|)
expr_stmt|;
block|}
DECL|method|test2to1
specifier|public
name|void
name|test2to1
parameter_list|()
throws|throws
name|Exception
block|{
name|CharStream
name|cs
init|=
operator|new
name|MappingCharFilter
argument_list|(
name|normMap
argument_list|,
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"aa"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|WhitespaceTokenizer
argument_list|(
name|cs
argument_list|)
decl_stmt|;
name|List
name|real
init|=
name|getTokens
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|List
name|expect
init|=
name|tokens
argument_list|(
literal|"a,1,0,2"
argument_list|)
decl_stmt|;
name|assertTokEqualOff
argument_list|(
name|expect
argument_list|,
name|real
argument_list|)
expr_stmt|;
block|}
DECL|method|test3to1
specifier|public
name|void
name|test3to1
parameter_list|()
throws|throws
name|Exception
block|{
name|CharStream
name|cs
init|=
operator|new
name|MappingCharFilter
argument_list|(
name|normMap
argument_list|,
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"bbb"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|WhitespaceTokenizer
argument_list|(
name|cs
argument_list|)
decl_stmt|;
name|List
name|real
init|=
name|getTokens
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|List
name|expect
init|=
name|tokens
argument_list|(
literal|"b,1,0,3"
argument_list|)
decl_stmt|;
name|assertTokEqualOff
argument_list|(
name|expect
argument_list|,
name|real
argument_list|)
expr_stmt|;
block|}
DECL|method|test4to2
specifier|public
name|void
name|test4to2
parameter_list|()
throws|throws
name|Exception
block|{
name|CharStream
name|cs
init|=
operator|new
name|MappingCharFilter
argument_list|(
name|normMap
argument_list|,
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"cccc"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|WhitespaceTokenizer
argument_list|(
name|cs
argument_list|)
decl_stmt|;
name|List
name|real
init|=
name|getTokens
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|List
name|expect
init|=
name|tokens
argument_list|(
literal|"cc,1,0,4"
argument_list|)
decl_stmt|;
name|assertTokEqualOff
argument_list|(
name|expect
argument_list|,
name|real
argument_list|)
expr_stmt|;
block|}
DECL|method|test5to0
specifier|public
name|void
name|test5to0
parameter_list|()
throws|throws
name|Exception
block|{
name|CharStream
name|cs
init|=
operator|new
name|MappingCharFilter
argument_list|(
name|normMap
argument_list|,
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"empty"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|WhitespaceTokenizer
argument_list|(
name|cs
argument_list|)
decl_stmt|;
name|List
name|real
init|=
name|getTokens
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|real
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//
comment|//                1111111111222
comment|//      01234567890123456789012
comment|//(in)  h i j k ll cccc bbb aa
comment|//
comment|//                1111111111222
comment|//      01234567890123456789012
comment|//(out) i i jj kkk llll cc b a
comment|//
comment|//    h, 0, 1 =>    i, 0, 1
comment|//    i, 2, 3 =>    i, 2, 3
comment|//    j, 4, 5 =>   jj, 4, 5
comment|//    k, 6, 7 =>  kkk, 6, 7
comment|//   ll, 8,10 => llll, 8,10
comment|// cccc,11,15 =>   cc,11,15
comment|//  bbb,16,19 =>    b,16,19
comment|//   aa,20,22 =>    a,20,22
comment|//
DECL|method|testTokenStream
specifier|public
name|void
name|testTokenStream
parameter_list|()
throws|throws
name|Exception
block|{
name|CharStream
name|cs
init|=
operator|new
name|MappingCharFilter
argument_list|(
name|normMap
argument_list|,
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"h i j k ll cccc bbb aa"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|WhitespaceTokenizer
argument_list|(
name|cs
argument_list|)
decl_stmt|;
name|List
name|real
init|=
name|getTokens
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|List
name|expect
init|=
name|tokens
argument_list|(
literal|"i,1,0,1 i,1,2,3 jj,1,4,5 kkk,1,6,7 llll,1,8,10 cc,1,11,15 b,1,16,19 a,1,20,22"
argument_list|)
decl_stmt|;
name|assertTokEqualOff
argument_list|(
name|expect
argument_list|,
name|real
argument_list|)
expr_stmt|;
block|}
comment|//
comment|//
comment|//        0123456789
comment|//(in)    aaaa ll h
comment|//(out-1) aa llll i
comment|//(out-2) a llllllll i
comment|//
comment|// aaaa,0,4 => a,0,4
comment|//   ll,5,7 => llllllll,5,7
comment|//    h,8,9 => i,8,9
DECL|method|testChained
specifier|public
name|void
name|testChained
parameter_list|()
throws|throws
name|Exception
block|{
name|CharStream
name|cs
init|=
operator|new
name|MappingCharFilter
argument_list|(
name|normMap
argument_list|,
operator|new
name|MappingCharFilter
argument_list|(
name|normMap
argument_list|,
name|CharReader
operator|.
name|get
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"aaaa ll h"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|WhitespaceTokenizer
argument_list|(
name|cs
argument_list|)
decl_stmt|;
name|List
name|real
init|=
name|getTokens
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|List
name|expect
init|=
name|tokens
argument_list|(
literal|"a,1,0,4 llllllll,1,5,7 i,1,8,9"
argument_list|)
decl_stmt|;
name|assertTokEqualOff
argument_list|(
name|expect
argument_list|,
name|real
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
