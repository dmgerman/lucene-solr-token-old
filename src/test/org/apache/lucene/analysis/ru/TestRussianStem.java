begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.ru
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ru
package|;
end_package
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache Lucene" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Lucene", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_class
DECL|class|TestRussianStem
specifier|public
class|class
name|TestRussianStem
extends|extends
name|TestCase
block|{
DECL|field|words
specifier|private
name|ArrayList
name|words
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
DECL|field|stems
specifier|private
name|ArrayList
name|stems
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
DECL|method|TestRussianStem
specifier|public
name|TestRussianStem
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|junit
operator|.
name|textui
operator|.
name|TestRunner
operator|.
name|run
argument_list|(
name|RussianStemTest
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see TestCase#setUp()      */
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|//System.out.println(new java.util.Date());
name|String
name|str
decl_stmt|;
comment|// open and read words into an array list
name|BufferedReader
name|inWords
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
literal|"src/test/org/apache/lucene/analysis/ru/wordsUnicode.txt"
argument_list|)
argument_list|,
literal|"Unicode"
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|str
operator|=
name|inWords
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|words
operator|.
name|add
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
name|inWords
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// open and read stems into an array list
name|BufferedReader
name|inStems
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
literal|"src/test/org/apache/lucene/analysis/ru/stemsUnicode.txt"
argument_list|)
argument_list|,
literal|"Unicode"
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|str
operator|=
name|inStems
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|stems
operator|.
name|add
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
name|inStems
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * @see TestCase#tearDown()      */
DECL|method|tearDown
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
DECL|method|testStem
specifier|public
name|void
name|testStem
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|words
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|//if ( (i % 100) == 0 ) System.err.println(i);
name|String
name|realStem
init|=
name|RussianStemmer
operator|.
name|stem
argument_list|(
operator|(
name|String
operator|)
name|words
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|RussianCharsets
operator|.
name|UnicodeRussian
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"unicode"
argument_list|,
name|stems
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|realStem
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|printChars
specifier|private
name|String
name|printChars
parameter_list|(
name|String
name|output
parameter_list|)
block|{
name|StringBuffer
name|s
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|output
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|s
operator|.
name|append
argument_list|(
name|output
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|s
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class
end_unit
