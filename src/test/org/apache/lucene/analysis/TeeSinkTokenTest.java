begin_unit
begin_package
DECL|package|org.apache.lucene.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * tests for the TeeTokenFilter and SinkTokenizer  */
end_comment
begin_class
DECL|class|TeeSinkTokenTest
specifier|public
class|class
name|TeeSinkTokenTest
extends|extends
name|TestCase
block|{
DECL|field|buffer1
specifier|protected
name|StringBuffer
name|buffer1
decl_stmt|;
DECL|field|buffer2
specifier|protected
name|StringBuffer
name|buffer2
decl_stmt|;
DECL|field|tokens1
specifier|protected
name|String
index|[]
name|tokens1
decl_stmt|;
DECL|field|tokens2
specifier|protected
name|String
index|[]
name|tokens2
decl_stmt|;
DECL|method|TeeSinkTokenTest
specifier|public
name|TeeSinkTokenTest
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
name|tokens1
operator|=
operator|new
name|String
index|[]
block|{
literal|"The"
block|,
literal|"quick"
block|,
literal|"Burgundy"
block|,
literal|"Fox"
block|,
literal|"jumped"
block|,
literal|"over"
block|,
literal|"the"
block|,
literal|"lazy"
block|,
literal|"Red"
block|,
literal|"Dogs"
block|}
expr_stmt|;
name|tokens2
operator|=
operator|new
name|String
index|[]
block|{
literal|"The"
block|,
literal|"Lazy"
block|,
literal|"Dogs"
block|,
literal|"should"
block|,
literal|"stay"
block|,
literal|"on"
block|,
literal|"the"
block|,
literal|"porch"
block|}
expr_stmt|;
name|buffer1
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tokens1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buffer1
operator|.
name|append
argument_list|(
name|tokens1
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|buffer2
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tokens2
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buffer2
operator|.
name|append
argument_list|(
name|tokens2
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|tearDown
specifier|protected
name|void
name|tearDown
parameter_list|()
block|{    }
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|IOException
block|{
name|SinkTokenizer
name|sink1
init|=
operator|new
name|SinkTokenizer
argument_list|(
literal|null
argument_list|)
block|{
specifier|public
name|void
name|add
parameter_list|(
name|Token
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|!=
literal|null
operator|&&
name|t
operator|.
name|termText
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"The"
argument_list|)
condition|)
block|{
name|super
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|TokenStream
name|source
init|=
operator|new
name|TeeTokenFilter
argument_list|(
operator|new
name|WhitespaceTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|buffer1
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|sink1
argument_list|)
decl_stmt|;
name|Token
name|token
init|=
literal|null
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|source
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|token
operator|.
name|termText
argument_list|()
operator|+
literal|" is not equal to "
operator|+
name|tokens1
index|[
name|i
index|]
argument_list|,
name|token
operator|.
name|termText
argument_list|()
operator|.
name|equals
argument_list|(
name|tokens1
index|[
name|i
index|]
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|i
operator|+
literal|" does not equal: "
operator|+
name|tokens1
operator|.
name|length
argument_list|,
name|i
operator|==
name|tokens1
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"sink1 Size: "
operator|+
name|sink1
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" is not: "
operator|+
literal|2
argument_list|,
name|sink1
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|sink1
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|token
operator|.
name|termText
argument_list|()
operator|+
literal|" is not equal to "
operator|+
literal|"The"
argument_list|,
name|token
operator|.
name|termText
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"The"
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|i
operator|+
literal|" does not equal: "
operator|+
name|sink1
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|i
operator|==
name|sink1
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultipleSources
specifier|public
name|void
name|testMultipleSources
parameter_list|()
throws|throws
name|Exception
block|{
name|SinkTokenizer
name|theDetector
init|=
operator|new
name|SinkTokenizer
argument_list|(
literal|null
argument_list|)
block|{
specifier|public
name|void
name|add
parameter_list|(
name|Token
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|!=
literal|null
operator|&&
name|t
operator|.
name|termText
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"The"
argument_list|)
condition|)
block|{
name|super
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|SinkTokenizer
name|dogDetector
init|=
operator|new
name|SinkTokenizer
argument_list|(
literal|null
argument_list|)
block|{
specifier|public
name|void
name|add
parameter_list|(
name|Token
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|!=
literal|null
operator|&&
name|t
operator|.
name|termText
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Dogs"
argument_list|)
condition|)
block|{
name|super
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|TokenStream
name|source1
init|=
operator|new
name|CachingTokenFilter
argument_list|(
operator|new
name|TeeTokenFilter
argument_list|(
operator|new
name|TeeTokenFilter
argument_list|(
operator|new
name|WhitespaceTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|buffer1
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|theDetector
argument_list|)
argument_list|,
name|dogDetector
argument_list|)
argument_list|)
decl_stmt|;
name|TokenStream
name|source2
init|=
operator|new
name|TeeTokenFilter
argument_list|(
operator|new
name|TeeTokenFilter
argument_list|(
operator|new
name|WhitespaceTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|buffer2
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|theDetector
argument_list|)
argument_list|,
name|dogDetector
argument_list|)
decl_stmt|;
name|Token
name|token
init|=
literal|null
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|source1
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|token
operator|.
name|termText
argument_list|()
operator|+
literal|" is not equal to "
operator|+
name|tokens1
index|[
name|i
index|]
argument_list|,
name|token
operator|.
name|termText
argument_list|()
operator|.
name|equals
argument_list|(
name|tokens1
index|[
name|i
index|]
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|i
operator|+
literal|" does not equal: "
operator|+
name|tokens1
operator|.
name|length
argument_list|,
name|i
operator|==
name|tokens1
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"theDetector Size: "
operator|+
name|theDetector
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" is not: "
operator|+
literal|2
argument_list|,
name|theDetector
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"dogDetector Size: "
operator|+
name|dogDetector
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" is not: "
operator|+
literal|1
argument_list|,
name|dogDetector
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|source2
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|token
operator|.
name|termText
argument_list|()
operator|+
literal|" is not equal to "
operator|+
name|tokens2
index|[
name|i
index|]
argument_list|,
name|token
operator|.
name|termText
argument_list|()
operator|.
name|equals
argument_list|(
name|tokens2
index|[
name|i
index|]
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|i
operator|+
literal|" does not equal: "
operator|+
name|tokens2
operator|.
name|length
argument_list|,
name|i
operator|==
name|tokens2
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"theDetector Size: "
operator|+
name|theDetector
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" is not: "
operator|+
literal|4
argument_list|,
name|theDetector
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"dogDetector Size: "
operator|+
name|dogDetector
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" is not: "
operator|+
literal|2
argument_list|,
name|dogDetector
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|theDetector
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|token
operator|.
name|termText
argument_list|()
operator|+
literal|" is not equal to "
operator|+
literal|"The"
argument_list|,
name|token
operator|.
name|termText
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"The"
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|i
operator|+
literal|" does not equal: "
operator|+
name|theDetector
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|i
operator|==
name|theDetector
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|dogDetector
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|token
operator|.
name|termText
argument_list|()
operator|+
literal|" is not equal to "
operator|+
literal|"Dogs"
argument_list|,
name|token
operator|.
name|termText
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Dogs"
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|i
operator|+
literal|" does not equal: "
operator|+
name|dogDetector
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|i
operator|==
name|dogDetector
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|source1
operator|.
name|reset
argument_list|()
expr_stmt|;
name|TokenStream
name|lowerCasing
init|=
operator|new
name|LowerCaseFilter
argument_list|(
name|source1
argument_list|)
decl_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|lowerCasing
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|token
operator|.
name|termText
argument_list|()
operator|+
literal|" is not equal to "
operator|+
name|tokens1
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|token
operator|.
name|termText
argument_list|()
operator|.
name|equals
argument_list|(
name|tokens1
index|[
name|i
index|]
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|i
operator|+
literal|" does not equal: "
operator|+
name|tokens1
operator|.
name|length
argument_list|,
name|i
operator|==
name|tokens1
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
