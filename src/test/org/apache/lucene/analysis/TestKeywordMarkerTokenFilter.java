begin_unit
begin_package
DECL|package|org.apache.lucene.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|KeywordAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Testcase for {@link KeywordMarkerTokenFilter}  */
end_comment
begin_class
DECL|class|TestKeywordMarkerTokenFilter
specifier|public
class|class
name|TestKeywordMarkerTokenFilter
extends|extends
name|BaseTokenStreamTestCase
block|{
annotation|@
name|Test
DECL|method|testIncrementToken
specifier|public
name|void
name|testIncrementToken
parameter_list|()
throws|throws
name|IOException
block|{
name|CharArraySet
name|set
init|=
operator|new
name|CharArraySet
argument_list|(
name|Version
operator|.
name|LUCENE_31
argument_list|,
literal|5
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
literal|"lucenefox"
argument_list|)
expr_stmt|;
name|String
index|[]
name|output
init|=
operator|new
name|String
index|[]
block|{
literal|"the"
block|,
literal|"quick"
block|,
literal|"brown"
block|,
literal|"LuceneFox"
block|,
literal|"jumps"
block|}
decl_stmt|;
name|assertTokenStreamContents
argument_list|(
operator|new
name|LowerCaseFilterMock
argument_list|(
operator|new
name|KeywordMarkerTokenFilter
argument_list|(
operator|new
name|WhitespaceTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"The quIck browN LuceneFox Jumps"
argument_list|)
argument_list|)
argument_list|,
name|set
argument_list|)
argument_list|)
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|jdkSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|jdkSet
operator|.
name|add
argument_list|(
literal|"LuceneFox"
argument_list|)
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
operator|new
name|LowerCaseFilterMock
argument_list|(
operator|new
name|KeywordMarkerTokenFilter
argument_list|(
operator|new
name|WhitespaceTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"The quIck browN LuceneFox Jumps"
argument_list|)
argument_list|)
argument_list|,
name|jdkSet
argument_list|)
argument_list|)
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|?
argument_list|>
name|set2
init|=
name|set
decl_stmt|;
name|assertTokenStreamContents
argument_list|(
operator|new
name|LowerCaseFilterMock
argument_list|(
operator|new
name|KeywordMarkerTokenFilter
argument_list|(
operator|new
name|WhitespaceTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"The quIck browN LuceneFox Jumps"
argument_list|)
argument_list|)
argument_list|,
name|set2
argument_list|)
argument_list|)
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
DECL|class|LowerCaseFilterMock
specifier|public
specifier|static
class|class
name|LowerCaseFilterMock
extends|extends
name|TokenFilter
block|{
DECL|field|termAtt
specifier|private
name|TermAttribute
name|termAtt
decl_stmt|;
DECL|field|keywordAttr
specifier|private
name|KeywordAttribute
name|keywordAttr
decl_stmt|;
DECL|method|LowerCaseFilterMock
specifier|public
name|LowerCaseFilterMock
parameter_list|(
name|TokenStream
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|termAtt
operator|=
name|addAttribute
argument_list|(
name|TermAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|keywordAttr
operator|=
name|addAttribute
argument_list|(
name|KeywordAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|input
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|keywordAttr
operator|.
name|isKeyword
argument_list|()
condition|)
name|termAtt
operator|.
name|setTermBuffer
argument_list|(
name|termAtt
operator|.
name|term
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class
end_unit
