begin_unit
begin_package
DECL|package|org.apache.lucene.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TypeAttribute
import|;
end_import
begin_class
DECL|class|TestNumericTokenStream
specifier|public
class|class
name|TestNumericTokenStream
extends|extends
name|BaseTokenStreamTestCase
block|{
DECL|field|lvalue
specifier|static
specifier|final
name|long
name|lvalue
init|=
literal|4573245871874382L
decl_stmt|;
DECL|field|ivalue
specifier|static
specifier|final
name|int
name|ivalue
init|=
literal|123456
decl_stmt|;
DECL|method|testLongStream
specifier|public
name|void
name|testLongStream
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|NumericTokenStream
name|stream
init|=
operator|new
name|NumericTokenStream
argument_list|()
operator|.
name|setLongValue
argument_list|(
name|lvalue
argument_list|)
decl_stmt|;
comment|// use getAttribute to test if attributes really exist, if not an IAE will be throwed
specifier|final
name|TermAttribute
name|termAtt
init|=
operator|(
name|TermAttribute
operator|)
name|stream
operator|.
name|getAttribute
argument_list|(
name|TermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|TypeAttribute
name|typeAtt
init|=
operator|(
name|TypeAttribute
operator|)
name|stream
operator|.
name|getAttribute
argument_list|(
name|TypeAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|shift
init|=
literal|0
init|;
name|shift
operator|<
literal|64
condition|;
name|shift
operator|+=
name|NumericUtils
operator|.
name|PRECISION_STEP_DEFAULT
control|)
block|{
name|assertTrue
argument_list|(
literal|"New token is available"
argument_list|,
name|stream
operator|.
name|incrementToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Term is correctly encoded"
argument_list|,
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
name|lvalue
argument_list|,
name|shift
argument_list|)
argument_list|,
name|termAtt
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Type correct"
argument_list|,
operator|(
name|shift
operator|==
literal|0
operator|)
condition|?
name|NumericTokenStream
operator|.
name|TOKEN_TYPE_FULL_PREC
else|:
name|NumericTokenStream
operator|.
name|TOKEN_TYPE_LOWER_PREC
argument_list|,
name|typeAtt
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"No more tokens available"
argument_list|,
name|stream
operator|.
name|incrementToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIntStream
specifier|public
name|void
name|testIntStream
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|NumericTokenStream
name|stream
init|=
operator|new
name|NumericTokenStream
argument_list|()
operator|.
name|setIntValue
argument_list|(
name|ivalue
argument_list|)
decl_stmt|;
comment|// use getAttribute to test if attributes really exist, if not an IAE will be throwed
specifier|final
name|TermAttribute
name|termAtt
init|=
operator|(
name|TermAttribute
operator|)
name|stream
operator|.
name|getAttribute
argument_list|(
name|TermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|TypeAttribute
name|typeAtt
init|=
operator|(
name|TypeAttribute
operator|)
name|stream
operator|.
name|getAttribute
argument_list|(
name|TypeAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|shift
init|=
literal|0
init|;
name|shift
operator|<
literal|32
condition|;
name|shift
operator|+=
name|NumericUtils
operator|.
name|PRECISION_STEP_DEFAULT
control|)
block|{
name|assertTrue
argument_list|(
literal|"New token is available"
argument_list|,
name|stream
operator|.
name|incrementToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Term is correctly encoded"
argument_list|,
name|NumericUtils
operator|.
name|intToPrefixCoded
argument_list|(
name|ivalue
argument_list|,
name|shift
argument_list|)
argument_list|,
name|termAtt
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Type correct"
argument_list|,
operator|(
name|shift
operator|==
literal|0
operator|)
condition|?
name|NumericTokenStream
operator|.
name|TOKEN_TYPE_FULL_PREC
else|:
name|NumericTokenStream
operator|.
name|TOKEN_TYPE_LOWER_PREC
argument_list|,
name|typeAtt
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"No more tokens available"
argument_list|,
name|stream
operator|.
name|incrementToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNotInitialized
specifier|public
name|void
name|testNotInitialized
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|NumericTokenStream
name|stream
init|=
operator|new
name|NumericTokenStream
argument_list|()
decl_stmt|;
try|try
block|{
name|stream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"reset() should not succeed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// pass
block|}
try|try
block|{
name|stream
operator|.
name|incrementToken
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"incrementToken() should not succeed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// pass
block|}
block|}
block|}
end_class
end_unit
