begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|KeywordAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|WhitespaceAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
operator|.
name|Index
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
operator|.
name|Store
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
operator|.
name|MaxFieldLength
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|MockRAMDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_class
DECL|class|TestIndexReaderReopen
specifier|public
class|class
name|TestIndexReaderReopen
extends|extends
name|LuceneTestCase
block|{
DECL|field|indexDir
specifier|private
name|File
name|indexDir
decl_stmt|;
DECL|method|testReopen
specifier|public
name|void
name|testReopen
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Directory
name|dir1
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
name|dir1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|performDefaultTests
argument_list|(
operator|new
name|TestReopen
argument_list|()
block|{
specifier|protected
name|void
name|modifyIndex
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|TestIndexReaderReopen
operator|.
name|modifyIndex
argument_list|(
name|i
argument_list|,
name|dir1
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|IndexReader
name|openReader
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|IndexReader
operator|.
name|open
argument_list|(
name|dir1
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|dir1
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|Directory
name|dir2
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
name|dir2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|performDefaultTests
argument_list|(
operator|new
name|TestReopen
argument_list|()
block|{
specifier|protected
name|void
name|modifyIndex
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|TestIndexReaderReopen
operator|.
name|modifyIndex
argument_list|(
name|i
argument_list|,
name|dir2
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|IndexReader
name|openReader
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|IndexReader
operator|.
name|open
argument_list|(
name|dir2
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|dir2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testParallelReaderReopen
specifier|public
name|void
name|testParallelReaderReopen
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Directory
name|dir1
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
name|dir1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Directory
name|dir2
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
name|dir2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|performDefaultTests
argument_list|(
operator|new
name|TestReopen
argument_list|()
block|{
specifier|protected
name|void
name|modifyIndex
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|TestIndexReaderReopen
operator|.
name|modifyIndex
argument_list|(
name|i
argument_list|,
name|dir1
argument_list|)
expr_stmt|;
name|TestIndexReaderReopen
operator|.
name|modifyIndex
argument_list|(
name|i
argument_list|,
name|dir2
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|IndexReader
name|openReader
parameter_list|()
throws|throws
name|IOException
block|{
name|ParallelReader
name|pr
init|=
operator|new
name|ParallelReader
argument_list|()
decl_stmt|;
name|pr
operator|.
name|add
argument_list|(
name|IndexReader
operator|.
name|open
argument_list|(
name|dir1
argument_list|)
argument_list|)
expr_stmt|;
name|pr
operator|.
name|add
argument_list|(
name|IndexReader
operator|.
name|open
argument_list|(
name|dir2
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pr
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|dir1
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir2
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|Directory
name|dir3
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
name|dir3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Directory
name|dir4
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
name|dir4
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|performTestsWithExceptionInReopen
argument_list|(
operator|new
name|TestReopen
argument_list|()
block|{
specifier|protected
name|void
name|modifyIndex
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|TestIndexReaderReopen
operator|.
name|modifyIndex
argument_list|(
name|i
argument_list|,
name|dir3
argument_list|)
expr_stmt|;
name|TestIndexReaderReopen
operator|.
name|modifyIndex
argument_list|(
name|i
argument_list|,
name|dir4
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|IndexReader
name|openReader
parameter_list|()
throws|throws
name|IOException
block|{
name|ParallelReader
name|pr
init|=
operator|new
name|ParallelReader
argument_list|()
decl_stmt|;
name|pr
operator|.
name|add
argument_list|(
name|IndexReader
operator|.
name|open
argument_list|(
name|dir3
argument_list|)
argument_list|)
expr_stmt|;
name|pr
operator|.
name|add
argument_list|(
name|IndexReader
operator|.
name|open
argument_list|(
name|dir4
argument_list|)
argument_list|)
expr_stmt|;
comment|// Does not implement reopen, so
comment|// hits exception:
name|pr
operator|.
name|add
argument_list|(
operator|new
name|FilterIndexReader
argument_list|(
name|IndexReader
operator|.
name|open
argument_list|(
name|dir3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pr
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|dir3
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir4
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1228: IndexWriter.commit() does not update the index version
comment|// populate an index in iterations.
comment|// at the end of every iteration, commit the index and reopen/recreate the reader.
comment|// in each iteration verify the work of previous iteration.
comment|// try this once with reopen once recreate, on both RAMDir and FSDir.
DECL|method|testCommitReopenFS
specifier|public
name|void
name|testCommitReopenFS
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|FSDirectory
operator|.
name|getDirectory
argument_list|(
name|indexDir
argument_list|)
decl_stmt|;
name|doTestReopenWithCommit
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testCommitRecreateFS
specifier|public
name|void
name|testCommitRecreateFS
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|FSDirectory
operator|.
name|getDirectory
argument_list|(
name|indexDir
argument_list|)
decl_stmt|;
name|doTestReopenWithCommit
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testCommitReopenRAM
specifier|public
name|void
name|testCommitReopenRAM
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|doTestReopenWithCommit
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testCommitRecreateRAM
specifier|public
name|void
name|testCommitRecreateRAM
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|doTestReopenWithCommit
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestReopenWithCommit
specifier|private
name|void
name|doTestReopenWithCommit
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|boolean
name|withReopen
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexWriter
name|iwriter
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|KeywordAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|,
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
decl_stmt|;
name|iwriter
operator|.
name|setMergeScheduler
argument_list|(
operator|new
name|SerialMergeScheduler
argument_list|()
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|M
init|=
literal|3
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|M
condition|;
name|j
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"id"
argument_list|,
name|i
operator|+
literal|"_"
operator|+
name|j
argument_list|,
name|Store
operator|.
name|YES
argument_list|,
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"id2"
argument_list|,
name|i
operator|+
literal|"_"
operator|+
name|j
argument_list|,
name|Store
operator|.
name|YES
argument_list|,
name|Index
operator|.
name|NOT_ANALYZED_NO_NORMS
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"id3"
argument_list|,
name|i
operator|+
literal|"_"
operator|+
name|j
argument_list|,
name|Store
operator|.
name|YES
argument_list|,
name|Index
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|iwriter
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|int
name|k
init|=
name|i
operator|-
literal|1
decl_stmt|;
name|int
name|n
init|=
name|j
operator|+
name|k
operator|*
name|M
decl_stmt|;
name|Document
name|prevItereationDoc
init|=
name|reader
operator|.
name|document
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|prevItereationDoc
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|prevItereationDoc
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|k
operator|+
literal|"_"
operator|+
name|j
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
name|iwriter
operator|.
name|commit
argument_list|()
expr_stmt|;
if|if
condition|(
name|withReopen
condition|)
block|{
comment|// reopen
name|IndexReader
name|r2
init|=
name|reader
operator|.
name|reopen
argument_list|()
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
name|r2
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|r2
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// recreate
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|iwriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testMultiReaderReopen
specifier|public
name|void
name|testMultiReaderReopen
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Directory
name|dir1
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
name|dir1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Directory
name|dir2
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
name|dir2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|performDefaultTests
argument_list|(
operator|new
name|TestReopen
argument_list|()
block|{
specifier|protected
name|void
name|modifyIndex
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|TestIndexReaderReopen
operator|.
name|modifyIndex
argument_list|(
name|i
argument_list|,
name|dir1
argument_list|)
expr_stmt|;
name|TestIndexReaderReopen
operator|.
name|modifyIndex
argument_list|(
name|i
argument_list|,
name|dir2
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|IndexReader
name|openReader
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|MultiReader
argument_list|(
operator|new
name|IndexReader
index|[]
block|{
name|IndexReader
operator|.
name|open
argument_list|(
name|dir1
argument_list|)
block|,
name|IndexReader
operator|.
name|open
argument_list|(
name|dir2
argument_list|)
block|}
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|dir1
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir2
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|Directory
name|dir3
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
name|dir3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Directory
name|dir4
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
name|dir4
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|performTestsWithExceptionInReopen
argument_list|(
operator|new
name|TestReopen
argument_list|()
block|{
specifier|protected
name|void
name|modifyIndex
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|TestIndexReaderReopen
operator|.
name|modifyIndex
argument_list|(
name|i
argument_list|,
name|dir3
argument_list|)
expr_stmt|;
name|TestIndexReaderReopen
operator|.
name|modifyIndex
argument_list|(
name|i
argument_list|,
name|dir4
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|IndexReader
name|openReader
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|MultiReader
argument_list|(
operator|new
name|IndexReader
index|[]
block|{
name|IndexReader
operator|.
name|open
argument_list|(
name|dir3
argument_list|)
block|,
name|IndexReader
operator|.
name|open
argument_list|(
name|dir4
argument_list|)
block|,
comment|// Does not implement reopen, so
comment|// hits exception:
operator|new
name|FilterIndexReader
argument_list|(
name|IndexReader
operator|.
name|open
argument_list|(
name|dir3
argument_list|)
argument_list|)
block|}
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|dir3
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir4
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testMixedReaders
specifier|public
name|void
name|testMixedReaders
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Directory
name|dir1
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
name|dir1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Directory
name|dir2
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
name|dir2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Directory
name|dir3
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
name|dir3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|Directory
name|dir4
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
name|dir4
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Directory
name|dir5
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
name|dir5
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|performDefaultTests
argument_list|(
operator|new
name|TestReopen
argument_list|()
block|{
specifier|protected
name|void
name|modifyIndex
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
comment|// only change norms in this index to maintain the same number of docs for each of ParallelReader's subreaders
if|if
condition|(
name|i
operator|==
literal|1
condition|)
name|TestIndexReaderReopen
operator|.
name|modifyIndex
argument_list|(
name|i
argument_list|,
name|dir1
argument_list|)
expr_stmt|;
name|TestIndexReaderReopen
operator|.
name|modifyIndex
argument_list|(
name|i
argument_list|,
name|dir4
argument_list|)
expr_stmt|;
name|TestIndexReaderReopen
operator|.
name|modifyIndex
argument_list|(
name|i
argument_list|,
name|dir5
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|IndexReader
name|openReader
parameter_list|()
throws|throws
name|IOException
block|{
name|ParallelReader
name|pr
init|=
operator|new
name|ParallelReader
argument_list|()
decl_stmt|;
name|pr
operator|.
name|add
argument_list|(
name|IndexReader
operator|.
name|open
argument_list|(
name|dir1
argument_list|)
argument_list|)
expr_stmt|;
name|pr
operator|.
name|add
argument_list|(
name|IndexReader
operator|.
name|open
argument_list|(
name|dir2
argument_list|)
argument_list|)
expr_stmt|;
name|MultiReader
name|mr
init|=
operator|new
name|MultiReader
argument_list|(
operator|new
name|IndexReader
index|[]
block|{
name|IndexReader
operator|.
name|open
argument_list|(
name|dir3
argument_list|)
block|,
name|IndexReader
operator|.
name|open
argument_list|(
name|dir4
argument_list|)
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|MultiReader
argument_list|(
operator|new
name|IndexReader
index|[]
block|{
name|pr
block|,
name|mr
block|,
name|IndexReader
operator|.
name|open
argument_list|(
name|dir5
argument_list|)
block|}
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|dir1
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir2
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir3
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir4
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir5
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|performDefaultTests
specifier|private
name|void
name|performDefaultTests
parameter_list|(
name|TestReopen
name|test
parameter_list|)
throws|throws
name|Exception
block|{
name|IndexReader
name|index1
init|=
name|test
operator|.
name|openReader
argument_list|()
decl_stmt|;
name|IndexReader
name|index2
init|=
name|test
operator|.
name|openReader
argument_list|()
decl_stmt|;
name|TestIndexReader
operator|.
name|assertIndexEquals
argument_list|(
name|index1
argument_list|,
name|index2
argument_list|)
expr_stmt|;
comment|// verify that reopen() does not return a new reader instance
comment|// in case the index has no changes
name|ReaderCouple
name|couple
init|=
name|refreshReader
argument_list|(
name|index2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|couple
operator|.
name|refreshedReader
operator|==
name|index2
argument_list|)
expr_stmt|;
name|couple
operator|=
name|refreshReader
argument_list|(
name|index2
argument_list|,
name|test
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|index1
operator|.
name|close
argument_list|()
expr_stmt|;
name|index1
operator|=
name|couple
operator|.
name|newReader
expr_stmt|;
name|IndexReader
name|index2_refreshed
init|=
name|couple
operator|.
name|refreshedReader
decl_stmt|;
name|index2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// test if refreshed reader and newly opened reader return equal results
name|TestIndexReader
operator|.
name|assertIndexEquals
argument_list|(
name|index1
argument_list|,
name|index2_refreshed
argument_list|)
expr_stmt|;
name|index2_refreshed
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertReaderClosed
argument_list|(
name|index2
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertReaderClosed
argument_list|(
name|index2_refreshed
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|index2
operator|=
name|test
operator|.
name|openReader
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|index1
operator|.
name|close
argument_list|()
expr_stmt|;
name|couple
operator|=
name|refreshReader
argument_list|(
name|index2
argument_list|,
name|test
argument_list|,
name|i
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// refresh IndexReader
name|index2
operator|.
name|close
argument_list|()
expr_stmt|;
name|index2
operator|=
name|couple
operator|.
name|refreshedReader
expr_stmt|;
name|index1
operator|=
name|couple
operator|.
name|newReader
expr_stmt|;
name|TestIndexReader
operator|.
name|assertIndexEquals
argument_list|(
name|index1
argument_list|,
name|index2
argument_list|)
expr_stmt|;
block|}
name|index1
operator|.
name|close
argument_list|()
expr_stmt|;
name|index2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertReaderClosed
argument_list|(
name|index1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertReaderClosed
argument_list|(
name|index2
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testReferenceCounting
specifier|public
name|void
name|testReferenceCounting
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|mode
init|=
literal|0
init|;
name|mode
operator|<
literal|4
condition|;
name|mode
operator|++
control|)
block|{
name|Directory
name|dir1
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
name|dir1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|IndexReader
name|reader0
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir1
argument_list|)
decl_stmt|;
name|assertRefCountEquals
argument_list|(
literal|1
argument_list|,
name|reader0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reader0
operator|instanceof
name|MultiSegmentReader
argument_list|)
expr_stmt|;
name|IndexReader
index|[]
name|subReaders0
init|=
name|reader0
operator|.
name|getSequentialSubReaders
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subReaders0
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertRefCountEquals
argument_list|(
literal|1
argument_list|,
name|subReaders0
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// delete first document, so that only one of the subReaders have to be re-opened
name|IndexReader
name|modifier
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir1
argument_list|)
decl_stmt|;
name|modifier
operator|.
name|deleteDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|modifier
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader1
init|=
name|refreshReader
argument_list|(
name|reader0
argument_list|,
literal|true
argument_list|)
operator|.
name|refreshedReader
decl_stmt|;
name|assertTrue
argument_list|(
name|reader1
operator|instanceof
name|MultiSegmentReader
argument_list|)
expr_stmt|;
name|IndexReader
index|[]
name|subReaders1
init|=
name|reader1
operator|.
name|getSequentialSubReaders
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|subReaders0
operator|.
name|length
argument_list|,
name|subReaders1
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subReaders0
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|subReaders0
index|[
name|i
index|]
operator|!=
name|subReaders1
index|[
name|i
index|]
condition|)
block|{
name|assertRefCountEquals
argument_list|(
literal|1
argument_list|,
name|subReaders0
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertRefCountEquals
argument_list|(
literal|1
argument_list|,
name|subReaders1
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertRefCountEquals
argument_list|(
literal|2
argument_list|,
name|subReaders0
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// delete first document, so that only one of the subReaders have to be re-opened
name|modifier
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir1
argument_list|)
expr_stmt|;
name|modifier
operator|.
name|deleteDocument
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|modifier
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader2
init|=
name|refreshReader
argument_list|(
name|reader1
argument_list|,
literal|true
argument_list|)
operator|.
name|refreshedReader
decl_stmt|;
name|assertTrue
argument_list|(
name|reader2
operator|instanceof
name|MultiSegmentReader
argument_list|)
expr_stmt|;
name|IndexReader
index|[]
name|subReaders2
init|=
name|reader2
operator|.
name|getSequentialSubReaders
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|subReaders1
operator|.
name|length
argument_list|,
name|subReaders2
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subReaders2
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|subReaders2
index|[
name|i
index|]
operator|==
name|subReaders1
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|subReaders1
index|[
name|i
index|]
operator|==
name|subReaders0
index|[
name|i
index|]
condition|)
block|{
name|assertRefCountEquals
argument_list|(
literal|3
argument_list|,
name|subReaders2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertRefCountEquals
argument_list|(
literal|2
argument_list|,
name|subReaders2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|assertRefCountEquals
argument_list|(
literal|1
argument_list|,
name|subReaders2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|subReaders0
index|[
name|i
index|]
operator|==
name|subReaders1
index|[
name|i
index|]
condition|)
block|{
name|assertRefCountEquals
argument_list|(
literal|2
argument_list|,
name|subReaders2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertRefCountEquals
argument_list|(
literal|2
argument_list|,
name|subReaders0
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertRefCountEquals
argument_list|(
literal|1
argument_list|,
name|subReaders0
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertRefCountEquals
argument_list|(
literal|1
argument_list|,
name|subReaders1
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|IndexReader
name|reader3
init|=
name|refreshReader
argument_list|(
name|reader0
argument_list|,
literal|true
argument_list|)
operator|.
name|refreshedReader
decl_stmt|;
name|assertTrue
argument_list|(
name|reader3
operator|instanceof
name|MultiSegmentReader
argument_list|)
expr_stmt|;
name|IndexReader
index|[]
name|subReaders3
init|=
name|reader3
operator|.
name|getSequentialSubReaders
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|subReaders3
operator|.
name|length
argument_list|,
name|subReaders0
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// try some permutations
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
literal|0
case|:
name|reader0
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader1
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader2
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader3
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|reader3
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader2
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader1
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader0
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|reader2
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader3
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader0
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader1
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|reader1
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader3
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader2
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader0
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
block|}
name|assertReaderClosed
argument_list|(
name|reader0
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertReaderClosed
argument_list|(
name|reader1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertReaderClosed
argument_list|(
name|reader2
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertReaderClosed
argument_list|(
name|reader3
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dir1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testReferenceCountingMultiReader
specifier|public
name|void
name|testReferenceCountingMultiReader
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|mode
init|=
literal|0
init|;
name|mode
operator|<=
literal|1
condition|;
name|mode
operator|++
control|)
block|{
name|Directory
name|dir1
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
name|dir1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Directory
name|dir2
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
name|dir2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|IndexReader
name|reader1
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir1
argument_list|)
decl_stmt|;
name|assertRefCountEquals
argument_list|(
literal|1
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
name|IndexReader
name|initReader2
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir2
argument_list|)
decl_stmt|;
name|IndexReader
name|multiReader1
init|=
operator|new
name|MultiReader
argument_list|(
operator|new
name|IndexReader
index|[]
block|{
name|reader1
block|,
name|initReader2
block|}
argument_list|,
operator|(
name|mode
operator|==
literal|0
operator|)
argument_list|)
decl_stmt|;
name|modifyIndex
argument_list|(
literal|0
argument_list|,
name|dir2
argument_list|)
expr_stmt|;
name|assertRefCountEquals
argument_list|(
literal|1
operator|+
name|mode
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
name|IndexReader
name|multiReader2
init|=
name|multiReader1
operator|.
name|reopen
argument_list|()
decl_stmt|;
comment|// index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1
name|assertRefCountEquals
argument_list|(
literal|2
operator|+
name|mode
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
name|modifyIndex
argument_list|(
literal|0
argument_list|,
name|dir1
argument_list|)
expr_stmt|;
name|IndexReader
name|reader2
init|=
name|reader1
operator|.
name|reopen
argument_list|()
decl_stmt|;
name|assertRefCountEquals
argument_list|(
literal|2
operator|+
name|mode
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|==
literal|1
condition|)
block|{
name|initReader2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|modifyIndex
argument_list|(
literal|1
argument_list|,
name|dir1
argument_list|)
expr_stmt|;
name|IndexReader
name|reader3
init|=
name|reader2
operator|.
name|reopen
argument_list|()
decl_stmt|;
name|assertRefCountEquals
argument_list|(
literal|2
operator|+
name|mode
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
name|assertRefCountEquals
argument_list|(
literal|1
argument_list|,
name|reader2
argument_list|)
expr_stmt|;
name|multiReader1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertRefCountEquals
argument_list|(
literal|1
operator|+
name|mode
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
name|multiReader1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertRefCountEquals
argument_list|(
literal|1
operator|+
name|mode
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|==
literal|1
condition|)
block|{
name|initReader2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|reader1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertRefCountEquals
argument_list|(
literal|1
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
name|multiReader2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertRefCountEquals
argument_list|(
literal|0
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
name|multiReader2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertRefCountEquals
argument_list|(
literal|0
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
name|reader3
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertRefCountEquals
argument_list|(
literal|0
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
name|assertReaderClosed
argument_list|(
name|reader1
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|reader2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertRefCountEquals
argument_list|(
literal|0
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
name|assertReaderClosed
argument_list|(
name|reader1
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|reader2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertRefCountEquals
argument_list|(
literal|0
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
name|reader3
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertRefCountEquals
argument_list|(
literal|0
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
name|assertReaderClosed
argument_list|(
name|reader1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dir1
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testReferenceCountingParallelReader
specifier|public
name|void
name|testReferenceCountingParallelReader
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|mode
init|=
literal|0
init|;
name|mode
operator|<=
literal|1
condition|;
name|mode
operator|++
control|)
block|{
name|Directory
name|dir1
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
name|dir1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Directory
name|dir2
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
name|dir2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|IndexReader
name|reader1
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir1
argument_list|)
decl_stmt|;
name|assertRefCountEquals
argument_list|(
literal|1
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
name|ParallelReader
name|parallelReader1
init|=
operator|new
name|ParallelReader
argument_list|(
name|mode
operator|==
literal|0
argument_list|)
decl_stmt|;
name|parallelReader1
operator|.
name|add
argument_list|(
name|reader1
argument_list|)
expr_stmt|;
name|IndexReader
name|initReader2
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir2
argument_list|)
decl_stmt|;
name|parallelReader1
operator|.
name|add
argument_list|(
name|initReader2
argument_list|)
expr_stmt|;
name|modifyIndex
argument_list|(
literal|1
argument_list|,
name|dir2
argument_list|)
expr_stmt|;
name|assertRefCountEquals
argument_list|(
literal|1
operator|+
name|mode
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
name|IndexReader
name|parallelReader2
init|=
name|parallelReader1
operator|.
name|reopen
argument_list|()
decl_stmt|;
comment|// index1 hasn't changed, so parallelReader2 should share reader1 now with multiReader1
name|assertRefCountEquals
argument_list|(
literal|2
operator|+
name|mode
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
name|modifyIndex
argument_list|(
literal|0
argument_list|,
name|dir1
argument_list|)
expr_stmt|;
name|modifyIndex
argument_list|(
literal|0
argument_list|,
name|dir2
argument_list|)
expr_stmt|;
name|IndexReader
name|reader2
init|=
name|reader1
operator|.
name|reopen
argument_list|()
decl_stmt|;
name|assertRefCountEquals
argument_list|(
literal|2
operator|+
name|mode
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|==
literal|1
condition|)
block|{
name|initReader2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|modifyIndex
argument_list|(
literal|4
argument_list|,
name|dir1
argument_list|)
expr_stmt|;
name|IndexReader
name|reader3
init|=
name|reader2
operator|.
name|reopen
argument_list|()
decl_stmt|;
name|assertRefCountEquals
argument_list|(
literal|2
operator|+
name|mode
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
name|assertRefCountEquals
argument_list|(
literal|1
argument_list|,
name|reader2
argument_list|)
expr_stmt|;
name|parallelReader1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertRefCountEquals
argument_list|(
literal|1
operator|+
name|mode
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
name|parallelReader1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertRefCountEquals
argument_list|(
literal|1
operator|+
name|mode
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|==
literal|1
condition|)
block|{
name|initReader2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|reader1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertRefCountEquals
argument_list|(
literal|1
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
name|parallelReader2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertRefCountEquals
argument_list|(
literal|0
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
name|parallelReader2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertRefCountEquals
argument_list|(
literal|0
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
name|reader3
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertRefCountEquals
argument_list|(
literal|0
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
name|assertReaderClosed
argument_list|(
name|reader1
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|reader2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertRefCountEquals
argument_list|(
literal|0
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
name|assertReaderClosed
argument_list|(
name|reader1
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|reader2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertRefCountEquals
argument_list|(
literal|0
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
name|reader3
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertRefCountEquals
argument_list|(
literal|0
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
name|assertReaderClosed
argument_list|(
name|reader1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dir1
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testNormsRefCounting
specifier|public
name|void
name|testNormsRefCounting
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir1
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
name|dir1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SegmentReader
name|reader1
init|=
operator|(
name|SegmentReader
operator|)
name|IndexReader
operator|.
name|open
argument_list|(
name|dir1
argument_list|)
decl_stmt|;
name|IndexReader
name|modifier
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir1
argument_list|)
decl_stmt|;
name|modifier
operator|.
name|deleteDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|modifier
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentReader
name|reader2
init|=
operator|(
name|SegmentReader
operator|)
name|reader1
operator|.
name|reopen
argument_list|()
decl_stmt|;
name|modifier
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir1
argument_list|)
expr_stmt|;
name|modifier
operator|.
name|setNorm
argument_list|(
literal|1
argument_list|,
literal|"field1"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|modifier
operator|.
name|setNorm
argument_list|(
literal|1
argument_list|,
literal|"field2"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|modifier
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentReader
name|reader3
init|=
operator|(
name|SegmentReader
operator|)
name|reader2
operator|.
name|reopen
argument_list|()
decl_stmt|;
name|modifier
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir1
argument_list|)
expr_stmt|;
name|modifier
operator|.
name|deleteDocument
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|modifier
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentReader
name|reader4
init|=
operator|(
name|SegmentReader
operator|)
name|reader3
operator|.
name|reopen
argument_list|()
decl_stmt|;
name|modifier
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir1
argument_list|)
expr_stmt|;
name|modifier
operator|.
name|deleteDocument
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|modifier
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentReader
name|reader5
init|=
operator|(
name|SegmentReader
operator|)
name|reader3
operator|.
name|reopen
argument_list|()
decl_stmt|;
comment|// Now reader2-reader5 references reader1. reader1 and reader2
comment|// share the same norms. reader3, reader4, reader5 also share norms.
name|assertRefCountEquals
argument_list|(
literal|1
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|reader1
operator|.
name|normsClosed
argument_list|()
argument_list|)
expr_stmt|;
name|reader1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertRefCountEquals
argument_list|(
literal|0
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|reader1
operator|.
name|normsClosed
argument_list|()
argument_list|)
expr_stmt|;
name|reader2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertRefCountEquals
argument_list|(
literal|0
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
comment|// now the norms for field1 and field2 should be closed
name|assertTrue
argument_list|(
name|reader1
operator|.
name|normsClosed
argument_list|(
literal|"field1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reader1
operator|.
name|normsClosed
argument_list|(
literal|"field2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// but the norms for field3 and field4 should still be open
name|assertFalse
argument_list|(
name|reader1
operator|.
name|normsClosed
argument_list|(
literal|"field3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|reader1
operator|.
name|normsClosed
argument_list|(
literal|"field4"
argument_list|)
argument_list|)
expr_stmt|;
name|reader3
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertRefCountEquals
argument_list|(
literal|0
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|reader3
operator|.
name|normsClosed
argument_list|()
argument_list|)
expr_stmt|;
name|reader5
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertRefCountEquals
argument_list|(
literal|0
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|reader3
operator|.
name|normsClosed
argument_list|()
argument_list|)
expr_stmt|;
name|reader4
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertRefCountEquals
argument_list|(
literal|0
argument_list|,
name|reader1
argument_list|)
expr_stmt|;
comment|// and now all norms that reader1 used should be closed
name|assertTrue
argument_list|(
name|reader1
operator|.
name|normsClosed
argument_list|()
argument_list|)
expr_stmt|;
comment|// now that reader3, reader4 and reader5 are closed,
comment|// the norms that those three readers shared should be
comment|// closed as well
name|assertTrue
argument_list|(
name|reader3
operator|.
name|normsClosed
argument_list|()
argument_list|)
expr_stmt|;
name|dir1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|performTestsWithExceptionInReopen
specifier|private
name|void
name|performTestsWithExceptionInReopen
parameter_list|(
name|TestReopen
name|test
parameter_list|)
throws|throws
name|Exception
block|{
name|IndexReader
name|index1
init|=
name|test
operator|.
name|openReader
argument_list|()
decl_stmt|;
name|IndexReader
name|index2
init|=
name|test
operator|.
name|openReader
argument_list|()
decl_stmt|;
name|TestIndexReader
operator|.
name|assertIndexEquals
argument_list|(
name|index1
argument_list|,
name|index2
argument_list|)
expr_stmt|;
try|try
block|{
name|refreshReader
argument_list|(
name|index1
argument_list|,
name|test
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception not thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// expected exception
block|}
comment|// index2 should still be usable and unaffected by the failed reopen() call
name|TestIndexReader
operator|.
name|assertIndexEquals
argument_list|(
name|index1
argument_list|,
name|index2
argument_list|)
expr_stmt|;
name|index1
operator|.
name|close
argument_list|()
expr_stmt|;
name|index2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testThreadSafety
specifier|public
name|void
name|testThreadSafety
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
specifier|final
name|int
name|n
init|=
literal|150
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|()
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|createDocument
argument_list|(
name|i
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|TestReopen
name|test
init|=
operator|new
name|TestReopen
argument_list|()
block|{
specifier|protected
name|void
name|modifyIndex
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|i
operator|%
literal|3
operator|==
literal|0
condition|)
block|{
name|IndexReader
name|modifier
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|modifier
operator|.
name|setNorm
argument_list|(
name|i
argument_list|,
literal|"field1"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|modifier
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|%
literal|3
operator|==
literal|1
condition|)
block|{
name|IndexReader
name|modifier
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|modifier
operator|.
name|deleteDocument
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|modifier
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|IndexWriter
name|modifier
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|()
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
decl_stmt|;
name|modifier
operator|.
name|addDocument
argument_list|(
name|createDocument
argument_list|(
name|n
operator|+
name|i
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|modifier
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|IndexReader
name|openReader
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|List
name|readers
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|)
decl_stmt|;
name|IndexReader
name|firstReader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|IndexReader
name|reader
init|=
name|firstReader
decl_stmt|;
specifier|final
name|Random
name|rnd
init|=
name|newRandom
argument_list|()
decl_stmt|;
name|ReaderThread
index|[]
name|threads
init|=
operator|new
name|ReaderThread
index|[
name|n
index|]
decl_stmt|;
specifier|final
name|Set
name|readersToClose
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|10
operator|==
literal|0
condition|)
block|{
name|IndexReader
name|refreshed
init|=
name|reader
operator|.
name|reopen
argument_list|()
decl_stmt|;
if|if
condition|(
name|refreshed
operator|!=
name|reader
condition|)
block|{
name|readersToClose
operator|.
name|add
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
name|reader
operator|=
name|refreshed
expr_stmt|;
block|}
specifier|final
name|IndexReader
name|r
init|=
name|reader
decl_stmt|;
specifier|final
name|int
name|index
init|=
name|i
decl_stmt|;
name|ReaderThreadTask
name|task
decl_stmt|;
if|if
condition|(
name|i
argument_list|<
literal|20
operator|||
operator|(
name|i
operator|>=
literal|50
operator|&&
name|i
operator|<
literal|70
operator|)
operator|||
name|i
argument_list|>
literal|90
condition|)
block|{
name|task
operator|=
operator|new
name|ReaderThreadTask
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
while|while
condition|(
operator|!
name|stopped
condition|)
block|{
if|if
condition|(
name|index
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
comment|// refresh reader synchronized
name|ReaderCouple
name|c
init|=
operator|(
name|refreshReader
argument_list|(
name|r
argument_list|,
name|test
argument_list|,
name|index
argument_list|,
literal|true
argument_list|)
operator|)
decl_stmt|;
name|readersToClose
operator|.
name|add
argument_list|(
name|c
operator|.
name|newReader
argument_list|)
expr_stmt|;
name|readersToClose
operator|.
name|add
argument_list|(
name|c
operator|.
name|refreshedReader
argument_list|)
expr_stmt|;
name|readers
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
comment|// prevent too many readers
break|break;
block|}
else|else
block|{
comment|// not synchronized
name|IndexReader
name|refreshed
init|=
name|r
operator|.
name|reopen
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|refreshed
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field1"
argument_list|,
literal|"a"
operator|+
name|rnd
operator|.
name|nextInt
argument_list|(
name|refreshed
operator|.
name|maxDoc
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
if|if
condition|(
name|hits
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
block|}
comment|// r might have changed because this is not a
comment|// synchronized method. However we don't want
comment|// to make it synchronized to test
comment|// thread-safety of IndexReader.close().
comment|// That's why we add refreshed also to
comment|// readersToClose, because double closing is fine
if|if
condition|(
name|refreshed
operator|!=
name|r
condition|)
block|{
name|refreshed
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|readersToClose
operator|.
name|add
argument_list|(
name|refreshed
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|wait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
expr_stmt|;
block|}
else|else
block|{
name|task
operator|=
operator|new
name|ReaderThreadTask
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
while|while
condition|(
operator|!
name|stopped
condition|)
block|{
name|int
name|numReaders
init|=
name|readers
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numReaders
operator|>
literal|0
condition|)
block|{
name|ReaderCouple
name|c
init|=
operator|(
name|ReaderCouple
operator|)
name|readers
operator|.
name|get
argument_list|(
name|rnd
operator|.
name|nextInt
argument_list|(
name|numReaders
argument_list|)
argument_list|)
decl_stmt|;
name|TestIndexReader
operator|.
name|assertIndexEquals
argument_list|(
name|c
operator|.
name|newReader
argument_list|,
name|c
operator|.
name|refreshedReader
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|wait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
expr_stmt|;
block|}
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|ReaderThread
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|wait
argument_list|(
literal|15000
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|threads
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|stopThread
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|threads
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
if|if
condition|(
name|threads
index|[
name|i
index|]
operator|.
name|error
operator|!=
literal|null
condition|)
block|{
name|String
name|msg
init|=
literal|"Error occurred in thread "
operator|+
name|threads
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|":\n"
operator|+
name|threads
index|[
name|i
index|]
operator|.
name|error
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|fail
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Iterator
name|it
init|=
name|readersToClose
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
operator|(
operator|(
name|IndexReader
operator|)
name|it
operator|.
name|next
argument_list|()
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|firstReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|it
operator|=
name|readersToClose
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertReaderClosed
argument_list|(
operator|(
name|IndexReader
operator|)
name|it
operator|.
name|next
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertReaderClosed
argument_list|(
name|reader
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertReaderClosed
argument_list|(
name|firstReader
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|ReaderCouple
specifier|private
specifier|static
class|class
name|ReaderCouple
block|{
DECL|method|ReaderCouple
name|ReaderCouple
parameter_list|(
name|IndexReader
name|r1
parameter_list|,
name|IndexReader
name|r2
parameter_list|)
block|{
name|newReader
operator|=
name|r1
expr_stmt|;
name|refreshedReader
operator|=
name|r2
expr_stmt|;
block|}
DECL|field|newReader
name|IndexReader
name|newReader
decl_stmt|;
DECL|field|refreshedReader
name|IndexReader
name|refreshedReader
decl_stmt|;
block|}
DECL|class|ReaderThreadTask
specifier|private
specifier|abstract
specifier|static
class|class
name|ReaderThreadTask
block|{
DECL|field|stopped
specifier|protected
name|boolean
name|stopped
decl_stmt|;
DECL|method|stop
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|this
operator|.
name|stopped
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|run
specifier|public
specifier|abstract
name|void
name|run
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
DECL|class|ReaderThread
specifier|private
specifier|static
class|class
name|ReaderThread
extends|extends
name|Thread
block|{
DECL|field|task
specifier|private
name|ReaderThreadTask
name|task
decl_stmt|;
DECL|field|error
specifier|private
name|Throwable
name|error
decl_stmt|;
DECL|method|ReaderThread
name|ReaderThread
parameter_list|(
name|ReaderThreadTask
name|task
parameter_list|)
block|{
name|this
operator|.
name|task
operator|=
name|task
expr_stmt|;
block|}
DECL|method|stopThread
specifier|public
name|void
name|stopThread
parameter_list|()
block|{
name|this
operator|.
name|task
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|task
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|r
parameter_list|)
block|{
name|r
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|this
operator|.
name|error
operator|=
name|r
expr_stmt|;
block|}
block|}
block|}
DECL|field|createReaderMutex
specifier|private
name|Object
name|createReaderMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|method|refreshReader
specifier|private
name|ReaderCouple
name|refreshReader
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|boolean
name|hasChanges
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|refreshReader
argument_list|(
name|reader
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
name|hasChanges
argument_list|)
return|;
block|}
DECL|method|refreshReader
name|ReaderCouple
name|refreshReader
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|TestReopen
name|test
parameter_list|,
name|int
name|modify
parameter_list|,
name|boolean
name|hasChanges
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|createReaderMutex
init|)
block|{
name|IndexReader
name|r
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|test
operator|!=
literal|null
condition|)
block|{
name|test
operator|.
name|modifyIndex
argument_list|(
name|modify
argument_list|)
expr_stmt|;
name|r
operator|=
name|test
operator|.
name|openReader
argument_list|()
expr_stmt|;
block|}
name|IndexReader
name|refreshed
init|=
literal|null
decl_stmt|;
try|try
block|{
name|refreshed
operator|=
name|reader
operator|.
name|reopen
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|refreshed
operator|==
literal|null
operator|&&
name|r
operator|!=
literal|null
condition|)
block|{
comment|// Hit exception -- close opened reader
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasChanges
condition|)
block|{
if|if
condition|(
name|refreshed
operator|==
name|reader
condition|)
block|{
name|fail
argument_list|(
literal|"No new IndexReader instance created during refresh."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|refreshed
operator|!=
name|reader
condition|)
block|{
name|fail
argument_list|(
literal|"New IndexReader instance created during refresh even though index had no changes."
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|ReaderCouple
argument_list|(
name|r
argument_list|,
name|refreshed
argument_list|)
return|;
block|}
block|}
DECL|method|createIndex
specifier|public
specifier|static
name|void
name|createIndex
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|boolean
name|multiSegment
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexWriter
operator|.
name|unlock
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
decl_stmt|;
name|w
operator|.
name|setMergePolicy
argument_list|(
operator|new
name|LogDocMergePolicy
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|createDocument
argument_list|(
name|i
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|multiSegment
operator|&&
operator|(
name|i
operator|%
literal|10
operator|)
operator|==
literal|0
condition|)
block|{
name|w
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|multiSegment
condition|)
block|{
name|w
operator|.
name|optimize
argument_list|()
expr_stmt|;
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|r
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|multiSegment
condition|)
block|{
name|assertTrue
argument_list|(
name|r
operator|instanceof
name|MultiSegmentReader
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|r
operator|instanceof
name|SegmentReader
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createDocument
specifier|public
specifier|static
name|Document
name|createDocument
parameter_list|(
name|int
name|n
parameter_list|,
name|int
name|numFields
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field1"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|Store
operator|.
name|YES
argument_list|,
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"fielda"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|Store
operator|.
name|YES
argument_list|,
name|Index
operator|.
name|NOT_ANALYZED_NO_NORMS
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"fieldb"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|Store
operator|.
name|YES
argument_list|,
name|Index
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" b"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|n
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numFields
condition|;
name|i
operator|++
control|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|Store
operator|.
name|YES
argument_list|,
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
DECL|method|modifyIndex
specifier|static
name|void
name|modifyIndex
parameter_list|(
name|int
name|i
parameter_list|,
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
block|{
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
decl_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field2"
argument_list|,
literal|"a11"
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field2"
argument_list|,
literal|"b30"
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|1
case|:
block|{
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|reader
operator|.
name|setNorm
argument_list|(
literal|4
argument_list|,
literal|"field1"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setNorm
argument_list|(
literal|44
argument_list|,
literal|"field2"
argument_list|,
literal|222
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setNorm
argument_list|(
literal|44
argument_list|,
literal|"field4"
argument_list|,
literal|22
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|2
case|:
block|{
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
decl_stmt|;
name|w
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|3
case|:
block|{
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
decl_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|createDocument
argument_list|(
literal|101
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|createDocument
argument_list|(
literal|102
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|createDocument
argument_list|(
literal|103
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|4
case|:
block|{
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|reader
operator|.
name|setNorm
argument_list|(
literal|5
argument_list|,
literal|"field1"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setNorm
argument_list|(
literal|55
argument_list|,
literal|"field2"
argument_list|,
literal|222
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|5
case|:
block|{
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
decl_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|createDocument
argument_list|(
literal|101
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|assertReaderClosed
specifier|private
name|void
name|assertReaderClosed
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|boolean
name|checkSubReaders
parameter_list|,
name|boolean
name|checkNormsClosed
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkNormsClosed
operator|&&
name|reader
operator|instanceof
name|SegmentReader
condition|)
block|{
name|assertTrue
argument_list|(
operator|(
operator|(
name|SegmentReader
operator|)
name|reader
operator|)
operator|.
name|normsClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkSubReaders
condition|)
block|{
if|if
condition|(
name|reader
operator|instanceof
name|MultiSegmentReader
condition|)
block|{
name|IndexReader
index|[]
name|subReaders
init|=
name|reader
operator|.
name|getSequentialSubReaders
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subReaders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertReaderClosed
argument_list|(
name|subReaders
index|[
name|i
index|]
argument_list|,
name|checkSubReaders
argument_list|,
name|checkNormsClosed
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|reader
operator|instanceof
name|MultiReader
condition|)
block|{
name|IndexReader
index|[]
name|subReaders
init|=
name|reader
operator|.
name|getSequentialSubReaders
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subReaders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertReaderClosed
argument_list|(
name|subReaders
index|[
name|i
index|]
argument_list|,
name|checkSubReaders
argument_list|,
name|checkNormsClosed
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|reader
operator|instanceof
name|ParallelReader
condition|)
block|{
name|IndexReader
index|[]
name|subReaders
init|=
operator|(
operator|(
name|ParallelReader
operator|)
name|reader
operator|)
operator|.
name|getSubReaders
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subReaders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertReaderClosed
argument_list|(
name|subReaders
index|[
name|i
index|]
argument_list|,
name|checkSubReaders
argument_list|,
name|checkNormsClosed
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*   private void assertReaderOpen(IndexReader reader) {     reader.ensureOpen();          if (reader instanceof MultiSegmentReader) {       IndexReader[] subReaders = reader.getSequentialSubReaders();       for (int i = 0; i< subReaders.length; i++) {         assertReaderOpen(subReaders[i]);       }     }   }   */
DECL|method|assertRefCountEquals
specifier|private
name|void
name|assertRefCountEquals
parameter_list|(
name|int
name|refCount
parameter_list|,
name|IndexReader
name|reader
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Reader has wrong refCount value."
argument_list|,
name|refCount
argument_list|,
name|reader
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|TestReopen
specifier|private
specifier|abstract
specifier|static
class|class
name|TestReopen
block|{
DECL|method|openReader
specifier|protected
specifier|abstract
name|IndexReader
name|openReader
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|modifyIndex
specifier|protected
specifier|abstract
name|void
name|modifyIndex
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO Auto-generated method stub
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|String
name|tempDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tempDir
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"java.io.tmpdir undefined, cannot run test"
argument_list|)
throw|;
name|indexDir
operator|=
operator|new
name|File
argument_list|(
name|tempDir
argument_list|,
literal|"IndexReaderReopen"
argument_list|)
expr_stmt|;
block|}
comment|// LUCENE-1453
DECL|method|testFSDirectoryReopen
specifier|public
name|void
name|testFSDirectoryReopen
parameter_list|()
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|Directory
name|dir1
init|=
name|FSDirectory
operator|.
name|getDirectory
argument_list|(
name|indexDir
argument_list|)
decl_stmt|;
name|createIndex
argument_list|(
name|dir1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dir1
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|ir
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|indexDir
argument_list|)
decl_stmt|;
name|modifyIndex
argument_list|(
literal|3
argument_list|,
name|ir
operator|.
name|directory
argument_list|()
argument_list|)
expr_stmt|;
name|IndexReader
name|newIr
init|=
name|ir
operator|.
name|reopen
argument_list|()
decl_stmt|;
name|modifyIndex
argument_list|(
literal|3
argument_list|,
name|newIr
operator|.
name|directory
argument_list|()
argument_list|)
expr_stmt|;
name|IndexReader
name|newIr2
init|=
name|newIr
operator|.
name|reopen
argument_list|()
decl_stmt|;
name|modifyIndex
argument_list|(
literal|3
argument_list|,
name|newIr2
operator|.
name|directory
argument_list|()
argument_list|)
expr_stmt|;
name|IndexReader
name|newIr3
init|=
name|newIr2
operator|.
name|reopen
argument_list|()
decl_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|newIr
operator|.
name|close
argument_list|()
expr_stmt|;
name|newIr2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// shouldn't throw Directory AlreadyClosedException
name|modifyIndex
argument_list|(
literal|3
argument_list|,
name|newIr3
operator|.
name|directory
argument_list|()
argument_list|)
expr_stmt|;
name|newIr3
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1453
DECL|method|testFSDirectoryReopen2
specifier|public
name|void
name|testFSDirectoryReopen2
parameter_list|()
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|String
name|tempDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tempDir
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"java.io.tmpdir undefined, cannot run test"
argument_list|)
throw|;
name|File
name|indexDir2
init|=
operator|new
name|File
argument_list|(
name|tempDir
argument_list|,
literal|"IndexReaderReopen2"
argument_list|)
decl_stmt|;
name|Directory
name|dir1
init|=
name|FSDirectory
operator|.
name|getDirectory
argument_list|(
name|indexDir2
argument_list|)
decl_stmt|;
name|createIndex
argument_list|(
name|dir1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|IndexReader
name|lastReader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|indexDir2
argument_list|)
decl_stmt|;
name|Random
name|r
init|=
name|newRandom
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|int
name|mod
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|modifyIndex
argument_list|(
name|mod
argument_list|,
name|lastReader
operator|.
name|directory
argument_list|()
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|lastReader
operator|.
name|reopen
argument_list|()
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
name|lastReader
condition|)
block|{
name|lastReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|lastReader
operator|=
name|reader
expr_stmt|;
block|}
block|}
name|lastReader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Make sure we didn't pick up too many incRef's along
comment|// the way -- this close should be the final close:
name|dir1
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|dir1
operator|.
name|listAll
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit AlreadyClosedException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|ace
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testCloseOrig
specifier|public
name|void
name|testCloseOrig
parameter_list|()
throws|throws
name|Throwable
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|IndexReader
name|r1
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|IndexReader
name|r2
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|r2
operator|.
name|deleteDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|r2
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|r3
init|=
name|r1
operator|.
name|reopen
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|r1
operator|!=
name|r3
argument_list|)
expr_stmt|;
name|r1
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|r1
operator|.
name|document
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|ace
parameter_list|)
block|{
comment|// expected
block|}
name|r3
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testDeletes
specifier|public
name|void
name|testDeletes
parameter_list|()
throws|throws
name|Throwable
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Create an index with a bunch of docs (1 segment)
name|modifyIndex
argument_list|(
literal|0
argument_list|,
name|dir
argument_list|)
expr_stmt|;
comment|// Get delete bitVector on 1st segment
name|modifyIndex
argument_list|(
literal|5
argument_list|,
name|dir
argument_list|)
expr_stmt|;
comment|// Add a doc (2 segments)
name|IndexReader
name|r1
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
comment|// MSR
name|modifyIndex
argument_list|(
literal|5
argument_list|,
name|dir
argument_list|)
expr_stmt|;
comment|// Add another doc (3 segments)
name|IndexReader
name|r2
init|=
name|r1
operator|.
name|reopen
argument_list|()
decl_stmt|;
comment|// MSR
name|assertTrue
argument_list|(
name|r1
operator|!=
name|r2
argument_list|)
expr_stmt|;
name|SegmentReader
name|sr1
init|=
operator|(
name|SegmentReader
operator|)
name|r1
operator|.
name|getSequentialSubReaders
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
comment|// Get SRs for the first segment from original
name|SegmentReader
name|sr2
init|=
operator|(
name|SegmentReader
operator|)
name|r2
operator|.
name|getSequentialSubReaders
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
comment|// and reopened IRs
comment|// At this point they share the same BitVector
name|assertTrue
argument_list|(
name|sr1
operator|.
name|deletedDocs
operator|==
name|sr2
operator|.
name|deletedDocs
argument_list|)
expr_stmt|;
name|r2
operator|.
name|deleteDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// r1 should not see the delete
name|assertFalse
argument_list|(
name|r1
operator|.
name|isDeleted
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now r2 should have made a private copy of deleted docs:
name|assertTrue
argument_list|(
name|sr1
operator|.
name|deletedDocs
operator|!=
name|sr2
operator|.
name|deletedDocs
argument_list|)
expr_stmt|;
name|r1
operator|.
name|close
argument_list|()
expr_stmt|;
name|r2
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testDeletes2
specifier|public
name|void
name|testDeletes2
parameter_list|()
throws|throws
name|Throwable
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|createIndex
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Get delete bitVector
name|modifyIndex
argument_list|(
literal|0
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|IndexReader
name|r1
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
comment|// Add doc:
name|modifyIndex
argument_list|(
literal|5
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|IndexReader
name|r2
init|=
name|r1
operator|.
name|reopen
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|r1
operator|!=
name|r2
argument_list|)
expr_stmt|;
name|IndexReader
index|[]
name|rs2
init|=
name|r2
operator|.
name|getSequentialSubReaders
argument_list|()
decl_stmt|;
name|SegmentReader
name|sr1
init|=
operator|(
name|SegmentReader
operator|)
name|r1
decl_stmt|;
name|SegmentReader
name|sr2
init|=
operator|(
name|SegmentReader
operator|)
name|rs2
index|[
literal|0
index|]
decl_stmt|;
comment|// At this point they share the same BitVector
name|assertTrue
argument_list|(
name|sr1
operator|.
name|deletedDocs
operator|==
name|sr2
operator|.
name|deletedDocs
argument_list|)
expr_stmt|;
name|r1
operator|.
name|close
argument_list|()
expr_stmt|;
name|r2
operator|.
name|deleteDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sr1
operator|.
name|deletedDocs
operator|==
name|sr2
operator|.
name|deletedDocs
argument_list|)
expr_stmt|;
name|r2
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|KeepAllCommits
specifier|private
specifier|static
class|class
name|KeepAllCommits
implements|implements
name|IndexDeletionPolicy
block|{
DECL|method|onInit
specifier|public
name|void
name|onInit
parameter_list|(
name|List
name|commits
parameter_list|)
block|{     }
DECL|method|onCommit
specifier|public
name|void
name|onCommit
parameter_list|(
name|List
name|commits
parameter_list|)
block|{     }
block|}
DECL|method|testReopenOnCommit
specifier|public
name|void
name|testReopenOnCommit
parameter_list|()
throws|throws
name|Throwable
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
operator|new
name|KeepAllCommits
argument_list|()
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|UNLIMITED
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|(
literal|""
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|(
literal|""
operator|+
operator|(
literal|4
operator|+
name|i
operator|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|r
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|r
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|IndexReader
operator|.
name|listCommits
argument_list|(
name|dir
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IndexCommit
name|commit
init|=
operator|(
name|IndexCommit
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|IndexReader
name|r2
init|=
name|r
operator|.
name|reopen
argument_list|(
name|commit
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|r2
operator|!=
name|r
argument_list|)
expr_stmt|;
comment|// Reader should be readOnly
try|try
block|{
name|r2
operator|.
name|deleteDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"no exception hit"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|uoe
parameter_list|)
block|{
comment|// expected
block|}
specifier|final
name|String
name|s
init|=
name|commit
operator|.
name|getUserData
argument_list|()
decl_stmt|;
specifier|final
name|int
name|v
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
comment|// First commit created by IW
name|v
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|v
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|v
operator|<
literal|4
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
operator|+
name|v
argument_list|,
name|r2
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|7
operator|-
name|v
argument_list|,
name|r2
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|=
name|r2
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
