begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_class
DECL|class|TestIndexInput
specifier|public
class|class
name|TestIndexInput
extends|extends
name|LuceneTestCase
block|{
DECL|method|testRead
specifier|public
name|void
name|testRead
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexInput
name|is
init|=
operator|new
name|MockIndexInput
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0x80
block|,
literal|0x01
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
literal|0x7F
block|,
operator|(
name|byte
operator|)
literal|0x80
block|,
operator|(
name|byte
operator|)
literal|0x80
block|,
literal|0x01
block|,
operator|(
name|byte
operator|)
literal|0x81
block|,
operator|(
name|byte
operator|)
literal|0x80
block|,
literal|0x01
block|,
literal|0x06
block|,
literal|'L'
block|,
literal|'u'
block|,
literal|'c'
block|,
literal|'e'
block|,
literal|'n'
block|,
literal|'e'
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|128
argument_list|,
name|is
operator|.
name|readVInt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|16383
argument_list|,
name|is
operator|.
name|readVInt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|16384
argument_list|,
name|is
operator|.
name|readVInt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|16385
argument_list|,
name|is
operator|.
name|readVInt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Lucene"
argument_list|,
name|is
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Expert    *    * @throws IOException    */
DECL|method|testSkipChars
specifier|public
name|void
name|testSkipChars
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0x80
block|,
literal|0x01
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
literal|0x7F
block|,
operator|(
name|byte
operator|)
literal|0x80
block|,
operator|(
name|byte
operator|)
literal|0x80
block|,
literal|0x01
block|,
operator|(
name|byte
operator|)
literal|0x81
block|,
operator|(
name|byte
operator|)
literal|0x80
block|,
literal|0x01
block|,
literal|0x06
block|,
literal|'L'
block|,
literal|'u'
block|,
literal|'c'
block|,
literal|'e'
block|,
literal|'n'
block|,
literal|'e'
block|,     }
decl_stmt|;
name|String
name|utf8Str
init|=
literal|"\u0634\u1ea1"
decl_stmt|;
name|byte
index|[]
name|utf8Bytes
init|=
name|utf8Str
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|theBytes
init|=
operator|new
name|byte
index|[
name|bytes
operator|.
name|length
operator|+
literal|1
operator|+
name|utf8Bytes
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|theBytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|theBytes
index|[
name|bytes
operator|.
name|length
index|]
operator|=
operator|(
name|byte
operator|)
name|utf8Str
operator|.
name|length
argument_list|()
expr_stmt|;
comment|//Add in the number of chars we are storing, which should fit in a byte for this test
name|System
operator|.
name|arraycopy
argument_list|(
name|utf8Bytes
argument_list|,
literal|0
argument_list|,
name|theBytes
argument_list|,
name|bytes
operator|.
name|length
operator|+
literal|1
argument_list|,
name|utf8Bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|IndexInput
name|is
init|=
operator|new
name|MockIndexInput
argument_list|(
name|theBytes
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|128
argument_list|,
name|is
operator|.
name|readVInt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|16383
argument_list|,
name|is
operator|.
name|readVInt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|16384
argument_list|,
name|is
operator|.
name|readVInt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|16385
argument_list|,
name|is
operator|.
name|readVInt
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|charsToRead
init|=
name|is
operator|.
name|readVInt
argument_list|()
decl_stmt|;
comment|//number of chars in the Lucene string
name|assertTrue
argument_list|(
literal|0x06
operator|+
literal|" does not equal: "
operator|+
name|charsToRead
argument_list|,
literal|0x06
operator|==
name|charsToRead
argument_list|)
expr_stmt|;
name|is
operator|.
name|skipChars
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|char
index|[]
name|chars
init|=
operator|new
name|char
index|[
literal|3
index|]
decl_stmt|;
comment|//there should be 6 chars remaining
name|is
operator|.
name|readChars
argument_list|(
name|chars
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|String
name|tmpStr
init|=
operator|new
name|String
argument_list|(
name|chars
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tmpStr
operator|+
literal|" is not equal to "
operator|+
literal|"ene"
argument_list|,
name|tmpStr
operator|.
name|equals
argument_list|(
literal|"ene"
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
comment|//Now read the UTF8 stuff
name|charsToRead
operator|=
name|is
operator|.
name|readVInt
argument_list|()
operator|-
literal|1
expr_stmt|;
comment|//since we are skipping one
name|is
operator|.
name|skipChars
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|utf8Str
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|+
literal|" does not equal: "
operator|+
name|charsToRead
argument_list|,
name|utf8Str
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|==
name|charsToRead
argument_list|)
expr_stmt|;
name|chars
operator|=
operator|new
name|char
index|[
name|charsToRead
index|]
expr_stmt|;
name|is
operator|.
name|readChars
argument_list|(
name|chars
argument_list|,
literal|0
argument_list|,
name|charsToRead
argument_list|)
expr_stmt|;
name|tmpStr
operator|=
operator|new
name|String
argument_list|(
name|chars
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tmpStr
operator|+
literal|" is not equal to "
operator|+
name|utf8Str
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
name|tmpStr
operator|.
name|equals
argument_list|(
name|utf8Str
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
