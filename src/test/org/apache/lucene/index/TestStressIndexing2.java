begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_class
DECL|class|TestStressIndexing2
specifier|public
class|class
name|TestStressIndexing2
extends|extends
name|LuceneTestCase
block|{
DECL|field|maxFields
specifier|static
name|int
name|maxFields
init|=
literal|4
decl_stmt|;
DECL|field|bigFieldSize
specifier|static
name|int
name|bigFieldSize
init|=
literal|10
decl_stmt|;
DECL|field|sameFieldOrder
specifier|static
name|boolean
name|sameFieldOrder
init|=
literal|false
decl_stmt|;
DECL|field|mergeFactor
specifier|static
name|int
name|mergeFactor
init|=
literal|3
decl_stmt|;
DECL|field|maxBufferedDocs
specifier|static
name|int
name|maxBufferedDocs
init|=
literal|3
decl_stmt|;
DECL|field|seed
specifier|static
name|int
name|seed
init|=
literal|0
decl_stmt|;
DECL|field|r
name|Random
name|r
decl_stmt|;
DECL|class|MockIndexWriter
specifier|public
class|class
name|MockIndexWriter
extends|extends
name|IndexWriter
block|{
DECL|method|MockIndexWriter
specifier|public
name|MockIndexWriter
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|Analyzer
name|a
parameter_list|,
name|boolean
name|create
parameter_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
name|mfl
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|dir
argument_list|,
name|a
argument_list|,
name|create
argument_list|,
name|mfl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|testPoint
name|boolean
name|testPoint
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|//      if (name.equals("startCommit")) {
if|if
condition|(
name|r
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
operator|==
literal|2
condition|)
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
DECL|method|testRandomIWReader
specifier|public
name|void
name|testRandomIWReader
parameter_list|()
throws|throws
name|Throwable
block|{
name|r
operator|=
name|newRandom
argument_list|()
expr_stmt|;
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
comment|// TODO: verify equals using IW.getReader
name|DocsAndWriter
name|dw
init|=
name|indexRandomIWReader
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|100
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|IndexReader
name|r
init|=
name|dw
operator|.
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|dw
operator|.
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|verifyEquals
argument_list|(
name|r
argument_list|,
name|dir
argument_list|,
literal|"id"
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dw
operator|.
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|Throwable
block|{
name|r
operator|=
name|newRandom
argument_list|()
expr_stmt|;
name|Directory
name|dir1
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
comment|// dir1 = FSDirectory.open("foofoofoo");
name|Directory
name|dir2
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
comment|// mergeFactor=2; maxBufferedDocs=2; Map docs = indexRandom(1, 3, 2, dir1);
name|Map
argument_list|<
name|String
argument_list|,
name|Document
argument_list|>
name|docs
init|=
name|indexRandom
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|100
argument_list|,
name|dir1
argument_list|)
decl_stmt|;
name|indexSerial
argument_list|(
name|docs
argument_list|,
name|dir2
argument_list|)
expr_stmt|;
comment|// verifying verify
comment|// verifyEquals(dir1, dir1, "id");
comment|// verifyEquals(dir2, dir2, "id");
name|verifyEquals
argument_list|(
name|dir1
argument_list|,
name|dir2
argument_list|,
literal|"id"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiConfig
specifier|public
name|void
name|testMultiConfig
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// test lots of smaller different params together
name|r
operator|=
name|newRandom
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
comment|// increase iterations for better testing
name|sameFieldOrder
operator|=
name|r
operator|.
name|nextBoolean
argument_list|()
expr_stmt|;
name|mergeFactor
operator|=
name|r
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
operator|+
literal|2
expr_stmt|;
name|maxBufferedDocs
operator|=
name|r
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
operator|+
literal|2
expr_stmt|;
name|seed
operator|++
expr_stmt|;
name|int
name|nThreads
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|iter
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|range
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
operator|+
literal|1
decl_stmt|;
name|Directory
name|dir1
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|Directory
name|dir2
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Document
argument_list|>
name|docs
init|=
name|indexRandom
argument_list|(
name|nThreads
argument_list|,
name|iter
argument_list|,
name|range
argument_list|,
name|dir1
argument_list|)
decl_stmt|;
name|indexSerial
argument_list|(
name|docs
argument_list|,
name|dir2
argument_list|)
expr_stmt|;
name|verifyEquals
argument_list|(
name|dir1
argument_list|,
name|dir2
argument_list|,
literal|"id"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|idTerm
specifier|static
name|Term
name|idTerm
init|=
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
DECL|field|threads
name|IndexingThread
index|[]
name|threads
decl_stmt|;
DECL|field|fieldNameComparator
specifier|static
name|Comparator
argument_list|<
name|Fieldable
argument_list|>
name|fieldNameComparator
init|=
operator|new
name|Comparator
argument_list|<
name|Fieldable
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Fieldable
name|o1
parameter_list|,
name|Fieldable
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|name
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|// This test avoids using any extra synchronization in the multiple
comment|// indexing threads to test that IndexWriter does correctly synchronize
comment|// everything.
DECL|class|DocsAndWriter
specifier|public
specifier|static
class|class
name|DocsAndWriter
block|{
DECL|field|docs
name|Map
argument_list|<
name|String
argument_list|,
name|Document
argument_list|>
name|docs
decl_stmt|;
DECL|field|writer
name|IndexWriter
name|writer
decl_stmt|;
block|}
DECL|method|indexRandomIWReader
specifier|public
name|DocsAndWriter
name|indexRandomIWReader
parameter_list|(
name|int
name|nThreads
parameter_list|,
name|int
name|iterations
parameter_list|,
name|int
name|range
parameter_list|,
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Document
argument_list|>
name|docs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Document
argument_list|>
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|MockIndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|)
argument_list|,
literal|true
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|UNLIMITED
argument_list|)
decl_stmt|;
name|w
operator|.
name|setUseCompoundFile
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|/***         w.setMaxMergeDocs(Integer.MAX_VALUE);         w.setMaxFieldLength(10000);         w.setRAMBufferSizeMB(1);         w.setMergeFactor(10);     ***/
comment|// force many merges
name|w
operator|.
name|setMergeFactor
argument_list|(
name|mergeFactor
argument_list|)
expr_stmt|;
name|w
operator|.
name|setRAMBufferSizeMB
argument_list|(
literal|.1
argument_list|)
expr_stmt|;
name|w
operator|.
name|setMaxBufferedDocs
argument_list|(
name|maxBufferedDocs
argument_list|)
expr_stmt|;
name|threads
operator|=
operator|new
name|IndexingThread
index|[
name|nThreads
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|IndexingThread
name|th
init|=
operator|new
name|IndexingThread
argument_list|()
decl_stmt|;
name|th
operator|.
name|w
operator|=
name|w
expr_stmt|;
name|th
operator|.
name|base
operator|=
literal|1000000
operator|*
name|i
expr_stmt|;
name|th
operator|.
name|range
operator|=
name|range
expr_stmt|;
name|th
operator|.
name|iterations
operator|=
name|iterations
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|=
name|th
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|// w.optimize();
comment|//w.close();
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|IndexingThread
name|th
init|=
name|threads
index|[
name|i
index|]
decl_stmt|;
synchronized|synchronized
init|(
name|th
init|)
block|{
name|docs
operator|.
name|putAll
argument_list|(
name|th
operator|.
name|docs
argument_list|)
expr_stmt|;
block|}
block|}
name|_TestUtil
operator|.
name|checkIndex
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|DocsAndWriter
name|dw
init|=
operator|new
name|DocsAndWriter
argument_list|()
decl_stmt|;
name|dw
operator|.
name|docs
operator|=
name|docs
expr_stmt|;
name|dw
operator|.
name|writer
operator|=
name|w
expr_stmt|;
return|return
name|dw
return|;
block|}
DECL|method|indexRandom
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Document
argument_list|>
name|indexRandom
parameter_list|(
name|int
name|nThreads
parameter_list|,
name|int
name|iterations
parameter_list|,
name|int
name|range
parameter_list|,
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Document
argument_list|>
name|docs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Document
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|3
condition|;
name|iter
operator|++
control|)
block|{
name|IndexWriter
name|w
init|=
operator|new
name|MockIndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|)
argument_list|,
literal|true
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|UNLIMITED
argument_list|)
decl_stmt|;
name|w
operator|.
name|setUseCompoundFile
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// force many merges
name|w
operator|.
name|setMergeFactor
argument_list|(
name|mergeFactor
argument_list|)
expr_stmt|;
name|w
operator|.
name|setRAMBufferSizeMB
argument_list|(
literal|.1
argument_list|)
expr_stmt|;
name|w
operator|.
name|setMaxBufferedDocs
argument_list|(
name|maxBufferedDocs
argument_list|)
expr_stmt|;
name|threads
operator|=
operator|new
name|IndexingThread
index|[
name|nThreads
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|IndexingThread
name|th
init|=
operator|new
name|IndexingThread
argument_list|()
decl_stmt|;
name|th
operator|.
name|w
operator|=
name|w
expr_stmt|;
name|th
operator|.
name|base
operator|=
literal|1000000
operator|*
name|i
expr_stmt|;
name|th
operator|.
name|range
operator|=
name|range
expr_stmt|;
name|th
operator|.
name|iterations
operator|=
name|iterations
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|=
name|th
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|// w.optimize();
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|IndexingThread
name|th
init|=
name|threads
index|[
name|i
index|]
decl_stmt|;
synchronized|synchronized
init|(
name|th
init|)
block|{
name|docs
operator|.
name|putAll
argument_list|(
name|th
operator|.
name|docs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|_TestUtil
operator|.
name|checkIndex
argument_list|(
name|dir
argument_list|)
expr_stmt|;
return|return
name|docs
return|;
block|}
DECL|method|indexSerial
specifier|public
specifier|static
name|void
name|indexSerial
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Document
argument_list|>
name|docs
parameter_list|,
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|)
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|UNLIMITED
argument_list|)
decl_stmt|;
comment|// index all docs in a single thread
name|Iterator
argument_list|<
name|Document
argument_list|>
name|iter
init|=
name|docs
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Document
name|d
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Fieldable
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|Fieldable
argument_list|>
argument_list|()
decl_stmt|;
name|fields
operator|.
name|addAll
argument_list|(
name|d
operator|.
name|getFields
argument_list|()
argument_list|)
expr_stmt|;
comment|// put fields in same order each time
name|Collections
operator|.
name|sort
argument_list|(
name|fields
argument_list|,
name|fieldNameComparator
argument_list|)
expr_stmt|;
name|Document
name|d1
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d1
operator|.
name|setBoost
argument_list|(
name|d
operator|.
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|d1
operator|.
name|add
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|addDocument
argument_list|(
name|d1
argument_list|)
expr_stmt|;
comment|// System.out.println("indexing "+d1);
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|verifyEquals
specifier|public
specifier|static
name|void
name|verifyEquals
parameter_list|(
name|IndexReader
name|r1
parameter_list|,
name|Directory
name|dir2
parameter_list|,
name|String
name|idField
parameter_list|)
throws|throws
name|Throwable
block|{
name|IndexReader
name|r2
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|verifyEquals
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|,
name|idField
argument_list|)
expr_stmt|;
name|r2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|verifyEquals
specifier|public
specifier|static
name|void
name|verifyEquals
parameter_list|(
name|Directory
name|dir1
parameter_list|,
name|Directory
name|dir2
parameter_list|,
name|String
name|idField
parameter_list|)
throws|throws
name|Throwable
block|{
name|IndexReader
name|r1
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|IndexReader
name|r2
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|verifyEquals
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|,
name|idField
argument_list|)
expr_stmt|;
name|r1
operator|.
name|close
argument_list|()
expr_stmt|;
name|r2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|verifyEquals
specifier|public
specifier|static
name|void
name|verifyEquals
parameter_list|(
name|IndexReader
name|r1
parameter_list|,
name|IndexReader
name|r2
parameter_list|,
name|String
name|idField
parameter_list|)
throws|throws
name|Throwable
block|{
name|assertEquals
argument_list|(
name|r1
operator|.
name|numDocs
argument_list|()
argument_list|,
name|r2
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|hasDeletes
init|=
operator|!
operator|(
name|r1
operator|.
name|maxDoc
argument_list|()
operator|==
name|r2
operator|.
name|maxDoc
argument_list|()
operator|&&
name|r1
operator|.
name|numDocs
argument_list|()
operator|==
name|r1
operator|.
name|maxDoc
argument_list|()
operator|)
decl_stmt|;
name|int
index|[]
name|r2r1
init|=
operator|new
name|int
index|[
name|r2
operator|.
name|maxDoc
argument_list|()
index|]
decl_stmt|;
comment|// r2 id to r1 id mapping
name|TermDocs
name|termDocs1
init|=
name|r1
operator|.
name|termDocs
argument_list|()
decl_stmt|;
name|TermDocs
name|termDocs2
init|=
name|r2
operator|.
name|termDocs
argument_list|()
decl_stmt|;
comment|// create mapping from id2 space to id2 based on idField
name|idField
operator|=
name|StringHelper
operator|.
name|intern
argument_list|(
name|idField
argument_list|)
expr_stmt|;
name|TermEnum
name|termEnum
init|=
name|r1
operator|.
name|terms
argument_list|(
operator|new
name|Term
argument_list|(
name|idField
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
do|do
block|{
name|Term
name|term
init|=
name|termEnum
operator|.
name|term
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|==
literal|null
operator|||
name|term
operator|.
name|field
argument_list|()
operator|!=
name|idField
condition|)
break|break;
name|termDocs1
operator|.
name|seek
argument_list|(
name|termEnum
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|termDocs1
operator|.
name|next
argument_list|()
condition|)
block|{
comment|// This doc is deleted and wasn't replaced
name|termDocs2
operator|.
name|seek
argument_list|(
name|termEnum
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|termDocs2
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|int
name|id1
init|=
name|termDocs1
operator|.
name|doc
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|termDocs1
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|termDocs2
operator|.
name|seek
argument_list|(
name|termEnum
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|termDocs2
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|id2
init|=
name|termDocs2
operator|.
name|doc
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|termDocs2
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|r2r1
index|[
name|id2
index|]
operator|=
name|id1
expr_stmt|;
comment|// verify stored fields are equivalent
try|try
block|{
name|verifyEquals
argument_list|(
name|r1
operator|.
name|document
argument_list|(
name|id1
argument_list|)
argument_list|,
name|r2
operator|.
name|document
argument_list|(
name|id2
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"FAILED id="
operator|+
name|term
operator|+
literal|" id1="
operator|+
name|id1
operator|+
literal|" id2="
operator|+
name|id2
operator|+
literal|" term="
operator|+
name|term
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  d1="
operator|+
name|r1
operator|.
name|document
argument_list|(
name|id1
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  d2="
operator|+
name|r2
operator|.
name|document
argument_list|(
name|id2
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|t
throw|;
block|}
try|try
block|{
comment|// verify term vectors are equivalent
name|verifyEquals
argument_list|(
name|r1
operator|.
name|getTermFreqVectors
argument_list|(
name|id1
argument_list|)
argument_list|,
name|r2
operator|.
name|getTermFreqVectors
argument_list|(
name|id2
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"FAILED id="
operator|+
name|term
operator|+
literal|" id1="
operator|+
name|id1
operator|+
literal|" id2="
operator|+
name|id2
argument_list|)
expr_stmt|;
name|TermFreqVector
index|[]
name|tv1
init|=
name|r1
operator|.
name|getTermFreqVectors
argument_list|(
name|id1
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  d1="
operator|+
name|tv1
argument_list|)
expr_stmt|;
if|if
condition|(
name|tv1
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tv1
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    "
operator|+
name|i
operator|+
literal|": "
operator|+
name|tv1
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|TermFreqVector
index|[]
name|tv2
init|=
name|r2
operator|.
name|getTermFreqVectors
argument_list|(
name|id2
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  d2="
operator|+
name|tv2
argument_list|)
expr_stmt|;
if|if
condition|(
name|tv2
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tv2
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    "
operator|+
name|i
operator|+
literal|": "
operator|+
name|tv2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
do|while
condition|(
name|termEnum
operator|.
name|next
argument_list|()
condition|)
do|;
name|termEnum
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Verify postings
name|TermEnum
name|termEnum1
init|=
name|r1
operator|.
name|terms
argument_list|(
operator|new
name|Term
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|TermEnum
name|termEnum2
init|=
name|r2
operator|.
name|terms
argument_list|(
operator|new
name|Term
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
comment|// pack both doc and freq into single element for easy sorting
name|long
index|[]
name|info1
init|=
operator|new
name|long
index|[
name|r1
operator|.
name|numDocs
argument_list|()
index|]
decl_stmt|;
name|long
index|[]
name|info2
init|=
operator|new
name|long
index|[
name|r2
operator|.
name|numDocs
argument_list|()
index|]
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|Term
name|term1
decl_stmt|,
name|term2
decl_stmt|;
comment|// iterate until we get some docs
name|int
name|len1
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|len1
operator|=
literal|0
expr_stmt|;
name|term1
operator|=
name|termEnum1
operator|.
name|term
argument_list|()
expr_stmt|;
if|if
condition|(
name|term1
operator|==
literal|null
condition|)
break|break;
name|termDocs1
operator|.
name|seek
argument_list|(
name|termEnum1
argument_list|)
expr_stmt|;
while|while
condition|(
name|termDocs1
operator|.
name|next
argument_list|()
condition|)
block|{
name|int
name|d1
init|=
name|termDocs1
operator|.
name|doc
argument_list|()
decl_stmt|;
name|int
name|f1
init|=
name|termDocs1
operator|.
name|freq
argument_list|()
decl_stmt|;
name|info1
index|[
name|len1
index|]
operator|=
operator|(
operator|(
operator|(
name|long
operator|)
name|d1
operator|)
operator|<<
literal|32
operator|)
operator||
name|f1
expr_stmt|;
name|len1
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|len1
operator|>
literal|0
condition|)
break|break;
if|if
condition|(
operator|!
name|termEnum1
operator|.
name|next
argument_list|()
condition|)
break|break;
block|}
comment|// iterate until we get some docs
name|int
name|len2
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|len2
operator|=
literal|0
expr_stmt|;
name|term2
operator|=
name|termEnum2
operator|.
name|term
argument_list|()
expr_stmt|;
if|if
condition|(
name|term2
operator|==
literal|null
condition|)
break|break;
name|termDocs2
operator|.
name|seek
argument_list|(
name|termEnum2
argument_list|)
expr_stmt|;
while|while
condition|(
name|termDocs2
operator|.
name|next
argument_list|()
condition|)
block|{
name|int
name|d2
init|=
name|termDocs2
operator|.
name|doc
argument_list|()
decl_stmt|;
name|int
name|f2
init|=
name|termDocs2
operator|.
name|freq
argument_list|()
decl_stmt|;
name|info2
index|[
name|len2
index|]
operator|=
operator|(
operator|(
operator|(
name|long
operator|)
name|r2r1
index|[
name|d2
index|]
operator|)
operator|<<
literal|32
operator|)
operator||
name|f2
expr_stmt|;
name|len2
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|len2
operator|>
literal|0
condition|)
break|break;
if|if
condition|(
operator|!
name|termEnum2
operator|.
name|next
argument_list|()
condition|)
break|break;
block|}
if|if
condition|(
operator|!
name|hasDeletes
condition|)
name|assertEquals
argument_list|(
name|termEnum1
operator|.
name|docFreq
argument_list|()
argument_list|,
name|termEnum2
operator|.
name|docFreq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|len1
argument_list|,
name|len2
argument_list|)
expr_stmt|;
if|if
condition|(
name|len1
operator|==
literal|0
condition|)
break|break;
comment|// no more terms
name|assertEquals
argument_list|(
name|term1
argument_list|,
name|term2
argument_list|)
expr_stmt|;
comment|// sort info2 to get it into ascending docid
name|Arrays
operator|.
name|sort
argument_list|(
name|info2
argument_list|,
literal|0
argument_list|,
name|len2
argument_list|)
expr_stmt|;
comment|// now compare
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len1
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|info1
index|[
name|i
index|]
argument_list|,
name|info2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|termEnum1
operator|.
name|next
argument_list|()
expr_stmt|;
name|termEnum2
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|verifyEquals
specifier|public
specifier|static
name|void
name|verifyEquals
parameter_list|(
name|Document
name|d1
parameter_list|,
name|Document
name|d2
parameter_list|)
block|{
name|List
argument_list|<
name|Fieldable
argument_list|>
name|ff1
init|=
name|d1
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Fieldable
argument_list|>
name|ff2
init|=
name|d2
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|ff1
argument_list|,
name|fieldNameComparator
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|ff2
argument_list|,
name|fieldNameComparator
argument_list|)
expr_stmt|;
if|if
condition|(
name|ff1
operator|.
name|size
argument_list|()
operator|!=
name|ff2
operator|.
name|size
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ff1
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ff2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ff1
operator|.
name|size
argument_list|()
argument_list|,
name|ff2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ff1
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Fieldable
name|f1
init|=
name|ff1
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Fieldable
name|f2
init|=
name|ff2
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|f1
operator|.
name|isBinary
argument_list|()
condition|)
block|{
assert|assert
operator|(
name|f2
operator|.
name|isBinary
argument_list|()
operator|)
assert|;
comment|//TODO
block|}
else|else
block|{
name|String
name|s1
init|=
name|f1
operator|.
name|stringValue
argument_list|()
decl_stmt|;
name|String
name|s2
init|=
name|f2
operator|.
name|stringValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|s1
operator|.
name|equals
argument_list|(
name|s2
argument_list|)
condition|)
block|{
comment|// print out whole doc on error
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ff1
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ff2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|verifyEquals
specifier|public
specifier|static
name|void
name|verifyEquals
parameter_list|(
name|TermFreqVector
index|[]
name|d1
parameter_list|,
name|TermFreqVector
index|[]
name|d2
parameter_list|)
block|{
if|if
condition|(
name|d1
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|d2
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTrue
argument_list|(
name|d2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|d1
operator|.
name|length
argument_list|,
name|d2
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|TermFreqVector
name|v1
init|=
name|d1
index|[
name|i
index|]
decl_stmt|;
name|TermFreqVector
name|v2
init|=
name|d2
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|v1
operator|==
literal|null
operator|||
name|v2
operator|==
literal|null
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"v1="
operator|+
name|v1
operator|+
literal|" v2="
operator|+
name|v2
operator|+
literal|" i="
operator|+
name|i
operator|+
literal|" of "
operator|+
name|d1
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|v1
operator|.
name|size
argument_list|()
argument_list|,
name|v2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numTerms
init|=
name|v1
operator|.
name|size
argument_list|()
decl_stmt|;
name|String
index|[]
name|terms1
init|=
name|v1
operator|.
name|getTerms
argument_list|()
decl_stmt|;
name|String
index|[]
name|terms2
init|=
name|v2
operator|.
name|getTerms
argument_list|()
decl_stmt|;
name|int
index|[]
name|freq1
init|=
name|v1
operator|.
name|getTermFrequencies
argument_list|()
decl_stmt|;
name|int
index|[]
name|freq2
init|=
name|v2
operator|.
name|getTermFrequencies
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numTerms
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|terms1
index|[
name|j
index|]
operator|.
name|equals
argument_list|(
name|terms2
index|[
name|j
index|]
argument_list|)
condition|)
name|assertEquals
argument_list|(
name|terms1
index|[
name|j
index|]
argument_list|,
name|terms2
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|freq1
index|[
name|j
index|]
argument_list|,
name|freq2
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|v1
operator|instanceof
name|TermPositionVector
condition|)
block|{
name|assertTrue
argument_list|(
name|v2
operator|instanceof
name|TermPositionVector
argument_list|)
expr_stmt|;
name|TermPositionVector
name|tpv1
init|=
operator|(
name|TermPositionVector
operator|)
name|v1
decl_stmt|;
name|TermPositionVector
name|tpv2
init|=
operator|(
name|TermPositionVector
operator|)
name|v2
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numTerms
condition|;
name|j
operator|++
control|)
block|{
name|int
index|[]
name|pos1
init|=
name|tpv1
operator|.
name|getTermPositions
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|int
index|[]
name|pos2
init|=
name|tpv2
operator|.
name|getTermPositions
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|pos1
operator|.
name|length
argument_list|,
name|pos2
operator|.
name|length
argument_list|)
expr_stmt|;
name|TermVectorOffsetInfo
index|[]
name|offsets1
init|=
name|tpv1
operator|.
name|getOffsets
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|TermVectorOffsetInfo
index|[]
name|offsets2
init|=
name|tpv2
operator|.
name|getOffsets
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|offsets1
operator|==
literal|null
condition|)
name|assertTrue
argument_list|(
name|offsets2
operator|==
literal|null
argument_list|)
expr_stmt|;
else|else
name|assertTrue
argument_list|(
name|offsets2
operator|!=
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|pos1
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|pos1
index|[
name|k
index|]
argument_list|,
name|pos2
index|[
name|k
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|offsets1
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|offsets1
index|[
name|k
index|]
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|offsets2
index|[
name|k
index|]
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|offsets1
index|[
name|k
index|]
operator|.
name|getEndOffset
argument_list|()
argument_list|,
name|offsets2
index|[
name|k
index|]
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
DECL|class|IndexingThread
specifier|private
specifier|static
class|class
name|IndexingThread
extends|extends
name|Thread
block|{
DECL|field|w
name|IndexWriter
name|w
decl_stmt|;
DECL|field|base
name|int
name|base
decl_stmt|;
DECL|field|range
name|int
name|range
decl_stmt|;
DECL|field|iterations
name|int
name|iterations
decl_stmt|;
DECL|field|docs
name|Map
argument_list|<
name|String
argument_list|,
name|Document
argument_list|>
name|docs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Document
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|r
name|Random
name|r
decl_stmt|;
DECL|method|nextInt
specifier|public
name|int
name|nextInt
parameter_list|(
name|int
name|lim
parameter_list|)
block|{
return|return
name|r
operator|.
name|nextInt
argument_list|(
name|lim
argument_list|)
return|;
block|}
comment|// start is inclusive and end is exclusive
DECL|method|nextInt
specifier|public
name|int
name|nextInt
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
return|return
name|start
operator|+
name|r
operator|.
name|nextInt
argument_list|(
name|end
operator|-
name|start
argument_list|)
return|;
block|}
DECL|field|buffer
name|char
index|[]
name|buffer
init|=
operator|new
name|char
index|[
literal|100
index|]
decl_stmt|;
DECL|method|addUTF8Token
specifier|private
name|int
name|addUTF8Token
parameter_list|(
name|int
name|start
parameter_list|)
block|{
specifier|final
name|int
name|end
init|=
name|start
operator|+
name|nextInt
argument_list|(
literal|20
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer
operator|.
name|length
operator|<
literal|1
operator|+
name|end
condition|)
block|{
name|char
index|[]
name|newBuffer
init|=
operator|new
name|char
index|[
call|(
name|int
call|)
argument_list|(
operator|(
literal|1
operator|+
name|end
operator|)
operator|*
literal|1.25
argument_list|)
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|newBuffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
name|buffer
operator|=
name|newBuffer
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|int
name|t
init|=
name|nextInt
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|t
operator|&&
name|i
operator|<
name|end
operator|-
literal|1
condition|)
block|{
comment|// Make a surrogate pair
comment|// High surrogate
name|buffer
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|char
operator|)
name|nextInt
argument_list|(
literal|0xd800
argument_list|,
literal|0xdc00
argument_list|)
expr_stmt|;
comment|// Low surrogate
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|nextInt
argument_list|(
literal|0xdc00
argument_list|,
literal|0xe000
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|t
operator|<=
literal|1
condition|)
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|nextInt
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
literal|2
operator|==
name|t
condition|)
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|nextInt
argument_list|(
literal|0x80
argument_list|,
literal|0x800
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
literal|3
operator|==
name|t
condition|)
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|nextInt
argument_list|(
literal|0x800
argument_list|,
literal|0xd800
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
literal|4
operator|==
name|t
condition|)
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|nextInt
argument_list|(
literal|0xe000
argument_list|,
literal|0xffff
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
literal|5
operator|==
name|t
condition|)
block|{
comment|// Illegal unpaired surrogate
if|if
condition|(
name|r
operator|.
name|nextBoolean
argument_list|()
condition|)
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|nextInt
argument_list|(
literal|0xd800
argument_list|,
literal|0xdc00
argument_list|)
expr_stmt|;
else|else
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|nextInt
argument_list|(
literal|0xdc00
argument_list|,
literal|0xe000
argument_list|)
expr_stmt|;
block|}
block|}
name|buffer
index|[
name|end
index|]
operator|=
literal|' '
expr_stmt|;
return|return
literal|1
operator|+
name|end
return|;
block|}
DECL|method|getString
specifier|public
name|String
name|getString
parameter_list|(
name|int
name|nTokens
parameter_list|)
block|{
name|nTokens
operator|=
name|nTokens
operator|!=
literal|0
condition|?
name|nTokens
else|:
name|r
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
operator|+
literal|1
expr_stmt|;
comment|// Half the time make a random UTF8 string
if|if
condition|(
name|r
operator|.
name|nextBoolean
argument_list|()
condition|)
return|return
name|getUTF8String
argument_list|(
name|nTokens
argument_list|)
return|;
comment|// avoid StringBuffer because it adds extra synchronization.
name|char
index|[]
name|arr
init|=
operator|new
name|char
index|[
name|nTokens
operator|*
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nTokens
condition|;
name|i
operator|++
control|)
block|{
name|arr
index|[
name|i
operator|*
literal|2
index|]
operator|=
call|(
name|char
call|)
argument_list|(
literal|'A'
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|arr
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
operator|=
literal|' '
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|arr
argument_list|)
return|;
block|}
DECL|method|getUTF8String
specifier|public
name|String
name|getUTF8String
parameter_list|(
name|int
name|nTokens
parameter_list|)
block|{
name|int
name|upto
init|=
literal|0
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|buffer
argument_list|,
operator|(
name|char
operator|)
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nTokens
condition|;
name|i
operator|++
control|)
name|upto
operator|=
name|addUTF8Token
argument_list|(
name|upto
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|upto
argument_list|)
return|;
block|}
DECL|method|getIdString
specifier|public
name|String
name|getIdString
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|base
operator|+
name|nextInt
argument_list|(
name|range
argument_list|)
argument_list|)
return|;
block|}
DECL|method|indexDoc
specifier|public
name|void
name|indexDoc
parameter_list|()
throws|throws
name|IOException
block|{
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Field
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|Field
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|idString
init|=
name|getIdString
argument_list|()
decl_stmt|;
name|Field
name|idField
init|=
operator|new
name|Field
argument_list|(
name|idTerm
operator|.
name|field
argument_list|()
argument_list|,
name|idString
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED_NO_NORMS
argument_list|)
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
name|idField
argument_list|)
expr_stmt|;
name|int
name|nFields
init|=
name|nextInt
argument_list|(
name|maxFields
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nFields
condition|;
name|i
operator|++
control|)
block|{
name|Field
operator|.
name|TermVector
name|tvVal
init|=
name|Field
operator|.
name|TermVector
operator|.
name|NO
decl_stmt|;
switch|switch
condition|(
name|nextInt
argument_list|(
literal|4
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|tvVal
operator|=
name|Field
operator|.
name|TermVector
operator|.
name|NO
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|tvVal
operator|=
name|Field
operator|.
name|TermVector
operator|.
name|YES
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|tvVal
operator|=
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|tvVal
operator|=
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
expr_stmt|;
break|break;
block|}
switch|switch
condition|(
name|nextInt
argument_list|(
literal|4
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
name|fields
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f"
operator|+
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|,
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED_NO_NORMS
argument_list|,
name|tvVal
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|fields
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f"
operator|+
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|,
name|getString
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|tvVal
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|fields
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f"
operator|+
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|,
name|getString
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|fields
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f"
operator|+
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|,
name|getString
argument_list|(
name|bigFieldSize
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|tvVal
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|sameFieldOrder
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|fields
argument_list|,
name|fieldNameComparator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// random placement of id field also
name|Collections
operator|.
name|swap
argument_list|(
name|fields
argument_list|,
name|nextInt
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|d
operator|.
name|add
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|updateDocument
argument_list|(
name|idTerm
operator|.
name|createTerm
argument_list|(
name|idString
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
comment|// System.out.println("indexing "+d);
name|docs
operator|.
name|put
argument_list|(
name|idString
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteDoc
specifier|public
name|void
name|deleteDoc
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|idString
init|=
name|getIdString
argument_list|()
decl_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
name|idTerm
operator|.
name|createTerm
argument_list|(
name|idString
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|remove
argument_list|(
name|idString
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteByQuery
specifier|public
name|void
name|deleteByQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|idString
init|=
name|getIdString
argument_list|()
decl_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|idTerm
operator|.
name|createTerm
argument_list|(
name|idString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|remove
argument_list|(
name|idString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|r
operator|=
operator|new
name|Random
argument_list|(
name|base
operator|+
name|range
operator|+
name|seed
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|int
name|what
init|=
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
name|what
operator|<
literal|5
condition|)
block|{
name|deleteDoc
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|what
operator|<
literal|10
condition|)
block|{
name|deleteByQuery
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|indexDoc
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|TestCase
operator|.
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|docs
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
