begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_class
DECL|class|TestTermVectorsWriter
specifier|public
class|class
name|TestTermVectorsWriter
extends|extends
name|TestCase
block|{
DECL|field|testTerms
specifier|private
name|String
index|[]
name|testTerms
init|=
block|{
literal|"this"
block|,
literal|"is"
block|,
literal|"a"
block|,
literal|"test"
block|}
decl_stmt|;
DECL|field|testFields
specifier|private
name|String
index|[]
name|testFields
init|=
block|{
literal|"f1"
block|,
literal|"f2"
block|,
literal|"f3"
block|}
decl_stmt|;
DECL|field|positions
specifier|private
name|int
index|[]
index|[]
name|positions
init|=
operator|new
name|int
index|[
name|testTerms
operator|.
name|length
index|]
index|[]
decl_stmt|;
DECL|field|dir
specifier|private
name|RAMDirectory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
DECL|field|seg
specifier|private
name|String
name|seg
init|=
literal|"testSegment"
decl_stmt|;
DECL|field|fieldInfos
specifier|private
name|FieldInfos
name|fieldInfos
init|=
operator|new
name|FieldInfos
argument_list|()
decl_stmt|;
DECL|method|TestTermVectorsWriter
specifier|public
name|TestTermVectorsWriter
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fieldInfos
operator|.
name|add
argument_list|(
name|testFields
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testTerms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|positions
index|[
name|i
index|]
operator|=
operator|new
name|int
index|[
literal|5
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|positions
index|[
name|i
index|]
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|positions
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|j
operator|*
literal|10
expr_stmt|;
block|}
block|}
block|}
DECL|method|tearDown
specifier|protected
name|void
name|tearDown
parameter_list|()
block|{   }
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|dir
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|positions
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/*public void testWriteNoPositions() {     try {       TermVectorsWriter writer = new TermVectorsWriter(dir, seg, 50);       writer.openDocument();       assertTrue(writer.isDocumentOpen() == true);       writer.openField(0);       assertTrue(writer.isFieldOpen() == true);       for (int i = 0; i< testTerms.length; i++) {         writer.addTerm(testTerms[i], i);       }       writer.closeField();              writer.closeDocument();       writer.close();       assertTrue(writer.isDocumentOpen() == false);       //Check to see the files were created       assertTrue(dir.fileExists(seg + TermVectorsWriter.TVD_EXTENSION));       assertTrue(dir.fileExists(seg + TermVectorsWriter.TVX_EXTENSION));       //Now read it back in       TermVectorsReader reader = new TermVectorsReader(dir, seg);       assertTrue(reader != null);       checkTermVector(reader, 0, 0);     } catch (IOException e) {       e.printStackTrace();       assertTrue(false);     }   }  */
DECL|method|testWriter
specifier|public
name|void
name|testWriter
parameter_list|()
block|{
try|try
block|{
name|TermVectorsWriter
name|writer
init|=
operator|new
name|TermVectorsWriter
argument_list|(
name|dir
argument_list|,
name|seg
argument_list|,
name|fieldInfos
argument_list|)
decl_stmt|;
name|writer
operator|.
name|openDocument
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|writer
operator|.
name|isDocumentOpen
argument_list|()
operator|==
literal|true
argument_list|)
expr_stmt|;
name|writeField
argument_list|(
name|writer
argument_list|,
name|testFields
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|writer
operator|.
name|closeDocument
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|writer
operator|.
name|isDocumentOpen
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
comment|//Check to see the files were created
name|assertTrue
argument_list|(
name|dir
operator|.
name|fileExists
argument_list|(
name|seg
operator|+
name|TermVectorsWriter
operator|.
name|TVD_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dir
operator|.
name|fileExists
argument_list|(
name|seg
operator|+
name|TermVectorsWriter
operator|.
name|TVX_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
comment|//Now read it back in
name|TermVectorsReader
name|reader
init|=
operator|new
name|TermVectorsReader
argument_list|(
name|dir
argument_list|,
name|seg
argument_list|,
name|fieldInfos
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|checkTermVector
argument_list|(
name|reader
argument_list|,
literal|0
argument_list|,
name|testFields
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkTermVector
specifier|private
name|void
name|checkTermVector
parameter_list|(
name|TermVectorsReader
name|reader
parameter_list|,
name|int
name|docNum
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|TermFreqVector
name|vector
init|=
name|reader
operator|.
name|get
argument_list|(
name|docNum
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|vector
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|String
index|[]
name|terms
init|=
name|vector
operator|.
name|getTerms
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|terms
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|terms
operator|.
name|length
operator|==
name|testTerms
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|term
init|=
name|terms
index|[
name|i
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|term
operator|.
name|equals
argument_list|(
name|testTerms
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test one document, multiple fields    */
DECL|method|testMultipleFields
specifier|public
name|void
name|testMultipleFields
parameter_list|()
block|{
try|try
block|{
name|TermVectorsWriter
name|writer
init|=
operator|new
name|TermVectorsWriter
argument_list|(
name|dir
argument_list|,
name|seg
argument_list|,
name|fieldInfos
argument_list|)
decl_stmt|;
name|writeDocument
argument_list|(
name|writer
argument_list|,
name|testFields
operator|.
name|length
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|writer
operator|.
name|isDocumentOpen
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
comment|//Check to see the files were created
name|assertTrue
argument_list|(
name|dir
operator|.
name|fileExists
argument_list|(
name|seg
operator|+
name|TermVectorsWriter
operator|.
name|TVD_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dir
operator|.
name|fileExists
argument_list|(
name|seg
operator|+
name|TermVectorsWriter
operator|.
name|TVX_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
comment|//Now read it back in
name|TermVectorsReader
name|reader
init|=
operator|new
name|TermVectorsReader
argument_list|(
name|dir
argument_list|,
name|seg
argument_list|,
name|fieldInfos
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|!=
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|testFields
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|checkTermVector
argument_list|(
name|reader
argument_list|,
literal|0
argument_list|,
name|testFields
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeDocument
specifier|private
name|void
name|writeDocument
parameter_list|(
name|TermVectorsWriter
name|writer
parameter_list|,
name|int
name|numFields
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|openDocument
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|writer
operator|.
name|isDocumentOpen
argument_list|()
operator|==
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numFields
condition|;
name|j
operator|++
control|)
block|{
name|writeField
argument_list|(
name|writer
argument_list|,
name|testFields
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|closeDocument
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|writer
operator|.
name|isDocumentOpen
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    *     * @param writer The writer to write to    * @param f The field name    * @throws IOException    */
DECL|method|writeField
specifier|private
name|void
name|writeField
parameter_list|(
name|TermVectorsWriter
name|writer
parameter_list|,
name|String
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|openField
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|writer
operator|.
name|isFieldOpen
argument_list|()
operator|==
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testTerms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|addTerm
argument_list|(
name|testTerms
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|closeField
argument_list|()
expr_stmt|;
block|}
DECL|method|testMultipleDocuments
specifier|public
name|void
name|testMultipleDocuments
parameter_list|()
block|{
try|try
block|{
name|TermVectorsWriter
name|writer
init|=
operator|new
name|TermVectorsWriter
argument_list|(
name|dir
argument_list|,
name|seg
argument_list|,
name|fieldInfos
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|writer
operator|!=
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|writeDocument
argument_list|(
name|writer
argument_list|,
name|testFields
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|//Do some arbitrary tests
try|try
block|{
name|TermVectorsReader
name|reader
init|=
operator|new
name|TermVectorsReader
argument_list|(
name|dir
argument_list|,
name|seg
argument_list|,
name|fieldInfos
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|reader
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|checkTermVector
argument_list|(
name|reader
argument_list|,
literal|5
argument_list|,
name|testFields
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|checkTermVector
argument_list|(
name|reader
argument_list|,
literal|2
argument_list|,
name|testFields
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBadSegment
specifier|public
name|void
name|testBadSegment
parameter_list|()
block|{
try|try
block|{
name|dir
operator|=
operator|new
name|RAMDirectory
argument_list|()
expr_stmt|;
name|IndexWriter
name|ir
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tvtest"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
comment|// throws exception, works with Field.TermVector.NO
name|ir
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
