begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|WhitespaceAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Similarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_class
DECL|class|TestSegmentTermDocs
specifier|public
class|class
name|TestSegmentTermDocs
extends|extends
name|TestCase
block|{
DECL|field|testDoc
specifier|private
name|Document
name|testDoc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
DECL|field|dir
specifier|private
name|Directory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
DECL|method|TestSegmentTermDocs
specifier|public
name|TestSegmentTermDocs
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
name|DocHelper
operator|.
name|setupDoc
argument_list|(
name|testDoc
argument_list|)
expr_stmt|;
name|DocHelper
operator|.
name|writeDoc
argument_list|(
name|dir
argument_list|,
name|testDoc
argument_list|)
expr_stmt|;
block|}
DECL|method|tearDown
specifier|protected
name|void
name|tearDown
parameter_list|()
block|{    }
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|dir
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testTermDocs
specifier|public
name|void
name|testTermDocs
parameter_list|()
block|{
try|try
block|{
comment|//After adding the document, we should be able to read it back in
name|SegmentReader
name|reader
init|=
operator|new
name|SegmentReader
argument_list|(
operator|new
name|SegmentInfo
argument_list|(
literal|"test"
argument_list|,
literal|1
argument_list|,
name|dir
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|SegmentTermDocs
name|segTermDocs
init|=
operator|new
name|SegmentTermDocs
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|segTermDocs
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|segTermDocs
operator|.
name|seek
argument_list|(
operator|new
name|Term
argument_list|(
name|DocHelper
operator|.
name|TEXT_FIELD_2_KEY
argument_list|,
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|segTermDocs
operator|.
name|next
argument_list|()
operator|==
literal|true
condition|)
block|{
name|int
name|docId
init|=
name|segTermDocs
operator|.
name|doc
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|docId
operator|==
literal|0
argument_list|)
expr_stmt|;
name|int
name|freq
init|=
name|segTermDocs
operator|.
name|freq
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|freq
operator|==
literal|3
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBadSeek
specifier|public
name|void
name|testBadSeek
parameter_list|()
block|{
try|try
block|{
comment|//After adding the document, we should be able to read it back in
name|SegmentReader
name|reader
init|=
operator|new
name|SegmentReader
argument_list|(
operator|new
name|SegmentInfo
argument_list|(
literal|"test"
argument_list|,
literal|3
argument_list|,
name|dir
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|SegmentTermDocs
name|segTermDocs
init|=
operator|new
name|SegmentTermDocs
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|segTermDocs
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|segTermDocs
operator|.
name|seek
argument_list|(
operator|new
name|Term
argument_list|(
literal|"textField2"
argument_list|,
literal|"bad"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segTermDocs
operator|.
name|next
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|//After adding the document, we should be able to read it back in
name|SegmentReader
name|reader
init|=
operator|new
name|SegmentReader
argument_list|(
operator|new
name|SegmentInfo
argument_list|(
literal|"test"
argument_list|,
literal|3
argument_list|,
name|dir
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|SegmentTermDocs
name|segTermDocs
init|=
operator|new
name|SegmentTermDocs
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|segTermDocs
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|segTermDocs
operator|.
name|seek
argument_list|(
operator|new
name|Term
argument_list|(
literal|"junk"
argument_list|,
literal|"bad"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|segTermDocs
operator|.
name|next
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
