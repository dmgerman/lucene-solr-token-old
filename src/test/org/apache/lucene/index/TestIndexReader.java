begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|textui
operator|.
name|TestRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|WhitespaceAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
operator|.
name|FieldOption
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|LockObtainFailedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|MockRAMDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_class
DECL|class|TestIndexReader
specifier|public
class|class
name|TestIndexReader
extends|extends
name|LuceneTestCase
block|{
comment|/** Main for running test case by itself. */
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
name|TestRunner
operator|.
name|run
argument_list|(
operator|new
name|TestSuite
argument_list|(
name|TestIndexReader
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|//        TestRunner.run (new TestIndexReader("testBasicDelete"));
comment|//        TestRunner.run (new TestIndexReader("testDeleteReaderWriterConflict"));
comment|//        TestRunner.run (new TestIndexReader("testDeleteReaderReaderConflict"));
comment|//        TestRunner.run (new TestIndexReader("testFilesOpenClose"));
block|}
DECL|method|TestIndexReader
specifier|public
name|TestIndexReader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsCurrent
specifier|public
name|void
name|testIsCurrent
parameter_list|()
throws|throws
name|Exception
block|{
name|RAMDirectory
name|d
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|d
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
decl_stmt|;
name|addDocumentWithFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// set up reader:
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
comment|// modify index by adding another document:
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|d
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|()
argument_list|,
literal|false
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
expr_stmt|;
name|addDocumentWithFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|reader
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
comment|// re-create index:
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|d
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
expr_stmt|;
name|addDocumentWithFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|reader
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the IndexReader.getFieldNames implementation      * @throws Exception on error      */
DECL|method|testGetFieldNames
specifier|public
name|void
name|testGetFieldNames
parameter_list|()
throws|throws
name|Exception
block|{
name|RAMDirectory
name|d
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
comment|// set up writer
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|d
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
decl_stmt|;
name|addDocumentWithFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// set up reader
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|Collection
name|fieldNames
init|=
name|reader
operator|.
name|getFieldNames
argument_list|(
name|IndexReader
operator|.
name|FieldOption
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"keyword"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"unindexed"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"unstored"
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// add more documents
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|d
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|()
argument_list|,
literal|false
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
expr_stmt|;
comment|// want to get some more segments here
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
operator|*
name|writer
operator|.
name|getMergeFactor
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|addDocumentWithFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
comment|// new fields are in some different segments (we hope)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
operator|*
name|writer
operator|.
name|getMergeFactor
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|addDocumentWithDifferentFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
comment|// new termvector fields
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
operator|*
name|writer
operator|.
name|getMergeFactor
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|addDocumentWithTermVectorFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// verify fields again
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|fieldNames
operator|=
name|reader
operator|.
name|getFieldNames
argument_list|(
name|IndexReader
operator|.
name|FieldOption
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|13
argument_list|,
name|fieldNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// the following fields
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"keyword"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"unindexed"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"unstored"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"keyword2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"text2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"unindexed2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"unstored2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"tvnot"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"termvector"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"tvposition"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"tvoffset"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"tvpositionoffset"
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify that only indexed fields were returned
name|fieldNames
operator|=
name|reader
operator|.
name|getFieldNames
argument_list|(
name|IndexReader
operator|.
name|FieldOption
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|fieldNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 6 original + the 5 termvector fields
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"keyword"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"unstored"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"keyword2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"text2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"unstored2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"tvnot"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"termvector"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"tvposition"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"tvoffset"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"tvpositionoffset"
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify that only unindexed fields were returned
name|fieldNames
operator|=
name|reader
operator|.
name|getFieldNames
argument_list|(
name|IndexReader
operator|.
name|FieldOption
operator|.
name|UNINDEXED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fieldNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// the following fields
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"unindexed"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"unindexed2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify index term vector fields
name|fieldNames
operator|=
name|reader
operator|.
name|getFieldNames
argument_list|(
name|IndexReader
operator|.
name|FieldOption
operator|.
name|TERMVECTOR
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fieldNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1 field has term vector only
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"termvector"
argument_list|)
argument_list|)
expr_stmt|;
name|fieldNames
operator|=
name|reader
operator|.
name|getFieldNames
argument_list|(
name|IndexReader
operator|.
name|FieldOption
operator|.
name|TERMVECTOR_WITH_POSITION
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fieldNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 4 fields are indexed with term vectors
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"tvposition"
argument_list|)
argument_list|)
expr_stmt|;
name|fieldNames
operator|=
name|reader
operator|.
name|getFieldNames
argument_list|(
name|IndexReader
operator|.
name|FieldOption
operator|.
name|TERMVECTOR_WITH_OFFSET
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fieldNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 4 fields are indexed with term vectors
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"tvoffset"
argument_list|)
argument_list|)
expr_stmt|;
name|fieldNames
operator|=
name|reader
operator|.
name|getFieldNames
argument_list|(
name|IndexReader
operator|.
name|FieldOption
operator|.
name|TERMVECTOR_WITH_POSITION_OFFSET
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fieldNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 4 fields are indexed with term vectors
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"tvpositionoffset"
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testTermVectors
specifier|public
name|void
name|testTermVectors
parameter_list|()
throws|throws
name|Exception
block|{
name|RAMDirectory
name|d
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
comment|// set up writer
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|d
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
decl_stmt|;
comment|// want to get some more segments here
comment|// new termvector fields
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
operator|*
name|writer
operator|.
name|getMergeFactor
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tvnot"
argument_list|,
literal|"one two two three three three"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"termvector"
argument_list|,
literal|"one two two three three three"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tvoffset"
argument_list|,
literal|"one two two three three three"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tvposition"
argument_list|,
literal|"one two two three three three"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tvpositionoffset"
argument_list|,
literal|"one two two three three three"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|FieldSortedTermVectorMapper
name|mapper
init|=
operator|new
name|FieldSortedTermVectorMapper
argument_list|(
operator|new
name|TermVectorEntryFreqSortedComparator
argument_list|()
argument_list|)
decl_stmt|;
name|reader
operator|.
name|getTermFreqVector
argument_list|(
literal|0
argument_list|,
name|mapper
argument_list|)
expr_stmt|;
name|Map
name|map
init|=
name|mapper
operator|.
name|getFieldToTerms
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"map is null and it shouldn't be"
argument_list|,
name|map
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"map Size: "
operator|+
name|map
operator|.
name|size
argument_list|()
operator|+
literal|" is not: "
operator|+
literal|4
argument_list|,
name|map
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|Set
name|set
init|=
operator|(
name|Set
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"termvector"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|iterator
init|=
name|set
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TermVectorEntry
name|entry
init|=
operator|(
name|TermVectorEntry
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"entry is null and it shouldn't be"
argument_list|,
name|entry
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Entry: "
operator|+
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertTermDocsCount
specifier|private
name|void
name|assertTermDocsCount
parameter_list|(
name|String
name|msg
parameter_list|,
name|IndexReader
name|reader
parameter_list|,
name|Term
name|term
parameter_list|,
name|int
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|TermDocs
name|tdocs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tdocs
operator|=
name|reader
operator|.
name|termDocs
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|msg
operator|+
literal|", null TermDocs"
argument_list|,
name|tdocs
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|tdocs
operator|.
name|next
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|msg
operator|+
literal|", count mismatch"
argument_list|,
name|expected
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|tdocs
operator|!=
literal|null
condition|)
name|tdocs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testBasicDelete
specifier|public
name|void
name|testBasicDelete
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
literal|null
decl_stmt|;
name|IndexReader
name|reader
init|=
literal|null
decl_stmt|;
name|Term
name|searchTerm
init|=
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|)
decl_stmt|;
comment|//  add 100 documents with term : aaa
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|,
name|searchTerm
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// OPEN READER AT THIS POINT - this should fix the view of the
comment|// index at the point of having 100 "aaa" documents and 0 "bbb"
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"first docFreq"
argument_list|,
literal|100
argument_list|,
name|reader
operator|.
name|docFreq
argument_list|(
name|searchTerm
argument_list|)
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"first reader"
argument_list|,
name|reader
argument_list|,
name|searchTerm
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// DELETE DOCUMENTS CONTAINING TERM: aaa
name|int
name|deleted
init|=
literal|0
decl_stmt|;
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|deleted
operator|=
name|reader
operator|.
name|deleteDocuments
argument_list|(
name|searchTerm
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"deleted count"
argument_list|,
literal|100
argument_list|,
name|deleted
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"deleted docFreq"
argument_list|,
literal|100
argument_list|,
name|reader
operator|.
name|docFreq
argument_list|(
name|searchTerm
argument_list|)
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"deleted termDocs"
argument_list|,
name|reader
argument_list|,
name|searchTerm
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// open a 2nd reader to make sure first reader can
comment|// commit its changes (.del) while second reader
comment|// is open:
name|IndexReader
name|reader2
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// CREATE A NEW READER and re-test
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"deleted docFreq"
argument_list|,
literal|100
argument_list|,
name|reader
operator|.
name|docFreq
argument_list|(
name|searchTerm
argument_list|)
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"deleted termDocs"
argument_list|,
name|reader
argument_list|,
name|searchTerm
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader2
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Make sure attempts to make changes after reader is
comment|// closed throws IOException:
DECL|method|testChangesAfterClose
specifier|public
name|void
name|testChangesAfterClose
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
literal|null
decl_stmt|;
name|IndexReader
name|reader
init|=
literal|null
decl_stmt|;
name|Term
name|searchTerm
init|=
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|)
decl_stmt|;
comment|//  add 11 documents with term : aaa
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|11
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|,
name|searchTerm
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// Close reader:
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Then, try to make changes:
try|try
block|{
name|reader
operator|.
name|deleteDocument
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"deleteDocument after close failed to throw IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|reader
operator|.
name|setNorm
argument_list|(
literal|5
argument_list|,
literal|"aaa"
argument_list|,
literal|2.0f
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"setNorm after close failed to throw IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|reader
operator|.
name|undeleteAll
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"undeleteAll after close failed to throw IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
comment|// Make sure we get lock obtain failed exception with 2 writers:
DECL|method|testLockObtainFailed
specifier|public
name|void
name|testLockObtainFailed
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
literal|null
decl_stmt|;
name|IndexReader
name|reader
init|=
literal|null
decl_stmt|;
name|Term
name|searchTerm
init|=
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|)
decl_stmt|;
comment|//  add 11 documents with term : aaa
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|11
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|,
name|searchTerm
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Create reader:
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// Try to make changes
try|try
block|{
name|reader
operator|.
name|deleteDocument
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"deleteDocument should have hit LockObtainFailedException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockObtainFailedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|reader
operator|.
name|setNorm
argument_list|(
literal|5
argument_list|,
literal|"aaa"
argument_list|,
literal|2.0f
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"setNorm should have hit LockObtainFailedException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockObtainFailedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|reader
operator|.
name|undeleteAll
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"undeleteAll should have hit LockObtainFailedException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockObtainFailedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Make sure you can set norms& commit even if a reader
comment|// is open against the index:
DECL|method|testWritingNorms
specifier|public
name|void
name|testWritingNorms
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|tempDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"tempDir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tempDir
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"tempDir undefined, cannot run test"
argument_list|)
throw|;
name|File
name|indexDir
init|=
operator|new
name|File
argument_list|(
name|tempDir
argument_list|,
literal|"lucenetestnormwriter"
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
name|FSDirectory
operator|.
name|getDirectory
argument_list|(
name|indexDir
argument_list|)
decl_stmt|;
name|IndexWriter
name|writer
decl_stmt|;
name|IndexReader
name|reader
decl_stmt|;
name|Term
name|searchTerm
init|=
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|)
decl_stmt|;
comment|//  add 1 documents with term : aaa
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
name|writer
argument_list|,
name|searchTerm
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//  now open reader& set norm for doc 0
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setNorm
argument_list|(
literal|0
argument_list|,
literal|"content"
argument_list|,
operator|(
name|float
operator|)
literal|2.0
argument_list|)
expr_stmt|;
comment|// we should be holding the write lock now:
name|assertTrue
argument_list|(
literal|"locked"
argument_list|,
name|IndexReader
operator|.
name|isLocked
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// we should not be holding the write lock now:
name|assertTrue
argument_list|(
literal|"not locked"
argument_list|,
operator|!
name|IndexReader
operator|.
name|isLocked
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
comment|// open a 2nd reader:
name|IndexReader
name|reader2
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
comment|// set norm again for doc 0
name|reader
operator|.
name|setNorm
argument_list|(
literal|0
argument_list|,
literal|"content"
argument_list|,
operator|(
name|float
operator|)
literal|3.0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"locked"
argument_list|,
name|IndexReader
operator|.
name|isLocked
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// we should not be holding the write lock now:
name|assertTrue
argument_list|(
literal|"not locked"
argument_list|,
operator|!
name|IndexReader
operator|.
name|isLocked
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|reader2
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|rmDir
argument_list|(
name|indexDir
argument_list|)
expr_stmt|;
block|}
comment|// Make sure you can set norms& commit, and there are
comment|// no extra norms files left:
DECL|method|testWritingNormsNoReader
specifier|public
name|void
name|testWritingNormsNoReader
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
literal|null
decl_stmt|;
name|IndexReader
name|reader
init|=
literal|null
decl_stmt|;
name|Term
name|searchTerm
init|=
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|)
decl_stmt|;
comment|//  add 1 documents with term : aaa
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setUseCompoundFile
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
name|writer
argument_list|,
name|searchTerm
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//  now open reader& set norm for doc 0 (writes to
comment|//  _0_1.s0)
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setNorm
argument_list|(
literal|0
argument_list|,
literal|"content"
argument_list|,
operator|(
name|float
operator|)
literal|2.0
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//  now open reader again& set norm for doc 0 (writes to _0_2.s0)
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setNorm
argument_list|(
literal|0
argument_list|,
literal|"content"
argument_list|,
operator|(
name|float
operator|)
literal|2.0
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"failed to remove first generation norms file on writing second generation"
argument_list|,
name|dir
operator|.
name|fileExists
argument_list|(
literal|"_0_1.s0"
argument_list|)
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testDeleteReaderWriterConflictUnoptimized
specifier|public
name|void
name|testDeleteReaderWriterConflictUnoptimized
parameter_list|()
throws|throws
name|IOException
block|{
name|deleteReaderWriterConflict
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testOpenEmptyDirectory
specifier|public
name|void
name|testOpenEmptyDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|dirName
init|=
literal|"test.empty"
decl_stmt|;
name|File
name|fileDirName
init|=
operator|new
name|File
argument_list|(
name|dirName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileDirName
operator|.
name|exists
argument_list|()
condition|)
block|{
name|fileDirName
operator|.
name|mkdir
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|IndexReader
operator|.
name|open
argument_list|(
name|fileDirName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"opening IndexReader on empty directory failed to produce FileNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// GOOD
block|}
name|rmDir
argument_list|(
name|fileDirName
argument_list|)
expr_stmt|;
block|}
DECL|method|testDeleteReaderWriterConflictOptimized
specifier|public
name|void
name|testDeleteReaderWriterConflictOptimized
parameter_list|()
throws|throws
name|IOException
block|{
name|deleteReaderWriterConflict
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteReaderWriterConflict
specifier|private
name|void
name|deleteReaderWriterConflict
parameter_list|(
name|boolean
name|optimize
parameter_list|)
throws|throws
name|IOException
block|{
comment|//Directory dir = new RAMDirectory();
name|Directory
name|dir
init|=
name|getDirectory
argument_list|()
decl_stmt|;
name|Term
name|searchTerm
init|=
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|)
decl_stmt|;
name|Term
name|searchTerm2
init|=
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"bbb"
argument_list|)
decl_stmt|;
comment|//  add 100 documents with term : aaa
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|,
name|searchTerm
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// OPEN READER AT THIS POINT - this should fix the view of the
comment|// index at the point of having 100 "aaa" documents and 0 "bbb"
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"first docFreq"
argument_list|,
literal|100
argument_list|,
name|reader
operator|.
name|docFreq
argument_list|(
name|searchTerm
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"first docFreq"
argument_list|,
literal|0
argument_list|,
name|reader
operator|.
name|docFreq
argument_list|(
name|searchTerm2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"first reader"
argument_list|,
name|reader
argument_list|,
name|searchTerm
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"first reader"
argument_list|,
name|reader
argument_list|,
name|searchTerm2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// add 100 documents with term : bbb
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
literal|false
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|,
name|searchTerm2
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// REQUEST OPTIMIZATION
comment|// This causes a new segment to become current for all subsequent
comment|// searchers. Because of this, deletions made via a previously open
comment|// reader, which would be applied to that reader's segment, are lost
comment|// for subsequent searchers/readers
if|if
condition|(
name|optimize
condition|)
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// The reader should not see the new data
name|assertEquals
argument_list|(
literal|"first docFreq"
argument_list|,
literal|100
argument_list|,
name|reader
operator|.
name|docFreq
argument_list|(
name|searchTerm
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"first docFreq"
argument_list|,
literal|0
argument_list|,
name|reader
operator|.
name|docFreq
argument_list|(
name|searchTerm2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"first reader"
argument_list|,
name|reader
argument_list|,
name|searchTerm
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"first reader"
argument_list|,
name|reader
argument_list|,
name|searchTerm2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// DELETE DOCUMENTS CONTAINING TERM: aaa
comment|// NOTE: the reader was created when only "aaa" documents were in
name|int
name|deleted
init|=
literal|0
decl_stmt|;
try|try
block|{
name|deleted
operator|=
name|reader
operator|.
name|deleteDocuments
argument_list|(
name|searchTerm
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Delete allowed on an index reader with stale segment information"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StaleReaderException
name|e
parameter_list|)
block|{
comment|/* success */
block|}
comment|// Re-open index reader and try again. This time it should see
comment|// the new data.
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"first docFreq"
argument_list|,
literal|100
argument_list|,
name|reader
operator|.
name|docFreq
argument_list|(
name|searchTerm
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"first docFreq"
argument_list|,
literal|100
argument_list|,
name|reader
operator|.
name|docFreq
argument_list|(
name|searchTerm2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"first reader"
argument_list|,
name|reader
argument_list|,
name|searchTerm
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"first reader"
argument_list|,
name|reader
argument_list|,
name|searchTerm2
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|deleted
operator|=
name|reader
operator|.
name|deleteDocuments
argument_list|(
name|searchTerm
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"deleted count"
argument_list|,
literal|100
argument_list|,
name|deleted
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"deleted docFreq"
argument_list|,
literal|100
argument_list|,
name|reader
operator|.
name|docFreq
argument_list|(
name|searchTerm
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"deleted docFreq"
argument_list|,
literal|100
argument_list|,
name|reader
operator|.
name|docFreq
argument_list|(
name|searchTerm2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"deleted termDocs"
argument_list|,
name|reader
argument_list|,
name|searchTerm
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"deleted termDocs"
argument_list|,
name|reader
argument_list|,
name|searchTerm2
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// CREATE A NEW READER and re-test
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"deleted docFreq"
argument_list|,
literal|100
argument_list|,
name|reader
operator|.
name|docFreq
argument_list|(
name|searchTerm
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"deleted docFreq"
argument_list|,
literal|100
argument_list|,
name|reader
operator|.
name|docFreq
argument_list|(
name|searchTerm2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"deleted termDocs"
argument_list|,
name|reader
argument_list|,
name|searchTerm
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"deleted termDocs"
argument_list|,
name|reader
argument_list|,
name|searchTerm2
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getDirectory
specifier|private
name|Directory
name|getDirectory
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|FSDirectory
operator|.
name|getDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"tempDir"
argument_list|)
argument_list|,
literal|"testIndex"
argument_list|)
argument_list|)
return|;
block|}
DECL|method|testFilesOpenClose
specifier|public
name|void
name|testFilesOpenClose
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Create initial data set
name|File
name|dirFile
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"tempDir"
argument_list|)
argument_list|,
literal|"testIndex"
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
name|getDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
decl_stmt|;
name|addDoc
argument_list|(
name|writer
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Try to erase the data - this ensures that the writer closed all files
name|_TestUtil
operator|.
name|rmDir
argument_list|(
name|dirFile
argument_list|)
expr_stmt|;
name|dir
operator|=
name|getDirectory
argument_list|()
expr_stmt|;
comment|// Now create the data set again, just as before
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
name|writer
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now open existing directory and test that reader closes all files
name|dir
operator|=
name|getDirectory
argument_list|()
expr_stmt|;
name|IndexReader
name|reader1
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|reader1
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// The following will fail if reader did not close
comment|// all files
name|_TestUtil
operator|.
name|rmDir
argument_list|(
name|dirFile
argument_list|)
expr_stmt|;
block|}
DECL|method|testLastModified
specifier|public
name|void
name|testLastModified
parameter_list|()
throws|throws
name|IOException
block|{
name|assertFalse
argument_list|(
name|IndexReader
operator|.
name|indexExists
argument_list|(
literal|"there_is_no_such_index"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|File
name|fileDir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"tempDir"
argument_list|)
argument_list|,
literal|"testIndex"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
specifier|final
name|Directory
name|dir
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|i
condition|)
name|dir
operator|=
operator|new
name|MockRAMDirectory
argument_list|()
expr_stmt|;
else|else
name|dir
operator|=
name|getDirectory
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|IndexReader
operator|.
name|indexExists
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
decl_stmt|;
name|addDocumentWithFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|IndexReader
operator|.
name|isLocked
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
comment|// writer open, so dir is locked
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|IndexReader
operator|.
name|indexExists
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|IndexReader
operator|.
name|isLocked
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
comment|// reader only, no lock
name|long
name|version
init|=
name|IndexReader
operator|.
name|lastModified
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
name|long
name|version2
init|=
name|IndexReader
operator|.
name|lastModified
argument_list|(
name|fileDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|version
argument_list|,
name|version2
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// modify index and check version has been
comment|// incremented:
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
expr_stmt|;
name|addDocumentWithFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"old lastModified is "
operator|+
name|version
operator|+
literal|"; new lastModified is "
operator|+
name|IndexReader
operator|.
name|lastModified
argument_list|(
name|dir
argument_list|)
argument_list|,
name|version
operator|<=
name|IndexReader
operator|.
name|lastModified
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|i
operator|==
literal|1
condition|)
name|_TestUtil
operator|.
name|rmDir
argument_list|(
name|fileDir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testVersion
specifier|public
name|void
name|testVersion
parameter_list|()
throws|throws
name|IOException
block|{
name|assertFalse
argument_list|(
name|IndexReader
operator|.
name|indexExists
argument_list|(
literal|"there_is_no_such_index"
argument_list|)
argument_list|)
expr_stmt|;
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|IndexReader
operator|.
name|indexExists
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
decl_stmt|;
name|addDocumentWithFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|IndexReader
operator|.
name|isLocked
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
comment|// writer open, so dir is locked
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|IndexReader
operator|.
name|indexExists
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|IndexReader
operator|.
name|isLocked
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
comment|// reader only, no lock
name|long
name|version
init|=
name|IndexReader
operator|.
name|getCurrentVersion
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// modify index and check version has been
comment|// incremented:
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
expr_stmt|;
name|addDocumentWithFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"old version is "
operator|+
name|version
operator|+
literal|"; new version is "
operator|+
name|IndexReader
operator|.
name|getCurrentVersion
argument_list|(
name|dir
argument_list|)
argument_list|,
name|version
operator|<
name|IndexReader
operator|.
name|getCurrentVersion
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testLock
specifier|public
name|void
name|testLock
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
decl_stmt|;
name|addDocumentWithFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
literal|false
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
try|try
block|{
name|reader
operator|.
name|deleteDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected lock"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected exception
block|}
name|IndexReader
operator|.
name|unlock
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// this should not be done in the real world!
name|reader
operator|.
name|deleteDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testUndeleteAll
specifier|public
name|void
name|testUndeleteAll
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
decl_stmt|;
name|addDocumentWithFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|addDocumentWithFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|reader
operator|.
name|deleteDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|reader
operator|.
name|deleteDocument
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|reader
operator|.
name|undeleteAll
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
comment|// nothing has really been deleted thanks to undeleteAll()
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testUndeleteAllAfterClose
specifier|public
name|void
name|testUndeleteAllAfterClose
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
decl_stmt|;
name|addDocumentWithFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|addDocumentWithFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|reader
operator|.
name|deleteDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|reader
operator|.
name|deleteDocument
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|reader
operator|.
name|undeleteAll
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
comment|// nothing has really been deleted thanks to undeleteAll()
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testUndeleteAllAfterCloseThenReopen
specifier|public
name|void
name|testUndeleteAllAfterCloseThenReopen
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
decl_stmt|;
name|addDocumentWithFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|addDocumentWithFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|reader
operator|.
name|deleteDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|reader
operator|.
name|deleteDocument
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|reader
operator|.
name|undeleteAll
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
comment|// nothing has really been deleted thanks to undeleteAll()
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testDeleteReaderReaderConflictUnoptimized
specifier|public
name|void
name|testDeleteReaderReaderConflictUnoptimized
parameter_list|()
throws|throws
name|IOException
block|{
name|deleteReaderReaderConflict
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testDeleteReaderReaderConflictOptimized
specifier|public
name|void
name|testDeleteReaderReaderConflictOptimized
parameter_list|()
throws|throws
name|IOException
block|{
name|deleteReaderReaderConflict
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Make sure if reader tries to commit but hits disk      * full that reader remains consistent and usable.      */
DECL|method|testDiskFull
specifier|public
name|void
name|testDiskFull
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|debug
init|=
literal|false
decl_stmt|;
name|Term
name|searchTerm
init|=
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|)
decl_stmt|;
name|int
name|START_COUNT
init|=
literal|157
decl_stmt|;
name|int
name|END_COUNT
init|=
literal|144
decl_stmt|;
comment|// First build up a starting index:
name|RAMDirectory
name|startDir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|startDir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|157
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|UN_TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content"
argument_list|,
literal|"aaa "
operator|+
name|i
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|diskUsage
init|=
name|startDir
operator|.
name|sizeInBytes
argument_list|()
decl_stmt|;
name|long
name|diskFree
init|=
name|diskUsage
operator|+
literal|100
decl_stmt|;
name|IOException
name|err
init|=
literal|null
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
comment|// Iterate w/ ever increasing free disk space:
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|(
name|startDir
argument_list|)
decl_stmt|;
comment|// If IndexReader hits disk full, it can write to
comment|// the same files again.
name|dir
operator|.
name|setPreventDoubleWrite
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
comment|// For each disk size, first try to commit against
comment|// dir that will hit random IOExceptions& disk
comment|// full; after, give it infinite disk space& turn
comment|// off random IOExceptions& retry w/ same reader:
name|boolean
name|success
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|2
condition|;
name|x
operator|++
control|)
block|{
name|double
name|rate
init|=
literal|0.05
decl_stmt|;
name|double
name|diskRatio
init|=
operator|(
operator|(
name|double
operator|)
name|diskFree
operator|)
operator|/
name|diskUsage
decl_stmt|;
name|long
name|thisDiskFree
decl_stmt|;
name|String
name|testName
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|x
condition|)
block|{
name|thisDiskFree
operator|=
name|diskFree
expr_stmt|;
if|if
condition|(
name|diskRatio
operator|>=
literal|2.0
condition|)
block|{
name|rate
operator|/=
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|diskRatio
operator|>=
literal|4.0
condition|)
block|{
name|rate
operator|/=
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|diskRatio
operator|>=
literal|6.0
condition|)
block|{
name|rate
operator|=
literal|0.0
expr_stmt|;
block|}
if|if
condition|(
name|debug
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\ncycle: "
operator|+
name|diskFree
operator|+
literal|" bytes"
argument_list|)
expr_stmt|;
block|}
name|testName
operator|=
literal|"disk full during reader.close() @ "
operator|+
name|thisDiskFree
operator|+
literal|" bytes"
expr_stmt|;
block|}
else|else
block|{
name|thisDiskFree
operator|=
literal|0
expr_stmt|;
name|rate
operator|=
literal|0.0
expr_stmt|;
if|if
condition|(
name|debug
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\ncycle: same writer: unlimited disk space"
argument_list|)
expr_stmt|;
block|}
name|testName
operator|=
literal|"reader re-use after disk full"
expr_stmt|;
block|}
name|dir
operator|.
name|setMaxSizeInBytes
argument_list|(
name|thisDiskFree
argument_list|)
expr_stmt|;
name|dir
operator|.
name|setRandomIOExceptionRate
argument_list|(
name|rate
argument_list|,
name|diskFree
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
literal|0
operator|==
name|x
condition|)
block|{
name|int
name|docId
init|=
literal|12
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|13
condition|;
name|i
operator|++
control|)
block|{
name|reader
operator|.
name|deleteDocument
argument_list|(
name|docId
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setNorm
argument_list|(
name|docId
argument_list|,
literal|"contents"
argument_list|,
operator|(
name|float
operator|)
literal|2.0
argument_list|)
expr_stmt|;
name|docId
operator|+=
literal|12
expr_stmt|;
block|}
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
if|if
condition|(
literal|0
operator|==
name|x
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|debug
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  hit IOException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
name|err
operator|=
name|e
expr_stmt|;
if|if
condition|(
literal|1
operator|==
name|x
condition|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|testName
operator|+
literal|" hit IOException after disk space was freed up"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Whether we succeeded or failed, check that all
comment|// un-referenced files were in fact deleted (ie,
comment|// we did not create garbage).  Just create a
comment|// new IndexFileDeleter, have it delete
comment|// unreferenced files, then verify that in fact
comment|// no files were deleted:
name|String
index|[]
name|startFiles
init|=
name|dir
operator|.
name|list
argument_list|()
decl_stmt|;
name|SegmentInfos
name|infos
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|infos
operator|.
name|read
argument_list|(
name|dir
argument_list|)
expr_stmt|;
operator|new
name|IndexFileDeleter
argument_list|(
name|dir
argument_list|,
operator|new
name|KeepOnlyLastCommitDeletionPolicy
argument_list|()
argument_list|,
name|infos
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
index|[]
name|endFiles
init|=
name|dir
operator|.
name|list
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|startFiles
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|endFiles
argument_list|)
expr_stmt|;
comment|//for(int i=0;i<startFiles.length;i++) {
comment|//  System.out.println("  startFiles: " + i + ": " + startFiles[i]);
comment|//}
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|startFiles
argument_list|,
name|endFiles
argument_list|)
condition|)
block|{
name|String
name|successStr
decl_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|successStr
operator|=
literal|"success"
expr_stmt|;
block|}
else|else
block|{
name|successStr
operator|=
literal|"IOException"
expr_stmt|;
name|err
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"reader.close() failed to delete unreferenced files after "
operator|+
name|successStr
operator|+
literal|" ("
operator|+
name|diskFree
operator|+
literal|" bytes): before delete:\n    "
operator|+
name|arrayToString
argument_list|(
name|startFiles
argument_list|)
operator|+
literal|"\n  after delete:\n    "
operator|+
name|arrayToString
argument_list|(
name|endFiles
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Finally, verify index is not corrupt, and, if
comment|// we succeeded, we see all docs changed, and if
comment|// we failed, we see either all docs or no docs
comment|// changed (transactional semantics):
name|IndexReader
name|newReader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|newReader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|testName
operator|+
literal|":exception when creating IndexReader after disk full during close: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
comment|/*           int result = newReader.docFreq(searchTerm);           if (success) {             if (result != END_COUNT) {               fail(testName + ": method did not throw exception but docFreq('aaa') is " + result + " instead of expected " + END_COUNT);             }           } else {             // On hitting exception we still may have added             // all docs:             if (result != START_COUNT&& result != END_COUNT) {               err.printStackTrace();               fail(testName + ": method did throw exception but docFreq('aaa') is " + result + " instead of expected " + START_COUNT + " or " + END_COUNT);             }           }           */
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|newReader
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|searchTerm
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|testName
operator|+
literal|": exception when searching: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|int
name|result2
init|=
name|hits
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|success
condition|)
block|{
if|if
condition|(
name|result2
operator|!=
name|END_COUNT
condition|)
block|{
name|fail
argument_list|(
name|testName
operator|+
literal|": method did not throw exception but hits.length for search on term 'aaa' is "
operator|+
name|result2
operator|+
literal|" instead of expected "
operator|+
name|END_COUNT
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// On hitting exception we still may have added
comment|// all docs:
if|if
condition|(
name|result2
operator|!=
name|START_COUNT
operator|&&
name|result2
operator|!=
name|END_COUNT
condition|)
block|{
name|err
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|testName
operator|+
literal|": method did throw exception but hits.length for search on term 'aaa' is "
operator|+
name|result2
operator|+
literal|" instead of expected "
operator|+
name|START_COUNT
argument_list|)
expr_stmt|;
block|}
block|}
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
name|newReader
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|result2
operator|==
name|END_COUNT
condition|)
block|{
break|break;
block|}
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Try again with 10 more bytes of free space:
name|diskFree
operator|+=
literal|10
expr_stmt|;
block|}
name|startDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testDocsOutOfOrderJIRA140
specifier|public
name|void
name|testDocsOutOfOrderJIRA140
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|11
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|,
literal|"aaa"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
comment|// Try to delete an invalid docId, yet, within range
comment|// of the final bits of the BitVector:
name|boolean
name|gotException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|reader
operator|.
name|deleteDocument
argument_list|(
literal|11
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
name|gotException
operator|=
literal|true
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
literal|false
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
expr_stmt|;
comment|// We must add more docs to get a new segment written
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|11
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|,
literal|"aaa"
argument_list|)
expr_stmt|;
block|}
comment|// Without the fix for LUCENE-140 this call will
comment|// [incorrectly] hit a "docs out of order"
comment|// IllegalStateException because above out-of-bounds
comment|// deleteDocument corrupted the index:
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|gotException
condition|)
block|{
name|fail
argument_list|(
literal|"delete of out-of-bounds doc number failed to hit exception"
argument_list|)
expr_stmt|;
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testExceptionReleaseWriteLockJIRA768
specifier|public
name|void
name|testExceptionReleaseWriteLockJIRA768
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
decl_stmt|;
name|addDoc
argument_list|(
name|writer
argument_list|,
literal|"aaa"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
try|try
block|{
name|reader
operator|.
name|deleteDocument
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit exception when deleting an invalid doc number"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|IndexReader
operator|.
name|isLocked
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"write lock is still held after close"
argument_list|)
expr_stmt|;
block|}
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
try|try
block|{
name|reader
operator|.
name|setNorm
argument_list|(
literal|1
argument_list|,
literal|"content"
argument_list|,
operator|(
name|float
operator|)
literal|2.0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit exception when calling setNorm on an invalid doc number"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|IndexReader
operator|.
name|isLocked
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"write lock is still held after close"
argument_list|)
expr_stmt|;
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|arrayToString
specifier|private
name|String
name|arrayToString
parameter_list|(
name|String
index|[]
name|l
parameter_list|)
block|{
name|String
name|s
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|s
operator|+=
literal|"\n    "
expr_stmt|;
block|}
name|s
operator|+=
name|l
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
DECL|method|testOpenReaderAfterDelete
specifier|public
name|void
name|testOpenReaderAfterDelete
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|dirFile
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"tempDir"
argument_list|)
argument_list|,
literal|"deletetest"
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
name|FSDirectory
operator|.
name|getDirectory
argument_list|(
name|dirFile
argument_list|)
decl_stmt|;
try|try
block|{
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected FileNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|dirFile
operator|.
name|delete
argument_list|()
expr_stmt|;
comment|// Make sure we still get a CorruptIndexException (not NPE):
try|try
block|{
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected FileNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|deleteReaderReaderConflict
specifier|private
name|void
name|deleteReaderReaderConflict
parameter_list|(
name|boolean
name|optimize
parameter_list|)
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|getDirectory
argument_list|()
decl_stmt|;
name|Term
name|searchTerm1
init|=
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|)
decl_stmt|;
name|Term
name|searchTerm2
init|=
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"bbb"
argument_list|)
decl_stmt|;
name|Term
name|searchTerm3
init|=
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"ccc"
argument_list|)
decl_stmt|;
comment|//  add 100 documents with term : aaa
comment|//  add 100 documents with term : bbb
comment|//  add 100 documents with term : ccc
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|,
name|searchTerm1
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
name|writer
argument_list|,
name|searchTerm2
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
name|writer
argument_list|,
name|searchTerm3
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|optimize
condition|)
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// OPEN TWO READERS
comment|// Both readers get segment info as exists at this time
name|IndexReader
name|reader1
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"first opened"
argument_list|,
literal|100
argument_list|,
name|reader1
operator|.
name|docFreq
argument_list|(
name|searchTerm1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"first opened"
argument_list|,
literal|100
argument_list|,
name|reader1
operator|.
name|docFreq
argument_list|(
name|searchTerm2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"first opened"
argument_list|,
literal|100
argument_list|,
name|reader1
operator|.
name|docFreq
argument_list|(
name|searchTerm3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"first opened"
argument_list|,
name|reader1
argument_list|,
name|searchTerm1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"first opened"
argument_list|,
name|reader1
argument_list|,
name|searchTerm2
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"first opened"
argument_list|,
name|reader1
argument_list|,
name|searchTerm3
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|IndexReader
name|reader2
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"first opened"
argument_list|,
literal|100
argument_list|,
name|reader2
operator|.
name|docFreq
argument_list|(
name|searchTerm1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"first opened"
argument_list|,
literal|100
argument_list|,
name|reader2
operator|.
name|docFreq
argument_list|(
name|searchTerm2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"first opened"
argument_list|,
literal|100
argument_list|,
name|reader2
operator|.
name|docFreq
argument_list|(
name|searchTerm3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"first opened"
argument_list|,
name|reader2
argument_list|,
name|searchTerm1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"first opened"
argument_list|,
name|reader2
argument_list|,
name|searchTerm2
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"first opened"
argument_list|,
name|reader2
argument_list|,
name|searchTerm3
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// DELETE DOCS FROM READER 2 and CLOSE IT
comment|// delete documents containing term: aaa
comment|// when the reader is closed, the segment info is updated and
comment|// the first reader is now stale
name|reader2
operator|.
name|deleteDocuments
argument_list|(
name|searchTerm1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"after delete 1"
argument_list|,
literal|100
argument_list|,
name|reader2
operator|.
name|docFreq
argument_list|(
name|searchTerm1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"after delete 1"
argument_list|,
literal|100
argument_list|,
name|reader2
operator|.
name|docFreq
argument_list|(
name|searchTerm2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"after delete 1"
argument_list|,
literal|100
argument_list|,
name|reader2
operator|.
name|docFreq
argument_list|(
name|searchTerm3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"after delete 1"
argument_list|,
name|reader2
argument_list|,
name|searchTerm1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"after delete 1"
argument_list|,
name|reader2
argument_list|,
name|searchTerm2
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"after delete 1"
argument_list|,
name|reader2
argument_list|,
name|searchTerm3
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|reader2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Make sure reader 1 is unchanged since it was open earlier
name|assertEquals
argument_list|(
literal|"after delete 1"
argument_list|,
literal|100
argument_list|,
name|reader1
operator|.
name|docFreq
argument_list|(
name|searchTerm1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"after delete 1"
argument_list|,
literal|100
argument_list|,
name|reader1
operator|.
name|docFreq
argument_list|(
name|searchTerm2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"after delete 1"
argument_list|,
literal|100
argument_list|,
name|reader1
operator|.
name|docFreq
argument_list|(
name|searchTerm3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"after delete 1"
argument_list|,
name|reader1
argument_list|,
name|searchTerm1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"after delete 1"
argument_list|,
name|reader1
argument_list|,
name|searchTerm2
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"after delete 1"
argument_list|,
name|reader1
argument_list|,
name|searchTerm3
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// ATTEMPT TO DELETE FROM STALE READER
comment|// delete documents containing term: bbb
try|try
block|{
name|reader1
operator|.
name|deleteDocuments
argument_list|(
name|searchTerm2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Delete allowed from a stale index reader"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|/* success */
block|}
comment|// RECREATE READER AND TRY AGAIN
name|reader1
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader1
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reopened"
argument_list|,
literal|100
argument_list|,
name|reader1
operator|.
name|docFreq
argument_list|(
name|searchTerm1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reopened"
argument_list|,
literal|100
argument_list|,
name|reader1
operator|.
name|docFreq
argument_list|(
name|searchTerm2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reopened"
argument_list|,
literal|100
argument_list|,
name|reader1
operator|.
name|docFreq
argument_list|(
name|searchTerm3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"reopened"
argument_list|,
name|reader1
argument_list|,
name|searchTerm1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"reopened"
argument_list|,
name|reader1
argument_list|,
name|searchTerm2
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"reopened"
argument_list|,
name|reader1
argument_list|,
name|searchTerm3
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|reader1
operator|.
name|deleteDocuments
argument_list|(
name|searchTerm2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"deleted 2"
argument_list|,
literal|100
argument_list|,
name|reader1
operator|.
name|docFreq
argument_list|(
name|searchTerm1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"deleted 2"
argument_list|,
literal|100
argument_list|,
name|reader1
operator|.
name|docFreq
argument_list|(
name|searchTerm2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"deleted 2"
argument_list|,
literal|100
argument_list|,
name|reader1
operator|.
name|docFreq
argument_list|(
name|searchTerm3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"deleted 2"
argument_list|,
name|reader1
argument_list|,
name|searchTerm1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"deleted 2"
argument_list|,
name|reader1
argument_list|,
name|searchTerm2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"deleted 2"
argument_list|,
name|reader1
argument_list|,
name|searchTerm3
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|reader1
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Open another reader to confirm that everything is deleted
name|reader2
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reopened 2"
argument_list|,
literal|100
argument_list|,
name|reader2
operator|.
name|docFreq
argument_list|(
name|searchTerm1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reopened 2"
argument_list|,
literal|100
argument_list|,
name|reader2
operator|.
name|docFreq
argument_list|(
name|searchTerm2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reopened 2"
argument_list|,
literal|100
argument_list|,
name|reader2
operator|.
name|docFreq
argument_list|(
name|searchTerm3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"reopened 2"
argument_list|,
name|reader2
argument_list|,
name|searchTerm1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"reopened 2"
argument_list|,
name|reader2
argument_list|,
name|searchTerm2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTermDocsCount
argument_list|(
literal|"reopened 2"
argument_list|,
name|reader2
argument_list|,
name|searchTerm3
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|reader2
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|addDocumentWithFields
specifier|private
name|void
name|addDocumentWithFields
parameter_list|(
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"keyword"
argument_list|,
literal|"test1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|UN_TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"text"
argument_list|,
literal|"test1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"unindexed"
argument_list|,
literal|"test1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"unstored"
argument_list|,
literal|"test1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|addDocumentWithDifferentFields
specifier|private
name|void
name|addDocumentWithDifferentFields
parameter_list|(
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"keyword2"
argument_list|,
literal|"test1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|UN_TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"text2"
argument_list|,
literal|"test1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"unindexed2"
argument_list|,
literal|"test1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"unstored2"
argument_list|,
literal|"test1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|addDocumentWithTermVectorFields
specifier|private
name|void
name|addDocumentWithTermVectorFields
parameter_list|(
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tvnot"
argument_list|,
literal|"tvnot"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"termvector"
argument_list|,
literal|"termvector"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tvoffset"
argument_list|,
literal|"tvoffset"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tvposition"
argument_list|,
literal|"tvposition"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tvpositionoffset"
argument_list|,
literal|"tvpositionoffset"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|addDoc
specifier|private
name|void
name|addDoc
parameter_list|(
name|IndexWriter
name|writer
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content"
argument_list|,
name|value
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|rmDir
specifier|private
name|void
name|rmDir
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
name|File
index|[]
name|files
init|=
name|dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|files
index|[
name|i
index|]
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|dir
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
DECL|method|assertIndexEquals
specifier|public
specifier|static
name|void
name|assertIndexEquals
parameter_list|(
name|IndexReader
name|index1
parameter_list|,
name|IndexReader
name|index2
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|"IndexReaders have different values for numDocs."
argument_list|,
name|index1
operator|.
name|numDocs
argument_list|()
argument_list|,
name|index2
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"IndexReaders have different values for maxDoc."
argument_list|,
name|index1
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|index2
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Only one IndexReader has deletions."
argument_list|,
name|index1
operator|.
name|hasDeletions
argument_list|()
argument_list|,
name|index2
operator|.
name|hasDeletions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Only one index is optimized."
argument_list|,
name|index1
operator|.
name|isOptimized
argument_list|()
argument_list|,
name|index2
operator|.
name|isOptimized
argument_list|()
argument_list|)
expr_stmt|;
comment|// check field names
name|Collection
name|fields1
init|=
name|index1
operator|.
name|getFieldNames
argument_list|(
name|FieldOption
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|Collection
name|fields2
init|=
name|index1
operator|.
name|getFieldNames
argument_list|(
name|FieldOption
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"IndexReaders have different numbers of fields."
argument_list|,
name|fields1
operator|.
name|size
argument_list|()
argument_list|,
name|fields2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|it1
init|=
name|fields1
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
name|it2
init|=
name|fields1
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Different field names."
argument_list|,
operator|(
name|String
operator|)
name|it1
operator|.
name|next
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|it2
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check norms
name|it1
operator|=
name|fields1
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|curField
init|=
operator|(
name|String
operator|)
name|it1
operator|.
name|next
argument_list|()
decl_stmt|;
name|byte
index|[]
name|norms1
init|=
name|index1
operator|.
name|norms
argument_list|(
name|curField
argument_list|)
decl_stmt|;
name|byte
index|[]
name|norms2
init|=
name|index2
operator|.
name|norms
argument_list|(
name|curField
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|norms1
operator|.
name|length
argument_list|,
name|norms2
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|norms1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Norm different for doc "
operator|+
name|i
operator|+
literal|" and field '"
operator|+
name|curField
operator|+
literal|"'."
argument_list|,
name|norms1
index|[
name|i
index|]
argument_list|,
name|norms2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check deletions
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index1
operator|.
name|maxDoc
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Doc "
operator|+
name|i
operator|+
literal|" only deleted in one index."
argument_list|,
name|index1
operator|.
name|isDeleted
argument_list|(
name|i
argument_list|)
argument_list|,
name|index2
operator|.
name|isDeleted
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check stored fields
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index1
operator|.
name|maxDoc
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|index1
operator|.
name|isDeleted
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|Document
name|doc1
init|=
name|index1
operator|.
name|document
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Document
name|doc2
init|=
name|index2
operator|.
name|document
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|fields1
operator|=
name|doc1
operator|.
name|getFields
argument_list|()
expr_stmt|;
name|fields2
operator|=
name|doc2
operator|.
name|getFields
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Different numbers of fields for doc "
operator|+
name|i
operator|+
literal|"."
argument_list|,
name|fields1
operator|.
name|size
argument_list|()
argument_list|,
name|fields2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|it1
operator|=
name|fields1
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|it2
operator|=
name|fields2
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Field
name|curField1
init|=
operator|(
name|Field
operator|)
name|it1
operator|.
name|next
argument_list|()
decl_stmt|;
name|Field
name|curField2
init|=
operator|(
name|Field
operator|)
name|it2
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Different fields names for doc "
operator|+
name|i
operator|+
literal|"."
argument_list|,
name|curField1
operator|.
name|name
argument_list|()
argument_list|,
name|curField2
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Different field values for doc "
operator|+
name|i
operator|+
literal|"."
argument_list|,
name|curField1
operator|.
name|stringValue
argument_list|()
argument_list|,
name|curField2
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// check dictionary and posting lists
name|TermEnum
name|enum1
init|=
name|index1
operator|.
name|terms
argument_list|()
decl_stmt|;
name|TermEnum
name|enum2
init|=
name|index2
operator|.
name|terms
argument_list|()
decl_stmt|;
name|TermPositions
name|tp1
init|=
name|index1
operator|.
name|termPositions
argument_list|()
decl_stmt|;
name|TermPositions
name|tp2
init|=
name|index2
operator|.
name|termPositions
argument_list|()
decl_stmt|;
while|while
condition|(
name|enum1
operator|.
name|next
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|enum2
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Different term in dictionary."
argument_list|,
name|enum1
operator|.
name|term
argument_list|()
argument_list|,
name|enum2
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
name|tp1
operator|.
name|seek
argument_list|(
name|enum1
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
name|tp2
operator|.
name|seek
argument_list|(
name|enum1
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|tp1
operator|.
name|next
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|tp2
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Different doc id in postinglist of term "
operator|+
name|enum1
operator|.
name|term
argument_list|()
operator|+
literal|"."
argument_list|,
name|tp1
operator|.
name|doc
argument_list|()
argument_list|,
name|tp2
operator|.
name|doc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Different term frequence in postinglist of term "
operator|+
name|enum1
operator|.
name|term
argument_list|()
operator|+
literal|"."
argument_list|,
name|tp1
operator|.
name|freq
argument_list|()
argument_list|,
name|tp2
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tp1
operator|.
name|freq
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Different positions in postinglist of term "
operator|+
name|enum1
operator|.
name|term
argument_list|()
operator|+
literal|"."
argument_list|,
name|tp1
operator|.
name|nextPosition
argument_list|()
argument_list|,
name|tp2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testGetIndexCommit
specifier|public
name|void
name|testGetIndexCommit
parameter_list|()
throws|throws
name|IOException
block|{
name|RAMDirectory
name|d
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
comment|// set up writer
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|d
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|27
condition|;
name|i
operator|++
control|)
name|addDocumentWithFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentInfos
name|sis
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|sis
operator|.
name|read
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|IndexCommit
name|c
init|=
name|r
operator|.
name|getIndexCommit
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|sis
operator|.
name|getCurrentSegmentFileName
argument_list|()
argument_list|,
name|c
operator|.
name|getSegmentsFileName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getIndexCommit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Change the index
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|d
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|()
argument_list|,
literal|false
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
name|addDocumentWithFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|r2
init|=
name|r
operator|.
name|reopen
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|c
operator|.
name|equals
argument_list|(
name|r2
operator|.
name|getIndexCommit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r2
operator|.
name|getIndexCommit
argument_list|()
operator|.
name|isOptimized
argument_list|()
argument_list|)
expr_stmt|;
name|r2
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|d
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|()
argument_list|,
literal|false
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
expr_stmt|;
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|r2
operator|=
name|r
operator|.
name|reopen
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|r2
operator|.
name|getIndexCommit
argument_list|()
operator|.
name|isOptimized
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|r2
operator|.
name|close
argument_list|()
expr_stmt|;
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
