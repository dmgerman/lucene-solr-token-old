begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_class
DECL|class|TestTermVectorsReader
specifier|public
class|class
name|TestTermVectorsReader
extends|extends
name|TestCase
block|{
DECL|field|writer
specifier|private
name|TermVectorsWriter
name|writer
init|=
literal|null
decl_stmt|;
comment|//Must be lexicographically sorted, will do in setup, versus trying to maintain here
DECL|field|testFields
specifier|private
name|String
index|[]
name|testFields
init|=
block|{
literal|"f1"
block|,
literal|"f2"
block|,
literal|"f3"
block|}
decl_stmt|;
DECL|field|testFieldsStorePos
specifier|private
name|boolean
index|[]
name|testFieldsStorePos
init|=
block|{
literal|true
block|,
literal|false
block|,
literal|true
block|,
literal|false
block|}
decl_stmt|;
DECL|field|testFieldsStoreOff
specifier|private
name|boolean
index|[]
name|testFieldsStoreOff
init|=
block|{
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|true
block|}
decl_stmt|;
DECL|field|testTerms
specifier|private
name|String
index|[]
name|testTerms
init|=
block|{
literal|"this"
block|,
literal|"is"
block|,
literal|"a"
block|,
literal|"test"
block|}
decl_stmt|;
DECL|field|positions
specifier|private
name|int
index|[]
index|[]
name|positions
init|=
operator|new
name|int
index|[
name|testTerms
operator|.
name|length
index|]
index|[]
decl_stmt|;
DECL|field|offsets
specifier|private
name|TermVectorOffsetInfo
index|[]
index|[]
name|offsets
init|=
operator|new
name|TermVectorOffsetInfo
index|[
name|testTerms
operator|.
name|length
index|]
index|[]
decl_stmt|;
DECL|field|dir
specifier|private
name|RAMDirectory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
DECL|field|seg
specifier|private
name|String
name|seg
init|=
literal|"testSegment"
decl_stmt|;
DECL|field|fieldInfos
specifier|private
name|FieldInfos
name|fieldInfos
init|=
operator|new
name|FieldInfos
argument_list|()
decl_stmt|;
DECL|method|TestTermVectorsReader
specifier|public
name|TestTermVectorsReader
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fieldInfos
operator|.
name|add
argument_list|(
name|testFields
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|testFieldsStorePos
index|[
name|i
index|]
argument_list|,
name|testFieldsStoreOff
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testTerms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|positions
index|[
name|i
index|]
operator|=
operator|new
name|int
index|[
literal|3
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|positions
index|[
name|i
index|]
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
comment|// poditions are always sorted in increasing order
name|positions
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
call|(
name|int
call|)
argument_list|(
name|j
operator|*
literal|10
operator|+
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|10
argument_list|)
expr_stmt|;
block|}
name|offsets
index|[
name|i
index|]
operator|=
operator|new
name|TermVectorOffsetInfo
index|[
literal|3
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|offsets
index|[
name|i
index|]
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
comment|// ofsets are alway sorted in increasing order
name|offsets
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
operator|new
name|TermVectorOffsetInfo
argument_list|(
name|j
operator|*
literal|10
argument_list|,
name|j
operator|*
literal|10
operator|+
name|testTerms
index|[
name|i
index|]
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|testTerms
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|5
condition|;
name|j
operator|++
control|)
block|{
name|writer
operator|=
operator|new
name|TermVectorsWriter
argument_list|(
name|dir
argument_list|,
name|seg
argument_list|,
name|fieldInfos
argument_list|)
expr_stmt|;
name|writer
operator|.
name|openDocument
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|testFields
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|writer
operator|.
name|openField
argument_list|(
name|testFields
index|[
name|k
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testTerms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|addTerm
argument_list|(
name|testTerms
index|[
name|i
index|]
argument_list|,
literal|3
argument_list|,
name|positions
index|[
name|i
index|]
argument_list|,
name|offsets
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|closeField
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|closeDocument
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|tearDown
specifier|protected
name|void
name|tearDown
parameter_list|()
block|{    }
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
block|{
comment|//Check to see the files were created properly in setup
name|assertTrue
argument_list|(
name|writer
operator|.
name|isDocumentOpen
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dir
operator|.
name|fileExists
argument_list|(
name|seg
operator|+
name|TermVectorsWriter
operator|.
name|TVD_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dir
operator|.
name|fileExists
argument_list|(
name|seg
operator|+
name|TermVectorsWriter
operator|.
name|TVX_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testReader
specifier|public
name|void
name|testReader
parameter_list|()
block|{
try|try
block|{
name|TermVectorsReader
name|reader
init|=
operator|new
name|TermVectorsReader
argument_list|(
name|dir
argument_list|,
name|seg
argument_list|,
name|fieldInfos
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|TermFreqVector
name|vector
init|=
name|reader
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|testFields
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|vector
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|String
index|[]
name|terms
init|=
name|vector
operator|.
name|getTerms
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|terms
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|terms
operator|.
name|length
operator|==
name|testTerms
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|term
init|=
name|terms
index|[
name|i
index|]
decl_stmt|;
comment|//System.out.println("Term: " + term);
name|assertTrue
argument_list|(
name|term
operator|.
name|equals
argument_list|(
name|testTerms
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPositionReader
specifier|public
name|void
name|testPositionReader
parameter_list|()
block|{
try|try
block|{
name|TermVectorsReader
name|reader
init|=
operator|new
name|TermVectorsReader
argument_list|(
name|dir
argument_list|,
name|seg
argument_list|,
name|fieldInfos
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|TermPositionVector
name|vector
decl_stmt|;
name|String
index|[]
name|terms
decl_stmt|;
name|vector
operator|=
operator|(
name|TermPositionVector
operator|)
name|reader
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|testFields
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|vector
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|terms
operator|=
name|vector
operator|.
name|getTerms
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|terms
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|terms
operator|.
name|length
operator|==
name|testTerms
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|term
init|=
name|terms
index|[
name|i
index|]
decl_stmt|;
comment|//System.out.println("Term: " + term);
name|assertTrue
argument_list|(
name|term
operator|.
name|equals
argument_list|(
name|testTerms
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|int
index|[]
name|positions
init|=
name|vector
operator|.
name|getTermPositions
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|positions
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|positions
operator|.
name|length
operator|==
name|this
operator|.
name|positions
index|[
name|i
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|positions
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|int
name|position
init|=
name|positions
index|[
name|j
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|position
operator|==
name|this
operator|.
name|positions
index|[
name|i
index|]
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|TermVectorOffsetInfo
index|[]
name|offset
init|=
name|vector
operator|.
name|getOffsets
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|offset
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|offset
operator|.
name|length
operator|==
name|this
operator|.
name|offsets
index|[
name|i
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|offset
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|TermVectorOffsetInfo
name|termVectorOffsetInfo
init|=
name|offset
index|[
name|j
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|termVectorOffsetInfo
operator|.
name|equals
argument_list|(
name|offsets
index|[
name|i
index|]
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|TermFreqVector
name|freqVector
init|=
operator|(
name|TermFreqVector
operator|)
name|reader
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|testFields
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
comment|//no pos, no offset
name|assertTrue
argument_list|(
name|freqVector
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|freqVector
operator|instanceof
name|TermPositionVector
operator|==
literal|false
argument_list|)
expr_stmt|;
name|terms
operator|=
name|freqVector
operator|.
name|getTerms
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|terms
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|terms
operator|.
name|length
operator|==
name|testTerms
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|term
init|=
name|terms
index|[
name|i
index|]
decl_stmt|;
comment|//System.out.println("Term: " + term);
name|assertTrue
argument_list|(
name|term
operator|.
name|equals
argument_list|(
name|testTerms
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|cce
parameter_list|)
block|{
name|cce
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testOffsetReader
specifier|public
name|void
name|testOffsetReader
parameter_list|()
block|{
try|try
block|{
name|TermVectorsReader
name|reader
init|=
operator|new
name|TermVectorsReader
argument_list|(
name|dir
argument_list|,
name|seg
argument_list|,
name|fieldInfos
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|TermPositionVector
name|vector
init|=
operator|(
name|TermPositionVector
operator|)
name|reader
operator|.
name|get
argument_list|(
literal|0
argument_list|,
name|testFields
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|vector
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|String
index|[]
name|terms
init|=
name|vector
operator|.
name|getTerms
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|terms
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|terms
operator|.
name|length
operator|==
name|testTerms
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|term
init|=
name|terms
index|[
name|i
index|]
decl_stmt|;
comment|//System.out.println("Term: " + term);
name|assertTrue
argument_list|(
name|term
operator|.
name|equals
argument_list|(
name|testTerms
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|int
index|[]
name|positions
init|=
name|vector
operator|.
name|getTermPositions
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|positions
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|positions
operator|.
name|length
operator|==
name|this
operator|.
name|positions
index|[
name|i
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|positions
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|int
name|position
init|=
name|positions
index|[
name|j
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|position
operator|==
name|this
operator|.
name|positions
index|[
name|i
index|]
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|TermVectorOffsetInfo
index|[]
name|offset
init|=
name|vector
operator|.
name|getOffsets
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|offset
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|offset
operator|.
name|length
operator|==
name|this
operator|.
name|offsets
index|[
name|i
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|offset
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|TermVectorOffsetInfo
name|termVectorOffsetInfo
init|=
name|offset
index|[
name|j
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|termVectorOffsetInfo
operator|.
name|equals
argument_list|(
name|offsets
index|[
name|i
index|]
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|cce
parameter_list|)
block|{
name|cce
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Make sure exceptions and bad params are handled appropriately    */
DECL|method|testBadParams
specifier|public
name|void
name|testBadParams
parameter_list|()
block|{
try|try
block|{
name|TermVectorsReader
name|reader
init|=
operator|new
name|TermVectorsReader
argument_list|(
name|dir
argument_list|,
name|seg
argument_list|,
name|fieldInfos
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|//Bad document number, good field number
name|TermFreqVector
name|vector
init|=
name|reader
operator|.
name|get
argument_list|(
literal|50
argument_list|,
name|testFields
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|TermVectorsReader
name|reader
init|=
operator|new
name|TermVectorsReader
argument_list|(
name|dir
argument_list|,
name|seg
argument_list|,
name|fieldInfos
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|//good document number, bad field number
name|TermFreqVector
name|vector
init|=
name|reader
operator|.
name|get
argument_list|(
literal|0
argument_list|,
literal|"f50"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|vector
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
