begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache Lucene" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Lucene", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|textui
operator|.
name|TestRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|WhitespaceAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_comment
comment|/**  * @author dmitrys@earthlink.net  * @version $Id$  */
end_comment
begin_class
DECL|class|TestCompoundFile
specifier|public
class|class
name|TestCompoundFile
extends|extends
name|TestCase
block|{
comment|/** Main for running test case by itself. */
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
name|TestRunner
operator|.
name|run
argument_list|(
operator|new
name|TestSuite
argument_list|(
name|TestCompoundFile
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|//        TestRunner.run (new TestCompoundFile("testSingleFile"));
comment|//        TestRunner.run (new TestCompoundFile("testTwoFiles"));
comment|//        TestRunner.run (new TestCompoundFile("testRandomFiles"));
comment|//        TestRunner.run (new TestCompoundFile("testClonedStreamsClosing"));
comment|//        TestRunner.run (new TestCompoundFile("testReadAfterClose"));
comment|//        TestRunner.run (new TestCompoundFile("testRandomAccess"));
comment|//        TestRunner.run (new TestCompoundFile("testRandomAccessClones"));
comment|//        TestRunner.run (new TestCompoundFile("testFileNotFound"));
comment|//        TestRunner.run (new TestCompoundFile("testReadPastEOF"));
comment|//        TestRunner.run (new TestCompoundFile("testIWCreate"));
block|}
DECL|method|TestCompoundFile
specifier|public
name|TestCompoundFile
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|TestCompoundFile
specifier|public
name|TestCompoundFile
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|field|dir
specifier|private
name|Directory
name|dir
decl_stmt|;
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
comment|//dir = new RAMDirectory();
name|dir
operator|=
name|FSDirectory
operator|.
name|getDirectory
argument_list|(
literal|"testIndex"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** Creates a file of the specified size with random data. */
DECL|method|createRandomFile
specifier|private
name|void
name|createRandomFile
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputStream
name|os
init|=
name|dir
operator|.
name|createFile
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|b
init|=
call|(
name|byte
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|256
argument_list|)
decl_stmt|;
name|os
operator|.
name|writeByte
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Creates a file of the specified size with sequential data. The first      *  byte is written as the start byte provided. All subsequent bytes are      *  computed as start + offset where offset is the number of the byte.      */
DECL|method|createSequenceFile
specifier|private
name|void
name|createSequenceFile
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|name
parameter_list|,
name|byte
name|start
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputStream
name|os
init|=
name|dir
operator|.
name|createFile
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|os
operator|.
name|writeByte
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|start
operator|++
expr_stmt|;
block|}
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|assertSameStreams
specifier|private
name|void
name|assertSameStreams
parameter_list|(
name|String
name|msg
parameter_list|,
name|InputStream
name|expected
parameter_list|,
name|InputStream
name|test
parameter_list|)
throws|throws
name|IOException
block|{
name|assertNotNull
argument_list|(
name|msg
operator|+
literal|" null expected"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|msg
operator|+
literal|" null test"
argument_list|,
name|test
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|+
literal|" length"
argument_list|,
name|expected
operator|.
name|length
argument_list|()
argument_list|,
name|test
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|+
literal|" position"
argument_list|,
name|expected
operator|.
name|getFilePointer
argument_list|()
argument_list|,
name|test
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|byte
name|expectedBuffer
index|[]
init|=
operator|new
name|byte
index|[
literal|512
index|]
decl_stmt|;
name|byte
name|testBuffer
index|[]
init|=
operator|new
name|byte
index|[
name|expectedBuffer
operator|.
name|length
index|]
decl_stmt|;
name|long
name|remainder
init|=
name|expected
operator|.
name|length
argument_list|()
operator|-
name|expected
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
while|while
condition|(
name|remainder
operator|>
literal|0
condition|)
block|{
name|int
name|readLen
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|remainder
argument_list|,
name|expectedBuffer
operator|.
name|length
argument_list|)
decl_stmt|;
name|expected
operator|.
name|readBytes
argument_list|(
name|expectedBuffer
argument_list|,
literal|0
argument_list|,
name|readLen
argument_list|)
expr_stmt|;
name|test
operator|.
name|readBytes
argument_list|(
name|testBuffer
argument_list|,
literal|0
argument_list|,
name|readLen
argument_list|)
expr_stmt|;
name|assertEqualArrays
argument_list|(
name|msg
operator|+
literal|", remainder "
operator|+
name|remainder
argument_list|,
name|expectedBuffer
argument_list|,
name|testBuffer
argument_list|,
literal|0
argument_list|,
name|readLen
argument_list|)
expr_stmt|;
name|remainder
operator|-=
name|readLen
expr_stmt|;
block|}
block|}
DECL|method|assertSameStreams
specifier|private
name|void
name|assertSameStreams
parameter_list|(
name|String
name|msg
parameter_list|,
name|InputStream
name|expected
parameter_list|,
name|InputStream
name|actual
parameter_list|,
name|long
name|seekTo
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|seekTo
operator|<
literal|0
condition|)
block|{
try|try
block|{
name|actual
operator|.
name|seek
argument_list|(
name|seekTo
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|msg
operator|+
literal|", "
operator|+
name|seekTo
operator|+
literal|", negative seek"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|/* success */
comment|//System.out.println("SUCCESS: Negative seek: " + e);
block|}
block|}
elseif|else
if|if
condition|(
name|seekTo
operator|>
literal|0
operator|&&
name|seekTo
operator|>=
name|expected
operator|.
name|length
argument_list|()
condition|)
block|{
try|try
block|{
name|actual
operator|.
name|seek
argument_list|(
name|seekTo
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|msg
operator|+
literal|", "
operator|+
name|seekTo
operator|+
literal|", seek past EOF"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|/* success */
comment|//System.out.println("SUCCESS: Seek past EOF: " + e);
block|}
block|}
else|else
block|{
name|expected
operator|.
name|seek
argument_list|(
name|seekTo
argument_list|)
expr_stmt|;
name|actual
operator|.
name|seek
argument_list|(
name|seekTo
argument_list|)
expr_stmt|;
name|assertSameStreams
argument_list|(
name|msg
operator|+
literal|", seek(mid)"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertSameSeekBehavior
specifier|private
name|void
name|assertSameSeekBehavior
parameter_list|(
name|String
name|msg
parameter_list|,
name|InputStream
name|expected
parameter_list|,
name|InputStream
name|actual
parameter_list|)
throws|throws
name|IOException
block|{
comment|// seek to 0
name|long
name|point
init|=
literal|0
decl_stmt|;
name|assertSameStreams
argument_list|(
name|msg
operator|+
literal|", seek(0)"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|,
name|point
argument_list|)
expr_stmt|;
comment|// seek to middle
name|point
operator|=
name|expected
operator|.
name|length
argument_list|()
operator|/
literal|2l
expr_stmt|;
name|assertSameStreams
argument_list|(
name|msg
operator|+
literal|", seek(mid)"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|,
name|point
argument_list|)
expr_stmt|;
comment|// seek to end - 2
name|point
operator|=
name|expected
operator|.
name|length
argument_list|()
operator|-
literal|2
expr_stmt|;
name|assertSameStreams
argument_list|(
name|msg
operator|+
literal|", seek(end-2)"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|,
name|point
argument_list|)
expr_stmt|;
comment|// seek to end - 1
name|point
operator|=
name|expected
operator|.
name|length
argument_list|()
operator|-
literal|1
expr_stmt|;
name|assertSameStreams
argument_list|(
name|msg
operator|+
literal|", seek(end-1)"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|,
name|point
argument_list|)
expr_stmt|;
comment|// seek to the end
name|point
operator|=
name|expected
operator|.
name|length
argument_list|()
expr_stmt|;
name|assertSameStreams
argument_list|(
name|msg
operator|+
literal|", seek(end)"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|,
name|point
argument_list|)
expr_stmt|;
comment|// seek past end
name|point
operator|=
name|expected
operator|.
name|length
argument_list|()
operator|+
literal|1
expr_stmt|;
name|assertSameStreams
argument_list|(
name|msg
operator|+
literal|", seek(end+1)"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|,
name|point
argument_list|)
expr_stmt|;
block|}
DECL|method|assertEqualArrays
specifier|private
name|void
name|assertEqualArrays
parameter_list|(
name|String
name|msg
parameter_list|,
name|byte
index|[]
name|expected
parameter_list|,
name|byte
index|[]
name|test
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|msg
operator|+
literal|" null expected"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|msg
operator|+
literal|" null test"
argument_list|,
name|test
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|msg
operator|+
literal|" "
operator|+
name|i
argument_list|,
name|expected
index|[
name|i
index|]
argument_list|,
name|test
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// ===========================================================
comment|//  Tests of the basic CompoundFile functionality
comment|// ===========================================================
comment|/** This test creates compound file based on a single file.      *  Files of different sizes are tested: 0, 1, 10, 100 bytes.      */
DECL|method|testSingleFile
specifier|public
name|void
name|testSingleFile
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|data
index|[]
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|10
block|,
literal|100
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
literal|"t"
operator|+
name|data
index|[
name|i
index|]
decl_stmt|;
name|createSequenceFile
argument_list|(
name|dir
argument_list|,
name|name
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
name|data
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|CompoundFileWriter
name|csw
init|=
operator|new
name|CompoundFileWriter
argument_list|(
name|dir
argument_list|,
name|name
operator|+
literal|".cfs"
argument_list|)
decl_stmt|;
name|csw
operator|.
name|addFile
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|csw
operator|.
name|close
argument_list|()
expr_stmt|;
name|CompoundFileReader
name|csr
init|=
operator|new
name|CompoundFileReader
argument_list|(
name|dir
argument_list|,
name|name
operator|+
literal|".cfs"
argument_list|)
decl_stmt|;
name|InputStream
name|expected
init|=
name|dir
operator|.
name|openFile
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|InputStream
name|actual
init|=
name|csr
operator|.
name|openFile
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertSameStreams
argument_list|(
name|name
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSameSeekBehavior
argument_list|(
name|name
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|expected
operator|.
name|close
argument_list|()
expr_stmt|;
name|actual
operator|.
name|close
argument_list|()
expr_stmt|;
name|csr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** This test creates compound file based on two files.      *      */
DECL|method|testTwoFiles
specifier|public
name|void
name|testTwoFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|createSequenceFile
argument_list|(
name|dir
argument_list|,
literal|"d1"
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|createSequenceFile
argument_list|(
name|dir
argument_list|,
literal|"d2"
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|114
argument_list|)
expr_stmt|;
name|CompoundFileWriter
name|csw
init|=
operator|new
name|CompoundFileWriter
argument_list|(
name|dir
argument_list|,
literal|"d.csf"
argument_list|)
decl_stmt|;
name|csw
operator|.
name|addFile
argument_list|(
literal|"d1"
argument_list|)
expr_stmt|;
name|csw
operator|.
name|addFile
argument_list|(
literal|"d2"
argument_list|)
expr_stmt|;
name|csw
operator|.
name|close
argument_list|()
expr_stmt|;
name|CompoundFileReader
name|csr
init|=
operator|new
name|CompoundFileReader
argument_list|(
name|dir
argument_list|,
literal|"d.csf"
argument_list|)
decl_stmt|;
name|InputStream
name|expected
init|=
name|dir
operator|.
name|openFile
argument_list|(
literal|"d1"
argument_list|)
decl_stmt|;
name|InputStream
name|actual
init|=
name|csr
operator|.
name|openFile
argument_list|(
literal|"d1"
argument_list|)
decl_stmt|;
name|assertSameStreams
argument_list|(
literal|"d1"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSameSeekBehavior
argument_list|(
literal|"d1"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|expected
operator|.
name|close
argument_list|()
expr_stmt|;
name|actual
operator|.
name|close
argument_list|()
expr_stmt|;
name|expected
operator|=
name|dir
operator|.
name|openFile
argument_list|(
literal|"d2"
argument_list|)
expr_stmt|;
name|actual
operator|=
name|csr
operator|.
name|openFile
argument_list|(
literal|"d2"
argument_list|)
expr_stmt|;
name|assertSameStreams
argument_list|(
literal|"d2"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSameSeekBehavior
argument_list|(
literal|"d2"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|expected
operator|.
name|close
argument_list|()
expr_stmt|;
name|actual
operator|.
name|close
argument_list|()
expr_stmt|;
name|csr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** This test creates a compound file based on a large number of files of      *  various length. The file content is generated randomly. The sizes range      *  from 0 to 1Mb. Some of the sizes are selected to test the buffering      *  logic in the file reading code. For this the chunk variable is set to      *  the length of the buffer used internally by the compound file logic.      */
DECL|method|testRandomFiles
specifier|public
name|void
name|testRandomFiles
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Setup the test segment
name|String
name|segment
init|=
literal|"test"
decl_stmt|;
name|int
name|chunk
init|=
literal|1024
decl_stmt|;
comment|// internal buffer size used by the stream
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".zero"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".ten"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".hundred"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".big1"
argument_list|,
name|chunk
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".big2"
argument_list|,
name|chunk
operator|-
literal|1
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".big3"
argument_list|,
name|chunk
operator|+
literal|1
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".big4"
argument_list|,
literal|3
operator|*
name|chunk
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".big5"
argument_list|,
literal|3
operator|*
name|chunk
operator|-
literal|1
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".big6"
argument_list|,
literal|3
operator|*
name|chunk
operator|+
literal|1
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".big7"
argument_list|,
literal|1000
operator|*
name|chunk
argument_list|)
expr_stmt|;
comment|// Setup extraneous files
name|createRandomFile
argument_list|(
name|dir
argument_list|,
literal|"onetwothree"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".notIn"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|createRandomFile
argument_list|(
name|dir
argument_list|,
name|segment
operator|+
literal|".notIn2"
argument_list|,
literal|51
argument_list|)
expr_stmt|;
comment|// Now test
name|CompoundFileWriter
name|csw
init|=
operator|new
name|CompoundFileWriter
argument_list|(
name|dir
argument_list|,
literal|"test.cfs"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|data
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|".zero"
block|,
literal|".one"
block|,
literal|".ten"
block|,
literal|".hundred"
block|,
literal|".big1"
block|,
literal|".big2"
block|,
literal|".big3"
block|,
literal|".big4"
block|,
literal|".big5"
block|,
literal|".big6"
block|,
literal|".big7"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|csw
operator|.
name|addFile
argument_list|(
name|segment
operator|+
name|data
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|csw
operator|.
name|close
argument_list|()
expr_stmt|;
name|CompoundFileReader
name|csr
init|=
operator|new
name|CompoundFileReader
argument_list|(
name|dir
argument_list|,
literal|"test.cfs"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|InputStream
name|check
init|=
name|dir
operator|.
name|openFile
argument_list|(
name|segment
operator|+
name|data
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|InputStream
name|test
init|=
name|csr
operator|.
name|openFile
argument_list|(
name|segment
operator|+
name|data
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|assertSameStreams
argument_list|(
name|data
index|[
name|i
index|]
argument_list|,
name|check
argument_list|,
name|test
argument_list|)
expr_stmt|;
name|assertSameSeekBehavior
argument_list|(
name|data
index|[
name|i
index|]
argument_list|,
name|check
argument_list|,
name|test
argument_list|)
expr_stmt|;
name|test
operator|.
name|close
argument_list|()
expr_stmt|;
name|check
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|csr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Setup a larger compound file with a number of components, each of      *  which is a sequential file (so that we can easily tell that we are      *  reading in the right byte). The methods sets up 20 files - f0 to f19,      *  the size of each file is 1000 bytes.      */
DECL|method|setUp_2
specifier|private
name|void
name|setUp_2
parameter_list|()
throws|throws
name|IOException
block|{
name|CompoundFileWriter
name|cw
init|=
operator|new
name|CompoundFileWriter
argument_list|(
name|dir
argument_list|,
literal|"f.comp"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|createSequenceFile
argument_list|(
name|dir
argument_list|,
literal|"f"
operator|+
name|i
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|cw
operator|.
name|addFile
argument_list|(
literal|"f"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|cw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testReadAfterClose
specifier|public
name|void
name|testReadAfterClose
parameter_list|()
throws|throws
name|IOException
block|{
name|demo_FSInputStreamBug
argument_list|(
operator|(
name|FSDirectory
operator|)
name|dir
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
DECL|method|demo_FSInputStreamBug
specifier|private
name|void
name|demo_FSInputStreamBug
parameter_list|(
name|FSDirectory
name|fsdir
parameter_list|,
name|String
name|file
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Setup the test file - we need more than 1024 bytes
name|OutputStream
name|os
init|=
name|fsdir
operator|.
name|createFile
argument_list|(
name|file
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2000
condition|;
name|i
operator|++
control|)
block|{
name|os
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|i
argument_list|)
expr_stmt|;
block|}
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|InputStream
name|in
init|=
name|fsdir
operator|.
name|openFile
argument_list|(
name|file
argument_list|)
decl_stmt|;
comment|// This read primes the buffer in InputStream
name|byte
name|b
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
comment|// Close the file
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// ERROR: this call should fail, but succeeds because the buffer
comment|// is still filled
name|b
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
comment|// ERROR: this call should fail, but succeeds for some reason as well
name|in
operator|.
name|seek
argument_list|(
literal|1099
argument_list|)
expr_stmt|;
try|try
block|{
comment|// OK: this call correctly fails. We are now past the 1024 internal
comment|// buffer, so an actual IO is attempted, which fails
name|b
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{         }
block|}
DECL|method|isCSInputStream
specifier|static
name|boolean
name|isCSInputStream
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
return|return
name|is
operator|instanceof
name|CompoundFileReader
operator|.
name|CSInputStream
return|;
block|}
DECL|method|isCSInputStreamOpen
specifier|static
name|boolean
name|isCSInputStreamOpen
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isCSInputStream
argument_list|(
name|is
argument_list|)
condition|)
block|{
name|CompoundFileReader
operator|.
name|CSInputStream
name|cis
init|=
operator|(
name|CompoundFileReader
operator|.
name|CSInputStream
operator|)
name|is
decl_stmt|;
return|return
name|_TestHelper
operator|.
name|isFSInputStreamOpen
argument_list|(
name|cis
operator|.
name|base
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|testClonedStreamsClosing
specifier|public
name|void
name|testClonedStreamsClosing
parameter_list|()
throws|throws
name|IOException
block|{
name|setUp_2
argument_list|()
expr_stmt|;
name|CompoundFileReader
name|cr
init|=
operator|new
name|CompoundFileReader
argument_list|(
name|dir
argument_list|,
literal|"f.comp"
argument_list|)
decl_stmt|;
comment|// basic clone
name|InputStream
name|expected
init|=
name|dir
operator|.
name|openFile
argument_list|(
literal|"f11"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|_TestHelper
operator|.
name|isFSInputStreamOpen
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|InputStream
name|one
init|=
name|cr
operator|.
name|openFile
argument_list|(
literal|"f11"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isCSInputStreamOpen
argument_list|(
name|one
argument_list|)
argument_list|)
expr_stmt|;
name|InputStream
name|two
init|=
operator|(
name|InputStream
operator|)
name|one
operator|.
name|clone
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|isCSInputStreamOpen
argument_list|(
name|two
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameStreams
argument_list|(
literal|"basic clone one"
argument_list|,
name|expected
argument_list|,
name|one
argument_list|)
expr_stmt|;
name|expected
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertSameStreams
argument_list|(
literal|"basic clone two"
argument_list|,
name|expected
argument_list|,
name|two
argument_list|)
expr_stmt|;
comment|// Now close the first stream
name|one
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Only close when cr is closed"
argument_list|,
name|isCSInputStreamOpen
argument_list|(
name|one
argument_list|)
argument_list|)
expr_stmt|;
comment|// The following should really fail since we couldn't expect to
comment|// access a file once close has been called on it (regardless of
comment|// buffering and/or clone magic)
name|expected
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|two
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertSameStreams
argument_list|(
literal|"basic clone two/2"
argument_list|,
name|expected
argument_list|,
name|two
argument_list|)
expr_stmt|;
comment|// Now close the compound reader
name|cr
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Now closed one"
argument_list|,
name|isCSInputStreamOpen
argument_list|(
name|one
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Now closed two"
argument_list|,
name|isCSInputStreamOpen
argument_list|(
name|two
argument_list|)
argument_list|)
expr_stmt|;
comment|// The following may also fail since the compound stream is closed
name|expected
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|two
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//assertSameStreams("basic clone two/3", expected, two);
comment|// Now close the second clone
name|two
operator|.
name|close
argument_list|()
expr_stmt|;
name|expected
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|two
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//assertSameStreams("basic clone two/4", expected, two);
name|expected
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** This test opens two files from a compound stream and verifies that      *  their file positions are independent of each other.      */
DECL|method|testRandomAccess
specifier|public
name|void
name|testRandomAccess
parameter_list|()
throws|throws
name|IOException
block|{
name|setUp_2
argument_list|()
expr_stmt|;
name|CompoundFileReader
name|cr
init|=
operator|new
name|CompoundFileReader
argument_list|(
name|dir
argument_list|,
literal|"f.comp"
argument_list|)
decl_stmt|;
comment|// Open two files
name|InputStream
name|e1
init|=
name|dir
operator|.
name|openFile
argument_list|(
literal|"f11"
argument_list|)
decl_stmt|;
name|InputStream
name|e2
init|=
name|dir
operator|.
name|openFile
argument_list|(
literal|"f3"
argument_list|)
decl_stmt|;
name|InputStream
name|a1
init|=
name|cr
operator|.
name|openFile
argument_list|(
literal|"f11"
argument_list|)
decl_stmt|;
name|InputStream
name|a2
init|=
name|dir
operator|.
name|openFile
argument_list|(
literal|"f3"
argument_list|)
decl_stmt|;
comment|// Seek the first pair
name|e1
operator|.
name|seek
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|a1
operator|.
name|seek
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|byte
name|be1
init|=
name|e1
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|byte
name|ba1
init|=
name|a1
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
comment|// Now seek the second pair
name|e2
operator|.
name|seek
argument_list|(
literal|1027
argument_list|)
expr_stmt|;
name|a2
operator|.
name|seek
argument_list|(
literal|1027
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1027
argument_list|,
name|e2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1027
argument_list|,
name|a2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|byte
name|be2
init|=
name|e2
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|byte
name|ba2
init|=
name|a2
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|be2
argument_list|,
name|ba2
argument_list|)
expr_stmt|;
comment|// Now make sure the first one didn't move
name|assertEquals
argument_list|(
literal|101
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|101
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be1
operator|=
name|e1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba1
operator|=
name|a1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
comment|// Now more the first one again, past the buffer length
name|e1
operator|.
name|seek
argument_list|(
literal|1910
argument_list|)
expr_stmt|;
name|a1
operator|.
name|seek
argument_list|(
literal|1910
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1910
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1910
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be1
operator|=
name|e1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba1
operator|=
name|a1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
comment|// Now make sure the second set didn't move
name|assertEquals
argument_list|(
literal|1028
argument_list|,
name|e2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1028
argument_list|,
name|a2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be2
operator|=
name|e2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba2
operator|=
name|a2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be2
argument_list|,
name|ba2
argument_list|)
expr_stmt|;
comment|// Move the second set back, again cross the buffer size
name|e2
operator|.
name|seek
argument_list|(
literal|17
argument_list|)
expr_stmt|;
name|a2
operator|.
name|seek
argument_list|(
literal|17
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|e2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|a2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be2
operator|=
name|e2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba2
operator|=
name|a2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be2
argument_list|,
name|ba2
argument_list|)
expr_stmt|;
comment|// Finally, make sure the first set didn't move
comment|// Now make sure the first one didn't move
name|assertEquals
argument_list|(
literal|1911
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1911
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be1
operator|=
name|e1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba1
operator|=
name|a1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
name|e1
operator|.
name|close
argument_list|()
expr_stmt|;
name|e2
operator|.
name|close
argument_list|()
expr_stmt|;
name|a1
operator|.
name|close
argument_list|()
expr_stmt|;
name|a2
operator|.
name|close
argument_list|()
expr_stmt|;
name|cr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** This test opens two files from a compound stream and verifies that      *  their file positions are independent of each other.      */
DECL|method|testRandomAccessClones
specifier|public
name|void
name|testRandomAccessClones
parameter_list|()
throws|throws
name|IOException
block|{
name|setUp_2
argument_list|()
expr_stmt|;
name|CompoundFileReader
name|cr
init|=
operator|new
name|CompoundFileReader
argument_list|(
name|dir
argument_list|,
literal|"f.comp"
argument_list|)
decl_stmt|;
comment|// Open two files
name|InputStream
name|e1
init|=
name|cr
operator|.
name|openFile
argument_list|(
literal|"f11"
argument_list|)
decl_stmt|;
name|InputStream
name|e2
init|=
name|cr
operator|.
name|openFile
argument_list|(
literal|"f3"
argument_list|)
decl_stmt|;
name|InputStream
name|a1
init|=
operator|(
name|InputStream
operator|)
name|e1
operator|.
name|clone
argument_list|()
decl_stmt|;
name|InputStream
name|a2
init|=
operator|(
name|InputStream
operator|)
name|e2
operator|.
name|clone
argument_list|()
decl_stmt|;
comment|// Seek the first pair
name|e1
operator|.
name|seek
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|a1
operator|.
name|seek
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|byte
name|be1
init|=
name|e1
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|byte
name|ba1
init|=
name|a1
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
comment|// Now seek the second pair
name|e2
operator|.
name|seek
argument_list|(
literal|1027
argument_list|)
expr_stmt|;
name|a2
operator|.
name|seek
argument_list|(
literal|1027
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1027
argument_list|,
name|e2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1027
argument_list|,
name|a2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|byte
name|be2
init|=
name|e2
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|byte
name|ba2
init|=
name|a2
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|be2
argument_list|,
name|ba2
argument_list|)
expr_stmt|;
comment|// Now make sure the first one didn't move
name|assertEquals
argument_list|(
literal|101
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|101
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be1
operator|=
name|e1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba1
operator|=
name|a1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
comment|// Now more the first one again, past the buffer length
name|e1
operator|.
name|seek
argument_list|(
literal|1910
argument_list|)
expr_stmt|;
name|a1
operator|.
name|seek
argument_list|(
literal|1910
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1910
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1910
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be1
operator|=
name|e1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba1
operator|=
name|a1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
comment|// Now make sure the second set didn't move
name|assertEquals
argument_list|(
literal|1028
argument_list|,
name|e2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1028
argument_list|,
name|a2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be2
operator|=
name|e2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba2
operator|=
name|a2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be2
argument_list|,
name|ba2
argument_list|)
expr_stmt|;
comment|// Move the second set back, again cross the buffer size
name|e2
operator|.
name|seek
argument_list|(
literal|17
argument_list|)
expr_stmt|;
name|a2
operator|.
name|seek
argument_list|(
literal|17
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|e2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|a2
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be2
operator|=
name|e2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba2
operator|=
name|a2
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be2
argument_list|,
name|ba2
argument_list|)
expr_stmt|;
comment|// Finally, make sure the first set didn't move
comment|// Now make sure the first one didn't move
name|assertEquals
argument_list|(
literal|1911
argument_list|,
name|e1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1911
argument_list|,
name|a1
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|be1
operator|=
name|e1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|ba1
operator|=
name|a1
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|be1
argument_list|,
name|ba1
argument_list|)
expr_stmt|;
name|e1
operator|.
name|close
argument_list|()
expr_stmt|;
name|e2
operator|.
name|close
argument_list|()
expr_stmt|;
name|a1
operator|.
name|close
argument_list|()
expr_stmt|;
name|a2
operator|.
name|close
argument_list|()
expr_stmt|;
name|cr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testFileNotFound
specifier|public
name|void
name|testFileNotFound
parameter_list|()
throws|throws
name|IOException
block|{
name|setUp_2
argument_list|()
expr_stmt|;
name|CompoundFileReader
name|cr
init|=
operator|new
name|CompoundFileReader
argument_list|(
name|dir
argument_list|,
literal|"f.comp"
argument_list|)
decl_stmt|;
comment|// Open two files
try|try
block|{
name|InputStream
name|e1
init|=
name|cr
operator|.
name|openFile
argument_list|(
literal|"bogus"
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"File not found"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|/* success */
comment|//System.out.println("SUCCESS: File Not Found: " + e);
block|}
name|cr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testReadPastEOF
specifier|public
name|void
name|testReadPastEOF
parameter_list|()
throws|throws
name|IOException
block|{
name|setUp_2
argument_list|()
expr_stmt|;
name|CompoundFileReader
name|cr
init|=
operator|new
name|CompoundFileReader
argument_list|(
name|dir
argument_list|,
literal|"f.comp"
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|cr
operator|.
name|openFile
argument_list|(
literal|"f2"
argument_list|)
decl_stmt|;
name|is
operator|.
name|seek
argument_list|(
name|is
operator|.
name|length
argument_list|()
operator|-
literal|10
argument_list|)
expr_stmt|;
name|byte
name|b
index|[]
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
name|is
operator|.
name|readBytes
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
try|try
block|{
name|byte
name|test
init|=
name|is
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"Single byte read past end of file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|/* success */
comment|//System.out.println("SUCCESS: single byte read past end of file: " + e);
block|}
name|is
operator|.
name|seek
argument_list|(
name|is
operator|.
name|length
argument_list|()
operator|-
literal|10
argument_list|)
expr_stmt|;
try|try
block|{
name|is
operator|.
name|readBytes
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Block read past end of file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|/* success */
comment|//System.out.println("SUCCESS: block read past end of file: " + e);
block|}
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|cr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
