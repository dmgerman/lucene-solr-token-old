begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|WhitespaceAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_comment
comment|/*   Verify we can read the pre-2.1 file format, do searches   against it, and add documents to it. */
end_comment
begin_class
DECL|class|TestBackwardsCompatibility
specifier|public
class|class
name|TestBackwardsCompatibility
extends|extends
name|LuceneTestCase
block|{
comment|// Uncomment these cases& run them on an older Lucene
comment|// version, to generate an index to test backwards
comment|// compatibility.  Then, cd to build/test/index.cfs and
comment|// run "zip index.<VERSION>.cfs.zip *"; cd to
comment|// build/test/index.nocfs and run "zip
comment|// index.<VERSION>.nocfs.zip *".  Then move those 2 zip
comment|// files to your trunk checkout and add them to the
comment|// oldNames array.
comment|/*   public void testCreatePreLocklessCFS() throws IOException {     createIndex("index.cfs", true);   }    public void testCreatePreLocklessNoCFS() throws IOException {     createIndex("index.nocfs", false);   }   */
comment|/* Unzips dirName + ".zip" --> dirName, removing dirName      first */
DECL|method|unzip
specifier|public
name|void
name|unzip
parameter_list|(
name|String
name|zipName
parameter_list|,
name|String
name|destDirName
parameter_list|)
throws|throws
name|IOException
block|{
name|Enumeration
name|entries
decl_stmt|;
name|ZipFile
name|zipFile
decl_stmt|;
name|zipFile
operator|=
operator|new
name|ZipFile
argument_list|(
name|zipName
operator|+
literal|".zip"
argument_list|)
expr_stmt|;
name|entries
operator|=
name|zipFile
operator|.
name|entries
argument_list|()
expr_stmt|;
name|String
name|dirName
init|=
name|fullDir
argument_list|(
name|destDirName
argument_list|)
decl_stmt|;
name|File
name|fileDir
init|=
operator|new
name|File
argument_list|(
name|dirName
argument_list|)
decl_stmt|;
name|rmDir
argument_list|(
name|destDirName
argument_list|)
expr_stmt|;
name|fileDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
while|while
condition|(
name|entries
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|ZipEntry
name|entry
init|=
operator|(
name|ZipEntry
operator|)
name|entries
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|InputStream
name|in
init|=
name|zipFile
operator|.
name|getInputStream
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|fileDir
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|8192
index|]
decl_stmt|;
name|int
name|len
decl_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|zipFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testCreateCFS
specifier|public
name|void
name|testCreateCFS
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|dirName
init|=
literal|"testindex.cfs"
decl_stmt|;
name|createIndex
argument_list|(
name|dirName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rmDir
argument_list|(
name|dirName
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateNoCFS
specifier|public
name|void
name|testCreateNoCFS
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|dirName
init|=
literal|"testindex.nocfs"
decl_stmt|;
name|createIndex
argument_list|(
name|dirName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rmDir
argument_list|(
name|dirName
argument_list|)
expr_stmt|;
block|}
DECL|field|oldNames
specifier|final
name|String
index|[]
name|oldNames
init|=
block|{
literal|"19.cfs"
block|,
literal|"19.nocfs"
block|,
literal|"20.cfs"
block|,
literal|"20.nocfs"
block|,
literal|"21.cfs"
block|,
literal|"21.nocfs"
block|,
literal|"22.cfs"
block|,
literal|"22.nocfs"
block|,
literal|"23.cfs"
block|,
literal|"23.nocfs"
block|,
literal|"24.cfs"
block|,
literal|"24.nocfs"
block|,   }
decl_stmt|;
DECL|method|testOptimizeOldIndex
specifier|public
name|void
name|testOptimizeOldIndex
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oldNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|dirName
init|=
literal|"src/test/org/apache/lucene/index/index."
operator|+
name|oldNames
index|[
name|i
index|]
decl_stmt|;
name|unzip
argument_list|(
name|dirName
argument_list|,
name|oldNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|String
name|fullPath
init|=
name|fullDir
argument_list|(
name|oldNames
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
name|FSDirectory
operator|.
name|open
argument_list|(
operator|new
name|File
argument_list|(
name|fullPath
argument_list|)
argument_list|)
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
decl_stmt|;
name|w
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|_TestUtil
operator|.
name|checkIndex
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|rmDir
argument_list|(
name|oldNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSearchOldIndex
specifier|public
name|void
name|testSearchOldIndex
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oldNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|dirName
init|=
literal|"src/test/org/apache/lucene/index/index."
operator|+
name|oldNames
index|[
name|i
index|]
decl_stmt|;
name|unzip
argument_list|(
name|dirName
argument_list|,
name|oldNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|searchIndex
argument_list|(
name|oldNames
index|[
name|i
index|]
argument_list|,
name|oldNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|rmDir
argument_list|(
name|oldNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIndexOldIndexNoAdds
specifier|public
name|void
name|testIndexOldIndexNoAdds
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oldNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|dirName
init|=
literal|"src/test/org/apache/lucene/index/index."
operator|+
name|oldNames
index|[
name|i
index|]
decl_stmt|;
name|unzip
argument_list|(
name|dirName
argument_list|,
name|oldNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|changeIndexNoAdds
argument_list|(
name|oldNames
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rmDir
argument_list|(
name|oldNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|unzip
argument_list|(
name|dirName
argument_list|,
name|oldNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|changeIndexNoAdds
argument_list|(
name|oldNames
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rmDir
argument_list|(
name|oldNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIndexOldIndex
specifier|public
name|void
name|testIndexOldIndex
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oldNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|dirName
init|=
literal|"src/test/org/apache/lucene/index/index."
operator|+
name|oldNames
index|[
name|i
index|]
decl_stmt|;
name|unzip
argument_list|(
name|dirName
argument_list|,
name|oldNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|changeIndexWithAdds
argument_list|(
name|oldNames
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rmDir
argument_list|(
name|oldNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|unzip
argument_list|(
name|dirName
argument_list|,
name|oldNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|changeIndexWithAdds
argument_list|(
name|oldNames
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rmDir
argument_list|(
name|oldNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testHits
specifier|private
name|void
name|testHits
parameter_list|(
name|ScoreDoc
index|[]
name|hits
parameter_list|,
name|int
name|expectedCount
parameter_list|,
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|hitCount
init|=
name|hits
operator|.
name|length
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of hits"
argument_list|,
name|expectedCount
argument_list|,
name|hitCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hitCount
condition|;
name|i
operator|++
control|)
block|{
name|reader
operator|.
name|document
argument_list|(
name|hits
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|reader
operator|.
name|getTermFreqVectors
argument_list|(
name|hits
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|searchIndex
specifier|public
name|void
name|searchIndex
parameter_list|(
name|String
name|dirName
parameter_list|,
name|String
name|oldName
parameter_list|)
throws|throws
name|IOException
block|{
comment|//QueryParser parser = new QueryParser("contents", new WhitespaceAnalyzer());
comment|//Query query = parser.parse("handle:1");
name|dirName
operator|=
name|fullDir
argument_list|(
name|dirName
argument_list|)
expr_stmt|;
name|Directory
name|dir
init|=
name|FSDirectory
operator|.
name|open
argument_list|(
operator|new
name|File
argument_list|(
name|dirName
argument_list|)
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|IndexReader
name|reader
init|=
name|searcher
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
name|_TestUtil
operator|.
name|checkIndex
argument_list|(
name|dir
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|35
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|reader
operator|.
name|isDeleted
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|Document
name|d
init|=
name|reader
operator|.
name|document
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|List
name|fields
init|=
name|d
operator|.
name|getFields
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|oldName
operator|.
name|startsWith
argument_list|(
literal|"19."
argument_list|)
operator|&&
operator|!
name|oldName
operator|.
name|startsWith
argument_list|(
literal|"20."
argument_list|)
operator|&&
operator|!
name|oldName
operator|.
name|startsWith
argument_list|(
literal|"21."
argument_list|)
operator|&&
operator|!
name|oldName
operator|.
name|startsWith
argument_list|(
literal|"22."
argument_list|)
condition|)
block|{
comment|// Test on indices>= 2.3
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|fields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Field
name|f
init|=
operator|(
name|Field
operator|)
name|d
operator|.
name|getField
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
operator|+
name|i
argument_list|,
name|f
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|=
operator|(
name|Field
operator|)
name|d
operator|.
name|getField
argument_list|(
literal|"utf8"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Lu\uD834\uDD1Ece\uD834\uDD60ne \u0000 \u2620 ab\ud917\udc17cd"
argument_list|,
name|f
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|=
operator|(
name|Field
operator|)
name|d
operator|.
name|getField
argument_list|(
literal|"autf8"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Lu\uD834\uDD1Ece\uD834\uDD60ne \u0000 \u2620 ab\ud917\udc17cd"
argument_list|,
name|f
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|=
operator|(
name|Field
operator|)
name|d
operator|.
name|getField
argument_list|(
literal|"content2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"here is more content with aaa aaa aaa"
argument_list|,
name|f
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|=
operator|(
name|Field
operator|)
name|d
operator|.
name|getField
argument_list|(
literal|"fie\u2C77ld"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"field with non-ascii name"
argument_list|,
name|f
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
comment|// Only ID 7 is deleted
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
comment|// First document should be #21 since it's norm was
comment|// increased:
name|Document
name|d
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"didn't get the right document first"
argument_list|,
literal|"21"
argument_list|,
name|d
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|testHits
argument_list|(
name|hits
argument_list|,
literal|34
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|oldName
operator|.
name|startsWith
argument_list|(
literal|"19."
argument_list|)
operator|&&
operator|!
name|oldName
operator|.
name|startsWith
argument_list|(
literal|"20."
argument_list|)
operator|&&
operator|!
name|oldName
operator|.
name|startsWith
argument_list|(
literal|"21."
argument_list|)
operator|&&
operator|!
name|oldName
operator|.
name|startsWith
argument_list|(
literal|"22."
argument_list|)
condition|)
block|{
comment|// Test on indices>= 2.3
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"utf8"
argument_list|,
literal|"\u0000"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|34
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"utf8"
argument_list|,
literal|"Lu\uD834\uDD1Ece\uD834\uDD60ne"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|34
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"utf8"
argument_list|,
literal|"ab\ud917\udc17cd"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|34
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/* Open pre-lockless index, add docs, do a delete&    * setNorm, and search */
DECL|method|changeIndexWithAdds
specifier|public
name|void
name|changeIndexWithAdds
parameter_list|(
name|String
name|dirName
parameter_list|,
name|boolean
name|autoCommit
parameter_list|)
throws|throws
name|IOException
block|{
name|dirName
operator|=
name|fullDir
argument_list|(
name|dirName
argument_list|)
expr_stmt|;
name|Directory
name|dir
init|=
name|FSDirectory
operator|.
name|open
argument_list|(
operator|new
name|File
argument_list|(
name|dirName
argument_list|)
argument_list|)
decl_stmt|;
comment|// open writer
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|autoCommit
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// add 10 docs
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|,
literal|35
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
comment|// make sure writer sees right total -- writer seems not to know about deletes in .del?
name|assertEquals
argument_list|(
literal|"wrong doc count"
argument_list|,
literal|45
argument_list|,
name|writer
operator|.
name|docCount
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// make sure searching sees right # hits
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|Document
name|d
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong first document"
argument_list|,
literal|"21"
argument_list|,
name|d
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|testHits
argument_list|(
name|hits
argument_list|,
literal|44
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// make sure we can do delete& setNorm against this
comment|// pre-lockless segment:
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|Term
name|searchTerm
init|=
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|)
decl_stmt|;
name|int
name|delCount
init|=
name|reader
operator|.
name|deleteDocuments
argument_list|(
name|searchTerm
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong delete count"
argument_list|,
literal|1
argument_list|,
name|delCount
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setNorm
argument_list|(
literal|22
argument_list|,
literal|"content"
argument_list|,
operator|(
name|float
operator|)
literal|2.0
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// make sure they "took":
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of hits"
argument_list|,
literal|43
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|d
operator|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong first document"
argument_list|,
literal|"22"
argument_list|,
name|d
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|testHits
argument_list|(
name|hits
argument_list|,
literal|43
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// optimize
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|autoCommit
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of hits"
argument_list|,
literal|43
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|d
operator|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|testHits
argument_list|(
name|hits
argument_list|,
literal|43
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong first document"
argument_list|,
literal|"22"
argument_list|,
name|d
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/* Open pre-lockless index, add docs, do a delete&    * setNorm, and search */
DECL|method|changeIndexNoAdds
specifier|public
name|void
name|changeIndexNoAdds
parameter_list|(
name|String
name|dirName
parameter_list|,
name|boolean
name|autoCommit
parameter_list|)
throws|throws
name|IOException
block|{
name|dirName
operator|=
name|fullDir
argument_list|(
name|dirName
argument_list|)
expr_stmt|;
name|Directory
name|dir
init|=
name|FSDirectory
operator|.
name|open
argument_list|(
operator|new
name|File
argument_list|(
name|dirName
argument_list|)
argument_list|)
decl_stmt|;
comment|// make sure searching sees right # hits
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of hits"
argument_list|,
literal|34
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|Document
name|d
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong first document"
argument_list|,
literal|"21"
argument_list|,
name|d
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// make sure we can do a delete& setNorm against this
comment|// pre-lockless segment:
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|Term
name|searchTerm
init|=
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|)
decl_stmt|;
name|int
name|delCount
init|=
name|reader
operator|.
name|deleteDocuments
argument_list|(
name|searchTerm
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong delete count"
argument_list|,
literal|1
argument_list|,
name|delCount
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setNorm
argument_list|(
literal|22
argument_list|,
literal|"content"
argument_list|,
operator|(
name|float
operator|)
literal|2.0
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// make sure they "took":
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of hits"
argument_list|,
literal|33
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|d
operator|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong first document"
argument_list|,
literal|"22"
argument_list|,
name|d
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|testHits
argument_list|(
name|hits
argument_list|,
literal|33
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// optimize
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|autoCommit
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of hits"
argument_list|,
literal|33
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|d
operator|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong first document"
argument_list|,
literal|"22"
argument_list|,
name|d
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|testHits
argument_list|(
name|hits
argument_list|,
literal|33
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createIndex
specifier|public
name|void
name|createIndex
parameter_list|(
name|String
name|dirName
parameter_list|,
name|boolean
name|doCFS
parameter_list|)
throws|throws
name|IOException
block|{
name|rmDir
argument_list|(
name|dirName
argument_list|)
expr_stmt|;
name|dirName
operator|=
name|fullDir
argument_list|(
name|dirName
argument_list|)
expr_stmt|;
name|Directory
name|dir
init|=
name|FSDirectory
operator|.
name|open
argument_list|(
operator|new
name|File
argument_list|(
name|dirName
argument_list|)
argument_list|)
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setUseCompoundFile
argument_list|(
name|doCFS
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|10
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|35
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"wrong doc count"
argument_list|,
literal|35
argument_list|,
name|writer
operator|.
name|docCount
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Delete one doc so we get a .del file:
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|Term
name|searchTerm
init|=
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|)
decl_stmt|;
name|int
name|delCount
init|=
name|reader
operator|.
name|deleteDocuments
argument_list|(
name|searchTerm
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"didn't delete the right number of documents"
argument_list|,
literal|1
argument_list|,
name|delCount
argument_list|)
expr_stmt|;
comment|// Set one norm so we get a .s0 file:
name|reader
operator|.
name|setNorm
argument_list|(
literal|21
argument_list|,
literal|"content"
argument_list|,
operator|(
name|float
operator|)
literal|1.5
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/* Verifies that the expected file names were produced */
DECL|method|testExactFileNames
specifier|public
name|void
name|testExactFileNames
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|pass
init|=
literal|0
init|;
name|pass
operator|<
literal|2
condition|;
name|pass
operator|++
control|)
block|{
name|String
name|outputDir
init|=
literal|"lucene.backwardscompat0.index"
decl_stmt|;
name|rmDir
argument_list|(
name|outputDir
argument_list|)
expr_stmt|;
try|try
block|{
name|Directory
name|dir
init|=
name|FSDirectory
operator|.
name|open
argument_list|(
operator|new
name|File
argument_list|(
name|fullDir
argument_list|(
name|outputDir
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|autoCommit
init|=
literal|0
operator|==
name|pass
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|autoCommit
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setRAMBufferSizeMB
argument_list|(
literal|16.0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|35
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"wrong doc count"
argument_list|,
literal|35
argument_list|,
name|writer
operator|.
name|docCount
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Delete one doc so we get a .del file:
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|Term
name|searchTerm
init|=
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|)
decl_stmt|;
name|int
name|delCount
init|=
name|reader
operator|.
name|deleteDocuments
argument_list|(
name|searchTerm
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"didn't delete the right number of documents"
argument_list|,
literal|1
argument_list|,
name|delCount
argument_list|)
expr_stmt|;
comment|// Set one norm so we get a .s0 file:
name|reader
operator|.
name|setNorm
argument_list|(
literal|21
argument_list|,
literal|"content"
argument_list|,
operator|(
name|float
operator|)
literal|1.5
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// The numbering of fields can vary depending on which
comment|// JRE is in use.  On some JREs we see content bound to
comment|// field 0; on others, field 1.  So, here we have to
comment|// figure out which field number corresponds to
comment|// "content", and then set our expected file names below
comment|// accordingly:
name|CompoundFileReader
name|cfsReader
init|=
operator|new
name|CompoundFileReader
argument_list|(
name|dir
argument_list|,
literal|"_0.cfs"
argument_list|)
decl_stmt|;
name|FieldInfos
name|fieldInfos
init|=
operator|new
name|FieldInfos
argument_list|(
name|cfsReader
argument_list|,
literal|"_0.fnm"
argument_list|)
decl_stmt|;
name|int
name|contentFieldIndex
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldInfos
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FieldInfo
name|fi
init|=
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"content"
argument_list|)
condition|)
block|{
name|contentFieldIndex
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
name|cfsReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"could not locate the 'content' field number in the _2.cfs segment"
argument_list|,
name|contentFieldIndex
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Now verify file names:
name|String
index|[]
name|expected
decl_stmt|;
name|expected
operator|=
operator|new
name|String
index|[]
block|{
literal|"_0.cfs"
block|,
literal|"_0_1.del"
block|,
literal|"_0_1.s"
operator|+
name|contentFieldIndex
block|,
literal|"segments_3"
block|,
literal|"segments.gen"
block|}
expr_stmt|;
name|String
index|[]
name|actual
init|=
name|dir
operator|.
name|listAll
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|actual
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"incorrect filenames in index: expected:\n    "
operator|+
name|asString
argument_list|(
name|expected
argument_list|)
operator|+
literal|"\n  actual:\n    "
operator|+
name|asString
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rmDir
argument_list|(
name|outputDir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|asString
specifier|private
name|String
name|asString
parameter_list|(
name|String
index|[]
name|l
parameter_list|)
block|{
name|String
name|s
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|s
operator|+=
literal|"\n    "
expr_stmt|;
block|}
name|s
operator|+=
name|l
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
DECL|method|addDoc
specifier|private
name|void
name|addDoc
parameter_list|(
name|IndexWriter
name|writer
parameter_list|,
name|int
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"autf8"
argument_list|,
literal|"Lu\uD834\uDD1Ece\uD834\uDD60ne \u0000 \u2620 ab\ud917\udc17cd"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"utf8"
argument_list|,
literal|"Lu\uD834\uDD1Ece\uD834\uDD60ne \u0000 \u2620 ab\ud917\udc17cd"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content2"
argument_list|,
literal|"here is more content with aaa aaa aaa"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"fie\u2C77ld"
argument_list|,
literal|"field with non-ascii name"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|rmDir
specifier|private
name|void
name|rmDir
parameter_list|(
name|String
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|fileDir
init|=
operator|new
name|File
argument_list|(
name|fullDir
argument_list|(
name|dir
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|fileDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|files
index|[
name|i
index|]
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
name|fileDir
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|fullDir
specifier|public
specifier|static
name|String
name|fullDir
parameter_list|(
name|String
name|dirName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"tempDir"
argument_list|)
argument_list|,
name|dirName
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
return|;
block|}
block|}
end_class
end_unit
