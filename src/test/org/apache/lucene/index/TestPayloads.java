begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|WhitespaceAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|WhitespaceTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_class
DECL|class|TestPayloads
specifier|public
class|class
name|TestPayloads
extends|extends
name|TestCase
block|{
comment|// Simple tests to test the Payload class
DECL|method|testPayload
specifier|public
name|void
name|testPayload
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|testData
init|=
literal|"This is a test!"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|Payload
name|payload
init|=
operator|new
name|Payload
argument_list|(
name|testData
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong payload length."
argument_list|,
name|testData
operator|.
name|length
argument_list|,
name|payload
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// test copyTo()
name|byte
index|[]
name|target
init|=
operator|new
name|byte
index|[
name|testData
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
try|try
block|{
name|payload
operator|.
name|copyTo
argument_list|(
name|target
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{
comment|// expected exception
block|}
name|target
operator|=
operator|new
name|byte
index|[
name|testData
operator|.
name|length
operator|+
literal|3
index|]
expr_stmt|;
name|payload
operator|.
name|copyTo
argument_list|(
name|target
argument_list|,
literal|3
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testData
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|testData
index|[
name|i
index|]
argument_list|,
name|target
index|[
name|i
operator|+
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
comment|// test toByteArray()
name|target
operator|=
name|payload
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
name|assertByteArrayEquals
argument_list|(
name|testData
argument_list|,
name|target
argument_list|)
expr_stmt|;
comment|// test byteAt()
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testData
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|payload
operator|.
name|byteAt
argument_list|(
name|i
argument_list|)
argument_list|,
name|testData
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|payload
operator|.
name|byteAt
argument_list|(
name|testData
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{
comment|// expected exception
block|}
block|}
comment|// Tests whether the DocumentWriter and SegmentMerger correctly enable the
comment|// payload bit in the FieldInfo
DECL|method|testPayloadFieldBit
specifier|public
name|void
name|testPayloadFieldBit
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|ram
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|PayloadAnalyzer
name|analyzer
init|=
operator|new
name|PayloadAnalyzer
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|ram
argument_list|,
name|analyzer
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
comment|// this field won't have any payloads
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f1"
argument_list|,
literal|"This field has no payloads"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
comment|// this field will have payloads in all docs, however not for all term positions,
comment|// so this field is used to check if the DocumentWriter correctly enables the payloads bit
comment|// even if only some term positions have payloads
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f2"
argument_list|,
literal|"This field has payloads in all docs"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f2"
argument_list|,
literal|"This field has payloads in all docs"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
comment|// this field is used to verify if the SegmentMerger enables payloads for a field if it has payloads
comment|// enabled in only some documents
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f3"
argument_list|,
literal|"This field has payloads in some docs"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
comment|// only add payload data for field f2
name|analyzer
operator|.
name|setPayloadData
argument_list|(
literal|"f2"
argument_list|,
literal|1
argument_list|,
literal|"somedata"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
comment|// flush
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// only one segment in the index, so we can cast to SegmentReader
name|SegmentReader
name|reader
init|=
operator|(
name|SegmentReader
operator|)
name|IndexReader
operator|.
name|open
argument_list|(
name|ram
argument_list|)
decl_stmt|;
name|FieldInfos
name|fi
init|=
name|reader
operator|.
name|fieldInfos
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Payload field bit should not be set."
argument_list|,
name|fi
operator|.
name|fieldInfo
argument_list|(
literal|"f1"
argument_list|)
operator|.
name|storePayloads
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Payload field bit should be set."
argument_list|,
name|fi
operator|.
name|fieldInfo
argument_list|(
literal|"f2"
argument_list|)
operator|.
name|storePayloads
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Payload field bit should not be set."
argument_list|,
name|fi
operator|.
name|fieldInfo
argument_list|(
literal|"f3"
argument_list|)
operator|.
name|storePayloads
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// now we add another document which has payloads for field f3 and verify if the SegmentMerger
comment|// enabled payloads for that field
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|ram
argument_list|,
name|analyzer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f1"
argument_list|,
literal|"This field has no payloads"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f2"
argument_list|,
literal|"This field has payloads in all docs"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f2"
argument_list|,
literal|"This field has payloads in all docs"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f3"
argument_list|,
literal|"This field has payloads in some docs"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
comment|// add payload data for field f2 and f3
name|analyzer
operator|.
name|setPayloadData
argument_list|(
literal|"f2"
argument_list|,
literal|"somedata"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|setPayloadData
argument_list|(
literal|"f3"
argument_list|,
literal|"somedata"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
comment|// force merge
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
comment|// flush
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// only one segment in the index, so we can cast to SegmentReader
name|reader
operator|=
operator|(
name|SegmentReader
operator|)
name|IndexReader
operator|.
name|open
argument_list|(
name|ram
argument_list|)
expr_stmt|;
name|fi
operator|=
name|reader
operator|.
name|fieldInfos
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Payload field bit should not be set."
argument_list|,
name|fi
operator|.
name|fieldInfo
argument_list|(
literal|"f1"
argument_list|)
operator|.
name|storePayloads
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Payload field bit should be set."
argument_list|,
name|fi
operator|.
name|fieldInfo
argument_list|(
literal|"f2"
argument_list|)
operator|.
name|storePayloads
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Payload field bit should be set."
argument_list|,
name|fi
operator|.
name|fieldInfo
argument_list|(
literal|"f3"
argument_list|)
operator|.
name|storePayloads
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Tests if payloads are correctly stored and loaded using both RamDirectory and FSDirectory
DECL|method|testPayloadsEncoding
specifier|public
name|void
name|testPayloadsEncoding
parameter_list|()
throws|throws
name|Exception
block|{
comment|// first perform the test using a RAMDirectory
name|Directory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|performTest
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// now use a FSDirectory and repeat same test
name|String
name|dirName
init|=
literal|"test_payloads"
decl_stmt|;
name|dir
operator|=
name|FSDirectory
operator|.
name|getDirectory
argument_list|(
name|dirName
argument_list|)
expr_stmt|;
name|performTest
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|rmDir
argument_list|(
name|dirName
argument_list|)
expr_stmt|;
block|}
comment|// builds an index with payloads in the given Directory and performs
comment|// different tests to verify the payload encoding
DECL|method|performTest
specifier|private
name|void
name|performTest
parameter_list|(
name|Directory
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
name|PayloadAnalyzer
name|analyzer
init|=
operator|new
name|PayloadAnalyzer
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|analyzer
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// should be in sync with value in TermInfosWriter
specifier|final
name|int
name|skipInterval
init|=
literal|16
decl_stmt|;
specifier|final
name|int
name|numTerms
init|=
literal|5
decl_stmt|;
specifier|final
name|String
name|fieldName
init|=
literal|"f1"
decl_stmt|;
name|int
name|numDocs
init|=
name|skipInterval
operator|+
literal|1
decl_stmt|;
comment|// create content for the test documents with just a few terms
name|Term
index|[]
name|terms
init|=
name|generateTerms
argument_list|(
name|fieldName
argument_list|,
name|numTerms
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|terms
index|[
name|i
index|]
operator|.
name|text
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|String
name|content
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|payloadDataLength
init|=
name|numTerms
operator|*
name|numDocs
operator|*
literal|2
operator|+
name|numTerms
operator|*
name|numDocs
operator|*
operator|(
name|numDocs
operator|-
literal|1
operator|)
operator|/
literal|2
decl_stmt|;
name|byte
index|[]
name|payloadData
init|=
name|generateRandomData
argument_list|(
name|payloadDataLength
argument_list|)
decl_stmt|;
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|fieldName
argument_list|,
name|content
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
comment|// add the same document multiple times to have the same payload lengths for all
comment|// occurrences within two consecutive skip intervals
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
operator|*
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|analyzer
operator|.
name|setPayloadData
argument_list|(
name|fieldName
argument_list|,
name|payloadData
argument_list|,
name|offset
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|numTerms
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
comment|// now we make sure to have different payload lengths next at the next skip point
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|analyzer
operator|.
name|setPayloadData
argument_list|(
name|fieldName
argument_list|,
name|payloadData
argument_list|,
name|offset
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|i
operator|*
name|numTerms
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
comment|// flush
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|/*          * Verify the index          * first we test if all payloads are stored correctly          */
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|byte
index|[]
name|verifyPayloadData
init|=
operator|new
name|byte
index|[
name|payloadDataLength
index|]
decl_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
name|TermPositions
index|[]
name|tps
init|=
operator|new
name|TermPositions
index|[
name|numTerms
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTerms
condition|;
name|i
operator|++
control|)
block|{
name|tps
index|[
name|i
index|]
operator|=
name|reader
operator|.
name|termPositions
argument_list|(
name|terms
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|tps
index|[
literal|0
index|]
operator|.
name|next
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numTerms
condition|;
name|i
operator|++
control|)
block|{
name|tps
index|[
name|i
index|]
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|int
name|freq
init|=
name|tps
index|[
literal|0
index|]
operator|.
name|freq
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|freq
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numTerms
condition|;
name|j
operator|++
control|)
block|{
name|tps
index|[
name|j
index|]
operator|.
name|nextPosition
argument_list|()
expr_stmt|;
name|tps
index|[
name|j
index|]
operator|.
name|getPayload
argument_list|(
name|verifyPayloadData
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|tps
index|[
name|j
index|]
operator|.
name|getPayloadLength
argument_list|()
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTerms
condition|;
name|i
operator|++
control|)
block|{
name|tps
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertByteArrayEquals
argument_list|(
name|payloadData
argument_list|,
name|verifyPayloadData
argument_list|)
expr_stmt|;
comment|/*          *  test lazy skipping          */
name|TermPositions
name|tp
init|=
name|reader
operator|.
name|termPositions
argument_list|(
name|terms
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|tp
operator|.
name|next
argument_list|()
expr_stmt|;
name|tp
operator|.
name|nextPosition
argument_list|()
expr_stmt|;
comment|// now we don't read this payload
name|tp
operator|.
name|nextPosition
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong payload length."
argument_list|,
literal|1
argument_list|,
name|tp
operator|.
name|getPayloadLength
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|payload
init|=
name|tp
operator|.
name|getPayload
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|payload
index|[
literal|0
index|]
argument_list|,
name|payloadData
index|[
name|numTerms
index|]
argument_list|)
expr_stmt|;
name|tp
operator|.
name|nextPosition
argument_list|()
expr_stmt|;
comment|// we don't read this payload and skip to a different document
name|tp
operator|.
name|skipTo
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|tp
operator|.
name|nextPosition
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong payload length."
argument_list|,
literal|1
argument_list|,
name|tp
operator|.
name|getPayloadLength
argument_list|()
argument_list|)
expr_stmt|;
name|payload
operator|=
name|tp
operator|.
name|getPayload
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|payload
index|[
literal|0
index|]
argument_list|,
name|payloadData
index|[
literal|5
operator|*
name|numTerms
index|]
argument_list|)
expr_stmt|;
comment|/*          * Test different lengths at skip points          */
name|tp
operator|.
name|seek
argument_list|(
name|terms
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|tp
operator|.
name|next
argument_list|()
expr_stmt|;
name|tp
operator|.
name|nextPosition
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong payload length."
argument_list|,
literal|1
argument_list|,
name|tp
operator|.
name|getPayloadLength
argument_list|()
argument_list|)
expr_stmt|;
name|tp
operator|.
name|skipTo
argument_list|(
name|skipInterval
operator|-
literal|1
argument_list|)
expr_stmt|;
name|tp
operator|.
name|nextPosition
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong payload length."
argument_list|,
literal|1
argument_list|,
name|tp
operator|.
name|getPayloadLength
argument_list|()
argument_list|)
expr_stmt|;
name|tp
operator|.
name|skipTo
argument_list|(
literal|2
operator|*
name|skipInterval
operator|-
literal|1
argument_list|)
expr_stmt|;
name|tp
operator|.
name|nextPosition
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong payload length."
argument_list|,
literal|1
argument_list|,
name|tp
operator|.
name|getPayloadLength
argument_list|()
argument_list|)
expr_stmt|;
name|tp
operator|.
name|skipTo
argument_list|(
literal|3
operator|*
name|skipInterval
operator|-
literal|1
argument_list|)
expr_stmt|;
name|tp
operator|.
name|nextPosition
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong payload length."
argument_list|,
literal|3
operator|*
name|skipInterval
operator|-
literal|2
operator|*
name|numDocs
operator|-
literal|1
argument_list|,
name|tp
operator|.
name|getPayloadLength
argument_list|()
argument_list|)
expr_stmt|;
comment|/*          * Test multiple call of getPayload()          */
name|tp
operator|.
name|getPayload
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
comment|// it is forbidden to call getPayload() more than once
comment|// without calling nextPosition()
name|tp
operator|.
name|getPayload
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{
comment|// expected exception
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// test long payload
name|analyzer
operator|=
operator|new
name|PayloadAnalyzer
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|analyzer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|singleTerm
init|=
literal|"lucene"
decl_stmt|;
name|d
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|fieldName
argument_list|,
name|singleTerm
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
comment|// add a payload whose length is greater than the buffer size of BufferedIndexOutput
name|payloadData
operator|=
name|generateRandomData
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|setPayloadData
argument_list|(
name|fieldName
argument_list|,
name|payloadData
argument_list|,
literal|100
argument_list|,
literal|1500
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
comment|// flush
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|tp
operator|=
name|reader
operator|.
name|termPositions
argument_list|(
operator|new
name|Term
argument_list|(
name|fieldName
argument_list|,
name|singleTerm
argument_list|)
argument_list|)
expr_stmt|;
name|tp
operator|.
name|next
argument_list|()
expr_stmt|;
name|tp
operator|.
name|nextPosition
argument_list|()
expr_stmt|;
name|verifyPayloadData
operator|=
operator|new
name|byte
index|[
name|tp
operator|.
name|getPayloadLength
argument_list|()
index|]
expr_stmt|;
name|tp
operator|.
name|getPayload
argument_list|(
name|verifyPayloadData
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|byte
index|[]
name|portion
init|=
operator|new
name|byte
index|[
literal|1500
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|payloadData
argument_list|,
literal|100
argument_list|,
name|portion
argument_list|,
literal|0
argument_list|,
literal|1500
argument_list|)
expr_stmt|;
name|assertByteArrayEquals
argument_list|(
name|portion
argument_list|,
name|verifyPayloadData
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|generateRandomData
specifier|private
name|byte
index|[]
name|generateRandomData
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|n
index|]
decl_stmt|;
name|rnd
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
DECL|method|generateTerms
specifier|private
name|Term
index|[]
name|generateTerms
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|int
name|maxDigits
init|=
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|log
argument_list|(
name|n
argument_list|)
operator|/
name|Math
operator|.
name|log
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|Term
index|[]
name|terms
init|=
operator|new
name|Term
index|[
name|n
index|]
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"t"
argument_list|)
expr_stmt|;
name|int
name|zeros
init|=
name|maxDigits
operator|-
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|log
argument_list|(
name|i
argument_list|)
operator|/
name|Math
operator|.
name|log
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|zeros
condition|;
name|j
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|terms
index|[
name|i
index|]
operator|=
operator|new
name|Term
argument_list|(
name|fieldName
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|terms
return|;
block|}
DECL|method|rmDir
specifier|private
name|void
name|rmDir
parameter_list|(
name|String
name|dir
parameter_list|)
block|{
name|File
name|fileDir
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|fileDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|files
index|[
name|i
index|]
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
name|fileDir
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|assertByteArrayEquals
name|void
name|assertByteArrayEquals
parameter_list|(
name|byte
index|[]
name|b1
parameter_list|,
name|byte
index|[]
name|b2
parameter_list|)
block|{
if|if
condition|(
name|b1
operator|.
name|length
operator|!=
name|b2
operator|.
name|length
condition|)
block|{
name|fail
argument_list|(
literal|"Byte arrays have different lengths: "
operator|+
name|b1
operator|.
name|length
operator|+
literal|", "
operator|+
name|b2
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|b1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|b1
index|[
name|i
index|]
operator|!=
name|b2
index|[
name|i
index|]
condition|)
block|{
name|fail
argument_list|(
literal|"Byte arrays different at index "
operator|+
name|i
operator|+
literal|": "
operator|+
name|b1
index|[
name|i
index|]
operator|+
literal|", "
operator|+
name|b2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This Analyzer uses an WhitespaceTokenizer and PayloadFilter.      */
DECL|class|PayloadAnalyzer
specifier|private
specifier|static
class|class
name|PayloadAnalyzer
extends|extends
name|Analyzer
block|{
DECL|field|fieldToData
name|Map
name|fieldToData
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
DECL|method|setPayloadData
name|void
name|setPayloadData
parameter_list|(
name|String
name|field
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|fieldToData
operator|.
name|put
argument_list|(
name|field
argument_list|,
operator|new
name|PayloadData
argument_list|(
literal|0
argument_list|,
name|data
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setPayloadData
name|void
name|setPayloadData
parameter_list|(
name|String
name|field
parameter_list|,
name|int
name|numFieldInstancesToSkip
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|fieldToData
operator|.
name|put
argument_list|(
name|field
argument_list|,
operator|new
name|PayloadData
argument_list|(
name|numFieldInstancesToSkip
argument_list|,
name|data
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|tokenStream
specifier|public
name|TokenStream
name|tokenStream
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
name|PayloadData
name|payload
init|=
operator|(
name|PayloadData
operator|)
name|fieldToData
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|WhitespaceTokenizer
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|payload
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|payload
operator|.
name|numFieldInstancesToSkip
operator|==
literal|0
condition|)
block|{
name|ts
operator|=
operator|new
name|PayloadFilter
argument_list|(
name|ts
argument_list|,
name|payload
operator|.
name|data
argument_list|,
name|payload
operator|.
name|offset
argument_list|,
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|payload
operator|.
name|numFieldInstancesToSkip
operator|--
expr_stmt|;
block|}
block|}
return|return
name|ts
return|;
block|}
DECL|class|PayloadData
specifier|private
specifier|static
class|class
name|PayloadData
block|{
DECL|field|data
name|byte
index|[]
name|data
decl_stmt|;
DECL|field|offset
name|int
name|offset
decl_stmt|;
DECL|field|length
name|int
name|length
decl_stmt|;
DECL|field|numFieldInstancesToSkip
name|int
name|numFieldInstancesToSkip
decl_stmt|;
DECL|method|PayloadData
name|PayloadData
parameter_list|(
name|int
name|skip
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|numFieldInstancesToSkip
operator|=
name|skip
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This Filter adds payloads to the tokens.      */
DECL|class|PayloadFilter
specifier|private
specifier|static
class|class
name|PayloadFilter
extends|extends
name|TokenFilter
block|{
DECL|field|data
specifier|private
name|byte
index|[]
name|data
decl_stmt|;
DECL|field|length
specifier|private
name|int
name|length
decl_stmt|;
DECL|field|offset
specifier|private
name|int
name|offset
decl_stmt|;
DECL|method|PayloadFilter
specifier|public
name|PayloadFilter
parameter_list|(
name|TokenStream
name|in
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
block|}
DECL|method|next
specifier|public
name|Token
name|next
parameter_list|()
throws|throws
name|IOException
block|{
name|Token
name|nextToken
init|=
name|input
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextToken
operator|!=
literal|null
operator|&&
name|offset
operator|+
name|length
operator|<=
name|data
operator|.
name|length
condition|)
block|{
name|nextToken
operator|.
name|setPayload
argument_list|(
operator|new
name|Payload
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|length
expr_stmt|;
block|}
return|return
name|nextToken
return|;
block|}
block|}
block|}
end_class
end_unit
