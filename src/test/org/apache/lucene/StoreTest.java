begin_unit
begin_package
DECL|package|org.apache.lucene
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|OutputStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_class
DECL|class|StoreTest
class|class
name|StoreTest
block|{
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|test
argument_list|(
literal|1000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" caught a "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|+
literal|"\n with message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|test
specifier|public
specifier|static
name|void
name|test
parameter_list|(
name|int
name|count
parameter_list|,
name|boolean
name|ram
parameter_list|)
throws|throws
name|Exception
block|{
name|Random
name|gen
init|=
operator|new
name|Random
argument_list|(
literal|1251971
argument_list|)
decl_stmt|;
name|int
name|i
decl_stmt|;
name|Date
name|veryStart
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|Date
name|start
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|Directory
name|store
decl_stmt|;
if|if
condition|(
name|ram
condition|)
name|store
operator|=
operator|new
name|RAMDirectory
argument_list|()
expr_stmt|;
else|else
name|store
operator|=
name|FSDirectory
operator|.
name|getDirectory
argument_list|(
literal|"test.store"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|int
name|LENGTH_MASK
init|=
literal|0xFFF
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|i
operator|+
literal|".dat"
decl_stmt|;
name|int
name|length
init|=
name|gen
operator|.
name|nextInt
argument_list|()
operator|&
name|LENGTH_MASK
decl_stmt|;
name|byte
name|b
init|=
call|(
name|byte
call|)
argument_list|(
name|gen
operator|.
name|nextInt
argument_list|()
operator|&
literal|0x7F
argument_list|)
decl_stmt|;
comment|//System.out.println("filling " + name + " with " + length + " of " + b);
name|OutputStream
name|file
init|=
name|store
operator|.
name|createFile
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|length
condition|;
name|j
operator|++
control|)
name|file
operator|.
name|writeByte
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
name|Date
name|end
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|end
operator|.
name|getTime
argument_list|()
operator|-
name|start
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" total milliseconds to create"
argument_list|)
expr_stmt|;
name|gen
operator|=
operator|new
name|Random
argument_list|(
literal|1251971
argument_list|)
expr_stmt|;
name|start
operator|=
operator|new
name|Date
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|ram
condition|)
name|store
operator|=
name|FSDirectory
operator|.
name|getDirectory
argument_list|(
literal|"test.store"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|i
operator|+
literal|".dat"
decl_stmt|;
name|int
name|length
init|=
name|gen
operator|.
name|nextInt
argument_list|()
operator|&
name|LENGTH_MASK
decl_stmt|;
name|byte
name|b
init|=
call|(
name|byte
call|)
argument_list|(
name|gen
operator|.
name|nextInt
argument_list|()
operator|&
literal|0x7F
argument_list|)
decl_stmt|;
comment|//System.out.println("reading " + name + " with " + length + " of " + b);
name|IndexInput
name|file
init|=
name|store
operator|.
name|openInput
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|length
argument_list|()
operator|!=
name|length
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"length incorrect"
argument_list|)
throw|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|length
condition|;
name|j
operator|++
control|)
if|if
condition|(
name|file
operator|.
name|readByte
argument_list|()
operator|!=
name|b
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"contents incorrect"
argument_list|)
throw|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|end
operator|=
operator|new
name|Date
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|end
operator|.
name|getTime
argument_list|()
operator|-
name|start
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" total milliseconds to read"
argument_list|)
expr_stmt|;
name|gen
operator|=
operator|new
name|Random
argument_list|(
literal|1251971
argument_list|)
expr_stmt|;
name|start
operator|=
operator|new
name|Date
argument_list|()
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|i
operator|+
literal|".dat"
decl_stmt|;
comment|//System.out.println("deleting " + name);
name|store
operator|.
name|deleteFile
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|end
operator|=
operator|new
name|Date
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|end
operator|.
name|getTime
argument_list|()
operator|-
name|start
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" total milliseconds to delete"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|end
operator|.
name|getTime
argument_list|()
operator|-
name|veryStart
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" total milliseconds"
argument_list|)
expr_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
