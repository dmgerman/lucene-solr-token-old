begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001, 2004 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache Lucene" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Lucene", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|English
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|SimpleAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * Tests basic search capabilities.  *  *<p>Uses a collection of 1000 documents, each the english rendition of their  * document number.  For example, the document numbered 333 has text "three  * hundred thirty three".  *  *<p>Tests are each a single query, and its hits are checked to ensure that  * all and only the correct documents are returned, thus providing end-to-end  * testing of the indexing and search code.  *  * @author Doug Cutting  */
end_comment
begin_class
DECL|class|TestBasics
specifier|public
class|class
name|TestBasics
extends|extends
name|TestCase
block|{
DECL|field|searcher
specifier|private
name|IndexSearcher
name|searcher
decl_stmt|;
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|RAMDirectory
name|directory
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|directory
argument_list|,
operator|new
name|SimpleAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|//writer.infoStream = System.out;
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
literal|"field"
argument_list|,
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
DECL|method|testTerm
specifier|public
name|void
name|testTerm
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"seventy"
argument_list|)
argument_list|)
decl_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{
literal|70
block|,
literal|71
block|,
literal|72
block|,
literal|73
block|,
literal|74
block|,
literal|75
block|,
literal|76
block|,
literal|77
block|,
literal|78
block|,
literal|79
block|,
literal|170
block|,
literal|171
block|,
literal|172
block|,
literal|173
block|,
literal|174
block|,
literal|175
block|,
literal|176
block|,
literal|177
block|,
literal|178
block|,
literal|179
block|,
literal|270
block|,
literal|271
block|,
literal|272
block|,
literal|273
block|,
literal|274
block|,
literal|275
block|,
literal|276
block|,
literal|277
block|,
literal|278
block|,
literal|279
block|,
literal|370
block|,
literal|371
block|,
literal|372
block|,
literal|373
block|,
literal|374
block|,
literal|375
block|,
literal|376
block|,
literal|377
block|,
literal|378
block|,
literal|379
block|,
literal|470
block|,
literal|471
block|,
literal|472
block|,
literal|473
block|,
literal|474
block|,
literal|475
block|,
literal|476
block|,
literal|477
block|,
literal|478
block|,
literal|479
block|,
literal|570
block|,
literal|571
block|,
literal|572
block|,
literal|573
block|,
literal|574
block|,
literal|575
block|,
literal|576
block|,
literal|577
block|,
literal|578
block|,
literal|579
block|,
literal|670
block|,
literal|671
block|,
literal|672
block|,
literal|673
block|,
literal|674
block|,
literal|675
block|,
literal|676
block|,
literal|677
block|,
literal|678
block|,
literal|679
block|,
literal|770
block|,
literal|771
block|,
literal|772
block|,
literal|773
block|,
literal|774
block|,
literal|775
block|,
literal|776
block|,
literal|777
block|,
literal|778
block|,
literal|779
block|,
literal|870
block|,
literal|871
block|,
literal|872
block|,
literal|873
block|,
literal|874
block|,
literal|875
block|,
literal|876
block|,
literal|877
block|,
literal|878
block|,
literal|879
block|,
literal|970
block|,
literal|971
block|,
literal|972
block|,
literal|973
block|,
literal|974
block|,
literal|975
block|,
literal|976
block|,
literal|977
block|,
literal|978
block|,
literal|979
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testTerm2
specifier|public
name|void
name|testTerm2
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"seventish"
argument_list|)
argument_list|)
decl_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
DECL|method|testPhrase
specifier|public
name|void
name|testPhrase
parameter_list|()
throws|throws
name|Exception
block|{
name|PhraseQuery
name|query
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"seventy"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"seven"
argument_list|)
argument_list|)
expr_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{
literal|77
block|,
literal|177
block|,
literal|277
block|,
literal|377
block|,
literal|477
block|,
literal|577
block|,
literal|677
block|,
literal|777
block|,
literal|877
block|,
literal|977
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testPhrase2
specifier|public
name|void
name|testPhrase2
parameter_list|()
throws|throws
name|Exception
block|{
name|PhraseQuery
name|query
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"seventish"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"sevenon"
argument_list|)
argument_list|)
expr_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
DECL|method|testBoolean
specifier|public
name|void
name|testBoolean
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"seventy"
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"seven"
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{
literal|77
block|,
literal|777
block|,
literal|177
block|,
literal|277
block|,
literal|377
block|,
literal|477
block|,
literal|577
block|,
literal|677
block|,
literal|770
block|,
literal|771
block|,
literal|772
block|,
literal|773
block|,
literal|774
block|,
literal|775
block|,
literal|776
block|,
literal|778
block|,
literal|779
block|,
literal|877
block|,
literal|977
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testBoolean2
specifier|public
name|void
name|testBoolean2
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"sevento"
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"sevenly"
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanNearExact
specifier|public
name|void
name|testSpanNearExact
parameter_list|()
throws|throws
name|Exception
block|{
name|SpanTermQuery
name|term1
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"seventy"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term2
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"seven"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanNearQuery
name|query
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|term1
block|,
name|term2
block|}
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{
literal|77
block|,
literal|177
block|,
literal|277
block|,
literal|377
block|,
literal|477
block|,
literal|577
block|,
literal|677
block|,
literal|777
block|,
literal|877
block|,
literal|977
block|}
argument_list|)
expr_stmt|;
comment|//System.out.println(searcher.explain(query, 77));
comment|//System.out.println(searcher.explain(query, 977));
block|}
DECL|method|testSpanNearUnordered
specifier|public
name|void
name|testSpanNearUnordered
parameter_list|()
throws|throws
name|Exception
block|{
name|SpanTermQuery
name|term1
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"nine"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term2
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"six"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanNearQuery
name|query
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|term1
block|,
name|term2
block|}
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{
literal|609
block|,
literal|629
block|,
literal|639
block|,
literal|649
block|,
literal|659
block|,
literal|669
block|,
literal|679
block|,
literal|689
block|,
literal|699
block|,
literal|906
block|,
literal|926
block|,
literal|936
block|,
literal|946
block|,
literal|956
block|,
literal|966
block|,
literal|976
block|,
literal|986
block|,
literal|996
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanNearOrdered
specifier|public
name|void
name|testSpanNearOrdered
parameter_list|()
throws|throws
name|Exception
block|{
name|SpanTermQuery
name|term1
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"nine"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term2
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"six"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanNearQuery
name|query
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|term1
block|,
name|term2
block|}
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{
literal|906
block|,
literal|926
block|,
literal|936
block|,
literal|946
block|,
literal|956
block|,
literal|966
block|,
literal|976
block|,
literal|986
block|,
literal|996
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanNot
specifier|public
name|void
name|testSpanNot
parameter_list|()
throws|throws
name|Exception
block|{
name|SpanTermQuery
name|term1
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"eight"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term2
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanNearQuery
name|near
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|term1
block|,
name|term2
block|}
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term3
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"forty"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanNotQuery
name|query
init|=
operator|new
name|SpanNotQuery
argument_list|(
name|near
argument_list|,
name|term3
argument_list|)
decl_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{
literal|801
block|,
literal|821
block|,
literal|831
block|,
literal|851
block|,
literal|861
block|,
literal|871
block|,
literal|881
block|,
literal|891
block|}
argument_list|)
expr_stmt|;
comment|//System.out.println(searcher.explain(query, 801));
comment|//System.out.println(searcher.explain(query, 891));
block|}
DECL|method|testSpanFirst
specifier|public
name|void
name|testSpanFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|SpanTermQuery
name|term1
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"five"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanFirstQuery
name|query
init|=
operator|new
name|SpanFirstQuery
argument_list|(
name|term1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{
literal|5
block|,
literal|500
block|,
literal|501
block|,
literal|502
block|,
literal|503
block|,
literal|504
block|,
literal|505
block|,
literal|506
block|,
literal|507
block|,
literal|508
block|,
literal|509
block|,
literal|510
block|,
literal|511
block|,
literal|512
block|,
literal|513
block|,
literal|514
block|,
literal|515
block|,
literal|516
block|,
literal|517
block|,
literal|518
block|,
literal|519
block|,
literal|520
block|,
literal|521
block|,
literal|522
block|,
literal|523
block|,
literal|524
block|,
literal|525
block|,
literal|526
block|,
literal|527
block|,
literal|528
block|,
literal|529
block|,
literal|530
block|,
literal|531
block|,
literal|532
block|,
literal|533
block|,
literal|534
block|,
literal|535
block|,
literal|536
block|,
literal|537
block|,
literal|538
block|,
literal|539
block|,
literal|540
block|,
literal|541
block|,
literal|542
block|,
literal|543
block|,
literal|544
block|,
literal|545
block|,
literal|546
block|,
literal|547
block|,
literal|548
block|,
literal|549
block|,
literal|550
block|,
literal|551
block|,
literal|552
block|,
literal|553
block|,
literal|554
block|,
literal|555
block|,
literal|556
block|,
literal|557
block|,
literal|558
block|,
literal|559
block|,
literal|560
block|,
literal|561
block|,
literal|562
block|,
literal|563
block|,
literal|564
block|,
literal|565
block|,
literal|566
block|,
literal|567
block|,
literal|568
block|,
literal|569
block|,
literal|570
block|,
literal|571
block|,
literal|572
block|,
literal|573
block|,
literal|574
block|,
literal|575
block|,
literal|576
block|,
literal|577
block|,
literal|578
block|,
literal|579
block|,
literal|580
block|,
literal|581
block|,
literal|582
block|,
literal|583
block|,
literal|584
block|,
literal|585
block|,
literal|586
block|,
literal|587
block|,
literal|588
block|,
literal|589
block|,
literal|590
block|,
literal|591
block|,
literal|592
block|,
literal|593
block|,
literal|594
block|,
literal|595
block|,
literal|596
block|,
literal|597
block|,
literal|598
block|,
literal|599
block|}
argument_list|)
expr_stmt|;
comment|//System.out.println(searcher.explain(query, 5));
comment|//System.out.println(searcher.explain(query, 599));
block|}
DECL|method|testSpanOr
specifier|public
name|void
name|testSpanOr
parameter_list|()
throws|throws
name|Exception
block|{
name|SpanTermQuery
name|term1
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"thirty"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term2
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"three"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanNearQuery
name|near1
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|term1
block|,
name|term2
block|}
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term3
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"forty"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term4
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"seven"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanNearQuery
name|near2
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|term3
block|,
name|term4
block|}
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SpanOrQuery
name|query
init|=
operator|new
name|SpanOrQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|near1
block|,
name|near2
block|}
argument_list|)
decl_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{
literal|33
block|,
literal|47
block|,
literal|133
block|,
literal|147
block|,
literal|233
block|,
literal|247
block|,
literal|333
block|,
literal|347
block|,
literal|433
block|,
literal|447
block|,
literal|533
block|,
literal|547
block|,
literal|633
block|,
literal|647
block|,
literal|733
block|,
literal|747
block|,
literal|833
block|,
literal|847
block|,
literal|933
block|,
literal|947
block|}
argument_list|)
expr_stmt|;
comment|//System.out.println(searcher.explain(query, 33));
comment|//System.out.println(searcher.explain(query, 947));
block|}
DECL|method|testSpanExactNested
specifier|public
name|void
name|testSpanExactNested
parameter_list|()
throws|throws
name|Exception
block|{
name|SpanTermQuery
name|term1
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"three"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term2
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"hundred"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanNearQuery
name|near1
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|term1
block|,
name|term2
block|}
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term3
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"thirty"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term4
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"three"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanNearQuery
name|near2
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|term3
block|,
name|term4
block|}
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SpanNearQuery
name|query
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|near1
block|,
name|near2
block|}
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{
literal|333
block|}
argument_list|)
expr_stmt|;
comment|//System.out.println(searcher.explain(query, 333));
block|}
DECL|method|testSpanNearOr
specifier|public
name|void
name|testSpanNearOr
parameter_list|()
throws|throws
name|Exception
block|{
name|SpanTermQuery
name|t1
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"six"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|t3
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"seven"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|t5
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"seven"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|t6
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"six"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanOrQuery
name|to1
init|=
operator|new
name|SpanOrQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|t1
block|,
name|t3
block|}
argument_list|)
decl_stmt|;
name|SpanOrQuery
name|to2
init|=
operator|new
name|SpanOrQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|t5
block|,
name|t6
block|}
argument_list|)
decl_stmt|;
name|SpanNearQuery
name|query
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|to1
block|,
name|to2
block|}
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{
literal|606
block|,
literal|607
block|,
literal|626
block|,
literal|627
block|,
literal|636
block|,
literal|637
block|,
literal|646
block|,
literal|647
block|,
literal|656
block|,
literal|657
block|,
literal|666
block|,
literal|667
block|,
literal|676
block|,
literal|677
block|,
literal|686
block|,
literal|687
block|,
literal|696
block|,
literal|697
block|,
literal|706
block|,
literal|707
block|,
literal|726
block|,
literal|727
block|,
literal|736
block|,
literal|737
block|,
literal|746
block|,
literal|747
block|,
literal|756
block|,
literal|757
block|,
literal|766
block|,
literal|767
block|,
literal|776
block|,
literal|777
block|,
literal|786
block|,
literal|787
block|,
literal|796
block|,
literal|797
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|checkHits
specifier|private
name|void
name|checkHits
parameter_list|(
name|Query
name|query
parameter_list|,
name|int
index|[]
name|results
parameter_list|)
throws|throws
name|IOException
block|{
name|Hits
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|Set
name|correct
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|correct
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|results
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
name|actual
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|actual
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|hits
operator|.
name|id
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|query
operator|.
name|toString
argument_list|(
literal|"field"
argument_list|)
argument_list|,
name|correct
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
DECL|method|printHits
specifier|private
name|void
name|printHits
parameter_list|(
name|Query
name|query
parameter_list|)
throws|throws
name|IOException
block|{
name|Hits
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"new int[] {"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|hits
operator|.
name|id
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
name|hits
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
