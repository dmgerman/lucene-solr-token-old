begin_unit
begin_package
DECL|package|org.apache.lucene.search.spans
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
package|;
end_package
begin_comment
comment|/**  * Copyright 2005 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Hits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_comment
comment|/*******************************************************************************  * Tests the span query bug in Lucene. It demonstrates that SpanTermQuerys don't  * work correctly in a BooleanQuery.  *  * @author Reece Wilton  */
end_comment
begin_class
DECL|class|TestSpansAdvanced
specifier|public
class|class
name|TestSpansAdvanced
extends|extends
name|TestCase
block|{
comment|// location to the index
DECL|field|mDirectory
specifier|protected
name|Directory
name|mDirectory
decl_stmt|;
empty_stmt|;
comment|// field names in the index
DECL|field|FIELD_ID
specifier|private
specifier|final
specifier|static
name|String
name|FIELD_ID
init|=
literal|"ID"
decl_stmt|;
DECL|field|FIELD_TEXT
specifier|protected
specifier|final
specifier|static
name|String
name|FIELD_TEXT
init|=
literal|"TEXT"
decl_stmt|;
comment|/**      * Initializes the tests by adding 4 identical documents to the index.      */
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|// create test index
name|mDirectory
operator|=
operator|new
name|RAMDirectory
argument_list|()
expr_stmt|;
specifier|final
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|mDirectory
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|addDocument
argument_list|(
name|writer
argument_list|,
literal|"1"
argument_list|,
literal|"I think it should work."
argument_list|)
expr_stmt|;
name|addDocument
argument_list|(
name|writer
argument_list|,
literal|"2"
argument_list|,
literal|"I think it should work."
argument_list|)
expr_stmt|;
name|addDocument
argument_list|(
name|writer
argument_list|,
literal|"3"
argument_list|,
literal|"I think it should work."
argument_list|)
expr_stmt|;
name|addDocument
argument_list|(
name|writer
argument_list|,
literal|"4"
argument_list|,
literal|"I think it should work."
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|tearDown
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|mDirectory
operator|.
name|close
argument_list|()
expr_stmt|;
name|mDirectory
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Adds the document to the index.      *      * @param writer the Lucene index writer      * @param id the unique id of the document      * @param text the text of the document      * @throws IOException      */
DECL|method|addDocument
specifier|protected
name|void
name|addDocument
parameter_list|(
specifier|final
name|IndexWriter
name|writer
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|FIELD_ID
argument_list|,
name|id
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|UN_TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
name|FIELD_TEXT
argument_list|,
name|text
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests two span queries.      *      * @throws IOException      */
DECL|method|testBooleanQueryWithSpanQueries
specifier|public
name|void
name|testBooleanQueryWithSpanQueries
parameter_list|()
throws|throws
name|IOException
block|{
name|doTestBooleanQueryWithSpanQueries
argument_list|(
literal|0.3884282f
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests two span queries.      *      * @throws IOException      */
DECL|method|doTestBooleanQueryWithSpanQueries
specifier|protected
name|void
name|doTestBooleanQueryWithSpanQueries
parameter_list|(
specifier|final
name|float
name|expectedScore
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Query
name|spanQuery
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_TEXT
argument_list|,
literal|"work"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
name|spanQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
name|spanQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
specifier|final
name|Hits
name|hits
init|=
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|expectedIds
init|=
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|}
decl_stmt|;
specifier|final
name|float
index|[]
name|expectedScores
init|=
operator|new
name|float
index|[]
block|{
name|expectedScore
block|,
name|expectedScore
block|,
name|expectedScore
block|,
name|expectedScore
block|}
decl_stmt|;
name|assertHits
argument_list|(
name|hits
argument_list|,
literal|"two span queries"
argument_list|,
name|expectedIds
argument_list|,
name|expectedScores
argument_list|)
expr_stmt|;
block|}
comment|/**      * Executes the query and throws an assertion if the results don't match the      * expectedHits.      *      * @param query the query to execute      * @throws IOException      */
DECL|method|executeQuery
specifier|protected
name|Hits
name|executeQuery
parameter_list|(
specifier|final
name|Query
name|query
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|mDirectory
argument_list|)
decl_stmt|;
specifier|final
name|Hits
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|hits
return|;
block|}
comment|/**      * Checks to see if the hits are what we expected.      *      * @param hits the search results      * @param description the description of the search      * @param expectedIds the expected document ids of the hits      * @param expectedScores the expected scores of the hits      *      * @throws IOException      */
DECL|method|assertHits
specifier|protected
name|void
name|assertHits
parameter_list|(
specifier|final
name|Hits
name|hits
parameter_list|,
specifier|final
name|String
name|description
parameter_list|,
specifier|final
name|String
index|[]
name|expectedIds
parameter_list|,
specifier|final
name|float
index|[]
name|expectedScores
parameter_list|)
throws|throws
name|IOException
block|{
comment|// display the hits
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|hits
operator|.
name|length
argument_list|()
operator|+
literal|" hits for search: \""
operator|+
name|description
operator|+
literal|'\"'
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|FIELD_ID
operator|+
literal|':'
operator|+
name|hits
operator|.
name|doc
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|(
name|FIELD_ID
argument_list|)
operator|+
literal|" (score:"
operator|+
name|hits
operator|.
name|score
argument_list|(
name|i
argument_list|)
operator|+
literal|')'
argument_list|)
expr_stmt|;
block|}
comment|// did we get the hits we expected
name|assertEquals
argument_list|(
name|expectedIds
operator|.
name|length
argument_list|,
name|hits
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|expectedIds
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|hits
operator|.
name|doc
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|(
name|FIELD_ID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedScores
index|[
name|i
index|]
argument_list|,
name|hits
operator|.
name|score
argument_list|(
name|i
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
