begin_unit
begin_package
DECL|package|org.apache.lucene.search.spans
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|SimpleAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|CheckHits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PhraseQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|QueryUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|English
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_comment
comment|/**  * Tests basic search capabilities.  *  *<p>Uses a collection of 1000 documents, each the english rendition of their  * document number.  For example, the document numbered 333 has text "three  * hundred thirty three".  *  *<p>Tests are each a single query, and its hits are checked to ensure that  * all and only the correct documents are returned, thus providing end-to-end  * testing of the indexing and search code.  *  */
end_comment
begin_class
DECL|class|TestBasics
specifier|public
class|class
name|TestBasics
extends|extends
name|LuceneTestCase
block|{
DECL|field|searcher
specifier|private
name|IndexSearcher
name|searcher
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|RAMDirectory
name|directory
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|directory
argument_list|,
operator|new
name|SimpleAnalyzer
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|)
argument_list|,
literal|true
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
decl_stmt|;
comment|//writer.infoStream = System.out;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|directory
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testTerm
specifier|public
name|void
name|testTerm
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"seventy"
argument_list|)
argument_list|)
decl_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{
literal|70
block|,
literal|71
block|,
literal|72
block|,
literal|73
block|,
literal|74
block|,
literal|75
block|,
literal|76
block|,
literal|77
block|,
literal|78
block|,
literal|79
block|,
literal|170
block|,
literal|171
block|,
literal|172
block|,
literal|173
block|,
literal|174
block|,
literal|175
block|,
literal|176
block|,
literal|177
block|,
literal|178
block|,
literal|179
block|,
literal|270
block|,
literal|271
block|,
literal|272
block|,
literal|273
block|,
literal|274
block|,
literal|275
block|,
literal|276
block|,
literal|277
block|,
literal|278
block|,
literal|279
block|,
literal|370
block|,
literal|371
block|,
literal|372
block|,
literal|373
block|,
literal|374
block|,
literal|375
block|,
literal|376
block|,
literal|377
block|,
literal|378
block|,
literal|379
block|,
literal|470
block|,
literal|471
block|,
literal|472
block|,
literal|473
block|,
literal|474
block|,
literal|475
block|,
literal|476
block|,
literal|477
block|,
literal|478
block|,
literal|479
block|,
literal|570
block|,
literal|571
block|,
literal|572
block|,
literal|573
block|,
literal|574
block|,
literal|575
block|,
literal|576
block|,
literal|577
block|,
literal|578
block|,
literal|579
block|,
literal|670
block|,
literal|671
block|,
literal|672
block|,
literal|673
block|,
literal|674
block|,
literal|675
block|,
literal|676
block|,
literal|677
block|,
literal|678
block|,
literal|679
block|,
literal|770
block|,
literal|771
block|,
literal|772
block|,
literal|773
block|,
literal|774
block|,
literal|775
block|,
literal|776
block|,
literal|777
block|,
literal|778
block|,
literal|779
block|,
literal|870
block|,
literal|871
block|,
literal|872
block|,
literal|873
block|,
literal|874
block|,
literal|875
block|,
literal|876
block|,
literal|877
block|,
literal|878
block|,
literal|879
block|,
literal|970
block|,
literal|971
block|,
literal|972
block|,
literal|973
block|,
literal|974
block|,
literal|975
block|,
literal|976
block|,
literal|977
block|,
literal|978
block|,
literal|979
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testTerm2
specifier|public
name|void
name|testTerm2
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|query
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"seventish"
argument_list|)
argument_list|)
decl_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
DECL|method|testPhrase
specifier|public
name|void
name|testPhrase
parameter_list|()
throws|throws
name|Exception
block|{
name|PhraseQuery
name|query
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"seventy"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"seven"
argument_list|)
argument_list|)
expr_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{
literal|77
block|,
literal|177
block|,
literal|277
block|,
literal|377
block|,
literal|477
block|,
literal|577
block|,
literal|677
block|,
literal|777
block|,
literal|877
block|,
literal|977
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testPhrase2
specifier|public
name|void
name|testPhrase2
parameter_list|()
throws|throws
name|Exception
block|{
name|PhraseQuery
name|query
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"seventish"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"sevenon"
argument_list|)
argument_list|)
expr_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
DECL|method|testBoolean
specifier|public
name|void
name|testBoolean
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"seventy"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"seven"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{
literal|77
block|,
literal|777
block|,
literal|177
block|,
literal|277
block|,
literal|377
block|,
literal|477
block|,
literal|577
block|,
literal|677
block|,
literal|770
block|,
literal|771
block|,
literal|772
block|,
literal|773
block|,
literal|774
block|,
literal|775
block|,
literal|776
block|,
literal|778
block|,
literal|779
block|,
literal|877
block|,
literal|977
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testBoolean2
specifier|public
name|void
name|testBoolean2
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"sevento"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"sevenly"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanNearExact
specifier|public
name|void
name|testSpanNearExact
parameter_list|()
throws|throws
name|Exception
block|{
name|SpanTermQuery
name|term1
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"seventy"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term2
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"seven"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanNearQuery
name|query
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|term1
block|,
name|term2
block|}
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{
literal|77
block|,
literal|177
block|,
literal|277
block|,
literal|377
block|,
literal|477
block|,
literal|577
block|,
literal|677
block|,
literal|777
block|,
literal|877
block|,
literal|977
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|searcher
operator|.
name|explain
argument_list|(
name|query
argument_list|,
literal|77
argument_list|)
operator|.
name|getValue
argument_list|()
operator|>
literal|0.0f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|searcher
operator|.
name|explain
argument_list|(
name|query
argument_list|,
literal|977
argument_list|)
operator|.
name|getValue
argument_list|()
operator|>
literal|0.0f
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|check
argument_list|(
name|term1
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|check
argument_list|(
name|term2
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|checkUnequal
argument_list|(
name|term1
argument_list|,
name|term2
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanNearUnordered
specifier|public
name|void
name|testSpanNearUnordered
parameter_list|()
throws|throws
name|Exception
block|{
name|SpanTermQuery
name|term1
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"nine"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term2
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"six"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanNearQuery
name|query
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|term1
block|,
name|term2
block|}
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{
literal|609
block|,
literal|629
block|,
literal|639
block|,
literal|649
block|,
literal|659
block|,
literal|669
block|,
literal|679
block|,
literal|689
block|,
literal|699
block|,
literal|906
block|,
literal|926
block|,
literal|936
block|,
literal|946
block|,
literal|956
block|,
literal|966
block|,
literal|976
block|,
literal|986
block|,
literal|996
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanNearOrdered
specifier|public
name|void
name|testSpanNearOrdered
parameter_list|()
throws|throws
name|Exception
block|{
name|SpanTermQuery
name|term1
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"nine"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term2
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"six"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanNearQuery
name|query
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|term1
block|,
name|term2
block|}
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{
literal|906
block|,
literal|926
block|,
literal|936
block|,
literal|946
block|,
literal|956
block|,
literal|966
block|,
literal|976
block|,
literal|986
block|,
literal|996
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanNot
specifier|public
name|void
name|testSpanNot
parameter_list|()
throws|throws
name|Exception
block|{
name|SpanTermQuery
name|term1
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"eight"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term2
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanNearQuery
name|near
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|term1
block|,
name|term2
block|}
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term3
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"forty"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanNotQuery
name|query
init|=
operator|new
name|SpanNotQuery
argument_list|(
name|near
argument_list|,
name|term3
argument_list|)
decl_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{
literal|801
block|,
literal|821
block|,
literal|831
block|,
literal|851
block|,
literal|861
block|,
literal|871
block|,
literal|881
block|,
literal|891
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|searcher
operator|.
name|explain
argument_list|(
name|query
argument_list|,
literal|801
argument_list|)
operator|.
name|getValue
argument_list|()
operator|>
literal|0.0f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|searcher
operator|.
name|explain
argument_list|(
name|query
argument_list|,
literal|891
argument_list|)
operator|.
name|getValue
argument_list|()
operator|>
literal|0.0f
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanWithMultipleNotSingle
specifier|public
name|void
name|testSpanWithMultipleNotSingle
parameter_list|()
throws|throws
name|Exception
block|{
name|SpanTermQuery
name|term1
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"eight"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term2
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanNearQuery
name|near
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|term1
block|,
name|term2
block|}
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term3
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"forty"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanOrQuery
name|or
init|=
operator|new
name|SpanOrQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|term3
block|}
argument_list|)
decl_stmt|;
name|SpanNotQuery
name|query
init|=
operator|new
name|SpanNotQuery
argument_list|(
name|near
argument_list|,
name|or
argument_list|)
decl_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{
literal|801
block|,
literal|821
block|,
literal|831
block|,
literal|851
block|,
literal|861
block|,
literal|871
block|,
literal|881
block|,
literal|891
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|searcher
operator|.
name|explain
argument_list|(
name|query
argument_list|,
literal|801
argument_list|)
operator|.
name|getValue
argument_list|()
operator|>
literal|0.0f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|searcher
operator|.
name|explain
argument_list|(
name|query
argument_list|,
literal|891
argument_list|)
operator|.
name|getValue
argument_list|()
operator|>
literal|0.0f
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanWithMultipleNotMany
specifier|public
name|void
name|testSpanWithMultipleNotMany
parameter_list|()
throws|throws
name|Exception
block|{
name|SpanTermQuery
name|term1
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"eight"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term2
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanNearQuery
name|near
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|term1
block|,
name|term2
block|}
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term3
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"forty"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term4
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"sixty"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term5
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"eighty"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanOrQuery
name|or
init|=
operator|new
name|SpanOrQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|term3
block|,
name|term4
block|,
name|term5
block|}
argument_list|)
decl_stmt|;
name|SpanNotQuery
name|query
init|=
operator|new
name|SpanNotQuery
argument_list|(
name|near
argument_list|,
name|or
argument_list|)
decl_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{
literal|801
block|,
literal|821
block|,
literal|831
block|,
literal|851
block|,
literal|871
block|,
literal|891
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|searcher
operator|.
name|explain
argument_list|(
name|query
argument_list|,
literal|801
argument_list|)
operator|.
name|getValue
argument_list|()
operator|>
literal|0.0f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|searcher
operator|.
name|explain
argument_list|(
name|query
argument_list|,
literal|891
argument_list|)
operator|.
name|getValue
argument_list|()
operator|>
literal|0.0f
argument_list|)
expr_stmt|;
block|}
DECL|method|testNpeInSpanNearWithSpanNot
specifier|public
name|void
name|testNpeInSpanNearWithSpanNot
parameter_list|()
throws|throws
name|Exception
block|{
name|SpanTermQuery
name|term1
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"eight"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term2
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanNearQuery
name|near
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|term1
block|,
name|term2
block|}
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|hun
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"hundred"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term3
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"forty"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanNearQuery
name|exclude
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|hun
block|,
name|term3
block|}
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SpanNotQuery
name|query
init|=
operator|new
name|SpanNotQuery
argument_list|(
name|near
argument_list|,
name|exclude
argument_list|)
decl_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{
literal|801
block|,
literal|821
block|,
literal|831
block|,
literal|851
block|,
literal|861
block|,
literal|871
block|,
literal|881
block|,
literal|891
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|searcher
operator|.
name|explain
argument_list|(
name|query
argument_list|,
literal|801
argument_list|)
operator|.
name|getValue
argument_list|()
operator|>
literal|0.0f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|searcher
operator|.
name|explain
argument_list|(
name|query
argument_list|,
literal|891
argument_list|)
operator|.
name|getValue
argument_list|()
operator|>
literal|0.0f
argument_list|)
expr_stmt|;
block|}
DECL|method|testNpeInSpanNearInSpanFirstInSpanNot
specifier|public
name|void
name|testNpeInSpanNearInSpanFirstInSpanNot
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|n
init|=
literal|5
decl_stmt|;
name|SpanTermQuery
name|hun
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"hundred"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term40
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"forty"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term40c
init|=
operator|(
name|SpanTermQuery
operator|)
name|term40
operator|.
name|clone
argument_list|()
decl_stmt|;
name|SpanFirstQuery
name|include
init|=
operator|new
name|SpanFirstQuery
argument_list|(
name|term40
argument_list|,
name|n
argument_list|)
decl_stmt|;
name|SpanNearQuery
name|near
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|hun
block|,
name|term40c
block|}
argument_list|,
name|n
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SpanFirstQuery
name|exclude
init|=
operator|new
name|SpanFirstQuery
argument_list|(
name|near
argument_list|,
name|n
operator|-
literal|1
argument_list|)
decl_stmt|;
name|SpanNotQuery
name|q
init|=
operator|new
name|SpanNotQuery
argument_list|(
name|include
argument_list|,
name|exclude
argument_list|)
decl_stmt|;
name|checkHits
argument_list|(
name|q
argument_list|,
operator|new
name|int
index|[]
block|{
literal|40
block|,
literal|41
block|,
literal|42
block|,
literal|43
block|,
literal|44
block|,
literal|45
block|,
literal|46
block|,
literal|47
block|,
literal|48
block|,
literal|49
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanFirst
specifier|public
name|void
name|testSpanFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|SpanTermQuery
name|term1
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"five"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanFirstQuery
name|query
init|=
operator|new
name|SpanFirstQuery
argument_list|(
name|term1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{
literal|5
block|,
literal|500
block|,
literal|501
block|,
literal|502
block|,
literal|503
block|,
literal|504
block|,
literal|505
block|,
literal|506
block|,
literal|507
block|,
literal|508
block|,
literal|509
block|,
literal|510
block|,
literal|511
block|,
literal|512
block|,
literal|513
block|,
literal|514
block|,
literal|515
block|,
literal|516
block|,
literal|517
block|,
literal|518
block|,
literal|519
block|,
literal|520
block|,
literal|521
block|,
literal|522
block|,
literal|523
block|,
literal|524
block|,
literal|525
block|,
literal|526
block|,
literal|527
block|,
literal|528
block|,
literal|529
block|,
literal|530
block|,
literal|531
block|,
literal|532
block|,
literal|533
block|,
literal|534
block|,
literal|535
block|,
literal|536
block|,
literal|537
block|,
literal|538
block|,
literal|539
block|,
literal|540
block|,
literal|541
block|,
literal|542
block|,
literal|543
block|,
literal|544
block|,
literal|545
block|,
literal|546
block|,
literal|547
block|,
literal|548
block|,
literal|549
block|,
literal|550
block|,
literal|551
block|,
literal|552
block|,
literal|553
block|,
literal|554
block|,
literal|555
block|,
literal|556
block|,
literal|557
block|,
literal|558
block|,
literal|559
block|,
literal|560
block|,
literal|561
block|,
literal|562
block|,
literal|563
block|,
literal|564
block|,
literal|565
block|,
literal|566
block|,
literal|567
block|,
literal|568
block|,
literal|569
block|,
literal|570
block|,
literal|571
block|,
literal|572
block|,
literal|573
block|,
literal|574
block|,
literal|575
block|,
literal|576
block|,
literal|577
block|,
literal|578
block|,
literal|579
block|,
literal|580
block|,
literal|581
block|,
literal|582
block|,
literal|583
block|,
literal|584
block|,
literal|585
block|,
literal|586
block|,
literal|587
block|,
literal|588
block|,
literal|589
block|,
literal|590
block|,
literal|591
block|,
literal|592
block|,
literal|593
block|,
literal|594
block|,
literal|595
block|,
literal|596
block|,
literal|597
block|,
literal|598
block|,
literal|599
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|searcher
operator|.
name|explain
argument_list|(
name|query
argument_list|,
literal|5
argument_list|)
operator|.
name|getValue
argument_list|()
operator|>
literal|0.0f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|searcher
operator|.
name|explain
argument_list|(
name|query
argument_list|,
literal|599
argument_list|)
operator|.
name|getValue
argument_list|()
operator|>
literal|0.0f
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanOr
specifier|public
name|void
name|testSpanOr
parameter_list|()
throws|throws
name|Exception
block|{
name|SpanTermQuery
name|term1
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"thirty"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term2
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"three"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanNearQuery
name|near1
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|term1
block|,
name|term2
block|}
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term3
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"forty"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term4
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"seven"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanNearQuery
name|near2
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|term3
block|,
name|term4
block|}
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SpanOrQuery
name|query
init|=
operator|new
name|SpanOrQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|near1
block|,
name|near2
block|}
argument_list|)
decl_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{
literal|33
block|,
literal|47
block|,
literal|133
block|,
literal|147
block|,
literal|233
block|,
literal|247
block|,
literal|333
block|,
literal|347
block|,
literal|433
block|,
literal|447
block|,
literal|533
block|,
literal|547
block|,
literal|633
block|,
literal|647
block|,
literal|733
block|,
literal|747
block|,
literal|833
block|,
literal|847
block|,
literal|933
block|,
literal|947
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|searcher
operator|.
name|explain
argument_list|(
name|query
argument_list|,
literal|33
argument_list|)
operator|.
name|getValue
argument_list|()
operator|>
literal|0.0f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|searcher
operator|.
name|explain
argument_list|(
name|query
argument_list|,
literal|947
argument_list|)
operator|.
name|getValue
argument_list|()
operator|>
literal|0.0f
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanExactNested
specifier|public
name|void
name|testSpanExactNested
parameter_list|()
throws|throws
name|Exception
block|{
name|SpanTermQuery
name|term1
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"three"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term2
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"hundred"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanNearQuery
name|near1
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|term1
block|,
name|term2
block|}
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term3
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"thirty"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|term4
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"three"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanNearQuery
name|near2
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|term3
block|,
name|term4
block|}
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SpanNearQuery
name|query
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|near1
block|,
name|near2
block|}
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{
literal|333
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|searcher
operator|.
name|explain
argument_list|(
name|query
argument_list|,
literal|333
argument_list|)
operator|.
name|getValue
argument_list|()
operator|>
literal|0.0f
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanNearOr
specifier|public
name|void
name|testSpanNearOr
parameter_list|()
throws|throws
name|Exception
block|{
name|SpanTermQuery
name|t1
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"six"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|t3
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"seven"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|t5
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"seven"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|t6
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"six"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanOrQuery
name|to1
init|=
operator|new
name|SpanOrQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|t1
block|,
name|t3
block|}
argument_list|)
decl_stmt|;
name|SpanOrQuery
name|to2
init|=
operator|new
name|SpanOrQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|t5
block|,
name|t6
block|}
argument_list|)
decl_stmt|;
name|SpanNearQuery
name|query
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|to1
block|,
name|to2
block|}
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{
literal|606
block|,
literal|607
block|,
literal|626
block|,
literal|627
block|,
literal|636
block|,
literal|637
block|,
literal|646
block|,
literal|647
block|,
literal|656
block|,
literal|657
block|,
literal|666
block|,
literal|667
block|,
literal|676
block|,
literal|677
block|,
literal|686
block|,
literal|687
block|,
literal|696
block|,
literal|697
block|,
literal|706
block|,
literal|707
block|,
literal|726
block|,
literal|727
block|,
literal|736
block|,
literal|737
block|,
literal|746
block|,
literal|747
block|,
literal|756
block|,
literal|757
block|,
literal|766
block|,
literal|767
block|,
literal|776
block|,
literal|777
block|,
literal|786
block|,
literal|787
block|,
literal|796
block|,
literal|797
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanComplex1
specifier|public
name|void
name|testSpanComplex1
parameter_list|()
throws|throws
name|Exception
block|{
name|SpanTermQuery
name|t1
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"six"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|t2
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"hundred"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanNearQuery
name|tt1
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|t1
block|,
name|t2
block|}
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|t3
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"seven"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|t4
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"hundred"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanNearQuery
name|tt2
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|t3
block|,
name|t4
block|}
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|t5
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"seven"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|t6
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"six"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanOrQuery
name|to1
init|=
operator|new
name|SpanOrQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|tt1
block|,
name|tt2
block|}
argument_list|)
decl_stmt|;
name|SpanOrQuery
name|to2
init|=
operator|new
name|SpanOrQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|t5
block|,
name|t6
block|}
argument_list|)
decl_stmt|;
name|SpanNearQuery
name|query
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|to1
block|,
name|to2
block|}
argument_list|,
literal|100
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|checkHits
argument_list|(
name|query
argument_list|,
operator|new
name|int
index|[]
block|{
literal|606
block|,
literal|607
block|,
literal|626
block|,
literal|627
block|,
literal|636
block|,
literal|637
block|,
literal|646
block|,
literal|647
block|,
literal|656
block|,
literal|657
block|,
literal|666
block|,
literal|667
block|,
literal|676
block|,
literal|677
block|,
literal|686
block|,
literal|687
block|,
literal|696
block|,
literal|697
block|,
literal|706
block|,
literal|707
block|,
literal|726
block|,
literal|727
block|,
literal|736
block|,
literal|737
block|,
literal|746
block|,
literal|747
block|,
literal|756
block|,
literal|757
block|,
literal|766
block|,
literal|767
block|,
literal|776
block|,
literal|777
block|,
literal|786
block|,
literal|787
block|,
literal|796
block|,
literal|797
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpansSkipTo
specifier|public
name|void
name|testSpansSkipTo
parameter_list|()
throws|throws
name|Exception
block|{
name|SpanTermQuery
name|t1
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"seventy"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|t2
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"seventy"
argument_list|)
argument_list|)
decl_stmt|;
name|Spans
name|s1
init|=
name|t1
operator|.
name|getSpans
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
decl_stmt|;
name|Spans
name|s2
init|=
name|t2
operator|.
name|getSpans
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s1
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s2
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|hasMore
init|=
literal|true
decl_stmt|;
do|do
block|{
name|hasMore
operator|=
name|skipToAccoringToJavaDocs
argument_list|(
name|s1
argument_list|,
name|s1
operator|.
name|doc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hasMore
argument_list|,
name|s2
operator|.
name|skipTo
argument_list|(
name|s2
operator|.
name|doc
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s1
operator|.
name|doc
argument_list|()
argument_list|,
name|s2
operator|.
name|doc
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|hasMore
condition|)
do|;
block|}
comment|/** Skips to the first match beyond the current, whose document number is    * greater than or equal to<i>target</i>.<p>Returns true iff there is such    * a match.<p>Behaves as if written:<pre>    *   boolean skipTo(int target) {    *     do {    *       if (!next())    *       return false;    *     } while (target> doc());    *     return true;    *   }    *</pre>    */
DECL|method|skipToAccoringToJavaDocs
specifier|private
name|boolean
name|skipToAccoringToJavaDocs
parameter_list|(
name|Spans
name|s
parameter_list|,
name|int
name|target
parameter_list|)
throws|throws
name|Exception
block|{
do|do
block|{
if|if
condition|(
operator|!
name|s
operator|.
name|next
argument_list|()
condition|)
return|return
literal|false
return|;
block|}
do|while
condition|(
name|target
operator|>
name|s
operator|.
name|doc
argument_list|()
condition|)
do|;
return|return
literal|true
return|;
block|}
DECL|method|checkHits
specifier|private
name|void
name|checkHits
parameter_list|(
name|Query
name|query
parameter_list|,
name|int
index|[]
name|results
parameter_list|)
throws|throws
name|IOException
block|{
name|CheckHits
operator|.
name|checkHits
argument_list|(
name|query
argument_list|,
literal|"field"
argument_list|,
name|searcher
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
