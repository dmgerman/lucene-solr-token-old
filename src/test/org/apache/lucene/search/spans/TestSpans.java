begin_unit
begin_package
DECL|package|org.apache.lucene.search.spans
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Hits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|CheckHits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|WhitespaceAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import
begin_class
DECL|class|TestSpans
specifier|public
class|class
name|TestSpans
extends|extends
name|TestCase
block|{
DECL|field|searcher
specifier|private
name|IndexSearcher
name|searcher
decl_stmt|;
DECL|field|field
specifier|public
specifier|final
name|String
name|field
init|=
literal|"field"
decl_stmt|;
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|RAMDirectory
name|directory
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|directory
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Text
argument_list|(
name|field
argument_list|,
name|docFields
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
DECL|field|docFields
specifier|private
name|String
index|[]
name|docFields
init|=
block|{
literal|"w1 w2 w3 w4 w5"
block|,
literal|"w1 w3 w2 w3"
block|,
literal|"w1 xx w2 yy w3"
block|,
literal|"w1 w3 xx w2 yy w3"
block|,
literal|""
block|}
decl_stmt|;
DECL|method|makeSpanTermQuery
specifier|public
name|SpanTermQuery
name|makeSpanTermQuery
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|text
argument_list|)
argument_list|)
return|;
block|}
DECL|method|checkHits
specifier|private
name|void
name|checkHits
parameter_list|(
name|Query
name|query
parameter_list|,
name|int
index|[]
name|results
parameter_list|)
throws|throws
name|IOException
block|{
name|CheckHits
operator|.
name|checkHits
argument_list|(
name|query
argument_list|,
name|field
argument_list|,
name|searcher
argument_list|,
name|results
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|orderedSlopTest3
specifier|public
name|void
name|orderedSlopTest3
parameter_list|(
name|int
name|slop
parameter_list|,
name|int
index|[]
name|expectedDocs
parameter_list|)
throws|throws
name|IOException
block|{
name|SpanTermQuery
name|w1
init|=
name|makeSpanTermQuery
argument_list|(
literal|"w1"
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|w2
init|=
name|makeSpanTermQuery
argument_list|(
literal|"w2"
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|w3
init|=
name|makeSpanTermQuery
argument_list|(
literal|"w3"
argument_list|)
decl_stmt|;
name|boolean
name|ordered
init|=
literal|true
decl_stmt|;
name|SpanNearQuery
name|snq
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|w1
block|,
name|w2
block|,
name|w3
block|}
argument_list|,
name|slop
argument_list|,
name|ordered
argument_list|)
decl_stmt|;
name|checkHits
argument_list|(
name|snq
argument_list|,
name|expectedDocs
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanNearOrdered01
specifier|public
name|void
name|testSpanNearOrdered01
parameter_list|()
throws|throws
name|Exception
block|{
name|orderedSlopTest3
argument_list|(
literal|0
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanNearOrdered02
specifier|public
name|void
name|testSpanNearOrdered02
parameter_list|()
throws|throws
name|Exception
block|{
name|orderedSlopTest3
argument_list|(
literal|1
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanNearOrdered03
specifier|public
name|void
name|testSpanNearOrdered03
parameter_list|()
throws|throws
name|Exception
block|{
name|orderedSlopTest3
argument_list|(
literal|2
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanNearOrdered04
specifier|public
name|void
name|testSpanNearOrdered04
parameter_list|()
throws|throws
name|Exception
block|{
name|orderedSlopTest3
argument_list|(
literal|3
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testSpanNearOrdered05
specifier|public
name|void
name|testSpanNearOrdered05
parameter_list|()
throws|throws
name|Exception
block|{
name|orderedSlopTest3
argument_list|(
literal|4
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
