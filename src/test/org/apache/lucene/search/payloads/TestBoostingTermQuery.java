begin_unit
begin_package
DECL|package|org.apache.lucene.search.payloads
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|payloads
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Payload
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|Spans
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|TermSpans
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|English
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_class
DECL|class|TestBoostingTermQuery
specifier|public
class|class
name|TestBoostingTermQuery
extends|extends
name|TestCase
block|{
DECL|field|searcher
specifier|private
name|IndexSearcher
name|searcher
decl_stmt|;
DECL|field|similarity
specifier|private
name|BoostingSimilarity
name|similarity
init|=
operator|new
name|BoostingSimilarity
argument_list|()
decl_stmt|;
DECL|method|TestBoostingTermQuery
specifier|public
name|TestBoostingTermQuery
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|class|PayloadAnalyzer
specifier|private
class|class
name|PayloadAnalyzer
extends|extends
name|Analyzer
block|{
DECL|method|tokenStream
specifier|public
name|TokenStream
name|tokenStream
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
name|TokenStream
name|result
init|=
operator|new
name|LowerCaseTokenizer
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|result
operator|=
operator|new
name|PayloadFilter
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
DECL|class|PayloadFilter
specifier|private
class|class
name|PayloadFilter
extends|extends
name|TokenFilter
block|{
DECL|method|PayloadFilter
specifier|public
name|PayloadFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
DECL|method|next
specifier|public
name|Token
name|next
parameter_list|()
throws|throws
name|IOException
block|{
name|Token
name|result
init|=
name|input
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|setPayload
argument_list|(
operator|new
name|Payload
argument_list|(
name|encodePayload
argument_list|(
name|result
operator|.
name|termText
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|RAMDirectory
name|directory
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|PayloadAnalyzer
name|analyzer
init|=
operator|new
name|PayloadAnalyzer
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|directory
argument_list|,
name|analyzer
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setSimilarity
argument_list|(
name|similarity
argument_list|)
expr_stmt|;
comment|//writer.infoStream = System.out;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|//writer.optimize();
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|setSimilarity
argument_list|(
name|similarity
argument_list|)
expr_stmt|;
block|}
DECL|method|encodePayload
specifier|private
name|byte
index|[]
name|encodePayload
parameter_list|(
name|String
name|englishInt
parameter_list|)
block|{
name|int
name|i
init|=
name|englishInt
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|bytes
index|[
literal|0
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|i
operator|>>>
literal|24
argument_list|)
expr_stmt|;
name|bytes
index|[
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|i
operator|>>>
literal|16
argument_list|)
expr_stmt|;
name|bytes
index|[
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|i
operator|>>>
literal|8
argument_list|)
expr_stmt|;
name|bytes
index|[
literal|3
index|]
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
return|return
name|bytes
return|;
block|}
DECL|method|decodePayload
specifier|private
name|int
name|decodePayload
parameter_list|(
name|byte
index|[]
name|payload
parameter_list|,
name|int
name|size
parameter_list|)
block|{
comment|//This should be equal to the hash code of the String representing the English int from English.intToEnglish
name|int
name|result
init|=
operator|(
name|payload
index|[
literal|0
index|]
operator|<<
literal|24
operator|)
operator||
operator|(
name|payload
index|[
literal|1
index|]
operator|<<
literal|16
operator|)
operator||
operator|(
name|payload
index|[
literal|2
index|]
operator|<<
literal|8
operator|)
operator||
operator|(
name|payload
index|[
literal|3
index|]
operator|)
decl_stmt|;
comment|/*assertEquals((byte) (size>>> 24), payload[0]);     assertEquals((byte) (size>>> 16), payload[1]);     assertEquals((byte) (size>>> 8), payload[2]);     assertEquals((byte) size, payload[3]);*/
return|return
name|result
return|;
block|}
DECL|method|tearDown
specifier|protected
name|void
name|tearDown
parameter_list|()
block|{    }
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|IOException
block|{
name|BoostingTermQuery
name|query
init|=
operator|new
name|BoostingTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"seventy"
argument_list|)
argument_list|)
decl_stmt|;
name|TopDocs
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"hits is null and it shouldn't be"
argument_list|,
name|hits
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"hits Size: "
operator|+
name|hits
operator|.
name|totalHits
operator|+
literal|" is not: "
operator|+
literal|100
argument_list|,
name|hits
operator|.
name|totalHits
operator|==
literal|100
argument_list|)
expr_stmt|;
comment|//they should all have the exact same score, because they all contain seventy once, and we set
comment|//all the other similarity factors to be 1
comment|//This score should be 1, since we normalize scores
name|int
name|seventyHash
init|=
literal|"seventy"
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"score "
operator|+
name|hits
operator|.
name|getMaxScore
argument_list|()
operator|+
literal|" does not equal 'seventy' hashcode: "
operator|+
name|seventyHash
argument_list|,
name|hits
operator|.
name|getMaxScore
argument_list|()
operator|==
name|seventyHash
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|scoreDocs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ScoreDoc
name|doc
init|=
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"score "
operator|+
name|doc
operator|.
name|score
operator|+
literal|" does not equal 'seventy' hashcode: "
operator|+
name|seventyHash
argument_list|,
name|doc
operator|.
name|score
operator|==
name|seventyHash
argument_list|)
expr_stmt|;
block|}
name|CheckHits
operator|.
name|checkExplanations
argument_list|(
name|query
argument_list|,
literal|"field"
argument_list|,
name|searcher
argument_list|)
expr_stmt|;
name|Spans
name|spans
init|=
name|query
operator|.
name|getSpans
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"spans is null and it shouldn't be"
argument_list|,
name|spans
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"spans is not an instanceof "
operator|+
name|TermSpans
operator|.
name|class
argument_list|,
name|spans
operator|instanceof
name|TermSpans
argument_list|)
expr_stmt|;
comment|/*float score = hits.score(0);     for (int i =1; i< hits.length(); i++)     {       assertTrue("scores are not equal and they should be", score == hits.score(i));     }*/
block|}
DECL|method|testNoMatch
specifier|public
name|void
name|testNoMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|BoostingTermQuery
name|query
init|=
operator|new
name|BoostingTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"junk"
argument_list|)
argument_list|)
decl_stmt|;
name|TopDocs
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"hits is null and it shouldn't be"
argument_list|,
name|hits
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"hits Size: "
operator|+
name|hits
operator|.
name|totalHits
operator|+
literal|" is not: "
operator|+
literal|0
argument_list|,
name|hits
operator|.
name|totalHits
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|class|BoostingSimilarity
class|class
name|BoostingSimilarity
extends|extends
name|DefaultSimilarity
block|{
comment|// TODO: Remove warning after API has been finalized
DECL|method|scorePayload
specifier|public
name|float
name|scorePayload
parameter_list|(
name|byte
index|[]
name|payload
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
comment|//we know it is size 4 here, so ignore the offset/length
return|return
name|decodePayload
argument_list|(
name|payload
argument_list|,
literal|4
argument_list|)
return|;
block|}
comment|//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
comment|//Make everything else 1 so we see the effect of the payload
comment|//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
DECL|method|lengthNorm
specifier|public
name|float
name|lengthNorm
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|int
name|numTerms
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
DECL|method|queryNorm
specifier|public
name|float
name|queryNorm
parameter_list|(
name|float
name|sumOfSquaredWeights
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
DECL|method|sloppyFreq
specifier|public
name|float
name|sloppyFreq
parameter_list|(
name|int
name|distance
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
DECL|method|coord
specifier|public
name|float
name|coord
parameter_list|(
name|int
name|overlap
parameter_list|,
name|int
name|maxOverlap
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
DECL|method|idf
specifier|public
name|float
name|idf
parameter_list|(
name|int
name|docFreq
parameter_list|,
name|int
name|numDocs
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
DECL|method|tf
specifier|public
name|float
name|tf
parameter_list|(
name|float
name|freq
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
block|}
block|}
end_class
end_unit
