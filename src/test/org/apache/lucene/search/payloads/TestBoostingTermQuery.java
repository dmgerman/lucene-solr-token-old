begin_unit
begin_package
DECL|package|org.apache.lucene.search.payloads
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|payloads
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Payload
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|Spans
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|TermSpans
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|English
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_class
DECL|class|TestBoostingTermQuery
specifier|public
class|class
name|TestBoostingTermQuery
extends|extends
name|LuceneTestCase
block|{
DECL|field|searcher
specifier|private
name|IndexSearcher
name|searcher
decl_stmt|;
DECL|field|similarity
specifier|private
name|BoostingSimilarity
name|similarity
init|=
operator|new
name|BoostingSimilarity
argument_list|()
decl_stmt|;
DECL|field|payloadField
specifier|private
name|byte
index|[]
name|payloadField
init|=
operator|new
name|byte
index|[]
block|{
literal|1
block|}
decl_stmt|;
DECL|field|payloadMultiField1
specifier|private
name|byte
index|[]
name|payloadMultiField1
init|=
operator|new
name|byte
index|[]
block|{
literal|2
block|}
decl_stmt|;
DECL|field|payloadMultiField2
specifier|private
name|byte
index|[]
name|payloadMultiField2
init|=
operator|new
name|byte
index|[]
block|{
literal|4
block|}
decl_stmt|;
DECL|method|TestBoostingTermQuery
specifier|public
name|TestBoostingTermQuery
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|class|PayloadAnalyzer
specifier|private
class|class
name|PayloadAnalyzer
extends|extends
name|Analyzer
block|{
DECL|method|tokenStream
specifier|public
name|TokenStream
name|tokenStream
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
name|TokenStream
name|result
init|=
operator|new
name|LowerCaseTokenizer
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|result
operator|=
operator|new
name|PayloadFilter
argument_list|(
name|result
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
DECL|class|PayloadFilter
specifier|private
class|class
name|PayloadFilter
extends|extends
name|TokenFilter
block|{
DECL|field|fieldName
name|String
name|fieldName
decl_stmt|;
DECL|field|numSeen
name|int
name|numSeen
init|=
literal|0
decl_stmt|;
DECL|method|PayloadFilter
specifier|public
name|PayloadFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
DECL|method|next
specifier|public
name|Token
name|next
parameter_list|()
throws|throws
name|IOException
block|{
name|Token
name|result
init|=
name|input
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"field"
argument_list|)
condition|)
block|{
name|result
operator|.
name|setPayload
argument_list|(
operator|new
name|Payload
argument_list|(
name|payloadField
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
literal|"multiField"
argument_list|)
condition|)
block|{
if|if
condition|(
name|numSeen
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|result
operator|.
name|setPayload
argument_list|(
operator|new
name|Payload
argument_list|(
name|payloadMultiField1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|setPayload
argument_list|(
operator|new
name|Payload
argument_list|(
name|payloadMultiField2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|numSeen
operator|++
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|RAMDirectory
name|directory
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|PayloadAnalyzer
name|analyzer
init|=
operator|new
name|PayloadAnalyzer
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|directory
argument_list|,
name|analyzer
argument_list|,
literal|true
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setSimilarity
argument_list|(
name|similarity
argument_list|)
expr_stmt|;
comment|//writer.infoStream = System.out;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Field
name|noPayloadField
init|=
operator|new
name|Field
argument_list|(
literal|"noPayLoad"
argument_list|,
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
decl_stmt|;
comment|//noPayloadField.setBoost(0);
name|doc
operator|.
name|add
argument_list|(
name|noPayloadField
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"multiField"
argument_list|,
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
argument_list|)
operator|+
literal|"  "
operator|+
name|English
operator|.
name|intToEnglish
argument_list|(
name|i
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|setSimilarity
argument_list|(
name|similarity
argument_list|)
expr_stmt|;
block|}
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|IOException
block|{
name|BoostingTermQuery
name|query
init|=
operator|new
name|BoostingTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"seventy"
argument_list|)
argument_list|)
decl_stmt|;
name|TopDocs
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"hits is null and it shouldn't be"
argument_list|,
name|hits
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"hits Size: "
operator|+
name|hits
operator|.
name|totalHits
operator|+
literal|" is not: "
operator|+
literal|100
argument_list|,
name|hits
operator|.
name|totalHits
operator|==
literal|100
argument_list|)
expr_stmt|;
comment|//they should all have the exact same score, because they all contain seventy once, and we set
comment|//all the other similarity factors to be 1
name|assertTrue
argument_list|(
name|hits
operator|.
name|getMaxScore
argument_list|()
operator|+
literal|" does not equal: "
operator|+
literal|1
argument_list|,
name|hits
operator|.
name|getMaxScore
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|scoreDocs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ScoreDoc
name|doc
init|=
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|doc
operator|.
name|score
operator|+
literal|" does not equal: "
operator|+
literal|1
argument_list|,
name|doc
operator|.
name|score
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
name|CheckHits
operator|.
name|checkExplanations
argument_list|(
name|query
argument_list|,
literal|"field"
argument_list|,
name|searcher
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Spans
name|spans
init|=
name|query
operator|.
name|getSpans
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"spans is null and it shouldn't be"
argument_list|,
name|spans
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"spans is not an instanceof "
operator|+
name|TermSpans
operator|.
name|class
argument_list|,
name|spans
operator|instanceof
name|TermSpans
argument_list|)
expr_stmt|;
comment|/*float score = hits.score(0);     for (int i =1; i< hits.length(); i++)     {       assertTrue("scores are not equal and they should be", score == hits.score(i));     }*/
block|}
DECL|method|testMultipleMatchesPerDoc
specifier|public
name|void
name|testMultipleMatchesPerDoc
parameter_list|()
throws|throws
name|Exception
block|{
name|BoostingTermQuery
name|query
init|=
operator|new
name|BoostingTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"multiField"
argument_list|,
literal|"seventy"
argument_list|)
argument_list|)
decl_stmt|;
name|TopDocs
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"hits is null and it shouldn't be"
argument_list|,
name|hits
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"hits Size: "
operator|+
name|hits
operator|.
name|totalHits
operator|+
literal|" is not: "
operator|+
literal|100
argument_list|,
name|hits
operator|.
name|totalHits
operator|==
literal|100
argument_list|)
expr_stmt|;
comment|//they should all have the exact same score, because they all contain seventy once, and we set
comment|//all the other similarity factors to be 1
comment|//System.out.println("Hash: " + seventyHash + " Twice Hash: " + 2*seventyHash);
name|assertTrue
argument_list|(
name|hits
operator|.
name|getMaxScore
argument_list|()
operator|+
literal|" does not equal: "
operator|+
literal|3
argument_list|,
name|hits
operator|.
name|getMaxScore
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|//there should be exactly 10 items that score a 3, all the rest should score a 2
comment|//The 10 items are: 70 + i*100 where i in [0-9]
name|int
name|numTens
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|scoreDocs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ScoreDoc
name|doc
init|=
name|hits
operator|.
name|scoreDocs
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|doc
operator|.
name|doc
operator|%
literal|10
operator|==
literal|0
condition|)
block|{
name|numTens
operator|++
expr_stmt|;
name|assertTrue
argument_list|(
name|doc
operator|.
name|score
operator|+
literal|" does not equal: "
operator|+
literal|3
argument_list|,
name|doc
operator|.
name|score
operator|==
literal|3
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|doc
operator|.
name|score
operator|+
literal|" does not equal: "
operator|+
literal|2
argument_list|,
name|doc
operator|.
name|score
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|numTens
operator|+
literal|" does not equal: "
operator|+
literal|10
argument_list|,
name|numTens
operator|==
literal|10
argument_list|)
expr_stmt|;
name|CheckHits
operator|.
name|checkExplanations
argument_list|(
name|query
argument_list|,
literal|"field"
argument_list|,
name|searcher
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Spans
name|spans
init|=
name|query
operator|.
name|getSpans
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"spans is null and it shouldn't be"
argument_list|,
name|spans
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"spans is not an instanceof "
operator|+
name|TermSpans
operator|.
name|class
argument_list|,
name|spans
operator|instanceof
name|TermSpans
argument_list|)
expr_stmt|;
comment|//should be two matches per document
name|int
name|count
init|=
literal|0
decl_stmt|;
comment|//100 hits times 2 matches per hit, we should have 200 in count
while|while
condition|(
name|spans
operator|.
name|next
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|count
operator|+
literal|" does not equal: "
operator|+
literal|200
argument_list|,
name|count
operator|==
literal|200
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoMatch
specifier|public
name|void
name|testNoMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|BoostingTermQuery
name|query
init|=
operator|new
name|BoostingTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"junk"
argument_list|)
argument_list|)
decl_stmt|;
name|TopDocs
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"hits is null and it shouldn't be"
argument_list|,
name|hits
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"hits Size: "
operator|+
name|hits
operator|.
name|totalHits
operator|+
literal|" is not: "
operator|+
literal|0
argument_list|,
name|hits
operator|.
name|totalHits
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoPayload
specifier|public
name|void
name|testNoPayload
parameter_list|()
throws|throws
name|Exception
block|{
name|BoostingTermQuery
name|q1
init|=
operator|new
name|BoostingTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"noPayLoad"
argument_list|,
literal|"zero"
argument_list|)
argument_list|)
decl_stmt|;
name|BoostingTermQuery
name|q2
init|=
operator|new
name|BoostingTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"noPayLoad"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|BooleanClause
name|c1
init|=
operator|new
name|BooleanClause
argument_list|(
name|q1
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
decl_stmt|;
name|BooleanClause
name|c2
init|=
operator|new
name|BooleanClause
argument_list|(
name|q2
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
decl_stmt|;
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|TopDocs
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"hits is null and it shouldn't be"
argument_list|,
name|hits
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"hits Size: "
operator|+
name|hits
operator|.
name|totalHits
operator|+
literal|" is not: "
operator|+
literal|1
argument_list|,
name|hits
operator|.
name|totalHits
operator|==
literal|1
argument_list|)
expr_stmt|;
name|int
index|[]
name|results
init|=
operator|new
name|int
index|[
literal|1
index|]
decl_stmt|;
name|results
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
comment|//hits.scoreDocs[0].doc;
name|CheckHits
operator|.
name|checkHitCollector
argument_list|(
name|query
argument_list|,
literal|"noPayLoad"
argument_list|,
name|searcher
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
comment|// must be static for weight serialization tests
DECL|class|BoostingSimilarity
specifier|static
class|class
name|BoostingSimilarity
extends|extends
name|DefaultSimilarity
block|{
comment|// TODO: Remove warning after API has been finalized
DECL|method|scorePayload
specifier|public
name|float
name|scorePayload
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|byte
index|[]
name|payload
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
comment|//we know it is size 4 here, so ignore the offset/length
return|return
name|payload
index|[
literal|0
index|]
return|;
block|}
comment|//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
comment|//Make everything else 1 so we see the effect of the payload
comment|//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
DECL|method|lengthNorm
specifier|public
name|float
name|lengthNorm
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|int
name|numTerms
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
DECL|method|queryNorm
specifier|public
name|float
name|queryNorm
parameter_list|(
name|float
name|sumOfSquaredWeights
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
DECL|method|sloppyFreq
specifier|public
name|float
name|sloppyFreq
parameter_list|(
name|int
name|distance
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
DECL|method|coord
specifier|public
name|float
name|coord
parameter_list|(
name|int
name|overlap
parameter_list|,
name|int
name|maxOverlap
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
DECL|method|idf
specifier|public
name|float
name|idf
parameter_list|(
name|int
name|docFreq
parameter_list|,
name|int
name|numDocs
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
DECL|method|tf
specifier|public
name|float
name|tf
parameter_list|(
name|float
name|freq
parameter_list|)
block|{
return|return
name|freq
operator|==
literal|0
condition|?
literal|0
else|:
literal|1
return|;
block|}
block|}
block|}
end_class
end_unit
