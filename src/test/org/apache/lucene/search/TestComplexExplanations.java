begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Copyright 2006 Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|WhitespaceAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|QueryParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import
begin_comment
comment|/**  * TestExplanations subclass that builds up super crazy complex queries  * on the assumption that if the explanations work out right for them,  * they should work for anything.  */
end_comment
begin_class
DECL|class|TestComplexExplanations
specifier|public
class|class
name|TestComplexExplanations
extends|extends
name|TestExplanations
block|{
DECL|method|test1
specifier|public
name|void
name|test1
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|q
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"\"w1 w2\"~1"
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|snear
argument_list|(
name|st
argument_list|(
literal|"w2"
argument_list|)
argument_list|,
name|sor
argument_list|(
literal|"w5"
argument_list|,
literal|"zz"
argument_list|)
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|snear
argument_list|(
name|sf
argument_list|(
literal|"w3"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|st
argument_list|(
literal|"w2"
argument_list|)
argument_list|,
name|st
argument_list|(
literal|"w3"
argument_list|)
argument_list|,
literal|5
argument_list|,
literal|true
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|Query
name|t
init|=
operator|new
name|FilteredQuery
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"xx"
argument_list|)
argument_list|,
operator|new
name|ItemizedFilter
argument_list|(
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|t
operator|.
name|setBoost
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|t
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|t
operator|=
operator|new
name|ConstantScoreQuery
argument_list|(
operator|new
name|ItemizedFilter
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|2
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|setBoost
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|t
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|dm
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
literal|0.2f
argument_list|)
decl_stmt|;
name|dm
operator|.
name|add
argument_list|(
name|snear
argument_list|(
name|st
argument_list|(
literal|"w2"
argument_list|)
argument_list|,
name|sor
argument_list|(
literal|"w5"
argument_list|,
literal|"zz"
argument_list|)
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|dm
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"QQ"
argument_list|)
argument_list|)
expr_stmt|;
name|dm
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"xx yy -zz"
argument_list|)
argument_list|)
expr_stmt|;
name|dm
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"-xx -w1"
argument_list|)
argument_list|)
expr_stmt|;
name|DisjunctionMaxQuery
name|dm2
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
literal|0.5f
argument_list|)
decl_stmt|;
name|dm2
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"w1"
argument_list|)
argument_list|)
expr_stmt|;
name|dm2
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"w2"
argument_list|)
argument_list|)
expr_stmt|;
name|dm2
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"w3"
argument_list|)
argument_list|)
expr_stmt|;
name|dm
operator|.
name|add
argument_list|(
name|dm2
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|dm
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|BooleanQuery
name|b
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|b
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|b
operator|.
name|add
argument_list|(
name|snear
argument_list|(
literal|"w1"
argument_list|,
literal|"w2"
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|b
operator|.
name|add
argument_list|(
name|snear
argument_list|(
literal|"w2"
argument_list|,
literal|"w3"
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|b
operator|.
name|add
argument_list|(
name|snear
argument_list|(
literal|"w1"
argument_list|,
literal|"w3"
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|b
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|qtest
argument_list|(
name|q
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|}
argument_list|)
expr_stmt|;
block|}
comment|// :TODO: we really need more crazy complex cases.
block|}
end_class
end_unit
