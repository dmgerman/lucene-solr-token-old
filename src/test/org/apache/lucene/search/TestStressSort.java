begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|MockRAMDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FieldCacheSanityChecker
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FieldCacheSanityChecker
operator|.
name|Insanity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FieldCacheSanityChecker
operator|.
name|InsanityType
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_class
DECL|class|TestStressSort
specifier|public
class|class
name|TestStressSort
extends|extends
name|LuceneTestCase
block|{
DECL|field|NUM_DOCS
specifier|private
specifier|final
specifier|static
name|int
name|NUM_DOCS
init|=
literal|5000
decl_stmt|;
comment|// NOTE: put seed in here to make failures
comment|// deterministic, but do not commit with a seed (to
comment|// better test):
DECL|field|r
specifier|private
name|Random
name|r
decl_stmt|;
DECL|field|dir
DECL|field|dir2
DECL|field|dir3
specifier|private
name|Directory
name|dir
decl_stmt|,
name|dir2
decl_stmt|,
name|dir3
decl_stmt|;
DECL|field|searcherMultiSegment
specifier|private
name|IndexSearcher
name|searcherMultiSegment
decl_stmt|;
DECL|field|searcherFewSegment
specifier|private
name|IndexSearcher
name|searcherFewSegment
decl_stmt|;
DECL|field|searcherSingleSegment
specifier|private
name|IndexSearcher
name|searcherSingleSegment
decl_stmt|;
DECL|field|VERBOSE
specifier|private
specifier|static
specifier|final
name|boolean
name|VERBOSE
init|=
literal|false
decl_stmt|;
comment|// min..max
DECL|method|nextInt
specifier|private
name|int
name|nextInt
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
return|return
name|min
operator|+
name|r
operator|.
name|nextInt
argument_list|(
name|max
operator|-
name|min
operator|+
literal|1
argument_list|)
return|;
block|}
comment|// 0..(lim-1)
DECL|method|nextInt
specifier|private
name|int
name|nextInt
parameter_list|(
name|int
name|lim
parameter_list|)
block|{
return|return
name|r
operator|.
name|nextInt
argument_list|(
name|lim
argument_list|)
return|;
block|}
DECL|field|buffer
specifier|final
name|char
index|[]
name|buffer
init|=
operator|new
name|char
index|[
literal|20
index|]
decl_stmt|;
DECL|method|randomString
specifier|private
name|String
name|randomString
parameter_list|(
name|int
name|size
parameter_list|)
block|{
assert|assert
name|size
operator|<
literal|20
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|nextInt
argument_list|(
literal|48
argument_list|,
literal|122
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
return|;
block|}
DECL|method|create
specifier|private
name|void
name|create
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// NOTE: put seed in here to make failures
comment|// deterministic, but do not commit with a seed (to
comment|// better test):
name|dir
operator|=
operator|new
name|MockRAMDirectory
argument_list|()
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|(
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
operator|.
name|LUCENE_CURRENT
argument_list|)
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|17
argument_list|)
expr_stmt|;
specifier|final
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
specifier|final
name|Document
name|doc2
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
specifier|final
name|Field
name|id
init|=
operator|new
name|Field
argument_list|(
literal|"id"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NO
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|doc2
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
specifier|final
name|Field
name|contents
init|=
operator|new
name|Field
argument_list|(
literal|"contents"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|contents
argument_list|)
expr_stmt|;
name|doc2
operator|.
name|add
argument_list|(
name|contents
argument_list|)
expr_stmt|;
specifier|final
name|Field
name|byteField
init|=
operator|new
name|Field
argument_list|(
literal|"byte"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|byteField
argument_list|)
expr_stmt|;
name|doc2
operator|.
name|add
argument_list|(
name|byteField
argument_list|)
expr_stmt|;
specifier|final
name|Field
name|shortField
init|=
operator|new
name|Field
argument_list|(
literal|"short"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|shortField
argument_list|)
expr_stmt|;
name|doc2
operator|.
name|add
argument_list|(
name|shortField
argument_list|)
expr_stmt|;
specifier|final
name|Field
name|intField
init|=
operator|new
name|Field
argument_list|(
literal|"int"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|intField
argument_list|)
expr_stmt|;
name|doc2
operator|.
name|add
argument_list|(
name|intField
argument_list|)
expr_stmt|;
specifier|final
name|Field
name|longField
init|=
operator|new
name|Field
argument_list|(
literal|"long"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|longField
argument_list|)
expr_stmt|;
name|doc2
operator|.
name|add
argument_list|(
name|longField
argument_list|)
expr_stmt|;
specifier|final
name|Field
name|floatField
init|=
operator|new
name|Field
argument_list|(
literal|"float"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|floatField
argument_list|)
expr_stmt|;
name|doc2
operator|.
name|add
argument_list|(
name|floatField
argument_list|)
expr_stmt|;
specifier|final
name|Field
name|doubleField
init|=
operator|new
name|Field
argument_list|(
literal|"double"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|doubleField
argument_list|)
expr_stmt|;
name|doc2
operator|.
name|add
argument_list|(
name|doubleField
argument_list|)
expr_stmt|;
comment|// we use two diff string fields so our FieldCache usage
comment|// is less suspicious to cache inspection
specifier|final
name|Field
name|stringField
init|=
operator|new
name|Field
argument_list|(
literal|"string"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|stringField
argument_list|)
expr_stmt|;
specifier|final
name|Field
name|stringFieldIdx
init|=
operator|new
name|Field
argument_list|(
literal|"stringIdx"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|stringFieldIdx
argument_list|)
expr_stmt|;
comment|// doc2 doesn't have stringField or stringFieldIdx, so we get nulls
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_DOCS
condition|;
name|i
operator|++
control|)
block|{
name|id
operator|.
name|setValue
argument_list|(
literal|""
operator|+
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
name|contents
operator|.
name|setValue
argument_list|(
literal|"a b c z"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|contents
operator|.
name|setValue
argument_list|(
literal|"a b c y"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|%
literal|10
operator|==
literal|0
condition|)
block|{
name|contents
operator|.
name|setValue
argument_list|(
literal|"a b c x"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|contents
operator|.
name|setValue
argument_list|(
literal|"a b c"
argument_list|)
expr_stmt|;
block|}
name|byteField
operator|.
name|setValue
argument_list|(
literal|""
operator|+
name|nextInt
argument_list|(
name|Byte
operator|.
name|MIN_VALUE
argument_list|,
name|Byte
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|3
condition|)
block|{
name|shortField
operator|.
name|setValue
argument_list|(
literal|""
operator|+
name|Short
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|7
condition|)
block|{
name|shortField
operator|.
name|setValue
argument_list|(
literal|""
operator|+
name|Short
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|shortField
operator|.
name|setValue
argument_list|(
literal|""
operator|+
name|nextInt
argument_list|(
name|Short
operator|.
name|MIN_VALUE
argument_list|,
name|Short
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|3
condition|)
block|{
name|intField
operator|.
name|setValue
argument_list|(
literal|""
operator|+
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|7
condition|)
block|{
name|intField
operator|.
name|setValue
argument_list|(
literal|""
operator|+
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|intField
operator|.
name|setValue
argument_list|(
literal|""
operator|+
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|3
condition|)
block|{
name|longField
operator|.
name|setValue
argument_list|(
literal|""
operator|+
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|7
condition|)
block|{
name|longField
operator|.
name|setValue
argument_list|(
literal|""
operator|+
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|longField
operator|.
name|setValue
argument_list|(
literal|""
operator|+
name|r
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|floatField
operator|.
name|setValue
argument_list|(
literal|""
operator|+
name|r
operator|.
name|nextFloat
argument_list|()
argument_list|)
expr_stmt|;
name|doubleField
operator|.
name|setValue
argument_list|(
literal|""
operator|+
name|r
operator|.
name|nextDouble
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|197
operator|==
literal|0
condition|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|doc2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|r
init|=
name|randomString
argument_list|(
name|nextInt
argument_list|(
literal|20
argument_list|)
argument_list|)
decl_stmt|;
name|stringField
operator|.
name|setValue
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|stringFieldIdx
operator|.
name|setValue
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|searcherMultiSegment
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|searcherMultiSegment
operator|.
name|setDefaultFieldSortScoring
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dir2
operator|=
operator|new
name|MockRAMDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir2
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|(
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
operator|.
name|LUCENE_CURRENT
argument_list|)
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
expr_stmt|;
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|searcherSingleSegment
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|dir2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|searcherSingleSegment
operator|.
name|setDefaultFieldSortScoring
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dir3
operator|=
operator|new
name|MockRAMDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir3
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|(
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
operator|.
name|LUCENE_CURRENT
argument_list|)
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|LIMITED
argument_list|)
expr_stmt|;
name|writer
operator|.
name|optimize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|searcherFewSegment
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|dir3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|searcherFewSegment
operator|.
name|setDefaultFieldSortScoring
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|close
specifier|private
name|void
name|close
parameter_list|()
throws|throws
name|Throwable
block|{
name|searcherMultiSegment
operator|.
name|close
argument_list|()
expr_stmt|;
name|searcherFewSegment
operator|.
name|close
argument_list|()
expr_stmt|;
name|searcherSingleSegment
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSort
specifier|public
name|void
name|testSort
parameter_list|()
throws|throws
name|Throwable
block|{
name|r
operator|=
name|newRandom
argument_list|()
expr_stmt|;
comment|// reverse& not
comment|// all types
comment|// restrictive& non restrictive searches (on contents)
name|create
argument_list|()
expr_stmt|;
name|Sort
index|[]
name|sorts
init|=
operator|new
name|Sort
index|[
literal|50
index|]
decl_stmt|;
name|int
name|sortCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
literal|2
condition|;
name|r
operator|++
control|)
block|{
name|Sort
name|sort
decl_stmt|;
name|boolean
name|reverse
init|=
literal|1
operator|==
name|r
decl_stmt|;
name|sorts
index|[
name|sortCount
operator|++
index|]
operator|=
name|sort
operator|=
operator|new
name|Sort
argument_list|()
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"byte"
argument_list|,
name|SortField
operator|.
name|BYTE
argument_list|,
name|reverse
argument_list|)
argument_list|)
expr_stmt|;
name|sorts
index|[
name|sortCount
operator|++
index|]
operator|=
name|sort
operator|=
operator|new
name|Sort
argument_list|()
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"short"
argument_list|,
name|SortField
operator|.
name|SHORT
argument_list|,
name|reverse
argument_list|)
argument_list|)
expr_stmt|;
name|sorts
index|[
name|sortCount
operator|++
index|]
operator|=
name|sort
operator|=
operator|new
name|Sort
argument_list|()
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|,
name|reverse
argument_list|)
argument_list|)
expr_stmt|;
name|sorts
index|[
name|sortCount
operator|++
index|]
operator|=
name|sort
operator|=
operator|new
name|Sort
argument_list|()
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"long"
argument_list|,
name|SortField
operator|.
name|LONG
argument_list|,
name|reverse
argument_list|)
argument_list|)
expr_stmt|;
name|sorts
index|[
name|sortCount
operator|++
index|]
operator|=
name|sort
operator|=
operator|new
name|Sort
argument_list|()
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|,
name|reverse
argument_list|)
argument_list|)
expr_stmt|;
name|sorts
index|[
name|sortCount
operator|++
index|]
operator|=
name|sort
operator|=
operator|new
name|Sort
argument_list|()
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"double"
argument_list|,
name|SortField
operator|.
name|DOUBLE
argument_list|,
name|reverse
argument_list|)
argument_list|)
expr_stmt|;
name|sorts
index|[
name|sortCount
operator|++
index|]
operator|=
name|sort
operator|=
operator|new
name|Sort
argument_list|()
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING_VAL
argument_list|,
name|reverse
argument_list|)
argument_list|)
expr_stmt|;
name|sorts
index|[
name|sortCount
operator|++
index|]
operator|=
name|sort
operator|=
operator|new
name|Sort
argument_list|()
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"stringIdx"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|,
name|reverse
argument_list|)
argument_list|)
expr_stmt|;
name|sorts
index|[
name|sortCount
operator|++
index|]
operator|=
name|sort
operator|=
operator|new
name|Sort
argument_list|()
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|null
argument_list|,
name|SortField
operator|.
name|SCORE
argument_list|,
name|reverse
argument_list|)
argument_list|)
expr_stmt|;
name|sorts
index|[
name|sortCount
operator|++
index|]
operator|=
name|sort
operator|=
operator|new
name|Sort
argument_list|()
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|null
argument_list|,
name|SortField
operator|.
name|DOC
argument_list|,
name|reverse
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Query
index|[]
name|queries
init|=
operator|new
name|Query
index|[
literal|4
index|]
decl_stmt|;
name|queries
index|[
literal|0
index|]
operator|=
operator|new
name|MatchAllDocsQuery
argument_list|()
expr_stmt|;
name|queries
index|[
literal|1
index|]
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"contents"
argument_list|,
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
comment|// matches every 10th doc
name|queries
index|[
literal|2
index|]
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"contents"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
comment|// matches every 100th doc
name|queries
index|[
literal|3
index|]
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"contents"
argument_list|,
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
comment|// matches every 1000th doc
for|for
control|(
name|int
name|sx
init|=
literal|0
init|;
name|sx
operator|<
literal|3
condition|;
name|sx
operator|++
control|)
block|{
specifier|final
name|IndexSearcher
name|searcher
decl_stmt|;
if|if
condition|(
name|sx
operator|==
literal|0
condition|)
block|{
name|searcher
operator|=
name|searcherSingleSegment
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sx
operator|==
literal|1
condition|)
block|{
name|searcher
operator|=
name|searcherFewSegment
expr_stmt|;
block|}
else|else
block|{
name|searcher
operator|=
name|searcherMultiSegment
expr_stmt|;
block|}
for|for
control|(
name|int
name|qx
init|=
literal|0
init|;
name|qx
operator|<
name|queries
operator|.
name|length
condition|;
name|qx
operator|++
control|)
block|{
specifier|final
name|Query
name|query
init|=
name|queries
index|[
name|qx
index|]
decl_stmt|;
for|for
control|(
name|int
name|q
init|=
literal|0
init|;
name|q
operator|<
literal|3
condition|;
name|q
operator|++
control|)
block|{
specifier|final
name|int
name|queueSize
decl_stmt|;
if|if
condition|(
name|q
operator|==
literal|0
condition|)
block|{
name|queueSize
operator|=
literal|10
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|q
operator|==
literal|1
condition|)
block|{
name|queueSize
operator|=
literal|100
expr_stmt|;
block|}
else|else
block|{
name|queueSize
operator|=
literal|1000
expr_stmt|;
block|}
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
name|sortCount
condition|;
name|s
operator|++
control|)
block|{
name|Sort
name|sort1
init|=
name|sorts
index|[
name|s
index|]
decl_stmt|;
for|for
control|(
name|int
name|s2
init|=
operator|-
literal|1
init|;
name|s2
operator|<
name|sortCount
condition|;
name|s2
operator|++
control|)
block|{
name|Sort
name|sort
decl_stmt|;
if|if
condition|(
name|s2
operator|==
operator|-
literal|1
condition|)
block|{
comment|// Single field sort
name|sort
operator|=
name|sort1
expr_stmt|;
block|}
else|else
block|{
name|sort
operator|=
operator|new
name|Sort
argument_list|(
name|sort1
operator|.
name|getSort
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|sorts
index|[
name|s2
index|]
operator|.
name|getSort
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|// we explicitly test the old sort method and
comment|// compare with the new, so we expect to see SUBREADER
comment|// sanity checks fail.
name|Insanity
index|[]
name|insanity
init|=
name|FieldCacheSanityChecker
operator|.
name|checkSanity
argument_list|(
name|FieldCache
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|ignored
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|insanity
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|insanity
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
operator|==
name|InsanityType
operator|.
name|SUBREADER
condition|)
block|{
name|insanity
index|[
name|i
index|]
operator|=
operator|new
name|Insanity
argument_list|(
name|InsanityType
operator|.
name|EXPECTED
argument_list|,
name|insanity
index|[
name|i
index|]
operator|.
name|getMsg
argument_list|()
argument_list|,
name|insanity
index|[
name|i
index|]
operator|.
name|getCacheEntries
argument_list|()
argument_list|)
expr_stmt|;
name|ignored
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"Not all insane field cache usage was expected"
argument_list|,
name|ignored
argument_list|,
name|insanity
operator|.
name|length
argument_list|)
expr_stmt|;
name|insanity
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
comment|// report this in the event of any exception/failure
comment|// if no failure, then insanity will be null
if|if
condition|(
literal|null
operator|!=
name|insanity
condition|)
block|{
name|dumpArray
argument_list|(
name|getTestLabel
argument_list|()
operator|+
literal|": Insane FieldCache usage(s)"
argument_list|,
name|insanity
argument_list|,
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
block|}
comment|// we've already checked FieldCache, purge so tearDown doesn't complain
name|purgeFieldCache
argument_list|(
name|FieldCache
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
comment|// so
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|compare
specifier|private
name|void
name|compare
parameter_list|(
name|TopDocs
name|oldHits
parameter_list|,
name|TopDocs
name|newHits
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|oldHits
operator|.
name|totalHits
argument_list|,
name|newHits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oldHits
operator|.
name|scoreDocs
operator|.
name|length
argument_list|,
name|newHits
operator|.
name|scoreDocs
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|ScoreDoc
index|[]
name|oldDocs
init|=
name|oldHits
operator|.
name|scoreDocs
decl_stmt|;
specifier|final
name|ScoreDoc
index|[]
name|newDocs
init|=
name|newHits
operator|.
name|scoreDocs
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oldDocs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|oldDocs
index|[
name|i
index|]
operator|instanceof
name|FieldDoc
condition|)
block|{
assert|assert
name|newDocs
index|[
name|i
index|]
operator|instanceof
name|FieldDoc
assert|;
name|FieldDoc
name|oldHit
init|=
operator|(
name|FieldDoc
operator|)
name|oldDocs
index|[
name|i
index|]
decl_stmt|;
name|FieldDoc
name|newHit
init|=
operator|(
name|FieldDoc
operator|)
name|newDocs
index|[
name|i
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"hit "
operator|+
name|i
operator|+
literal|" of "
operator|+
name|oldDocs
operator|.
name|length
operator|+
literal|" differs: oldDoc="
operator|+
name|oldHit
operator|.
name|doc
operator|+
literal|" vs newDoc="
operator|+
name|newHit
operator|.
name|doc
operator|+
literal|" oldFields="
operator|+
name|_TestUtil
operator|.
name|arrayToString
argument_list|(
name|oldHit
operator|.
name|fields
argument_list|)
operator|+
literal|" newFields="
operator|+
name|_TestUtil
operator|.
name|arrayToString
argument_list|(
name|newHit
operator|.
name|fields
argument_list|)
argument_list|,
name|oldHit
operator|.
name|doc
argument_list|,
name|newHit
operator|.
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oldHit
operator|.
name|score
argument_list|,
name|newHit
operator|.
name|score
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|oldHit
operator|.
name|fields
argument_list|,
name|newHit
operator|.
name|fields
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ScoreDoc
name|oldHit
init|=
name|oldDocs
index|[
name|i
index|]
decl_stmt|;
name|ScoreDoc
name|newHit
init|=
name|newDocs
index|[
name|i
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|oldHit
operator|.
name|doc
argument_list|,
name|newHit
operator|.
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oldHit
operator|.
name|score
argument_list|,
name|newHit
operator|.
name|score
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
