begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermEnum
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import
begin_comment
comment|/**  * An example Comparable for use with the custom sort tests.  * It implements a comparable for "id" sort of values which  * consist of an alphanumeric part and a numeric part, such as:  *<p/>  *<P>ABC-123, A-1, A-7, A-100, B-99999  *<p/>  *<p>Such values cannot be sorted as strings, since A-100 needs  * to come after A-7.  *<p/>  *<p>It could be argued that the "ids" should be rewritten as  * A-0001, A-0100, etc. so they will sort as strings.  That is  * a valid alternate way to solve it - but  * this is only supposed to be a simple test case.  *<p/>  *<p>Created: Apr 21, 2004 5:34:47 PM  *  * @author Tim Jones  * @version $Id$  * @since 1.4  */
end_comment
begin_class
DECL|class|SampleComparable
specifier|public
class|class
name|SampleComparable
implements|implements
name|Comparable
implements|,
name|Serializable
block|{
DECL|field|string_part
name|String
name|string_part
decl_stmt|;
DECL|field|int_part
name|Integer
name|int_part
decl_stmt|;
DECL|method|SampleComparable
specifier|public
name|SampleComparable
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|int
name|i
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
name|string_part
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|int_part
operator|=
operator|new
name|Integer
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|SampleComparable
name|otherid
init|=
operator|(
name|SampleComparable
operator|)
name|o
decl_stmt|;
name|int
name|i
init|=
name|string_part
operator|.
name|compareTo
argument_list|(
name|otherid
operator|.
name|string_part
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
return|return
name|int_part
operator|.
name|compareTo
argument_list|(
name|otherid
operator|.
name|int_part
argument_list|)
return|;
return|return
name|i
return|;
block|}
DECL|method|getComparator
specifier|public
specifier|static
name|SortComparatorSource
name|getComparator
parameter_list|()
block|{
return|return
operator|new
name|SortComparatorSource
argument_list|()
block|{
specifier|public
name|ScoreDocLookupComparator
name|newComparator
parameter_list|(
specifier|final
name|IndexReader
name|reader
parameter_list|,
name|String
name|fieldname
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|field
init|=
name|fieldname
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|final
name|TermEnum
name|enumerator
init|=
name|reader
operator|.
name|terms
argument_list|(
operator|new
name|Term
argument_list|(
name|fieldname
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
return|return
operator|new
name|ScoreDocLookupComparator
argument_list|()
block|{
specifier|protected
name|Comparable
index|[]
name|cachedValues
init|=
name|fillCache
argument_list|(
name|reader
argument_list|,
name|enumerator
argument_list|,
name|field
argument_list|)
decl_stmt|;
specifier|public
name|boolean
name|sizeMatches
parameter_list|(
name|int
name|n
parameter_list|)
block|{
return|return
operator|(
name|cachedValues
operator|.
name|length
operator|==
name|n
operator|)
return|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|ScoreDoc
name|i
parameter_list|,
name|ScoreDoc
name|j
parameter_list|)
block|{
return|return
name|cachedValues
index|[
name|i
operator|.
name|doc
index|]
operator|.
name|compareTo
argument_list|(
name|cachedValues
index|[
name|j
operator|.
name|doc
index|]
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareReverse
parameter_list|(
name|ScoreDoc
name|i
parameter_list|,
name|ScoreDoc
name|j
parameter_list|)
block|{
return|return
name|cachedValues
index|[
name|j
operator|.
name|doc
index|]
operator|.
name|compareTo
argument_list|(
name|cachedValues
index|[
name|i
operator|.
name|doc
index|]
argument_list|)
return|;
block|}
specifier|public
name|Comparable
name|sortValue
parameter_list|(
name|ScoreDoc
name|i
parameter_list|)
block|{
return|return
name|cachedValues
index|[
name|i
operator|.
name|doc
index|]
return|;
block|}
specifier|public
name|int
name|sortType
parameter_list|()
block|{
return|return
name|SortField
operator|.
name|CUSTOM
return|;
block|}
block|}
return|;
block|}
finally|finally
block|{
name|enumerator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**        * Returns an array of objects which represent that natural order        * of the term values in the given field.        *        * @param reader     Terms are in this index.        * @param enumerator Use this to get the term values and TermDocs.        * @param fieldname  Comparables should be for this field.        * @return Array of objects representing natural order of terms in field.        * @throws IOException If an error occurs reading the index.        */
specifier|protected
name|Comparable
index|[]
name|fillCache
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|TermEnum
name|enumerator
parameter_list|,
name|String
name|fieldname
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|field
init|=
name|fieldname
operator|.
name|intern
argument_list|()
decl_stmt|;
name|Comparable
index|[]
name|retArray
init|=
operator|new
name|Comparable
index|[
name|reader
operator|.
name|maxDoc
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
name|retArray
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|TermDocs
name|termDocs
init|=
name|reader
operator|.
name|termDocs
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|enumerator
operator|.
name|term
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no terms in field "
operator|+
name|field
argument_list|)
throw|;
block|}
do|do
block|{
name|Term
name|term
init|=
name|enumerator
operator|.
name|term
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|.
name|field
argument_list|()
operator|!=
name|field
condition|)
break|break;
name|Comparable
name|termval
init|=
name|getComparable
argument_list|(
name|term
operator|.
name|text
argument_list|()
argument_list|)
decl_stmt|;
name|termDocs
operator|.
name|seek
argument_list|(
name|enumerator
argument_list|)
expr_stmt|;
while|while
condition|(
name|termDocs
operator|.
name|next
argument_list|()
condition|)
block|{
name|retArray
index|[
name|termDocs
operator|.
name|doc
argument_list|()
index|]
operator|=
name|termval
expr_stmt|;
block|}
block|}
do|while
condition|(
name|enumerator
operator|.
name|next
argument_list|()
condition|)
do|;
block|}
finally|finally
block|{
name|termDocs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|retArray
return|;
block|}
name|Comparable
name|getComparable
parameter_list|(
name|String
name|termtext
parameter_list|)
block|{
return|return
operator|new
name|SampleComparable
argument_list|(
name|termtext
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
end_class
end_unit
