begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Copyright 2004-2005 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import
begin_class
DECL|class|CheckHits
specifier|public
class|class
name|CheckHits
block|{
comment|/**    * Tests that all documents up to maxDoc which are *not* in the    * expected result set, have an explanation which indicates no match    * (ie: Explanation value of 0.0f)    */
DECL|method|checkNoMatchExplanations
specifier|public
specifier|static
name|void
name|checkNoMatchExplanations
parameter_list|(
name|Query
name|q
parameter_list|,
name|String
name|defaultFieldName
parameter_list|,
name|Searcher
name|searcher
parameter_list|,
name|int
index|[]
name|results
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|d
init|=
name|q
operator|.
name|toString
argument_list|(
name|defaultFieldName
argument_list|)
decl_stmt|;
name|Set
name|ignore
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ignore
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|results
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|maxDoc
init|=
name|searcher
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
literal|0
init|;
name|doc
operator|<
name|maxDoc
condition|;
name|doc
operator|++
control|)
block|{
if|if
condition|(
name|ignore
operator|.
name|contains
argument_list|(
operator|new
name|Integer
argument_list|(
name|doc
argument_list|)
argument_list|)
condition|)
continue|continue;
name|Explanation
name|exp
init|=
name|searcher
operator|.
name|explain
argument_list|(
name|q
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|TestCase
operator|.
name|assertNotNull
argument_list|(
literal|"Explanation of [["
operator|+
name|d
operator|+
literal|"]] for #"
operator|+
name|doc
operator|+
literal|" is null"
argument_list|,
name|exp
argument_list|)
expr_stmt|;
name|TestCase
operator|.
name|assertEquals
argument_list|(
literal|"Explanation of [["
operator|+
name|d
operator|+
literal|"]] for #"
operator|+
name|doc
operator|+
literal|" doesn't indicate non-match: "
operator|+
name|exp
operator|.
name|toString
argument_list|()
argument_list|,
literal|0.0f
argument_list|,
name|exp
operator|.
name|getValue
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests that a query matches the an expected set of documents using a    * HitCollector.    *    *<p>    * Note that when using the HitCollector API, documents will be collected    * if they "match" regardless of what their score is.    *</p>    * @param query the query to test    * @param searcher the searcher to test the query against    * @param defaultFieldName used for displaing the query in assertion messages    * @param results a list of documentIds that must match the query    * @see Searcher#search(Query,HitCollector)    * @see #checkHits    */
DECL|method|checkHitCollector
specifier|public
specifier|static
name|void
name|checkHitCollector
parameter_list|(
name|Query
name|query
parameter_list|,
name|String
name|defaultFieldName
parameter_list|,
name|Searcher
name|searcher
parameter_list|,
name|int
index|[]
name|results
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
name|correct
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|correct
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|results
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Set
name|actual
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
operator|new
name|HitCollector
argument_list|()
block|{
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|,
name|float
name|score
parameter_list|)
block|{
name|actual
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|TestCase
operator|.
name|assertEquals
argument_list|(
name|query
operator|.
name|toString
argument_list|(
name|defaultFieldName
argument_list|)
argument_list|,
name|correct
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that a query matches the an expected set of documents using Hits.    *    *<p>    * Note that when using the Hits API, documents will only be returned    * if they have a positive normalized score.    *</p>    * @param query the query to test    * @param searcher the searcher to test the query against    * @param defaultFieldName used for displaing the query in assertion messages    * @param results a list of documentIds that must match the query    * @see Searcher#search(Query)    * @see #checkHitCollector    */
DECL|method|checkHits
specifier|public
specifier|static
name|void
name|checkHits
parameter_list|(
name|Query
name|query
parameter_list|,
name|String
name|defaultFieldName
parameter_list|,
name|Searcher
name|searcher
parameter_list|,
name|int
index|[]
name|results
parameter_list|)
throws|throws
name|IOException
block|{
name|Hits
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|Set
name|correct
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|correct
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|results
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
name|actual
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|actual
operator|.
name|add
argument_list|(
operator|new
name|Integer
argument_list|(
name|hits
operator|.
name|id
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TestCase
operator|.
name|assertEquals
argument_list|(
name|query
operator|.
name|toString
argument_list|(
name|defaultFieldName
argument_list|)
argument_list|,
name|correct
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
comment|/** Tests that a Hits has an expected order of documents */
DECL|method|checkDocIds
specifier|public
specifier|static
name|void
name|checkDocIds
parameter_list|(
name|String
name|mes
parameter_list|,
name|int
index|[]
name|results
parameter_list|,
name|Hits
name|hits
parameter_list|)
throws|throws
name|IOException
block|{
name|TestCase
operator|.
name|assertEquals
argument_list|(
name|mes
operator|+
literal|" nr of hits"
argument_list|,
name|results
operator|.
name|length
argument_list|,
name|hits
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|TestCase
operator|.
name|assertEquals
argument_list|(
name|mes
operator|+
literal|" doc nrs for hit "
operator|+
name|i
argument_list|,
name|results
index|[
name|i
index|]
argument_list|,
name|hits
operator|.
name|id
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Tests that two queries have an expected order of documents,    * and that the two queries have the same score values.    */
DECL|method|checkHitsQuery
specifier|public
specifier|static
name|void
name|checkHitsQuery
parameter_list|(
name|Query
name|query
parameter_list|,
name|Hits
name|hits1
parameter_list|,
name|Hits
name|hits2
parameter_list|,
name|int
index|[]
name|results
parameter_list|)
throws|throws
name|IOException
block|{
name|checkDocIds
argument_list|(
literal|"hits1"
argument_list|,
name|results
argument_list|,
name|hits1
argument_list|)
expr_stmt|;
name|checkDocIds
argument_list|(
literal|"hits2"
argument_list|,
name|results
argument_list|,
name|hits2
argument_list|)
expr_stmt|;
name|checkEqual
argument_list|(
name|query
argument_list|,
name|hits1
argument_list|,
name|hits2
argument_list|)
expr_stmt|;
block|}
DECL|method|checkEqual
specifier|public
specifier|static
name|void
name|checkEqual
parameter_list|(
name|Query
name|query
parameter_list|,
name|Hits
name|hits1
parameter_list|,
name|Hits
name|hits2
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|float
name|scoreTolerance
init|=
literal|1.0e-6f
decl_stmt|;
if|if
condition|(
name|hits1
operator|.
name|length
argument_list|()
operator|!=
name|hits2
operator|.
name|length
argument_list|()
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Unequal lengths: hits1="
operator|+
name|hits1
operator|.
name|length
argument_list|()
operator|+
literal|",hits2="
operator|+
name|hits2
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits1
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|hits1
operator|.
name|id
argument_list|(
name|i
argument_list|)
operator|!=
name|hits2
operator|.
name|id
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Hit "
operator|+
name|i
operator|+
literal|" docnumbers don't match\n"
operator|+
name|hits2str
argument_list|(
name|hits1
argument_list|,
name|hits2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|+
literal|"for query:"
operator|+
name|query
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|hits1
operator|.
name|id
argument_list|(
name|i
argument_list|)
operator|!=
name|hits2
operator|.
name|id
argument_list|(
name|i
argument_list|)
operator|)
operator|||
name|Math
operator|.
name|abs
argument_list|(
name|hits1
operator|.
name|score
argument_list|(
name|i
argument_list|)
operator|-
name|hits2
operator|.
name|score
argument_list|(
name|i
argument_list|)
argument_list|)
operator|>
name|scoreTolerance
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Hit "
operator|+
name|i
operator|+
literal|", doc nrs "
operator|+
name|hits1
operator|.
name|id
argument_list|(
name|i
argument_list|)
operator|+
literal|" and "
operator|+
name|hits2
operator|.
name|id
argument_list|(
name|i
argument_list|)
operator|+
literal|"\nunequal       : "
operator|+
name|hits1
operator|.
name|score
argument_list|(
name|i
argument_list|)
operator|+
literal|"\n           and: "
operator|+
name|hits2
operator|.
name|score
argument_list|(
name|i
argument_list|)
operator|+
literal|"\nfor query:"
operator|+
name|query
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|hits2str
specifier|public
specifier|static
name|String
name|hits2str
parameter_list|(
name|Hits
name|hits1
parameter_list|,
name|Hits
name|hits2
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|len1
init|=
name|hits1
operator|==
literal|null
condition|?
literal|0
else|:
name|hits1
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|len2
init|=
name|hits2
operator|==
literal|null
condition|?
literal|0
else|:
name|hits2
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|end
operator|<=
literal|0
condition|)
block|{
name|end
operator|=
name|Math
operator|.
name|max
argument_list|(
name|len1
argument_list|,
name|len2
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"Hits length1="
operator|+
name|len1
operator|+
literal|"\tlength2="
operator|+
name|len2
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"hit="
operator|+
name|i
operator|+
literal|":"
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|len1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" doc"
operator|+
name|hits1
operator|.
name|id
argument_list|(
name|i
argument_list|)
operator|+
literal|"="
operator|+
name|hits1
operator|.
name|score
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"               "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|",\t"
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|len2
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" doc"
operator|+
name|hits2
operator|.
name|id
argument_list|(
name|i
argument_list|)
operator|+
literal|"="
operator|+
name|hits2
operator|.
name|score
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|topdocsString
specifier|public
specifier|static
name|String
name|topdocsString
parameter_list|(
name|TopDocs
name|docs
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"TopDocs totalHits="
operator|+
name|docs
operator|.
name|totalHits
operator|+
literal|" top="
operator|+
name|docs
operator|.
name|scoreDocs
operator|.
name|length
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|end
operator|<=
literal|0
condition|)
name|end
operator|=
name|docs
operator|.
name|scoreDocs
operator|.
name|length
expr_stmt|;
else|else
name|end
operator|=
name|Math
operator|.
name|min
argument_list|(
name|end
argument_list|,
name|docs
operator|.
name|scoreDocs
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|") doc="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|docs
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\tscore="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|docs
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|score
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Asserts that the score explanation for every document matching a    * query corrisponds with the true score.    *    * @see ExplanationAsserter    * @param query the query to test    * @param searcher the searcher to test the query against    * @param defaultFieldName used for displaing the query in assertion messages    */
DECL|method|checkExplanations
specifier|public
specifier|static
name|void
name|checkExplanations
parameter_list|(
name|Query
name|query
parameter_list|,
name|String
name|defaultFieldName
parameter_list|,
name|Searcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
operator|new
name|ExplanationAsserter
argument_list|(
name|query
argument_list|,
name|defaultFieldName
argument_list|,
name|searcher
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * an IndexSearcher that implicitly checks hte explanation of every match    * whenever it executes a search    */
DECL|class|ExplanationAssertingSearcher
specifier|public
specifier|static
class|class
name|ExplanationAssertingSearcher
extends|extends
name|IndexSearcher
block|{
DECL|method|ExplanationAssertingSearcher
specifier|public
name|ExplanationAssertingSearcher
parameter_list|(
name|Directory
name|d
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
DECL|method|ExplanationAssertingSearcher
specifier|public
name|ExplanationAssertingSearcher
parameter_list|(
name|IndexReader
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
DECL|method|checkExplanations
specifier|protected
name|void
name|checkExplanations
parameter_list|(
name|Query
name|q
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|null
argument_list|,
operator|new
name|ExplanationAsserter
argument_list|(
name|q
argument_list|,
literal|null
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|search
specifier|public
name|Hits
name|search
parameter_list|(
name|Query
name|query
parameter_list|,
name|Filter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|checkExplanations
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|filter
argument_list|)
return|;
block|}
DECL|method|search
specifier|public
name|Hits
name|search
parameter_list|(
name|Query
name|query
parameter_list|,
name|Sort
name|sort
parameter_list|)
throws|throws
name|IOException
block|{
name|checkExplanations
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|sort
argument_list|)
return|;
block|}
DECL|method|search
specifier|public
name|Hits
name|search
parameter_list|(
name|Query
name|query
parameter_list|,
name|Filter
name|filter
parameter_list|,
name|Sort
name|sort
parameter_list|)
throws|throws
name|IOException
block|{
name|checkExplanations
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|filter
argument_list|,
name|sort
argument_list|)
return|;
block|}
DECL|method|search
specifier|public
name|TopFieldDocs
name|search
parameter_list|(
name|Query
name|query
parameter_list|,
name|Filter
name|filter
parameter_list|,
name|int
name|n
parameter_list|,
name|Sort
name|sort
parameter_list|)
throws|throws
name|IOException
block|{
name|checkExplanations
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|filter
argument_list|,
name|n
argument_list|,
name|sort
argument_list|)
return|;
block|}
DECL|method|search
specifier|public
name|void
name|search
parameter_list|(
name|Query
name|query
parameter_list|,
name|HitCollector
name|results
parameter_list|)
throws|throws
name|IOException
block|{
name|checkExplanations
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|super
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
DECL|method|search
specifier|public
name|void
name|search
parameter_list|(
name|Query
name|query
parameter_list|,
name|Filter
name|filter
parameter_list|,
name|HitCollector
name|results
parameter_list|)
throws|throws
name|IOException
block|{
name|checkExplanations
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|super
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|filter
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
DECL|method|search
specifier|public
name|TopDocs
name|search
parameter_list|(
name|Query
name|query
parameter_list|,
name|Filter
name|filter
parameter_list|,
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|checkExplanations
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|filter
argument_list|,
name|n
argument_list|)
return|;
block|}
block|}
comment|/**    * Asserts that the score explanation for every document matching a    * query corrisponds with the true score.    *    * NOTE: this HitCollector should only be used with the Query and Searcher    * specified at when it is constructed.    */
DECL|class|ExplanationAsserter
specifier|public
specifier|static
class|class
name|ExplanationAsserter
extends|extends
name|HitCollector
block|{
comment|/**      * Some explains methods calculate their vlaues though a slightly      * differnet  order of operations from the acctaul scoring method ...      * this allows for a small amount of variation      */
DECL|field|SCORE_TOLERANCE_DELTA
specifier|public
specifier|static
name|float
name|SCORE_TOLERANCE_DELTA
init|=
literal|0.00005f
decl_stmt|;
DECL|field|q
name|Query
name|q
decl_stmt|;
DECL|field|s
name|Searcher
name|s
decl_stmt|;
DECL|field|d
name|String
name|d
decl_stmt|;
DECL|method|ExplanationAsserter
specifier|public
name|ExplanationAsserter
parameter_list|(
name|Query
name|q
parameter_list|,
name|String
name|defaultFieldName
parameter_list|,
name|Searcher
name|s
parameter_list|)
block|{
name|this
operator|.
name|q
operator|=
name|q
expr_stmt|;
name|this
operator|.
name|s
operator|=
name|s
expr_stmt|;
name|this
operator|.
name|d
operator|=
name|q
operator|.
name|toString
argument_list|(
name|defaultFieldName
argument_list|)
expr_stmt|;
block|}
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|,
name|float
name|score
parameter_list|)
block|{
name|Explanation
name|exp
init|=
literal|null
decl_stmt|;
try|try
block|{
name|exp
operator|=
name|s
operator|.
name|explain
argument_list|(
name|q
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"exception in hitcollector of [["
operator|+
name|d
operator|+
literal|"]] for #"
operator|+
name|doc
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|TestCase
operator|.
name|assertNotNull
argument_list|(
literal|"Explanation of [["
operator|+
name|d
operator|+
literal|"]] for #"
operator|+
name|doc
operator|+
literal|" is null"
argument_list|,
name|exp
argument_list|)
expr_stmt|;
name|TestCase
operator|.
name|assertEquals
argument_list|(
literal|"Score of [["
operator|+
name|d
operator|+
literal|"]] for #"
operator|+
name|doc
operator|+
literal|" does not match explanation: "
operator|+
name|exp
operator|.
name|toString
argument_list|()
argument_list|,
name|score
argument_list|,
name|exp
operator|.
name|getValue
argument_list|()
argument_list|,
name|SCORE_TOLERANCE_DELTA
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
