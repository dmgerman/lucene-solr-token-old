begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Copyright 2005 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_comment
comment|/**  * Tests {@link MultiSearcher} ranking, i.e. makes sure this bug is fixed:  * http://issues.apache.org/bugzilla/show_bug.cgi?id=31841  *  * @version $Id: TestMultiSearcher.java 150492 2004-09-06 22:01:49Z dnaber $  */
end_comment
begin_class
DECL|class|TestMultiSearcherRanking
specifier|public
class|class
name|TestMultiSearcherRanking
extends|extends
name|TestCase
block|{
DECL|field|query
specifier|private
specifier|final
name|Query
name|query
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"three"
argument_list|)
argument_list|)
decl_stmt|;
DECL|method|testMultiSearcherRanking
specifier|public
name|void
name|testMultiSearcherRanking
parameter_list|()
throws|throws
name|IOException
block|{
name|Hits
name|multiSearcherHits
init|=
name|multi
argument_list|()
decl_stmt|;
name|Hits
name|singleSearcherHits
init|=
name|single
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|multiSearcherHits
operator|.
name|length
argument_list|()
argument_list|,
name|singleSearcherHits
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|multiSearcherHits
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|multiSearcherHits
operator|.
name|score
argument_list|(
name|i
argument_list|)
argument_list|,
name|singleSearcherHits
operator|.
name|score
argument_list|(
name|i
argument_list|)
argument_list|,
literal|0.001f
argument_list|)
expr_stmt|;
name|Document
name|docMulti
init|=
name|multiSearcherHits
operator|.
name|doc
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Document
name|docSingle
init|=
name|singleSearcherHits
operator|.
name|doc
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|docMulti
operator|.
name|get
argument_list|(
literal|"body"
argument_list|)
argument_list|,
name|docSingle
operator|.
name|get
argument_list|(
literal|"body"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Collection 1+2 searched with MultiSearcher:
DECL|method|multi
specifier|private
name|Hits
name|multi
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|d1
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|iw
init|=
operator|new
name|IndexWriter
argument_list|(
name|d1
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|addCollection1
argument_list|(
name|iw
argument_list|)
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|Directory
name|d2
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|iw
operator|=
operator|new
name|IndexWriter
argument_list|(
name|d2
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addCollection2
argument_list|(
name|iw
argument_list|)
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|Searchable
index|[]
name|s
init|=
operator|new
name|Searchable
index|[
literal|2
index|]
decl_stmt|;
name|s
index|[
literal|0
index|]
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|d1
argument_list|)
expr_stmt|;
name|s
index|[
literal|1
index|]
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|d2
argument_list|)
expr_stmt|;
name|MultiSearcher
name|ms
init|=
operator|new
name|MultiSearcher
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|Hits
name|hits
init|=
name|ms
operator|.
name|search
argument_list|(
name|query
argument_list|)
decl_stmt|;
return|return
name|hits
return|;
block|}
comment|// Collection 1+2 indexed together:
DECL|method|single
specifier|private
name|Hits
name|single
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|d
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|iw
init|=
operator|new
name|IndexWriter
argument_list|(
name|d
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|addCollection1
argument_list|(
name|iw
argument_list|)
expr_stmt|;
name|addCollection2
argument_list|(
name|iw
argument_list|)
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|is
init|=
operator|new
name|IndexSearcher
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|Hits
name|hits
init|=
name|is
operator|.
name|search
argument_list|(
name|query
argument_list|)
decl_stmt|;
return|return
name|hits
return|;
block|}
DECL|method|addCollection1
specifier|private
name|void
name|addCollection1
parameter_list|(
name|IndexWriter
name|iw
parameter_list|)
throws|throws
name|IOException
block|{
name|add
argument_list|(
literal|"one blah three"
argument_list|,
name|iw
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"one foo three"
argument_list|,
name|iw
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"one foobar three"
argument_list|,
name|iw
argument_list|)
expr_stmt|;
block|}
DECL|method|addCollection2
specifier|private
name|void
name|addCollection2
parameter_list|(
name|IndexWriter
name|iw
parameter_list|)
throws|throws
name|IOException
block|{
name|add
argument_list|(
literal|"two blah three"
argument_list|,
name|iw
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"two foo xxx"
argument_list|,
name|iw
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"two foobar xxx"
argument_list|,
name|iw
argument_list|)
expr_stmt|;
block|}
DECL|method|add
specifier|private
name|void
name|add
parameter_list|(
name|String
name|value
parameter_list|,
name|IndexWriter
name|iw
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
name|value
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
