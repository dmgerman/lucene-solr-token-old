begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|textui
operator|.
name|TestRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|SimpleAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|rmi
operator|.
name|Naming
import|;
end_import
begin_import
import|import
name|java
operator|.
name|rmi
operator|.
name|registry
operator|.
name|LocateRegistry
import|;
end_import
begin_import
import|import
name|java
operator|.
name|rmi
operator|.
name|registry
operator|.
name|Registry
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_comment
comment|/**  * Unit tests for sorting code.  *  *<p>Created: Feb 17, 2004 4:55:10 PM  *  * @author  Tim Jones (Nacimiento Software)  * @since   lucene 1.4  * @version $Id$  */
end_comment
begin_class
DECL|class|TestSort
specifier|public
class|class
name|TestSort
extends|extends
name|TestCase
implements|implements
name|Serializable
block|{
DECL|field|full
specifier|private
name|Searcher
name|full
decl_stmt|;
DECL|field|searchX
specifier|private
name|Searcher
name|searchX
decl_stmt|;
DECL|field|searchY
specifier|private
name|Searcher
name|searchY
decl_stmt|;
DECL|field|queryX
specifier|private
name|Query
name|queryX
decl_stmt|;
DECL|field|queryY
specifier|private
name|Query
name|queryY
decl_stmt|;
DECL|field|queryA
specifier|private
name|Query
name|queryA
decl_stmt|;
DECL|field|queryE
specifier|private
name|Query
name|queryE
decl_stmt|;
DECL|field|queryF
specifier|private
name|Query
name|queryF
decl_stmt|;
DECL|field|queryG
specifier|private
name|Query
name|queryG
decl_stmt|;
DECL|field|sort
specifier|private
name|Sort
name|sort
decl_stmt|;
DECL|method|TestSort
specifier|public
name|TestSort
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
block|{
if|if
condition|(
name|argv
operator|==
literal|null
operator|||
name|argv
operator|.
name|length
operator|<
literal|1
condition|)
name|TestRunner
operator|.
name|run
argument_list|(
name|suite
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
literal|"server"
operator|.
name|equals
argument_list|(
name|argv
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|TestSort
name|test
init|=
operator|new
name|TestSort
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|test
operator|.
name|startServer
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|suite
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
operator|new
name|TestSuite
argument_list|(
name|TestSort
operator|.
name|class
argument_list|)
return|;
block|}
comment|// document data:
comment|// the tracer field is used to determine which document was hit
comment|// the contents field is used to search and sort by relevance
comment|// the int field to sort by int
comment|// the float field to sort by float
comment|// the string field to sort by string
comment|// the i18n field includes accented characters for testing locale-specific sorting
DECL|field|data
specifier|private
name|String
index|[]
index|[]
name|data
init|=
operator|new
name|String
index|[]
index|[]
block|{
comment|// tracer  contents         int            float           string   custom   i18n               long            double
block|{
literal|"A"
block|,
literal|"x a"
block|,
literal|"5"
block|,
literal|"4f"
block|,
literal|"c"
block|,
literal|"A-3"
block|,
literal|"p\u00EAche"
block|,
literal|"10"
block|,
literal|"-4.0"
block|}
block|,
comment|//A
block|{
literal|"B"
block|,
literal|"y a"
block|,
literal|"5"
block|,
literal|"3.4028235E38"
block|,
literal|"i"
block|,
literal|"B-10"
block|,
literal|"HAT"
block|,
literal|"1000000000"
block|,
literal|"40.0"
block|}
block|,
comment|//B
block|{
literal|"C"
block|,
literal|"x a b c"
block|,
literal|"2147483647"
block|,
literal|"1.0"
block|,
literal|"j"
block|,
literal|"A-2"
block|,
literal|"p\u00E9ch\u00E9"
block|,
literal|"99999999"
block|,
literal|"40.00002343"
block|}
block|,
comment|//C
block|{
literal|"D"
block|,
literal|"y a b c"
block|,
literal|"-1"
block|,
literal|"0.0f"
block|,
literal|"a"
block|,
literal|"C-0"
block|,
literal|"HUT"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Double
operator|.
name|MIN_VALUE
argument_list|)
block|}
block|,
comment|//D
block|{
literal|"E"
block|,
literal|"x a b c d"
block|,
literal|"5"
block|,
literal|"2f"
block|,
literal|"h"
block|,
literal|"B-8"
block|,
literal|"peach"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
block|}
block|,
comment|//E
block|{
literal|"F"
block|,
literal|"y a b c d"
block|,
literal|"2"
block|,
literal|"3.14159f"
block|,
literal|"g"
block|,
literal|"B-1"
block|,
literal|"H\u00C5T"
block|,
literal|"-44"
block|,
literal|"343.034435444"
block|}
block|,
comment|//F
block|{
literal|"G"
block|,
literal|"x a b c d"
block|,
literal|"3"
block|,
literal|"-1.0"
block|,
literal|"f"
block|,
literal|"C-100"
block|,
literal|"sin"
block|,
literal|"323254543543"
block|,
literal|"4.043544"
block|}
block|,
comment|//G
block|{
literal|"H"
block|,
literal|"y a b c d"
block|,
literal|"0"
block|,
literal|"1.4E-45"
block|,
literal|"e"
block|,
literal|"C-88"
block|,
literal|"H\u00D8T"
block|,
literal|"1023423423005"
block|,
literal|"4.043545"
block|}
block|,
comment|//H
block|{
literal|"I"
block|,
literal|"x a b c d e f"
block|,
literal|"-2147483648"
block|,
literal|"1.0e+0"
block|,
literal|"d"
block|,
literal|"A-10"
block|,
literal|"s\u00EDn"
block|,
literal|"332422459999"
block|,
literal|"4.043546"
block|}
block|,
comment|//I
block|{
literal|"J"
block|,
literal|"y a b c d e f"
block|,
literal|"4"
block|,
literal|".5"
block|,
literal|"b"
block|,
literal|"C-7"
block|,
literal|"HOT"
block|,
literal|"34334543543"
block|,
literal|"4.0000220343"
block|}
block|,
comment|//J
block|{
literal|"W"
block|,
literal|"g"
block|,
literal|"1"
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|}
block|,
block|{
literal|"X"
block|,
literal|"g"
block|,
literal|"1"
block|,
literal|"0.1"
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|}
block|,
block|{
literal|"Y"
block|,
literal|"g"
block|,
literal|"1"
block|,
literal|"0.2"
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|}
block|,
block|{
literal|"Z"
block|,
literal|"f g"
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|}
block|}
decl_stmt|;
comment|// create an index of all the documents, or just the x, or just the y documents
DECL|method|getIndex
specifier|private
name|Searcher
name|getIndex
parameter_list|(
name|boolean
name|even
parameter_list|,
name|boolean
name|odd
parameter_list|)
throws|throws
name|IOException
block|{
name|RAMDirectory
name|indexStore
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|indexStore
argument_list|,
operator|new
name|SimpleAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|i
operator|%
literal|2
operator|)
operator|==
literal|0
operator|&&
name|even
operator|)
operator|||
operator|(
operator|(
name|i
operator|%
literal|2
operator|)
operator|==
literal|1
operator|&&
name|odd
operator|)
condition|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tracer"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|0
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"contents"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
index|[
name|i
index|]
index|[
literal|2
index|]
operator|!=
literal|null
condition|)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"int"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|2
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|UN_TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
index|[
name|i
index|]
index|[
literal|3
index|]
operator|!=
literal|null
condition|)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"float"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|3
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|UN_TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
index|[
name|i
index|]
index|[
literal|4
index|]
operator|!=
literal|null
condition|)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"string"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|4
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|UN_TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
index|[
name|i
index|]
index|[
literal|5
index|]
operator|!=
literal|null
condition|)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"custom"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|5
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|UN_TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
index|[
name|i
index|]
index|[
literal|6
index|]
operator|!=
literal|null
condition|)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"i18n"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|6
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|UN_TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
index|[
name|i
index|]
index|[
literal|7
index|]
operator|!=
literal|null
condition|)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"long"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|7
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|UN_TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
index|[
name|i
index|]
index|[
literal|8
index|]
operator|!=
literal|null
condition|)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"double"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|8
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|UN_TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setBoost
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// produce some scores above 1.0
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
operator|new
name|IndexSearcher
argument_list|(
name|indexStore
argument_list|)
return|;
block|}
DECL|method|getFullIndex
specifier|private
name|Searcher
name|getFullIndex
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getIndex
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|getXIndex
specifier|private
name|Searcher
name|getXIndex
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getIndex
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|getYIndex
specifier|private
name|Searcher
name|getYIndex
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getIndex
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|getEmptyIndex
specifier|private
name|Searcher
name|getEmptyIndex
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getIndex
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|full
operator|=
name|getFullIndex
argument_list|()
expr_stmt|;
name|searchX
operator|=
name|getXIndex
argument_list|()
expr_stmt|;
name|searchY
operator|=
name|getYIndex
argument_list|()
expr_stmt|;
name|queryX
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"contents"
argument_list|,
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|queryY
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"contents"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|queryA
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"contents"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|queryE
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"contents"
argument_list|,
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
name|queryF
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"contents"
argument_list|,
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
name|queryG
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"contents"
argument_list|,
literal|"g"
argument_list|)
argument_list|)
expr_stmt|;
name|sort
operator|=
operator|new
name|Sort
argument_list|()
expr_stmt|;
block|}
comment|// test the sorts by score and document number
DECL|method|testBuiltInSorts
specifier|public
name|void
name|testBuiltInSorts
parameter_list|()
throws|throws
name|Exception
block|{
name|sort
operator|=
operator|new
name|Sort
argument_list|()
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"ACEGI"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"BDFHJ"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"ACEGI"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"BDFHJ"
argument_list|)
expr_stmt|;
block|}
comment|// test sorts where the type of field is specified
DECL|method|testTypedSort
specifier|public
name|void
name|testTypedSort
parameter_list|()
throws|throws
name|Exception
block|{
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
index|[]
block|{
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|)
block|,
name|SortField
operator|.
name|FIELD_DOC
block|}
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"IGAEC"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"DHFJB"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
index|[]
block|{
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|)
block|,
name|SortField
operator|.
name|FIELD_DOC
block|}
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"GCIEA"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"DHJFB"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
index|[]
block|{
operator|new
name|SortField
argument_list|(
literal|"long"
argument_list|,
name|SortField
operator|.
name|LONG
argument_list|)
block|,
name|SortField
operator|.
name|FIELD_DOC
block|}
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"EACGI"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"FBJHD"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
index|[]
block|{
operator|new
name|SortField
argument_list|(
literal|"double"
argument_list|,
name|SortField
operator|.
name|DOUBLE
argument_list|)
block|,
name|SortField
operator|.
name|FIELD_DOC
block|}
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"AGICE"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"DJHBF"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
index|[]
block|{
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|)
block|,
name|SortField
operator|.
name|FIELD_DOC
block|}
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"AIGEC"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"DJHFB"
argument_list|)
expr_stmt|;
block|}
comment|// test sorts when there's nothing in the index
DECL|method|testEmptyIndex
specifier|public
name|void
name|testEmptyIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|Searcher
name|empty
init|=
name|getEmptyIndex
argument_list|()
decl_stmt|;
name|sort
operator|=
operator|new
name|Sort
argument_list|()
expr_stmt|;
name|assertMatches
argument_list|(
name|empty
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|empty
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
index|[]
block|{
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|)
block|,
name|SortField
operator|.
name|FIELD_DOC
block|}
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|empty
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
index|[]
block|{
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|,
literal|true
argument_list|)
block|,
name|SortField
operator|.
name|FIELD_DOC
block|}
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|empty
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
index|[]
block|{
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|)
block|,
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|empty
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
comment|// test sorts where the type of field is determined dynamically
DECL|method|testAutoSort
specifier|public
name|void
name|testAutoSort
parameter_list|()
throws|throws
name|Exception
block|{
name|sort
operator|.
name|setSort
argument_list|(
literal|"int"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"IGAEC"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"DHFJB"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
literal|"float"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"GCIEA"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"DHJFB"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"AIGEC"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"DJHFB"
argument_list|)
expr_stmt|;
block|}
comment|// test sorts in reverse
DECL|method|testReverseSort
specifier|public
name|void
name|testReverseSort
parameter_list|()
throws|throws
name|Exception
block|{
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
index|[]
block|{
operator|new
name|SortField
argument_list|(
literal|null
argument_list|,
name|SortField
operator|.
name|SCORE
argument_list|,
literal|true
argument_list|)
block|,
name|SortField
operator|.
name|FIELD_DOC
block|}
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"IEGCA"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"JFHDB"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|null
argument_list|,
name|SortField
operator|.
name|DOC
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"IGECA"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"JHFDB"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
literal|"int"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"CAEGI"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"BJFHD"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
literal|"float"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"AECIG"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"BFJHD"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
literal|"string"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"CEGIA"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"BFHJD"
argument_list|)
expr_stmt|;
block|}
comment|// test sorting when the sort field is empty (undefined) for some of the documents
DECL|method|testEmptyFieldSort
specifier|public
name|void
name|testEmptyFieldSort
parameter_list|()
throws|throws
name|Exception
block|{
name|sort
operator|.
name|setSort
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"ZJI"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
literal|"string"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"IJZ"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"i18n"
argument_list|,
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"ZJI"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"i18n"
argument_list|,
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"IJZ"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
literal|"int"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"IZJ"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
literal|"int"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"JZI"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
literal|"float"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"ZJI"
argument_list|)
expr_stmt|;
comment|// using a nonexisting field as first sort key shouldn't make a difference:
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
index|[]
block|{
operator|new
name|SortField
argument_list|(
literal|"nosuchfield"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|)
block|,
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"ZJI"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
literal|"float"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"IJZ"
argument_list|)
expr_stmt|;
comment|// When a field is null for both documents, the next SortField should be used.
comment|// Works for
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
index|[]
block|{
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|)
block|,
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|)
block|,
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryG
argument_list|,
name|sort
argument_list|,
literal|"ZWXY"
argument_list|)
expr_stmt|;
comment|// Reverse the last criterium to make sure the test didn't pass by chance
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
index|[]
block|{
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|)
block|,
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|)
block|,
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
literal|true
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryG
argument_list|,
name|sort
argument_list|,
literal|"ZYXW"
argument_list|)
expr_stmt|;
comment|// Do the same for a MultiSearcher
name|Searcher
name|multiSearcher
init|=
operator|new
name|MultiSearcher
argument_list|(
operator|new
name|Searchable
index|[]
block|{
name|full
block|}
argument_list|)
decl_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
index|[]
block|{
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|)
block|,
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|)
block|,
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multiSearcher
argument_list|,
name|queryG
argument_list|,
name|sort
argument_list|,
literal|"ZWXY"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
index|[]
block|{
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|)
block|,
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|)
block|,
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
literal|true
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multiSearcher
argument_list|,
name|queryG
argument_list|,
name|sort
argument_list|,
literal|"ZYXW"
argument_list|)
expr_stmt|;
comment|// Don't close the multiSearcher. it would close the full searcher too!
comment|// Do the same for a ParallelMultiSearcher
name|Searcher
name|parallelSearcher
init|=
operator|new
name|ParallelMultiSearcher
argument_list|(
operator|new
name|Searchable
index|[]
block|{
name|full
block|}
argument_list|)
decl_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
index|[]
block|{
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|)
block|,
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|)
block|,
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|parallelSearcher
argument_list|,
name|queryG
argument_list|,
name|sort
argument_list|,
literal|"ZWXY"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
index|[]
block|{
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|)
block|,
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|)
block|,
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
literal|true
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|parallelSearcher
argument_list|,
name|queryG
argument_list|,
name|sort
argument_list|,
literal|"ZYXW"
argument_list|)
expr_stmt|;
comment|// Don't close the parallelSearcher. it would close the full searcher too!
block|}
comment|// test sorts using a series of fields
DECL|method|testSortCombos
specifier|public
name|void
name|testSortCombos
parameter_list|()
throws|throws
name|Exception
block|{
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"int"
block|,
literal|"float"
block|}
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"IGEAC"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
index|[]
block|{
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
literal|true
argument_list|)
block|,
operator|new
name|SortField
argument_list|(
literal|null
argument_list|,
name|SortField
operator|.
name|DOC
argument_list|,
literal|true
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"CEAGI"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"float"
block|,
literal|"string"
block|}
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"GICEA"
argument_list|)
expr_stmt|;
block|}
comment|// test using a Locale for sorting strings
DECL|method|testLocaleSort
specifier|public
name|void
name|testLocaleSort
parameter_list|()
throws|throws
name|Exception
block|{
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
index|[]
block|{
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"AIGEC"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"DJHFB"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
index|[]
block|{
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|Locale
operator|.
name|US
argument_list|,
literal|true
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"CEGIA"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"BFHJD"
argument_list|)
expr_stmt|;
block|}
comment|// test using various international locales with accented characters
comment|// (which sort differently depending on locale)
DECL|method|testInternationalSort
specifier|public
name|void
name|testInternationalSort
parameter_list|()
throws|throws
name|Exception
block|{
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"i18n"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"BFJDH"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"i18n"
argument_list|,
operator|new
name|Locale
argument_list|(
literal|"sv"
argument_list|,
literal|"se"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"BJDFH"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"i18n"
argument_list|,
operator|new
name|Locale
argument_list|(
literal|"da"
argument_list|,
literal|"dk"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"BJDHF"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"i18n"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"ECAGI"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"i18n"
argument_list|,
name|Locale
operator|.
name|FRANCE
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"EACGI"
argument_list|)
expr_stmt|;
block|}
comment|// Test the MultiSearcher's ability to preserve locale-sensitive ordering
comment|// by wrapping it around a single searcher
DECL|method|testInternationalMultiSearcherSort
specifier|public
name|void
name|testInternationalMultiSearcherSort
parameter_list|()
throws|throws
name|Exception
block|{
name|Searcher
name|multiSearcher
init|=
operator|new
name|MultiSearcher
argument_list|(
operator|new
name|Searchable
index|[]
block|{
name|full
block|}
argument_list|)
decl_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"i18n"
argument_list|,
operator|new
name|Locale
argument_list|(
literal|"sv"
argument_list|,
literal|"se"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multiSearcher
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"BJDFH"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"i18n"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multiSearcher
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"BFJDH"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"i18n"
argument_list|,
operator|new
name|Locale
argument_list|(
literal|"da"
argument_list|,
literal|"dk"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multiSearcher
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"BJDHF"
argument_list|)
expr_stmt|;
block|}
comment|// test a custom sort function
DECL|method|testCustomSorts
specifier|public
name|void
name|testCustomSorts
parameter_list|()
throws|throws
name|Exception
block|{
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"custom"
argument_list|,
name|SampleComparable
operator|.
name|getComparatorSource
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"CAIEG"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"custom"
argument_list|,
name|SampleComparable
operator|.
name|getComparatorSource
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"HJDBF"
argument_list|)
expr_stmt|;
name|SortComparator
name|custom
init|=
name|SampleComparable
operator|.
name|getComparator
argument_list|()
decl_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"custom"
argument_list|,
name|custom
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"CAIEG"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"custom"
argument_list|,
name|custom
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"HJDBF"
argument_list|)
expr_stmt|;
block|}
comment|// test a variety of sorts using more than one searcher
DECL|method|testMultiSort
specifier|public
name|void
name|testMultiSort
parameter_list|()
throws|throws
name|Exception
block|{
name|MultiSearcher
name|searcher
init|=
operator|new
name|MultiSearcher
argument_list|(
operator|new
name|Searchable
index|[]
block|{
name|searchX
block|,
name|searchY
block|}
argument_list|)
decl_stmt|;
name|runMultiSorts
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
block|}
comment|// test a variety of sorts using a parallel multisearcher
DECL|method|testParallelMultiSort
specifier|public
name|void
name|testParallelMultiSort
parameter_list|()
throws|throws
name|Exception
block|{
name|Searcher
name|searcher
init|=
operator|new
name|ParallelMultiSearcher
argument_list|(
operator|new
name|Searchable
index|[]
block|{
name|searchX
block|,
name|searchY
block|}
argument_list|)
decl_stmt|;
name|runMultiSorts
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
block|}
comment|// test a variety of sorts using a remote searcher
DECL|method|testRemoteSort
specifier|public
name|void
name|testRemoteSort
parameter_list|()
throws|throws
name|Exception
block|{
name|Searchable
name|searcher
init|=
name|getRemote
argument_list|()
decl_stmt|;
name|MultiSearcher
name|multi
init|=
operator|new
name|MultiSearcher
argument_list|(
operator|new
name|Searchable
index|[]
block|{
name|searcher
block|}
argument_list|)
decl_stmt|;
name|runMultiSorts
argument_list|(
name|multi
argument_list|)
expr_stmt|;
block|}
comment|// test custom search when remote
DECL|method|testRemoteCustomSort
specifier|public
name|void
name|testRemoteCustomSort
parameter_list|()
throws|throws
name|Exception
block|{
name|Searchable
name|searcher
init|=
name|getRemote
argument_list|()
decl_stmt|;
name|MultiSearcher
name|multi
init|=
operator|new
name|MultiSearcher
argument_list|(
operator|new
name|Searchable
index|[]
block|{
name|searcher
block|}
argument_list|)
decl_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"custom"
argument_list|,
name|SampleComparable
operator|.
name|getComparatorSource
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"CAIEG"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"custom"
argument_list|,
name|SampleComparable
operator|.
name|getComparatorSource
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"HJDBF"
argument_list|)
expr_stmt|;
name|SortComparator
name|custom
init|=
name|SampleComparable
operator|.
name|getComparator
argument_list|()
decl_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"custom"
argument_list|,
name|custom
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"CAIEG"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"custom"
argument_list|,
name|custom
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"HJDBF"
argument_list|)
expr_stmt|;
block|}
comment|// test that the relevancy scores are the same even if
comment|// hits are sorted
DECL|method|testNormalizedScores
specifier|public
name|void
name|testNormalizedScores
parameter_list|()
throws|throws
name|Exception
block|{
comment|// capture relevancy scores
name|HashMap
name|scoresX
init|=
name|getScores
argument_list|(
name|full
operator|.
name|search
argument_list|(
name|queryX
argument_list|)
argument_list|)
decl_stmt|;
name|HashMap
name|scoresY
init|=
name|getScores
argument_list|(
name|full
operator|.
name|search
argument_list|(
name|queryY
argument_list|)
argument_list|)
decl_stmt|;
name|HashMap
name|scoresA
init|=
name|getScores
argument_list|(
name|full
operator|.
name|search
argument_list|(
name|queryA
argument_list|)
argument_list|)
decl_stmt|;
comment|// we'll test searching locally, remote and multi
name|MultiSearcher
name|remote
init|=
operator|new
name|MultiSearcher
argument_list|(
operator|new
name|Searchable
index|[]
block|{
name|getRemote
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|MultiSearcher
name|multi
init|=
operator|new
name|MultiSearcher
argument_list|(
operator|new
name|Searchable
index|[]
block|{
name|searchX
block|,
name|searchY
block|}
argument_list|)
decl_stmt|;
comment|// change sorting and make sure relevancy stays the same
name|sort
operator|=
operator|new
name|Sort
argument_list|()
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|full
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|multi
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|full
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|multi
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|full
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|multi
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|full
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|multi
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|full
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|multi
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|full
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|multi
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
literal|"int"
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|full
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|multi
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|full
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|multi
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|full
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|multi
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
literal|"float"
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|full
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|multi
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|full
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|multi
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|full
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|multi
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|full
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|multi
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|full
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|multi
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|full
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|multi
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"int"
block|,
literal|"float"
block|}
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|full
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|multi
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|full
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|multi
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|full
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|multi
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
index|[]
block|{
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
literal|true
argument_list|)
block|,
operator|new
name|SortField
argument_list|(
literal|null
argument_list|,
name|SortField
operator|.
name|DOC
argument_list|,
literal|true
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|full
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|multi
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|full
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|multi
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|full
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|multi
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"float"
block|,
literal|"string"
block|}
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|full
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresX
argument_list|,
name|getScores
argument_list|(
name|multi
operator|.
name|search
argument_list|(
name|queryX
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|full
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresY
argument_list|,
name|getScores
argument_list|(
name|multi
operator|.
name|search
argument_list|(
name|queryY
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|full
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|remote
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertSameValues
argument_list|(
name|scoresA
argument_list|,
name|getScores
argument_list|(
name|multi
operator|.
name|search
argument_list|(
name|queryA
argument_list|,
name|sort
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTopDocsScores
specifier|public
name|void
name|testTopDocsScores
parameter_list|()
throws|throws
name|Exception
block|{
comment|// There was previously a bug in FieldSortedHitQueue.maxscore when only a single
comment|// doc was added.  That is what the following tests for.
name|Sort
name|sort
init|=
operator|new
name|Sort
argument_list|()
decl_stmt|;
name|int
name|nDocs
init|=
literal|10
decl_stmt|;
comment|// try to pick a query that will result in an unnormalized
comment|// score greater than 1 to test for correct normalization
specifier|final
name|TopDocs
name|docs1
init|=
name|full
operator|.
name|search
argument_list|(
name|queryE
argument_list|,
literal|null
argument_list|,
name|nDocs
argument_list|,
name|sort
argument_list|)
decl_stmt|;
comment|// a filter that only allows through the first hit
name|Filter
name|filt
init|=
operator|new
name|Filter
argument_list|()
block|{
specifier|public
name|BitSet
name|bits
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|BitSet
name|bs
init|=
operator|new
name|BitSet
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
name|bs
operator|.
name|set
argument_list|(
name|docs1
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
return|return
name|bs
return|;
block|}
block|}
decl_stmt|;
name|TopDocs
name|docs2
init|=
name|full
operator|.
name|search
argument_list|(
name|queryE
argument_list|,
name|filt
argument_list|,
name|nDocs
argument_list|,
name|sort
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|docs1
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|score
argument_list|,
name|docs2
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|score
argument_list|,
literal|1e-6
argument_list|)
expr_stmt|;
block|}
comment|// runs a variety of sorts useful for multisearchers
DECL|method|runMultiSorts
specifier|private
name|void
name|runMultiSorts
parameter_list|(
name|Searcher
name|multi
parameter_list|)
throws|throws
name|Exception
block|{
name|sort
operator|.
name|setSort
argument_list|(
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|assertMatchesPattern
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"[AB]{2}[CD]{2}[EF]{2}[GH]{2}[IJ]{2}"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatchesPattern
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"IDHFGJ[ABE]{3}C"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
index|[]
block|{
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|)
block|,
name|SortField
operator|.
name|FIELD_DOC
block|}
argument_list|)
expr_stmt|;
name|assertMatchesPattern
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"IDHFGJ[AB]{2}EC"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
literal|"int"
argument_list|)
expr_stmt|;
name|assertMatchesPattern
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"IDHFGJ[AB]{2}EC"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
index|[]
block|{
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|)
block|,
name|SortField
operator|.
name|FIELD_DOC
block|}
argument_list|)
expr_stmt|;
name|assertMatchesPattern
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"GDHJ[CI]{2}EFAB"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
literal|"float"
argument_list|)
expr_stmt|;
name|assertMatchesPattern
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"GDHJ[CI]{2}EFAB"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"DJAIHGFEBC"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
literal|"int"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertMatchesPattern
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"C[AB]{2}EJGFHDI"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
literal|"float"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertMatchesPattern
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"BAFE[IC]{2}JHDG"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
literal|"string"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"CBEFGHIAJD"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
index|[]
block|{
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"DJAIHGFEBC"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
index|[]
block|{
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|Locale
operator|.
name|US
argument_list|,
literal|true
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"CBEFGHIAJD"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"int"
block|,
literal|"float"
block|}
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"IDHFGJEABC"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"float"
block|,
literal|"string"
block|}
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"GDHJICEFAB"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
literal|"int"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"IZJ"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
literal|"int"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"JZI"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
literal|"float"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"ZJI"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"ZJI"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
literal|"string"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"IJZ"
argument_list|)
expr_stmt|;
block|}
comment|// make sure the documents returned by the search match the expected list
DECL|method|assertMatches
specifier|private
name|void
name|assertMatches
parameter_list|(
name|Searcher
name|searcher
parameter_list|,
name|Query
name|query
parameter_list|,
name|Sort
name|sort
parameter_list|,
name|String
name|expectedResult
parameter_list|)
throws|throws
name|IOException
block|{
name|Hits
name|result
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|sort
argument_list|)
decl_stmt|;
name|StringBuffer
name|buff
init|=
operator|new
name|StringBuffer
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|int
name|n
init|=
name|result
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|Document
name|doc
init|=
name|result
operator|.
name|doc
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
index|[]
name|v
init|=
name|doc
operator|.
name|getValues
argument_list|(
literal|"tracer"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|v
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|buff
operator|.
name|append
argument_list|(
name|v
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|expectedResult
argument_list|,
name|buff
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// make sure the documents returned by the search match the expected list pattern
DECL|method|assertMatchesPattern
specifier|private
name|void
name|assertMatchesPattern
parameter_list|(
name|Searcher
name|searcher
parameter_list|,
name|Query
name|query
parameter_list|,
name|Sort
name|sort
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|IOException
block|{
name|Hits
name|result
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|sort
argument_list|)
decl_stmt|;
name|StringBuffer
name|buff
init|=
operator|new
name|StringBuffer
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|int
name|n
init|=
name|result
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|Document
name|doc
init|=
name|result
operator|.
name|doc
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
index|[]
name|v
init|=
name|doc
operator|.
name|getValues
argument_list|(
literal|"tracer"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|v
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|buff
operator|.
name|append
argument_list|(
name|v
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// System.out.println ("matching \""+buff+"\" against pattern \""+pattern+"\"");
name|assertTrue
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|pattern
argument_list|)
operator|.
name|matcher
argument_list|(
name|buff
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getScores
specifier|private
name|HashMap
name|getScores
parameter_list|(
name|Hits
name|hits
parameter_list|)
throws|throws
name|IOException
block|{
name|HashMap
name|scoreMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|int
name|n
init|=
name|hits
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|Document
name|doc
init|=
name|hits
operator|.
name|doc
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
index|[]
name|v
init|=
name|doc
operator|.
name|getValues
argument_list|(
literal|"tracer"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|v
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scoreMap
operator|.
name|put
argument_list|(
name|v
index|[
literal|0
index|]
argument_list|,
operator|new
name|Float
argument_list|(
name|hits
operator|.
name|score
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|scoreMap
return|;
block|}
comment|// make sure all the values in the maps match
DECL|method|assertSameValues
specifier|private
name|void
name|assertSameValues
parameter_list|(
name|HashMap
name|m1
parameter_list|,
name|HashMap
name|m2
parameter_list|)
block|{
name|int
name|n
init|=
name|m1
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|m
init|=
name|m2
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|n
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|Iterator
name|iter
init|=
name|m1
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|key
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|o1
init|=
name|m1
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Object
name|o2
init|=
name|m2
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|o1
operator|instanceof
name|Float
condition|)
block|{
name|assertEquals
argument_list|(
operator|(
operator|(
name|Float
operator|)
name|o1
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|,
operator|(
operator|(
name|Float
operator|)
name|o2
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|,
literal|1e-6
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|m1
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|m2
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getRemote
specifier|private
name|Searchable
name|getRemote
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
return|return
name|lookupRemote
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|startServer
argument_list|()
expr_stmt|;
return|return
name|lookupRemote
argument_list|()
return|;
block|}
block|}
DECL|method|lookupRemote
specifier|private
name|Searchable
name|lookupRemote
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|(
name|Searchable
operator|)
name|Naming
operator|.
name|lookup
argument_list|(
literal|"//localhost/SortedSearchable"
argument_list|)
return|;
block|}
DECL|method|startServer
specifier|private
name|void
name|startServer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// construct an index
name|Searcher
name|local
init|=
name|getFullIndex
argument_list|()
decl_stmt|;
comment|// local.search (queryA, new Sort());
comment|// publish it
name|Registry
name|reg
init|=
name|LocateRegistry
operator|.
name|createRegistry
argument_list|(
literal|1099
argument_list|)
decl_stmt|;
name|RemoteSearchable
name|impl
init|=
operator|new
name|RemoteSearchable
argument_list|(
name|local
argument_list|)
decl_stmt|;
name|Naming
operator|.
name|rebind
argument_list|(
literal|"//localhost/SortedSearchable"
argument_list|,
name|impl
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
