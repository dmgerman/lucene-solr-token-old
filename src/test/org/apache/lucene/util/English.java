begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001, 2004 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache Lucene" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Lucene", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_class
DECL|class|English
specifier|public
class|class
name|English
block|{
DECL|method|intToEnglish
specifier|public
specifier|static
name|String
name|intToEnglish
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|intToEnglish
argument_list|(
name|i
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|intToEnglish
specifier|public
specifier|static
name|void
name|intToEnglish
parameter_list|(
name|int
name|i
parameter_list|,
name|StringBuffer
name|result
parameter_list|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"zero"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"minus "
argument_list|)
expr_stmt|;
name|i
operator|=
operator|-
name|i
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>=
literal|1000000000
condition|)
block|{
comment|// billions
name|intToEnglish
argument_list|(
name|i
operator|/
literal|1000000000
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"billion, "
argument_list|)
expr_stmt|;
name|i
operator|=
name|i
operator|%
literal|1000000000
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>=
literal|1000000
condition|)
block|{
comment|// millions
name|intToEnglish
argument_list|(
name|i
operator|/
literal|1000000
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"million, "
argument_list|)
expr_stmt|;
name|i
operator|=
name|i
operator|%
literal|1000000
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>=
literal|1000
condition|)
block|{
comment|// thousands
name|intToEnglish
argument_list|(
name|i
operator|/
literal|1000
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"thousand, "
argument_list|)
expr_stmt|;
name|i
operator|=
name|i
operator|%
literal|1000
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>=
literal|100
condition|)
block|{
comment|// hundreds
name|intToEnglish
argument_list|(
name|i
operator|/
literal|100
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"hundred "
argument_list|)
expr_stmt|;
name|i
operator|=
name|i
operator|%
literal|100
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>=
literal|20
condition|)
block|{
switch|switch
condition|(
name|i
operator|/
literal|10
condition|)
block|{
case|case
literal|9
case|:
name|result
operator|.
name|append
argument_list|(
literal|"ninety"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|8
case|:
name|result
operator|.
name|append
argument_list|(
literal|"eighty"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
name|result
operator|.
name|append
argument_list|(
literal|"seventy"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|result
operator|.
name|append
argument_list|(
literal|"sixty"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|result
operator|.
name|append
argument_list|(
literal|"fifty"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|result
operator|.
name|append
argument_list|(
literal|"forty"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|result
operator|.
name|append
argument_list|(
literal|"thirty"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|result
operator|.
name|append
argument_list|(
literal|"twenty"
argument_list|)
expr_stmt|;
break|break;
block|}
name|i
operator|=
name|i
operator|%
literal|10
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
name|result
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
else|else
name|result
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|19
case|:
name|result
operator|.
name|append
argument_list|(
literal|"nineteen "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|18
case|:
name|result
operator|.
name|append
argument_list|(
literal|"eighteen "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|17
case|:
name|result
operator|.
name|append
argument_list|(
literal|"seventeen "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|16
case|:
name|result
operator|.
name|append
argument_list|(
literal|"sixteen "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|15
case|:
name|result
operator|.
name|append
argument_list|(
literal|"fifteen "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|14
case|:
name|result
operator|.
name|append
argument_list|(
literal|"fourteen "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|13
case|:
name|result
operator|.
name|append
argument_list|(
literal|"thirteen "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|12
case|:
name|result
operator|.
name|append
argument_list|(
literal|"twelve "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|11
case|:
name|result
operator|.
name|append
argument_list|(
literal|"eleven "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|10
case|:
name|result
operator|.
name|append
argument_list|(
literal|"ten "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|9
case|:
name|result
operator|.
name|append
argument_list|(
literal|"nine "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|8
case|:
name|result
operator|.
name|append
argument_list|(
literal|"eight "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
name|result
operator|.
name|append
argument_list|(
literal|"seven "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|result
operator|.
name|append
argument_list|(
literal|"six "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|result
operator|.
name|append
argument_list|(
literal|"five "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|result
operator|.
name|append
argument_list|(
literal|"four "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|result
operator|.
name|append
argument_list|(
literal|"three "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|result
operator|.
name|append
argument_list|(
literal|"two "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|result
operator|.
name|append
argument_list|(
literal|"one "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0
case|:
name|result
operator|.
name|append
argument_list|(
literal|""
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|intToEnglish
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
