begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|English
specifier|public
class|class
name|English
block|{
DECL|method|intToEnglish
specifier|public
specifier|static
name|String
name|intToEnglish
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|intToEnglish
argument_list|(
name|i
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|intToEnglish
specifier|public
specifier|static
name|void
name|intToEnglish
parameter_list|(
name|int
name|i
parameter_list|,
name|StringBuffer
name|result
parameter_list|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"zero"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"minus "
argument_list|)
expr_stmt|;
name|i
operator|=
operator|-
name|i
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>=
literal|1000000000
condition|)
block|{
comment|// billions
name|intToEnglish
argument_list|(
name|i
operator|/
literal|1000000000
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"billion, "
argument_list|)
expr_stmt|;
name|i
operator|=
name|i
operator|%
literal|1000000000
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>=
literal|1000000
condition|)
block|{
comment|// millions
name|intToEnglish
argument_list|(
name|i
operator|/
literal|1000000
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"million, "
argument_list|)
expr_stmt|;
name|i
operator|=
name|i
operator|%
literal|1000000
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>=
literal|1000
condition|)
block|{
comment|// thousands
name|intToEnglish
argument_list|(
name|i
operator|/
literal|1000
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"thousand, "
argument_list|)
expr_stmt|;
name|i
operator|=
name|i
operator|%
literal|1000
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>=
literal|100
condition|)
block|{
comment|// hundreds
name|intToEnglish
argument_list|(
name|i
operator|/
literal|100
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"hundred "
argument_list|)
expr_stmt|;
name|i
operator|=
name|i
operator|%
literal|100
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>=
literal|20
condition|)
block|{
switch|switch
condition|(
name|i
operator|/
literal|10
condition|)
block|{
case|case
literal|9
case|:
name|result
operator|.
name|append
argument_list|(
literal|"ninety"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|8
case|:
name|result
operator|.
name|append
argument_list|(
literal|"eighty"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
name|result
operator|.
name|append
argument_list|(
literal|"seventy"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|result
operator|.
name|append
argument_list|(
literal|"sixty"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|result
operator|.
name|append
argument_list|(
literal|"fifty"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|result
operator|.
name|append
argument_list|(
literal|"forty"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|result
operator|.
name|append
argument_list|(
literal|"thirty"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|result
operator|.
name|append
argument_list|(
literal|"twenty"
argument_list|)
expr_stmt|;
break|break;
block|}
name|i
operator|=
name|i
operator|%
literal|10
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
name|result
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
else|else
name|result
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|19
case|:
name|result
operator|.
name|append
argument_list|(
literal|"nineteen "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|18
case|:
name|result
operator|.
name|append
argument_list|(
literal|"eighteen "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|17
case|:
name|result
operator|.
name|append
argument_list|(
literal|"seventeen "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|16
case|:
name|result
operator|.
name|append
argument_list|(
literal|"sixteen "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|15
case|:
name|result
operator|.
name|append
argument_list|(
literal|"fifteen "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|14
case|:
name|result
operator|.
name|append
argument_list|(
literal|"fourteen "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|13
case|:
name|result
operator|.
name|append
argument_list|(
literal|"thirteen "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|12
case|:
name|result
operator|.
name|append
argument_list|(
literal|"twelve "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|11
case|:
name|result
operator|.
name|append
argument_list|(
literal|"eleven "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|10
case|:
name|result
operator|.
name|append
argument_list|(
literal|"ten "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|9
case|:
name|result
operator|.
name|append
argument_list|(
literal|"nine "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|8
case|:
name|result
operator|.
name|append
argument_list|(
literal|"eight "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
name|result
operator|.
name|append
argument_list|(
literal|"seven "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|result
operator|.
name|append
argument_list|(
literal|"six "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|result
operator|.
name|append
argument_list|(
literal|"five "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|result
operator|.
name|append
argument_list|(
literal|"four "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|result
operator|.
name|append
argument_list|(
literal|"three "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|result
operator|.
name|append
argument_list|(
literal|"two "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|result
operator|.
name|append
argument_list|(
literal|"one "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0
case|:
name|result
operator|.
name|append
argument_list|(
literal|""
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|intToEnglish
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
