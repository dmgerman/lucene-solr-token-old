begin_unit
begin_package
DECL|package|org.apache.lucene.util.cache
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|cache
package|;
end_package
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_class
DECL|class|BaseTestLRU
specifier|public
class|class
name|BaseTestLRU
extends|extends
name|LuceneTestCase
block|{
DECL|method|testCache
specifier|protected
name|void
name|testCache
parameter_list|(
name|Cache
name|cache
parameter_list|,
name|int
name|n
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|dummy
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|dummy
argument_list|)
expr_stmt|;
block|}
comment|// access every 2nd item in cache
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// add n/2 elements to cache, the ones that weren't
comment|// touched in the previous loop should now be thrown away
for|for
control|(
name|int
name|i
init|=
name|n
init|;
name|i
operator|<
name|n
operator|+
operator|(
name|n
operator|/
literal|2
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|dummy
argument_list|)
expr_stmt|;
block|}
comment|// access every 4th item in cache
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|+=
literal|4
control|)
block|{
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// add 3/4n elements to cache, the ones that weren't
comment|// touched in the previous loops should now be thrown away
for|for
control|(
name|int
name|i
init|=
name|n
init|;
name|i
operator|<
name|n
operator|+
operator|(
name|n
operator|*
literal|3
operator|/
literal|4
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|dummy
argument_list|)
expr_stmt|;
block|}
comment|// access every 4th item in cache
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|+=
literal|4
control|)
block|{
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
