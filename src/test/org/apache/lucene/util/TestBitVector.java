begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache Lucene" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Lucene", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_comment
comment|/**  *<code>TestBitVector</code> tests the<code>BitVector</code>, obviously.  *  * @author "Peter Mularien"<pmularien@deploy.com>  * @version $Id$  */
end_comment
begin_class
DECL|class|TestBitVector
specifier|public
class|class
name|TestBitVector
extends|extends
name|TestCase
block|{
DECL|method|TestBitVector
specifier|public
name|TestBitVector
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the default constructor on BitVectors of various sizes.      * @throws Exception      */
DECL|method|testConstructSize
specifier|public
name|void
name|testConstructSize
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestConstructOfSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|doTestConstructOfSize
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|doTestConstructOfSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|doTestConstructOfSize
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestConstructOfSize
specifier|private
name|void
name|doTestConstructOfSize
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|BitVector
name|bv
init|=
operator|new
name|BitVector
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|n
argument_list|,
name|bv
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the get() and set() methods on BitVectors of various sizes.      * @throws Exception      */
DECL|method|testGetSet
specifier|public
name|void
name|testGetSet
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestGetSetVectorOfSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|doTestGetSetVectorOfSize
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|doTestGetSetVectorOfSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|doTestGetSetVectorOfSize
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestGetSetVectorOfSize
specifier|private
name|void
name|doTestGetSetVectorOfSize
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|BitVector
name|bv
init|=
operator|new
name|BitVector
argument_list|(
name|n
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bv
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// ensure a set bit can be git'
name|assertFalse
argument_list|(
name|bv
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|bv
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bv
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test the clear() method on BitVectors of various sizes.      * @throws Exception      */
DECL|method|testClear
specifier|public
name|void
name|testClear
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestClearVectorOfSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|doTestClearVectorOfSize
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|doTestClearVectorOfSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|doTestClearVectorOfSize
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestClearVectorOfSize
specifier|private
name|void
name|doTestClearVectorOfSize
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|BitVector
name|bv
init|=
operator|new
name|BitVector
argument_list|(
name|n
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bv
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// ensure a set bit is cleared
name|assertFalse
argument_list|(
name|bv
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|bv
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bv
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|bv
operator|.
name|clear
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bv
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test the count() method on BitVectors of various sizes.      * @throws Exception      */
DECL|method|testCount
specifier|public
name|void
name|testCount
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestCountVectorOfSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|doTestCountVectorOfSize
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|doTestCountVectorOfSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|doTestCountVectorOfSize
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestCountVectorOfSize
specifier|private
name|void
name|doTestCountVectorOfSize
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|BitVector
name|bv
init|=
operator|new
name|BitVector
argument_list|(
name|n
argument_list|)
decl_stmt|;
comment|// test count when incrementally setting bits
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bv
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|bv
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|bv
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|bv
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bv
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|bv
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|bv
operator|=
operator|new
name|BitVector
argument_list|(
name|n
argument_list|)
expr_stmt|;
comment|// test count when setting then clearing bits
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bv
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|bv
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bv
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|bv
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bv
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bv
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|bv
operator|.
name|clear
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bv
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bv
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test writing and construction to/from Directory.      * @throws Exception      */
DECL|method|testWriteRead
specifier|public
name|void
name|testWriteRead
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestWriteRead
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|doTestWriteRead
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|doTestWriteRead
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|doTestWriteRead
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestWriteRead
specifier|private
name|void
name|doTestWriteRead
parameter_list|(
name|int
name|n
parameter_list|)
throws|throws
name|Exception
block|{
name|Directory
name|d
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|BitVector
name|bv
init|=
operator|new
name|BitVector
argument_list|(
name|n
argument_list|)
decl_stmt|;
comment|// test count when incrementally setting bits
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bv
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertFalse
argument_list|(
name|bv
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|bv
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|bv
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bv
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|bv
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|bv
operator|.
name|write
argument_list|(
name|d
argument_list|,
literal|"TESTBV"
argument_list|)
expr_stmt|;
name|BitVector
name|compare
init|=
operator|new
name|BitVector
argument_list|(
name|d
argument_list|,
literal|"TESTBV"
argument_list|)
decl_stmt|;
comment|// compare bit vectors with bits set incrementally
name|assertTrue
argument_list|(
name|doCompare
argument_list|(
name|bv
argument_list|,
name|compare
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Compare two BitVectors.      * This should really be an equals method on the BitVector itself.      * @param bv One bit vector      * @param compare The second to compare      */
DECL|method|doCompare
specifier|private
name|boolean
name|doCompare
parameter_list|(
name|BitVector
name|bv
parameter_list|,
name|BitVector
name|compare
parameter_list|)
block|{
name|boolean
name|equal
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bv
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// bits must be equal
if|if
condition|(
name|bv
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|!=
name|compare
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|equal
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
return|return
name|equal
return|;
block|}
block|}
end_class
end_unit
