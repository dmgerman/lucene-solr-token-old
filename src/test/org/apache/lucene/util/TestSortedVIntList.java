begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|textui
operator|.
name|TestRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_class
DECL|class|TestSortedVIntList
specifier|public
class|class
name|TestSortedVIntList
extends|extends
name|LuceneTestCase
block|{
comment|/** Main for running test case by itself. */
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
name|TestRunner
operator|.
name|run
argument_list|(
operator|new
name|TestSuite
argument_list|(
name|TestSortedVIntList
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|tstIterator
name|void
name|tstIterator
parameter_list|(
name|SortedVIntList
name|vintList
parameter_list|,
name|int
index|[]
name|ints
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ints
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|i
operator|>
literal|0
operator|)
operator|&&
operator|(
name|ints
index|[
name|i
operator|-
literal|1
index|]
operator|==
name|ints
index|[
name|i
index|]
operator|)
condition|)
block|{
return|return;
comment|// DocNrSkipper should not skip to same document.
block|}
block|}
name|DocIdSetIterator
name|m
init|=
name|vintList
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ints
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"No end of Matcher at: "
operator|+
name|i
argument_list|,
name|m
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ints
index|[
name|i
index|]
argument_list|,
name|m
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"End of Matcher"
argument_list|,
name|m
operator|.
name|nextDoc
argument_list|()
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
block|}
DECL|method|tstVIntList
name|void
name|tstVIntList
parameter_list|(
name|SortedVIntList
name|vintList
parameter_list|,
name|int
index|[]
name|ints
parameter_list|,
name|int
name|expectedByteSize
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|"Size"
argument_list|,
name|ints
operator|.
name|length
argument_list|,
name|vintList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Byte size"
argument_list|,
name|expectedByteSize
argument_list|,
name|vintList
operator|.
name|getByteSize
argument_list|()
argument_list|)
expr_stmt|;
name|tstIterator
argument_list|(
name|vintList
argument_list|,
name|ints
argument_list|)
expr_stmt|;
block|}
DECL|method|tstViaBitSet
specifier|public
name|void
name|tstViaBitSet
parameter_list|(
name|int
index|[]
name|ints
parameter_list|,
name|int
name|expectedByteSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|MAX_INT_FOR_BITSET
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
name|BitSet
name|bs
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ints
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|ints
index|[
name|i
index|]
operator|>
name|MAX_INT_FOR_BITSET
condition|)
block|{
return|return;
comment|// BitSet takes too much memory
block|}
if|if
condition|(
operator|(
name|i
operator|>
literal|0
operator|)
operator|&&
operator|(
name|ints
index|[
name|i
operator|-
literal|1
index|]
operator|==
name|ints
index|[
name|i
index|]
operator|)
condition|)
block|{
return|return;
comment|// BitSet cannot store duplicate.
block|}
name|bs
operator|.
name|set
argument_list|(
name|ints
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|SortedVIntList
name|svil
init|=
operator|new
name|SortedVIntList
argument_list|(
name|bs
argument_list|)
decl_stmt|;
name|tstVIntList
argument_list|(
name|svil
argument_list|,
name|ints
argument_list|,
name|expectedByteSize
argument_list|)
expr_stmt|;
name|tstVIntList
argument_list|(
operator|new
name|SortedVIntList
argument_list|(
name|svil
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|,
name|ints
argument_list|,
name|expectedByteSize
argument_list|)
expr_stmt|;
block|}
DECL|field|VB1
specifier|private
specifier|static
specifier|final
name|int
name|VB1
init|=
literal|0x7F
decl_stmt|;
DECL|field|BIT_SHIFT
specifier|private
specifier|static
specifier|final
name|int
name|BIT_SHIFT
init|=
literal|7
decl_stmt|;
DECL|field|VB2
specifier|private
specifier|static
specifier|final
name|int
name|VB2
init|=
operator|(
name|VB1
operator|<<
name|BIT_SHIFT
operator|)
operator||
name|VB1
decl_stmt|;
DECL|field|VB3
specifier|private
specifier|static
specifier|final
name|int
name|VB3
init|=
operator|(
name|VB2
operator|<<
name|BIT_SHIFT
operator|)
operator||
name|VB1
decl_stmt|;
DECL|field|VB4
specifier|private
specifier|static
specifier|final
name|int
name|VB4
init|=
operator|(
name|VB3
operator|<<
name|BIT_SHIFT
operator|)
operator||
name|VB1
decl_stmt|;
DECL|method|vIntByteSize
specifier|private
name|int
name|vIntByteSize
parameter_list|(
name|int
name|i
parameter_list|)
block|{
assert|assert
name|i
operator|>=
literal|0
assert|;
if|if
condition|(
name|i
operator|<=
name|VB1
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|i
operator|<=
name|VB2
condition|)
return|return
literal|2
return|;
if|if
condition|(
name|i
operator|<=
name|VB3
condition|)
return|return
literal|3
return|;
if|if
condition|(
name|i
operator|<=
name|VB4
condition|)
return|return
literal|4
return|;
return|return
literal|5
return|;
block|}
DECL|method|vIntListByteSize
specifier|private
name|int
name|vIntListByteSize
parameter_list|(
name|int
index|[]
name|ints
parameter_list|)
block|{
name|int
name|byteSize
init|=
literal|0
decl_stmt|;
name|int
name|last
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ints
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byteSize
operator|+=
name|vIntByteSize
argument_list|(
name|ints
index|[
name|i
index|]
operator|-
name|last
argument_list|)
expr_stmt|;
name|last
operator|=
name|ints
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|byteSize
return|;
block|}
DECL|method|tstInts
specifier|public
name|void
name|tstInts
parameter_list|(
name|int
index|[]
name|ints
parameter_list|)
block|{
name|int
name|expectedByteSize
init|=
name|vIntListByteSize
argument_list|(
name|ints
argument_list|)
decl_stmt|;
try|try
block|{
name|tstVIntList
argument_list|(
operator|new
name|SortedVIntList
argument_list|(
name|ints
argument_list|)
argument_list|,
name|ints
argument_list|,
name|expectedByteSize
argument_list|)
expr_stmt|;
name|tstViaBitSet
argument_list|(
name|ints
argument_list|,
name|expectedByteSize
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
DECL|method|tstIllegalArgExc
specifier|public
name|void
name|tstIllegalArgExc
parameter_list|(
name|int
index|[]
name|ints
parameter_list|)
block|{
try|try
block|{
operator|new
name|SortedVIntList
argument_list|(
name|ints
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
DECL|method|fibArray
specifier|private
name|int
index|[]
name|fibArray
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|,
name|int
name|size
parameter_list|)
block|{
specifier|final
name|int
index|[]
name|fib
init|=
operator|new
name|int
index|[
name|size
index|]
decl_stmt|;
name|fib
index|[
literal|0
index|]
operator|=
name|a
expr_stmt|;
name|fib
index|[
literal|1
index|]
operator|=
name|b
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|fib
index|[
name|i
index|]
operator|=
name|fib
index|[
name|i
operator|-
literal|1
index|]
operator|+
name|fib
index|[
name|i
operator|-
literal|2
index|]
expr_stmt|;
block|}
return|return
name|fib
return|;
block|}
DECL|method|reverseDiffs
specifier|private
name|int
index|[]
name|reverseDiffs
parameter_list|(
name|int
index|[]
name|ints
parameter_list|)
block|{
comment|// reverse the order of the successive differences
specifier|final
name|int
index|[]
name|res
init|=
operator|new
name|int
index|[
name|ints
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ints
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|res
index|[
name|i
index|]
operator|=
name|ints
index|[
name|ints
operator|.
name|length
operator|-
literal|1
index|]
operator|+
operator|(
name|ints
index|[
literal|0
index|]
operator|-
name|ints
index|[
name|ints
operator|.
name|length
operator|-
literal|1
operator|-
name|i
index|]
operator|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
DECL|method|test01
specifier|public
name|void
name|test01
parameter_list|()
block|{
name|tstInts
argument_list|(
operator|new
name|int
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
DECL|method|test02
specifier|public
name|void
name|test02
parameter_list|()
block|{
name|tstInts
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|test04a
specifier|public
name|void
name|test04a
parameter_list|()
block|{
name|tstInts
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
name|VB2
operator|-
literal|1
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|test04b
specifier|public
name|void
name|test04b
parameter_list|()
block|{
name|tstInts
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
name|VB2
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|test04c
specifier|public
name|void
name|test04c
parameter_list|()
block|{
name|tstInts
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
name|VB2
operator|+
literal|1
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|test05
specifier|public
name|void
name|test05
parameter_list|()
block|{
name|tstInts
argument_list|(
name|fibArray
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|7
argument_list|)
argument_list|)
expr_stmt|;
comment|// includes duplicate value 1
block|}
DECL|method|test05b
specifier|public
name|void
name|test05b
parameter_list|()
block|{
name|tstInts
argument_list|(
name|reverseDiffs
argument_list|(
name|fibArray
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|7
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|test06
specifier|public
name|void
name|test06
parameter_list|()
block|{
name|tstInts
argument_list|(
name|fibArray
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|45
argument_list|)
argument_list|)
expr_stmt|;
comment|// no duplicates, size 46 exceeds max int.
block|}
DECL|method|test06b
specifier|public
name|void
name|test06b
parameter_list|()
block|{
name|tstInts
argument_list|(
name|reverseDiffs
argument_list|(
name|fibArray
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|45
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|test07a
specifier|public
name|void
name|test07a
parameter_list|()
block|{
name|tstInts
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
name|VB3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|test07b
specifier|public
name|void
name|test07b
parameter_list|()
block|{
name|tstInts
argument_list|(
operator|new
name|int
index|[]
block|{
literal|1
block|,
name|VB3
operator|+
literal|2
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|test07c
specifier|public
name|void
name|test07c
parameter_list|()
block|{
name|tstInts
argument_list|(
operator|new
name|int
index|[]
block|{
literal|2
block|,
name|VB3
operator|+
literal|4
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|test08a
specifier|public
name|void
name|test08a
parameter_list|()
block|{
name|tstInts
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
name|VB4
operator|+
literal|1
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|test08b
specifier|public
name|void
name|test08b
parameter_list|()
block|{
name|tstInts
argument_list|(
operator|new
name|int
index|[]
block|{
literal|1
block|,
name|VB4
operator|+
literal|1
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|test08c
specifier|public
name|void
name|test08c
parameter_list|()
block|{
name|tstInts
argument_list|(
operator|new
name|int
index|[]
block|{
literal|2
block|,
name|VB4
operator|+
literal|1
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|test10
specifier|public
name|void
name|test10
parameter_list|()
block|{
name|tstIllegalArgExc
argument_list|(
operator|new
name|int
index|[]
block|{
operator|-
literal|1
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|test11
specifier|public
name|void
name|test11
parameter_list|()
block|{
name|tstIllegalArgExc
argument_list|(
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|test12
specifier|public
name|void
name|test12
parameter_list|()
block|{
name|tstIllegalArgExc
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|5
block|,
literal|8
block|,
literal|0
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|test13Allocation
specifier|public
name|void
name|test13Allocation
parameter_list|()
throws|throws
name|Exception
block|{
name|int
index|[]
name|a
init|=
operator|new
name|int
index|[
literal|2000
index|]
decl_stmt|;
comment|// SortedVIntList initial byte size is 128
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|a
index|[
name|i
index|]
operator|=
operator|(
literal|107
operator|+
name|i
operator|)
operator|*
name|i
expr_stmt|;
block|}
name|tstIterator
argument_list|(
operator|new
name|SortedVIntList
argument_list|(
name|a
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
