begin_unit
begin_package
DECL|package|org.apache.lucene
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
package|;
end_package
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache Lucene" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Lucene", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_class
DECL|class|ThreadSafetyTest
class|class
name|ThreadSafetyTest
block|{
DECL|field|ANALYZER
specifier|private
specifier|static
specifier|final
name|Analyzer
name|ANALYZER
init|=
operator|new
name|SimpleAnalyzer
argument_list|()
decl_stmt|;
DECL|field|RANDOM
specifier|private
specifier|static
specifier|final
name|Random
name|RANDOM
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|SEARCHER
specifier|private
specifier|static
name|Searcher
name|SEARCHER
decl_stmt|;
DECL|field|ITERATIONS
specifier|private
specifier|static
name|int
name|ITERATIONS
init|=
literal|1
decl_stmt|;
DECL|method|random
specifier|private
specifier|static
name|int
name|random
parameter_list|(
name|int
name|i
parameter_list|)
block|{
comment|// for JDK 1.1 compatibility
name|int
name|r
init|=
name|RANDOM
operator|.
name|nextInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|<
literal|0
condition|)
name|r
operator|=
operator|-
name|r
expr_stmt|;
return|return
name|r
operator|%
name|i
return|;
block|}
DECL|class|IndexerThread
specifier|private
specifier|static
class|class
name|IndexerThread
extends|extends
name|Thread
block|{
DECL|field|reopenInterval
specifier|private
specifier|final
name|int
name|reopenInterval
init|=
literal|30
operator|+
name|random
argument_list|(
literal|60
argument_list|)
decl_stmt|;
DECL|field|writer
name|IndexWriter
name|writer
decl_stmt|;
DECL|method|IndexerThread
specifier|public
name|IndexerThread
parameter_list|(
name|IndexWriter
name|writer
parameter_list|)
block|{
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
block|}
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1024
operator|*
name|ITERATIONS
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|int
name|n
init|=
name|RANDOM
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
name|Field
operator|.
name|Keyword
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|n
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
name|Field
operator|.
name|UnStored
argument_list|(
literal|"contents"
argument_list|,
name|intToEnglish
argument_list|(
name|n
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Adding "
operator|+
name|n
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
name|reopenInterval
operator|==
literal|0
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
literal|"index"
argument_list|,
name|ANALYZER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|SearcherThread
specifier|private
specifier|static
class|class
name|SearcherThread
extends|extends
name|Thread
block|{
DECL|field|searcher
specifier|private
name|IndexSearcher
name|searcher
decl_stmt|;
DECL|field|reopenInterval
specifier|private
specifier|final
name|int
name|reopenInterval
init|=
literal|10
operator|+
name|random
argument_list|(
literal|20
argument_list|)
decl_stmt|;
DECL|method|SearcherThread
specifier|public
name|SearcherThread
parameter_list|(
name|boolean
name|useGlobal
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
if|if
condition|(
operator|!
name|useGlobal
condition|)
name|this
operator|.
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
literal|"index"
argument_list|)
expr_stmt|;
block|}
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|512
operator|*
name|ITERATIONS
condition|;
name|i
operator|++
control|)
block|{
name|searchFor
argument_list|(
name|RANDOM
operator|.
name|nextInt
argument_list|()
argument_list|,
operator|(
name|searcher
operator|==
literal|null
operator|)
condition|?
name|SEARCHER
else|:
name|searcher
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
name|reopenInterval
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|searcher
operator|==
literal|null
condition|)
block|{
name|SEARCHER
operator|=
operator|new
name|IndexSearcher
argument_list|(
literal|"index"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
literal|"index"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|searchFor
specifier|private
name|void
name|searchFor
parameter_list|(
name|int
name|n
parameter_list|,
name|Searcher
name|searcher
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Searching for "
operator|+
name|n
argument_list|)
expr_stmt|;
name|Hits
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|QueryParser
operator|.
name|parse
argument_list|(
name|intToEnglish
argument_list|(
name|n
argument_list|)
argument_list|,
literal|"contents"
argument_list|,
name|ANALYZER
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Search for "
operator|+
name|n
operator|+
literal|": total="
operator|+
name|hits
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|Math
operator|.
name|min
argument_list|(
literal|3
argument_list|,
name|hits
operator|.
name|length
argument_list|()
argument_list|)
condition|;
name|j
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Hit for "
operator|+
name|n
operator|+
literal|": "
operator|+
name|hits
operator|.
name|doc
argument_list|(
name|j
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|readOnly
init|=
literal|false
decl_stmt|;
name|boolean
name|add
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
literal|"-ro"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
name|readOnly
operator|=
literal|true
expr_stmt|;
if|if
condition|(
literal|"-add"
operator|.
name|equals
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
condition|)
name|add
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|readOnly
condition|)
block|{
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
literal|"index"
argument_list|,
name|ANALYZER
argument_list|,
operator|!
name|add
argument_list|)
decl_stmt|;
name|Thread
name|indexerThread
init|=
operator|new
name|IndexerThread
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|indexerThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|SearcherThread
name|searcherThread1
init|=
operator|new
name|SearcherThread
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|searcherThread1
operator|.
name|start
argument_list|()
expr_stmt|;
name|SEARCHER
operator|=
operator|new
name|IndexSearcher
argument_list|(
literal|"index"
argument_list|)
expr_stmt|;
name|SearcherThread
name|searcherThread2
init|=
operator|new
name|SearcherThread
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|searcherThread2
operator|.
name|start
argument_list|()
expr_stmt|;
name|SearcherThread
name|searcherThread3
init|=
operator|new
name|SearcherThread
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|searcherThread3
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|intToEnglish
specifier|private
specifier|static
name|String
name|intToEnglish
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|intToEnglish
argument_list|(
name|i
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|intToEnglish
specifier|private
specifier|static
name|void
name|intToEnglish
parameter_list|(
name|int
name|i
parameter_list|,
name|StringBuffer
name|result
parameter_list|)
block|{
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"minus "
argument_list|)
expr_stmt|;
name|i
operator|=
operator|-
name|i
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>=
literal|1000000000
condition|)
block|{
comment|// billions
name|intToEnglish
argument_list|(
name|i
operator|/
literal|1000000000
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"billion, "
argument_list|)
expr_stmt|;
name|i
operator|=
name|i
operator|%
literal|1000000000
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>=
literal|1000000
condition|)
block|{
comment|// millions
name|intToEnglish
argument_list|(
name|i
operator|/
literal|1000000
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"million, "
argument_list|)
expr_stmt|;
name|i
operator|=
name|i
operator|%
literal|1000000
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>=
literal|1000
condition|)
block|{
comment|// thousands
name|intToEnglish
argument_list|(
name|i
operator|/
literal|1000
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"thousand, "
argument_list|)
expr_stmt|;
name|i
operator|=
name|i
operator|%
literal|1000
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>=
literal|100
condition|)
block|{
comment|// hundreds
name|intToEnglish
argument_list|(
name|i
operator|/
literal|100
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"hundred "
argument_list|)
expr_stmt|;
name|i
operator|=
name|i
operator|%
literal|100
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>=
literal|20
condition|)
block|{
switch|switch
condition|(
name|i
operator|/
literal|10
condition|)
block|{
case|case
literal|9
case|:
name|result
operator|.
name|append
argument_list|(
literal|"ninety"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|8
case|:
name|result
operator|.
name|append
argument_list|(
literal|"eighty"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
name|result
operator|.
name|append
argument_list|(
literal|"seventy"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|result
operator|.
name|append
argument_list|(
literal|"sixty"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|result
operator|.
name|append
argument_list|(
literal|"fifty"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|result
operator|.
name|append
argument_list|(
literal|"forty"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|result
operator|.
name|append
argument_list|(
literal|"thirty"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|result
operator|.
name|append
argument_list|(
literal|"twenty"
argument_list|)
expr_stmt|;
break|break;
block|}
name|i
operator|=
name|i
operator|%
literal|10
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
name|result
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
else|else
name|result
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|19
case|:
name|result
operator|.
name|append
argument_list|(
literal|"nineteen "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|18
case|:
name|result
operator|.
name|append
argument_list|(
literal|"eighteen "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|17
case|:
name|result
operator|.
name|append
argument_list|(
literal|"seventeen "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|16
case|:
name|result
operator|.
name|append
argument_list|(
literal|"sixteen "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|15
case|:
name|result
operator|.
name|append
argument_list|(
literal|"fifteen "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|14
case|:
name|result
operator|.
name|append
argument_list|(
literal|"fourteen "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|13
case|:
name|result
operator|.
name|append
argument_list|(
literal|"thirteen "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|12
case|:
name|result
operator|.
name|append
argument_list|(
literal|"twelve "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|11
case|:
name|result
operator|.
name|append
argument_list|(
literal|"eleven "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|10
case|:
name|result
operator|.
name|append
argument_list|(
literal|"ten "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|9
case|:
name|result
operator|.
name|append
argument_list|(
literal|"nine "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|8
case|:
name|result
operator|.
name|append
argument_list|(
literal|"eight "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
name|result
operator|.
name|append
argument_list|(
literal|"seven "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|result
operator|.
name|append
argument_list|(
literal|"six "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|result
operator|.
name|append
argument_list|(
literal|"five "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|result
operator|.
name|append
argument_list|(
literal|"four "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|result
operator|.
name|append
argument_list|(
literal|"three "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|result
operator|.
name|append
argument_list|(
literal|"two "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|result
operator|.
name|append
argument_list|(
literal|"one "
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0
case|:
name|result
operator|.
name|append
argument_list|(
literal|""
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
end_class
end_unit
