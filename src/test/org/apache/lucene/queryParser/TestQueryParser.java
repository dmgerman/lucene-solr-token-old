begin_unit
begin_package
DECL|package|org.apache.lucene.queryParser
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|LowerCaseTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|SimpleAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|WhitespaceAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|StandardAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DateField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreRangeQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FuzzyQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Hits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PhraseQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PrefixQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|RangeQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|WildcardQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_comment
comment|/**  * Tests QueryParser.  */
end_comment
begin_class
DECL|class|TestQueryParser
specifier|public
class|class
name|TestQueryParser
extends|extends
name|TestCase
block|{
DECL|field|qpAnalyzer
specifier|public
specifier|static
name|Analyzer
name|qpAnalyzer
init|=
operator|new
name|QPTestAnalyzer
argument_list|()
decl_stmt|;
DECL|class|QPTestFilter
specifier|public
specifier|static
class|class
name|QPTestFilter
extends|extends
name|TokenFilter
block|{
comment|/**      * Filter which discards the token 'stop' and which expands the      * token 'phrase' into 'phrase1 phrase2'      */
DECL|method|QPTestFilter
specifier|public
name|QPTestFilter
parameter_list|(
name|TokenStream
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|field|inPhrase
name|boolean
name|inPhrase
init|=
literal|false
decl_stmt|;
DECL|field|savedStart
DECL|field|savedEnd
name|int
name|savedStart
init|=
literal|0
decl_stmt|,
name|savedEnd
init|=
literal|0
decl_stmt|;
DECL|method|next
specifier|public
name|Token
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|inPhrase
condition|)
block|{
name|inPhrase
operator|=
literal|false
expr_stmt|;
return|return
operator|new
name|Token
argument_list|(
literal|"phrase2"
argument_list|,
name|savedStart
argument_list|,
name|savedEnd
argument_list|)
return|;
block|}
else|else
for|for
control|(
name|Token
name|token
init|=
name|input
operator|.
name|next
argument_list|()
init|;
name|token
operator|!=
literal|null
condition|;
name|token
operator|=
name|input
operator|.
name|next
argument_list|()
control|)
block|{
if|if
condition|(
name|token
operator|.
name|termText
argument_list|()
operator|.
name|equals
argument_list|(
literal|"phrase"
argument_list|)
condition|)
block|{
name|inPhrase
operator|=
literal|true
expr_stmt|;
name|savedStart
operator|=
name|token
operator|.
name|startOffset
argument_list|()
expr_stmt|;
name|savedEnd
operator|=
name|token
operator|.
name|endOffset
argument_list|()
expr_stmt|;
return|return
operator|new
name|Token
argument_list|(
literal|"phrase1"
argument_list|,
name|savedStart
argument_list|,
name|savedEnd
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|token
operator|.
name|termText
argument_list|()
operator|.
name|equals
argument_list|(
literal|"stop"
argument_list|)
condition|)
return|return
name|token
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
DECL|class|QPTestAnalyzer
specifier|public
specifier|static
class|class
name|QPTestAnalyzer
extends|extends
name|Analyzer
block|{
comment|/** Filters LowerCaseTokenizer with StopFilter. */
DECL|method|tokenStream
specifier|public
specifier|final
name|TokenStream
name|tokenStream
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|QPTestFilter
argument_list|(
operator|new
name|LowerCaseTokenizer
argument_list|(
name|reader
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|class|QPTestParser
specifier|public
specifier|static
class|class
name|QPTestParser
extends|extends
name|QueryParser
block|{
DECL|method|QPTestParser
specifier|public
name|QPTestParser
parameter_list|(
name|String
name|f
parameter_list|,
name|Analyzer
name|a
parameter_list|)
block|{
name|super
argument_list|(
name|f
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
DECL|method|getFuzzyQuery
specifier|protected
name|Query
name|getFuzzyQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|,
name|float
name|minSimilarity
parameter_list|)
throws|throws
name|ParseException
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Fuzzy queries not allowed"
argument_list|)
throw|;
block|}
DECL|method|getWildcardQuery
specifier|protected
name|Query
name|getWildcardQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|)
throws|throws
name|ParseException
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Wildcard queries not allowed"
argument_list|)
throw|;
block|}
block|}
DECL|field|originalMaxClauses
specifier|private
name|int
name|originalMaxClauses
decl_stmt|;
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|originalMaxClauses
operator|=
name|BooleanQuery
operator|.
name|getMaxClauseCount
argument_list|()
expr_stmt|;
block|}
DECL|method|getParser
specifier|public
name|QueryParser
name|getParser
parameter_list|(
name|Analyzer
name|a
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|a
operator|==
literal|null
condition|)
name|a
operator|=
operator|new
name|SimpleAnalyzer
argument_list|()
expr_stmt|;
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
literal|"field"
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|qp
operator|.
name|setDefaultOperator
argument_list|(
name|QueryParser
operator|.
name|OR_OPERATOR
argument_list|)
expr_stmt|;
return|return
name|qp
return|;
block|}
DECL|method|getQuery
specifier|public
name|Query
name|getQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|Analyzer
name|a
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getParser
argument_list|(
name|a
argument_list|)
operator|.
name|parse
argument_list|(
name|query
argument_list|)
return|;
block|}
DECL|method|assertQueryEquals
specifier|public
name|void
name|assertQueryEquals
parameter_list|(
name|String
name|query
parameter_list|,
name|Analyzer
name|a
parameter_list|,
name|String
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|Query
name|q
init|=
name|getQuery
argument_list|(
name|query
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|q
operator|.
name|toString
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|equals
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Query /"
operator|+
name|query
operator|+
literal|"/ yielded /"
operator|+
name|s
operator|+
literal|"/, expecting /"
operator|+
name|result
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertEscapedQueryEquals
specifier|public
name|void
name|assertEscapedQueryEquals
parameter_list|(
name|String
name|query
parameter_list|,
name|Analyzer
name|a
parameter_list|,
name|String
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|escapedQuery
init|=
name|QueryParser
operator|.
name|escape
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|escapedQuery
operator|.
name|equals
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Query /"
operator|+
name|query
operator|+
literal|"/ yielded /"
operator|+
name|escapedQuery
operator|+
literal|"/, expecting /"
operator|+
name|result
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertWildcardQueryEquals
specifier|public
name|void
name|assertWildcardQueryEquals
parameter_list|(
name|String
name|query
parameter_list|,
name|boolean
name|lowercase
parameter_list|,
name|String
name|result
parameter_list|,
name|boolean
name|allowLeadingWildcard
parameter_list|)
throws|throws
name|Exception
block|{
name|QueryParser
name|qp
init|=
name|getParser
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|qp
operator|.
name|setLowercaseExpandedTerms
argument_list|(
name|lowercase
argument_list|)
expr_stmt|;
name|qp
operator|.
name|setAllowLeadingWildcard
argument_list|(
name|allowLeadingWildcard
argument_list|)
expr_stmt|;
name|Query
name|q
init|=
name|qp
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|q
operator|.
name|toString
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|equals
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"WildcardQuery /"
operator|+
name|query
operator|+
literal|"/ yielded /"
operator|+
name|s
operator|+
literal|"/, expecting /"
operator|+
name|result
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertWildcardQueryEquals
specifier|public
name|void
name|assertWildcardQueryEquals
parameter_list|(
name|String
name|query
parameter_list|,
name|boolean
name|lowercase
parameter_list|,
name|String
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|assertWildcardQueryEquals
argument_list|(
name|query
argument_list|,
name|lowercase
argument_list|,
name|result
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|assertWildcardQueryEquals
specifier|public
name|void
name|assertWildcardQueryEquals
parameter_list|(
name|String
name|query
parameter_list|,
name|String
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|QueryParser
name|qp
init|=
name|getParser
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Query
name|q
init|=
name|qp
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|q
operator|.
name|toString
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|equals
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"WildcardQuery /"
operator|+
name|query
operator|+
literal|"/ yielded /"
operator|+
name|s
operator|+
literal|"/, expecting /"
operator|+
name|result
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getQueryDOA
specifier|public
name|Query
name|getQueryDOA
parameter_list|(
name|String
name|query
parameter_list|,
name|Analyzer
name|a
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|a
operator|==
literal|null
condition|)
name|a
operator|=
operator|new
name|SimpleAnalyzer
argument_list|()
expr_stmt|;
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
literal|"field"
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|qp
operator|.
name|setDefaultOperator
argument_list|(
name|QueryParser
operator|.
name|AND_OPERATOR
argument_list|)
expr_stmt|;
return|return
name|qp
operator|.
name|parse
argument_list|(
name|query
argument_list|)
return|;
block|}
DECL|method|assertQueryEqualsDOA
specifier|public
name|void
name|assertQueryEqualsDOA
parameter_list|(
name|String
name|query
parameter_list|,
name|Analyzer
name|a
parameter_list|,
name|String
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|Query
name|q
init|=
name|getQueryDOA
argument_list|(
name|query
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|q
operator|.
name|toString
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|equals
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Query /"
operator|+
name|query
operator|+
literal|"/ yielded /"
operator|+
name|s
operator|+
literal|"/, expecting /"
operator|+
name|result
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSimple
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQueryEquals
argument_list|(
literal|"term term term"
argument_list|,
literal|null
argument_list|,
literal|"term term term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"tÃ¼rm term term"
argument_list|,
literal|null
argument_list|,
literal|"tÃ¼rm term term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"Ã¼mlaut"
argument_list|,
literal|null
argument_list|,
literal|"Ã¼mlaut"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a AND b"
argument_list|,
literal|null
argument_list|,
literal|"+a +b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"(a AND b)"
argument_list|,
literal|null
argument_list|,
literal|"+a +b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"c OR (a AND b)"
argument_list|,
literal|null
argument_list|,
literal|"c (+a +b)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a AND NOT b"
argument_list|,
literal|null
argument_list|,
literal|"+a -b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a AND -b"
argument_list|,
literal|null
argument_list|,
literal|"+a -b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a AND !b"
argument_list|,
literal|null
argument_list|,
literal|"+a -b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a&& b"
argument_list|,
literal|null
argument_list|,
literal|"+a +b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a&& ! b"
argument_list|,
literal|null
argument_list|,
literal|"+a -b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a OR b"
argument_list|,
literal|null
argument_list|,
literal|"a b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a || b"
argument_list|,
literal|null
argument_list|,
literal|"a b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a OR !b"
argument_list|,
literal|null
argument_list|,
literal|"a -b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a OR ! b"
argument_list|,
literal|null
argument_list|,
literal|"a -b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a OR -b"
argument_list|,
literal|null
argument_list|,
literal|"a -b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"+term -term term"
argument_list|,
literal|null
argument_list|,
literal|"+term -term term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"foo:term AND field:anotherTerm"
argument_list|,
literal|null
argument_list|,
literal|"+foo:term +anotherterm"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term AND \"phrase phrase\""
argument_list|,
literal|null
argument_list|,
literal|"+term +\"phrase phrase\""
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\"hello there\""
argument_list|,
literal|null
argument_list|,
literal|"\"hello there\""
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"a AND b"
argument_list|,
literal|null
argument_list|)
operator|instanceof
name|BooleanQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"hello"
argument_list|,
literal|null
argument_list|)
operator|instanceof
name|TermQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"\"hello there\""
argument_list|,
literal|null
argument_list|)
operator|instanceof
name|PhraseQuery
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"germ term^2.0"
argument_list|,
literal|null
argument_list|,
literal|"germ term^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"(term)^2.0"
argument_list|,
literal|null
argument_list|,
literal|"term^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"(germ term)^2.0"
argument_list|,
literal|null
argument_list|,
literal|"(germ term)^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term^2.0"
argument_list|,
literal|null
argument_list|,
literal|"term^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term^2"
argument_list|,
literal|null
argument_list|,
literal|"term^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\"germ term\"^2.0"
argument_list|,
literal|null
argument_list|,
literal|"\"germ term\"^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\"term germ\"^2"
argument_list|,
literal|null
argument_list|,
literal|"\"term germ\"^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"(foo OR bar) AND (baz OR boo)"
argument_list|,
literal|null
argument_list|,
literal|"+(foo bar) +(baz boo)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"((a OR b) AND NOT c) OR d"
argument_list|,
literal|null
argument_list|,
literal|"(+(a b) -c) d"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"+(apple \"steve jobs\") -(foo bar baz)"
argument_list|,
literal|null
argument_list|,
literal|"+(apple \"steve jobs\") -(foo bar baz)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"+title:(dog OR cat) -author:\"bob dole\""
argument_list|,
literal|null
argument_list|,
literal|"+(title:dog title:cat) -author:\"bob dole\""
argument_list|)
expr_stmt|;
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
literal|"field"
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
comment|// make sure OR is the default:
name|assertEquals
argument_list|(
name|QueryParser
operator|.
name|OR_OPERATOR
argument_list|,
name|qp
operator|.
name|getDefaultOperator
argument_list|()
argument_list|)
expr_stmt|;
name|qp
operator|.
name|setDefaultOperator
argument_list|(
name|QueryParser
operator|.
name|AND_OPERATOR
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|QueryParser
operator|.
name|AND_OPERATOR
argument_list|,
name|qp
operator|.
name|getDefaultOperator
argument_list|()
argument_list|)
expr_stmt|;
name|qp
operator|.
name|setDefaultOperator
argument_list|(
name|QueryParser
operator|.
name|OR_OPERATOR
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|QueryParser
operator|.
name|OR_OPERATOR
argument_list|,
name|qp
operator|.
name|getDefaultOperator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPunct
specifier|public
name|void
name|testPunct
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|a
init|=
operator|new
name|WhitespaceAnalyzer
argument_list|()
decl_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a&b"
argument_list|,
name|a
argument_list|,
literal|"a&b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a&&b"
argument_list|,
name|a
argument_list|,
literal|"a&&b"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|".NET"
argument_list|,
name|a
argument_list|,
literal|".NET"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSlop
specifier|public
name|void
name|testSlop
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQueryEquals
argument_list|(
literal|"\"term germ\"~2"
argument_list|,
literal|null
argument_list|,
literal|"\"term germ\"~2"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\"term germ\"~2 flork"
argument_list|,
literal|null
argument_list|,
literal|"\"term germ\"~2 flork"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\"term\"~2"
argument_list|,
literal|null
argument_list|,
literal|"term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\" \"~2 germ"
argument_list|,
literal|null
argument_list|,
literal|"germ"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\"term germ\"~2^2"
argument_list|,
literal|null
argument_list|,
literal|"\"term germ\"~2^2.0"
argument_list|)
expr_stmt|;
block|}
DECL|method|testNumber
specifier|public
name|void
name|testNumber
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The numbers go away because SimpleAnalzyer ignores them
name|assertQueryEquals
argument_list|(
literal|"3"
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term 1.0 1 2"
argument_list|,
literal|null
argument_list|,
literal|"term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term term1 term2"
argument_list|,
literal|null
argument_list|,
literal|"term term term"
argument_list|)
expr_stmt|;
name|Analyzer
name|a
init|=
operator|new
name|StandardAnalyzer
argument_list|()
decl_stmt|;
name|assertQueryEquals
argument_list|(
literal|"3"
argument_list|,
name|a
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term 1.0 1 2"
argument_list|,
name|a
argument_list|,
literal|"term 1.0 1 2"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term term1 term2"
argument_list|,
name|a
argument_list|,
literal|"term term1 term2"
argument_list|)
expr_stmt|;
block|}
DECL|method|testWildcard
specifier|public
name|void
name|testWildcard
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQueryEquals
argument_list|(
literal|"term*"
argument_list|,
literal|null
argument_list|,
literal|"term*"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term*^2"
argument_list|,
literal|null
argument_list|,
literal|"term*^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term~"
argument_list|,
literal|null
argument_list|,
literal|"term~0.5"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term~0.7"
argument_list|,
literal|null
argument_list|,
literal|"term~0.7"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term~^2"
argument_list|,
literal|null
argument_list|,
literal|"term~0.5^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term^2~"
argument_list|,
literal|null
argument_list|,
literal|"term~0.5^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term*germ"
argument_list|,
literal|null
argument_list|,
literal|"term*germ"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term*germ^3"
argument_list|,
literal|null
argument_list|,
literal|"term*germ^3.0"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"term*"
argument_list|,
literal|null
argument_list|)
operator|instanceof
name|PrefixQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"term*^2"
argument_list|,
literal|null
argument_list|)
operator|instanceof
name|PrefixQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"term~"
argument_list|,
literal|null
argument_list|)
operator|instanceof
name|FuzzyQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"term~0.7"
argument_list|,
literal|null
argument_list|)
operator|instanceof
name|FuzzyQuery
argument_list|)
expr_stmt|;
name|FuzzyQuery
name|fq
init|=
operator|(
name|FuzzyQuery
operator|)
name|getQuery
argument_list|(
literal|"term~0.7"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0.7f
argument_list|,
name|fq
operator|.
name|getMinSimilarity
argument_list|()
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FuzzyQuery
operator|.
name|defaultPrefixLength
argument_list|,
name|fq
operator|.
name|getPrefixLength
argument_list|()
argument_list|)
expr_stmt|;
name|fq
operator|=
operator|(
name|FuzzyQuery
operator|)
name|getQuery
argument_list|(
literal|"term~"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.5f
argument_list|,
name|fq
operator|.
name|getMinSimilarity
argument_list|()
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FuzzyQuery
operator|.
name|defaultPrefixLength
argument_list|,
name|fq
operator|.
name|getPrefixLength
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|getQuery
argument_list|(
literal|"term~1.1"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// value> 1, throws exception
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
comment|// expected exception
block|}
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"term*germ"
argument_list|,
literal|null
argument_list|)
operator|instanceof
name|WildcardQuery
argument_list|)
expr_stmt|;
comment|/* Tests to see that wild card terms are (or are not) properly 	 * lower-cased with propery parser configuration 	 */
comment|// First prefix queries:
comment|// by default, convert to lowercase:
name|assertWildcardQueryEquals
argument_list|(
literal|"Term*"
argument_list|,
literal|true
argument_list|,
literal|"term*"
argument_list|)
expr_stmt|;
comment|// explicitly set lowercase:
name|assertWildcardQueryEquals
argument_list|(
literal|"term*"
argument_list|,
literal|true
argument_list|,
literal|"term*"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"Term*"
argument_list|,
literal|true
argument_list|,
literal|"term*"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"TERM*"
argument_list|,
literal|true
argument_list|,
literal|"term*"
argument_list|)
expr_stmt|;
comment|// explicitly disable lowercase conversion:
name|assertWildcardQueryEquals
argument_list|(
literal|"term*"
argument_list|,
literal|false
argument_list|,
literal|"term*"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"Term*"
argument_list|,
literal|false
argument_list|,
literal|"Term*"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"TERM*"
argument_list|,
literal|false
argument_list|,
literal|"TERM*"
argument_list|)
expr_stmt|;
comment|// Then 'full' wildcard queries:
comment|// by default, convert to lowercase:
name|assertWildcardQueryEquals
argument_list|(
literal|"Te?m"
argument_list|,
literal|"te?m"
argument_list|)
expr_stmt|;
comment|// explicitly set lowercase:
name|assertWildcardQueryEquals
argument_list|(
literal|"te?m"
argument_list|,
literal|true
argument_list|,
literal|"te?m"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"Te?m"
argument_list|,
literal|true
argument_list|,
literal|"te?m"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"TE?M"
argument_list|,
literal|true
argument_list|,
literal|"te?m"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"Te?m*gerM"
argument_list|,
literal|true
argument_list|,
literal|"te?m*germ"
argument_list|)
expr_stmt|;
comment|// explicitly disable lowercase conversion:
name|assertWildcardQueryEquals
argument_list|(
literal|"te?m"
argument_list|,
literal|false
argument_list|,
literal|"te?m"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"Te?m"
argument_list|,
literal|false
argument_list|,
literal|"Te?m"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"TE?M"
argument_list|,
literal|false
argument_list|,
literal|"TE?M"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"Te?m*gerM"
argument_list|,
literal|false
argument_list|,
literal|"Te?m*gerM"
argument_list|)
expr_stmt|;
comment|//  Fuzzy queries:
name|assertWildcardQueryEquals
argument_list|(
literal|"Term~"
argument_list|,
literal|"term~0.5"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"Term~"
argument_list|,
literal|true
argument_list|,
literal|"term~0.5"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"Term~"
argument_list|,
literal|false
argument_list|,
literal|"Term~0.5"
argument_list|)
expr_stmt|;
comment|//  Range queries:
name|assertWildcardQueryEquals
argument_list|(
literal|"[A TO C]"
argument_list|,
literal|"[a TO c]"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"[A TO C]"
argument_list|,
literal|true
argument_list|,
literal|"[a TO c]"
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"[A TO C]"
argument_list|,
literal|false
argument_list|,
literal|"[A TO C]"
argument_list|)
expr_stmt|;
comment|// Test suffix queries: first disallow
try|try
block|{
name|assertWildcardQueryEquals
argument_list|(
literal|"*Term"
argument_list|,
literal|true
argument_list|,
literal|"*term"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
comment|// expected exception
block|}
try|try
block|{
name|assertWildcardQueryEquals
argument_list|(
literal|"?Term"
argument_list|,
literal|true
argument_list|,
literal|"?term"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
comment|// expected exception
block|}
comment|// Test suffix queries: then allow
name|assertWildcardQueryEquals
argument_list|(
literal|"*Term"
argument_list|,
literal|true
argument_list|,
literal|"*term"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertWildcardQueryEquals
argument_list|(
literal|"?Term"
argument_list|,
literal|true
argument_list|,
literal|"?term"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testQPA
specifier|public
name|void
name|testQPA
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQueryEquals
argument_list|(
literal|"term term term"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|"term term term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term +stop term"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|"term term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term -stop term"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|"term term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"drop AND stop AND roll"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|"+drop +roll"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term phrase term"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|"term \"phrase1 phrase2\" term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term AND NOT phrase term"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|"+term -\"phrase1 phrase2\" term"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"stop"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"term term term"
argument_list|,
name|qpAnalyzer
argument_list|)
operator|instanceof
name|BooleanQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"term +stop"
argument_list|,
name|qpAnalyzer
argument_list|)
operator|instanceof
name|TermQuery
argument_list|)
expr_stmt|;
block|}
DECL|method|testRange
specifier|public
name|void
name|testRange
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQueryEquals
argument_list|(
literal|"[ a TO z]"
argument_list|,
literal|null
argument_list|,
literal|"[a TO z]"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getQuery
argument_list|(
literal|"[ a TO z]"
argument_list|,
literal|null
argument_list|)
operator|instanceof
name|ConstantScoreRangeQuery
argument_list|)
expr_stmt|;
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
literal|"field"
argument_list|,
operator|new
name|SimpleAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|qp
operator|.
name|setUseOldRangeQuery
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"[ a TO z]"
argument_list|)
operator|instanceof
name|RangeQuery
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"[ a TO z ]"
argument_list|,
literal|null
argument_list|,
literal|"[a TO z]"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"{ a TO z}"
argument_list|,
literal|null
argument_list|,
literal|"{a TO z}"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"{ a TO z }"
argument_list|,
literal|null
argument_list|,
literal|"{a TO z}"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"{ a TO z }^2.0"
argument_list|,
literal|null
argument_list|,
literal|"{a TO z}^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"[ a TO z] OR bar"
argument_list|,
literal|null
argument_list|,
literal|"[a TO z] bar"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"[ a TO z] AND bar"
argument_list|,
literal|null
argument_list|,
literal|"+[a TO z] +bar"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"( bar blar { a TO z}) "
argument_list|,
literal|null
argument_list|,
literal|"bar blar {a TO z}"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"gack ( bar blar { a TO z}) "
argument_list|,
literal|null
argument_list|,
literal|"gack (bar blar {a TO z})"
argument_list|)
expr_stmt|;
block|}
DECL|method|getDate
specifier|private
name|String
name|getDate
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|Exception
block|{
name|DateFormat
name|df
init|=
name|DateFormat
operator|.
name|getDateInstance
argument_list|(
name|DateFormat
operator|.
name|SHORT
argument_list|)
decl_stmt|;
return|return
name|DateField
operator|.
name|dateToString
argument_list|(
name|df
operator|.
name|parse
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getLocalizedDate
specifier|private
name|String
name|getLocalizedDate
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|month
parameter_list|,
name|int
name|day
parameter_list|,
name|boolean
name|extendLastDate
parameter_list|)
block|{
name|DateFormat
name|df
init|=
name|DateFormat
operator|.
name|getDateInstance
argument_list|(
name|DateFormat
operator|.
name|SHORT
argument_list|)
decl_stmt|;
name|Calendar
name|calendar
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|year
argument_list|,
name|month
argument_list|,
name|day
argument_list|)
expr_stmt|;
if|if
condition|(
name|extendLastDate
condition|)
block|{
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|23
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|59
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|59
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|999
argument_list|)
expr_stmt|;
block|}
return|return
name|df
operator|.
name|format
argument_list|(
name|calendar
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
block|}
DECL|method|testDateRange
specifier|public
name|void
name|testDateRange
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|startDate
init|=
name|getLocalizedDate
argument_list|(
literal|2002
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|endDate
init|=
name|getLocalizedDate
argument_list|(
literal|2002
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Calendar
name|endDateExpected
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|endDateExpected
operator|.
name|set
argument_list|(
literal|2002
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|23
argument_list|,
literal|59
argument_list|,
literal|59
argument_list|)
expr_stmt|;
name|endDateExpected
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|999
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"[ "
operator|+
name|startDate
operator|+
literal|" TO "
operator|+
name|endDate
operator|+
literal|"]"
argument_list|,
literal|null
argument_list|,
literal|"["
operator|+
name|getDate
argument_list|(
name|startDate
argument_list|)
operator|+
literal|" TO "
operator|+
name|DateField
operator|.
name|dateToString
argument_list|(
name|endDateExpected
operator|.
name|getTime
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"{  "
operator|+
name|startDate
operator|+
literal|"    "
operator|+
name|endDate
operator|+
literal|"   }"
argument_list|,
literal|null
argument_list|,
literal|"{"
operator|+
name|getDate
argument_list|(
name|startDate
argument_list|)
operator|+
literal|" TO "
operator|+
name|getDate
argument_list|(
name|endDate
argument_list|)
operator|+
literal|"}"
argument_list|)
expr_stmt|;
block|}
DECL|method|testEscaped
specifier|public
name|void
name|testEscaped
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|a
init|=
operator|new
name|WhitespaceAnalyzer
argument_list|()
decl_stmt|;
comment|/*assertQueryEquals("\\[brackets", a, "\\[brackets");     assertQueryEquals("\\[brackets", null, "brackets");     assertQueryEquals("\\\\", a, "\\\\");     assertQueryEquals("\\+blah", a, "\\+blah");     assertQueryEquals("\\(blah", a, "\\(blah");      assertQueryEquals("\\-blah", a, "\\-blah");     assertQueryEquals("\\!blah", a, "\\!blah");     assertQueryEquals("\\{blah", a, "\\{blah");     assertQueryEquals("\\}blah", a, "\\}blah");     assertQueryEquals("\\:blah", a, "\\:blah");     assertQueryEquals("\\^blah", a, "\\^blah");     assertQueryEquals("\\[blah", a, "\\[blah");     assertQueryEquals("\\]blah", a, "\\]blah");     assertQueryEquals("\\\"blah", a, "\\\"blah");     assertQueryEquals("\\(blah", a, "\\(blah");     assertQueryEquals("\\)blah", a, "\\)blah");     assertQueryEquals("\\~blah", a, "\\~blah");     assertQueryEquals("\\*blah", a, "\\*blah");     assertQueryEquals("\\?blah", a, "\\?blah");     //assertQueryEquals("foo \\&\\& bar", a, "foo \\&\\& bar");     //assertQueryEquals("foo \\|| bar", a, "foo \\|| bar");     //assertQueryEquals("foo \\AND bar", a, "foo \\AND bar");*/
name|assertQueryEquals
argument_list|(
literal|"a\\-b:c"
argument_list|,
name|a
argument_list|,
literal|"a-b:c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a\\+b:c"
argument_list|,
name|a
argument_list|,
literal|"a+b:c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a\\:b:c"
argument_list|,
name|a
argument_list|,
literal|"a:b:c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a\\\\b:c"
argument_list|,
name|a
argument_list|,
literal|"a\\b:c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\-c"
argument_list|,
name|a
argument_list|,
literal|"a:b-c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\+c"
argument_list|,
name|a
argument_list|,
literal|"a:b+c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\:c"
argument_list|,
name|a
argument_list|,
literal|"a:b:c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\\\c"
argument_list|,
name|a
argument_list|,
literal|"a:b\\c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\-c*"
argument_list|,
name|a
argument_list|,
literal|"a:b-c*"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\+c*"
argument_list|,
name|a
argument_list|,
literal|"a:b+c*"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\:c*"
argument_list|,
name|a
argument_list|,
literal|"a:b:c*"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\\\c*"
argument_list|,
name|a
argument_list|,
literal|"a:b\\c*"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\-?c"
argument_list|,
name|a
argument_list|,
literal|"a:b-?c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\+?c"
argument_list|,
name|a
argument_list|,
literal|"a:b+?c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\:?c"
argument_list|,
name|a
argument_list|,
literal|"a:b:?c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\\\?c"
argument_list|,
name|a
argument_list|,
literal|"a:b\\?c"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\-c~"
argument_list|,
name|a
argument_list|,
literal|"a:b-c~0.5"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\+c~"
argument_list|,
name|a
argument_list|,
literal|"a:b+c~0.5"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\:c~"
argument_list|,
name|a
argument_list|,
literal|"a:b:c~0.5"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"a:b\\\\c~"
argument_list|,
name|a
argument_list|,
literal|"a:b\\c~0.5"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"[ a\\- TO a\\+ ]"
argument_list|,
literal|null
argument_list|,
literal|"[a- TO a+]"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"[ a\\: TO a\\~ ]"
argument_list|,
literal|null
argument_list|,
literal|"[a: TO a~]"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"[ a\\\\ TO a\\* ]"
argument_list|,
literal|null
argument_list|,
literal|"[a\\ TO a*]"
argument_list|)
expr_stmt|;
block|}
DECL|method|testQueryStringEscaping
specifier|public
name|void
name|testQueryStringEscaping
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|a
init|=
operator|new
name|WhitespaceAnalyzer
argument_list|()
decl_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a-b:c"
argument_list|,
name|a
argument_list|,
literal|"a\\-b\\:c"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a+b:c"
argument_list|,
name|a
argument_list|,
literal|"a\\+b\\:c"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b:c"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\:c"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a\\b:c"
argument_list|,
name|a
argument_list|,
literal|"a\\\\b\\:c"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b-c"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\-c"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b+c"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\+c"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b:c"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\:c"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b\\c"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\\\c"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b-c*"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\-c\\*"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b+c*"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\+c\\*"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b:c*"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\:c\\*"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b\\\\c*"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\\\\\\\c\\*"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b-?c"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\-\\?c"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b+?c"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\+\\?c"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b:?c"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\:\\?c"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b?c"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\?c"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b-c~"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\-c\\~"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b+c~"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\+c\\~"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b:c~"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\:c\\~"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"a:b\\c~"
argument_list|,
name|a
argument_list|,
literal|"a\\:b\\\\c\\~"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"[ a - TO a+ ]"
argument_list|,
literal|null
argument_list|,
literal|"\\[ a \\- TO a\\+ \\]"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"[ a : TO a~ ]"
argument_list|,
literal|null
argument_list|,
literal|"\\[ a \\: TO a\\~ \\]"
argument_list|)
expr_stmt|;
name|assertEscapedQueryEquals
argument_list|(
literal|"[ a\\ TO a* ]"
argument_list|,
literal|null
argument_list|,
literal|"\\[ a\\\\ TO a\\* \\]"
argument_list|)
expr_stmt|;
block|}
DECL|method|testTabNewlineCarriageReturn
specifier|public
name|void
name|testTabNewlineCarriageReturn
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQueryEqualsDOA
argument_list|(
literal|"+weltbank +worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"+weltbank\n+worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"weltbank \n+worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"weltbank \n +worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"+weltbank\r+worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"weltbank \r+worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"weltbank \r +worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"+weltbank\r\n+worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"weltbank \r\n+worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"weltbank \r\n +worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"weltbank \r \n +worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"+weltbank\t+worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"weltbank \t+worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"weltbank \t +worlbank"
argument_list|,
literal|null
argument_list|,
literal|"+weltbank +worlbank"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleDAO
specifier|public
name|void
name|testSimpleDAO
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQueryEqualsDOA
argument_list|(
literal|"term term term"
argument_list|,
literal|null
argument_list|,
literal|"+term +term +term"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"term +term term"
argument_list|,
literal|null
argument_list|,
literal|"+term +term +term"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"term term +term"
argument_list|,
literal|null
argument_list|,
literal|"+term +term +term"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"term +term +term"
argument_list|,
literal|null
argument_list|,
literal|"+term +term +term"
argument_list|)
expr_stmt|;
name|assertQueryEqualsDOA
argument_list|(
literal|"-term term term"
argument_list|,
literal|null
argument_list|,
literal|"-term +term +term"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBoost
specifier|public
name|void
name|testBoost
parameter_list|()
throws|throws
name|Exception
block|{
name|StandardAnalyzer
name|oneStopAnalyzer
init|=
operator|new
name|StandardAnalyzer
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"on"
block|}
argument_list|)
decl_stmt|;
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
literal|"field"
argument_list|,
name|oneStopAnalyzer
argument_list|)
decl_stmt|;
name|Query
name|q
init|=
name|qp
operator|.
name|parse
argument_list|(
literal|"on^1.0"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|q
operator|=
name|qp
operator|.
name|parse
argument_list|(
literal|"\"hello\"^2.0"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q
operator|.
name|getBoost
argument_list|()
argument_list|,
operator|(
name|float
operator|)
literal|2.0
argument_list|,
operator|(
name|float
operator|)
literal|0.5
argument_list|)
expr_stmt|;
name|q
operator|=
name|qp
operator|.
name|parse
argument_list|(
literal|"hello^2.0"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q
operator|.
name|getBoost
argument_list|()
argument_list|,
operator|(
name|float
operator|)
literal|2.0
argument_list|,
operator|(
name|float
operator|)
literal|0.5
argument_list|)
expr_stmt|;
name|q
operator|=
name|qp
operator|.
name|parse
argument_list|(
literal|"\"on\"^1.0"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|QueryParser
name|qp2
init|=
operator|new
name|QueryParser
argument_list|(
literal|"field"
argument_list|,
operator|new
name|StandardAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|=
name|qp2
operator|.
name|parse
argument_list|(
literal|"the^3"
argument_list|)
expr_stmt|;
comment|// "the" is a stop word so the result is an empty query:
name|assertNotNull
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|q
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0f
argument_list|,
name|q
operator|.
name|getBoost
argument_list|()
argument_list|,
literal|0.01f
argument_list|)
expr_stmt|;
block|}
DECL|method|testException
specifier|public
name|void
name|testException
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|assertQueryEquals
argument_list|(
literal|"\"some phrase"
argument_list|,
literal|null
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"ParseException expected, not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|expected
parameter_list|)
block|{     }
block|}
DECL|method|testCustomQueryParserWildcard
specifier|public
name|void
name|testCustomQueryParserWildcard
parameter_list|()
block|{
try|try
block|{
operator|new
name|QPTestParser
argument_list|(
literal|"contents"
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|)
operator|.
name|parse
argument_list|(
literal|"a?t"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Wildcard queries should not be allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|expected
parameter_list|)
block|{
comment|// expected exception
block|}
block|}
DECL|method|testCustomQueryParserFuzzy
specifier|public
name|void
name|testCustomQueryParserFuzzy
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
operator|new
name|QPTestParser
argument_list|(
literal|"contents"
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|)
operator|.
name|parse
argument_list|(
literal|"xunit~"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Fuzzy queries should not be allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|expected
parameter_list|)
block|{
comment|// expected exception
block|}
block|}
DECL|method|testBooleanQuery
specifier|public
name|void
name|testBooleanQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|setMaxClauseCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
try|try
block|{
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
literal|"field"
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|qp
operator|.
name|parse
argument_list|(
literal|"one two three"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"ParseException expected due to too many boolean clauses"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|expected
parameter_list|)
block|{
comment|// too many boolean clauses, so ParseException is expected
block|}
block|}
comment|/**    * This test differs from TestPrecedenceQueryParser    */
DECL|method|testPrecedence
specifier|public
name|void
name|testPrecedence
parameter_list|()
throws|throws
name|Exception
block|{
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
literal|"field"
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|Query
name|query1
init|=
name|qp
operator|.
name|parse
argument_list|(
literal|"A AND B OR C AND D"
argument_list|)
decl_stmt|;
name|Query
name|query2
init|=
name|qp
operator|.
name|parse
argument_list|(
literal|"+A +B +C +D"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|query1
argument_list|,
name|query2
argument_list|)
expr_stmt|;
block|}
DECL|method|testLocalDateFormat
specifier|public
name|void
name|testLocalDateFormat
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|RAMDirectory
name|ramDir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|iw
init|=
operator|new
name|IndexWriter
argument_list|(
name|ramDir
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|addDateDoc
argument_list|(
literal|"a"
argument_list|,
literal|2005
argument_list|,
literal|12
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|,
literal|15
argument_list|,
literal|33
argument_list|,
name|iw
argument_list|)
expr_stmt|;
name|addDateDoc
argument_list|(
literal|"b"
argument_list|,
literal|2005
argument_list|,
literal|12
argument_list|,
literal|4
argument_list|,
literal|22
argument_list|,
literal|15
argument_list|,
literal|00
argument_list|,
name|iw
argument_list|)
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|is
init|=
operator|new
name|IndexSearcher
argument_list|(
name|ramDir
argument_list|)
decl_stmt|;
name|assertHits
argument_list|(
literal|1
argument_list|,
literal|"[12/1/2005 TO 12/3/2005]"
argument_list|,
name|is
argument_list|)
expr_stmt|;
name|assertHits
argument_list|(
literal|2
argument_list|,
literal|"[12/1/2005 TO 12/4/2005]"
argument_list|,
name|is
argument_list|)
expr_stmt|;
name|assertHits
argument_list|(
literal|1
argument_list|,
literal|"[12/3/2005 TO 12/4/2005]"
argument_list|,
name|is
argument_list|)
expr_stmt|;
name|assertHits
argument_list|(
literal|1
argument_list|,
literal|"{12/1/2005 TO 12/3/2005}"
argument_list|,
name|is
argument_list|)
expr_stmt|;
name|assertHits
argument_list|(
literal|1
argument_list|,
literal|"{12/1/2005 TO 12/4/2005}"
argument_list|,
name|is
argument_list|)
expr_stmt|;
name|assertHits
argument_list|(
literal|0
argument_list|,
literal|"{12/3/2005 TO 12/4/2005}"
argument_list|,
name|is
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|assertHits
specifier|private
name|void
name|assertHits
parameter_list|(
name|int
name|expected
parameter_list|,
name|String
name|query
parameter_list|,
name|IndexSearcher
name|is
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
literal|"date"
argument_list|,
operator|new
name|WhitespaceAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|qp
operator|.
name|setLocale
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
expr_stmt|;
name|Query
name|q
init|=
name|qp
operator|.
name|parse
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|Hits
name|hits
init|=
name|is
operator|.
name|search
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|hits
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addDateDoc
specifier|private
specifier|static
name|void
name|addDateDoc
parameter_list|(
name|String
name|content
parameter_list|,
name|int
name|year
parameter_list|,
name|int
name|month
parameter_list|,
name|int
name|day
parameter_list|,
name|int
name|hour
parameter_list|,
name|int
name|minute
parameter_list|,
name|int
name|second
parameter_list|,
name|IndexWriter
name|iw
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f"
argument_list|,
name|content
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|year
argument_list|,
name|month
operator|-
literal|1
argument_list|,
name|day
argument_list|,
name|hour
argument_list|,
name|minute
argument_list|,
name|second
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"date"
argument_list|,
name|DateField
operator|.
name|dateToString
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|UN_TOKENIZED
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|BooleanQuery
operator|.
name|setMaxClauseCount
argument_list|(
name|originalMaxClauses
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
