begin_unit
begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|MapSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|StatsParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|LocalSolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|AbstractSolrTestCase
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/**  * Statistics Component Test  */
end_comment
begin_class
DECL|class|StatsComponentTest
specifier|public
class|class
name|StatsComponentTest
extends|extends
name|AbstractSolrTestCase
block|{
annotation|@
name|Override
DECL|method|getSchemaFile
specifier|public
name|String
name|getSchemaFile
parameter_list|()
block|{
return|return
literal|"schema11.xml"
return|;
block|}
annotation|@
name|Override
DECL|method|getSolrConfigFile
specifier|public
name|String
name|getSolrConfigFile
parameter_list|()
block|{
return|return
literal|"solrconfig.xml"
return|;
block|}
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|lrf
operator|=
name|h
operator|.
name|getRequestFactory
argument_list|(
literal|"standard"
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
DECL|method|testFieldStatisticsResult
specifier|public
name|void
name|testFieldStatisticsResult
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"stats_i"
argument_list|,
literal|"-10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"stats_i"
argument_list|,
literal|"-20"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"stats_i"
argument_list|,
literal|"-30"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"stats_i"
argument_list|,
literal|"-40"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|StatsParams
operator|.
name|STATS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|StatsParams
operator|.
name|STATS_FIELD
argument_list|,
literal|"stats_i"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"indent"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|req
init|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
operator|new
name|MapSolrParams
argument_list|(
name|args
argument_list|)
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
literal|"test statistics values"
argument_list|,
name|req
argument_list|,
literal|"//double[@name='min'][.='-40.0']"
argument_list|,
literal|"//double[@name='max'][.='-10.0']"
argument_list|,
literal|"//double[@name='sum'][.='-100.0']"
argument_list|,
literal|"//long[@name='count'][.='4']"
argument_list|,
literal|"//long[@name='missing'][.='0']"
argument_list|,
literal|"//double[@name='sumOfSquares'][.='3000.0']"
argument_list|,
literal|"//double[@name='mean'][.='-25.0']"
argument_list|,
literal|"//double[@name='stddev'][.='12.909944487358056']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFieldStatisticsMissingResult
specifier|public
name|void
name|testFieldStatisticsMissingResult
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"stats_i"
argument_list|,
literal|"-10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"stats_i"
argument_list|,
literal|"-20"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"stats_i"
argument_list|,
literal|"-40"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|StatsParams
operator|.
name|STATS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|StatsParams
operator|.
name|STATS_FIELD
argument_list|,
literal|"stats_i"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"indent"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|req
init|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
operator|new
name|MapSolrParams
argument_list|(
name|args
argument_list|)
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
literal|"test statistics values"
argument_list|,
name|req
argument_list|,
literal|"//double[@name='min'][.='-40.0']"
argument_list|,
literal|"//double[@name='max'][.='-10.0']"
argument_list|,
literal|"//double[@name='sum'][.='-70.0']"
argument_list|,
literal|"//long[@name='count'][.='3']"
argument_list|,
literal|"//long[@name='missing'][.='1']"
argument_list|,
literal|"//double[@name='sumOfSquares'][.='2100.0']"
argument_list|,
literal|"//double[@name='mean'][.='--23.333333333333332']"
argument_list|,
literal|"//double[@name='stddev'][.='15.275252316519467']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFacetStatisticsResult
specifier|public
name|void
name|testFacetStatisticsResult
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"stats_i"
argument_list|,
literal|"10"
argument_list|,
literal|"active_s"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"stats_i"
argument_list|,
literal|"20"
argument_list|,
literal|"active_s"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"stats_i"
argument_list|,
literal|"30"
argument_list|,
literal|"active_s"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"stats_i"
argument_list|,
literal|"40"
argument_list|,
literal|"active_s"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|StatsParams
operator|.
name|STATS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|StatsParams
operator|.
name|STATS_FIELD
argument_list|,
literal|"stats_i"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|StatsParams
operator|.
name|STATS_FACET
argument_list|,
literal|"active_s"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"indent"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|req
init|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
operator|new
name|MapSolrParams
argument_list|(
name|args
argument_list|)
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
literal|"test value for active_s=true"
argument_list|,
name|req
argument_list|,
literal|"//lst[@name='true']/double[@name='min'][.='10.0']"
argument_list|,
literal|"//lst[@name='true']/double[@name='max'][.='20.0']"
argument_list|,
literal|"//lst[@name='true']/double[@name='sum'][.='30.0']"
argument_list|,
literal|"//lst[@name='true']/long[@name='count'][.='2']"
argument_list|,
literal|"//lst[@name='true']/long[@name='missing'][.='0']"
argument_list|,
literal|"//lst[@name='true']/double[@name='sumOfSquares'][.='500.0']"
argument_list|,
literal|"//lst[@name='true']/double[@name='mean'][.='15.0']"
argument_list|,
literal|"//lst[@name='true']/double[@name='stddev'][.='7.0710678118654755']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test value for active_s=false"
argument_list|,
name|req
argument_list|,
literal|"//lst[@name='false']/double[@name='min'][.='30.0']"
argument_list|,
literal|"//lst[@name='false']/double[@name='max'][.='40.0']"
argument_list|,
literal|"//lst[@name='false']/double[@name='sum'][.='70.0']"
argument_list|,
literal|"//lst[@name='false']/long[@name='count'][.='2']"
argument_list|,
literal|"//lst[@name='false']/long[@name='missing'][.='0']"
argument_list|,
literal|"//lst[@name='false']/double[@name='sumOfSquares'][.='2500.0']"
argument_list|,
literal|"//lst[@name='false']/double[@name='mean'][.='35.0']"
argument_list|,
literal|"//lst[@name='false']/double[@name='stddev'][.='7.0710678118654755']"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
