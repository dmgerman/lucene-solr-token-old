begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|MapSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|LocalSolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|spelling
operator|.
name|AbstractLuceneSpellChecker
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|spelling
operator|.
name|IndexBasedSpellChecker
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|AbstractSolrTestCase
import|;
end_import
begin_comment
comment|/**  * @since solr 1.3  */
end_comment
begin_class
DECL|class|SpellCheckComponentTest
specifier|public
class|class
name|SpellCheckComponentTest
extends|extends
name|AbstractSolrTestCase
block|{
annotation|@
name|Override
DECL|method|getSchemaFile
specifier|public
name|String
name|getSchemaFile
parameter_list|()
block|{
return|return
literal|"schema.xml"
return|;
block|}
annotation|@
name|Override
DECL|method|getSolrConfigFile
specifier|public
name|String
name|getSolrConfigFile
parameter_list|()
block|{
return|return
literal|"solrconfig.xml"
return|;
block|}
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|,
literal|"lowerfilt"
argument_list|,
literal|"This is a title"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"lowerfilt"
argument_list|,
literal|"The quick reb fox jumped over the lazy brown dogs."
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"lowerfilt"
argument_list|,
literal|"This is a document"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"lowerfilt"
argument_list|,
literal|"another document"
argument_list|)
argument_list|)
expr_stmt|;
comment|//bunch of docs that are variants on blue
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"lowerfilt"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"lowerfilt"
argument_list|,
literal|"blud"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"lowerfilt"
argument_list|,
literal|"boue"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"lowerfilt"
argument_list|,
literal|"glue"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"lowerfilt"
argument_list|,
literal|"blee"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
literal|"commit"
argument_list|,
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testExtendedResultsCount
specifier|public
name|void
name|testExtendedResultsCount
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|SearchComponent
name|speller
init|=
name|core
operator|.
name|getSearchComponent
argument_list|(
literal|"spellcheck"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"speller is null and it shouldn't be"
argument_list|,
name|speller
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"spellCheckCompRH"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|SpellCheckComponent
operator|.
name|SPELLCHECK_BUILD
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
literal|"bluo"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|SpellCheckComponent
operator|.
name|COMPONENT_NAME
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|SpellCheckComponent
operator|.
name|SPELLCHECK_COUNT
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|SpellCheckComponent
operator|.
name|SPELLCHECK_EXTENDED_RESULTS
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|SolrRequestHandler
name|handler
init|=
name|core
operator|.
name|getRequestHandler
argument_list|(
literal|"spellCheckCompRH"
argument_list|)
decl_stmt|;
name|SolrQueryResponse
name|rsp
decl_stmt|;
name|rsp
operator|=
operator|new
name|SolrQueryResponse
argument_list|()
expr_stmt|;
name|handler
operator|.
name|handleRequest
argument_list|(
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
name|params
argument_list|)
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|NamedList
name|values
init|=
name|rsp
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|String
name|cmdExec
init|=
operator|(
name|String
operator|)
name|values
operator|.
name|get
argument_list|(
literal|"command"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"command is null and it shouldn't be"
argument_list|,
name|cmdExec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cmdExec
operator|+
literal|" is not equal to "
operator|+
literal|"build"
argument_list|,
name|cmdExec
operator|.
name|equals
argument_list|(
literal|"build"
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
name|NamedList
name|spellCheck
init|=
operator|(
name|NamedList
operator|)
name|values
operator|.
name|get
argument_list|(
literal|"spellcheck"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"spellCheck is null and it shouldn't be"
argument_list|,
name|spellCheck
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|NamedList
name|suggestions
init|=
operator|(
name|NamedList
operator|)
name|spellCheck
operator|.
name|get
argument_list|(
literal|"suggestions"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"suggestions is null and it shouldn't be"
argument_list|,
name|suggestions
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|NamedList
name|blue
init|=
operator|(
name|NamedList
operator|)
name|suggestions
operator|.
name|get
argument_list|(
literal|"bluo"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|blue
operator|.
name|get
argument_list|(
literal|"numFound"
argument_list|)
operator|+
literal|" is not equal to "
operator|+
literal|"5"
argument_list|,
name|blue
operator|.
name|get
argument_list|(
literal|"numFound"
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"5"
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|theSuggestion
init|=
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|blue
operator|.
name|get
argument_list|(
literal|"suggestion"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"theSuggestion is null and it shouldn't be: "
operator|+
name|blue
argument_list|,
name|theSuggestion
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"theSuggestion Size: "
operator|+
name|theSuggestion
operator|.
name|size
argument_list|()
operator|+
literal|" is not: "
operator|+
literal|5
argument_list|,
name|theSuggestion
operator|.
name|size
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
comment|//we know there are at least 5, but now only get 3
name|params
operator|.
name|remove
argument_list|(
name|SpellCheckComponent
operator|.
name|SPELLCHECK_COUNT
argument_list|)
expr_stmt|;
name|params
operator|.
name|remove
argument_list|(
name|SpellCheckComponent
operator|.
name|SPELLCHECK_EXTENDED_RESULTS
argument_list|)
expr_stmt|;
name|params
operator|.
name|remove
argument_list|(
name|SpellCheckComponent
operator|.
name|SPELLCHECK_BUILD
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|SpellCheckComponent
operator|.
name|SPELLCHECK_COUNT
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|SpellCheckComponent
operator|.
name|SPELLCHECK_EXTENDED_RESULTS
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|SpellCheckComponent
operator|.
name|SPELLCHECK_BUILD
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|rsp
operator|=
operator|new
name|SolrQueryResponse
argument_list|()
expr_stmt|;
name|handler
operator|.
name|handleRequest
argument_list|(
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
name|params
argument_list|)
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|values
operator|=
name|rsp
operator|.
name|getValues
argument_list|()
expr_stmt|;
name|spellCheck
operator|=
operator|(
name|NamedList
operator|)
name|values
operator|.
name|get
argument_list|(
literal|"spellcheck"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"spellCheck is null and it shouldn't be"
argument_list|,
name|spellCheck
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|suggestions
operator|=
operator|(
name|NamedList
operator|)
name|spellCheck
operator|.
name|get
argument_list|(
literal|"suggestions"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"suggestions is null and it shouldn't be"
argument_list|,
name|suggestions
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|blue
operator|=
operator|(
name|NamedList
operator|)
name|suggestions
operator|.
name|get
argument_list|(
literal|"bluo"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|blue
operator|.
name|get
argument_list|(
literal|"numFound"
argument_list|)
operator|+
literal|" is not equal to "
operator|+
literal|"3"
argument_list|,
name|blue
operator|.
name|get
argument_list|(
literal|"numFound"
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"3"
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
name|SimpleOrderedMap
name|theSuggestions
decl_stmt|;
name|int
name|idx
init|=
name|blue
operator|.
name|indexOf
argument_list|(
literal|"suggestion"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|theSuggestions
operator|=
operator|(
name|SimpleOrderedMap
operator|)
name|blue
operator|.
name|get
argument_list|(
literal|"suggestion"
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"theSuggestion is null and it shouldn't be: "
operator|+
name|blue
argument_list|,
name|theSuggestions
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"theSuggestions Size: "
operator|+
name|theSuggestions
operator|.
name|size
argument_list|()
operator|+
literal|" is not: "
operator|+
literal|2
argument_list|,
name|theSuggestions
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|//the word and the frequency
name|idx
operator|=
name|blue
operator|.
name|indexOf
argument_list|(
literal|"suggestion"
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
name|theSuggestions
operator|=
operator|(
name|SimpleOrderedMap
operator|)
name|blue
operator|.
name|get
argument_list|(
literal|"suggestion"
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"theSuggestion is null and it shouldn't be: "
operator|+
name|blue
argument_list|,
name|theSuggestions
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"theSuggestions Size: "
operator|+
name|theSuggestions
operator|.
name|size
argument_list|()
operator|+
literal|" is not: "
operator|+
literal|2
argument_list|,
name|theSuggestions
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|//the word and the frequency
name|idx
operator|=
name|blue
operator|.
name|indexOf
argument_list|(
literal|"suggestion"
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
name|theSuggestions
operator|=
operator|(
name|SimpleOrderedMap
operator|)
name|blue
operator|.
name|get
argument_list|(
literal|"suggestion"
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"theSuggestion is null and it shouldn't be: "
operator|+
name|blue
argument_list|,
name|theSuggestions
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"theSuggestions Size: "
operator|+
name|theSuggestions
operator|.
name|size
argument_list|()
operator|+
literal|" is not: "
operator|+
literal|2
argument_list|,
name|theSuggestions
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|//the word and the frequency
name|idx
operator|=
name|blue
operator|.
name|indexOf
argument_list|(
literal|"suggestion"
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|idx
operator|+
literal|" does not equal: "
operator|+
operator|-
literal|1
argument_list|,
name|idx
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|SearchComponent
name|speller
init|=
name|core
operator|.
name|getSearchComponent
argument_list|(
literal|"spellcheck"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"speller is null and it shouldn't be"
argument_list|,
name|speller
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"spellCheckCompRH"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|SpellCheckComponent
operator|.
name|SPELLCHECK_BUILD
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
literal|"documemt"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|SpellCheckComponent
operator|.
name|COMPONENT_NAME
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|SolrRequestHandler
name|handler
init|=
name|core
operator|.
name|getRequestHandler
argument_list|(
literal|"spellCheckCompRH"
argument_list|)
decl_stmt|;
name|SolrQueryResponse
name|rsp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
name|handler
operator|.
name|handleRequest
argument_list|(
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
name|params
argument_list|)
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|NamedList
name|values
init|=
name|rsp
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|String
name|cmdExec
init|=
operator|(
name|String
operator|)
name|values
operator|.
name|get
argument_list|(
literal|"command"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"command is null and it shouldn't be"
argument_list|,
name|cmdExec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cmdExec
operator|+
literal|" is not equal to "
operator|+
literal|"build"
argument_list|,
name|cmdExec
operator|.
name|equals
argument_list|(
literal|"build"
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
name|NamedList
name|spellCheck
init|=
operator|(
name|NamedList
operator|)
name|values
operator|.
name|get
argument_list|(
literal|"spellcheck"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"spellCheck is null and it shouldn't be"
argument_list|,
name|spellCheck
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|NamedList
name|suggestions
init|=
operator|(
name|NamedList
operator|)
name|spellCheck
operator|.
name|get
argument_list|(
literal|"suggestions"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"suggestions is null and it shouldn't be"
argument_list|,
name|suggestions
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|NamedList
name|document
init|=
operator|(
name|NamedList
operator|)
name|suggestions
operator|.
name|get
argument_list|(
literal|"documemt"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|document
operator|.
name|get
argument_list|(
literal|"numFound"
argument_list|)
operator|+
literal|" is not equal to "
operator|+
literal|"1"
argument_list|,
name|document
operator|.
name|get
argument_list|(
literal|"numFound"
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"1"
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|document
operator|.
name|get
argument_list|(
literal|"startOffset"
argument_list|)
operator|+
literal|" is not equal to "
operator|+
literal|"0"
argument_list|,
name|document
operator|.
name|get
argument_list|(
literal|"startOffset"
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"0"
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|document
operator|.
name|get
argument_list|(
literal|"endOffset"
argument_list|)
operator|+
literal|" is not equal to "
operator|+
literal|"documemt"
operator|.
name|length
argument_list|()
argument_list|,
name|document
operator|.
name|get
argument_list|(
literal|"endOffset"
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
literal|"documemt"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|theSuggestion
init|=
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|document
operator|.
name|get
argument_list|(
literal|"suggestion"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"theSuggestion is null and it shouldn't be: "
operator|+
name|document
argument_list|,
name|theSuggestion
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"theSuggestion Size: "
operator|+
name|theSuggestion
operator|.
name|size
argument_list|()
operator|+
literal|" is not: "
operator|+
literal|1
argument_list|,
name|theSuggestion
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|theSuggestion
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|+
literal|" is not equal to "
operator|+
literal|"document"
argument_list|,
name|theSuggestion
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|equals
argument_list|(
literal|"document"
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testCollate
specifier|public
name|void
name|testCollate
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|SearchComponent
name|speller
init|=
name|core
operator|.
name|getSearchComponent
argument_list|(
literal|"spellcheck"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"speller is null and it shouldn't be"
argument_list|,
name|speller
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"spellCheckCompRH"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|SpellCheckComponent
operator|.
name|SPELLCHECK_BUILD
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
literal|"documemt"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|SpellCheckComponent
operator|.
name|COMPONENT_NAME
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|SpellCheckComponent
operator|.
name|SPELLCHECK_COLLATE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|SolrRequestHandler
name|handler
init|=
name|core
operator|.
name|getRequestHandler
argument_list|(
literal|"spellCheckCompRH"
argument_list|)
decl_stmt|;
name|SolrQueryResponse
name|rsp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"responseHeader"
argument_list|,
operator|new
name|SimpleOrderedMap
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|handleRequest
argument_list|(
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
name|params
argument_list|)
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|NamedList
name|values
init|=
name|rsp
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|NamedList
name|spellCheck
init|=
operator|(
name|NamedList
operator|)
name|values
operator|.
name|get
argument_list|(
literal|"spellcheck"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"spellCheck is null and it shouldn't be"
argument_list|,
name|spellCheck
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|NamedList
name|suggestions
init|=
operator|(
name|NamedList
operator|)
name|spellCheck
operator|.
name|get
argument_list|(
literal|"suggestions"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"suggestions is null and it shouldn't be"
argument_list|,
name|suggestions
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|String
name|collation
init|=
operator|(
name|String
operator|)
name|suggestions
operator|.
name|get
argument_list|(
literal|"collation"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"collation is null and it shouldn't be"
argument_list|,
name|collation
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|collation
operator|+
literal|" is not equal to "
operator|+
literal|"document"
argument_list|,
name|collation
operator|.
name|equals
argument_list|(
literal|"document"
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
name|params
operator|.
name|remove
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
literal|"documemt lowerfilt:broen^4"
argument_list|)
expr_stmt|;
name|handler
operator|=
name|core
operator|.
name|getRequestHandler
argument_list|(
literal|"spellCheckCompRH"
argument_list|)
expr_stmt|;
name|rsp
operator|=
operator|new
name|SolrQueryResponse
argument_list|()
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"responseHeader"
argument_list|,
operator|new
name|SimpleOrderedMap
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|handleRequest
argument_list|(
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
name|params
argument_list|)
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|values
operator|=
name|rsp
operator|.
name|getValues
argument_list|()
expr_stmt|;
name|spellCheck
operator|=
operator|(
name|NamedList
operator|)
name|values
operator|.
name|get
argument_list|(
literal|"spellcheck"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"spellCheck is null and it shouldn't be"
argument_list|,
name|spellCheck
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|suggestions
operator|=
operator|(
name|NamedList
operator|)
name|spellCheck
operator|.
name|get
argument_list|(
literal|"suggestions"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"suggestions is null and it shouldn't be"
argument_list|,
name|suggestions
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|collation
operator|=
operator|(
name|String
operator|)
name|suggestions
operator|.
name|get
argument_list|(
literal|"collation"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"collation is null and it shouldn't be"
argument_list|,
name|collation
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|collation
operator|+
literal|" is not equal to "
operator|+
literal|"document lowerfilt:brown^4"
argument_list|,
name|collation
operator|.
name|equals
argument_list|(
literal|"document lowerfilt:brown^4"
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
name|params
operator|.
name|remove
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
literal|"documemtsss broens"
argument_list|)
expr_stmt|;
name|handler
operator|=
name|core
operator|.
name|getRequestHandler
argument_list|(
literal|"spellCheckCompRH"
argument_list|)
expr_stmt|;
name|rsp
operator|=
operator|new
name|SolrQueryResponse
argument_list|()
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"responseHeader"
argument_list|,
operator|new
name|SimpleOrderedMap
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|handleRequest
argument_list|(
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
name|params
argument_list|)
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|values
operator|=
name|rsp
operator|.
name|getValues
argument_list|()
expr_stmt|;
name|spellCheck
operator|=
operator|(
name|NamedList
operator|)
name|values
operator|.
name|get
argument_list|(
literal|"spellcheck"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"spellCheck is null and it shouldn't be"
argument_list|,
name|spellCheck
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|suggestions
operator|=
operator|(
name|NamedList
operator|)
name|spellCheck
operator|.
name|get
argument_list|(
literal|"suggestions"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"suggestions is null and it shouldn't be"
argument_list|,
name|suggestions
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|collation
operator|=
operator|(
name|String
operator|)
name|suggestions
operator|.
name|get
argument_list|(
literal|"collation"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"collation is null and it shouldn't be"
argument_list|,
name|collation
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Collation: "
operator|+
name|collation
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|collation
operator|+
literal|" is not equal to "
operator|+
literal|"document brown"
argument_list|,
name|collation
operator|.
name|equals
argument_list|(
literal|"document brown"
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testCorrectSpelling
specifier|public
name|void
name|testCorrectSpelling
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
literal|"lowerfilt:lazy lowerfilt:brown"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"spellCheckCompRH"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|SpellCheckComponent
operator|.
name|SPELLCHECK_BUILD
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|SpellCheckComponent
operator|.
name|SPELLCHECK_EXTENDED_RESULTS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|SpellCheckComponent
operator|.
name|COMPONENT_NAME
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|req
init|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
operator|new
name|MapSolrParams
argument_list|(
name|args
argument_list|)
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
literal|"Make sure correct spellings are signalled in the response"
argument_list|,
name|req
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.='1']"
argument_list|,
literal|"//*/lst[@name='suggestions']"
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
literal|"lakkle"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"spellCheckCompRH"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|SpellCheckComponent
operator|.
name|SPELLCHECK_EXTENDED_RESULTS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|SpellCheckComponent
operator|.
name|COMPONENT_NAME
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
operator|new
name|MapSolrParams
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Make sure correct spellings are signalled in the response"
argument_list|,
name|req
argument_list|,
literal|"//*[@numFound='0']"
argument_list|,
literal|"//*/lst[@name='suggestions']"
argument_list|,
literal|"//*/bool[@name='correctlySpelled'][.='false']"
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
literal|"lowerfilt:lazy"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"spellCheckCompRH"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|SpellCheckComponent
operator|.
name|SPELLCHECK_EXTENDED_RESULTS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|SpellCheckComponent
operator|.
name|COMPONENT_NAME
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
operator|new
name|MapSolrParams
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Make sure correct spellings are signalled in the response"
argument_list|,
name|req
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//*/lst[@name='suggestions']"
argument_list|,
literal|"//*/bool[@name='correctlySpelled'][.='true']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testInit
specifier|public
name|void
name|testInit
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|SpellCheckComponent
name|scc
init|=
operator|new
name|SpellCheckComponent
argument_list|()
decl_stmt|;
name|NamedList
name|args
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|NamedList
name|spellchecker
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|spellchecker
operator|.
name|add
argument_list|(
literal|"classname"
argument_list|,
name|IndexBasedSpellChecker
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|spellchecker
operator|.
name|add
argument_list|(
literal|"name"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|spellchecker
operator|.
name|add
argument_list|(
literal|"field"
argument_list|,
literal|"lowerfilt"
argument_list|)
expr_stmt|;
name|spellchecker
operator|.
name|add
argument_list|(
literal|"spellcheckIndexDir"
argument_list|,
literal|"./spellchecker"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"spellchecker"
argument_list|,
name|spellchecker
argument_list|)
expr_stmt|;
name|NamedList
name|altSC
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|altSC
operator|.
name|add
argument_list|(
literal|"classname"
argument_list|,
name|IndexBasedSpellChecker
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|altSC
operator|.
name|add
argument_list|(
literal|"name"
argument_list|,
literal|"alternate"
argument_list|)
expr_stmt|;
name|altSC
operator|.
name|add
argument_list|(
literal|"field"
argument_list|,
literal|"lowerfilt"
argument_list|)
expr_stmt|;
name|altSC
operator|.
name|add
argument_list|(
literal|"spellcheckIndexDir"
argument_list|,
literal|"./spellchecker"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"spellchecker"
argument_list|,
name|altSC
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"queryAnalyzerFieldType"
argument_list|,
literal|"lowerfilt"
argument_list|)
expr_stmt|;
name|NamedList
name|defaults
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|defaults
operator|.
name|add
argument_list|(
name|SpellCheckComponent
operator|.
name|SPELLCHECK_COLLATE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|add
argument_list|(
name|SpellCheckComponent
operator|.
name|SPELLCHECK_EXTENDED_RESULTS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|defaults
operator|.
name|add
argument_list|(
name|SpellCheckComponent
operator|.
name|SPELLCHECK_COUNT
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"defaults"
argument_list|,
name|defaults
argument_list|)
expr_stmt|;
name|scc
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|scc
operator|.
name|inform
argument_list|(
name|core
argument_list|)
expr_stmt|;
comment|//hmm, not sure what to assert here...
comment|//add the sc again and then init again, we should get an exception
name|args
operator|.
name|add
argument_list|(
literal|"spellchecker"
argument_list|,
name|spellchecker
argument_list|)
expr_stmt|;
name|scc
operator|=
operator|new
name|SpellCheckComponent
argument_list|()
expr_stmt|;
name|scc
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
try|try
block|{
name|scc
operator|.
name|inform
argument_list|(
name|core
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{      }
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testRelativeIndexDirLocation
specifier|public
name|void
name|testRelativeIndexDirLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"spellCheckCompRH"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|SpellCheckComponent
operator|.
name|SPELLCHECK_BUILD
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|SpellCheckComponent
operator|.
name|COMPONENT_NAME
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|req
init|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
operator|new
name|MapSolrParams
argument_list|(
name|args
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|indexDir
init|=
operator|new
name|File
argument_list|(
name|core
operator|.
name|getDataDir
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"spellchecker1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"spellcheckerIndexDir was not created inside the configured value for dataDir folder as configured in solrconfig.xml"
argument_list|,
name|indexDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|indexDir
operator|=
operator|new
name|File
argument_list|(
name|core
operator|.
name|getDataDir
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"spellchecker2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"spellcheckerIndexDir was not created inside the configured value for dataDir folder as configured in solrconfig.xml"
argument_list|,
name|indexDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|indexDir
operator|=
operator|new
name|File
argument_list|(
name|core
operator|.
name|getDataDir
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"spellchecker3"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"spellcheckerIndexDir was not created inside the configured value for dataDir folder as configured in solrconfig.xml"
argument_list|,
name|indexDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testReloadOnStart
specifier|public
name|void
name|testReloadOnStart
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|,
literal|"lowerfilt"
argument_list|,
literal|"This is a title"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|request
init|=
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"spellCheckCompRH"
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"spellcheck.q"
argument_list|,
literal|"ttle"
argument_list|,
literal|"spellcheck"
argument_list|,
literal|"true"
argument_list|,
literal|"spellcheck.dictionary"
argument_list|,
literal|"default"
argument_list|,
literal|"spellcheck.build"
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
name|request
argument_list|,
literal|"//arr[@name='suggestion'][.='title']"
argument_list|)
expr_stmt|;
name|NamedList
name|args
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|NamedList
name|spellchecker
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|spellchecker
operator|.
name|add
argument_list|(
name|AbstractLuceneSpellChecker
operator|.
name|DICTIONARY_NAME
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|spellchecker
operator|.
name|add
argument_list|(
name|AbstractLuceneSpellChecker
operator|.
name|FIELD
argument_list|,
literal|"lowerfilt"
argument_list|)
expr_stmt|;
name|spellchecker
operator|.
name|add
argument_list|(
name|AbstractLuceneSpellChecker
operator|.
name|INDEX_DIR
argument_list|,
literal|"spellchecker1"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"spellchecker"
argument_list|,
name|spellchecker
argument_list|)
expr_stmt|;
name|SpellCheckComponent
name|checker
init|=
operator|new
name|SpellCheckComponent
argument_list|()
decl_stmt|;
name|checker
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|checker
operator|.
name|inform
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|=
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"spellCheckCompRH"
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"spellcheck.q"
argument_list|,
literal|"ttle"
argument_list|,
literal|"spellcheck"
argument_list|,
literal|"true"
argument_list|,
literal|"spellcheck.dictionary"
argument_list|,
literal|"default"
argument_list|,
literal|"spellcheck.reload"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|ResponseBuilder
name|rb
init|=
operator|new
name|ResponseBuilder
argument_list|()
decl_stmt|;
name|rb
operator|.
name|req
operator|=
name|request
expr_stmt|;
name|rb
operator|.
name|rsp
operator|=
operator|new
name|SolrQueryResponse
argument_list|()
expr_stmt|;
name|rb
operator|.
name|components
operator|=
operator|new
name|ArrayList
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSearchComponents
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|checker
operator|.
name|prepare
argument_list|(
name|rb
argument_list|)
expr_stmt|;
try|try
block|{
name|checker
operator|.
name|process
argument_list|(
name|rb
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"NullPointerException due to reload not initializing analyzers"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testRebuildOnCommit
specifier|public
name|void
name|testRebuildOnCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"lowerfilt:lucenejavt"
argument_list|,
literal|"qt"
argument_list|,
literal|"spellCheckCompRH"
argument_list|,
literal|"spellcheck"
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
name|String
name|response
init|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"No suggestions should be returned"
argument_list|,
name|response
operator|.
name|contains
argument_list|(
literal|"lucenejava"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"11231"
argument_list|,
literal|"lowerfilt"
argument_list|,
literal|"lucenejava"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
literal|"commit"
argument_list|,
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|,
literal|"//arr[@name='suggestion'][.='lucenejava']"
argument_list|)
expr_stmt|;
block|}
comment|// TODO: add more tests for various spelling options
block|}
end_class
end_unit
