begin_unit
begin_package
DECL|package|org.apache.solr.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_class
DECL|class|HTMLStripReaderTest
specifier|public
class|class
name|HTMLStripReaderTest
extends|extends
name|TestCase
block|{
DECL|method|HTMLStripReaderTest
specifier|public
name|HTMLStripReaderTest
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|setUp
specifier|protected
name|void
name|setUp
parameter_list|()
block|{   }
DECL|method|tearDown
specifier|protected
name|void
name|tearDown
parameter_list|()
block|{    }
comment|//this is some text  here is a  link  and another  link . This is an entity:& plus a<.  Here is an&
comment|//
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|html
init|=
literal|"<div class=\"foo\">this is some text</div> here is a<a href=\"#bar\">link</a> and "
operator|+
literal|"another<a href=\"http://lucene.apache.org/\">link</a>. "
operator|+
literal|"This is an entity:&amp; plus a&lt;.  Here is an&.<!-- is a comment -->"
decl_stmt|;
name|String
name|gold
init|=
literal|"                 this is some text       here is a                link     and "
operator|+
literal|"another                                     link    . "
operator|+
literal|"This is an entity:&     plus a<   .  Here is an&.                      "
decl_stmt|;
name|HTMLStripReader
name|reader
init|=
operator|new
name|HTMLStripReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|html
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|ch
init|=
operator|-
literal|1
decl_stmt|;
name|char
index|[]
name|goldArray
init|=
name|gold
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|int
name|position
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|char
name|theChar
init|=
operator|(
name|char
operator|)
name|ch
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|theChar
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"\""
operator|+
name|theChar
operator|+
literal|"\""
operator|+
literal|" at position: "
operator|+
name|position
operator|+
literal|" does not equal: "
operator|+
name|goldArray
index|[
name|position
index|]
operator|+
literal|" Buffer so far: "
operator|+
name|builder
operator|+
literal|"<EOB>"
argument_list|,
name|theChar
operator|==
name|goldArray
index|[
name|position
index|]
argument_list|)
expr_stmt|;
name|position
operator|++
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|gold
operator|+
literal|" is not equal to "
operator|+
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
name|gold
operator|.
name|equals
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
block|}
comment|//Some sanity checks, but not a full-fledged check
DECL|method|testHTML
specifier|public
name|void
name|testHTML
parameter_list|()
throws|throws
name|Exception
block|{
name|HTMLStripReader
name|reader
init|=
operator|new
name|HTMLStripReader
argument_list|(
operator|new
name|FileReader
argument_list|(
operator|new
name|File
argument_list|(
literal|"htmlStripReaderTest.html"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|ch
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
name|String
name|str
init|=
name|builder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Entity not properly escaped"
argument_list|,
name|str
operator|.
name|indexOf
argument_list|(
literal|"&lt;"
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//there is one> in the text
name|assertTrue
argument_list|(
literal|"Forrest should have been stripped out"
argument_list|,
name|str
operator|.
name|indexOf
argument_list|(
literal|"forrest"
argument_list|)
operator|==
operator|-
literal|1
operator|&&
name|str
operator|.
name|indexOf
argument_list|(
literal|"Forrest"
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File should start with 'Welcome to Solr' after trimming"
argument_list|,
name|str
operator|.
name|trim
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Welcome to Solr"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File should start with 'Foundation.' after trimming"
argument_list|,
name|str
operator|.
name|trim
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"Foundation."
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGamma
specifier|public
name|void
name|testGamma
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"&Gamma;"
decl_stmt|;
name|String
name|gold
init|=
literal|"\u0393      "
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
literal|"reserved"
argument_list|)
expr_stmt|;
name|Reader
name|reader
init|=
operator|new
name|HTMLStripReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
argument_list|,
name|set
argument_list|)
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|ch
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
name|String
name|result
init|=
name|builder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Resu: "
operator|+
name|result
operator|+
literal|"<EOL>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Gold: "
operator|+
name|gold
operator|+
literal|"<EOL>"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|+
literal|" is not equal to "
operator|+
name|gold
operator|+
literal|"<EOS>"
argument_list|,
name|result
operator|.
name|equals
argument_list|(
name|gold
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testEntities
specifier|public
name|void
name|testEntities
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"&nbsp;&lt;foo&gt;&#61;&Gamma; bar&#x393;"
decl_stmt|;
name|String
name|gold
init|=
literal|"<   foo>    =     \u0393       bar \u0393     "
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
literal|"reserved"
argument_list|)
expr_stmt|;
name|Reader
name|reader
init|=
operator|new
name|HTMLStripReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
argument_list|,
name|set
argument_list|)
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|ch
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
name|String
name|result
init|=
name|builder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Resu: "
operator|+
name|result
operator|+
literal|"<EOL>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Gold: "
operator|+
name|gold
operator|+
literal|"<EOL>"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|+
literal|" is not equal to "
operator|+
name|gold
operator|+
literal|"<EOS>"
argument_list|,
name|result
operator|.
name|equals
argument_list|(
name|gold
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testMoreEntities
specifier|public
name|void
name|testMoreEntities
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"&nbsp;&lt;junk/&gt;&nbsp;&#33;&#64; and&#8217;"
decl_stmt|;
name|String
name|gold
init|=
literal|"<   junk/>           !     @     and â      "
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
literal|"reserved"
argument_list|)
expr_stmt|;
name|Reader
name|reader
init|=
operator|new
name|HTMLStripReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
argument_list|,
name|set
argument_list|)
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|ch
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
name|String
name|result
init|=
name|builder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Resu: "
operator|+
name|result
operator|+
literal|"<EOL>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Gold: "
operator|+
name|gold
operator|+
literal|"<EOL>"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|+
literal|" is not equal to "
operator|+
name|gold
argument_list|,
name|result
operator|.
name|equals
argument_list|(
name|gold
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testReserved
specifier|public
name|void
name|testReserved
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"aaa bbb<reserved ccc=\"ddddd\"> eeee</reserved> ffff<reserved ggg=\"hhhh\"/><other/>"
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
literal|"reserved"
argument_list|)
expr_stmt|;
name|Reader
name|reader
init|=
operator|new
name|HTMLStripReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
argument_list|,
name|set
argument_list|)
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|ch
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
name|String
name|result
init|=
name|builder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Result: "
operator|+
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Escaped tag not preserved: "
operator|+
name|result
operator|.
name|indexOf
argument_list|(
literal|"reserved"
argument_list|)
argument_list|,
name|result
operator|.
name|indexOf
argument_list|(
literal|"reserved"
argument_list|)
operator|==
literal|9
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Escaped tag not preserved: "
operator|+
name|result
operator|.
name|indexOf
argument_list|(
literal|"reserved"
argument_list|,
literal|15
argument_list|)
argument_list|,
name|result
operator|.
name|indexOf
argument_list|(
literal|"reserved"
argument_list|,
literal|15
argument_list|)
operator|==
literal|38
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Escaped tag not preserved: "
operator|+
name|result
operator|.
name|indexOf
argument_list|(
literal|"reserved"
argument_list|,
literal|41
argument_list|)
argument_list|,
name|result
operator|.
name|indexOf
argument_list|(
literal|"reserved"
argument_list|,
literal|41
argument_list|)
operator|==
literal|54
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Other tag should be removed"
argument_list|,
name|result
operator|.
name|indexOf
argument_list|(
literal|"other"
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testStrip
specifier|public
name|void
name|testStrip
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"{{aaaaaaaa|aaaaaaaaa|aaa [[aaaaaa aaaaaa]] [[aaaaaaaaa]]|aaaaaaaaa (aaaaaa)}}\n"
operator|+
literal|"{{aaaaaaaaa}}\n"
operator|+
literal|"'''aaaaaaaaa''' aa a [[aaaaaaaaa aaaaaaaaaa]] aa aaaaa aa aaaaaaaaa aaa aaaaaaaaa aaaaaaaa aa aaaaaaaaa aa aaa aaaa aa aaaaaaaaaa "
operator|+
literal|"[[aaaaaaaaaa]] ([[aa.]] \"[[aaaaa]]\"<ttt>aaaa aaaaaaaaaaaaa aaaaaaaaaa aaaa aaaaa: \"a aaaaaaaaaaa aaaa aa aaaaaaaa aa aaa aaaaaaaaa "
operator|+
literal|"aaaaa aa aaa aaaaaaaaaa aaaaaaa ''aaa aaaaaaaaaa'', aaaaaaaaa aa aaa aaaaa, aaa ''aaaaaaaaaa'', aaaaaaaaa aa aaa aaaaaaaaaaaaaa aa a aaaaaaaaa aaaaaa. aaaaaaaaaa, aaaa aaaaaaaa, "
operator|+
literal|"aaaa aa aaa aaa aaaa aaaaaaaaaa aa a aaaaaaa aaa aaaaa, aaa aaaa aa aaaaaaaa aa aaaaaaaaa'a ''a aaaaaa'' aaaaaaaaaa aa aaa aaaaa aa aaa aaa aaaaaaa aa aaaaaaaaaa aa aaaa aaa aaa "
operator|+
literal|"aaaa aa a aaaaaaaaa aaaaa aaaa aaaaaa aaa aaaaaaa aaaaaaaaa, aaa aa aaaaaaaaa, aaa aaaaa aa aaa aaaaaaaa. aaaaaaaaa aaaaaaa aaa aaaa aa aaaaaaa, aaaaaaaaaaa aaaaaaaaa aaaaaaaaa "
operator|+
literal|"aaa aaaa aaaaaaaa aa aaa aaaaa.\" -aaaaaaa, aaaa. aaaaaaaaa,"
operator|+
literal|" aaaaaaaa aaaaa aaaa, a. aa-aa</ttt>) aaa aaaaaaaaaa aaa aaaaaaaaaaa.<ttt bbbb=bbbbbbbbbbb>''aaaaaaaaa''. aaaaaaaaÂ¾aaa aaaaaaaaaa. aaaa. aaaaaaaaÂ¾aaa aaaaaaaaaa aaaaaaa aaaaaaa. "
operator|+
literal|"[[aa aaaaaa]] [[aaaa]]<tttb://ccc.cccccccccc.ccc/cc/ccccccc-ccccccc>. aaaaaaaaa aa \"a aaaaaaa aa aaaaaaaaa aaa aaaaaaaaa aaaaaaa aa aaa aaaaaa aaaa aaaaaaaaaa aa aaaa aaaaaaa aaa "
operator|+
literal|"aaaaaaaaaaa.\"</ttt><ttt dddd=dddddddddddd>''aaaaaaaaa''. aaa aaaaaaa aaaaaaaaa aaaaaaaaaaaa aa aaaaaaaaaa. aaaa. a. aa"
operator|+
literal|" \"aaaaaaaaa aa aaa aaaa aaaa a aaaaaaa aaaaaaa aaa aaaaa, aa aaaaaaaaaa, aa aaaa aaaaaaaa aaa aaaaaaaaa.\"</ttt> aaa aaaa \"aaaaaaaaa\" "
operator|+
literal|"aa [[aaaaaaaaa|aaaaaaa aaaa]] aaa [[aaaaa aaaaaaaa|aaaaa]] ''[[aaaaaaaaaa:???????|???????]]'' (\"aaaaaaa [[aaaaaa]]a\" aa \"aaaaaaa aaaaaa\")."
operator|+
literal|" aaaa \"aaaaaaaaa\", aa aaa aaaa aaaaaaa aaaaaaa, aa aaa aaaaaa aaaa aaa aaaaa aa [[aaaaaaaaa]] (aaa aaaa aaaa [[aaaaaaaaaaa aaaaaaaaa]]) aaa "
operator|+
literal|"aaaaaaaaaaa aaa aaaaaa aa aaaaaaaaa. \n"
operator|+
literal|"\n"
operator|+
literal|"aaaaa aaa a aaaaaaa aa aaaaa aaa aaaaaaaaaa aa aaaaaaaaa aaaa aaaaaaa aaaaaa aa aaaaaaaaaa.<ttt>aaaaaaaaaa, aaaa aaaaaaaaaaa. ''aaaaaaaaa: a "
operator|+
literal|"aaaaaaaaaa aa aaaaaaaaaaaaa aaaaaaaa'', aaaaaaa aaaaa aaaaaaaaaaaa, aaaa, a.a</ttt><tttt>{{aaaa aaaaaaa|aaaaaa=a.a. aaaaaa|aaaaa=aaa aaaaaaaaa "
operator|+
literal|"aaaaaaaaa aa aaaaaaaaa aaaaaaa|aaaa=aaaa|aaaaaaa=aaaaaaa aaaaaaaaa aaaaaaaaa|aaaaaa=aa|aaaaa=a|aaaaa=aaa-aaa|aaa=aa.aaaa/aaaaaa}}</ttt> aaaaaaa,"
operator|+
literal|" aaa aaaaaaaaa aaa aaa aaaaaaaaaaaa aaaa aaaaaaaaaaaaa aaa aaa aaa aa aaaa aaa aaaaaaaa aaaaaaaaa.<ttt>aaaaaa, aaaaaaa. aaaaaaaaa. a aaaaaaaaa aa "
operator|+
literal|"aaaaaaaaaaaa aaaaaaaaa aaaaaaaaaa, aaaaaaa aaaaaaa, aaaaaa a. aaa aaaaaa, aaaaaa. aaaaaaaaa aaaaaaaaaa, aaaa, a.aaa</ttt> aaaaa aaaa aaa aaaaaaaaaaa"
operator|+
literal|" aaaaa, \"aaaaa aa aa aaaaaa aaaaaaaa aaaaaaaa aaaa aaa aaaaaaaaaa aaaa, aaa aaaaa aaaaaaaaaa aaaaaaaaaa aa aaaa aaaaa a aaaaaaa [[aaaaaa aaaaaaaaaaa]].\"<ttt>aaaaaaaaa. "
operator|+
literal|"aaa aaaaaa aaaaaaaaa aa aaaaaaaaaa, aaaaaa aaaaaaaaaa aaaaa, aaaa, a. aa</ttt> aaaaaaaaa aaaaaaaa aaaaaaa aaa aaa aa aaa aaaa aaaaa aa aaaaaaaaaaaa aaa aaaaaaaaaa.<ttt>aaaaaaaa, "
operator|+
literal|"aaaaaa aaaaaaa \"aaaaaaaaa aaaaaaaa aaa aaa aaaaaaa aaaaa aaaaaaaa aa aaaaa, aaaa-aaaa\" [a. aaa]</ttt>\n"
operator|+
literal|"==aaaaaaa==\n"
operator|+
literal|"===aaa-aaaaaaaaaa aaaaaaa===\n"
operator|+
literal|"{{aaaa|aaaaaaa aa aaaaaaaaa}}\n"
operator|+
literal|"{{aaaaa aa aaaaaaaaaa}}\n"
operator|+
literal|"aaaaaaaaaa aa aaa aaaaa aaa aaaaaaaaaaaa aaaaaaaaa aaa a aaaa aaaaaaa aaaaa aa aaa aaaaaaaaa aa aaa aaaaaaaaa aaaaaaaa aa aaaaaaaaaa aaaaaaa aaaaaa. aaaa aaaaa aaaa aaaaaaaaa aaaaaa "
operator|+
literal|"aaa aa aaaaaaaa aa aaaaa aa aaa aa aaaaa aa aaa [[aaaaaa]] aaaa [[aaaaa|aaa aaa]],<ttt eeee=\"eeeeee\">aaaaa aaaaaaaaa, [aaaa://aaaaaaaa.aaaaaa.aaa/aaaaaaaaaaaaaaaaaa/aaaaaaaaa/aaaaaaaaaaaaaaaa.aaaa "
operator|+
literal|"\"aaaaaaaaa\", aaaa aaa aaaaaaaaaaaaa aaaaaaaaaa, aaaa]</ttt> aaaaaa aaaa aa a aaaaaaaaaaaaa"
operator|+
literal|" aaaaa.<ttt>{{aaaaaaa|[aaaa://aaa.aaaaaaaaaaaaaaaaa.aaa/aaa/aaaaaa/aaaaa--aaaaaaaaa.aaa]|aa.a&aaaa;[[aaaaaaaa|aaa]]"
operator|+
literal|"<!-- ggggggggggg/ggg, gggggg ggggg -->}}</aaa> [[aaaa aa aaaaaa]], aaa aaaaaaa aa [[aaaaaaaa]] aaaa aaaaaaaaaa aaaaaa aaaaa aaaaaaa aaaaaaaaa aaaaaa.<ttt ffff=\"ffffff\"/>\n"
operator|+
literal|"\n"
operator|+
literal|"aaaaaaaaa aa aaa aaaaaa aaaaa, aaaaaaa, aaa aaa aaaaa aa aaa aaaaaaa aaaaaaaaa aaaaaaa aa aaa [[aaa aa aaaaaaaaaaaaa|aaaaaaaaaaaaa]], aaaaaaaaaaaa [[aaaaaaaa]]'a aaaaaaaaa aaa aaa aaaaa "
operator|+
literal|"aaaaaaaaaa aa aaaaaaa.<ttt hhhh=hhhhhhh>''aaaaaaaaa'', aaaaaaaaaÂ¨ aaaaaaaÂ¨ aaaaaa aaaaaaaaaaaa aaaa (aa aaaaaaa) aaaa://aa.aaaaaaa.aaa.aaa Â© aaaa-aaaa aaaaaaaaa aaaaaaaaaaa. aaa aaaaaa aaaaaaaa\n"
operator|+
literal|"</ttt> aaa aaaa \"aaaaaaaaa\" aaa aaaaaaaaaa aaaa aa a aaaa aa [[aaaaa]], aaa aa aaa [[aaaaaa aaaaaaaaaa]] aaaa aaaaaa aaaa aa aaa ''aaaaaÅ½a'' aaa aaaaaaa aa aaa aaa aaaa aa a aaaaaaaa "
operator|+
literal|"aaaaa,<ttt>aaaaaaa, aaaa. ''aaaaaaaaa'', aaaaaa: aaaaaaaa aaaaa aaa., aaaa. aa. aa</ttt> aaaaaa aaa [[aaaaaaa (aaaaaaaa)|aaaaaaa]] aaaaaaa aa a \"aaaaaaaaaaaaa aaaaaaaaaa\" aa aa [[aaaaaaaa]]. "
operator|+
literal|"aa aaa aa aaaa aaaaaaaaa aaaaaaa aaaa [[aaaaaaa aaaaaa]] aaaaa aaaaaaa aaa aaaaaaaaaa, aaaaa aa aaaaaaaaaa aa aaaa aa aa aaa aaaaa aaaaaaaaaa aa aaaaaa aaaaaaaaa aaaaaaa."
operator|+
literal|"<ttt>[aaaa://aaaaa.aaaaaaaa.aaa/aaaaaaa/aaaaaa/ aaaaaaa aaaaaa] aaaaaaaa aaaaaaaaaaaa aa aaaaaaaaaa, aaaaa aaaaaaaaa aaa [[aa aaaaaaa]] [[aaaa]]; aaaaaaaaaaa aaaaaaaa aaa [[aaa aa]] [[aaaa]]</ttt>\n"
operator|+
literal|"\n"
operator|+
literal|"[[aaaaa aaaaaaaaaa]] aa ''[[aaa aaaaaaaaaaaa aa aaaaaa]]'' (aaaa) aaaa aaa aaaa [[zzzzzzz]] aa aaaaaaaa"
decl_stmt|;
name|Reader
name|reader
init|=
operator|new
name|HTMLStripReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
argument_list|)
decl_stmt|;
name|Reader
name|noStrip
init|=
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|int
name|ch
init|=
literal|0
decl_stmt|;
name|int
name|ch2
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
operator|&&
operator|(
name|ch2
operator|=
name|noStrip
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
comment|//System.out.println("char[" + i + "] = '" + (char)ch + "' NS: '" + (char)ch2 + "'" + ((ch != ch2&& (ch2 != 't' || ch2 != '<' || ch2 != '>')) ? "<<<<<<<<<<<<<<<<<<<<<<<<" : ""));
name|assertTrue
argument_list|(
name|ch
operator|+
literal|" does not equal: "
operator|+
literal|"t or< or> ::: String: "
operator|+
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
name|ch
operator|==
name|ch2
operator|||
name|ch
operator|==
literal|' '
comment|/*&& ch != '<'&& ch != '>'*/
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
DECL|method|testBufferOverflow
specifier|public
name|void
name|testBufferOverflow
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|testBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
name|HTMLStripReader
operator|.
name|DEFAULT_READ_AHEAD
operator|+
literal|50
argument_list|)
decl_stmt|;
name|testBuilder
operator|.
name|append
argument_list|(
literal|"ah<?> "
argument_list|)
expr_stmt|;
name|appendChars
argument_list|(
name|testBuilder
argument_list|,
name|HTMLStripReader
operator|.
name|DEFAULT_READ_AHEAD
operator|+
literal|500
argument_list|)
expr_stmt|;
name|processBuffer
argument_list|(
name|testBuilder
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Failed on pseudo proc. instr."
argument_list|)
expr_stmt|;
comment|//processing instructions
name|testBuilder
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|testBuilder
operator|.
name|append
argument_list|(
literal|"<!--"
argument_list|)
expr_stmt|;
comment|//comments
name|appendChars
argument_list|(
name|testBuilder
argument_list|,
literal|3
operator|*
name|HTMLStripReader
operator|.
name|DEFAULT_READ_AHEAD
operator|+
literal|500
argument_list|)
expr_stmt|;
comment|//comments have two lookaheads
name|testBuilder
operator|.
name|append
argument_list|(
literal|"-->foo"
argument_list|)
expr_stmt|;
name|processBuffer
argument_list|(
name|testBuilder
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Failed w/ comment"
argument_list|)
expr_stmt|;
name|testBuilder
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|testBuilder
operator|.
name|append
argument_list|(
literal|"<?"
argument_list|)
expr_stmt|;
name|appendChars
argument_list|(
name|testBuilder
argument_list|,
name|HTMLStripReader
operator|.
name|DEFAULT_READ_AHEAD
operator|+
literal|500
argument_list|)
expr_stmt|;
name|testBuilder
operator|.
name|append
argument_list|(
literal|"?>"
argument_list|)
expr_stmt|;
name|processBuffer
argument_list|(
name|testBuilder
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Failed with proc. instr."
argument_list|)
expr_stmt|;
name|testBuilder
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|testBuilder
operator|.
name|append
argument_list|(
literal|"<b "
argument_list|)
expr_stmt|;
name|appendChars
argument_list|(
name|testBuilder
argument_list|,
name|HTMLStripReader
operator|.
name|DEFAULT_READ_AHEAD
operator|+
literal|500
argument_list|)
expr_stmt|;
name|testBuilder
operator|.
name|append
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
name|processBuffer
argument_list|(
name|testBuilder
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Failed on tag"
argument_list|)
expr_stmt|;
block|}
DECL|method|appendChars
specifier|private
name|void
name|appendChars
parameter_list|(
name|StringBuilder
name|testBuilder
parameter_list|,
name|int
name|numChars
parameter_list|)
block|{
name|int
name|i1
init|=
name|numChars
operator|/
literal|2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|i1
condition|;
name|i
operator|++
control|)
block|{
name|testBuilder
operator|.
name|append
argument_list|(
literal|'a'
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
comment|//tack on enough to go beyond the mark readahead limit, since<?> makes HTMLStripReader think it is a processing instruction
block|}
block|}
DECL|method|processBuffer
specifier|private
name|void
name|processBuffer
parameter_list|(
name|String
name|test
parameter_list|,
name|String
name|assertMsg
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-------------------processBuffer----------"
argument_list|)
expr_stmt|;
name|Reader
name|reader
init|=
operator|new
name|HTMLStripReader
argument_list|(
operator|new
name|BufferedReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|//force the use of BufferedReader
name|int
name|ch
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"String (trimmed): "
operator|+
name|builder
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|"<EOS>"
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|assertMsg
operator|+
literal|"::: "
operator|+
name|builder
operator|.
name|toString
argument_list|()
operator|+
literal|" is not equal to "
operator|+
name|test
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|test
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testComment
specifier|public
name|void
name|testComment
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"<!--- three dashes, still a valid comment ---> "
decl_stmt|;
name|String
name|gold
init|=
literal|"                                               "
decl_stmt|;
name|Reader
name|reader
init|=
operator|new
name|HTMLStripReader
argument_list|(
operator|new
name|BufferedReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|test
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|//force the use of BufferedReader
name|int
name|ch
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|ch
operator|=
name|reader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"String: "
operator|+
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
operator|+
literal|" is not equal to "
operator|+
name|gold
operator|+
literal|"<EOS>"
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|gold
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
