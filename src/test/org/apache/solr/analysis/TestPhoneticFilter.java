begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|Encoder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|language
operator|.
name|DoubleMetaphone
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|language
operator|.
name|Metaphone
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|language
operator|.
name|RefinedSoundex
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|language
operator|.
name|Soundex
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_comment
comment|/**  * @version $Id$  */
end_comment
begin_class
DECL|class|TestPhoneticFilter
specifier|public
class|class
name|TestPhoneticFilter
extends|extends
name|BaseTokenTestCase
block|{
DECL|method|testFactory
specifier|public
name|void
name|testFactory
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|PhoneticFilterFactory
name|ff
init|=
operator|new
name|PhoneticFilterFactory
argument_list|()
decl_stmt|;
try|try
block|{
name|ff
operator|.
name|init
argument_list|(
name|solrConfig
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"missing encoder parameter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{}
name|args
operator|.
name|put
argument_list|(
name|PhoneticFilterFactory
operator|.
name|ENCODER
argument_list|,
literal|"XXX"
argument_list|)
expr_stmt|;
try|try
block|{
name|ff
operator|.
name|init
argument_list|(
name|solrConfig
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"unknown encoder parameter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{}
name|args
operator|.
name|put
argument_list|(
name|PhoneticFilterFactory
operator|.
name|ENCODER
argument_list|,
literal|"Metaphone"
argument_list|)
expr_stmt|;
name|ff
operator|.
name|init
argument_list|(
name|solrConfig
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ff
operator|.
name|encoder
operator|instanceof
name|Metaphone
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ff
operator|.
name|inject
argument_list|)
expr_stmt|;
comment|// default
name|args
operator|.
name|put
argument_list|(
name|PhoneticFilterFactory
operator|.
name|INJECT
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|ff
operator|.
name|init
argument_list|(
name|solrConfig
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ff
operator|.
name|inject
argument_list|)
expr_stmt|;
block|}
DECL|method|runner
specifier|public
name|void
name|runner
parameter_list|(
name|Encoder
name|enc
parameter_list|,
name|boolean
name|inject
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|input
init|=
operator|new
name|String
index|[]
block|{
literal|"aaa"
block|,
literal|"bbb"
block|,
literal|"ccc"
block|,
literal|"easgasg"
block|}
decl_stmt|;
name|ArrayList
argument_list|<
name|Token
argument_list|>
name|stream
init|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Token
argument_list|>
name|output
init|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|input
control|)
block|{
name|stream
operator|.
name|add
argument_list|(
operator|new
name|Token
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|inject
condition|)
block|{
name|output
operator|.
name|add
argument_list|(
operator|new
name|Token
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|add
argument_list|(
operator|new
name|Token
argument_list|(
name|enc
operator|.
name|encode
argument_list|(
name|s
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|PhoneticFilter
name|filter
init|=
operator|new
name|PhoneticFilter
argument_list|(
operator|new
name|IterTokenStream
argument_list|(
name|stream
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|,
name|enc
argument_list|,
literal|"text"
argument_list|,
name|inject
argument_list|)
decl_stmt|;
for|for
control|(
name|Token
name|t
range|:
name|output
control|)
block|{
name|Token
name|got
init|=
name|filter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|t
operator|.
name|termText
argument_list|()
argument_list|,
name|got
operator|.
name|termText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|filter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// no more tokens
block|}
DECL|method|testEncodes
specifier|public
name|void
name|testEncodes
parameter_list|()
throws|throws
name|Exception
block|{
name|runner
argument_list|(
operator|new
name|DoubleMetaphone
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runner
argument_list|(
operator|new
name|Metaphone
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runner
argument_list|(
operator|new
name|Soundex
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runner
argument_list|(
operator|new
name|RefinedSoundex
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runner
argument_list|(
operator|new
name|DoubleMetaphone
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|runner
argument_list|(
operator|new
name|Metaphone
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|runner
argument_list|(
operator|new
name|Soundex
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|runner
argument_list|(
operator|new
name|RefinedSoundex
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
