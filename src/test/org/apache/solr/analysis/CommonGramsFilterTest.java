begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|WhitespaceTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
operator|.
name|TestBufferedTokenStream
operator|.
name|AB_AAB_Stream
import|;
end_import
begin_comment
comment|/**  * Tests CommonGramsQueryFilter  */
end_comment
begin_class
DECL|class|CommonGramsFilterTest
specifier|public
class|class
name|CommonGramsFilterTest
extends|extends
name|TestCase
block|{
DECL|field|commonWords
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|commonWords
init|=
block|{
literal|"s"
block|,
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|,
literal|"d"
block|,
literal|"the"
block|,
literal|"of"
block|}
decl_stmt|;
DECL|method|testReset
specifier|public
name|void
name|testReset
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|input
init|=
literal|"How the s a brown s cow d like A B thing?"
decl_stmt|;
name|WhitespaceTokenizer
name|wt
init|=
operator|new
name|WhitespaceTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|CommonGramsFilter
name|cgf
init|=
operator|new
name|CommonGramsFilter
argument_list|(
name|wt
argument_list|,
name|commonWords
argument_list|)
decl_stmt|;
name|TermAttribute
name|term
init|=
operator|(
name|TermAttribute
operator|)
name|cgf
operator|.
name|addAttribute
argument_list|(
name|TermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cgf
operator|.
name|incrementToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"How"
argument_list|,
name|term
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cgf
operator|.
name|incrementToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"How_the"
argument_list|,
name|term
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cgf
operator|.
name|incrementToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"the"
argument_list|,
name|term
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cgf
operator|.
name|incrementToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"the_s"
argument_list|,
name|term
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
name|wt
operator|.
name|reset
argument_list|(
operator|new
name|StringReader
argument_list|(
name|input
argument_list|)
argument_list|)
expr_stmt|;
name|cgf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|cgf
operator|.
name|incrementToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"How"
argument_list|,
name|term
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCommonGramsQueryFilter
specifier|public
name|void
name|testCommonGramsQueryFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|input2expectedSet
init|=
name|initQueryMap
argument_list|()
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|i
init|=
name|input2expectedSet
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|me
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|input
init|=
name|me
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
name|me
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|message
init|=
literal|"message: input value is: "
operator|+
name|input
decl_stmt|;
name|assertEquals
argument_list|(
name|message
argument_list|,
name|expected
argument_list|,
name|testFilter
argument_list|(
name|input
argument_list|,
literal|"query"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testQueryReset
specifier|public
name|void
name|testQueryReset
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|input
init|=
literal|"How the s a brown s cow d like A B thing?"
decl_stmt|;
name|WhitespaceTokenizer
name|wt
init|=
operator|new
name|WhitespaceTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|CommonGramsFilter
name|cgf
init|=
operator|new
name|CommonGramsFilter
argument_list|(
name|wt
argument_list|,
name|commonWords
argument_list|)
decl_stmt|;
name|CommonGramsQueryFilter
name|nsf
init|=
operator|new
name|CommonGramsQueryFilter
argument_list|(
name|cgf
argument_list|)
decl_stmt|;
name|TermAttribute
name|term
init|=
operator|(
name|TermAttribute
operator|)
name|wt
operator|.
name|addAttribute
argument_list|(
name|TermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|nsf
operator|.
name|incrementToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"How_the"
argument_list|,
name|term
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nsf
operator|.
name|incrementToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"the_s"
argument_list|,
name|term
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
name|wt
operator|.
name|reset
argument_list|(
operator|new
name|StringReader
argument_list|(
name|input
argument_list|)
argument_list|)
expr_stmt|;
name|nsf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|nsf
operator|.
name|incrementToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"How_the"
argument_list|,
name|term
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCommonGramsFilter
specifier|public
name|void
name|testCommonGramsFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|input2expectedSet
init|=
name|initMap
argument_list|()
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|i
init|=
name|input2expectedSet
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|me
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|input
init|=
name|me
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
name|me
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|message
init|=
literal|"message: input value is: "
operator|+
name|input
decl_stmt|;
name|assertEquals
argument_list|(
name|message
argument_list|,
name|expected
argument_list|,
name|testFilter
argument_list|(
name|input
argument_list|,
literal|"common"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This is for testing CommonGramsQueryFilter which outputs a set of tokens    * optimized for querying with only one token at each position, either a    * unigram or a bigram It also will not return a token for the final position    * if the final word is already in the preceding bigram Example:(three    * tokens/positions in)    * "foo bar the"=>"foo:1|bar:2,bar-the:2|the:3=> "foo" "bar-the" (2 tokens    * out)    *     * @return Map<String,String>    */
DECL|method|initQueryMap
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|initQueryMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|input2expected
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Stop words used below are "of" "the" and "s"
comment|// two word queries
name|input2expected
operator|.
name|put
argument_list|(
literal|"brown fox"
argument_list|,
literal|"/brown/fox"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"the fox"
argument_list|,
literal|"/the_fox"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"fox of"
argument_list|,
literal|"/fox_of"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"of the"
argument_list|,
literal|"/of_the"
argument_list|)
expr_stmt|;
comment|// one word queries
name|input2expected
operator|.
name|put
argument_list|(
literal|"the"
argument_list|,
literal|"/the"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"/foo"
argument_list|)
expr_stmt|;
comment|// 3 word combinations s=stopword/common word n=not a stop word
name|input2expected
operator|.
name|put
argument_list|(
literal|"n n n"
argument_list|,
literal|"/n/n/n"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"quick brown fox"
argument_list|,
literal|"/quick/brown/fox"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"n n s"
argument_list|,
literal|"/n/n_s"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"quick brown the"
argument_list|,
literal|"/quick/brown_the"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"n s n"
argument_list|,
literal|"/n_s/s_n"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"quick the brown"
argument_list|,
literal|"/quick_the/the_brown"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"n s s"
argument_list|,
literal|"/n_s/s_s"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"fox of the"
argument_list|,
literal|"/fox_of/of_the"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"s n n"
argument_list|,
literal|"/s_n/n/n"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"the quick brown"
argument_list|,
literal|"/the_quick/quick/brown"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"s n s"
argument_list|,
literal|"/s_n/n_s"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"the fox of"
argument_list|,
literal|"/the_fox/fox_of"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"s s n"
argument_list|,
literal|"/s_s/s_n"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"of the fox"
argument_list|,
literal|"/of_the/the_fox"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"s s s"
argument_list|,
literal|"/s_s/s_s"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"of the of"
argument_list|,
literal|"/of_the/the_of"
argument_list|)
expr_stmt|;
return|return
name|input2expected
return|;
block|}
DECL|method|initMap
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|initMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|input2expected
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Stop words used below are "of" "the" and "s"
comment|// one word queries
name|input2expected
operator|.
name|put
argument_list|(
literal|"the"
argument_list|,
literal|"/the"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"/foo"
argument_list|)
expr_stmt|;
comment|// two word queries
name|input2expected
operator|.
name|put
argument_list|(
literal|"brown fox"
argument_list|,
literal|"/brown/fox"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"the fox"
argument_list|,
literal|"/the,the_fox/fox"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"fox of"
argument_list|,
literal|"/fox,fox_of/of"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"of the"
argument_list|,
literal|"/of,of_the/the"
argument_list|)
expr_stmt|;
comment|// 3 word combinations s=stopword/common word n=not a stop word
name|input2expected
operator|.
name|put
argument_list|(
literal|"n n n"
argument_list|,
literal|"/n/n/n"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"quick brown fox"
argument_list|,
literal|"/quick/brown/fox"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"n n s"
argument_list|,
literal|"/n/n,n_s/s"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"quick brown the"
argument_list|,
literal|"/quick/brown,brown_the/the"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"n s n"
argument_list|,
literal|"/n,n_s/s,s_n/n"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"quick the fox"
argument_list|,
literal|"/quick,quick_the/the,the_fox/fox"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"n s s"
argument_list|,
literal|"/n,n_s/s,s_s/s"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"fox of the"
argument_list|,
literal|"/fox,fox_of/of,of_the/the"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"s n n"
argument_list|,
literal|"/s,s_n/n/n"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"the quick brown"
argument_list|,
literal|"/the,the_quick/quick/brown"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"s n s"
argument_list|,
literal|"/s,s_n/n,n_s/s"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"the fox of"
argument_list|,
literal|"/the,the_fox/fox,fox_of/of"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"s s n"
argument_list|,
literal|"/s,s_s/s,s_n/n"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"of the fox"
argument_list|,
literal|"/of,of_the/the,the_fox/fox"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"s s s"
argument_list|,
literal|"/s,s_s/s,s_s/s"
argument_list|)
expr_stmt|;
name|input2expected
operator|.
name|put
argument_list|(
literal|"of the of"
argument_list|,
literal|"/of,of_the/the,the_of/of"
argument_list|)
expr_stmt|;
return|return
name|input2expected
return|;
block|}
comment|/*    * Helper methodsCopied and from CDL XTF BigramsStopFilter.java and slightly    * modified to use with CommonGrams http://xtf.wiki.sourceforge.net/    */
comment|/**    * Very simple tokenizer that breaks up a string into a series of Lucene    * {@link Token Token}s.    */
DECL|class|StringTokenStream
specifier|static
class|class
name|StringTokenStream
extends|extends
name|TokenStream
block|{
DECL|field|str
specifier|private
name|String
name|str
decl_stmt|;
DECL|field|prevEnd
specifier|private
name|int
name|prevEnd
init|=
literal|0
decl_stmt|;
DECL|field|tok
specifier|private
name|StringTokenizer
name|tok
decl_stmt|;
DECL|field|count
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
DECL|method|StringTokenStream
specifier|public
name|StringTokenStream
parameter_list|(
name|String
name|str
parameter_list|,
name|String
name|delim
parameter_list|)
block|{
name|this
operator|.
name|str
operator|=
name|str
expr_stmt|;
name|tok
operator|=
operator|new
name|StringTokenizer
argument_list|(
name|str
argument_list|,
name|delim
argument_list|)
expr_stmt|;
block|}
DECL|method|next
specifier|public
name|Token
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
return|return
literal|null
return|;
name|count
operator|++
expr_stmt|;
name|String
name|term
init|=
name|tok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|Token
name|t
init|=
operator|new
name|Token
argument_list|(
name|term
argument_list|,
name|str
operator|.
name|indexOf
argument_list|(
name|term
argument_list|,
name|prevEnd
argument_list|)
argument_list|,
name|str
operator|.
name|indexOf
argument_list|(
name|term
argument_list|,
name|prevEnd
argument_list|)
operator|+
name|term
operator|.
name|length
argument_list|()
argument_list|,
literal|"word"
argument_list|)
decl_stmt|;
name|prevEnd
operator|=
name|t
operator|.
name|endOffset
argument_list|()
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
DECL|method|testFilter
specifier|public
specifier|static
name|String
name|testFilter
parameter_list|(
name|String
name|in
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|TokenStream
name|nsf
decl_stmt|;
name|StringTokenStream
name|ts
init|=
operator|new
name|StringTokenStream
argument_list|(
name|in
argument_list|,
literal|" ."
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"query"
argument_list|)
condition|)
block|{
name|CommonGramsFilter
name|cgf
init|=
operator|new
name|CommonGramsFilter
argument_list|(
name|ts
argument_list|,
name|commonWords
argument_list|)
decl_stmt|;
name|nsf
operator|=
operator|new
name|CommonGramsQueryFilter
argument_list|(
name|cgf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nsf
operator|=
operator|new
name|CommonGramsFilter
argument_list|(
name|ts
argument_list|,
name|commonWords
argument_list|)
expr_stmt|;
block|}
name|StringBuffer
name|outBuf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Token
name|t
init|=
name|nsf
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
break|break;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|t
operator|.
name|getPositionIncrement
argument_list|()
condition|;
name|i
operator|++
control|)
name|outBuf
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|getPositionIncrement
argument_list|()
operator|==
literal|0
condition|)
name|outBuf
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|outBuf
operator|.
name|append
argument_list|(
name|t
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|out
init|=
name|outBuf
operator|.
name|toString
argument_list|()
decl_stmt|;
name|out
operator|=
name|out
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
block|}
end_class
end_unit
