begin_unit
begin_package
DECL|package|org.apache.solr.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|WhitespaceTokenizer
import|;
end_import
begin_comment
comment|/**  * HyphenatedWordsFilter test  */
end_comment
begin_class
DECL|class|TestHyphenatedWordsFilter
specifier|public
class|class
name|TestHyphenatedWordsFilter
extends|extends
name|TestCase
block|{
DECL|method|testHyphenatedWords
specifier|public
name|void
name|testHyphenatedWords
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|input
init|=
literal|"ecologi-\r\ncal devel-\r\n\r\nop compre-\u0009hensive-hands-on"
decl_stmt|;
name|String
name|outputAfterHyphenatedWordsFilter
init|=
literal|"ecological develop comprehensive-hands-on"
decl_stmt|;
comment|// first test
name|TokenStream
name|ts
init|=
operator|new
name|WhitespaceTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|ts
operator|=
operator|new
name|HyphenatedWordsFilter
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|String
name|actual
init|=
name|tsToString
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Testing HyphenatedWordsFilter"
argument_list|,
name|outputAfterHyphenatedWordsFilter
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
DECL|method|tsToString
specifier|public
specifier|static
name|String
name|tsToString
parameter_list|(
name|TokenStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuffer
name|out
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Token
name|t
init|=
name|in
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|t
condition|)
name|out
operator|.
name|append
argument_list|(
name|t
operator|.
name|termText
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|t
operator|=
name|in
operator|.
name|next
argument_list|()
init|;
literal|null
operator|!=
name|t
condition|;
name|t
operator|=
name|in
operator|.
name|next
argument_list|()
control|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|t
operator|.
name|termText
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class
end_unit
