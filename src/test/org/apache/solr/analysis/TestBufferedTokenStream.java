begin_unit
begin_comment
comment|/**  * Copyright 2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|WhitespaceTokenizer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_comment
comment|/**  * Test that BufferedTokenStream behaves as advertized in subclasses.  */
end_comment
begin_class
DECL|class|TestBufferedTokenStream
specifier|public
class|class
name|TestBufferedTokenStream
extends|extends
name|TestCase
block|{
comment|/** Example of a class implementing the rule "A" "B" => "Q" "B" */
DECL|class|AB_Q_Stream
specifier|public
specifier|static
class|class
name|AB_Q_Stream
extends|extends
name|BufferedTokenStream
block|{
DECL|method|AB_Q_Stream
specifier|public
name|AB_Q_Stream
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
DECL|method|process
specifier|protected
name|Token
name|process
parameter_list|(
name|Token
name|t
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|"A"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|termText
argument_list|()
argument_list|)
condition|)
block|{
name|Token
name|t2
init|=
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|t2
operator|!=
literal|null
operator|&&
literal|"B"
operator|.
name|equals
argument_list|(
name|t2
operator|.
name|termText
argument_list|()
argument_list|)
condition|)
name|t
operator|.
name|setTermText
argument_list|(
literal|"Q"
argument_list|)
expr_stmt|;
if|if
condition|(
name|t2
operator|!=
literal|null
condition|)
name|pushBack
argument_list|(
name|t2
argument_list|)
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
block|}
comment|/** Example of a class implementing "A" "B" => "A" "A" "B" */
DECL|class|AB_AAB_Stream
specifier|public
specifier|static
class|class
name|AB_AAB_Stream
extends|extends
name|BufferedTokenStream
block|{
DECL|method|AB_AAB_Stream
specifier|public
name|AB_AAB_Stream
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
DECL|method|process
specifier|protected
name|Token
name|process
parameter_list|(
name|Token
name|t
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|"A"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|termText
argument_list|()
argument_list|)
operator|&&
literal|"B"
operator|.
name|equals
argument_list|(
name|peek
argument_list|(
literal|1
argument_list|)
operator|.
name|termText
argument_list|()
argument_list|)
condition|)
name|write
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
DECL|method|tsToString
specifier|public
specifier|static
name|String
name|tsToString
parameter_list|(
name|TokenStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuffer
name|out
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Token
name|t
init|=
name|in
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|t
condition|)
name|out
operator|.
name|append
argument_list|(
name|t
operator|.
name|termText
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|t
operator|=
name|in
operator|.
name|next
argument_list|()
init|;
literal|null
operator|!=
name|t
condition|;
name|t
operator|=
name|in
operator|.
name|next
argument_list|()
control|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|t
operator|.
name|termText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|testABQ
specifier|public
name|void
name|testABQ
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|input
init|=
literal|"How now A B brown A cow B like A B thing?"
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|"How now Q B brown A cow B like Q B thing?"
decl_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|AB_Q_Stream
argument_list|(
operator|new
name|WhitespaceTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|input
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|actual
init|=
name|tsToString
argument_list|(
name|ts
argument_list|)
decl_stmt|;
comment|//System.out.println(actual);
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
DECL|method|testABAAB
specifier|public
name|void
name|testABAAB
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|input
init|=
literal|"How now A B brown A cow B like A B thing?"
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|"How now A A B brown A cow B like A A B thing?"
decl_stmt|;
name|TokenStream
name|ts
init|=
operator|new
name|AB_AAB_Stream
argument_list|(
operator|new
name|WhitespaceTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|input
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|actual
init|=
name|tsToString
argument_list|(
name|ts
argument_list|)
decl_stmt|;
comment|//System.out.println(actual);
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
