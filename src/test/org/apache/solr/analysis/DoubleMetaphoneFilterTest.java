begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
operator|.
name|BaseTokenTestCase
operator|.
name|IterTokenStream
import|;
end_import
begin_class
DECL|class|DoubleMetaphoneFilterTest
specifier|public
class|class
name|DoubleMetaphoneFilterTest
extends|extends
name|TestCase
block|{
DECL|method|testSize4FalseInject
specifier|public
name|void
name|testSize4FalseInject
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenStream
name|stream
init|=
operator|new
name|IterTokenStream
argument_list|(
literal|"international"
argument_list|)
decl_stmt|;
name|TokenStream
name|filter
init|=
operator|new
name|DoubleMetaphoneFilter
argument_list|(
name|stream
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Token
name|token
init|=
name|filter
operator|.
name|next
argument_list|(
operator|new
name|Token
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|token
operator|.
name|termLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ANTR"
argument_list|,
operator|new
name|String
argument_list|(
name|token
operator|.
name|termBuffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|token
operator|.
name|termLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|filter
operator|.
name|next
argument_list|(
operator|new
name|Token
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSize4TrueInject
specifier|public
name|void
name|testSize4TrueInject
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenStream
name|stream
init|=
operator|new
name|IterTokenStream
argument_list|(
literal|"international"
argument_list|)
decl_stmt|;
name|TokenStream
name|filter
init|=
operator|new
name|DoubleMetaphoneFilter
argument_list|(
name|stream
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Token
name|token
init|=
name|filter
operator|.
name|next
argument_list|(
operator|new
name|Token
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|13
argument_list|,
name|token
operator|.
name|termLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"international"
argument_list|,
operator|new
name|String
argument_list|(
name|token
operator|.
name|termBuffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|token
operator|.
name|termLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|token
operator|=
name|filter
operator|.
name|next
argument_list|(
operator|new
name|Token
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|token
operator|.
name|termLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ANTR"
argument_list|,
operator|new
name|String
argument_list|(
name|token
operator|.
name|termBuffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|token
operator|.
name|termLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|filter
operator|.
name|next
argument_list|(
operator|new
name|Token
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAlternateInjectFalse
specifier|public
name|void
name|testAlternateInjectFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenStream
name|stream
init|=
operator|new
name|IterTokenStream
argument_list|(
literal|"Kuczewski"
argument_list|)
decl_stmt|;
name|TokenStream
name|filter
init|=
operator|new
name|DoubleMetaphoneFilter
argument_list|(
name|stream
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Token
name|token
init|=
name|filter
operator|.
name|next
argument_list|(
operator|new
name|Token
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|token
operator|.
name|termLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KSSK"
argument_list|,
operator|new
name|String
argument_list|(
name|token
operator|.
name|termBuffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|token
operator|.
name|termLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|token
operator|=
name|filter
operator|.
name|next
argument_list|(
operator|new
name|Token
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|token
operator|.
name|termLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KXFS"
argument_list|,
operator|new
name|String
argument_list|(
name|token
operator|.
name|termBuffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|token
operator|.
name|termLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|filter
operator|.
name|next
argument_list|(
operator|new
name|Token
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSize8FalseInject
specifier|public
name|void
name|testSize8FalseInject
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenStream
name|stream
init|=
operator|new
name|IterTokenStream
argument_list|(
literal|"international"
argument_list|)
decl_stmt|;
name|TokenStream
name|filter
init|=
operator|new
name|DoubleMetaphoneFilter
argument_list|(
name|stream
argument_list|,
literal|8
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Token
name|token
init|=
name|filter
operator|.
name|next
argument_list|(
operator|new
name|Token
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|token
operator|.
name|termLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ANTRNXNL"
argument_list|,
operator|new
name|String
argument_list|(
name|token
operator|.
name|termBuffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|token
operator|.
name|termLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|filter
operator|.
name|next
argument_list|(
operator|new
name|Token
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNonConvertableStringsWithInject
specifier|public
name|void
name|testNonConvertableStringsWithInject
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenStream
name|stream
init|=
operator|new
name|IterTokenStream
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"12345"
block|,
literal|"#$%@#^%&"
block|}
argument_list|)
decl_stmt|;
name|TokenStream
name|filter
init|=
operator|new
name|DoubleMetaphoneFilter
argument_list|(
name|stream
argument_list|,
literal|8
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Token
name|token
init|=
name|filter
operator|.
name|next
argument_list|(
operator|new
name|Token
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|token
operator|.
name|termLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"12345"
argument_list|,
operator|new
name|String
argument_list|(
name|token
operator|.
name|termBuffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|token
operator|.
name|termLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|token
operator|=
name|filter
operator|.
name|next
argument_list|(
operator|new
name|Token
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|token
operator|.
name|termLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"#$%@#^%&"
argument_list|,
operator|new
name|String
argument_list|(
name|token
operator|.
name|termBuffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|token
operator|.
name|termLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNonConvertableStringsWithoutInject
specifier|public
name|void
name|testNonConvertableStringsWithoutInject
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenStream
name|stream
init|=
operator|new
name|IterTokenStream
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"12345"
block|,
literal|"#$%@#^%&"
block|}
argument_list|)
decl_stmt|;
name|TokenStream
name|filter
init|=
operator|new
name|DoubleMetaphoneFilter
argument_list|(
name|stream
argument_list|,
literal|8
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|filter
operator|.
name|next
argument_list|(
operator|new
name|Token
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// should have something after the stream
name|stream
operator|=
operator|new
name|IterTokenStream
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"12345"
block|,
literal|"#$%@#^%&"
block|,
literal|"hello"
block|}
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|DoubleMetaphoneFilter
argument_list|(
name|stream
argument_list|,
literal|8
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|filter
operator|.
name|next
argument_list|(
operator|new
name|Token
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
