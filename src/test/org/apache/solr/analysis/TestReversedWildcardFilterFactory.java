begin_unit
begin_package
DECL|package|org.apache.solr.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|WhitespaceTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrQueryParser
import|;
end_import
begin_class
DECL|class|TestReversedWildcardFilterFactory
specifier|public
class|class
name|TestReversedWildcardFilterFactory
extends|extends
name|BaseTokenTestCase
block|{
DECL|field|args
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|factory
name|ReversedWildcardFilterFactory
name|factory
init|=
operator|new
name|ReversedWildcardFilterFactory
argument_list|()
decl_stmt|;
DECL|field|schema
name|IndexSchema
name|schema
decl_stmt|;
DECL|method|getSchemaFile
specifier|public
name|String
name|getSchemaFile
parameter_list|()
block|{
return|return
literal|"schema-reversed.xml"
return|;
block|}
DECL|method|getSolrConfigFile
specifier|public
name|String
name|getSolrConfigFile
parameter_list|()
block|{
return|return
literal|"solrconfig.xml"
return|;
block|}
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|schema
operator|=
operator|new
name|IndexSchema
argument_list|(
name|solrConfig
argument_list|,
name|getSchemaFile
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testReversedTokens
specifier|public
name|void
name|testReversedTokens
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|text
init|=
literal|"simple text"
decl_stmt|;
name|String
name|expected1
init|=
literal|"simple \u0001elpmis text \u0001txet"
decl_stmt|;
name|String
name|expected2
init|=
literal|"\u0001elpmis \u0001txet"
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"withOriginal"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|factory
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|TokenStream
name|input
init|=
name|factory
operator|.
name|create
argument_list|(
operator|new
name|WhitespaceTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|text
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Token
argument_list|>
name|realTokens
init|=
name|getTokens
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Token
argument_list|>
name|expectedTokens
init|=
name|tokens
argument_list|(
name|expected1
argument_list|)
decl_stmt|;
comment|// set positionIncrements in expected tokens
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|expectedTokens
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|expectedTokens
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|setPositionIncrement
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertTokEqual
argument_list|(
name|realTokens
argument_list|,
name|expectedTokens
argument_list|)
expr_stmt|;
comment|// now without original tokens
name|args
operator|.
name|put
argument_list|(
literal|"withOriginal"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|factory
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|input
operator|=
name|factory
operator|.
name|create
argument_list|(
operator|new
name|WhitespaceTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|text
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|realTokens
operator|=
name|getTokens
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|expectedTokens
operator|=
name|tokens
argument_list|(
name|expected2
argument_list|)
expr_stmt|;
name|assertTokEqual
argument_list|(
name|realTokens
argument_list|,
name|expectedTokens
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexingAnalysis
specifier|public
name|void
name|testIndexingAnalysis
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|a
init|=
name|schema
operator|.
name|getAnalyzer
argument_list|()
decl_stmt|;
name|String
name|text
init|=
literal|"one two three"
decl_stmt|;
name|String
name|expected1
init|=
literal|"one \u0001eno two \u0001owt three \u0001eerht"
decl_stmt|;
name|List
argument_list|<
name|Token
argument_list|>
name|expectedTokens1
init|=
name|getTokens
argument_list|(
operator|new
name|WhitespaceTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|expected1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// set positionIncrements and offsets in expected tokens
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|expectedTokens1
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|Token
name|t
init|=
name|expectedTokens1
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|t
operator|.
name|setPositionIncrement
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|String
name|expected2
init|=
literal|"\u0001eno \u0001owt \u0001eerht"
decl_stmt|;
name|List
argument_list|<
name|Token
argument_list|>
name|expectedTokens2
init|=
name|getTokens
argument_list|(
operator|new
name|WhitespaceTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|expected2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|expected3
init|=
literal|"one two three"
decl_stmt|;
name|List
argument_list|<
name|Token
argument_list|>
name|expectedTokens3
init|=
name|getTokens
argument_list|(
operator|new
name|WhitespaceTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|expected3
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// field one
name|TokenStream
name|input
init|=
name|a
operator|.
name|tokenStream
argument_list|(
literal|"one"
argument_list|,
operator|new
name|StringReader
argument_list|(
name|text
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Token
argument_list|>
name|realTokens
init|=
name|getTokens
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|assertTokEqual
argument_list|(
name|realTokens
argument_list|,
name|expectedTokens1
argument_list|)
expr_stmt|;
comment|// field two
name|input
operator|=
name|a
operator|.
name|tokenStream
argument_list|(
literal|"two"
argument_list|,
operator|new
name|StringReader
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
name|realTokens
operator|=
name|getTokens
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertTokEqual
argument_list|(
name|realTokens
argument_list|,
name|expectedTokens2
argument_list|)
expr_stmt|;
comment|// field three
name|input
operator|=
name|a
operator|.
name|tokenStream
argument_list|(
literal|"three"
argument_list|,
operator|new
name|StringReader
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
name|realTokens
operator|=
name|getTokens
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertTokEqual
argument_list|(
name|realTokens
argument_list|,
name|expectedTokens3
argument_list|)
expr_stmt|;
block|}
DECL|method|testQueryParsing
specifier|public
name|void
name|testQueryParsing
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|SolrQueryParser
name|parserOne
init|=
operator|new
name|SolrQueryParser
argument_list|(
name|schema
argument_list|,
literal|"one"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|parserOne
operator|.
name|getAllowLeadingWildcard
argument_list|()
argument_list|)
expr_stmt|;
name|SolrQueryParser
name|parserTwo
init|=
operator|new
name|SolrQueryParser
argument_list|(
name|schema
argument_list|,
literal|"two"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|parserTwo
operator|.
name|getAllowLeadingWildcard
argument_list|()
argument_list|)
expr_stmt|;
name|SolrQueryParser
name|parserThree
init|=
operator|new
name|SolrQueryParser
argument_list|(
name|schema
argument_list|,
literal|"three"
argument_list|)
decl_stmt|;
comment|// XXX note: this should be false, but for now we return true for any field,
comment|// XXX if at least one field uses the reversing
name|assertTrue
argument_list|(
name|parserThree
operator|.
name|getAllowLeadingWildcard
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|text
init|=
literal|"one +two *hree f*ur fiv*"
decl_stmt|;
name|String
name|expectedOne
init|=
literal|"one:one +one:two one:\u0001eerh* one:\u0001ru*f one:fiv*"
decl_stmt|;
name|String
name|expectedTwo
init|=
literal|"two:one +two:two two:\u0001eerh* two:\u0001ru*f two:fiv*"
decl_stmt|;
name|String
name|expectedThree
init|=
literal|"three:one +three:two three:*hree three:f*ur three:fiv*"
decl_stmt|;
name|Query
name|q
init|=
name|parserOne
operator|.
name|parse
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedOne
argument_list|,
name|q
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|=
name|parserTwo
operator|.
name|parse
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedTwo
argument_list|,
name|q
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|=
name|parserThree
operator|.
name|parse
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedThree
argument_list|,
name|q
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// test conditional reversal
name|String
name|condText
init|=
literal|"*hree t*ree th*ee thr*e ?hree t?ree th?ee th?*ee "
operator|+
literal|"short*token ver*longtoken"
decl_stmt|;
name|String
name|expected
init|=
literal|"two:\u0001eerh* two:\u0001eer*t two:\u0001ee*ht "
operator|+
literal|"two:thr*e "
operator|+
literal|"two:\u0001eerh? two:\u0001eer?t "
operator|+
literal|"two:th?ee "
operator|+
literal|"two:th?*ee "
operator|+
literal|"two:short*token "
operator|+
literal|"two:\u0001nekotgnol*rev"
decl_stmt|;
name|q
operator|=
name|parserTwo
operator|.
name|parse
argument_list|(
name|condText
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|q
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
