begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/**  * @version $Id$  */
end_comment
begin_class
DECL|class|TestCapitalizationFilter
specifier|public
class|class
name|TestCapitalizationFilter
extends|extends
name|BaseTokenTestCase
block|{
DECL|method|testCapitalization
specifier|public
name|void
name|testCapitalization
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CapitalizationFilterFactory
operator|.
name|KEEP
argument_list|,
literal|"and the it BIG"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CapitalizationFilterFactory
operator|.
name|ONLY_FIRST_WORD
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|CapitalizationFilterFactory
name|factory
init|=
operator|new
name|CapitalizationFilterFactory
argument_list|()
decl_stmt|;
name|factory
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|char
index|[]
name|termBuffer
decl_stmt|;
name|termBuffer
operator|=
literal|"kiTTEN"
operator|.
name|toCharArray
argument_list|()
expr_stmt|;
name|factory
operator|.
name|processWord
argument_list|(
name|termBuffer
argument_list|,
literal|0
argument_list|,
name|termBuffer
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Kitten"
argument_list|,
operator|new
name|String
argument_list|(
name|termBuffer
argument_list|,
literal|0
argument_list|,
name|termBuffer
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|factory
operator|.
name|forceFirstLetter
operator|=
literal|true
expr_stmt|;
name|termBuffer
operator|=
literal|"and"
operator|.
name|toCharArray
argument_list|()
expr_stmt|;
name|factory
operator|.
name|processWord
argument_list|(
name|termBuffer
argument_list|,
literal|0
argument_list|,
name|termBuffer
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"And"
argument_list|,
operator|new
name|String
argument_list|(
name|termBuffer
argument_list|,
literal|0
argument_list|,
name|termBuffer
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
comment|//first is forced
name|termBuffer
operator|=
literal|"AnD"
operator|.
name|toCharArray
argument_list|()
expr_stmt|;
name|factory
operator|.
name|processWord
argument_list|(
name|termBuffer
argument_list|,
literal|0
argument_list|,
name|termBuffer
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"And"
argument_list|,
operator|new
name|String
argument_list|(
name|termBuffer
argument_list|,
literal|0
argument_list|,
name|termBuffer
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
comment|//first is forced, but it's not a keep word, either
name|factory
operator|.
name|forceFirstLetter
operator|=
literal|false
expr_stmt|;
name|termBuffer
operator|=
literal|"AnD"
operator|.
name|toCharArray
argument_list|()
expr_stmt|;
name|factory
operator|.
name|processWord
argument_list|(
name|termBuffer
argument_list|,
literal|0
argument_list|,
name|termBuffer
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"And"
argument_list|,
operator|new
name|String
argument_list|(
name|termBuffer
argument_list|,
literal|0
argument_list|,
name|termBuffer
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
comment|//first is not forced, but it's not a keep word, either
name|factory
operator|.
name|forceFirstLetter
operator|=
literal|true
expr_stmt|;
name|termBuffer
operator|=
literal|"big"
operator|.
name|toCharArray
argument_list|()
expr_stmt|;
name|factory
operator|.
name|processWord
argument_list|(
name|termBuffer
argument_list|,
literal|0
argument_list|,
name|termBuffer
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Big"
argument_list|,
operator|new
name|String
argument_list|(
name|termBuffer
argument_list|,
literal|0
argument_list|,
name|termBuffer
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|termBuffer
operator|=
literal|"BIG"
operator|.
name|toCharArray
argument_list|()
expr_stmt|;
name|factory
operator|.
name|processWord
argument_list|(
name|termBuffer
argument_list|,
literal|0
argument_list|,
name|termBuffer
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"BIG"
argument_list|,
operator|new
name|String
argument_list|(
name|termBuffer
argument_list|,
literal|0
argument_list|,
name|termBuffer
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|out
init|=
name|tsToString
argument_list|(
name|factory
operator|.
name|create
argument_list|(
operator|new
name|IterTokenStream
argument_list|(
literal|"Hello thEre my Name is Ryan"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello there my name is ryan"
argument_list|,
name|out
argument_list|)
expr_stmt|;
comment|// now each token
name|factory
operator|.
name|onlyFirstWord
operator|=
literal|false
expr_stmt|;
name|out
operator|=
name|tsToString
argument_list|(
name|factory
operator|.
name|create
argument_list|(
operator|new
name|IterTokenStream
argument_list|(
literal|"Hello thEre my Name is Ryan"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello There My Name Is Ryan"
argument_list|,
name|out
argument_list|)
expr_stmt|;
comment|// now only the long words
name|factory
operator|.
name|minWordLength
operator|=
literal|3
expr_stmt|;
name|out
operator|=
name|tsToString
argument_list|(
name|factory
operator|.
name|create
argument_list|(
operator|new
name|IterTokenStream
argument_list|(
literal|"Hello thEre my Name is Ryan"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello There my Name is Ryan"
argument_list|,
name|out
argument_list|)
expr_stmt|;
comment|// without prefix
name|out
operator|=
name|tsToString
argument_list|(
name|factory
operator|.
name|create
argument_list|(
operator|new
name|IterTokenStream
argument_list|(
literal|"McKinley"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Mckinley"
argument_list|,
name|out
argument_list|)
expr_stmt|;
comment|// Now try some prefixes
name|factory
operator|=
operator|new
name|CapitalizationFilterFactory
argument_list|()
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"okPrefix"
argument_list|,
literal|"McK"
argument_list|)
expr_stmt|;
comment|// all words
name|factory
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|out
operator|=
name|tsToString
argument_list|(
name|factory
operator|.
name|create
argument_list|(
operator|new
name|IterTokenStream
argument_list|(
literal|"McKinley"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"McKinley"
argument_list|,
name|out
argument_list|)
expr_stmt|;
comment|// now try some stuff with numbers
name|factory
operator|.
name|forceFirstLetter
operator|=
literal|false
expr_stmt|;
name|factory
operator|.
name|onlyFirstWord
operator|=
literal|false
expr_stmt|;
name|out
operator|=
name|tsToString
argument_list|(
name|factory
operator|.
name|create
argument_list|(
operator|new
name|IterTokenStream
argument_list|(
literal|"1st 2nd third"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st 2nd Third"
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|factory
operator|.
name|forceFirstLetter
operator|=
literal|true
expr_stmt|;
name|out
operator|=
name|tsToString
argument_list|(
name|factory
operator|.
name|create
argument_list|(
operator|new
name|IterTokenStream
argument_list|(
literal|"the The the"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The The the"
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|testKeepIgnoreCase
specifier|public
name|void
name|testKeepIgnoreCase
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CapitalizationFilterFactory
operator|.
name|KEEP
argument_list|,
literal|"kitten"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CapitalizationFilterFactory
operator|.
name|KEEP_IGNORE_CASE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
name|CapitalizationFilterFactory
operator|.
name|ONLY_FIRST_WORD
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|CapitalizationFilterFactory
name|factory
init|=
operator|new
name|CapitalizationFilterFactory
argument_list|()
decl_stmt|;
name|factory
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|char
index|[]
name|termBuffer
decl_stmt|;
name|termBuffer
operator|=
literal|"kiTTEN"
operator|.
name|toCharArray
argument_list|()
expr_stmt|;
name|factory
operator|.
name|forceFirstLetter
operator|=
literal|true
expr_stmt|;
name|factory
operator|.
name|processWord
argument_list|(
name|termBuffer
argument_list|,
literal|0
argument_list|,
name|termBuffer
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KiTTEN"
argument_list|,
operator|new
name|String
argument_list|(
name|termBuffer
argument_list|,
literal|0
argument_list|,
name|termBuffer
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|factory
operator|.
name|forceFirstLetter
operator|=
literal|false
expr_stmt|;
name|termBuffer
operator|=
literal|"kiTTEN"
operator|.
name|toCharArray
argument_list|()
expr_stmt|;
name|factory
operator|.
name|processWord
argument_list|(
name|termBuffer
argument_list|,
literal|0
argument_list|,
name|termBuffer
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"kiTTEN"
argument_list|,
operator|new
name|String
argument_list|(
name|termBuffer
argument_list|,
literal|0
argument_list|,
name|termBuffer
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
