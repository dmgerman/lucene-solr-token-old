begin_unit
begin_comment
comment|/**  * Copyright 2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|WhitespaceTokenizer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_class
DECL|class|TestRemoveDuplicatesTokenFilter
specifier|public
class|class
name|TestRemoveDuplicatesTokenFilter
extends|extends
name|TestCase
block|{
DECL|method|tok
specifier|public
specifier|static
name|Token
name|tok
parameter_list|(
name|int
name|pos
parameter_list|,
name|String
name|t
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|Token
name|tok
init|=
operator|new
name|Token
argument_list|(
name|t
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
decl_stmt|;
name|tok
operator|.
name|setPositionIncrement
argument_list|(
name|pos
argument_list|)
expr_stmt|;
return|return
name|tok
return|;
block|}
DECL|method|tok
specifier|public
specifier|static
name|Token
name|tok
parameter_list|(
name|int
name|pos
parameter_list|,
name|String
name|t
parameter_list|)
block|{
return|return
name|tok
argument_list|(
name|pos
argument_list|,
name|t
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|testDups
specifier|public
name|void
name|testDups
parameter_list|(
specifier|final
name|String
name|expected
parameter_list|,
specifier|final
name|Token
modifier|...
name|tokens
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Iterator
argument_list|<
name|Token
argument_list|>
name|toks
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|tokens
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|TokenStream
name|ts
init|=
operator|new
name|RemoveDuplicatesTokenFilter
argument_list|(
operator|new
name|TokenStream
argument_list|()
block|{
specifier|public
name|Token
name|next
parameter_list|()
block|{
return|return
name|toks
operator|.
name|hasNext
argument_list|()
condition|?
name|toks
operator|.
name|next
argument_list|()
else|:
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|final
name|String
name|actual
init|=
name|TestBufferedTokenStream
operator|.
name|tsToString
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|+
literal|" != "
operator|+
name|actual
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoDups
specifier|public
name|void
name|testNoDups
parameter_list|()
throws|throws
name|Exception
block|{
name|testDups
argument_list|(
literal|"A B B C D E"
argument_list|,
name|tok
argument_list|(
literal|1
argument_list|,
literal|"A"
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|,
name|tok
argument_list|(
literal|1
argument_list|,
literal|"B"
argument_list|,
literal|5
argument_list|,
literal|10
argument_list|)
argument_list|,
name|tok
argument_list|(
literal|1
argument_list|,
literal|"B"
argument_list|,
literal|11
argument_list|,
literal|15
argument_list|)
argument_list|,
name|tok
argument_list|(
literal|1
argument_list|,
literal|"C"
argument_list|,
literal|16
argument_list|,
literal|20
argument_list|)
argument_list|,
name|tok
argument_list|(
literal|0
argument_list|,
literal|"D"
argument_list|,
literal|16
argument_list|,
literal|20
argument_list|)
argument_list|,
name|tok
argument_list|(
literal|1
argument_list|,
literal|"E"
argument_list|,
literal|21
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleDups
specifier|public
name|void
name|testSimpleDups
parameter_list|()
throws|throws
name|Exception
block|{
name|testDups
argument_list|(
literal|"A B C D E"
argument_list|,
name|tok
argument_list|(
literal|1
argument_list|,
literal|"A"
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|,
name|tok
argument_list|(
literal|1
argument_list|,
literal|"B"
argument_list|,
literal|5
argument_list|,
literal|10
argument_list|)
argument_list|,
name|tok
argument_list|(
literal|0
argument_list|,
literal|"B"
argument_list|,
literal|11
argument_list|,
literal|15
argument_list|)
argument_list|,
name|tok
argument_list|(
literal|1
argument_list|,
literal|"C"
argument_list|,
literal|16
argument_list|,
literal|20
argument_list|)
argument_list|,
name|tok
argument_list|(
literal|0
argument_list|,
literal|"D"
argument_list|,
literal|16
argument_list|,
literal|20
argument_list|)
argument_list|,
name|tok
argument_list|(
literal|1
argument_list|,
literal|"E"
argument_list|,
literal|21
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testComplexDups
specifier|public
name|void
name|testComplexDups
parameter_list|()
throws|throws
name|Exception
block|{
name|testDups
argument_list|(
literal|"A B C D E F G H I J K"
argument_list|,
name|tok
argument_list|(
literal|1
argument_list|,
literal|"A"
argument_list|)
argument_list|,
name|tok
argument_list|(
literal|1
argument_list|,
literal|"B"
argument_list|)
argument_list|,
name|tok
argument_list|(
literal|0
argument_list|,
literal|"B"
argument_list|)
argument_list|,
name|tok
argument_list|(
literal|1
argument_list|,
literal|"C"
argument_list|)
argument_list|,
name|tok
argument_list|(
literal|1
argument_list|,
literal|"D"
argument_list|)
argument_list|,
name|tok
argument_list|(
literal|0
argument_list|,
literal|"D"
argument_list|)
argument_list|,
name|tok
argument_list|(
literal|0
argument_list|,
literal|"D"
argument_list|)
argument_list|,
name|tok
argument_list|(
literal|1
argument_list|,
literal|"E"
argument_list|)
argument_list|,
name|tok
argument_list|(
literal|1
argument_list|,
literal|"F"
argument_list|)
argument_list|,
name|tok
argument_list|(
literal|0
argument_list|,
literal|"F"
argument_list|)
argument_list|,
name|tok
argument_list|(
literal|1
argument_list|,
literal|"G"
argument_list|)
argument_list|,
name|tok
argument_list|(
literal|0
argument_list|,
literal|"H"
argument_list|)
argument_list|,
name|tok
argument_list|(
literal|0
argument_list|,
literal|"H"
argument_list|)
argument_list|,
name|tok
argument_list|(
literal|1
argument_list|,
literal|"I"
argument_list|)
argument_list|,
name|tok
argument_list|(
literal|1
argument_list|,
literal|"J"
argument_list|)
argument_list|,
name|tok
argument_list|(
literal|0
argument_list|,
literal|"K"
argument_list|)
argument_list|,
name|tok
argument_list|(
literal|0
argument_list|,
literal|"J"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
