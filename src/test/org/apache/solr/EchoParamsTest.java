begin_unit
begin_comment
comment|/**  * Copyright 2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr
package|package
name|org
operator|.
name|apache
operator|.
name|solr
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|AbstractSolrTestCase
import|;
end_import
begin_comment
comment|/** Test SOLR-59, echo of query parameters */
end_comment
begin_class
DECL|class|EchoParamsTest
specifier|public
class|class
name|EchoParamsTest
extends|extends
name|AbstractSolrTestCase
block|{
DECL|method|getSchemaFile
specifier|public
name|String
name|getSchemaFile
parameter_list|()
block|{
return|return
literal|"solr/crazy-path-to-schema.xml"
return|;
block|}
DECL|method|getSolrConfigFile
specifier|public
name|String
name|getSolrConfigFile
parameter_list|()
block|{
return|return
literal|"solr/crazy-path-to-config.xml"
return|;
block|}
DECL|field|HEADER_XPATH
specifier|private
specifier|static
specifier|final
name|String
name|HEADER_XPATH
init|=
literal|"/response/lst[@name='responseHeader']"
decl_stmt|;
DECL|method|testDefaultEchoParams
specifier|public
name|void
name|testDefaultEchoParams
parameter_list|()
block|{
name|lrf
operator|.
name|args
operator|.
name|put
argument_list|(
literal|"wt"
argument_list|,
literal|"xml"
argument_list|)
expr_stmt|;
name|lrf
operator|.
name|args
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
literal|"2.2"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|HEADER_XPATH
operator|+
literal|"/int[@name='status']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"not(//lst[@name='params'])"
argument_list|)
expr_stmt|;
block|}
DECL|method|testDefaultEchoParamsDefaultVersion
specifier|public
name|void
name|testDefaultEchoParamsDefaultVersion
parameter_list|()
block|{
name|lrf
operator|.
name|args
operator|.
name|put
argument_list|(
literal|"wt"
argument_list|,
literal|"xml"
argument_list|)
expr_stmt|;
name|lrf
operator|.
name|args
operator|.
name|remove
argument_list|(
literal|"version"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|HEADER_XPATH
operator|+
literal|"/int[@name='status']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"not(//lst[@name='params'])"
argument_list|)
expr_stmt|;
block|}
DECL|method|testExplicitEchoParams
specifier|public
name|void
name|testExplicitEchoParams
parameter_list|()
block|{
name|lrf
operator|.
name|args
operator|.
name|put
argument_list|(
literal|"wt"
argument_list|,
literal|"xml"
argument_list|)
expr_stmt|;
name|lrf
operator|.
name|args
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
literal|"2.2"
argument_list|)
expr_stmt|;
name|lrf
operator|.
name|args
operator|.
name|put
argument_list|(
literal|"echoParams"
argument_list|,
literal|"explicit"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|HEADER_XPATH
operator|+
literal|"/int[@name='status']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|HEADER_XPATH
operator|+
literal|"/lst[@name='params']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|HEADER_XPATH
operator|+
literal|"/lst[@name='params']/str[@name='wt'][.='xml']"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
