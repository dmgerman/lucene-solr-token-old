begin_unit
begin_package
DECL|package|org.apache.solr.common.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
package|;
end_package
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_class
DECL|class|TestDOMUtil
specifier|public
class|class
name|TestDOMUtil
block|{
annotation|@
name|Test
DECL|method|readFlexiSchemaNodes
specifier|public
name|void
name|readFlexiSchemaNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|xml
init|=
literal|"<root>\n"
operator|+
literal|"<a>val a</a>\n"
operator|+
literal|"<b>val b</b>\n"
operator|+
literal|"<c>\n"
operator|+
literal|"<d>val d</d>\n"
operator|+
literal|"<e>val e</e>\n"
operator|+
literal|"</c>\n"
operator|+
literal|"</root>"
decl_stmt|;
name|NamedList
name|nl
init|=
name|DOMUtil
operator|.
name|childNodesToNamedList
argument_list|(
name|getRootNode
argument_list|(
name|xml
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"val a"
argument_list|,
name|nl
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"val b"
argument_list|,
name|nl
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|NamedList
name|c
init|=
operator|(
name|NamedList
operator|)
name|nl
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"val d"
argument_list|,
name|c
operator|.
name|get
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"val e"
argument_list|,
name|c
operator|.
name|get
argument_list|(
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|readFlexiSchemaNodesWithAttributes
specifier|public
name|void
name|readFlexiSchemaNodesWithAttributes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|xml
init|=
literal|"<root>\n"
operator|+
literal|"<defaults a=\"A\" b=\"B\" c=\"C\">\n"
operator|+
literal|"<x>X1</x>\n"
operator|+
literal|"<x>X2</x>\n"
operator|+
literal|"</defaults>\n"
operator|+
literal|"</root>"
decl_stmt|;
name|NamedList
name|nl
init|=
name|DOMUtil
operator|.
name|childNodesToNamedList
argument_list|(
name|getRootNode
argument_list|(
name|xml
argument_list|)
argument_list|)
decl_stmt|;
name|NamedList
name|defaults
init|=
operator|(
name|NamedList
operator|)
name|nl
operator|.
name|get
argument_list|(
literal|"defaults"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|defaults
operator|.
name|get
argument_list|(
literal|"@a"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"B"
argument_list|,
name|defaults
operator|.
name|get
argument_list|(
literal|"@b"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"C"
argument_list|,
name|defaults
operator|.
name|get
argument_list|(
literal|"@c"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"X1"
argument_list|,
name|defaults
operator|.
name|getVal
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"X2"
argument_list|,
name|defaults
operator|.
name|getVal
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|readFlexiSchemaNodesWithAttributesWithOldFormat
specifier|public
name|void
name|readFlexiSchemaNodesWithAttributesWithOldFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|xml
init|=
literal|"<root>\n"
operator|+
literal|"<defaults a=\"A\" b=\"B\" c=\"C\">\n"
operator|+
literal|"<str name=\"x\">X1</str>\n"
operator|+
literal|"<str name=\"x\">X2</str>\n"
operator|+
literal|"<bool name=\"boo\">true</bool>\n"
operator|+
literal|"</defaults>\n"
operator|+
literal|"</root>"
decl_stmt|;
name|NamedList
name|nl
init|=
name|DOMUtil
operator|.
name|childNodesToNamedList
argument_list|(
name|getRootNode
argument_list|(
name|xml
argument_list|)
argument_list|)
decl_stmt|;
name|NamedList
name|defaults
init|=
operator|(
name|NamedList
operator|)
name|nl
operator|.
name|get
argument_list|(
literal|"defaults"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|defaults
operator|.
name|get
argument_list|(
literal|"@a"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"B"
argument_list|,
name|defaults
operator|.
name|get
argument_list|(
literal|"@b"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"C"
argument_list|,
name|defaults
operator|.
name|get
argument_list|(
literal|"@c"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"X1"
argument_list|,
name|defaults
operator|.
name|getVal
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"X2"
argument_list|,
name|defaults
operator|.
name|getVal
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|defaults
operator|.
name|get
argument_list|(
literal|"boo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getRootNode
specifier|private
name|Node
name|getRootNode
parameter_list|(
name|String
name|xml
parameter_list|)
throws|throws
name|Exception
block|{
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
name|builder
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|builder
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|doc
operator|.
name|getDocumentElement
argument_list|()
return|;
block|}
block|}
end_class
end_unit
