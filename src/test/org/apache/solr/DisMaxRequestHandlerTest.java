begin_unit
begin_comment
comment|/**  * Copyright 2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr
package|package
name|org
operator|.
name|apache
operator|.
name|solr
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_comment
comment|/**  * Tests some basic functionality of the DisMaxRequestHandler  */
end_comment
begin_class
DECL|class|DisMaxRequestHandlerTest
specifier|public
class|class
name|DisMaxRequestHandlerTest
extends|extends
name|AbstractSolrTestCase
block|{
DECL|method|getSchemaFile
specifier|public
name|String
name|getSchemaFile
parameter_list|()
block|{
return|return
literal|"schema.xml"
return|;
block|}
DECL|method|getSolrConfigFile
specifier|public
name|String
name|getSolrConfigFile
parameter_list|()
block|{
return|return
literal|"solrconfig.xml"
return|;
block|}
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|lrf
operator|=
name|h
operator|.
name|getRequestFactory
argument_list|(
literal|"dismax"
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|,
literal|"version"
argument_list|,
literal|"2.0"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSomeStuff
specifier|public
name|void
name|testSomeStuff
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"666"
argument_list|,
literal|"features_t"
argument_list|,
literal|"cool and scary stuff"
argument_list|,
literal|"subject"
argument_list|,
literal|"traveling in hell"
argument_list|,
literal|"title"
argument_list|,
literal|"The Omen"
argument_list|,
literal|"weight"
argument_list|,
literal|"87.9"
argument_list|,
literal|"iind"
argument_list|,
literal|"666"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"42"
argument_list|,
literal|"features_t"
argument_list|,
literal|"cool stuff"
argument_list|,
literal|"subject"
argument_list|,
literal|"traveling the galaxy"
argument_list|,
literal|"title"
argument_list|,
literal|"Hitch Hiker's Guide to the Galaxy"
argument_list|,
literal|"weight"
argument_list|,
literal|"99.45"
argument_list|,
literal|"iind"
argument_list|,
literal|"42"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"features_t"
argument_list|,
literal|"nothing"
argument_list|,
literal|"subject"
argument_list|,
literal|"garbage"
argument_list|,
literal|"title"
argument_list|,
literal|"Most Boring Guide Ever"
argument_list|,
literal|"weight"
argument_list|,
literal|"77"
argument_list|,
literal|"iind"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8675309"
argument_list|,
literal|"features_t"
argument_list|,
literal|"Wikedly memorable chorus and stuff"
argument_list|,
literal|"subject"
argument_list|,
literal|"One Cool Hot Chick"
argument_list|,
literal|"title"
argument_list|,
literal|"Jenny"
argument_list|,
literal|"weight"
argument_list|,
literal|"97.3"
argument_list|,
literal|"iind"
argument_list|,
literal|"8675309"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"basic match"
argument_list|,
name|req
argument_list|(
literal|"guide"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"basic cross field matching, boost on same field matching"
argument_list|,
name|req
argument_list|(
literal|"cool stuff"
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][.='42']"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][.='666']"
argument_list|,
literal|"//result/doc[3]/int[@name='id'][.='8675309']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"minimum mm is three"
argument_list|,
name|req
argument_list|(
literal|"cool stuff traveling"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//result/doc[1]/int[@name='id'][. ='42']"
argument_list|,
literal|"//result/doc[2]/int[@name='id'][. ='666']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"at 4 mm allows one missing "
argument_list|,
name|req
argument_list|(
literal|"cool stuff traveling jenny"
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
