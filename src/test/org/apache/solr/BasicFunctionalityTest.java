begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr
package|package
name|org
operator|.
name|apache
operator|.
name|solr
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|AppendedSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|DefaultSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|MapSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|*
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_comment
comment|/**  * Tests some basic functionality of Solr while demonstrating good  * Best Practices for using AbstractSolrTestCase  */
end_comment
begin_class
DECL|class|BasicFunctionalityTest
specifier|public
class|class
name|BasicFunctionalityTest
extends|extends
name|AbstractSolrTestCase
block|{
DECL|method|getSchemaFile
specifier|public
name|String
name|getSchemaFile
parameter_list|()
block|{
return|return
literal|"schema.xml"
return|;
block|}
DECL|method|getSolrConfigFile
specifier|public
name|String
name|getSolrConfigFile
parameter_list|()
block|{
return|return
literal|"solrconfig.xml"
return|;
block|}
DECL|method|getCoreName
specifier|public
name|String
name|getCoreName
parameter_list|()
block|{
return|return
literal|"basic"
return|;
block|}
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// if you override setUp or tearDown, you better call
comment|// the super classes version
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// if you override setUp or tearDown, you better call
comment|// the super classes version
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
DECL|method|testIgnoredFields
specifier|public
name|void
name|testIgnoredFields
parameter_list|()
throws|throws
name|Exception
block|{
name|lrf
operator|.
name|args
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
literal|"2.0"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
literal|"adding doc with ignored field"
argument_list|,
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"42"
argument_list|,
literal|"foo_ignored"
argument_list|,
literal|"blah blah"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
literal|"commit"
argument_list|,
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// :TODO: the behavior of querying on an unindexed field should be better specified in the future.
name|assertQ
argument_list|(
literal|"query with ignored field"
argument_list|,
name|req
argument_list|(
literal|"bar_ignored:yo id:42"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//int[@name='id'][.='42']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSomeStuff
specifier|public
name|void
name|testSomeStuff
parameter_list|()
throws|throws
name|Exception
block|{
name|lrf
operator|.
name|args
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
literal|"2.0"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test query on empty index"
argument_list|,
name|req
argument_list|(
literal|"qlkciyopsbgzyvkylsjhchghjrdf"
argument_list|)
argument_list|,
literal|"//result[@numFound='0']"
argument_list|)
expr_stmt|;
comment|// test escaping of ";"
name|assertU
argument_list|(
literal|"deleting 42 for no reason at all"
argument_list|,
name|delI
argument_list|(
literal|"42"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
literal|"adding doc#42"
argument_list|,
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"42"
argument_list|,
literal|"val_s"
argument_list|,
literal|"aa;bb"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
literal|"does commit work?"
argument_list|,
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"backslash escaping semicolon"
argument_list|,
name|req
argument_list|(
literal|"id:42 AND val_s:aa\\;bb"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//int[@name='id'][.='42']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"quote escaping semicolon"
argument_list|,
name|req
argument_list|(
literal|"id:42 AND val_s:\"aa;bb\""
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//int[@name='id'][.='42']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"no escaping semicolon"
argument_list|,
name|req
argument_list|(
literal|"id:42 AND val_s:aa"
argument_list|)
argument_list|,
literal|"//*[@numFound='0']"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|delI
argument_list|(
literal|"42"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:42"
argument_list|)
argument_list|,
literal|"//*[@numFound='0']"
argument_list|)
expr_stmt|;
comment|// test allowDups default of false
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"42"
argument_list|,
literal|"val_s"
argument_list|,
literal|"AAA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"42"
argument_list|,
literal|"val_s"
argument_list|,
literal|"BBB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:42"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//str[.='BBB']"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"42"
argument_list|,
literal|"val_s"
argument_list|,
literal|"CCC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"42"
argument_list|,
literal|"val_s"
argument_list|,
literal|"DDD"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:42"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//str[.='DDD']"
argument_list|)
expr_stmt|;
comment|// test deletes
name|String
index|[]
name|adds
init|=
operator|new
name|String
index|[]
block|{
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"101"
argument_list|)
argument_list|,
literal|"allowDups"
argument_list|,
literal|"false"
argument_list|)
block|,
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"101"
argument_list|)
argument_list|,
literal|"allowDups"
argument_list|,
literal|"false"
argument_list|)
block|,
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"105"
argument_list|)
argument_list|,
literal|"allowDups"
argument_list|,
literal|"true"
argument_list|)
block|,
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"102"
argument_list|)
argument_list|,
literal|"allowDups"
argument_list|,
literal|"false"
argument_list|)
block|,
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"103"
argument_list|)
argument_list|,
literal|"allowDups"
argument_list|,
literal|"true"
argument_list|)
block|,
name|add
argument_list|(
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|"101"
argument_list|)
argument_list|,
literal|"allowDups"
argument_list|,
literal|"false"
argument_list|)
block|,     }
decl_stmt|;
for|for
control|(
name|String
name|a
range|:
name|adds
control|)
block|{
name|assertU
argument_list|(
name|a
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// test maxint
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[100 TO 110]"
argument_list|,
literal|"rows"
argument_list|,
literal|"2147483647"
argument_list|)
argument_list|,
literal|"//*[@numFound='4']"
argument_list|)
expr_stmt|;
comment|// test big limit
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[100 TO 111]"
argument_list|,
literal|"rows"
argument_list|,
literal|"1147483647"
argument_list|)
argument_list|,
literal|"//*[@numFound='4']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:[100 TO 110]"
argument_list|)
argument_list|,
literal|"//*[@numFound='4']"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|delI
argument_list|(
literal|"102"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:[100 TO 110]"
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|delI
argument_list|(
literal|"105"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:[100 TO 110]"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|delQ
argument_list|(
literal|"id:[100 TO 110]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:[100 TO 110]"
argument_list|)
argument_list|,
literal|"//*[@numFound='0']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testRequestHandlerBaseException
specifier|public
name|void
name|testRequestHandlerBaseException
parameter_list|()
block|{
specifier|final
name|String
name|tmp
init|=
literal|"BOO!"
decl_stmt|;
name|SolrRequestHandler
name|handler
init|=
operator|new
name|RequestHandlerBase
argument_list|()
block|{
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|tmp
return|;
block|}
specifier|public
name|String
name|getSourceId
parameter_list|()
block|{
return|return
name|tmp
return|;
block|}
specifier|public
name|String
name|getSource
parameter_list|()
block|{
return|return
name|tmp
return|;
block|}
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|tmp
return|;
block|}
specifier|public
name|void
name|handleRequestBody
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|tmp
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
name|handler
operator|.
name|init
argument_list|(
operator|new
name|NamedList
argument_list|()
argument_list|)
expr_stmt|;
name|SolrQueryResponse
name|rsp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|execute
argument_list|(
name|handler
argument_list|,
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
argument_list|,
operator|new
name|NamedList
argument_list|()
argument_list|)
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"should have found an exception"
argument_list|,
name|rsp
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultipleUpdatesPerAdd
specifier|public
name|void
name|testMultipleUpdatesPerAdd
parameter_list|()
block|{
comment|// big freaking kludge since the response is currently not well formed.
name|String
name|res
init|=
name|h
operator|.
name|update
argument_list|(
literal|"<add><doc><field name=\"id\">1</field></doc><doc><field name=\"id\">2</field></doc></add>"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<result status=\"0\"></result>"
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
literal|"<commit/>"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"id:[0 TO 99]"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testDocBoost
specifier|public
name|void
name|testDocBoost
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|res
init|=
name|h
operator|.
name|update
argument_list|(
literal|"<add>"
operator|+
literal|"<doc><field name=\"id\">1</field>"
operator|+
literal|"<field name=\"text\">hello</field></doc>"
operator|+
literal|"<doc boost=\"2.0\"><field name=\"id\">2</field>"
operator|+
literal|"<field name=\"text\">hello</field></doc>"
operator|+
literal|"</add>"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<result status=\"0\"></result>"
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
literal|"<commit/>"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"text:hello"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|)
expr_stmt|;
name|String
name|resp
init|=
name|h
operator|.
name|query
argument_list|(
name|lrf
operator|.
name|makeRequest
argument_list|(
literal|"q"
argument_list|,
literal|"text:hello"
argument_list|,
literal|"debugQuery"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
comment|//System.out.println(resp);
comment|// second doc ranked first
name|assertTrue
argument_list|(
name|resp
operator|.
name|indexOf
argument_list|(
literal|"\"2\""
argument_list|)
operator|<
name|resp
operator|.
name|indexOf
argument_list|(
literal|"\"1\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFieldBoost
specifier|public
name|void
name|testFieldBoost
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|res
init|=
name|h
operator|.
name|update
argument_list|(
literal|"<add>"
operator|+
literal|"<doc><field name=\"id\">1</field>"
operator|+
literal|"<field name=\"text\">hello</field></doc>"
operator|+
literal|"<doc><field name=\"id\">2</field>"
operator|+
literal|"<field boost=\"2.0\" name=\"text\">hello</field></doc>"
operator|+
literal|"</add>"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<result status=\"0\"></result>"
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
literal|"<commit/>"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"text:hello"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|)
expr_stmt|;
name|String
name|resp
init|=
name|h
operator|.
name|query
argument_list|(
name|lrf
operator|.
name|makeRequest
argument_list|(
literal|"q"
argument_list|,
literal|"text:hello"
argument_list|,
literal|"debugQuery"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
comment|//System.out.println(resp);
comment|// second doc ranked first
name|assertTrue
argument_list|(
name|resp
operator|.
name|indexOf
argument_list|(
literal|"\"2\""
argument_list|)
operator|<
name|resp
operator|.
name|indexOf
argument_list|(
literal|"\"1\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testXMLWriter
specifier|public
name|void
name|testXMLWriter
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrQueryResponse
name|rsp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"\"quoted\""
argument_list|,
literal|"\"value\""
argument_list|)
expr_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|(
literal|32000
argument_list|)
decl_stmt|;
name|XMLWriter
operator|.
name|writeResponse
argument_list|(
name|writer
argument_list|,
name|req
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|builder
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLocalSolrQueryRequestParams
specifier|public
name|void
name|testLocalSolrQueryRequestParams
parameter_list|()
block|{
name|HashMap
name|args
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"string"
argument_list|,
literal|"string value"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"array"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"array"
block|,
literal|"value"
block|}
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|req
init|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"string value"
argument_list|,
name|req
operator|.
name|getParam
argument_list|(
literal|"string"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"array"
argument_list|,
name|req
operator|.
name|getParam
argument_list|(
literal|"array"
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|stringParams
init|=
name|req
operator|.
name|getParams
argument_list|(
literal|"string"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stringParams
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"string value"
argument_list|,
name|stringParams
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|String
index|[]
name|arrayParams
init|=
name|req
operator|.
name|getParams
argument_list|(
literal|"array"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|arrayParams
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"array"
argument_list|,
name|arrayParams
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|arrayParams
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testKeywordTokenizerFactory
specifier|public
name|void
name|testKeywordTokenizerFactory
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"42"
argument_list|,
literal|"keywordtok"
argument_list|,
literal|"How nOw broWn-ish C.o.w. ?"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"stored value matches?"
argument_list|,
name|req
argument_list|(
literal|"id:42"
argument_list|)
argument_list|,
literal|"//str[.='How nOw broWn-ish C.o.w. ?']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"query on exact matches?"
argument_list|,
name|req
argument_list|(
literal|"keywordtok:\"How nOw broWn-ish C.o.w. ?\""
argument_list|)
argument_list|,
literal|"//str[.='How nOw broWn-ish C.o.w. ?']"
argument_list|)
expr_stmt|;
block|}
comment|/** @see org.apache.solr.analysis.TestRemoveDuplicatesTokenFilter */
DECL|method|testRemoveDuplicatesTokenFilter
specifier|public
name|void
name|testRemoveDuplicatesTokenFilter
parameter_list|()
block|{
name|Query
name|q
init|=
name|QueryParsing
operator|.
name|parseQuery
argument_list|(
literal|"TV"
argument_list|,
literal|"dedup"
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSchema
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"not boolean?"
argument_list|,
name|q
operator|instanceof
name|BooleanQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected number of stemmed synonym tokens"
argument_list|,
literal|2
argument_list|,
operator|(
operator|(
name|BooleanQuery
operator|)
name|q
operator|)
operator|.
name|clauses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTermVectorFields
specifier|public
name|void
name|testTermVectorFields
parameter_list|()
block|{
name|IndexSchema
name|ischema
init|=
operator|new
name|IndexSchema
argument_list|(
name|solrConfig
argument_list|,
name|getSchemaFile
argument_list|()
argument_list|)
decl_stmt|;
name|SchemaField
name|f
decl_stmt|;
comment|// Solr field type
name|Field
name|luf
decl_stmt|;
comment|// Lucene field
name|f
operator|=
name|ischema
operator|.
name|getField
argument_list|(
literal|"test_basictv"
argument_list|)
expr_stmt|;
name|luf
operator|=
name|f
operator|.
name|createField
argument_list|(
literal|"test"
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|storeTermVector
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|luf
operator|.
name|isTermVectorStored
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|=
name|ischema
operator|.
name|getField
argument_list|(
literal|"test_notv"
argument_list|)
expr_stmt|;
name|luf
operator|=
name|f
operator|.
name|createField
argument_list|(
literal|"test"
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|f
operator|.
name|storeTermVector
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|luf
operator|.
name|isTermVectorStored
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|=
name|ischema
operator|.
name|getField
argument_list|(
literal|"test_postv"
argument_list|)
expr_stmt|;
name|luf
operator|=
name|f
operator|.
name|createField
argument_list|(
literal|"test"
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|storeTermVector
argument_list|()
operator|&&
name|f
operator|.
name|storeTermPositions
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|luf
operator|.
name|isStorePositionWithTermVector
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|=
name|ischema
operator|.
name|getField
argument_list|(
literal|"test_offtv"
argument_list|)
expr_stmt|;
name|luf
operator|=
name|f
operator|.
name|createField
argument_list|(
literal|"test"
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|storeTermVector
argument_list|()
operator|&&
name|f
operator|.
name|storeTermOffsets
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|luf
operator|.
name|isStoreOffsetWithTermVector
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|=
name|ischema
operator|.
name|getField
argument_list|(
literal|"test_posofftv"
argument_list|)
expr_stmt|;
name|luf
operator|=
name|f
operator|.
name|createField
argument_list|(
literal|"test"
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|storeTermVector
argument_list|()
operator|&&
name|f
operator|.
name|storeTermPositions
argument_list|()
operator|&&
name|f
operator|.
name|storeTermOffsets
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|luf
operator|.
name|isStoreOffsetWithTermVector
argument_list|()
operator|&&
name|luf
operator|.
name|isStorePositionWithTermVector
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testSolrParams
specifier|public
name|void
name|testSolrParams
parameter_list|()
throws|throws
name|Exception
block|{
name|NamedList
name|nl
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|nl
operator|.
name|add
argument_list|(
literal|"i"
argument_list|,
literal|555
argument_list|)
expr_stmt|;
name|nl
operator|.
name|add
argument_list|(
literal|"s"
argument_list|,
literal|"bbb"
argument_list|)
expr_stmt|;
name|nl
operator|.
name|add
argument_list|(
literal|"bt"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|nl
operator|.
name|add
argument_list|(
literal|"bf"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"f.field1.i"
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"s"
argument_list|,
literal|"BBB"
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"ss"
argument_list|,
literal|"SSS"
argument_list|)
expr_stmt|;
name|LocalSolrQueryRequest
name|req
init|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
literal|null
argument_list|,
name|nl
argument_list|)
decl_stmt|;
name|SolrParams
name|p
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|get
argument_list|(
literal|"i"
argument_list|)
argument_list|,
literal|"555"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|getInt
argument_list|(
literal|"i"
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|,
literal|555
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|getInt
argument_list|(
literal|"i"
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|555
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|getInt
argument_list|(
literal|"iii"
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|getFieldParam
argument_list|(
literal|"field1"
argument_list|,
literal|"i"
argument_list|)
argument_list|,
literal|"555"
argument_list|)
expr_stmt|;
name|req
operator|.
name|setParams
argument_list|(
operator|new
name|DefaultSolrParams
argument_list|(
name|p
argument_list|,
operator|new
name|MapSolrParams
argument_list|(
name|m
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|=
name|req
operator|.
name|getParams
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|req
operator|.
name|getOriginalParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"s"
argument_list|)
argument_list|,
literal|"bbb"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|get
argument_list|(
literal|"i"
argument_list|)
argument_list|,
literal|"555"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|getInt
argument_list|(
literal|"i"
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|,
literal|555
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|getInt
argument_list|(
literal|"i"
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|555
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|getInt
argument_list|(
literal|"iii"
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|getFieldParam
argument_list|(
literal|"field1"
argument_list|,
literal|"i"
argument_list|)
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|get
argument_list|(
literal|"s"
argument_list|)
argument_list|,
literal|"bbb"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|get
argument_list|(
literal|"ss"
argument_list|)
argument_list|,
literal|"SSS"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|!
operator|!
name|p
operator|.
name|getBool
argument_list|(
literal|"bt"
argument_list|)
argument_list|,
operator|!
name|p
operator|.
name|getBool
argument_list|(
literal|"bf"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|getBool
argument_list|(
literal|"foo"
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|getBool
argument_list|(
literal|"foo"
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|!
operator|!
name|p
operator|.
name|getBool
argument_list|(
literal|"bt"
argument_list|)
argument_list|,
operator|!
name|p
operator|.
name|getBool
argument_list|(
literal|"bf"
argument_list|)
argument_list|)
expr_stmt|;
name|NamedList
name|more
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|more
operator|.
name|add
argument_list|(
literal|"s"
argument_list|,
literal|"aaa"
argument_list|)
expr_stmt|;
name|more
operator|.
name|add
argument_list|(
literal|"s"
argument_list|,
literal|"ccc"
argument_list|)
expr_stmt|;
name|more
operator|.
name|add
argument_list|(
literal|"ss"
argument_list|,
literal|"YYY"
argument_list|)
expr_stmt|;
name|more
operator|.
name|add
argument_list|(
literal|"xx"
argument_list|,
literal|"XXX"
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|AppendedSolrParams
argument_list|(
name|p
argument_list|,
name|SolrParams
operator|.
name|toSolrParams
argument_list|(
name|more
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|p
operator|.
name|getParams
argument_list|(
literal|"s"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bbb"
argument_list|,
name|p
operator|.
name|getParams
argument_list|(
literal|"s"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aaa"
argument_list|,
name|p
operator|.
name|getParams
argument_list|(
literal|"s"
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ccc"
argument_list|,
name|p
operator|.
name|getParams
argument_list|(
literal|"s"
argument_list|)
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|p
operator|.
name|getParams
argument_list|(
literal|"s"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SSS"
argument_list|,
name|p
operator|.
name|get
argument_list|(
literal|"ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XXX"
argument_list|,
name|p
operator|.
name|get
argument_list|(
literal|"xx"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDefaultFieldValues
specifier|public
name|void
name|testDefaultFieldValues
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4055"
argument_list|,
literal|"subject"
argument_list|,
literal|"Hoss the Hoss man Hostetter"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4056"
argument_list|,
literal|"intDefault"
argument_list|,
literal|"4"
argument_list|,
literal|"subject"
argument_list|,
literal|"Some Other Guy"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4057"
argument_list|,
literal|"multiDefault"
argument_list|,
literal|"a"
argument_list|,
literal|"multiDefault"
argument_list|,
literal|"b"
argument_list|,
literal|"subject"
argument_list|,
literal|"The Dude"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"everthing should have recent timestamp"
argument_list|,
name|req
argument_list|(
literal|"timestamp:[NOW-10MINUTES TO NOW]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=3]"
argument_list|,
literal|"//date[@name='timestamp']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"2 docs should have the default for multiDefault"
argument_list|,
name|req
argument_list|(
literal|"multiDefault:muLti-Default"
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|,
literal|"//arr[@name='multiDefault']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"1 doc should have it's explicit multiDefault"
argument_list|,
name|req
argument_list|(
literal|"multiDefault:a"
argument_list|)
argument_list|,
literal|"*[count(//doc)=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"2 docs should have the default for intDefault"
argument_list|,
name|req
argument_list|(
literal|"intDefault:42"
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"1 doc should have it's explicit intDefault"
argument_list|,
name|req
argument_list|(
literal|"intDefault:[3 TO 5]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=1]"
argument_list|)
expr_stmt|;
block|}
DECL|method|testConfigDefaults
specifier|public
name|void
name|testConfigDefaults
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"42"
argument_list|,
literal|"name"
argument_list|,
literal|"Zapp Brannigan"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"43"
argument_list|,
literal|"title"
argument_list|,
literal|"Democratic Order of Planets"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"44"
argument_list|,
literal|"name"
argument_list|,
literal|"The Zapper"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"45"
argument_list|,
literal|"title"
argument_list|,
literal|"25 star General"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"46"
argument_list|,
literal|"subject"
argument_list|,
literal|"Defeated the pacifists of the Gandhi nebula"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"47"
argument_list|,
literal|"text"
argument_list|,
literal|"line up and fly directly at the enemy death cannons, clogging them with wreckage!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"standard request handler returns all matches"
argument_list|,
name|req
argument_list|(
literal|"id:[42 TO 47]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=6]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"defaults handler returns fewer matches"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"qt"
argument_list|,
literal|"defaults"
argument_list|)
argument_list|,
literal|"*[count(//doc)=4]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"defaults handler includes highlighting"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"name:Zapp OR title:General"
argument_list|,
literal|"qt"
argument_list|,
literal|"defaults"
argument_list|)
argument_list|,
literal|"//lst[@name='highlighting']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleFacetCounts
specifier|public
name|void
name|testSimpleFacetCounts
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"42"
argument_list|,
literal|"trait_s"
argument_list|,
literal|"Tool"
argument_list|,
literal|"trait_s"
argument_list|,
literal|"Obnoxious"
argument_list|,
literal|"name"
argument_list|,
literal|"Zapp Brannigan"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"43"
argument_list|,
literal|"title"
argument_list|,
literal|"Democratic Order of Planets"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"44"
argument_list|,
literal|"trait_s"
argument_list|,
literal|"Tool"
argument_list|,
literal|"name"
argument_list|,
literal|"The Zapper"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"45"
argument_list|,
literal|"trait_s"
argument_list|,
literal|"Chauvinist"
argument_list|,
literal|"title"
argument_list|,
literal|"25 star General"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"46"
argument_list|,
literal|"trait_s"
argument_list|,
literal|"Obnoxious"
argument_list|,
literal|"subject"
argument_list|,
literal|"Defeated the pacifists of the Gandhi nebula"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"47"
argument_list|,
literal|"trait_s"
argument_list|,
literal|"Pig"
argument_list|,
literal|"text"
argument_list|,
literal|"line up and fly directly at the enemy death cannons, clogging them with wreckage!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"standard request handler returns all matches"
argument_list|,
name|req
argument_list|(
literal|"id:[42 TO 47]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=6]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"filter results using fq"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 46]"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[43 TO 47]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=4]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"don't filter results using blank fq"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 46]"
argument_list|,
literal|"fq"
argument_list|,
literal|" "
argument_list|)
argument_list|,
literal|"*[count(//doc)=5]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"filter results using multiple fq params"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 46]"
argument_list|,
literal|"fq"
argument_list|,
literal|"trait_s:Obnoxious"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[43 TO 47]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check counts for facet queries"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"trait_s:Obnoxious"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"id:[43 TO 47]"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"trait_s"
argument_list|)
argument_list|,
literal|"*[count(//doc)=6]"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_queries']"
argument_list|,
literal|"//lst[@name='facet_queries']/int[@name='trait_s:Obnoxious'][.='2']"
argument_list|,
literal|"//lst[@name='facet_queries']/int[@name='id:[42 TO 45]'][.='4']"
argument_list|,
literal|"//lst[@name='facet_queries']/int[@name='id:[43 TO 47]'][.='5']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']"
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='trait_s']"
argument_list|,
literal|"*[count(//lst[@name='trait_s']/int)=4]"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Tool'][.='2']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Obnoxious'][.='2']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Pig'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check counts for applied facet queries using filtering (fq)"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"trait_s"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"id:[43 TO 47]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=4]"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_queries']"
argument_list|,
literal|"//lst[@name='facet_queries']/int[@name='id:[42 TO 45]'][.='4']"
argument_list|,
literal|"//lst[@name='facet_queries']/int[@name='id:[43 TO 47]'][.='3']"
argument_list|,
literal|"*[count(//lst[@name='trait_s']/int)=4]"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Tool'][.='2']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Obnoxious'][.='1']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Chauvinist'][.='1']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Pig'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check counts with facet.zero=false&facet.missing=true using fq"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.zeros"
argument_list|,
literal|"false"
argument_list|,
literal|"f.trait_s.facet.missing"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"trait_s"
argument_list|)
argument_list|,
literal|"*[count(//doc)=4]"
argument_list|,
literal|"*[count(//lst[@name='trait_s']/int)=4]"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Tool'][.='2']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Obnoxious'][.='1']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Chauvinist'][.='1']"
argument_list|,
literal|"//lst[@name='trait_s']/int[not(@name)][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check counts with facet.mincount=1&facet.missing=true using fq"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|,
literal|"f.trait_s.facet.missing"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"trait_s"
argument_list|)
argument_list|,
literal|"*[count(//doc)=4]"
argument_list|,
literal|"*[count(//lst[@name='trait_s']/int)=4]"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Tool'][.='2']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Obnoxious'][.='1']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Chauvinist'][.='1']"
argument_list|,
literal|"//lst[@name='trait_s']/int[not(@name)][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check counts with facet.mincount=2&facet.missing=true using fq"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"2"
argument_list|,
literal|"f.trait_s.facet.missing"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"trait_s"
argument_list|)
argument_list|,
literal|"*[count(//doc)=4]"
argument_list|,
literal|"*[count(//lst[@name='trait_s']/int)=2]"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Tool'][.='2']"
argument_list|,
literal|"//lst[@name='trait_s']/int[not(@name)][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check sorted paging"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"trait_s"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"4"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='trait_s']/int)=4]"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Tool'][.='2']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Obnoxious'][.='1']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Chauvinist'][.='1']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Pig'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check sorted paging"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"trait_s"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"3"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='trait_s']/int)=3]"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Tool'][.='2']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Obnoxious'][.='1']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Chauvinist'][.='1']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testDateFacets
specifier|public
name|void
name|testDateFacets
parameter_list|()
block|{
specifier|final
name|String
name|f
init|=
literal|"bday"
decl_stmt|;
specifier|final
name|String
name|pre
init|=
literal|"//lst[@name='facet_dates']/lst[@name='"
operator|+
name|f
operator|+
literal|"']"
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|f
argument_list|,
literal|"1976-07-04T12:08:56.235Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
name|f
argument_list|,
literal|"1976-07-05T00:00:00.000Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
name|f
argument_list|,
literal|"1976-07-15T00:07:67.890Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
name|f
argument_list|,
literal|"1976-07-21T00:07:67.890Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
name|f
argument_list|,
literal|"1976-07-13T12:12:25.255Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
name|f
argument_list|,
literal|"1976-07-03T17:01:23.456Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
name|f
argument_list|,
literal|"1976-07-12T12:12:25.255Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
name|f
argument_list|,
literal|"1976-07-15T15:15:15.155Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|,
name|f
argument_list|,
literal|"1907-07-12T13:13:23.235Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|,
name|f
argument_list|,
literal|"1976-07-03T11:02:45.678Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"11"
argument_list|,
name|f
argument_list|,
literal|"1907-07-12T12:12:25.255Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"12"
argument_list|,
name|f
argument_list|,
literal|"2007-07-30T07:07:07.070Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"13"
argument_list|,
name|f
argument_list|,
literal|"1976-07-30T22:22:22.222Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"14"
argument_list|,
name|f
argument_list|,
literal|"1976-07-05T22:22:22.222Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check counts for month of facet by day"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.date"
argument_list|,
name|f
argument_list|,
literal|"facet.date.start"
argument_list|,
literal|"1976-07-01T00:00:00.000Z"
argument_list|,
literal|"facet.date.end"
argument_list|,
literal|"1976-07-01T00:00:00.000Z+1MONTH"
argument_list|,
literal|"facet.date.gap"
argument_list|,
literal|"+1DAY"
argument_list|,
literal|"facet.date.other"
argument_list|,
literal|"all"
argument_list|)
comment|// 31 days + pre+post+inner = 34
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)=34]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-01T00:00:00Z'][.='0'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-02T00:00:00Z'][.='0'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-03T00:00:00Z'][.='2'  ]"
comment|// july4th = 2 because exists doc @ 00:00:00.000 on July5
comment|// (date faceting is inclusive)
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-04T00:00:00Z'][.='2'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-05T00:00:00Z'][.='2'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-06T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-07T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-08T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-09T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-10T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-11T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-12T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-13T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-14T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-15T00:00:00Z'][.='2'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-16T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-17T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-18T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-19T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-21T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-22T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-23T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-24T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-25T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-26T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-27T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-28T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-29T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-30T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-31T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='before' ][.='2']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='after'  ][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='between'][.='11']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check hardend=false"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.date"
argument_list|,
name|f
argument_list|,
literal|"facet.date.start"
argument_list|,
literal|"1976-07-01T00:00:00.000Z"
argument_list|,
literal|"facet.date.end"
argument_list|,
literal|"1976-07-13T00:00:00.000Z"
argument_list|,
literal|"facet.date.gap"
argument_list|,
literal|"+5DAYS"
argument_list|,
literal|"facet.date.other"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.date.hardend"
argument_list|,
literal|"false"
argument_list|)
comment|// 3 gaps + pre+post+inner = 6
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)=6]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-01T00:00:00Z'][.='5'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-06T00:00:00Z'][.='0'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-11T00:00:00Z'][.='4'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='before' ][.='2']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='after'  ][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='between'][.='9']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check hardend=true"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.date"
argument_list|,
name|f
argument_list|,
literal|"facet.date.start"
argument_list|,
literal|"1976-07-01T00:00:00.000Z"
argument_list|,
literal|"facet.date.end"
argument_list|,
literal|"1976-07-13T00:00:00.000Z"
argument_list|,
literal|"facet.date.gap"
argument_list|,
literal|"+5DAYS"
argument_list|,
literal|"facet.date.other"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.date.hardend"
argument_list|,
literal|"true"
argument_list|)
comment|// 3 gaps + pre+post+inner = 6
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)=6]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-01T00:00:00Z'][.='5'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-06T00:00:00Z'][.='0'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-11T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='before' ][.='2']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='after'  ][.='6']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='between'][.='6']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFacetMultiValued
specifier|public
name|void
name|testFacetMultiValued
parameter_list|()
block|{
name|doFacets
argument_list|(
literal|"t_s"
argument_list|)
expr_stmt|;
name|doFacets
argument_list|(
literal|"t_s"
argument_list|,
literal|"facet.enum.cache.minDf"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|doFacets
argument_list|(
literal|"t_s"
argument_list|,
literal|"facet.enum.cache.minDf"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFacetSingleValued
specifier|public
name|void
name|testFacetSingleValued
parameter_list|()
block|{
name|doFacets
argument_list|(
literal|"t_s1"
argument_list|)
expr_stmt|;
block|}
DECL|method|doFacets
specifier|public
name|void
name|doFacets
parameter_list|(
name|String
name|f
parameter_list|,
name|String
modifier|...
name|params
parameter_list|)
block|{
name|String
name|pre
init|=
literal|"//lst[@name='"
operator|+
name|f
operator|+
literal|"']"
decl_stmt|;
name|String
name|notc
init|=
literal|"id:[* TO *] -"
operator|+
name|f
operator|+
literal|":C"
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|f
argument_list|,
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
name|f
argument_list|,
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
name|f
argument_list|,
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
name|f
argument_list|,
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
name|f
argument_list|,
literal|"D"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
name|f
argument_list|,
literal|"E"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
name|f
argument_list|,
literal|"E"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
name|f
argument_list|,
literal|"E"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|,
name|f
argument_list|,
literal|"F"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|,
name|f
argument_list|,
literal|"G"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"11"
argument_list|,
name|f
argument_list|,
literal|"G"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"12"
argument_list|,
name|f
argument_list|,
literal|"G"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"13"
argument_list|,
name|f
argument_list|,
literal|"G"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"14"
argument_list|,
name|f
argument_list|,
literal|"G"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check counts for unlimited facet"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=7]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='G'][.='5']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='E'][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='C'][.='2']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='A'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='B'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='D'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='F'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check counts for facet with generous limit"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=7]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='G'][.='5']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='E'][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[3][@name='C'][.='2']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='A'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='B'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='D'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='F'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check counts for limited facet"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=2]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='G'][.='5']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='E'][.='3']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check offset"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=1]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='E'][.='3']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test sorted facet paging with zero (don't count in limit)"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"fq"
argument_list|,
name|notc
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"6"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=6]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='G'][.='5']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='E'][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[3][@name='A'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[4][@name='B'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[5][@name='D'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[6][@name='F'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test sorted facet paging with zero (test offset correctness)"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"fq"
argument_list|,
name|notc
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"3"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=2]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='B'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='D'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet unsorted paging"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"fq"
argument_list|,
name|notc
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"6"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=6]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='A'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='B'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[3][@name='D'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[4][@name='E'][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[5][@name='F'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[6][@name='G'][.='5']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet unsorted paging"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"fq"
argument_list|,
name|notc
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"3"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=2]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='E'][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='F'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet unsorted paging, mincount=2"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"fq"
argument_list|,
name|notc
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=1]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='G'][.='5']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFacetPrefixMultiValued
specifier|public
name|void
name|testFacetPrefixMultiValued
parameter_list|()
block|{
name|doFacetPrefix
argument_list|(
literal|"t_s"
argument_list|)
expr_stmt|;
name|doFacetPrefix
argument_list|(
literal|"t_s"
argument_list|,
literal|"facet.enum.cache.minDf"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|doFacetPrefix
argument_list|(
literal|"t_s"
argument_list|,
literal|"facet.enum.cache.minDf"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFacetPrefixSingleValued
specifier|public
name|void
name|testFacetPrefixSingleValued
parameter_list|()
block|{
name|doFacetPrefix
argument_list|(
literal|"t_s1"
argument_list|)
expr_stmt|;
block|}
DECL|method|doFacetPrefix
specifier|public
name|void
name|doFacetPrefix
parameter_list|(
name|String
name|f
parameter_list|,
name|String
modifier|...
name|params
parameter_list|)
block|{
name|String
name|indent
init|=
literal|"on"
decl_stmt|;
name|String
name|pre
init|=
literal|"//lst[@name='"
operator|+
name|f
operator|+
literal|"']"
decl_stmt|;
name|String
name|notc
init|=
literal|"id:[* TO *] -"
operator|+
name|f
operator|+
literal|":C"
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|f
argument_list|,
literal|"AAA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
name|f
argument_list|,
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
name|f
argument_list|,
literal|"BB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
name|f
argument_list|,
literal|"BB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
name|f
argument_list|,
literal|"BBB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
name|f
argument_list|,
literal|"BBB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
name|f
argument_list|,
literal|"BBB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
name|f
argument_list|,
literal|"CC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|,
name|f
argument_list|,
literal|"CC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|,
name|f
argument_list|,
literal|"CCC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"11"
argument_list|,
name|f
argument_list|,
literal|"CCC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"12"
argument_list|,
name|f
argument_list|,
literal|"CCC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix middle, exact match first term"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"B"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=3]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='BBB'][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='BB'][.='2']"
argument_list|,
name|pre
operator|+
literal|"/int[3][@name='B'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix middle, exact match first term, unsorted"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"false"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"B"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=3]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='B'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='BB'][.='2']"
argument_list|,
name|pre
operator|+
literal|"/int[3][@name='BBB'][.='3']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix middle, exact match first term, unsorted"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"false"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"B"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=3]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='B'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='BB'][.='2']"
argument_list|,
name|pre
operator|+
literal|"/int[3][@name='BBB'][.='3']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix middle, paging"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"B"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=2]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='BB'][.='2']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='B'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix middle, paging"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"B"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=1]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='BB'][.='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix middle, paging"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"B"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=1]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='BB'][.='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix end, not exact match"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"C"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=2]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='CCC'][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='CC'][.='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix end, exact match"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"CC"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=2]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='CCC'][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='CC'][.='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix past end"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"X"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix past end"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"-1"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"X"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix at start, exact match"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"AAA"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=1]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='AAA'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix at Start, not exact match"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"AA"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=1]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='AAA'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix at Start, not exact match"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"AA"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=1]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='AAA'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix before start"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"999"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix before start"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"999"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=0]"
argument_list|)
expr_stmt|;
block|}
DECL|method|mkstr
specifier|private
name|String
name|mkstr
parameter_list|(
name|int
name|len
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|len
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
literal|65
operator|+
name|i
operator|%
literal|26
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|sb
argument_list|)
return|;
block|}
DECL|method|testCompressableFieldType
specifier|public
name|void
name|testCompressableFieldType
parameter_list|()
block|{
name|IndexSchema
name|ischema
init|=
operator|new
name|IndexSchema
argument_list|(
name|solrConfig
argument_list|,
name|getSchemaFile
argument_list|()
argument_list|)
decl_stmt|;
name|SchemaField
name|f
decl_stmt|;
comment|// Solr field type
name|Field
name|luf
decl_stmt|;
comment|// Lucene field
name|f
operator|=
name|ischema
operator|.
name|getField
argument_list|(
literal|"test_hlt"
argument_list|)
expr_stmt|;
name|luf
operator|=
name|f
operator|.
name|createField
argument_list|(
literal|"test"
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|luf
operator|.
name|isCompressed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|luf
operator|.
name|isStored
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|=
name|ischema
operator|.
name|getField
argument_list|(
literal|"test_hlt"
argument_list|)
expr_stmt|;
name|luf
operator|=
name|f
operator|.
name|createField
argument_list|(
name|mkstr
argument_list|(
literal|345
argument_list|)
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|luf
operator|.
name|isCompressed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|luf
operator|.
name|isStored
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|=
name|ischema
operator|.
name|getField
argument_list|(
literal|"test_hlt_off"
argument_list|)
expr_stmt|;
name|luf
operator|=
name|f
operator|.
name|createField
argument_list|(
name|mkstr
argument_list|(
literal|400
argument_list|)
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|luf
operator|.
name|isCompressed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|luf
operator|.
name|isStored
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNotLazyField
specifier|public
name|void
name|testNotLazyField
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
operator|new
name|Integer
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"title"
argument_list|,
literal|"keyword"
argument_list|,
literal|"test_hlt"
argument_list|,
name|mkstr
argument_list|(
literal|20000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"title:keyword"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,title,test_hlt"
argument_list|)
decl_stmt|;
name|SolrQueryResponse
name|rsp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
name|core
operator|.
name|execute
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|DocList
name|dl
init|=
operator|(
name|DocList
operator|)
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
name|d
init|=
name|req
operator|.
name|getSearcher
argument_list|()
operator|.
name|doc
argument_list|(
name|dl
operator|.
name|iterator
argument_list|()
operator|.
name|nextDoc
argument_list|()
argument_list|)
decl_stmt|;
comment|// ensure field is not lazy
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldable
argument_list|(
literal|"test_hlt"
argument_list|)
operator|instanceof
name|Field
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldable
argument_list|(
literal|"title"
argument_list|)
operator|instanceof
name|Field
argument_list|)
expr_stmt|;
block|}
DECL|method|testLazyField
specifier|public
name|void
name|testLazyField
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
operator|new
name|Integer
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"title"
argument_list|,
literal|"keyword"
argument_list|,
literal|"test_hlt"
argument_list|,
name|mkstr
argument_list|(
literal|20000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"title:keyword"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,title"
argument_list|)
decl_stmt|;
name|SolrQueryResponse
name|rsp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
name|core
operator|.
name|execute
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|DocList
name|dl
init|=
operator|(
name|DocList
operator|)
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
decl_stmt|;
name|DocIterator
name|di
init|=
name|dl
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
name|d
init|=
name|req
operator|.
name|getSearcher
argument_list|()
operator|.
name|doc
argument_list|(
name|di
operator|.
name|nextDoc
argument_list|()
argument_list|)
decl_stmt|;
comment|// ensure field is lazy
name|assertTrue
argument_list|(
operator|!
operator|(
name|d
operator|.
name|getFieldable
argument_list|(
literal|"test_hlt"
argument_list|)
operator|instanceof
name|Field
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|.
name|getFieldable
argument_list|(
literal|"title"
argument_list|)
operator|instanceof
name|Field
argument_list|)
expr_stmt|;
block|}
comment|/** @see org.apache.solr.util.DateMathParserTest */
DECL|method|testDateMath
specifier|public
name|void
name|testDateMath
parameter_list|()
block|{
comment|// testing everything from query level is hard because
comment|// time marches on ... and there is no easy way to reach into the
comment|// bowels of DateField and muck with the definition of "now"
comment|//    ...
comment|// BUT: we can test that crazy combinations of "NOW" all work correctly,
comment|// assuming the test doesn't take too long to run...
specifier|final
name|String
name|july4
init|=
literal|"1976-07-04T12:08:56.235Z"
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"bday"
argument_list|,
name|july4
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"bday"
argument_list|,
literal|"NOW"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"bday"
argument_list|,
literal|"NOW/HOUR"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"bday"
argument_list|,
literal|"NOW-30MINUTES"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"bday"
argument_list|,
literal|"NOW+30MINUTES"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"bday"
argument_list|,
literal|"NOW+2YEARS"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check math on absolute date#1"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"bday:[* TO "
operator|+
name|july4
operator|+
literal|"/SECOND]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check math on absolute date#2"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"bday:[* TO "
operator|+
name|july4
operator|+
literal|"/SECOND+1SECOND]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check math on absolute date#3"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"bday:["
operator|+
name|july4
operator|+
literal|"/SECOND TO "
operator|+
name|july4
operator|+
literal|"/SECOND+1SECOND]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check math on absolute date#4"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"bday:["
operator|+
name|july4
operator|+
literal|"/MINUTE+1MINUTE TO *]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=5]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check count for before now"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"bday:[* TO NOW]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=4]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check count for after now"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"bday:[NOW TO *]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check count for old stuff"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"bday:[* TO NOW-2YEARS]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check count for future stuff"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"bday:[NOW+1MONTH TO *]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check count for near stuff"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"bday:[NOW-1MONTH TO NOW+2HOURS]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=4]"
argument_list|)
expr_stmt|;
block|}
DECL|method|testPatternReplaceFilter
specifier|public
name|void
name|testPatternReplaceFilter
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"patternreplacefilt"
argument_list|,
literal|"My  fine-feathered friend!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"patternreplacefilt"
argument_list|,
literal|"  What's Up Doc?"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"don't find Up"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"patternreplacefilt:Up"
argument_list|)
argument_list|,
literal|"*[count(//doc)=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"find doc"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"patternreplacefilt:__What_s_Up_Doc_"
argument_list|)
argument_list|,
literal|"*[count(//doc)=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"find birds"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"patternreplacefilt:My__fine_feathered_friend_"
argument_list|)
argument_list|,
literal|"*[count(//doc)=1]"
argument_list|)
expr_stmt|;
block|}
comment|//   /** this doesn't work, but if it did, this is how we'd test it. */
comment|//   public void testOverwriteFalse() {
comment|//     assertU(adoc("id", "overwrite", "val_s", "AAA"));
comment|//     assertU(commit());
comment|//     assertU(add(doc("id", "overwrite", "val_s", "BBB")
comment|//                 ,"allowDups", "false"
comment|//                 ,"overwriteCommitted","false"
comment|//                 ,"overwritePending","false"
comment|//                 ));
comment|//     assertU(commit());
comment|//     assertQ(req("id:overwrite")
comment|//             ,"//*[@numFound='1']"
comment|//             ,"//str[.='AAA']"
comment|//             );
comment|//   }
block|}
end_class
end_unit
