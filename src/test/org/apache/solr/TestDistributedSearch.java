begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr
package|package
name|org
operator|.
name|apache
operator|.
name|solr
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CommonsHttpSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|AbstractSolrTestCase
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import
begin_comment
comment|/**  * TODO? perhaps use:  *  http://docs.codehaus.org/display/JETTY/ServletTester  * rather then open a real connection?  *  * @version $Id$  * @since solr 1.3  */
end_comment
begin_class
DECL|class|TestDistributedSearch
specifier|public
class|class
name|TestDistributedSearch
extends|extends
name|TestCase
block|{
DECL|field|r
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|testDir
name|File
name|testDir
decl_stmt|;
DECL|field|controlClient
name|SolrServer
name|controlClient
decl_stmt|;
DECL|field|controlJetty
name|JettySolrRunner
name|controlJetty
decl_stmt|;
DECL|field|clients
specifier|private
name|List
argument_list|<
name|SolrServer
argument_list|>
name|clients
init|=
operator|new
name|ArrayList
argument_list|<
name|SolrServer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|jettys
specifier|private
name|List
argument_list|<
name|JettySolrRunner
argument_list|>
name|jettys
init|=
operator|new
name|ArrayList
argument_list|<
name|JettySolrRunner
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|context
name|String
name|context
init|=
literal|"/solr"
decl_stmt|;
DECL|field|shards
name|String
name|shards
decl_stmt|;
DECL|field|id
name|String
name|id
init|=
literal|"id"
decl_stmt|;
DECL|field|t1
name|String
name|t1
init|=
literal|"a_t"
decl_stmt|;
DECL|field|i1
name|String
name|i1
init|=
literal|"a_i"
decl_stmt|;
DECL|field|oddField
name|String
name|oddField
init|=
literal|"oddField_s"
decl_stmt|;
DECL|field|missingField
name|String
name|missingField
init|=
literal|"missing_but_valid_field_t"
decl_stmt|;
DECL|field|invalidField
name|String
name|invalidField
init|=
literal|"invalid_field_not_in_schema"
decl_stmt|;
DECL|method|setUp
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.test.sys.prop1"
argument_list|,
literal|"propone"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.test.sys.prop2"
argument_list|,
literal|"proptwo"
argument_list|)
expr_stmt|;
name|testDir
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|testDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
DECL|method|tearDown
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|destroyServers
argument_list|()
expr_stmt|;
name|AbstractSolrTestCase
operator|.
name|recurseDelete
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
block|}
DECL|method|createServers
specifier|private
name|void
name|createServers
parameter_list|(
name|int
name|numShards
parameter_list|)
throws|throws
name|Exception
block|{
name|controlJetty
operator|=
name|createJetty
argument_list|(
literal|"control"
argument_list|)
expr_stmt|;
name|controlClient
operator|=
name|createNewSolrServer
argument_list|(
name|controlJetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numShards
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|JettySolrRunner
name|j
init|=
name|createJetty
argument_list|(
literal|"shard"
operator|+
name|i
argument_list|)
decl_stmt|;
name|jettys
operator|.
name|add
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|clients
operator|.
name|add
argument_list|(
name|createNewSolrServer
argument_list|(
name|j
operator|.
name|getLocalPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"localhost:"
operator|+
name|j
operator|.
name|getLocalPort
argument_list|()
operator|+
name|context
argument_list|)
expr_stmt|;
block|}
name|shards
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
DECL|method|destroyServers
specifier|private
name|void
name|destroyServers
parameter_list|()
throws|throws
name|Exception
block|{
name|controlJetty
operator|.
name|stop
argument_list|()
expr_stmt|;
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|jettys
control|)
name|jetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|clients
operator|.
name|clear
argument_list|()
expr_stmt|;
name|jettys
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|createJetty
specifier|private
name|JettySolrRunner
name|createJetty
parameter_list|(
name|String
name|dataDirName
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|subDir
init|=
operator|new
name|File
argument_list|(
name|testDir
argument_list|,
name|dataDirName
argument_list|)
decl_stmt|;
name|subDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.data.dir"
argument_list|,
name|subDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JettySolrRunner
name|jetty
init|=
operator|new
name|JettySolrRunner
argument_list|(
literal|"/solr"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|jetty
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|jetty
return|;
block|}
DECL|method|createNewSolrServer
specifier|protected
name|SolrServer
name|createNewSolrServer
parameter_list|(
name|int
name|port
parameter_list|)
block|{
try|try
block|{
comment|// setup the server...
name|String
name|url
init|=
literal|"http://localhost:"
operator|+
name|port
operator|+
name|context
decl_stmt|;
name|CommonsHttpSolrServer
name|s
init|=
operator|new
name|CommonsHttpSolrServer
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|s
operator|.
name|setConnectionTimeout
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// 1/10th sec
name|s
operator|.
name|setDefaultMaxConnectionsPerHost
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|s
operator|.
name|setMaxTotalConnections
argument_list|(
literal|100
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|index
name|void
name|index
parameter_list|(
name|Object
modifier|...
name|fields
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|doc
operator|.
name|addField
argument_list|(
call|(
name|String
call|)
argument_list|(
name|fields
index|[
name|i
index|]
argument_list|)
argument_list|,
name|fields
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|controlClient
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|int
name|which
init|=
operator|(
name|doc
operator|.
name|getField
argument_list|(
name|id
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|&
literal|0x7fffffff
operator|)
operator|%
name|clients
operator|.
name|size
argument_list|()
decl_stmt|;
name|SolrServer
name|client
init|=
name|clients
operator|.
name|get
argument_list|(
name|which
argument_list|)
decl_stmt|;
name|client
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|index_specific
name|void
name|index_specific
parameter_list|(
name|int
name|serverNumber
parameter_list|,
name|Object
modifier|...
name|fields
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|doc
operator|.
name|addField
argument_list|(
call|(
name|String
call|)
argument_list|(
name|fields
index|[
name|i
index|]
argument_list|)
argument_list|,
name|fields
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|controlClient
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|int
name|which
init|=
name|serverNumber
decl_stmt|;
name|SolrServer
name|client
init|=
name|clients
operator|.
name|get
argument_list|(
name|which
argument_list|)
decl_stmt|;
name|client
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|del
name|void
name|del
parameter_list|(
name|String
name|q
parameter_list|)
throws|throws
name|Exception
block|{
name|controlClient
operator|.
name|deleteByQuery
argument_list|(
name|q
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrServer
name|client
range|:
name|clients
control|)
block|{
name|client
operator|.
name|deleteByQuery
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
comment|// serial commit...
DECL|method|commit
name|void
name|commit
parameter_list|()
throws|throws
name|Exception
block|{
name|controlClient
operator|.
name|commit
argument_list|()
expr_stmt|;
for|for
control|(
name|SolrServer
name|client
range|:
name|clients
control|)
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|query
name|void
name|query
parameter_list|(
name|Object
modifier|...
name|q
parameter_list|)
throws|throws
name|Exception
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|q
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|params
operator|.
name|add
argument_list|(
name|q
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|q
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QueryResponse
name|controlRsp
init|=
name|controlClient
operator|.
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
comment|// query a random server
name|params
operator|.
name|set
argument_list|(
literal|"shards"
argument_list|,
name|shards
argument_list|)
expr_stmt|;
name|int
name|which
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|clients
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|SolrServer
name|client
init|=
name|clients
operator|.
name|get
argument_list|(
name|which
argument_list|)
decl_stmt|;
name|QueryResponse
name|rsp
init|=
name|client
operator|.
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|compareResponses
argument_list|(
name|rsp
argument_list|,
name|controlRsp
argument_list|)
expr_stmt|;
block|}
DECL|field|ORDERED
specifier|private
specifier|static
name|int
name|ORDERED
init|=
literal|1
decl_stmt|;
DECL|field|SKIP
specifier|private
specifier|static
name|int
name|SKIP
init|=
literal|2
decl_stmt|;
DECL|field|SKIPVAL
specifier|private
specifier|static
name|int
name|SKIPVAL
init|=
literal|4
decl_stmt|;
DECL|field|UNORDERED
specifier|private
specifier|static
name|int
name|UNORDERED
init|=
literal|8
decl_stmt|;
DECL|method|eq
specifier|public
specifier|static
name|boolean
name|eq
parameter_list|(
name|String
name|a
parameter_list|,
name|String
name|b
parameter_list|)
block|{
return|return
name|a
operator|==
name|b
operator|||
operator|(
name|a
operator|!=
literal|null
operator|&&
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
operator|)
return|;
block|}
DECL|method|flags
specifier|public
specifier|static
name|int
name|flags
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|handle
parameter_list|,
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
name|handle
operator|==
literal|null
condition|)
return|return
literal|0
return|;
name|Integer
name|f
init|=
name|handle
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|f
operator|==
literal|null
condition|?
literal|0
else|:
name|f
return|;
block|}
DECL|method|compare
specifier|public
specifier|static
name|String
name|compare
parameter_list|(
name|NamedList
name|a
parameter_list|,
name|NamedList
name|b
parameter_list|,
name|int
name|flags
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|handle
parameter_list|)
block|{
name|boolean
name|ordered
init|=
operator|(
name|flags
operator|&
name|UNORDERED
operator|)
operator|==
literal|0
decl_stmt|;
name|int
name|posa
init|=
literal|0
decl_stmt|,
name|posb
init|=
literal|0
decl_stmt|;
name|int
name|na
init|=
literal|0
decl_stmt|,
name|nb
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|posa
operator|>=
name|a
operator|.
name|size
argument_list|()
operator|||
name|posb
operator|>=
name|b
operator|.
name|size
argument_list|()
condition|)
block|{
break|break;
block|}
name|String
name|namea
init|=
literal|null
decl_stmt|,
name|nameb
init|=
literal|null
decl_stmt|;
name|Object
name|vala
init|=
literal|null
decl_stmt|,
name|valb
init|=
literal|null
decl_stmt|;
name|int
name|flagsa
decl_stmt|,
name|flagsb
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|namea
operator|=
name|a
operator|.
name|getName
argument_list|(
name|posa
argument_list|)
expr_stmt|;
name|vala
operator|=
name|a
operator|.
name|getVal
argument_list|(
name|posa
argument_list|)
expr_stmt|;
name|posa
operator|++
expr_stmt|;
name|flagsa
operator|=
name|flags
argument_list|(
name|handle
argument_list|,
name|namea
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|flagsa
operator|&
name|SKIP
operator|)
operator|!=
literal|0
condition|)
continue|continue;
name|na
operator|++
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|ordered
condition|)
name|posb
operator|=
literal|0
expr_stmt|;
comment|// reset if not ordered
while|while
condition|(
name|posb
operator|<
name|b
operator|.
name|size
argument_list|()
condition|)
block|{
name|nameb
operator|=
name|b
operator|.
name|getName
argument_list|(
name|posb
argument_list|)
expr_stmt|;
name|valb
operator|=
name|b
operator|.
name|getVal
argument_list|(
name|posb
argument_list|)
expr_stmt|;
name|posb
operator|++
expr_stmt|;
name|flagsb
operator|=
name|flags
argument_list|(
name|handle
argument_list|,
name|nameb
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|flagsb
operator|&
name|SKIP
operator|)
operator|!=
literal|0
condition|)
continue|continue;
if|if
condition|(
name|eq
argument_list|(
name|namea
argument_list|,
name|nameb
argument_list|)
condition|)
block|{
name|nb
operator|++
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|ordered
condition|)
block|{
return|return
literal|"."
operator|+
name|namea
operator|+
literal|"!="
operator|+
name|nameb
operator|+
literal|" (unordered or missing)"
return|;
block|}
comment|// if unordered, continue until we find the right field.
block|}
comment|// ok, namea and nameb should be equal here already.
if|if
condition|(
operator|(
name|flagsa
operator|&
name|SKIPVAL
operator|)
operator|!=
literal|0
condition|)
continue|continue;
comment|// keys matching is enough
name|String
name|cmp
init|=
name|compare
argument_list|(
name|vala
argument_list|,
name|valb
argument_list|,
name|flagsa
argument_list|,
name|handle
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|null
condition|)
return|return
literal|"."
operator|+
name|namea
operator|+
name|cmp
return|;
block|}
if|if
condition|(
name|na
operator|!=
name|nb
condition|)
block|{
return|return
literal|".size()=="
operator|+
name|na
operator|+
literal|","
operator|+
name|nb
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|compare1
specifier|private
specifier|static
name|String
name|compare1
parameter_list|(
name|Map
name|a
parameter_list|,
name|Map
name|b
parameter_list|,
name|int
name|flags
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|handle
parameter_list|)
block|{
name|String
name|cmp
decl_stmt|;
for|for
control|(
name|Object
name|keya
range|:
name|a
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Object
name|vala
init|=
name|a
operator|.
name|get
argument_list|(
name|keya
argument_list|)
decl_stmt|;
name|int
name|flagsa
init|=
name|flags
argument_list|(
name|handle
argument_list|,
name|keya
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|flagsa
operator|&
name|SKIP
operator|)
operator|!=
literal|0
condition|)
continue|continue;
if|if
condition|(
operator|!
name|b
operator|.
name|containsKey
argument_list|(
name|keya
argument_list|)
condition|)
block|{
return|return
literal|"["
operator|+
name|keya
operator|+
literal|"]==null"
return|;
block|}
if|if
condition|(
operator|(
name|flagsa
operator|&
name|SKIPVAL
operator|)
operator|!=
literal|0
condition|)
continue|continue;
name|Object
name|valb
init|=
name|b
operator|.
name|get
argument_list|(
name|keya
argument_list|)
decl_stmt|;
name|cmp
operator|=
name|compare
argument_list|(
name|vala
argument_list|,
name|valb
argument_list|,
name|flagsa
argument_list|,
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|null
condition|)
return|return
literal|"["
operator|+
name|keya
operator|+
literal|"]"
operator|+
name|cmp
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|compare
specifier|public
specifier|static
name|String
name|compare
parameter_list|(
name|Map
name|a
parameter_list|,
name|Map
name|b
parameter_list|,
name|int
name|flags
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|handle
parameter_list|)
block|{
name|String
name|cmp
decl_stmt|;
name|cmp
operator|=
name|compare1
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|flags
argument_list|,
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|null
condition|)
return|return
name|cmp
return|;
return|return
name|compare1
argument_list|(
name|b
argument_list|,
name|a
argument_list|,
name|flags
argument_list|,
name|handle
argument_list|)
return|;
block|}
DECL|method|compare
specifier|public
specifier|static
name|String
name|compare
parameter_list|(
name|SolrDocument
name|a
parameter_list|,
name|SolrDocument
name|b
parameter_list|,
name|int
name|flags
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|handle
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|a
operator|.
name|getFieldValuesMap
argument_list|()
argument_list|,
name|b
operator|.
name|getFieldValuesMap
argument_list|()
argument_list|,
name|flags
argument_list|,
name|handle
argument_list|)
return|;
block|}
DECL|method|compare
specifier|public
specifier|static
name|String
name|compare
parameter_list|(
name|SolrDocumentList
name|a
parameter_list|,
name|SolrDocumentList
name|b
parameter_list|,
name|int
name|flags
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|handle
parameter_list|)
block|{
name|boolean
name|ordered
init|=
operator|(
name|flags
operator|&
name|UNORDERED
operator|)
operator|==
literal|0
decl_stmt|;
name|String
name|cmp
decl_stmt|;
name|int
name|f
init|=
name|flags
argument_list|(
name|handle
argument_list|,
literal|"maxScore"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|f
operator|&
name|SKIPVAL
operator|)
operator|==
literal|0
condition|)
block|{
name|cmp
operator|=
name|compare
argument_list|(
name|a
operator|.
name|getMaxScore
argument_list|()
argument_list|,
name|b
operator|.
name|getMaxScore
argument_list|()
argument_list|,
literal|0
argument_list|,
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|null
condition|)
return|return
literal|".maxScore"
operator|+
name|cmp
return|;
block|}
else|else
block|{
if|if
condition|(
name|a
operator|.
name|getMaxScore
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|b
operator|.
name|getMaxScore
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|".maxScore missing"
return|;
block|}
block|}
block|}
name|cmp
operator|=
name|compare
argument_list|(
name|a
operator|.
name|getNumFound
argument_list|()
argument_list|,
name|b
operator|.
name|getNumFound
argument_list|()
argument_list|,
literal|0
argument_list|,
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|null
condition|)
return|return
literal|".numFound"
operator|+
name|cmp
return|;
name|cmp
operator|=
name|compare
argument_list|(
name|a
operator|.
name|getStart
argument_list|()
argument_list|,
name|b
operator|.
name|getStart
argument_list|()
argument_list|,
literal|0
argument_list|,
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|null
condition|)
return|return
literal|".start"
operator|+
name|cmp
return|;
name|cmp
operator|=
name|compare
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|,
name|b
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|,
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|null
condition|)
return|return
literal|".size()"
operator|+
name|cmp
return|;
comment|// only for completely ordered results (ties might be in a different order)
if|if
condition|(
name|ordered
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|cmp
operator|=
name|compare
argument_list|(
name|a
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|b
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
literal|0
argument_list|,
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|null
condition|)
return|return
literal|"["
operator|+
name|i
operator|+
literal|"]"
operator|+
name|cmp
return|;
block|}
return|return
literal|null
return|;
block|}
comment|// unordered case
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SolrDocument
name|doc
init|=
name|a
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
name|doc
operator|.
name|getFirstValue
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|SolrDocument
name|docb
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
comment|// no id field to correlate... must compare ordered
name|docb
operator|=
name|b
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|b
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|docb
operator|=
name|b
operator|.
name|get
argument_list|(
name|j
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|docb
operator|.
name|getFirstValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
condition|)
break|break;
block|}
block|}
comment|// if (docb == null) return "[id="+key+"]";
name|cmp
operator|=
name|compare
argument_list|(
name|doc
argument_list|,
name|docb
argument_list|,
literal|0
argument_list|,
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|null
condition|)
return|return
literal|"[id="
operator|+
name|key
operator|+
literal|"]"
operator|+
name|cmp
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|compare
specifier|public
specifier|static
name|String
name|compare
parameter_list|(
name|Object
index|[]
name|a
parameter_list|,
name|Object
index|[]
name|b
parameter_list|,
name|int
name|flags
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|handle
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|length
operator|!=
name|b
operator|.
name|length
condition|)
block|{
return|return
literal|".length:"
operator|+
name|a
operator|.
name|length
operator|+
literal|"!="
operator|+
name|b
operator|.
name|length
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|cmp
init|=
name|compare
argument_list|(
name|a
index|[
name|i
index|]
argument_list|,
name|b
index|[
name|i
index|]
argument_list|,
name|flags
argument_list|,
name|handle
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|null
condition|)
return|return
literal|"["
operator|+
name|i
operator|+
literal|"]"
operator|+
name|cmp
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|compare
specifier|static
name|String
name|compare
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|,
name|int
name|flags
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|handle
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
name|b
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|a
operator|==
literal|null
operator|||
name|b
operator|==
literal|null
condition|)
return|return
literal|":"
operator|+
name|a
operator|+
literal|"!="
operator|+
name|b
return|;
if|if
condition|(
name|a
operator|instanceof
name|NamedList
operator|&&
name|b
operator|instanceof
name|NamedList
condition|)
block|{
return|return
name|compare
argument_list|(
operator|(
name|NamedList
operator|)
name|a
argument_list|,
operator|(
name|NamedList
operator|)
name|b
argument_list|,
name|flags
argument_list|,
name|handle
argument_list|)
return|;
block|}
if|if
condition|(
name|a
operator|instanceof
name|SolrDocumentList
operator|&&
name|b
operator|instanceof
name|SolrDocumentList
condition|)
block|{
return|return
name|compare
argument_list|(
operator|(
name|SolrDocumentList
operator|)
name|a
argument_list|,
operator|(
name|SolrDocumentList
operator|)
name|b
argument_list|,
name|flags
argument_list|,
name|handle
argument_list|)
return|;
block|}
if|if
condition|(
name|a
operator|instanceof
name|SolrDocument
operator|&&
name|b
operator|instanceof
name|SolrDocument
condition|)
block|{
return|return
name|compare
argument_list|(
operator|(
name|SolrDocument
operator|)
name|a
argument_list|,
operator|(
name|SolrDocument
operator|)
name|b
argument_list|,
name|flags
argument_list|,
name|handle
argument_list|)
return|;
block|}
if|if
condition|(
name|a
operator|instanceof
name|Map
operator|&&
name|b
operator|instanceof
name|Map
condition|)
block|{
return|return
name|compare
argument_list|(
operator|(
name|Map
operator|)
name|a
argument_list|,
operator|(
name|Map
operator|)
name|b
argument_list|,
name|flags
argument_list|,
name|handle
argument_list|)
return|;
block|}
if|if
condition|(
name|a
operator|instanceof
name|Object
index|[]
operator|&&
name|b
operator|instanceof
name|Object
index|[]
condition|)
block|{
return|return
name|compare
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|a
argument_list|,
operator|(
name|Object
index|[]
operator|)
name|b
argument_list|,
name|flags
argument_list|,
name|handle
argument_list|)
return|;
block|}
if|if
condition|(
name|a
operator|instanceof
name|byte
index|[]
operator|&&
name|b
operator|instanceof
name|byte
index|[]
condition|)
block|{
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|a
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|b
argument_list|)
condition|)
block|{
return|return
literal|":"
operator|+
name|a
operator|+
literal|"!="
operator|+
name|b
return|;
block|}
return|return
literal|null
return|;
block|}
if|if
condition|(
name|a
operator|instanceof
name|List
operator|&&
name|b
operator|instanceof
name|List
condition|)
block|{
return|return
name|compare
argument_list|(
operator|(
operator|(
name|List
operator|)
name|a
operator|)
operator|.
name|toArray
argument_list|()
argument_list|,
operator|(
operator|(
name|List
operator|)
name|b
operator|)
operator|.
name|toArray
argument_list|()
argument_list|,
name|flags
argument_list|,
name|handle
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
operator|)
condition|)
block|{
return|return
literal|":"
operator|+
name|a
operator|+
literal|"!="
operator|+
name|b
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|compareResponses
name|void
name|compareResponses
parameter_list|(
name|QueryResponse
name|a
parameter_list|,
name|QueryResponse
name|b
parameter_list|)
block|{
name|String
name|cmp
decl_stmt|;
name|cmp
operator|=
name|compare
argument_list|(
name|a
operator|.
name|getResponse
argument_list|()
argument_list|,
name|b
operator|.
name|getResponse
argument_list|()
argument_list|,
name|flags
argument_list|,
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|TestCase
operator|.
name|fail
argument_list|(
name|cmp
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|flags
name|int
name|flags
decl_stmt|;
DECL|field|handle
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|handle
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|testDistribSearch
specifier|public
name|void
name|testDistribSearch
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|nServers
init|=
literal|1
init|;
name|nServers
operator|<
literal|4
condition|;
name|nServers
operator|++
control|)
block|{
name|createServers
argument_list|(
name|nServers
argument_list|)
expr_stmt|;
name|doTest
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|doTest
specifier|public
name|void
name|doTest
parameter_list|()
throws|throws
name|Exception
block|{
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
literal|1
argument_list|,
name|i1
argument_list|,
literal|100
argument_list|,
name|t1
argument_list|,
literal|"now is the time for all good men"
argument_list|,
literal|"foo_f"
argument_list|,
literal|1.414f
argument_list|,
literal|"foo_b"
argument_list|,
literal|"true"
argument_list|,
literal|"foo_d"
argument_list|,
literal|1.414d
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
literal|2
argument_list|,
name|i1
argument_list|,
literal|50
argument_list|,
name|t1
argument_list|,
literal|"to come to the aid of their country."
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
literal|3
argument_list|,
name|i1
argument_list|,
literal|2
argument_list|,
name|t1
argument_list|,
literal|"how now brown cow"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
literal|4
argument_list|,
name|i1
argument_list|,
operator|-
literal|100
argument_list|,
name|t1
argument_list|,
literal|"the quick fox jumped over the lazy dog"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
literal|5
argument_list|,
name|i1
argument_list|,
literal|500
argument_list|,
name|t1
argument_list|,
literal|"the quick fox jumped way over the lazy dog"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
literal|6
argument_list|,
name|i1
argument_list|,
operator|-
literal|600
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy sat on a wall"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
literal|7
argument_list|,
name|i1
argument_list|,
literal|123
argument_list|,
name|t1
argument_list|,
literal|"humpty dumpy had a great fall"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
literal|8
argument_list|,
name|i1
argument_list|,
literal|876
argument_list|,
name|t1
argument_list|,
literal|"all the kings horses and all the kings men"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
literal|9
argument_list|,
name|i1
argument_list|,
literal|7
argument_list|,
name|t1
argument_list|,
literal|"couldn't put humpty together again"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
literal|10
argument_list|,
name|i1
argument_list|,
literal|4321
argument_list|,
name|t1
argument_list|,
literal|"this too shall pass"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
literal|11
argument_list|,
name|i1
argument_list|,
operator|-
literal|987
argument_list|,
name|t1
argument_list|,
literal|"An eye for eye only ends up making the whole world blind."
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
literal|12
argument_list|,
name|i1
argument_list|,
literal|379
argument_list|,
name|t1
argument_list|,
literal|"Great works are performed, not by strength, but by perseverance."
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
literal|13
argument_list|,
name|i1
argument_list|,
literal|232
argument_list|,
name|t1
argument_list|,
literal|"no eggs on wall, lesson learned"
argument_list|,
name|oddField
argument_list|,
literal|"odd man out"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|handle
operator|.
name|clear
argument_list|()
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"QTime"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"timestamp"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
comment|// these queries should be exactly ordered and scores should exactly match
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
name|i1
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|i1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"{!func}"
operator|+
name|i1
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
comment|// even scores should match exactly here
name|handle
operator|.
name|put
argument_list|(
literal|"highlighting"
argument_list|,
name|UNORDERED
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"response"
argument_list|,
name|UNORDERED
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"quick"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"foofoofoo"
argument_list|,
literal|"start"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
comment|// no fields in returned docs
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"start"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"maxScore"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"score"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"quick"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"start"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"all"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"start"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"now their fox sat had put"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"now their fox sat had put"
argument_list|,
literal|"fl"
argument_list|,
literal|"foofoofoo"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"debug"
argument_list|,
name|UNORDERED
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"time"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"now their fox sat had put"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|,
literal|"debugQuery"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"quick"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.offset"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|t1
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// test field that is valid in schema but missing in all shards
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|missingField
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// test field that is valid in schema and missing in some shards
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|oddField
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
try|try
block|{
comment|// test error produced for field that is invalid for schema
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|invalidField
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"SolrServerException expected for invalid field that is not in schema"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
comment|// index the same document to two servers and make sure things
comment|// don't blow up.
if|if
condition|(
name|clients
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
block|{
name|index
argument_list|(
name|id
argument_list|,
literal|100
argument_list|,
name|i1
argument_list|,
literal|107
argument_list|,
name|t1
argument_list|,
literal|"oh no, a duplicate!"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clients
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|index_specific
argument_list|(
name|i
argument_list|,
name|id
argument_list|,
literal|100
argument_list|,
name|i1
argument_list|,
literal|107
argument_list|,
name|t1
argument_list|,
literal|"oh no, a duplicate!"
argument_list|)
expr_stmt|;
block|}
name|commit
argument_list|()
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"duplicate"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"fox duplicate horses"
argument_list|,
literal|"hl"
argument_list|,
literal|"true"
argument_list|,
literal|"hl.fl"
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|query
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
comment|// Thread.sleep(10000000000L);
name|destroyServers
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
