begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.request
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|AbstractSolrTestCase
import|;
end_import
begin_class
DECL|class|SimpleFacetsTest
specifier|public
class|class
name|SimpleFacetsTest
extends|extends
name|AbstractSolrTestCase
block|{
DECL|method|getSchemaFile
specifier|public
name|String
name|getSchemaFile
parameter_list|()
block|{
return|return
literal|"schema.xml"
return|;
block|}
DECL|method|getSolrConfigFile
specifier|public
name|String
name|getSolrConfigFile
parameter_list|()
block|{
return|return
literal|"solrconfig.xml"
return|;
block|}
DECL|method|getCoreName
specifier|public
name|String
name|getCoreName
parameter_list|()
block|{
return|return
literal|"basic"
return|;
block|}
DECL|method|testSimpleFacetCounts
specifier|public
name|void
name|testSimpleFacetCounts
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"42"
argument_list|,
literal|"trait_s"
argument_list|,
literal|"Tool"
argument_list|,
literal|"trait_s"
argument_list|,
literal|"Obnoxious"
argument_list|,
literal|"name"
argument_list|,
literal|"Zapp Brannigan"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"43"
argument_list|,
literal|"title"
argument_list|,
literal|"Democratic Order of Planets"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"44"
argument_list|,
literal|"trait_s"
argument_list|,
literal|"Tool"
argument_list|,
literal|"name"
argument_list|,
literal|"The Zapper"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"45"
argument_list|,
literal|"trait_s"
argument_list|,
literal|"Chauvinist"
argument_list|,
literal|"title"
argument_list|,
literal|"25 star General"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"46"
argument_list|,
literal|"trait_s"
argument_list|,
literal|"Obnoxious"
argument_list|,
literal|"subject"
argument_list|,
literal|"Defeated the pacifists of the Gandhi nebula"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"47"
argument_list|,
literal|"trait_s"
argument_list|,
literal|"Pig"
argument_list|,
literal|"text"
argument_list|,
literal|"line up and fly directly at the enemy death cannons, clogging them with wreckage!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"standard request handler returns all matches"
argument_list|,
name|req
argument_list|(
literal|"id:[42 TO 47]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=6]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"filter results using fq"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 46]"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[43 TO 47]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=4]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"don't filter results using blank fq"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 46]"
argument_list|,
literal|"fq"
argument_list|,
literal|" "
argument_list|)
argument_list|,
literal|"*[count(//doc)=5]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"filter results using multiple fq params"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 46]"
argument_list|,
literal|"fq"
argument_list|,
literal|"trait_s:Obnoxious"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[43 TO 47]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check counts for facet queries"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"trait_s:Obnoxious"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"id:[43 TO 47]"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"trait_s"
argument_list|)
argument_list|,
literal|"*[count(//doc)=6]"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_queries']"
argument_list|,
literal|"//lst[@name='facet_queries']/int[@name='trait_s:Obnoxious'][.='2']"
argument_list|,
literal|"//lst[@name='facet_queries']/int[@name='id:[42 TO 45]'][.='4']"
argument_list|,
literal|"//lst[@name='facet_queries']/int[@name='id:[43 TO 47]'][.='5']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']"
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='trait_s']"
argument_list|,
literal|"*[count(//lst[@name='trait_s']/int)=4]"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Tool'][.='2']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Obnoxious'][.='2']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Pig'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check multi-select facets with naming"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"{!ex=1}trait_s:Obnoxious"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"{!ex=2 key=foo}id:[42 TO 45]"
comment|// tag=2 same as 1
argument_list|,
literal|"facet.query"
argument_list|,
literal|"{!ex=3,4 key=bar}id:[43 TO 47]"
comment|// tag=3,4 don't exist
argument_list|,
literal|"facet.field"
argument_list|,
literal|"{!ex=3,1}trait_s"
comment|// 3,1 same as 1
argument_list|,
literal|"fq"
argument_list|,
literal|"{!tag=1,2}id:47"
comment|// tagged as 1 and 2
argument_list|)
argument_list|,
literal|"*[count(//doc)=1]"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_queries']"
argument_list|,
literal|"//lst[@name='facet_queries']/int[@name='{!ex=1}trait_s:Obnoxious'][.='2']"
argument_list|,
literal|"//lst[@name='facet_queries']/int[@name='foo'][.='4']"
argument_list|,
literal|"//lst[@name='facet_queries']/int[@name='bar'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']"
argument_list|,
literal|"//lst[@name='facet_fields']/lst[@name='trait_s']"
argument_list|,
literal|"*[count(//lst[@name='trait_s']/int)=4]"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Tool'][.='2']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Obnoxious'][.='2']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Pig'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check counts for applied facet queries using filtering (fq)"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"trait_s"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.query"
argument_list|,
literal|"id:[43 TO 47]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=4]"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_queries']"
argument_list|,
literal|"//lst[@name='facet_queries']/int[@name='id:[42 TO 45]'][.='4']"
argument_list|,
literal|"//lst[@name='facet_queries']/int[@name='id:[43 TO 47]'][.='3']"
argument_list|,
literal|"*[count(//lst[@name='trait_s']/int)=4]"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Tool'][.='2']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Obnoxious'][.='1']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Chauvinist'][.='1']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Pig'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check counts with facet.zero=false&facet.missing=true using fq"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.zeros"
argument_list|,
literal|"false"
argument_list|,
literal|"f.trait_s.facet.missing"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"trait_s"
argument_list|)
argument_list|,
literal|"*[count(//doc)=4]"
argument_list|,
literal|"*[count(//lst[@name='trait_s']/int)=4]"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Tool'][.='2']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Obnoxious'][.='1']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Chauvinist'][.='1']"
argument_list|,
literal|"//lst[@name='trait_s']/int[not(@name)][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check counts with facet.mincount=1&facet.missing=true using fq"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|,
literal|"f.trait_s.facet.missing"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"trait_s"
argument_list|)
argument_list|,
literal|"*[count(//doc)=4]"
argument_list|,
literal|"*[count(//lst[@name='trait_s']/int)=4]"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Tool'][.='2']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Obnoxious'][.='1']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Chauvinist'][.='1']"
argument_list|,
literal|"//lst[@name='trait_s']/int[not(@name)][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check counts with facet.mincount=2&facet.missing=true using fq"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"2"
argument_list|,
literal|"f.trait_s.facet.missing"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"trait_s"
argument_list|)
argument_list|,
literal|"*[count(//doc)=4]"
argument_list|,
literal|"*[count(//lst[@name='trait_s']/int)=2]"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Tool'][.='2']"
argument_list|,
literal|"//lst[@name='trait_s']/int[not(@name)][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check sorted paging"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"trait_s"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"4"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='trait_s']/int)=4]"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Tool'][.='2']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Obnoxious'][.='1']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Chauvinist'][.='1']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Pig'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check sorted paging"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:[42 TO 47]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:[42 TO 45]"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"trait_s"
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"3"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='trait_s']/int)=3]"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Tool'][.='2']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Obnoxious'][.='1']"
argument_list|,
literal|"//lst[@name='trait_s']/int[@name='Chauvinist'][.='1']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testDateFacets
specifier|public
name|void
name|testDateFacets
parameter_list|()
block|{
specifier|final
name|String
name|f
init|=
literal|"bday"
decl_stmt|;
specifier|final
name|String
name|pre
init|=
literal|"//lst[@name='facet_dates']/lst[@name='"
operator|+
name|f
operator|+
literal|"']"
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|f
argument_list|,
literal|"1976-07-04T12:08:56.235Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
name|f
argument_list|,
literal|"1976-07-05T00:00:00.000Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
name|f
argument_list|,
literal|"1976-07-15T00:07:67.890Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
name|f
argument_list|,
literal|"1976-07-21T00:07:67.890Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
name|f
argument_list|,
literal|"1976-07-13T12:12:25.255Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
name|f
argument_list|,
literal|"1976-07-03T17:01:23.456Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
name|f
argument_list|,
literal|"1976-07-12T12:12:25.255Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
name|f
argument_list|,
literal|"1976-07-15T15:15:15.155Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|,
name|f
argument_list|,
literal|"1907-07-12T13:13:23.235Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|,
name|f
argument_list|,
literal|"1976-07-03T11:02:45.678Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"11"
argument_list|,
name|f
argument_list|,
literal|"1907-07-12T12:12:25.255Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"12"
argument_list|,
name|f
argument_list|,
literal|"2007-07-30T07:07:07.070Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"13"
argument_list|,
name|f
argument_list|,
literal|"1976-07-30T22:22:22.222Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"14"
argument_list|,
name|f
argument_list|,
literal|"1976-07-05T22:22:22.222Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check counts for month of facet by day"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.date"
argument_list|,
name|f
argument_list|,
literal|"facet.date.start"
argument_list|,
literal|"1976-07-01T00:00:00.000Z"
argument_list|,
literal|"facet.date.end"
argument_list|,
literal|"1976-07-01T00:00:00.000Z+1MONTH"
argument_list|,
literal|"facet.date.gap"
argument_list|,
literal|"+1DAY"
argument_list|,
literal|"facet.date.other"
argument_list|,
literal|"all"
argument_list|)
comment|// 31 days + pre+post+inner = 34
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)=34]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-01T00:00:00Z'][.='0'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-02T00:00:00Z'][.='0'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-03T00:00:00Z'][.='2'  ]"
comment|// july4th = 2 because exists doc @ 00:00:00.000 on July5
comment|// (date faceting is inclusive)
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-04T00:00:00Z'][.='2'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-05T00:00:00Z'][.='2'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-06T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-07T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-08T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-09T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-10T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-11T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-12T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-13T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-14T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-15T00:00:00Z'][.='2'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-16T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-17T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-18T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-19T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-21T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-22T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-23T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-24T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-25T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-26T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-27T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-28T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-29T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-30T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-31T00:00:00Z'][.='0']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='before' ][.='2']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='after'  ][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='between'][.='11']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check hardend=false"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.date"
argument_list|,
name|f
argument_list|,
literal|"facet.date.start"
argument_list|,
literal|"1976-07-01T00:00:00.000Z"
argument_list|,
literal|"facet.date.end"
argument_list|,
literal|"1976-07-13T00:00:00.000Z"
argument_list|,
literal|"facet.date.gap"
argument_list|,
literal|"+5DAYS"
argument_list|,
literal|"facet.date.other"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.date.hardend"
argument_list|,
literal|"false"
argument_list|)
comment|// 3 gaps + pre+post+inner = 6
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)=6]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-01T00:00:00Z'][.='5'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-06T00:00:00Z'][.='0'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-11T00:00:00Z'][.='4'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='before' ][.='2']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='after'  ][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='between'][.='9']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check hardend=true"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.date"
argument_list|,
name|f
argument_list|,
literal|"facet.date.start"
argument_list|,
literal|"1976-07-01T00:00:00.000Z"
argument_list|,
literal|"facet.date.end"
argument_list|,
literal|"1976-07-13T00:00:00.000Z"
argument_list|,
literal|"facet.date.gap"
argument_list|,
literal|"+5DAYS"
argument_list|,
literal|"facet.date.other"
argument_list|,
literal|"all"
argument_list|,
literal|"facet.date.hardend"
argument_list|,
literal|"true"
argument_list|)
comment|// 3 gaps + pre+post+inner = 6
argument_list|,
literal|"*[count("
operator|+
name|pre
operator|+
literal|"/int)=6]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-01T00:00:00Z'][.='5'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-06T00:00:00Z'][.='0'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='1976-07-11T00:00:00Z'][.='1'  ]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='before' ][.='2']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='after'  ][.='6']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='between'][.='6']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFacetMultiValued
specifier|public
name|void
name|testFacetMultiValued
parameter_list|()
block|{
name|doFacetPrefix
argument_list|(
literal|"t_s"
argument_list|,
literal|"facet.method"
argument_list|,
literal|"enum"
argument_list|)
expr_stmt|;
name|doFacetPrefix
argument_list|(
literal|"t_s"
argument_list|,
literal|"facet.method"
argument_list|,
literal|"enum"
argument_list|,
literal|"facet.enum.cache.minDf"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|doFacetPrefix
argument_list|(
literal|"t_s"
argument_list|,
literal|"facet.method"
argument_list|,
literal|"enum"
argument_list|,
literal|"facet.enum.cache.minDf"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|doFacetPrefix
argument_list|(
literal|"t_s"
argument_list|,
literal|"facet.method"
argument_list|,
literal|"fc"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFacetSingleValued
specifier|public
name|void
name|testFacetSingleValued
parameter_list|()
block|{
name|doFacets
argument_list|(
literal|"t_s1"
argument_list|)
expr_stmt|;
block|}
DECL|method|doFacets
specifier|public
name|void
name|doFacets
parameter_list|(
name|String
name|f
parameter_list|,
name|String
modifier|...
name|params
parameter_list|)
block|{
name|String
name|pre
init|=
literal|"//lst[@name='"
operator|+
name|f
operator|+
literal|"']"
decl_stmt|;
name|String
name|notc
init|=
literal|"id:[* TO *] -"
operator|+
name|f
operator|+
literal|":C"
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|f
argument_list|,
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
name|f
argument_list|,
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
name|f
argument_list|,
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
name|f
argument_list|,
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
name|f
argument_list|,
literal|"D"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
name|f
argument_list|,
literal|"E"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
name|f
argument_list|,
literal|"E"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
name|f
argument_list|,
literal|"E"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|,
name|f
argument_list|,
literal|"F"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|,
name|f
argument_list|,
literal|"G"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"11"
argument_list|,
name|f
argument_list|,
literal|"G"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"12"
argument_list|,
name|f
argument_list|,
literal|"G"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"13"
argument_list|,
name|f
argument_list|,
literal|"G"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"14"
argument_list|,
name|f
argument_list|,
literal|"G"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check counts for unlimited facet"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=7]"
argument_list|,
name|pre
operator|+
literal|"/int[@name='G'][.='5']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='E'][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='C'][.='2']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='A'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='B'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='D'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='F'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check counts for facet with generous limit"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=7]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='G'][.='5']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='E'][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[3][@name='C'][.='2']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='A'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='B'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='D'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[@name='F'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check counts for limited facet"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=2]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='G'][.='5']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='E'][.='3']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"check offset"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=1]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='E'][.='3']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test sorted facet paging with zero (don't count in limit)"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"fq"
argument_list|,
name|notc
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"6"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=6]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='G'][.='5']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='E'][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[3][@name='A'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[4][@name='B'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[5][@name='D'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[6][@name='F'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test sorted facet paging with zero (test offset correctness)"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"fq"
argument_list|,
name|notc
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"3"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=2]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='B'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='D'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet unsorted paging"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"fq"
argument_list|,
name|notc
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"6"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=6]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='A'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='B'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[3][@name='D'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[4][@name='E'][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[5][@name='F'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[6][@name='G'][.='5']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet unsorted paging"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"fq"
argument_list|,
name|notc
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"3"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=2]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='E'][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='F'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet unsorted paging, mincount=2"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"fq"
argument_list|,
name|notc
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=1]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='G'][.='5']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFacetPrefixMultiValued
specifier|public
name|void
name|testFacetPrefixMultiValued
parameter_list|()
block|{
name|doFacetPrefix
argument_list|(
literal|"t_s"
argument_list|,
literal|"facet.method"
argument_list|,
literal|"enum"
argument_list|)
expr_stmt|;
name|doFacetPrefix
argument_list|(
literal|"t_s"
argument_list|,
literal|"facet.method"
argument_list|,
literal|"enum"
argument_list|,
literal|"facet.enum.cache.minDf"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|doFacetPrefix
argument_list|(
literal|"t_s"
argument_list|,
literal|"facet.method"
argument_list|,
literal|"enum"
argument_list|,
literal|"facet.enum.cache.minDf"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|doFacetPrefix
argument_list|(
literal|"t_s"
argument_list|,
literal|"facet.method"
argument_list|,
literal|"fc"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFacetPrefixSingleValued
specifier|public
name|void
name|testFacetPrefixSingleValued
parameter_list|()
block|{
name|doFacetPrefix
argument_list|(
literal|"t_s1"
argument_list|)
expr_stmt|;
block|}
DECL|method|doFacetPrefix
specifier|public
name|void
name|doFacetPrefix
parameter_list|(
name|String
name|f
parameter_list|,
name|String
modifier|...
name|params
parameter_list|)
block|{
name|String
name|indent
init|=
literal|"on"
decl_stmt|;
name|String
name|pre
init|=
literal|"//lst[@name='"
operator|+
name|f
operator|+
literal|"']"
decl_stmt|;
name|String
name|notc
init|=
literal|"id:[* TO *] -"
operator|+
name|f
operator|+
literal|":C"
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|f
argument_list|,
literal|"AAA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
name|f
argument_list|,
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
name|f
argument_list|,
literal|"BB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
name|f
argument_list|,
literal|"BB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
name|f
argument_list|,
literal|"BBB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
name|f
argument_list|,
literal|"BBB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
name|f
argument_list|,
literal|"BBB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
name|f
argument_list|,
literal|"CC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|,
name|f
argument_list|,
literal|"CC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|,
name|f
argument_list|,
literal|"CCC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"11"
argument_list|,
name|f
argument_list|,
literal|"CCC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"12"
argument_list|,
name|f
argument_list|,
literal|"CCC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix middle, exact match first term"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"B"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=3]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='BBB'][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='BB'][.='2']"
argument_list|,
name|pre
operator|+
literal|"/int[3][@name='B'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix middle, exact match first term, unsorted"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"B"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=3]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='B'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='BB'][.='2']"
argument_list|,
name|pre
operator|+
literal|"/int[3][@name='BBB'][.='3']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix middle, exact match first term, unsorted"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"B"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=3]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='B'][.='1']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='BB'][.='2']"
argument_list|,
name|pre
operator|+
literal|"/int[3][@name='BBB'][.='3']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix middle, paging"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"B"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=2]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='BB'][.='2']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='B'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix middle, paging"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"B"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=1]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='BB'][.='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix middle, paging"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"B"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=1]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='BB'][.='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix end, not exact match"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"C"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=2]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='CCC'][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='CC'][.='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix end, exact match"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"CC"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=2]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='CCC'][.='3']"
argument_list|,
name|pre
operator|+
literal|"/int[2][@name='CC'][.='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix past end"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"X"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix past end"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"1"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"-1"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"X"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix at start, exact match"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"AAA"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=1]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='AAA'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix at Start, not exact match"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"AA"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=1]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='AAA'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix at Start, not exact match"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"AA"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=1]"
argument_list|,
name|pre
operator|+
literal|"/int[1][@name='AAA'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix before start"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"999"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"test facet.prefix before start"
argument_list|,
name|req
argument_list|(
name|params
argument_list|,
literal|"q"
argument_list|,
literal|"id:[* TO *]"
argument_list|,
literal|"indent"
argument_list|,
name|indent
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|f
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.offset"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.limit"
argument_list|,
literal|"100"
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|,
literal|"facet.prefix"
argument_list|,
literal|"999"
argument_list|)
argument_list|,
literal|"*[count(//lst[@name='facet_fields']/lst/int)=0]"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
