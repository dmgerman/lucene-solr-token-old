begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|AbstractSolrTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|SolrIndexConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import
begin_class
DECL|class|TestConfig
specifier|public
class|class
name|TestConfig
extends|extends
name|AbstractSolrTestCase
block|{
DECL|method|getSchemaFile
specifier|public
name|String
name|getSchemaFile
parameter_list|()
block|{
return|return
literal|"schema.xml"
return|;
block|}
DECL|method|getSolrConfigFile
specifier|public
name|String
name|getSolrConfigFile
parameter_list|()
block|{
return|return
literal|"solrconfig.xml"
return|;
block|}
DECL|method|testJavaProperty
specifier|public
name|void
name|testJavaProperty
parameter_list|()
block|{
comment|// property values defined in build.xml
name|String
name|s
init|=
name|solrConfig
operator|.
name|get
argument_list|(
literal|"propTest"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"prefix-proptwo-suffix"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|s
operator|=
name|solrConfig
operator|.
name|get
argument_list|(
literal|"propTest/@attr1"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"propone-${literal}"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|s
operator|=
name|solrConfig
operator|.
name|get
argument_list|(
literal|"propTest/@attr2"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"default-from-config"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|s
operator|=
name|solrConfig
operator|.
name|get
argument_list|(
literal|"propTest[@attr2='default-from-config']"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"prefix-proptwo-suffix"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|NodeList
name|nl
init|=
operator|(
name|NodeList
operator|)
name|solrConfig
operator|.
name|evaluate
argument_list|(
literal|"propTest"
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nl
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"prefix-proptwo-suffix"
argument_list|,
name|nl
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
name|Node
name|node
init|=
name|solrConfig
operator|.
name|getNode
argument_list|(
literal|"propTest"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"prefix-proptwo-suffix"
argument_list|,
name|node
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testLucene23Upgrades
specifier|public
name|void
name|testLucene23Upgrades
parameter_list|()
throws|throws
name|Exception
block|{
name|double
name|bufferSize
init|=
name|solrConfig
operator|.
name|getDouble
argument_list|(
literal|"indexDefaults/ramBufferSizeMB"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bufferSize
operator|+
literal|" does not equal: "
operator|+
literal|32
argument_list|,
name|bufferSize
operator|==
literal|32
argument_list|)
expr_stmt|;
name|String
name|mergePolicy
init|=
name|solrConfig
operator|.
name|get
argument_list|(
literal|"indexDefaults/mergePolicy"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|mergePolicy
operator|+
literal|" is not equal to "
operator|+
name|SolrIndexConfig
operator|.
name|DEFAULT_MERGE_POLICY_CLASSNAME
argument_list|,
name|mergePolicy
operator|.
name|equals
argument_list|(
name|SolrIndexConfig
operator|.
name|DEFAULT_MERGE_POLICY_CLASSNAME
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
name|String
name|mergeSched
init|=
name|solrConfig
operator|.
name|get
argument_list|(
literal|"indexDefaults/mergeScheduler"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|mergeSched
operator|+
literal|" is not equal to "
operator|+
name|SolrIndexConfig
operator|.
name|DEFAULT_MERGE_SCHEDULER_CLASSNAME
argument_list|,
name|mergeSched
operator|.
name|equals
argument_list|(
name|SolrIndexConfig
operator|.
name|DEFAULT_MERGE_SCHEDULER_CLASSNAME
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
name|boolean
name|luceneAutoCommit
init|=
name|solrConfig
operator|.
name|getBool
argument_list|(
literal|"indexDefaults/luceneAutoCommit"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|luceneAutoCommit
operator|+
literal|" does not equal: "
operator|+
literal|false
argument_list|,
name|luceneAutoCommit
operator|==
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
