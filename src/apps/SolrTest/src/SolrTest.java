begin_unit
begin_comment
comment|/**  * Copyright 2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|*
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPath
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathFactory
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Handler
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|ConsoleHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import
begin_comment
comment|/**  * User: Yonik Seeley  * Date: Aug 16, 2004  */
end_comment
begin_class
DECL|class|SolrTest
specifier|public
class|class
name|SolrTest
extends|extends
name|Thread
block|{
DECL|field|core
specifier|static
name|SolrCore
name|core
decl_stmt|;
DECL|field|requestDict
specifier|static
name|String
index|[]
name|requestDict
decl_stmt|;
DECL|field|updateDict
specifier|static
name|String
index|[]
name|updateDict
decl_stmt|;
DECL|field|testDict
specifier|static
name|String
index|[]
name|testDict
decl_stmt|;
DECL|field|testDictLineno
specifier|static
name|List
argument_list|<
name|Integer
argument_list|>
name|testDictLineno
decl_stmt|;
DECL|field|lineno
specifier|static
name|List
argument_list|<
name|Integer
argument_list|>
name|lineno
decl_stmt|;
DECL|method|readDict
specifier|public
specifier|static
name|String
index|[]
name|readDict
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|filename
argument_list|)
argument_list|)
decl_stmt|;
name|ArrayList
name|lst
init|=
operator|new
name|ArrayList
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|lineno
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|String
name|line
decl_stmt|;
name|int
name|lineNum
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|lineNum
operator|++
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|length
argument_list|()
operator|<=
literal|1
condition|)
continue|continue;
name|lst
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|lineno
operator|.
name|add
argument_list|(
name|lineNum
argument_list|)
expr_stmt|;
block|}
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
operator|(
name|String
index|[]
operator|)
name|lst
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|lst
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|field|verbose
specifier|public
specifier|static
name|boolean
name|verbose
init|=
literal|false
decl_stmt|;
DECL|field|doValidate
specifier|static
name|boolean
name|doValidate
init|=
literal|true
decl_stmt|;
DECL|field|countdown
specifier|static
name|int
name|countdown
decl_stmt|;
DECL|method|runAgain
specifier|static
specifier|synchronized
name|boolean
name|runAgain
parameter_list|()
block|{
return|return
name|countdown
operator|--
operator|>
literal|0
return|;
block|}
comment|// statistics per client
DECL|field|numReq
name|int
name|numReq
init|=
literal|0
decl_stmt|;
DECL|field|numErr
name|int
name|numErr
init|=
literal|0
decl_stmt|;
DECL|field|numBodyChars
name|int
name|numBodyChars
init|=
literal|0
decl_stmt|;
DECL|field|isWriter
name|boolean
name|isWriter
init|=
literal|false
decl_stmt|;
DECL|field|sequenceTest
name|boolean
name|sequenceTest
init|=
literal|false
decl_stmt|;
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|sequenceTest
condition|)
block|{
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testDict
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|s
init|=
name|testDict
index|[
name|i
index|]
decl_stmt|;
name|int
name|lineno
init|=
name|testDictLineno
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|req
decl_stmt|;
name|String
name|test
init|=
literal|null
decl_stmt|;
name|String
name|params
init|=
literal|null
decl_stmt|;
name|char
index|[]
name|resp
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|<
literal|2
operator|||
name|s
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
continue|continue;
comment|// comment
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"LINE="
operator|+
name|lineno
operator|+
literal|" EXECUTING "
operator|+
name|s
argument_list|)
expr_stmt|;
name|int
name|endQuery
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|startParams
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|"%%"
argument_list|)
decl_stmt|;
name|int
name|endParams
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|endTests
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|startParams
operator|>
literal|0
condition|)
block|{
name|endQuery
operator|=
name|startParams
expr_stmt|;
name|endParams
operator|=
name|s
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|int
name|startTests
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|'%'
argument_list|,
name|startParams
operator|+
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|startTests
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|endQuery
operator|==
name|s
operator|.
name|length
argument_list|()
condition|)
name|endQuery
operator|=
name|startTests
expr_stmt|;
name|endParams
operator|=
name|startTests
expr_stmt|;
block|}
name|req
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|endQuery
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|startParams
operator|>
literal|0
condition|)
name|params
operator|=
name|s
operator|.
name|substring
argument_list|(
name|startParams
operator|+
literal|2
argument_list|,
name|endParams
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|startTests
operator|>
literal|0
condition|)
name|test
operator|=
name|s
operator|.
name|substring
argument_list|(
name|startTests
operator|+
literal|1
argument_list|,
name|endTests
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|// System.out.println("###req=" + req);
comment|// System.out.println("###params=" + params);
comment|// System.out.println("###tests=" + test);
if|if
condition|(
name|req
operator|.
name|startsWith
argument_list|(
literal|"<"
argument_list|)
condition|)
block|{
name|resp
operator|=
name|doUpdate
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resp
operator|=
name|doReq
argument_list|(
name|req
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doValidate
condition|)
block|{
name|validate
argument_list|(
name|req
argument_list|,
name|test
argument_list|,
name|resp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"#### no validation performed"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|numErr
operator|++
expr_stmt|;
throw|throw
operator|(
name|e
operator|)
throw|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|">>>>>>>>>>>>>>>>>>>>>>>> SUCCESS<<<<<<<<<<<<<<<<<<<<<<<<<<"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
name|runAgain
argument_list|()
condition|)
block|{
if|if
condition|(
name|isWriter
condition|)
name|doUpdate
argument_list|(
name|updateDict
index|[
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|updateDict
operator|.
name|length
argument_list|)
index|]
argument_list|)
expr_stmt|;
else|else
name|doReq
argument_list|(
name|requestDict
index|[
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|requestDict
operator|.
name|length
argument_list|)
index|]
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|field|builder
specifier|private
name|DocumentBuilder
name|builder
decl_stmt|;
DECL|field|xpath
specifier|private
name|XPath
name|xpath
init|=
name|XPathFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXPath
argument_list|()
decl_stmt|;
block|{
try|try
block|{
name|builder
operator|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|validate
specifier|private
name|void
name|validate
parameter_list|(
name|String
name|req
parameter_list|,
name|String
name|test
parameter_list|,
name|char
index|[]
name|resp
parameter_list|)
block|{
if|if
condition|(
name|test
operator|==
literal|null
operator|||
name|test
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|Document
name|document
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// the resp[] contains a declaration that it is UTF-8, so we
comment|// need to change it to that for the XML parser.
name|document
operator|=
name|builder
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|String
argument_list|(
name|resp
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// document = builder.parse(new String(resp));
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR parsing '"
operator|+
operator|new
name|String
argument_list|(
name|resp
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|String
index|[]
name|tests
init|=
name|test
operator|.
name|split
argument_list|(
literal|"%"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|xp
range|:
name|tests
control|)
block|{
name|Boolean
name|bool
init|=
literal|false
decl_stmt|;
name|xp
operator|=
name|xp
operator|.
name|trim
argument_list|()
expr_stmt|;
try|try
block|{
name|bool
operator|=
operator|(
name|Boolean
operator|)
name|xpath
operator|.
name|evaluate
argument_list|(
name|xp
argument_list|,
name|document
argument_list|,
name|XPathConstants
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"##################ERROR EVALUATING XPATH '"
operator|+
name|xp
operator|+
literal|"'"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|bool
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"##################ERROR"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"req="
operator|+
name|req
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"xp="
operator|+
name|xp
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"test failed."
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|doUpdate
specifier|public
name|char
index|[]
name|doUpdate
parameter_list|(
name|String
name|req
parameter_list|)
block|{
try|try
block|{
comment|// String lucene=updateDict[(int)(Math.random()*updateDict.length)];
name|String
name|lucene
init|=
name|req
decl_stmt|;
name|StringReader
name|ureq
init|=
operator|new
name|StringReader
argument_list|(
name|lucene
argument_list|)
decl_stmt|;
name|CharArrayWriter
name|writer
init|=
operator|new
name|CharArrayWriter
argument_list|(
literal|32000
argument_list|)
decl_stmt|;
name|core
operator|.
name|update
argument_list|(
name|ureq
argument_list|,
name|writer
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"UPDATE RESPONSE:'"
operator|+
name|writer
operator|+
literal|"'"
argument_list|)
expr_stmt|;
comment|// if (verbose) System.out.println("BODY chars read:" + writer.size());
name|this
operator|.
name|numBodyChars
operator|+=
name|writer
operator|.
name|size
argument_list|()
expr_stmt|;
name|this
operator|.
name|numReq
operator|++
expr_stmt|;
return|return
name|writer
operator|.
name|toCharArray
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|this
operator|.
name|numErr
operator|++
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|field|xmlwriter
specifier|static
name|XMLResponseWriter
name|xmlwriter
init|=
operator|new
name|XMLResponseWriter
argument_list|()
decl_stmt|;
DECL|field|handler
specifier|static
name|SolrRequestHandler
name|handler
init|=
comment|// new OldRequestHandler();
operator|new
name|StandardRequestHandler
argument_list|()
decl_stmt|;
DECL|field|qargs
specifier|static
name|String
name|qargs
init|=
literal|null
decl_stmt|;
comment|// default query arguments
DECL|method|doReq
specifier|public
name|char
index|[]
name|doReq
parameter_list|(
name|String
name|req
parameter_list|,
name|String
name|params
parameter_list|)
block|{
name|int
name|start
init|=
literal|0
decl_stmt|;
name|int
name|limit
init|=
literal|10
decl_stmt|;
name|String
name|handler
init|=
literal|"standard"
decl_stmt|;
comment|//handler="test";
name|Map
name|args
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"indent"
argument_list|,
literal|"on"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"debugQuery"
argument_list|,
literal|"on"
argument_list|)
expr_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
literal|"2.0"
argument_list|)
expr_stmt|;
if|if
condition|(
name|qargs
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|params
operator|==
literal|null
condition|)
name|params
operator|=
name|qargs
expr_stmt|;
else|else
name|params
operator|=
name|qargs
operator|+
literal|'&'
operator|+
name|params
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|plist
init|=
name|params
operator|.
name|split
argument_list|(
literal|"&"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|decl
range|:
name|plist
control|)
block|{
name|String
index|[]
name|nv
init|=
name|decl
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|nv
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|nv
operator|=
operator|new
name|String
index|[]
block|{
name|nv
index|[
literal|0
index|]
block|,
literal|""
block|}
expr_stmt|;
block|}
if|if
condition|(
name|nv
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"start"
argument_list|)
condition|)
block|{
name|start
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|nv
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nv
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"limit"
argument_list|)
condition|)
block|{
name|limit
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|nv
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nv
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"qt"
argument_list|)
condition|)
block|{
name|handler
operator|=
name|nv
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
name|args
operator|.
name|put
argument_list|(
name|nv
index|[
literal|0
index|]
argument_list|,
name|nv
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
try|try
block|{
comment|// String lucene=requestDict[(int)(Math.random()*requestDict.length)];
name|String
name|lucene
init|=
name|req
decl_stmt|;
name|CharArrayWriter
name|writer
init|=
operator|new
name|CharArrayWriter
argument_list|(
literal|32000
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"start="
operator|+
name|start
operator|+
literal|" limit="
operator|+
name|limit
operator|+
literal|" handler="
operator|+
name|handler
argument_list|)
expr_stmt|;
name|LocalSolrQueryRequest
name|qreq
init|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
name|lucene
argument_list|,
name|handler
argument_list|,
name|start
argument_list|,
name|limit
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|SolrQueryResponse
name|qrsp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
try|try
block|{
name|core
operator|.
name|execute
argument_list|(
name|qreq
argument_list|,
name|qrsp
argument_list|)
expr_stmt|;
if|if
condition|(
name|qrsp
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
throw|throw
name|qrsp
operator|.
name|getException
argument_list|()
throw|;
comment|// handler.handleRequest(qreq,qrsp);
name|xmlwriter
operator|.
name|write
argument_list|(
name|writer
argument_list|,
name|qreq
argument_list|,
name|qrsp
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|qreq
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"GOT:'"
operator|+
name|writer
operator|+
literal|"'"
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"BODY chars read:"
operator|+
name|writer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|numBodyChars
operator|+=
name|writer
operator|.
name|size
argument_list|()
expr_stmt|;
name|this
operator|.
name|numReq
operator|++
expr_stmt|;
return|return
name|writer
operator|.
name|toCharArray
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|this
operator|.
name|numErr
operator|++
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|readers
init|=
literal|1
decl_stmt|;
name|int
name|requests
init|=
literal|1
decl_stmt|;
name|int
name|writers
init|=
literal|0
decl_stmt|;
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"org.apache.solr"
argument_list|)
decl_stmt|;
name|log
operator|.
name|setUseParentHandlers
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|log
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|FINEST
argument_list|)
expr_stmt|;
name|Handler
name|handler
init|=
operator|new
name|ConsoleHandler
argument_list|()
decl_stmt|;
name|handler
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|FINEST
argument_list|)
expr_stmt|;
name|log
operator|.
name|addHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|String
name|filename
init|=
literal|"dict.txt"
decl_stmt|;
name|String
name|updateFilename
init|=
literal|"update_dict.txt"
decl_stmt|;
name|String
name|dataDir
init|=
literal|null
decl_stmt|;
name|String
name|schemaFile
init|=
literal|null
decl_stmt|;
name|String
name|testFile
init|=
literal|null
decl_stmt|;
name|boolean
name|b_numUpdates
init|=
literal|false
decl_stmt|;
name|boolean
name|b_writers
init|=
literal|false
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|String
name|arg
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|args
operator|.
name|length
operator|&&
name|args
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|arg
operator|=
name|args
index|[
name|i
operator|++
index|]
expr_stmt|;
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-verbose"
argument_list|)
condition|)
block|{
name|verbose
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-dict"
argument_list|)
condition|)
block|{
name|filename
operator|=
name|args
index|[
name|i
operator|++
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-data"
argument_list|)
condition|)
block|{
name|dataDir
operator|=
name|args
index|[
name|i
operator|++
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-readers"
argument_list|)
condition|)
block|{
name|readers
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
name|i
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-numRequests"
argument_list|)
condition|)
block|{
name|requests
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
name|i
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-writers"
argument_list|)
condition|)
block|{
name|writers
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
name|i
operator|++
index|]
argument_list|)
expr_stmt|;
name|b_writers
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-schema"
argument_list|)
condition|)
block|{
name|schemaFile
operator|=
name|args
index|[
name|i
operator|++
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-test"
argument_list|)
condition|)
block|{
name|testFile
operator|=
name|args
index|[
name|i
operator|++
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-noValidate"
argument_list|)
condition|)
block|{
name|doValidate
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-qargs"
argument_list|)
condition|)
block|{
name|qargs
operator|=
name|args
index|[
name|i
operator|++
index|]
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unknown option: "
operator|+
name|arg
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
try|try
block|{
name|IndexSchema
name|schema
init|=
name|schemaFile
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|IndexSchema
argument_list|(
name|schemaFile
argument_list|)
decl_stmt|;
name|countdown
operator|=
name|requests
expr_stmt|;
name|core
operator|=
operator|new
name|SolrCore
argument_list|(
name|dataDir
argument_list|,
name|schema
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|testFile
operator|!=
literal|null
condition|)
block|{
name|testDict
operator|=
name|readDict
argument_list|(
name|testFile
argument_list|)
expr_stmt|;
name|testDictLineno
operator|=
name|lineno
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|readers
operator|>
literal|0
condition|)
name|requestDict
operator|=
name|readDict
argument_list|(
name|filename
argument_list|)
expr_stmt|;
if|if
condition|(
name|writers
operator|>
literal|0
condition|)
name|updateDict
operator|=
name|readDict
argument_list|(
name|updateFilename
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Can't read "
operator|+
name|filename
argument_list|)
expr_stmt|;
return|return;
block|}
name|SolrTest
index|[]
name|clients
init|=
operator|new
name|SolrTest
index|[
name|readers
operator|+
name|writers
index|]
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|readers
condition|;
name|i
operator|++
control|)
block|{
name|clients
index|[
name|i
index|]
operator|=
operator|new
name|SolrTest
argument_list|()
expr_stmt|;
if|if
condition|(
name|testFile
operator|!=
literal|null
condition|)
name|clients
index|[
name|i
index|]
operator|.
name|sequenceTest
operator|=
literal|true
expr_stmt|;
name|clients
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|i
operator|=
name|readers
init|;
name|i
operator|<
name|readers
operator|+
name|writers
condition|;
name|i
operator|++
control|)
block|{
name|clients
index|[
name|i
index|]
operator|=
operator|new
name|SolrTest
argument_list|()
expr_stmt|;
name|clients
index|[
name|i
index|]
operator|.
name|isWriter
operator|=
literal|true
expr_stmt|;
name|clients
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|readers
condition|;
name|i
operator|++
control|)
block|{
name|clients
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|i
operator|=
name|readers
init|;
name|i
operator|<
name|readers
operator|+
name|writers
condition|;
name|i
operator|++
control|)
block|{
name|clients
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|core
operator|.
name|close
argument_list|()
expr_stmt|;
name|core
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|testFile
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|clients
index|[
literal|0
index|]
operator|.
name|numErr
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|">>>>>>>>>>>>>>>>>>>>>>>> SUCCESS<<<<<<<<<<<<<<<<<<<<<<<<<<"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|core
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{}
block|}
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
