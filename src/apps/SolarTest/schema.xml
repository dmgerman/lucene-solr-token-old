<?xml version="1.0" ?>
<!-- The Solar schema file. This file should be named "schema.xml" and
     should be located where the classloader for the Solar webapp can find it.

     $Id: schema.xml,v 1.1 2005/06/09 03:01:13 yonik Exp $
     $Source: /cvs/main/searching/solar-configs/test/WEB-INF/classes/schema.xml,v $
     $Name:  $
  -->

<schema name="test" version="1.0">
  <types>

    <!-- field type definitions... note that the "name" attribute is
         just a label to be used by field definitions.  The "class"
         attribute and any other attributes determine the real type and
         behavior of the fieldtype.
      -->

    <!-- numeric field types that store and index the text
         value verbatim (and hence don't sort correctly or support range queries.)
         These are provided more for backward compatability, allowing one
         to create a schema that matches an existing lucene index.
    -->
    <fieldtype name="integer" class="solar.IntField"/>
    <fieldtype name="long" class="solar.LongField"/>
    <fieldtype name="float" class="solar.FloatField"/>
    <fieldtype name="double" class="solar.DoubleField"/>

    <!-- numeric field types that manipulate the value into
       a string value that isn't human readable in it's internal form,
       but sorts correctly and supports range queries.

         If sortMissingLast="true" then a sort on this field will cause documents
       without the field to come after documents with the field,
       regardless of the requested sort order.
         If sortMissingFirst="true" then a sort on this field will cause documents
       without the field to come before documents with the field,
       regardless of the requested sort order.
         If sortMissingLast="false" and sortMissingFirst="false" (the default),
       then default lucene sorting will be used which places docs without the field
       first in an ascending sort and last in a descending sort.
    -->
    <fieldtype name="sint" class="solar.SortableIntField" sortMissingLast="true"/>
    <fieldtype name="slong" class="solar.SortableLongField" sortMissingLast="true"/>
    <fieldtype name="sfloat" class="solar.SortableFloatField" sortMissingLast="true"/>
    <fieldtype name="sdouble" class="solar.SortableDoubleField" sortMissingLast="true"/>

    <!-- bcd versions of sortable numeric type may provide smaller
         storage space and support very large numbers.
    -->
    <fieldtype name="bcdint" class="solar.BCDIntField" sortMissingLast="true"/>
    <fieldtype name="bcdlong" class="solar.BCDLongField" sortMissingLast="true"/>
    <fieldtype name="bcdstr" class="solar.BCDStrField" sortMissingLast="true"/>


    <fieldtype name="boolean" class="solar.BoolField" sortMissingLast="true"/>
    <fieldtype name="string" class="solar.StrField" sortMissingLast="true"/>

    <!-- format for date is 1995-12-31T23:59:59.999Z and only the fractional
         seconds part (.999) is optional.
      -->
    <fieldtype name="date" class="solar.DateField" sortMissingLast="true"/>

    <!-- solar.TextField allows the specification of custom
         text analyzers specified as a tokenizer and a list
         of token filters.
      -->
    <fieldtype name="text" class="solar.TextField">
      <analyzer>
        <tokenizer class="solar.StandardTokenizerFactory"/>
        <filter class="solar.StandardFilterFactory"/>
        <filter class="solar.LowerCaseFilterFactory"/>
        <filter class="solar.StopFilterFactory"/>
        <!-- lucene PorterStemFilterFactory deprecated
          <filter class="solar.PorterStemFilterFactory"/>
        -->
        <filter class="solar.EnglishPorterFilterFactory"/>
      </analyzer>
    </fieldtype>


    <fieldtype name="nametext" class="solar.TextField">
      <analyzer class="org.apache.lucene.analysis.WhitespaceAnalyzer"/>
    </fieldtype>

    <fieldtype name="teststop" class="solar.TextField">
       <analyzer>
        <tokenizer class="solar.LowerCaseTokenizerFactory"/>
        <filter class="solar.StandardFilterFactory"/>
        <filter class="solar.StopFilterFactory" words="stopwords.txt"/>
      </analyzer>
    </fieldtype>

    <!-- fieldtypes in this section isolate tokenizers and tokenfilters for testing -->
    <fieldtype name="lowertok" class="solar.TextField">
      <analyzer><tokenizer class="solar.LowerCaseTokenizerFactory"/></analyzer>
    </fieldtype>
    <fieldtype name="standardtok" class="solar.TextField">
      <analyzer><tokenizer class="solar.StandardTokenizerFactory"/></analyzer>
    </fieldtype>
    <fieldtype name="lettertok" class="solar.TextField">
      <analyzer><tokenizer class="solar.LetterTokenizerFactory"/></analyzer>
    </fieldtype>
    <fieldtype name="whitetok" class="solar.TextField">
      <analyzer><tokenizer class="solar.WhitespaceTokenizerFactory"/></analyzer>
    </fieldtype>
    <fieldtype name="HTMLstandardtok" class="solar.TextField">
      <analyzer><tokenizer class="solar.HTMLStripStandardTokenizerFactory"/></analyzer>
    </fieldtype>
    <fieldtype name="HTMLwhitetok" class="solar.TextField">
      <analyzer><tokenizer class="solar.HTMLStripWhitespaceTokenizerFactory"/></analyzer>
    </fieldtype>
    <fieldtype name="standardtokfilt" class="solar.TextField">
      <analyzer>
        <tokenizer class="solar.StandardTokenizerFactory"/>
        <filter class="solar.StandardFilterFactory"/>
      </analyzer>
    </fieldtype>
    <fieldtype name="standardfilt" class="solar.TextField">
      <analyzer>
        <tokenizer class="solar.WhitespaceTokenizerFactory"/>
        <filter class="solar.StandardFilterFactory"/>
      </analyzer>
    </fieldtype>
    <fieldtype name="lowerfilt" class="solar.TextField">
      <analyzer>
        <tokenizer class="solar.WhitespaceTokenizerFactory"/>
        <filter class="solar.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldtype>
    <fieldtype name="porterfilt" class="solar.TextField">
      <analyzer>
        <tokenizer class="solar.WhitespaceTokenizerFactory"/>
        <filter class="solar.PorterStemFilterFactory"/>
      </analyzer>
    </fieldtype>
    <!-- fieldtype name="snowballfilt" class="solar.TextField">
      <analyzer>
        <tokenizer class="solar.WhitespaceTokenizerFactory"/>
        <filter class="solar.SnowballPorterFilterFactory"/>
      </analyzer>
    </fieldtype -->
    <fieldtype name="engporterfilt" class="solar.TextField">
      <analyzer>
        <tokenizer class="solar.WhitespaceTokenizerFactory"/>
        <filter class="solar.EnglishPorterFilterFactory"/>
      </analyzer>
    </fieldtype>
    <fieldtype name="custengporterfilt" class="solar.TextField">
      <analyzer>
        <tokenizer class="solar.WhitespaceTokenizerFactory"/>
        <filter class="solar.EnglishPorterFilterFactory" protected="protwords.txt"/>
      </analyzer>
    </fieldtype>
    <fieldtype name="stopfilt" class="solar.TextField">
      <analyzer>
        <tokenizer class="solar.WhitespaceTokenizerFactory"/>
        <filter class="solar.StopFilterFactory" ignoreCase="true"/>
      </analyzer>
    </fieldtype>
    <fieldtype name="custstopfilt" class="solar.TextField">
      <analyzer>
        <tokenizer class="solar.WhitespaceTokenizerFactory"/>
        <filter class="solar.StopFilterFactory" words="stopwords.txt"/>
      </analyzer>
    </fieldtype>
    <fieldtype name="lengthfilt" class="solar.TextField">
      <analyzer>
        <tokenizer class="solar.WhitespaceTokenizerFactory"/>
        <filter class="solar.LengthFilterFactory" min="2" max="5"/>
      </analyzer>
    </fieldtype>

    <fieldtype name="subword" class="solar.TextField">
      <analyzer type="index">
          <tokenizer class="solar.WhitespaceTokenizerFactory"/>
          <filter class="solar.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
          <filter class="solar.LowerCaseFilterFactory"/>
          <filter class="solar.StopFilterFactory"/>
          <filter class="solar.EnglishPorterFilterFactory"/>
      </analyzer>
      <analyzer type="query">
          <tokenizer class="solar.WhitespaceTokenizerFactory"/>
          <filter class="solar.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0"/>
          <filter class="solar.LowerCaseFilterFactory"/>
          <filter class="solar.StopFilterFactory"/>
          <filter class="solar.EnglishPorterFilterFactory"/>
      </analyzer>
    </fieldtype>

    <!-- more flexible in matching skus, but more chance of a false match -->
    <fieldtype name="skutype1" class="solar.TextField">
      <analyzer type="index">
          <tokenizer class="solar.WhitespaceTokenizerFactory"/>
          <filter class="solar.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
          <filter class="solar.LowerCaseFilterFactory"/>
      </analyzer>
      <analyzer type="query">
          <tokenizer class="solar.WhitespaceTokenizerFactory"/>
          <filter class="solar.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
          <filter class="solar.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldtype>

    <!-- less flexible in matching skus, but less chance of a false match -->
    <fieldtype name="skutype2" class="solar.TextField">
      <analyzer type="index">
          <tokenizer class="solar.WhitespaceTokenizerFactory"/>
          <filter class="solar.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
          <filter class="solar.LowerCaseFilterFactory"/>
      </analyzer>
      <analyzer type="query">
          <tokenizer class="solar.WhitespaceTokenizerFactory"/>
          <filter class="solar.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
          <filter class="solar.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldtype>

    <!-- less flexible in matching skus, but less chance of a false match -->
    <fieldtype name="syn" class="solar.TextField">
      <analyzer>
          <tokenizer class="solar.WhitespaceTokenizerFactory"/>
          <filter name="syn" class="solar.SynonymFilterFactory" synonyms="synonyms.txt"/>
      </analyzer>
    </fieldtype>

    <fieldtype  name="unstored" class="solar.StrField" indexed="true" stored="false"/>
  </types>


 <fields>
   <field name="id" type="integer" indexed="true" stored="true"/>
   <field name="name" type="nametext" indexed="true" stored="true"/>
   <field name="text" type="text" indexed="true" stored="false"/>
   <field name="subject" type="text" indexed="true" stored="true"/>
   <field name="title" type="nametext" indexed="true" stored="true"/>
   <field name="weight" type="float" indexed="true" stored="true"/>
   <field name="bday" type="date" indexed="true" stored="true"/>

   <field name="title_stemmed" type="text" indexed="true" stored="false"/>
   <field name="title_lettertok" type="lettertok" indexed="true" stored="false"/>

   <field name="syn" type="syn" indexed="true" stored="true"/>

   <!-- to test property inheritance and overriding -->
   <field name="shouldbeunstored" type="unstored" />
   <field name="shouldbestored" type="unstored" stored="true"/>
   <field name="shouldbeunindexed" type="unstored" indexed="false" stored="true"/>


   <!-- test different combinations of indexed and stored -->
   <field name="bind" type="boolean" indexed="true" stored="false"/>
   <field name="bsto" type="boolean" indexed="false" stored="true"/>
   <field name="bindsto" type="boolean" indexed="true" stored="true"/>
   <field name="isto" type="integer" indexed="false" stored="true"/>
   <field name="iind" type="integer" indexed="true" stored="false"/>
   <field name="ssto" type="string" indexed="false" stored="true"/>
   <field name="sind" type="string" indexed="true" stored="false"/>
   <field name="sindsto" type="string" indexed="true" stored="true"/>

   <!-- fields to test individual tokenizers and tokenfilters -->
   <field name="teststop" type="teststop" indexed="true" stored="true"/>
   <field name="lowertok" type="lowertok" indexed="true" stored="true"/>
   <field name="standardtok" type="standardtok" indexed="true" stored="true"/>
   <field name="HTMLstandardtok" type="HTMLstandardtok" indexed="true" stored="true"/>
   <field name="lettertok" type="lettertok" indexed="true" stored="true"/>
   <field name="whitetok" type="whitetok" indexed="true" stored="true"/>
   <field name="HTMLwhitetok" type="HTMLwhitetok" indexed="true" stored="true"/>
   <field name="standardtokfilt" type="standardtokfilt" indexed="true" stored="true"/>
   <field name="standardfilt" type="standardfilt" indexed="true" stored="true"/>
   <field name="lowerfilt" type="lowerfilt" indexed="true" stored="true"/>
   <field name="porterfilt" type="porterfilt" indexed="true" stored="true"/>
   <field name="engporterfilt" type="engporterfilt" indexed="true" stored="true"/>
   <field name="custengporterfilt" type="custengporterfilt" indexed="true" stored="true"/>
   <field name="stopfilt" type="stopfilt" indexed="true" stored="true"/>
   <field name="custstopfilt" type="custstopfilt" indexed="true" stored="true"/>
   <field name="lengthfilt" type="lengthfilt" indexed="true" stored="true"/>


   <field name="subword" type="subword" indexed="true" stored="true"/>
   <field name="sku1" type="skutype1" indexed="true" stored="true"/>
   <field name="sku2" type="skutype2" indexed="true" stored="true"/>

   <!-- Dynamic field definitions.  If a field name is not found, dynamicFields
        will be used if the name matches any of the patterns.
        RESTRICTION: the glob-like pattern in the name attribute must have
        a "*" only at the start or the end.
        EXAMPLE:  name="*_i" will match any field ending in _i (like myid_i, z_i)
        Longer patterns will be matched first.  if equal size patterns
        both match, the first appearing in the schema will be used.
   -->
   <dynamicField name="*_i"  type="sint"    indexed="true"  stored="true"/>
   <dynamicField name="*_s"  type="string"  indexed="true"  stored="true"/>
   <dynamicField name="*_l"  type="slong"   indexed="true"  stored="true"/>
   <dynamicField name="*_t"  type="text"    indexed="true"  stored="true"/>
   <dynamicField name="*_b"  type="boolean" indexed="true"  stored="true"/>
   <dynamicField name="*_f"  type="sfloat"  indexed="true"  stored="true"/>
   <dynamicField name="*_d"  type="sdouble" indexed="true"  stored="true"/>
   <dynamicField name="*_dt" type="date"    indexed="true"  stored="true"/>
   <dynamicField name="*_bcd" type="bcdstr" indexed="true"  stored="true"/>

   <dynamicField name="*_sI" type="string"  indexed="true"  stored="false"/>
   <dynamicField name="*_sS" type="string"  indexed="false" stored="true"/>
   <dynamicField name="t_*"  type="text"    indexed="true"  stored="true"/>
   

   <!-- for testing to ensure that longer patterns are matched first -->
   <dynamicField name="*aa"  type="string"  indexed="true" stored="true"/>
   <dynamicField name="*aaa" type="integer" indexed="false" stored="true"/>


 </fields>

 <defaultSearchField>text</defaultSearchField>
 <uniqueKey>id</uniqueKey>

  <!-- copyField commands copy one field to another at the time a document
        is added to the index.  It's used either to index the same field different
        ways, or to add multiple fields to the same field for easier/faster searching.
   -->
   <copyField source="title" dest="title_stemmed"/>
   <copyField source="title" dest="title_lettertok"/>

   <copyField source="title" dest="text"/>
   <copyField source="subject" dest="text"/>
 

 <!-- Similarity is the scoring routine for each document vs a query.
      A custom similarity may be specified here, but the default is fine
      for most applications.
 -->
 <!-- <similarity class="org.apache.lucene.search.DefaultSimilarity"/> -->

</schema>
