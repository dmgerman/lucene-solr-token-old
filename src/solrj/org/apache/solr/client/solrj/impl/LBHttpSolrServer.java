begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.client.solrj.impl
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpClient
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|MultiThreadedHttpConnectionManager
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import
begin_comment
comment|/**  * LBHttpSolrServer or "LoadBalanced HttpSolrServer" is just a wrapper to CommonsHttpSolrServer. This is useful when you  * have multiple SolrServers and the requests need to be Load Balanced among them. This should<b>NOT</b> be used for  * indexing. Also see the<a href="http://wiki.apache.org/solr/LBHttpSolrServer">wiki</a> page.  *<p/>  * It offers automatic failover when a server goes down and it detects when the server comes back up.  *<p/>  * Load balancing is done using a simple roundrobin on the list of servers.  *<p/>  * If a request to a server fails by an IOException due to a connection timeout or read timeout then the host is taken  * off the list of live servers and moved to a 'dead server list' and the request is resent to the next live server.  * This process is continued till it tries all the live servers. If atleast one server is alive, the request succeeds,  * andif not it fails.  *<blockquote><pre>  * SolrServer lbHttpSolrServer = new LBHttpSolrServer("http://host1:8080/solr/","http://host2:8080/solr","http://host2:8080/solr");  * //or if you wish to pass the HttpClient do as follows  * httpClient httpClient =  new HttpClient();  * SolrServer lbHttpSolrServer = new LBHttpSolrServer(httpClient,"http://host1:8080/solr/","http://host2:8080/solr","http://host2:8080/solr");  *</pre></blockquote>  * This detects if a dead server comes alive automatically. The check is done in fixed intervals in a dedicated thread.  * This interval can be set using {@see #setAliveCheckInterval} , the default is set to one minute.  *<p/>  *<b>When to use this?</b><br/> This can be used as a software load balancer when you do not wish to setup an external  * load balancer. The code is relatively new and the API is currently experimental. Alternatives to this code are to use  * a dedicated hardware load balancer or using Apache httpd with mod_proxy_balancer as a load balancer. See<a  * href="http://en.wikipedia.org/wiki/Load_balancing_(computing)">Load balancing on Wikipedia</a>  *  * @version $Id$  * @since solr 1.4  */
end_comment
begin_class
DECL|class|LBHttpSolrServer
specifier|public
class|class
name|LBHttpSolrServer
extends|extends
name|SolrServer
block|{
DECL|field|aliveServers
specifier|private
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|ServerWrapper
argument_list|>
name|aliveServers
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|ServerWrapper
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|zombieServers
specifier|private
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|ServerWrapper
argument_list|>
name|zombieServers
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|ServerWrapper
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|aliveCheckExecutor
specifier|private
name|ScheduledExecutorService
name|aliveCheckExecutor
decl_stmt|;
DECL|field|httpClient
specifier|private
name|HttpClient
name|httpClient
decl_stmt|;
DECL|field|counter
specifier|private
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
DECL|field|checkLock
specifier|private
name|ReentrantLock
name|checkLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|solrQuery
specifier|private
specifier|static
specifier|final
name|SolrQuery
name|solrQuery
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
static|static
block|{
name|solrQuery
operator|.
name|setRows
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|class|ServerWrapper
specifier|private
specifier|static
class|class
name|ServerWrapper
block|{
DECL|field|solrServer
specifier|final
name|CommonsHttpSolrServer
name|solrServer
decl_stmt|;
comment|// Used only by the thread in aliveCheckExecutor
DECL|field|lastUsed
DECL|field|lastChecked
name|long
name|lastUsed
decl_stmt|,
name|lastChecked
decl_stmt|;
DECL|field|failedPings
name|int
name|failedPings
init|=
literal|0
decl_stmt|;
DECL|method|ServerWrapper
specifier|public
name|ServerWrapper
parameter_list|(
name|CommonsHttpSolrServer
name|solrServer
parameter_list|)
block|{
name|this
operator|.
name|solrServer
operator|=
name|solrServer
expr_stmt|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|solrServer
operator|.
name|getBaseURL
argument_list|()
return|;
block|}
block|}
DECL|method|LBHttpSolrServer
specifier|public
name|LBHttpSolrServer
parameter_list|(
name|String
modifier|...
name|solrServerUrls
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|this
argument_list|(
operator|new
name|HttpClient
argument_list|(
operator|new
name|MultiThreadedHttpConnectionManager
argument_list|()
argument_list|)
argument_list|,
name|solrServerUrls
argument_list|)
expr_stmt|;
block|}
DECL|method|LBHttpSolrServer
specifier|public
name|LBHttpSolrServer
parameter_list|(
name|HttpClient
name|httpClient
parameter_list|,
name|String
modifier|...
name|solrServerUrl
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|this
argument_list|(
name|httpClient
argument_list|,
operator|new
name|BinaryResponseParser
argument_list|()
argument_list|,
name|solrServerUrl
argument_list|)
expr_stmt|;
block|}
DECL|method|LBHttpSolrServer
specifier|public
name|LBHttpSolrServer
parameter_list|(
name|HttpClient
name|httpClient
parameter_list|,
name|ResponseParser
name|parser
parameter_list|,
name|String
modifier|...
name|solrServerUrl
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|this
operator|.
name|httpClient
operator|=
name|httpClient
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|solrServerUrl
control|)
block|{
name|aliveServers
operator|.
name|add
argument_list|(
operator|new
name|ServerWrapper
argument_list|(
operator|new
name|CommonsHttpSolrServer
argument_list|(
name|s
argument_list|,
name|httpClient
argument_list|,
name|parser
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addSolrServer
specifier|public
name|void
name|addSolrServer
parameter_list|(
name|String
name|server
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|CommonsHttpSolrServer
name|solrServer
init|=
operator|new
name|CommonsHttpSolrServer
argument_list|(
name|server
argument_list|,
name|httpClient
argument_list|)
decl_stmt|;
name|checkLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|aliveServers
operator|.
name|add
argument_list|(
operator|new
name|ServerWrapper
argument_list|(
name|solrServer
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|checkLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|removeSolrServer
specifier|public
name|String
name|removeSolrServer
parameter_list|(
name|String
name|server
parameter_list|)
block|{
try|try
block|{
name|server
operator|=
operator|new
name|URL
argument_list|(
name|server
argument_list|)
operator|.
name|toExternalForm
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|server
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|server
operator|=
name|server
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|server
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|checkLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|ServerWrapper
name|serverWrapper
range|:
name|aliveServers
control|)
block|{
if|if
condition|(
name|serverWrapper
operator|.
name|solrServer
operator|.
name|getBaseURL
argument_list|()
operator|.
name|equals
argument_list|(
name|server
argument_list|)
condition|)
block|{
name|aliveServers
operator|.
name|remove
argument_list|(
name|serverWrapper
argument_list|)
expr_stmt|;
return|return
name|serverWrapper
operator|.
name|solrServer
operator|.
name|getBaseURL
argument_list|()
return|;
block|}
block|}
if|if
condition|(
name|zombieServers
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
for|for
control|(
name|ServerWrapper
name|serverWrapper
range|:
name|zombieServers
control|)
block|{
if|if
condition|(
name|serverWrapper
operator|.
name|solrServer
operator|.
name|getBaseURL
argument_list|()
operator|.
name|equals
argument_list|(
name|server
argument_list|)
condition|)
block|{
name|zombieServers
operator|.
name|remove
argument_list|(
name|serverWrapper
argument_list|)
expr_stmt|;
return|return
name|serverWrapper
operator|.
name|solrServer
operator|.
name|getBaseURL
argument_list|()
return|;
block|}
block|}
block|}
finally|finally
block|{
name|checkLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|setConnectionTimeout
specifier|public
name|void
name|setConnectionTimeout
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
name|httpClient
operator|.
name|getHttpConnectionManager
argument_list|()
operator|.
name|getParams
argument_list|()
operator|.
name|setConnectionTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
comment|/**    * set connectionManagerTimeout on the HttpClient.*    */
DECL|method|setConnectionManagerTimeout
specifier|public
name|void
name|setConnectionManagerTimeout
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
name|httpClient
operator|.
name|getParams
argument_list|()
operator|.
name|setConnectionManagerTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
comment|/**    * set soTimeout (read timeout) on the underlying HttpConnectionManager. This is desirable for queries, but probably    * not for indexing.    */
DECL|method|setSoTimeout
specifier|public
name|void
name|setSoTimeout
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
name|httpClient
operator|.
name|getParams
argument_list|()
operator|.
name|setSoTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tries to query a live server. If no live servers are found it throws a SolrServerException. If the request failed    * due to IOException then the live server is moved to dead pool and the request is retried on another live server if    * available. If all live servers are exhausted then a SolrServerException is thrown.    *    * @param request the SolrRequest.    *    * @return response    *    * @throws SolrServerException    * @throws IOException    */
DECL|method|request
specifier|public
name|NamedList
argument_list|<
name|Object
argument_list|>
name|request
parameter_list|(
specifier|final
name|SolrRequest
name|request
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|int
name|count
init|=
name|counter
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|int
name|attempts
init|=
literal|0
decl_stmt|;
name|Exception
name|ex
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|size
init|=
name|aliveServers
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|<
literal|1
condition|)
throw|throw
operator|new
name|SolrServerException
argument_list|(
literal|"No live SolrServers available to handle this request"
argument_list|)
throw|;
name|ServerWrapper
name|solrServer
decl_stmt|;
try|try
block|{
name|solrServer
operator|=
name|aliveServers
operator|.
name|get
argument_list|(
name|count
operator|%
name|size
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{
comment|//this list changes dynamically. so it is expected to get IndexOutOfBoundsException
continue|continue;
block|}
try|try
block|{
return|return
name|solrServer
operator|.
name|solrServer
operator|.
name|request
argument_list|(
name|request
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
comment|// Server is alive but the request was malformed or invalid
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getRootCause
argument_list|()
operator|instanceof
name|IOException
condition|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
name|moveAliveToDead
argument_list|(
name|solrServer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrServerException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|attempts
operator|++
expr_stmt|;
if|if
condition|(
name|attempts
operator|>=
name|aliveServers
operator|.
name|size
argument_list|()
condition|)
throw|throw
operator|new
name|SolrServerException
argument_list|(
literal|"No live SolrServers available to handle this request"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**    * Takes up one dead server and check for aliveness. The check is done in a roundrobin. Each server is checked for    * aliveness once in 'x' millis where x is decided by the setAliveCheckinterval() or it is defaulted to 1 minute    *    * @param zombieServer a server in the dead pool    */
DECL|method|checkAZombieServer
specifier|private
name|void
name|checkAZombieServer
parameter_list|(
name|ServerWrapper
name|zombieServer
parameter_list|)
block|{
name|long
name|currTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|checkLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|zombieServer
operator|.
name|lastChecked
operator|=
name|currTime
expr_stmt|;
name|QueryResponse
name|resp
init|=
name|zombieServer
operator|.
name|solrServer
operator|.
name|query
argument_list|(
name|solrQuery
argument_list|)
decl_stmt|;
if|if
condition|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|//server has come back up
name|zombieServer
operator|.
name|lastUsed
operator|=
name|currTime
expr_stmt|;
name|zombieServers
operator|.
name|remove
argument_list|(
name|zombieServer
argument_list|)
expr_stmt|;
name|aliveServers
operator|.
name|add
argument_list|(
name|zombieServer
argument_list|)
expr_stmt|;
name|zombieServer
operator|.
name|failedPings
operator|=
literal|0
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|zombieServer
operator|.
name|failedPings
operator|++
expr_stmt|;
comment|//Expected . The server is still down
block|}
finally|finally
block|{
name|checkLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|moveAliveToDead
specifier|private
name|void
name|moveAliveToDead
parameter_list|(
name|ServerWrapper
name|solrServer
parameter_list|)
block|{
name|checkLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|boolean
name|result
init|=
name|aliveServers
operator|.
name|remove
argument_list|(
name|solrServer
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
if|if
condition|(
name|zombieServers
operator|.
name|addIfAbsent
argument_list|(
name|solrServer
argument_list|)
condition|)
block|{
name|startAliveCheckExecutor
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|checkLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|field|interval
specifier|private
name|int
name|interval
init|=
name|CHECK_INTERVAL
decl_stmt|;
comment|/**    * LBHttpSolrServer keeps pinging the dead servers at fixed interval to find if it is alive. Use this to set that    * interval    *    * @param interval time in seconds    */
DECL|method|setAliveCheckInterval
specifier|public
name|void
name|setAliveCheckInterval
parameter_list|(
name|int
name|interval
parameter_list|)
block|{
if|if
condition|(
name|interval
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Alive check interval must be "
operator|+
literal|"positive, specified value = "
operator|+
name|interval
argument_list|)
throw|;
block|}
name|this
operator|.
name|interval
operator|=
name|interval
expr_stmt|;
block|}
DECL|method|startAliveCheckExecutor
specifier|private
name|void
name|startAliveCheckExecutor
parameter_list|()
block|{
if|if
condition|(
name|aliveCheckExecutor
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|aliveCheckExecutor
operator|==
literal|null
condition|)
block|{
name|aliveCheckExecutor
operator|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|()
expr_stmt|;
name|aliveCheckExecutor
operator|.
name|scheduleAtFixedRate
argument_list|(
name|getAliveCheckRunner
argument_list|(
operator|new
name|WeakReference
argument_list|<
name|LBHttpSolrServer
argument_list|>
argument_list|(
name|this
argument_list|)
argument_list|)
argument_list|,
name|this
operator|.
name|interval
argument_list|,
name|this
operator|.
name|interval
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|getAliveCheckRunner
specifier|private
specifier|static
name|Runnable
name|getAliveCheckRunner
parameter_list|(
specifier|final
name|WeakReference
argument_list|<
name|LBHttpSolrServer
argument_list|>
name|lbHttpSolrServer
parameter_list|)
block|{
return|return
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LBHttpSolrServer
name|solrServer
init|=
name|lbHttpSolrServer
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|solrServer
operator|!=
literal|null
operator|&&
name|solrServer
operator|.
name|zombieServers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ServerWrapper
name|zombieServer
range|:
name|solrServer
operator|.
name|zombieServers
control|)
block|{
name|solrServer
operator|.
name|checkAZombieServer
argument_list|(
name|zombieServer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|;
block|}
DECL|method|getHttpClient
specifier|public
name|HttpClient
name|getHttpClient
parameter_list|()
block|{
return|return
name|httpClient
return|;
block|}
DECL|method|finalize
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|this
operator|.
name|aliveCheckExecutor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|finalize
argument_list|()
expr_stmt|;
block|}
block|}
DECL|field|CHECK_INTERVAL
specifier|private
specifier|static
specifier|final
name|int
name|CHECK_INTERVAL
init|=
literal|60
operator|*
literal|1000
decl_stmt|;
comment|//1 minute between checks
block|}
end_class
end_unit
