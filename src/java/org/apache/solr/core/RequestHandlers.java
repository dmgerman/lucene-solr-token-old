begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DOMUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|StandardRequestHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_comment
comment|/**  * @author yonik  */
end_comment
begin_class
DECL|class|RequestHandlers
specifier|final
class|class
name|RequestHandlers
block|{
DECL|field|log
specifier|public
specifier|static
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|RequestHandlers
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_HANDLER_NAME
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_HANDLER_NAME
init|=
literal|"standard"
decl_stmt|;
DECL|field|map
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|SolrRequestHandler
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SolrRequestHandler
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|RequestHandlers
specifier|public
name|RequestHandlers
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|NodeList
name|nodes
init|=
operator|(
name|NodeList
operator|)
name|config
operator|.
name|evaluate
argument_list|(
literal|"requestHandler"
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// We can tolerate an error in some request handlers, still load the
comment|// others, and have a working system.
try|try
block|{
name|String
name|name
init|=
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|node
argument_list|,
literal|"name"
argument_list|,
literal|"requestHandler config"
argument_list|)
decl_stmt|;
name|String
name|className
init|=
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|node
argument_list|,
literal|"class"
argument_list|,
literal|"requestHandler config"
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"adding requestHandler "
operator|+
name|name
operator|+
literal|"="
operator|+
name|className
argument_list|)
expr_stmt|;
name|SolrRequestHandler
name|handler
init|=
operator|(
name|SolrRequestHandler
operator|)
name|Config
operator|.
name|newInstance
argument_list|(
name|className
argument_list|)
decl_stmt|;
name|handler
operator|.
name|init
argument_list|(
name|DOMUtil
operator|.
name|childNodesToNamedList
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|name
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|logOnce
argument_list|(
name|log
argument_list|,
literal|null
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//
comment|// Get the default handler and add it in the map under null and empty
comment|// to act as the default.
comment|//
name|SolrRequestHandler
name|handler
init|=
name|get
argument_list|(
name|DEFAULT_HANDLER_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
name|handler
operator|=
operator|new
name|StandardRequestHandler
argument_list|()
expr_stmt|;
name|put
argument_list|(
name|DEFAULT_HANDLER_NAME
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
name|put
argument_list|(
literal|null
argument_list|,
name|handler
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|""
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
DECL|method|get
specifier|public
name|SolrRequestHandler
name|get
parameter_list|(
name|String
name|handlerName
parameter_list|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|handlerName
argument_list|)
return|;
block|}
DECL|method|put
specifier|public
name|void
name|put
parameter_list|(
name|String
name|handlerName
parameter_list|,
name|SolrRequestHandler
name|handler
parameter_list|)
block|{
name|map
operator|.
name|put
argument_list|(
name|handlerName
argument_list|,
name|handler
argument_list|)
expr_stmt|;
if|if
condition|(
name|handlerName
operator|!=
literal|null
operator|&&
name|handlerName
operator|!=
literal|""
condition|)
block|{
if|if
condition|(
name|handler
operator|instanceof
name|SolrInfoMBean
condition|)
block|{
name|SolrInfoRegistry
operator|.
name|getRegistry
argument_list|()
operator|.
name|put
argument_list|(
name|handlerName
argument_list|,
operator|(
name|SolrInfoMBean
operator|)
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
