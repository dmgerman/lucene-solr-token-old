begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|InitialContext
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NoInitialContextException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
operator|.
name|CharFilterFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
operator|.
name|TokenFilterFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
operator|.
name|TokenizerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|ResourceLoader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|SearchComponent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|QueryResponseWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
operator|.
name|UpdateRequestProcessorFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|ResourceLoaderAware
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|SolrCoreAware
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|spelling
operator|.
name|SpellingQueryConverter
import|;
end_import
begin_comment
comment|/**  * @since solr 1.3  */
end_comment
begin_class
DECL|class|SolrResourceLoader
specifier|public
class|class
name|SolrResourceLoader
implements|implements
name|ResourceLoader
block|{
DECL|field|log
specifier|public
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SolrResourceLoader
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|project
specifier|static
specifier|final
name|String
name|project
init|=
literal|"solr"
decl_stmt|;
DECL|field|base
specifier|static
specifier|final
name|String
name|base
init|=
literal|"org.apache"
operator|+
literal|"."
operator|+
name|project
decl_stmt|;
DECL|field|packages
specifier|static
specifier|final
name|String
index|[]
name|packages
init|=
block|{
literal|""
block|,
literal|"analysis."
block|,
literal|"schema."
block|,
literal|"handler."
block|,
literal|"search."
block|,
literal|"update."
block|,
literal|"core."
block|,
literal|"request."
block|,
literal|"update.processor."
block|,
literal|"util."
block|,
literal|"spelling."
block|,
literal|"handler.component."
block|}
decl_stmt|;
DECL|field|classLoader
specifier|private
specifier|final
name|ClassLoader
name|classLoader
decl_stmt|;
DECL|field|instanceDir
specifier|private
specifier|final
name|String
name|instanceDir
decl_stmt|;
DECL|field|dataDir
specifier|private
name|String
name|dataDir
decl_stmt|;
DECL|field|waitingForCore
specifier|private
specifier|final
name|List
argument_list|<
name|SolrCoreAware
argument_list|>
name|waitingForCore
init|=
operator|new
name|ArrayList
argument_list|<
name|SolrCoreAware
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|waitingForResources
specifier|private
specifier|final
name|List
argument_list|<
name|ResourceLoaderAware
argument_list|>
name|waitingForResources
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceLoaderAware
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|UTF_8
specifier|private
specifier|static
specifier|final
name|Charset
name|UTF_8
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
DECL|field|coreProperties
specifier|private
specifier|final
name|Properties
name|coreProperties
decl_stmt|;
comment|/**    *<p>    * This loader will delegate to the context classloader when possible,    * otherwise it will attempt to resolve resources using any jar files    * found in the "lib/" directory in the specified instance directory.    * If the instance directory is not specified (=null), SolrResourceLoader#locateInstanceDir will provide one.    *<p>    */
DECL|method|SolrResourceLoader
specifier|public
name|SolrResourceLoader
parameter_list|(
name|String
name|instanceDir
parameter_list|,
name|ClassLoader
name|parent
parameter_list|,
name|Properties
name|coreProperties
parameter_list|)
block|{
if|if
condition|(
name|instanceDir
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|instanceDir
operator|=
name|SolrResourceLoader
operator|.
name|locateInstanceDir
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|instanceDir
operator|=
name|normalizeDir
argument_list|(
name|instanceDir
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Solr home set to '"
operator|+
name|this
operator|.
name|instanceDir
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|this
operator|.
name|classLoader
operator|=
name|createClassLoader
argument_list|(
operator|new
name|File
argument_list|(
name|this
operator|.
name|instanceDir
operator|+
literal|"lib/"
argument_list|)
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|this
operator|.
name|coreProperties
operator|=
name|coreProperties
expr_stmt|;
block|}
comment|/**    *<p>    * This loader will delegate to the context classloader when possible,    * otherwise it will attempt to resolve resources using any jar files    * found in the "lib/" directory in the specified instance directory.    * If the instance directory is not specified (=null), SolrResourceLoader#locateInstanceDir will provide one.    *<p>    */
DECL|method|SolrResourceLoader
specifier|public
name|SolrResourceLoader
parameter_list|(
name|String
name|instanceDir
parameter_list|,
name|ClassLoader
name|parent
parameter_list|)
block|{
name|this
argument_list|(
name|instanceDir
argument_list|,
name|parent
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|createClassLoader
specifier|static
name|ClassLoader
name|createClassLoader
parameter_list|(
name|File
name|f
parameter_list|,
name|ClassLoader
name|loader
parameter_list|)
block|{
if|if
condition|(
name|loader
operator|==
literal|null
condition|)
block|{
name|loader
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|.
name|canRead
argument_list|()
operator|&&
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|jarFiles
init|=
name|f
operator|.
name|listFiles
argument_list|()
decl_stmt|;
name|URL
index|[]
name|jars
init|=
operator|new
name|URL
index|[
name|jarFiles
operator|.
name|length
index|]
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|jarFiles
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|jars
index|[
name|j
index|]
operator|=
name|jarFiles
index|[
name|j
index|]
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Adding '"
operator|+
name|jars
index|[
name|j
index|]
operator|.
name|toString
argument_list|()
operator|+
literal|"' to Solr classloader"
argument_list|)
expr_stmt|;
block|}
return|return
name|URLClassLoader
operator|.
name|newInstance
argument_list|(
name|jars
argument_list|,
name|loader
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Can't construct solr lib class loader"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Reusing parent classloader"
argument_list|)
expr_stmt|;
return|return
name|loader
return|;
block|}
DECL|method|SolrResourceLoader
specifier|public
name|SolrResourceLoader
parameter_list|(
name|String
name|instanceDir
parameter_list|)
block|{
name|this
argument_list|(
name|instanceDir
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** Ensures a directory name always ends with a '/'. */
DECL|method|normalizeDir
specifier|public
specifier|static
name|String
name|normalizeDir
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
operator|(
name|path
operator|!=
literal|null
operator|&&
operator|(
operator|!
operator|(
name|path
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
operator|||
name|path
operator|.
name|endsWith
argument_list|(
literal|"\\"
argument_list|)
operator|)
operator|)
operator|)
condition|?
name|path
operator|+
literal|'/'
else|:
name|path
return|;
block|}
DECL|method|getConfigDir
specifier|public
name|String
name|getConfigDir
parameter_list|()
block|{
return|return
name|instanceDir
operator|+
literal|"conf/"
return|;
block|}
DECL|method|getDataDir
specifier|public
name|String
name|getDataDir
parameter_list|()
block|{
return|return
name|dataDir
return|;
block|}
DECL|method|getCoreProperties
specifier|public
name|Properties
name|getCoreProperties
parameter_list|()
block|{
return|return
name|coreProperties
return|;
block|}
comment|/** Opens a schema resource by its name.    * Override this method to customize loading schema resources.    *@return the stream for the named schema    */
DECL|method|openSchema
specifier|public
name|InputStream
name|openSchema
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|openResource
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/** Opens a config resource by its name.    * Override this method to customize loading config resources.    *@return the stream for the named configuration    */
DECL|method|openConfig
specifier|public
name|InputStream
name|openConfig
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|openResource
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/** Opens any resource by its name.    * By default, this will look in multiple locations to load the resource:    * $configDir/$resource (if resource is not absolute)    * $CWD/$resource    * otherwise, it will look for it in any jar accessible through the class loader.    * Override this method to customize loading resources.    *@return the stream for the named resource    */
DECL|method|openResource
specifier|public
name|InputStream
name|openResource
parameter_list|(
name|String
name|resource
parameter_list|)
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|f0
init|=
operator|new
name|File
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|File
name|f
init|=
name|f0
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
comment|// try $CWD/$configDir/$resource
name|f
operator|=
operator|new
name|File
argument_list|(
name|getConfigDir
argument_list|()
operator|+
name|resource
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|.
name|isFile
argument_list|()
operator|&&
name|f
operator|.
name|canRead
argument_list|()
condition|)
block|{
return|return
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|f
operator|!=
name|f0
condition|)
block|{
comment|// no success with $CWD/$configDir/$resource
if|if
condition|(
name|f0
operator|.
name|isFile
argument_list|()
operator|&&
name|f0
operator|.
name|canRead
argument_list|()
condition|)
return|return
operator|new
name|FileInputStream
argument_list|(
name|f0
argument_list|)
return|;
block|}
comment|// delegate to the class loader (looking into $INSTANCE_DIR/lib jars)
name|is
operator|=
name|classLoader
operator|.
name|getResourceAsStream
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error opening "
operator|+
name|resource
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't find resource '"
operator|+
name|resource
operator|+
literal|"' in classpath or '"
operator|+
name|getConfigDir
argument_list|()
operator|+
literal|"', cwd="
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|is
return|;
block|}
comment|/**    * Accesses a resource by name and returns the (non comment) lines    * containing data.    *    *<p>    * A comment line is any line that starts with the character "#"    *</p>    *    * @param resource    * @return a list of non-blank non-comment lines with whitespace trimmed    * from front and back.    * @throws IOException    */
DECL|method|getLines
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLines
parameter_list|(
name|String
name|resource
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getLines
argument_list|(
name|resource
argument_list|,
name|UTF_8
argument_list|)
return|;
block|}
comment|/**    * Accesses a resource by name and returns the (non comment) lines containing    * data using the given character encoding.    *    *<p>    * A comment line is any line that starts with the character "#"    *</p>    *    * @param resource the file to be read    * @param encoding    * @return a list of non-blank non-comment lines with whitespace trimmed    * @throws IOException    */
DECL|method|getLines
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLines
parameter_list|(
name|String
name|resource
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getLines
argument_list|(
name|resource
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
name|encoding
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getLines
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLines
parameter_list|(
name|String
name|resource
parameter_list|,
name|Charset
name|charset
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|input
init|=
literal|null
decl_stmt|;
name|input
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|openResource
argument_list|(
name|resource
argument_list|)
argument_list|,
name|charset
argument_list|)
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|word
init|=
literal|null
init|;
operator|(
name|word
operator|=
name|input
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|;
control|)
block|{
comment|// skip comments
if|if
condition|(
name|word
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
continue|continue;
name|word
operator|=
name|word
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|// skip blank lines
if|if
condition|(
name|word
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
name|lines
operator|.
name|add
argument_list|(
name|word
argument_list|)
expr_stmt|;
block|}
return|return
name|lines
return|;
block|}
DECL|method|findClass
specifier|public
name|Class
name|findClass
parameter_list|(
name|String
name|cname
parameter_list|,
name|String
modifier|...
name|subpackages
parameter_list|)
block|{
if|if
condition|(
name|subpackages
operator|.
name|length
operator|==
literal|0
condition|)
name|subpackages
operator|=
name|packages
expr_stmt|;
comment|// first try cname == full name
try|try
block|{
return|return
name|Class
operator|.
name|forName
argument_list|(
name|cname
argument_list|,
literal|true
argument_list|,
name|classLoader
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|String
name|newName
init|=
name|cname
decl_stmt|;
if|if
condition|(
name|newName
operator|.
name|startsWith
argument_list|(
name|project
argument_list|)
condition|)
block|{
name|newName
operator|=
name|cname
operator|.
name|substring
argument_list|(
name|project
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|subpackage
range|:
name|subpackages
control|)
block|{
try|try
block|{
name|String
name|name
init|=
name|base
operator|+
literal|'.'
operator|+
name|subpackage
operator|+
name|newName
decl_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Trying class name "
operator|+
name|name
argument_list|)
expr_stmt|;
return|return
name|Class
operator|.
name|forName
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|classLoader
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e1
parameter_list|)
block|{
comment|// ignore... assume first exception is best.
block|}
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error loading class '"
operator|+
name|cname
operator|+
literal|"'"
argument_list|,
name|e
argument_list|,
literal|false
argument_list|)
throw|;
block|}
block|}
DECL|method|newInstance
specifier|public
name|Object
name|newInstance
parameter_list|(
name|String
name|cname
parameter_list|,
name|String
modifier|...
name|subpackages
parameter_list|)
block|{
name|Class
name|clazz
init|=
name|findClass
argument_list|(
name|cname
argument_list|,
name|subpackages
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Can not find class: "
operator|+
name|cname
operator|+
literal|" in "
operator|+
name|classLoader
argument_list|,
literal|false
argument_list|)
throw|;
block|}
name|Object
name|obj
init|=
literal|null
decl_stmt|;
try|try
block|{
name|obj
operator|=
name|clazz
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error instantiating class: '"
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|,
name|e
argument_list|,
literal|false
argument_list|)
throw|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|SolrCoreAware
condition|)
block|{
name|assertAwareCompatibility
argument_list|(
name|SolrCoreAware
operator|.
name|class
argument_list|,
name|obj
argument_list|)
expr_stmt|;
name|waitingForCore
operator|.
name|add
argument_list|(
operator|(
name|SolrCoreAware
operator|)
name|obj
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|ResourceLoaderAware
condition|)
block|{
name|assertAwareCompatibility
argument_list|(
name|ResourceLoaderAware
operator|.
name|class
argument_list|,
name|obj
argument_list|)
expr_stmt|;
name|waitingForResources
operator|.
name|add
argument_list|(
operator|(
name|ResourceLoaderAware
operator|)
name|obj
argument_list|)
expr_stmt|;
block|}
return|return
name|obj
return|;
block|}
comment|/**    * Tell all {@link SolrCoreAware} instances about the SolrCore    */
DECL|method|inform
specifier|public
name|void
name|inform
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|this
operator|.
name|dataDir
operator|=
name|core
operator|.
name|getDataDir
argument_list|()
expr_stmt|;
for|for
control|(
name|SolrCoreAware
name|aware
range|:
name|waitingForCore
control|)
block|{
name|aware
operator|.
name|inform
argument_list|(
name|core
argument_list|)
expr_stmt|;
block|}
name|waitingForCore
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tell all {@link ResourceLoaderAware} instances about the loader    */
DECL|method|inform
specifier|public
name|void
name|inform
parameter_list|(
name|ResourceLoader
name|loader
parameter_list|)
block|{
for|for
control|(
name|ResourceLoaderAware
name|aware
range|:
name|waitingForResources
control|)
block|{
name|aware
operator|.
name|inform
argument_list|(
name|loader
argument_list|)
expr_stmt|;
block|}
name|waitingForResources
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * Determines the instanceDir from the environment.    * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);    * if both fail, defaults to solr/    * @return the instance directory name    */
comment|/**    * Finds the instanceDir based on looking up the value in one of three places:    *<ol>    *<li>JNDI: via java:comp/env/solr/home</li>    *<li>The system property solr.solr.home</li>    *<li>Look in the current working directory for a solr/ directory</li>     *</ol>    *    * The return value is normalized.  Normalization essentially means it ends in a trailing slash.    * @return A normalized instanceDir    *    * @see #normalizeDir(String)     */
DECL|method|locateInstanceDir
specifier|public
specifier|static
name|String
name|locateInstanceDir
parameter_list|()
block|{
name|String
name|home
init|=
literal|null
decl_stmt|;
comment|// Try JNDI
try|try
block|{
name|Context
name|c
init|=
operator|new
name|InitialContext
argument_list|()
decl_stmt|;
name|home
operator|=
operator|(
name|String
operator|)
name|c
operator|.
name|lookup
argument_list|(
literal|"java:comp/env/"
operator|+
name|project
operator|+
literal|"/home"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Using JNDI solr.home: "
operator|+
name|home
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoInitialContextException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"JNDI not configured for "
operator|+
name|project
operator|+
literal|" (NoInitialContextEx)"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No /"
operator|+
name|project
operator|+
literal|"/home in JNDI"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Odd RuntimeException while testing for JNDI: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Now try system property
if|if
condition|(
name|home
operator|==
literal|null
condition|)
block|{
name|String
name|prop
init|=
name|project
operator|+
literal|".solr.home"
decl_stmt|;
name|home
operator|=
name|System
operator|.
name|getProperty
argument_list|(
name|prop
argument_list|)
expr_stmt|;
if|if
condition|(
name|home
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"using system property "
operator|+
name|prop
operator|+
literal|": "
operator|+
name|home
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if all else fails, try
if|if
condition|(
name|home
operator|==
literal|null
condition|)
block|{
name|home
operator|=
name|project
operator|+
literal|'/'
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
name|project
operator|+
literal|" home defaulted to '"
operator|+
name|home
operator|+
literal|"' (could not find system property or JNDI)"
argument_list|)
expr_stmt|;
block|}
return|return
name|normalizeDir
argument_list|(
name|home
argument_list|)
return|;
block|}
DECL|method|getInstanceDir
specifier|public
name|String
name|getInstanceDir
parameter_list|()
block|{
return|return
name|instanceDir
return|;
block|}
comment|/**    * Keep a list of classes that are allowed to implement each 'Aware' interface    */
DECL|field|awareCompatibility
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|,
name|Class
index|[]
argument_list|>
name|awareCompatibility
decl_stmt|;
static|static
block|{
name|awareCompatibility
operator|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|,
name|Class
index|[]
argument_list|>
argument_list|()
expr_stmt|;
name|awareCompatibility
operator|.
name|put
argument_list|(
name|SolrCoreAware
operator|.
name|class
argument_list|,
operator|new
name|Class
index|[]
block|{
name|SolrRequestHandler
operator|.
name|class
block|,
name|QueryResponseWriter
operator|.
name|class
block|,
name|SearchComponent
operator|.
name|class
block|,
name|UpdateRequestProcessorFactory
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
name|awareCompatibility
operator|.
name|put
argument_list|(
name|ResourceLoaderAware
operator|.
name|class
argument_list|,
operator|new
name|Class
index|[]
block|{
name|CharFilterFactory
operator|.
name|class
block|,
name|TokenFilterFactory
operator|.
name|class
block|,
name|TokenizerFactory
operator|.
name|class
block|,
name|FieldType
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Utility function to throw an exception if the class is invalid    */
DECL|method|assertAwareCompatibility
name|void
name|assertAwareCompatibility
parameter_list|(
name|Class
name|aware
parameter_list|,
name|Object
name|obj
parameter_list|)
block|{
name|Class
index|[]
name|valid
init|=
name|awareCompatibility
operator|.
name|get
argument_list|(
name|aware
argument_list|)
decl_stmt|;
if|if
condition|(
name|valid
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unknown Aware interface: "
operator|+
name|aware
argument_list|)
throw|;
block|}
for|for
control|(
name|Class
name|v
range|:
name|valid
control|)
block|{
if|if
condition|(
name|v
operator|.
name|isInstance
argument_list|(
name|obj
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"Invalid 'Aware' object: "
argument_list|)
operator|.
name|append
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" -- "
argument_list|)
operator|.
name|append
argument_list|(
name|aware
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" must be an instance of: "
argument_list|)
expr_stmt|;
for|for
control|(
name|Class
name|v
range|:
name|valid
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
operator|.
name|append
argument_list|(
name|v
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"] "
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
end_class
end_unit
