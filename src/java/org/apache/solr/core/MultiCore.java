begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|DOMUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|MultiCoreHandler
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import
begin_comment
comment|/**  * @version $Id$  * @since solr 1.3  */
end_comment
begin_class
DECL|class|MultiCore
specifier|public
class|class
name|MultiCore
block|{
DECL|field|log
specifier|private
specifier|static
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|MultiCore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|instance
specifier|private
specifier|static
specifier|final
name|MultiCore
name|instance
init|=
operator|new
name|MultiCore
argument_list|()
decl_stmt|;
comment|// Synchronized map of all cores
DECL|field|cores
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SolrCore
argument_list|>
name|cores
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SolrCore
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|defaultCore
specifier|private
name|SolrCore
name|defaultCore
init|=
literal|null
decl_stmt|;
DECL|field|enabled
specifier|private
name|boolean
name|enabled
init|=
literal|false
decl_stmt|;
DECL|field|persistent
specifier|private
name|boolean
name|persistent
init|=
literal|false
decl_stmt|;
DECL|field|adminPath
specifier|private
name|String
name|adminPath
init|=
literal|null
decl_stmt|;
DECL|field|multiCoreHandler
specifier|private
name|MultiCoreHandler
name|multiCoreHandler
init|=
literal|null
decl_stmt|;
DECL|field|configFile
specifier|private
name|File
name|configFile
init|=
literal|null
decl_stmt|;
DECL|field|libDir
specifier|private
name|String
name|libDir
init|=
literal|null
decl_stmt|;
DECL|field|libLoader
specifier|private
name|ClassLoader
name|libLoader
init|=
literal|null
decl_stmt|;
comment|// no one else can make the registry
DECL|method|MultiCore
specifier|private
name|MultiCore
parameter_list|()
block|{ }
comment|//-------------------------------------------------------------------
comment|// Initialization / Cleanup
comment|//-------------------------------------------------------------------
comment|/**    * Load a config file listing the available solr cores    */
DECL|method|load
specifier|public
name|void
name|load
parameter_list|(
name|String
name|dir
parameter_list|,
name|File
name|configFile
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|this
operator|.
name|configFile
operator|=
name|configFile
expr_stmt|;
name|Config
name|cfg
init|=
operator|new
name|Config
argument_list|(
operator|new
name|SolrResourceLoader
argument_list|(
name|dir
argument_list|)
argument_list|,
literal|null
argument_list|,
operator|new
name|FileInputStream
argument_list|(
name|configFile
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|persistent
operator|=
name|cfg
operator|.
name|getBool
argument_list|(
literal|"multicore/@persistent"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|adminPath
operator|=
name|cfg
operator|.
name|get
argument_list|(
literal|"multicore/@adminPath"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|libDir
operator|=
name|cfg
operator|.
name|get
argument_list|(
literal|"multicore/@sharedLib"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|libDir
operator|!=
literal|null
condition|)
block|{
comment|// relative dir to conf
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|libDir
argument_list|)
decl_stmt|;
name|libDir
operator|=
name|f
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"loading shared library: "
operator|+
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|libLoader
operator|=
name|SolrResourceLoader
operator|.
name|createClassLoader
argument_list|(
name|f
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|adminPath
operator|!=
literal|null
condition|)
block|{
name|multiCoreHandler
operator|=
operator|new
name|MultiCoreHandler
argument_list|()
expr_stmt|;
block|}
name|boolean
name|hasDefault
init|=
literal|false
decl_stmt|;
name|NodeList
name|nodes
init|=
operator|(
name|NodeList
operator|)
name|cfg
operator|.
name|evaluate
argument_list|(
literal|"multicore/core"
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|name
init|=
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|node
argument_list|,
literal|"name"
argument_list|,
literal|"Core needs a name"
argument_list|)
decl_stmt|;
name|String
name|instanceDir
init|=
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|node
argument_list|,
literal|"instanceDir"
argument_list|,
literal|"Missing required 'instanceDir'"
argument_list|)
decl_stmt|;
name|String
name|defaultStr
init|=
name|DOMUtil
operator|.
name|getAttr
argument_list|(
name|node
argument_list|,
literal|"default"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Make the instanceDir relative to the core config
name|File
name|idir
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|instanceDir
argument_list|)
decl_stmt|;
name|instanceDir
operator|=
name|idir
operator|.
name|getPath
argument_list|()
expr_stmt|;
comment|// Initialize the solr config
name|SolrResourceLoader
name|solrLoader
init|=
operator|new
name|SolrResourceLoader
argument_list|(
name|instanceDir
argument_list|,
name|libLoader
argument_list|)
decl_stmt|;
name|SolrConfig
name|solrConfig
init|=
operator|new
name|SolrConfig
argument_list|(
name|solrLoader
argument_list|,
name|SolrConfig
operator|.
name|DEFAULT_CONF_FILE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|IndexSchema
name|schema
init|=
operator|new
name|IndexSchema
argument_list|(
name|solrConfig
argument_list|,
name|instanceDir
operator|+
literal|"/conf/schema.xml"
argument_list|)
decl_stmt|;
name|SolrCore
name|core
init|=
operator|new
name|SolrCore
argument_list|(
name|name
argument_list|,
literal|null
argument_list|,
name|solrConfig
argument_list|,
name|schema
argument_list|)
decl_stmt|;
comment|// Register the new core
name|SolrCore
name|old
init|=
name|this
operator|.
name|register
argument_list|(
name|core
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|cfg
operator|.
name|getName
argument_list|()
operator|+
literal|" registers multiple cores to the same name: "
operator|+
name|name
argument_list|)
throw|;
block|}
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|defaultStr
argument_list|)
condition|)
block|{
if|if
condition|(
name|hasDefault
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"multicore.xml defines multiple default cores. "
operator|+
name|getDefaultCore
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" and "
operator|+
name|core
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|this
operator|.
name|setDefaultCore
argument_list|(
name|core
argument_list|)
expr_stmt|;
name|hasDefault
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|SolrConfig
operator|.
name|severeErrors
operator|.
name|add
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|SolrException
operator|.
name|logOnce
argument_list|(
name|log
argument_list|,
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|hasDefault
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"multicore.xml must define at least one default core"
argument_list|)
throw|;
block|}
name|enabled
operator|=
literal|true
expr_stmt|;
block|}
comment|/** Stops all cores. */
DECL|method|shutdown
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
synchronized|synchronized
init|(
name|cores
init|)
block|{
for|for
control|(
name|SolrCore
name|core
range|:
name|cores
operator|.
name|values
argument_list|()
control|)
block|{
name|core
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|cores
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|finalize
specifier|protected
name|void
name|finalize
parameter_list|()
block|{
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|//-------------------------------------------------------------------
comment|//
comment|//-------------------------------------------------------------------
comment|/** Get the singleton */
DECL|method|getRegistry
specifier|public
specifier|static
name|MultiCore
name|getRegistry
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
DECL|method|register
specifier|public
name|SolrCore
name|register
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
if|if
condition|(
name|core
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can not register a null core."
argument_list|)
throw|;
block|}
name|String
name|name
init|=
name|core
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid core name."
argument_list|)
throw|;
block|}
name|SolrCore
name|old
init|=
name|cores
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|core
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"registering core: "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"replacing core: "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|old
return|;
block|}
comment|/**    * While the new core is loading, requests will continue to be dispatched to    * and processed by the old core    *     * @param core    * @throws ParserConfigurationException    * @throws IOException    * @throws SAXException    */
DECL|method|reload
specifier|public
name|void
name|reload
parameter_list|(
name|SolrCore
name|core
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|boolean
name|wasDefault
init|=
operator|(
name|core
operator|==
name|defaultCore
operator|)
decl_stmt|;
name|SolrResourceLoader
name|loader
init|=
operator|new
name|SolrResourceLoader
argument_list|(
name|core
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|getInstanceDir
argument_list|()
argument_list|)
decl_stmt|;
name|SolrConfig
name|config
init|=
operator|new
name|SolrConfig
argument_list|(
name|loader
argument_list|,
name|core
operator|.
name|getConfigFile
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|IndexSchema
name|schema
init|=
operator|new
name|IndexSchema
argument_list|(
name|config
argument_list|,
name|core
operator|.
name|getSchemaFile
argument_list|()
argument_list|)
decl_stmt|;
name|SolrCore
name|loaded
init|=
operator|new
name|SolrCore
argument_list|(
name|core
operator|.
name|getName
argument_list|()
argument_list|,
name|core
operator|.
name|getDataDir
argument_list|()
argument_list|,
name|config
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|this
operator|.
name|register
argument_list|(
name|loaded
argument_list|)
expr_stmt|;
if|if
condition|(
name|wasDefault
condition|)
block|{
name|this
operator|.
name|setDefaultCore
argument_list|(
name|loaded
argument_list|)
expr_stmt|;
block|}
comment|// TODO? -- add some kind of hook to close the core after all references are
comment|// gone...  is finalize() enough?
block|}
DECL|method|setDefaultCore
specifier|public
name|void
name|setDefaultCore
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|defaultCore
operator|=
name|core
expr_stmt|;
name|cores
operator|.
name|put
argument_list|(
literal|null
argument_list|,
name|core
argument_list|)
expr_stmt|;
name|cores
operator|.
name|put
argument_list|(
literal|""
argument_list|,
name|core
argument_list|)
expr_stmt|;
block|}
DECL|method|getDefaultCore
specifier|public
name|SolrCore
name|getDefaultCore
parameter_list|()
block|{
return|return
name|defaultCore
return|;
block|}
comment|/**    * @return a Collection of registered SolrCores    */
DECL|method|getCores
specifier|public
name|Collection
argument_list|<
name|SolrCore
argument_list|>
name|getCores
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|SolrCore
argument_list|>
name|c
init|=
operator|new
name|ArrayList
argument_list|<
name|SolrCore
argument_list|>
argument_list|(
name|cores
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SolrCore
argument_list|>
name|entry
range|:
name|cores
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|c
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|c
return|;
block|}
DECL|method|getCore
specifier|public
name|SolrCore
name|getCore
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|cores
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|isEnabled
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|enabled
return|;
block|}
DECL|method|setEnabled
specifier|public
name|void
name|setEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|this
operator|.
name|enabled
operator|=
name|enabled
expr_stmt|;
block|}
DECL|method|isPersistent
specifier|public
name|boolean
name|isPersistent
parameter_list|()
block|{
return|return
name|persistent
return|;
block|}
DECL|method|setPersistent
specifier|public
name|void
name|setPersistent
parameter_list|(
name|boolean
name|persistent
parameter_list|)
block|{
name|this
operator|.
name|persistent
operator|=
name|persistent
expr_stmt|;
block|}
DECL|method|getAdminPath
specifier|public
name|String
name|getAdminPath
parameter_list|()
block|{
return|return
name|adminPath
return|;
block|}
DECL|method|setAdminPath
specifier|public
name|void
name|setAdminPath
parameter_list|(
name|String
name|adminPath
parameter_list|)
block|{
name|this
operator|.
name|adminPath
operator|=
name|adminPath
expr_stmt|;
block|}
DECL|method|getMultiCoreHandler
specifier|public
name|MultiCoreHandler
name|getMultiCoreHandler
parameter_list|()
block|{
return|return
name|multiCoreHandler
return|;
block|}
DECL|method|getConfigFile
specifier|public
name|File
name|getConfigFile
parameter_list|()
block|{
return|return
name|configFile
return|;
block|}
block|}
end_class
end_unit
