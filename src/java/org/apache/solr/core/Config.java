begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import
begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|DOMUtil
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|*
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPath
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathFactory
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpressionException
import|;
end_import
begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import
begin_comment
comment|/**  * @version $Id$  */
end_comment
begin_class
DECL|class|Config
specifier|public
class|class
name|Config
block|{
DECL|field|log
specifier|public
specifier|static
specifier|final
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|Config
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|xpathFactory
specifier|static
specifier|final
name|XPathFactory
name|xpathFactory
init|=
name|XPathFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
DECL|field|doc
specifier|private
specifier|final
name|Document
name|doc
decl_stmt|;
DECL|field|prefix
specifier|private
specifier|final
name|String
name|prefix
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|loader
specifier|private
specifier|final
name|SolrResourceLoader
name|loader
decl_stmt|;
annotation|@
name|Deprecated
DECL|method|Config
specifier|public
name|Config
parameter_list|(
name|String
name|name
parameter_list|,
name|InputStream
name|is
parameter_list|,
name|String
name|prefix
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|name
argument_list|,
name|is
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
DECL|method|Config
specifier|public
name|Config
parameter_list|(
name|SolrResourceLoader
name|loader
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|this
argument_list|(
name|loader
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|Config
specifier|public
name|Config
parameter_list|(
name|SolrResourceLoader
name|loader
parameter_list|,
name|String
name|name
parameter_list|,
name|InputStream
name|is
parameter_list|,
name|String
name|prefix
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
if|if
condition|(
name|loader
operator|==
literal|null
condition|)
block|{
name|loader
operator|=
operator|new
name|SolrResourceLoader
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|loader
operator|=
name|loader
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
operator|&&
operator|!
name|prefix
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|prefix
operator|+=
literal|'/'
expr_stmt|;
name|InputStream
name|lis
init|=
name|is
decl_stmt|;
try|try
block|{
if|if
condition|(
name|lis
operator|==
literal|null
condition|)
name|lis
operator|=
name|loader
operator|.
name|openResource
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
name|builder
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|doc
operator|=
name|builder
operator|.
name|parse
argument_list|(
name|lis
argument_list|)
expr_stmt|;
name|DOMUtil
operator|.
name|substituteSystemProperties
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Error in "
operator|+
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
comment|// if this opens the resource, it also closes it
if|if
condition|(
name|lis
operator|!=
name|is
condition|)
name|lis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @since solr 1.3    */
DECL|method|getResourceLoader
specifier|public
name|SolrResourceLoader
name|getResourceLoader
parameter_list|()
block|{
return|return
name|loader
return|;
block|}
DECL|method|getDocument
specifier|public
name|Document
name|getDocument
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
DECL|method|getXPath
specifier|public
name|XPath
name|getXPath
parameter_list|()
block|{
return|return
name|xpathFactory
operator|.
name|newXPath
argument_list|()
return|;
block|}
DECL|method|normalize
specifier|private
name|String
name|normalize
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
operator|(
name|prefix
operator|==
literal|null
operator|||
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
operator|)
condition|?
name|path
else|:
name|prefix
operator|+
name|path
return|;
block|}
DECL|method|evaluate
specifier|public
name|Object
name|evaluate
parameter_list|(
name|String
name|path
parameter_list|,
name|QName
name|type
parameter_list|)
block|{
name|XPath
name|xpath
init|=
name|xpathFactory
operator|.
name|newXPath
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|xstr
init|=
name|normalize
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// TODO: instead of prepending /prefix/, we could do the search rooted at /prefix...
name|Object
name|o
init|=
name|xpath
operator|.
name|evaluate
argument_list|(
name|xstr
argument_list|,
name|doc
argument_list|,
name|type
argument_list|)
decl_stmt|;
return|return
name|o
return|;
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error in xpath:"
operator|+
name|path
operator|+
literal|" for "
operator|+
name|name
argument_list|,
name|e
argument_list|,
literal|false
argument_list|)
throw|;
block|}
block|}
DECL|method|getNode
specifier|public
name|Node
name|getNode
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|errIfMissing
parameter_list|)
block|{
name|XPath
name|xpath
init|=
name|xpathFactory
operator|.
name|newXPath
argument_list|()
decl_stmt|;
name|Node
name|nd
init|=
literal|null
decl_stmt|;
name|String
name|xstr
init|=
name|normalize
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|nd
operator|=
operator|(
name|Node
operator|)
name|xpath
operator|.
name|evaluate
argument_list|(
name|xstr
argument_list|,
name|doc
argument_list|,
name|XPathConstants
operator|.
name|NODE
argument_list|)
expr_stmt|;
if|if
condition|(
name|nd
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|errIfMissing
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|name
operator|+
literal|" missing "
operator|+
name|path
argument_list|)
throw|;
block|}
else|else
block|{
name|log
operator|.
name|fine
argument_list|(
name|name
operator|+
literal|" missing optional "
operator|+
name|path
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
name|log
operator|.
name|finest
argument_list|(
name|name
operator|+
literal|":"
operator|+
name|path
operator|+
literal|"="
operator|+
name|nd
argument_list|)
expr_stmt|;
return|return
name|nd
return|;
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Error in xpath"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error in xpath:"
operator|+
name|xstr
operator|+
literal|" for "
operator|+
name|name
argument_list|,
name|e
argument_list|,
literal|false
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|e
operator|)
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Error in xpath"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error in xpath:"
operator|+
name|xstr
operator|+
literal|" for "
operator|+
name|name
argument_list|,
name|e
argument_list|,
literal|false
argument_list|)
throw|;
block|}
block|}
DECL|method|getVal
specifier|public
name|String
name|getVal
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|errIfMissing
parameter_list|)
block|{
name|Node
name|nd
init|=
name|getNode
argument_list|(
name|path
argument_list|,
name|errIfMissing
argument_list|)
decl_stmt|;
if|if
condition|(
name|nd
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|txt
init|=
name|DOMUtil
operator|.
name|getText
argument_list|(
name|nd
argument_list|)
decl_stmt|;
name|log
operator|.
name|fine
argument_list|(
name|name
operator|+
literal|' '
operator|+
name|path
operator|+
literal|'='
operator|+
name|txt
argument_list|)
expr_stmt|;
return|return
name|txt
return|;
comment|/******     short typ = nd.getNodeType();     if (typ==Node.ATTRIBUTE_NODE || typ==Node.TEXT_NODE) {       return nd.getNodeValue();     }     return nd.getTextContent();     ******/
block|}
DECL|method|get
specifier|public
name|String
name|get
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|getVal
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|get
specifier|public
name|String
name|get
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|def
parameter_list|)
block|{
name|String
name|val
init|=
name|getVal
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|val
operator|!=
literal|null
condition|?
name|val
else|:
name|def
return|;
block|}
DECL|method|getInt
specifier|public
name|int
name|getInt
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|getVal
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getInt
specifier|public
name|int
name|getInt
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|def
parameter_list|)
block|{
name|String
name|val
init|=
name|getVal
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|val
operator|!=
literal|null
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|val
argument_list|)
else|:
name|def
return|;
block|}
DECL|method|getBool
specifier|public
name|boolean
name|getBool
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|getVal
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getBool
specifier|public
name|boolean
name|getBool
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|def
parameter_list|)
block|{
name|String
name|val
init|=
name|getVal
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|val
operator|!=
literal|null
condition|?
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|val
argument_list|)
else|:
name|def
return|;
block|}
DECL|method|getFloat
specifier|public
name|float
name|getFloat
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|getVal
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getFloat
specifier|public
name|float
name|getFloat
parameter_list|(
name|String
name|path
parameter_list|,
name|float
name|def
parameter_list|)
block|{
name|String
name|val
init|=
name|getVal
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|val
operator|!=
literal|null
condition|?
name|Float
operator|.
name|parseFloat
argument_list|(
name|val
argument_list|)
else|:
name|def
return|;
block|}
comment|/**    * @return the XML filename    */
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|// The following functions were moved to ResourceLoader
comment|//-----------------------------------------------------------------------------
annotation|@
name|Deprecated
DECL|method|getConfigDir
specifier|public
name|String
name|getConfigDir
parameter_list|()
block|{
return|return
name|loader
operator|.
name|getConfigDir
argument_list|()
return|;
block|}
annotation|@
name|Deprecated
DECL|method|openResource
specifier|public
name|InputStream
name|openResource
parameter_list|(
name|String
name|resource
parameter_list|)
block|{
return|return
name|loader
operator|.
name|openResource
argument_list|(
name|resource
argument_list|)
return|;
block|}
annotation|@
name|Deprecated
DECL|method|getLines
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLines
parameter_list|(
name|String
name|resource
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|loader
operator|.
name|getLines
argument_list|(
name|resource
argument_list|)
return|;
block|}
annotation|@
name|Deprecated
DECL|method|findClass
specifier|public
name|Class
name|findClass
parameter_list|(
name|String
name|cname
parameter_list|,
name|String
modifier|...
name|subpackages
parameter_list|)
block|{
return|return
name|loader
operator|.
name|findClass
argument_list|(
name|cname
argument_list|,
name|subpackages
argument_list|)
return|;
block|}
annotation|@
name|Deprecated
DECL|method|newInstance
specifier|public
name|Object
name|newInstance
parameter_list|(
name|String
name|cname
parameter_list|,
name|String
modifier|...
name|subpackages
parameter_list|)
block|{
return|return
name|loader
operator|.
name|newInstance
argument_list|(
name|cname
argument_list|,
name|subpackages
argument_list|)
return|;
block|}
annotation|@
name|Deprecated
DECL|method|getInstanceDir
specifier|public
name|String
name|getInstanceDir
parameter_list|()
block|{
return|return
name|loader
operator|.
name|getInstanceDir
argument_list|()
return|;
block|}
block|}
end_class
end_unit
