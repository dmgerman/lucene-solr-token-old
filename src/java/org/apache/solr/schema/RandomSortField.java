begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Fieldable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDocComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortComparatorSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|TextResponseWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|XMLWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|function
operator|.
name|DocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import
begin_comment
comment|/**  * Utility Field used for random sorting.  It should not be passed a value.  *   * This random sorting implementation uses the dynamic field name to set the  * random 'seed'.  To get random sorting order, you need to use a random  * dynamic field name.  For example, you will need to configure schema.xml:  *   *<types>  *  ...  *<fieldType name="random" class="solr.RandomSortField" />  *  ...   *</types>  *<fields>  *  ...  *<dynamicField name="random*" type="rand" indexed="true" stored="false"/>  *  ...  *</fields>  *   *  http://localhost:8983/solr/select/?q=*:*&fl=name&sort=rand_1234%20desc  *  http://localhost:8983/solr/select/?q=*:*&fl=name&sort=rand_2345%20desc  *  http://localhost:8983/solr/select/?q=*:*&fl=name&sort=rand_ABDC%20desc  *  http://localhost:8983/solr/select/?q=*:*&fl=name&sort=rand_21%20desc  *    * Note that multiple calls to the same URL will return the same sorting order.  *   * @version $Id$  * @since solr 1.3  */
end_comment
begin_class
DECL|class|RandomSortField
specifier|public
class|class
name|RandomSortField
extends|extends
name|FieldType
block|{
comment|// Thomas Wang's hash32shift function, from http://www.cris.com/~Ttwang/tech/inthash.htm
comment|// slightly modified to return only positive integers.
DECL|method|hash
specifier|private
specifier|static
name|int
name|hash
parameter_list|(
name|int
name|key
parameter_list|)
block|{
name|key
operator|=
operator|~
name|key
operator|+
operator|(
name|key
operator|<<
literal|15
operator|)
expr_stmt|;
comment|// key = (key<< 15) - key - 1;
name|key
operator|=
name|key
operator|^
operator|(
name|key
operator|>>>
literal|12
operator|)
expr_stmt|;
name|key
operator|=
name|key
operator|+
operator|(
name|key
operator|<<
literal|2
operator|)
expr_stmt|;
name|key
operator|=
name|key
operator|^
operator|(
name|key
operator|>>>
literal|4
operator|)
expr_stmt|;
name|key
operator|=
name|key
operator|*
literal|2057
expr_stmt|;
comment|// key = (key + (key<< 3)) + (key<< 11);
name|key
operator|=
name|key
operator|^
operator|(
name|key
operator|>>>
literal|16
operator|)
expr_stmt|;
return|return
name|key
operator|>>>
literal|1
return|;
block|}
comment|/**     * Given a field name and an IndexReader, get a random hash seed.      * Using dynamic fields, you can force the random order to change     */
DECL|method|getSeed
specifier|private
specifier|static
name|int
name|getSeed
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|IndexReader
name|r
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|fieldName
operator|.
name|hashCode
argument_list|()
operator|^
name|r
operator|.
name|getVersion
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getSortField
specifier|public
name|SortField
name|getSortField
parameter_list|(
name|SchemaField
name|field
parameter_list|,
name|boolean
name|reverse
parameter_list|)
block|{
return|return
operator|new
name|RandomSort
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|reverse
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getValueSource
specifier|public
name|ValueSource
name|getValueSource
parameter_list|(
name|SchemaField
name|field
parameter_list|)
block|{
return|return
operator|new
name|RandomValueSource
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|XMLWriter
name|xmlWriter
parameter_list|,
name|String
name|name
parameter_list|,
name|Fieldable
name|f
parameter_list|)
throws|throws
name|IOException
block|{ }
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|TextResponseWriter
name|writer
parameter_list|,
name|String
name|name
parameter_list|,
name|Fieldable
name|f
parameter_list|)
throws|throws
name|IOException
block|{ }
DECL|class|RandomComparator
specifier|private
specifier|static
class|class
name|RandomComparator
implements|implements
name|ScoreDocComparator
block|{
DECL|field|seed
specifier|final
name|int
name|seed
decl_stmt|;
DECL|method|RandomComparator
name|RandomComparator
parameter_list|(
name|int
name|seed
parameter_list|)
block|{
name|this
operator|.
name|seed
operator|=
name|seed
expr_stmt|;
block|}
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|ScoreDoc
name|i
parameter_list|,
name|ScoreDoc
name|j
parameter_list|)
block|{
return|return
name|hash
argument_list|(
name|i
operator|.
name|doc
operator|+
name|seed
argument_list|)
operator|-
name|hash
argument_list|(
name|j
operator|.
name|doc
operator|+
name|seed
argument_list|)
return|;
block|}
DECL|method|sortValue
specifier|public
name|Comparable
name|sortValue
parameter_list|(
name|ScoreDoc
name|i
parameter_list|)
block|{
return|return
operator|new
name|Integer
argument_list|(
name|hash
argument_list|(
name|i
operator|.
name|doc
operator|+
name|seed
argument_list|)
argument_list|)
return|;
block|}
DECL|method|sortType
specifier|public
name|int
name|sortType
parameter_list|()
block|{
return|return
name|SortField
operator|.
name|CUSTOM
return|;
block|}
block|}
empty_stmt|;
DECL|class|RandomSort
specifier|private
specifier|static
class|class
name|RandomSort
extends|extends
name|SortField
block|{
DECL|method|RandomSort
specifier|public
name|RandomSort
parameter_list|(
name|String
name|n
parameter_list|,
name|boolean
name|reverse
parameter_list|)
block|{
name|super
argument_list|(
name|n
argument_list|,
name|SortField
operator|.
name|CUSTOM
argument_list|,
name|reverse
argument_list|)
expr_stmt|;
block|}
DECL|class|RandomComparatorSource
specifier|static
class|class
name|RandomComparatorSource
implements|implements
name|SortComparatorSource
block|{
DECL|field|field
specifier|final
name|String
name|field
decl_stmt|;
DECL|method|RandomComparatorSource
specifier|public
name|RandomComparatorSource
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
DECL|method|newComparator
specifier|public
name|ScoreDocComparator
name|newComparator
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|fieldname
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|RandomComparator
argument_list|(
name|getSeed
argument_list|(
name|field
argument_list|,
name|reader
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|field
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|RandomComparatorSource
operator|)
condition|)
return|return
literal|false
return|;
name|RandomComparatorSource
name|other
init|=
operator|(
name|RandomComparatorSource
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|field
operator|.
name|equals
argument_list|(
name|other
operator|.
name|field
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getFactory
specifier|public
name|SortComparatorSource
name|getFactory
parameter_list|()
block|{
return|return
operator|new
name|RandomComparatorSource
argument_list|(
name|getField
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|RandomValueSource
specifier|public
class|class
name|RandomValueSource
extends|extends
name|ValueSource
block|{
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|method|RandomValueSource
specifier|public
name|RandomValueSource
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|description
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
name|field
return|;
block|}
annotation|@
name|Override
DECL|method|getValues
specifier|public
name|DocValues
name|getValues
parameter_list|(
specifier|final
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|DocValues
argument_list|()
block|{
specifier|private
specifier|final
name|int
name|seed
init|=
name|getSeed
argument_list|(
name|field
argument_list|,
name|reader
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|float
name|floatVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
operator|(
name|float
operator|)
name|hash
argument_list|(
name|doc
operator|+
name|seed
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|intVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|hash
argument_list|(
name|doc
operator|+
name|seed
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|longVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
operator|(
name|long
operator|)
name|hash
argument_list|(
name|doc
operator|+
name|seed
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|doubleVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
operator|(
name|double
operator|)
name|hash
argument_list|(
name|doc
operator|+
name|seed
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|strVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|hash
argument_list|(
name|doc
operator|+
name|seed
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|description
argument_list|()
operator|+
literal|'='
operator|+
name|intVal
argument_list|(
name|doc
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|RandomValueSource
operator|)
condition|)
return|return
literal|false
return|;
name|RandomValueSource
name|other
init|=
operator|(
name|RandomValueSource
operator|)
name|o
decl_stmt|;
return|return
name|this
operator|.
name|field
operator|.
name|equals
argument_list|(
name|other
operator|.
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|field
operator|.
name|hashCode
argument_list|()
return|;
block|}
empty_stmt|;
block|}
block|}
end_class
end_unit
