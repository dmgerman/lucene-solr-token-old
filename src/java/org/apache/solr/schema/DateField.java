begin_unit
begin_comment
comment|/**  * Copyright 2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|XMLWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|function
operator|.
name|OrdFieldSource
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|// TODO: make a FlexibleDateField that can accept dates in multiple
end_comment
begin_comment
comment|// formats, better for human entered dates.
end_comment
begin_comment
comment|// TODO: make a DayField that only stores the day?
end_comment
begin_comment
comment|/**  * FieldType that can represent any Date/Time with millisecond precisison.  *<p>  * Date Format for the XML, incoming and outgoing:  *</p>  *<blockquote>  * A date field shall be of the form 1995-12-31T23:59:59Z  * The trailing "Z" designates UTC time and is mandatory.  * Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z  * All other parts are mandatory.  *</blockquote>  *<p>  * This format was derived to be standards compliant (ISO 8601) and is a more  * restricted form of the canonical representation of dateTime from XML  * schema part 2.  * http://www.w3.org/TR/xmlschema-2/#dateTime  *</p>  *<blockquote>  * "In 1970 the Coordinated Universal Time system was devised by an  * international advisory group of technical experts within the International  * Telecommunication Union (ITU).  The ITU felt it was best to designate a  * single abbreviation for use in all languages in order to minimize  * confusion.  Since unanimous agreement could not be achieved on using  * either the English word order, CUT, or the French word order, TUC, the  * acronym UTC was chosen as a compromise."  *</blockquote>  *  * @author yonik  * @version $Id$  * @see<a href="http://www.w3.org/TR/xmlschema-2/#dateTime">XML schema part 2</a>  */
end_comment
begin_class
DECL|class|DateField
specifier|public
class|class
name|DateField
extends|extends
name|FieldType
block|{
comment|// The XML (external) date format will sort correctly, except if
comment|// fractions of seconds are present (because '.' is lower than 'Z').
comment|// The easiest fix is to simply remove the 'Z' for the internal
comment|// format.
DECL|method|init
specifier|protected
name|void
name|init
parameter_list|(
name|IndexSchema
name|schema
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
parameter_list|)
block|{   }
DECL|method|toInternal
specifier|public
name|String
name|toInternal
parameter_list|(
name|String
name|val
parameter_list|)
block|{
name|int
name|len
init|=
name|val
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|charAt
argument_list|(
name|len
operator|-
literal|1
argument_list|)
operator|==
literal|'Z'
condition|)
block|{
return|return
name|val
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|len
operator|-
literal|1
argument_list|)
return|;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
literal|1
argument_list|,
literal|"Invalid Date String:'"
operator|+
name|val
operator|+
literal|'\''
argument_list|)
throw|;
block|}
DECL|method|indexedToReadable
specifier|public
name|String
name|indexedToReadable
parameter_list|(
name|String
name|indexedForm
parameter_list|)
block|{
return|return
name|indexedForm
operator|+
literal|'Z'
return|;
block|}
DECL|method|toExternal
specifier|public
name|String
name|toExternal
parameter_list|(
name|Field
name|f
parameter_list|)
block|{
return|return
name|indexedToReadable
argument_list|(
name|f
operator|.
name|stringValue
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getSortField
specifier|public
name|SortField
name|getSortField
parameter_list|(
name|SchemaField
name|field
parameter_list|,
name|boolean
name|reverse
parameter_list|)
block|{
return|return
name|getStringSort
argument_list|(
name|field
argument_list|,
name|reverse
argument_list|)
return|;
block|}
DECL|method|getValueSource
specifier|public
name|ValueSource
name|getValueSource
parameter_list|(
name|SchemaField
name|field
parameter_list|)
block|{
return|return
operator|new
name|OrdFieldSource
argument_list|(
name|field
operator|.
name|name
argument_list|)
return|;
block|}
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|XMLWriter
name|xmlWriter
parameter_list|,
name|String
name|name
parameter_list|,
name|Field
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|xmlWriter
operator|.
name|writeDate
argument_list|(
name|name
argument_list|,
name|toExternal
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
