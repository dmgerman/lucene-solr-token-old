begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|language
operator|.
name|DoubleMetaphone
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_class
DECL|class|DoubleMetaphoneFilter
specifier|public
class|class
name|DoubleMetaphoneFilter
extends|extends
name|TokenFilter
block|{
DECL|field|TOKEN_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|TOKEN_TYPE
init|=
literal|"DoubleMetaphone"
decl_stmt|;
DECL|field|remainingTokens
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|Token
argument_list|>
name|remainingTokens
init|=
operator|new
name|LinkedList
argument_list|<
name|Token
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|encoder
specifier|private
specifier|final
name|DoubleMetaphone
name|encoder
init|=
operator|new
name|DoubleMetaphone
argument_list|()
decl_stmt|;
DECL|field|inject
specifier|private
specifier|final
name|boolean
name|inject
decl_stmt|;
DECL|method|DoubleMetaphoneFilter
specifier|protected
name|DoubleMetaphoneFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|,
name|int
name|maxCodeLength
parameter_list|,
name|boolean
name|inject
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|this
operator|.
name|encoder
operator|.
name|setMaxCodeLen
argument_list|(
name|maxCodeLength
argument_list|)
expr_stmt|;
name|this
operator|.
name|inject
operator|=
name|inject
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
specifier|final
name|Token
name|next
parameter_list|(
name|Token
name|in
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|remainingTokens
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|remainingTokens
operator|.
name|removeFirst
argument_list|()
return|;
block|}
name|Token
name|t
init|=
name|input
operator|.
name|next
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
operator|&&
name|t
operator|.
name|termLength
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|inject
condition|)
block|{
name|remainingTokens
operator|.
name|addLast
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isPhonetic
init|=
literal|false
decl_stmt|;
name|String
name|v
init|=
operator|new
name|String
argument_list|(
name|t
operator|.
name|termBuffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|t
operator|.
name|termLength
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|primaryPhoneticValue
init|=
name|encoder
operator|.
name|doubleMetaphone
argument_list|(
name|v
argument_list|)
decl_stmt|;
if|if
condition|(
name|primaryPhoneticValue
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Token
name|token
init|=
operator|(
name|Token
operator|)
name|t
operator|.
name|clone
argument_list|()
decl_stmt|;
if|if
condition|(
name|inject
condition|)
block|{
name|token
operator|.
name|setPositionIncrement
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|token
operator|.
name|setType
argument_list|(
name|TOKEN_TYPE
argument_list|)
expr_stmt|;
name|token
operator|.
name|setTermBuffer
argument_list|(
name|primaryPhoneticValue
argument_list|)
expr_stmt|;
name|remainingTokens
operator|.
name|addLast
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|isPhonetic
operator|=
literal|true
expr_stmt|;
block|}
name|String
name|alternatePhoneticValue
init|=
name|encoder
operator|.
name|doubleMetaphone
argument_list|(
name|v
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|alternatePhoneticValue
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|primaryPhoneticValue
operator|.
name|equals
argument_list|(
name|alternatePhoneticValue
argument_list|)
condition|)
block|{
name|Token
name|token
init|=
operator|(
name|Token
operator|)
name|t
operator|.
name|clone
argument_list|()
decl_stmt|;
name|token
operator|.
name|setPositionIncrement
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|token
operator|.
name|setType
argument_list|(
name|TOKEN_TYPE
argument_list|)
expr_stmt|;
name|token
operator|.
name|setTermBuffer
argument_list|(
name|alternatePhoneticValue
argument_list|)
expr_stmt|;
name|remainingTokens
operator|.
name|addLast
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|isPhonetic
operator|=
literal|true
expr_stmt|;
block|}
comment|// If we did not add something, then go to the next one...
if|if
condition|(
operator|!
name|isPhonetic
condition|)
block|{
name|t
operator|=
name|next
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|t
operator|.
name|setPositionIncrement
argument_list|(
name|t
operator|.
name|getPositionIncrement
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
block|}
return|return
name|remainingTokens
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|remainingTokens
operator|.
name|removeFirst
argument_list|()
return|;
block|}
block|}
end_class
end_unit
