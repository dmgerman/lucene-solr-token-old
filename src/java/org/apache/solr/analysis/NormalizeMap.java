begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/**  *  * @version $Id$  * @since Solr 1.4  *  */
end_comment
begin_class
DECL|class|NormalizeMap
specifier|public
class|class
name|NormalizeMap
block|{
DECL|field|submap
name|Map
argument_list|<
name|Character
argument_list|,
name|NormalizeMap
argument_list|>
name|submap
decl_stmt|;
DECL|field|normStr
name|String
name|normStr
decl_stmt|;
DECL|field|diff
name|int
name|diff
decl_stmt|;
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|String
name|singleMatch
parameter_list|,
name|String
name|replacement
parameter_list|)
block|{
name|NormalizeMap
name|currMap
init|=
name|this
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|singleMatch
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|singleMatch
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|currMap
operator|.
name|submap
operator|==
literal|null
condition|)
block|{
name|currMap
operator|.
name|submap
operator|=
operator|new
name|HashMap
argument_list|<
name|Character
argument_list|,
name|NormalizeMap
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|NormalizeMap
name|map
init|=
name|currMap
operator|.
name|submap
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
name|map
operator|=
operator|new
name|NormalizeMap
argument_list|()
expr_stmt|;
name|currMap
operator|.
name|submap
operator|.
name|put
argument_list|(
name|c
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
name|currMap
operator|=
name|map
expr_stmt|;
block|}
if|if
condition|(
name|currMap
operator|.
name|normStr
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"MappingCharFilter: there is already a mapping for "
operator|+
name|singleMatch
argument_list|)
throw|;
block|}
name|currMap
operator|.
name|normStr
operator|=
name|replacement
expr_stmt|;
name|currMap
operator|.
name|diff
operator|=
name|singleMatch
operator|.
name|length
argument_list|()
operator|-
name|replacement
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
