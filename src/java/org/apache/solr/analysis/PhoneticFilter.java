begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|Encoder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * Create tokens for phonetic matches.  See:  * http://jakarta.apache.org/commons/codec/api-release/org/apache/commons/codec/language/package-summary.html  *  * @version $Id$  */
end_comment
begin_class
DECL|class|PhoneticFilter
specifier|public
class|class
name|PhoneticFilter
extends|extends
name|TokenFilter
block|{
DECL|field|inject
specifier|protected
name|boolean
name|inject
init|=
literal|true
decl_stmt|;
DECL|field|encoder
specifier|protected
name|Encoder
name|encoder
init|=
literal|null
decl_stmt|;
DECL|field|name
specifier|protected
name|String
name|name
init|=
literal|null
decl_stmt|;
DECL|field|save
specifier|protected
name|Token
name|save
init|=
literal|null
decl_stmt|;
DECL|method|PhoneticFilter
specifier|public
name|PhoneticFilter
parameter_list|(
name|TokenStream
name|in
parameter_list|,
name|Encoder
name|encoder
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|inject
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|encoder
operator|=
name|encoder
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|inject
operator|=
name|inject
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
specifier|final
name|Token
name|next
parameter_list|(
name|Token
name|in
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|save
operator|!=
literal|null
condition|)
block|{
name|Token
name|temp
init|=
name|save
decl_stmt|;
name|save
operator|=
literal|null
expr_stmt|;
return|return
name|temp
return|;
block|}
name|Token
name|t
init|=
name|input
operator|.
name|next
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|String
name|value
init|=
operator|new
name|String
argument_list|(
name|t
operator|.
name|termBuffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|t
operator|.
name|termLength
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|value
operator|=
name|encoder
operator|.
name|encode
argument_list|(
name|value
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{}
comment|// just use the direct text
comment|//Token m = new Token(value, t.startOffset(), t.endOffset(), name );
if|if
condition|(
name|inject
condition|)
block|{
name|save
operator|=
operator|(
name|Token
operator|)
name|t
operator|.
name|clone
argument_list|()
expr_stmt|;
name|save
operator|.
name|setPositionIncrement
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|save
operator|.
name|setTermBuffer
argument_list|(
name|value
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|t
operator|.
name|setTermBuffer
argument_list|(
name|value
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|t
return|;
block|}
block|}
end_class
end_unit
