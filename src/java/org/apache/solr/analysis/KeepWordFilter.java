begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_comment
comment|/**  * A TokenFilter that only keeps tokens with text contained in the  * required words.  This filter behaves like the inverse of StopFilter.  *   * @version $Id$  * @since solr 1.3  */
end_comment
begin_class
DECL|class|KeepWordFilter
specifier|public
specifier|final
class|class
name|KeepWordFilter
extends|extends
name|TokenFilter
block|{
DECL|field|words
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|words
decl_stmt|;
DECL|field|ignoreCase
specifier|final
name|boolean
name|ignoreCase
decl_stmt|;
DECL|method|KeepWordFilter
specifier|public
name|KeepWordFilter
parameter_list|(
name|TokenStream
name|in
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|words
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|words
operator|=
name|words
expr_stmt|;
name|this
operator|.
name|ignoreCase
operator|=
name|ignoreCase
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
specifier|final
name|Token
name|next
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|Token
name|token
init|=
name|input
operator|.
name|next
argument_list|()
init|;
name|token
operator|!=
literal|null
condition|;
name|token
operator|=
name|input
operator|.
name|next
argument_list|()
control|)
block|{
name|String
name|txt
init|=
name|ignoreCase
condition|?
name|token
operator|.
name|termText
argument_list|()
operator|.
name|toLowerCase
argument_list|()
else|:
name|token
operator|.
name|termText
argument_list|()
decl_stmt|;
if|if
condition|(
name|words
operator|.
name|contains
argument_list|(
name|txt
argument_list|)
condition|)
block|{
return|return
name|token
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class
end_unit
