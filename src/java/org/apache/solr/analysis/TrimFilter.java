begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * Trims leading and trailing whitespace from Tokens in the stream.  *  * @version $Id:$  */
end_comment
begin_class
DECL|class|TrimFilter
specifier|public
specifier|final
class|class
name|TrimFilter
extends|extends
name|TokenFilter
block|{
DECL|field|updateOffsets
specifier|final
name|boolean
name|updateOffsets
decl_stmt|;
DECL|method|TrimFilter
specifier|public
name|TrimFilter
parameter_list|(
name|TokenStream
name|in
parameter_list|,
name|boolean
name|updateOffsets
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|updateOffsets
operator|=
name|updateOffsets
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
specifier|final
name|Token
name|next
parameter_list|()
throws|throws
name|IOException
block|{
name|Token
name|t
init|=
name|input
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|t
operator|||
literal|null
operator|==
name|t
operator|.
name|termText
argument_list|()
condition|)
return|return
name|t
return|;
if|if
condition|(
name|updateOffsets
condition|)
block|{
name|String
name|txt
init|=
name|t
operator|.
name|termText
argument_list|()
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
name|int
name|end
init|=
name|txt
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|endOff
init|=
literal|0
decl_stmt|;
comment|// eat the first characters
while|while
condition|(
operator|(
name|start
operator|<
name|end
operator|)
operator|&&
operator|(
name|txt
operator|.
name|charAt
argument_list|(
name|start
argument_list|)
operator|<=
literal|' '
operator|)
condition|)
block|{
name|start
operator|++
expr_stmt|;
block|}
comment|// eat the end characters
while|while
condition|(
operator|(
name|start
operator|<
name|end
operator|)
operator|&&
operator|(
name|txt
operator|.
name|charAt
argument_list|(
name|end
operator|-
literal|1
argument_list|)
operator|<=
literal|' '
operator|)
condition|)
block|{
name|end
operator|--
expr_stmt|;
name|endOff
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|start
operator|>
literal|0
operator|||
name|end
operator|<
name|txt
operator|.
name|length
argument_list|()
condition|)
block|{
name|int
name|incr
init|=
name|t
operator|.
name|getPositionIncrement
argument_list|()
decl_stmt|;
name|t
operator|=
operator|new
name|Token
argument_list|(
name|t
operator|.
name|termText
argument_list|()
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
argument_list|,
name|t
operator|.
name|startOffset
argument_list|()
operator|+
name|start
argument_list|,
name|t
operator|.
name|endOffset
argument_list|()
operator|-
name|endOff
argument_list|,
name|t
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setPositionIncrement
argument_list|(
name|incr
argument_list|)
expr_stmt|;
comment|//+ start ); TODO? what should happen with the offset
block|}
block|}
else|else
block|{
name|t
operator|.
name|setTermText
argument_list|(
name|t
operator|.
name|termText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
block|}
end_class
end_unit
