begin_unit
begin_comment
comment|/**  * Copyright 2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import
begin_comment
comment|/**  * @author yonik  * @version $Id$  */
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// A quick hack of a class to represent a list of name-value pairs.
end_comment
begin_comment
comment|// Unlike a map, order is maintained, and names may
end_comment
begin_comment
comment|// be repeated.  Names and values may be null.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// In the future, it would be nice if this extended Map or Collection,
end_comment
begin_comment
comment|// had iterators, used java5 generics, had a faster lookup for
end_comment
begin_comment
comment|// large lists, etc...
end_comment
begin_comment
comment|// It could also have an interface, and multiple implementations.
end_comment
begin_comment
comment|// One might have indexed lookup, one might not.
end_comment
begin_comment
comment|//
end_comment
begin_class
DECL|class|NamedList
specifier|public
class|class
name|NamedList
implements|implements
name|Cloneable
implements|,
name|Serializable
block|{
DECL|field|nvPairs
specifier|protected
specifier|final
name|List
name|nvPairs
decl_stmt|;
DECL|method|NamedList
specifier|public
name|NamedList
parameter_list|()
block|{
name|nvPairs
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
DECL|method|NamedList
specifier|public
name|NamedList
parameter_list|(
name|List
name|nameValuePairs
parameter_list|)
block|{
name|nvPairs
operator|=
name|nameValuePairs
expr_stmt|;
block|}
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|nvPairs
operator|.
name|size
argument_list|()
operator|>>
literal|1
return|;
block|}
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|nvPairs
operator|.
name|get
argument_list|(
name|idx
operator|<<
literal|1
argument_list|)
return|;
block|}
DECL|method|getVal
specifier|public
name|Object
name|getVal
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
name|nvPairs
operator|.
name|get
argument_list|(
operator|(
name|idx
operator|<<
literal|1
operator|)
operator|+
literal|1
argument_list|)
return|;
block|}
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|val
parameter_list|)
block|{
name|nvPairs
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|nvPairs
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
DECL|method|setName
specifier|public
name|void
name|setName
parameter_list|(
name|int
name|idx
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|nvPairs
operator|.
name|set
argument_list|(
name|idx
operator|<<
literal|1
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|setVal
specifier|public
name|void
name|setVal
parameter_list|(
name|int
name|idx
parameter_list|,
name|Object
name|val
parameter_list|)
block|{
name|nvPairs
operator|.
name|set
argument_list|(
operator|(
name|idx
operator|<<
literal|1
operator|)
operator|+
literal|1
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
DECL|method|indexOf
specifier|public
name|int
name|indexOf
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|start
parameter_list|)
block|{
name|int
name|sz
init|=
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|String
name|n
init|=
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|n
operator|==
literal|null
condition|)
return|return
name|i
return|;
comment|// matched null
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|n
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|// gets the value for the first specified name. returns null if not
comment|// found or if the value stored was null.
DECL|method|get
specifier|public
name|Object
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|name
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|// gets the value for the first specified name starting start.
comment|// returns null if not found or if the value stored was null.
DECL|method|get
specifier|public
name|Object
name|get
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|start
parameter_list|)
block|{
name|int
name|sz
init|=
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|String
name|n
init|=
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|n
operator|==
literal|null
condition|)
return|return
name|getVal
argument_list|(
name|i
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|n
argument_list|)
condition|)
block|{
return|return
name|getVal
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|int
name|sz
init|=
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getName
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getVal
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|addAll
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Map
name|args
parameter_list|)
block|{
name|Set
name|eset
init|=
name|args
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|Iterator
name|iter
init|=
name|eset
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Makes a *shallow copy* of the named list.    */
DECL|method|clone
specifier|public
name|NamedList
name|clone
parameter_list|()
block|{
name|ArrayList
name|newList
init|=
operator|new
name|ArrayList
argument_list|(
name|nvPairs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|newList
operator|.
name|addAll
argument_list|(
name|nvPairs
argument_list|)
expr_stmt|;
return|return
operator|new
name|NamedList
argument_list|(
name|newList
argument_list|)
return|;
block|}
block|}
end_class
end_unit
