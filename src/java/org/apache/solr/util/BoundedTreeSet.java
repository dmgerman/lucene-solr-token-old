begin_unit
begin_comment
comment|/**  * Copyright 2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * A TreeSet that ensures it never grows beyond a max size.    *<code>last()</code> is removed if the<code>size()</code>   * get's bigger then<code>getMaxSize()</code>  */
end_comment
begin_class
DECL|class|BoundedTreeSet
specifier|public
class|class
name|BoundedTreeSet
parameter_list|<
name|E
parameter_list|>
extends|extends
name|TreeSet
argument_list|<
name|E
argument_list|>
block|{
DECL|field|maxSize
specifier|private
name|int
name|maxSize
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|method|BoundedTreeSet
specifier|public
name|BoundedTreeSet
parameter_list|(
name|int
name|maxSize
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|setMaxSize
argument_list|(
name|maxSize
argument_list|)
expr_stmt|;
block|}
DECL|method|BoundedTreeSet
specifier|public
name|BoundedTreeSet
parameter_list|(
name|int
name|maxSize
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|c
parameter_list|)
block|{
name|super
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|this
operator|.
name|setMaxSize
argument_list|(
name|maxSize
argument_list|)
expr_stmt|;
block|}
DECL|method|BoundedTreeSet
specifier|public
name|BoundedTreeSet
parameter_list|(
name|int
name|maxSize
parameter_list|,
name|Comparator
argument_list|<
name|?
super|super
name|E
argument_list|>
name|c
parameter_list|)
block|{
name|super
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|this
operator|.
name|setMaxSize
argument_list|(
name|maxSize
argument_list|)
expr_stmt|;
block|}
DECL|method|BoundedTreeSet
specifier|public
name|BoundedTreeSet
parameter_list|(
name|int
name|maxSize
parameter_list|,
name|SortedSet
argument_list|<
name|E
argument_list|>
name|s
parameter_list|)
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|this
operator|.
name|setMaxSize
argument_list|(
name|maxSize
argument_list|)
expr_stmt|;
block|}
DECL|method|getMaxSize
specifier|public
name|int
name|getMaxSize
parameter_list|()
block|{
return|return
name|maxSize
return|;
block|}
DECL|method|setMaxSize
specifier|public
name|void
name|setMaxSize
parameter_list|(
name|int
name|max
parameter_list|)
block|{
name|maxSize
operator|=
name|max
expr_stmt|;
name|adjust
argument_list|()
expr_stmt|;
block|}
DECL|method|adjust
specifier|private
name|void
name|adjust
parameter_list|()
block|{
while|while
condition|(
name|maxSize
operator|<
name|size
argument_list|()
condition|)
block|{
name|remove
argument_list|(
name|last
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|add
specifier|public
name|boolean
name|add
parameter_list|(
name|E
name|item
parameter_list|)
block|{
name|boolean
name|out
init|=
name|super
operator|.
name|add
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|adjust
argument_list|()
expr_stmt|;
return|return
name|out
return|;
block|}
DECL|method|addAll
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|E
argument_list|>
name|c
parameter_list|)
block|{
name|boolean
name|out
init|=
name|super
operator|.
name|addAll
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|adjust
argument_list|()
expr_stmt|;
return|return
name|out
return|;
block|}
block|}
end_class
end_unit
