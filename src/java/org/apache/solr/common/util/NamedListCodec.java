begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.common.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * The class is designed to optimaly serialize/deserialize a NamedList. As we know there are only  * a limited type of items this class can do it with very minimal amount of payload and code. There are  * 15 known types and if there is an object in the object tree which does not fall into these types, It must be  * converted to one of these. Implement an ObjectResolver and pass it over  * It is expected that this class is used on both end of the pipes.  * The class has one read method and one write method for each of the datatypes  *  */
end_comment
begin_class
DECL|class|NamedListCodec
specifier|public
class|class
name|NamedListCodec
block|{
specifier|public
specifier|static
specifier|final
name|byte
DECL|field|NULL
name|NULL
init|=
literal|0
decl_stmt|,
DECL|field|BOOL_TRUE
name|BOOL_TRUE
init|=
literal|1
decl_stmt|,
DECL|field|BOOL_FALSE
name|BOOL_FALSE
init|=
literal|2
decl_stmt|,
DECL|field|BYTE
name|BYTE
init|=
literal|3
decl_stmt|,
DECL|field|SHORT
name|SHORT
init|=
literal|4
decl_stmt|,
DECL|field|DOUBLE
name|DOUBLE
init|=
literal|5
decl_stmt|,
DECL|field|INT
name|INT
init|=
literal|6
decl_stmt|,
DECL|field|LONG
name|LONG
init|=
literal|7
decl_stmt|,
DECL|field|FLOAT
name|FLOAT
init|=
literal|8
decl_stmt|,
DECL|field|DATE
name|DATE
init|=
literal|9
decl_stmt|,
DECL|field|MAP
name|MAP
init|=
literal|10
decl_stmt|,
DECL|field|SOLRDOC
name|SOLRDOC
init|=
literal|11
decl_stmt|,
DECL|field|SOLRDOCLST
name|SOLRDOCLST
init|=
literal|12
decl_stmt|,
DECL|field|BYTEARR
name|BYTEARR
init|=
literal|13
decl_stmt|,
DECL|field|ITERATOR
name|ITERATOR
init|=
literal|14
decl_stmt|,
comment|/** this is a special tag signals an end. No value is associated with it*/
DECL|field|END
name|END
init|=
literal|15
decl_stmt|,
comment|// types that combine tag + length (or other info) in a single byte
DECL|field|TAG_AND_LEN
name|TAG_AND_LEN
init|=
call|(
name|byte
call|)
argument_list|(
literal|1
operator|<<
literal|5
argument_list|)
decl_stmt|,
DECL|field|STR
name|STR
init|=
call|(
name|byte
call|)
argument_list|(
literal|1
operator|<<
literal|5
argument_list|)
decl_stmt|,
DECL|field|SINT
name|SINT
init|=
call|(
name|byte
call|)
argument_list|(
literal|2
operator|<<
literal|5
argument_list|)
decl_stmt|,
DECL|field|SLONG
name|SLONG
init|=
call|(
name|byte
call|)
argument_list|(
literal|3
operator|<<
literal|5
argument_list|)
decl_stmt|,
DECL|field|ARR
name|ARR
init|=
call|(
name|byte
call|)
argument_list|(
literal|4
operator|<<
literal|5
argument_list|)
decl_stmt|,
comment|//
DECL|field|ORDERED_MAP
name|ORDERED_MAP
init|=
call|(
name|byte
call|)
argument_list|(
literal|5
operator|<<
literal|5
argument_list|)
decl_stmt|,
comment|// SimpleOrderedMap (a NamedList subclass, and more common)
DECL|field|NAMED_LST
name|NAMED_LST
init|=
call|(
name|byte
call|)
argument_list|(
literal|6
operator|<<
literal|5
argument_list|)
decl_stmt|,
comment|// NamedList
DECL|field|EXTERN_STRING
name|EXTERN_STRING
init|=
call|(
name|byte
call|)
argument_list|(
literal|7
operator|<<
literal|5
argument_list|)
decl_stmt|;
DECL|field|VERSION
specifier|private
name|byte
name|VERSION
init|=
literal|1
decl_stmt|;
DECL|field|resolver
specifier|private
name|ObjectResolver
name|resolver
decl_stmt|;
DECL|field|daos
specifier|private
name|FastOutputStream
name|daos
decl_stmt|;
DECL|method|NamedListCodec
specifier|public
name|NamedListCodec
parameter_list|()
block|{ }
DECL|method|NamedListCodec
specifier|public
name|NamedListCodec
parameter_list|(
name|ObjectResolver
name|resolver
parameter_list|)
block|{
name|this
operator|.
name|resolver
operator|=
name|resolver
expr_stmt|;
block|}
DECL|method|marshal
specifier|public
name|void
name|marshal
parameter_list|(
name|NamedList
name|nl
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
name|daos
operator|=
name|FastOutputStream
operator|.
name|wrap
argument_list|(
name|os
argument_list|)
expr_stmt|;
try|try
block|{
name|daos
operator|.
name|writeByte
argument_list|(
name|VERSION
argument_list|)
expr_stmt|;
name|writeNamedList
argument_list|(
name|nl
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|daos
operator|.
name|flushBuffer
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|unmarshal
specifier|public
name|NamedList
name|unmarshal
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|FastInputStream
name|dis
init|=
name|FastInputStream
operator|.
name|wrap
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|byte
name|version
init|=
name|dis
operator|.
name|readByte
argument_list|()
decl_stmt|;
return|return
operator|(
name|NamedList
operator|)
name|readVal
argument_list|(
name|dis
argument_list|)
return|;
block|}
DECL|method|readOrderedMap
specifier|public
name|SimpleOrderedMap
name|readOrderedMap
parameter_list|(
name|FastInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|readSize
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|SimpleOrderedMap
name|nl
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|readVal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|Object
name|val
init|=
name|readVal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|nl
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|nl
return|;
block|}
DECL|method|readNamedList
specifier|public
name|NamedList
name|readNamedList
parameter_list|(
name|FastInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|readSize
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|NamedList
name|nl
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|readVal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|Object
name|val
init|=
name|readVal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|nl
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|nl
return|;
block|}
DECL|method|writeNamedList
specifier|public
name|void
name|writeNamedList
parameter_list|(
name|NamedList
name|nl
parameter_list|)
throws|throws
name|IOException
block|{
name|writeTag
argument_list|(
name|nl
operator|instanceof
name|SimpleOrderedMap
condition|?
name|ORDERED_MAP
else|:
name|NAMED_LST
argument_list|,
name|nl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nl
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|nl
operator|.
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|writeExternString
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Object
name|val
init|=
name|nl
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|writeVal
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeVal
specifier|public
name|void
name|writeVal
parameter_list|(
name|Object
name|val
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|writeKnownType
argument_list|(
name|val
argument_list|)
condition|)
block|{
return|return;
block|}
else|else
block|{
name|Object
name|tmpVal
init|=
name|val
decl_stmt|;
if|if
condition|(
name|resolver
operator|!=
literal|null
condition|)
block|{
name|tmpVal
operator|=
name|resolver
operator|.
name|resolve
argument_list|(
name|val
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmpVal
operator|==
literal|null
condition|)
return|return;
comment|// null means the resolver took care of it fully
if|if
condition|(
name|writeKnownType
argument_list|(
name|tmpVal
argument_list|)
condition|)
return|return;
block|}
block|}
name|writeVal
argument_list|(
name|val
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|':'
operator|+
name|val
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|field|END_OBJ
specifier|private
specifier|static
specifier|final
name|Object
name|END_OBJ
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|tagByte
name|byte
name|tagByte
decl_stmt|;
DECL|method|readVal
specifier|public
name|Object
name|readVal
parameter_list|(
name|FastInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|tagByte
operator|=
name|dis
operator|.
name|readByte
argument_list|()
expr_stmt|;
comment|// if ((tagByte& 0xe0) == 0) {
comment|// if top 3 bits are clear, this is a normal tag
comment|// OK, try type + size in single byte
switch|switch
condition|(
name|tagByte
operator|>>>
literal|5
condition|)
block|{
case|case
name|STR
operator|>>>
literal|5
case|:
return|return
name|readStr
argument_list|(
name|dis
argument_list|)
return|;
case|case
name|SINT
operator|>>>
literal|5
case|:
return|return
name|readSmallInt
argument_list|(
name|dis
argument_list|)
return|;
case|case
name|SLONG
operator|>>>
literal|5
case|:
return|return
name|readSmallLong
argument_list|(
name|dis
argument_list|)
return|;
case|case
name|ARR
operator|>>>
literal|5
case|:
return|return
name|readArray
argument_list|(
name|dis
argument_list|)
return|;
case|case
name|ORDERED_MAP
operator|>>>
literal|5
case|:
return|return
name|readOrderedMap
argument_list|(
name|dis
argument_list|)
return|;
case|case
name|NAMED_LST
operator|>>>
literal|5
case|:
return|return
name|readNamedList
argument_list|(
name|dis
argument_list|)
return|;
case|case
name|EXTERN_STRING
operator|>>>
literal|5
case|:
return|return
name|readExternString
argument_list|(
name|dis
argument_list|)
return|;
block|}
switch|switch
condition|(
name|tagByte
condition|)
block|{
case|case
name|NULL
case|:
return|return
literal|null
return|;
case|case
name|DATE
case|:
return|return
operator|new
name|Date
argument_list|(
name|dis
operator|.
name|readLong
argument_list|()
argument_list|)
return|;
case|case
name|INT
case|:
return|return
name|dis
operator|.
name|readInt
argument_list|()
return|;
case|case
name|BOOL_TRUE
case|:
return|return
name|Boolean
operator|.
name|TRUE
return|;
case|case
name|BOOL_FALSE
case|:
return|return
name|Boolean
operator|.
name|FALSE
return|;
case|case
name|FLOAT
case|:
return|return
name|dis
operator|.
name|readFloat
argument_list|()
return|;
case|case
name|DOUBLE
case|:
return|return
name|dis
operator|.
name|readDouble
argument_list|()
return|;
case|case
name|LONG
case|:
return|return
name|dis
operator|.
name|readLong
argument_list|()
return|;
case|case
name|BYTE
case|:
return|return
name|dis
operator|.
name|readByte
argument_list|()
return|;
case|case
name|SHORT
case|:
return|return
name|dis
operator|.
name|readShort
argument_list|()
return|;
case|case
name|MAP
case|:
return|return
name|readMap
argument_list|(
name|dis
argument_list|)
return|;
case|case
name|SOLRDOC
case|:
return|return
name|readSolrDocument
argument_list|(
name|dis
argument_list|)
return|;
case|case
name|SOLRDOCLST
case|:
return|return
name|readSolrDocumentList
argument_list|(
name|dis
argument_list|)
return|;
case|case
name|BYTEARR
case|:
return|return
name|readByteArray
argument_list|(
name|dis
argument_list|)
return|;
case|case
name|ITERATOR
case|:
return|return
name|readIterator
argument_list|(
name|dis
argument_list|)
return|;
case|case
name|END
case|:
return|return
name|END_OBJ
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown type "
operator|+
name|tagByte
argument_list|)
throw|;
block|}
DECL|method|writeKnownType
specifier|public
name|boolean
name|writeKnownType
parameter_list|(
name|Object
name|val
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|writePrimitive
argument_list|(
name|val
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|val
operator|instanceof
name|NamedList
condition|)
block|{
name|writeNamedList
argument_list|(
operator|(
name|NamedList
operator|)
name|val
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|val
operator|instanceof
name|SolrDocumentList
condition|)
block|{
comment|// SolrDocumentList is a List, so must come before List check
name|writeSolrDocumentList
argument_list|(
operator|(
name|SolrDocumentList
operator|)
name|val
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|val
operator|instanceof
name|List
condition|)
block|{
name|writeArray
argument_list|(
operator|(
name|List
operator|)
name|val
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|val
operator|instanceof
name|Object
index|[]
condition|)
block|{
name|writeArray
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|val
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|val
operator|instanceof
name|SolrDocument
condition|)
block|{
comment|//this needs special treatment to know which fields are to be written
if|if
condition|(
name|resolver
operator|==
literal|null
condition|)
block|{
name|writeSolrDocument
argument_list|(
operator|(
name|SolrDocument
operator|)
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Object
name|retVal
init|=
name|resolver
operator|.
name|resolve
argument_list|(
name|val
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|retVal
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|retVal
operator|instanceof
name|SolrDocument
condition|)
block|{
name|writeSolrDocument
argument_list|(
operator|(
name|SolrDocument
operator|)
name|retVal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeVal
argument_list|(
name|retVal
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
if|if
condition|(
name|val
operator|instanceof
name|Map
condition|)
block|{
name|writeMap
argument_list|(
operator|(
name|Map
operator|)
name|val
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|val
operator|instanceof
name|Iterator
condition|)
block|{
name|writeIterator
argument_list|(
operator|(
name|Iterator
operator|)
name|val
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|val
operator|instanceof
name|Iterable
condition|)
block|{
name|writeIterator
argument_list|(
operator|(
operator|(
name|Iterable
operator|)
name|val
operator|)
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|writeTag
specifier|public
name|void
name|writeTag
parameter_list|(
name|byte
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|daos
operator|.
name|writeByte
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
DECL|method|writeTag
specifier|public
name|void
name|writeTag
parameter_list|(
name|byte
name|tag
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|tag
operator|&
literal|0xe0
operator|)
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|size
operator|<
literal|0x1f
condition|)
block|{
name|daos
operator|.
name|writeByte
argument_list|(
name|tag
operator||
name|size
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|daos
operator|.
name|writeByte
argument_list|(
name|tag
operator||
literal|0x1f
argument_list|)
expr_stmt|;
name|writeVInt
argument_list|(
name|size
operator|-
literal|0x1f
argument_list|,
name|daos
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|daos
operator|.
name|writeByte
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|writeVInt
argument_list|(
name|size
argument_list|,
name|daos
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeByteArray
specifier|public
name|void
name|writeByteArray
parameter_list|(
name|byte
index|[]
name|arr
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|writeTag
argument_list|(
name|BYTEARR
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|daos
operator|.
name|write
argument_list|(
name|arr
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
DECL|method|readByteArray
specifier|public
name|byte
index|[]
name|readByteArray
parameter_list|(
name|FastInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|arr
init|=
operator|new
name|byte
index|[
name|readVInt
argument_list|(
name|dis
argument_list|)
index|]
decl_stmt|;
name|dis
operator|.
name|readFully
argument_list|(
name|arr
argument_list|)
expr_stmt|;
return|return
name|arr
return|;
block|}
DECL|method|writeSolrDocument
specifier|public
name|void
name|writeSolrDocument
parameter_list|(
name|SolrDocument
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|writeSolrDocument
argument_list|(
name|doc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|writeSolrDocument
specifier|public
name|void
name|writeSolrDocument
parameter_list|(
name|SolrDocument
name|doc
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
name|count
operator|=
name|doc
operator|.
name|getFieldNames
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|doc
control|)
block|{
if|if
condition|(
name|fields
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
name|count
operator|++
expr_stmt|;
block|}
block|}
name|writeTag
argument_list|(
name|SOLRDOC
argument_list|)
expr_stmt|;
name|writeTag
argument_list|(
name|ORDERED_MAP
argument_list|,
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|doc
control|)
block|{
if|if
condition|(
name|fields
operator|==
literal|null
operator|||
name|fields
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|writeExternString
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Object
name|val
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|writeVal
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|readSolrDocument
specifier|public
name|SolrDocument
name|readSolrDocument
parameter_list|(
name|FastInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|NamedList
name|nl
init|=
operator|(
name|NamedList
operator|)
name|readVal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|SolrDocument
name|doc
init|=
operator|new
name|SolrDocument
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nl
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|nl
operator|.
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
name|val
init|=
name|nl
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setField
argument_list|(
name|name
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
DECL|method|readSolrDocumentList
specifier|public
name|SolrDocumentList
name|readSolrDocumentList
parameter_list|(
name|FastInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrDocumentList
name|solrDocs
init|=
operator|new
name|SolrDocumentList
argument_list|()
decl_stmt|;
name|List
name|list
init|=
operator|(
name|List
operator|)
name|readVal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|solrDocs
operator|.
name|setNumFound
argument_list|(
operator|(
name|Long
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|solrDocs
operator|.
name|setStart
argument_list|(
operator|(
name|Long
operator|)
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|solrDocs
operator|.
name|setMaxScore
argument_list|(
operator|(
name|Float
operator|)
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|List
name|l
init|=
operator|(
name|List
operator|)
name|readVal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|solrDocs
operator|.
name|addAll
argument_list|(
name|l
argument_list|)
expr_stmt|;
return|return
name|solrDocs
return|;
block|}
DECL|method|writeSolrDocumentList
specifier|public
name|void
name|writeSolrDocumentList
parameter_list|(
name|SolrDocumentList
name|docs
parameter_list|)
throws|throws
name|IOException
block|{
name|writeTag
argument_list|(
name|SOLRDOCLST
argument_list|)
expr_stmt|;
name|List
name|l
init|=
operator|new
name|ArrayList
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
name|docs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|docs
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|docs
operator|.
name|getMaxScore
argument_list|()
argument_list|)
expr_stmt|;
name|writeArray
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|writeArray
argument_list|(
name|docs
argument_list|)
expr_stmt|;
block|}
DECL|method|readMap
specifier|public
name|Map
name|readMap
parameter_list|(
name|FastInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|readVInt
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|Map
name|m
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|key
init|=
name|readVal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|Object
name|val
init|=
name|readVal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|m
return|;
block|}
DECL|method|writeIterator
specifier|public
name|void
name|writeIterator
parameter_list|(
name|Iterator
name|iter
parameter_list|)
throws|throws
name|IOException
block|{
name|writeTag
argument_list|(
name|ITERATOR
argument_list|)
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|writeVal
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writeVal
argument_list|(
name|END_OBJ
argument_list|)
expr_stmt|;
block|}
DECL|method|readIterator
specifier|public
name|List
name|readIterator
parameter_list|(
name|FastInputStream
name|fis
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
name|l
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Object
name|o
init|=
name|readVal
argument_list|(
name|fis
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
name|END_OBJ
condition|)
break|break;
name|l
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
DECL|method|writeArray
specifier|public
name|void
name|writeArray
parameter_list|(
name|List
name|l
parameter_list|)
throws|throws
name|IOException
block|{
name|writeTag
argument_list|(
name|ARR
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|writeVal
argument_list|(
name|l
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeArray
specifier|public
name|void
name|writeArray
parameter_list|(
name|Object
index|[]
name|arr
parameter_list|)
throws|throws
name|IOException
block|{
name|writeTag
argument_list|(
name|ARR
argument_list|,
name|arr
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o
init|=
name|arr
index|[
name|i
index|]
decl_stmt|;
name|writeVal
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readArray
specifier|public
name|List
name|readArray
parameter_list|(
name|FastInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|readSize
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|ArrayList
name|l
init|=
operator|new
name|ArrayList
argument_list|(
name|sz
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|l
operator|.
name|add
argument_list|(
name|readVal
argument_list|(
name|dis
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
comment|/** write the string as tag+length, with length being the number of UTF-16 characters,    * followed by the string encoded in modified-UTF8     */
DECL|method|writeStr
specifier|public
name|void
name|writeStr
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|writeTag
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Can't use string serialization or toUTF()... it's limited to 64K
comment|// plus it's bigger than it needs to be for small strings anyway
name|int
name|len
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
name|writeTag
argument_list|(
name|STR
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|writeChars
argument_list|(
name|daos
argument_list|,
name|s
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
DECL|field|charArr
name|char
index|[]
name|charArr
decl_stmt|;
DECL|method|readStr
specifier|private
name|String
name|readStr
parameter_list|(
name|FastInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|readSize
argument_list|(
name|dis
argument_list|)
decl_stmt|;
if|if
condition|(
name|charArr
operator|==
literal|null
operator|||
name|charArr
operator|.
name|length
operator|<
name|sz
condition|)
block|{
name|charArr
operator|=
operator|new
name|char
index|[
name|sz
index|]
expr_stmt|;
block|}
name|readChars
argument_list|(
name|dis
argument_list|,
name|charArr
argument_list|,
literal|0
argument_list|,
name|sz
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|charArr
argument_list|,
literal|0
argument_list|,
name|sz
argument_list|)
return|;
block|}
DECL|method|writeInt
specifier|public
name|void
name|writeInt
parameter_list|(
name|int
name|val
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|val
operator|>
literal|0
condition|)
block|{
name|int
name|b
init|=
name|SINT
operator||
operator|(
name|val
operator|&
literal|0x0f
operator|)
decl_stmt|;
if|if
condition|(
name|val
operator|>=
literal|0x0f
condition|)
block|{
name|b
operator||=
literal|0x10
expr_stmt|;
name|daos
operator|.
name|writeByte
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|writeVInt
argument_list|(
name|val
operator|>>>
literal|4
argument_list|,
name|daos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|daos
operator|.
name|writeByte
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|daos
operator|.
name|writeByte
argument_list|(
name|INT
argument_list|)
expr_stmt|;
name|daos
operator|.
name|writeInt
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readSmallInt
specifier|public
name|int
name|readSmallInt
parameter_list|(
name|FastInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|v
init|=
name|tagByte
operator|&
literal|0x0F
decl_stmt|;
if|if
condition|(
operator|(
name|tagByte
operator|&
literal|0x10
operator|)
operator|!=
literal|0
condition|)
name|v
operator|=
operator|(
name|readVInt
argument_list|(
name|dis
argument_list|)
operator|<<
literal|4
operator|)
operator||
name|v
expr_stmt|;
return|return
name|v
return|;
block|}
DECL|method|writeLong
specifier|public
name|void
name|writeLong
parameter_list|(
name|long
name|val
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|val
operator|&
literal|0xff00000000000000L
operator|)
operator|==
literal|0
condition|)
block|{
name|int
name|b
init|=
name|SLONG
operator||
operator|(
operator|(
name|int
operator|)
name|val
operator|&
literal|0x0f
operator|)
decl_stmt|;
if|if
condition|(
name|val
operator|>=
literal|0x0f
condition|)
block|{
name|b
operator||=
literal|0x10
expr_stmt|;
name|daos
operator|.
name|writeByte
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|writeVLong
argument_list|(
name|val
operator|>>>
literal|4
argument_list|,
name|daos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|daos
operator|.
name|writeByte
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|daos
operator|.
name|writeByte
argument_list|(
name|LONG
argument_list|)
expr_stmt|;
name|daos
operator|.
name|writeLong
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readSmallLong
specifier|public
name|long
name|readSmallLong
parameter_list|(
name|FastInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|v
init|=
name|tagByte
operator|&
literal|0x0F
decl_stmt|;
if|if
condition|(
operator|(
name|tagByte
operator|&
literal|0x10
operator|)
operator|!=
literal|0
condition|)
name|v
operator|=
operator|(
name|readVLong
argument_list|(
name|dis
argument_list|)
operator|<<
literal|4
operator|)
operator||
name|v
expr_stmt|;
return|return
name|v
return|;
block|}
DECL|method|writePrimitive
specifier|public
name|boolean
name|writePrimitive
parameter_list|(
name|Object
name|val
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|daos
operator|.
name|writeByte
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|String
condition|)
block|{
name|writeStr
argument_list|(
operator|(
name|String
operator|)
name|val
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Integer
condition|)
block|{
name|writeInt
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|val
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Long
condition|)
block|{
name|writeLong
argument_list|(
operator|(
operator|(
name|Long
operator|)
name|val
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Float
condition|)
block|{
name|daos
operator|.
name|writeByte
argument_list|(
name|FLOAT
argument_list|)
expr_stmt|;
name|daos
operator|.
name|writeFloat
argument_list|(
operator|(
operator|(
name|Float
operator|)
name|val
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Date
condition|)
block|{
name|daos
operator|.
name|writeByte
argument_list|(
name|DATE
argument_list|)
expr_stmt|;
name|daos
operator|.
name|writeLong
argument_list|(
operator|(
operator|(
name|Date
operator|)
name|val
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Boolean
condition|)
block|{
if|if
condition|(
operator|(
name|Boolean
operator|)
name|val
condition|)
name|daos
operator|.
name|writeByte
argument_list|(
name|BOOL_TRUE
argument_list|)
expr_stmt|;
else|else
name|daos
operator|.
name|writeByte
argument_list|(
name|BOOL_FALSE
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Double
condition|)
block|{
name|daos
operator|.
name|writeByte
argument_list|(
name|DOUBLE
argument_list|)
expr_stmt|;
name|daos
operator|.
name|writeDouble
argument_list|(
operator|(
operator|(
name|Double
operator|)
name|val
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Byte
condition|)
block|{
name|daos
operator|.
name|writeByte
argument_list|(
name|BYTE
argument_list|)
expr_stmt|;
name|daos
operator|.
name|writeByte
argument_list|(
operator|(
operator|(
name|Byte
operator|)
name|val
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Short
condition|)
block|{
name|daos
operator|.
name|writeByte
argument_list|(
name|SHORT
argument_list|)
expr_stmt|;
name|daos
operator|.
name|writeShort
argument_list|(
operator|(
operator|(
name|Short
operator|)
name|val
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|writeByteArray
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|val
argument_list|,
literal|0
argument_list|,
operator|(
operator|(
name|byte
index|[]
operator|)
name|val
operator|)
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|==
name|END_OBJ
condition|)
block|{
name|writeTag
argument_list|(
name|END
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|writeMap
specifier|public
name|void
name|writeMap
parameter_list|(
name|Map
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writeTag
argument_list|(
name|MAP
argument_list|,
name|val
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|entry
range|:
operator|(
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|>
operator|)
name|val
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|writeVal
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|writeVal
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readSize
specifier|public
name|int
name|readSize
parameter_list|(
name|FastInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|tagByte
operator|&
literal|0x1f
decl_stmt|;
if|if
condition|(
name|sz
operator|==
literal|0x1f
condition|)
name|sz
operator|+=
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|sz
return|;
block|}
comment|/**    * Special method for variable length int (copied from lucene). Usually used for writing the length of a collection/array/map    * In most of the cases the length can be represented in one byte (length< 127) so it saves 3 bytes/object    *    * @param i    * @param out    * @throws IOException    */
DECL|method|writeVInt
specifier|public
specifier|static
name|void
name|writeVInt
parameter_list|(
name|int
name|i
parameter_list|,
name|FastOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
operator|(
name|i
operator|&
operator|~
literal|0x7F
operator|)
operator|!=
literal|0
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
call|(
name|byte
call|)
argument_list|(
operator|(
name|i
operator|&
literal|0x7f
operator|)
operator||
literal|0x80
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|>>>=
literal|7
expr_stmt|;
block|}
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|i
argument_list|)
expr_stmt|;
block|}
comment|/**    * The counterpart for the above    *    * @param in    * @return the int value    * @throws IOException    */
DECL|method|readVInt
specifier|public
specifier|static
name|int
name|readVInt
parameter_list|(
name|FastInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|b
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|b
operator|&
literal|0x7F
decl_stmt|;
for|for
control|(
name|int
name|shift
init|=
literal|7
init|;
operator|(
name|b
operator|&
literal|0x80
operator|)
operator|!=
literal|0
condition|;
name|shift
operator|+=
literal|7
control|)
block|{
name|b
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|i
operator||=
operator|(
name|b
operator|&
literal|0x7F
operator|)
operator|<<
name|shift
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
DECL|method|writeVLong
specifier|public
specifier|static
name|void
name|writeVLong
parameter_list|(
name|long
name|i
parameter_list|,
name|FastOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
operator|(
name|i
operator|&
operator|~
literal|0x7F
operator|)
operator|!=
literal|0
condition|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
call|(
name|byte
call|)
argument_list|(
operator|(
name|i
operator|&
literal|0x7f
operator|)
operator||
literal|0x80
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|>>>=
literal|7
expr_stmt|;
block|}
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|i
argument_list|)
expr_stmt|;
block|}
DECL|method|readVLong
specifier|public
specifier|static
name|long
name|readVLong
parameter_list|(
name|FastInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|b
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|long
name|i
init|=
name|b
operator|&
literal|0x7F
decl_stmt|;
for|for
control|(
name|int
name|shift
init|=
literal|7
init|;
operator|(
name|b
operator|&
literal|0x80
operator|)
operator|!=
literal|0
condition|;
name|shift
operator|+=
literal|7
control|)
block|{
name|b
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|i
operator||=
call|(
name|long
call|)
argument_list|(
name|b
operator|&
literal|0x7F
argument_list|)
operator|<<
name|shift
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
comment|/** Writes a sequence of UTF-8 encoded characters from a string.    * @param s the source of the characters    * @param start the first character in the sequence    * @param length the number of characters in the sequence    * @see org.apache.lucene.store.IndexInput#readChars(char[],int,int)    */
DECL|method|writeChars
specifier|public
specifier|static
name|void
name|writeChars
parameter_list|(
name|FastOutputStream
name|os
parameter_list|,
name|String
name|s
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|end
init|=
name|start
operator|+
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|code
init|=
operator|(
name|int
operator|)
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|code
operator|>=
literal|0x01
operator|&&
name|code
operator|<=
literal|0x7F
condition|)
name|os
operator|.
name|write
argument_list|(
name|code
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|(
operator|(
name|code
operator|>=
literal|0x80
operator|)
operator|&&
operator|(
name|code
operator|<=
literal|0x7FF
operator|)
operator|)
operator|||
name|code
operator|==
literal|0
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
literal|0xC0
operator||
operator|(
name|code
operator|>>
literal|6
operator|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|0x80
operator||
operator|(
name|code
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|os
operator|.
name|write
argument_list|(
literal|0xE0
operator||
operator|(
name|code
operator|>>>
literal|12
operator|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|code
operator|>>
literal|6
operator|)
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|0x80
operator||
operator|(
name|code
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Reads UTF-8 encoded characters into an array.    * @param buffer the array to read characters into    * @param start the offset in the array to start storing characters    * @param length the number of characters to read    * @see org.apache.lucene.store.IndexOutput#writeChars(String,int,int)    */
DECL|method|readChars
specifier|public
specifier|static
name|void
name|readChars
parameter_list|(
name|FastInputStream
name|in
parameter_list|,
name|char
index|[]
name|buffer
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|end
init|=
name|start
operator|+
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|int
name|b
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|b
operator|&
literal|0x80
operator|)
operator|==
literal|0
condition|)
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|b
expr_stmt|;
elseif|else
if|if
condition|(
operator|(
name|b
operator|&
literal|0xE0
operator|)
operator|!=
literal|0xE0
condition|)
block|{
name|buffer
index|[
name|i
index|]
operator|=
call|(
name|char
call|)
argument_list|(
operator|(
operator|(
name|b
operator|&
literal|0x1F
operator|)
operator|<<
literal|6
operator|)
operator||
operator|(
name|in
operator|.
name|read
argument_list|()
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
name|buffer
index|[
name|i
index|]
operator|=
call|(
name|char
call|)
argument_list|(
operator|(
operator|(
name|b
operator|&
literal|0x0F
operator|)
operator|<<
literal|12
operator|)
operator||
operator|(
operator|(
name|in
operator|.
name|read
argument_list|()
operator|&
literal|0x3F
operator|)
operator|<<
literal|6
operator|)
operator||
operator|(
name|in
operator|.
name|read
argument_list|()
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|stringsCount
specifier|private
name|int
name|stringsCount
init|=
literal|0
decl_stmt|;
DECL|field|stringsMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|stringsMap
decl_stmt|;
DECL|field|stringsList
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|stringsList
decl_stmt|;
DECL|method|writeExternString
specifier|public
name|void
name|writeExternString
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|writeTag
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
return|return;
block|}
name|Integer
name|idx
init|=
name|stringsMap
operator|==
literal|null
condition|?
literal|null
else|:
name|stringsMap
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
literal|null
condition|)
name|idx
operator|=
literal|0
expr_stmt|;
name|writeTag
argument_list|(
name|EXTERN_STRING
argument_list|,
name|idx
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|==
literal|0
condition|)
block|{
name|writeStr
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|stringsMap
operator|==
literal|null
condition|)
name|stringsMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|stringsMap
operator|.
name|put
argument_list|(
name|s
argument_list|,
operator|++
name|stringsCount
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readExternString
specifier|public
name|String
name|readExternString
parameter_list|(
name|FastInputStream
name|fis
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|idx
init|=
name|readSize
argument_list|(
name|fis
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|!=
literal|0
condition|)
block|{
comment|// idx != 0 is the index of the extern string
return|return
name|stringsList
operator|.
name|get
argument_list|(
name|idx
operator|-
literal|1
argument_list|)
return|;
block|}
else|else
block|{
comment|// idx == 0 means it has a string value
name|String
name|s
init|=
operator|(
name|String
operator|)
name|readVal
argument_list|(
name|fis
argument_list|)
decl_stmt|;
if|if
condition|(
name|stringsList
operator|==
literal|null
condition|)
name|stringsList
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|stringsList
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
block|}
DECL|interface|ObjectResolver
specifier|public
specifier|static
interface|interface
name|ObjectResolver
block|{
DECL|method|resolve
specifier|public
name|Object
name|resolve
parameter_list|(
name|Object
name|o
parameter_list|,
name|NamedListCodec
name|codec
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
block|}
end_class
end_unit
