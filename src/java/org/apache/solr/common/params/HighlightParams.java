begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.common.params
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
package|;
end_package
begin_comment
comment|/**  *   * @author ryan  * @version $Id$  * @since solr 1.3  */
end_comment
begin_interface
DECL|interface|HighlightParams
specifier|public
interface|interface
name|HighlightParams
block|{
DECL|field|SIMPLE
specifier|public
specifier|static
specifier|final
name|String
name|SIMPLE
init|=
literal|"simple"
decl_stmt|;
DECL|field|HIGHLIGHT
specifier|public
specifier|static
specifier|final
name|String
name|HIGHLIGHT
init|=
literal|"hl"
decl_stmt|;
DECL|field|PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|PREFIX
init|=
literal|"hl."
decl_stmt|;
DECL|field|FIELDS
specifier|public
specifier|static
specifier|final
name|String
name|FIELDS
init|=
name|PREFIX
operator|+
literal|"fl"
decl_stmt|;
DECL|field|SNIPPETS
specifier|public
specifier|static
specifier|final
name|String
name|SNIPPETS
init|=
name|PREFIX
operator|+
literal|"snippets"
decl_stmt|;
DECL|field|FRAGSIZE
specifier|public
specifier|static
specifier|final
name|String
name|FRAGSIZE
init|=
name|PREFIX
operator|+
literal|"fragsize"
decl_stmt|;
DECL|field|INCREMENT
specifier|public
specifier|static
specifier|final
name|String
name|INCREMENT
init|=
name|PREFIX
operator|+
literal|"increment"
decl_stmt|;
DECL|field|SLOP
specifier|public
specifier|static
specifier|final
name|String
name|SLOP
init|=
name|PREFIX
operator|+
literal|"slop"
decl_stmt|;
DECL|field|MAX_CHARS
specifier|public
specifier|static
specifier|final
name|String
name|MAX_CHARS
init|=
name|PREFIX
operator|+
literal|"maxAnalyzedChars"
decl_stmt|;
DECL|field|FORMATTER
specifier|public
specifier|static
specifier|final
name|String
name|FORMATTER
init|=
name|PREFIX
operator|+
literal|"formatter"
decl_stmt|;
DECL|field|FRAGMENTER
specifier|public
specifier|static
specifier|final
name|String
name|FRAGMENTER
init|=
name|PREFIX
operator|+
literal|"fragmenter"
decl_stmt|;
DECL|field|SIMPLE_PRE
specifier|public
specifier|static
specifier|final
name|String
name|SIMPLE_PRE
init|=
name|PREFIX
operator|+
name|SIMPLE
operator|+
literal|".pre"
decl_stmt|;
DECL|field|SIMPLE_POST
specifier|public
specifier|static
specifier|final
name|String
name|SIMPLE_POST
init|=
name|PREFIX
operator|+
name|SIMPLE
operator|+
literal|".post"
decl_stmt|;
DECL|field|FIELD_MATCH
specifier|public
specifier|static
specifier|final
name|String
name|FIELD_MATCH
init|=
name|PREFIX
operator|+
literal|"requireFieldMatch"
decl_stmt|;
block|}
end_interface
end_unit
