begin_unit
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|HitCollector
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import
begin_comment
comment|/**  * @author yonik  * @version $Id$  */
end_comment
begin_class
DECL|class|DocSetHitCollector
specifier|final
class|class
name|DocSetHitCollector
extends|extends
name|HitCollector
block|{
DECL|field|pos
name|int
name|pos
init|=
literal|0
decl_stmt|;
DECL|field|bits
name|BitSet
name|bits
decl_stmt|;
DECL|field|maxDoc
specifier|final
name|int
name|maxDoc
decl_stmt|;
comment|// in case there aren't that many hits, we may not want a very sparse
comment|// bit array.  Optimistically collect the first few docs in an array
comment|// in case there are only a few.
DECL|field|ARRAY_COLLECT_SZ
specifier|static
specifier|final
name|int
name|ARRAY_COLLECT_SZ
init|=
name|HashDocSet
operator|.
name|MAX_SIZE
decl_stmt|;
DECL|field|scratch
specifier|final
name|int
index|[]
name|scratch
init|=
name|ARRAY_COLLECT_SZ
operator|>
literal|0
condition|?
operator|new
name|int
index|[
name|ARRAY_COLLECT_SZ
index|]
else|:
literal|null
decl_stmt|;
comment|// todo - could pass in bitset and an operation also...
DECL|method|DocSetHitCollector
name|DocSetHitCollector
parameter_list|(
name|int
name|maxDoc
parameter_list|)
block|{
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
block|}
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|,
name|float
name|score
parameter_list|)
block|{
comment|// optimistically collect the first docs in an array
comment|// in case the total number will be small enough to represent
comment|// as a HashDocSet() instead...
comment|// Storing in this array will be quicker to convert
comment|// than scanning through a potentially huge bit vector.
comment|// FUTURE: when search methods all start returning docs in order, maybe
comment|// we could have a ListDocSet() and use the collected array directly.
if|if
condition|(
name|pos
operator|<
name|ARRAY_COLLECT_SZ
condition|)
block|{
name|scratch
index|[
name|pos
index|]
operator|=
name|doc
expr_stmt|;
block|}
else|else
block|{
comment|// this conditional could be removed if BitSet was preallocated, but that
comment|// would take up more memory, and add more GC time...
if|if
condition|(
name|bits
operator|==
literal|null
condition|)
name|bits
operator|=
operator|new
name|BitSet
argument_list|(
name|maxDoc
argument_list|)
expr_stmt|;
name|bits
operator|.
name|set
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|pos
operator|++
expr_stmt|;
block|}
DECL|method|getDocSet
specifier|public
name|DocSet
name|getDocSet
parameter_list|()
block|{
if|if
condition|(
name|pos
operator|<=
name|ARRAY_COLLECT_SZ
condition|)
block|{
return|return
operator|new
name|HashDocSet
argument_list|(
name|scratch
argument_list|,
literal|0
argument_list|,
name|pos
argument_list|)
return|;
block|}
else|else
block|{
comment|// set the bits for ids that were collected in the array
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ARRAY_COLLECT_SZ
condition|;
name|i
operator|++
control|)
name|bits
operator|.
name|set
argument_list|(
name|scratch
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
operator|new
name|BitDocSet
argument_list|(
name|bits
argument_list|,
name|pos
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
