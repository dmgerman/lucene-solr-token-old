begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|function
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|QueryParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * Collection of static utilities usefull for query parsing.  *  * @version $Id$  */
end_comment
begin_class
DECL|class|QueryParsing
specifier|public
class|class
name|QueryParsing
block|{
comment|/** the SolrParam used to override the QueryParser "default operator" */
DECL|field|OP
specifier|public
specifier|static
specifier|final
name|String
name|OP
init|=
literal|"q.op"
decl_stmt|;
comment|/**     * Helper utility for parsing a query using the Lucene QueryParser syntax.     * @param qs query expression in standard Lucene syntax    * @param schema used for default operator (overridden by params) and passed to the query parser for field format analysis information    */
DECL|method|parseQuery
specifier|public
specifier|static
name|Query
name|parseQuery
parameter_list|(
name|String
name|qs
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
block|{
return|return
name|parseQuery
argument_list|(
name|qs
argument_list|,
literal|null
argument_list|,
name|schema
argument_list|)
return|;
block|}
comment|/**     * Helper utility for parsing a query using the Lucene QueryParser syntax.     * @param qs query expression in standard Lucene syntax    * @param defaultField default field used for unqualified search terms in the query expression    * @param schema used for default operator (overridden by params) and passed to the query parser for field format analysis information    */
DECL|method|parseQuery
specifier|public
specifier|static
name|Query
name|parseQuery
parameter_list|(
name|String
name|qs
parameter_list|,
name|String
name|defaultField
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
block|{
try|try
block|{
name|Query
name|query
init|=
name|schema
operator|.
name|getSolrQueryParser
argument_list|(
name|defaultField
argument_list|)
operator|.
name|parse
argument_list|(
name|qs
argument_list|)
decl_stmt|;
if|if
condition|(
name|SolrCore
operator|.
name|log
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINEST
argument_list|)
condition|)
block|{
name|SolrCore
operator|.
name|log
operator|.
name|finest
argument_list|(
literal|"After QueryParser:"
operator|+
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|SolrCore
operator|.
name|log
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Error parsing Lucene query"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Helper utility for parsing a query using the Lucene QueryParser syntax.     * @param qs query expression in standard Lucene syntax    * @param defaultField default field used for unqualified search terms in the query expression    * @param params used to determine the default operator, overriding the schema specified operator    * @param schema used for default operator (overridden by params) and passed to the query parser for field format analysis information    */
DECL|method|parseQuery
specifier|public
specifier|static
name|Query
name|parseQuery
parameter_list|(
name|String
name|qs
parameter_list|,
name|String
name|defaultField
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
block|{
try|try
block|{
name|SolrQueryParser
name|parser
init|=
name|schema
operator|.
name|getSolrQueryParser
argument_list|(
name|defaultField
argument_list|)
decl_stmt|;
name|String
name|opParam
init|=
name|params
operator|.
name|get
argument_list|(
name|OP
argument_list|)
decl_stmt|;
if|if
condition|(
name|opParam
operator|!=
literal|null
condition|)
block|{
name|parser
operator|.
name|setDefaultOperator
argument_list|(
literal|"AND"
operator|.
name|equals
argument_list|(
name|opParam
argument_list|)
condition|?
name|QueryParser
operator|.
name|Operator
operator|.
name|AND
else|:
name|QueryParser
operator|.
name|Operator
operator|.
name|OR
argument_list|)
expr_stmt|;
block|}
name|Query
name|query
init|=
name|parser
operator|.
name|parse
argument_list|(
name|qs
argument_list|)
decl_stmt|;
if|if
condition|(
name|SolrCore
operator|.
name|log
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINEST
argument_list|)
condition|)
block|{
name|SolrCore
operator|.
name|log
operator|.
name|finest
argument_list|(
literal|"After QueryParser:"
operator|+
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|SolrCore
operator|.
name|log
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Query parsing error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/***    * SortSpec encapsulates a Lucene Sort and a count of the number of documents    * to return.    */
DECL|class|SortSpec
specifier|public
specifier|static
class|class
name|SortSpec
block|{
DECL|field|sort
specifier|private
specifier|final
name|Sort
name|sort
decl_stmt|;
DECL|field|num
specifier|private
specifier|final
name|int
name|num
decl_stmt|;
DECL|method|SortSpec
name|SortSpec
parameter_list|(
name|Sort
name|sort
parameter_list|,
name|int
name|num
parameter_list|)
block|{
name|this
operator|.
name|sort
operator|=
name|sort
expr_stmt|;
name|this
operator|.
name|num
operator|=
name|num
expr_stmt|;
block|}
comment|/**      * Gets the Lucene Sort object, or null for the default sort      * by score descending.      */
DECL|method|getSort
specifier|public
name|Sort
name|getSort
parameter_list|()
block|{
return|return
name|sort
return|;
block|}
comment|/**      * Gets the number of documens to return after sorting.      *      * @return number of docs to return, or -1 for no cut off (just sort)      */
DECL|method|getCount
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|num
return|;
block|}
block|}
DECL|field|sortSep
specifier|private
specifier|static
name|Pattern
name|sortSep
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|","
argument_list|)
decl_stmt|;
comment|/**    * Returns null if the sortSpec is the standard sort desc.    *    *<p>    * The form of the sort specification string currently parsed is:    *</p>    *<pre>>    * SortSpec ::= SingleSort [, SingleSort]*    * SingleSort ::=<fieldname> SortDirection    * SortDirection ::= top | desc | bottom | asc    *</pre>    * Examples:    *<pre>    *   score desc               #normal sort by score (will return null)    *   weight bottom            #sort by weight ascending     *   weight desc              #sort by weight descending    *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties    *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker    *</pre>    *    */
DECL|method|parseSort
specifier|public
specifier|static
name|SortSpec
name|parseSort
parameter_list|(
name|String
name|sortSpec
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
block|{
if|if
condition|(
name|sortSpec
operator|==
literal|null
operator|||
name|sortSpec
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
name|String
index|[]
name|parts
init|=
name|sortSep
operator|.
name|split
argument_list|(
name|sortSpec
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|null
return|;
name|SortField
index|[]
name|lst
init|=
operator|new
name|SortField
index|[
name|parts
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|part
init|=
name|parts
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
name|boolean
name|top
init|=
literal|true
decl_stmt|;
name|int
name|idx
init|=
name|part
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|String
name|order
init|=
name|part
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"desc"
operator|.
name|equals
argument_list|(
name|order
argument_list|)
operator|||
literal|"top"
operator|.
name|equals
argument_list|(
name|order
argument_list|)
condition|)
block|{
name|top
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"asc"
operator|.
name|equals
argument_list|(
name|order
argument_list|)
operator|||
literal|"bottom"
operator|.
name|equals
argument_list|(
name|order
argument_list|)
condition|)
block|{
name|top
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown sort order: "
operator|+
name|order
argument_list|)
throw|;
block|}
name|part
operator|=
name|part
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Missing sort order."
argument_list|)
throw|;
block|}
if|if
condition|(
literal|"score"
operator|.
name|equals
argument_list|(
name|part
argument_list|)
condition|)
block|{
if|if
condition|(
name|top
condition|)
block|{
comment|// If thre is only one thing in the list, just do the regular thing...
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
literal|null
return|;
comment|// do normal scoring...
block|}
name|lst
index|[
name|i
index|]
operator|=
name|SortField
operator|.
name|FIELD_SCORE
expr_stmt|;
block|}
else|else
block|{
name|lst
index|[
name|i
index|]
operator|=
operator|new
name|SortField
argument_list|(
literal|null
argument_list|,
name|SortField
operator|.
name|SCORE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// getField could throw an exception if the name isn't found
name|SchemaField
name|f
init|=
literal|null
decl_stmt|;
try|try
block|{
name|f
operator|=
name|schema
operator|.
name|getField
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"can not sort on undefined field: "
operator|+
name|part
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|f
operator|==
literal|null
operator|||
operator|!
name|f
operator|.
name|indexed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"can not sort on unindexed field: "
operator|+
name|part
argument_list|)
throw|;
block|}
name|lst
index|[
name|i
index|]
operator|=
name|f
operator|.
name|getType
argument_list|()
operator|.
name|getSortField
argument_list|(
name|f
argument_list|,
name|top
argument_list|)
expr_stmt|;
block|}
block|}
comment|// For more info on the 'num' field, -1,
comment|// see: https://issues.apache.org/jira/browse/SOLR-99
return|return
operator|new
name|SortSpec
argument_list|(
operator|new
name|Sort
argument_list|(
name|lst
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|///////////////////////////
comment|///////////////////////////
comment|///////////////////////////
DECL|method|writeFieldName
specifier|static
name|FieldType
name|writeFieldName
parameter_list|(
name|String
name|name
parameter_list|,
name|IndexSchema
name|schema
parameter_list|,
name|Appendable
name|out
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
name|FieldType
name|ft
init|=
literal|null
decl_stmt|;
name|ft
operator|=
name|schema
operator|.
name|getFieldTypeNoEx
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|ft
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|"(UNKNOWN FIELD "
operator|+
name|name
operator|+
literal|')'
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
return|return
name|ft
return|;
block|}
DECL|method|writeFieldVal
specifier|static
name|void
name|writeFieldVal
parameter_list|(
name|String
name|val
parameter_list|,
name|FieldType
name|ft
parameter_list|,
name|Appendable
name|out
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|ft
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
name|ft
operator|.
name|toExternal
argument_list|(
operator|new
name|Field
argument_list|(
literal|""
argument_list|,
name|val
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|UN_TOKENIZED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|append
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** @see #toString(Query,IndexSchema) */
DECL|method|toString
specifier|public
specifier|static
name|void
name|toString
parameter_list|(
name|Query
name|query
parameter_list|,
name|IndexSchema
name|schema
parameter_list|,
name|Appendable
name|out
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|writeBoost
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|query
operator|instanceof
name|TermQuery
condition|)
block|{
name|TermQuery
name|q
init|=
operator|(
name|TermQuery
operator|)
name|query
decl_stmt|;
name|Term
name|t
init|=
name|q
operator|.
name|getTerm
argument_list|()
decl_stmt|;
name|FieldType
name|ft
init|=
name|writeFieldName
argument_list|(
name|t
operator|.
name|field
argument_list|()
argument_list|,
name|schema
argument_list|,
name|out
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|writeFieldVal
argument_list|(
name|t
operator|.
name|text
argument_list|()
argument_list|,
name|ft
argument_list|,
name|out
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|RangeQuery
condition|)
block|{
name|RangeQuery
name|q
init|=
operator|(
name|RangeQuery
operator|)
name|query
decl_stmt|;
name|String
name|fname
init|=
name|q
operator|.
name|getField
argument_list|()
decl_stmt|;
name|FieldType
name|ft
init|=
name|writeFieldName
argument_list|(
name|fname
argument_list|,
name|schema
argument_list|,
name|out
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|out
operator|.
name|append
argument_list|(
name|q
operator|.
name|isInclusive
argument_list|()
condition|?
literal|'['
else|:
literal|'{'
argument_list|)
expr_stmt|;
name|Term
name|lt
init|=
name|q
operator|.
name|getLowerTerm
argument_list|()
decl_stmt|;
name|Term
name|ut
init|=
name|q
operator|.
name|getUpperTerm
argument_list|()
decl_stmt|;
if|if
condition|(
name|lt
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeFieldVal
argument_list|(
name|lt
operator|.
name|text
argument_list|()
argument_list|,
name|ft
argument_list|,
name|out
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|append
argument_list|(
literal|" TO "
argument_list|)
expr_stmt|;
if|if
condition|(
name|ut
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeFieldVal
argument_list|(
name|ut
operator|.
name|text
argument_list|()
argument_list|,
name|ft
argument_list|,
name|out
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|append
argument_list|(
name|q
operator|.
name|isInclusive
argument_list|()
condition|?
literal|']'
else|:
literal|'}'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|ConstantScoreRangeQuery
condition|)
block|{
name|ConstantScoreRangeQuery
name|q
init|=
operator|(
name|ConstantScoreRangeQuery
operator|)
name|query
decl_stmt|;
name|String
name|fname
init|=
name|q
operator|.
name|getField
argument_list|()
decl_stmt|;
name|FieldType
name|ft
init|=
name|writeFieldName
argument_list|(
name|fname
argument_list|,
name|schema
argument_list|,
name|out
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|out
operator|.
name|append
argument_list|(
name|q
operator|.
name|includesLower
argument_list|()
condition|?
literal|'['
else|:
literal|'{'
argument_list|)
expr_stmt|;
name|String
name|lt
init|=
name|q
operator|.
name|getLowerVal
argument_list|()
decl_stmt|;
name|String
name|ut
init|=
name|q
operator|.
name|getUpperVal
argument_list|()
decl_stmt|;
if|if
condition|(
name|lt
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeFieldVal
argument_list|(
name|lt
argument_list|,
name|ft
argument_list|,
name|out
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|append
argument_list|(
literal|" TO "
argument_list|)
expr_stmt|;
if|if
condition|(
name|ut
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeFieldVal
argument_list|(
name|ut
argument_list|,
name|ft
argument_list|,
name|out
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|append
argument_list|(
name|q
operator|.
name|includesUpper
argument_list|()
condition|?
literal|']'
else|:
literal|'}'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|BooleanQuery
condition|)
block|{
name|BooleanQuery
name|q
init|=
operator|(
name|BooleanQuery
operator|)
name|query
decl_stmt|;
name|boolean
name|needParens
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|q
operator|.
name|getBoost
argument_list|()
operator|!=
literal|1.0
operator|||
name|q
operator|.
name|getMinimumNumberShouldMatch
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|needParens
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|needParens
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
block|}
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|BooleanClause
name|c
range|:
operator|(
name|List
argument_list|<
name|BooleanClause
argument_list|>
operator|)
name|q
operator|.
name|clauses
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|.
name|isProhibited
argument_list|()
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|isRequired
argument_list|()
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'+'
argument_list|)
expr_stmt|;
block|}
name|Query
name|subQuery
init|=
name|c
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|boolean
name|wrapQuery
init|=
literal|false
decl_stmt|;
comment|// TODO: may need to put parens around other types
comment|// of queries too, depending on future syntax.
if|if
condition|(
name|subQuery
operator|instanceof
name|BooleanQuery
condition|)
block|{
name|wrapQuery
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|wrapQuery
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
block|}
name|toString
argument_list|(
name|subQuery
argument_list|,
name|schema
argument_list|,
name|out
argument_list|,
name|flags
argument_list|)
expr_stmt|;
if|if
condition|(
name|wrapQuery
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|needParens
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|.
name|getMinimumNumberShouldMatch
argument_list|()
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'~'
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|q
operator|.
name|getMinimumNumberShouldMatch
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|PrefixQuery
condition|)
block|{
name|PrefixQuery
name|q
init|=
operator|(
name|PrefixQuery
operator|)
name|query
decl_stmt|;
name|Term
name|prefix
init|=
name|q
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
name|FieldType
name|ft
init|=
name|writeFieldName
argument_list|(
name|prefix
operator|.
name|field
argument_list|()
argument_list|,
name|schema
argument_list|,
name|out
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|out
operator|.
name|append
argument_list|(
name|prefix
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|ConstantScorePrefixQuery
condition|)
block|{
name|ConstantScorePrefixQuery
name|q
init|=
operator|(
name|ConstantScorePrefixQuery
operator|)
name|query
decl_stmt|;
name|Term
name|prefix
init|=
name|q
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
name|FieldType
name|ft
init|=
name|writeFieldName
argument_list|(
name|prefix
operator|.
name|field
argument_list|()
argument_list|,
name|schema
argument_list|,
name|out
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|out
operator|.
name|append
argument_list|(
name|prefix
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|WildcardQuery
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|writeBoost
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|FuzzyQuery
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|writeBoost
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|ConstantScoreQuery
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|writeBoost
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|append
argument_list|(
name|query
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|'('
operator|+
name|query
operator|.
name|toString
argument_list|()
operator|+
literal|')'
argument_list|)
expr_stmt|;
name|writeBoost
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|writeBoost
operator|&&
name|query
operator|.
name|getBoost
argument_list|()
operator|!=
literal|1.0f
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|"^"
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
name|Float
operator|.
name|toString
argument_list|(
name|query
operator|.
name|getBoost
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Formats a Query for debugging, using the IndexSchema to make     * complex field types readable.    *    *<p>    * The benefit of using this method instead of calling     *<code>Query.toString</code> directly is that it knows about the data    * types of each field, so any field which is encoded in a particularly     * complex way is still readable. The downside is that it only knows     * about built in Query types, and will not be able to format custom     * Query classes.    *</p>    */
DECL|method|toString
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|Query
name|query
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
block|{
try|try
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|toString
argument_list|(
name|query
argument_list|,
name|schema
argument_list|,
name|sb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// simple class to help with parsing a string
DECL|class|StrParser
specifier|private
specifier|static
class|class
name|StrParser
block|{
DECL|field|val
name|String
name|val
decl_stmt|;
DECL|field|pos
name|int
name|pos
decl_stmt|;
DECL|field|end
name|int
name|end
decl_stmt|;
DECL|method|StrParser
name|StrParser
parameter_list|(
name|String
name|val
parameter_list|)
block|{
name|this
operator|.
name|val
operator|=
name|val
expr_stmt|;
name|end
operator|=
name|val
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
DECL|method|eatws
name|void
name|eatws
parameter_list|()
block|{
while|while
condition|(
name|pos
operator|<
name|end
operator|&&
name|Character
operator|.
name|isWhitespace
argument_list|(
name|val
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
argument_list|)
condition|)
name|pos
operator|++
expr_stmt|;
block|}
DECL|method|opt
name|boolean
name|opt
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|eatws
argument_list|()
expr_stmt|;
name|int
name|slen
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|regionMatches
argument_list|(
name|pos
argument_list|,
name|s
argument_list|,
literal|0
argument_list|,
name|slen
argument_list|)
condition|)
block|{
name|pos
operator|+=
name|slen
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|expect
name|void
name|expect
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|ParseException
block|{
name|eatws
argument_list|()
expr_stmt|;
name|int
name|slen
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|regionMatches
argument_list|(
name|pos
argument_list|,
name|s
argument_list|,
literal|0
argument_list|,
name|slen
argument_list|)
condition|)
block|{
name|pos
operator|+=
name|slen
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Expected '"
operator|+
name|s
operator|+
literal|"' at position "
operator|+
name|pos
operator|+
literal|" in '"
operator|+
name|val
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
DECL|method|getFloat
name|float
name|getFloat
parameter_list|()
throws|throws
name|ParseException
block|{
name|eatws
argument_list|()
expr_stmt|;
name|char
index|[]
name|arr
init|=
operator|new
name|char
index|[
name|end
operator|-
name|pos
index|]
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|val
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|ch
operator|>=
literal|'0'
operator|&&
name|ch
operator|<=
literal|'9'
operator|)
operator|||
name|ch
operator|==
literal|'+'
operator|||
name|ch
operator|==
literal|'-'
operator|||
name|ch
operator|==
literal|'.'
operator|||
name|ch
operator|==
literal|'e'
operator|||
name|ch
operator|==
literal|'E'
condition|)
block|{
name|pos
operator|++
expr_stmt|;
name|arr
index|[
name|i
index|]
operator|=
name|ch
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
operator|new
name|String
argument_list|(
name|arr
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getId
name|String
name|getId
parameter_list|()
throws|throws
name|ParseException
block|{
name|eatws
argument_list|()
expr_stmt|;
name|int
name|id_start
init|=
name|pos
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|end
operator|&&
name|Character
operator|.
name|isJavaIdentifierPart
argument_list|(
name|val
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
argument_list|)
condition|)
name|pos
operator|++
expr_stmt|;
return|return
name|val
operator|.
name|substring
argument_list|(
name|id_start
argument_list|,
name|pos
argument_list|)
return|;
block|}
DECL|method|peek
name|char
name|peek
parameter_list|()
block|{
name|eatws
argument_list|()
expr_stmt|;
return|return
name|pos
operator|<
name|end
condition|?
name|val
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
else|:
literal|0
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"'"
operator|+
name|val
operator|+
literal|"'"
operator|+
literal|", pos="
operator|+
name|pos
return|;
block|}
block|}
comment|/**    * Builds a list of String which are stringified versions of a list of Queries    */
DECL|method|toString
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|toString
parameter_list|(
name|List
argument_list|<
name|Query
argument_list|>
name|queries
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|out
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|queries
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Query
name|q
range|:
name|queries
control|)
block|{
name|out
operator|.
name|add
argument_list|(
name|QueryParsing
operator|.
name|toString
argument_list|(
name|q
argument_list|,
name|schema
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
DECL|class|VSParser
specifier|private
specifier|abstract
specifier|static
class|class
name|VSParser
block|{
DECL|method|parse
specifier|abstract
name|ValueSource
name|parse
parameter_list|(
name|StrParser
name|sp
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
throws|throws
name|ParseException
function_decl|;
block|}
DECL|field|vsParsers
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|VSParser
argument_list|>
name|vsParsers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|VSParser
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|vsParsers
operator|.
name|put
argument_list|(
literal|"ord"
argument_list|,
operator|new
name|VSParser
argument_list|()
block|{
name|ValueSource
name|parse
parameter_list|(
name|StrParser
name|sp
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
throws|throws
name|ParseException
block|{
name|String
name|field
init|=
name|sp
operator|.
name|getId
argument_list|()
decl_stmt|;
return|return
operator|new
name|OrdFieldSource
argument_list|(
name|field
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|vsParsers
operator|.
name|put
argument_list|(
literal|"rord"
argument_list|,
operator|new
name|VSParser
argument_list|()
block|{
name|ValueSource
name|parse
parameter_list|(
name|StrParser
name|sp
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
throws|throws
name|ParseException
block|{
name|String
name|field
init|=
name|sp
operator|.
name|getId
argument_list|()
decl_stmt|;
return|return
operator|new
name|ReverseOrdFieldSource
argument_list|(
name|field
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|vsParsers
operator|.
name|put
argument_list|(
literal|"linear"
argument_list|,
operator|new
name|VSParser
argument_list|()
block|{
name|ValueSource
name|parse
parameter_list|(
name|StrParser
name|sp
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
throws|throws
name|ParseException
block|{
name|ValueSource
name|source
init|=
name|parseValSource
argument_list|(
name|sp
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|sp
operator|.
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|float
name|slope
init|=
name|sp
operator|.
name|getFloat
argument_list|()
decl_stmt|;
name|sp
operator|.
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|float
name|intercept
init|=
name|sp
operator|.
name|getFloat
argument_list|()
decl_stmt|;
return|return
operator|new
name|LinearFloatFunction
argument_list|(
name|source
argument_list|,
name|slope
argument_list|,
name|intercept
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|vsParsers
operator|.
name|put
argument_list|(
literal|"max"
argument_list|,
operator|new
name|VSParser
argument_list|()
block|{
name|ValueSource
name|parse
parameter_list|(
name|StrParser
name|sp
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
throws|throws
name|ParseException
block|{
name|ValueSource
name|source
init|=
name|parseValSource
argument_list|(
name|sp
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|sp
operator|.
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|float
name|val
init|=
name|sp
operator|.
name|getFloat
argument_list|()
decl_stmt|;
return|return
operator|new
name|MaxFloatFunction
argument_list|(
name|source
argument_list|,
name|val
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|vsParsers
operator|.
name|put
argument_list|(
literal|"recip"
argument_list|,
operator|new
name|VSParser
argument_list|()
block|{
name|ValueSource
name|parse
parameter_list|(
name|StrParser
name|sp
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
throws|throws
name|ParseException
block|{
name|ValueSource
name|source
init|=
name|parseValSource
argument_list|(
name|sp
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|sp
operator|.
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|float
name|m
init|=
name|sp
operator|.
name|getFloat
argument_list|()
decl_stmt|;
name|sp
operator|.
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|float
name|a
init|=
name|sp
operator|.
name|getFloat
argument_list|()
decl_stmt|;
name|sp
operator|.
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|float
name|b
init|=
name|sp
operator|.
name|getFloat
argument_list|()
decl_stmt|;
return|return
operator|new
name|ReciprocalFloatFunction
argument_list|(
name|source
argument_list|,
name|m
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|vsParsers
operator|.
name|put
argument_list|(
literal|"scale"
argument_list|,
operator|new
name|VSParser
argument_list|()
block|{
name|ValueSource
name|parse
parameter_list|(
name|StrParser
name|sp
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
throws|throws
name|ParseException
block|{
name|ValueSource
name|source
init|=
name|parseValSource
argument_list|(
name|sp
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|sp
operator|.
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|float
name|min
init|=
name|sp
operator|.
name|getFloat
argument_list|()
decl_stmt|;
name|sp
operator|.
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|float
name|max
init|=
name|sp
operator|.
name|getFloat
argument_list|()
decl_stmt|;
return|return
operator|new
name|ScaleFloatFunction
argument_list|(
name|source
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|vsParsers
operator|.
name|put
argument_list|(
literal|"pow"
argument_list|,
operator|new
name|VSParser
argument_list|()
block|{
name|ValueSource
name|parse
parameter_list|(
name|StrParser
name|sp
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
throws|throws
name|ParseException
block|{
name|ValueSource
name|a
init|=
name|parseValSource
argument_list|(
name|sp
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|sp
operator|.
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|ValueSource
name|b
init|=
name|parseValSource
argument_list|(
name|sp
argument_list|,
name|schema
argument_list|)
decl_stmt|;
return|return
operator|new
name|PowFloatFunction
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|vsParsers
operator|.
name|put
argument_list|(
literal|"div"
argument_list|,
operator|new
name|VSParser
argument_list|()
block|{
name|ValueSource
name|parse
parameter_list|(
name|StrParser
name|sp
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
throws|throws
name|ParseException
block|{
name|ValueSource
name|a
init|=
name|parseValSource
argument_list|(
name|sp
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|sp
operator|.
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|ValueSource
name|b
init|=
name|parseValSource
argument_list|(
name|sp
argument_list|,
name|schema
argument_list|)
decl_stmt|;
return|return
operator|new
name|DivFloatFunction
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|vsParsers
operator|.
name|put
argument_list|(
literal|"map"
argument_list|,
operator|new
name|VSParser
argument_list|()
block|{
name|ValueSource
name|parse
parameter_list|(
name|StrParser
name|sp
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
throws|throws
name|ParseException
block|{
name|ValueSource
name|source
init|=
name|parseValSource
argument_list|(
name|sp
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|sp
operator|.
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|float
name|min
init|=
name|sp
operator|.
name|getFloat
argument_list|()
decl_stmt|;
name|sp
operator|.
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|float
name|max
init|=
name|sp
operator|.
name|getFloat
argument_list|()
decl_stmt|;
name|sp
operator|.
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|float
name|target
init|=
name|sp
operator|.
name|getFloat
argument_list|()
decl_stmt|;
return|return
operator|new
name|RangeMapFloatFunction
argument_list|(
name|source
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|target
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|vsParsers
operator|.
name|put
argument_list|(
literal|"sqrt"
argument_list|,
operator|new
name|VSParser
argument_list|()
block|{
name|ValueSource
name|parse
parameter_list|(
name|StrParser
name|sp
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
throws|throws
name|ParseException
block|{
name|ValueSource
name|source
init|=
name|parseValSource
argument_list|(
name|sp
argument_list|,
name|schema
argument_list|)
decl_stmt|;
return|return
operator|new
name|SimpleFloatFunction
argument_list|(
name|source
argument_list|)
block|{
specifier|protected
name|String
name|name
parameter_list|()
block|{
return|return
literal|"sqrt"
return|;
block|}
specifier|protected
name|float
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|DocValues
name|vals
parameter_list|)
block|{
return|return
operator|(
name|float
operator|)
name|Math
operator|.
name|sqrt
argument_list|(
name|vals
operator|.
name|floatVal
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|vsParsers
operator|.
name|put
argument_list|(
literal|"log"
argument_list|,
operator|new
name|VSParser
argument_list|()
block|{
name|ValueSource
name|parse
parameter_list|(
name|StrParser
name|sp
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
throws|throws
name|ParseException
block|{
name|ValueSource
name|source
init|=
name|parseValSource
argument_list|(
name|sp
argument_list|,
name|schema
argument_list|)
decl_stmt|;
return|return
operator|new
name|SimpleFloatFunction
argument_list|(
name|source
argument_list|)
block|{
specifier|protected
name|String
name|name
parameter_list|()
block|{
return|return
literal|"log"
return|;
block|}
specifier|protected
name|float
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|DocValues
name|vals
parameter_list|)
block|{
return|return
operator|(
name|float
operator|)
name|Math
operator|.
name|log10
argument_list|(
name|vals
operator|.
name|floatVal
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|vsParsers
operator|.
name|put
argument_list|(
literal|"abs"
argument_list|,
operator|new
name|VSParser
argument_list|()
block|{
name|ValueSource
name|parse
parameter_list|(
name|StrParser
name|sp
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
throws|throws
name|ParseException
block|{
name|ValueSource
name|source
init|=
name|parseValSource
argument_list|(
name|sp
argument_list|,
name|schema
argument_list|)
decl_stmt|;
return|return
operator|new
name|SimpleFloatFunction
argument_list|(
name|source
argument_list|)
block|{
specifier|protected
name|String
name|name
parameter_list|()
block|{
return|return
literal|"abs"
return|;
block|}
specifier|protected
name|float
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|DocValues
name|vals
parameter_list|)
block|{
return|return
operator|(
name|float
operator|)
name|Math
operator|.
name|abs
argument_list|(
name|vals
operator|.
name|floatVal
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|vsParsers
operator|.
name|put
argument_list|(
literal|"sum"
argument_list|,
operator|new
name|VSParser
argument_list|()
block|{
name|ValueSource
name|parse
parameter_list|(
name|StrParser
name|sp
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
throws|throws
name|ParseException
block|{
name|List
argument_list|<
name|ValueSource
argument_list|>
name|sources
init|=
name|parseValueSourceList
argument_list|(
name|sp
argument_list|,
name|schema
argument_list|)
decl_stmt|;
return|return
operator|new
name|SumFloatFunction
argument_list|(
name|sources
operator|.
name|toArray
argument_list|(
operator|new
name|ValueSource
index|[
name|sources
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|vsParsers
operator|.
name|put
argument_list|(
literal|"product"
argument_list|,
operator|new
name|VSParser
argument_list|()
block|{
name|ValueSource
name|parse
parameter_list|(
name|StrParser
name|sp
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
throws|throws
name|ParseException
block|{
name|List
argument_list|<
name|ValueSource
argument_list|>
name|sources
init|=
name|parseValueSourceList
argument_list|(
name|sp
argument_list|,
name|schema
argument_list|)
decl_stmt|;
return|return
operator|new
name|ProductFloatFunction
argument_list|(
name|sources
operator|.
name|toArray
argument_list|(
operator|new
name|ValueSource
index|[
name|sources
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|parseValueSourceList
specifier|private
specifier|static
name|List
argument_list|<
name|ValueSource
argument_list|>
name|parseValueSourceList
parameter_list|(
name|StrParser
name|sp
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
throws|throws
name|ParseException
block|{
name|List
argument_list|<
name|ValueSource
argument_list|>
name|sources
init|=
operator|new
name|ArrayList
argument_list|<
name|ValueSource
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|sources
operator|.
name|add
argument_list|(
name|parseValSource
argument_list|(
name|sp
argument_list|,
name|schema
argument_list|)
argument_list|)
expr_stmt|;
name|char
name|ch
init|=
name|sp
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|')'
condition|)
break|break;
name|sp
operator|.
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
return|return
name|sources
return|;
block|}
DECL|method|parseValSource
specifier|private
specifier|static
name|ValueSource
name|parseValSource
parameter_list|(
name|StrParser
name|sp
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
throws|throws
name|ParseException
block|{
name|int
name|ch
init|=
name|sp
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|ch
operator|>=
literal|'0'
operator|&&
name|ch
operator|<=
literal|'9'
operator|||
name|ch
operator|==
literal|'.'
operator|||
name|ch
operator|==
literal|'+'
operator|||
name|ch
operator|==
literal|'-'
condition|)
block|{
return|return
operator|new
name|ConstValueSource
argument_list|(
name|sp
operator|.
name|getFloat
argument_list|()
argument_list|)
return|;
block|}
name|String
name|id
init|=
name|sp
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sp
operator|.
name|opt
argument_list|(
literal|"("
argument_list|)
condition|)
block|{
comment|// a function... look it up.
name|VSParser
name|argParser
init|=
name|vsParsers
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|argParser
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Unknown function "
operator|+
name|id
operator|+
literal|" in FunctionQuery("
operator|+
name|sp
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|ValueSource
name|vs
init|=
name|argParser
operator|.
name|parse
argument_list|(
name|sp
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|sp
operator|.
name|expect
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|vs
return|;
block|}
name|SchemaField
name|f
init|=
name|schema
operator|.
name|getField
argument_list|(
name|id
argument_list|)
decl_stmt|;
return|return
name|f
operator|.
name|getType
argument_list|()
operator|.
name|getValueSource
argument_list|(
name|f
argument_list|)
return|;
block|}
comment|/**     * Parse a function, returning a FunctionQuery    *    *<p>    * Syntax Examples....    *</p>    *    *<pre>    * // Numeric fields default to correct type    * // (ie: IntFieldSource or FloatFieldSource)    * // Others use implicit ord(...) to generate numeric field value    * myfield    *    * // OrdFieldSource    * ord(myfield)    *    * // ReverseOrdFieldSource    * rord(myfield)    *    * // LinearFloatFunction on numeric field value    * linear(myfield,1,2)    *    * // MaxFloatFunction of LinearFloatFunction on numeric field value or constant    * max(linear(myfield,1,2),100)    *    * // ReciprocalFloatFunction on numeric field value    * recip(myfield,1,2,3)    *    * // ReciprocalFloatFunction on ReverseOrdFieldSource    * recip(rord(myfield),1,2,3)    *    * // ReciprocalFloatFunction on LinearFloatFunction on ReverseOrdFieldSource    * recip(linear(rord(myfield),1,2),3,4,5)    *</pre>    */
DECL|method|parseFunction
specifier|public
specifier|static
name|FunctionQuery
name|parseFunction
parameter_list|(
name|String
name|func
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
throws|throws
name|ParseException
block|{
return|return
operator|new
name|FunctionQuery
argument_list|(
name|parseValSource
argument_list|(
operator|new
name|StrParser
argument_list|(
name|func
argument_list|)
argument_list|,
name|schema
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class
end_unit
