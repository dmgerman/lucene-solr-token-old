begin_unit
begin_comment
comment|/**  * Copyright 2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrConfig
import|;
end_import
begin_comment
comment|/**  *<code>HashDocSet</code> represents an unordered set of Lucene Document Ids  * using a primitive int hash table.  It can be a better choice if there are few docs  * in the set because it takes up less memory and is faster to iterate and take  * set intersections.  *  * @author yonik  * @version $Id: HashDocSet.java,v 1.7 2005/11/22 17:16:19 yonik Exp $  * @since solr 0.9  */
end_comment
begin_class
DECL|class|HashDocSet
specifier|public
specifier|final
class|class
name|HashDocSet
extends|extends
name|DocSetBase
block|{
comment|// keep track of the inverse of the Loadfactor  since
comment|// multiplication is so much faster than division.
DECL|field|inverseLoadfactor
specifier|final
specifier|static
name|float
name|inverseLoadfactor
init|=
literal|1.0f
operator|/
name|SolrConfig
operator|.
name|config
operator|.
name|getFloat
argument_list|(
literal|"//HashDocSet/@loadFactor"
argument_list|,
literal|0.75f
argument_list|)
decl_stmt|;
DECL|field|MAX_SIZE
specifier|public
specifier|final
specifier|static
name|int
name|MAX_SIZE
init|=
name|SolrConfig
operator|.
name|config
operator|.
name|getInt
argument_list|(
literal|"//HashDocSet/@maxSize"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// lucene docs are numbered from 0, so a neg number must be used for missing.
comment|// an alternative to having to init the array to EMPTY at the start is
comment|//
DECL|field|EMPTY
specifier|private
specifier|final
specifier|static
name|int
name|EMPTY
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|tablesize
specifier|private
specifier|final
name|int
name|tablesize
decl_stmt|;
DECL|field|table
specifier|private
specifier|final
name|int
index|[]
name|table
decl_stmt|;
DECL|field|size
specifier|private
specifier|final
name|int
name|size
decl_stmt|;
DECL|field|mask
specifier|private
specifier|final
name|int
name|mask
decl_stmt|;
DECL|method|HashDocSet
specifier|public
name|HashDocSet
parameter_list|(
name|int
index|[]
name|docs
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|int
name|tsize
init|=
name|Math
operator|.
name|max
argument_list|(
name|nextHighestPowerOfTwo
argument_list|(
name|len
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|tsize
operator|<
name|len
operator|*
name|inverseLoadfactor
condition|)
block|{
name|tsize
operator|<<=
literal|1
expr_stmt|;
block|}
name|tablesize
operator|=
name|tsize
expr_stmt|;
name|mask
operator|=
name|tablesize
operator|-
literal|1
expr_stmt|;
name|table
operator|=
operator|new
name|int
index|[
name|tablesize
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tablesize
condition|;
name|i
operator|++
control|)
name|table
index|[
name|i
index|]
operator|=
name|EMPTY
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|put
argument_list|(
name|docs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|size
operator|=
name|len
expr_stmt|;
block|}
DECL|method|nextHighestPowerOfTwo
specifier|static
name|int
name|nextHighestPowerOfTwo
parameter_list|(
name|int
name|v
parameter_list|)
block|{
name|v
operator|--
expr_stmt|;
name|v
operator||=
name|v
operator|>>
literal|1
expr_stmt|;
name|v
operator||=
name|v
operator|>>
literal|2
expr_stmt|;
name|v
operator||=
name|v
operator|>>
literal|4
expr_stmt|;
name|v
operator||=
name|v
operator|>>
literal|8
expr_stmt|;
name|v
operator||=
name|v
operator|>>
literal|16
expr_stmt|;
name|v
operator|++
expr_stmt|;
return|return
name|v
return|;
block|}
DECL|method|put
name|void
name|put
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|table
index|[
name|getSlot
argument_list|(
name|doc
argument_list|)
index|]
operator|=
name|doc
expr_stmt|;
block|}
DECL|method|getSlot
specifier|private
name|int
name|getSlot
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|int
name|s
decl_stmt|,
name|v
decl_stmt|;
name|s
operator|=
name|val
operator|&
name|mask
expr_stmt|;
name|v
operator|=
name|table
index|[
name|s
index|]
expr_stmt|;
comment|// check for EMPTY first since that value is more likely
if|if
condition|(
name|v
operator|==
name|EMPTY
operator|||
name|v
operator|==
name|val
condition|)
return|return
name|s
return|;
name|s
operator|=
name|rehash
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
comment|// As the size of this int hashtable is expected to be small
comment|// (thousands at most), I did not try to keep the rehash function
comment|// reversible (important to avoid collisions in large hash tables).
DECL|method|rehash
specifier|private
name|int
name|rehash
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|int
name|h
decl_stmt|,
name|s
decl_stmt|,
name|v
decl_stmt|;
specifier|final
name|int
name|comp
init|=
operator|~
name|val
decl_stmt|;
comment|// don't left shift too far... the only bits
comment|// that count in the answer are the ones on the right.
comment|// We want to put more of the bits on the left
comment|// into the answer.
comment|// Keep small tables in mind.  We may be only using
comment|// the first 5 or 6 bits.
comment|// on the first rehash, use complement instead of val to shift
comment|// so we don't end up with 0 again if val==0.
name|h
operator|=
name|val
operator|^
operator|(
name|comp
operator|>>
literal|8
operator|)
expr_stmt|;
name|s
operator|=
name|h
operator|&
name|mask
expr_stmt|;
name|v
operator|=
name|table
index|[
name|s
index|]
expr_stmt|;
if|if
condition|(
name|v
operator|==
name|EMPTY
operator|||
name|v
operator|==
name|val
condition|)
return|return
name|s
return|;
name|h
operator|^=
operator|(
name|v
operator|<<
literal|17
operator|)
operator||
operator|(
name|comp
operator|>>>
literal|16
operator|)
expr_stmt|;
comment|// this is reversible
name|s
operator|=
name|h
operator|&
name|mask
expr_stmt|;
name|v
operator|=
name|table
index|[
name|s
index|]
expr_stmt|;
if|if
condition|(
name|v
operator|==
name|EMPTY
operator|||
name|v
operator|==
name|val
condition|)
return|return
name|s
return|;
name|h
operator|^=
operator|(
name|h
operator|<<
literal|8
operator|)
operator||
operator|(
name|comp
operator|>>>
literal|25
operator|)
expr_stmt|;
comment|// this is reversible
name|s
operator|=
name|h
operator|&
name|mask
expr_stmt|;
name|v
operator|=
name|table
index|[
name|s
index|]
expr_stmt|;
if|if
condition|(
name|v
operator|==
name|EMPTY
operator|||
name|v
operator|==
name|val
condition|)
return|return
name|s
return|;
comment|/**********************      // Knuth, Thomas Wang, http://www.concentric.net/~Ttwang/tech/inthash.htm      // This magic number has no common factors with 2^32, and magic/(2^32) approximates      // the golden ratio.     private static final int magic = (int)2654435761L;      h = magic*val;     s = h& mask;     v=table[s];     if (v==EMPTY || v==val) return s;      // the mult with magic should have thoroughly mixed the bits.     // add entropy to the right half from the left half.     h ^= h>>>16;     s = h& mask;     v=table[s];     if (v==EMPTY || v==val) return s;     *************************/
comment|// linear scan now... ug.
specifier|final
name|int
name|start
init|=
name|s
decl_stmt|;
while|while
condition|(
operator|++
name|s
operator|<
name|tablesize
condition|)
block|{
name|v
operator|=
name|table
index|[
name|s
index|]
expr_stmt|;
if|if
condition|(
name|v
operator|==
name|EMPTY
operator|||
name|v
operator|==
name|val
condition|)
return|return
name|s
return|;
block|}
name|s
operator|=
name|start
expr_stmt|;
while|while
condition|(
operator|--
name|s
operator|>=
literal|0
condition|)
block|{
name|v
operator|=
name|table
index|[
name|s
index|]
expr_stmt|;
if|if
condition|(
name|v
operator|==
name|EMPTY
operator|||
name|v
operator|==
name|val
condition|)
return|return
name|s
return|;
block|}
return|return
name|s
return|;
block|}
comment|/**    *    * @return The number of document ids in the set.    */
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
DECL|method|exists
specifier|public
name|boolean
name|exists
parameter_list|(
name|int
name|docid
parameter_list|)
block|{
name|int
name|v
init|=
name|table
index|[
name|docid
operator|&
name|mask
index|]
decl_stmt|;
if|if
condition|(
name|v
operator|==
name|EMPTY
condition|)
return|return
literal|false
return|;
elseif|else
if|if
condition|(
name|v
operator|==
name|docid
condition|)
return|return
literal|true
return|;
else|else
block|{
name|v
operator|=
name|table
index|[
name|rehash
argument_list|(
name|docid
argument_list|)
index|]
expr_stmt|;
if|if
condition|(
name|v
operator|==
name|docid
condition|)
return|return
literal|true
return|;
else|else
return|return
literal|false
return|;
block|}
block|}
DECL|method|iterator
specifier|public
name|DocIterator
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|DocIterator
argument_list|()
block|{
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|int
name|doc
decl_stmt|;
block|{
name|goNext
parameter_list|()
constructor_decl|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|pos
operator|<
name|tablesize
return|;
block|}
specifier|public
name|Integer
name|next
parameter_list|()
block|{
return|return
name|nextDoc
argument_list|()
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{       }
name|void
name|goNext
parameter_list|()
block|{
while|while
condition|(
name|pos
operator|<
name|tablesize
operator|&&
name|table
index|[
name|pos
index|]
operator|==
name|EMPTY
condition|)
name|pos
operator|++
expr_stmt|;
block|}
comment|// modify to return -1 at end of iteration?
specifier|public
name|int
name|nextDoc
parameter_list|()
block|{
name|int
name|doc
init|=
name|table
index|[
name|pos
index|]
decl_stmt|;
name|pos
operator|++
expr_stmt|;
name|goNext
argument_list|()
expr_stmt|;
return|return
name|doc
return|;
block|}
specifier|public
name|float
name|score
parameter_list|()
block|{
return|return
literal|0.0f
return|;
block|}
block|}
return|;
block|}
DECL|method|memSize
specifier|public
name|long
name|memSize
parameter_list|()
block|{
return|return
operator|(
name|tablesize
operator|<<
literal|2
operator|)
operator|+
literal|20
return|;
block|}
DECL|method|intersection
specifier|public
name|DocSet
name|intersection
parameter_list|(
name|DocSet
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|HashDocSet
condition|)
block|{
comment|// set "a" to the smallest doc set for the most efficient
comment|// intersection.
specifier|final
name|HashDocSet
name|a
init|=
name|size
argument_list|()
operator|<=
name|other
operator|.
name|size
argument_list|()
condition|?
name|this
else|:
operator|(
name|HashDocSet
operator|)
name|other
decl_stmt|;
specifier|final
name|HashDocSet
name|b
init|=
name|size
argument_list|()
operator|<=
name|other
operator|.
name|size
argument_list|()
condition|?
operator|(
name|HashDocSet
operator|)
name|other
else|:
name|this
decl_stmt|;
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
name|a
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|resultCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|table
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|id
init|=
name|a
operator|.
name|table
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|id
operator|>=
literal|0
operator|&&
name|b
operator|.
name|exists
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|result
index|[
name|resultCount
operator|++
index|]
operator|=
name|id
expr_stmt|;
block|}
block|}
return|return
operator|new
name|HashDocSet
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|resultCount
argument_list|)
return|;
block|}
else|else
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|resultCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|table
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|id
init|=
name|table
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|id
operator|>=
literal|0
operator|&&
name|other
operator|.
name|exists
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|result
index|[
name|resultCount
operator|++
index|]
operator|=
name|id
expr_stmt|;
block|}
block|}
return|return
operator|new
name|HashDocSet
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
name|resultCount
argument_list|)
return|;
block|}
block|}
DECL|method|intersectionSize
specifier|public
name|int
name|intersectionSize
parameter_list|(
name|DocSet
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|HashDocSet
condition|)
block|{
comment|// set "a" to the smallest doc set for the most efficient
comment|// intersection.
specifier|final
name|HashDocSet
name|a
init|=
name|size
argument_list|()
operator|<=
name|other
operator|.
name|size
argument_list|()
condition|?
name|this
else|:
operator|(
name|HashDocSet
operator|)
name|other
decl_stmt|;
specifier|final
name|HashDocSet
name|b
init|=
name|size
argument_list|()
operator|<=
name|other
operator|.
name|size
argument_list|()
condition|?
operator|(
name|HashDocSet
operator|)
name|other
else|:
name|this
decl_stmt|;
name|int
name|resultCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|table
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|id
init|=
name|a
operator|.
name|table
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|id
operator|>=
literal|0
operator|&&
name|b
operator|.
name|exists
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|resultCount
operator|++
expr_stmt|;
block|}
block|}
return|return
name|resultCount
return|;
block|}
else|else
block|{
name|int
name|resultCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|table
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|id
init|=
name|table
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|id
operator|>=
literal|0
operator|&&
name|other
operator|.
name|exists
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|resultCount
operator|++
expr_stmt|;
block|}
block|}
return|return
name|resultCount
return|;
block|}
block|}
block|}
end_class
end_unit
