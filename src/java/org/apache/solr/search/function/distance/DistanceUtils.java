begin_unit
begin_package
DECL|package|org.apache.solr.search.function.distance
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|function
operator|.
name|distance
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Useful distance utiltities  *  **/
end_comment
begin_class
DECL|class|DistanceUtils
specifier|public
class|class
name|DistanceUtils
block|{
comment|/**    * @see org.apache.solr.search.function.distance.HaversineFunction    *     * @param x1 The x coordinate of the first point    * @param y1 The y coordinate of the first point    * @param x2 The x coordinate of the second point    * @param y2 The y coordinate of the second point    * @param radius The radius of the sphere    * @return The distance between the two points, as determined by the Haversine formula.    */
DECL|method|haversine
specifier|public
specifier|static
name|double
name|haversine
parameter_list|(
name|double
name|x1
parameter_list|,
name|double
name|y1
parameter_list|,
name|double
name|x2
parameter_list|,
name|double
name|y2
parameter_list|,
name|double
name|radius
parameter_list|)
block|{
name|double
name|result
init|=
literal|0
decl_stmt|;
comment|//make sure they aren't all the same, as then we can just return 0
if|if
condition|(
operator|(
name|x1
operator|!=
name|x2
operator|)
operator|||
operator|(
name|y1
operator|!=
name|y2
operator|)
condition|)
block|{
name|double
name|diffX
init|=
name|x1
operator|-
name|x2
decl_stmt|;
name|double
name|diffY
init|=
name|y1
operator|-
name|y2
decl_stmt|;
name|double
name|hsinX
init|=
name|Math
operator|.
name|sin
argument_list|(
name|diffX
operator|*
literal|0.5
argument_list|)
decl_stmt|;
name|double
name|hsinY
init|=
name|Math
operator|.
name|sin
argument_list|(
name|diffY
operator|*
literal|0.5
argument_list|)
decl_stmt|;
name|double
name|h
init|=
name|hsinX
operator|*
name|hsinX
operator|+
operator|(
name|Math
operator|.
name|cos
argument_list|(
name|x1
argument_list|)
operator|*
name|Math
operator|.
name|cos
argument_list|(
name|x2
argument_list|)
operator|*
name|hsinY
operator|*
name|hsinY
operator|)
decl_stmt|;
name|result
operator|=
operator|(
name|radius
operator|*
literal|2
operator|*
name|Math
operator|.
name|atan2
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|h
argument_list|)
argument_list|,
name|Math
operator|.
name|sqrt
argument_list|(
literal|1
operator|-
name|h
argument_list|)
argument_list|)
operator|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class
end_unit
