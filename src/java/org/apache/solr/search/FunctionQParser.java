begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|function
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_class
DECL|class|FunctionQParser
specifier|public
class|class
name|FunctionQParser
extends|extends
name|QParser
block|{
DECL|method|FunctionQParser
specifier|public
name|FunctionQParser
parameter_list|(
name|String
name|qstr
parameter_list|,
name|SolrParams
name|localParams
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|)
block|{
name|super
argument_list|(
name|qstr
argument_list|,
name|localParams
argument_list|,
name|params
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
DECL|field|sp
name|QueryParsing
operator|.
name|StrParser
name|sp
decl_stmt|;
DECL|method|parse
specifier|public
name|Query
name|parse
parameter_list|()
throws|throws
name|ParseException
block|{
name|sp
operator|=
operator|new
name|QueryParsing
operator|.
name|StrParser
argument_list|(
name|getString
argument_list|()
argument_list|)
expr_stmt|;
name|ValueSource
name|vs
init|=
name|parseValSource
argument_list|()
decl_stmt|;
comment|/***  boost promoted to top-level query type to avoid this hack       // HACK - if this is a boosted query wrapped in a value-source, return     // that boosted query instead of a FunctionQuery     if (vs instanceof QueryValueSource) {       Query q = ((QueryValueSource)vs).getQuery();       if (q instanceof BoostedQuery) return q;     }     ***/
return|return
operator|new
name|FunctionQuery
argument_list|(
name|vs
argument_list|)
return|;
block|}
DECL|class|VSParser
specifier|private
specifier|abstract
specifier|static
class|class
name|VSParser
block|{
DECL|method|parse
specifier|abstract
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|ParseException
function_decl|;
block|}
DECL|field|vsParsers
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|VSParser
argument_list|>
name|vsParsers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|VSParser
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|vsParsers
operator|.
name|put
argument_list|(
literal|"ord"
argument_list|,
operator|new
name|VSParser
argument_list|()
block|{
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|ParseException
block|{
name|String
name|field
init|=
name|fp
operator|.
name|sp
operator|.
name|getId
argument_list|()
decl_stmt|;
return|return
operator|new
name|OrdFieldSource
argument_list|(
name|field
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|vsParsers
operator|.
name|put
argument_list|(
literal|"rord"
argument_list|,
operator|new
name|VSParser
argument_list|()
block|{
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|ParseException
block|{
name|String
name|field
init|=
name|fp
operator|.
name|sp
operator|.
name|getId
argument_list|()
decl_stmt|;
return|return
operator|new
name|ReverseOrdFieldSource
argument_list|(
name|field
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|vsParsers
operator|.
name|put
argument_list|(
literal|"linear"
argument_list|,
operator|new
name|VSParser
argument_list|()
block|{
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|ParseException
block|{
name|ValueSource
name|source
init|=
name|fp
operator|.
name|parseValSource
argument_list|()
decl_stmt|;
name|fp
operator|.
name|sp
operator|.
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|float
name|slope
init|=
name|fp
operator|.
name|sp
operator|.
name|getFloat
argument_list|()
decl_stmt|;
name|fp
operator|.
name|sp
operator|.
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|float
name|intercept
init|=
name|fp
operator|.
name|sp
operator|.
name|getFloat
argument_list|()
decl_stmt|;
return|return
operator|new
name|LinearFloatFunction
argument_list|(
name|source
argument_list|,
name|slope
argument_list|,
name|intercept
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|vsParsers
operator|.
name|put
argument_list|(
literal|"max"
argument_list|,
operator|new
name|VSParser
argument_list|()
block|{
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|ParseException
block|{
name|ValueSource
name|source
init|=
name|fp
operator|.
name|parseValSource
argument_list|()
decl_stmt|;
name|fp
operator|.
name|sp
operator|.
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|float
name|val
init|=
name|fp
operator|.
name|sp
operator|.
name|getFloat
argument_list|()
decl_stmt|;
return|return
operator|new
name|MaxFloatFunction
argument_list|(
name|source
argument_list|,
name|val
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|vsParsers
operator|.
name|put
argument_list|(
literal|"recip"
argument_list|,
operator|new
name|VSParser
argument_list|()
block|{
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|ParseException
block|{
name|ValueSource
name|source
init|=
name|fp
operator|.
name|parseValSource
argument_list|()
decl_stmt|;
name|fp
operator|.
name|sp
operator|.
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|float
name|m
init|=
name|fp
operator|.
name|sp
operator|.
name|getFloat
argument_list|()
decl_stmt|;
name|fp
operator|.
name|sp
operator|.
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|float
name|a
init|=
name|fp
operator|.
name|sp
operator|.
name|getFloat
argument_list|()
decl_stmt|;
name|fp
operator|.
name|sp
operator|.
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|float
name|b
init|=
name|fp
operator|.
name|sp
operator|.
name|getFloat
argument_list|()
decl_stmt|;
return|return
operator|new
name|ReciprocalFloatFunction
argument_list|(
name|source
argument_list|,
name|m
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|vsParsers
operator|.
name|put
argument_list|(
literal|"scale"
argument_list|,
operator|new
name|VSParser
argument_list|()
block|{
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|ParseException
block|{
name|ValueSource
name|source
init|=
name|fp
operator|.
name|parseValSource
argument_list|()
decl_stmt|;
name|fp
operator|.
name|sp
operator|.
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|float
name|min
init|=
name|fp
operator|.
name|sp
operator|.
name|getFloat
argument_list|()
decl_stmt|;
name|fp
operator|.
name|sp
operator|.
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|float
name|max
init|=
name|fp
operator|.
name|sp
operator|.
name|getFloat
argument_list|()
decl_stmt|;
return|return
operator|new
name|ScaleFloatFunction
argument_list|(
name|source
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|vsParsers
operator|.
name|put
argument_list|(
literal|"pow"
argument_list|,
operator|new
name|VSParser
argument_list|()
block|{
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|ParseException
block|{
name|ValueSource
name|a
init|=
name|fp
operator|.
name|parseValSource
argument_list|()
decl_stmt|;
name|fp
operator|.
name|sp
operator|.
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|ValueSource
name|b
init|=
name|fp
operator|.
name|parseValSource
argument_list|()
decl_stmt|;
return|return
operator|new
name|PowFloatFunction
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|vsParsers
operator|.
name|put
argument_list|(
literal|"div"
argument_list|,
operator|new
name|VSParser
argument_list|()
block|{
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|ParseException
block|{
name|ValueSource
name|a
init|=
name|fp
operator|.
name|parseValSource
argument_list|()
decl_stmt|;
name|fp
operator|.
name|sp
operator|.
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|ValueSource
name|b
init|=
name|fp
operator|.
name|parseValSource
argument_list|()
decl_stmt|;
return|return
operator|new
name|DivFloatFunction
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|vsParsers
operator|.
name|put
argument_list|(
literal|"map"
argument_list|,
operator|new
name|VSParser
argument_list|()
block|{
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|ParseException
block|{
name|ValueSource
name|source
init|=
name|fp
operator|.
name|parseValSource
argument_list|()
decl_stmt|;
name|fp
operator|.
name|sp
operator|.
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|float
name|min
init|=
name|fp
operator|.
name|sp
operator|.
name|getFloat
argument_list|()
decl_stmt|;
name|fp
operator|.
name|sp
operator|.
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|float
name|max
init|=
name|fp
operator|.
name|sp
operator|.
name|getFloat
argument_list|()
decl_stmt|;
name|fp
operator|.
name|sp
operator|.
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|float
name|target
init|=
name|fp
operator|.
name|sp
operator|.
name|getFloat
argument_list|()
decl_stmt|;
return|return
operator|new
name|RangeMapFloatFunction
argument_list|(
name|source
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|target
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|vsParsers
operator|.
name|put
argument_list|(
literal|"sqrt"
argument_list|,
operator|new
name|VSParser
argument_list|()
block|{
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|ParseException
block|{
name|ValueSource
name|source
init|=
name|fp
operator|.
name|parseValSource
argument_list|()
decl_stmt|;
return|return
operator|new
name|SimpleFloatFunction
argument_list|(
name|source
argument_list|)
block|{
specifier|protected
name|String
name|name
parameter_list|()
block|{
return|return
literal|"sqrt"
return|;
block|}
specifier|protected
name|float
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|DocValues
name|vals
parameter_list|)
block|{
return|return
operator|(
name|float
operator|)
name|Math
operator|.
name|sqrt
argument_list|(
name|vals
operator|.
name|floatVal
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|vsParsers
operator|.
name|put
argument_list|(
literal|"log"
argument_list|,
operator|new
name|VSParser
argument_list|()
block|{
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|ParseException
block|{
name|ValueSource
name|source
init|=
name|fp
operator|.
name|parseValSource
argument_list|()
decl_stmt|;
return|return
operator|new
name|SimpleFloatFunction
argument_list|(
name|source
argument_list|)
block|{
specifier|protected
name|String
name|name
parameter_list|()
block|{
return|return
literal|"log"
return|;
block|}
specifier|protected
name|float
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|DocValues
name|vals
parameter_list|)
block|{
return|return
operator|(
name|float
operator|)
name|Math
operator|.
name|log10
argument_list|(
name|vals
operator|.
name|floatVal
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|vsParsers
operator|.
name|put
argument_list|(
literal|"abs"
argument_list|,
operator|new
name|VSParser
argument_list|()
block|{
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|ParseException
block|{
name|ValueSource
name|source
init|=
name|fp
operator|.
name|parseValSource
argument_list|()
decl_stmt|;
return|return
operator|new
name|SimpleFloatFunction
argument_list|(
name|source
argument_list|)
block|{
specifier|protected
name|String
name|name
parameter_list|()
block|{
return|return
literal|"abs"
return|;
block|}
specifier|protected
name|float
name|func
parameter_list|(
name|int
name|doc
parameter_list|,
name|DocValues
name|vals
parameter_list|)
block|{
return|return
operator|(
name|float
operator|)
name|Math
operator|.
name|abs
argument_list|(
name|vals
operator|.
name|floatVal
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|vsParsers
operator|.
name|put
argument_list|(
literal|"sum"
argument_list|,
operator|new
name|VSParser
argument_list|()
block|{
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|ParseException
block|{
name|List
argument_list|<
name|ValueSource
argument_list|>
name|sources
init|=
name|fp
operator|.
name|parseValueSourceList
argument_list|()
decl_stmt|;
return|return
operator|new
name|SumFloatFunction
argument_list|(
name|sources
operator|.
name|toArray
argument_list|(
operator|new
name|ValueSource
index|[
name|sources
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|vsParsers
operator|.
name|put
argument_list|(
literal|"product"
argument_list|,
operator|new
name|VSParser
argument_list|()
block|{
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|ParseException
block|{
name|List
argument_list|<
name|ValueSource
argument_list|>
name|sources
init|=
name|fp
operator|.
name|parseValueSourceList
argument_list|()
decl_stmt|;
return|return
operator|new
name|ProductFloatFunction
argument_list|(
name|sources
operator|.
name|toArray
argument_list|(
operator|new
name|ValueSource
index|[
name|sources
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|vsParsers
operator|.
name|put
argument_list|(
literal|"query"
argument_list|,
operator|new
name|VSParser
argument_list|()
block|{
comment|// boost(query($q),rating)
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|ParseException
block|{
name|Query
name|q
init|=
name|fp
operator|.
name|getNestedQuery
argument_list|()
decl_stmt|;
name|float
name|defVal
init|=
literal|0.0f
decl_stmt|;
if|if
condition|(
name|fp
operator|.
name|sp
operator|.
name|opt
argument_list|(
literal|","
argument_list|)
condition|)
block|{
name|defVal
operator|=
name|fp
operator|.
name|sp
operator|.
name|getFloat
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|QueryValueSource
argument_list|(
name|q
argument_list|,
name|defVal
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|vsParsers
operator|.
name|put
argument_list|(
literal|"boost"
argument_list|,
operator|new
name|VSParser
argument_list|()
block|{
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|ParseException
block|{
name|Query
name|q
init|=
name|fp
operator|.
name|getNestedQuery
argument_list|()
decl_stmt|;
name|fp
operator|.
name|sp
operator|.
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|ValueSource
name|vs
init|=
name|fp
operator|.
name|parseValSource
argument_list|()
decl_stmt|;
name|BoostedQuery
name|bq
init|=
operator|new
name|BoostedQuery
argument_list|(
name|q
argument_list|,
name|vs
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Constructed Boostedquery "
operator|+
name|bq
argument_list|)
expr_stmt|;
return|return
operator|new
name|QueryValueSource
argument_list|(
name|bq
argument_list|,
literal|0.0f
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|parseValueSourceList
specifier|private
name|List
argument_list|<
name|ValueSource
argument_list|>
name|parseValueSourceList
parameter_list|()
throws|throws
name|ParseException
block|{
name|List
argument_list|<
name|ValueSource
argument_list|>
name|sources
init|=
operator|new
name|ArrayList
argument_list|<
name|ValueSource
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|sources
operator|.
name|add
argument_list|(
name|parseValSource
argument_list|()
argument_list|)
expr_stmt|;
name|char
name|ch
init|=
name|sp
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|')'
condition|)
break|break;
name|sp
operator|.
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
return|return
name|sources
return|;
block|}
DECL|method|parseValSource
specifier|private
name|ValueSource
name|parseValSource
parameter_list|()
throws|throws
name|ParseException
block|{
name|int
name|ch
init|=
name|sp
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|ch
operator|>=
literal|'0'
operator|&&
name|ch
operator|<=
literal|'9'
operator|||
name|ch
operator|==
literal|'.'
operator|||
name|ch
operator|==
literal|'+'
operator|||
name|ch
operator|==
literal|'-'
condition|)
block|{
return|return
operator|new
name|ConstValueSource
argument_list|(
name|sp
operator|.
name|getFloat
argument_list|()
argument_list|)
return|;
block|}
name|String
name|id
init|=
name|sp
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sp
operator|.
name|opt
argument_list|(
literal|"("
argument_list|)
condition|)
block|{
comment|// a function... look it up.
name|VSParser
name|argParser
init|=
name|vsParsers
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|argParser
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Unknown function "
operator|+
name|id
operator|+
literal|" in FunctionQuery("
operator|+
name|sp
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|ValueSource
name|vs
init|=
name|argParser
operator|.
name|parse
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|sp
operator|.
name|expect
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|vs
return|;
block|}
name|SchemaField
name|f
init|=
name|req
operator|.
name|getSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|id
argument_list|)
decl_stmt|;
return|return
name|f
operator|.
name|getType
argument_list|()
operator|.
name|getValueSource
argument_list|(
name|f
argument_list|,
name|this
argument_list|)
return|;
block|}
DECL|method|getNestedQuery
specifier|private
name|Query
name|getNestedQuery
parameter_list|()
throws|throws
name|ParseException
block|{
if|if
condition|(
name|sp
operator|.
name|opt
argument_list|(
literal|"$"
argument_list|)
condition|)
block|{
name|String
name|param
init|=
name|sp
operator|.
name|getId
argument_list|()
decl_stmt|;
name|sp
operator|.
name|pos
operator|+=
name|param
operator|.
name|length
argument_list|()
expr_stmt|;
name|String
name|qstr
init|=
name|getParam
argument_list|(
name|param
argument_list|)
decl_stmt|;
name|qstr
operator|=
name|qstr
operator|==
literal|null
condition|?
literal|""
else|:
name|qstr
expr_stmt|;
return|return
name|subQuery
argument_list|(
name|qstr
argument_list|,
literal|null
argument_list|)
operator|.
name|parse
argument_list|()
return|;
block|}
name|int
name|start
init|=
name|sp
operator|.
name|pos
decl_stmt|;
name|int
name|end
init|=
name|sp
operator|.
name|pos
decl_stmt|;
name|String
name|v
init|=
name|sp
operator|.
name|val
decl_stmt|;
name|String
name|qs
init|=
name|v
operator|.
name|substring
argument_list|(
name|start
argument_list|)
decl_stmt|;
name|HashMap
name|nestedLocalParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|end
operator|=
name|QueryParsing
operator|.
name|parseLocalParams
argument_list|(
name|qs
argument_list|,
name|start
argument_list|,
name|nestedLocalParams
argument_list|,
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
name|QParser
name|sub
decl_stmt|;
if|if
condition|(
name|end
operator|>
name|start
condition|)
block|{
if|if
condition|(
name|nestedLocalParams
operator|.
name|get
argument_list|(
name|QueryParsing
operator|.
name|V
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// value specified directly in local params... so the end of the
comment|// query should be the end of the local params.
name|sub
operator|=
name|subQuery
argument_list|(
name|qs
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|end
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// value here is *after* the local params... ask the parser.
name|sub
operator|=
name|subQuery
argument_list|(
name|qs
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// int subEnd = sub.findEnd(')');
comment|// TODO.. implement functions to find the end of a nested query
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Nested local params must have value in v parameter.  got '"
operator|+
name|qs
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Nested function query must use $param or<!v=value> forms. got '"
operator|+
name|qs
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|sp
operator|.
name|pos
operator|+=
name|end
operator|-
name|start
expr_stmt|;
comment|// advance past nested query
return|return
name|sub
operator|.
name|getQuery
argument_list|()
return|;
block|}
block|}
end_class
end_unit
