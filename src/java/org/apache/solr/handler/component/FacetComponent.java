begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SimpleFacets
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|OpenBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|QueryParsing
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|ParseException
import|;
end_import
begin_comment
comment|/**  * TODO!  *   * @version $Id$  * @since solr 1.3  */
end_comment
begin_class
DECL|class|FacetComponent
specifier|public
class|class
name|FacetComponent
extends|extends
name|SearchComponent
block|{
DECL|field|COMPONENT_NAME
specifier|public
specifier|static
specifier|final
name|String
name|COMPONENT_NAME
init|=
literal|"facet"
decl_stmt|;
annotation|@
name|Override
DECL|method|prepare
specifier|public
name|void
name|prepare
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
name|FacetParams
operator|.
name|FACET
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|rb
operator|.
name|setNeedDocSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rb
operator|.
name|doFacets
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**    * Actually run the query    * @param rb    */
annotation|@
name|Override
DECL|method|process
specifier|public
name|void
name|process
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rb
operator|.
name|doFacets
condition|)
block|{
name|SolrParams
name|params
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|SimpleFacets
name|f
init|=
operator|new
name|SimpleFacets
argument_list|(
name|rb
operator|.
name|req
argument_list|,
name|rb
operator|.
name|getResults
argument_list|()
operator|.
name|docSet
argument_list|,
name|params
argument_list|)
decl_stmt|;
comment|// TODO ???? add this directly to the response, or to the builder?
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"facet_counts"
argument_list|,
name|f
operator|.
name|getFacetCounts
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|distributedProcess
specifier|public
name|int
name|distributedProcess
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|rb
operator|.
name|doFacets
condition|)
block|{
return|return
name|ResponseBuilder
operator|.
name|STAGE_DONE
return|;
block|}
if|if
condition|(
name|rb
operator|.
name|stage
operator|==
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
condition|)
block|{
comment|// overlap facet refinement requests (those shards that we need a count for
comment|// particular facet values from), where possible, with
comment|// the requests to get fields (because we know that is the
comment|// only other required phase).
comment|// We do this in distributedProcess so we can look at all of the
comment|// requests in the outgoing queue at once.
for|for
control|(
name|int
name|shardNum
init|=
literal|0
init|;
name|shardNum
operator|<
name|rb
operator|.
name|shards
operator|.
name|length
condition|;
name|shardNum
operator|++
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fqueries
init|=
name|rb
operator|.
name|_facetInfo
operator|.
name|_toRefine
index|[
name|shardNum
index|]
decl_stmt|;
if|if
condition|(
name|fqueries
operator|==
literal|null
operator|||
name|fqueries
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
name|String
name|shard
init|=
name|rb
operator|.
name|shards
index|[
name|shardNum
index|]
decl_stmt|;
name|ShardRequest
name|refine
init|=
literal|null
decl_stmt|;
name|boolean
name|newRequest
init|=
literal|false
decl_stmt|;
comment|// try to find a request that is already going out to that shard.
comment|// If nshards becomes to great, we way want to move to hashing for better
comment|// scalability.
for|for
control|(
name|ShardRequest
name|sreq
range|:
name|rb
operator|.
name|outgoing
control|)
block|{
if|if
condition|(
operator|(
name|sreq
operator|.
name|purpose
operator|&
name|ShardRequest
operator|.
name|PURPOSE_GET_FIELDS
operator|)
operator|!=
literal|0
operator|&&
name|sreq
operator|.
name|shards
operator|!=
literal|null
operator|&&
name|sreq
operator|.
name|shards
operator|.
name|length
operator|==
literal|1
operator|&&
name|sreq
operator|.
name|shards
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|shard
argument_list|)
condition|)
block|{
name|refine
operator|=
name|sreq
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|refine
operator|==
literal|null
condition|)
block|{
comment|// we didn't find any other suitable requests going out to that shard, so
comment|// create one ourselves.
name|newRequest
operator|=
literal|true
expr_stmt|;
name|refine
operator|=
operator|new
name|ShardRequest
argument_list|()
expr_stmt|;
name|refine
operator|.
name|shards
operator|=
operator|new
name|String
index|[]
block|{
name|rb
operator|.
name|shards
index|[
name|shardNum
index|]
block|}
expr_stmt|;
name|refine
operator|.
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
comment|// don't request any documents
name|refine
operator|.
name|params
operator|.
name|remove
argument_list|(
name|CommonParams
operator|.
name|START
argument_list|)
expr_stmt|;
name|refine
operator|.
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|ROWS
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
name|refine
operator|.
name|purpose
operator||=
name|ShardRequest
operator|.
name|PURPOSE_REFINE_FACETS
expr_stmt|;
name|refine
operator|.
name|params
operator|.
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|refine
operator|.
name|params
operator|.
name|remove
argument_list|(
name|FacetParams
operator|.
name|FACET_FIELD
argument_list|)
expr_stmt|;
comment|// TODO: perhaps create a more compact facet.terms method?
name|refine
operator|.
name|params
operator|.
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET_QUERY
argument_list|,
name|fqueries
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|fqueries
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|newRequest
condition|)
block|{
name|rb
operator|.
name|addRequest
argument_list|(
name|this
argument_list|,
name|refine
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ResponseBuilder
operator|.
name|STAGE_DONE
return|;
block|}
annotation|@
name|Override
DECL|method|modifyRequest
specifier|public
name|void
name|modifyRequest
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|SearchComponent
name|who
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rb
operator|.
name|doFacets
condition|)
return|return;
if|if
condition|(
operator|(
name|sreq
operator|.
name|purpose
operator|&
name|ShardRequest
operator|.
name|PURPOSE_GET_TOP_IDS
operator|)
operator|!=
literal|0
condition|)
block|{
name|sreq
operator|.
name|purpose
operator||=
name|ShardRequest
operator|.
name|PURPOSE_GET_FACETS
expr_stmt|;
name|FacetInfo
name|fi
init|=
name|rb
operator|.
name|_facetInfo
decl_stmt|;
if|if
condition|(
name|fi
operator|==
literal|null
condition|)
block|{
name|rb
operator|.
name|_facetInfo
operator|=
name|fi
operator|=
operator|new
name|FacetInfo
argument_list|()
expr_stmt|;
name|fi
operator|.
name|parse
argument_list|(
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
argument_list|,
name|rb
argument_list|)
expr_stmt|;
comment|// should already be true...
comment|// sreq.params.set(FacetParams.FACET, FacetParams.FACET_SORT_COUNT_LEGACY);
block|}
name|sreq
operator|.
name|params
operator|.
name|remove
argument_list|(
name|FacetParams
operator|.
name|FACET_MINCOUNT
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|params
operator|.
name|remove
argument_list|(
name|FacetParams
operator|.
name|FACET_OFFSET
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|params
operator|.
name|remove
argument_list|(
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|)
expr_stmt|;
for|for
control|(
name|DistribFieldFacet
name|dff
range|:
name|fi
operator|.
name|facets
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|paramStart
init|=
literal|"f."
operator|+
name|dff
operator|.
name|field
operator|+
literal|'.'
decl_stmt|;
name|sreq
operator|.
name|params
operator|.
name|remove
argument_list|(
name|paramStart
operator|+
name|FacetParams
operator|.
name|FACET_MINCOUNT
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|params
operator|.
name|remove
argument_list|(
name|paramStart
operator|+
name|FacetParams
operator|.
name|FACET_OFFSET
argument_list|)
expr_stmt|;
if|if
condition|(
name|dff
operator|.
name|sort
operator|.
name|equals
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT_COUNT
argument_list|)
operator|&&
name|dff
operator|.
name|limit
operator|>
literal|0
condition|)
block|{
comment|// set the initial limit higher to increase accuracy
name|dff
operator|.
name|initialLimit
operator|=
name|dff
operator|.
name|offset
operator|+
name|dff
operator|.
name|limit
expr_stmt|;
name|dff
operator|.
name|initialLimit
operator|=
call|(
name|int
call|)
argument_list|(
name|dff
operator|.
name|initialLimit
operator|*
literal|1.5
argument_list|)
operator|+
literal|10
expr_stmt|;
block|}
else|else
block|{
name|dff
operator|.
name|initialLimit
operator|=
name|dff
operator|.
name|limit
expr_stmt|;
block|}
comment|// TEST: Uncomment the following line when testing to supress over-requesting facets and
comment|// thus cause more facet refinement queries.
comment|// if (dff.limit> 0) dff.initialLimit = dff.offset + dff.limit;
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|paramStart
operator|+
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
name|dff
operator|.
name|initialLimit
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// turn off faceting on other requests
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
comment|// we could optionally remove faceting params
block|}
block|}
annotation|@
name|Override
DECL|method|handleResponses
specifier|public
name|void
name|handleResponses
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rb
operator|.
name|doFacets
condition|)
return|return;
if|if
condition|(
operator|(
name|sreq
operator|.
name|purpose
operator|&
name|ShardRequest
operator|.
name|PURPOSE_GET_FACETS
operator|)
operator|!=
literal|0
condition|)
block|{
name|countFacets
argument_list|(
name|rb
argument_list|,
name|sreq
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|sreq
operator|.
name|purpose
operator|&
name|ShardRequest
operator|.
name|PURPOSE_REFINE_FACETS
operator|)
operator|!=
literal|0
condition|)
block|{
name|refineFacets
argument_list|(
name|rb
argument_list|,
name|sreq
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|countFacets
specifier|private
name|void
name|countFacets
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|)
block|{
name|FacetInfo
name|fi
init|=
name|rb
operator|.
name|_facetInfo
decl_stmt|;
for|for
control|(
name|ShardResponse
name|srsp
range|:
name|sreq
operator|.
name|responses
control|)
block|{
name|int
name|shardNum
init|=
name|rb
operator|.
name|getShardNum
argument_list|(
name|srsp
operator|.
name|getShard
argument_list|()
argument_list|)
decl_stmt|;
name|NamedList
name|facet_counts
init|=
operator|(
name|NamedList
operator|)
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"facet_counts"
argument_list|)
decl_stmt|;
comment|// handle facet queries
name|NamedList
name|facet_queries
init|=
operator|(
name|NamedList
operator|)
name|facet_counts
operator|.
name|get
argument_list|(
literal|"facet_queries"
argument_list|)
decl_stmt|;
if|if
condition|(
name|facet_queries
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|facet_queries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|facet_q
init|=
operator|(
name|String
operator|)
name|facet_queries
operator|.
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|count
init|=
operator|(
operator|(
name|Number
operator|)
name|facet_queries
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|Long
name|prevCount
init|=
name|fi
operator|.
name|queryFacets
operator|.
name|get
argument_list|(
name|facet_q
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevCount
operator|!=
literal|null
condition|)
name|count
operator|+=
name|prevCount
expr_stmt|;
name|fi
operator|.
name|queryFacets
operator|.
name|put
argument_list|(
name|facet_q
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
comment|// step through each facet.field, adding results from this shard
name|NamedList
name|facet_fields
init|=
operator|(
name|NamedList
operator|)
name|facet_counts
operator|.
name|get
argument_list|(
literal|"facet_fields"
argument_list|)
decl_stmt|;
for|for
control|(
name|DistribFieldFacet
name|dff
range|:
name|fi
operator|.
name|facets
operator|.
name|values
argument_list|()
control|)
block|{
name|dff
operator|.
name|add
argument_list|(
name|shardNum
argument_list|,
operator|(
name|NamedList
operator|)
name|facet_fields
operator|.
name|get
argument_list|(
name|dff
operator|.
name|field
argument_list|)
argument_list|,
name|dff
operator|.
name|initialLimit
argument_list|)
expr_stmt|;
block|}
block|}
comment|//
comment|// This code currently assumes that there will be only a single
comment|// request ((with responses from all shards) sent out to get facets...
comment|// otherwise we would need to wait until all facet responses were received.
comment|//
comment|// list of queries to send each shard
name|List
argument_list|<
name|String
argument_list|>
index|[]
name|toRefine
init|=
operator|new
name|List
index|[
name|rb
operator|.
name|shards
operator|.
name|length
index|]
decl_stmt|;
name|fi
operator|.
name|_toRefine
operator|=
name|toRefine
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toRefine
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|toRefine
index|[
name|i
index|]
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|DistribFieldFacet
name|dff
range|:
name|fi
operator|.
name|facets
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|dff
operator|.
name|limit
operator|<=
literal|0
condition|)
continue|continue;
comment|// no need to check these facets for refinement
if|if
condition|(
name|dff
operator|.
name|minCount
operator|<=
literal|1
operator|&&
operator|(
name|dff
operator|.
name|sort
operator|.
name|equals
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT_LEX
argument_list|)
operator|||
name|dff
operator|.
name|sort
operator|.
name|equals
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT_LEX_LEGACY
argument_list|)
operator|)
condition|)
continue|continue;
name|ShardFacetCount
index|[]
name|counts
init|=
name|dff
operator|.
name|getCountSorted
argument_list|()
decl_stmt|;
name|int
name|ntop
init|=
name|Math
operator|.
name|min
argument_list|(
name|counts
operator|.
name|length
argument_list|,
name|dff
operator|.
name|offset
operator|+
name|dff
operator|.
name|limit
argument_list|)
decl_stmt|;
name|long
name|smallestCount
init|=
name|counts
operator|.
name|length
operator|==
literal|0
condition|?
literal|0
else|:
name|counts
index|[
name|ntop
operator|-
literal|1
index|]
operator|.
name|count
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|counts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ShardFacetCount
name|sfc
init|=
name|counts
index|[
name|i
index|]
decl_stmt|;
name|String
name|query
init|=
literal|null
decl_stmt|;
name|boolean
name|needRefinement
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|ntop
condition|)
block|{
comment|// automatically flag the top values for refinement
name|needRefinement
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// calculate the maximum value that this term may have
comment|// and if it is>= smallestCount, then flag for refinement
name|long
name|maxCount
init|=
name|sfc
operator|.
name|count
decl_stmt|;
for|for
control|(
name|int
name|shardNum
init|=
literal|0
init|;
name|shardNum
operator|<
name|rb
operator|.
name|shards
operator|.
name|length
condition|;
name|shardNum
operator|++
control|)
block|{
name|OpenBitSet
name|obs
init|=
name|dff
operator|.
name|counted
index|[
name|shardNum
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|obs
operator|.
name|get
argument_list|(
name|sfc
operator|.
name|termNum
argument_list|)
condition|)
block|{
comment|// if missing from this shard, add the max it could be
name|maxCount
operator|+=
name|dff
operator|.
name|maxPossible
argument_list|(
name|sfc
argument_list|,
name|shardNum
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|maxCount
operator|>=
name|smallestCount
condition|)
block|{
comment|// TODO: on a tie, we could check the term values
name|needRefinement
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|needRefinement
condition|)
block|{
comment|// add a query for each shard missing the term that needs refinement
for|for
control|(
name|int
name|shardNum
init|=
literal|0
init|;
name|shardNum
operator|<
name|rb
operator|.
name|shards
operator|.
name|length
condition|;
name|shardNum
operator|++
control|)
block|{
name|OpenBitSet
name|obs
init|=
name|dff
operator|.
name|counted
index|[
name|shardNum
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|obs
operator|.
name|get
argument_list|(
name|sfc
operator|.
name|termNum
argument_list|)
operator|&&
name|dff
operator|.
name|maxPossible
argument_list|(
name|sfc
argument_list|,
name|shardNum
argument_list|)
operator|>
literal|0
condition|)
block|{
name|dff
operator|.
name|needRefinements
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
condition|)
name|query
operator|=
name|dff
operator|.
name|makeQuery
argument_list|(
name|sfc
argument_list|)
expr_stmt|;
name|toRefine
index|[
name|shardNum
index|]
operator|.
name|add
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
DECL|method|refineFacets
specifier|private
name|void
name|refineFacets
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|)
block|{
name|FacetInfo
name|fi
init|=
name|rb
operator|.
name|_facetInfo
decl_stmt|;
for|for
control|(
name|ShardResponse
name|srsp
range|:
name|sreq
operator|.
name|responses
control|)
block|{
comment|// int shardNum = rb.getShardNum(srsp.shard);
name|NamedList
name|facet_counts
init|=
operator|(
name|NamedList
operator|)
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"facet_counts"
argument_list|)
decl_stmt|;
name|NamedList
name|facet_queries
init|=
operator|(
name|NamedList
operator|)
name|facet_counts
operator|.
name|get
argument_list|(
literal|"facet_queries"
argument_list|)
decl_stmt|;
comment|// These are single term queries used to fill in missing counts
comment|// for facet.field queries
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|facet_queries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|String
name|facet_q
init|=
operator|(
name|String
operator|)
name|facet_queries
operator|.
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|count
init|=
operator|(
operator|(
name|Number
operator|)
name|facet_queries
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
comment|// expect {!field f=field}value style params
name|SolrParams
name|qparams
init|=
name|QueryParsing
operator|.
name|getLocalParams
argument_list|(
name|facet_q
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|qparams
operator|==
literal|null
condition|)
continue|continue;
comment|// not a refinement
name|String
name|field
init|=
name|qparams
operator|.
name|get
argument_list|(
name|QueryParsing
operator|.
name|F
argument_list|)
decl_stmt|;
name|String
name|val
init|=
name|qparams
operator|.
name|get
argument_list|(
name|QueryParsing
operator|.
name|V
argument_list|)
decl_stmt|;
comment|// Find the right field.facet for this field
name|DistribFieldFacet
name|dff
init|=
name|fi
operator|.
name|facets
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|dff
operator|==
literal|null
condition|)
continue|continue;
comment|// maybe this wasn't for facet count refinement
comment|// Find the right constraint count for this value
name|ShardFacetCount
name|sfc
init|=
name|dff
operator|.
name|counts
operator|.
name|get
argument_list|(
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
name|sfc
operator|==
literal|null
condition|)
block|{
continue|continue;
comment|// Just continue, since other components might have added
comment|// this facet.query for other purposes.  But if there are charset
comment|// issues then the values coming back may not match the values sent.
block|}
comment|// TODO REMOVE
comment|// System.out.println("Got " + facet_q + " , refining count: " + sfc + " += " + count);
name|sfc
operator|.
name|count
operator|+=
name|count
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
comment|// shouldn't happen, so fail for now rather than covering it up
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|finishStage
specifier|public
name|void
name|finishStage
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rb
operator|.
name|doFacets
operator|||
name|rb
operator|.
name|stage
operator|!=
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
condition|)
return|return;
comment|// wait until STAGE_GET_FIELDS
comment|// so that "result" is already stored in the response (for aesthetics)
name|FacetInfo
name|fi
init|=
name|rb
operator|.
name|_facetInfo
decl_stmt|;
name|NamedList
name|facet_counts
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
name|NamedList
name|facet_queries
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
name|facet_counts
operator|.
name|add
argument_list|(
literal|"facet_queries"
argument_list|,
name|facet_queries
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|fi
operator|.
name|queryFacets
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|facet_queries
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|num
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|NamedList
name|facet_fields
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
name|facet_counts
operator|.
name|add
argument_list|(
literal|"facet_fields"
argument_list|,
name|facet_fields
argument_list|)
expr_stmt|;
for|for
control|(
name|DistribFieldFacet
name|dff
range|:
name|fi
operator|.
name|facets
operator|.
name|values
argument_list|()
control|)
block|{
name|NamedList
name|fieldCounts
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
comment|// order is more important for facets
name|facet_fields
operator|.
name|add
argument_list|(
name|dff
operator|.
name|field
argument_list|,
name|fieldCounts
argument_list|)
expr_stmt|;
name|ShardFacetCount
index|[]
name|counts
decl_stmt|;
if|if
condition|(
name|dff
operator|.
name|sort
operator|.
name|equals
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT_COUNT
argument_list|)
operator|||
name|dff
operator|.
name|sort
operator|.
name|equals
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT_COUNT_LEGACY
argument_list|)
condition|)
block|{
name|counts
operator|=
name|dff
operator|.
name|countSorted
expr_stmt|;
if|if
condition|(
name|counts
operator|==
literal|null
operator|||
name|dff
operator|.
name|needRefinements
condition|)
block|{
name|counts
operator|=
name|dff
operator|.
name|getCountSorted
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|dff
operator|.
name|sort
operator|.
name|equals
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT_LEX
argument_list|)
operator|||
name|dff
operator|.
name|sort
operator|.
name|equals
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT_LEX_LEGACY
argument_list|)
condition|)
block|{
name|counts
operator|=
name|dff
operator|.
name|getLexSorted
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: log error or throw exception?
name|counts
operator|=
name|dff
operator|.
name|getLexSorted
argument_list|()
expr_stmt|;
block|}
name|int
name|end
init|=
name|dff
operator|.
name|limit
operator|<
literal|0
condition|?
name|counts
operator|.
name|length
else|:
name|Math
operator|.
name|min
argument_list|(
name|dff
operator|.
name|offset
operator|+
name|dff
operator|.
name|limit
argument_list|,
name|counts
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|dff
operator|.
name|offset
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|counts
index|[
name|i
index|]
operator|.
name|count
operator|<
name|dff
operator|.
name|minCount
condition|)
break|break;
name|fieldCounts
operator|.
name|add
argument_list|(
name|counts
index|[
name|i
index|]
operator|.
name|name
argument_list|,
name|num
argument_list|(
name|counts
index|[
name|i
index|]
operator|.
name|count
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dff
operator|.
name|missing
condition|)
block|{
name|fieldCounts
operator|.
name|add
argument_list|(
literal|null
argument_list|,
name|num
argument_list|(
name|dff
operator|.
name|missingCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO: list facets (sorted by natural order)
comment|// TODO: facet dates
name|facet_counts
operator|.
name|add
argument_list|(
literal|"facet_dates"
argument_list|,
operator|new
name|SimpleOrderedMap
argument_list|()
argument_list|)
expr_stmt|;
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"facet_counts"
argument_list|,
name|facet_counts
argument_list|)
expr_stmt|;
name|rb
operator|.
name|_facetInfo
operator|=
literal|null
expr_stmt|;
comment|// could be big, so release asap
block|}
comment|// use<int> tags for smaller facet counts (better back compatibility)
DECL|method|num
specifier|private
name|Number
name|num
parameter_list|(
name|long
name|val
parameter_list|)
block|{
if|if
condition|(
name|val
operator|<
name|Integer
operator|.
name|MAX_VALUE
condition|)
return|return
operator|(
name|int
operator|)
name|val
return|;
else|else
return|return
name|val
return|;
block|}
DECL|method|num
specifier|private
name|Number
name|num
parameter_list|(
name|Long
name|val
parameter_list|)
block|{
if|if
condition|(
name|val
operator|.
name|longValue
argument_list|()
operator|<
name|Integer
operator|.
name|MAX_VALUE
condition|)
return|return
name|val
operator|.
name|intValue
argument_list|()
return|;
else|else
return|return
name|val
return|;
block|}
comment|/////////////////////////////////////////////
comment|///  SolrInfoMBean
comment|////////////////////////////////////////////
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Handle Faceting"
return|;
block|}
annotation|@
name|Override
DECL|method|getVersion
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
literal|"$Revision$"
return|;
block|}
annotation|@
name|Override
DECL|method|getSourceId
specifier|public
name|String
name|getSourceId
parameter_list|()
block|{
return|return
literal|"$Id$"
return|;
block|}
annotation|@
name|Override
DECL|method|getSource
specifier|public
name|String
name|getSource
parameter_list|()
block|{
return|return
literal|"$URL$"
return|;
block|}
annotation|@
name|Override
DECL|method|getDocs
specifier|public
name|URL
index|[]
name|getDocs
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
end_class
begin_class
DECL|class|FacetInfo
class|class
name|FacetInfo
block|{
DECL|field|_toRefine
name|List
argument_list|<
name|String
argument_list|>
index|[]
name|_toRefine
decl_stmt|;
DECL|method|parse
name|void
name|parse
parameter_list|(
name|SolrParams
name|params
parameter_list|,
name|ResponseBuilder
name|rb
parameter_list|)
block|{
name|queryFacets
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|facets
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|DistribFieldFacet
argument_list|>
argument_list|()
expr_stmt|;
name|String
index|[]
name|facetQs
init|=
name|params
operator|.
name|getParams
argument_list|(
name|FacetParams
operator|.
name|FACET_QUERY
argument_list|)
decl_stmt|;
if|if
condition|(
name|facetQs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|query
range|:
name|facetQs
control|)
block|{
name|queryFacets
operator|.
name|put
argument_list|(
name|query
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
block|}
name|String
index|[]
name|facetFs
init|=
name|params
operator|.
name|getParams
argument_list|(
name|FacetParams
operator|.
name|FACET_FIELD
argument_list|)
decl_stmt|;
if|if
condition|(
name|facetFs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|field
range|:
name|facetFs
control|)
block|{
name|DistribFieldFacet
name|ff
init|=
operator|new
name|DistribFieldFacet
argument_list|(
name|rb
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|ff
operator|.
name|fillParams
argument_list|(
name|params
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|facets
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|ff
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|field|queryFacets
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|queryFacets
decl_stmt|;
DECL|field|facets
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|DistribFieldFacet
argument_list|>
name|facets
decl_stmt|;
block|}
end_class
begin_class
DECL|class|FieldFacet
class|class
name|FieldFacet
block|{
DECL|field|field
name|String
name|field
decl_stmt|;
DECL|field|offset
name|int
name|offset
decl_stmt|;
DECL|field|limit
name|int
name|limit
decl_stmt|;
DECL|field|minCount
name|int
name|minCount
decl_stmt|;
DECL|field|sort
name|String
name|sort
decl_stmt|;
DECL|field|missing
name|boolean
name|missing
decl_stmt|;
DECL|field|prefix
name|String
name|prefix
decl_stmt|;
DECL|field|missingCount
name|long
name|missingCount
decl_stmt|;
DECL|method|fillParams
name|void
name|fillParams
parameter_list|(
name|SolrParams
name|params
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|params
operator|.
name|getFieldInt
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_OFFSET
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|limit
operator|=
name|params
operator|.
name|getFieldInt
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_LIMIT
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Integer
name|mincount
init|=
name|params
operator|.
name|getFieldInt
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_MINCOUNT
argument_list|)
decl_stmt|;
if|if
condition|(
name|mincount
operator|==
literal|null
condition|)
block|{
name|Boolean
name|zeros
init|=
name|params
operator|.
name|getFieldBool
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_ZEROS
argument_list|)
decl_stmt|;
comment|// mincount = (zeros!=null&& zeros) ? 0 : 1;
name|mincount
operator|=
operator|(
name|zeros
operator|!=
literal|null
operator|&&
operator|!
name|zeros
operator|)
condition|?
literal|1
else|:
literal|0
expr_stmt|;
comment|// current default is to include zeros.
block|}
name|this
operator|.
name|minCount
operator|=
name|mincount
expr_stmt|;
name|this
operator|.
name|missing
operator|=
name|params
operator|.
name|getFieldBool
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_MISSING
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// default to sorting by count if there is a limit.
name|this
operator|.
name|sort
operator|=
name|params
operator|.
name|getFieldParam
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_SORT
argument_list|,
name|limit
operator|>
literal|0
condition|?
name|FacetParams
operator|.
name|FACET_SORT_COUNT
else|:
name|FacetParams
operator|.
name|FACET_SORT_LEX
argument_list|)
expr_stmt|;
name|this
operator|.
name|prefix
operator|=
name|params
operator|.
name|getFieldParam
argument_list|(
name|field
argument_list|,
name|FacetParams
operator|.
name|FACET_PREFIX
argument_list|)
expr_stmt|;
block|}
block|}
end_class
begin_class
DECL|class|DistribFieldFacet
class|class
name|DistribFieldFacet
extends|extends
name|FieldFacet
block|{
DECL|field|sf
name|SchemaField
name|sf
decl_stmt|;
comment|// the max possible count for a term appearing on no list
DECL|field|missingMaxPossible
name|long
name|missingMaxPossible
decl_stmt|;
comment|// the max possible count for a missing term for each shard (indexed by shardNum)
DECL|field|missingMax
name|long
index|[]
name|missingMax
decl_stmt|;
DECL|field|counted
name|OpenBitSet
index|[]
name|counted
decl_stmt|;
comment|// a bitset for each shard, keeping track of which terms seen
DECL|field|counts
name|HashMap
argument_list|<
name|String
argument_list|,
name|ShardFacetCount
argument_list|>
name|counts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ShardFacetCount
argument_list|>
argument_list|(
literal|128
argument_list|)
decl_stmt|;
DECL|field|termNum
name|int
name|termNum
decl_stmt|;
DECL|field|queryPrefix
name|String
name|queryPrefix
decl_stmt|;
DECL|field|initialLimit
name|int
name|initialLimit
decl_stmt|;
comment|// how many terms requested in first phase
DECL|field|needRefinements
name|boolean
name|needRefinements
decl_stmt|;
DECL|field|countSorted
name|ShardFacetCount
index|[]
name|countSorted
decl_stmt|;
DECL|method|DistribFieldFacet
name|DistribFieldFacet
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|sf
operator|=
name|rb
operator|.
name|req
operator|.
name|getSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|missingMax
operator|=
operator|new
name|long
index|[
name|rb
operator|.
name|shards
operator|.
name|length
index|]
expr_stmt|;
name|counted
operator|=
operator|new
name|OpenBitSet
index|[
name|rb
operator|.
name|shards
operator|.
name|length
index|]
expr_stmt|;
name|queryPrefix
operator|=
literal|"{!field f="
operator|+
name|field
operator|+
literal|'}'
expr_stmt|;
block|}
DECL|method|add
name|void
name|add
parameter_list|(
name|int
name|shardNum
parameter_list|,
name|NamedList
name|shardCounts
parameter_list|,
name|int
name|numRequested
parameter_list|)
block|{
name|int
name|sz
init|=
name|shardCounts
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numReceived
init|=
name|sz
decl_stmt|;
name|OpenBitSet
name|terms
init|=
operator|new
name|OpenBitSet
argument_list|(
name|termNum
operator|+
name|sz
argument_list|)
decl_stmt|;
name|long
name|last
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|shardCounts
operator|.
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|count
init|=
operator|(
operator|(
name|Number
operator|)
name|shardCounts
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|missingCount
operator|+=
name|count
expr_stmt|;
name|numReceived
operator|--
expr_stmt|;
block|}
else|else
block|{
name|ShardFacetCount
name|sfc
init|=
name|counts
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|sfc
operator|==
literal|null
condition|)
block|{
name|sfc
operator|=
operator|new
name|ShardFacetCount
argument_list|()
expr_stmt|;
name|sfc
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|sfc
operator|.
name|termNum
operator|=
name|termNum
operator|++
expr_stmt|;
name|counts
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|sfc
argument_list|)
expr_stmt|;
block|}
name|sfc
operator|.
name|count
operator|+=
name|count
expr_stmt|;
name|terms
operator|.
name|fastSet
argument_list|(
name|sfc
operator|.
name|termNum
argument_list|)
expr_stmt|;
name|last
operator|=
name|count
expr_stmt|;
block|}
block|}
comment|// the largest possible missing term is 0 if we received less
comment|// than the number requested (provided mincount==0 like it should be for
comment|// a shard request)
if|if
condition|(
name|numRequested
operator|<
literal|0
operator|||
name|numRequested
operator|!=
literal|0
operator|&&
name|numReceived
operator|<
name|numRequested
condition|)
block|{
name|last
operator|=
literal|0
expr_stmt|;
block|}
name|missingMaxPossible
operator|+=
name|last
expr_stmt|;
name|missingMax
index|[
name|shardNum
index|]
operator|=
name|last
expr_stmt|;
name|counted
index|[
name|shardNum
index|]
operator|=
name|terms
expr_stmt|;
block|}
DECL|method|getLexSorted
name|ShardFacetCount
index|[]
name|getLexSorted
parameter_list|()
block|{
name|ShardFacetCount
index|[]
name|arr
init|=
name|counts
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|ShardFacetCount
index|[
name|counts
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|arr
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ShardFacetCount
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|ShardFacetCount
name|o1
parameter_list|,
name|ShardFacetCount
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|name
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|name
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|countSorted
operator|=
name|arr
expr_stmt|;
return|return
name|arr
return|;
block|}
DECL|method|getCountSorted
name|ShardFacetCount
index|[]
name|getCountSorted
parameter_list|()
block|{
name|ShardFacetCount
index|[]
name|arr
init|=
name|counts
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|ShardFacetCount
index|[
name|counts
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|arr
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ShardFacetCount
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|ShardFacetCount
name|o1
parameter_list|,
name|ShardFacetCount
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o2
operator|.
name|count
operator|<
name|o1
operator|.
name|count
condition|)
return|return
operator|-
literal|1
return|;
elseif|else
if|if
condition|(
name|o1
operator|.
name|count
operator|<
name|o2
operator|.
name|count
condition|)
return|return
literal|1
return|;
comment|// TODO: handle tiebreaks for types other than strings
return|return
name|o1
operator|.
name|name
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|name
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|countSorted
operator|=
name|arr
expr_stmt|;
return|return
name|arr
return|;
block|}
DECL|method|makeQuery
name|String
name|makeQuery
parameter_list|(
name|ShardFacetCount
name|sfc
parameter_list|)
block|{
return|return
name|queryPrefix
operator|+
name|sfc
operator|.
name|name
return|;
block|}
comment|// returns the max possible value this ShardFacetCount could have for this shard
comment|// (assumes the shard did not report a count for this value)
DECL|method|maxPossible
name|long
name|maxPossible
parameter_list|(
name|ShardFacetCount
name|sfc
parameter_list|,
name|int
name|shardNum
parameter_list|)
block|{
return|return
name|missingMax
index|[
name|shardNum
index|]
return|;
comment|// TODO: could store the last term in the shard to tell if this term
comment|// comes before or after it.  If it comes before, we could subtract 1
block|}
block|}
end_class
begin_class
DECL|class|ShardFacetCount
class|class
name|ShardFacetCount
block|{
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|count
name|long
name|count
decl_stmt|;
DECL|field|termNum
name|int
name|termNum
decl_stmt|;
comment|// term number starting at 0 (used in bit arrays)
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"{term="
operator|+
name|name
operator|+
literal|",termNum="
operator|+
name|termNum
operator|+
literal|",count="
operator|+
name|count
operator|+
literal|"}"
return|;
block|}
block|}
end_class
end_unit
