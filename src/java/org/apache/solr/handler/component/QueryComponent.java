begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Fieldable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ShardParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|SolrPluginUtils
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|Collator
import|;
end_import
begin_comment
comment|/**  * TODO!  *   * @version $Id$  * @since solr 1.3  */
end_comment
begin_class
DECL|class|QueryComponent
specifier|public
class|class
name|QueryComponent
extends|extends
name|SearchComponent
block|{
DECL|field|COMPONENT_NAME
specifier|public
specifier|static
specifier|final
name|String
name|COMPONENT_NAME
init|=
literal|"query"
decl_stmt|;
annotation|@
name|Override
DECL|method|prepare
specifier|public
name|void
name|prepare
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrQueryRequest
name|req
init|=
name|rb
operator|.
name|req
decl_stmt|;
name|SolrQueryResponse
name|rsp
init|=
name|rb
operator|.
name|rsp
decl_stmt|;
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
comment|// Set field flags
name|String
name|fl
init|=
name|params
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|)
decl_stmt|;
name|int
name|fieldFlags
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|fl
operator|!=
literal|null
condition|)
block|{
name|fieldFlags
operator||=
name|SolrPluginUtils
operator|.
name|setReturnFields
argument_list|(
name|fl
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
name|rb
operator|.
name|setFieldFlags
argument_list|(
name|fieldFlags
argument_list|)
expr_stmt|;
name|String
name|defType
init|=
name|params
operator|.
name|get
argument_list|(
name|QueryParsing
operator|.
name|DEFTYPE
argument_list|)
decl_stmt|;
name|defType
operator|=
name|defType
operator|==
literal|null
condition|?
name|OldLuceneQParserPlugin
operator|.
name|NAME
else|:
name|defType
expr_stmt|;
if|if
condition|(
name|rb
operator|.
name|getQueryString
argument_list|()
operator|==
literal|null
condition|)
block|{
name|rb
operator|.
name|setQueryString
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|queryString
init|=
name|params
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryString
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Missing or empty required parameter: q"
argument_list|)
throw|;
block|}
block|}
try|try
block|{
name|QParser
name|parser
init|=
name|QParser
operator|.
name|getParser
argument_list|(
name|rb
operator|.
name|getQueryString
argument_list|()
argument_list|,
name|defType
argument_list|,
name|req
argument_list|)
decl_stmt|;
name|rb
operator|.
name|setQuery
argument_list|(
name|parser
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|rb
operator|.
name|setSortSpec
argument_list|(
name|parser
operator|.
name|getSort
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|rb
operator|.
name|setQparser
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|String
index|[]
name|fqs
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getParams
argument_list|(
name|CommonParams
operator|.
name|FQ
argument_list|)
decl_stmt|;
if|if
condition|(
name|fqs
operator|!=
literal|null
operator|&&
name|fqs
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|List
argument_list|<
name|Query
argument_list|>
name|filters
init|=
name|rb
operator|.
name|getFilters
argument_list|()
decl_stmt|;
if|if
condition|(
name|filters
operator|==
literal|null
condition|)
block|{
name|filters
operator|=
operator|new
name|ArrayList
argument_list|<
name|Query
argument_list|>
argument_list|()
expr_stmt|;
name|rb
operator|.
name|setFilters
argument_list|(
name|filters
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|fq
range|:
name|fqs
control|)
block|{
if|if
condition|(
name|fq
operator|!=
literal|null
operator|&&
name|fq
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|QParser
name|fqp
init|=
name|QParser
operator|.
name|getParser
argument_list|(
name|fq
argument_list|,
literal|null
argument_list|,
name|req
argument_list|)
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
name|fqp
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// TODO: temporary... this should go in a different component.
name|String
name|shards
init|=
name|params
operator|.
name|get
argument_list|(
name|ShardParams
operator|.
name|SHARDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|shards
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|lst
init|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|shards
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|rb
operator|.
name|shards
operator|=
name|lst
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|lst
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Actually run the query    */
annotation|@
name|Override
DECL|method|process
specifier|public
name|void
name|process
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrQueryRequest
name|req
init|=
name|rb
operator|.
name|req
decl_stmt|;
name|SolrQueryResponse
name|rsp
init|=
name|rb
operator|.
name|rsp
decl_stmt|;
name|SolrIndexSearcher
name|searcher
init|=
name|req
operator|.
name|getSearcher
argument_list|()
decl_stmt|;
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
if|if
condition|(
name|rb
operator|.
name|getQueryCommand
argument_list|()
operator|.
name|getOffset
argument_list|()
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"'start' parameter cannot be negative"
argument_list|)
throw|;
block|}
comment|// -1 as flag if not set.
name|long
name|timeAllowed
init|=
operator|(
name|long
operator|)
name|params
operator|.
name|getInt
argument_list|(
name|CommonParams
operator|.
name|TIME_ALLOWED
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// Optional: This could also be implemented by the top-level searcher sending
comment|// a filter that lists the ids... that would be transparent to
comment|// the request handler, but would be more expensive (and would preserve score
comment|// too if desired).
name|String
name|ids
init|=
name|params
operator|.
name|get
argument_list|(
name|ShardParams
operator|.
name|IDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|ids
operator|!=
literal|null
condition|)
block|{
name|SchemaField
name|idField
init|=
name|req
operator|.
name|getSchema
argument_list|()
operator|.
name|getUniqueKeyField
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|idArr
init|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|ids
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
index|[]
name|luceneIds
init|=
operator|new
name|int
index|[
name|idArr
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|docs
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|idArr
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|id
init|=
name|req
operator|.
name|getSearcher
argument_list|()
operator|.
name|getFirstMatch
argument_list|(
operator|new
name|Term
argument_list|(
name|idField
operator|.
name|getName
argument_list|()
argument_list|,
name|idField
operator|.
name|getType
argument_list|()
operator|.
name|toInternal
argument_list|(
name|idArr
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|>=
literal|0
condition|)
name|luceneIds
index|[
name|docs
operator|++
index|]
operator|=
name|id
expr_stmt|;
block|}
name|DocListAndSet
name|res
init|=
operator|new
name|DocListAndSet
argument_list|()
decl_stmt|;
name|res
operator|.
name|docList
operator|=
operator|new
name|DocSlice
argument_list|(
literal|0
argument_list|,
name|docs
argument_list|,
name|luceneIds
argument_list|,
literal|null
argument_list|,
name|docs
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|rb
operator|.
name|isNeedDocSet
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Query
argument_list|>
name|queries
init|=
operator|new
name|ArrayList
argument_list|<
name|Query
argument_list|>
argument_list|()
decl_stmt|;
name|queries
operator|.
name|add
argument_list|(
name|rb
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Query
argument_list|>
name|filters
init|=
name|rb
operator|.
name|getFilters
argument_list|()
decl_stmt|;
if|if
condition|(
name|filters
operator|!=
literal|null
condition|)
name|queries
operator|.
name|addAll
argument_list|(
name|filters
argument_list|)
expr_stmt|;
name|res
operator|.
name|docSet
operator|=
name|searcher
operator|.
name|getDocSet
argument_list|(
name|queries
argument_list|)
expr_stmt|;
block|}
name|rb
operator|.
name|setResults
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"response"
argument_list|,
name|rb
operator|.
name|getResults
argument_list|()
operator|.
name|docList
argument_list|)
expr_stmt|;
return|return;
block|}
name|SolrIndexSearcher
operator|.
name|QueryCommand
name|cmd
init|=
name|rb
operator|.
name|getQueryCommand
argument_list|()
decl_stmt|;
name|cmd
operator|.
name|setTimeAllowed
argument_list|(
name|timeAllowed
argument_list|)
expr_stmt|;
name|SolrIndexSearcher
operator|.
name|QueryResult
name|result
init|=
operator|new
name|SolrIndexSearcher
operator|.
name|QueryResult
argument_list|()
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
name|result
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
name|rb
operator|.
name|setResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"response"
argument_list|,
name|rb
operator|.
name|getResults
argument_list|()
operator|.
name|docList
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|getToLog
argument_list|()
operator|.
name|add
argument_list|(
literal|"hits"
argument_list|,
name|rb
operator|.
name|getResults
argument_list|()
operator|.
name|docList
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|fsv
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
name|ResponseBuilder
operator|.
name|FIELD_SORT_VALUES
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|fsv
condition|)
block|{
name|Sort
name|sort
init|=
name|rb
operator|.
name|getSortSpec
argument_list|()
operator|.
name|getSort
argument_list|()
decl_stmt|;
name|SortField
index|[]
name|sortFields
init|=
name|sort
operator|==
literal|null
condition|?
operator|new
name|SortField
index|[]
block|{
name|SortField
operator|.
name|FIELD_SCORE
block|}
else|:
name|sort
operator|.
name|getSort
argument_list|()
decl_stmt|;
name|ScoreDoc
name|sd
init|=
operator|new
name|ScoreDoc
argument_list|(
literal|0
argument_list|,
literal|1.0f
argument_list|)
decl_stmt|;
comment|// won't work for comparators that look at the score
name|NamedList
name|sortVals
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
comment|// order is important for the sort fields
name|StringFieldable
name|field
init|=
operator|new
name|StringFieldable
argument_list|()
decl_stmt|;
for|for
control|(
name|SortField
name|sortField
range|:
name|sortFields
control|)
block|{
name|int
name|type
init|=
name|sortField
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|SortField
operator|.
name|SCORE
operator|||
name|type
operator|==
name|SortField
operator|.
name|DOC
condition|)
continue|continue;
name|ScoreDocComparator
name|comparator
init|=
literal|null
decl_stmt|;
name|IndexReader
name|reader
init|=
name|searcher
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|String
name|fieldname
init|=
name|sortField
operator|.
name|getField
argument_list|()
decl_stmt|;
name|FieldType
name|ft
init|=
name|fieldname
operator|==
literal|null
condition|?
literal|null
else|:
name|req
operator|.
name|getSchema
argument_list|()
operator|.
name|getFieldTypeNoEx
argument_list|(
name|fieldname
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|SortField
operator|.
name|INT
case|:
name|comparator
operator|=
name|comparatorInt
argument_list|(
name|reader
argument_list|,
name|fieldname
argument_list|)
expr_stmt|;
break|break;
case|case
name|SortField
operator|.
name|FLOAT
case|:
name|comparator
operator|=
name|comparatorFloat
argument_list|(
name|reader
argument_list|,
name|fieldname
argument_list|)
expr_stmt|;
break|break;
case|case
name|SortField
operator|.
name|LONG
case|:
name|comparator
operator|=
name|comparatorLong
argument_list|(
name|reader
argument_list|,
name|fieldname
argument_list|)
expr_stmt|;
break|break;
case|case
name|SortField
operator|.
name|DOUBLE
case|:
name|comparator
operator|=
name|comparatorDouble
argument_list|(
name|reader
argument_list|,
name|fieldname
argument_list|)
expr_stmt|;
break|break;
case|case
name|SortField
operator|.
name|STRING
case|:
if|if
condition|(
name|sortField
operator|.
name|getLocale
argument_list|()
operator|!=
literal|null
condition|)
name|comparator
operator|=
name|comparatorStringLocale
argument_list|(
name|reader
argument_list|,
name|fieldname
argument_list|,
name|sortField
operator|.
name|getLocale
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|comparator
operator|=
name|comparatorString
argument_list|(
name|reader
argument_list|,
name|fieldname
argument_list|)
expr_stmt|;
break|break;
case|case
name|SortField
operator|.
name|CUSTOM
case|:
name|comparator
operator|=
name|sortField
operator|.
name|getFactory
argument_list|()
operator|.
name|newComparator
argument_list|(
name|reader
argument_list|,
name|fieldname
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unknown field type: "
operator|+
name|type
argument_list|)
throw|;
block|}
name|DocList
name|docList
init|=
name|rb
operator|.
name|getResults
argument_list|()
operator|.
name|docList
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|docList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|DocIterator
name|it
init|=
name|rb
operator|.
name|getResults
argument_list|()
operator|.
name|docList
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sd
operator|.
name|doc
operator|=
name|it
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
name|Object
name|val
init|=
name|comparator
operator|.
name|sortValue
argument_list|(
name|sd
argument_list|)
decl_stmt|;
comment|// Sortable float, double, int, long types all just use a string
comment|// comparator. For these, we need to put the type into a readable
comment|// format.  One reason for this is that XML can't represent all
comment|// string values (or even all unicode code points).
comment|// indexedToReadable() should be a no-op and should
comment|// thus be harmless anyway (for all current ways anyway)
if|if
condition|(
name|val
operator|instanceof
name|String
condition|)
block|{
name|field
operator|.
name|val
operator|=
operator|(
name|String
operator|)
name|val
expr_stmt|;
name|val
operator|=
name|ft
operator|.
name|toObject
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
name|vals
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
name|sortVals
operator|.
name|add
argument_list|(
name|fieldname
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
name|rsp
operator|.
name|add
argument_list|(
literal|"sort_values"
argument_list|,
name|sortVals
argument_list|)
expr_stmt|;
block|}
comment|//pre-fetch returned documents
if|if
condition|(
operator|!
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
name|ShardParams
operator|.
name|IS_SHARD
argument_list|,
literal|false
argument_list|)
operator|&&
name|rb
operator|.
name|getResults
argument_list|()
operator|.
name|docList
operator|!=
literal|null
operator|&&
name|rb
operator|.
name|getResults
argument_list|()
operator|.
name|docList
operator|.
name|size
argument_list|()
operator|<=
literal|50
condition|)
block|{
comment|// TODO: this may depend on the highlighter component (or other components?)
name|SolrPluginUtils
operator|.
name|optimizePreFetchDocs
argument_list|(
name|rb
operator|.
name|getResults
argument_list|()
operator|.
name|docList
argument_list|,
name|rb
operator|.
name|getQuery
argument_list|()
argument_list|,
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|distributedProcess
specifier|public
name|int
name|distributedProcess
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rb
operator|.
name|stage
operator|<
name|ResponseBuilder
operator|.
name|STAGE_PARSE_QUERY
condition|)
return|return
name|ResponseBuilder
operator|.
name|STAGE_PARSE_QUERY
return|;
if|if
condition|(
name|rb
operator|.
name|stage
operator|==
name|ResponseBuilder
operator|.
name|STAGE_PARSE_QUERY
condition|)
block|{
name|createDistributedIdf
argument_list|(
name|rb
argument_list|)
expr_stmt|;
return|return
name|ResponseBuilder
operator|.
name|STAGE_EXECUTE_QUERY
return|;
block|}
if|if
condition|(
name|rb
operator|.
name|stage
operator|<
name|ResponseBuilder
operator|.
name|STAGE_EXECUTE_QUERY
condition|)
return|return
name|ResponseBuilder
operator|.
name|STAGE_EXECUTE_QUERY
return|;
if|if
condition|(
name|rb
operator|.
name|stage
operator|==
name|ResponseBuilder
operator|.
name|STAGE_EXECUTE_QUERY
condition|)
block|{
name|createMainQuery
argument_list|(
name|rb
argument_list|)
expr_stmt|;
return|return
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
return|;
block|}
if|if
condition|(
name|rb
operator|.
name|stage
operator|<
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
condition|)
return|return
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
return|;
if|if
condition|(
name|rb
operator|.
name|stage
operator|==
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
condition|)
block|{
name|createRetrieveDocs
argument_list|(
name|rb
argument_list|)
expr_stmt|;
return|return
name|ResponseBuilder
operator|.
name|STAGE_DONE
return|;
block|}
return|return
name|ResponseBuilder
operator|.
name|STAGE_DONE
return|;
block|}
annotation|@
name|Override
DECL|method|handleResponses
specifier|public
name|void
name|handleResponses
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|)
block|{
if|if
condition|(
operator|(
name|sreq
operator|.
name|purpose
operator|&
name|ShardRequest
operator|.
name|PURPOSE_GET_TOP_IDS
operator|)
operator|!=
literal|0
condition|)
block|{
name|mergeIds
argument_list|(
name|rb
argument_list|,
name|sreq
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|(
name|sreq
operator|.
name|purpose
operator|&
name|ShardRequest
operator|.
name|PURPOSE_GET_FIELDS
operator|)
operator|!=
literal|0
condition|)
block|{
name|returnFields
argument_list|(
name|rb
argument_list|,
name|sreq
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
annotation|@
name|Override
DECL|method|finishStage
specifier|public
name|void
name|finishStage
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
if|if
condition|(
name|rb
operator|.
name|stage
operator|==
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
condition|)
block|{
comment|// We may not have been able to retrieve all the docs due to an
comment|// index change.  Remove any null documents.
for|for
control|(
name|Iterator
argument_list|<
name|SolrDocument
argument_list|>
name|iter
init|=
name|rb
operator|.
name|_responseDocs
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|iter
operator|.
name|next
argument_list|()
operator|==
literal|null
condition|)
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
name|rb
operator|.
name|_responseDocs
operator|.
name|setNumFound
argument_list|(
name|rb
operator|.
name|_responseDocs
operator|.
name|getNumFound
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"response"
argument_list|,
name|rb
operator|.
name|_responseDocs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createDistributedIdf
specifier|private
name|void
name|createDistributedIdf
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
comment|// TODO
block|}
DECL|method|createMainQuery
specifier|private
name|void
name|createMainQuery
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
name|ShardRequest
name|sreq
init|=
operator|new
name|ShardRequest
argument_list|()
decl_stmt|;
name|sreq
operator|.
name|purpose
operator|=
name|ShardRequest
operator|.
name|PURPOSE_GET_TOP_IDS
expr_stmt|;
name|sreq
operator|.
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: base on current params or original params?
comment|// don't pass through any shards param
name|sreq
operator|.
name|params
operator|.
name|remove
argument_list|(
name|ShardParams
operator|.
name|SHARDS
argument_list|)
expr_stmt|;
comment|// set the start (offset) to 0 for each shard request so we can properly merge
comment|// results from the start.
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|START
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
comment|// TODO: should we even use the SortSpec?  That's obtained from the QParser, and
comment|// perhaps we shouldn't attempt to parse the query at this level?
comment|// Alternate Idea: instead of specifying all these things at the upper level,
comment|// we could just specify that this is a shard request.
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|ROWS
argument_list|,
name|rb
operator|.
name|getSortSpec
argument_list|()
operator|.
name|getOffset
argument_list|()
operator|+
name|rb
operator|.
name|getSortSpec
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// in this first phase, request only the unique key field
comment|// and any fields needed for merging.
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|ResponseBuilder
operator|.
name|FIELD_SORT_VALUES
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|rb
operator|.
name|getFieldFlags
argument_list|()
operator|&
name|SolrIndexSearcher
operator|.
name|GET_SCORES
operator|)
operator|!=
literal|0
operator|||
name|rb
operator|.
name|getSortSpec
argument_list|()
operator|.
name|includesScore
argument_list|()
condition|)
block|{
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|,
name|rb
operator|.
name|req
operator|.
name|getSchema
argument_list|()
operator|.
name|getUniqueKeyField
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|",score"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|,
name|rb
operator|.
name|req
operator|.
name|getSchema
argument_list|()
operator|.
name|getUniqueKeyField
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rb
operator|.
name|addRequest
argument_list|(
name|this
argument_list|,
name|sreq
argument_list|)
expr_stmt|;
block|}
DECL|method|mergeIds
specifier|private
name|void
name|mergeIds
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|)
block|{
name|SortSpec
name|ss
init|=
name|rb
operator|.
name|getSortSpec
argument_list|()
decl_stmt|;
name|Sort
name|sort
init|=
name|ss
operator|.
name|getSort
argument_list|()
decl_stmt|;
name|SortField
index|[]
name|sortFields
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sort
operator|!=
literal|null
condition|)
name|sortFields
operator|=
name|sort
operator|.
name|getSort
argument_list|()
expr_stmt|;
else|else
block|{
name|sortFields
operator|=
operator|new
name|SortField
index|[]
block|{
name|SortField
operator|.
name|FIELD_SCORE
block|}
expr_stmt|;
block|}
name|SchemaField
name|uniqueKeyField
init|=
name|rb
operator|.
name|req
operator|.
name|getSchema
argument_list|()
operator|.
name|getUniqueKeyField
argument_list|()
decl_stmt|;
comment|// id to shard mapping, to eliminate any accidental dups
name|HashMap
argument_list|<
name|Object
argument_list|,
name|String
argument_list|>
name|uniqueDoc
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Merge the docs via a priority queue so we don't have to sort *all* of the
comment|// documents... we only need to order the top (rows+start)
name|ShardFieldSortedHitQueue
name|queue
init|=
operator|new
name|ShardFieldSortedHitQueue
argument_list|(
name|sortFields
argument_list|,
name|ss
operator|.
name|getOffset
argument_list|()
operator|+
name|ss
operator|.
name|getCount
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|numFound
init|=
literal|0
decl_stmt|;
name|Float
name|maxScore
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ShardResponse
name|srsp
range|:
name|sreq
operator|.
name|responses
control|)
block|{
name|SolrDocumentList
name|docs
init|=
operator|(
name|SolrDocumentList
operator|)
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
decl_stmt|;
comment|// calculate global maxScore and numDocsFound
if|if
condition|(
name|docs
operator|.
name|getMaxScore
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|maxScore
operator|=
name|maxScore
operator|==
literal|null
condition|?
name|docs
operator|.
name|getMaxScore
argument_list|()
else|:
name|Math
operator|.
name|max
argument_list|(
name|maxScore
argument_list|,
name|docs
operator|.
name|getMaxScore
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|numFound
operator|+=
name|docs
operator|.
name|getNumFound
argument_list|()
expr_stmt|;
name|NamedList
name|sortFieldValues
init|=
call|(
name|NamedList
call|)
argument_list|(
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"sort_values"
argument_list|)
argument_list|)
decl_stmt|;
comment|// go through every doc in this response, construct a ShardDoc, and
comment|// put it in the priority queue so it can be ordered.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SolrDocument
name|doc
init|=
name|docs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
name|id
init|=
name|doc
operator|.
name|getFieldValue
argument_list|(
name|uniqueKeyField
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|prevShard
init|=
name|uniqueDoc
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|srsp
operator|.
name|getShard
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevShard
operator|!=
literal|null
condition|)
block|{
comment|// duplicate detected
name|numFound
operator|--
expr_stmt|;
comment|// For now, just always use the first encountered since we can't currently
comment|// remove the previous one added to the priority queue.  If we switched
comment|// to the Java5 PriorityQueue, this would be easier.
continue|continue;
comment|// make which duplicate is used deterministic based on shard
comment|// if (prevShard.compareTo(srsp.shard)>= 0) {
comment|//  TODO: remove previous from priority queue
comment|//  continue;
comment|// }
block|}
name|ShardDoc
name|shardDoc
init|=
operator|new
name|ShardDoc
argument_list|()
decl_stmt|;
name|shardDoc
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|shardDoc
operator|.
name|shard
operator|=
name|srsp
operator|.
name|getShard
argument_list|()
expr_stmt|;
name|shardDoc
operator|.
name|orderInShard
operator|=
name|i
expr_stmt|;
name|Object
name|scoreObj
init|=
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"score"
argument_list|)
decl_stmt|;
if|if
condition|(
name|scoreObj
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|scoreObj
operator|instanceof
name|String
condition|)
block|{
name|shardDoc
operator|.
name|score
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
operator|(
name|String
operator|)
name|scoreObj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|shardDoc
operator|.
name|score
operator|=
operator|(
name|Float
operator|)
name|scoreObj
expr_stmt|;
block|}
block|}
name|shardDoc
operator|.
name|sortFieldValues
operator|=
name|sortFieldValues
expr_stmt|;
name|queue
operator|.
name|insert
argument_list|(
name|shardDoc
argument_list|)
expr_stmt|;
block|}
comment|// end for-each-doc-in-response
block|}
comment|// end for-each-response
comment|// The queue now has 0 -> queuesize docs, where queuesize<= start + rows
comment|// So we want to pop the last documents off the queue to get
comment|// the docs offset -> queuesize
name|int
name|resultSize
init|=
name|queue
operator|.
name|size
argument_list|()
operator|-
name|ss
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|resultSize
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|resultSize
argument_list|)
expr_stmt|;
comment|// there may not be any docs in range
name|Map
argument_list|<
name|Object
argument_list|,
name|ShardDoc
argument_list|>
name|resultIds
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|ShardDoc
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|resultSize
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|ShardDoc
name|shardDoc
init|=
operator|(
name|ShardDoc
operator|)
name|queue
operator|.
name|pop
argument_list|()
decl_stmt|;
name|shardDoc
operator|.
name|positionInResponse
operator|=
name|i
expr_stmt|;
comment|// Need the toString() for correlation with other lists that must
comment|// be strings (like keys in highlighting, explain, etc)
name|resultIds
operator|.
name|put
argument_list|(
name|shardDoc
operator|.
name|id
operator|.
name|toString
argument_list|()
argument_list|,
name|shardDoc
argument_list|)
expr_stmt|;
block|}
name|SolrDocumentList
name|responseDocs
init|=
operator|new
name|SolrDocumentList
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxScore
operator|!=
literal|null
condition|)
name|responseDocs
operator|.
name|setMaxScore
argument_list|(
name|maxScore
argument_list|)
expr_stmt|;
name|responseDocs
operator|.
name|setNumFound
argument_list|(
name|numFound
argument_list|)
expr_stmt|;
name|responseDocs
operator|.
name|setStart
argument_list|(
name|ss
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
comment|// size appropriately
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resultSize
condition|;
name|i
operator|++
control|)
name|responseDocs
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// save these results in a private area so we can access them
comment|// again when retrieving stored fields.
comment|// TODO: use ResponseBuilder (w/ comments) or the request context?
name|rb
operator|.
name|resultIds
operator|=
name|resultIds
expr_stmt|;
name|rb
operator|.
name|_responseDocs
operator|=
name|responseDocs
expr_stmt|;
block|}
DECL|method|createRetrieveDocs
specifier|private
name|void
name|createRetrieveDocs
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
comment|// TODO: in a system with nTiers> 2, we could be passed "ids" here
comment|// unless those requests always go to the final destination shard
comment|// for each shard, collect the documents for that shard.
name|HashMap
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|ShardDoc
argument_list|>
argument_list|>
name|shardMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|ShardDoc
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardDoc
name|sdoc
range|:
name|rb
operator|.
name|resultIds
operator|.
name|values
argument_list|()
control|)
block|{
name|Collection
argument_list|<
name|ShardDoc
argument_list|>
name|shardDocs
init|=
name|shardMap
operator|.
name|get
argument_list|(
name|sdoc
operator|.
name|shard
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardDocs
operator|==
literal|null
condition|)
block|{
name|shardDocs
operator|=
operator|new
name|ArrayList
argument_list|<
name|ShardDoc
argument_list|>
argument_list|()
expr_stmt|;
name|shardMap
operator|.
name|put
argument_list|(
name|sdoc
operator|.
name|shard
argument_list|,
name|shardDocs
argument_list|)
expr_stmt|;
block|}
name|shardDocs
operator|.
name|add
argument_list|(
name|sdoc
argument_list|)
expr_stmt|;
block|}
name|SchemaField
name|uniqueField
init|=
name|rb
operator|.
name|req
operator|.
name|getSchema
argument_list|()
operator|.
name|getUniqueKeyField
argument_list|()
decl_stmt|;
comment|// Now create a request for each shard to retrieve the stored fields
for|for
control|(
name|Collection
argument_list|<
name|ShardDoc
argument_list|>
name|shardDocs
range|:
name|shardMap
operator|.
name|values
argument_list|()
control|)
block|{
name|ShardRequest
name|sreq
init|=
operator|new
name|ShardRequest
argument_list|()
decl_stmt|;
name|sreq
operator|.
name|purpose
operator|=
name|ShardRequest
operator|.
name|PURPOSE_GET_FIELDS
expr_stmt|;
name|sreq
operator|.
name|shards
operator|=
operator|new
name|String
index|[]
block|{
name|shardDocs
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|shard
block|}
expr_stmt|;
name|sreq
operator|.
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
comment|// add original params
name|sreq
operator|.
name|params
operator|.
name|add
argument_list|(
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
comment|// no need for a sort, we already have order
name|sreq
operator|.
name|params
operator|.
name|remove
argument_list|(
name|CommonParams
operator|.
name|SORT
argument_list|)
expr_stmt|;
comment|// we already have the field sort values
name|sreq
operator|.
name|params
operator|.
name|remove
argument_list|(
name|ResponseBuilder
operator|.
name|FIELD_SORT_VALUES
argument_list|)
expr_stmt|;
comment|// make sure that the id is returned for correlation
name|String
name|fl
init|=
name|sreq
operator|.
name|params
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|)
decl_stmt|;
if|if
condition|(
name|fl
operator|!=
literal|null
condition|)
block|{
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|,
name|fl
operator|+
literal|','
operator|+
name|uniqueField
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|shardDocs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ShardDoc
name|shardDoc
range|:
name|shardDocs
control|)
block|{
comment|// TODO: depending on the type, we may need more tha a simple toString()?
name|ids
operator|.
name|add
argument_list|(
name|shardDoc
operator|.
name|id
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sreq
operator|.
name|params
operator|.
name|add
argument_list|(
name|ShardParams
operator|.
name|IDS
argument_list|,
name|StrUtils
operator|.
name|join
argument_list|(
name|ids
argument_list|,
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|rb
operator|.
name|addRequest
argument_list|(
name|this
argument_list|,
name|sreq
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|returnFields
specifier|private
name|void
name|returnFields
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|)
block|{
comment|// Keep in mind that this could also be a shard in a multi-tiered system.
comment|// TODO: if a multi-tiered system, it seems like some requests
comment|// could/should bypass middlemen (like retrieving stored fields)
comment|// TODO: merge fsv to if requested
if|if
condition|(
operator|(
name|sreq
operator|.
name|purpose
operator|&
name|ShardRequest
operator|.
name|PURPOSE_GET_FIELDS
operator|)
operator|!=
literal|0
condition|)
block|{
name|boolean
name|returnScores
init|=
operator|(
name|rb
operator|.
name|getFieldFlags
argument_list|()
operator|&
name|SolrIndexSearcher
operator|.
name|GET_SCORES
operator|)
operator|!=
literal|0
decl_stmt|;
assert|assert
operator|(
name|sreq
operator|.
name|responses
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|ShardResponse
name|srsp
init|=
name|sreq
operator|.
name|responses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SolrDocumentList
name|docs
init|=
operator|(
name|SolrDocumentList
operator|)
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
decl_stmt|;
name|String
name|keyFieldName
init|=
name|rb
operator|.
name|req
operator|.
name|getSchema
argument_list|()
operator|.
name|getUniqueKeyField
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
for|for
control|(
name|SolrDocument
name|doc
range|:
name|docs
control|)
block|{
name|Object
name|id
init|=
name|doc
operator|.
name|getFieldValue
argument_list|(
name|keyFieldName
argument_list|)
decl_stmt|;
name|ShardDoc
name|sdoc
init|=
name|rb
operator|.
name|resultIds
operator|.
name|get
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnScores
operator|&&
name|sdoc
operator|.
name|score
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|setField
argument_list|(
literal|"score"
argument_list|,
name|sdoc
operator|.
name|score
argument_list|)
expr_stmt|;
block|}
name|rb
operator|.
name|_responseDocs
operator|.
name|set
argument_list|(
name|sdoc
operator|.
name|positionInResponse
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/////////////////////////////////////////////
comment|///  Comparators copied from Lucene
comment|/////////////////////////////////////////////
comment|/**    * Returns a comparator for sorting hits according to a field containing integers.    * @param reader  Index to use.    * @param fieldname  Fieldable containg integer values.    * @return  Comparator for sorting hits.    * @throws IOException If an error occurs reading the index.    */
DECL|method|comparatorInt
specifier|static
name|ScoreDocComparator
name|comparatorInt
parameter_list|(
specifier|final
name|IndexReader
name|reader
parameter_list|,
specifier|final
name|String
name|fieldname
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|field
init|=
name|fieldname
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|final
name|int
index|[]
name|fieldOrder
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getInts
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
decl_stmt|;
return|return
operator|new
name|ScoreDocComparator
argument_list|()
block|{
specifier|public
specifier|final
name|int
name|compare
parameter_list|(
specifier|final
name|ScoreDoc
name|i
parameter_list|,
specifier|final
name|ScoreDoc
name|j
parameter_list|)
block|{
specifier|final
name|int
name|fi
init|=
name|fieldOrder
index|[
name|i
operator|.
name|doc
index|]
decl_stmt|;
specifier|final
name|int
name|fj
init|=
name|fieldOrder
index|[
name|j
operator|.
name|doc
index|]
decl_stmt|;
if|if
condition|(
name|fi
operator|<
name|fj
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|fi
operator|>
name|fj
condition|)
return|return
literal|1
return|;
return|return
literal|0
return|;
block|}
specifier|public
name|Comparable
name|sortValue
parameter_list|(
specifier|final
name|ScoreDoc
name|i
parameter_list|)
block|{
return|return
operator|new
name|Integer
argument_list|(
name|fieldOrder
index|[
name|i
operator|.
name|doc
index|]
argument_list|)
return|;
block|}
specifier|public
name|int
name|sortType
parameter_list|()
block|{
return|return
name|SortField
operator|.
name|INT
return|;
block|}
block|}
return|;
block|}
comment|/**    * Returns a comparator for sorting hits according to a field containing integers.    * @param reader  Index to use.    * @param fieldname  Fieldable containg integer values.    * @return  Comparator for sorting hits.    * @throws IOException If an error occurs reading the index.    */
DECL|method|comparatorLong
specifier|static
name|ScoreDocComparator
name|comparatorLong
parameter_list|(
specifier|final
name|IndexReader
name|reader
parameter_list|,
specifier|final
name|String
name|fieldname
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|field
init|=
name|fieldname
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|final
name|long
index|[]
name|fieldOrder
init|=
name|ExtendedFieldCache
operator|.
name|EXT_DEFAULT
operator|.
name|getLongs
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
decl_stmt|;
return|return
operator|new
name|ScoreDocComparator
argument_list|()
block|{
specifier|public
specifier|final
name|int
name|compare
parameter_list|(
specifier|final
name|ScoreDoc
name|i
parameter_list|,
specifier|final
name|ScoreDoc
name|j
parameter_list|)
block|{
specifier|final
name|long
name|li
init|=
name|fieldOrder
index|[
name|i
operator|.
name|doc
index|]
decl_stmt|;
specifier|final
name|long
name|lj
init|=
name|fieldOrder
index|[
name|j
operator|.
name|doc
index|]
decl_stmt|;
if|if
condition|(
name|li
operator|<
name|lj
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|li
operator|>
name|lj
condition|)
return|return
literal|1
return|;
return|return
literal|0
return|;
block|}
specifier|public
name|Comparable
name|sortValue
parameter_list|(
specifier|final
name|ScoreDoc
name|i
parameter_list|)
block|{
return|return
operator|new
name|Long
argument_list|(
name|fieldOrder
index|[
name|i
operator|.
name|doc
index|]
argument_list|)
return|;
block|}
specifier|public
name|int
name|sortType
parameter_list|()
block|{
return|return
name|SortField
operator|.
name|LONG
return|;
block|}
block|}
return|;
block|}
comment|/**    * Returns a comparator for sorting hits according to a field containing floats.    * @param reader  Index to use.    * @param fieldname  Fieldable containg float values.    * @return  Comparator for sorting hits.    * @throws IOException If an error occurs reading the index.    */
DECL|method|comparatorFloat
specifier|static
name|ScoreDocComparator
name|comparatorFloat
parameter_list|(
specifier|final
name|IndexReader
name|reader
parameter_list|,
specifier|final
name|String
name|fieldname
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|field
init|=
name|fieldname
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|final
name|float
index|[]
name|fieldOrder
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getFloats
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
decl_stmt|;
return|return
operator|new
name|ScoreDocComparator
argument_list|()
block|{
specifier|public
specifier|final
name|int
name|compare
parameter_list|(
specifier|final
name|ScoreDoc
name|i
parameter_list|,
specifier|final
name|ScoreDoc
name|j
parameter_list|)
block|{
specifier|final
name|float
name|fi
init|=
name|fieldOrder
index|[
name|i
operator|.
name|doc
index|]
decl_stmt|;
specifier|final
name|float
name|fj
init|=
name|fieldOrder
index|[
name|j
operator|.
name|doc
index|]
decl_stmt|;
if|if
condition|(
name|fi
operator|<
name|fj
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|fi
operator|>
name|fj
condition|)
return|return
literal|1
return|;
return|return
literal|0
return|;
block|}
specifier|public
name|Comparable
name|sortValue
parameter_list|(
specifier|final
name|ScoreDoc
name|i
parameter_list|)
block|{
return|return
operator|new
name|Float
argument_list|(
name|fieldOrder
index|[
name|i
operator|.
name|doc
index|]
argument_list|)
return|;
block|}
specifier|public
name|int
name|sortType
parameter_list|()
block|{
return|return
name|SortField
operator|.
name|FLOAT
return|;
block|}
block|}
return|;
block|}
comment|/**    * Returns a comparator for sorting hits according to a field containing doubles.    * @param reader  Index to use.    * @param fieldname  Fieldable containg float values.    * @return  Comparator for sorting hits.    * @throws IOException If an error occurs reading the index.    */
DECL|method|comparatorDouble
specifier|static
name|ScoreDocComparator
name|comparatorDouble
parameter_list|(
specifier|final
name|IndexReader
name|reader
parameter_list|,
specifier|final
name|String
name|fieldname
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|field
init|=
name|fieldname
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|final
name|double
index|[]
name|fieldOrder
init|=
name|ExtendedFieldCache
operator|.
name|EXT_DEFAULT
operator|.
name|getDoubles
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
decl_stmt|;
return|return
operator|new
name|ScoreDocComparator
argument_list|()
block|{
specifier|public
specifier|final
name|int
name|compare
parameter_list|(
specifier|final
name|ScoreDoc
name|i
parameter_list|,
specifier|final
name|ScoreDoc
name|j
parameter_list|)
block|{
specifier|final
name|double
name|di
init|=
name|fieldOrder
index|[
name|i
operator|.
name|doc
index|]
decl_stmt|;
specifier|final
name|double
name|dj
init|=
name|fieldOrder
index|[
name|j
operator|.
name|doc
index|]
decl_stmt|;
if|if
condition|(
name|di
operator|<
name|dj
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|di
operator|>
name|dj
condition|)
return|return
literal|1
return|;
return|return
literal|0
return|;
block|}
specifier|public
name|Comparable
name|sortValue
parameter_list|(
specifier|final
name|ScoreDoc
name|i
parameter_list|)
block|{
return|return
operator|new
name|Double
argument_list|(
name|fieldOrder
index|[
name|i
operator|.
name|doc
index|]
argument_list|)
return|;
block|}
specifier|public
name|int
name|sortType
parameter_list|()
block|{
return|return
name|SortField
operator|.
name|DOUBLE
return|;
block|}
block|}
return|;
block|}
comment|/**    * Returns a comparator for sorting hits according to a field containing strings.    * @param reader  Index to use.    * @param fieldname  Fieldable containg string values.    * @return  Comparator for sorting hits.    * @throws IOException If an error occurs reading the index.    */
DECL|method|comparatorString
specifier|static
name|ScoreDocComparator
name|comparatorString
parameter_list|(
specifier|final
name|IndexReader
name|reader
parameter_list|,
specifier|final
name|String
name|fieldname
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|field
init|=
name|fieldname
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|final
name|FieldCache
operator|.
name|StringIndex
name|index
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getStringIndex
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
decl_stmt|;
return|return
operator|new
name|ScoreDocComparator
argument_list|()
block|{
specifier|public
specifier|final
name|int
name|compare
parameter_list|(
specifier|final
name|ScoreDoc
name|i
parameter_list|,
specifier|final
name|ScoreDoc
name|j
parameter_list|)
block|{
specifier|final
name|int
name|fi
init|=
name|index
operator|.
name|order
index|[
name|i
operator|.
name|doc
index|]
decl_stmt|;
specifier|final
name|int
name|fj
init|=
name|index
operator|.
name|order
index|[
name|j
operator|.
name|doc
index|]
decl_stmt|;
if|if
condition|(
name|fi
operator|<
name|fj
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|fi
operator|>
name|fj
condition|)
return|return
literal|1
return|;
return|return
literal|0
return|;
block|}
specifier|public
name|Comparable
name|sortValue
parameter_list|(
specifier|final
name|ScoreDoc
name|i
parameter_list|)
block|{
return|return
name|index
operator|.
name|lookup
index|[
name|index
operator|.
name|order
index|[
name|i
operator|.
name|doc
index|]
index|]
return|;
block|}
specifier|public
name|int
name|sortType
parameter_list|()
block|{
return|return
name|SortField
operator|.
name|STRING
return|;
block|}
block|}
return|;
block|}
comment|/**    * Returns a comparator for sorting hits according to a field containing strings.    * @param reader  Index to use.    * @param fieldname  Fieldable containg string values.    * @return  Comparator for sorting hits.    * @throws IOException If an error occurs reading the index.    */
DECL|method|comparatorStringLocale
specifier|static
name|ScoreDocComparator
name|comparatorStringLocale
parameter_list|(
specifier|final
name|IndexReader
name|reader
parameter_list|,
specifier|final
name|String
name|fieldname
parameter_list|,
specifier|final
name|Locale
name|locale
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Collator
name|collator
init|=
name|Collator
operator|.
name|getInstance
argument_list|(
name|locale
argument_list|)
decl_stmt|;
specifier|final
name|String
name|field
init|=
name|fieldname
operator|.
name|intern
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|index
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getStrings
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
decl_stmt|;
return|return
operator|new
name|ScoreDocComparator
argument_list|()
block|{
specifier|public
specifier|final
name|int
name|compare
parameter_list|(
specifier|final
name|ScoreDoc
name|i
parameter_list|,
specifier|final
name|ScoreDoc
name|j
parameter_list|)
block|{
name|String
name|is
init|=
name|index
index|[
name|i
operator|.
name|doc
index|]
decl_stmt|;
name|String
name|js
init|=
name|index
index|[
name|j
operator|.
name|doc
index|]
decl_stmt|;
if|if
condition|(
name|is
operator|==
name|js
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|js
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
name|collator
operator|.
name|compare
argument_list|(
name|is
argument_list|,
name|js
argument_list|)
return|;
block|}
block|}
specifier|public
name|Comparable
name|sortValue
parameter_list|(
specifier|final
name|ScoreDoc
name|i
parameter_list|)
block|{
return|return
name|index
index|[
name|i
operator|.
name|doc
index|]
return|;
block|}
specifier|public
name|int
name|sortType
parameter_list|()
block|{
return|return
name|SortField
operator|.
name|STRING
return|;
block|}
block|}
return|;
block|}
DECL|class|StringFieldable
specifier|static
class|class
name|StringFieldable
implements|implements
name|Fieldable
block|{
DECL|field|val
specifier|public
name|String
name|val
decl_stmt|;
DECL|method|setBoost
specifier|public
name|void
name|setBoost
parameter_list|(
name|float
name|boost
parameter_list|)
block|{     }
DECL|method|getBoost
specifier|public
name|float
name|getBoost
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|stringValue
specifier|public
name|String
name|stringValue
parameter_list|()
block|{
return|return
name|val
return|;
block|}
DECL|method|readerValue
specifier|public
name|Reader
name|readerValue
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|binaryValue
specifier|public
name|byte
index|[]
name|binaryValue
parameter_list|()
block|{
return|return
operator|new
name|byte
index|[
literal|0
index|]
return|;
block|}
DECL|method|tokenStreamValue
specifier|public
name|TokenStream
name|tokenStreamValue
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|isStored
specifier|public
name|boolean
name|isStored
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|isIndexed
specifier|public
name|boolean
name|isIndexed
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|isTokenized
specifier|public
name|boolean
name|isTokenized
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|isCompressed
specifier|public
name|boolean
name|isCompressed
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|isTermVectorStored
specifier|public
name|boolean
name|isTermVectorStored
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|isStoreOffsetWithTermVector
specifier|public
name|boolean
name|isStoreOffsetWithTermVector
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|isStorePositionWithTermVector
specifier|public
name|boolean
name|isStorePositionWithTermVector
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|isBinary
specifier|public
name|boolean
name|isBinary
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|getOmitNorms
specifier|public
name|boolean
name|getOmitNorms
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|setOmitNorms
specifier|public
name|void
name|setOmitNorms
parameter_list|(
name|boolean
name|omitNorms
parameter_list|)
block|{     }
DECL|method|setOmitTf
specifier|public
name|void
name|setOmitTf
parameter_list|(
name|boolean
name|omitTf
parameter_list|)
block|{     }
DECL|method|getOmitTf
specifier|public
name|boolean
name|getOmitTf
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|isLazy
specifier|public
name|boolean
name|isLazy
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|getBinaryOffset
specifier|public
name|int
name|getBinaryOffset
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
DECL|method|getBinaryLength
specifier|public
name|int
name|getBinaryLength
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
DECL|method|getBinaryValue
specifier|public
name|byte
index|[]
name|getBinaryValue
parameter_list|()
block|{
return|return
operator|new
name|byte
index|[
literal|0
index|]
return|;
block|}
DECL|method|getBinaryValue
specifier|public
name|byte
index|[]
name|getBinaryValue
parameter_list|(
name|byte
index|[]
name|result
parameter_list|)
block|{
return|return
operator|new
name|byte
index|[
literal|0
index|]
return|;
block|}
block|}
comment|/////////////////////////////////////////////
comment|///  SolrInfoMBean
comment|////////////////////////////////////////////
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"query"
return|;
block|}
annotation|@
name|Override
DECL|method|getVersion
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
literal|"$Revision$"
return|;
block|}
annotation|@
name|Override
DECL|method|getSourceId
specifier|public
name|String
name|getSourceId
parameter_list|()
block|{
return|return
literal|"$Id$"
return|;
block|}
annotation|@
name|Override
DECL|method|getSource
specifier|public
name|String
name|getSource
parameter_list|()
block|{
return|return
literal|"$URL$"
return|;
block|}
annotation|@
name|Override
DECL|method|getDocs
specifier|public
name|URL
index|[]
name|getDocs
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
end_class
end_unit
