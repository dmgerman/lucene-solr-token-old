begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|RTimer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ResponseBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|SearchComponent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import
begin_comment
comment|/**  *  * Refer SOLR-281  *  */
end_comment
begin_class
DECL|class|SearchHandler
specifier|public
class|class
name|SearchHandler
extends|extends
name|RequestHandlerBase
block|{
DECL|field|RESPONSE_BUILDER_CONTEXT_KEY
specifier|private
specifier|static
specifier|final
name|String
name|RESPONSE_BUILDER_CONTEXT_KEY
init|=
literal|"ResponseBuilder"
decl_stmt|;
DECL|field|log
specifier|protected
specifier|static
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|SearchHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|components
specifier|protected
name|Collection
argument_list|<
name|SearchComponent
argument_list|>
name|components
decl_stmt|;
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|initComponents
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
comment|// TODO: should there be a way to append components from solrconfig w/o having to
comment|// know the complete standard list (which may expand over time?)
DECL|method|initComponents
specifier|protected
name|void
name|initComponents
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Object
name|declaredComponents
init|=
name|args
operator|.
name|get
argument_list|(
literal|"components"
argument_list|)
decl_stmt|;
if|if
condition|(
name|declaredComponents
operator|!=
literal|null
operator|&&
name|declaredComponents
operator|instanceof
name|List
condition|)
block|{
name|List
name|list
init|=
operator|(
name|List
operator|)
name|declaredComponents
decl_stmt|;
name|components
operator|=
operator|new
name|ArrayList
argument_list|<
name|SearchComponent
argument_list|>
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|c
range|:
name|list
control|)
block|{
comment|// TODO: an init() with args for components?
name|SearchComponent
name|comp
init|=
operator|(
name|SearchComponent
operator|)
name|Class
operator|.
name|forName
argument_list|(
operator|(
name|String
operator|)
name|c
argument_list|)
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Adding  component:"
operator|+
name|comp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|getResponseBuilder
specifier|public
specifier|static
name|ResponseBuilder
name|getResponseBuilder
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|)
block|{
return|return
operator|(
name|ResponseBuilder
operator|)
name|req
operator|.
name|getContext
argument_list|()
operator|.
name|get
argument_list|(
name|RESPONSE_BUILDER_CONTEXT_KEY
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|handleRequestBody
specifier|public
name|void
name|handleRequestBody
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
block|{
name|ResponseBuilder
name|builder
init|=
operator|new
name|ResponseBuilder
argument_list|()
decl_stmt|;
name|req
operator|.
name|getContext
argument_list|()
operator|.
name|put
argument_list|(
name|RESPONSE_BUILDER_CONTEXT_KEY
argument_list|,
name|builder
argument_list|)
expr_stmt|;
comment|// The semantics of debugging vs not debugging are different enough that
comment|// it makes sense to have two control loops
if|if
condition|(
operator|!
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
name|CommonParams
operator|.
name|DEBUG_QUERY
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|// Prepare
for|for
control|(
name|SearchComponent
name|c
range|:
name|components
control|)
block|{
name|c
operator|.
name|prepare
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
comment|// Process
for|for
control|(
name|SearchComponent
name|c
range|:
name|components
control|)
block|{
name|c
operator|.
name|process
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|builder
operator|.
name|setDebug
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RTimer
name|timer
init|=
operator|new
name|RTimer
argument_list|()
decl_stmt|;
comment|// Prepare
name|RTimer
name|subt
init|=
name|timer
operator|.
name|sub
argument_list|(
literal|"prepare"
argument_list|)
decl_stmt|;
for|for
control|(
name|SearchComponent
name|c
range|:
name|components
control|)
block|{
name|builder
operator|.
name|setTimer
argument_list|(
name|subt
operator|.
name|sub
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|prepare
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|builder
operator|.
name|getTimer
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|subt
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// Process
name|subt
operator|=
name|timer
operator|.
name|sub
argument_list|(
literal|"process"
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchComponent
name|c
range|:
name|components
control|)
block|{
name|builder
operator|.
name|setTimer
argument_list|(
name|subt
operator|.
name|sub
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|process
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|builder
operator|.
name|getTimer
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|subt
operator|.
name|stop
argument_list|()
expr_stmt|;
name|timer
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// add the timing info
if|if
condition|(
name|builder
operator|.
name|getDebugInfo
argument_list|()
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|setDebugInfo
argument_list|(
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|getDebugInfo
argument_list|()
operator|.
name|add
argument_list|(
literal|"timing"
argument_list|,
name|timer
operator|.
name|asNamedList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//////////////////////// SolrInfoMBeans methods //////////////////////
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Search using components: "
argument_list|)
expr_stmt|;
for|for
control|(
name|SearchComponent
name|c
range|:
name|components
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getVersion
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
literal|"$Revision$"
return|;
block|}
annotation|@
name|Override
DECL|method|getSourceId
specifier|public
name|String
name|getSourceId
parameter_list|()
block|{
return|return
literal|"$Id$"
return|;
block|}
annotation|@
name|Override
DECL|method|getSource
specifier|public
name|String
name|getSource
parameter_list|()
block|{
return|return
literal|"$URL$"
return|;
block|}
block|}
end_class
end_unit
