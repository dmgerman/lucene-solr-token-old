begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|Dictionary
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spell
operator|.
name|SpellChecker
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|HighFrequencyDictionary
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|SolrCoreAware
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import
begin_comment
comment|/**  * Takes a string (e.g. a query string) as the value of the "q" parameter  * and looks up alternative spelling suggestions in the spellchecker.  * The spellchecker used by this handler is the Lucene contrib SpellChecker.  *<style> pre.code {   border: 1pt solid #AEBDCC;   background-color: #F3F5F7;   padding: 5pt;   font-family: courier, monospace;   white-space: pre;   // begin css 3 or browser specific rules - do not remove!   //see: http://forums.techguy.org/archive/index.php/t-249849.html      white-space: pre-wrap;     word-wrap: break-word;     white-space: -moz-pre-wrap;     white-space: -pre-wrap;     white-space: -o-pre-wrap;    // end css 3 or browser specific rules }</style>  *   *<p>The results identifies the original words echoing it as an entry with the   * name of "words" and original word value.  It   * also identifies if the requested "words" is contained in the index through   * the use of the exist true/false name value. Examples of these output   * parameters in the standard output format is as follows:</p>  *<pre class="code">&lt;str name="words"&gt;facial&lt;/str&gt;&lt;str name="exist"&gt;true&lt;/str&gt;</pre>  *   *<p>If a query string parameter of "multiWords" is used, then each word within the  * "q" parameter (seperated by a space or +) will   * be iterated through the spell checker and will be wrapped in an   * NamedList.  Each word will then get its own set of results: words, exists, and  * suggestions.</p>  *   *<p>Examples of the use of the standard ouput (XML) without and with the   * use of the "multiWords" parameter are as follows.</p>  *   *<p> The following URL  * examples were configured with the solr.SpellCheckerRequestHandler   * named as "/spellchecker".</p>  *   *<p>Without the use of "extendedResults" and one word   * spelled correctly: facial</p>  *<pre class="code">http://.../spellchecker?indent=on&onlyMorePopular=true&accuracy=.6&suggestionCount=20&q=facial</pre>  *<pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;response&gt;&lt;lst name="responseHeader"&gt;&lt;int name="status"&gt;0&lt;/int&gt;&lt;int name="QTime"&gt;6&lt;/int&gt;&lt;/lst&gt;&lt;str name="words"&gt;facial&lt;/str&gt;&lt;str name="exist"&gt;true&lt;/str&gt;&lt;arr name="suggestions"&gt;&lt;str&gt;faciale&lt;/str&gt;&lt;str&gt;faucial&lt;/str&gt;&lt;str&gt;fascial&lt;/str&gt;&lt;str&gt;facing&lt;/str&gt;&lt;str&gt;faciei&lt;/str&gt;&lt;str&gt;facialis&lt;/str&gt;&lt;str&gt;social&lt;/str&gt;&lt;str&gt;facile&lt;/str&gt;&lt;str&gt;spacial&lt;/str&gt;&lt;str&gt;glacial&lt;/str&gt;&lt;str&gt;marcial&lt;/str&gt;&lt;str&gt;facies&lt;/str&gt;&lt;str&gt;facio&lt;/str&gt;&lt;/arr&gt;&lt;/response&gt;</pre>  *   *<p>Without the use of "extendedResults" and two words,    * one spelled correctly and one misspelled: facial salophosphoprotein</p>  *<pre class="code">http://.../spellchecker?indent=on&onlyMorePopular=true&accuracy=.6&suggestionCount=20&q=facial+salophosphoprotein</pre>  *<pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;response&gt;&lt;lst name="responseHeader"&gt;&lt;int name="status"&gt;0&lt;/int&gt;&lt;int name="QTime"&gt;18&lt;/int&gt;&lt;/lst&gt;&lt;str name="words"&gt;facial salophosphoprotein&lt;/str&gt;&lt;str name="exist"&gt;false&lt;/str&gt;&lt;arr name="suggestions"&gt;&lt;str&gt;sialophosphoprotein&lt;/str&gt;&lt;/arr&gt;&lt;/response&gt;</pre>  *   *   *<p>With the use of "extendedResults" and two words,    * one spelled correctly and one misspelled: facial salophosphoprotein</p>  *<pre class="code">http://.../spellchecker?indent=on&onlyMorePopular=true&accuracy=.6&suggestionCount=20&extendedResults=true&q=facial+salophosphoprotein</pre>  *<pre class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;response&gt;&lt;lst name="responseHeader"&gt;&lt;int name="status"&gt;0&lt;/int&gt;&lt;int name="QTime"&gt;23&lt;/int&gt;&lt;/lst&gt;&lt;lst name="result"&gt;&lt;lst name="facial"&gt;&lt;int name="frequency"&gt;1&lt;/int&gt;&lt;lst name="suggestions"&gt;&lt;lst name="faciale"&gt;&lt;int name="frequency"&gt;1&lt;/int&gt;&lt;/lst&gt;&lt;lst name="faucial"&gt;&lt;int name="frequency"&gt;1&lt;/int&gt;&lt;/lst&gt;&lt;lst name="fascial"&gt;&lt;int name="frequency"&gt;1&lt;/int&gt;&lt;/lst&gt;&lt;lst name="facing"&gt;&lt;int name="frequency"&gt;1&lt;/int&gt;&lt;/lst&gt;&lt;lst name="faciei"&gt;&lt;int name="frequency"&gt;1&lt;/int&gt;&lt;/lst&gt;&lt;lst name="facialis"&gt;&lt;int name="frequency"&gt;1&lt;/int&gt;&lt;/lst&gt;&lt;lst name="social"&gt;&lt;int name="frequency"&gt;1&lt;/int&gt;&lt;/lst&gt;&lt;lst name="facile"&gt;&lt;int name="frequency"&gt;1&lt;/int&gt;&lt;/lst&gt;&lt;lst name="spacial"&gt;&lt;int name="frequency"&gt;1&lt;/int&gt;&lt;/lst&gt;&lt;lst name="glacial"&gt;&lt;int name="frequency"&gt;1&lt;/int&gt;&lt;/lst&gt;&lt;lst name="marcial"&gt;&lt;int name="frequency"&gt;1&lt;/int&gt;&lt;/lst&gt;&lt;lst name="facies"&gt;&lt;int name="frequency"&gt;1&lt;/int&gt;&lt;/lst&gt;&lt;lst name="facio"&gt;&lt;int name="frequency"&gt;1&lt;/int&gt;&lt;/lst&gt;&lt;/lst&gt;&lt;/lst&gt;&lt;lst name="salophosphoprotein"&gt;&lt;int name="frequency"&gt;0&lt;/int&gt;&lt;lst name="suggestions"&gt;&lt;lst name="sialophosphoprotein"&gt;&lt;int name="frequency"&gt;1&lt;/int&gt;&lt;/lst&gt;&lt;lst name="phosphoprotein"&gt;&lt;int name="frequency"&gt;1&lt;/int&gt;&lt;/lst&gt;&lt;lst name="phosphoproteins"&gt;&lt;int name="frequency"&gt;1&lt;/int&gt;&lt;/lst&gt;&lt;lst name="alphalipoprotein"&gt;&lt;int name="frequency"&gt;1&lt;/int&gt;&lt;/lst&gt;&lt;/lst&gt;&lt;/lst&gt;&lt;/lst&gt;&lt;/response&gt;</pre>   *   * @see<a href="http://wiki.apache.org/jakarta-lucene/SpellChecker">The Lucene Spellchecker documentation</a>  *  *  * @deprecated Use {@link org.apache.solr.handler.component.SpellCheckComponent} instead.  *  * See also https://issues.apache.org/jira/browse/SOLR-474 and https://issues.apache.org/jira/browse/SOLR-485  *  */
end_comment
begin_class
annotation|@
name|Deprecated
DECL|class|SpellCheckerRequestHandler
specifier|public
class|class
name|SpellCheckerRequestHandler
extends|extends
name|RequestHandlerBase
implements|implements
name|SolrCoreAware
block|{
DECL|field|log
specifier|private
specifier|static
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|SpellCheckerRequestHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|spellChecker
specifier|private
name|SpellChecker
name|spellChecker
decl_stmt|;
comment|/*    * From http://wiki.apache.org/jakarta-lucene/SpellChecker    * If reader and restrictToField are both not null:    * 1. The returned words are restricted only to the words presents in the field    * "restrictToField "of the Lucene Index "reader".    *    * 2. The list is also sorted with a second criterium: the popularity (the    * frequence) of the word in the user field.    *    * 3. If "onlyMorePopular" is true and the mispelled word exist in the user field,    * return only the words more frequent than this.    *     */
DECL|field|spellcheckerIndexDir
specifier|protected
name|Directory
name|spellcheckerIndexDir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
DECL|field|dirDescription
specifier|protected
name|String
name|dirDescription
init|=
literal|"(ramdir)"
decl_stmt|;
DECL|field|termSourceField
specifier|protected
name|String
name|termSourceField
decl_stmt|;
DECL|field|PREFIX
specifier|protected
specifier|static
specifier|final
name|String
name|PREFIX
init|=
literal|"sp."
decl_stmt|;
DECL|field|QUERY_PREFIX
specifier|protected
specifier|static
specifier|final
name|String
name|QUERY_PREFIX
init|=
name|PREFIX
operator|+
literal|"query."
decl_stmt|;
DECL|field|DICTIONARY_PREFIX
specifier|protected
specifier|static
specifier|final
name|String
name|DICTIONARY_PREFIX
init|=
name|PREFIX
operator|+
literal|"dictionary."
decl_stmt|;
DECL|field|SOURCE_FIELD
specifier|protected
specifier|static
specifier|final
name|String
name|SOURCE_FIELD
init|=
name|DICTIONARY_PREFIX
operator|+
literal|"termSourceField"
decl_stmt|;
DECL|field|INDEX_DIR
specifier|protected
specifier|static
specifier|final
name|String
name|INDEX_DIR
init|=
name|DICTIONARY_PREFIX
operator|+
literal|"indexDir"
decl_stmt|;
DECL|field|THRESHOLD
specifier|protected
specifier|static
specifier|final
name|String
name|THRESHOLD
init|=
name|DICTIONARY_PREFIX
operator|+
literal|"threshold"
decl_stmt|;
DECL|field|ACCURACY
specifier|protected
specifier|static
specifier|final
name|String
name|ACCURACY
init|=
name|QUERY_PREFIX
operator|+
literal|"accuracy"
decl_stmt|;
DECL|field|SUGGESTIONS
specifier|protected
specifier|static
specifier|final
name|String
name|SUGGESTIONS
init|=
name|QUERY_PREFIX
operator|+
literal|"suggestionCount"
decl_stmt|;
DECL|field|POPULAR
specifier|protected
specifier|static
specifier|final
name|String
name|POPULAR
init|=
name|QUERY_PREFIX
operator|+
literal|"onlyMorePopular"
decl_stmt|;
DECL|field|EXTENDED
specifier|protected
specifier|static
specifier|final
name|String
name|EXTENDED
init|=
name|QUERY_PREFIX
operator|+
literal|"extendedResults"
decl_stmt|;
DECL|field|DEFAULT_ACCURACY
specifier|protected
specifier|static
specifier|final
name|float
name|DEFAULT_ACCURACY
init|=
literal|0.5f
decl_stmt|;
DECL|field|DEFAULT_SUGGESTION_COUNT
specifier|protected
specifier|static
specifier|final
name|int
name|DEFAULT_SUGGESTION_COUNT
init|=
literal|1
decl_stmt|;
DECL|field|DEFAULT_MORE_POPULAR
specifier|protected
specifier|static
specifier|final
name|boolean
name|DEFAULT_MORE_POPULAR
init|=
literal|false
decl_stmt|;
DECL|field|DEFAULT_EXTENDED_RESULTS
specifier|protected
specifier|static
specifier|final
name|boolean
name|DEFAULT_EXTENDED_RESULTS
init|=
literal|false
decl_stmt|;
DECL|field|DEFAULT_DICTIONARY_THRESHOLD
specifier|protected
specifier|static
specifier|final
name|float
name|DEFAULT_DICTIONARY_THRESHOLD
init|=
literal|0.0f
decl_stmt|;
DECL|field|args
specifier|protected
name|SolrParams
name|args
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|this
operator|.
name|args
operator|=
name|SolrParams
operator|.
name|toSolrParams
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
DECL|method|inform
specifier|public
name|void
name|inform
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|termSourceField
operator|=
name|args
operator|.
name|get
argument_list|(
name|SOURCE_FIELD
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|"termSourceField"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|dir
init|=
name|args
operator|.
name|get
argument_list|(
name|INDEX_DIR
argument_list|,
name|args
operator|.
name|get
argument_list|(
literal|"spellcheckerIndexDir"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|dir
condition|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|f
operator|=
operator|new
name|File
argument_list|(
name|core
operator|.
name|getDataDir
argument_list|()
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
name|dirDescription
operator|=
name|f
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"using spell directory: "
operator|+
name|dirDescription
argument_list|)
expr_stmt|;
name|spellcheckerIndexDir
operator|=
name|FSDirectory
operator|.
name|getDirectory
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"using RAM based spell directory"
argument_list|)
expr_stmt|;
block|}
name|spellChecker
operator|=
operator|new
name|SpellChecker
argument_list|(
name|spellcheckerIndexDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot open SpellChecker index"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Processes the following query string parameters: q, multiWords, cmd rebuild,    * cmd reopen, accuracy, suggestionCount, restrictToField, and onlyMorePopular.    */
annotation|@
name|Override
DECL|method|handleRequestBody
specifier|public
name|void
name|handleRequestBody
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrParams
name|p
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|words
init|=
name|p
operator|.
name|get
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
name|String
name|cmd
init|=
name|p
operator|.
name|get
argument_list|(
literal|"cmd"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmd
operator|!=
literal|null
condition|)
block|{
name|cmd
operator|=
name|cmd
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"rebuild"
argument_list|)
condition|)
block|{
name|rebuild
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"cmdExecuted"
argument_list|,
literal|"rebuild"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"reopen"
argument_list|)
condition|)
block|{
name|reopen
argument_list|()
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"cmdExecuted"
argument_list|,
literal|"reopen"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unrecognized Command: "
operator|+
name|cmd
argument_list|)
throw|;
block|}
block|}
comment|// empty query string
if|if
condition|(
literal|null
operator|==
name|words
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|words
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|IndexReader
name|indexReader
init|=
literal|null
decl_stmt|;
name|String
name|suggestionField
init|=
literal|null
decl_stmt|;
name|Float
name|accuracy
decl_stmt|;
name|int
name|numSug
decl_stmt|;
name|boolean
name|onlyMorePopular
decl_stmt|;
name|boolean
name|extendedResults
decl_stmt|;
try|try
block|{
name|accuracy
operator|=
name|p
operator|.
name|getFloat
argument_list|(
name|ACCURACY
argument_list|,
name|p
operator|.
name|getFloat
argument_list|(
literal|"accuracy"
argument_list|,
name|DEFAULT_ACCURACY
argument_list|)
argument_list|)
expr_stmt|;
name|spellChecker
operator|.
name|setAccuracy
argument_list|(
name|accuracy
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Accuracy must be a valid positive float"
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|numSug
operator|=
name|p
operator|.
name|getInt
argument_list|(
name|SUGGESTIONS
argument_list|,
name|p
operator|.
name|getInt
argument_list|(
literal|"suggestionCount"
argument_list|,
name|DEFAULT_SUGGESTION_COUNT
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Spelling suggestion count must be a valid positive integer"
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|onlyMorePopular
operator|=
name|p
operator|.
name|getBool
argument_list|(
name|POPULAR
argument_list|,
name|DEFAULT_MORE_POPULAR
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"'Only more popular' must be a valid boolean"
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|extendedResults
operator|=
name|p
operator|.
name|getBool
argument_list|(
name|EXTENDED
argument_list|,
name|DEFAULT_EXTENDED_RESULTS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"'Extended results' must be a valid boolean"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// when searching for more popular, a non null index-reader and
comment|// restricted-field are required
if|if
condition|(
name|onlyMorePopular
operator|||
name|extendedResults
condition|)
block|{
name|indexReader
operator|=
name|req
operator|.
name|getSearcher
argument_list|()
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|suggestionField
operator|=
name|termSourceField
expr_stmt|;
block|}
if|if
condition|(
name|extendedResults
condition|)
block|{
name|rsp
operator|.
name|add
argument_list|(
literal|"numDocs"
argument_list|,
name|indexReader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|results
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|wordz
init|=
name|words
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|word
range|:
name|wordz
control|)
block|{
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|nl
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|nl
operator|.
name|add
argument_list|(
literal|"frequency"
argument_list|,
name|indexReader
operator|.
name|docFreq
argument_list|(
operator|new
name|Term
argument_list|(
name|suggestionField
argument_list|,
name|word
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|suggestions
init|=
name|spellChecker
operator|.
name|suggestSimilar
argument_list|(
name|word
argument_list|,
name|numSug
argument_list|,
name|indexReader
argument_list|,
name|suggestionField
argument_list|,
name|onlyMorePopular
argument_list|)
decl_stmt|;
comment|// suggestion array
name|NamedList
argument_list|<
name|Object
argument_list|>
name|sa
init|=
operator|new
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|suggestions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// suggestion item
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|si
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|si
operator|.
name|add
argument_list|(
literal|"frequency"
argument_list|,
name|indexReader
operator|.
name|docFreq
argument_list|(
operator|new
name|Term
argument_list|(
name|termSourceField
argument_list|,
name|suggestions
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sa
operator|.
name|add
argument_list|(
name|suggestions
index|[
name|i
index|]
argument_list|,
name|si
argument_list|)
expr_stmt|;
block|}
name|nl
operator|.
name|add
argument_list|(
literal|"suggestions"
argument_list|,
name|sa
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|word
argument_list|,
name|nl
argument_list|)
expr_stmt|;
block|}
name|rsp
operator|.
name|add
argument_list|(
literal|"result"
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rsp
operator|.
name|add
argument_list|(
literal|"words"
argument_list|,
name|words
argument_list|)
expr_stmt|;
if|if
condition|(
name|spellChecker
operator|.
name|exist
argument_list|(
name|words
argument_list|)
condition|)
block|{
name|rsp
operator|.
name|add
argument_list|(
literal|"exist"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rsp
operator|.
name|add
argument_list|(
literal|"exist"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|suggestions
init|=
name|spellChecker
operator|.
name|suggestSimilar
argument_list|(
name|words
argument_list|,
name|numSug
argument_list|,
name|indexReader
argument_list|,
name|suggestionField
argument_list|,
name|onlyMorePopular
argument_list|)
decl_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"suggestions"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|suggestions
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Returns a dictionary to be used when building the spell-checker index.    * Override the method for custom dictionary    */
DECL|method|getDictionary
specifier|protected
name|Dictionary
name|getDictionary
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|)
block|{
name|float
name|threshold
decl_stmt|;
try|try
block|{
name|threshold
operator|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getFloat
argument_list|(
name|THRESHOLD
argument_list|,
name|DEFAULT_DICTIONARY_THRESHOLD
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Threshold must be a valid positive float"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|IndexReader
name|indexReader
init|=
name|req
operator|.
name|getSearcher
argument_list|()
operator|.
name|getReader
argument_list|()
decl_stmt|;
return|return
operator|new
name|HighFrequencyDictionary
argument_list|(
name|indexReader
argument_list|,
name|termSourceField
argument_list|,
name|threshold
argument_list|)
return|;
block|}
comment|/** Rebuilds the SpellChecker index using values from the<code>termSourceField</code> from the    * index pointed to by the current {@link IndexSearcher}.    * Any word appearing in less that thresh documents will not be added to the spellcheck index.    */
DECL|method|rebuild
specifier|private
name|void
name|rebuild
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrException
block|{
if|if
condition|(
literal|null
operator|==
name|termSourceField
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"can't rebuild spellchecker index without termSourceField configured"
argument_list|)
throw|;
block|}
name|Dictionary
name|dictionary
init|=
name|getDictionary
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|spellChecker
operator|.
name|clearIndex
argument_list|()
expr_stmt|;
name|spellChecker
operator|.
name|indexDictionary
argument_list|(
name|dictionary
argument_list|)
expr_stmt|;
name|reopen
argument_list|()
expr_stmt|;
block|}
comment|/**    * Reopens the SpellChecker index directory.    * Useful if an external process is responsible for building    * the spell checker index.    */
DECL|method|reopen
specifier|private
name|void
name|reopen
parameter_list|()
throws|throws
name|IOException
block|{
name|spellChecker
operator|.
name|setSpellIndex
argument_list|(
name|spellcheckerIndexDir
argument_list|)
expr_stmt|;
block|}
comment|//////////////////////// SolrInfoMBeans methods //////////////////////
DECL|method|getVersion
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
literal|"$Revision$"
return|;
block|}
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"The SpellChecker Solr request handler for SpellChecker index: "
operator|+
name|dirDescription
return|;
block|}
DECL|method|getSourceId
specifier|public
name|String
name|getSourceId
parameter_list|()
block|{
return|return
literal|"$Id$"
return|;
block|}
DECL|method|getSource
specifier|public
name|String
name|getSource
parameter_list|()
block|{
return|return
literal|"$URL$"
return|;
block|}
DECL|method|getDocs
specifier|public
name|URL
index|[]
name|getDocs
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
end_class
end_unit
