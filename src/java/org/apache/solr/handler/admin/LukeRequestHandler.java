begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler.admin
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Fieldable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermFreqVector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreRangeQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
operator|.
name|TokenFilterFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
operator|.
name|TokenizerChain
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
operator|.
name|TokenizerFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|luke
operator|.
name|FieldFlag
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|RequestHandlerBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_comment
comment|/**  * This handler exposes the internal lucene index.  It is inspired by and   * modeled on Luke, the Lucene Index Browser by Andrzej Bialecki.  *   http://www.getopt.org/luke/  *<p>  * NOTE: the response format is still likely to change.  It should be designed so  * that it works nicely with an XSLT transformation.  Until we have a nice  * XSLT front end for /admin, the format is still open to change.  *</p>  *   * For more documentation see:  *  http://wiki.apache.org/solr/LukeRequestHandler  *   * @version $Id$  * @since solr 1.2  */
end_comment
begin_class
DECL|class|LukeRequestHandler
specifier|public
class|class
name|LukeRequestHandler
extends|extends
name|RequestHandlerBase
block|{
DECL|field|log
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LukeRequestHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NUMTERMS
specifier|public
specifier|static
specifier|final
name|String
name|NUMTERMS
init|=
literal|"numTerms"
decl_stmt|;
DECL|field|DOC_ID
specifier|public
specifier|static
specifier|final
name|String
name|DOC_ID
init|=
literal|"docId"
decl_stmt|;
DECL|field|ID
specifier|public
specifier|static
specifier|final
name|String
name|ID
init|=
literal|"id"
decl_stmt|;
DECL|field|DEFAULT_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_COUNT
init|=
literal|10
decl_stmt|;
annotation|@
name|Override
DECL|method|handleRequestBody
specifier|public
name|void
name|handleRequestBody
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|Exception
block|{
name|IndexSchema
name|schema
init|=
name|req
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|SolrIndexSearcher
name|searcher
init|=
name|req
operator|.
name|getSearcher
argument_list|()
decl_stmt|;
name|IndexReader
name|reader
init|=
name|searcher
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|int
name|numTerms
init|=
name|params
operator|.
name|getInt
argument_list|(
name|NUMTERMS
argument_list|,
name|DEFAULT_COUNT
argument_list|)
decl_stmt|;
comment|// Always show the core lucene info
name|rsp
operator|.
name|add
argument_list|(
literal|"index"
argument_list|,
name|getIndexInfo
argument_list|(
name|reader
argument_list|,
name|numTerms
operator|>
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Integer
name|docId
init|=
name|params
operator|.
name|getInt
argument_list|(
name|DOC_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|docId
operator|==
literal|null
operator|&&
name|params
operator|.
name|get
argument_list|(
name|ID
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// Look for something with a given solr ID
name|SchemaField
name|uniqueKey
init|=
name|schema
operator|.
name|getUniqueKeyField
argument_list|()
decl_stmt|;
name|String
name|v
init|=
name|uniqueKey
operator|.
name|getType
argument_list|()
operator|.
name|toInternal
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|ID
argument_list|)
argument_list|)
decl_stmt|;
name|Term
name|t
init|=
operator|new
name|Term
argument_list|(
name|uniqueKey
operator|.
name|getName
argument_list|()
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|docId
operator|=
name|searcher
operator|.
name|getFirstMatch
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|docId
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|NOT_FOUND
argument_list|,
literal|"Can't find document: "
operator|+
name|params
operator|.
name|get
argument_list|(
name|ID
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|// Read the document from the index
if|if
condition|(
name|docId
operator|!=
literal|null
condition|)
block|{
name|Document
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|doc
operator|=
name|reader
operator|.
name|document
argument_list|(
name|docId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{}
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|NOT_FOUND
argument_list|,
literal|"Can't find document: "
operator|+
name|docId
argument_list|)
throw|;
block|}
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|info
init|=
name|getDocumentFieldsInfo
argument_list|(
name|doc
argument_list|,
name|docId
argument_list|,
name|reader
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|docinfo
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|docinfo
operator|.
name|add
argument_list|(
literal|"docId"
argument_list|,
name|docId
argument_list|)
expr_stmt|;
name|docinfo
operator|.
name|add
argument_list|(
literal|"lucene"
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|docinfo
operator|.
name|add
argument_list|(
literal|"solr"
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"doc"
argument_list|,
name|docinfo
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"schema"
operator|.
name|equals
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"show"
argument_list|)
argument_list|)
condition|)
block|{
name|rsp
operator|.
name|add
argument_list|(
literal|"schema"
argument_list|,
name|getSchemaInfo
argument_list|(
name|req
operator|.
name|getSchema
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If no doc is given, show all fields and top terms
name|Set
argument_list|<
name|String
argument_list|>
name|fields
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|params
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|fields
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|f
range|:
name|params
operator|.
name|getParams
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|)
control|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
name|rsp
operator|.
name|add
argument_list|(
literal|"fields"
argument_list|,
name|getIndexedFieldsInfo
argument_list|(
name|searcher
argument_list|,
name|fields
argument_list|,
name|numTerms
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Add some generally helpful information
name|NamedList
argument_list|<
name|Object
argument_list|>
name|info
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|info
operator|.
name|add
argument_list|(
literal|"key"
argument_list|,
name|getFieldFlagsKey
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|add
argument_list|(
literal|"NOTE"
argument_list|,
literal|"Document Frequency (df) is not updated when a document is marked for deletion.  df values include deleted documents."
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"info"
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|setHttpCaching
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return a string representing a Fieldable's flags.      */
DECL|method|getFieldFlags
specifier|private
specifier|static
name|String
name|getFieldFlags
parameter_list|(
name|Fieldable
name|f
parameter_list|)
block|{
name|StringBuilder
name|flags
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|flags
operator|.
name|append
argument_list|(
operator|(
name|f
operator|!=
literal|null
operator|&&
name|f
operator|.
name|isIndexed
argument_list|()
operator|)
condition|?
name|FieldFlag
operator|.
name|INDEXED
operator|.
name|getAbbreviation
argument_list|()
else|:
literal|'-'
argument_list|)
expr_stmt|;
name|flags
operator|.
name|append
argument_list|(
operator|(
name|f
operator|!=
literal|null
operator|&&
name|f
operator|.
name|isTokenized
argument_list|()
operator|)
condition|?
name|FieldFlag
operator|.
name|TOKENIZED
operator|.
name|getAbbreviation
argument_list|()
else|:
literal|'-'
argument_list|)
expr_stmt|;
name|flags
operator|.
name|append
argument_list|(
operator|(
name|f
operator|!=
literal|null
operator|&&
name|f
operator|.
name|isStored
argument_list|()
operator|)
condition|?
name|FieldFlag
operator|.
name|STORED
operator|.
name|getAbbreviation
argument_list|()
else|:
literal|'-'
argument_list|)
expr_stmt|;
name|flags
operator|.
name|append
argument_list|(
operator|(
literal|false
operator|)
condition|?
name|FieldFlag
operator|.
name|MULTI_VALUED
operator|.
name|getAbbreviation
argument_list|()
else|:
literal|'-'
argument_list|)
expr_stmt|;
comment|// SchemaField Specific
name|flags
operator|.
name|append
argument_list|(
operator|(
name|f
operator|!=
literal|null
operator|&&
name|f
operator|.
name|isTermVectorStored
argument_list|()
operator|)
condition|?
name|FieldFlag
operator|.
name|TERM_VECTOR_STORED
operator|.
name|getAbbreviation
argument_list|()
else|:
literal|'-'
argument_list|)
expr_stmt|;
name|flags
operator|.
name|append
argument_list|(
operator|(
name|f
operator|!=
literal|null
operator|&&
name|f
operator|.
name|isStoreOffsetWithTermVector
argument_list|()
operator|)
condition|?
name|FieldFlag
operator|.
name|TERM_VECTOR_OFFSET
operator|.
name|getAbbreviation
argument_list|()
else|:
literal|'-'
argument_list|)
expr_stmt|;
name|flags
operator|.
name|append
argument_list|(
operator|(
name|f
operator|!=
literal|null
operator|&&
name|f
operator|.
name|isStorePositionWithTermVector
argument_list|()
operator|)
condition|?
name|FieldFlag
operator|.
name|TERM_VECTOR_POSITION
operator|.
name|getAbbreviation
argument_list|()
else|:
literal|'-'
argument_list|)
expr_stmt|;
name|flags
operator|.
name|append
argument_list|(
operator|(
name|f
operator|!=
literal|null
operator|&&
name|f
operator|.
name|getOmitNorms
argument_list|()
operator|)
condition|?
name|FieldFlag
operator|.
name|OMIT_NORMS
operator|.
name|getAbbreviation
argument_list|()
else|:
literal|'-'
argument_list|)
expr_stmt|;
name|flags
operator|.
name|append
argument_list|(
operator|(
name|f
operator|!=
literal|null
operator|&&
name|f
operator|.
name|isLazy
argument_list|()
operator|)
condition|?
name|FieldFlag
operator|.
name|LAZY
operator|.
name|getAbbreviation
argument_list|()
else|:
literal|'-'
argument_list|)
expr_stmt|;
name|flags
operator|.
name|append
argument_list|(
operator|(
name|f
operator|!=
literal|null
operator|&&
name|f
operator|.
name|isBinary
argument_list|()
operator|)
condition|?
name|FieldFlag
operator|.
name|BINARY
operator|.
name|getAbbreviation
argument_list|()
else|:
literal|'-'
argument_list|)
expr_stmt|;
name|flags
operator|.
name|append
argument_list|(
operator|(
name|f
operator|!=
literal|null
operator|&&
name|f
operator|.
name|isCompressed
argument_list|()
operator|)
condition|?
name|FieldFlag
operator|.
name|COMPRESSED
operator|.
name|getAbbreviation
argument_list|()
else|:
literal|'-'
argument_list|)
expr_stmt|;
name|flags
operator|.
name|append
argument_list|(
operator|(
literal|false
operator|)
condition|?
name|FieldFlag
operator|.
name|SORT_MISSING_FIRST
operator|.
name|getAbbreviation
argument_list|()
else|:
literal|'-'
argument_list|)
expr_stmt|;
comment|// SchemaField Specific
name|flags
operator|.
name|append
argument_list|(
operator|(
literal|false
operator|)
condition|?
name|FieldFlag
operator|.
name|SORT_MISSING_LAST
operator|.
name|getAbbreviation
argument_list|()
else|:
literal|'-'
argument_list|)
expr_stmt|;
comment|// SchemaField Specific
return|return
name|flags
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * @return a string representing a SchemaField's flags.      */
DECL|method|getFieldFlags
specifier|private
specifier|static
name|String
name|getFieldFlags
parameter_list|(
name|SchemaField
name|f
parameter_list|)
block|{
name|FieldType
name|t
init|=
operator|(
name|f
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|f
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|// see: http://www.nabble.com/schema-field-properties-tf3437753.html#a9585549
name|boolean
name|lazy
init|=
literal|false
decl_stmt|;
comment|// "lazy" is purely a property of reading fields
name|boolean
name|binary
init|=
literal|false
decl_stmt|;
comment|// Currently not possible
name|StringBuilder
name|flags
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|flags
operator|.
name|append
argument_list|(
operator|(
name|f
operator|!=
literal|null
operator|&&
name|f
operator|.
name|indexed
argument_list|()
operator|)
condition|?
name|FieldFlag
operator|.
name|INDEXED
operator|.
name|getAbbreviation
argument_list|()
else|:
literal|'-'
argument_list|)
expr_stmt|;
name|flags
operator|.
name|append
argument_list|(
operator|(
name|t
operator|!=
literal|null
operator|&&
name|t
operator|.
name|isTokenized
argument_list|()
operator|)
condition|?
name|FieldFlag
operator|.
name|TOKENIZED
operator|.
name|getAbbreviation
argument_list|()
else|:
literal|'-'
argument_list|)
expr_stmt|;
name|flags
operator|.
name|append
argument_list|(
operator|(
name|f
operator|!=
literal|null
operator|&&
name|f
operator|.
name|stored
argument_list|()
operator|)
condition|?
name|FieldFlag
operator|.
name|STORED
operator|.
name|getAbbreviation
argument_list|()
else|:
literal|'-'
argument_list|)
expr_stmt|;
name|flags
operator|.
name|append
argument_list|(
operator|(
name|f
operator|!=
literal|null
operator|&&
name|f
operator|.
name|multiValued
argument_list|()
operator|)
condition|?
name|FieldFlag
operator|.
name|MULTI_VALUED
operator|.
name|getAbbreviation
argument_list|()
else|:
literal|'-'
argument_list|)
expr_stmt|;
name|flags
operator|.
name|append
argument_list|(
operator|(
name|f
operator|!=
literal|null
operator|&&
name|f
operator|.
name|storeTermVector
argument_list|()
operator|)
condition|?
name|FieldFlag
operator|.
name|TERM_VECTOR_STORED
operator|.
name|getAbbreviation
argument_list|()
else|:
literal|'-'
argument_list|)
expr_stmt|;
name|flags
operator|.
name|append
argument_list|(
operator|(
name|f
operator|!=
literal|null
operator|&&
name|f
operator|.
name|storeTermOffsets
argument_list|()
operator|)
condition|?
name|FieldFlag
operator|.
name|TERM_VECTOR_OFFSET
operator|.
name|getAbbreviation
argument_list|()
else|:
literal|'-'
argument_list|)
expr_stmt|;
name|flags
operator|.
name|append
argument_list|(
operator|(
name|f
operator|!=
literal|null
operator|&&
name|f
operator|.
name|storeTermPositions
argument_list|()
operator|)
condition|?
name|FieldFlag
operator|.
name|TERM_VECTOR_POSITION
operator|.
name|getAbbreviation
argument_list|()
else|:
literal|'-'
argument_list|)
expr_stmt|;
name|flags
operator|.
name|append
argument_list|(
operator|(
name|f
operator|!=
literal|null
operator|&&
name|f
operator|.
name|omitNorms
argument_list|()
operator|)
condition|?
name|FieldFlag
operator|.
name|OMIT_NORMS
operator|.
name|getAbbreviation
argument_list|()
else|:
literal|'-'
argument_list|)
expr_stmt|;
name|flags
operator|.
name|append
argument_list|(
operator|(
name|f
operator|!=
literal|null
operator|&&
name|f
operator|.
name|omitTf
argument_list|()
operator|)
condition|?
name|FieldFlag
operator|.
name|OMIT_TF
operator|.
name|getAbbreviation
argument_list|()
else|:
literal|'-'
argument_list|)
expr_stmt|;
name|flags
operator|.
name|append
argument_list|(
operator|(
name|lazy
operator|)
condition|?
name|FieldFlag
operator|.
name|LAZY
operator|.
name|getAbbreviation
argument_list|()
else|:
literal|'-'
argument_list|)
expr_stmt|;
name|flags
operator|.
name|append
argument_list|(
operator|(
name|binary
operator|)
condition|?
name|FieldFlag
operator|.
name|BINARY
operator|.
name|getAbbreviation
argument_list|()
else|:
literal|'-'
argument_list|)
expr_stmt|;
name|flags
operator|.
name|append
argument_list|(
operator|(
name|f
operator|!=
literal|null
operator|&&
name|f
operator|.
name|isCompressed
argument_list|()
operator|)
condition|?
name|FieldFlag
operator|.
name|COMPRESSED
operator|.
name|getAbbreviation
argument_list|()
else|:
literal|'-'
argument_list|)
expr_stmt|;
name|flags
operator|.
name|append
argument_list|(
operator|(
name|f
operator|!=
literal|null
operator|&&
name|f
operator|.
name|sortMissingFirst
argument_list|()
operator|)
condition|?
name|FieldFlag
operator|.
name|SORT_MISSING_FIRST
operator|.
name|getAbbreviation
argument_list|()
else|:
literal|'-'
argument_list|)
expr_stmt|;
name|flags
operator|.
name|append
argument_list|(
operator|(
name|f
operator|!=
literal|null
operator|&&
name|f
operator|.
name|sortMissingLast
argument_list|()
operator|)
condition|?
name|FieldFlag
operator|.
name|SORT_MISSING_LAST
operator|.
name|getAbbreviation
argument_list|()
else|:
literal|'-'
argument_list|)
expr_stmt|;
return|return
name|flags
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * @return a key to what each character means    */
DECL|method|getFieldFlagsKey
specifier|public
specifier|static
name|SimpleOrderedMap
argument_list|<
name|String
argument_list|>
name|getFieldFlagsKey
parameter_list|()
block|{
name|SimpleOrderedMap
argument_list|<
name|String
argument_list|>
name|key
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|key
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|FieldFlag
operator|.
name|INDEXED
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
argument_list|,
name|FieldFlag
operator|.
name|INDEXED
operator|.
name|getDisplay
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|FieldFlag
operator|.
name|TOKENIZED
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
argument_list|,
name|FieldFlag
operator|.
name|TOKENIZED
operator|.
name|getDisplay
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|FieldFlag
operator|.
name|STORED
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
argument_list|,
name|FieldFlag
operator|.
name|STORED
operator|.
name|getDisplay
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|FieldFlag
operator|.
name|MULTI_VALUED
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
argument_list|,
name|FieldFlag
operator|.
name|MULTI_VALUED
operator|.
name|getDisplay
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|FieldFlag
operator|.
name|TERM_VECTOR_STORED
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
argument_list|,
name|FieldFlag
operator|.
name|TERM_VECTOR_STORED
operator|.
name|getDisplay
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|FieldFlag
operator|.
name|TERM_VECTOR_OFFSET
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
argument_list|,
name|FieldFlag
operator|.
name|TERM_VECTOR_OFFSET
operator|.
name|getDisplay
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|FieldFlag
operator|.
name|TERM_VECTOR_POSITION
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
argument_list|,
name|FieldFlag
operator|.
name|TERM_VECTOR_POSITION
operator|.
name|getDisplay
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|FieldFlag
operator|.
name|OMIT_NORMS
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
argument_list|,
name|FieldFlag
operator|.
name|OMIT_NORMS
operator|.
name|getDisplay
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|FieldFlag
operator|.
name|LAZY
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
argument_list|,
name|FieldFlag
operator|.
name|LAZY
operator|.
name|getDisplay
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|FieldFlag
operator|.
name|BINARY
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
argument_list|,
name|FieldFlag
operator|.
name|BINARY
operator|.
name|getDisplay
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|FieldFlag
operator|.
name|COMPRESSED
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
argument_list|,
name|FieldFlag
operator|.
name|COMPRESSED
operator|.
name|getDisplay
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|FieldFlag
operator|.
name|SORT_MISSING_FIRST
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
argument_list|,
name|FieldFlag
operator|.
name|SORT_MISSING_FIRST
operator|.
name|getDisplay
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|FieldFlag
operator|.
name|SORT_MISSING_LAST
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
argument_list|,
name|FieldFlag
operator|.
name|SORT_MISSING_LAST
operator|.
name|getDisplay
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|key
return|;
block|}
DECL|method|getDocumentFieldsInfo
specifier|private
specifier|static
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|getDocumentFieldsInfo
parameter_list|(
name|Document
name|doc
parameter_list|,
name|int
name|docId
parameter_list|,
name|IndexReader
name|reader
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
throws|throws
name|IOException
block|{
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|finfo
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|doc
operator|.
name|getFields
argument_list|()
control|)
block|{
name|Fieldable
name|fieldable
init|=
operator|(
name|Fieldable
operator|)
name|o
decl_stmt|;
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|f
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|SchemaField
name|sfield
init|=
name|schema
operator|.
name|getFieldOrNull
argument_list|(
name|fieldable
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|FieldType
name|ftype
init|=
operator|(
name|sfield
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|sfield
operator|.
name|getType
argument_list|()
decl_stmt|;
name|f
operator|.
name|add
argument_list|(
literal|"type"
argument_list|,
operator|(
name|ftype
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|ftype
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|add
argument_list|(
literal|"schema"
argument_list|,
name|getFieldFlags
argument_list|(
name|sfield
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|add
argument_list|(
literal|"flags"
argument_list|,
name|getFieldFlags
argument_list|(
name|fieldable
argument_list|)
argument_list|)
expr_stmt|;
name|Term
name|t
init|=
operator|new
name|Term
argument_list|(
name|fieldable
operator|.
name|name
argument_list|()
argument_list|,
name|fieldable
operator|.
name|stringValue
argument_list|()
argument_list|)
decl_stmt|;
name|f
operator|.
name|add
argument_list|(
literal|"value"
argument_list|,
operator|(
name|ftype
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|ftype
operator|.
name|toExternal
argument_list|(
name|fieldable
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|add
argument_list|(
literal|"internal"
argument_list|,
name|fieldable
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// may be a binary number
name|f
operator|.
name|add
argument_list|(
literal|"boost"
argument_list|,
name|fieldable
operator|.
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|add
argument_list|(
literal|"docFreq"
argument_list|,
name|reader
operator|.
name|docFreq
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
comment|// this can be 0 for non-indexed fields
comment|// If we have a term vector, return that
if|if
condition|(
name|fieldable
operator|.
name|isTermVectorStored
argument_list|()
condition|)
block|{
try|try
block|{
name|TermFreqVector
name|v
init|=
name|reader
operator|.
name|getTermFreqVector
argument_list|(
name|docId
argument_list|,
name|fieldable
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
block|{
name|SimpleOrderedMap
argument_list|<
name|Integer
argument_list|>
name|tfv
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|v
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|tfv
operator|.
name|add
argument_list|(
name|v
operator|.
name|getTerms
argument_list|()
index|[
name|i
index|]
argument_list|,
name|v
operator|.
name|getTermFrequencies
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|f
operator|.
name|add
argument_list|(
literal|"termVector"
argument_list|,
name|tfv
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"error writing term vector"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
name|finfo
operator|.
name|add
argument_list|(
name|fieldable
operator|.
name|name
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
return|return
name|finfo
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getIndexedFieldsInfo
specifier|private
specifier|static
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|getIndexedFieldsInfo
parameter_list|(
specifier|final
name|SolrIndexSearcher
name|searcher
parameter_list|,
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|,
specifier|final
name|int
name|numTerms
parameter_list|)
throws|throws
name|Exception
block|{
name|IndexReader
name|reader
init|=
name|searcher
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSchema
name|schema
init|=
name|searcher
operator|.
name|getSchema
argument_list|()
decl_stmt|;
comment|// Walk the term enum and keep a priority queue for each map in our set
name|Map
argument_list|<
name|String
argument_list|,
name|TopTermQueue
argument_list|>
name|ttinfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|numTerms
operator|>
literal|0
condition|)
block|{
name|ttinfo
operator|=
name|getTopTerms
argument_list|(
name|reader
argument_list|,
name|fields
argument_list|,
name|numTerms
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|finfo
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|reader
operator|.
name|getFieldNames
argument_list|(
name|IndexReader
operator|.
name|FieldOption
operator|.
name|ALL
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|fieldNames
control|)
block|{
if|if
condition|(
name|fields
operator|!=
literal|null
operator|&&
operator|!
name|fields
operator|.
name|contains
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
continue|continue;
comment|// if a field is specified, only them
block|}
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|f
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|SchemaField
name|sfield
init|=
name|schema
operator|.
name|getFieldOrNull
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|FieldType
name|ftype
init|=
operator|(
name|sfield
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|sfield
operator|.
name|getType
argument_list|()
decl_stmt|;
name|f
operator|.
name|add
argument_list|(
literal|"type"
argument_list|,
operator|(
name|ftype
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|ftype
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|add
argument_list|(
literal|"schema"
argument_list|,
name|getFieldFlags
argument_list|(
name|sfield
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sfield
operator|!=
literal|null
operator|&&
name|schema
operator|.
name|isDynamicField
argument_list|(
name|sfield
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|schema
operator|.
name|getDynamicPattern
argument_list|(
name|sfield
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|f
operator|.
name|add
argument_list|(
literal|"dynamicBase"
argument_list|,
name|schema
operator|.
name|getDynamicPattern
argument_list|(
name|sfield
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// If numTerms==0, the call is just asking for a quick field list
if|if
condition|(
name|ttinfo
operator|!=
literal|null
operator|&&
name|sfield
operator|!=
literal|null
operator|&&
name|sfield
operator|.
name|indexed
argument_list|()
condition|)
block|{
name|Query
name|q
init|=
operator|new
name|ConstantScoreRangeQuery
argument_list|(
name|fieldName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|TopDocs
name|top
init|=
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|top
operator|.
name|totalHits
operator|>
literal|0
condition|)
block|{
comment|// Find a document with this field
try|try
block|{
name|Document
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|top
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|Fieldable
name|fld
init|=
name|doc
operator|.
name|getFieldable
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fld
operator|!=
literal|null
condition|)
block|{
name|f
operator|.
name|add
argument_list|(
literal|"index"
argument_list|,
name|getFieldFlags
argument_list|(
name|fld
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// it is a non-stored field...
name|f
operator|.
name|add
argument_list|(
literal|"index"
argument_list|,
literal|"(unstored field)"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"error reading field: "
operator|+
name|fieldName
argument_list|)
expr_stmt|;
block|}
block|}
name|f
operator|.
name|add
argument_list|(
literal|"docs"
argument_list|,
name|top
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|TopTermQueue
name|topTerms
init|=
name|ttinfo
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|topTerms
operator|!=
literal|null
condition|)
block|{
name|f
operator|.
name|add
argument_list|(
literal|"distinct"
argument_list|,
name|topTerms
operator|.
name|distinctTerms
argument_list|)
expr_stmt|;
comment|// Include top terms
name|f
operator|.
name|add
argument_list|(
literal|"topTerms"
argument_list|,
name|topTerms
operator|.
name|toNamedList
argument_list|(
name|searcher
operator|.
name|getSchema
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add a histogram
name|f
operator|.
name|add
argument_list|(
literal|"histogram"
argument_list|,
name|topTerms
operator|.
name|histogram
operator|.
name|toNamedList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add the field
name|finfo
operator|.
name|add
argument_list|(
name|fieldName
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
return|return
name|finfo
return|;
block|}
comment|/**    * Return info from the index    */
DECL|method|getSchemaInfo
specifier|private
specifier|static
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|getSchemaInfo
parameter_list|(
name|IndexSchema
name|schema
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|typeusemap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|fields
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|SchemaField
name|uniqueField
init|=
name|schema
operator|.
name|getUniqueKeyField
argument_list|()
decl_stmt|;
for|for
control|(
name|SchemaField
name|f
range|:
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|populateFieldInfo
argument_list|(
name|schema
argument_list|,
name|typeusemap
argument_list|,
name|fields
argument_list|,
name|uniqueField
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|dynamicFields
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SchemaField
name|f
range|:
name|schema
operator|.
name|getDynamicFieldPrototypes
argument_list|()
control|)
block|{
name|populateFieldInfo
argument_list|(
name|schema
argument_list|,
name|typeusemap
argument_list|,
name|dynamicFields
argument_list|,
name|uniqueField
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|types
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldType
name|ft
range|:
name|schema
operator|.
name|getFieldTypes
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|field
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|field
operator|.
name|add
argument_list|(
literal|"fields"
argument_list|,
name|typeusemap
operator|.
name|get
argument_list|(
name|ft
operator|.
name|getTypeName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|.
name|add
argument_list|(
literal|"tokenized"
argument_list|,
name|ft
operator|.
name|isTokenized
argument_list|()
argument_list|)
expr_stmt|;
name|field
operator|.
name|add
argument_list|(
literal|"className"
argument_list|,
name|ft
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|field
operator|.
name|add
argument_list|(
literal|"indexAnalyzer"
argument_list|,
name|getAnalyzerInfo
argument_list|(
name|ft
operator|.
name|getAnalyzer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|.
name|add
argument_list|(
literal|"queryAnalyzer"
argument_list|,
name|getAnalyzerInfo
argument_list|(
name|ft
operator|.
name|getQueryAnalyzer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|ft
operator|.
name|getTypeName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|finfo
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|finfo
operator|.
name|add
argument_list|(
literal|"fields"
argument_list|,
name|fields
argument_list|)
expr_stmt|;
name|finfo
operator|.
name|add
argument_list|(
literal|"dynamicFields"
argument_list|,
name|dynamicFields
argument_list|)
expr_stmt|;
name|finfo
operator|.
name|add
argument_list|(
literal|"uniqueKeyField"
argument_list|,
name|uniqueField
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|finfo
operator|.
name|add
argument_list|(
literal|"defaultSearchField"
argument_list|,
name|schema
operator|.
name|getDefaultSearchFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|finfo
operator|.
name|add
argument_list|(
literal|"types"
argument_list|,
name|types
argument_list|)
expr_stmt|;
return|return
name|finfo
return|;
block|}
DECL|method|getAnalyzerInfo
specifier|private
specifier|static
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|getAnalyzerInfo
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|)
block|{
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|aninfo
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|aninfo
operator|.
name|add
argument_list|(
literal|"className"
argument_list|,
name|analyzer
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|analyzer
operator|instanceof
name|TokenizerChain
condition|)
block|{
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|tokenizer
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|TokenizerChain
name|tchain
init|=
operator|(
name|TokenizerChain
operator|)
name|analyzer
decl_stmt|;
name|TokenizerFactory
name|tfac
init|=
name|tchain
operator|.
name|getTokenizerFactory
argument_list|()
decl_stmt|;
name|tokenizer
operator|.
name|add
argument_list|(
literal|"className"
argument_list|,
name|tfac
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tokenizer
operator|.
name|add
argument_list|(
literal|"args"
argument_list|,
name|tfac
operator|.
name|getArgs
argument_list|()
argument_list|)
expr_stmt|;
name|aninfo
operator|.
name|add
argument_list|(
literal|"tokenizer"
argument_list|,
name|tokenizer
argument_list|)
expr_stmt|;
name|TokenFilterFactory
index|[]
name|filtfacs
init|=
name|tchain
operator|.
name|getTokenFilterFactories
argument_list|()
decl_stmt|;
name|SimpleOrderedMap
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|filters
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TokenFilterFactory
name|filtfac
range|:
name|filtfacs
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|tok
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|filtfac
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|tok
operator|.
name|put
argument_list|(
literal|"className"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|tok
operator|.
name|put
argument_list|(
literal|"args"
argument_list|,
name|filtfac
operator|.
name|getArgs
argument_list|()
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
name|className
operator|.
name|substring
argument_list|(
name|className
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|,
name|tok
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filters
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|aninfo
operator|.
name|add
argument_list|(
literal|"filters"
argument_list|,
name|filters
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|aninfo
return|;
block|}
DECL|method|populateFieldInfo
specifier|private
specifier|static
name|void
name|populateFieldInfo
parameter_list|(
name|IndexSchema
name|schema
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|typeusemap
parameter_list|,
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|fields
parameter_list|,
name|SchemaField
name|uniqueField
parameter_list|,
name|SchemaField
name|f
parameter_list|)
block|{
name|FieldType
name|ft
init|=
name|f
operator|.
name|getType
argument_list|()
decl_stmt|;
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|field
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|field
operator|.
name|add
argument_list|(
literal|"type"
argument_list|,
name|ft
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|field
operator|.
name|add
argument_list|(
literal|"flags"
argument_list|,
name|getFieldFlags
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|isRequired
argument_list|()
condition|)
block|{
name|field
operator|.
name|add
argument_list|(
literal|"required"
argument_list|,
name|f
operator|.
name|isRequired
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|.
name|getDefaultValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|add
argument_list|(
literal|"default"
argument_list|,
name|f
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|==
name|uniqueField
condition|)
block|{
name|field
operator|.
name|add
argument_list|(
literal|"uniqueKey"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ft
operator|.
name|getAnalyzer
argument_list|()
operator|.
name|getPositionIncrementGap
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|field
operator|.
name|add
argument_list|(
literal|"positionIncrementGap"
argument_list|,
name|ft
operator|.
name|getAnalyzer
argument_list|()
operator|.
name|getPositionIncrementGap
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|field
operator|.
name|add
argument_list|(
literal|"copyDests"
argument_list|,
name|schema
operator|.
name|getCopyFields
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|.
name|add
argument_list|(
literal|"copySources"
argument_list|,
name|schema
operator|.
name|getCopySources
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|v
init|=
name|typeusemap
operator|.
name|get
argument_list|(
name|ft
operator|.
name|getTypeName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|v
operator|.
name|add
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|typeusemap
operator|.
name|put
argument_list|(
name|ft
operator|.
name|getTypeName
argument_list|()
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
DECL|method|getIndexInfo
specifier|public
specifier|static
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|getIndexInfo
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|boolean
name|countTerms
parameter_list|)
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|reader
operator|.
name|directory
argument_list|()
decl_stmt|;
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|indexInfo
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|indexInfo
operator|.
name|add
argument_list|(
literal|"numDocs"
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|indexInfo
operator|.
name|add
argument_list|(
literal|"maxDoc"
argument_list|,
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|countTerms
condition|)
block|{
name|TermEnum
name|te
init|=
literal|null
decl_stmt|;
try|try
block|{
name|te
operator|=
name|reader
operator|.
name|terms
argument_list|()
expr_stmt|;
name|int
name|numTerms
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|te
operator|.
name|next
argument_list|()
condition|)
block|{
name|numTerms
operator|++
expr_stmt|;
block|}
name|indexInfo
operator|.
name|add
argument_list|(
literal|"numTerms"
argument_list|,
name|numTerms
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|te
operator|!=
literal|null
condition|)
name|te
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|indexInfo
operator|.
name|add
argument_list|(
literal|"version"
argument_list|,
name|reader
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO? Is this different then: IndexReader.getCurrentVersion( dir )?
name|indexInfo
operator|.
name|add
argument_list|(
literal|"optimized"
argument_list|,
name|reader
operator|.
name|isOptimized
argument_list|()
argument_list|)
expr_stmt|;
name|indexInfo
operator|.
name|add
argument_list|(
literal|"current"
argument_list|,
name|reader
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|indexInfo
operator|.
name|add
argument_list|(
literal|"hasDeletions"
argument_list|,
name|reader
operator|.
name|hasDeletions
argument_list|()
argument_list|)
expr_stmt|;
name|indexInfo
operator|.
name|add
argument_list|(
literal|"directory"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|indexInfo
operator|.
name|add
argument_list|(
literal|"lastModified"
argument_list|,
operator|new
name|Date
argument_list|(
name|IndexReader
operator|.
name|lastModified
argument_list|(
name|dir
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|indexInfo
return|;
block|}
comment|//////////////////////// SolrInfoMBeans methods //////////////////////
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Lucene Index Browser.  Inspired and modeled after Luke: http://www.getopt.org/luke/"
return|;
block|}
annotation|@
name|Override
DECL|method|getVersion
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
literal|"$Revision$"
return|;
block|}
annotation|@
name|Override
DECL|method|getSourceId
specifier|public
name|String
name|getSourceId
parameter_list|()
block|{
return|return
literal|"$Id$"
return|;
block|}
annotation|@
name|Override
DECL|method|getSource
specifier|public
name|String
name|getSource
parameter_list|()
block|{
return|return
literal|"$URL$"
return|;
block|}
annotation|@
name|Override
DECL|method|getDocs
specifier|public
name|URL
index|[]
name|getDocs
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|URL
index|[]
block|{
operator|new
name|URL
argument_list|(
literal|"http://wiki.apache.org/solr/LukeRequestHandler"
argument_list|)
block|}
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|ex
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|///////////////////////////////////////////////////////////////////////////////////////
DECL|class|TermHistogram
specifier|static
class|class
name|TermHistogram
block|{
DECL|field|maxBucket
name|int
name|maxBucket
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|hist
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|hist
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|LOG2
specifier|private
specifier|static
specifier|final
name|double
name|LOG2
init|=
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
decl_stmt|;
DECL|method|getPowerOfTwoBucket
specifier|public
specifier|static
name|int
name|getPowerOfTwoBucket
parameter_list|(
name|int
name|num
parameter_list|)
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|highestOneBit
argument_list|(
name|num
operator|-
literal|1
argument_list|)
operator|<<
literal|1
argument_list|)
return|;
block|}
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|int
name|df
parameter_list|)
block|{
name|Integer
name|bucket
init|=
name|getPowerOfTwoBucket
argument_list|(
name|df
argument_list|)
decl_stmt|;
if|if
condition|(
name|bucket
operator|>
name|maxBucket
condition|)
block|{
name|maxBucket
operator|=
name|bucket
expr_stmt|;
block|}
name|Integer
name|old
init|=
name|hist
operator|.
name|get
argument_list|(
name|bucket
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|==
literal|null
condition|)
block|{
name|hist
operator|.
name|put
argument_list|(
name|bucket
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hist
operator|.
name|put
argument_list|(
name|bucket
argument_list|,
name|old
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO? should this be a list or a map?
DECL|method|toNamedList
specifier|public
name|NamedList
argument_list|<
name|Integer
argument_list|>
name|toNamedList
parameter_list|()
block|{
name|NamedList
argument_list|<
name|Integer
argument_list|>
name|nl
init|=
operator|new
name|NamedList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|bucket
init|=
literal|2
init|;
name|bucket
operator|<=
name|maxBucket
condition|;
name|bucket
operator|*=
literal|2
control|)
block|{
name|Integer
name|val
init|=
name|hist
operator|.
name|get
argument_list|(
name|bucket
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|val
operator|=
literal|0
expr_stmt|;
block|}
name|nl
operator|.
name|add
argument_list|(
literal|""
operator|+
name|bucket
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|nl
return|;
block|}
block|}
comment|/**    * Private internal class that counts up frequent terms    */
DECL|class|TopTermQueue
specifier|private
specifier|static
class|class
name|TopTermQueue
extends|extends
name|PriorityQueue
block|{
DECL|class|TermInfo
specifier|static
class|class
name|TermInfo
block|{
DECL|method|TermInfo
name|TermInfo
parameter_list|(
name|Term
name|t
parameter_list|,
name|int
name|df
parameter_list|)
block|{
name|term
operator|=
name|t
expr_stmt|;
name|docFreq
operator|=
name|df
expr_stmt|;
block|}
DECL|field|docFreq
name|int
name|docFreq
decl_stmt|;
DECL|field|term
name|Term
name|term
decl_stmt|;
block|}
DECL|field|minFreq
specifier|public
name|int
name|minFreq
init|=
literal|0
decl_stmt|;
DECL|field|distinctTerms
specifier|public
name|int
name|distinctTerms
init|=
literal|0
decl_stmt|;
DECL|field|histogram
specifier|public
name|TermHistogram
name|histogram
decl_stmt|;
DECL|method|TopTermQueue
name|TopTermQueue
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|initialize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|histogram
operator|=
operator|new
name|TermHistogram
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|lessThan
specifier|protected
specifier|final
name|boolean
name|lessThan
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|)
block|{
name|TermInfo
name|termInfoA
init|=
operator|(
name|TermInfo
operator|)
name|a
decl_stmt|;
name|TermInfo
name|termInfoB
init|=
operator|(
name|TermInfo
operator|)
name|b
decl_stmt|;
return|return
name|termInfoA
operator|.
name|docFreq
operator|<
name|termInfoB
operator|.
name|docFreq
return|;
block|}
comment|/**      * This is a destructive call... the queue is empty at the end      */
DECL|method|toNamedList
specifier|public
name|NamedList
argument_list|<
name|Integer
argument_list|>
name|toNamedList
parameter_list|(
name|IndexSchema
name|schema
parameter_list|)
block|{
comment|// reverse the list..
name|List
argument_list|<
name|TermInfo
argument_list|>
name|aslist
init|=
operator|new
name|LinkedList
argument_list|<
name|TermInfo
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|aslist
operator|.
name|add
argument_list|(
literal|0
argument_list|,
operator|(
name|TermInfo
operator|)
name|pop
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|NamedList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
operator|new
name|NamedList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TermInfo
name|i
range|:
name|aslist
control|)
block|{
name|String
name|txt
init|=
name|i
operator|.
name|term
operator|.
name|text
argument_list|()
decl_stmt|;
name|SchemaField
name|ft
init|=
name|schema
operator|.
name|getFieldOrNull
argument_list|(
name|i
operator|.
name|term
operator|.
name|field
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ft
operator|!=
literal|null
condition|)
block|{
name|txt
operator|=
name|ft
operator|.
name|getType
argument_list|()
operator|.
name|indexedToReadable
argument_list|(
name|txt
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|txt
argument_list|,
name|i
operator|.
name|docFreq
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
block|}
DECL|method|getTopTerms
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|TopTermQueue
argument_list|>
name|getTopTerms
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|,
name|int
name|numTerms
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|junkWords
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|TopTermQueue
argument_list|>
name|info
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TopTermQueue
argument_list|>
argument_list|()
decl_stmt|;
name|TermEnum
name|terms
init|=
literal|null
decl_stmt|;
try|try
block|{
name|terms
operator|=
name|reader
operator|.
name|terms
argument_list|()
expr_stmt|;
while|while
condition|(
name|terms
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|field
init|=
name|terms
operator|.
name|term
argument_list|()
operator|.
name|field
argument_list|()
decl_stmt|;
name|String
name|t
init|=
name|terms
operator|.
name|term
argument_list|()
operator|.
name|text
argument_list|()
decl_stmt|;
comment|// Compute distinct terms for every field
name|TopTermQueue
name|tiq
init|=
name|info
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|tiq
operator|==
literal|null
condition|)
block|{
name|tiq
operator|=
operator|new
name|TopTermQueue
argument_list|(
name|numTerms
operator|+
literal|1
argument_list|)
expr_stmt|;
name|info
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|tiq
argument_list|)
expr_stmt|;
block|}
name|tiq
operator|.
name|distinctTerms
operator|++
expr_stmt|;
name|tiq
operator|.
name|histogram
operator|.
name|add
argument_list|(
name|terms
operator|.
name|docFreq
argument_list|()
argument_list|)
expr_stmt|;
comment|// add the term to the histogram
comment|// Only save the distinct terms for fields we worry about
if|if
condition|(
name|fields
operator|!=
literal|null
operator|&&
name|fields
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|fields
operator|.
name|contains
argument_list|(
name|field
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|junkWords
operator|!=
literal|null
operator|&&
name|junkWords
operator|.
name|contains
argument_list|(
name|t
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|terms
operator|.
name|docFreq
argument_list|()
operator|>
name|tiq
operator|.
name|minFreq
condition|)
block|{
name|tiq
operator|.
name|put
argument_list|(
operator|new
name|TopTermQueue
operator|.
name|TermInfo
argument_list|(
name|terms
operator|.
name|term
argument_list|()
argument_list|,
name|terms
operator|.
name|docFreq
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tiq
operator|.
name|size
argument_list|()
operator|>
name|numTerms
condition|)
block|{
comment|// if tiq full
name|tiq
operator|.
name|pop
argument_list|()
expr_stmt|;
comment|// remove lowest in tiq
name|tiq
operator|.
name|minFreq
operator|=
operator|(
operator|(
name|TopTermQueue
operator|.
name|TermInfo
operator|)
name|tiq
operator|.
name|top
argument_list|()
operator|)
operator|.
name|docFreq
expr_stmt|;
comment|// reset minFreq
block|}
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
name|terms
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
block|}
end_class
end_unit
