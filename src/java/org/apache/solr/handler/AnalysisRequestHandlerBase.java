begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.handler
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
operator|.
name|TokenFilterFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
operator|.
name|TokenizerChain
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * A base class for all analysis request handlers.  *  * @version $Id$  * @since solr 1.4  */
end_comment
begin_class
DECL|class|AnalysisRequestHandlerBase
specifier|public
specifier|abstract
class|class
name|AnalysisRequestHandlerBase
extends|extends
name|RequestHandlerBase
block|{
DECL|method|handleRequestBody
specifier|public
name|void
name|handleRequestBody
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|Exception
block|{
name|rsp
operator|.
name|add
argument_list|(
literal|"analysis"
argument_list|,
name|doAnalysis
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Performs the analysis based on the given solr request and returns the analysis result as a named list.    *    * @param req The solr request.    *    * @return The analysis result as a named list.    *    * @throws Exception When analysis fails.    */
DECL|method|doAnalysis
specifier|protected
specifier|abstract
name|NamedList
name|doAnalysis
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**    * Analyzes the given value using the given Analyzer.    *    * @param value   Value to analyze    * @param context The {@link AnalysisContext analysis context}.    *    * @return NamedList containing the tokens produced by analyzing the given value    */
DECL|method|analyzeValue
specifier|protected
name|NamedList
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|>
argument_list|>
name|analyzeValue
parameter_list|(
name|String
name|value
parameter_list|,
name|AnalysisContext
name|context
parameter_list|)
block|{
name|Analyzer
name|analyzer
init|=
name|context
operator|.
name|getAnalyzer
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|TokenizerChain
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|analyzer
argument_list|)
condition|)
block|{
name|TokenStream
name|tokenStream
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|context
operator|.
name|getFieldName
argument_list|()
argument_list|,
operator|new
name|StringReader
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|>
argument_list|>
name|namedList
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|namedList
operator|.
name|add
argument_list|(
name|tokenStream
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|convertTokensToNamedLists
argument_list|(
name|analyzeTokenStream
argument_list|(
name|tokenStream
argument_list|)
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|namedList
return|;
block|}
name|TokenizerChain
name|tokenizerChain
init|=
operator|(
name|TokenizerChain
operator|)
name|analyzer
decl_stmt|;
name|NamedList
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|>
argument_list|>
name|namedList
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|List
argument_list|<
name|NamedList
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|TokenStream
name|tokenStream
init|=
name|tokenizerChain
operator|.
name|getTokenizerFactory
argument_list|()
operator|.
name|create
argument_list|(
operator|new
name|StringReader
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
name|analyzeTokenStream
argument_list|(
name|tokenStream
argument_list|)
decl_stmt|;
name|namedList
operator|.
name|add
argument_list|(
name|tokenStream
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|convertTokensToNamedLists
argument_list|(
name|tokens
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|ListBasedTokenStream
name|listBasedTokenStream
init|=
operator|new
name|ListBasedTokenStream
argument_list|(
name|tokens
argument_list|)
decl_stmt|;
for|for
control|(
name|TokenFilterFactory
name|tokenFilterFactory
range|:
name|tokenizerChain
operator|.
name|getTokenFilterFactories
argument_list|()
control|)
block|{
name|tokenStream
operator|=
name|tokenFilterFactory
operator|.
name|create
argument_list|(
name|listBasedTokenStream
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Token
argument_list|>
name|tokenList
init|=
name|analyzeTokenStream
argument_list|(
name|tokenStream
argument_list|)
decl_stmt|;
name|namedList
operator|.
name|add
argument_list|(
name|tokenStream
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|convertTokensToNamedLists
argument_list|(
name|tokenList
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|listBasedTokenStream
operator|=
operator|new
name|ListBasedTokenStream
argument_list|(
name|tokenList
argument_list|)
expr_stmt|;
block|}
return|return
name|namedList
return|;
block|}
comment|/**    * Analyzes the given text using the given analyzer and returns the produced tokens.    *    * @param value    The value to analyze.    * @param analyzer The analyzer to use.    *    * @return The produces token list.    */
DECL|method|analyzeValue
specifier|protected
name|List
argument_list|<
name|Token
argument_list|>
name|analyzeValue
parameter_list|(
name|String
name|value
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
block|{
name|TokenStream
name|tokenStream
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
literal|""
argument_list|,
operator|new
name|StringReader
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|analyzeTokenStream
argument_list|(
name|tokenStream
argument_list|)
return|;
block|}
comment|/**    * Analyzes the given TokenStream, collecting the Tokens it produces.    *    * @param tokenStream TokenStream to analyze    *    * @return List of tokens produced from the TokenStream    */
DECL|method|analyzeTokenStream
specifier|private
name|List
argument_list|<
name|Token
argument_list|>
name|analyzeTokenStream
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|>
argument_list|()
decl_stmt|;
name|Token
name|reusableToken
init|=
operator|new
name|Token
argument_list|()
decl_stmt|;
name|Token
name|token
init|=
literal|null
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|tokenStream
operator|.
name|next
argument_list|(
name|reusableToken
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|tokens
operator|.
name|add
argument_list|(
operator|(
name|Token
operator|)
name|token
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error occured while iterating over tokenstream"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
return|return
name|tokens
return|;
block|}
comment|/**    * Converts the list of Tokens to a list of NamedLists representing the tokens.    *    * @param tokens  Tokens to convert    * @param context The analysis context    *    * @return List of NamedLists containing the relevant information taken from the tokens    */
DECL|method|convertTokensToNamedLists
specifier|private
name|List
argument_list|<
name|NamedList
argument_list|>
name|convertTokensToNamedLists
parameter_list|(
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
parameter_list|,
name|AnalysisContext
name|context
parameter_list|)
block|{
name|List
argument_list|<
name|NamedList
argument_list|>
name|tokensNamedLists
init|=
operator|new
name|ArrayList
argument_list|<
name|NamedList
argument_list|>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|tokens
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Token
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Token
name|o1
parameter_list|,
name|Token
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|endOffset
argument_list|()
operator|-
name|o2
operator|.
name|endOffset
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|int
name|position
init|=
literal|0
decl_stmt|;
name|FieldType
name|fieldType
init|=
name|context
operator|.
name|getFieldType
argument_list|()
decl_stmt|;
for|for
control|(
name|Token
name|token
range|:
name|tokens
control|)
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|tokenNamedList
init|=
operator|new
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|text
init|=
name|fieldType
operator|.
name|indexedToReadable
argument_list|(
name|token
operator|.
name|term
argument_list|()
argument_list|)
decl_stmt|;
name|tokenNamedList
operator|.
name|add
argument_list|(
literal|"text"
argument_list|,
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|text
operator|.
name|equals
argument_list|(
name|token
operator|.
name|term
argument_list|()
argument_list|)
condition|)
block|{
name|tokenNamedList
operator|.
name|add
argument_list|(
literal|"raw_text"
argument_list|,
name|token
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tokenNamedList
operator|.
name|add
argument_list|(
literal|"type"
argument_list|,
name|token
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|tokenNamedList
operator|.
name|add
argument_list|(
literal|"start"
argument_list|,
name|token
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|tokenNamedList
operator|.
name|add
argument_list|(
literal|"end"
argument_list|,
name|token
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|position
operator|+=
name|token
operator|.
name|getPositionIncrement
argument_list|()
expr_stmt|;
name|tokenNamedList
operator|.
name|add
argument_list|(
literal|"position"
argument_list|,
name|position
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|getTermsToMatch
argument_list|()
operator|.
name|contains
argument_list|(
name|token
operator|.
name|term
argument_list|()
argument_list|)
condition|)
block|{
name|tokenNamedList
operator|.
name|add
argument_list|(
literal|"match"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|getPayload
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tokenNamedList
operator|.
name|add
argument_list|(
literal|"payload"
argument_list|,
name|token
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tokensNamedLists
operator|.
name|add
argument_list|(
name|tokenNamedList
argument_list|)
expr_stmt|;
block|}
return|return
name|tokensNamedLists
return|;
block|}
comment|// ================================================= Inner classes =================================================
comment|/**    * TokenStream that iterates over a list of pre-existing Tokens    */
DECL|class|ListBasedTokenStream
specifier|protected
specifier|static
class|class
name|ListBasedTokenStream
extends|extends
name|TokenStream
block|{
DECL|field|tokenIterator
specifier|private
specifier|final
name|Iterator
argument_list|<
name|Token
argument_list|>
name|tokenIterator
decl_stmt|;
comment|/**      * Creates a new ListBasedTokenStream which uses the given tokens as its token source.      *      * @param tokens Source of tokens to be used      */
DECL|method|ListBasedTokenStream
name|ListBasedTokenStream
parameter_list|(
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
parameter_list|)
block|{
name|tokenIterator
operator|=
name|tokens
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
DECL|method|next
specifier|public
name|Token
name|next
parameter_list|(
name|Token
name|token
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|tokenIterator
operator|.
name|hasNext
argument_list|()
operator|)
condition|?
name|tokenIterator
operator|.
name|next
argument_list|()
else|:
literal|null
return|;
block|}
block|}
comment|/**    * Serves as the context of an analysis process. This context contains the following constructs    */
DECL|class|AnalysisContext
specifier|protected
specifier|static
class|class
name|AnalysisContext
block|{
DECL|field|fieldName
specifier|private
specifier|final
name|String
name|fieldName
decl_stmt|;
DECL|field|fieldType
specifier|private
specifier|final
name|FieldType
name|fieldType
decl_stmt|;
DECL|field|analyzer
specifier|private
specifier|final
name|Analyzer
name|analyzer
decl_stmt|;
DECL|field|termsToMatch
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|termsToMatch
decl_stmt|;
comment|/**      * Constructs a new AnalysisContext with a given field tpe, analyzer and termsToMatch. By default the field name in      * this context will be {@code null}. During the analysis processs, The produced tokens will be compaired to the      * termes in the {@code termsToMatch} set. When found, these tokens will be marked as a match.      *      * @param fieldType    The type of the field the analysis is performed on.      * @param analyzer     The analyzer to be used.      * @param termsToMatch Holds all the terms that should match during the analysis process.      */
DECL|method|AnalysisContext
specifier|public
name|AnalysisContext
parameter_list|(
name|FieldType
name|fieldType
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|termsToMatch
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|fieldType
argument_list|,
name|analyzer
argument_list|,
name|termsToMatch
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs an AnalysisContext with a given field name, field type and analyzer. By default this context will hold      * no terms to match      *      * @param fieldName The name of the field the analysis is performed on (may be {@code nuill}).      * @param fieldType The type of the field the analysis is performed on.      * @param analyzer  The analyzer to be used during the analysis process.      *      * @see #AnalysisContext(String, org.apache.solr.schema.FieldType, org.apache.lucene.analysis.Analyzer,      *      java.util.Set)      */
DECL|method|AnalysisContext
specifier|public
name|AnalysisContext
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|FieldType
name|fieldType
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
block|{
name|this
argument_list|(
name|fieldName
argument_list|,
name|fieldType
argument_list|,
name|analyzer
argument_list|,
name|Collections
operator|.
name|EMPTY_SET
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a new AnalysisContext with a given field tpe, analyzer and termsToMatch. During the analysis processs,      * The produced tokens will be compaired to the termes in the {@codce termsToMatch} set. When found, these tokens      * will be marked as a match.      *      * @param fieldName    The name of the field the analysis is performed on (may be {@code null}).      * @param fieldType    The type of the field the analysis is performed on.      * @param analyzer     The analyzer to be used.      * @param termsToMatch Holds all the terms that should match during the analysis process.      */
DECL|method|AnalysisContext
specifier|public
name|AnalysisContext
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|FieldType
name|fieldType
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|termsToMatch
parameter_list|)
block|{
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
name|this
operator|.
name|fieldType
operator|=
name|fieldType
expr_stmt|;
name|this
operator|.
name|analyzer
operator|=
name|analyzer
expr_stmt|;
name|this
operator|.
name|termsToMatch
operator|=
name|termsToMatch
expr_stmt|;
block|}
DECL|method|getFieldName
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|fieldName
return|;
block|}
DECL|method|getFieldType
specifier|public
name|FieldType
name|getFieldType
parameter_list|()
block|{
return|return
name|fieldType
return|;
block|}
DECL|method|getAnalyzer
specifier|public
name|Analyzer
name|getAnalyzer
parameter_list|()
block|{
return|return
name|analyzer
return|;
block|}
DECL|method|getTermsToMatch
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getTermsToMatch
parameter_list|()
block|{
return|return
name|termsToMatch
return|;
block|}
block|}
block|}
end_class
end_unit
