begin_unit
begin_comment
comment|/**  * Copyright 2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.request
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|XML
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|DocList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|DocIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|DocSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_comment
comment|/**  * @author yonik  * @version $Id$  */
end_comment
begin_class
DECL|class|XMLWriter
specifier|final
specifier|public
class|class
name|XMLWriter
block|{
comment|//
comment|// static thread safe part
comment|//
DECL|field|XML_START1
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|XML_START1
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
DECL|field|XML_STYLESHEET
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|XML_STYLESHEET
init|=
literal|"<?xml-stylesheet type=\"text/xsl\" href=\"/admin/"
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
DECL|field|XML_STYLESHEET_END
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|XML_STYLESHEET_END
init|=
literal|".xsl\"?>\n"
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
DECL|field|XML_START2_SCHEMA
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|XML_START2_SCHEMA
init|=
operator|(
literal|"<response xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
operator|+
literal|" xsi:noNamespaceSchemaLocation=\"http://pi.cnet.com/cnet-search/response.xsd\">\n"
operator|)
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
DECL|field|XML_START2_NOSCHEMA
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|XML_START2_NOSCHEMA
init|=
operator|(
literal|"<response>\n"
operator|)
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
DECL|method|writeResponse
specifier|public
specifier|static
name|void
name|writeResponse
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|IOException
block|{
comment|// get total time up until now
name|int
name|qtime
init|=
call|(
name|int
call|)
argument_list|(
name|rsp
operator|.
name|getEndTime
argument_list|()
operator|-
name|req
operator|.
name|getStartTime
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|ver
init|=
name|req
operator|.
name|getParam
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|XML_START1
argument_list|)
expr_stmt|;
name|String
name|stylesheet
init|=
name|req
operator|.
name|getParam
argument_list|(
literal|"stylesheet"
argument_list|)
decl_stmt|;
if|if
condition|(
name|stylesheet
operator|!=
literal|null
operator|&&
name|stylesheet
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|XML_STYLESHEET
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|stylesheet
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|XML_STYLESHEET_END
argument_list|)
expr_stmt|;
block|}
name|String
name|noSchema
init|=
name|req
operator|.
name|getParam
argument_list|(
literal|"noSchema"
argument_list|)
decl_stmt|;
comment|// todo - change when schema becomes available?
if|if
condition|(
literal|false
operator|&&
name|noSchema
operator|==
literal|null
condition|)
name|writer
operator|.
name|write
argument_list|(
name|XML_START2_SCHEMA
argument_list|)
expr_stmt|;
else|else
name|writer
operator|.
name|write
argument_list|(
name|XML_START2_NOSCHEMA
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"<responseHeader><status>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
comment|// it's 0 (success) if we got this far...
name|writer
operator|.
name|write
argument_list|(
literal|"</status><QTime>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
operator|(
name|int
operator|)
name|qtime
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</QTime></responseHeader>\n"
argument_list|)
expr_stmt|;
comment|//
comment|// create an instance for each request to handle
comment|// non-thread safe stuff (indentation levels, etc)
comment|// and to encapsulate writer, schema, and searcher so
comment|// they don't have to be passed around in every function.
comment|//
name|XMLWriter
name|xw
init|=
operator|new
name|XMLWriter
argument_list|(
name|writer
argument_list|,
name|req
operator|.
name|getSchema
argument_list|()
argument_list|,
name|req
operator|.
name|getSearcher
argument_list|()
argument_list|,
name|ver
argument_list|)
decl_stmt|;
name|xw
operator|.
name|defaultFieldList
operator|=
name|rsp
operator|.
name|getReturnFields
argument_list|()
expr_stmt|;
name|String
name|indent
init|=
name|req
operator|.
name|getParam
argument_list|(
literal|"indent"
argument_list|)
decl_stmt|;
if|if
condition|(
name|indent
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|indent
argument_list|)
operator|||
literal|"off"
operator|.
name|equals
argument_list|(
name|indent
argument_list|)
condition|)
block|{
name|xw
operator|.
name|setIndent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xw
operator|.
name|setIndent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|NamedList
name|lst
init|=
name|rsp
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|int
name|sz
init|=
name|lst
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|xw
operator|.
name|writeVal
argument_list|(
name|lst
operator|.
name|getName
argument_list|(
name|i
argument_list|)
argument_list|,
name|lst
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|"\n</response>\n"
argument_list|)
expr_stmt|;
block|}
comment|////////////////////////////////////////////////////////////
comment|// request instance specific (non-static, not shared between threads)
comment|////////////////////////////////////////////////////////////
DECL|field|writer
specifier|private
specifier|final
name|Writer
name|writer
decl_stmt|;
DECL|field|schema
specifier|private
specifier|final
name|IndexSchema
name|schema
decl_stmt|;
comment|// needed to write fields of docs
DECL|field|searcher
specifier|private
specifier|final
name|SolrIndexSearcher
name|searcher
decl_stmt|;
comment|// needed to retrieve docs
DECL|field|level
specifier|private
name|int
name|level
decl_stmt|;
DECL|field|defaultIndent
specifier|private
name|boolean
name|defaultIndent
init|=
literal|false
decl_stmt|;
DECL|field|doIndent
specifier|private
name|boolean
name|doIndent
init|=
literal|false
decl_stmt|;
comment|// fieldList... the set of fields to return for each document
DECL|field|defaultFieldList
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|defaultFieldList
decl_stmt|;
comment|// if a list smaller than this threshold is encountered, elements
comment|// will be written on the same line.
comment|// maybe constructed types should always indent first?
DECL|field|indentThreshold
specifier|private
specifier|final
name|int
name|indentThreshold
init|=
literal|0
decl_stmt|;
DECL|field|version
specifier|private
specifier|final
name|int
name|version
decl_stmt|;
comment|// temporary working objects...
comment|// be careful not to use these recursively...
DECL|field|tlst
specifier|private
specifier|final
name|ArrayList
name|tlst
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
DECL|field|cal
specifier|private
specifier|final
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"GMT"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|sb
specifier|private
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
DECL|method|XMLWriter
name|XMLWriter
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|IndexSchema
name|schema
parameter_list|,
name|SolrIndexSearcher
name|searcher
parameter_list|,
name|String
name|version
parameter_list|)
block|{
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|searcher
operator|=
name|searcher
expr_stmt|;
name|float
name|ver
init|=
name|version
operator|==
literal|null
condition|?
literal|2.1f
else|:
name|Float
operator|.
name|parseFloat
argument_list|(
name|version
argument_list|)
decl_stmt|;
name|this
operator|.
name|version
operator|=
call|(
name|int
call|)
argument_list|(
name|ver
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Functions to manipulate the current logical nesting level.
comment|// Any indentation will be partially based on level.
comment|//
DECL|method|setLevel
specifier|public
name|void
name|setLevel
parameter_list|(
name|int
name|level
parameter_list|)
block|{
name|this
operator|.
name|level
operator|=
name|level
expr_stmt|;
block|}
DECL|method|level
specifier|public
name|int
name|level
parameter_list|()
block|{
return|return
name|level
return|;
block|}
DECL|method|incLevel
specifier|public
name|int
name|incLevel
parameter_list|()
block|{
return|return
operator|++
name|level
return|;
block|}
DECL|method|decLevel
specifier|public
name|int
name|decLevel
parameter_list|()
block|{
return|return
operator|--
name|level
return|;
block|}
DECL|method|setIndent
specifier|public
name|void
name|setIndent
parameter_list|(
name|boolean
name|doIndent
parameter_list|)
block|{
name|this
operator|.
name|doIndent
operator|=
name|doIndent
expr_stmt|;
name|defaultIndent
operator|=
name|doIndent
expr_stmt|;
block|}
DECL|method|writeAttr
specifier|public
name|void
name|writeAttr
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"=\""
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|startTag
specifier|public
name|void
name|startTag
parameter_list|(
name|String
name|tag
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|closeTag
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|doIndent
condition|)
name|indent
argument_list|()
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|tag
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|" name=\""
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|closeTag
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"\"/>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|closeTag
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|field|indentArr
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|indentArr
init|=
operator|new
name|String
index|[]
block|{
literal|"\n"
block|,
literal|"\n "
block|,
literal|"\n  "
block|,
literal|"\n\t"
block|,
literal|"\n\t "
block|,
literal|"\n\t  "
block|,
comment|// could skip this one (the only 3 char seq)
literal|"\n\t\t"
block|}
decl_stmt|;
DECL|method|indent
specifier|public
name|void
name|indent
parameter_list|()
throws|throws
name|IOException
block|{
name|indent
argument_list|(
name|level
argument_list|)
expr_stmt|;
block|}
DECL|method|indent
specifier|public
name|void
name|indent
parameter_list|(
name|int
name|lev
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|arrsz
init|=
name|indentArr
operator|.
name|length
operator|-
literal|1
decl_stmt|;
comment|// another option would be lev % arrsz (wrap around)
name|String
name|istr
init|=
name|indentArr
index|[
name|lev
operator|>
name|arrsz
condition|?
name|arrsz
else|:
name|lev
index|]
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|istr
argument_list|)
expr_stmt|;
block|}
DECL|field|fieldnameComparator
specifier|private
specifier|static
specifier|final
name|Comparator
name|fieldnameComparator
init|=
operator|new
name|Comparator
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o
parameter_list|,
name|Object
name|o1
parameter_list|)
block|{
name|Field
name|f1
init|=
operator|(
name|Field
operator|)
name|o
decl_stmt|;
name|Field
name|f2
init|=
operator|(
name|Field
operator|)
name|o1
decl_stmt|;
name|int
name|cmp
init|=
name|f1
operator|.
name|name
argument_list|()
operator|.
name|compareTo
argument_list|(
name|f2
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|cmp
return|;
comment|// note - the sort is stable, so this should not have affected the ordering
comment|// of fields with the same name w.r.t eachother.
block|}
block|}
decl_stmt|;
DECL|method|writeDoc
specifier|public
specifier|final
name|void
name|writeDoc
parameter_list|(
name|String
name|name
parameter_list|,
name|Document
name|doc
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|returnFields
parameter_list|,
name|float
name|score
parameter_list|,
name|boolean
name|includeScore
parameter_list|)
throws|throws
name|IOException
block|{
name|startTag
argument_list|(
literal|"doc"
argument_list|,
name|name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
if|if
condition|(
name|includeScore
condition|)
block|{
name|writeFloat
argument_list|(
literal|"score"
argument_list|,
name|score
argument_list|)
expr_stmt|;
block|}
comment|// Lucene Documents have multivalued types as multiple fields
comment|// with the same name.
comment|// The XML needs to represent these as
comment|// an array.  The fastest way to detect multiple fields
comment|// with the same name is to sort them first.
name|Enumeration
name|ee
init|=
name|doc
operator|.
name|fields
argument_list|()
decl_stmt|;
comment|// using global tlst here, so we shouldn't call any other
comment|// function that uses it until we are done.
name|tlst
operator|.
name|clear
argument_list|()
expr_stmt|;
while|while
condition|(
name|ee
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|Field
name|ff
init|=
operator|(
name|Field
operator|)
name|ee
operator|.
name|nextElement
argument_list|()
decl_stmt|;
comment|// skip this field if it is not a field to be returned.
if|if
condition|(
name|returnFields
operator|!=
literal|null
operator|&&
operator|!
name|returnFields
operator|.
name|contains
argument_list|(
name|ff
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|tlst
operator|.
name|add
argument_list|(
name|ff
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|tlst
argument_list|,
name|fieldnameComparator
argument_list|)
expr_stmt|;
name|int
name|sz
init|=
name|tlst
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|fidx1
init|=
literal|0
decl_stmt|,
name|fidx2
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|fidx1
operator|<
name|sz
condition|)
block|{
name|Field
name|f1
init|=
operator|(
name|Field
operator|)
name|tlst
operator|.
name|get
argument_list|(
name|fidx1
argument_list|)
decl_stmt|;
name|String
name|fname
init|=
name|f1
operator|.
name|name
argument_list|()
decl_stmt|;
comment|// find the end of fields with this name
name|fidx2
operator|=
name|fidx1
operator|+
literal|1
expr_stmt|;
while|while
condition|(
name|fidx2
operator|<
name|sz
operator|&&
name|fname
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Field
operator|)
name|tlst
operator|.
name|get
argument_list|(
name|fidx2
argument_list|)
operator|)
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|fidx2
operator|++
expr_stmt|;
block|}
comment|/***       // more efficient to use getFieldType instead of       // getField since that way dynamic fields won't have       // to create a SchemaField on the fly.       FieldType ft = schema.getFieldType(fname);       ***/
name|SchemaField
name|sf
init|=
name|schema
operator|.
name|getField
argument_list|(
name|fname
argument_list|)
decl_stmt|;
if|if
condition|(
name|fidx1
operator|+
literal|1
operator|==
name|fidx2
condition|)
block|{
comment|// single field value
if|if
condition|(
name|version
operator|>=
literal|2100
operator|&&
name|sf
operator|.
name|multiValued
argument_list|()
condition|)
block|{
name|startTag
argument_list|(
literal|"arr"
argument_list|,
name|fname
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doIndent
operator|=
literal|false
expr_stmt|;
name|sf
operator|.
name|write
argument_list|(
name|this
argument_list|,
literal|null
argument_list|,
name|f1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</arr>"
argument_list|)
expr_stmt|;
name|doIndent
operator|=
name|defaultIndent
expr_stmt|;
block|}
else|else
block|{
name|sf
operator|.
name|write
argument_list|(
name|this
argument_list|,
name|f1
operator|.
name|name
argument_list|()
argument_list|,
name|f1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// multiple fields with same name detected
name|startTag
argument_list|(
literal|"arr"
argument_list|,
name|fname
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
name|doIndent
operator|=
literal|false
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|fidx1
init|;
name|i
operator|<
name|fidx2
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|defaultIndent
operator|&&
operator|++
name|cnt
operator|==
literal|4
condition|)
block|{
comment|// only indent every 4th item
name|indent
argument_list|()
expr_stmt|;
name|cnt
operator|=
literal|0
expr_stmt|;
block|}
name|sf
operator|.
name|write
argument_list|(
name|this
argument_list|,
literal|null
argument_list|,
operator|(
name|Field
operator|)
name|tlst
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|decLevel
argument_list|()
expr_stmt|;
comment|// if (doIndent) indent();
name|writer
operator|.
name|write
argument_list|(
literal|"</arr>"
argument_list|)
expr_stmt|;
comment|// doIndent=true;
name|doIndent
operator|=
name|defaultIndent
expr_stmt|;
block|}
name|fidx1
operator|=
name|fidx2
expr_stmt|;
block|}
name|decLevel
argument_list|()
expr_stmt|;
if|if
condition|(
name|doIndent
condition|)
name|indent
argument_list|()
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</doc>"
argument_list|)
expr_stmt|;
block|}
DECL|method|writeDocList
specifier|public
specifier|final
name|void
name|writeDocList
parameter_list|(
name|String
name|name
parameter_list|,
name|DocList
name|ids
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|includeScore
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
name|includeScore
operator|=
name|fields
operator|.
name|contains
argument_list|(
literal|"score"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fields
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
operator|(
name|fields
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|includeScore
operator|)
operator|||
name|fields
operator|.
name|contains
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|fields
operator|=
literal|null
expr_stmt|;
comment|// null means return all stored fields
block|}
block|}
name|int
name|sz
init|=
name|ids
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|doIndent
condition|)
name|indent
argument_list|()
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"<result"
argument_list|)
expr_stmt|;
name|writeAttr
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|writeAttr
argument_list|(
literal|"numFound"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|ids
operator|.
name|matches
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writeAttr
argument_list|(
literal|"start"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|ids
operator|.
name|offset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeScore
condition|)
block|{
name|writeAttr
argument_list|(
literal|"maxScore"
argument_list|,
name|Float
operator|.
name|toString
argument_list|(
name|ids
operator|.
name|maxScore
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sz
operator|==
literal|0
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"/>"
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
block|}
name|incLevel
argument_list|()
expr_stmt|;
name|DocIterator
name|iterator
init|=
name|ids
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|int
name|id
init|=
name|iterator
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|writeDoc
argument_list|(
literal|null
argument_list|,
name|doc
argument_list|,
name|fields
argument_list|,
operator|(
name|includeScore
condition|?
name|iterator
operator|.
name|score
argument_list|()
else|:
literal|0.0f
operator|)
argument_list|,
name|includeScore
argument_list|)
expr_stmt|;
block|}
name|decLevel
argument_list|()
expr_stmt|;
if|if
condition|(
name|doIndent
condition|)
name|indent
argument_list|()
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</result>"
argument_list|)
expr_stmt|;
block|}
DECL|method|writeVal
specifier|public
name|void
name|writeVal
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|val
parameter_list|)
throws|throws
name|IOException
block|{
comment|// if there get to be enough types, perhaps hashing on the type
comment|// to get a handler might be faster (but types must be exact to do that...)
comment|// go in order of most common to least common
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|writeNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|String
condition|)
block|{
name|writeStr
argument_list|(
name|name
argument_list|,
operator|(
name|String
operator|)
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Integer
condition|)
block|{
comment|// it would be slower to pass the int ((Integer)val).intValue()
name|writeInt
argument_list|(
name|name
argument_list|,
name|val
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Boolean
condition|)
block|{
comment|// could be optimized... only two vals
name|writeBool
argument_list|(
name|name
argument_list|,
name|val
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Long
condition|)
block|{
name|writeLong
argument_list|(
name|name
argument_list|,
name|val
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Date
condition|)
block|{
name|writeDate
argument_list|(
name|name
argument_list|,
operator|(
name|Date
operator|)
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Float
condition|)
block|{
comment|// we pass the float instead of using toString() because
comment|// it may need special formatting. same for double.
name|writeFloat
argument_list|(
name|name
argument_list|,
operator|(
operator|(
name|Float
operator|)
name|val
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Double
condition|)
block|{
name|writeDouble
argument_list|(
name|name
argument_list|,
operator|(
operator|(
name|Double
operator|)
name|val
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Document
condition|)
block|{
name|writeDoc
argument_list|(
name|name
argument_list|,
operator|(
name|Document
operator|)
name|val
argument_list|,
literal|null
argument_list|,
literal|0.0f
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|DocList
condition|)
block|{
comment|// requires access to IndexReader
name|writeDocList
argument_list|(
name|name
argument_list|,
operator|(
name|DocList
operator|)
name|val
argument_list|,
name|defaultFieldList
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|DocSet
condition|)
block|{
comment|// how do we know what fields to read?
comment|// todo: have a DocList/DocSet wrapper that
comment|// restricts the fields to write...?
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Map
condition|)
block|{
name|writeMap
argument_list|(
name|name
argument_list|,
operator|(
name|Map
operator|)
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|NamedList
condition|)
block|{
name|writeNamedList
argument_list|(
name|name
argument_list|,
operator|(
name|NamedList
operator|)
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Collection
condition|)
block|{
name|writeArray
argument_list|(
name|name
argument_list|,
operator|(
name|Collection
operator|)
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Object
index|[]
condition|)
block|{
name|writeArray
argument_list|(
name|name
argument_list|,
operator|(
name|Object
index|[]
operator|)
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// default...
name|writeStr
argument_list|(
name|name
argument_list|,
name|val
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|':'
operator|+
name|val
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//
comment|// Generic compound types
comment|//
DECL|method|writeNamedList
specifier|public
name|void
name|writeNamedList
parameter_list|(
name|String
name|name
parameter_list|,
name|NamedList
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|val
operator|.
name|size
argument_list|()
decl_stmt|;
name|startTag
argument_list|(
literal|"lst"
argument_list|,
name|name
argument_list|,
name|sz
operator|<=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|sz
operator|<
name|indentThreshold
condition|)
block|{
name|doIndent
operator|=
literal|false
expr_stmt|;
block|}
name|incLevel
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|writeVal
argument_list|(
name|val
operator|.
name|getName
argument_list|(
name|i
argument_list|)
argument_list|,
name|val
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|decLevel
argument_list|()
expr_stmt|;
if|if
condition|(
name|sz
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|doIndent
condition|)
name|indent
argument_list|()
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</lst>"
argument_list|)
expr_stmt|;
block|}
block|}
comment|//A map is currently represented as a named list
DECL|method|writeMap
specifier|public
name|void
name|writeMap
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
name|map
init|=
name|val
decl_stmt|;
name|int
name|sz
init|=
name|map
operator|.
name|size
argument_list|()
decl_stmt|;
name|startTag
argument_list|(
literal|"lst"
argument_list|,
name|name
argument_list|,
name|sz
operator|<=
literal|0
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|entry
range|:
operator|(
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|>
operator|)
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// possible class-cast exception here...
name|String
name|k
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|v
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// if (sz<indentThreshold) indent();
name|writeVal
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
name|decLevel
argument_list|()
expr_stmt|;
if|if
condition|(
name|sz
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|doIndent
condition|)
name|indent
argument_list|()
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</lst>"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeArray
specifier|public
name|void
name|writeArray
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
index|[]
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writeArray
argument_list|(
name|name
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|writeArray
specifier|public
name|void
name|writeArray
parameter_list|(
name|String
name|name
parameter_list|,
name|Collection
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|val
operator|.
name|size
argument_list|()
decl_stmt|;
name|startTag
argument_list|(
literal|"arr"
argument_list|,
name|name
argument_list|,
name|sz
operator|<=
literal|0
argument_list|)
expr_stmt|;
name|incLevel
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|val
control|)
block|{
comment|// if (sz<indentThreshold) indent();
name|writeVal
argument_list|(
literal|null
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
name|decLevel
argument_list|()
expr_stmt|;
if|if
condition|(
name|sz
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|doIndent
condition|)
name|indent
argument_list|()
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</arr>"
argument_list|)
expr_stmt|;
block|}
block|}
comment|//
comment|// Primitive types
comment|//
DECL|method|writeNull
specifier|public
name|void
name|writeNull
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|writePrim
argument_list|(
literal|"null"
argument_list|,
name|name
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|writeStr
specifier|public
name|void
name|writeStr
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writePrim
argument_list|(
literal|"str"
argument_list|,
name|name
argument_list|,
name|val
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|writeInt
specifier|public
name|void
name|writeInt
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writePrim
argument_list|(
literal|"int"
argument_list|,
name|name
argument_list|,
name|val
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|writeInt
specifier|public
name|void
name|writeInt
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writeInt
argument_list|(
name|name
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|writeLong
specifier|public
name|void
name|writeLong
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writePrim
argument_list|(
literal|"long"
argument_list|,
name|name
argument_list|,
name|val
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|writeLong
specifier|public
name|void
name|writeLong
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writeLong
argument_list|(
name|name
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|writeBool
specifier|public
name|void
name|writeBool
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writePrim
argument_list|(
literal|"bool"
argument_list|,
name|name
argument_list|,
name|val
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|writeBool
specifier|public
name|void
name|writeBool
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writeBool
argument_list|(
name|name
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|writeFloat
specifier|public
name|void
name|writeFloat
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writePrim
argument_list|(
literal|"float"
argument_list|,
name|name
argument_list|,
name|val
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|writeFloat
specifier|public
name|void
name|writeFloat
parameter_list|(
name|String
name|name
parameter_list|,
name|float
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writeFloat
argument_list|(
name|name
argument_list|,
name|Float
operator|.
name|toString
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|writeDouble
specifier|public
name|void
name|writeDouble
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writePrim
argument_list|(
literal|"double"
argument_list|,
name|name
argument_list|,
name|val
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|writeDouble
specifier|public
name|void
name|writeDouble
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writeDouble
argument_list|(
name|name
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|writeDate
specifier|public
name|void
name|writeDate
parameter_list|(
name|String
name|name
parameter_list|,
name|Date
name|val
parameter_list|)
throws|throws
name|IOException
block|{
comment|// using a stringBuilder for numbers can be nice since
comment|// a temporary string isn't used (it's added directly to the
comment|// builder's buffer.
name|cal
operator|.
name|setTime
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|i
operator|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
operator|+
literal|1
expr_stmt|;
comment|// 0 based, so add 1
if|if
condition|(
name|i
operator|<
literal|10
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|i
operator|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
literal|10
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'T'
argument_list|)
expr_stmt|;
name|i
operator|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
expr_stmt|;
comment|// 24 hour time format
if|if
condition|(
name|i
operator|<
literal|10
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|i
operator|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
literal|10
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|i
operator|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
literal|10
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|i
operator|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
literal|100
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
literal|10
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// handle canonical format specifying fractional
comment|// seconds shall not end in '0'.  Given the slowness of
comment|// integer div/mod, simply checking the last character
comment|// is probably the fastest way to check.
name|int
name|lastIdx
init|=
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|sb
operator|.
name|charAt
argument_list|(
name|lastIdx
argument_list|)
operator|==
literal|'0'
condition|)
block|{
name|lastIdx
operator|--
expr_stmt|;
if|if
condition|(
name|sb
operator|.
name|charAt
argument_list|(
name|lastIdx
argument_list|)
operator|==
literal|'0'
condition|)
block|{
name|lastIdx
operator|--
expr_stmt|;
block|}
name|sb
operator|.
name|setLength
argument_list|(
name|lastIdx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|'Z'
argument_list|)
expr_stmt|;
name|writeDate
argument_list|(
name|name
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|writeDate
specifier|public
name|void
name|writeDate
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writePrim
argument_list|(
literal|"date"
argument_list|,
name|name
argument_list|,
name|val
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// OPT - specific writeInt, writeFloat, methods might be faster since
comment|// there would be less write calls (write("<int name=\"" + name + ... +</int>)
comment|//
DECL|method|writePrim
specifier|public
name|void
name|writePrim
parameter_list|(
name|String
name|tag
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|,
name|boolean
name|escape
parameter_list|)
throws|throws
name|IOException
block|{
comment|// OPT - we could use a temp char[] (or a StringBuilder) and if the
comment|// size was small enough to fit (if escape==false we can calc exact size)
comment|// then we could put things directly in the temp buf.
comment|// need to see what percent of CPU this takes up first though...
comment|// Could test a reusable StringBuilder...
comment|// is this needed here???
comment|// Only if a fieldtype calls writeStr or something
comment|// with a null val instead of calling writeNull
comment|/***     if (val==null) {       if (name==null) writer.write("<null/>");       else writer.write("<null name=\"" + name + "/>");     }     ***/
name|int
name|contentLen
init|=
name|val
operator|.
name|length
argument_list|()
decl_stmt|;
name|startTag
argument_list|(
name|tag
argument_list|,
name|name
argument_list|,
name|contentLen
operator|==
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|contentLen
operator|==
literal|0
condition|)
return|return;
if|if
condition|(
name|escape
condition|)
block|{
name|XML
operator|.
name|escapeCharData
argument_list|(
name|val
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
name|val
argument_list|,
literal|0
argument_list|,
name|contentLen
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|"</"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
