begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.request
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Searcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrResponse
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|EmbeddedSolrServer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|DocSlice
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|DocumentBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|Template
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|VelocityContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|app
operator|.
name|VelocityEngine
import|;
end_import
begin_comment
comment|/**  *<p> A response writer that uses velocity template for response creation.  *     Possible request parameters:</p>  *<ul>  *<li>   *<b>vl.template:</b>   *     	   The name of the template file without .vm suffix.</li>  *<li>   *<b>vl.json:</b>   *         A name of a Javascript method. If set, the response is wrapped into this object.   *         useful for JSON requests.   *</li>  *<li>   *<b>vl.content:</b>   *         Specify a custom content type for the response. Default is "text/html" for standard requests,  *         and "text/x-json" for JSON requests.    *</li>  *<li>   *<b>vl.response:</b>   *         To provide an implementation of  {@link SolrResponse} inside the template,  *     	   specify the class name of the implementation. For convenience, it looks   *         inside the package "org.apache.solr.client.solrj.response", so you only   *         have to choose  eg.<i>QueryResponse, LikeResponse, MultiCoreResponse</i>.  *     	   Custom classes may be accessed using the full qualified class name,   *         eg.<i>my.custom.package.CustomResponse</i>	  *</li>  *</ul>  */
end_comment
begin_class
DECL|class|VelocityResponseWriter
specifier|public
class|class
name|VelocityResponseWriter
implements|implements
name|QueryResponseWriter
block|{
DECL|field|PARAMETER_TEMPLATE
specifier|private
specifier|static
specifier|final
name|String
name|PARAMETER_TEMPLATE
init|=
literal|"vl.template"
decl_stmt|;
DECL|field|PARAMETER_JSON
specifier|private
specifier|static
specifier|final
name|String
name|PARAMETER_JSON
init|=
literal|"vl.json"
decl_stmt|;
DECL|field|PARAMETER_RESPONSE
specifier|private
specifier|static
specifier|final
name|String
name|PARAMETER_RESPONSE
init|=
literal|"vl.response"
decl_stmt|;
DECL|field|PARAMETER_CONTENT_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|PARAMETER_CONTENT_TYPE
init|=
literal|"vl.content"
decl_stmt|;
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|SolrQueryRequest
name|request
parameter_list|,
name|SolrQueryResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
comment|// init velocity and get template
name|VelocityEngine
name|engine
init|=
operator|new
name|VelocityEngine
argument_list|()
decl_stmt|;
name|File
name|baseDir
init|=
operator|new
name|File
argument_list|(
name|request
operator|.
name|getCore
argument_list|()
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|getConfigDir
argument_list|()
argument_list|,
literal|"velocity"
argument_list|)
decl_stmt|;
name|engine
operator|.
name|setProperty
argument_list|(
name|VelocityEngine
operator|.
name|FILE_RESOURCE_LOADER_PATH
argument_list|,
name|baseDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|setProperty
argument_list|(
name|VelocityEngine
operator|.
name|RESOURCE_LOADER
argument_list|,
literal|"file"
argument_list|)
expr_stmt|;
name|Template
name|template
decl_stmt|;
try|try
block|{
name|template
operator|=
name|engine
operator|.
name|getTemplate
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|PARAMETER_TEMPLATE
argument_list|,
literal|"default"
argument_list|)
operator|+
literal|".vm"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
comment|// put raw response into context
name|VelocityContext
name|context
init|=
operator|new
name|VelocityContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"rawResponse"
argument_list|,
operator|new
name|RawResponseHelper
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
argument_list|)
expr_stmt|;
comment|// convert response if a class is specified
if|if
condition|(
name|request
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|PARAMETER_RESPONSE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|className
init|=
name|request
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|PARAMETER_RESPONSE
argument_list|)
decl_stmt|;
comment|// create SolrResponse using reflection
name|SolrResponse
name|solrResponse
decl_stmt|;
name|Object
name|object
decl_stmt|;
try|try
block|{
name|object
operator|=
name|request
operator|.
name|getCore
argument_list|()
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|newInstance
argument_list|(
name|className
argument_list|,
literal|"client.solrj.response."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to resolve response class \""
operator|+
name|className
operator|+
literal|"\": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|object
operator|instanceof
name|SolrResponse
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Class \""
operator|+
name|className
operator|+
literal|"\" doesn't implement SolrResponse!"
argument_list|)
throw|;
block|}
name|solrResponse
operator|=
operator|(
name|SolrResponse
operator|)
name|object
expr_stmt|;
comment|// inject the request into the response
name|solrResponse
operator|.
name|setResponse
argument_list|(
operator|new
name|EmbeddedSolrServer
argument_list|(
name|request
operator|.
name|getCore
argument_list|()
argument_list|)
operator|.
name|getParsedResponse
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
argument_list|)
expr_stmt|;
comment|// put it into the context
name|context
operator|.
name|put
argument_list|(
literal|"response"
argument_list|,
name|solrResponse
argument_list|)
expr_stmt|;
block|}
comment|// create output, optionally wrap it into a json object
if|if
condition|(
name|isWrappedResponse
argument_list|(
name|request
argument_list|)
condition|)
block|{
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|template
operator|.
name|merge
argument_list|(
name|context
argument_list|,
name|stringWriter
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|PARAMETER_JSON
argument_list|)
operator|+
literal|"("
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|getJSONWrap
argument_list|(
name|stringWriter
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|template
operator|.
name|merge
argument_list|(
name|context
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getContentType
specifier|public
name|String
name|getContentType
parameter_list|(
name|SolrQueryRequest
name|request
parameter_list|,
name|SolrQueryResponse
name|response
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|PARAMETER_CONTENT_TYPE
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|request
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|PARAMETER_CONTENT_TYPE
argument_list|)
return|;
block|}
if|if
condition|(
name|isWrappedResponse
argument_list|(
name|request
argument_list|)
condition|)
block|{
return|return
name|JSONResponseWriter
operator|.
name|CONTENT_TYPE_JSON_UTF8
return|;
block|}
return|return
literal|"text/html"
return|;
block|}
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{
comment|// TODO
block|}
DECL|method|isWrappedResponse
specifier|private
name|boolean
name|isWrappedResponse
parameter_list|(
name|SolrQueryRequest
name|request
parameter_list|)
block|{
return|return
name|request
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|PARAMETER_JSON
argument_list|)
operator|!=
literal|null
return|;
block|}
DECL|method|getJSONWrap
specifier|public
name|String
name|getJSONWrap
parameter_list|(
name|String
name|xmlResult
parameter_list|)
block|{
comment|// escape the double quotes and backslashes
name|String
name|replace1
init|=
name|xmlResult
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"\\\\\\\\"
argument_list|)
decl_stmt|;
name|replace1
operator|=
name|replace1
operator|.
name|replaceAll
argument_list|(
literal|"\\n"
argument_list|,
literal|"\\\\n"
argument_list|)
expr_stmt|;
name|replace1
operator|=
name|replace1
operator|.
name|replaceAll
argument_list|(
literal|"\\r"
argument_list|,
literal|"\\\\r"
argument_list|)
expr_stmt|;
name|String
name|replaced
init|=
name|replace1
operator|.
name|replaceAll
argument_list|(
literal|"\""
argument_list|,
literal|"\\\\\""
argument_list|)
decl_stmt|;
comment|// wrap it in a JSON object
return|return
literal|"{\"result\":\""
operator|+
name|replaced
operator|+
literal|"\"}"
return|;
block|}
comment|/** 	 * A helper class that provides convenient methods for the raw solr response. 	 */
DECL|class|RawResponseHelper
specifier|public
class|class
name|RawResponseHelper
block|{
DECL|field|searcher
specifier|private
name|Searcher
name|searcher
decl_stmt|;
DECL|field|response
specifier|private
name|SolrQueryResponse
name|response
decl_stmt|;
DECL|field|request
specifier|private
name|SolrQueryRequest
name|request
decl_stmt|;
DECL|method|RawResponseHelper
specifier|public
name|RawResponseHelper
parameter_list|(
name|SolrQueryRequest
name|request
parameter_list|,
name|SolrQueryResponse
name|response
parameter_list|)
block|{
name|this
operator|.
name|searcher
operator|=
name|request
operator|.
name|getSearcher
argument_list|()
expr_stmt|;
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
block|}
DECL|method|getResultIterator
specifier|public
name|Iterator
argument_list|<
name|SolrDocument
argument_list|>
name|getResultIterator
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|iterator
init|=
operator|(
operator|(
name|DocSlice
operator|)
name|response
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
operator|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|SolrDocument
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
name|SolrDocument
name|next
parameter_list|()
block|{
name|Document
name|document
init|=
literal|null
decl_stmt|;
name|SolrDocument
name|solrDocument
init|=
operator|new
name|SolrDocument
argument_list|()
decl_stmt|;
try|try
block|{
name|document
operator|=
name|searcher
operator|.
name|doc
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|DocumentBuilder
argument_list|(
name|request
operator|.
name|getSchema
argument_list|()
argument_list|)
operator|.
name|loadStoredFields
argument_list|(
name|solrDocument
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptIndexException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error converting lucene document into solr document!"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error converting lucene document into solr document!"
argument_list|)
throw|;
block|}
return|return
name|solrDocument
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{  				}
block|}
return|;
block|}
DECL|method|getRequestParameter
specifier|public
name|String
name|getRequestParameter
parameter_list|(
name|String
name|param
parameter_list|)
block|{
return|return
name|request
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|param
argument_list|)
return|;
block|}
DECL|method|getRequest
specifier|public
name|SolrQueryRequest
name|getRequest
parameter_list|()
block|{
return|return
name|request
return|;
block|}
DECL|method|getResponse
specifier|public
name|SolrQueryResponse
name|getResponse
parameter_list|()
block|{
return|return
name|response
return|;
block|}
block|}
block|}
end_class
end_unit
