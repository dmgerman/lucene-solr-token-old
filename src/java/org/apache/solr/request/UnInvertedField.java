begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.request
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldCache
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|BoundedTreeSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|StatsValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|FieldFacetStats
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|OpenBitSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import
begin_comment
comment|/**  *  * Final form of the un-inverted field:  *   Each document points to a list of term numbers that are contained in that document.  *  *   Term numbers are in sorted order, and are encoded as variable-length deltas from the  *   previous term number.  Real term numbers start at 2 since 0 and 1 are reserved.  A  *   term number of 0 signals the end of the termNumber list.  *  *   There is a single int[maxDoc()] which either contains a pointer into a byte[] for  *   the termNumber lists, or directly contains the termNumber list if it fits in the 4  *   bytes of an integer.  If the first byte in the integer is 1, the next 3 bytes  *   are a pointer into a byte[] where the termNumber list starts.  *  *   There are actually 256 byte arrays, to compensate for the fact that the pointers  *   into the byte arrays are only 3 bytes long.  The correct byte array for a document  *   is a function of it's id.  *  *   To save space and speed up faceting, any term that matches enough documents will  *   not be un-inverted... it will be skipped while building the un-inverted field structure,  *   and will use a set intersection method during faceting.  *  *   To further save memory, the terms (the actual string values) are not all stored in  *   memory, but a TermIndex is used to convert term numbers to term values only  *   for the terms needed after faceting has completed.  Only every 128th term value  *   is stored, along with it's corresponding term number, and this is used as an  *   index to find the closest term and iterate until the desired number is hit (very  *   much like Lucene's own internal term index).  *  */
end_comment
begin_class
DECL|class|UnInvertedField
specifier|public
class|class
name|UnInvertedField
block|{
DECL|field|TNUM_OFFSET
specifier|private
specifier|static
name|int
name|TNUM_OFFSET
init|=
literal|2
decl_stmt|;
DECL|class|TopTerm
specifier|static
class|class
name|TopTerm
block|{
DECL|field|term
name|Term
name|term
decl_stmt|;
DECL|field|termNum
name|int
name|termNum
decl_stmt|;
DECL|method|memSize
name|long
name|memSize
parameter_list|()
block|{
return|return
literal|8
operator|+
comment|// obj header
literal|8
operator|+
literal|8
operator|+
operator|(
name|term
operator|.
name|text
argument_list|()
operator|.
name|length
argument_list|()
operator|<<
literal|1
operator|)
operator|+
comment|//term
literal|4
return|;
comment|// int
block|}
block|}
DECL|field|field
name|String
name|field
decl_stmt|;
DECL|field|numTermsInField
name|int
name|numTermsInField
decl_stmt|;
DECL|field|termsInverted
name|int
name|termsInverted
decl_stmt|;
comment|// number of unique terms that were un-inverted
DECL|field|termInstances
name|long
name|termInstances
decl_stmt|;
comment|// total number of references to term numbers
DECL|field|ti
specifier|final
name|TermIndex
name|ti
decl_stmt|;
DECL|field|memsz
name|long
name|memsz
decl_stmt|;
DECL|field|total_time
name|int
name|total_time
decl_stmt|;
comment|// total time to uninvert the field
DECL|field|phase1_time
name|int
name|phase1_time
decl_stmt|;
comment|// time for phase1 of the uninvert process
DECL|field|use
specifier|final
name|AtomicLong
name|use
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
comment|// number of uses
DECL|field|index
name|int
index|[]
name|index
decl_stmt|;
DECL|field|tnums
name|byte
index|[]
index|[]
name|tnums
init|=
operator|new
name|byte
index|[
literal|256
index|]
index|[]
decl_stmt|;
DECL|field|maxTermCounts
name|int
index|[]
name|maxTermCounts
decl_stmt|;
DECL|field|bigTerms
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|TopTerm
argument_list|>
name|bigTerms
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Integer
argument_list|,
name|TopTerm
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|memSize
specifier|public
name|long
name|memSize
parameter_list|()
block|{
comment|// can cache the mem size since it shouldn't change
if|if
condition|(
name|memsz
operator|!=
literal|0
condition|)
return|return
name|memsz
return|;
name|long
name|sz
init|=
literal|8
operator|*
literal|8
operator|+
literal|32
decl_stmt|;
comment|// local fields
name|sz
operator|+=
name|bigTerms
operator|.
name|size
argument_list|()
operator|*
literal|64
expr_stmt|;
for|for
control|(
name|TopTerm
name|tt
range|:
name|bigTerms
operator|.
name|values
argument_list|()
control|)
block|{
name|sz
operator|+=
name|tt
operator|.
name|memSize
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|index
operator|!=
literal|null
condition|)
name|sz
operator|+=
name|index
operator|.
name|length
operator|*
literal|4
expr_stmt|;
if|if
condition|(
name|tnums
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|byte
index|[]
name|arr
range|:
name|tnums
control|)
if|if
condition|(
name|arr
operator|!=
literal|null
condition|)
name|sz
operator|+=
name|arr
operator|.
name|length
expr_stmt|;
block|}
if|if
condition|(
name|maxTermCounts
operator|!=
literal|null
condition|)
name|sz
operator|+=
name|maxTermCounts
operator|.
name|length
operator|*
literal|4
expr_stmt|;
name|sz
operator|+=
name|ti
operator|.
name|memSize
argument_list|()
expr_stmt|;
name|memsz
operator|=
name|sz
expr_stmt|;
return|return
name|sz
return|;
block|}
comment|/** Number of bytes to represent an unsigned int as a vint. */
DECL|method|vIntSize
specifier|static
name|int
name|vIntSize
parameter_list|(
name|int
name|x
parameter_list|)
block|{
if|if
condition|(
operator|(
name|x
operator|&
operator|(
literal|0xffffffff
operator|<<
operator|(
literal|7
operator|*
literal|1
operator|)
operator|)
operator|)
operator|==
literal|0
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|(
name|x
operator|&
operator|(
literal|0xffffffff
operator|<<
operator|(
literal|7
operator|*
literal|2
operator|)
operator|)
operator|)
operator|==
literal|0
condition|)
block|{
return|return
literal|2
return|;
block|}
if|if
condition|(
operator|(
name|x
operator|&
operator|(
literal|0xffffffff
operator|<<
operator|(
literal|7
operator|*
literal|3
operator|)
operator|)
operator|)
operator|==
literal|0
condition|)
block|{
return|return
literal|3
return|;
block|}
if|if
condition|(
operator|(
name|x
operator|&
operator|(
literal|0xffffffff
operator|<<
operator|(
literal|7
operator|*
literal|4
operator|)
operator|)
operator|)
operator|==
literal|0
condition|)
block|{
return|return
literal|4
return|;
block|}
return|return
literal|5
return|;
block|}
comment|// todo: if we know the size of the vInt already, we could do
comment|// a single switch on the size
DECL|method|writeInt
specifier|static
name|int
name|writeInt
parameter_list|(
name|int
name|x
parameter_list|,
name|byte
index|[]
name|arr
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
name|int
name|a
decl_stmt|;
name|a
operator|=
operator|(
name|x
operator|>>>
operator|(
literal|7
operator|*
literal|4
operator|)
operator|)
expr_stmt|;
if|if
condition|(
name|a
operator|!=
literal|0
condition|)
block|{
name|arr
index|[
name|pos
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|a
operator||
literal|0x80
argument_list|)
expr_stmt|;
block|}
name|a
operator|=
operator|(
name|x
operator|>>>
operator|(
literal|7
operator|*
literal|3
operator|)
operator|)
expr_stmt|;
if|if
condition|(
name|a
operator|!=
literal|0
condition|)
block|{
name|arr
index|[
name|pos
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|a
operator||
literal|0x80
argument_list|)
expr_stmt|;
block|}
name|a
operator|=
operator|(
name|x
operator|>>>
operator|(
literal|7
operator|*
literal|2
operator|)
operator|)
expr_stmt|;
if|if
condition|(
name|a
operator|!=
literal|0
condition|)
block|{
name|arr
index|[
name|pos
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|a
operator||
literal|0x80
argument_list|)
expr_stmt|;
block|}
name|a
operator|=
operator|(
name|x
operator|>>>
operator|(
literal|7
operator|*
literal|1
operator|)
operator|)
expr_stmt|;
if|if
condition|(
name|a
operator|!=
literal|0
condition|)
block|{
name|arr
index|[
name|pos
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|a
operator||
literal|0x80
argument_list|)
expr_stmt|;
block|}
name|arr
index|[
name|pos
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|x
operator|&
literal|0x7f
argument_list|)
expr_stmt|;
return|return
name|pos
return|;
block|}
DECL|method|UnInvertedField
specifier|public
name|UnInvertedField
parameter_list|(
name|String
name|field
parameter_list|,
name|SolrIndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|ti
operator|=
operator|new
name|TermIndex
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|uninvert
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
block|}
DECL|method|uninvert
specifier|private
name|void
name|uninvert
parameter_list|(
name|SolrIndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|IndexReader
name|reader
init|=
name|searcher
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|int
name|maxDoc
init|=
name|reader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
name|int
index|[]
name|index
init|=
operator|new
name|int
index|[
name|maxDoc
index|]
decl_stmt|;
comment|// immediate term numbers, or the index into the byte[] representing the last number
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
specifier|final
name|int
index|[]
name|lastTerm
init|=
operator|new
name|int
index|[
name|maxDoc
index|]
decl_stmt|;
comment|// last term we saw for this document
specifier|final
name|byte
index|[]
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|maxDoc
index|]
index|[]
decl_stmt|;
comment|// list of term numbers for the doc (delta encoded vInts)
name|maxTermCounts
operator|=
operator|new
name|int
index|[
literal|1024
index|]
expr_stmt|;
name|NumberedTermEnum
name|te
init|=
name|ti
operator|.
name|getEnumerator
argument_list|(
name|reader
argument_list|)
decl_stmt|;
comment|// threshold, over which we use set intersections instead of counting
comment|// to (1) save memory, and (2) speed up faceting.
comment|// Add 2 for testing purposes so that there will always be some terms under
comment|// the threshold even when the index is very small.
name|int
name|threshold
init|=
name|maxDoc
operator|/
literal|20
operator|+
literal|2
decl_stmt|;
comment|// threshold = 2000000000; //////////////////////////////// USE FOR TESTING
name|int
index|[]
name|docs
init|=
operator|new
name|int
index|[
literal|1000
index|]
decl_stmt|;
name|int
index|[]
name|freqs
init|=
operator|new
name|int
index|[
literal|1000
index|]
decl_stmt|;
comment|// we need a minimum of 9 bytes, but round up to 12 since the space would
comment|// be wasted with most allocators anyway.
name|byte
index|[]
name|tempArr
init|=
operator|new
name|byte
index|[
literal|12
index|]
decl_stmt|;
comment|//
comment|// enumerate all terms, and build an intermediate form of the un-inverted field.
comment|//
comment|// During this intermediate form, every document has a (potential) byte[]
comment|// and the int[maxDoc()] array either contains the termNumber list directly
comment|// or the *end* offset of the termNumber list in it's byte array (for faster
comment|// appending and faster creation of the final form).
comment|//
comment|// idea... if things are too large while building, we could do a range of docs
comment|// at a time (but it would be a fair amount slower to build)
comment|// could also do ranges in parallel to take advantage of multiple CPUs
comment|// OPTIONAL: remap the largest df terms to the lowest 128 (single byte)
comment|// values.  This requires going over the field first to find the most
comment|// frequent terms ahead of time.
for|for
control|(
init|;
condition|;
control|)
block|{
name|Term
name|t
init|=
name|te
operator|.
name|term
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
break|break;
name|int
name|termNum
init|=
name|te
operator|.
name|getTermNumber
argument_list|()
decl_stmt|;
if|if
condition|(
name|termNum
operator|>=
name|maxTermCounts
operator|.
name|length
condition|)
block|{
comment|// resize by doubling - for very large number of unique terms, expanding
comment|// by 4K and resultant GC will dominate uninvert times.  Resize at end if material
name|int
index|[]
name|newMaxTermCounts
init|=
operator|new
name|int
index|[
name|maxTermCounts
operator|.
name|length
operator|*
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|maxTermCounts
argument_list|,
literal|0
argument_list|,
name|newMaxTermCounts
argument_list|,
literal|0
argument_list|,
name|termNum
argument_list|)
expr_stmt|;
name|maxTermCounts
operator|=
name|newMaxTermCounts
expr_stmt|;
block|}
name|int
name|df
init|=
name|te
operator|.
name|docFreq
argument_list|()
decl_stmt|;
if|if
condition|(
name|df
operator|>=
name|threshold
condition|)
block|{
name|TopTerm
name|topTerm
init|=
operator|new
name|TopTerm
argument_list|()
decl_stmt|;
name|topTerm
operator|.
name|term
operator|=
name|t
expr_stmt|;
name|topTerm
operator|.
name|termNum
operator|=
name|termNum
expr_stmt|;
name|bigTerms
operator|.
name|put
argument_list|(
name|topTerm
operator|.
name|termNum
argument_list|,
name|topTerm
argument_list|)
expr_stmt|;
name|DocSet
name|set
init|=
name|searcher
operator|.
name|getDocSet
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|topTerm
operator|.
name|term
argument_list|)
argument_list|)
decl_stmt|;
name|maxTermCounts
index|[
name|termNum
index|]
operator|=
name|set
operator|.
name|size
argument_list|()
expr_stmt|;
name|te
operator|.
name|next
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|termsInverted
operator|++
expr_stmt|;
name|TermDocs
name|td
init|=
name|te
operator|.
name|getTermDocs
argument_list|()
decl_stmt|;
name|td
operator|.
name|seek
argument_list|(
name|te
argument_list|)
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|n
init|=
name|td
operator|.
name|read
argument_list|(
name|docs
argument_list|,
name|freqs
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|<=
literal|0
condition|)
break|break;
name|maxTermCounts
index|[
name|termNum
index|]
operator|+=
name|n
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|termInstances
operator|++
expr_stmt|;
name|int
name|doc
init|=
name|docs
index|[
name|i
index|]
decl_stmt|;
comment|// add 2 to the term number to make room for special reserved values:
comment|// 0 (end term) and 1 (index into byte array follows)
name|int
name|delta
init|=
name|termNum
operator|-
name|lastTerm
index|[
name|doc
index|]
operator|+
name|TNUM_OFFSET
decl_stmt|;
name|lastTerm
index|[
name|doc
index|]
operator|=
name|termNum
expr_stmt|;
name|int
name|val
init|=
name|index
index|[
name|doc
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|val
operator|&
literal|0xff
operator|)
operator|==
literal|1
condition|)
block|{
comment|// index into byte array (actually the end of
comment|// the doc-specific byte[] when building)
name|int
name|pos
init|=
name|val
operator|>>>
literal|8
decl_stmt|;
name|int
name|ilen
init|=
name|vIntSize
argument_list|(
name|delta
argument_list|)
decl_stmt|;
name|byte
index|[]
name|arr
init|=
name|bytes
index|[
name|doc
index|]
decl_stmt|;
name|int
name|newend
init|=
name|pos
operator|+
name|ilen
decl_stmt|;
if|if
condition|(
name|newend
operator|>
name|arr
operator|.
name|length
condition|)
block|{
comment|// We avoid a doubling strategy to lower memory usage.
comment|// this faceting method isn't for docs with many terms.
comment|// In hotspot, objects have 2 words of overhead, then fields, rounded up to a 64-bit boundary.
comment|// TODO: figure out what array lengths we can round up to w/o actually using more memory
comment|// (how much space does a byte[] take up?  Is data preceded by a 32 bit length only?
comment|// It should be safe to round up to the nearest 32 bits in any case.
name|int
name|newLen
init|=
operator|(
name|newend
operator|+
literal|3
operator|)
operator|&
literal|0xfffffffc
decl_stmt|;
comment|// 4 byte alignment
name|byte
index|[]
name|newarr
init|=
operator|new
name|byte
index|[
name|newLen
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|arr
argument_list|,
literal|0
argument_list|,
name|newarr
argument_list|,
literal|0
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|arr
operator|=
name|newarr
expr_stmt|;
name|bytes
index|[
name|doc
index|]
operator|=
name|newarr
expr_stmt|;
block|}
name|pos
operator|=
name|writeInt
argument_list|(
name|delta
argument_list|,
name|arr
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|index
index|[
name|doc
index|]
operator|=
operator|(
name|pos
operator|<<
literal|8
operator|)
operator||
literal|1
expr_stmt|;
comment|// update pointer to end index in byte[]
block|}
else|else
block|{
comment|// OK, this int has data in it... find the end (a zero starting byte - not
comment|// part of another number, hence not following a byte with the high bit set).
name|int
name|ipos
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|0
condition|)
block|{
name|ipos
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|val
operator|&
literal|0x0000ff80
operator|)
operator|==
literal|0
condition|)
block|{
name|ipos
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|val
operator|&
literal|0x00ff8000
operator|)
operator|==
literal|0
condition|)
block|{
name|ipos
operator|=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|val
operator|&
literal|0xff800000
operator|)
operator|==
literal|0
condition|)
block|{
name|ipos
operator|=
literal|3
expr_stmt|;
block|}
else|else
block|{
name|ipos
operator|=
literal|4
expr_stmt|;
block|}
name|int
name|endPos
init|=
name|writeInt
argument_list|(
name|delta
argument_list|,
name|tempArr
argument_list|,
name|ipos
argument_list|)
decl_stmt|;
if|if
condition|(
name|endPos
operator|<=
literal|4
condition|)
block|{
comment|// value will fit in the integer... move bytes back
for|for
control|(
name|int
name|j
init|=
name|ipos
init|;
name|j
operator|<
name|endPos
condition|;
name|j
operator|++
control|)
block|{
name|val
operator||=
operator|(
name|tempArr
index|[
name|j
index|]
operator|&
literal|0xff
operator|)
operator|<<
operator|(
name|j
operator|<<
literal|3
operator|)
expr_stmt|;
block|}
name|index
index|[
name|doc
index|]
operator|=
name|val
expr_stmt|;
block|}
else|else
block|{
comment|// value won't fit... move integer into byte[]
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|ipos
condition|;
name|j
operator|++
control|)
block|{
name|tempArr
index|[
name|j
index|]
operator|=
operator|(
name|byte
operator|)
name|val
expr_stmt|;
name|val
operator|>>>=
literal|8
expr_stmt|;
block|}
comment|// point at the end index in the byte[]
name|index
index|[
name|doc
index|]
operator|=
operator|(
name|endPos
operator|<<
literal|8
operator|)
operator||
literal|1
expr_stmt|;
name|bytes
index|[
name|doc
index|]
operator|=
name|tempArr
expr_stmt|;
name|tempArr
operator|=
operator|new
name|byte
index|[
literal|12
index|]
expr_stmt|;
block|}
block|}
block|}
block|}
name|te
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|numTermsInField
operator|=
name|te
operator|.
name|getTermNumber
argument_list|()
expr_stmt|;
name|te
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// free space if outrageously wasteful (tradeoff memory/cpu)
if|if
condition|(
operator|(
name|maxTermCounts
operator|.
name|length
operator|-
name|numTermsInField
operator|)
operator|>
literal|1024
condition|)
block|{
comment|// too much waste!
name|int
index|[]
name|newMaxTermCounts
init|=
operator|new
name|int
index|[
name|numTermsInField
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|maxTermCounts
argument_list|,
literal|0
argument_list|,
name|newMaxTermCounts
argument_list|,
literal|0
argument_list|,
name|numTermsInField
argument_list|)
expr_stmt|;
name|maxTermCounts
operator|=
name|newMaxTermCounts
expr_stmt|;
block|}
name|long
name|midPoint
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|termInstances
operator|==
literal|0
condition|)
block|{
comment|// we didn't invert anything
comment|// lower memory consumption.
name|index
operator|=
name|this
operator|.
name|index
operator|=
literal|null
expr_stmt|;
name|tnums
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
comment|//
comment|// transform intermediate form into the final form, building a single byte[]
comment|// at a time, and releasing the intermediate byte[]s as we go to avoid
comment|// increasing the memory footprint.
comment|//
for|for
control|(
name|int
name|pass
init|=
literal|0
init|;
name|pass
operator|<
literal|256
condition|;
name|pass
operator|++
control|)
block|{
name|byte
index|[]
name|target
init|=
name|tnums
index|[
name|pass
index|]
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
comment|// end in target;
if|if
condition|(
name|target
operator|!=
literal|null
condition|)
block|{
name|pos
operator|=
name|target
operator|.
name|length
expr_stmt|;
block|}
else|else
block|{
name|target
operator|=
operator|new
name|byte
index|[
literal|4096
index|]
expr_stmt|;
block|}
comment|// loop over documents, 0x00ppxxxx, 0x01ppxxxx, 0x02ppxxxx
comment|// where pp is the pass (which array we are building), and xx is all values.
comment|// each pass shares the same byte[] for termNumber lists.
for|for
control|(
name|int
name|docbase
init|=
name|pass
operator|<<
literal|16
init|;
name|docbase
operator|<
name|maxDoc
condition|;
name|docbase
operator|+=
operator|(
literal|1
operator|<<
literal|24
operator|)
control|)
block|{
name|int
name|lim
init|=
name|Math
operator|.
name|min
argument_list|(
name|docbase
operator|+
operator|(
literal|1
operator|<<
literal|16
operator|)
argument_list|,
name|maxDoc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|docbase
init|;
name|doc
operator|<
name|lim
condition|;
name|doc
operator|++
control|)
block|{
name|int
name|val
init|=
name|index
index|[
name|doc
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|val
operator|&
literal|0xff
operator|)
operator|==
literal|1
condition|)
block|{
name|int
name|len
init|=
name|val
operator|>>>
literal|8
decl_stmt|;
name|index
index|[
name|doc
index|]
operator|=
operator|(
name|pos
operator|<<
literal|8
operator|)
operator||
literal|1
expr_stmt|;
comment|// change index to point to start of array
if|if
condition|(
operator|(
name|pos
operator|&
literal|0xff000000
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// we only have 24 bits for the array index
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Too many values for UnInvertedField faceting on field "
operator|+
name|field
argument_list|)
throw|;
block|}
name|byte
index|[]
name|arr
init|=
name|bytes
index|[
name|doc
index|]
decl_stmt|;
name|bytes
index|[
name|doc
index|]
operator|=
literal|null
expr_stmt|;
comment|// IMPORTANT: allow GC to avoid OOM
if|if
condition|(
name|target
operator|.
name|length
operator|<=
name|pos
operator|+
name|len
condition|)
block|{
name|int
name|newlen
init|=
name|target
operator|.
name|length
decl_stmt|;
comment|/*** we don't have to worry about the array getting too large                  * since the "pos" param will overflow first (only 24 bits available)                 if ((newlen<<1)<= 0) {                   // overflow...                   newlen = Integer.MAX_VALUE;                   if (newlen<= pos + len) {                     throw new SolrException(400,"Too many terms to uninvert field!");                   }                 } else {                   while (newlen<= pos + len) newlen<<=1;  // doubling strategy                 }                 ****/
while|while
condition|(
name|newlen
operator|<=
name|pos
operator|+
name|len
condition|)
name|newlen
operator|<<=
literal|1
expr_stmt|;
comment|// doubling strategy
name|byte
index|[]
name|newtarget
init|=
operator|new
name|byte
index|[
name|newlen
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|target
argument_list|,
literal|0
argument_list|,
name|newtarget
argument_list|,
literal|0
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|target
operator|=
name|newtarget
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|arr
argument_list|,
literal|0
argument_list|,
name|target
argument_list|,
name|pos
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|len
operator|+
literal|1
expr_stmt|;
comment|// skip single byte at end and leave it 0 for terminator
block|}
block|}
block|}
comment|// shrink array
if|if
condition|(
name|pos
operator|<
name|target
operator|.
name|length
condition|)
block|{
name|byte
index|[]
name|newtarget
init|=
operator|new
name|byte
index|[
name|pos
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|target
argument_list|,
literal|0
argument_list|,
name|newtarget
argument_list|,
literal|0
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|target
operator|=
name|newtarget
expr_stmt|;
if|if
condition|(
name|target
operator|.
name|length
operator|>
operator|(
literal|1
operator|<<
literal|24
operator|)
operator|*
literal|.9
condition|)
block|{
name|SolrCore
operator|.
name|log
operator|.
name|warn
argument_list|(
literal|"Approaching too many values for UnInvertedField faceting on field '"
operator|+
name|field
operator|+
literal|"' : bucket size="
operator|+
name|target
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
name|tnums
index|[
name|pass
index|]
operator|=
name|target
expr_stmt|;
if|if
condition|(
operator|(
name|pass
operator|<<
literal|16
operator|)
operator|>
name|maxDoc
condition|)
break|break;
block|}
block|}
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|total_time
operator|=
call|(
name|int
call|)
argument_list|(
name|endTime
operator|-
name|startTime
argument_list|)
expr_stmt|;
name|phase1_time
operator|=
call|(
name|int
call|)
argument_list|(
name|midPoint
operator|-
name|startTime
argument_list|)
expr_stmt|;
name|SolrCore
operator|.
name|log
operator|.
name|info
argument_list|(
literal|"UnInverted multi-valued field "
operator|+
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getCounts
specifier|public
name|NamedList
name|getCounts
parameter_list|(
name|SolrIndexSearcher
name|searcher
parameter_list|,
name|DocSet
name|baseDocs
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|limit
parameter_list|,
name|Integer
name|mincount
parameter_list|,
name|boolean
name|missing
parameter_list|,
name|String
name|sort
parameter_list|,
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
name|use
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|FieldType
name|ft
init|=
name|searcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getFieldType
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|NamedList
name|res
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
comment|// order is important
name|DocSet
name|docs
init|=
name|baseDocs
decl_stmt|;
name|int
name|baseSize
init|=
name|docs
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|maxDoc
init|=
name|searcher
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|baseSize
operator|>=
name|mincount
condition|)
block|{
specifier|final
name|int
index|[]
name|index
init|=
name|this
operator|.
name|index
decl_stmt|;
specifier|final
name|int
index|[]
name|counts
init|=
operator|new
name|int
index|[
name|numTermsInField
index|]
decl_stmt|;
comment|//
comment|// If there is prefix, find it's start and end term numbers
comment|//
name|int
name|startTerm
init|=
literal|0
decl_stmt|;
name|int
name|endTerm
init|=
name|numTermsInField
decl_stmt|;
comment|// one past the end
name|NumberedTermEnum
name|te
init|=
name|ti
operator|.
name|getEnumerator
argument_list|(
name|searcher
operator|.
name|getReader
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
operator|&&
name|prefix
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|te
operator|.
name|skipTo
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|startTerm
operator|=
name|te
operator|.
name|getTermNumber
argument_list|()
expr_stmt|;
name|te
operator|.
name|skipTo
argument_list|(
name|prefix
operator|+
literal|"\uffff\uffff\uffff\uffff"
argument_list|)
expr_stmt|;
name|endTerm
operator|=
name|te
operator|.
name|getTermNumber
argument_list|()
expr_stmt|;
block|}
comment|/***********       // Alternative 2: get the docSet of the prefix (could take a while) and       // then do the intersection with the baseDocSet first.       if (prefix != null&& prefix.length()> 0) {         docs = searcher.getDocSet(new ConstantScorePrefixQuery(new Term(field, ft.toInternal(prefix))), docs);         // The issue with this method are problems of returning 0 counts for terms w/o         // the prefix.  We can't just filter out those terms later because it may         // mean that we didn't collect enough terms in the queue (in the sorted case).       }       ***********/
name|boolean
name|doNegative
init|=
name|baseSize
operator|>
name|maxDoc
operator|>>
literal|1
operator|&&
name|termInstances
operator|>
literal|0
operator|&&
name|startTerm
operator|==
literal|0
operator|&&
name|endTerm
operator|==
name|numTermsInField
operator|&&
name|docs
operator|instanceof
name|BitDocSet
decl_stmt|;
if|if
condition|(
name|doNegative
condition|)
block|{
name|OpenBitSet
name|bs
init|=
call|(
name|OpenBitSet
call|)
argument_list|(
operator|(
name|BitDocSet
operator|)
name|docs
argument_list|)
operator|.
name|getBits
argument_list|()
operator|.
name|clone
argument_list|()
decl_stmt|;
name|bs
operator|.
name|flip
argument_list|(
literal|0
argument_list|,
name|maxDoc
argument_list|)
expr_stmt|;
comment|// TODO: when iterator across negative elements is available, use that
comment|// instead of creating a new bitset and inverting.
name|docs
operator|=
operator|new
name|BitDocSet
argument_list|(
name|bs
argument_list|,
name|maxDoc
operator|-
name|baseSize
argument_list|)
expr_stmt|;
comment|// simply negating will mean that we have deleted docs in the set.
comment|// that should be OK, as their entries in our table should be empty.
block|}
comment|// For the biggest terms, do straight set intersections
for|for
control|(
name|TopTerm
name|tt
range|:
name|bigTerms
operator|.
name|values
argument_list|()
control|)
block|{
comment|// TODO: counts could be deferred if sorted==false
if|if
condition|(
name|tt
operator|.
name|termNum
operator|>=
name|startTerm
operator|&&
name|tt
operator|.
name|termNum
operator|<
name|endTerm
condition|)
block|{
name|counts
index|[
name|tt
operator|.
name|termNum
index|]
operator|=
name|searcher
operator|.
name|numDocs
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|tt
operator|.
name|term
argument_list|)
argument_list|,
name|docs
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO: we could short-circuit counting altogether for sorted faceting
comment|// where we already have enough terms from the bigTerms
comment|// TODO: we could shrink the size of the collection array, and
comment|// additionally break when the termNumber got above endTerm, but
comment|// it would require two extra conditionals in the inner loop (although
comment|// they would be predictable for the non-prefix case).
comment|// Perhaps a different copy of the code would be warranted.
if|if
condition|(
name|termInstances
operator|>
literal|0
condition|)
block|{
name|DocIterator
name|iter
init|=
name|docs
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|doc
init|=
name|iter
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
name|int
name|code
init|=
name|index
index|[
name|doc
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|code
operator|&
literal|0xff
operator|)
operator|==
literal|1
condition|)
block|{
name|int
name|pos
init|=
name|code
operator|>>>
literal|8
decl_stmt|;
name|int
name|whichArray
init|=
operator|(
name|doc
operator|>>>
literal|16
operator|)
operator|&
literal|0xff
decl_stmt|;
name|byte
index|[]
name|arr
init|=
name|tnums
index|[
name|whichArray
index|]
decl_stmt|;
name|int
name|tnum
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|delta
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|byte
name|b
init|=
name|arr
index|[
name|pos
operator|++
index|]
decl_stmt|;
name|delta
operator|=
operator|(
name|delta
operator|<<
literal|7
operator|)
operator||
operator|(
name|b
operator|&
literal|0x7f
operator|)
expr_stmt|;
if|if
condition|(
operator|(
name|b
operator|&
literal|0x80
operator|)
operator|==
literal|0
condition|)
break|break;
block|}
if|if
condition|(
name|delta
operator|==
literal|0
condition|)
break|break;
name|tnum
operator|+=
name|delta
operator|-
name|TNUM_OFFSET
expr_stmt|;
name|counts
index|[
name|tnum
index|]
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|tnum
init|=
literal|0
decl_stmt|;
name|int
name|delta
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|delta
operator|=
operator|(
name|delta
operator|<<
literal|7
operator|)
operator||
operator|(
name|code
operator|&
literal|0x7f
operator|)
expr_stmt|;
if|if
condition|(
operator|(
name|code
operator|&
literal|0x80
operator|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|delta
operator|==
literal|0
condition|)
break|break;
name|tnum
operator|+=
name|delta
operator|-
name|TNUM_OFFSET
expr_stmt|;
name|counts
index|[
name|tnum
index|]
operator|++
expr_stmt|;
name|delta
operator|=
literal|0
expr_stmt|;
block|}
name|code
operator|>>>=
literal|8
expr_stmt|;
block|}
block|}
block|}
block|}
name|int
name|off
init|=
name|offset
decl_stmt|;
name|int
name|lim
init|=
name|limit
operator|>=
literal|0
condition|?
name|limit
else|:
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|sort
operator|.
name|equals
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT_COUNT
argument_list|)
operator|||
name|sort
operator|.
name|equals
argument_list|(
name|FacetParams
operator|.
name|FACET_SORT_COUNT_LEGACY
argument_list|)
condition|)
block|{
name|int
name|maxsize
init|=
name|limit
operator|>
literal|0
condition|?
name|offset
operator|+
name|limit
else|:
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|1
decl_stmt|;
name|maxsize
operator|=
name|Math
operator|.
name|min
argument_list|(
name|maxsize
argument_list|,
name|numTermsInField
argument_list|)
expr_stmt|;
specifier|final
name|BoundedTreeSet
argument_list|<
name|Long
argument_list|>
name|queue
init|=
operator|new
name|BoundedTreeSet
argument_list|<
name|Long
argument_list|>
argument_list|(
name|maxsize
argument_list|)
decl_stmt|;
name|int
name|min
init|=
name|mincount
operator|-
literal|1
decl_stmt|;
comment|// the smallest value in the top 'N' values
for|for
control|(
name|int
name|i
init|=
name|startTerm
init|;
name|i
operator|<
name|endTerm
condition|;
name|i
operator|++
control|)
block|{
name|int
name|c
init|=
name|doNegative
condition|?
name|maxTermCounts
index|[
name|i
index|]
operator|-
name|counts
index|[
name|i
index|]
else|:
name|counts
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|c
operator|>
name|min
condition|)
block|{
comment|// NOTE: we use c>min rather than c>=min as an optimization because we are going in
comment|// index order, so we already know that the keys are ordered.  This can be very
comment|// important if a lot of the counts are repeated (like zero counts would be).
comment|// minimize object creation and speed comparison by creating a long that
comment|// encompases both count and term number.
comment|// Since smaller values are kept in the TreeSet, make higher counts smaller.
comment|//
comment|//   for equal counts, lower term numbers
comment|// should come first and hence be "greater"
comment|//long pair = (((long)c)<<32) | (0x7fffffff-i) ;   // use if priority queue
name|long
name|pair
init|=
operator|(
operator|(
operator|(
name|long
operator|)
operator|-
name|c
operator|)
operator|<<
literal|32
operator|)
operator||
name|i
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
name|pair
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|queue
operator|.
name|size
argument_list|()
operator|>=
name|maxsize
condition|)
name|min
operator|=
operator|-
call|(
name|int
call|)
argument_list|(
name|queue
operator|.
name|last
argument_list|()
operator|.
name|longValue
argument_list|()
operator|>>>
literal|32
argument_list|)
expr_stmt|;
block|}
block|}
comment|// now select the right page from the results
for|for
control|(
name|Long
name|p
range|:
name|queue
control|)
block|{
if|if
condition|(
operator|--
name|off
operator|>=
literal|0
condition|)
continue|continue;
if|if
condition|(
operator|--
name|lim
operator|<
literal|0
condition|)
break|break;
name|int
name|c
init|=
operator|-
call|(
name|int
call|)
argument_list|(
name|p
operator|.
name|longValue
argument_list|()
operator|>>>
literal|32
argument_list|)
decl_stmt|;
comment|//int tnum = 0x7fffffff - (int)p.longValue();  // use if priority queue
name|int
name|tnum
init|=
operator|(
name|int
operator|)
name|p
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|String
name|label
init|=
name|ft
operator|.
name|indexedToReadable
argument_list|(
name|getTermText
argument_list|(
name|te
argument_list|,
name|tnum
argument_list|)
argument_list|)
decl_stmt|;
name|res
operator|.
name|add
argument_list|(
name|label
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// add results in index order
name|int
name|i
init|=
name|startTerm
decl_stmt|;
if|if
condition|(
name|mincount
operator|<=
literal|0
condition|)
block|{
comment|// if mincount<=0, then we won't discard any terms and we know exactly
comment|// where to start.
name|i
operator|=
name|startTerm
operator|+
name|off
expr_stmt|;
name|off
operator|=
literal|0
expr_stmt|;
block|}
for|for
control|(
init|;
name|i
operator|<
name|endTerm
condition|;
name|i
operator|++
control|)
block|{
name|int
name|c
init|=
name|doNegative
condition|?
name|maxTermCounts
index|[
name|i
index|]
operator|-
name|counts
index|[
name|i
index|]
else|:
name|counts
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|c
operator|<
name|mincount
operator|||
operator|--
name|off
operator|>=
literal|0
condition|)
continue|continue;
if|if
condition|(
operator|--
name|lim
operator|<
literal|0
condition|)
break|break;
name|String
name|label
init|=
name|ft
operator|.
name|indexedToReadable
argument_list|(
name|getTermText
argument_list|(
name|te
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|res
operator|.
name|add
argument_list|(
name|label
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|te
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|missing
condition|)
block|{
comment|// TODO: a faster solution for this?
name|res
operator|.
name|add
argument_list|(
literal|null
argument_list|,
name|SimpleFacets
operator|.
name|getFieldMissingCount
argument_list|(
name|searcher
argument_list|,
name|baseDocs
argument_list|,
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
comment|/**    * Collect statistics about the UninvertedField.  Code is very similar to {@link #getCounts(org.apache.solr.search.SolrIndexSearcher, org.apache.solr.search.DocSet, int, int, Integer, boolean, String, String)}    * It can be used to calculate stats on multivalued fields.    *<p/>    * This method is mainly used by the {@link org.apache.solr.handler.component.StatsComponent}.    *    * @param searcher The Searcher to use to gather the statistics    * @param baseDocs The {@link org.apache.solr.search.DocSet} to gather the stats on    * @param facet One or more fields to facet on.    * @return The {@link org.apache.solr.handler.component.StatsValues} collected    * @throws IOException    */
DECL|method|getStats
specifier|public
name|StatsValues
name|getStats
parameter_list|(
name|SolrIndexSearcher
name|searcher
parameter_list|,
name|DocSet
name|baseDocs
parameter_list|,
name|String
index|[]
name|facet
parameter_list|)
throws|throws
name|IOException
block|{
comment|//this function is ripped off nearly wholesale from the getCounts function to use
comment|//for multiValued fields within the StatsComponent.  may be useful to find common
comment|//functionality between the two and refactor code somewhat
name|use
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|FieldType
name|ft
init|=
name|searcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getFieldType
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|StatsValues
name|allstats
init|=
operator|new
name|StatsValues
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
specifier|final
name|FieldFacetStats
index|[]
name|finfo
init|=
operator|new
name|FieldFacetStats
index|[
name|facet
operator|.
name|length
index|]
decl_stmt|;
comment|//Initialize facetstats, if facets have been passed in
name|FieldCache
operator|.
name|StringIndex
name|si
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|facet
control|)
block|{
name|ft
operator|=
name|searcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getFieldType
argument_list|(
name|f
argument_list|)
expr_stmt|;
try|try
block|{
name|si
operator|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getStringIndex
argument_list|(
name|searcher
operator|.
name|getReader
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"failed to open field cache for: "
operator|+
name|f
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|finfo
index|[
name|i
operator|++
index|]
operator|=
operator|new
name|FieldFacetStats
argument_list|(
name|f
argument_list|,
name|si
argument_list|,
name|ft
argument_list|,
name|numTermsInField
argument_list|)
expr_stmt|;
block|}
name|DocSet
name|docs
init|=
name|baseDocs
decl_stmt|;
name|int
name|baseSize
init|=
name|docs
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|maxDoc
init|=
name|searcher
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|baseSize
operator|>
literal|0
condition|)
block|{
specifier|final
name|int
index|[]
name|index
init|=
name|this
operator|.
name|index
decl_stmt|;
specifier|final
name|int
index|[]
name|counts
init|=
operator|new
name|int
index|[
name|numTermsInField
index|]
decl_stmt|;
name|NumberedTermEnum
name|te
init|=
name|ti
operator|.
name|getEnumerator
argument_list|(
name|searcher
operator|.
name|getReader
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|doNegative
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|finfo
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|//if we're collecting statistics with a facet field, can't do inverted counting
name|doNegative
operator|=
name|baseSize
operator|>
name|maxDoc
operator|>>
literal|1
operator|&&
name|termInstances
operator|>
literal|0
operator|&&
name|docs
operator|instanceof
name|BitDocSet
expr_stmt|;
block|}
if|if
condition|(
name|doNegative
condition|)
block|{
name|OpenBitSet
name|bs
init|=
call|(
name|OpenBitSet
call|)
argument_list|(
operator|(
name|BitDocSet
operator|)
name|docs
argument_list|)
operator|.
name|getBits
argument_list|()
operator|.
name|clone
argument_list|()
decl_stmt|;
name|bs
operator|.
name|flip
argument_list|(
literal|0
argument_list|,
name|maxDoc
argument_list|)
expr_stmt|;
comment|// TODO: when iterator across negative elements is available, use that
comment|// instead of creating a new bitset and inverting.
name|docs
operator|=
operator|new
name|BitDocSet
argument_list|(
name|bs
argument_list|,
name|maxDoc
operator|-
name|baseSize
argument_list|)
expr_stmt|;
comment|// simply negating will mean that we have deleted docs in the set.
comment|// that should be OK, as their entries in our table should be empty.
block|}
comment|// For the biggest terms, do straight set intersections
for|for
control|(
name|TopTerm
name|tt
range|:
name|bigTerms
operator|.
name|values
argument_list|()
control|)
block|{
comment|// TODO: counts could be deferred if sorted==false
if|if
condition|(
name|tt
operator|.
name|termNum
operator|>=
literal|0
operator|&&
name|tt
operator|.
name|termNum
operator|<
name|numTermsInField
condition|)
block|{
if|if
condition|(
name|finfo
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|counts
index|[
name|tt
operator|.
name|termNum
index|]
operator|=
name|searcher
operator|.
name|numDocs
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|tt
operator|.
name|term
argument_list|)
argument_list|,
name|docs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//COULD BE VERY SLOW
comment|//if we're collecting stats for facet fields, we need to iterate on all matching documents
name|DocSet
name|bigTermDocSet
init|=
name|searcher
operator|.
name|getDocSet
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|tt
operator|.
name|term
argument_list|)
argument_list|)
operator|.
name|intersection
argument_list|(
name|docs
argument_list|)
decl_stmt|;
name|DocIterator
name|iter
init|=
name|bigTermDocSet
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|doc
init|=
name|iter
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
name|counts
index|[
name|tt
operator|.
name|termNum
index|]
operator|++
expr_stmt|;
for|for
control|(
name|FieldFacetStats
name|f
range|:
name|finfo
control|)
block|{
name|f
operator|.
name|facetTermNum
argument_list|(
name|doc
argument_list|,
name|tt
operator|.
name|termNum
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|termInstances
operator|>
literal|0
condition|)
block|{
name|DocIterator
name|iter
init|=
name|docs
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|doc
init|=
name|iter
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
name|int
name|code
init|=
name|index
index|[
name|doc
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|code
operator|&
literal|0xff
operator|)
operator|==
literal|1
condition|)
block|{
name|int
name|pos
init|=
name|code
operator|>>>
literal|8
decl_stmt|;
name|int
name|whichArray
init|=
operator|(
name|doc
operator|>>>
literal|16
operator|)
operator|&
literal|0xff
decl_stmt|;
name|byte
index|[]
name|arr
init|=
name|tnums
index|[
name|whichArray
index|]
decl_stmt|;
name|int
name|tnum
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|delta
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|byte
name|b
init|=
name|arr
index|[
name|pos
operator|++
index|]
decl_stmt|;
name|delta
operator|=
operator|(
name|delta
operator|<<
literal|7
operator|)
operator||
operator|(
name|b
operator|&
literal|0x7f
operator|)
expr_stmt|;
if|if
condition|(
operator|(
name|b
operator|&
literal|0x80
operator|)
operator|==
literal|0
condition|)
break|break;
block|}
if|if
condition|(
name|delta
operator|==
literal|0
condition|)
break|break;
name|tnum
operator|+=
name|delta
operator|-
name|TNUM_OFFSET
expr_stmt|;
name|counts
index|[
name|tnum
index|]
operator|++
expr_stmt|;
for|for
control|(
name|FieldFacetStats
name|f
range|:
name|finfo
control|)
block|{
name|f
operator|.
name|facetTermNum
argument_list|(
name|doc
argument_list|,
name|tnum
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|int
name|tnum
init|=
literal|0
decl_stmt|;
name|int
name|delta
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|delta
operator|=
operator|(
name|delta
operator|<<
literal|7
operator|)
operator||
operator|(
name|code
operator|&
literal|0x7f
operator|)
expr_stmt|;
if|if
condition|(
operator|(
name|code
operator|&
literal|0x80
operator|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|delta
operator|==
literal|0
condition|)
break|break;
name|tnum
operator|+=
name|delta
operator|-
name|TNUM_OFFSET
expr_stmt|;
name|counts
index|[
name|tnum
index|]
operator|++
expr_stmt|;
for|for
control|(
name|FieldFacetStats
name|f
range|:
name|finfo
control|)
block|{
name|f
operator|.
name|facetTermNum
argument_list|(
name|doc
argument_list|,
name|tnum
argument_list|)
expr_stmt|;
block|}
name|delta
operator|=
literal|0
expr_stmt|;
block|}
name|code
operator|>>>=
literal|8
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// add results in index order
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|numTermsInField
condition|;
name|i
operator|++
control|)
block|{
name|int
name|c
init|=
name|doNegative
condition|?
name|maxTermCounts
index|[
name|i
index|]
operator|-
name|counts
index|[
name|i
index|]
else|:
name|counts
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|Double
name|value
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|ft
operator|.
name|indexedToReadable
argument_list|(
name|getTermText
argument_list|(
name|te
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|allstats
operator|.
name|accumulate
argument_list|(
name|value
argument_list|,
name|c
argument_list|)
expr_stmt|;
comment|//as we've parsed the termnum into a value, lets also accumulate fieldfacet statistics
for|for
control|(
name|FieldFacetStats
name|f
range|:
name|finfo
control|)
block|{
name|f
operator|.
name|accumulateTermNum
argument_list|(
name|i
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|te
operator|.
name|close
argument_list|()
expr_stmt|;
name|int
name|c
init|=
name|SimpleFacets
operator|.
name|getFieldMissingCount
argument_list|(
name|searcher
argument_list|,
name|baseDocs
argument_list|,
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|>
literal|0
condition|)
block|{
name|allstats
operator|.
name|addMissing
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|finfo
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|allstats
operator|.
name|facets
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|StatsValues
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|FieldFacetStats
name|f
range|:
name|finfo
control|)
block|{
name|allstats
operator|.
name|facets
operator|.
name|put
argument_list|(
name|f
operator|.
name|name
argument_list|,
name|f
operator|.
name|facetStatsValues
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|allstats
return|;
block|}
DECL|method|getTermText
name|String
name|getTermText
parameter_list|(
name|NumberedTermEnum
name|te
parameter_list|,
name|int
name|termNum
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bigTerms
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// see if the term is one of our big terms.
name|TopTerm
name|tt
init|=
name|bigTerms
operator|.
name|get
argument_list|(
name|termNum
argument_list|)
decl_stmt|;
if|if
condition|(
name|tt
operator|!=
literal|null
condition|)
block|{
return|return
name|tt
operator|.
name|term
operator|.
name|text
argument_list|()
return|;
block|}
block|}
name|te
operator|.
name|skipTo
argument_list|(
name|termNum
argument_list|)
expr_stmt|;
return|return
name|te
operator|.
name|term
argument_list|()
operator|.
name|text
argument_list|()
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"{field="
operator|+
name|field
operator|+
literal|",memSize="
operator|+
name|memSize
argument_list|()
operator|+
literal|",tindexSize="
operator|+
name|ti
operator|.
name|memSize
argument_list|()
operator|+
literal|",time="
operator|+
name|total_time
operator|+
literal|",phase1="
operator|+
name|phase1_time
operator|+
literal|",nTerms="
operator|+
name|numTermsInField
operator|+
literal|",bigTerms="
operator|+
name|bigTerms
operator|.
name|size
argument_list|()
operator|+
literal|",termInstances="
operator|+
name|termInstances
operator|+
literal|",uses="
operator|+
name|use
operator|.
name|get
argument_list|()
operator|+
literal|"}"
return|;
block|}
comment|//////////////////////////////////////////////////////////////////
comment|//////////////////////////// caching /////////////////////////////
comment|//////////////////////////////////////////////////////////////////
DECL|method|getUnInvertedField
specifier|public
specifier|static
name|UnInvertedField
name|getUnInvertedField
parameter_list|(
name|String
name|field
parameter_list|,
name|SolrIndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrCache
name|cache
init|=
name|searcher
operator|.
name|getFieldValueCache
argument_list|()
decl_stmt|;
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|UnInvertedField
argument_list|(
name|field
argument_list|,
name|searcher
argument_list|)
return|;
block|}
name|UnInvertedField
name|uif
init|=
operator|(
name|UnInvertedField
operator|)
name|cache
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|uif
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|cache
init|)
block|{
name|uif
operator|=
operator|(
name|UnInvertedField
operator|)
name|cache
operator|.
name|get
argument_list|(
name|field
argument_list|)
expr_stmt|;
if|if
condition|(
name|uif
operator|==
literal|null
condition|)
block|{
name|uif
operator|=
operator|new
name|UnInvertedField
argument_list|(
name|field
argument_list|,
name|searcher
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|uif
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|uif
return|;
block|}
block|}
end_class
begin_comment
comment|// How to share TermDocs (int[] score[])???
end_comment
begin_comment
comment|// Hot to share TermPositions?
end_comment
begin_comment
comment|/*** class TermEnumListener {   void doTerm(Term t) {   }   void done() {   } } ***/
end_comment
begin_class
DECL|class|NumberedTermEnum
class|class
name|NumberedTermEnum
extends|extends
name|TermEnum
block|{
DECL|field|reader
specifier|protected
specifier|final
name|IndexReader
name|reader
decl_stmt|;
DECL|field|tindex
specifier|protected
specifier|final
name|TermIndex
name|tindex
decl_stmt|;
DECL|field|tenum
specifier|protected
name|TermEnum
name|tenum
decl_stmt|;
DECL|field|pos
specifier|protected
name|int
name|pos
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|t
specifier|protected
name|Term
name|t
decl_stmt|;
DECL|field|termDocs
specifier|protected
name|TermDocs
name|termDocs
decl_stmt|;
DECL|method|NumberedTermEnum
name|NumberedTermEnum
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|TermIndex
name|tindex
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|tindex
operator|=
name|tindex
expr_stmt|;
block|}
DECL|method|NumberedTermEnum
name|NumberedTermEnum
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|TermIndex
name|tindex
parameter_list|,
name|String
name|termValue
parameter_list|,
name|int
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|tindex
operator|=
name|tindex
expr_stmt|;
name|this
operator|.
name|pos
operator|=
name|pos
expr_stmt|;
name|tenum
operator|=
name|reader
operator|.
name|terms
argument_list|(
name|tindex
operator|.
name|createTerm
argument_list|(
name|termValue
argument_list|)
argument_list|)
expr_stmt|;
name|setTerm
argument_list|()
expr_stmt|;
block|}
DECL|method|getTermDocs
specifier|public
name|TermDocs
name|getTermDocs
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|termDocs
operator|==
literal|null
condition|)
name|termDocs
operator|=
name|reader
operator|.
name|termDocs
argument_list|(
name|t
argument_list|)
expr_stmt|;
else|else
name|termDocs
operator|.
name|seek
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
name|termDocs
return|;
block|}
DECL|method|setTerm
specifier|protected
name|boolean
name|setTerm
parameter_list|()
block|{
name|t
operator|=
name|tenum
operator|.
name|term
argument_list|()
expr_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
operator|||
name|t
operator|.
name|field
argument_list|()
operator|!=
name|tindex
operator|.
name|fterm
operator|.
name|field
argument_list|()
condition|)
block|{
comment|// intern'd compare
name|t
operator|=
literal|null
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|next
specifier|public
name|boolean
name|next
parameter_list|()
throws|throws
name|IOException
block|{
name|pos
operator|++
expr_stmt|;
name|boolean
name|b
init|=
name|tenum
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|b
condition|)
block|{
name|t
operator|=
literal|null
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|setTerm
argument_list|()
return|;
comment|// this is extra work if we know we are in bounds...
block|}
DECL|method|term
specifier|public
name|Term
name|term
parameter_list|()
block|{
return|return
name|t
return|;
block|}
DECL|method|docFreq
specifier|public
name|int
name|docFreq
parameter_list|()
block|{
return|return
name|tenum
operator|.
name|docFreq
argument_list|()
return|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|tenum
operator|!=
literal|null
condition|)
name|tenum
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|skipTo
specifier|public
name|boolean
name|skipTo
parameter_list|(
name|String
name|target
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|skipTo
argument_list|(
name|tindex
operator|.
name|fterm
operator|.
name|createTerm
argument_list|(
name|target
argument_list|)
argument_list|)
return|;
block|}
DECL|method|skipTo
specifier|public
name|boolean
name|skipTo
parameter_list|(
name|Term
name|target
parameter_list|)
throws|throws
name|IOException
block|{
comment|// already here
if|if
condition|(
name|t
operator|!=
literal|null
operator|&&
name|t
operator|.
name|equals
argument_list|(
name|target
argument_list|)
condition|)
return|return
literal|true
return|;
name|int
name|startIdx
init|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|tindex
operator|.
name|index
argument_list|,
name|target
operator|.
name|text
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|startIdx
operator|>=
literal|0
condition|)
block|{
comment|// we hit the term exactly... lucky us!
if|if
condition|(
name|tenum
operator|!=
literal|null
condition|)
name|tenum
operator|.
name|close
argument_list|()
expr_stmt|;
name|tenum
operator|=
name|reader
operator|.
name|terms
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|pos
operator|=
name|startIdx
operator|<<
name|tindex
operator|.
name|intervalBits
expr_stmt|;
return|return
name|setTerm
argument_list|()
return|;
block|}
comment|// we didn't hit the term exactly
name|startIdx
operator|=
operator|-
name|startIdx
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|startIdx
operator|==
literal|0
condition|)
block|{
comment|// our target occurs *before* the first term
if|if
condition|(
name|tenum
operator|!=
literal|null
condition|)
name|tenum
operator|.
name|close
argument_list|()
expr_stmt|;
name|tenum
operator|=
name|reader
operator|.
name|terms
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
return|return
name|setTerm
argument_list|()
return|;
block|}
comment|// back up to the start of the block
name|startIdx
operator|--
expr_stmt|;
if|if
condition|(
operator|(
name|pos
operator|>>
name|tindex
operator|.
name|intervalBits
operator|)
operator|==
name|startIdx
operator|&&
name|t
operator|!=
literal|null
operator|&&
name|t
operator|.
name|text
argument_list|()
operator|.
name|compareTo
argument_list|(
name|target
operator|.
name|text
argument_list|()
argument_list|)
operator|<=
literal|0
condition|)
block|{
comment|// we are already in the right block and the current term is before the term we want,
comment|// so we don't need to seek.
block|}
else|else
block|{
comment|// seek to the right block
if|if
condition|(
name|tenum
operator|!=
literal|null
condition|)
name|tenum
operator|.
name|close
argument_list|()
expr_stmt|;
name|tenum
operator|=
name|reader
operator|.
name|terms
argument_list|(
name|target
operator|.
name|createTerm
argument_list|(
name|tindex
operator|.
name|index
index|[
name|startIdx
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|pos
operator|=
name|startIdx
operator|<<
name|tindex
operator|.
name|intervalBits
expr_stmt|;
name|setTerm
argument_list|()
expr_stmt|;
comment|// should be true since it's in the index
block|}
while|while
condition|(
name|t
operator|!=
literal|null
operator|&&
name|t
operator|.
name|text
argument_list|()
operator|.
name|compareTo
argument_list|(
name|target
operator|.
name|text
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
block|{
name|next
argument_list|()
expr_stmt|;
block|}
return|return
name|t
operator|!=
literal|null
return|;
block|}
DECL|method|skipTo
specifier|public
name|boolean
name|skipTo
parameter_list|(
name|int
name|termNumber
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|delta
init|=
name|termNumber
operator|-
name|pos
decl_stmt|;
if|if
condition|(
name|delta
argument_list|<
literal|0
operator|||
name|delta
argument_list|>
name|tindex
operator|.
name|interval
operator|||
name|tenum
operator|==
literal|null
condition|)
block|{
name|int
name|idx
init|=
name|termNumber
operator|>>>
name|tindex
operator|.
name|intervalBits
decl_stmt|;
name|String
name|base
init|=
name|tindex
operator|.
name|index
index|[
name|idx
index|]
decl_stmt|;
name|pos
operator|=
name|idx
operator|<<
name|tindex
operator|.
name|intervalBits
expr_stmt|;
name|delta
operator|=
name|termNumber
operator|-
name|pos
expr_stmt|;
if|if
condition|(
name|tenum
operator|!=
literal|null
condition|)
name|tenum
operator|.
name|close
argument_list|()
expr_stmt|;
name|tenum
operator|=
name|reader
operator|.
name|terms
argument_list|(
name|tindex
operator|.
name|createTerm
argument_list|(
name|base
argument_list|)
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|--
name|delta
operator|>=
literal|0
condition|)
block|{
name|boolean
name|b
init|=
name|tenum
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|false
condition|)
block|{
name|t
operator|=
literal|null
expr_stmt|;
return|return
literal|false
return|;
block|}
operator|++
name|pos
expr_stmt|;
block|}
return|return
name|setTerm
argument_list|()
return|;
block|}
comment|/** The current term number, starting at 0.    * Only valid if the previous call to next() or skipTo() returned true.    */
DECL|method|getTermNumber
specifier|public
name|int
name|getTermNumber
parameter_list|()
block|{
return|return
name|pos
return|;
block|}
block|}
end_class
begin_comment
comment|/**  * Class to save memory by only storing every nth term (for random access), while  * numbering the terms, allowing them to be retrieved later by number.  * This is only valid when used with the IndexReader it was created with.  * The IndexReader is not actually stored to facilitate caching by using it as a key in  * a weak hash map.  */
end_comment
begin_class
DECL|class|TermIndex
class|class
name|TermIndex
block|{
DECL|field|intervalBits
specifier|final
specifier|static
name|int
name|intervalBits
init|=
literal|7
decl_stmt|;
comment|// decrease to a low number like 2 for testing
DECL|field|intervalMask
specifier|final
specifier|static
name|int
name|intervalMask
init|=
literal|0xffffffff
operator|>>>
operator|(
literal|32
operator|-
name|intervalBits
operator|)
decl_stmt|;
DECL|field|interval
specifier|final
specifier|static
name|int
name|interval
init|=
literal|1
operator|<<
name|intervalBits
decl_stmt|;
DECL|field|fterm
specifier|final
name|Term
name|fterm
decl_stmt|;
comment|// prototype to be used in term construction w/o String.intern overhead
DECL|field|index
name|String
index|[]
name|index
decl_stmt|;
DECL|field|nTerms
name|int
name|nTerms
decl_stmt|;
DECL|field|sizeOfStrings
name|long
name|sizeOfStrings
decl_stmt|;
DECL|method|TermIndex
name|TermIndex
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|fterm
operator|=
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|createTerm
name|Term
name|createTerm
parameter_list|(
name|String
name|termVal
parameter_list|)
block|{
return|return
name|fterm
operator|.
name|createTerm
argument_list|(
name|termVal
argument_list|)
return|;
block|}
DECL|method|getEnumerator
name|NumberedTermEnum
name|getEnumerator
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|int
name|termNumber
parameter_list|)
throws|throws
name|IOException
block|{
name|NumberedTermEnum
name|te
init|=
operator|new
name|NumberedTermEnum
argument_list|(
name|reader
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|te
operator|.
name|skipTo
argument_list|(
name|termNumber
argument_list|)
expr_stmt|;
return|return
name|te
return|;
block|}
comment|/* The first time an enumerator is requested, it should be used      with next() to fully traverse all of the terms so the index      will be built.    */
DECL|method|getEnumerator
name|NumberedTermEnum
name|getEnumerator
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|==
literal|null
condition|)
return|return
operator|new
name|NumberedTermEnum
argument_list|(
name|reader
argument_list|,
name|this
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|lst
decl_stmt|;
specifier|protected
name|boolean
name|setTerm
parameter_list|()
block|{
name|boolean
name|b
init|=
name|super
operator|.
name|setTerm
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|&&
operator|(
name|pos
operator|&
name|intervalMask
operator|)
operator|==
literal|0
condition|)
block|{
name|String
name|text
init|=
name|term
argument_list|()
operator|.
name|text
argument_list|()
decl_stmt|;
name|sizeOfStrings
operator|+=
name|text
operator|.
name|length
argument_list|()
operator|<<
literal|1
expr_stmt|;
if|if
condition|(
name|lst
operator|==
literal|null
condition|)
block|{
name|lst
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|lst
operator|.
name|add
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
specifier|public
name|boolean
name|skipTo
parameter_list|(
name|Term
name|target
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|boolean
name|skipTo
parameter_list|(
name|int
name|termNumber
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|nTerms
operator|=
name|pos
expr_stmt|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|index
operator|=
name|lst
operator|!=
literal|null
condition|?
name|lst
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|lst
operator|.
name|size
argument_list|()
index|]
argument_list|)
else|:
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
return|;
else|else
return|return
operator|new
name|NumberedTermEnum
argument_list|(
name|reader
argument_list|,
name|this
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**    * Returns the approximate amount of memory taken by this TermIndex.    * This is only an approximation and doesn't take into account java object overhead.    *    * @return    * the approximate memory consumption in bytes    */
DECL|method|memSize
specifier|public
name|long
name|memSize
parameter_list|()
block|{
comment|// assume 8 byte references?
return|return
literal|8
operator|+
literal|8
operator|+
literal|8
operator|+
literal|8
operator|+
operator|(
name|index
operator|.
name|length
operator|<<
literal|3
operator|)
operator|+
name|sizeOfStrings
return|;
block|}
block|}
end_class
end_unit
