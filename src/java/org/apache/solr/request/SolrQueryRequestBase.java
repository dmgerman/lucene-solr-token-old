begin_unit
begin_comment
comment|/**  * Copyright 2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.request
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrException
import|;
end_import
begin_comment
comment|/** * @author yonik * @version $Id$ */
end_comment
begin_class
DECL|class|SolrQueryRequestBase
specifier|public
specifier|abstract
class|class
name|SolrQueryRequestBase
implements|implements
name|SolrQueryRequest
block|{
comment|// some standard query argument names
DECL|field|QUERY_NAME
specifier|public
specifier|static
specifier|final
name|String
name|QUERY_NAME
init|=
literal|"q"
decl_stmt|;
DECL|field|START_NAME
specifier|public
specifier|static
specifier|final
name|String
name|START_NAME
init|=
literal|"start"
decl_stmt|;
DECL|field|ROWS_NAME
specifier|public
specifier|static
specifier|final
name|String
name|ROWS_NAME
init|=
literal|"rows"
decl_stmt|;
DECL|field|XSL_NAME
specifier|public
specifier|static
specifier|final
name|String
name|XSL_NAME
init|=
literal|"xsl"
decl_stmt|;
DECL|field|QUERYTYPE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|QUERYTYPE_NAME
init|=
literal|"qt"
decl_stmt|;
DECL|field|core
specifier|protected
specifier|final
name|SolrCore
name|core
decl_stmt|;
DECL|method|SolrQueryRequestBase
specifier|public
name|SolrQueryRequestBase
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|this
operator|.
name|core
operator|=
name|core
expr_stmt|;
block|}
DECL|method|getIntParam
specifier|public
name|int
name|getIntParam
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|s
init|=
name|getParam
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
literal|500
argument_list|,
literal|"Missing required parameter '"
operator|+
name|name
operator|+
literal|"' from "
operator|+
name|this
argument_list|)
throw|;
block|}
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
argument_list|)
return|;
block|}
DECL|method|getIntParam
specifier|public
name|int
name|getIntParam
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|defval
parameter_list|)
block|{
name|String
name|s
init|=
name|getParam
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
name|defval
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
argument_list|)
return|;
block|}
DECL|method|getStrParam
specifier|public
name|String
name|getStrParam
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|s
init|=
name|getParam
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
literal|500
argument_list|,
literal|"Missing required parameter '"
operator|+
name|name
operator|+
literal|"' from "
operator|+
name|this
argument_list|)
throw|;
block|}
return|return
name|s
return|;
block|}
DECL|method|getStrParam
specifier|public
name|String
name|getStrParam
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|defval
parameter_list|)
block|{
name|String
name|s
init|=
name|getParam
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|s
operator|==
literal|null
condition|?
name|defval
else|:
name|s
return|;
block|}
DECL|method|getQueryString
specifier|public
name|String
name|getQueryString
parameter_list|()
block|{
return|return
name|getParam
argument_list|(
name|QUERY_NAME
argument_list|)
return|;
block|}
DECL|method|getQueryType
specifier|public
name|String
name|getQueryType
parameter_list|()
block|{
return|return
name|getParam
argument_list|(
name|QUERYTYPE_NAME
argument_list|)
return|;
block|}
comment|// starting position in matches to return to client
DECL|method|getStart
specifier|public
name|int
name|getStart
parameter_list|()
block|{
return|return
name|getIntParam
argument_list|(
name|START_NAME
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|// number of matching documents to return
DECL|method|getLimit
specifier|public
name|int
name|getLimit
parameter_list|()
block|{
return|return
name|getIntParam
argument_list|(
name|ROWS_NAME
argument_list|,
literal|10
argument_list|)
return|;
block|}
DECL|field|startTime
specifier|protected
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Get the start time of this request in milliseconds
DECL|method|getStartTime
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
comment|// The index searcher associated with this request
DECL|field|searcherHolder
specifier|protected
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searcherHolder
decl_stmt|;
DECL|method|getSearcher
specifier|public
name|SolrIndexSearcher
name|getSearcher
parameter_list|()
block|{
comment|// should this reach out and get a searcher from the core singleton, or
comment|// should the core populate one in a factory method to create requests?
comment|// or there could be a setSearcher() method that Solr calls
if|if
condition|(
name|searcherHolder
operator|==
literal|null
condition|)
block|{
name|searcherHolder
operator|=
name|core
operator|.
name|getSearcher
argument_list|()
expr_stmt|;
block|}
return|return
name|searcherHolder
operator|.
name|get
argument_list|()
return|;
block|}
comment|// The solr core (coordinator, etc) associated with this request
DECL|method|getCore
specifier|public
name|SolrCore
name|getCore
parameter_list|()
block|{
return|return
name|core
return|;
block|}
comment|// The index schema associated with this request
DECL|method|getSchema
specifier|public
name|IndexSchema
name|getSchema
parameter_list|()
block|{
return|return
name|core
operator|.
name|getSchema
argument_list|()
return|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|searcherHolder
operator|!=
literal|null
condition|)
block|{
name|searcherHolder
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|'{'
operator|+
name|getParamString
argument_list|()
operator|+
literal|'}'
return|;
block|}
block|}
end_class
end_unit
