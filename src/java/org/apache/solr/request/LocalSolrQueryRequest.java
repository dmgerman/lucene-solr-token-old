begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.request
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|MultiMapSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_comment
comment|// With the addition of SolrParams, this class isn't needed for much anymore... it's currently
end_comment
begin_comment
comment|// retained more for backward compatibility.
end_comment
begin_comment
comment|/**  * @version $Id$  */
end_comment
begin_class
DECL|class|LocalSolrQueryRequest
specifier|public
class|class
name|LocalSolrQueryRequest
extends|extends
name|SolrQueryRequestBase
block|{
DECL|field|emptyArgs
specifier|public
specifier|final
specifier|static
name|Map
name|emptyArgs
init|=
operator|new
name|HashMap
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|method|makeParams
specifier|protected
specifier|static
name|SolrParams
name|makeParams
parameter_list|(
name|String
name|query
parameter_list|,
name|String
name|qtype
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|limit
parameter_list|,
name|Map
name|args
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|args
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|e
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|k
init|=
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Object
name|v
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|instanceof
name|String
index|[]
condition|)
name|map
operator|.
name|put
argument_list|(
name|k
argument_list|,
operator|(
name|String
index|[]
operator|)
name|v
argument_list|)
expr_stmt|;
else|else
name|map
operator|.
name|put
argument_list|(
name|k
argument_list|,
operator|new
name|String
index|[]
block|{
name|v
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
name|map
operator|.
name|put
argument_list|(
name|SolrParams
operator|.
name|Q
argument_list|,
operator|new
name|String
index|[]
block|{
name|query
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|qtype
operator|!=
literal|null
condition|)
name|map
operator|.
name|put
argument_list|(
name|SolrParams
operator|.
name|QT
argument_list|,
operator|new
name|String
index|[]
block|{
name|qtype
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|SolrParams
operator|.
name|START
argument_list|,
operator|new
name|String
index|[]
block|{
name|Integer
operator|.
name|toString
argument_list|(
name|start
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|SolrParams
operator|.
name|ROWS
argument_list|,
operator|new
name|String
index|[]
block|{
name|Integer
operator|.
name|toString
argument_list|(
name|limit
argument_list|)
block|}
argument_list|)
expr_stmt|;
return|return
operator|new
name|MultiMapSolrParams
argument_list|(
name|map
argument_list|)
return|;
block|}
DECL|method|LocalSolrQueryRequest
specifier|public
name|LocalSolrQueryRequest
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|String
name|query
parameter_list|,
name|String
name|qtype
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|limit
parameter_list|,
name|Map
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|core
argument_list|,
name|makeParams
argument_list|(
name|query
argument_list|,
name|qtype
argument_list|,
name|start
argument_list|,
name|limit
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|LocalSolrQueryRequest
specifier|public
name|LocalSolrQueryRequest
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|NamedList
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|core
argument_list|,
name|SolrParams
operator|.
name|toSolrParams
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|LocalSolrQueryRequest
specifier|public
name|LocalSolrQueryRequest
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|core
argument_list|,
operator|new
name|MultiMapSolrParams
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|LocalSolrQueryRequest
specifier|public
name|LocalSolrQueryRequest
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|SolrParams
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|core
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
