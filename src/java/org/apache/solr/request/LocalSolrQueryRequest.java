begin_unit
begin_comment
comment|/**  * Copyright 2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.request
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_comment
comment|/**  * @author yonik  * @version $Id$  */
end_comment
begin_class
DECL|class|LocalSolrQueryRequest
specifier|public
class|class
name|LocalSolrQueryRequest
extends|extends
name|SolrQueryRequestBase
block|{
DECL|field|args
specifier|private
specifier|final
name|NamedList
name|args
decl_stmt|;
DECL|field|query
specifier|private
specifier|final
name|String
name|query
decl_stmt|;
DECL|field|qtype
specifier|private
specifier|final
name|String
name|qtype
decl_stmt|;
DECL|field|start
specifier|private
specifier|final
name|int
name|start
decl_stmt|;
DECL|field|limit
specifier|private
specifier|final
name|int
name|limit
decl_stmt|;
DECL|field|emptyArgs
specifier|public
specifier|final
specifier|static
name|Map
name|emptyArgs
init|=
operator|new
name|HashMap
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|method|LocalSolrQueryRequest
specifier|public
name|LocalSolrQueryRequest
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|String
name|query
parameter_list|,
name|String
name|qtype
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|limit
parameter_list|,
name|Map
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|core
argument_list|)
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
name|this
operator|.
name|qtype
operator|=
name|qtype
expr_stmt|;
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|limit
operator|=
name|limit
expr_stmt|;
name|this
operator|.
name|args
operator|=
operator|new
name|NamedList
argument_list|()
expr_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
name|this
operator|.
name|args
operator|.
name|add
argument_list|(
name|SolrQueryRequestBase
operator|.
name|QUERY_NAME
argument_list|,
name|query
argument_list|)
expr_stmt|;
if|if
condition|(
name|qtype
operator|!=
literal|null
condition|)
name|this
operator|.
name|args
operator|.
name|add
argument_list|(
name|SolrQueryRequestBase
operator|.
name|QUERYTYPE_NAME
argument_list|,
name|qtype
argument_list|)
expr_stmt|;
name|this
operator|.
name|args
operator|.
name|add
argument_list|(
name|SolrQueryRequestBase
operator|.
name|START_NAME
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|args
operator|.
name|add
argument_list|(
name|SolrQueryRequestBase
operator|.
name|ROWS_NAME
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|limit
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|args
operator|!=
literal|null
condition|)
name|this
operator|.
name|args
operator|.
name|addAll
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
DECL|method|LocalSolrQueryRequest
specifier|public
name|LocalSolrQueryRequest
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|NamedList
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|core
argument_list|)
expr_stmt|;
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|getStrParam
argument_list|(
name|QUERY_NAME
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|qtype
operator|=
name|getStrParam
argument_list|(
name|QUERYTYPE_NAME
argument_list|,
literal|null
argument_list|)
expr_stmt|;
empty_stmt|;
name|this
operator|.
name|start
operator|=
name|getIntParam
argument_list|(
name|START_NAME
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|limit
operator|=
name|getIntParam
argument_list|(
name|ROWS_NAME
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
DECL|method|getParam
specifier|public
name|String
name|getParam
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|args
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|getQueryString
specifier|public
name|String
name|getQueryString
parameter_list|()
block|{
return|return
name|query
return|;
block|}
comment|// signifies the syntax and the handler that should be used
comment|// to execute this query.
DECL|method|getQueryType
specifier|public
name|String
name|getQueryType
parameter_list|()
block|{
return|return
name|qtype
return|;
block|}
comment|// starting position in matches to return to client
DECL|method|getStart
specifier|public
name|int
name|getStart
parameter_list|()
block|{
return|return
name|start
return|;
block|}
comment|// number of matching documents to return
DECL|method|getLimit
specifier|public
name|int
name|getLimit
parameter_list|()
block|{
return|return
name|limit
return|;
block|}
DECL|field|startTime
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Get the start time of this request in milliseconds
DECL|method|getStartTime
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
comment|// The index searcher associated with this request
DECL|field|searcherHolder
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searcherHolder
decl_stmt|;
DECL|method|getSearcher
specifier|public
name|SolrIndexSearcher
name|getSearcher
parameter_list|()
block|{
comment|// should this reach out and get a searcher from the core singleton, or
comment|// should the core populate one in a factory method to create requests?
comment|// or there could be a setSearcher() method that Solr calls
if|if
condition|(
name|searcherHolder
operator|==
literal|null
condition|)
block|{
name|searcherHolder
operator|=
name|core
operator|.
name|getSearcher
argument_list|()
expr_stmt|;
block|}
return|return
name|searcherHolder
operator|.
name|get
argument_list|()
return|;
block|}
comment|// The solr core (coordinator, etc) associated with this request
DECL|method|getCore
specifier|public
name|SolrCore
name|getCore
parameter_list|()
block|{
return|return
name|core
return|;
block|}
comment|// The index schema associated with this request
DECL|method|getSchema
specifier|public
name|IndexSchema
name|getSchema
parameter_list|()
block|{
return|return
name|core
operator|.
name|getSchema
argument_list|()
return|;
block|}
DECL|method|getParamString
specifier|public
name|String
name|getParamString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|128
argument_list|)
decl_stmt|;
try|try
block|{
name|boolean
name|first
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"q="
argument_list|)
expr_stmt|;
name|StrUtils
operator|.
name|partialURLEncodeVal
argument_list|(
name|sb
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
comment|// null, "", and "standard" are all the default query handler.
if|if
condition|(
name|qtype
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|qtype
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|||
name|qtype
operator|.
name|equals
argument_list|(
literal|"standard"
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"qt="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|qtype
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|start
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"start="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|start
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"rows="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|limit
argument_list|)
expr_stmt|;
if|if
condition|(
name|args
operator|!=
literal|null
operator|&&
name|args
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|args
operator|.
name|getName
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
name|StrUtils
operator|.
name|partialURLEncodeVal
argument_list|(
name|sb
argument_list|,
name|args
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// should never happen... we only needed this because
comment|// partialURLEncodeVal can throw an IOException, but it
comment|// never will when adding to a StringBuilder.
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|searcherHolder
operator|!=
literal|null
condition|)
block|{
name|searcherHolder
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
