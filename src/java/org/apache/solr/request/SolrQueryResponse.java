begin_unit
begin_comment
comment|/**  * Copyright 2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.request
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  *<code>SolrQueryResponse</code> is used by a query handler to return  * the response to a query.  * @author yonik  * @version $Id: SolrQueryResponse.java,v 1.5 2005/08/10 04:27:04 yonik Exp $  * @since solr 0.9  */
end_comment
begin_class
DECL|class|SolrQueryResponse
specifier|public
class|class
name|SolrQueryResponse
block|{
DECL|field|values
specifier|protected
name|NamedList
name|values
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
comment|// current holder for user defined values
DECL|field|defaultReturnFields
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|defaultReturnFields
decl_stmt|;
comment|// error if this is set...
DECL|field|err
specifier|protected
name|Exception
name|err
decl_stmt|;
comment|/***    // another way of returning an error   int errCode;   String errMsg;   ***/
DECL|method|getValues
specifier|public
name|NamedList
name|getValues
parameter_list|()
block|{
return|return
name|values
return|;
block|}
comment|/**    *  Sets a list of all the named values to return.    */
DECL|method|setAllValues
specifier|public
name|void
name|setAllValues
parameter_list|(
name|NamedList
name|nameValuePairs
parameter_list|)
block|{
name|values
operator|=
name|nameValuePairs
expr_stmt|;
block|}
comment|/**    * Sets the document field names of fields to return by default.    */
DECL|method|setReturnFields
specifier|public
name|void
name|setReturnFields
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|)
block|{
name|defaultReturnFields
operator|=
name|fields
expr_stmt|;
block|}
comment|// TODO: should this be represented as a String[] such
comment|// that order can be maintained if needed?
comment|/**    * The document field names to return by default.    */
DECL|method|getReturnFields
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getReturnFields
parameter_list|()
block|{
return|return
name|defaultReturnFields
return|;
block|}
comment|/**    * Appends a named value to the list of named values to be returned.    * @param name  the name of the value - may be null if unnamed    * @param val   the value to add - also may be null since null is a legal value    */
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|val
parameter_list|)
block|{
name|values
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**    * Causes an error to be returned instead of the results.    */
DECL|method|setException
specifier|public
name|void
name|setException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|err
operator|=
name|e
expr_stmt|;
block|}
comment|/**    * Returns an Exception if there was a fatal error in processing the request.    * Returns null if the request succeeded.    */
DECL|method|getException
specifier|public
name|Exception
name|getException
parameter_list|()
block|{
return|return
name|err
return|;
block|}
comment|// Get and Set the endtime in milliseconds... used
comment|// to calculate query time.
DECL|field|endtime
specifier|protected
name|long
name|endtime
decl_stmt|;
comment|/** Time in milliseconds when the response officially finished.     */
DECL|method|getEndTime
specifier|public
name|long
name|getEndTime
parameter_list|()
block|{
if|if
condition|(
name|endtime
operator|==
literal|0
condition|)
block|{
name|setEndTime
argument_list|()
expr_stmt|;
block|}
return|return
name|endtime
return|;
block|}
comment|/**    * Stop the timer for how long this query took.    */
DECL|method|setEndTime
specifier|public
name|long
name|setEndTime
parameter_list|()
block|{
return|return
name|setEndTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
return|;
block|}
DECL|method|setEndTime
specifier|public
name|long
name|setEndTime
parameter_list|(
name|long
name|endtime
parameter_list|)
block|{
if|if
condition|(
name|endtime
operator|!=
literal|0
condition|)
block|{
name|this
operator|.
name|endtime
operator|=
name|endtime
expr_stmt|;
block|}
return|return
name|this
operator|.
name|endtime
return|;
block|}
block|}
end_class
end_unit
