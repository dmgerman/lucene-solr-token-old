begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.request
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import
begin_class
DECL|class|PythonResponseWriter
specifier|public
class|class
name|PythonResponseWriter
implements|implements
name|QueryResponseWriter
block|{
DECL|field|CONTENT_TYPE_PYTHON_ASCII
specifier|static
name|String
name|CONTENT_TYPE_PYTHON_ASCII
init|=
literal|"text/x-python;charset=US-ASCII"
decl_stmt|;
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|n
parameter_list|)
block|{
comment|/* NOOP */
block|}
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|IOException
block|{
name|PythonWriter
name|w
init|=
operator|new
name|PythonWriter
argument_list|(
name|writer
argument_list|,
name|req
argument_list|,
name|rsp
argument_list|)
decl_stmt|;
name|w
operator|.
name|writeResponse
argument_list|()
expr_stmt|;
block|}
DECL|method|getContentType
specifier|public
name|String
name|getContentType
parameter_list|(
name|SolrQueryRequest
name|request
parameter_list|,
name|SolrQueryResponse
name|response
parameter_list|)
block|{
return|return
name|CONTENT_TYPE_TEXT_ASCII
return|;
block|}
block|}
end_class
begin_class
DECL|class|PythonWriter
class|class
name|PythonWriter
extends|extends
name|JSONWriter
block|{
DECL|method|PythonWriter
specifier|public
name|PythonWriter
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
name|super
argument_list|(
name|writer
argument_list|,
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeNull
specifier|public
name|void
name|writeNull
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"None"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeBool
specifier|public
name|void
name|writeBool
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|write
argument_list|(
name|val
condition|?
literal|"True"
else|:
literal|"False"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeBool
specifier|public
name|void
name|writeBool
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writeBool
argument_list|(
name|name
argument_list|,
name|val
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'t'
argument_list|)
expr_stmt|;
block|}
comment|/* optionally use a unicode python string if necessary */
annotation|@
name|Override
DECL|method|writeStr
specifier|public
name|void
name|writeStr
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|,
name|boolean
name|needsEscaping
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|needsEscaping
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// use python unicode strings...
comment|// python doesn't tolerate newlines in strings in it's eval(), so we must escape them.
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|val
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|needUnicode
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|val
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|val
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|ch
condition|)
block|{
case|case
literal|'\''
case|:
case|case
literal|'\\'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\r'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\\r"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\n'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\\n"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\t'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\\t"
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// we don't strictly have to escape these chars, but it will probably increase
comment|// portability to stick to visible ascii
if|if
condition|(
name|ch
argument_list|<
literal|' '
operator|||
name|ch
argument_list|>
literal|127
condition|)
block|{
name|unicodeEscape
argument_list|(
name|sb
argument_list|,
name|ch
argument_list|)
expr_stmt|;
name|needUnicode
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|needUnicode
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|'u'
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
block|}
comment|/*   old version that always used unicode   public void writeStr(String name, String val, boolean needsEscaping) throws IOException {     // use python unicode strings...     // python doesn't tolerate newlines in strings in it's eval(), so we must escape them.     writer.write("u'");     // it might be more efficient to use a stringbuilder or write substrings     // if writing chars to the stream is slow.     if (needsEscaping) {       for (int i=0; i<val.length(); i++) {         char ch = val.charAt(i);         switch(ch) {           case '\'':           case '\\': writer.write('\\'); writer.write(ch); break;           case '\r': writer.write("\\r"); break;           case '\n': writer.write("\\n"); break;           default:             // we don't strictly have to escape these chars, but it will probably increase             // portability to stick to visible ascii             if (ch<' ' || ch>127) {               unicodeChar(ch);             } else {               writer.write(ch);             }         }       }     } else {       writer.write(val);     }     writer.write('\'');   }   */
block|}
end_class
end_unit
