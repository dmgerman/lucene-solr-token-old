begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.solr.highlight
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|highlight
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|Fragmenter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|NullFragmenter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|SimpleFragmenter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|DefaultSolrParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|HighlightParams
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import
begin_class
DECL|class|GapFragmenter
specifier|public
class|class
name|GapFragmenter
extends|extends
name|HighlightingPluginBase
implements|implements
name|SolrFragmenter
block|{
DECL|method|getFragmenter
specifier|public
name|Fragmenter
name|getFragmenter
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|SolrParams
name|params
parameter_list|)
block|{
name|numRequests
operator|++
expr_stmt|;
if|if
condition|(
name|defaults
operator|!=
literal|null
condition|)
block|{
name|params
operator|=
operator|new
name|DefaultSolrParams
argument_list|(
name|params
argument_list|,
name|defaults
argument_list|)
expr_stmt|;
block|}
name|int
name|fragsize
init|=
name|params
operator|.
name|getFieldInt
argument_list|(
name|fieldName
argument_list|,
name|HighlightParams
operator|.
name|FRAGSIZE
argument_list|,
literal|100
argument_list|)
decl_stmt|;
return|return
operator|(
name|fragsize
operator|<=
literal|0
operator|)
condition|?
operator|new
name|NullFragmenter
argument_list|()
else|:
operator|new
name|LuceneGapFragmenter
argument_list|(
name|fragsize
argument_list|)
return|;
block|}
comment|///////////////////////////////////////////////////////////////////////
comment|//////////////////////// SolrInfoMBeans methods ///////////////////////
comment|///////////////////////////////////////////////////////////////////////
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"GapFragmenter"
return|;
block|}
annotation|@
name|Override
DECL|method|getVersion
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
literal|"$Revision$"
return|;
block|}
annotation|@
name|Override
DECL|method|getSourceId
specifier|public
name|String
name|getSourceId
parameter_list|()
block|{
return|return
literal|"$Id$"
return|;
block|}
annotation|@
name|Override
DECL|method|getSource
specifier|public
name|String
name|getSource
parameter_list|()
block|{
return|return
literal|"$URL$"
return|;
block|}
block|}
end_class
begin_comment
comment|/**  * A simple modification of SimpleFragmenter which additionally creates new  * fragments when an unusually-large position increment is encountered  * (this behaves much better in the presence of multi-valued fields).  */
end_comment
begin_class
DECL|class|LuceneGapFragmenter
class|class
name|LuceneGapFragmenter
extends|extends
name|SimpleFragmenter
block|{
comment|/**     * When a gap in term positions is observed that is at least this big, treat    * the gap as a fragment delimiter.    */
DECL|field|INCREMENT_THRESHOLD
specifier|public
specifier|static
specifier|final
name|int
name|INCREMENT_THRESHOLD
init|=
literal|50
decl_stmt|;
DECL|field|fragOffsetAccum
specifier|protected
name|int
name|fragOffsetAccum
init|=
literal|0
decl_stmt|;
DECL|method|LuceneGapFragmenter
specifier|public
name|LuceneGapFragmenter
parameter_list|()
block|{   }
DECL|method|LuceneGapFragmenter
specifier|public
name|LuceneGapFragmenter
parameter_list|(
name|int
name|fragsize
parameter_list|)
block|{
name|super
argument_list|(
name|fragsize
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.lucene.search.highlight.TextFragmenter#start(java.lang.String)    */
DECL|method|start
specifier|public
name|void
name|start
parameter_list|(
name|String
name|originalText
parameter_list|)
block|{
name|fragOffsetAccum
operator|=
literal|0
expr_stmt|;
block|}
comment|/* (non-Javadoc)    * @see org.apache.lucene.search.highlight.TextFragmenter#isNewFragment(org.apache.lucene.analysis.Token)    */
DECL|method|isNewFragment
specifier|public
name|boolean
name|isNewFragment
parameter_list|(
name|Token
name|token
parameter_list|)
block|{
name|boolean
name|isNewFrag
init|=
name|token
operator|.
name|endOffset
argument_list|()
operator|>=
name|fragOffsetAccum
operator|+
name|getFragmentSize
argument_list|()
operator|||
name|token
operator|.
name|getPositionIncrement
argument_list|()
operator|>
name|INCREMENT_THRESHOLD
decl_stmt|;
if|if
condition|(
name|isNewFrag
condition|)
block|{
name|fragOffsetAccum
operator|+=
name|token
operator|.
name|endOffset
argument_list|()
operator|-
name|fragOffsetAccum
expr_stmt|;
block|}
return|return
name|isNewFrag
return|;
block|}
block|}
end_class
end_unit
