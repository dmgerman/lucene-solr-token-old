begin_unit
begin_package
DECL|package|org.apache.lucene.store
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A memory-resident {@link IndexInput} implementation.  *  * @version $Id$  */
end_comment
begin_class
DECL|class|RAMInputStream
class|class
name|RAMInputStream
extends|extends
name|BufferedIndexInput
implements|implements
name|Cloneable
block|{
DECL|field|file
specifier|private
name|RAMFile
name|file
decl_stmt|;
DECL|field|pointer
specifier|private
name|int
name|pointer
init|=
literal|0
decl_stmt|;
DECL|field|length
specifier|private
name|long
name|length
decl_stmt|;
DECL|method|RAMInputStream
specifier|public
name|RAMInputStream
parameter_list|(
name|RAMFile
name|f
parameter_list|)
block|{
name|file
operator|=
name|f
expr_stmt|;
name|length
operator|=
name|file
operator|.
name|length
expr_stmt|;
block|}
DECL|method|readInternal
specifier|public
name|void
name|readInternal
parameter_list|(
name|byte
index|[]
name|dest
parameter_list|,
name|int
name|destOffset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|int
name|remainder
init|=
name|len
decl_stmt|;
name|int
name|start
init|=
name|pointer
decl_stmt|;
while|while
condition|(
name|remainder
operator|!=
literal|0
condition|)
block|{
name|int
name|bufferNumber
init|=
name|start
operator|/
name|BUFFER_SIZE
decl_stmt|;
name|int
name|bufferOffset
init|=
name|start
operator|%
name|BUFFER_SIZE
decl_stmt|;
name|int
name|bytesInBuffer
init|=
name|BUFFER_SIZE
operator|-
name|bufferOffset
decl_stmt|;
name|int
name|bytesToCopy
init|=
name|bytesInBuffer
operator|>=
name|remainder
condition|?
name|remainder
else|:
name|bytesInBuffer
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|(
name|byte
index|[]
operator|)
name|file
operator|.
name|buffers
operator|.
name|elementAt
argument_list|(
name|bufferNumber
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
name|bufferOffset
argument_list|,
name|dest
argument_list|,
name|destOffset
argument_list|,
name|bytesToCopy
argument_list|)
expr_stmt|;
name|destOffset
operator|+=
name|bytesToCopy
expr_stmt|;
name|start
operator|+=
name|bytesToCopy
expr_stmt|;
name|remainder
operator|-=
name|bytesToCopy
expr_stmt|;
block|}
name|pointer
operator|+=
name|len
expr_stmt|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{   }
DECL|method|seekInternal
specifier|public
name|void
name|seekInternal
parameter_list|(
name|long
name|pos
parameter_list|)
block|{
name|pointer
operator|=
operator|(
name|int
operator|)
name|pos
expr_stmt|;
block|}
DECL|method|length
specifier|public
name|long
name|length
parameter_list|()
block|{
return|return
name|length
return|;
block|}
block|}
end_class
end_unit
