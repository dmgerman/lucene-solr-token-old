begin_unit
begin_package
DECL|package|org.apache.lucene.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|FlagsAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PayloadAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TypeAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Payload
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeImpl
import|;
end_import
begin_comment
comment|/**   * This class wraps a Token and supplies a single attribute instance  * where the delegate token can be replaced.  * @deprecated Will be removed, when old TokenStream API is removed.  */
end_comment
begin_class
DECL|class|TokenWrapper
specifier|final
class|class
name|TokenWrapper
extends|extends
name|AttributeImpl
implements|implements
name|Cloneable
implements|,
name|TermAttribute
implements|,
name|TypeAttribute
implements|,
name|PositionIncrementAttribute
implements|,
name|FlagsAttribute
implements|,
name|OffsetAttribute
implements|,
name|PayloadAttribute
block|{
DECL|field|delegate
name|Token
name|delegate
decl_stmt|;
DECL|method|TokenWrapper
name|TokenWrapper
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|Token
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|TokenWrapper
name|TokenWrapper
parameter_list|(
name|Token
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
comment|// TermAttribute:
DECL|method|term
specifier|public
name|String
name|term
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|term
argument_list|()
return|;
block|}
DECL|method|setTermBuffer
specifier|public
name|void
name|setTermBuffer
parameter_list|(
name|char
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|delegate
operator|.
name|setTermBuffer
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|setTermBuffer
specifier|public
name|void
name|setTermBuffer
parameter_list|(
name|String
name|buffer
parameter_list|)
block|{
name|delegate
operator|.
name|setTermBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
DECL|method|setTermBuffer
specifier|public
name|void
name|setTermBuffer
parameter_list|(
name|String
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|delegate
operator|.
name|setTermBuffer
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|termBuffer
specifier|public
name|char
index|[]
name|termBuffer
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|termBuffer
argument_list|()
return|;
block|}
DECL|method|resizeTermBuffer
specifier|public
name|char
index|[]
name|resizeTermBuffer
parameter_list|(
name|int
name|newSize
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|resizeTermBuffer
argument_list|(
name|newSize
argument_list|)
return|;
block|}
DECL|method|termLength
specifier|public
name|int
name|termLength
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|termLength
argument_list|()
return|;
block|}
DECL|method|setTermLength
specifier|public
name|void
name|setTermLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|delegate
operator|.
name|setTermLength
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
comment|// TypeAttribute:
DECL|method|type
specifier|public
name|String
name|type
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|type
argument_list|()
return|;
block|}
DECL|method|setType
specifier|public
name|void
name|setType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|delegate
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
DECL|method|setPositionIncrement
specifier|public
name|void
name|setPositionIncrement
parameter_list|(
name|int
name|positionIncrement
parameter_list|)
block|{
name|delegate
operator|.
name|setPositionIncrement
argument_list|(
name|positionIncrement
argument_list|)
expr_stmt|;
block|}
DECL|method|getPositionIncrement
specifier|public
name|int
name|getPositionIncrement
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getPositionIncrement
argument_list|()
return|;
block|}
comment|// FlagsAttribute
DECL|method|getFlags
specifier|public
name|int
name|getFlags
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getFlags
argument_list|()
return|;
block|}
DECL|method|setFlags
specifier|public
name|void
name|setFlags
parameter_list|(
name|int
name|flags
parameter_list|)
block|{
name|delegate
operator|.
name|setFlags
argument_list|(
name|flags
argument_list|)
expr_stmt|;
block|}
comment|// OffsetAttribute
DECL|method|startOffset
specifier|public
name|int
name|startOffset
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|startOffset
argument_list|()
return|;
block|}
DECL|method|setOffset
specifier|public
name|void
name|setOffset
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
block|{
name|delegate
operator|.
name|setOffset
argument_list|(
name|startOffset
argument_list|,
name|endOffset
argument_list|)
expr_stmt|;
block|}
DECL|method|endOffset
specifier|public
name|int
name|endOffset
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|endOffset
argument_list|()
return|;
block|}
comment|// PayloadAttribute
DECL|method|getPayload
specifier|public
name|Payload
name|getPayload
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getPayload
argument_list|()
return|;
block|}
DECL|method|setPayload
specifier|public
name|void
name|setPayload
parameter_list|(
name|Payload
name|payload
parameter_list|)
block|{
name|delegate
operator|.
name|setPayload
argument_list|(
name|payload
argument_list|)
expr_stmt|;
block|}
comment|// AttributeImpl
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|delegate
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|hashCode
argument_list|()
return|;
block|}
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|TokenWrapper
condition|)
block|{
return|return
operator|(
operator|(
name|TokenWrapper
operator|)
name|other
operator|)
operator|.
name|delegate
operator|.
name|equals
argument_list|(
name|this
operator|.
name|delegate
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|clone
specifier|public
name|Object
name|clone
parameter_list|()
block|{
return|return
operator|new
name|TokenWrapper
argument_list|(
operator|(
name|Token
operator|)
name|delegate
operator|.
name|clone
argument_list|()
argument_list|)
return|;
block|}
DECL|method|copyTo
specifier|public
name|void
name|copyTo
parameter_list|(
name|AttributeImpl
name|target
parameter_list|)
block|{
if|if
condition|(
name|target
operator|instanceof
name|TokenWrapper
condition|)
block|{
operator|(
operator|(
name|TokenWrapper
operator|)
name|target
operator|)
operator|.
name|delegate
operator|=
operator|(
name|Token
operator|)
name|this
operator|.
name|delegate
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|delegate
operator|.
name|copyTo
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
