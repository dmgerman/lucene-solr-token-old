begin_unit
begin_package
DECL|package|org.apache.lucene.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_comment
comment|/** Filters LetterTokenizer with LowerCaseFilter and StopFilter. */
end_comment
begin_class
DECL|class|StopAnalyzer
specifier|public
specifier|final
class|class
name|StopAnalyzer
extends|extends
name|Analyzer
block|{
DECL|field|stopWords
specifier|private
name|Set
name|stopWords
decl_stmt|;
comment|// @deprecated
DECL|field|useDefaultStopPositionIncrement
specifier|private
name|boolean
name|useDefaultStopPositionIncrement
decl_stmt|;
DECL|field|enablePositionIncrements
specifier|private
name|boolean
name|enablePositionIncrements
decl_stmt|;
comment|/** An array containing some common English words that are not usually useful     for searching. */
DECL|field|ENGLISH_STOP_WORDS
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|ENGLISH_STOP_WORDS
init|=
block|{
literal|"a"
block|,
literal|"an"
block|,
literal|"and"
block|,
literal|"are"
block|,
literal|"as"
block|,
literal|"at"
block|,
literal|"be"
block|,
literal|"but"
block|,
literal|"by"
block|,
literal|"for"
block|,
literal|"if"
block|,
literal|"in"
block|,
literal|"into"
block|,
literal|"is"
block|,
literal|"it"
block|,
literal|"no"
block|,
literal|"not"
block|,
literal|"of"
block|,
literal|"on"
block|,
literal|"or"
block|,
literal|"such"
block|,
literal|"that"
block|,
literal|"the"
block|,
literal|"their"
block|,
literal|"then"
block|,
literal|"there"
block|,
literal|"these"
block|,
literal|"they"
block|,
literal|"this"
block|,
literal|"to"
block|,
literal|"was"
block|,
literal|"will"
block|,
literal|"with"
block|}
decl_stmt|;
comment|/** Builds an analyzer which removes words in    * ENGLISH_STOP_WORDS.    * @deprecated Use {@link #StopAnalyzer(boolean)} instead */
DECL|method|StopAnalyzer
specifier|public
name|StopAnalyzer
parameter_list|()
block|{
name|stopWords
operator|=
name|StopFilter
operator|.
name|makeStopSet
argument_list|(
name|ENGLISH_STOP_WORDS
argument_list|)
expr_stmt|;
name|useDefaultStopPositionIncrement
operator|=
literal|true
expr_stmt|;
block|}
comment|/** Builds an analyzer which removes words in    *  ENGLISH_STOP_WORDS.    * @param enablePositionIncrements See {@link    * StopFilter#setEnablePositionIncrements} */
DECL|method|StopAnalyzer
specifier|public
name|StopAnalyzer
parameter_list|(
name|boolean
name|enablePositionIncrements
parameter_list|)
block|{
name|stopWords
operator|=
name|StopFilter
operator|.
name|makeStopSet
argument_list|(
name|ENGLISH_STOP_WORDS
argument_list|)
expr_stmt|;
name|this
operator|.
name|enablePositionIncrements
operator|=
name|enablePositionIncrements
expr_stmt|;
block|}
comment|/** Builds an analyzer with the stop words from the given set.    * @deprecated Use {@link #StopAnalyzer(Set, boolean)} instead */
DECL|method|StopAnalyzer
specifier|public
name|StopAnalyzer
parameter_list|(
name|Set
name|stopWords
parameter_list|)
block|{
name|this
operator|.
name|stopWords
operator|=
name|stopWords
expr_stmt|;
name|useDefaultStopPositionIncrement
operator|=
literal|true
expr_stmt|;
block|}
comment|/** Builds an analyzer with the stop words from the given set.    * @param stopWords Set of stop words    * @param enablePositionIncrements See {@link    * StopFilter#setEnablePositionIncrements} */
DECL|method|StopAnalyzer
specifier|public
name|StopAnalyzer
parameter_list|(
name|Set
name|stopWords
parameter_list|,
name|boolean
name|enablePositionIncrements
parameter_list|)
block|{
name|this
operator|.
name|stopWords
operator|=
name|stopWords
expr_stmt|;
name|this
operator|.
name|enablePositionIncrements
operator|=
name|enablePositionIncrements
expr_stmt|;
block|}
comment|/** Builds an analyzer which removes words in the provided array.    * @deprecated Use {@link #StopAnalyzer(String[], boolean)} instead */
DECL|method|StopAnalyzer
specifier|public
name|StopAnalyzer
parameter_list|(
name|String
index|[]
name|stopWords
parameter_list|)
block|{
name|this
operator|.
name|stopWords
operator|=
name|StopFilter
operator|.
name|makeStopSet
argument_list|(
name|stopWords
argument_list|)
expr_stmt|;
name|useDefaultStopPositionIncrement
operator|=
literal|true
expr_stmt|;
block|}
comment|/** Builds an analyzer which removes words in the provided array.    * @param stopWords Array of stop words    * @param enablePositionIncrements See {@link    * StopFilter#setEnablePositionIncrements} */
DECL|method|StopAnalyzer
specifier|public
name|StopAnalyzer
parameter_list|(
name|String
index|[]
name|stopWords
parameter_list|,
name|boolean
name|enablePositionIncrements
parameter_list|)
block|{
name|this
operator|.
name|stopWords
operator|=
name|StopFilter
operator|.
name|makeStopSet
argument_list|(
name|stopWords
argument_list|)
expr_stmt|;
name|this
operator|.
name|enablePositionIncrements
operator|=
name|enablePositionIncrements
expr_stmt|;
block|}
comment|/** Builds an analyzer with the stop words from the given file.    * @see WordlistLoader#getWordSet(File)    * @deprecated Use {@link #StopAnalyzer(File, boolean)} instead */
DECL|method|StopAnalyzer
specifier|public
name|StopAnalyzer
parameter_list|(
name|File
name|stopwordsFile
parameter_list|)
throws|throws
name|IOException
block|{
name|stopWords
operator|=
name|WordlistLoader
operator|.
name|getWordSet
argument_list|(
name|stopwordsFile
argument_list|)
expr_stmt|;
name|useDefaultStopPositionIncrement
operator|=
literal|true
expr_stmt|;
block|}
comment|/** Builds an analyzer with the stop words from the given file.    * @see WordlistLoader#getWordSet(File)    * @param stopwordsFile File to load stop words from    * @param enablePositionIncrements See {@link    * StopFilter#setEnablePositionIncrements} */
DECL|method|StopAnalyzer
specifier|public
name|StopAnalyzer
parameter_list|(
name|File
name|stopwordsFile
parameter_list|,
name|boolean
name|enablePositionIncrements
parameter_list|)
throws|throws
name|IOException
block|{
name|stopWords
operator|=
name|WordlistLoader
operator|.
name|getWordSet
argument_list|(
name|stopwordsFile
argument_list|)
expr_stmt|;
name|this
operator|.
name|enablePositionIncrements
operator|=
name|enablePositionIncrements
expr_stmt|;
block|}
comment|/** Builds an analyzer with the stop words from the given reader.    * @see WordlistLoader#getWordSet(Reader)    * @deprecated Use {@link #StopAnalyzer(Reader, boolean)} instead    */
DECL|method|StopAnalyzer
specifier|public
name|StopAnalyzer
parameter_list|(
name|Reader
name|stopwords
parameter_list|)
throws|throws
name|IOException
block|{
name|stopWords
operator|=
name|WordlistLoader
operator|.
name|getWordSet
argument_list|(
name|stopwords
argument_list|)
expr_stmt|;
name|useDefaultStopPositionIncrement
operator|=
literal|true
expr_stmt|;
block|}
comment|/** Builds an analyzer with the stop words from the given reader.    * @see WordlistLoader#getWordSet(Reader)    * @param stopwords Reader to load stop words from    * @param enablePositionIncrements See {@link    * StopFilter#setEnablePositionIncrements} */
DECL|method|StopAnalyzer
specifier|public
name|StopAnalyzer
parameter_list|(
name|Reader
name|stopwords
parameter_list|,
name|boolean
name|enablePositionIncrements
parameter_list|)
throws|throws
name|IOException
block|{
name|stopWords
operator|=
name|WordlistLoader
operator|.
name|getWordSet
argument_list|(
name|stopwords
argument_list|)
expr_stmt|;
name|this
operator|.
name|enablePositionIncrements
operator|=
name|enablePositionIncrements
expr_stmt|;
block|}
comment|/** Filters LowerCaseTokenizer with StopFilter. */
DECL|method|tokenStream
specifier|public
name|TokenStream
name|tokenStream
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
if|if
condition|(
name|useDefaultStopPositionIncrement
condition|)
block|{
return|return
operator|new
name|StopFilter
argument_list|(
operator|new
name|LowerCaseTokenizer
argument_list|(
name|reader
argument_list|)
argument_list|,
name|stopWords
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|StopFilter
argument_list|(
name|enablePositionIncrements
argument_list|,
operator|new
name|LowerCaseTokenizer
argument_list|(
name|reader
argument_list|)
argument_list|,
name|stopWords
argument_list|)
return|;
block|}
block|}
comment|/** Filters LowerCaseTokenizer with StopFilter. */
DECL|class|SavedStreams
specifier|private
class|class
name|SavedStreams
block|{
DECL|field|source
name|Tokenizer
name|source
decl_stmt|;
DECL|field|result
name|TokenStream
name|result
decl_stmt|;
block|}
empty_stmt|;
DECL|method|reusableTokenStream
specifier|public
name|TokenStream
name|reusableTokenStream
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|SavedStreams
name|streams
init|=
operator|(
name|SavedStreams
operator|)
name|getPreviousTokenStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|streams
operator|==
literal|null
condition|)
block|{
name|streams
operator|=
operator|new
name|SavedStreams
argument_list|()
expr_stmt|;
name|streams
operator|.
name|source
operator|=
operator|new
name|LowerCaseTokenizer
argument_list|(
name|reader
argument_list|)
expr_stmt|;
if|if
condition|(
name|useDefaultStopPositionIncrement
condition|)
block|{
name|streams
operator|.
name|result
operator|=
operator|new
name|StopFilter
argument_list|(
name|streams
operator|.
name|source
argument_list|,
name|stopWords
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|streams
operator|.
name|result
operator|=
operator|new
name|StopFilter
argument_list|(
name|enablePositionIncrements
argument_list|,
name|streams
operator|.
name|source
argument_list|,
name|stopWords
argument_list|)
expr_stmt|;
block|}
name|setPreviousTokenStream
argument_list|(
name|streams
argument_list|)
expr_stmt|;
block|}
else|else
name|streams
operator|.
name|source
operator|.
name|reset
argument_list|(
name|reader
argument_list|)
expr_stmt|;
return|return
name|streams
operator|.
name|result
return|;
block|}
block|}
end_class
end_unit
