begin_unit
begin_package
DECL|package|org.apache.lucene.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Payload
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermPositions
import|;
end_import
begin_comment
comment|// for javadoc
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_comment
comment|/**    This class is now deprecated and a new TokenStream API was introduced with Lucene 2.9.   See Javadocs in {@link TokenStream} for further details.<p>    A Token is an occurrence of a term from the text of a field.  It consists of   a term's text, the start and end offset of the term in the text of the field,   and a type string.<p>   The start and end offsets permit applications to re-associate a token with   its source text, e.g., to display highlighted query terms in a document   browser, or to show matching text fragments in a KWIC (KeyWord In Context)   display, etc.<p>   The type is a string, assigned by a lexical analyzer   (a.k.a. tokenizer), naming the lexical or syntactic class that the token   belongs to.  For example an end of sentence marker token might be implemented   with type "eos".  The default token type is "word".<p>   A Token can optionally have metadata (a.k.a. Payload) in the form of a variable   length byte array. Use {@link TermPositions#getPayloadLength()} and    {@link TermPositions#getPayload(byte[], int)} to retrieve the payloads from the index.<br><br><p><font color="#FF0000">   WARNING: The status of the<b>Payloads</b> feature is experimental.    The APIs introduced here might change in the future and will not be    supported anymore in such a case.</font><br><br><p><b>NOTE:</b> As of 2.3, Token stores the term text   internally as a malleable char[] termBuffer instead of   String termText.  The indexing code and core tokenizers   have been changed to re-use a single Token instance, changing   its buffer and other fields in-place as the Token is   processed.  This provides substantially better indexing   performance as it saves the GC cost of new'ing a Token and   String for every term.  The APIs that accept String   termText are still available but a warning about the   associated performance cost has been added (below).  The   {@link #termText()} method has been deprecated.</p><p>Tokenizers and filters should try to re-use a Token   instance when possible for best performance, by   implementing the {@link TokenStream#next(Token)} API.   Failing that, to create a new Token you should first use   one of the constructors that starts with null text.  To load   the token from a char[] use {@link #setTermBuffer(char[], int, int)}.   To load from a String use {@link #setTermBuffer(String)} or {@link #setTermBuffer(String, int, int)}.   Alternatively you can get the Token's termBuffer by calling either {@link #termBuffer()},   if you know that your text is shorter than the capacity of the termBuffer   or {@link #resizeTermBuffer(int)}, if there is any possibility   that you may need to grow the buffer. Fill in the characters of your term into this   buffer, with {@link String#getChars(int, int, char[], int)} if loading from a string,   or with {@link System#arraycopy(Object, int, Object, int, int)}, and finally call {@link #setTermLength(int)} to   set the length of the term text.  See<a target="_top"   href="https://issues.apache.org/jira/browse/LUCENE-969">LUCENE-969</a>   for details.</p><p>Typical reuse patterns:<ul><li> Copying text from a string (type is reset to #DEFAULT_TYPE if not specified):<br/><pre>     return reusableToken.reinit(string, startOffset, endOffset[, type]);</pre></li><li> Copying some text from a string (type is reset to #DEFAULT_TYPE if not specified):<br/><pre>     return reusableToken.reinit(string, 0, string.length(), startOffset, endOffset[, type]);</pre></li></li><li> Copying text from char[] buffer (type is reset to #DEFAULT_TYPE if not specified):<br/><pre>     return reusableToken.reinit(buffer, 0, buffer.length, startOffset, endOffset[, type]);</pre></li><li> Copying some text from a char[] buffer (type is reset to #DEFAULT_TYPE if not specified):<br/><pre>     return reusableToken.reinit(buffer, start, end - start, startOffset, endOffset[, type]);</pre></li><li> Copying from one one Token to another (type is reset to #DEFAULT_TYPE if not specified):<br/><pre>     return reusableToken.reinit(source.termBuffer(), 0, source.termLength(), source.startOffset(), source.endOffset()[, source.type()]);</pre></li></ul>   A few things to note:<ul><li>clear() initializes most of the fields to default values, but not startOffset, endOffset and type.</li><li>Because<code>TokenStreams</code> can be chained, one cannot assume that the<code>Token's</code> current type is correct.</li><li>The startOffset and endOffset represent the start and offset in the source text. So be careful in adjusting them.</li><li>When caching a reusable token, clone it. When injecting a cached token into a stream that can be reset, clone it again.</li></ul></p>    @see org.apache.lucene.index.Payload   @deprecated A new TokenStream API was introduced with Lucene 2.9.               See javadocs in {@link TokenStream} for further details. */
end_comment
begin_class
DECL|class|Token
specifier|public
class|class
name|Token
implements|implements
name|Cloneable
block|{
DECL|field|DEFAULT_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_TYPE
init|=
literal|"word"
decl_stmt|;
DECL|field|MIN_BUFFER_SIZE
specifier|private
specifier|static
name|int
name|MIN_BUFFER_SIZE
init|=
literal|10
decl_stmt|;
comment|/** @deprecated We will remove this when we remove the    * deprecated APIs */
DECL|field|termText
specifier|private
name|String
name|termText
decl_stmt|;
comment|/**    * Characters for the term text.    * @deprecated This will be made private. Instead, use:    * {@link termBuffer()},     * {@link #setTermBuffer(char[], int, int)},    * {@link #setTermBuffer(String)}, or    * {@link #setTermBuffer(String, int, int)}    */
DECL|field|termBuffer
name|char
index|[]
name|termBuffer
decl_stmt|;
comment|/**    * Length of term text in the buffer.    * @deprecated This will be made private. Instead, use:    * {@link termLength()}, or @{link setTermLength(int)}.    */
DECL|field|termLength
name|int
name|termLength
decl_stmt|;
comment|/**    * Start in source text.    * @deprecated This will be made private. Instead, use:    * {@link startOffset()}, or @{link setStartOffset(int)}.    */
DECL|field|startOffset
name|int
name|startOffset
decl_stmt|;
comment|/**    * End in source text.    * @deprecated This will be made private. Instead, use:    * {@link endOffset()}, or @{link setEndOffset(int)}.    */
DECL|field|endOffset
name|int
name|endOffset
decl_stmt|;
comment|/**    * The lexical type of the token.    * @deprecated This will be made private. Instead, use:    * {@link type()}, or @{link setType(String)}.    */
DECL|field|type
name|String
name|type
init|=
name|DEFAULT_TYPE
decl_stmt|;
DECL|field|flags
specifier|private
name|int
name|flags
decl_stmt|;
comment|/**    * @deprecated This will be made private. Instead, use:    * {@link getPayload()}, or @{link setPayload(Payload)}.    */
DECL|field|payload
name|Payload
name|payload
decl_stmt|;
comment|/**    * @deprecated This will be made private. Instead, use:    * {@link getPositionIncrement()}, or @{link setPositionIncrement(String)}.    */
DECL|field|positionIncrement
name|int
name|positionIncrement
init|=
literal|1
decl_stmt|;
comment|/** Constructs a Token will null text. */
DECL|method|Token
specifier|public
name|Token
parameter_list|()
block|{   }
comment|/** Constructs a Token with null text and start& end    *  offsets.    *  @param start start offset in the source text    *  @param end end offset in the source text */
DECL|method|Token
specifier|public
name|Token
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|startOffset
operator|=
name|start
expr_stmt|;
name|endOffset
operator|=
name|end
expr_stmt|;
block|}
comment|/** Constructs a Token with null text and start& end    *  offsets plus the Token type.    *  @param start start offset in the source text    *  @param end end offset in the source text    *  @param typ the lexical type of this Token */
DECL|method|Token
specifier|public
name|Token
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|String
name|typ
parameter_list|)
block|{
name|startOffset
operator|=
name|start
expr_stmt|;
name|endOffset
operator|=
name|end
expr_stmt|;
name|type
operator|=
name|typ
expr_stmt|;
block|}
comment|/**    * Constructs a Token with null text and start& end    *  offsets plus flags. NOTE: flags is EXPERIMENTAL.    *  @param start start offset in the source text    *  @param end end offset in the source text    *  @param flags The bits to set for this token    */
DECL|method|Token
specifier|public
name|Token
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|startOffset
operator|=
name|start
expr_stmt|;
name|endOffset
operator|=
name|end
expr_stmt|;
name|this
operator|.
name|flags
operator|=
name|flags
expr_stmt|;
block|}
comment|/** Constructs a Token with the given term text, and start    *& end offsets.  The type defaults to "word."    *<b>NOTE:</b> for better indexing speed you should    *  instead use the char[] termBuffer methods to set the    *  term text.    *  @param text term text    *  @param start start offset    *  @param end end offset    *  @deprecated    */
DECL|method|Token
specifier|public
name|Token
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|termText
operator|=
name|text
expr_stmt|;
name|startOffset
operator|=
name|start
expr_stmt|;
name|endOffset
operator|=
name|end
expr_stmt|;
block|}
comment|/** Constructs a Token with the given text, start and end    *  offsets,& type.<b>NOTE:</b> for better indexing    *  speed you should instead use the char[] termBuffer    *  methods to set the term text.    *  @param text term text    *  @param start start offset    *  @param end end offset    *  @param typ token type    *  @deprecated    */
DECL|method|Token
specifier|public
name|Token
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|String
name|typ
parameter_list|)
block|{
name|termText
operator|=
name|text
expr_stmt|;
name|startOffset
operator|=
name|start
expr_stmt|;
name|endOffset
operator|=
name|end
expr_stmt|;
name|type
operator|=
name|typ
expr_stmt|;
block|}
comment|/**    *  Constructs a Token with the given text, start and end    *  offsets,& type.<b>NOTE:</b> for better indexing    *  speed you should instead use the char[] termBuffer    *  methods to set the term text.    * @param text    * @param start    * @param end    * @param flags token type bits    * @deprecated    */
DECL|method|Token
specifier|public
name|Token
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|termText
operator|=
name|text
expr_stmt|;
name|startOffset
operator|=
name|start
expr_stmt|;
name|endOffset
operator|=
name|end
expr_stmt|;
name|this
operator|.
name|flags
operator|=
name|flags
expr_stmt|;
block|}
comment|/**    *  Constructs a Token with the given term buffer (offset    *& length), start and end    *  offsets    * @param startTermBuffer    * @param termBufferOffset    * @param termBufferLength    * @param start    * @param end    */
DECL|method|Token
specifier|public
name|Token
parameter_list|(
name|char
index|[]
name|startTermBuffer
parameter_list|,
name|int
name|termBufferOffset
parameter_list|,
name|int
name|termBufferLength
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|setTermBuffer
argument_list|(
name|startTermBuffer
argument_list|,
name|termBufferOffset
argument_list|,
name|termBufferLength
argument_list|)
expr_stmt|;
name|startOffset
operator|=
name|start
expr_stmt|;
name|endOffset
operator|=
name|end
expr_stmt|;
block|}
comment|/** Set the position increment.  This determines the position of this token    * relative to the previous Token in a {@link TokenStream}, used in phrase    * searching.    *    *<p>The default value is one.    *    *<p>Some common uses for this are:<ul>    *    *<li>Set it to zero to put multiple terms in the same position.  This is    * useful if, e.g., a word has multiple stems.  Searches for phrases    * including either stem will match.  In this case, all but the first stem's    * increment should be set to zero: the increment of the first instance    * should be one.  Repeating a token with an increment of zero can also be    * used to boost the scores of matches on that token.    *    *<li>Set it to values greater than one to inhibit exact phrase matches.    * If, for example, one does not want phrases to match across removed stop    * words, then one could build a stop word filter that removes stop words and    * also sets the increment to the number of stop words removed before each    * non-stop word.  Then exact phrase queries will only match when the terms    * occur with no intervening stop words.    *    *</ul>    * @param positionIncrement the distance from the prior term    * @see org.apache.lucene.index.TermPositions    */
DECL|method|setPositionIncrement
specifier|public
name|void
name|setPositionIncrement
parameter_list|(
name|int
name|positionIncrement
parameter_list|)
block|{
if|if
condition|(
name|positionIncrement
operator|<
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Increment must be zero or greater: "
operator|+
name|positionIncrement
argument_list|)
throw|;
name|this
operator|.
name|positionIncrement
operator|=
name|positionIncrement
expr_stmt|;
block|}
comment|/** Returns the position increment of this Token.    * @see #setPositionIncrement    */
DECL|method|getPositionIncrement
specifier|public
name|int
name|getPositionIncrement
parameter_list|()
block|{
return|return
name|positionIncrement
return|;
block|}
comment|/** Sets the Token's term text.<b>NOTE:</b> for better    *  indexing speed you should instead use the char[]    *  termBuffer methods to set the term text.    *  @deprecated use {@link #setTermBuffer(char[], int, int)} or    *                  {@link #setTermBuffer(String)} or    *                  {@link #setTermBuffer(String, int, int)}.    */
DECL|method|setTermText
specifier|public
name|void
name|setTermText
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|termText
operator|=
name|text
expr_stmt|;
name|termBuffer
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns the Token's term text.    *     * @deprecated This method now has a performance penalty    * because the text is stored internally in a char[].  If    * possible, use {@link #termBuffer()} and {@link    * #termLength()} directly instead.  If you really need a    * String, use {@link #term()}</b>    */
DECL|method|termText
specifier|public
specifier|final
name|String
name|termText
parameter_list|()
block|{
if|if
condition|(
name|termText
operator|==
literal|null
operator|&&
name|termBuffer
operator|!=
literal|null
condition|)
name|termText
operator|=
operator|new
name|String
argument_list|(
name|termBuffer
argument_list|,
literal|0
argument_list|,
name|termLength
argument_list|)
expr_stmt|;
return|return
name|termText
return|;
block|}
comment|/** Returns the Token's term text.    *     * This method has a performance penalty    * because the text is stored internally in a char[].  If    * possible, use {@link #termBuffer()} and {@link    * #termLength()} directly instead.  If you really need a    * String, use this method, which is nothing more than    * a convenience call to<b>new String(token.termBuffer(), 0, token.termLength())</b>    */
DECL|method|term
specifier|public
specifier|final
name|String
name|term
parameter_list|()
block|{
if|if
condition|(
name|termText
operator|!=
literal|null
condition|)
return|return
name|termText
return|;
name|initTermBuffer
argument_list|()
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|termBuffer
argument_list|,
literal|0
argument_list|,
name|termLength
argument_list|)
return|;
block|}
comment|/** Copies the contents of buffer, starting at offset for    *  length characters, into the termBuffer array.    *  @param buffer the buffer to copy    *  @param offset the index in the buffer of the first character to copy    *  @param length the number of characters to copy    */
DECL|method|setTermBuffer
specifier|public
specifier|final
name|void
name|setTermBuffer
parameter_list|(
name|char
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|termText
operator|=
literal|null
expr_stmt|;
name|char
index|[]
name|newCharBuffer
init|=
name|growTermBuffer
argument_list|(
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|newCharBuffer
operator|!=
literal|null
condition|)
block|{
name|termBuffer
operator|=
name|newCharBuffer
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|termBuffer
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|termLength
operator|=
name|length
expr_stmt|;
block|}
comment|/** Copies the contents of buffer into the termBuffer array.    *  @param buffer the buffer to copy    */
DECL|method|setTermBuffer
specifier|public
specifier|final
name|void
name|setTermBuffer
parameter_list|(
name|String
name|buffer
parameter_list|)
block|{
name|termText
operator|=
literal|null
expr_stmt|;
name|int
name|length
init|=
name|buffer
operator|.
name|length
argument_list|()
decl_stmt|;
name|char
index|[]
name|newCharBuffer
init|=
name|growTermBuffer
argument_list|(
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|newCharBuffer
operator|!=
literal|null
condition|)
block|{
name|termBuffer
operator|=
name|newCharBuffer
expr_stmt|;
block|}
name|buffer
operator|.
name|getChars
argument_list|(
literal|0
argument_list|,
name|length
argument_list|,
name|termBuffer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|termLength
operator|=
name|length
expr_stmt|;
block|}
comment|/** Copies the contents of buffer, starting at offset and continuing    *  for length characters, into the termBuffer array.    *  @param buffer the buffer to copy    *  @param offset the index in the buffer of the first character to copy    *  @param length the number of characters to copy    */
DECL|method|setTermBuffer
specifier|public
specifier|final
name|void
name|setTermBuffer
parameter_list|(
name|String
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
assert|assert
name|offset
operator|<=
name|buffer
operator|.
name|length
argument_list|()
assert|;
assert|assert
name|offset
operator|+
name|length
operator|<=
name|buffer
operator|.
name|length
argument_list|()
assert|;
name|termText
operator|=
literal|null
expr_stmt|;
name|char
index|[]
name|newCharBuffer
init|=
name|growTermBuffer
argument_list|(
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|newCharBuffer
operator|!=
literal|null
condition|)
block|{
name|termBuffer
operator|=
name|newCharBuffer
expr_stmt|;
block|}
name|buffer
operator|.
name|getChars
argument_list|(
name|offset
argument_list|,
name|offset
operator|+
name|length
argument_list|,
name|termBuffer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|termLength
operator|=
name|length
expr_stmt|;
block|}
comment|/** Returns the internal termBuffer character array which    *  you can then directly alter.  If the array is too    *  small for your token, use {@link    *  #resizeTermBuffer(int)} to increase it.  After    *  altering the buffer be sure to call {@link    *  #setTermLength} to record the number of valid    *  characters that were placed into the termBuffer. */
DECL|method|termBuffer
specifier|public
specifier|final
name|char
index|[]
name|termBuffer
parameter_list|()
block|{
name|initTermBuffer
argument_list|()
expr_stmt|;
return|return
name|termBuffer
return|;
block|}
comment|/** Grows the termBuffer to at least size newSize, preserving the    *  existing content. Note: If the next operation is to change    *  the contents of the term buffer use    *  {@link #setTermBuffer(char[], int, int)},    *  {@link #setTermBuffer(String)}, or    *  {@link #setTermBuffer(String, int, int)}    *  to optimally combine the resize with the setting of the termBuffer.    *  @param newSize minimum size of the new termBuffer    *  @return newly created termBuffer with length>= newSize    */
DECL|method|resizeTermBuffer
specifier|public
name|char
index|[]
name|resizeTermBuffer
parameter_list|(
name|int
name|newSize
parameter_list|)
block|{
name|char
index|[]
name|newCharBuffer
init|=
name|growTermBuffer
argument_list|(
name|newSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|termBuffer
operator|==
literal|null
condition|)
block|{
comment|// If there were termText, then preserve it.
comment|// note that if termBuffer is null then newCharBuffer cannot be null
assert|assert
name|newCharBuffer
operator|!=
literal|null
assert|;
if|if
condition|(
name|termText
operator|!=
literal|null
condition|)
block|{
name|termText
operator|.
name|getChars
argument_list|(
literal|0
argument_list|,
name|termText
operator|.
name|length
argument_list|()
argument_list|,
name|newCharBuffer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|termBuffer
operator|=
name|newCharBuffer
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|newCharBuffer
operator|!=
literal|null
condition|)
block|{
comment|// Note: if newCharBuffer != null then termBuffer needs to grow.
comment|// If there were a termBuffer, then preserve it
name|System
operator|.
name|arraycopy
argument_list|(
name|termBuffer
argument_list|,
literal|0
argument_list|,
name|newCharBuffer
argument_list|,
literal|0
argument_list|,
name|termBuffer
operator|.
name|length
argument_list|)
expr_stmt|;
name|termBuffer
operator|=
name|newCharBuffer
expr_stmt|;
block|}
name|termText
operator|=
literal|null
expr_stmt|;
return|return
name|termBuffer
return|;
block|}
comment|/** Allocates a buffer char[] of at least newSize    *  @param newSize minimum size of the buffer    *  @return newly created buffer with length>= newSize or null if the current termBuffer is big enough    */
DECL|method|growTermBuffer
specifier|private
name|char
index|[]
name|growTermBuffer
parameter_list|(
name|int
name|newSize
parameter_list|)
block|{
if|if
condition|(
name|termBuffer
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|termBuffer
operator|.
name|length
operator|>=
name|newSize
condition|)
comment|// Already big enough
return|return
literal|null
return|;
else|else
comment|// Not big enough; create a new array with slight
comment|// over allocation:
return|return
operator|new
name|char
index|[
name|ArrayUtil
operator|.
name|getNextSize
argument_list|(
name|newSize
argument_list|)
index|]
return|;
block|}
else|else
block|{
comment|// determine the best size
comment|// The buffer is always at least MIN_BUFFER_SIZE
if|if
condition|(
name|newSize
operator|<
name|MIN_BUFFER_SIZE
condition|)
block|{
name|newSize
operator|=
name|MIN_BUFFER_SIZE
expr_stmt|;
block|}
comment|// If there is already a termText, then the size has to be at least that big
if|if
condition|(
name|termText
operator|!=
literal|null
condition|)
block|{
name|int
name|ttLength
init|=
name|termText
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|newSize
operator|<
name|ttLength
condition|)
block|{
name|newSize
operator|=
name|ttLength
expr_stmt|;
block|}
block|}
return|return
operator|new
name|char
index|[
name|newSize
index|]
return|;
block|}
block|}
comment|// TODO: once we remove the deprecated termText() method
comment|// and switch entirely to char[] termBuffer we don't need
comment|// to use this method anymore
DECL|method|initTermBuffer
specifier|private
name|void
name|initTermBuffer
parameter_list|()
block|{
if|if
condition|(
name|termBuffer
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|termText
operator|==
literal|null
condition|)
block|{
name|termBuffer
operator|=
operator|new
name|char
index|[
name|MIN_BUFFER_SIZE
index|]
expr_stmt|;
name|termLength
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|int
name|length
init|=
name|termText
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|<
name|MIN_BUFFER_SIZE
condition|)
name|length
operator|=
name|MIN_BUFFER_SIZE
expr_stmt|;
name|termBuffer
operator|=
operator|new
name|char
index|[
name|length
index|]
expr_stmt|;
name|termLength
operator|=
name|termText
operator|.
name|length
argument_list|()
expr_stmt|;
name|termText
operator|.
name|getChars
argument_list|(
literal|0
argument_list|,
name|termText
operator|.
name|length
argument_list|()
argument_list|,
name|termBuffer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|termText
operator|=
literal|null
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|termText
operator|!=
literal|null
condition|)
name|termText
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Return number of valid characters (length of the term)    *  in the termBuffer array. */
DECL|method|termLength
specifier|public
specifier|final
name|int
name|termLength
parameter_list|()
block|{
name|initTermBuffer
argument_list|()
expr_stmt|;
return|return
name|termLength
return|;
block|}
comment|/** Set number of valid characters (length of the term) in    *  the termBuffer array. Use this to truncate the termBuffer    *  or to synchronize with external manipulation of the termBuffer.    *  Note: to grow the size of the array,    *  use {@link #resizeTermBuffer(int)} first.    *  @param length the truncated length    */
DECL|method|setTermLength
specifier|public
specifier|final
name|void
name|setTermLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|initTermBuffer
argument_list|()
expr_stmt|;
if|if
condition|(
name|length
operator|>
name|termBuffer
operator|.
name|length
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"length "
operator|+
name|length
operator|+
literal|" exceeds the size of the termBuffer ("
operator|+
name|termBuffer
operator|.
name|length
operator|+
literal|")"
argument_list|)
throw|;
name|termLength
operator|=
name|length
expr_stmt|;
block|}
comment|/** Returns this Token's starting offset, the position of the first character     corresponding to this token in the source text.      Note that the difference between endOffset() and startOffset() may not be     equal to termText.length(), as the term text may have been altered by a     stemmer or some other filter. */
DECL|method|startOffset
specifier|public
specifier|final
name|int
name|startOffset
parameter_list|()
block|{
return|return
name|startOffset
return|;
block|}
comment|/** Set the starting offset.       @see #startOffset() */
DECL|method|setStartOffset
specifier|public
name|void
name|setStartOffset
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
name|this
operator|.
name|startOffset
operator|=
name|offset
expr_stmt|;
block|}
comment|/** Returns this Token's ending offset, one greater than the position of the     last character corresponding to this token in the source text. The length     of the token in the source text is (endOffset - startOffset). */
DECL|method|endOffset
specifier|public
specifier|final
name|int
name|endOffset
parameter_list|()
block|{
return|return
name|endOffset
return|;
block|}
comment|/** Set the ending offset.       @see #endOffset() */
DECL|method|setEndOffset
specifier|public
name|void
name|setEndOffset
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
name|this
operator|.
name|endOffset
operator|=
name|offset
expr_stmt|;
block|}
comment|/** Returns this Token's lexical type.  Defaults to "word". */
DECL|method|type
specifier|public
specifier|final
name|String
name|type
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/** Set the lexical type.       @see #type() */
DECL|method|setType
specifier|public
specifier|final
name|void
name|setType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
comment|/**    * EXPERIMENTAL:  While we think this is here to stay, we may want to change it to be a long.    *<p/>    *    * Get the bitset for any bits that have been set.  This is completely distinct from {@link #type()}, although they do share similar purposes.    * The flags can be used to encode information about the token for use by other {@link org.apache.lucene.analysis.TokenFilter}s.    *    *    * @return The bits    */
DECL|method|getFlags
specifier|public
name|int
name|getFlags
parameter_list|()
block|{
return|return
name|flags
return|;
block|}
comment|/**    * @see #getFlags()    */
DECL|method|setFlags
specifier|public
name|void
name|setFlags
parameter_list|(
name|int
name|flags
parameter_list|)
block|{
name|this
operator|.
name|flags
operator|=
name|flags
expr_stmt|;
block|}
comment|/**    * Returns this Token's payload.    */
DECL|method|getPayload
specifier|public
name|Payload
name|getPayload
parameter_list|()
block|{
return|return
name|this
operator|.
name|payload
return|;
block|}
comment|/**     * Sets this Token's payload.    */
DECL|method|setPayload
specifier|public
name|void
name|setPayload
parameter_list|(
name|Payload
name|payload
parameter_list|)
block|{
name|this
operator|.
name|payload
operator|=
name|payload
expr_stmt|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|initTermBuffer
argument_list|()
expr_stmt|;
if|if
condition|(
name|termBuffer
operator|==
literal|null
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
else|else
name|sb
operator|.
name|append
argument_list|(
name|termBuffer
argument_list|,
literal|0
argument_list|,
name|termLength
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
operator|.
name|append
argument_list|(
name|startOffset
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
operator|.
name|append
argument_list|(
name|endOffset
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|type
operator|.
name|equals
argument_list|(
literal|"word"
argument_list|)
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|",type="
argument_list|)
operator|.
name|append
argument_list|(
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|positionIncrement
operator|!=
literal|1
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|",posIncr="
argument_list|)
operator|.
name|append
argument_list|(
name|positionIncrement
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Resets the term text, payload, flags, and positionIncrement to default.    * Other fields such as startOffset, endOffset and the token type are    * not reset since they are normally overwritten by the tokenizer. */
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|payload
operator|=
literal|null
expr_stmt|;
comment|// Leave termBuffer to allow re-use
name|termLength
operator|=
literal|0
expr_stmt|;
name|termText
operator|=
literal|null
expr_stmt|;
name|positionIncrement
operator|=
literal|1
expr_stmt|;
name|flags
operator|=
literal|0
expr_stmt|;
comment|// startOffset = endOffset = 0;
comment|// type = DEFAULT_TYPE;
block|}
DECL|method|clone
specifier|public
name|Object
name|clone
parameter_list|()
block|{
try|try
block|{
name|Token
name|t
init|=
operator|(
name|Token
operator|)
name|super
operator|.
name|clone
argument_list|()
decl_stmt|;
comment|// Do a deep clone
if|if
condition|(
name|termBuffer
operator|!=
literal|null
condition|)
block|{
name|t
operator|.
name|termBuffer
operator|=
operator|(
name|char
index|[]
operator|)
name|termBuffer
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|payload
operator|!=
literal|null
condition|)
block|{
name|t
operator|.
name|setPayload
argument_list|(
operator|(
name|Payload
operator|)
name|payload
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
comment|// shouldn't happen
block|}
block|}
comment|/** Makes a clone, but replaces the term buffer&    * start/end offset in the process.  This is more    * efficient than doing a full clone (and then calling    * setTermBuffer) because it saves a wasted copy of the old    * termBuffer. */
DECL|method|clone
specifier|public
name|Token
name|clone
parameter_list|(
name|char
index|[]
name|newTermBuffer
parameter_list|,
name|int
name|newTermOffset
parameter_list|,
name|int
name|newTermLength
parameter_list|,
name|int
name|newStartOffset
parameter_list|,
name|int
name|newEndOffset
parameter_list|)
block|{
specifier|final
name|Token
name|t
init|=
operator|new
name|Token
argument_list|(
name|newTermBuffer
argument_list|,
name|newTermOffset
argument_list|,
name|newTermLength
argument_list|,
name|newStartOffset
argument_list|,
name|newEndOffset
argument_list|)
decl_stmt|;
name|t
operator|.
name|positionIncrement
operator|=
name|positionIncrement
expr_stmt|;
name|t
operator|.
name|flags
operator|=
name|flags
expr_stmt|;
name|t
operator|.
name|type
operator|=
name|type
expr_stmt|;
if|if
condition|(
name|payload
operator|!=
literal|null
condition|)
name|t
operator|.
name|payload
operator|=
operator|(
name|Payload
operator|)
name|payload
operator|.
name|clone
argument_list|()
expr_stmt|;
return|return
name|t
return|;
block|}
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|instanceof
name|Token
condition|)
block|{
name|Token
name|other
init|=
operator|(
name|Token
operator|)
name|obj
decl_stmt|;
name|initTermBuffer
argument_list|()
expr_stmt|;
name|other
operator|.
name|initTermBuffer
argument_list|()
expr_stmt|;
if|if
condition|(
name|termLength
operator|==
name|other
operator|.
name|termLength
operator|&&
name|startOffset
operator|==
name|other
operator|.
name|startOffset
operator|&&
name|endOffset
operator|==
name|other
operator|.
name|endOffset
operator|&&
name|flags
operator|==
name|other
operator|.
name|flags
operator|&&
name|positionIncrement
operator|==
name|other
operator|.
name|positionIncrement
operator|&&
name|subEqual
argument_list|(
name|type
argument_list|,
name|other
operator|.
name|type
argument_list|)
operator|&&
name|subEqual
argument_list|(
name|payload
argument_list|,
name|other
operator|.
name|payload
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|termLength
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|termBuffer
index|[
name|i
index|]
operator|!=
name|other
operator|.
name|termBuffer
index|[
name|i
index|]
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
else|else
return|return
literal|false
return|;
block|}
else|else
return|return
literal|false
return|;
block|}
DECL|method|subEqual
specifier|private
name|boolean
name|subEqual
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|==
literal|null
condition|)
return|return
name|o2
operator|==
literal|null
return|;
else|else
return|return
name|o1
operator|.
name|equals
argument_list|(
name|o2
argument_list|)
return|;
block|}
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|initTermBuffer
argument_list|()
expr_stmt|;
name|int
name|code
init|=
name|termLength
decl_stmt|;
name|code
operator|=
name|code
operator|*
literal|31
operator|+
name|startOffset
expr_stmt|;
name|code
operator|=
name|code
operator|*
literal|31
operator|+
name|endOffset
expr_stmt|;
name|code
operator|=
name|code
operator|*
literal|31
operator|+
name|flags
expr_stmt|;
name|code
operator|=
name|code
operator|*
literal|31
operator|+
name|positionIncrement
expr_stmt|;
name|code
operator|=
name|code
operator|*
literal|31
operator|+
name|type
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|code
operator|=
operator|(
name|payload
operator|==
literal|null
condition|?
name|code
else|:
name|code
operator|*
literal|31
operator|+
name|payload
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|code
operator|=
name|code
operator|*
literal|31
operator|+
name|ArrayUtil
operator|.
name|hashCode
argument_list|(
name|termBuffer
argument_list|,
literal|0
argument_list|,
name|termLength
argument_list|)
expr_stmt|;
return|return
name|code
return|;
block|}
comment|// like clear() but doesn't clear termBuffer/text
DECL|method|clearNoTermBuffer
specifier|private
name|void
name|clearNoTermBuffer
parameter_list|()
block|{
name|payload
operator|=
literal|null
expr_stmt|;
name|positionIncrement
operator|=
literal|1
expr_stmt|;
name|flags
operator|=
literal|0
expr_stmt|;
block|}
comment|/** Shorthand for calling {@link #clear},    *  {@link #setTermBuffer(char[], int, int)},    *  {@link #setStartOffset},    *  {@link #setEndOffset},    *  {@link #setType}    *  @return this Token instance */
DECL|method|reinit
specifier|public
name|Token
name|reinit
parameter_list|(
name|char
index|[]
name|newTermBuffer
parameter_list|,
name|int
name|newTermOffset
parameter_list|,
name|int
name|newTermLength
parameter_list|,
name|int
name|newStartOffset
parameter_list|,
name|int
name|newEndOffset
parameter_list|,
name|String
name|newType
parameter_list|)
block|{
name|clearNoTermBuffer
argument_list|()
expr_stmt|;
name|payload
operator|=
literal|null
expr_stmt|;
name|positionIncrement
operator|=
literal|1
expr_stmt|;
name|setTermBuffer
argument_list|(
name|newTermBuffer
argument_list|,
name|newTermOffset
argument_list|,
name|newTermLength
argument_list|)
expr_stmt|;
name|startOffset
operator|=
name|newStartOffset
expr_stmt|;
name|endOffset
operator|=
name|newEndOffset
expr_stmt|;
name|type
operator|=
name|newType
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Shorthand for calling {@link #clear},    *  {@link #setTermBuffer(char[], int, int)},    *  {@link #setStartOffset},    *  {@link #setEndOffset}    *  {@link #setType} on Token.DEFAULT_TYPE    *  @return this Token instance */
DECL|method|reinit
specifier|public
name|Token
name|reinit
parameter_list|(
name|char
index|[]
name|newTermBuffer
parameter_list|,
name|int
name|newTermOffset
parameter_list|,
name|int
name|newTermLength
parameter_list|,
name|int
name|newStartOffset
parameter_list|,
name|int
name|newEndOffset
parameter_list|)
block|{
name|clearNoTermBuffer
argument_list|()
expr_stmt|;
name|setTermBuffer
argument_list|(
name|newTermBuffer
argument_list|,
name|newTermOffset
argument_list|,
name|newTermLength
argument_list|)
expr_stmt|;
name|startOffset
operator|=
name|newStartOffset
expr_stmt|;
name|endOffset
operator|=
name|newEndOffset
expr_stmt|;
name|type
operator|=
name|DEFAULT_TYPE
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Shorthand for calling {@link #clear},    *  {@link #setTermBuffer(String)},    *  {@link #setStartOffset},    *  {@link #setEndOffset}    *  {@link #setType}    *  @return this Token instance */
DECL|method|reinit
specifier|public
name|Token
name|reinit
parameter_list|(
name|String
name|newTerm
parameter_list|,
name|int
name|newStartOffset
parameter_list|,
name|int
name|newEndOffset
parameter_list|,
name|String
name|newType
parameter_list|)
block|{
name|clearNoTermBuffer
argument_list|()
expr_stmt|;
name|setTermBuffer
argument_list|(
name|newTerm
argument_list|)
expr_stmt|;
name|startOffset
operator|=
name|newStartOffset
expr_stmt|;
name|endOffset
operator|=
name|newEndOffset
expr_stmt|;
name|type
operator|=
name|newType
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Shorthand for calling {@link #clear},    *  {@link #setTermBuffer(String, int, int)},    *  {@link #setStartOffset},    *  {@link #setEndOffset}    *  {@link #setType}    *  @return this Token instance */
DECL|method|reinit
specifier|public
name|Token
name|reinit
parameter_list|(
name|String
name|newTerm
parameter_list|,
name|int
name|newTermOffset
parameter_list|,
name|int
name|newTermLength
parameter_list|,
name|int
name|newStartOffset
parameter_list|,
name|int
name|newEndOffset
parameter_list|,
name|String
name|newType
parameter_list|)
block|{
name|clearNoTermBuffer
argument_list|()
expr_stmt|;
name|setTermBuffer
argument_list|(
name|newTerm
argument_list|,
name|newTermOffset
argument_list|,
name|newTermLength
argument_list|)
expr_stmt|;
name|startOffset
operator|=
name|newStartOffset
expr_stmt|;
name|endOffset
operator|=
name|newEndOffset
expr_stmt|;
name|type
operator|=
name|newType
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Shorthand for calling {@link #clear},    *  {@link #setTermBuffer(String)},    *  {@link #setStartOffset},    *  {@link #setEndOffset}    *  {@link #setType} on Token.DEFAULT_TYPE    *  @return this Token instance */
DECL|method|reinit
specifier|public
name|Token
name|reinit
parameter_list|(
name|String
name|newTerm
parameter_list|,
name|int
name|newStartOffset
parameter_list|,
name|int
name|newEndOffset
parameter_list|)
block|{
name|clearNoTermBuffer
argument_list|()
expr_stmt|;
name|setTermBuffer
argument_list|(
name|newTerm
argument_list|)
expr_stmt|;
name|startOffset
operator|=
name|newStartOffset
expr_stmt|;
name|endOffset
operator|=
name|newEndOffset
expr_stmt|;
name|type
operator|=
name|DEFAULT_TYPE
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Shorthand for calling {@link #clear},    *  {@link #setTermBuffer(String, int, int)},    *  {@link #setStartOffset},    *  {@link #setEndOffset}    *  {@link #setType} on Token.DEFAULT_TYPE    *  @return this Token instance */
DECL|method|reinit
specifier|public
name|Token
name|reinit
parameter_list|(
name|String
name|newTerm
parameter_list|,
name|int
name|newTermOffset
parameter_list|,
name|int
name|newTermLength
parameter_list|,
name|int
name|newStartOffset
parameter_list|,
name|int
name|newEndOffset
parameter_list|)
block|{
name|clearNoTermBuffer
argument_list|()
expr_stmt|;
name|setTermBuffer
argument_list|(
name|newTerm
argument_list|,
name|newTermOffset
argument_list|,
name|newTermLength
argument_list|)
expr_stmt|;
name|startOffset
operator|=
name|newStartOffset
expr_stmt|;
name|endOffset
operator|=
name|newEndOffset
expr_stmt|;
name|type
operator|=
name|DEFAULT_TYPE
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Copy the prototype token's fields into this one. Note: Payloads are shared.    * @param prototype    */
DECL|method|reinit
specifier|public
name|void
name|reinit
parameter_list|(
name|Token
name|prototype
parameter_list|)
block|{
name|prototype
operator|.
name|initTermBuffer
argument_list|()
expr_stmt|;
name|setTermBuffer
argument_list|(
name|prototype
operator|.
name|termBuffer
argument_list|,
literal|0
argument_list|,
name|prototype
operator|.
name|termLength
argument_list|)
expr_stmt|;
name|positionIncrement
operator|=
name|prototype
operator|.
name|positionIncrement
expr_stmt|;
name|flags
operator|=
name|prototype
operator|.
name|flags
expr_stmt|;
name|startOffset
operator|=
name|prototype
operator|.
name|startOffset
expr_stmt|;
name|endOffset
operator|=
name|prototype
operator|.
name|endOffset
expr_stmt|;
name|type
operator|=
name|prototype
operator|.
name|type
expr_stmt|;
name|payload
operator|=
name|prototype
operator|.
name|payload
expr_stmt|;
block|}
comment|/**    * Copy the prototype token's fields into this one, with a different term. Note: Payloads are shared.    * @param prototype    * @param newTerm    */
DECL|method|reinit
specifier|public
name|void
name|reinit
parameter_list|(
name|Token
name|prototype
parameter_list|,
name|String
name|newTerm
parameter_list|)
block|{
name|setTermBuffer
argument_list|(
name|newTerm
argument_list|)
expr_stmt|;
name|positionIncrement
operator|=
name|prototype
operator|.
name|positionIncrement
expr_stmt|;
name|flags
operator|=
name|prototype
operator|.
name|flags
expr_stmt|;
name|startOffset
operator|=
name|prototype
operator|.
name|startOffset
expr_stmt|;
name|endOffset
operator|=
name|prototype
operator|.
name|endOffset
expr_stmt|;
name|type
operator|=
name|prototype
operator|.
name|type
expr_stmt|;
name|payload
operator|=
name|prototype
operator|.
name|payload
expr_stmt|;
block|}
comment|/**    * Copy the prototype token's fields into this one, with a different term. Note: Payloads are shared.    * @param prototype    * @param newTermBuffer    * @param offset    * @param length    */
DECL|method|reinit
specifier|public
name|void
name|reinit
parameter_list|(
name|Token
name|prototype
parameter_list|,
name|char
index|[]
name|newTermBuffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|setTermBuffer
argument_list|(
name|newTermBuffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|positionIncrement
operator|=
name|prototype
operator|.
name|positionIncrement
expr_stmt|;
name|flags
operator|=
name|prototype
operator|.
name|flags
expr_stmt|;
name|startOffset
operator|=
name|prototype
operator|.
name|startOffset
expr_stmt|;
name|endOffset
operator|=
name|prototype
operator|.
name|endOffset
expr_stmt|;
name|type
operator|=
name|prototype
operator|.
name|type
expr_stmt|;
name|payload
operator|=
name|prototype
operator|.
name|payload
expr_stmt|;
block|}
block|}
end_class
end_unit
