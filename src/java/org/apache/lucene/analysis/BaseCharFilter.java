begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_comment
comment|/**  * Base utility class for implementing a {@link CharFilter}.  * You subclass this, and then record mappings by calling  * {@link #addOffCorrectMap}, and then invoke the correct  * method to correct an offset.  *  *<p><b>NOTE</b>: This class is not particularly efficient.  * For example, a new class instance is created for every  * call to {@link #addOffCorrectMap}, which is then appended  * to a private list.  */
end_comment
begin_class
DECL|class|BaseCharFilter
specifier|public
specifier|abstract
class|class
name|BaseCharFilter
extends|extends
name|CharFilter
block|{
comment|//private List<OffCorrectMap> pcmList;
DECL|field|pcmList
specifier|private
name|List
name|pcmList
decl_stmt|;
DECL|method|BaseCharFilter
specifier|public
name|BaseCharFilter
parameter_list|(
name|CharStream
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
comment|/** Retrieve the corrected offset.  Note that this method    *  is slow, if you correct positions far before the most    *  recently added position, as it's a simple linear    *  search backwards through all offset corrections added    *  by {@link #addOffCorrectMap}. */
DECL|method|correct
specifier|protected
name|int
name|correct
parameter_list|(
name|int
name|currentOff
parameter_list|)
block|{
if|if
condition|(
name|pcmList
operator|==
literal|null
operator|||
name|pcmList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|currentOff
return|;
block|}
for|for
control|(
name|int
name|i
init|=
name|pcmList
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
name|currentOff
operator|>=
operator|(
operator|(
name|OffCorrectMap
operator|)
name|pcmList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|off
condition|)
block|{
return|return
name|currentOff
operator|+
operator|(
operator|(
name|OffCorrectMap
operator|)
name|pcmList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|cumulativeDiff
return|;
block|}
block|}
return|return
name|currentOff
return|;
block|}
DECL|method|getLastCumulativeDiff
specifier|protected
name|int
name|getLastCumulativeDiff
parameter_list|()
block|{
return|return
name|pcmList
operator|==
literal|null
operator|||
name|pcmList
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
operator|(
operator|(
name|OffCorrectMap
operator|)
name|pcmList
operator|.
name|get
argument_list|(
name|pcmList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|)
operator|.
name|cumulativeDiff
return|;
block|}
DECL|method|addOffCorrectMap
specifier|protected
name|void
name|addOffCorrectMap
parameter_list|(
name|int
name|off
parameter_list|,
name|int
name|cumulativeDiff
parameter_list|)
block|{
if|if
condition|(
name|pcmList
operator|==
literal|null
condition|)
block|{
name|pcmList
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
name|pcmList
operator|.
name|add
argument_list|(
operator|new
name|OffCorrectMap
argument_list|(
name|off
argument_list|,
name|cumulativeDiff
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|OffCorrectMap
specifier|static
class|class
name|OffCorrectMap
block|{
DECL|field|off
name|int
name|off
decl_stmt|;
DECL|field|cumulativeDiff
name|int
name|cumulativeDiff
decl_stmt|;
DECL|method|OffCorrectMap
name|OffCorrectMap
parameter_list|(
name|int
name|off
parameter_list|,
name|int
name|cumulativeDiff
parameter_list|)
block|{
name|this
operator|.
name|off
operator|=
name|off
expr_stmt|;
name|this
operator|.
name|cumulativeDiff
operator|=
name|cumulativeDiff
expr_stmt|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|off
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|cumulativeDiff
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class
end_unit
