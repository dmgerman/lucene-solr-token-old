begin_unit
begin_package
DECL|package|org.apache.lucene.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/** A TokenFilter is a TokenStream whose input is another token stream.<p>   This is an abstract class.   NOTE: subclasses must override    {@link #incrementToken()} if the new TokenStream API is used   and {@link #next(Token)} or {@link #next()} if the old   TokenStream API is used.  *<p><font color="#FF0000">  * WARNING: The status of the new TokenStream, AttributeSource and Attributes is experimental.   * The APIs introduced in these classes with Lucene 2.9 might change in the future.   * We will make our best efforts to keep the APIs backwards-compatible.</font><p>   See {@link TokenStream}   */
end_comment
begin_class
DECL|class|TokenFilter
specifier|public
specifier|abstract
class|class
name|TokenFilter
extends|extends
name|TokenStream
block|{
comment|/** The source of tokens for this filter. */
DECL|field|input
specifier|protected
specifier|final
name|TokenStream
name|input
decl_stmt|;
comment|/** Construct a token stream filtering the given input. */
DECL|method|TokenFilter
specifier|protected
name|TokenFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|this
operator|.
name|input
operator|=
name|input
expr_stmt|;
block|}
comment|/** Close the input TokenStream. */
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Reset the filter as well as the input TokenStream. */
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|input
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|useNewAPI
specifier|public
name|boolean
name|useNewAPI
parameter_list|()
block|{
return|return
name|input
operator|.
name|useNewAPI
argument_list|()
return|;
block|}
comment|/**    * Sets whether or not to use the new TokenStream API. Settings this    * will apply to this Filter and all TokenStream/Filters upstream.    */
DECL|method|setUseNewAPI
specifier|public
name|void
name|setUseNewAPI
parameter_list|(
name|boolean
name|use
parameter_list|)
block|{
name|input
operator|.
name|setUseNewAPI
argument_list|(
name|use
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
