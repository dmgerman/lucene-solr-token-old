begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.tokenattributes
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Attribute
import|;
end_import
begin_comment
comment|/**  * The start and end character offset of a Token.   *   *<p><font color="#FF0000">  * WARNING: The status of the new TokenStream, AttributeSource and Attributes is experimental.   * The APIs introduced in these classes with Lucene 2.9 might change in the future.   * We will make our best efforts to keep the APIs backwards-compatible.</font>  */
end_comment
begin_class
DECL|class|OffsetAttribute
specifier|public
class|class
name|OffsetAttribute
extends|extends
name|Attribute
implements|implements
name|Cloneable
implements|,
name|Serializable
block|{
DECL|field|startOffset
specifier|private
name|int
name|startOffset
decl_stmt|;
DECL|field|endOffset
specifier|private
name|int
name|endOffset
decl_stmt|;
comment|/** Returns this Token's starting offset, the position of the first character   corresponding to this token in the source text.    Note that the difference between endOffset() and startOffset() may not be   equal to termText.length(), as the term text may have been altered by a   stemmer or some other filter. */
DECL|method|startOffset
specifier|public
name|int
name|startOffset
parameter_list|()
block|{
return|return
name|startOffset
return|;
block|}
comment|/** Set the starting offset.     @see #startOffset() */
DECL|method|setStartOffset
specifier|public
name|void
name|setStartOffset
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
name|this
operator|.
name|startOffset
operator|=
name|offset
expr_stmt|;
block|}
comment|/** Returns this Token's ending offset, one greater than the position of the   last character corresponding to this token in the source text. The length   of the token in the source text is (endOffset - startOffset). */
DECL|method|endOffset
specifier|public
name|int
name|endOffset
parameter_list|()
block|{
return|return
name|endOffset
return|;
block|}
comment|/** Set the ending offset.     @see #endOffset() */
DECL|method|setEndOffset
specifier|public
name|void
name|setEndOffset
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
name|this
operator|.
name|endOffset
operator|=
name|offset
expr_stmt|;
block|}
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|startOffset
operator|=
literal|0
expr_stmt|;
name|endOffset
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"start="
operator|+
name|startOffset
operator|+
literal|",end="
operator|+
name|endOffset
return|;
block|}
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|other
operator|instanceof
name|OffsetAttribute
condition|)
block|{
name|OffsetAttribute
name|o
init|=
operator|(
name|OffsetAttribute
operator|)
name|other
decl_stmt|;
return|return
name|o
operator|.
name|startOffset
operator|==
name|startOffset
operator|&&
name|o
operator|.
name|endOffset
operator|==
name|endOffset
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|code
init|=
name|startOffset
decl_stmt|;
name|code
operator|=
name|code
operator|*
literal|31
operator|+
name|endOffset
expr_stmt|;
return|return
name|code
return|;
block|}
DECL|method|copyTo
specifier|public
name|void
name|copyTo
parameter_list|(
name|Attribute
name|target
parameter_list|)
block|{
name|OffsetAttribute
name|t
init|=
operator|(
name|OffsetAttribute
operator|)
name|target
decl_stmt|;
name|t
operator|.
name|setStartOffset
argument_list|(
name|startOffset
argument_list|)
expr_stmt|;
name|t
operator|.
name|setEndOffset
argument_list|(
name|endOffset
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
