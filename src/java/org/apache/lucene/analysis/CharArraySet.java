begin_unit
begin_package
DECL|package|org.apache.lucene.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A simple class that stores Strings as char[]'s in a  * hash table.  Note that this is not a general purpose  * class.  For example, it cannot remove items from the  * set, nor does it resize its hash table to be smaller,  * etc.  It is designed to be quick to test if a char[]  * is in the set without the necessity of converting it  * to a String first.  */
end_comment
begin_class
DECL|class|CharArraySet
specifier|public
class|class
name|CharArraySet
extends|extends
name|AbstractSet
block|{
DECL|field|INIT_SIZE
specifier|private
specifier|final
specifier|static
name|int
name|INIT_SIZE
init|=
literal|8
decl_stmt|;
DECL|field|entries
specifier|private
name|char
index|[]
index|[]
name|entries
decl_stmt|;
DECL|field|count
specifier|private
name|int
name|count
decl_stmt|;
DECL|field|ignoreCase
specifier|private
specifier|final
name|boolean
name|ignoreCase
decl_stmt|;
comment|/** Create set with enough capacity to hold startSize    *  terms */
DECL|method|CharArraySet
specifier|public
name|CharArraySet
parameter_list|(
name|int
name|startSize
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|)
block|{
name|this
operator|.
name|ignoreCase
operator|=
name|ignoreCase
expr_stmt|;
name|int
name|size
init|=
name|INIT_SIZE
decl_stmt|;
while|while
condition|(
name|startSize
operator|+
operator|(
name|startSize
operator|>>
literal|2
operator|)
operator|>
name|size
condition|)
name|size
operator|<<=
literal|1
expr_stmt|;
name|entries
operator|=
operator|new
name|char
index|[
name|size
index|]
index|[]
expr_stmt|;
block|}
comment|/** Create set from a Collection of char[] or String */
DECL|method|CharArraySet
specifier|public
name|CharArraySet
parameter_list|(
name|Collection
name|c
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|)
block|{
name|this
argument_list|(
name|c
operator|.
name|size
argument_list|()
argument_list|,
name|ignoreCase
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
comment|/** true if the<code>len</code> chars of<code>text</code> starting at<code>off</code>    * are in the set */
DECL|method|contains
specifier|public
name|boolean
name|contains
parameter_list|(
name|char
index|[]
name|text
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
return|return
name|entries
index|[
name|getSlot
argument_list|(
name|text
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
index|]
operator|!=
literal|null
return|;
block|}
comment|/** true if the<code>CharSequence</code> is in the set */
DECL|method|contains
specifier|public
name|boolean
name|contains
parameter_list|(
name|CharSequence
name|cs
parameter_list|)
block|{
return|return
name|entries
index|[
name|getSlot
argument_list|(
name|cs
argument_list|)
index|]
operator|!=
literal|null
return|;
block|}
DECL|method|getSlot
specifier|private
name|int
name|getSlot
parameter_list|(
name|char
index|[]
name|text
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|int
name|code
init|=
name|getHashCode
argument_list|(
name|text
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|code
operator|&
operator|(
name|entries
operator|.
name|length
operator|-
literal|1
operator|)
decl_stmt|;
name|char
index|[]
name|text2
init|=
name|entries
index|[
name|pos
index|]
decl_stmt|;
if|if
condition|(
name|text2
operator|!=
literal|null
operator|&&
operator|!
name|equals
argument_list|(
name|text
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
name|text2
argument_list|)
condition|)
block|{
specifier|final
name|int
name|inc
init|=
operator|(
operator|(
name|code
operator|>>
literal|8
operator|)
operator|+
name|code
operator|)
operator||
literal|1
decl_stmt|;
do|do
block|{
name|code
operator|+=
name|inc
expr_stmt|;
name|pos
operator|=
name|code
operator|&
operator|(
name|entries
operator|.
name|length
operator|-
literal|1
operator|)
expr_stmt|;
name|text2
operator|=
name|entries
index|[
name|pos
index|]
expr_stmt|;
block|}
do|while
condition|(
name|text2
operator|!=
literal|null
operator|&&
operator|!
name|equals
argument_list|(
name|text
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
name|text2
argument_list|)
condition|)
do|;
block|}
return|return
name|pos
return|;
block|}
comment|/** Returns true if the String is in the set */
DECL|method|getSlot
specifier|private
name|int
name|getSlot
parameter_list|(
name|CharSequence
name|text
parameter_list|)
block|{
name|int
name|code
init|=
name|getHashCode
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|code
operator|&
operator|(
name|entries
operator|.
name|length
operator|-
literal|1
operator|)
decl_stmt|;
name|char
index|[]
name|text2
init|=
name|entries
index|[
name|pos
index|]
decl_stmt|;
if|if
condition|(
name|text2
operator|!=
literal|null
operator|&&
operator|!
name|equals
argument_list|(
name|text
argument_list|,
name|text2
argument_list|)
condition|)
block|{
specifier|final
name|int
name|inc
init|=
operator|(
operator|(
name|code
operator|>>
literal|8
operator|)
operator|+
name|code
operator|)
operator||
literal|1
decl_stmt|;
do|do
block|{
name|code
operator|+=
name|inc
expr_stmt|;
name|pos
operator|=
name|code
operator|&
operator|(
name|entries
operator|.
name|length
operator|-
literal|1
operator|)
expr_stmt|;
name|text2
operator|=
name|entries
index|[
name|pos
index|]
expr_stmt|;
block|}
do|while
condition|(
name|text2
operator|!=
literal|null
operator|&&
operator|!
name|equals
argument_list|(
name|text
argument_list|,
name|text2
argument_list|)
condition|)
do|;
block|}
return|return
name|pos
return|;
block|}
comment|/** Add this CharSequence into the set */
DECL|method|add
specifier|public
name|boolean
name|add
parameter_list|(
name|CharSequence
name|text
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|text
operator|.
name|toString
argument_list|()
argument_list|)
return|;
comment|// could be more efficient
block|}
comment|/** Add this String into the set */
DECL|method|add
specifier|public
name|boolean
name|add
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|add
argument_list|(
name|text
operator|.
name|toCharArray
argument_list|()
argument_list|)
return|;
block|}
comment|/** Add this char[] directly to the set.    * If ignoreCase is true for this Set, the text array will be directly modified.    * The user should never modify this text array after calling this method.    */
DECL|method|add
specifier|public
name|boolean
name|add
parameter_list|(
name|char
index|[]
name|text
parameter_list|)
block|{
if|if
condition|(
name|ignoreCase
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|text
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|text
index|[
name|i
index|]
operator|=
name|Character
operator|.
name|toLowerCase
argument_list|(
name|text
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|int
name|slot
init|=
name|getSlot
argument_list|(
name|text
argument_list|,
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|entries
index|[
name|slot
index|]
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
name|entries
index|[
name|slot
index|]
operator|=
name|text
expr_stmt|;
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|count
operator|>
name|entries
operator|.
name|length
operator|+
operator|(
name|entries
operator|.
name|length
operator|>>
literal|2
operator|)
condition|)
block|{
name|rehash
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|equals
specifier|private
name|boolean
name|equals
parameter_list|(
name|char
index|[]
name|text1
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|,
name|char
index|[]
name|text2
parameter_list|)
block|{
if|if
condition|(
name|len
operator|!=
name|text2
operator|.
name|length
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|ignoreCase
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|Character
operator|.
name|toLowerCase
argument_list|(
name|text1
index|[
name|off
operator|+
name|i
index|]
argument_list|)
operator|!=
name|text2
index|[
name|i
index|]
condition|)
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|text1
index|[
name|off
operator|+
name|i
index|]
operator|!=
name|text2
index|[
name|i
index|]
condition|)
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|equals
specifier|private
name|boolean
name|equals
parameter_list|(
name|CharSequence
name|text1
parameter_list|,
name|char
index|[]
name|text2
parameter_list|)
block|{
name|int
name|len
init|=
name|text1
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|!=
name|text2
operator|.
name|length
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|ignoreCase
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|Character
operator|.
name|toLowerCase
argument_list|(
name|text1
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
operator|!=
name|text2
index|[
name|i
index|]
condition|)
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|text1
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|!=
name|text2
index|[
name|i
index|]
condition|)
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|rehash
specifier|private
name|void
name|rehash
parameter_list|()
block|{
specifier|final
name|int
name|newSize
init|=
literal|2
operator|*
name|count
decl_stmt|;
name|char
index|[]
index|[]
name|oldEntries
init|=
name|entries
decl_stmt|;
name|char
index|[]
index|[]
name|entries
init|=
operator|new
name|char
index|[
name|newSize
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oldEntries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|char
index|[]
name|text
init|=
name|oldEntries
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
comment|// todo: could be faster... no need to compare strings on collision
name|entries
index|[
name|getSlot
argument_list|(
name|text
argument_list|,
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|)
index|]
operator|=
name|text
expr_stmt|;
block|}
block|}
block|}
DECL|method|getHashCode
specifier|private
name|int
name|getHashCode
parameter_list|(
name|char
index|[]
name|text
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|int
name|code
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|ignoreCase
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|code
operator|=
name|code
operator|*
literal|31
operator|+
name|Character
operator|.
name|toLowerCase
argument_list|(
name|text
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|code
operator|=
name|code
operator|*
literal|31
operator|+
name|text
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
return|return
name|code
return|;
block|}
DECL|method|getHashCode
specifier|private
name|int
name|getHashCode
parameter_list|(
name|CharSequence
name|text
parameter_list|)
block|{
name|int
name|code
decl_stmt|;
if|if
condition|(
name|ignoreCase
condition|)
block|{
name|code
operator|=
literal|0
expr_stmt|;
name|int
name|len
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|code
operator|=
name|code
operator|*
literal|31
operator|+
name|Character
operator|.
name|toLowerCase
argument_list|(
name|text
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
literal|false
operator|&&
name|text
operator|instanceof
name|String
condition|)
block|{
name|code
operator|=
name|text
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|code
operator|=
literal|0
expr_stmt|;
name|int
name|len
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|code
operator|=
name|code
operator|*
literal|31
operator|+
name|text
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|code
return|;
block|}
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|count
return|;
block|}
DECL|method|isEmpty
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|count
operator|==
literal|0
return|;
block|}
DECL|method|contains
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|char
index|[]
condition|)
block|{
name|char
index|[]
name|text
init|=
operator|(
name|char
index|[]
operator|)
name|o
decl_stmt|;
return|return
name|contains
argument_list|(
name|text
argument_list|,
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|CharSequence
condition|)
block|{
return|return
name|contains
argument_list|(
operator|(
name|CharSequence
operator|)
name|o
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|add
specifier|public
name|boolean
name|add
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|char
index|[]
condition|)
block|{
return|return
name|add
argument_list|(
operator|(
name|char
index|[]
operator|)
name|o
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
return|return
name|add
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|CharSequence
condition|)
block|{
return|return
name|add
argument_list|(
operator|(
name|CharSequence
operator|)
name|o
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|add
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/** The Iterator<String> for this set.  Strings are constructed on the fly, so    * use<code>nextCharArray</code> for more efficient access. */
DECL|class|CharArraySetIterator
specifier|public
class|class
name|CharArraySetIterator
implements|implements
name|Iterator
block|{
DECL|field|pos
name|int
name|pos
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|next
name|char
index|[]
name|next
decl_stmt|;
DECL|method|CharArraySetIterator
name|CharArraySetIterator
parameter_list|()
block|{
name|goNext
argument_list|()
expr_stmt|;
block|}
DECL|method|goNext
specifier|private
name|void
name|goNext
parameter_list|()
block|{
name|next
operator|=
literal|null
expr_stmt|;
name|pos
operator|++
expr_stmt|;
while|while
condition|(
name|pos
operator|<
name|entries
operator|.
name|length
operator|&&
operator|(
name|next
operator|=
name|entries
index|[
name|pos
index|]
operator|)
operator|==
literal|null
condition|)
name|pos
operator|++
expr_stmt|;
block|}
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|next
operator|!=
literal|null
return|;
block|}
comment|/** do not modify the returned char[] */
DECL|method|nextCharArray
specifier|public
name|char
index|[]
name|nextCharArray
parameter_list|()
block|{
name|char
index|[]
name|ret
init|=
name|next
decl_stmt|;
name|goNext
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/** Returns the next String, as a Set<String> would...      * use nextCharArray() for better efficiency. */
DECL|method|next
specifier|public
name|Object
name|next
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|nextCharArray
argument_list|()
argument_list|)
return|;
block|}
DECL|method|remove
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
DECL|method|iterator
specifier|public
name|Iterator
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|CharArraySetIterator
argument_list|()
return|;
block|}
block|}
end_class
end_unit
