begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.standard
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
package|;
end_package
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache Lucene" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Lucene", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|*
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import
begin_comment
comment|/** Filters {@link StandardTokenizer} with {@link StandardFilter}, {@link  * LowerCaseFilter} and {@link StopFilter}. */
end_comment
begin_class
DECL|class|StandardAnalyzer
specifier|public
class|class
name|StandardAnalyzer
extends|extends
name|Analyzer
block|{
DECL|field|stopTable
specifier|private
name|Hashtable
name|stopTable
decl_stmt|;
comment|/** An array containing some common English words that are usually not 	useful for searching. */
DECL|field|STOP_WORDS
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|STOP_WORDS
init|=
block|{
literal|"0"
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|,
literal|"6"
block|,
literal|"7"
block|,
literal|"8"
block|,
literal|"9"
block|,
literal|"$"
block|,
literal|"about"
block|,
literal|"after"
block|,
literal|"all"
block|,
literal|"also"
block|,
literal|"an"
block|,
literal|"and"
block|,
literal|"another"
block|,
literal|"any"
block|,
literal|"are"
block|,
literal|"as"
block|,
literal|"at"
block|,
literal|"be"
block|,
literal|"because"
block|,
literal|"been"
block|,
literal|"before"
block|,
literal|"being"
block|,
literal|"between"
block|,
literal|"both"
block|,
literal|"but"
block|,
literal|"by"
block|,
literal|"came"
block|,
literal|"can"
block|,
literal|"come"
block|,
literal|"could"
block|,
literal|"did"
block|,
literal|"do"
block|,
literal|"does"
block|,
literal|"each"
block|,
literal|"else"
block|,
literal|"for"
block|,
literal|"from"
block|,
literal|"get"
block|,
literal|"got"
block|,
literal|"has"
block|,
literal|"had"
block|,
literal|"he"
block|,
literal|"have"
block|,
literal|"her"
block|,
literal|"here"
block|,
literal|"him"
block|,
literal|"himself"
block|,
literal|"his"
block|,
literal|"how"
block|,
literal|"if"
block|,
literal|"in"
block|,
literal|"into"
block|,
literal|"is"
block|,
literal|"it"
block|,
literal|"its"
block|,
literal|"just"
block|,
literal|"like"
block|,
literal|"make"
block|,
literal|"many"
block|,
literal|"me"
block|,
literal|"might"
block|,
literal|"more"
block|,
literal|"most"
block|,
literal|"much"
block|,
literal|"must"
block|,
literal|"my"
block|,
literal|"never"
block|,
literal|"now"
block|,
literal|"of"
block|,
literal|"on"
block|,
literal|"only"
block|,
literal|"or"
block|,
literal|"other"
block|,
literal|"our"
block|,
literal|"out"
block|,
literal|"over"
block|,
literal|"re"
block|,
literal|"said"
block|,
literal|"same"
block|,
literal|"see"
block|,
literal|"should"
block|,
literal|"since"
block|,
literal|"so"
block|,
literal|"some"
block|,
literal|"still"
block|,
literal|"such"
block|,
literal|"take"
block|,
literal|"than"
block|,
literal|"that"
block|,
literal|"the"
block|,
literal|"their"
block|,
literal|"them"
block|,
literal|"then"
block|,
literal|"there"
block|,
literal|"these"
block|,
literal|"they"
block|,
literal|"this"
block|,
literal|"those"
block|,
literal|"through"
block|,
literal|"to"
block|,
literal|"too"
block|,
literal|"under"
block|,
literal|"up"
block|,
literal|"use"
block|,
literal|"very"
block|,
literal|"want"
block|,
literal|"was"
block|,
literal|"way"
block|,
literal|"we"
block|,
literal|"well"
block|,
literal|"were"
block|,
literal|"what"
block|,
literal|"when"
block|,
literal|"where"
block|,
literal|"which"
block|,
literal|"while"
block|,
literal|"who"
block|,
literal|"will"
block|,
literal|"with"
block|,
literal|"would"
block|,
literal|"you"
block|,
literal|"your"
block|,
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|,
literal|"d"
block|,
literal|"e"
block|,
literal|"f"
block|,
literal|"g"
block|,
literal|"h"
block|,
literal|"i"
block|,
literal|"j"
block|,
literal|"k"
block|,
literal|"l"
block|,
literal|"m"
block|,
literal|"n"
block|,
literal|"o"
block|,
literal|"p"
block|,
literal|"q"
block|,
literal|"r"
block|,
literal|"s"
block|,
literal|"t"
block|,
literal|"u"
block|,
literal|"v"
block|,
literal|"w"
block|,
literal|"x"
block|,
literal|"y"
block|,
literal|"z"
block|}
decl_stmt|;
comment|/** Builds an analyzer. */
DECL|method|StandardAnalyzer
specifier|public
name|StandardAnalyzer
parameter_list|()
block|{
name|this
argument_list|(
name|STOP_WORDS
argument_list|)
expr_stmt|;
block|}
comment|/** Builds an analyzer with the given stop words. */
DECL|method|StandardAnalyzer
specifier|public
name|StandardAnalyzer
parameter_list|(
name|String
index|[]
name|stopWords
parameter_list|)
block|{
name|stopTable
operator|=
name|StopFilter
operator|.
name|makeStopTable
argument_list|(
name|stopWords
argument_list|)
expr_stmt|;
block|}
comment|/** Constructs a {@link StandardTokenizer} filtered by a {@link      * StandardFilter}, a {@link LowerCaseFilter} and a {@link StopFilter}. */
DECL|method|tokenStream
specifier|public
specifier|final
name|TokenStream
name|tokenStream
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
name|TokenStream
name|result
init|=
operator|new
name|StandardTokenizer
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|result
operator|=
operator|new
name|StandardFilter
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|LowerCaseFilter
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|StopFilter
argument_list|(
name|result
argument_list|,
name|stopTable
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class
end_unit
