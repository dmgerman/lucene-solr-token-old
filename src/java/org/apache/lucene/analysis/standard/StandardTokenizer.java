begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.analysis.standard
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import
begin_comment
comment|/** A grammar-based tokenizer constructed with JFlex  *  *<p> This should be a good tokenizer for most European-language documents:  *  *<ul>  *<li>Splits words at punctuation characters, removing punctuation. However, a   *     dot that's not followed by whitespace is considered part of a token.  *<li>Splits words at hyphens, unless there's a number in the token, in which case  *     the whole token is interpreted as a product number and is not split.  *<li>Recognizes email addresses and internet hostnames as one token.  *</ul>  *  *<p>Many applications have specific tokenizer needs.  If this tokenizer does  * not suit your application, please consider copying this source code  * directory to your project and maintaining your own grammar-based tokenizer.  */
end_comment
begin_class
DECL|class|StandardTokenizer
specifier|public
class|class
name|StandardTokenizer
extends|extends
name|Tokenizer
block|{
comment|/** A private instance of the JFlex-constructed scanner */
DECL|field|scanner
specifier|private
specifier|final
name|StandardTokenizerImpl
name|scanner
decl_stmt|;
comment|/**      * Creates a new instance of the {@link StandardTokenizer}. Attaches the      *<code>input</code> to a newly created JFlex scanner.      */
DECL|method|StandardTokenizer
specifier|public
name|StandardTokenizer
parameter_list|(
name|Reader
name|input
parameter_list|)
block|{
name|this
operator|.
name|input
operator|=
name|input
expr_stmt|;
name|this
operator|.
name|scanner
operator|=
operator|new
name|StandardTokenizerImpl
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.apache.lucene.analysis.TokenStream#next()      */
DECL|method|next
specifier|public
name|Token
name|next
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|tokenType
init|=
name|scanner
operator|.
name|getNextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenType
operator|==
name|StandardTokenizerImpl
operator|.
name|YYEOF
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|startPosition
init|=
name|scanner
operator|.
name|yychar
argument_list|()
decl_stmt|;
specifier|final
name|String
name|tokenImage
init|=
name|scanner
operator|.
name|yytext
argument_list|()
decl_stmt|;
return|return
operator|new
name|Token
argument_list|(
name|tokenImage
argument_list|,
name|startPosition
argument_list|,
name|startPosition
operator|+
name|tokenImage
operator|.
name|length
argument_list|()
argument_list|,
name|StandardTokenizerImpl
operator|.
name|TOKEN_TYPES
index|[
name|tokenType
index|]
argument_list|)
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.apache.lucene.analysis.TokenStream#reset()      */
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|scanner
operator|.
name|yyreset
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
