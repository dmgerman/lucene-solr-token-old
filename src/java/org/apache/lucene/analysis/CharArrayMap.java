begin_unit
begin_package
DECL|package|org.apache.lucene.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CharacterUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import
begin_comment
comment|/**  * A simple class that stores key Strings as char[]'s in a  * hash table. Note that this is not a general purpose  * class.  For example, it cannot remove items from the  * map, nor does it resize its hash table to be smaller,  * etc.  It is designed to be quick to retrieve items  * by char[] keys without the necessity of converting  * to a String first.  *<p>You must specify the required {@link Version}  * compatibility when creating {@link CharArrayMap}:  *<ul>  *<li> As of 3.1, supplementary characters are  *       properly lowercased.</li>  *</ul>  * Before 3.1 supplementary characters could not be  * lowercased correctly due to the lack of Unicode 4  * support in JDK 1.4. To use instances of  * {@link CharArrayMap} with the behavior before Lucene  * 3.1 pass a {@link Version}&lt; 3.1 to the constructors.  */
end_comment
begin_class
DECL|class|CharArrayMap
specifier|public
class|class
name|CharArrayMap
parameter_list|<
name|V
parameter_list|>
extends|extends
name|AbstractMap
argument_list|<
name|Object
argument_list|,
name|V
argument_list|>
block|{
comment|// private only because missing generics
DECL|field|EMPTY_MAP
specifier|private
specifier|static
specifier|final
name|CharArrayMap
argument_list|<
name|?
argument_list|>
name|EMPTY_MAP
init|=
operator|new
name|EmptyCharArrayMap
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|INIT_SIZE
specifier|private
specifier|final
specifier|static
name|int
name|INIT_SIZE
init|=
literal|8
decl_stmt|;
DECL|field|charUtils
specifier|private
specifier|final
name|CharacterUtils
name|charUtils
decl_stmt|;
DECL|field|ignoreCase
specifier|private
name|boolean
name|ignoreCase
decl_stmt|;
DECL|field|count
specifier|private
name|int
name|count
decl_stmt|;
DECL|field|matchVersion
specifier|final
name|Version
name|matchVersion
decl_stmt|;
comment|// package private because used in CharArraySet
DECL|field|keys
name|char
index|[]
index|[]
name|keys
decl_stmt|;
comment|// package private because used in CharArraySet's non Set-conform CharArraySetIterator
DECL|field|values
name|V
index|[]
name|values
decl_stmt|;
comment|// package private because used in CharArraySet's non Set-conform CharArraySetIterator
comment|/**    * Create map with enough capacity to hold startSize terms    *     * @param matchVersion    *          compatibility match version see<a href="#version">Version    *          note</a> above for details.    * @param startSize    *          the initial capacity    * @param ignoreCase    *<code>false</code> if and only if the set should be case sensitive    *          otherwise<code>true</code>.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|CharArrayMap
specifier|public
name|CharArrayMap
parameter_list|(
name|Version
name|matchVersion
parameter_list|,
name|int
name|startSize
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|)
block|{
name|this
operator|.
name|ignoreCase
operator|=
name|ignoreCase
expr_stmt|;
name|int
name|size
init|=
name|INIT_SIZE
decl_stmt|;
while|while
condition|(
name|startSize
operator|+
operator|(
name|startSize
operator|>>
literal|2
operator|)
operator|>
name|size
condition|)
name|size
operator|<<=
literal|1
expr_stmt|;
name|keys
operator|=
operator|new
name|char
index|[
name|size
index|]
index|[]
expr_stmt|;
name|values
operator|=
operator|(
name|V
index|[]
operator|)
operator|new
name|Object
index|[
name|size
index|]
expr_stmt|;
name|this
operator|.
name|charUtils
operator|=
name|CharacterUtils
operator|.
name|getInstance
argument_list|(
name|matchVersion
argument_list|)
expr_stmt|;
name|this
operator|.
name|matchVersion
operator|=
name|matchVersion
expr_stmt|;
block|}
comment|/**    * Creates a map from the mappings in another map.     *     * @param matchVersion    *          compatibility match version see<a href="#version">Version    *          note</a> above for details.    * @param c    *          a map whose mappings to be copied    * @param ignoreCase    *<code>false</code> if and only if the set should be case sensitive    *          otherwise<code>true</code>.    */
DECL|method|CharArrayMap
specifier|public
name|CharArrayMap
parameter_list|(
name|Version
name|matchVersion
parameter_list|,
name|Map
argument_list|<
name|?
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|c
parameter_list|,
name|boolean
name|ignoreCase
parameter_list|)
block|{
name|this
argument_list|(
name|matchVersion
argument_list|,
name|c
operator|.
name|size
argument_list|()
argument_list|,
name|ignoreCase
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
comment|/** Create set from the supplied map (used internally for readonly maps...) */
DECL|method|CharArrayMap
specifier|private
name|CharArrayMap
parameter_list|(
name|CharArrayMap
argument_list|<
name|V
argument_list|>
name|toCopy
parameter_list|)
block|{
name|this
operator|.
name|keys
operator|=
name|toCopy
operator|.
name|keys
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|toCopy
operator|.
name|values
expr_stmt|;
name|this
operator|.
name|ignoreCase
operator|=
name|toCopy
operator|.
name|ignoreCase
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|toCopy
operator|.
name|count
expr_stmt|;
name|this
operator|.
name|charUtils
operator|=
name|toCopy
operator|.
name|charUtils
expr_stmt|;
name|this
operator|.
name|matchVersion
operator|=
name|toCopy
operator|.
name|matchVersion
expr_stmt|;
block|}
comment|/** Clears all entries in this map. This method is supported for reusing, but not {@link Map#remove}. */
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|count
operator|=
literal|0
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|keys
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|values
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** true if the<code>len</code> chars of<code>text</code> starting at<code>off</code>    * are in the {@link #keySet} */
DECL|method|containsKey
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|char
index|[]
name|text
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
return|return
name|keys
index|[
name|getSlot
argument_list|(
name|text
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
index|]
operator|!=
literal|null
return|;
block|}
comment|/** true if the<code>CharSequence</code> is in the {@link #keySet} */
DECL|method|containsKey
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|CharSequence
name|cs
parameter_list|)
block|{
return|return
name|keys
index|[
name|getSlot
argument_list|(
name|cs
argument_list|)
index|]
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|containsKey
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|char
index|[]
condition|)
block|{
specifier|final
name|char
index|[]
name|text
init|=
operator|(
name|char
index|[]
operator|)
name|o
decl_stmt|;
return|return
name|containsKey
argument_list|(
name|text
argument_list|,
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|)
return|;
block|}
return|return
name|containsKey
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/** returns the value of the mapping of<code>len</code> chars of<code>text</code>    * starting at<code>off</code> */
DECL|method|get
specifier|public
name|V
name|get
parameter_list|(
name|char
index|[]
name|text
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
return|return
name|values
index|[
name|getSlot
argument_list|(
name|text
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
index|]
return|;
block|}
comment|/** returns the value of the mapping of the chars inside this {@code CharSequence} */
DECL|method|get
specifier|public
name|V
name|get
parameter_list|(
name|CharSequence
name|cs
parameter_list|)
block|{
return|return
name|values
index|[
name|getSlot
argument_list|(
name|cs
argument_list|)
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|V
name|get
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|char
index|[]
condition|)
block|{
specifier|final
name|char
index|[]
name|text
init|=
operator|(
name|char
index|[]
operator|)
name|o
decl_stmt|;
return|return
name|get
argument_list|(
name|text
argument_list|,
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|)
return|;
block|}
return|return
name|get
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getSlot
specifier|private
name|int
name|getSlot
parameter_list|(
name|char
index|[]
name|text
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|int
name|code
init|=
name|getHashCode
argument_list|(
name|text
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|code
operator|&
operator|(
name|keys
operator|.
name|length
operator|-
literal|1
operator|)
decl_stmt|;
name|char
index|[]
name|text2
init|=
name|keys
index|[
name|pos
index|]
decl_stmt|;
if|if
condition|(
name|text2
operator|!=
literal|null
operator|&&
operator|!
name|equals
argument_list|(
name|text
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
name|text2
argument_list|)
condition|)
block|{
specifier|final
name|int
name|inc
init|=
operator|(
operator|(
name|code
operator|>>
literal|8
operator|)
operator|+
name|code
operator|)
operator||
literal|1
decl_stmt|;
do|do
block|{
name|code
operator|+=
name|inc
expr_stmt|;
name|pos
operator|=
name|code
operator|&
operator|(
name|keys
operator|.
name|length
operator|-
literal|1
operator|)
expr_stmt|;
name|text2
operator|=
name|keys
index|[
name|pos
index|]
expr_stmt|;
block|}
do|while
condition|(
name|text2
operator|!=
literal|null
operator|&&
operator|!
name|equals
argument_list|(
name|text
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
name|text2
argument_list|)
condition|)
do|;
block|}
return|return
name|pos
return|;
block|}
comment|/** Returns true if the String is in the set */
DECL|method|getSlot
specifier|private
name|int
name|getSlot
parameter_list|(
name|CharSequence
name|text
parameter_list|)
block|{
name|int
name|code
init|=
name|getHashCode
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|code
operator|&
operator|(
name|keys
operator|.
name|length
operator|-
literal|1
operator|)
decl_stmt|;
name|char
index|[]
name|text2
init|=
name|keys
index|[
name|pos
index|]
decl_stmt|;
if|if
condition|(
name|text2
operator|!=
literal|null
operator|&&
operator|!
name|equals
argument_list|(
name|text
argument_list|,
name|text2
argument_list|)
condition|)
block|{
specifier|final
name|int
name|inc
init|=
operator|(
operator|(
name|code
operator|>>
literal|8
operator|)
operator|+
name|code
operator|)
operator||
literal|1
decl_stmt|;
do|do
block|{
name|code
operator|+=
name|inc
expr_stmt|;
name|pos
operator|=
name|code
operator|&
operator|(
name|keys
operator|.
name|length
operator|-
literal|1
operator|)
expr_stmt|;
name|text2
operator|=
name|keys
index|[
name|pos
index|]
expr_stmt|;
block|}
do|while
condition|(
name|text2
operator|!=
literal|null
operator|&&
operator|!
name|equals
argument_list|(
name|text
argument_list|,
name|text2
argument_list|)
condition|)
do|;
block|}
return|return
name|pos
return|;
block|}
comment|/** Add the given mapping. */
DECL|method|put
specifier|public
name|V
name|put
parameter_list|(
name|CharSequence
name|text
parameter_list|,
name|V
name|value
parameter_list|)
block|{
return|return
name|put
argument_list|(
name|text
operator|.
name|toString
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
comment|// could be more efficient
block|}
annotation|@
name|Override
DECL|method|put
specifier|public
name|V
name|put
parameter_list|(
name|Object
name|o
parameter_list|,
name|V
name|value
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|char
index|[]
condition|)
block|{
return|return
name|put
argument_list|(
operator|(
name|char
index|[]
operator|)
name|o
argument_list|,
name|value
argument_list|)
return|;
block|}
return|return
name|put
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/** Add the given mapping. */
DECL|method|put
specifier|public
name|V
name|put
parameter_list|(
name|String
name|text
parameter_list|,
name|V
name|value
parameter_list|)
block|{
return|return
name|put
argument_list|(
name|text
operator|.
name|toCharArray
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/** Add the given mapping.    * If ignoreCase is true for this Set, the text array will be directly modified.    * The user should never modify this text array after calling this method.    */
DECL|method|put
specifier|public
name|V
name|put
parameter_list|(
name|char
index|[]
name|text
parameter_list|,
name|V
name|value
parameter_list|)
block|{
if|if
condition|(
name|ignoreCase
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|text
operator|.
name|length
condition|;
control|)
block|{
name|i
operator|+=
name|Character
operator|.
name|toChars
argument_list|(
name|Character
operator|.
name|toLowerCase
argument_list|(
name|charUtils
operator|.
name|codePointAt
argument_list|(
name|text
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|,
name|text
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|int
name|slot
init|=
name|getSlot
argument_list|(
name|text
argument_list|,
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|keys
index|[
name|slot
index|]
operator|!=
literal|null
condition|)
block|{
specifier|final
name|V
name|oldValue
init|=
name|values
index|[
name|slot
index|]
decl_stmt|;
name|values
index|[
name|slot
index|]
operator|=
name|value
expr_stmt|;
return|return
name|oldValue
return|;
block|}
name|keys
index|[
name|slot
index|]
operator|=
name|text
expr_stmt|;
name|values
index|[
name|slot
index|]
operator|=
name|value
expr_stmt|;
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|count
operator|+
operator|(
name|count
operator|>>
literal|2
operator|)
operator|>
name|keys
operator|.
name|length
condition|)
block|{
name|rehash
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|rehash
specifier|private
name|void
name|rehash
parameter_list|()
block|{
assert|assert
name|keys
operator|.
name|length
operator|==
name|values
operator|.
name|length
assert|;
specifier|final
name|int
name|newSize
init|=
literal|2
operator|*
name|keys
operator|.
name|length
decl_stmt|;
specifier|final
name|char
index|[]
index|[]
name|oldkeys
init|=
name|keys
decl_stmt|;
specifier|final
name|V
index|[]
name|oldvalues
init|=
name|values
decl_stmt|;
name|keys
operator|=
operator|new
name|char
index|[
name|newSize
index|]
index|[]
expr_stmt|;
name|values
operator|=
operator|(
name|V
index|[]
operator|)
operator|new
name|Object
index|[
name|newSize
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oldkeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|char
index|[]
name|text
init|=
name|oldkeys
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
comment|// todo: could be faster... no need to compare strings on collision
specifier|final
name|int
name|slot
init|=
name|getSlot
argument_list|(
name|text
argument_list|,
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|)
decl_stmt|;
name|keys
index|[
name|slot
index|]
operator|=
name|text
expr_stmt|;
name|values
index|[
name|slot
index|]
operator|=
name|oldvalues
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
block|}
DECL|method|equals
specifier|private
name|boolean
name|equals
parameter_list|(
name|char
index|[]
name|text1
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|,
name|char
index|[]
name|text2
parameter_list|)
block|{
if|if
condition|(
name|len
operator|!=
name|text2
operator|.
name|length
condition|)
return|return
literal|false
return|;
specifier|final
name|int
name|limit
init|=
name|off
operator|+
name|len
decl_stmt|;
if|if
condition|(
name|ignoreCase
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
control|)
block|{
specifier|final
name|int
name|codePointAt
init|=
name|charUtils
operator|.
name|codePointAt
argument_list|(
name|text1
argument_list|,
name|off
operator|+
name|i
argument_list|,
name|limit
argument_list|)
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|toLowerCase
argument_list|(
name|codePointAt
argument_list|)
operator|!=
name|charUtils
operator|.
name|codePointAt
argument_list|(
name|text2
argument_list|,
name|i
argument_list|)
condition|)
return|return
literal|false
return|;
name|i
operator|+=
name|Character
operator|.
name|charCount
argument_list|(
name|codePointAt
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|text1
index|[
name|off
operator|+
name|i
index|]
operator|!=
name|text2
index|[
name|i
index|]
condition|)
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|equals
specifier|private
name|boolean
name|equals
parameter_list|(
name|CharSequence
name|text1
parameter_list|,
name|char
index|[]
name|text2
parameter_list|)
block|{
name|int
name|len
init|=
name|text1
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|!=
name|text2
operator|.
name|length
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|ignoreCase
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
control|)
block|{
specifier|final
name|int
name|codePointAt
init|=
name|charUtils
operator|.
name|codePointAt
argument_list|(
name|text1
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|toLowerCase
argument_list|(
name|codePointAt
argument_list|)
operator|!=
name|charUtils
operator|.
name|codePointAt
argument_list|(
name|text2
argument_list|,
name|i
argument_list|)
condition|)
return|return
literal|false
return|;
name|i
operator|+=
name|Character
operator|.
name|charCount
argument_list|(
name|codePointAt
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|text1
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|!=
name|text2
index|[
name|i
index|]
condition|)
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|getHashCode
specifier|private
name|int
name|getHashCode
parameter_list|(
name|char
index|[]
name|text
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
name|int
name|code
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|stop
init|=
name|offset
operator|+
name|len
decl_stmt|;
if|if
condition|(
name|ignoreCase
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|stop
condition|;
control|)
block|{
specifier|final
name|int
name|codePointAt
init|=
name|charUtils
operator|.
name|codePointAt
argument_list|(
name|text
argument_list|,
name|i
argument_list|,
name|stop
argument_list|)
decl_stmt|;
name|code
operator|=
name|code
operator|*
literal|31
operator|+
name|Character
operator|.
name|toLowerCase
argument_list|(
name|codePointAt
argument_list|)
expr_stmt|;
name|i
operator|+=
name|Character
operator|.
name|charCount
argument_list|(
name|codePointAt
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|stop
condition|;
name|i
operator|++
control|)
block|{
name|code
operator|=
name|code
operator|*
literal|31
operator|+
name|text
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
return|return
name|code
return|;
block|}
DECL|method|getHashCode
specifier|private
name|int
name|getHashCode
parameter_list|(
name|CharSequence
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
name|int
name|code
init|=
literal|0
decl_stmt|;
name|int
name|len
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|ignoreCase
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
control|)
block|{
name|int
name|codePointAt
init|=
name|charUtils
operator|.
name|codePointAt
argument_list|(
name|text
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|code
operator|=
name|code
operator|*
literal|31
operator|+
name|Character
operator|.
name|toLowerCase
argument_list|(
name|codePointAt
argument_list|)
expr_stmt|;
name|i
operator|+=
name|Character
operator|.
name|charCount
argument_list|(
name|codePointAt
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|code
operator|=
name|code
operator|*
literal|31
operator|+
name|text
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|code
return|;
block|}
annotation|@
name|Override
DECL|method|remove
specifier|public
name|V
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|count
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"{"
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|V
argument_list|>
name|entry
range|:
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|field|entrySet
specifier|private
name|EntrySet
name|entrySet
init|=
literal|null
decl_stmt|;
DECL|field|keySet
specifier|private
name|CharArraySet
name|keySet
init|=
literal|null
decl_stmt|;
DECL|method|createEntrySet
name|EntrySet
name|createEntrySet
parameter_list|()
block|{
return|return
operator|new
name|EntrySet
argument_list|(
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|entrySet
specifier|public
specifier|final
name|EntrySet
name|entrySet
parameter_list|()
block|{
if|if
condition|(
name|entrySet
operator|==
literal|null
condition|)
block|{
name|entrySet
operator|=
name|createEntrySet
argument_list|()
expr_stmt|;
block|}
return|return
name|entrySet
return|;
block|}
comment|// helper for CharArraySet to not produce endless recursion
DECL|method|originalKeySet
specifier|final
name|Set
argument_list|<
name|Object
argument_list|>
name|originalKeySet
parameter_list|()
block|{
return|return
name|super
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|/** Returns an {@link CharArraySet} view on the map's keys.    * The set will use the same {@code matchVersion} as this map. */
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|keySet
specifier|public
specifier|final
name|CharArraySet
name|keySet
parameter_list|()
block|{
if|if
condition|(
name|keySet
operator|==
literal|null
condition|)
block|{
comment|// prevent adding of entries
name|keySet
operator|=
operator|new
name|CharArraySet
argument_list|(
operator|(
name|CharArrayMap
operator|)
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|add
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|add
parameter_list|(
name|CharSequence
name|text
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|add
parameter_list|(
name|String
name|text
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|add
parameter_list|(
name|char
index|[]
name|text
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
expr_stmt|;
block|}
return|return
name|keySet
return|;
block|}
comment|/** public iterator class so efficient methods are exposed to users */
DECL|class|EntryIterator
specifier|public
class|class
name|EntryIterator
implements|implements
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|field|pos
specifier|private
name|int
name|pos
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|lastPos
specifier|private
name|int
name|lastPos
decl_stmt|;
DECL|field|allowModify
specifier|private
specifier|final
name|boolean
name|allowModify
decl_stmt|;
DECL|method|EntryIterator
specifier|private
name|EntryIterator
parameter_list|(
name|boolean
name|allowModify
parameter_list|)
block|{
name|this
operator|.
name|allowModify
operator|=
name|allowModify
expr_stmt|;
name|goNext
argument_list|()
expr_stmt|;
block|}
DECL|method|goNext
specifier|private
name|void
name|goNext
parameter_list|()
block|{
name|lastPos
operator|=
name|pos
expr_stmt|;
name|pos
operator|++
expr_stmt|;
while|while
condition|(
name|pos
operator|<
name|keys
operator|.
name|length
operator|&&
name|keys
index|[
name|pos
index|]
operator|==
literal|null
condition|)
name|pos
operator|++
expr_stmt|;
block|}
DECL|method|hasNext
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|pos
operator|<
name|keys
operator|.
name|length
return|;
block|}
comment|/** gets the next key... do not modify the returned char[] */
DECL|method|nextKey
specifier|public
name|char
index|[]
name|nextKey
parameter_list|()
block|{
name|goNext
argument_list|()
expr_stmt|;
return|return
name|keys
index|[
name|lastPos
index|]
return|;
block|}
comment|/** gets the next key as a newly created String object */
DECL|method|nextKeyString
specifier|public
name|String
name|nextKeyString
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|nextKey
argument_list|()
argument_list|)
return|;
block|}
comment|/** returns the value associated with the last key returned */
DECL|method|currentValue
specifier|public
name|V
name|currentValue
parameter_list|()
block|{
return|return
name|values
index|[
name|lastPos
index|]
return|;
block|}
comment|/** sets the value associated with the last key returned */
DECL|method|setValue
specifier|public
name|V
name|setValue
parameter_list|(
name|V
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|allowModify
condition|)
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
name|V
name|old
init|=
name|values
index|[
name|lastPos
index|]
decl_stmt|;
name|values
index|[
name|lastPos
index|]
operator|=
name|value
expr_stmt|;
return|return
name|old
return|;
block|}
comment|/** use nextCharArray() + currentValue() for better efficiency. */
DECL|method|next
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|V
argument_list|>
name|next
parameter_list|()
block|{
name|goNext
argument_list|()
expr_stmt|;
return|return
operator|new
name|MapEntry
argument_list|(
name|lastPos
argument_list|,
name|allowModify
argument_list|)
return|;
block|}
DECL|method|remove
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
DECL|class|MapEntry
specifier|private
specifier|final
class|class
name|MapEntry
implements|implements
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|V
argument_list|>
block|{
DECL|field|pos
specifier|private
specifier|final
name|int
name|pos
decl_stmt|;
DECL|field|allowModify
specifier|private
specifier|final
name|boolean
name|allowModify
decl_stmt|;
DECL|method|MapEntry
specifier|private
name|MapEntry
parameter_list|(
name|int
name|pos
parameter_list|,
name|boolean
name|allowModify
parameter_list|)
block|{
name|this
operator|.
name|pos
operator|=
name|pos
expr_stmt|;
name|this
operator|.
name|allowModify
operator|=
name|allowModify
expr_stmt|;
block|}
DECL|method|getKey
specifier|public
name|Object
name|getKey
parameter_list|()
block|{
comment|// we must clone here, as putAll to another CharArrayMap
comment|// with other case sensitivity flag would corrupt the keys
return|return
name|keys
index|[
name|pos
index|]
operator|.
name|clone
argument_list|()
return|;
block|}
DECL|method|getValue
specifier|public
name|V
name|getValue
parameter_list|()
block|{
return|return
name|values
index|[
name|pos
index|]
return|;
block|}
DECL|method|setValue
specifier|public
name|V
name|setValue
parameter_list|(
name|V
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|allowModify
condition|)
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
specifier|final
name|V
name|old
init|=
name|values
index|[
name|pos
index|]
decl_stmt|;
name|values
index|[
name|pos
index|]
operator|=
name|value
expr_stmt|;
return|return
name|old
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|keys
index|[
name|pos
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
operator|(
operator|(
name|Object
operator|)
name|values
index|[
name|pos
index|]
operator|==
operator|(
name|Object
operator|)
name|CharArrayMap
operator|.
name|this
operator|)
condition|?
literal|"(this Map)"
else|:
name|values
index|[
name|pos
index|]
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/** public EntrySet class so efficient methods are exposed to users */
DECL|class|EntrySet
specifier|public
specifier|final
class|class
name|EntrySet
extends|extends
name|AbstractSet
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|field|allowModify
specifier|private
specifier|final
name|boolean
name|allowModify
decl_stmt|;
DECL|method|EntrySet
specifier|private
name|EntrySet
parameter_list|(
name|boolean
name|allowModify
parameter_list|)
block|{
name|this
operator|.
name|allowModify
operator|=
name|allowModify
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|EntryIterator
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|EntryIterator
argument_list|(
name|allowModify
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|contains
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|Map
operator|.
name|Entry
operator|)
condition|)
return|return
literal|false
return|;
specifier|final
name|Map
operator|.
name|Entry
name|e
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|o
decl_stmt|;
specifier|final
name|Object
name|key
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|val
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|v
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|v
operator|==
literal|null
condition|?
name|val
operator|==
literal|null
else|:
name|v
operator|.
name|equals
argument_list|(
name|val
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|remove
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|count
return|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
if|if
condition|(
operator|!
name|allowModify
condition|)
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
name|CharArrayMap
operator|.
name|this
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Returns an unmodifiable {@link CharArrayMap}. This allows to provide    * unmodifiable views of internal map for "read-only" use.    *     * @param map    *          a map for which the unmodifiable map is returned.    * @return an new unmodifiable {@link CharArrayMap}.    * @throws NullPointerException    *           if the given map is<code>null</code>.    */
DECL|method|unmodifiableMap
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|CharArrayMap
argument_list|<
name|V
argument_list|>
name|unmodifiableMap
parameter_list|(
name|CharArrayMap
argument_list|<
name|V
argument_list|>
name|map
parameter_list|)
block|{
if|if
condition|(
name|map
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Given map is null"
argument_list|)
throw|;
if|if
condition|(
name|map
operator|==
name|emptyMap
argument_list|()
operator|||
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|emptyMap
argument_list|()
return|;
if|if
condition|(
name|map
operator|instanceof
name|UnmodifiableCharArrayMap
condition|)
return|return
name|map
return|;
return|return
operator|new
name|UnmodifiableCharArrayMap
argument_list|<
name|V
argument_list|>
argument_list|(
name|map
argument_list|)
return|;
block|}
comment|/**    * Returns a copy of the given map as a {@link CharArrayMap}. If the given map    * is a {@link CharArrayMap} the ignoreCase property will be preserved.    *<p>    *<b>Note:</b> If you intend to create a copy of another {@link CharArrayMap} where    * the {@link Version} of the source map differs from its copy    * {@link #CharArrayMap(Version, Map, boolean)} should be used instead.    * The {@link #copy(Version, Map)} will preserve the {@link Version} of the    * source map it is an instance of {@link CharArrayMap}.    *</p>    *     * @param matchVersion    *          compatibility match version see<a href="#version">Version    *          note</a> above for details. This argument will be ignored if the    *          given map is a {@link CharArrayMap}.    * @param map    *          a map to copy    * @return a copy of the given map as a {@link CharArrayMap}. If the given map    *         is a {@link CharArrayMap} the ignoreCase property as well as the    *         matchVersion will be of the given map will be preserved.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|copy
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|CharArrayMap
argument_list|<
name|V
argument_list|>
name|copy
parameter_list|(
specifier|final
name|Version
name|matchVersion
parameter_list|,
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|map
parameter_list|)
block|{
if|if
condition|(
name|map
operator|==
name|EMPTY_MAP
condition|)
return|return
name|emptyMap
argument_list|()
return|;
if|if
condition|(
name|map
operator|instanceof
name|CharArrayMap
condition|)
block|{
name|CharArrayMap
argument_list|<
name|V
argument_list|>
name|m
init|=
operator|(
name|CharArrayMap
argument_list|<
name|V
argument_list|>
operator|)
name|map
decl_stmt|;
comment|// use fast path instead of iterating all values
comment|// this is even on very small sets ~10 times faster than iterating
specifier|final
name|char
index|[]
index|[]
name|keys
init|=
operator|new
name|char
index|[
name|m
operator|.
name|keys
operator|.
name|length
index|]
index|[]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|m
operator|.
name|keys
argument_list|,
literal|0
argument_list|,
name|keys
argument_list|,
literal|0
argument_list|,
name|keys
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|V
index|[]
name|values
init|=
operator|(
name|V
index|[]
operator|)
operator|new
name|Object
index|[
name|m
operator|.
name|values
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|m
operator|.
name|values
argument_list|,
literal|0
argument_list|,
name|values
argument_list|,
literal|0
argument_list|,
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
name|m
operator|=
operator|new
name|CharArrayMap
argument_list|<
name|V
argument_list|>
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|.
name|keys
operator|=
name|keys
expr_stmt|;
name|m
operator|.
name|values
operator|=
name|values
expr_stmt|;
return|return
name|m
return|;
block|}
return|return
operator|new
name|CharArrayMap
argument_list|<
name|V
argument_list|>
argument_list|(
name|matchVersion
argument_list|,
name|map
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/** Returns an empty, unmodifiable map. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|emptyMap
specifier|public
specifier|static
parameter_list|<
name|V
parameter_list|>
name|CharArrayMap
argument_list|<
name|V
argument_list|>
name|emptyMap
parameter_list|()
block|{
return|return
operator|(
name|CharArrayMap
argument_list|<
name|V
argument_list|>
operator|)
name|EMPTY_MAP
return|;
block|}
comment|// package private CharArraySet instanceof check in CharArraySet
DECL|class|UnmodifiableCharArrayMap
specifier|static
class|class
name|UnmodifiableCharArrayMap
parameter_list|<
name|V
parameter_list|>
extends|extends
name|CharArrayMap
argument_list|<
name|V
argument_list|>
block|{
DECL|method|UnmodifiableCharArrayMap
name|UnmodifiableCharArrayMap
parameter_list|(
name|CharArrayMap
argument_list|<
name|V
argument_list|>
name|map
parameter_list|)
block|{
name|super
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|put
specifier|public
name|V
name|put
parameter_list|(
name|Object
name|o
parameter_list|,
name|V
name|val
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|put
specifier|public
name|V
name|put
parameter_list|(
name|char
index|[]
name|text
parameter_list|,
name|V
name|val
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|put
specifier|public
name|V
name|put
parameter_list|(
name|CharSequence
name|text
parameter_list|,
name|V
name|val
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|put
specifier|public
name|V
name|put
parameter_list|(
name|String
name|text
parameter_list|,
name|V
name|val
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|remove
specifier|public
name|V
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|createEntrySet
name|EntrySet
name|createEntrySet
parameter_list|()
block|{
return|return
operator|new
name|EntrySet
argument_list|(
literal|false
argument_list|)
return|;
block|}
block|}
comment|/**    * Empty {@link UnmodifiableCharArrayMap} optimized for speed.    * Contains checks will always return<code>false</code> or throw    * NPE if necessary.    */
DECL|class|EmptyCharArrayMap
specifier|private
specifier|static
specifier|final
class|class
name|EmptyCharArrayMap
parameter_list|<
name|V
parameter_list|>
extends|extends
name|UnmodifiableCharArrayMap
argument_list|<
name|V
argument_list|>
block|{
DECL|method|EmptyCharArrayMap
name|EmptyCharArrayMap
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|CharArrayMap
argument_list|<
name|V
argument_list|>
argument_list|(
name|Version
operator|.
name|LUCENE_CURRENT
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|containsKey
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|char
index|[]
name|text
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|containsKey
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|CharSequence
name|cs
parameter_list|)
block|{
if|if
condition|(
name|cs
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|containsKey
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|V
name|get
parameter_list|(
name|char
index|[]
name|text
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|V
name|get
parameter_list|(
name|CharSequence
name|cs
parameter_list|)
block|{
if|if
condition|(
name|cs
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|V
name|get
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
return|return
literal|null
return|;
block|}
block|}
block|}
end_class
end_unit
