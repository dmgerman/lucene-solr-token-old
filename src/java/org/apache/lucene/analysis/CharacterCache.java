begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
package|;
end_package
begin_comment
comment|/**  * Replacement for Java 1.5 Character.valueOf()  * @deprecated Move to Character.valueOf() in 3.0  */
end_comment
begin_class
DECL|class|CharacterCache
class|class
name|CharacterCache
block|{
DECL|field|cache
specifier|private
specifier|static
specifier|final
name|Character
name|cache
index|[]
init|=
operator|new
name|Character
index|[
literal|128
index|]
decl_stmt|;
static|static
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cache
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|cache
index|[
name|i
index|]
operator|=
operator|new
name|Character
argument_list|(
operator|(
name|char
operator|)
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns a Character instance representing the given char value    *     * @param c    *          a char value    * @return a Charater representation of the given char value.    */
DECL|method|valueOf
specifier|public
specifier|static
name|Character
name|valueOf
parameter_list|(
name|char
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|<
name|cache
operator|.
name|length
condition|)
block|{
return|return
name|cache
index|[
operator|(
name|int
operator|)
name|c
index|]
return|;
block|}
return|return
operator|new
name|Character
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
end_class
end_unit
