begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  *  *  **/
end_comment
begin_interface
DECL|interface|ExtendedFieldCache
specifier|public
interface|interface
name|ExtendedFieldCache
extends|extends
name|FieldCache
block|{
DECL|interface|LongParser
specifier|public
interface|interface
name|LongParser
extends|extends
name|Parser
block|{
comment|/**      * Return an long representation of this field's value.      */
DECL|method|parseLong
specifier|public
name|long
name|parseLong
parameter_list|(
name|String
name|string
parameter_list|)
function_decl|;
block|}
DECL|interface|DoubleParser
specifier|public
interface|interface
name|DoubleParser
extends|extends
name|Parser
block|{
comment|/**      * Return an long representation of this field's value.      */
DECL|method|parseDouble
specifier|public
name|double
name|parseDouble
parameter_list|(
name|String
name|string
parameter_list|)
function_decl|;
block|}
DECL|field|EXT_DEFAULT
specifier|public
specifier|static
name|ExtendedFieldCache
name|EXT_DEFAULT
init|=
operator|new
name|ExtendedFieldCacheImpl
argument_list|()
decl_stmt|;
comment|/**    * Checks the internal cache for an appropriate entry, and if none is    * found, reads the terms in<code>field</code> as longs and returns an array    * of size<code>reader.maxDoc()</code> of the value each document    * has in the given field.    *    * @param reader Used to get field values.    * @param field  Which field contains the longs.    * @return The values in the given field for each document.    * @throws java.io.IOException If any error occurs.    */
DECL|method|getLongs
specifier|public
name|long
index|[]
name|getLongs
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Checks the internal cache for an appropriate entry, and if none is found,    * reads the terms in<code>field</code> as longs and returns an array of    * size<code>reader.maxDoc()</code> of the value each document has in the    * given field.    *    * @param reader Used to get field values.    * @param field  Which field contains the longs.    * @param parser Computes integer for string values.    * @return The values in the given field for each document.    * @throws IOException If any error occurs.    */
DECL|method|getLongs
specifier|public
name|long
index|[]
name|getLongs
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|,
name|LongParser
name|parser
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Checks the internal cache for an appropriate entry, and if none is    * found, reads the terms in<code>field</code> as integers and returns an array    * of size<code>reader.maxDoc()</code> of the value each document    * has in the given field.    *    * @param reader Used to get field values.    * @param field  Which field contains the doubles.    * @return The values in the given field for each document.    * @throws IOException If any error occurs.    */
DECL|method|getDoubles
specifier|public
name|double
index|[]
name|getDoubles
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Checks the internal cache for an appropriate entry, and if none is found,    * reads the terms in<code>field</code> as doubles and returns an array of    * size<code>reader.maxDoc()</code> of the value each document has in the    * given field.    *    * @param reader Used to get field values.    * @param field  Which field contains the doubles.    * @param parser Computes integer for string values.    * @return The values in the given field for each document.    * @throws IOException If any error occurs.    */
DECL|method|getDoubles
specifier|public
name|double
index|[]
name|getDoubles
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|,
name|DoubleParser
name|parser
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_interface
end_unit
