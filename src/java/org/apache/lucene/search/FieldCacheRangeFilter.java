begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_comment
comment|/**  * A range filter built on top of a cached single term field (in FieldCache).  *   * FieldCacheRangeFilter builds a single cache for the field the first time it is used.  *   * Each subsequent FieldCacheRangeFilter on the same field then reuses this cache,  * even if the range itself changes.   *   * This means that FieldCacheRangeFilter is much faster (sometimes more than 100x as fast)   * as building a RangeFilter (or ConstantScoreRangeQuery on a RangeFilter) for each query.  * However, if the range never changes it is slower (around 2x as slow) than building a   * CachingWrapperFilter on top of a single RangeFilter.  *   * As with all FieldCache based functionality, FieldCacheRangeFilter is only valid for   * fields which contain zero or one terms for each document. Thus it works on dates,   * prices and other single value fields but will not work on regular text fields. It is  * preferable to use an UN_TOKENIZED field to ensure that there is only a single term.   *  * Also, collation is done at the time the FieldCache is built; to change   * collation you need to override the getFieldCache() method to change the underlying cache.   */
end_comment
begin_class
DECL|class|FieldCacheRangeFilter
specifier|public
class|class
name|FieldCacheRangeFilter
extends|extends
name|Filter
block|{
DECL|field|field
specifier|private
name|String
name|field
decl_stmt|;
DECL|field|lowerVal
specifier|private
name|String
name|lowerVal
decl_stmt|;
DECL|field|upperVal
specifier|private
name|String
name|upperVal
decl_stmt|;
DECL|field|includeLower
specifier|private
name|boolean
name|includeLower
decl_stmt|;
DECL|field|includeUpper
specifier|private
name|boolean
name|includeUpper
decl_stmt|;
DECL|method|FieldCacheRangeFilter
specifier|public
name|FieldCacheRangeFilter
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|lowerVal
parameter_list|,
name|String
name|upperVal
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|lowerVal
operator|=
name|lowerVal
expr_stmt|;
name|this
operator|.
name|upperVal
operator|=
name|upperVal
expr_stmt|;
name|this
operator|.
name|includeLower
operator|=
name|includeLower
expr_stmt|;
name|this
operator|.
name|includeUpper
operator|=
name|includeUpper
expr_stmt|;
block|}
DECL|method|getFieldCache
specifier|public
name|FieldCache
name|getFieldCache
parameter_list|()
block|{
return|return
name|FieldCache
operator|.
name|DEFAULT
return|;
block|}
DECL|method|getDocIdSet
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|RangeMultiFilterDocIdSet
argument_list|(
name|getFieldCache
argument_list|()
operator|.
name|getStringIndex
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
argument_list|)
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|includeLower
condition|?
literal|"["
else|:
literal|"{"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|lowerVal
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|lowerVal
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|upperVal
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|upperVal
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|includeUpper
condition|?
literal|"]"
else|:
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|FieldCacheRangeFilter
operator|)
condition|)
return|return
literal|false
return|;
name|FieldCacheRangeFilter
name|other
init|=
operator|(
name|FieldCacheRangeFilter
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|field
operator|.
name|equals
argument_list|(
name|other
operator|.
name|field
argument_list|)
operator|||
name|this
operator|.
name|includeLower
operator|!=
name|other
operator|.
name|includeLower
operator|||
name|this
operator|.
name|includeUpper
operator|!=
name|other
operator|.
name|includeUpper
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|lowerVal
operator|!=
literal|null
condition|?
operator|!
name|this
operator|.
name|lowerVal
operator|.
name|equals
argument_list|(
name|other
operator|.
name|lowerVal
argument_list|)
else|:
name|other
operator|.
name|lowerVal
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|upperVal
operator|!=
literal|null
condition|?
operator|!
name|this
operator|.
name|upperVal
operator|.
name|equals
argument_list|(
name|other
operator|.
name|upperVal
argument_list|)
else|:
name|other
operator|.
name|upperVal
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|h
init|=
name|field
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|h
operator|^=
name|lowerVal
operator|!=
literal|null
condition|?
name|lowerVal
operator|.
name|hashCode
argument_list|()
else|:
literal|550356204
expr_stmt|;
name|h
operator|=
operator|(
name|h
operator|<<
literal|1
operator|)
operator||
operator|(
name|h
operator|>>>
literal|31
operator|)
expr_stmt|;
comment|// rotate to distinguish lower from upper
name|h
operator|^=
operator|(
name|upperVal
operator|!=
literal|null
condition|?
operator|(
name|upperVal
operator|.
name|hashCode
argument_list|()
operator|)
else|:
operator|-
literal|1674416163
operator|)
expr_stmt|;
name|h
operator|^=
operator|(
name|includeLower
condition|?
literal|1549299360
else|:
operator|-
literal|365038026
operator|)
operator|^
operator|(
name|includeUpper
condition|?
literal|1721088258
else|:
literal|1948649653
operator|)
expr_stmt|;
return|return
name|h
return|;
block|}
DECL|class|RangeMultiFilterDocIdSet
specifier|protected
class|class
name|RangeMultiFilterDocIdSet
extends|extends
name|DocIdSet
block|{
DECL|field|inclusiveLowerPoint
specifier|private
name|int
name|inclusiveLowerPoint
decl_stmt|;
DECL|field|inclusiveUpperPoint
specifier|private
name|int
name|inclusiveUpperPoint
decl_stmt|;
DECL|field|fcsi
specifier|private
name|FieldCache
operator|.
name|StringIndex
name|fcsi
decl_stmt|;
DECL|method|RangeMultiFilterDocIdSet
specifier|public
name|RangeMultiFilterDocIdSet
parameter_list|(
name|FieldCache
operator|.
name|StringIndex
name|fcsi
parameter_list|)
block|{
name|this
operator|.
name|fcsi
operator|=
name|fcsi
expr_stmt|;
name|initialize
argument_list|()
expr_stmt|;
block|}
DECL|method|initialize
specifier|private
name|void
name|initialize
parameter_list|()
block|{
name|int
name|lowerPoint
init|=
name|fcsi
operator|.
name|binarySearchLookup
argument_list|(
name|lowerVal
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeLower
operator|&&
name|lowerPoint
operator|>=
literal|0
condition|)
block|{
name|inclusiveLowerPoint
operator|=
name|lowerPoint
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lowerPoint
operator|>=
literal|0
condition|)
block|{
name|inclusiveLowerPoint
operator|=
name|lowerPoint
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|inclusiveLowerPoint
operator|=
operator|-
name|lowerPoint
operator|-
literal|1
expr_stmt|;
block|}
name|int
name|upperPoint
init|=
name|fcsi
operator|.
name|binarySearchLookup
argument_list|(
name|upperVal
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeUpper
operator|&&
name|upperPoint
operator|>=
literal|0
condition|)
block|{
name|inclusiveUpperPoint
operator|=
name|upperPoint
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|upperPoint
operator|>=
literal|0
condition|)
block|{
name|inclusiveUpperPoint
operator|=
name|upperPoint
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|inclusiveUpperPoint
operator|=
operator|-
name|upperPoint
operator|-
literal|2
expr_stmt|;
block|}
block|}
DECL|method|iterator
specifier|public
name|DocIdSetIterator
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|RangeMultiFilterIterator
argument_list|()
return|;
block|}
DECL|class|RangeMultiFilterIterator
specifier|protected
class|class
name|RangeMultiFilterIterator
extends|extends
name|DocIdSetIterator
block|{
DECL|field|doc
specifier|private
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|doc
specifier|public
name|int
name|doc
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
DECL|method|next
specifier|public
name|boolean
name|next
parameter_list|()
block|{
try|try
block|{
do|do
block|{
name|doc
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|fcsi
operator|.
name|order
index|[
name|doc
index|]
operator|>
name|inclusiveUpperPoint
operator|||
name|fcsi
operator|.
name|order
index|[
name|doc
index|]
operator|<
name|inclusiveLowerPoint
condition|)
do|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
name|doc
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|method|skipTo
specifier|public
name|boolean
name|skipTo
parameter_list|(
name|int
name|target
parameter_list|)
block|{
try|try
block|{
name|doc
operator|=
name|target
expr_stmt|;
while|while
condition|(
name|fcsi
operator|.
name|order
index|[
name|doc
index|]
operator|>
name|inclusiveUpperPoint
operator|||
name|fcsi
operator|.
name|order
index|[
name|doc
index|]
operator|<
name|inclusiveLowerPoint
condition|)
block|{
name|doc
operator|++
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
name|doc
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
block|}
end_class
end_unit
