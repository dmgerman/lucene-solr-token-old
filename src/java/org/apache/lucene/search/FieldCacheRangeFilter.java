begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericField
import|;
end_import
begin_comment
comment|// for javadocs
end_comment
begin_comment
comment|/**  * A range filter built on top of a cached single term field (in {@link FieldCache}).  *   *<p>FieldCacheRangeFilter builds a single cache for the field the first time it is used.  * Each subsequent FieldCacheRangeFilter on the same field then reuses this cache,  * even if the range itself changes.   *   *<p>This means that FieldCacheRangeFilter is much faster (sometimes more than 100x as fast)   * as building a {@link TermRangeFilter} (or {@link ConstantScoreRangeQuery} on a {@link TermRangeFilter})  * for each query, if using a {@link #newStringRange}. However, if the range never changes it  * is slower (around 2x as slow) than building a CachingWrapperFilter on top of a single TermRangeFilter.  *  * For numeric data types, this filter may be significantly faster than {@link NumericRangeFilter}.  * Furthermore, it does not need the numeric values encoded by {@link NumericField}. But  * it has the problem that it only works with exact one value/document (see below).  *  *<p>As with all {@link FieldCache} based functionality, FieldCacheRangeFilter is only valid for   * fields which exact one term for each document (except for {@link #newStringRange}  * where 0 terms are also allowed). Due to a restriction of {@link FieldCache}, for numeric ranges  * all terms that do not have a numeric value, 0 is assumed.  *  *<p>Thus it works on dates, prices and other single value fields but will not work on  * regular text fields. It is preferable to use a<code>NOT_ANALYZED</code> field to ensure that  * there is only a single term.   *  *<p>This class does not have an constructor, use one of the static factory methods available,  * that create a correct instance for different data types supported by {@link FieldCache}.  */
end_comment
begin_class
DECL|class|FieldCacheRangeFilter
specifier|public
specifier|abstract
class|class
name|FieldCacheRangeFilter
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Filter
block|{
DECL|field|field
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|parser
specifier|final
name|FieldCache
operator|.
name|Parser
name|parser
decl_stmt|;
DECL|field|lowerVal
specifier|final
name|T
name|lowerVal
decl_stmt|;
DECL|field|upperVal
specifier|final
name|T
name|upperVal
decl_stmt|;
DECL|field|includeLower
specifier|final
name|boolean
name|includeLower
decl_stmt|;
DECL|field|includeUpper
specifier|final
name|boolean
name|includeUpper
decl_stmt|;
DECL|method|FieldCacheRangeFilter
specifier|private
name|FieldCacheRangeFilter
parameter_list|(
name|String
name|field
parameter_list|,
name|FieldCache
operator|.
name|Parser
name|parser
parameter_list|,
name|T
name|lowerVal
parameter_list|,
name|T
name|upperVal
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|parser
operator|=
name|parser
expr_stmt|;
name|this
operator|.
name|lowerVal
operator|=
name|lowerVal
expr_stmt|;
name|this
operator|.
name|upperVal
operator|=
name|upperVal
expr_stmt|;
name|this
operator|.
name|includeLower
operator|=
name|includeLower
expr_stmt|;
name|this
operator|.
name|includeUpper
operator|=
name|includeUpper
expr_stmt|;
block|}
comment|/** This method is implemented for each data type */
DECL|method|getDocIdSet
specifier|public
specifier|abstract
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Creates a string range query using {@link FieldCache#getStringIndex}. This works with all    * fields containing zero or one term in the field. The range can be half-open by setting one    * of the values to<code>null</code>.    */
DECL|method|newStringRange
specifier|public
specifier|static
name|FieldCacheRangeFilter
argument_list|<
name|String
argument_list|>
name|newStringRange
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|lowerVal
parameter_list|,
name|String
name|upperVal
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
return|return
operator|new
name|FieldCacheRangeFilter
argument_list|<
name|String
argument_list|>
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
name|lowerVal
argument_list|,
name|upperVal
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
block|{
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FieldCache
operator|.
name|StringIndex
name|fcsi
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getStringIndex
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
decl_stmt|;
specifier|final
name|int
name|lowerPoint
init|=
name|fcsi
operator|.
name|binarySearchLookup
argument_list|(
name|lowerVal
argument_list|)
decl_stmt|;
specifier|final
name|int
name|upperPoint
init|=
name|fcsi
operator|.
name|binarySearchLookup
argument_list|(
name|upperVal
argument_list|)
decl_stmt|;
specifier|final
name|int
name|inclusiveLowerPoint
decl_stmt|,
name|inclusiveUpperPoint
decl_stmt|;
comment|// Hints:
comment|// * binarySearchLookup returns 0, if value was null.
comment|// * the value is<0 if no exact hit was found, the returned value
comment|//   is (-(insertion point) - 1)
if|if
condition|(
name|lowerPoint
operator|==
literal|0
condition|)
block|{
assert|assert
name|lowerVal
operator|==
literal|null
assert|;
name|inclusiveLowerPoint
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|includeLower
operator|&&
name|lowerPoint
operator|>
literal|0
condition|)
block|{
name|inclusiveLowerPoint
operator|=
name|lowerPoint
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lowerPoint
operator|>
literal|0
condition|)
block|{
name|inclusiveLowerPoint
operator|=
name|lowerPoint
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|inclusiveLowerPoint
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
operator|-
name|lowerPoint
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|upperPoint
operator|==
literal|0
condition|)
block|{
assert|assert
name|upperVal
operator|==
literal|null
assert|;
name|inclusiveUpperPoint
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|includeUpper
operator|&&
name|upperPoint
operator|>
literal|0
condition|)
block|{
name|inclusiveUpperPoint
operator|=
name|upperPoint
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|upperPoint
operator|>
literal|0
condition|)
block|{
name|inclusiveUpperPoint
operator|=
name|upperPoint
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|inclusiveUpperPoint
operator|=
operator|-
name|upperPoint
operator|-
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|inclusiveUpperPoint
operator|<=
literal|0
operator|||
name|inclusiveLowerPoint
operator|>
name|inclusiveUpperPoint
condition|)
return|return
name|DocIdSet
operator|.
name|EMPTY_DOCIDSET
return|;
assert|assert
name|inclusiveLowerPoint
operator|>
literal|0
operator|&&
name|inclusiveUpperPoint
operator|>
literal|0
assert|;
comment|// for this DocIdSet, we never need to use TermDocs,
comment|// because deleted docs have an order of 0 (null entry in StringIndex)
return|return
operator|new
name|FieldCacheDocIdSet
argument_list|(
name|reader
argument_list|,
literal|false
argument_list|)
block|{
specifier|final
name|boolean
name|matchDoc
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|fcsi
operator|.
name|order
index|[
name|doc
index|]
operator|>=
name|inclusiveLowerPoint
operator|&&
name|fcsi
operator|.
name|order
index|[
name|doc
index|]
operator|<=
name|inclusiveUpperPoint
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
comment|/**    * Creates a numeric range query using {@link FieldCache#getBytes(IndexReader,String)}. This works with all    * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one    * of the values to<code>null</code>.    */
DECL|method|newByteRange
specifier|public
specifier|static
name|FieldCacheRangeFilter
argument_list|<
name|Byte
argument_list|>
name|newByteRange
parameter_list|(
name|String
name|field
parameter_list|,
name|Byte
name|lowerVal
parameter_list|,
name|Byte
name|upperVal
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
return|return
name|newByteRange
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
name|lowerVal
argument_list|,
name|upperVal
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
comment|/**    * Creates a numeric range query using {@link FieldCache#getBytes(IndexReader,String,FieldCache.ByteParser)}. This works with all    * byte fields containing exactly one numeric term in the field. The range can be half-open by setting one    * of the values to<code>null</code>.    */
DECL|method|newByteRange
specifier|public
specifier|static
name|FieldCacheRangeFilter
argument_list|<
name|Byte
argument_list|>
name|newByteRange
parameter_list|(
name|String
name|field
parameter_list|,
name|FieldCache
operator|.
name|ByteParser
name|parser
parameter_list|,
name|Byte
name|lowerVal
parameter_list|,
name|Byte
name|upperVal
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
return|return
operator|new
name|FieldCacheRangeFilter
argument_list|<
name|Byte
argument_list|>
argument_list|(
name|field
argument_list|,
name|parser
argument_list|,
name|lowerVal
argument_list|,
name|upperVal
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
block|{
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|byte
name|inclusiveLowerPoint
decl_stmt|,
name|inclusiveUpperPoint
decl_stmt|;
if|if
condition|(
name|lowerVal
operator|!=
literal|null
condition|)
block|{
specifier|final
name|byte
name|i
init|=
name|lowerVal
operator|.
name|byteValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeLower
operator|&&
name|i
operator|==
name|Byte
operator|.
name|MAX_VALUE
condition|)
return|return
name|DocIdSet
operator|.
name|EMPTY_DOCIDSET
return|;
name|inclusiveLowerPoint
operator|=
call|(
name|byte
call|)
argument_list|(
name|includeLower
condition|?
name|i
else|:
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inclusiveLowerPoint
operator|=
name|Byte
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
if|if
condition|(
name|upperVal
operator|!=
literal|null
condition|)
block|{
specifier|final
name|byte
name|i
init|=
name|upperVal
operator|.
name|byteValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeUpper
operator|&&
name|i
operator|==
name|Byte
operator|.
name|MIN_VALUE
condition|)
return|return
name|DocIdSet
operator|.
name|EMPTY_DOCIDSET
return|;
name|inclusiveUpperPoint
operator|=
call|(
name|byte
call|)
argument_list|(
name|includeUpper
condition|?
name|i
else|:
operator|(
name|i
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inclusiveUpperPoint
operator|=
name|Byte
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
if|if
condition|(
name|inclusiveLowerPoint
operator|>
name|inclusiveUpperPoint
condition|)
return|return
name|DocIdSet
operator|.
name|EMPTY_DOCIDSET
return|;
specifier|final
name|byte
index|[]
name|values
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getBytes
argument_list|(
name|reader
argument_list|,
name|field
argument_list|,
operator|(
name|FieldCache
operator|.
name|ByteParser
operator|)
name|parser
argument_list|)
decl_stmt|;
comment|// we only request the usage of termDocs, if the range contains 0
return|return
operator|new
name|FieldCacheDocIdSet
argument_list|(
name|reader
argument_list|,
operator|(
name|inclusiveLowerPoint
operator|<=
literal|0
operator|&&
name|inclusiveUpperPoint
operator|>=
literal|0
operator|)
argument_list|)
block|{
name|boolean
name|matchDoc
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|values
index|[
name|doc
index|]
operator|>=
name|inclusiveLowerPoint
operator|&&
name|values
index|[
name|doc
index|]
operator|<=
name|inclusiveUpperPoint
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
comment|/**    * Creates a numeric range query using {@link FieldCache#getShorts(IndexReader,String)}. This works with all    * short fields containing exactly one numeric term in the field. The range can be half-open by setting one    * of the values to<code>null</code>.    */
DECL|method|newShortRange
specifier|public
specifier|static
name|FieldCacheRangeFilter
argument_list|<
name|Short
argument_list|>
name|newShortRange
parameter_list|(
name|String
name|field
parameter_list|,
name|Short
name|lowerVal
parameter_list|,
name|Short
name|upperVal
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
return|return
name|newShortRange
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
name|lowerVal
argument_list|,
name|upperVal
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
comment|/**    * Creates a numeric range query using {@link FieldCache#getShorts(IndexReader,String,FieldCache.ShortParser)}. This works with all    * short fields containing exactly one numeric term in the field. The range can be half-open by setting one    * of the values to<code>null</code>.    */
DECL|method|newShortRange
specifier|public
specifier|static
name|FieldCacheRangeFilter
argument_list|<
name|Short
argument_list|>
name|newShortRange
parameter_list|(
name|String
name|field
parameter_list|,
name|FieldCache
operator|.
name|ShortParser
name|parser
parameter_list|,
name|Short
name|lowerVal
parameter_list|,
name|Short
name|upperVal
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
return|return
operator|new
name|FieldCacheRangeFilter
argument_list|<
name|Short
argument_list|>
argument_list|(
name|field
argument_list|,
name|parser
argument_list|,
name|lowerVal
argument_list|,
name|upperVal
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
block|{
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|short
name|inclusiveLowerPoint
decl_stmt|,
name|inclusiveUpperPoint
decl_stmt|;
if|if
condition|(
name|lowerVal
operator|!=
literal|null
condition|)
block|{
name|short
name|i
init|=
name|lowerVal
operator|.
name|shortValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeLower
operator|&&
name|i
operator|==
name|Short
operator|.
name|MAX_VALUE
condition|)
return|return
name|DocIdSet
operator|.
name|EMPTY_DOCIDSET
return|;
name|inclusiveLowerPoint
operator|=
call|(
name|short
call|)
argument_list|(
name|includeLower
condition|?
name|i
else|:
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inclusiveLowerPoint
operator|=
name|Short
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
if|if
condition|(
name|upperVal
operator|!=
literal|null
condition|)
block|{
name|short
name|i
init|=
name|upperVal
operator|.
name|shortValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeUpper
operator|&&
name|i
operator|==
name|Short
operator|.
name|MIN_VALUE
condition|)
return|return
name|DocIdSet
operator|.
name|EMPTY_DOCIDSET
return|;
name|inclusiveUpperPoint
operator|=
call|(
name|short
call|)
argument_list|(
name|includeUpper
condition|?
name|i
else|:
operator|(
name|i
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inclusiveUpperPoint
operator|=
name|Short
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
if|if
condition|(
name|inclusiveLowerPoint
operator|>
name|inclusiveUpperPoint
condition|)
return|return
name|DocIdSet
operator|.
name|EMPTY_DOCIDSET
return|;
specifier|final
name|short
index|[]
name|values
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getShorts
argument_list|(
name|reader
argument_list|,
name|field
argument_list|,
operator|(
name|FieldCache
operator|.
name|ShortParser
operator|)
name|parser
argument_list|)
decl_stmt|;
comment|// we only request the usage of termDocs, if the range contains 0
return|return
operator|new
name|FieldCacheDocIdSet
argument_list|(
name|reader
argument_list|,
operator|(
name|inclusiveLowerPoint
operator|<=
literal|0
operator|&&
name|inclusiveUpperPoint
operator|>=
literal|0
operator|)
argument_list|)
block|{
name|boolean
name|matchDoc
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|values
index|[
name|doc
index|]
operator|>=
name|inclusiveLowerPoint
operator|&&
name|values
index|[
name|doc
index|]
operator|<=
name|inclusiveUpperPoint
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
comment|/**    * Creates a numeric range query using {@link FieldCache#getInts(IndexReader,String)}. This works with all    * int fields containing exactly one numeric term in the field. The range can be half-open by setting one    * of the values to<code>null</code>.    */
DECL|method|newIntRange
specifier|public
specifier|static
name|FieldCacheRangeFilter
argument_list|<
name|Integer
argument_list|>
name|newIntRange
parameter_list|(
name|String
name|field
parameter_list|,
name|Integer
name|lowerVal
parameter_list|,
name|Integer
name|upperVal
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
return|return
name|newIntRange
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
name|lowerVal
argument_list|,
name|upperVal
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
comment|/**    * Creates a numeric range query using {@link FieldCache#getInts(IndexReader,String,FieldCache.IntParser)}. This works with all    * int fields containing exactly one numeric term in the field. The range can be half-open by setting one    * of the values to<code>null</code>.    */
DECL|method|newIntRange
specifier|public
specifier|static
name|FieldCacheRangeFilter
argument_list|<
name|Integer
argument_list|>
name|newIntRange
parameter_list|(
name|String
name|field
parameter_list|,
name|FieldCache
operator|.
name|IntParser
name|parser
parameter_list|,
name|Integer
name|lowerVal
parameter_list|,
name|Integer
name|upperVal
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
return|return
operator|new
name|FieldCacheRangeFilter
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|field
argument_list|,
name|parser
argument_list|,
name|lowerVal
argument_list|,
name|upperVal
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
block|{
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|inclusiveLowerPoint
decl_stmt|,
name|inclusiveUpperPoint
decl_stmt|;
if|if
condition|(
name|lowerVal
operator|!=
literal|null
condition|)
block|{
name|int
name|i
init|=
name|lowerVal
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeLower
operator|&&
name|i
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
return|return
name|DocIdSet
operator|.
name|EMPTY_DOCIDSET
return|;
name|inclusiveLowerPoint
operator|=
name|includeLower
condition|?
name|i
else|:
operator|(
name|i
operator|+
literal|1
operator|)
expr_stmt|;
block|}
else|else
block|{
name|inclusiveLowerPoint
operator|=
name|Integer
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
if|if
condition|(
name|upperVal
operator|!=
literal|null
condition|)
block|{
name|int
name|i
init|=
name|upperVal
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeUpper
operator|&&
name|i
operator|==
name|Integer
operator|.
name|MIN_VALUE
condition|)
return|return
name|DocIdSet
operator|.
name|EMPTY_DOCIDSET
return|;
name|inclusiveUpperPoint
operator|=
name|includeUpper
condition|?
name|i
else|:
operator|(
name|i
operator|-
literal|1
operator|)
expr_stmt|;
block|}
else|else
block|{
name|inclusiveUpperPoint
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
if|if
condition|(
name|inclusiveLowerPoint
operator|>
name|inclusiveUpperPoint
condition|)
return|return
name|DocIdSet
operator|.
name|EMPTY_DOCIDSET
return|;
specifier|final
name|int
index|[]
name|values
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getInts
argument_list|(
name|reader
argument_list|,
name|field
argument_list|,
operator|(
name|FieldCache
operator|.
name|IntParser
operator|)
name|parser
argument_list|)
decl_stmt|;
comment|// we only request the usage of termDocs, if the range contains 0
return|return
operator|new
name|FieldCacheDocIdSet
argument_list|(
name|reader
argument_list|,
operator|(
name|inclusiveLowerPoint
operator|<=
literal|0
operator|&&
name|inclusiveUpperPoint
operator|>=
literal|0
operator|)
argument_list|)
block|{
name|boolean
name|matchDoc
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|values
index|[
name|doc
index|]
operator|>=
name|inclusiveLowerPoint
operator|&&
name|values
index|[
name|doc
index|]
operator|<=
name|inclusiveUpperPoint
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
comment|/**    * Creates a numeric range query using {@link FieldCache#getLongs(IndexReader,String)}. This works with all    * long fields containing exactly one numeric term in the field. The range can be half-open by setting one    * of the values to<code>null</code>.    */
DECL|method|newLongRange
specifier|public
specifier|static
name|FieldCacheRangeFilter
argument_list|<
name|Long
argument_list|>
name|newLongRange
parameter_list|(
name|String
name|field
parameter_list|,
name|Long
name|lowerVal
parameter_list|,
name|Long
name|upperVal
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
return|return
name|newLongRange
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
name|lowerVal
argument_list|,
name|upperVal
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
comment|/**    * Creates a numeric range query using {@link FieldCache#getLongs(IndexReader,String,FieldCache.LongParser)}. This works with all    * long fields containing exactly one numeric term in the field. The range can be half-open by setting one    * of the values to<code>null</code>.    */
DECL|method|newLongRange
specifier|public
specifier|static
name|FieldCacheRangeFilter
argument_list|<
name|Long
argument_list|>
name|newLongRange
parameter_list|(
name|String
name|field
parameter_list|,
name|FieldCache
operator|.
name|LongParser
name|parser
parameter_list|,
name|Long
name|lowerVal
parameter_list|,
name|Long
name|upperVal
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
return|return
operator|new
name|FieldCacheRangeFilter
argument_list|<
name|Long
argument_list|>
argument_list|(
name|field
argument_list|,
name|parser
argument_list|,
name|lowerVal
argument_list|,
name|upperVal
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
block|{
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|inclusiveLowerPoint
decl_stmt|,
name|inclusiveUpperPoint
decl_stmt|;
if|if
condition|(
name|lowerVal
operator|!=
literal|null
condition|)
block|{
name|long
name|i
init|=
name|lowerVal
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeLower
operator|&&
name|i
operator|==
name|Long
operator|.
name|MAX_VALUE
condition|)
return|return
name|DocIdSet
operator|.
name|EMPTY_DOCIDSET
return|;
name|inclusiveLowerPoint
operator|=
name|includeLower
condition|?
name|i
else|:
operator|(
name|i
operator|+
literal|1L
operator|)
expr_stmt|;
block|}
else|else
block|{
name|inclusiveLowerPoint
operator|=
name|Long
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
if|if
condition|(
name|upperVal
operator|!=
literal|null
condition|)
block|{
name|long
name|i
init|=
name|upperVal
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeUpper
operator|&&
name|i
operator|==
name|Long
operator|.
name|MIN_VALUE
condition|)
return|return
name|DocIdSet
operator|.
name|EMPTY_DOCIDSET
return|;
name|inclusiveUpperPoint
operator|=
name|includeUpper
condition|?
name|i
else|:
operator|(
name|i
operator|-
literal|1L
operator|)
expr_stmt|;
block|}
else|else
block|{
name|inclusiveUpperPoint
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
if|if
condition|(
name|inclusiveLowerPoint
operator|>
name|inclusiveUpperPoint
condition|)
return|return
name|DocIdSet
operator|.
name|EMPTY_DOCIDSET
return|;
specifier|final
name|long
index|[]
name|values
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getLongs
argument_list|(
name|reader
argument_list|,
name|field
argument_list|,
operator|(
name|FieldCache
operator|.
name|LongParser
operator|)
name|parser
argument_list|)
decl_stmt|;
comment|// we only request the usage of termDocs, if the range contains 0
return|return
operator|new
name|FieldCacheDocIdSet
argument_list|(
name|reader
argument_list|,
operator|(
name|inclusiveLowerPoint
operator|<=
literal|0L
operator|&&
name|inclusiveUpperPoint
operator|>=
literal|0L
operator|)
argument_list|)
block|{
name|boolean
name|matchDoc
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|values
index|[
name|doc
index|]
operator|>=
name|inclusiveLowerPoint
operator|&&
name|values
index|[
name|doc
index|]
operator|<=
name|inclusiveUpperPoint
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
comment|/**    * Creates a numeric range query using {@link FieldCache#getFloats(IndexReader,String)}. This works with all    * float fields containing exactly one numeric term in the field. The range can be half-open by setting one    * of the values to<code>null</code>.    */
DECL|method|newFloatRange
specifier|public
specifier|static
name|FieldCacheRangeFilter
argument_list|<
name|Float
argument_list|>
name|newFloatRange
parameter_list|(
name|String
name|field
parameter_list|,
name|Float
name|lowerVal
parameter_list|,
name|Float
name|upperVal
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
return|return
name|newFloatRange
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
name|lowerVal
argument_list|,
name|upperVal
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
comment|/**    * Creates a numeric range query using {@link FieldCache#getFloats(IndexReader,String,FieldCache.FloatParser)}. This works with all    * float fields containing exactly one numeric term in the field. The range can be half-open by setting one    * of the values to<code>null</code>.    */
DECL|method|newFloatRange
specifier|public
specifier|static
name|FieldCacheRangeFilter
argument_list|<
name|Float
argument_list|>
name|newFloatRange
parameter_list|(
name|String
name|field
parameter_list|,
name|FieldCache
operator|.
name|FloatParser
name|parser
parameter_list|,
name|Float
name|lowerVal
parameter_list|,
name|Float
name|upperVal
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
return|return
operator|new
name|FieldCacheRangeFilter
argument_list|<
name|Float
argument_list|>
argument_list|(
name|field
argument_list|,
name|parser
argument_list|,
name|lowerVal
argument_list|,
name|upperVal
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
block|{
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
comment|// we transform the floating point numbers to sortable integers
comment|// using NumericUtils to easier find the next bigger/lower value
specifier|final
name|float
name|inclusiveLowerPoint
decl_stmt|,
name|inclusiveUpperPoint
decl_stmt|;
if|if
condition|(
name|lowerVal
operator|!=
literal|null
condition|)
block|{
name|float
name|f
init|=
name|lowerVal
operator|.
name|floatValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeUpper
operator|&&
name|f
operator|>
literal|0.0f
operator|&&
name|Float
operator|.
name|isInfinite
argument_list|(
name|f
argument_list|)
condition|)
return|return
name|DocIdSet
operator|.
name|EMPTY_DOCIDSET
return|;
name|int
name|i
init|=
name|NumericUtils
operator|.
name|floatToSortableInt
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|inclusiveLowerPoint
operator|=
name|NumericUtils
operator|.
name|sortableIntToFloat
argument_list|(
name|includeLower
condition|?
name|i
else|:
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inclusiveLowerPoint
operator|=
name|Float
operator|.
name|NEGATIVE_INFINITY
expr_stmt|;
block|}
if|if
condition|(
name|upperVal
operator|!=
literal|null
condition|)
block|{
name|float
name|f
init|=
name|upperVal
operator|.
name|floatValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeUpper
operator|&&
name|f
operator|<
literal|0.0f
operator|&&
name|Float
operator|.
name|isInfinite
argument_list|(
name|f
argument_list|)
condition|)
return|return
name|DocIdSet
operator|.
name|EMPTY_DOCIDSET
return|;
name|int
name|i
init|=
name|NumericUtils
operator|.
name|floatToSortableInt
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|inclusiveUpperPoint
operator|=
name|NumericUtils
operator|.
name|sortableIntToFloat
argument_list|(
name|includeUpper
condition|?
name|i
else|:
operator|(
name|i
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inclusiveUpperPoint
operator|=
name|Float
operator|.
name|POSITIVE_INFINITY
expr_stmt|;
block|}
if|if
condition|(
name|inclusiveLowerPoint
operator|>
name|inclusiveUpperPoint
condition|)
return|return
name|DocIdSet
operator|.
name|EMPTY_DOCIDSET
return|;
specifier|final
name|float
index|[]
name|values
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getFloats
argument_list|(
name|reader
argument_list|,
name|field
argument_list|,
operator|(
name|FieldCache
operator|.
name|FloatParser
operator|)
name|parser
argument_list|)
decl_stmt|;
comment|// we only request the usage of termDocs, if the range contains 0
return|return
operator|new
name|FieldCacheDocIdSet
argument_list|(
name|reader
argument_list|,
operator|(
name|inclusiveLowerPoint
operator|<=
literal|0.0f
operator|&&
name|inclusiveUpperPoint
operator|>=
literal|0.0f
operator|)
argument_list|)
block|{
name|boolean
name|matchDoc
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|values
index|[
name|doc
index|]
operator|>=
name|inclusiveLowerPoint
operator|&&
name|values
index|[
name|doc
index|]
operator|<=
name|inclusiveUpperPoint
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
comment|/**    * Creates a numeric range query using {@link FieldCache#getDoubles(IndexReader,String)}. This works with all    * double fields containing exactly one numeric term in the field. The range can be half-open by setting one    * of the values to<code>null</code>.    */
DECL|method|newDoubleRange
specifier|public
specifier|static
name|FieldCacheRangeFilter
argument_list|<
name|Double
argument_list|>
name|newDoubleRange
parameter_list|(
name|String
name|field
parameter_list|,
name|Double
name|lowerVal
parameter_list|,
name|Double
name|upperVal
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
return|return
name|newDoubleRange
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
name|lowerVal
argument_list|,
name|upperVal
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
return|;
block|}
comment|/**    * Creates a numeric range query using {@link FieldCache#getDoubles(IndexReader,String,FieldCache.DoubleParser)}. This works with all    * double fields containing exactly one numeric term in the field. The range can be half-open by setting one    * of the values to<code>null</code>.    */
DECL|method|newDoubleRange
specifier|public
specifier|static
name|FieldCacheRangeFilter
argument_list|<
name|Double
argument_list|>
name|newDoubleRange
parameter_list|(
name|String
name|field
parameter_list|,
name|FieldCache
operator|.
name|DoubleParser
name|parser
parameter_list|,
name|Double
name|lowerVal
parameter_list|,
name|Double
name|upperVal
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
return|return
operator|new
name|FieldCacheRangeFilter
argument_list|<
name|Double
argument_list|>
argument_list|(
name|field
argument_list|,
name|parser
argument_list|,
name|lowerVal
argument_list|,
name|upperVal
argument_list|,
name|includeLower
argument_list|,
name|includeUpper
argument_list|)
block|{
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
comment|// we transform the floating point numbers to sortable integers
comment|// using NumericUtils to easier find the next bigger/lower value
specifier|final
name|double
name|inclusiveLowerPoint
decl_stmt|,
name|inclusiveUpperPoint
decl_stmt|;
if|if
condition|(
name|lowerVal
operator|!=
literal|null
condition|)
block|{
name|double
name|f
init|=
name|lowerVal
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeUpper
operator|&&
name|f
operator|>
literal|0.0
operator|&&
name|Double
operator|.
name|isInfinite
argument_list|(
name|f
argument_list|)
condition|)
return|return
name|DocIdSet
operator|.
name|EMPTY_DOCIDSET
return|;
name|long
name|i
init|=
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|inclusiveLowerPoint
operator|=
name|NumericUtils
operator|.
name|sortableLongToDouble
argument_list|(
name|includeLower
condition|?
name|i
else|:
operator|(
name|i
operator|+
literal|1L
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inclusiveLowerPoint
operator|=
name|Double
operator|.
name|NEGATIVE_INFINITY
expr_stmt|;
block|}
if|if
condition|(
name|upperVal
operator|!=
literal|null
condition|)
block|{
name|double
name|f
init|=
name|upperVal
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|includeUpper
operator|&&
name|f
operator|<
literal|0.0
operator|&&
name|Double
operator|.
name|isInfinite
argument_list|(
name|f
argument_list|)
condition|)
return|return
name|DocIdSet
operator|.
name|EMPTY_DOCIDSET
return|;
name|long
name|i
init|=
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|inclusiveUpperPoint
operator|=
name|NumericUtils
operator|.
name|sortableLongToDouble
argument_list|(
name|includeUpper
condition|?
name|i
else|:
operator|(
name|i
operator|-
literal|1L
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inclusiveUpperPoint
operator|=
name|Double
operator|.
name|POSITIVE_INFINITY
expr_stmt|;
block|}
if|if
condition|(
name|inclusiveLowerPoint
operator|>
name|inclusiveUpperPoint
condition|)
return|return
name|DocIdSet
operator|.
name|EMPTY_DOCIDSET
return|;
specifier|final
name|double
index|[]
name|values
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getDoubles
argument_list|(
name|reader
argument_list|,
name|field
argument_list|,
operator|(
name|FieldCache
operator|.
name|DoubleParser
operator|)
name|parser
argument_list|)
decl_stmt|;
comment|// we only request the usage of termDocs, if the range contains 0
return|return
operator|new
name|FieldCacheDocIdSet
argument_list|(
name|reader
argument_list|,
operator|(
name|inclusiveLowerPoint
operator|<=
literal|0.0
operator|&&
name|inclusiveUpperPoint
operator|>=
literal|0.0
operator|)
argument_list|)
block|{
name|boolean
name|matchDoc
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|values
index|[
name|doc
index|]
operator|>=
name|inclusiveLowerPoint
operator|&&
name|values
index|[
name|doc
index|]
operator|<=
name|inclusiveUpperPoint
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
DECL|method|toString
specifier|public
specifier|final
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|field
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
return|return
name|sb
operator|.
name|append
argument_list|(
name|includeLower
condition|?
literal|'['
else|:
literal|'{'
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|lowerVal
operator|==
literal|null
operator|)
condition|?
literal|"*"
else|:
name|lowerVal
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" TO "
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|upperVal
operator|==
literal|null
operator|)
condition|?
literal|"*"
else|:
name|upperVal
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|includeUpper
condition|?
literal|']'
else|:
literal|'}'
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|equals
specifier|public
specifier|final
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|FieldCacheRangeFilter
operator|)
condition|)
return|return
literal|false
return|;
name|FieldCacheRangeFilter
name|other
init|=
operator|(
name|FieldCacheRangeFilter
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|field
operator|.
name|equals
argument_list|(
name|other
operator|.
name|field
argument_list|)
operator|||
name|this
operator|.
name|includeLower
operator|!=
name|other
operator|.
name|includeLower
operator|||
name|this
operator|.
name|includeUpper
operator|!=
name|other
operator|.
name|includeUpper
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|lowerVal
operator|!=
literal|null
condition|?
operator|!
name|this
operator|.
name|lowerVal
operator|.
name|equals
argument_list|(
name|other
operator|.
name|lowerVal
argument_list|)
else|:
name|other
operator|.
name|lowerVal
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|upperVal
operator|!=
literal|null
condition|?
operator|!
name|this
operator|.
name|upperVal
operator|.
name|equals
argument_list|(
name|other
operator|.
name|upperVal
argument_list|)
else|:
name|other
operator|.
name|upperVal
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|parser
operator|!=
literal|null
condition|?
operator|!
name|this
operator|.
name|parser
operator|.
name|equals
argument_list|(
name|other
operator|.
name|parser
argument_list|)
else|:
name|other
operator|.
name|parser
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
DECL|method|hashCode
specifier|public
specifier|final
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|h
init|=
name|field
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|h
operator|^=
operator|(
name|lowerVal
operator|!=
literal|null
operator|)
condition|?
name|lowerVal
operator|.
name|hashCode
argument_list|()
else|:
literal|550356204
expr_stmt|;
name|h
operator|=
operator|(
name|h
operator|<<
literal|1
operator|)
operator||
operator|(
name|h
operator|>>>
literal|31
operator|)
expr_stmt|;
comment|// rotate to distinguish lower from upper
name|h
operator|^=
operator|(
name|upperVal
operator|!=
literal|null
operator|)
condition|?
name|upperVal
operator|.
name|hashCode
argument_list|()
else|:
operator|-
literal|1674416163
expr_stmt|;
name|h
operator|^=
operator|(
name|parser
operator|!=
literal|null
operator|)
condition|?
name|parser
operator|.
name|hashCode
argument_list|()
else|:
operator|-
literal|1572457324
expr_stmt|;
name|h
operator|^=
operator|(
name|includeLower
condition|?
literal|1549299360
else|:
operator|-
literal|365038026
operator|)
operator|^
operator|(
name|includeUpper
condition|?
literal|1721088258
else|:
literal|1948649653
operator|)
expr_stmt|;
return|return
name|h
return|;
block|}
comment|/** Returns the field name for this query */
DECL|method|getField
specifier|public
name|String
name|getField
parameter_list|()
block|{
return|return
name|field
return|;
block|}
comment|/** Returns<code>true</code> if the lower endpoint is inclusive */
DECL|method|includesLower
specifier|public
name|boolean
name|includesLower
parameter_list|()
block|{
return|return
name|includeLower
return|;
block|}
comment|/** Returns<code>true</code> if the upper endpoint is inclusive */
DECL|method|includesUpper
specifier|public
name|boolean
name|includesUpper
parameter_list|()
block|{
return|return
name|includeUpper
return|;
block|}
comment|/** Returns the lower value of this range query */
DECL|method|getLowerVal
specifier|public
name|T
name|getLowerVal
parameter_list|()
block|{
return|return
name|lowerVal
return|;
block|}
comment|/** Returns the upper value of this range query */
DECL|method|getUpperVal
specifier|public
name|T
name|getUpperVal
parameter_list|()
block|{
return|return
name|upperVal
return|;
block|}
comment|/** Returns the current numeric parser ({@code null} for {@code T} is {@code String}} */
DECL|method|getParser
specifier|public
name|FieldCache
operator|.
name|Parser
name|getParser
parameter_list|()
block|{
return|return
name|parser
return|;
block|}
DECL|class|FieldCacheDocIdSet
specifier|static
specifier|abstract
class|class
name|FieldCacheDocIdSet
extends|extends
name|DocIdSet
block|{
DECL|field|reader
specifier|private
specifier|final
name|IndexReader
name|reader
decl_stmt|;
DECL|field|mayUseTermDocs
specifier|private
name|boolean
name|mayUseTermDocs
decl_stmt|;
DECL|method|FieldCacheDocIdSet
name|FieldCacheDocIdSet
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|boolean
name|mayUseTermDocs
parameter_list|)
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|mayUseTermDocs
operator|=
name|mayUseTermDocs
expr_stmt|;
block|}
comment|/** this method checks, if a doc is a hit, should throw AIOBE, when position invalid */
DECL|method|matchDoc
specifier|abstract
name|boolean
name|matchDoc
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|ArrayIndexOutOfBoundsException
function_decl|;
comment|/** this DocIdSet is cacheable, if it works solely with FieldCache and no TermDocs */
annotation|@
name|Override
DECL|method|isCacheable
specifier|public
name|boolean
name|isCacheable
parameter_list|()
block|{
return|return
operator|!
operator|(
name|mayUseTermDocs
operator|&&
name|reader
operator|.
name|hasDeletions
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|DocIdSetIterator
name|iterator
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Synchronization needed because deleted docs BitVector
comment|// can change after call to hasDeletions until TermDocs creation.
comment|// We only use an iterator with termDocs, when this was requested (e.g. range contains 0)
comment|// and the index has deletions
specifier|final
name|TermDocs
name|termDocs
decl_stmt|;
synchronized|synchronized
init|(
name|reader
init|)
block|{
name|termDocs
operator|=
name|isCacheable
argument_list|()
condition|?
literal|null
else|:
name|reader
operator|.
name|termDocs
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|termDocs
operator|!=
literal|null
condition|)
block|{
comment|// a DocIdSetIterator using TermDocs to iterate valid docIds
return|return
operator|new
name|DocIdSetIterator
argument_list|()
block|{
specifier|private
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
do|do
block|{
if|if
condition|(
operator|!
name|termDocs
operator|.
name|next
argument_list|()
condition|)
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
do|while
condition|(
operator|!
name|matchDoc
argument_list|(
name|doc
operator|=
name|termDocs
operator|.
name|doc
argument_list|()
argument_list|)
condition|)
do|;
return|return
name|doc
return|;
block|}
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|termDocs
operator|.
name|skipTo
argument_list|(
name|target
argument_list|)
condition|)
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
while|while
condition|(
operator|!
name|matchDoc
argument_list|(
name|doc
operator|=
name|termDocs
operator|.
name|doc
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|termDocs
operator|.
name|next
argument_list|()
condition|)
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
return|return
name|doc
return|;
block|}
block|}
return|;
block|}
else|else
block|{
comment|// a DocIdSetIterator generating docIds by incrementing a variable -
comment|// this one can be used if there are no deletions are on the index
return|return
operator|new
name|DocIdSetIterator
argument_list|()
block|{
specifier|private
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
specifier|public
name|int
name|nextDoc
parameter_list|()
block|{
try|try
block|{
do|do
block|{
name|doc
operator|++
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|matchDoc
argument_list|(
name|doc
argument_list|)
condition|)
do|;
return|return
name|doc
return|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
block|}
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
block|{
try|try
block|{
name|doc
operator|=
name|target
expr_stmt|;
while|while
condition|(
operator|!
name|matchDoc
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|doc
operator|++
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
block|}
block|}
return|;
block|}
block|}
block|}
block|}
end_class
end_unit
