begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|*
import|;
end_import
begin_class
DECL|class|PhrasePositions
specifier|final
class|class
name|PhrasePositions
block|{
DECL|field|doc
name|int
name|doc
decl_stmt|;
comment|// current doc
DECL|field|position
name|int
name|position
decl_stmt|;
comment|// position in doc
DECL|field|count
name|int
name|count
decl_stmt|;
comment|// remaining pos in this doc
DECL|field|offset
name|int
name|offset
decl_stmt|;
comment|// position in phrase
DECL|field|tp
name|TermPositions
name|tp
decl_stmt|;
comment|// stream of positions
DECL|field|next
name|PhrasePositions
name|next
decl_stmt|;
comment|// used to make lists
DECL|method|PhrasePositions
name|PhrasePositions
parameter_list|(
name|TermPositions
name|t
parameter_list|,
name|int
name|o
parameter_list|)
throws|throws
name|IOException
block|{
name|tp
operator|=
name|t
expr_stmt|;
name|offset
operator|=
name|o
expr_stmt|;
block|}
DECL|method|next
specifier|final
name|boolean
name|next
parameter_list|()
throws|throws
name|IOException
block|{
comment|// increments to next doc
if|if
condition|(
operator|!
name|tp
operator|.
name|next
argument_list|()
condition|)
block|{
name|tp
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// close stream
name|doc
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
comment|// sentinel value
return|return
literal|false
return|;
block|}
name|doc
operator|=
name|tp
operator|.
name|doc
argument_list|()
expr_stmt|;
name|position
operator|=
literal|0
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|skipTo
specifier|final
name|boolean
name|skipTo
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|tp
operator|.
name|skipTo
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|tp
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// close stream
name|doc
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
comment|// sentinel value
return|return
literal|false
return|;
block|}
name|doc
operator|=
name|tp
operator|.
name|doc
argument_list|()
expr_stmt|;
name|position
operator|=
literal|0
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|firstPosition
specifier|final
name|void
name|firstPosition
parameter_list|()
throws|throws
name|IOException
block|{
name|count
operator|=
name|tp
operator|.
name|freq
argument_list|()
expr_stmt|;
comment|// read first pos
name|nextPosition
argument_list|()
expr_stmt|;
block|}
DECL|method|nextPosition
specifier|final
name|boolean
name|nextPosition
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
block|{
comment|// read subsequent pos's
name|position
operator|=
name|tp
operator|.
name|nextPosition
argument_list|()
operator|-
name|offset
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
return|return
literal|false
return|;
block|}
block|}
end_class
end_unit
