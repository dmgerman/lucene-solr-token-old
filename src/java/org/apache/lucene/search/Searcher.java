begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_comment
comment|/** An abstract base class for search implementations.  * Implements some common utility methods.  */
end_comment
begin_class
DECL|class|Searcher
specifier|public
specifier|abstract
class|class
name|Searcher
implements|implements
name|Searchable
block|{
comment|/** Returns the documents matching<code>query</code>.     * @throws BooleanQuery.TooManyClauses    */
DECL|method|search
specifier|public
specifier|final
name|Hits
name|search
parameter_list|(
name|Query
name|query
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|search
argument_list|(
name|query
argument_list|,
operator|(
name|Filter
operator|)
literal|null
argument_list|)
return|;
block|}
comment|/** Returns the documents matching<code>query</code> and    *<code>filter</code>.    * @throws BooleanQuery.TooManyClauses    */
DECL|method|search
specifier|public
name|Hits
name|search
parameter_list|(
name|Query
name|query
parameter_list|,
name|Filter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Hits
argument_list|(
name|this
argument_list|,
name|query
argument_list|,
name|filter
argument_list|)
return|;
block|}
comment|/** Returns documents matching<code>query</code> sorted by    *<code>sort</code>.    * @throws BooleanQuery.TooManyClauses    */
DECL|method|search
specifier|public
name|Hits
name|search
parameter_list|(
name|Query
name|query
parameter_list|,
name|Sort
name|sort
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Hits
argument_list|(
name|this
argument_list|,
name|query
argument_list|,
literal|null
argument_list|,
name|sort
argument_list|)
return|;
block|}
comment|/** Returns documents matching<code>query</code> and<code>filter</code>,    * sorted by<code>sort</code>.    * @throws BooleanQuery.TooManyClauses    */
DECL|method|search
specifier|public
name|Hits
name|search
parameter_list|(
name|Query
name|query
parameter_list|,
name|Filter
name|filter
parameter_list|,
name|Sort
name|sort
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Hits
argument_list|(
name|this
argument_list|,
name|query
argument_list|,
name|filter
argument_list|,
name|sort
argument_list|)
return|;
block|}
comment|/** Lower-level search API.    *    *<p>{@link HitCollector#collect(int,float)} is called for every non-zero    * scoring document.    *    *<p>Applications should only use this if they need<i>all</i> of the    * matching documents.  The high-level search API ({@link    * Searcher#search(Query)}) is usually more efficient, as it skips    * non-high-scoring hits.    *<p>Note: The<code>score</code> passed to this method is a raw score.    * In other words, the score will not necessarily be a float whose value is    * between 0 and 1.    * @throws BooleanQuery.TooManyClauses    */
DECL|method|search
specifier|public
name|void
name|search
parameter_list|(
name|Query
name|query
parameter_list|,
name|HitCollector
name|results
parameter_list|)
throws|throws
name|IOException
block|{
name|search
argument_list|(
name|query
argument_list|,
operator|(
name|Filter
operator|)
literal|null
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
comment|/** The Similarity implementation used by this searcher. */
DECL|field|similarity
specifier|private
name|Similarity
name|similarity
init|=
name|Similarity
operator|.
name|getDefault
argument_list|()
decl_stmt|;
comment|/** Expert: Set the Similarity implementation used by this Searcher.    *    * @see Similarity#setDefault(Similarity)    */
DECL|method|setSimilarity
specifier|public
name|void
name|setSimilarity
parameter_list|(
name|Similarity
name|similarity
parameter_list|)
block|{
name|this
operator|.
name|similarity
operator|=
name|similarity
expr_stmt|;
block|}
comment|/** Expert: Return the Similarity implementation used by this Searcher.    *    *<p>This defaults to the current value of {@link Similarity#getDefault()}.    */
DECL|method|getSimilarity
specifier|public
name|Similarity
name|getSimilarity
parameter_list|()
block|{
return|return
name|this
operator|.
name|similarity
return|;
block|}
comment|// inherit javadoc
DECL|method|docFreqs
specifier|public
name|int
index|[]
name|docFreqs
parameter_list|(
name|Term
index|[]
name|terms
parameter_list|)
throws|throws
name|IOException
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
name|terms
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|docFreq
argument_list|(
name|terms
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class
end_unit
