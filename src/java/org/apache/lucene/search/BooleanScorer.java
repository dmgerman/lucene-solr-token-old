begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_class
DECL|class|BooleanScorer
specifier|final
class|class
name|BooleanScorer
extends|extends
name|Scorer
block|{
DECL|field|scorers
specifier|private
name|SubScorer
name|scorers
init|=
literal|null
decl_stmt|;
DECL|field|bucketTable
specifier|private
name|BucketTable
name|bucketTable
init|=
operator|new
name|BucketTable
argument_list|(
name|this
argument_list|)
decl_stmt|;
DECL|field|maxCoord
specifier|private
name|int
name|maxCoord
init|=
literal|1
decl_stmt|;
DECL|field|coordFactors
specifier|private
name|float
index|[]
name|coordFactors
init|=
literal|null
decl_stmt|;
DECL|field|requiredMask
specifier|private
name|int
name|requiredMask
init|=
literal|0
decl_stmt|;
DECL|field|prohibitedMask
specifier|private
name|int
name|prohibitedMask
init|=
literal|0
decl_stmt|;
DECL|field|nextMask
specifier|private
name|int
name|nextMask
init|=
literal|1
decl_stmt|;
DECL|method|BooleanScorer
name|BooleanScorer
parameter_list|(
name|Similarity
name|similarity
parameter_list|)
block|{
name|super
argument_list|(
name|similarity
argument_list|)
expr_stmt|;
block|}
DECL|class|SubScorer
specifier|static
specifier|final
class|class
name|SubScorer
block|{
DECL|field|scorer
specifier|public
name|Scorer
name|scorer
decl_stmt|;
DECL|field|done
specifier|public
name|boolean
name|done
decl_stmt|;
DECL|field|required
specifier|public
name|boolean
name|required
init|=
literal|false
decl_stmt|;
DECL|field|prohibited
specifier|public
name|boolean
name|prohibited
init|=
literal|false
decl_stmt|;
DECL|field|collector
specifier|public
name|HitCollector
name|collector
decl_stmt|;
DECL|field|next
specifier|public
name|SubScorer
name|next
decl_stmt|;
DECL|method|SubScorer
specifier|public
name|SubScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|,
name|boolean
name|required
parameter_list|,
name|boolean
name|prohibited
parameter_list|,
name|HitCollector
name|collector
parameter_list|,
name|SubScorer
name|next
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
name|this
operator|.
name|done
operator|=
operator|!
name|scorer
operator|.
name|next
argument_list|()
expr_stmt|;
name|this
operator|.
name|required
operator|=
name|required
expr_stmt|;
name|this
operator|.
name|prohibited
operator|=
name|prohibited
expr_stmt|;
name|this
operator|.
name|collector
operator|=
name|collector
expr_stmt|;
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
block|}
block|}
DECL|method|add
specifier|final
name|void
name|add
parameter_list|(
name|Scorer
name|scorer
parameter_list|,
name|boolean
name|required
parameter_list|,
name|boolean
name|prohibited
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|mask
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|required
operator|||
name|prohibited
condition|)
block|{
if|if
condition|(
name|nextMask
operator|==
literal|0
condition|)
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"More than 32 required/prohibited clauses in query."
argument_list|)
throw|;
name|mask
operator|=
name|nextMask
expr_stmt|;
name|nextMask
operator|=
name|nextMask
operator|<<
literal|1
expr_stmt|;
block|}
else|else
name|mask
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|prohibited
condition|)
name|maxCoord
operator|++
expr_stmt|;
if|if
condition|(
name|prohibited
condition|)
name|prohibitedMask
operator||=
name|mask
expr_stmt|;
comment|// update prohibited mask
elseif|else
if|if
condition|(
name|required
condition|)
name|requiredMask
operator||=
name|mask
expr_stmt|;
comment|// update required mask
name|scorers
operator|=
operator|new
name|SubScorer
argument_list|(
name|scorer
argument_list|,
name|required
argument_list|,
name|prohibited
argument_list|,
name|bucketTable
operator|.
name|newCollector
argument_list|(
name|mask
argument_list|)
argument_list|,
name|scorers
argument_list|)
expr_stmt|;
block|}
DECL|method|computeCoordFactors
specifier|private
specifier|final
name|void
name|computeCoordFactors
parameter_list|()
block|{
name|coordFactors
operator|=
operator|new
name|float
index|[
name|maxCoord
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxCoord
condition|;
name|i
operator|++
control|)
name|coordFactors
index|[
name|i
index|]
operator|=
name|getSimilarity
argument_list|()
operator|.
name|coord
argument_list|(
name|i
argument_list|,
name|maxCoord
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|field|end
specifier|private
name|int
name|end
decl_stmt|;
DECL|field|current
specifier|private
name|Bucket
name|current
decl_stmt|;
DECL|method|doc
specifier|public
name|int
name|doc
parameter_list|()
block|{
return|return
name|current
operator|.
name|doc
return|;
block|}
DECL|method|next
specifier|public
name|boolean
name|next
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|more
decl_stmt|;
do|do
block|{
while|while
condition|(
name|bucketTable
operator|.
name|first
operator|!=
literal|null
condition|)
block|{
comment|// more queued
name|current
operator|=
name|bucketTable
operator|.
name|first
expr_stmt|;
name|bucketTable
operator|.
name|first
operator|=
name|current
operator|.
name|next
expr_stmt|;
comment|// pop the queue
comment|// check prohibited& required
if|if
condition|(
operator|(
name|current
operator|.
name|bits
operator|&
name|prohibitedMask
operator|)
operator|==
literal|0
operator|&&
operator|(
name|current
operator|.
name|bits
operator|&
name|requiredMask
operator|)
operator|==
name|requiredMask
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|// refill the queue
name|more
operator|=
literal|false
expr_stmt|;
name|end
operator|+=
name|BucketTable
operator|.
name|SIZE
expr_stmt|;
for|for
control|(
name|SubScorer
name|sub
init|=
name|scorers
init|;
name|sub
operator|!=
literal|null
condition|;
name|sub
operator|=
name|sub
operator|.
name|next
control|)
block|{
name|Scorer
name|scorer
init|=
name|sub
operator|.
name|scorer
decl_stmt|;
while|while
condition|(
operator|!
name|sub
operator|.
name|done
operator|&&
name|scorer
operator|.
name|doc
argument_list|()
operator|<
name|end
condition|)
block|{
name|sub
operator|.
name|collector
operator|.
name|collect
argument_list|(
name|scorer
operator|.
name|doc
argument_list|()
argument_list|,
name|scorer
operator|.
name|score
argument_list|()
argument_list|)
expr_stmt|;
name|sub
operator|.
name|done
operator|=
operator|!
name|scorer
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|sub
operator|.
name|done
condition|)
block|{
name|more
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|bucketTable
operator|.
name|first
operator|!=
literal|null
operator||
name|more
condition|)
do|;
return|return
literal|false
return|;
block|}
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
block|{
if|if
condition|(
name|coordFactors
operator|==
literal|null
condition|)
name|computeCoordFactors
argument_list|()
expr_stmt|;
return|return
name|current
operator|.
name|score
operator|*
name|coordFactors
index|[
name|current
operator|.
name|coord
index|]
return|;
block|}
DECL|class|Bucket
specifier|static
specifier|final
class|class
name|Bucket
block|{
DECL|field|doc
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
comment|// tells if bucket is valid
DECL|field|score
name|float
name|score
decl_stmt|;
comment|// incremental score
DECL|field|bits
name|int
name|bits
decl_stmt|;
comment|// used for bool constraints
DECL|field|coord
name|int
name|coord
decl_stmt|;
comment|// count of terms in score
DECL|field|next
name|Bucket
name|next
decl_stmt|;
comment|// next valid bucket
block|}
comment|/** A simple hash table of document scores within a range. */
DECL|class|BucketTable
specifier|static
specifier|final
class|class
name|BucketTable
block|{
DECL|field|SIZE
specifier|public
specifier|static
specifier|final
name|int
name|SIZE
init|=
literal|1
operator|<<
literal|10
decl_stmt|;
DECL|field|MASK
specifier|public
specifier|static
specifier|final
name|int
name|MASK
init|=
name|SIZE
operator|-
literal|1
decl_stmt|;
DECL|field|buckets
specifier|final
name|Bucket
index|[]
name|buckets
init|=
operator|new
name|Bucket
index|[
name|SIZE
index|]
decl_stmt|;
DECL|field|first
name|Bucket
name|first
init|=
literal|null
decl_stmt|;
comment|// head of valid list
DECL|field|scorer
specifier|private
name|BooleanScorer
name|scorer
decl_stmt|;
DECL|method|BucketTable
specifier|public
name|BucketTable
parameter_list|(
name|BooleanScorer
name|scorer
parameter_list|)
block|{
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
block|}
DECL|method|size
specifier|public
specifier|final
name|int
name|size
parameter_list|()
block|{
return|return
name|SIZE
return|;
block|}
DECL|method|newCollector
specifier|public
name|HitCollector
name|newCollector
parameter_list|(
name|int
name|mask
parameter_list|)
block|{
return|return
operator|new
name|Collector
argument_list|(
name|mask
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
DECL|class|Collector
specifier|static
specifier|final
class|class
name|Collector
extends|extends
name|HitCollector
block|{
DECL|field|bucketTable
specifier|private
name|BucketTable
name|bucketTable
decl_stmt|;
DECL|field|mask
specifier|private
name|int
name|mask
decl_stmt|;
DECL|method|Collector
specifier|public
name|Collector
parameter_list|(
name|int
name|mask
parameter_list|,
name|BucketTable
name|bucketTable
parameter_list|)
block|{
name|this
operator|.
name|mask
operator|=
name|mask
expr_stmt|;
name|this
operator|.
name|bucketTable
operator|=
name|bucketTable
expr_stmt|;
block|}
DECL|method|collect
specifier|public
specifier|final
name|void
name|collect
parameter_list|(
specifier|final
name|int
name|doc
parameter_list|,
specifier|final
name|float
name|score
parameter_list|)
block|{
specifier|final
name|BucketTable
name|table
init|=
name|bucketTable
decl_stmt|;
specifier|final
name|int
name|i
init|=
name|doc
operator|&
name|BucketTable
operator|.
name|MASK
decl_stmt|;
name|Bucket
name|bucket
init|=
name|table
operator|.
name|buckets
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|bucket
operator|==
literal|null
condition|)
name|table
operator|.
name|buckets
index|[
name|i
index|]
operator|=
name|bucket
operator|=
operator|new
name|Bucket
argument_list|()
expr_stmt|;
if|if
condition|(
name|bucket
operator|.
name|doc
operator|!=
name|doc
condition|)
block|{
comment|// invalid bucket
name|bucket
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
comment|// set doc
name|bucket
operator|.
name|score
operator|=
name|score
expr_stmt|;
comment|// initialize score
name|bucket
operator|.
name|bits
operator|=
name|mask
expr_stmt|;
comment|// initialize mask
name|bucket
operator|.
name|coord
operator|=
literal|1
expr_stmt|;
comment|// initialize coord
name|bucket
operator|.
name|next
operator|=
name|table
operator|.
name|first
expr_stmt|;
comment|// push onto valid list
name|table
operator|.
name|first
operator|=
name|bucket
expr_stmt|;
block|}
else|else
block|{
comment|// valid bucket
name|bucket
operator|.
name|score
operator|+=
name|score
expr_stmt|;
comment|// increment score
name|bucket
operator|.
name|bits
operator||=
name|mask
expr_stmt|;
comment|// add bits in mask
name|bucket
operator|.
name|coord
operator|++
expr_stmt|;
comment|// increment coord
block|}
block|}
block|}
DECL|method|skipTo
specifier|public
name|boolean
name|skipTo
parameter_list|(
name|int
name|target
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|explain
specifier|public
name|Explanation
name|explain
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"boolean("
argument_list|)
expr_stmt|;
for|for
control|(
name|SubScorer
name|sub
init|=
name|scorers
init|;
name|sub
operator|!=
literal|null
condition|;
name|sub
operator|=
name|sub
operator|.
name|next
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|sub
operator|.
name|scorer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class
end_unit
