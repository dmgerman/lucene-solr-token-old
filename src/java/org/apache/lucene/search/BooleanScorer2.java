begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Copyright 2005 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_comment
comment|/** An alternative to BooleanScorer.  *<br>Uses ConjunctionScorer, DisjunctionScorer, ReqOptScorer and ReqExclScorer.  *<br>Implements skipTo(), and has no limitations on the numbers of added scorers.  */
end_comment
begin_class
DECL|class|BooleanScorer2
specifier|public
class|class
name|BooleanScorer2
extends|extends
name|Scorer
block|{
DECL|field|requiredScorers
specifier|private
name|ArrayList
name|requiredScorers
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
DECL|field|optionalScorers
specifier|private
name|ArrayList
name|optionalScorers
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
DECL|field|prohibitedScorers
specifier|private
name|ArrayList
name|prohibitedScorers
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
DECL|class|Coordinator
specifier|private
class|class
name|Coordinator
block|{
DECL|field|maxCoord
name|int
name|maxCoord
init|=
literal|0
decl_stmt|;
comment|// to be increased for each non prohibited scorer
DECL|field|coordFactors
specifier|private
name|float
index|[]
name|coordFactors
init|=
literal|null
decl_stmt|;
DECL|method|init
name|void
name|init
parameter_list|()
block|{
comment|// use after all scorers have been added.
name|coordFactors
operator|=
operator|new
name|float
index|[
name|maxCoord
operator|+
literal|1
index|]
expr_stmt|;
name|Similarity
name|sim
init|=
name|getSimilarity
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|maxCoord
condition|;
name|i
operator|++
control|)
block|{
name|coordFactors
index|[
name|i
index|]
operator|=
name|sim
operator|.
name|coord
argument_list|(
name|i
argument_list|,
name|maxCoord
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|nrMatchers
name|int
name|nrMatchers
decl_stmt|;
comment|// to be increased by score() of match counting scorers.
DECL|method|initDoc
name|void
name|initDoc
parameter_list|()
block|{
name|nrMatchers
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|coordFactor
name|float
name|coordFactor
parameter_list|()
block|{
return|return
name|coordFactors
index|[
name|nrMatchers
index|]
return|;
block|}
block|}
DECL|field|coordinator
specifier|private
specifier|final
name|Coordinator
name|coordinator
decl_stmt|;
comment|/** The scorer to which all scoring will be delegated,    * except for computing and using the coordination factor.    */
DECL|field|countingSumScorer
specifier|private
name|Scorer
name|countingSumScorer
init|=
literal|null
decl_stmt|;
DECL|method|BooleanScorer2
specifier|public
name|BooleanScorer2
parameter_list|(
name|Similarity
name|similarity
parameter_list|)
block|{
name|super
argument_list|(
name|similarity
argument_list|)
expr_stmt|;
name|coordinator
operator|=
operator|new
name|Coordinator
argument_list|()
expr_stmt|;
block|}
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|Scorer
name|scorer
parameter_list|,
name|boolean
name|required
parameter_list|,
name|boolean
name|prohibited
parameter_list|)
block|{
if|if
condition|(
operator|!
name|prohibited
condition|)
block|{
name|coordinator
operator|.
name|maxCoord
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|required
condition|)
block|{
if|if
condition|(
name|prohibited
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"scorer cannot be required and prohibited"
argument_list|)
throw|;
block|}
name|requiredScorers
operator|.
name|add
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|prohibited
condition|)
block|{
name|prohibitedScorers
operator|.
name|add
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|optionalScorers
operator|.
name|add
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Initialize the match counting scorer that sums all the    * scores.<p>    * When "counting" is used in a name it means counting the number    * of matching scorers.<br>    * When "sum" is used in a name it means score value summing    * over the matching scorers    */
DECL|method|initCountingSumScorer
specifier|private
name|void
name|initCountingSumScorer
parameter_list|()
block|{
name|coordinator
operator|.
name|init
argument_list|()
expr_stmt|;
name|countingSumScorer
operator|=
name|makeCountingSumScorer
argument_list|()
expr_stmt|;
block|}
comment|/** Count a scorer as a single match. */
DECL|class|SingleMatchScorer
specifier|private
class|class
name|SingleMatchScorer
extends|extends
name|Scorer
block|{
DECL|field|scorer
specifier|private
name|Scorer
name|scorer
decl_stmt|;
DECL|method|SingleMatchScorer
name|SingleMatchScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{
name|super
argument_list|(
name|scorer
operator|.
name|getSimilarity
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
block|}
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
name|coordinator
operator|.
name|nrMatchers
operator|++
expr_stmt|;
return|return
name|scorer
operator|.
name|score
argument_list|()
return|;
block|}
DECL|method|doc
specifier|public
name|int
name|doc
parameter_list|()
block|{
return|return
name|scorer
operator|.
name|doc
argument_list|()
return|;
block|}
DECL|method|next
specifier|public
name|boolean
name|next
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|scorer
operator|.
name|next
argument_list|()
return|;
block|}
DECL|method|skipTo
specifier|public
name|boolean
name|skipTo
parameter_list|(
name|int
name|docNr
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|scorer
operator|.
name|skipTo
argument_list|(
name|docNr
argument_list|)
return|;
block|}
DECL|method|explain
specifier|public
name|Explanation
name|explain
parameter_list|(
name|int
name|docNr
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|scorer
operator|.
name|explain
argument_list|(
name|docNr
argument_list|)
return|;
block|}
block|}
DECL|method|countingDisjunctionSumScorer
specifier|private
name|Scorer
name|countingDisjunctionSumScorer
parameter_list|(
name|List
name|scorers
parameter_list|)
comment|// each scorer from the list counted as a single matcher
block|{
return|return
operator|new
name|DisjunctionSumScorer
argument_list|(
name|scorers
argument_list|)
block|{
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
name|coordinator
operator|.
name|nrMatchers
operator|+=
name|nrMatchers
expr_stmt|;
return|return
name|super
operator|.
name|score
argument_list|()
return|;
block|}
block|}
return|;
block|}
DECL|field|defaultSimilarity
specifier|private
specifier|static
name|Similarity
name|defaultSimilarity
init|=
operator|new
name|DefaultSimilarity
argument_list|()
decl_stmt|;
DECL|method|countingConjunctionSumScorer
specifier|private
name|Scorer
name|countingConjunctionSumScorer
parameter_list|(
name|List
name|requiredScorers
parameter_list|)
comment|// each scorer from the list counted as a single matcher
block|{
specifier|final
name|int
name|requiredNrMatchers
init|=
name|requiredScorers
operator|.
name|size
argument_list|()
decl_stmt|;
name|ConjunctionScorer
name|cs
init|=
operator|new
name|ConjunctionScorer
argument_list|(
name|defaultSimilarity
argument_list|)
block|{
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
name|coordinator
operator|.
name|nrMatchers
operator|+=
name|requiredNrMatchers
expr_stmt|;
comment|// All scorers match, so defaultSimilarity super.score() always has 1 as
comment|// the coordination factor.
comment|// Therefore the sum of the scores of the requiredScorers
comment|// is used as score.
return|return
name|super
operator|.
name|score
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|Iterator
name|rsi
init|=
name|requiredScorers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|rsi
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|cs
operator|.
name|add
argument_list|(
operator|(
name|Scorer
operator|)
name|rsi
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|cs
return|;
block|}
comment|/** Returns the scorer to be used for match counting and score summing.    * Uses requiredScorers, optionalScorers and prohibitedScorers.    */
DECL|method|makeCountingSumScorer
specifier|private
name|Scorer
name|makeCountingSumScorer
parameter_list|()
comment|// each scorer counted as a single matcher
block|{
if|if
condition|(
name|requiredScorers
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|optionalScorers
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|NonMatchingScorer
argument_list|()
return|;
comment|// only prohibited scorers
block|}
elseif|else
if|if
condition|(
name|optionalScorers
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|makeCountingSumScorer2
argument_list|(
comment|// the only optional scorer is required
operator|new
name|SingleMatchScorer
argument_list|(
operator|(
name|Scorer
operator|)
name|optionalScorers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|()
argument_list|)
return|;
comment|// no optional scorers left
block|}
else|else
block|{
comment|// more than 1 optionalScorers, no required scorers
return|return
name|makeCountingSumScorer2
argument_list|(
comment|// at least one optional scorer is required
name|countingDisjunctionSumScorer
argument_list|(
name|optionalScorers
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|()
argument_list|)
return|;
comment|// no optional scorers left
block|}
block|}
elseif|else
if|if
condition|(
name|requiredScorers
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// 1 required
return|return
name|makeCountingSumScorer2
argument_list|(
operator|new
name|SingleMatchScorer
argument_list|(
operator|(
name|Scorer
operator|)
name|requiredScorers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|optionalScorers
argument_list|)
return|;
block|}
else|else
block|{
comment|// more required scorers
return|return
name|makeCountingSumScorer2
argument_list|(
name|countingConjunctionSumScorer
argument_list|(
name|requiredScorers
argument_list|)
argument_list|,
name|optionalScorers
argument_list|)
return|;
block|}
block|}
comment|/** Returns the scorer to be used for match counting and score summing.    * Uses the arguments and prohibitedScorers.    * @param requiredCountingSumScorer A required scorer already built.    * @param optionalScorers A list of optional scorers, possibly empty.    */
DECL|method|makeCountingSumScorer2
specifier|private
name|Scorer
name|makeCountingSumScorer2
parameter_list|(
name|Scorer
name|requiredCountingSumScorer
parameter_list|,
name|List
name|optionalScorers
parameter_list|)
comment|// not match counting
block|{
if|if
condition|(
name|optionalScorers
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// no optional
if|if
condition|(
name|prohibitedScorers
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// no prohibited
return|return
name|requiredCountingSumScorer
return|;
block|}
elseif|else
if|if
condition|(
name|prohibitedScorers
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// no optional, 1 prohibited
return|return
operator|new
name|ReqExclScorer
argument_list|(
name|requiredCountingSumScorer
argument_list|,
operator|(
name|Scorer
operator|)
name|prohibitedScorers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
comment|// not match counting
block|}
else|else
block|{
comment|// no optional, more prohibited
return|return
operator|new
name|ReqExclScorer
argument_list|(
name|requiredCountingSumScorer
argument_list|,
operator|new
name|DisjunctionSumScorer
argument_list|(
name|prohibitedScorers
argument_list|)
argument_list|)
return|;
comment|// score unused. not match counting
block|}
block|}
elseif|else
if|if
condition|(
name|optionalScorers
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// 1 optional
return|return
name|makeCountingSumScorer3
argument_list|(
name|requiredCountingSumScorer
argument_list|,
operator|new
name|SingleMatchScorer
argument_list|(
operator|(
name|Scorer
operator|)
name|optionalScorers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
comment|// more optional
return|return
name|makeCountingSumScorer3
argument_list|(
name|requiredCountingSumScorer
argument_list|,
name|countingDisjunctionSumScorer
argument_list|(
name|optionalScorers
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/** Returns the scorer to be used for match counting and score summing.    * Uses the arguments and prohibitedScorers.    * @param requiredCountingSumScorer A required scorer already built.    * @param optionalCountingSumScorer An optional scorer already built.    */
DECL|method|makeCountingSumScorer3
specifier|private
name|Scorer
name|makeCountingSumScorer3
parameter_list|(
name|Scorer
name|requiredCountingSumScorer
parameter_list|,
name|Scorer
name|optionalCountingSumScorer
parameter_list|)
block|{
if|if
condition|(
name|prohibitedScorers
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// no prohibited
return|return
operator|new
name|ReqOptSumScorer
argument_list|(
name|requiredCountingSumScorer
argument_list|,
name|optionalCountingSumScorer
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|prohibitedScorers
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// 1 prohibited
return|return
operator|new
name|ReqOptSumScorer
argument_list|(
operator|new
name|ReqExclScorer
argument_list|(
name|requiredCountingSumScorer
argument_list|,
operator|(
name|Scorer
operator|)
name|prohibitedScorers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
comment|// not match counting
name|optionalCountingSumScorer
argument_list|)
return|;
block|}
else|else
block|{
comment|// more prohibited
return|return
operator|new
name|ReqOptSumScorer
argument_list|(
operator|new
name|ReqExclScorer
argument_list|(
name|requiredCountingSumScorer
argument_list|,
operator|new
name|DisjunctionSumScorer
argument_list|(
name|prohibitedScorers
argument_list|)
argument_list|)
argument_list|,
comment|// score unused. not match counting
name|optionalCountingSumScorer
argument_list|)
return|;
block|}
block|}
comment|/** Scores and collects all matching documents.    * @param hc The collector to which all matching documents are passed through    * {@link HitCollector#collect(int, float)}.    *<br>When this method is used the {@link #explain(int)} method should not be used.    */
DECL|method|score
specifier|public
name|void
name|score
parameter_list|(
name|HitCollector
name|hc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|countingSumScorer
operator|==
literal|null
condition|)
block|{
name|initCountingSumScorer
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|countingSumScorer
operator|.
name|next
argument_list|()
condition|)
block|{
name|hc
operator|.
name|collect
argument_list|(
name|countingSumScorer
operator|.
name|doc
argument_list|()
argument_list|,
name|score
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Expert: Collects matching documents in a range.    *<br>Note that {@link #next()} must be called once before this method is    * called for the first time.    * @param hc The collector to which all matching documents are passed through    * {@link HitCollector#collect(int, float)}.    * @param max Do not score documents past this.    * @return true if more matching documents may remain.    */
DECL|method|score
specifier|protected
name|boolean
name|score
parameter_list|(
name|HitCollector
name|hc
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|IOException
block|{
comment|// null pointer exception when next() was not called before:
name|int
name|docNr
init|=
name|countingSumScorer
operator|.
name|doc
argument_list|()
decl_stmt|;
while|while
condition|(
name|docNr
operator|<
name|max
condition|)
block|{
name|hc
operator|.
name|collect
argument_list|(
name|docNr
argument_list|,
name|score
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|countingSumScorer
operator|.
name|next
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|docNr
operator|=
name|countingSumScorer
operator|.
name|doc
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|doc
specifier|public
name|int
name|doc
parameter_list|()
block|{
return|return
name|countingSumScorer
operator|.
name|doc
argument_list|()
return|;
block|}
DECL|method|next
specifier|public
name|boolean
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|countingSumScorer
operator|==
literal|null
condition|)
block|{
name|initCountingSumScorer
argument_list|()
expr_stmt|;
block|}
return|return
name|countingSumScorer
operator|.
name|next
argument_list|()
return|;
block|}
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
name|coordinator
operator|.
name|initDoc
argument_list|()
expr_stmt|;
name|float
name|sum
init|=
name|countingSumScorer
operator|.
name|score
argument_list|()
decl_stmt|;
return|return
name|sum
operator|*
name|coordinator
operator|.
name|coordFactor
argument_list|()
return|;
block|}
DECL|method|skipTo
specifier|public
name|boolean
name|skipTo
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|countingSumScorer
operator|==
literal|null
condition|)
block|{
name|initCountingSumScorer
argument_list|()
expr_stmt|;
block|}
return|return
name|countingSumScorer
operator|.
name|skipTo
argument_list|(
name|target
argument_list|)
return|;
block|}
DECL|method|explain
specifier|public
name|Explanation
name|explain
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
comment|/* How to explain the coordination factor?     initCountingSumScorer();     return countingSumScorer.explain(doc); // misses coord factor.    */
block|}
block|}
end_class
end_unit
