begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermDocs
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * Expert: collects results from a search and sorts them by terms in a  * given field in each document.  *  *<p>In this version (0.1) the field to sort by must contain strictly  * String representations of Integers.  * See {@link SortedIndexSearcher SortedIndexSearcher} for more  * information.  Each document is assumed to have a single term in the  * given field, and the value of the term is the document's relative  * position in the given sort order.  *  *<p>When one of these objects is created, a TermEnumerator is  * created to fetch all the terms in the index for the given field.  * The value of each term is assumed to be an integer representing a  * sort position.  Each document is assumed to contain one of the  * terms, indicating where in the sort it belongs.  *  *<p><h3>Memory Usage</h3>  *  *<p>A static cache is maintained.  This cache contains an integer  * array of length<code>IndexReader.maxDoc()</code> for each field  * name for which a sort is performed.  In other words, the size of  * the cache in bytes is:  *  *<p><code>4 * IndexReader.maxDoc() * (# of different fields actually used to sort)</code>  *  *<p>Note that the size of the cache is not affected by how many  * fields are in the index and<i>might</i> be used to sort - only by  * the ones actually used to sort a result set.  *  *<p>The cache is cleared each time a new<code>IndexReader</code> is  * passed in, or if the value returned by<code>maxDoc()</code>  * changes for the current IndexReader.  This class is not set up to  * be able to efficiently sort hits from more than one index  * simultaneously.  *  *<p>Created: Dec 8, 2003 12:56:03 PM  *  * @author  "Tim Jones"&lt;tjluc@nacimiento.com&gt;  * @since   lucene 1.3  * @version 0.1  */
end_comment
begin_class
DECL|class|FieldSortedHitQueue
specifier|public
class|class
name|FieldSortedHitQueue
extends|extends
name|PriorityQueue
block|{
comment|/**      * Keeps track of the IndexReader which the cache      * applies to.  If it changes, the cache is cleared.      * We only store the hashcode so as not to mess up      * garbage collection by having a reference to an      * IndexReader.      */
DECL|field|lastReaderHash
specifier|protected
specifier|static
name|int
name|lastReaderHash
decl_stmt|;
comment|/**      * Contains the cache of sort information.  The      * key is field name, the value an array of int.      * A HashMap is used, and we are careful how we      * handle synchronization.  This is because best      * performance is obtained when the same IndexReader      * is used over and over, and we therefore perform      * many reads and few writes.      */
DECL|field|fieldCache
specifier|protected
specifier|static
name|HashMap
name|fieldCache
decl_stmt|;
comment|/** The sort information being used by this instance */
DECL|field|fieldOrder
specifier|protected
name|int
index|[]
name|fieldOrder
decl_stmt|;
comment|/**      * Creates a hit queue sorted by the given field.      * @param reader  IndexReader to use.      * @param integer_field  Field to sort by.      * @param size    Number of hits to return - see {@link PriorityQueue#initialize(int) initialize}      * @throws IOException  If the internal term enumerator fails.      */
DECL|method|FieldSortedHitQueue
specifier|public
name|FieldSortedHitQueue
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|integer_field
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|hash
init|=
name|reader
operator|.
name|hashCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|hash
operator|!=
name|lastReaderHash
condition|)
block|{
name|lastReaderHash
operator|=
name|hash
expr_stmt|;
if|if
condition|(
name|fieldCache
operator|!=
literal|null
condition|)
block|{
name|fieldCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|fieldCache
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
name|initialize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|initializeSort
argument_list|(
name|reader
argument_list|,
name|integer_field
argument_list|)
expr_stmt|;
block|}
comment|/**      * Compares documents based on the value of the term in the field      * being sorted by.  Documents which should appear at the top of the      * list should have low values in the term; documents which should      * appear at the end should have high values.      *      *<p>In the context of this method, "less than" means "less relevant",      * so documents at the top of the list are "greatest" and documents at      * the bottom are "least".      *      *<p>Document A is considered less than Document B      * if A.field.term> B.field.term or A.doc> B.doc.      *      * @param a  ScoreDoc object for document a.      * @param b  ScoreDoc object for document b.      * @return true if document a is less than document b.      * @see ScoreDoc      */
DECL|method|lessThan
specifier|protected
specifier|final
name|boolean
name|lessThan
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|)
block|{
name|ScoreDoc
name|hitA
init|=
operator|(
name|ScoreDoc
operator|)
name|a
decl_stmt|;
name|ScoreDoc
name|hitB
init|=
operator|(
name|ScoreDoc
operator|)
name|b
decl_stmt|;
name|int
name|scoreA
init|=
name|fieldOrder
index|[
name|hitA
operator|.
name|doc
index|]
decl_stmt|;
name|int
name|scoreB
init|=
name|fieldOrder
index|[
name|hitB
operator|.
name|doc
index|]
decl_stmt|;
if|if
condition|(
name|scoreA
operator|==
name|scoreB
condition|)
return|return
name|hitA
operator|.
name|doc
operator|>
name|hitB
operator|.
name|doc
return|;
else|else
return|return
name|scoreA
operator|>
name|scoreB
return|;
comment|// bigger is really less - the ones at the top should be the lowest
block|}
comment|/**      * Initializes the cache of sort information.<code>fieldCache</code> is queried      * to see if it has the term information for the given field.      * If so, and if the reader still has the same value for maxDoc()      * (note that we assume new IndexReaders are caught during the      * constructor), the existing data is used.  If not, all the term values      * for the given field are fetched.  The value of the term is assumed      * to be the sort index for any documents containing the term.  Documents      * should only have one term in the given field. Multiple documents      * can share the same term if desired (documents with the same term will      * be sorted relative to each other by the order they were placed in      * the index).      * @param reader  The document index.      * @param field   The field to sort by.      * @throws IOException  If the term enumerator fails.      */
DECL|method|initializeSort
specifier|protected
specifier|final
name|void
name|initializeSort
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|fieldOrder
operator|=
operator|(
name|int
index|[]
operator|)
name|fieldCache
operator|.
name|get
argument_list|(
name|field
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldOrder
operator|==
literal|null
operator|||
name|fieldOrder
operator|.
name|length
operator|!=
name|reader
operator|.
name|maxDoc
argument_list|()
condition|)
block|{
name|fieldOrder
operator|=
operator|new
name|int
index|[
name|reader
operator|.
name|maxDoc
argument_list|()
index|]
expr_stmt|;
name|TermEnum
name|enumerator
init|=
name|reader
operator|.
name|terms
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|TermDocs
name|termDocs
init|=
name|reader
operator|.
name|termDocs
argument_list|()
decl_stmt|;
if|if
condition|(
name|enumerator
operator|.
name|term
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no terms in field "
operator|+
name|field
argument_list|)
throw|;
block|}
try|try
block|{
name|Term
name|term
init|=
name|enumerator
operator|.
name|term
argument_list|()
decl_stmt|;
while|while
condition|(
name|term
operator|.
name|field
argument_list|()
operator|==
name|field
condition|)
block|{
name|termDocs
operator|.
name|seek
argument_list|(
name|term
argument_list|)
expr_stmt|;
if|if
condition|(
name|termDocs
operator|.
name|next
argument_list|()
condition|)
block|{
name|fieldOrder
index|[
name|termDocs
operator|.
name|doc
argument_list|()
index|]
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|term
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"termDocs.next() failed!"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|enumerator
operator|.
name|next
argument_list|()
condition|)
block|{
break|break;
block|}
name|term
operator|=
name|enumerator
operator|.
name|term
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|enumerator
operator|.
name|close
argument_list|()
expr_stmt|;
name|termDocs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// be careful how the cache is updated so we
comment|// don't have synchronization problems.  we do
comment|// it this way because we assume updates will be
comment|// few compared to the number of reads.
name|HashMap
name|newCache
init|=
operator|(
name|HashMap
operator|)
name|fieldCache
operator|.
name|clone
argument_list|()
decl_stmt|;
name|newCache
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|fieldOrder
argument_list|)
expr_stmt|;
name|fieldCache
operator|=
name|newCache
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
