begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import
begin_comment
comment|/**  * Expert: Base class for collecting results from a search and sorting  * them by terms in a given field in each document.  *  *<p>When one of these objects is created, a TermEnumerator is  * created to fetch all the terms in the index for the given field.  * The value of each term is assumed to represent a  * sort position.  Each document is assumed to contain one of the  * terms, indicating where in the sort it belongs.  *  *<p><h3>Memory Usage</h3>  *  *<p>A static cache is maintained.  This cache contains an integer  * or float array of length<code>IndexReader.maxDoc()</code> for each field  * name for which a sort is performed.  In other words, the size of the  * cache in bytes is:  *  *<p><code>4 * IndexReader.maxDoc() * (# of different fields actually used to sort)</code>  *  *<p>For String fields, the cache is larger: in addition to the  * above array, the value of every term in the field is kept in memory.  * If there are many unique terms in the field, this could   * be quite large.  *  *<p>Note that the size of the cache is not affected by how many  * fields are in the index and<i>might</i> be used to sort - only by  * the ones actually used to sort a result set.  *  *<p>The cache is cleared each time a new<code>IndexReader</code> is  * passed in, or if the value returned by<code>maxDoc()</code>  * changes for the current IndexReader.  This class is not set up to  * be able to efficiently sort hits from more than one index  * simultaneously.  *  *<p>Created: Dec 8, 2003 12:56:03 PM  *  * @author  Tim Jones (Nacimiento Software)  * @since   lucene 1.4  * @version $Id$  */
end_comment
begin_class
DECL|class|FieldSortedHitQueue
specifier|abstract
class|class
name|FieldSortedHitQueue
extends|extends
name|PriorityQueue
block|{
comment|/**      * Keeps track of the IndexReader which the cache      * applies to.  If it changes, the cache is cleared.      * We only store the hashcode so as not to mess up      * garbage collection by having a reference to an      * IndexReader.      */
DECL|field|lastReaderHash
specifier|protected
specifier|static
name|int
name|lastReaderHash
decl_stmt|;
comment|/** 	 * Contains the cache of sort information, mapping 	 * String (field names) to ScoreDocComparator. 	 */
DECL|field|fieldCache
specifier|protected
specifier|static
specifier|final
name|Hashtable
name|fieldCache
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
comment|/** The pattern used to detect integer values in a field */
comment|/** removed for java 1.3 compatibility 		protected static final Pattern pIntegers = Pattern.compile ("[0-9\\-]+"); 	**/
comment|/** The pattern used to detect float values in a field */
comment|/** removed for java 1.3 compatibility 		protected static final Object pFloats = Pattern.compile ("[0-9+\\-\\.eEfFdD]+"); 	**/
comment|/** 	 * Returns a comparator for the given field.  If there is already one in the cache, it is returned. 	 * Otherwise one is created and put into the cache.  If<code>reader</code> is different than the 	 * one used for the current cache, or has changed size, the cache is cleared first. 	 * @param reader  Index to use. 	 * @param field   Field to sort by. 	 * @return  Comparator; never<code>null</code>. 	 * @throws IOException  If an error occurs reading the index. 	 * @see #determineComparator 	 */
DECL|method|getCachedComparator
specifier|static
name|ScoreDocComparator
name|getCachedComparator
parameter_list|(
specifier|final
name|IndexReader
name|reader
parameter_list|,
specifier|final
name|String
name|field
parameter_list|,
specifier|final
name|int
name|type
parameter_list|,
specifier|final
name|SortComparatorSource
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|type
operator|==
name|SortField
operator|.
name|DOC
condition|)
return|return
name|ScoreDocComparator
operator|.
name|INDEXORDER
return|;
if|if
condition|(
name|type
operator|==
name|SortField
operator|.
name|SCORE
condition|)
return|return
name|ScoreDocComparator
operator|.
name|RELEVANCE
return|;
comment|// see if we have already generated a comparator for this field
if|if
condition|(
name|reader
operator|.
name|hashCode
argument_list|()
operator|==
name|lastReaderHash
condition|)
block|{
name|ScoreDocLookupComparator
name|comparer
init|=
operator|(
name|ScoreDocLookupComparator
operator|)
name|fieldCache
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|comparer
operator|!=
literal|null
operator|&&
name|comparer
operator|.
name|sizeMatches
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|comparer
return|;
block|}
block|}
else|else
block|{
name|lastReaderHash
operator|=
name|reader
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|fieldCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|ScoreDocComparator
name|comparer
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|SortField
operator|.
name|AUTO
case|:
name|comparer
operator|=
name|determineComparator
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
expr_stmt|;
break|break;
case|case
name|SortField
operator|.
name|STRING
case|:
name|comparer
operator|=
name|StringSortedHitQueue
operator|.
name|comparator
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
expr_stmt|;
break|break;
case|case
name|SortField
operator|.
name|INT
case|:
name|comparer
operator|=
name|IntegerSortedHitQueue
operator|.
name|comparator
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
expr_stmt|;
break|break;
case|case
name|SortField
operator|.
name|FLOAT
case|:
name|comparer
operator|=
name|FloatSortedHitQueue
operator|.
name|comparator
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
expr_stmt|;
break|break;
case|case
name|SortField
operator|.
name|CUSTOM
case|:
name|comparer
operator|=
name|factory
operator|.
name|newComparator
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"invalid sort field type: "
operator|+
name|type
argument_list|)
throw|;
block|}
comment|// store the comparator in the cache for reuse
name|fieldCache
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|comparer
argument_list|)
expr_stmt|;
return|return
name|comparer
return|;
block|}
comment|/** Clears the static cache of sorting information. */
DECL|method|clearCache
specifier|static
name|void
name|clearCache
parameter_list|()
block|{
name|fieldCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Returns a FieldSortedHitQueue sorted by the given ScoreDocComparator. 	 * @param comparator Comparator to use. 	 * @param size       Number of hits to retain. 	 * @return  Hit queue sorted using the given comparator. 	 */
DECL|method|getInstance
specifier|static
name|FieldSortedHitQueue
name|getInstance
parameter_list|(
name|ScoreDocComparator
name|comparator
parameter_list|,
name|int
name|size
parameter_list|)
block|{
return|return
operator|new
name|FieldSortedHitQueue
argument_list|(
name|comparator
argument_list|,
name|size
argument_list|)
block|{
comment|// dummy out the abstract method
specifier|protected
name|ScoreDocLookupComparator
name|createComparator
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
comment|/** 	 * Looks at the actual values in the field and determines whether 	 * they contain Integers, Floats or Strings.  Only the first term in the field 	 * is looked at. 	 *<p>The following patterns are used to determine the content of the terms: 	 *<p><table border="1" cellspacing="0" cellpadding="3"> 	 *<tr><th>Sequence</th><th>Pattern</th><th>Type</th></tr> 	 *<tr><td>1</td><td>[0-9\-]+</td><td>Integer</td></tr> 	 *<tr><td>2</td><td>[0-9+\-\.eEfFdD]+</td><td>Float</td></tr> 	 *<tr><td>3</td><td><i>(none - default)</i></td><td>String</td></tr> 	 *</table> 	 * 	 * @param reader  Index to use. 	 * @param field   Field to create comparator for. 	 * @return  Comparator appropriate for the terms in the given field. 	 * @throws IOException  If an error occurs reading the index. 	 */
DECL|method|determineComparator
specifier|protected
specifier|static
name|ScoreDocComparator
name|determineComparator
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|field
operator|=
name|field
operator|.
name|intern
argument_list|()
expr_stmt|;
name|TermEnum
name|enumerator
init|=
name|reader
operator|.
name|terms
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|Term
name|term
init|=
name|enumerator
operator|.
name|term
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no terms in field "
operator|+
name|field
operator|+
literal|" - cannot determine sort type"
argument_list|)
throw|;
block|}
if|if
condition|(
name|term
operator|.
name|field
argument_list|()
operator|==
name|field
condition|)
block|{
name|String
name|termtext
init|=
name|term
operator|.
name|text
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|/** 				 * Java 1.4 level code:  				if (pIntegers.matcher(termtext).matches()) 					return IntegerSortedHitQueue.comparator (reader, enumerator, field);  				else if (pFloats.matcher(termtext).matches()) 					return FloatSortedHitQueue.comparator (reader, enumerator, field); 				 */
comment|// Java 1.3 level code:
try|try
block|{
name|Integer
operator|.
name|parseInt
argument_list|(
name|termtext
argument_list|)
expr_stmt|;
return|return
name|IntegerSortedHitQueue
operator|.
name|comparator
argument_list|(
name|reader
argument_list|,
name|enumerator
argument_list|,
name|field
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
comment|// nothing
block|}
try|try
block|{
name|Float
operator|.
name|parseFloat
argument_list|(
name|termtext
argument_list|)
expr_stmt|;
return|return
name|FloatSortedHitQueue
operator|.
name|comparator
argument_list|(
name|reader
argument_list|,
name|enumerator
argument_list|,
name|field
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
comment|// nothing
block|}
return|return
name|StringSortedHitQueue
operator|.
name|comparator
argument_list|(
name|reader
argument_list|,
name|enumerator
argument_list|,
name|field
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"field \""
operator|+
name|field
operator|+
literal|"\" does not appear to be indexed"
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|enumerator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** 	 * The sorting priority used.  The first element is set by the constructors. 	 * The result is that sorting is done by field value, then by index order. 	 */
DECL|field|comparators
specifier|private
specifier|final
name|ScoreDocComparator
index|[]
name|comparators
init|=
operator|new
name|ScoreDocComparator
index|[]
block|{
literal|null
block|,
name|ScoreDocComparator
operator|.
name|INDEXORDER
block|}
decl_stmt|;
comment|/**      * Creates a hit queue sorted by the given field.  Hits are sorted by the field, then 	 * by index order.      * @param reader  IndexReader to use.      * @param field   Field to sort by.      * @param size    Number of hits to return - see {@link PriorityQueue#initialize(int) initialize}      * @throws IOException  If the internal term enumerator fails.      */
DECL|method|FieldSortedHitQueue
name|FieldSortedHitQueue
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
comment|// reset the cache if we have a new reader
name|int
name|hash
init|=
name|reader
operator|.
name|hashCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|hash
operator|!=
name|lastReaderHash
condition|)
block|{
name|lastReaderHash
operator|=
name|hash
expr_stmt|;
name|fieldCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// initialize the PriorityQueue
name|initialize
argument_list|(
name|size
argument_list|)
expr_stmt|;
comment|// set the sort
name|comparators
index|[
literal|0
index|]
operator|=
name|initializeSort
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Creates a sorted hit queue based on an existing comparator.  The hits 	 * are sorted by the given comparator, then by index order. 	 * @param comparator  Comparator used to sort hits. 	 * @param size        Number of hits to retain. 	 */
DECL|method|FieldSortedHitQueue
specifier|protected
name|FieldSortedHitQueue
parameter_list|(
name|ScoreDocComparator
name|comparator
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|initialize
argument_list|(
name|size
argument_list|)
expr_stmt|;
comment|// initialize the PriorityQueue
name|comparators
index|[
literal|0
index|]
operator|=
name|comparator
expr_stmt|;
comment|// set the sort
block|}
comment|/** 	 * Returns whether<code>a</code> is less relevant than<code>b</code> 	 * @param a ScoreDoc 	 * @param b ScoreDoc 	 * @return<code>true</code> if document<code>a</code> should be sorted after document<code>b</code>. 	 */
DECL|method|lessThan
specifier|protected
specifier|final
name|boolean
name|lessThan
parameter_list|(
specifier|final
name|Object
name|a
parameter_list|,
specifier|final
name|Object
name|b
parameter_list|)
block|{
specifier|final
name|ScoreDoc
name|docA
init|=
operator|(
name|ScoreDoc
operator|)
name|a
decl_stmt|;
specifier|final
name|ScoreDoc
name|docB
init|=
operator|(
name|ScoreDoc
operator|)
name|b
decl_stmt|;
specifier|final
name|int
name|n
init|=
name|comparators
operator|.
name|length
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
operator|&&
name|c
operator|==
literal|0
condition|;
operator|++
name|i
control|)
block|{
name|c
operator|=
name|comparators
index|[
name|i
index|]
operator|.
name|compare
argument_list|(
name|docA
argument_list|,
name|docB
argument_list|)
expr_stmt|;
block|}
return|return
name|c
operator|>
literal|0
return|;
block|}
comment|/**      * Initializes the cache of sort information.<code>fieldCache</code> is queried      * to see if it has the term information for the given field.      * If so, and if the reader still has the same value for maxDoc()      * (note that we assume new IndexReaders are caught during the      * constructor), the existing data is used.  If not, all the term values      * for the given field are fetched.  The value of the term is assumed      * to indicate the sort order for any documents containing the term.  Documents      * should only have one term in the given field.  Multiple documents      * can share the same term if desired, in which case they will be 	 * considered equal during the sort.      * @param reader  The document index.      * @param field   The field to sort by.      * @throws IOException  If createComparator(IndexReader,String) fails - usually caused by the term enumerator failing.      */
DECL|method|initializeSort
specifier|protected
specifier|final
name|ScoreDocComparator
name|initializeSort
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|ScoreDocLookupComparator
name|comparer
init|=
operator|(
name|ScoreDocLookupComparator
operator|)
name|fieldCache
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|comparer
operator|==
literal|null
operator|||
operator|!
name|comparer
operator|.
name|sizeMatches
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
condition|)
block|{
name|comparer
operator|=
name|createComparator
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|fieldCache
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|comparer
argument_list|)
expr_stmt|;
block|}
return|return
name|comparer
return|;
block|}
comment|/** 	 * Subclasses should implement this method to provide an appropriate ScoreDocLookupComparator. 	 * @param reader  Index to use. 	 * @param field   Field to use for sorting. 	 * @return Comparator to use to sort hits. 	 * @throws IOException  If an error occurs reading the index. 	 */
DECL|method|createComparator
specifier|protected
specifier|abstract
name|ScoreDocLookupComparator
name|createComparator
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_class
end_unit
