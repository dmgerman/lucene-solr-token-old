begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Copyright 2005 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/** Expert: Delegating scoring implementation.  Useful in {@link  * Query#getSimilarity(Searcher) implementations, to override only certain  * methods of a Searcher's Similiarty implementation.. */
end_comment
begin_class
DECL|class|SimilarityDelegator
specifier|public
class|class
name|SimilarityDelegator
extends|extends
name|Similarity
block|{
DECL|field|delegee
specifier|private
name|Similarity
name|delegee
decl_stmt|;
comment|/** Construct a {@link Similiarity} that delegates all methods to another.    *    * @param delegee the Similarity implementation to delegate to    */
DECL|method|SimilarityDelegator
specifier|public
name|SimilarityDelegator
parameter_list|(
name|Similarity
name|delegee
parameter_list|)
block|{
name|this
operator|.
name|delegee
operator|=
name|delegee
expr_stmt|;
block|}
DECL|method|lengthNorm
specifier|public
name|float
name|lengthNorm
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|int
name|numTerms
parameter_list|)
block|{
return|return
name|delegee
operator|.
name|lengthNorm
argument_list|(
name|fieldName
argument_list|,
name|numTerms
argument_list|)
return|;
block|}
DECL|method|queryNorm
specifier|public
name|float
name|queryNorm
parameter_list|(
name|float
name|sumOfSquaredWeights
parameter_list|)
block|{
return|return
name|delegee
operator|.
name|queryNorm
argument_list|(
name|sumOfSquaredWeights
argument_list|)
return|;
block|}
DECL|method|tf
specifier|public
name|float
name|tf
parameter_list|(
name|float
name|freq
parameter_list|)
block|{
return|return
name|delegee
operator|.
name|tf
argument_list|(
name|freq
argument_list|)
return|;
block|}
DECL|method|sloppyFreq
specifier|public
name|float
name|sloppyFreq
parameter_list|(
name|int
name|distance
parameter_list|)
block|{
return|return
name|delegee
operator|.
name|sloppyFreq
argument_list|(
name|distance
argument_list|)
return|;
block|}
DECL|method|idf
specifier|public
name|float
name|idf
parameter_list|(
name|int
name|docFreq
parameter_list|,
name|int
name|numDocs
parameter_list|)
block|{
return|return
name|delegee
operator|.
name|idf
argument_list|(
name|docFreq
argument_list|,
name|numDocs
argument_list|)
return|;
block|}
DECL|method|coord
specifier|public
name|float
name|coord
parameter_list|(
name|int
name|overlap
parameter_list|,
name|int
name|maxOverlap
parameter_list|)
block|{
return|return
name|delegee
operator|.
name|coord
argument_list|(
name|overlap
argument_list|,
name|maxOverlap
argument_list|)
return|;
block|}
block|}
end_class
end_unit
