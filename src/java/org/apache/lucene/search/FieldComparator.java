begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|Collator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldCache
operator|.
name|DoubleParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldCache
operator|.
name|LongParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldCache
operator|.
name|ByteParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldCache
operator|.
name|FloatParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldCache
operator|.
name|IntParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldCache
operator|.
name|ShortParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldCache
operator|.
name|StringIndex
import|;
end_import
begin_comment
comment|/**  * Expert: a FieldComparator compares hits so as to determine their  * sort order when collecting the top results with {@link  * TopFieldCollector}.  The concrete public FieldComparator  * classes here correspond to the SortField types.  *  *<p>This API is designed to achieve high performance  * sorting, by exposing a tight interaction with {@link  * FieldValueHitQueue} as it visits hits.  Whenever a hit is  * competitive, it's enrolled into a virtual slot, which is  * an int ranging from 0 to numHits-1.  The {@link  * FieldComparator} is made aware of segment transitions  * during searching in case any internal state it's tracking  * needs to be recomputed during these transitions.</p>  *  *<p>A comparator must define these functions:</p>  *  *<ul>  *  *<li> {@link #compare} Compare a hit at 'slot a'  *       with hit 'slot b'.  *  *<li> {@link #setBottom} This method is called by  *       {@link FieldValueHitQueue} to notify the  *       FieldComparator of the current weakest ("bottom")  *       slot.  Note that this slot may not hold the weakest  *       value according to your comparator, in cases where  *       your comparator is not the primary one (ie, is only  *       used to break ties from the comparators before it).  *  *<li> {@link #compareBottom} Compare a new hit (docID)  *       against the "weakest" (bottom) entry in the queue.  *  *<li> {@link #copy} Installs a new hit into the  *       priority queue.  The {@link FieldValueHitQueue}  *       calls this method when a new hit is competitive.  *  *<li> {@link #setNextReader} Invoked  *       when the search is switching to the next segment.  *       You may need to update internal state of the  *       comparator, for example retrieving new values from  *       the {@link FieldCache}.  *  *<li> {@link #value} Return the sort value stored in  *       the specified slot.  This is only called at the end  *       of the search, in order to populate {@link  *       FieldDoc#fields} when returning the top results.  *</ul>  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|FieldComparator
specifier|public
specifier|abstract
class|class
name|FieldComparator
block|{
comment|/**    * Compare hit at slot1 with hit at slot2.    *     * @param slot1 first slot to compare    * @param slot2 second slot to compare    * @return any N< 0 if slot2's value is sorted after    * slot1, any N> 0 if the slot2's value is sorted before    * slot1 and 0 if they are equal    */
DECL|method|compare
specifier|public
specifier|abstract
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
function_decl|;
comment|/**    * Set the bottom slot, ie the "weakest" (sorted last)    * entry in the queue.  When {@link #compareBottom} is    * called, you should compare against this slot.  This    * will always be called before {@link #compareBottom}.    *     * @param slot the currently weakest (sorted last) slot in the queue    */
DECL|method|setBottom
specifier|public
specifier|abstract
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|slot
parameter_list|)
function_decl|;
comment|/**    * Compare the bottom of the queue with doc.  This will    * only invoked after setBottom has been called.  This    * should return the same result as {@link    * #compare(int,int)}} as if bottom were slot1 and the new    * document were slot 2.    *        *<p>For a search that hits many results, this method    * will be the hotspot (invoked by far the most    * frequently).</p>    *     * @param doc that was hit    * @return any N< 0 if the doc's value is sorted after    * the bottom entry (not competitive), any N> 0 if the    * doc's value is sorted before the bottom entry and 0 if    * they are equal.    */
DECL|method|compareBottom
specifier|public
specifier|abstract
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * This method is called when a new hit is competitive.    * You should copy any state associated with this document    * that will be required for future comparisons, into the    * specified slot.    *     * @param slot which slot to copy the hit to    * @param doc docID relative to current reader    */
DECL|method|copy
specifier|public
specifier|abstract
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Set a new Reader. All doc correspond to the current Reader.    *     * @param reader current reader    * @param docBase docBase of this reader     * @throws IOException    * @throws IOException    */
DECL|method|setNextReader
specifier|public
specifier|abstract
name|void
name|setNextReader
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|int
name|docBase
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Sets the Scorer to use in case a document's score is    *  needed.    *     * @param scorer Scorer instance that you should use to    * obtain the current hit's score, if necessary. */
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{
comment|// Empty implementation since most comparators don't need the score. This
comment|// can be overridden by those that need it.
block|}
comment|/**    * Return the actual value in the slot.    *    * @param slot the value    * @return value in this slot upgraded to Comparable    */
DECL|method|value
specifier|public
specifier|abstract
name|Comparable
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
function_decl|;
comment|/** Parses field's values as byte (using {@link    *  FieldCache#getBytes} and sorts by ascending value */
DECL|class|ByteComparator
specifier|public
specifier|static
specifier|final
class|class
name|ByteComparator
extends|extends
name|FieldComparator
block|{
DECL|field|values
specifier|private
specifier|final
name|byte
index|[]
name|values
decl_stmt|;
DECL|field|currentReaderValues
specifier|private
name|byte
index|[]
name|currentReaderValues
decl_stmt|;
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|parser
specifier|private
name|ByteParser
name|parser
decl_stmt|;
DECL|field|bottom
specifier|private
name|byte
name|bottom
decl_stmt|;
DECL|method|ByteComparator
name|ByteComparator
parameter_list|(
name|int
name|numHits
parameter_list|,
name|String
name|field
parameter_list|,
name|FieldCache
operator|.
name|Parser
name|parser
parameter_list|)
block|{
name|values
operator|=
operator|new
name|byte
index|[
name|numHits
index|]
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|parser
operator|=
operator|(
name|ByteParser
operator|)
name|parser
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
return|return
name|values
index|[
name|slot1
index|]
operator|-
name|values
index|[
name|slot2
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|bottom
operator|-
name|currentReaderValues
index|[
name|doc
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|values
index|[
name|slot
index|]
operator|=
name|currentReaderValues
index|[
name|doc
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|int
name|docBase
parameter_list|)
throws|throws
name|IOException
block|{
name|currentReaderValues
operator|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getBytes
argument_list|(
name|reader
argument_list|,
name|field
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|this
operator|.
name|bottom
operator|=
name|values
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Comparable
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|Byte
operator|.
name|valueOf
argument_list|(
name|values
index|[
name|slot
index|]
argument_list|)
return|;
block|}
block|}
comment|/** Sorts by ascending docID */
DECL|class|DocComparator
specifier|public
specifier|static
specifier|final
class|class
name|DocComparator
extends|extends
name|FieldComparator
block|{
DECL|field|docIDs
specifier|private
specifier|final
name|int
index|[]
name|docIDs
decl_stmt|;
DECL|field|docBase
specifier|private
name|int
name|docBase
decl_stmt|;
DECL|field|bottom
specifier|private
name|int
name|bottom
decl_stmt|;
DECL|method|DocComparator
name|DocComparator
parameter_list|(
name|int
name|numHits
parameter_list|)
block|{
name|docIDs
operator|=
operator|new
name|int
index|[
name|numHits
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
comment|// No overflow risk because docIDs are non-negative
return|return
name|docIDs
index|[
name|slot1
index|]
operator|-
name|docIDs
index|[
name|slot2
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
comment|// No overflow risk because docIDs are non-negative
return|return
name|bottom
operator|-
operator|(
name|docBase
operator|+
name|doc
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|docIDs
index|[
name|slot
index|]
operator|=
name|docBase
operator|+
name|doc
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|int
name|docBase
parameter_list|)
block|{
comment|// TODO: can we "map" our docIDs to the current
comment|// reader? saves having to then subtract on every
comment|// compare call
name|this
operator|.
name|docBase
operator|=
name|docBase
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|this
operator|.
name|bottom
operator|=
name|docIDs
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Comparable
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|docIDs
index|[
name|slot
index|]
argument_list|)
return|;
block|}
block|}
comment|/** Parses field's values as double (using {@link    *  FieldCache#getDoubles} and sorts by ascending value */
DECL|class|DoubleComparator
specifier|public
specifier|static
specifier|final
class|class
name|DoubleComparator
extends|extends
name|FieldComparator
block|{
DECL|field|values
specifier|private
specifier|final
name|double
index|[]
name|values
decl_stmt|;
DECL|field|currentReaderValues
specifier|private
name|double
index|[]
name|currentReaderValues
decl_stmt|;
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|parser
specifier|private
name|DoubleParser
name|parser
decl_stmt|;
DECL|field|bottom
specifier|private
name|double
name|bottom
decl_stmt|;
DECL|method|DoubleComparator
name|DoubleComparator
parameter_list|(
name|int
name|numHits
parameter_list|,
name|String
name|field
parameter_list|,
name|FieldCache
operator|.
name|Parser
name|parser
parameter_list|)
block|{
name|values
operator|=
operator|new
name|double
index|[
name|numHits
index|]
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|parser
operator|=
operator|(
name|DoubleParser
operator|)
name|parser
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
specifier|final
name|double
name|v1
init|=
name|values
index|[
name|slot1
index|]
decl_stmt|;
specifier|final
name|double
name|v2
init|=
name|values
index|[
name|slot2
index|]
decl_stmt|;
if|if
condition|(
name|v1
operator|>
name|v2
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|v1
operator|<
name|v2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
specifier|final
name|double
name|v2
init|=
name|currentReaderValues
index|[
name|doc
index|]
decl_stmt|;
if|if
condition|(
name|bottom
operator|>
name|v2
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|bottom
operator|<
name|v2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|values
index|[
name|slot
index|]
operator|=
name|currentReaderValues
index|[
name|doc
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|int
name|docBase
parameter_list|)
throws|throws
name|IOException
block|{
name|currentReaderValues
operator|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getDoubles
argument_list|(
name|reader
argument_list|,
name|field
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|this
operator|.
name|bottom
operator|=
name|values
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Comparable
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|Double
operator|.
name|valueOf
argument_list|(
name|values
index|[
name|slot
index|]
argument_list|)
return|;
block|}
block|}
comment|/** Parses field's values as float (using {@link    *  FieldCache#getFloats} and sorts by ascending value */
DECL|class|FloatComparator
specifier|public
specifier|static
specifier|final
class|class
name|FloatComparator
extends|extends
name|FieldComparator
block|{
DECL|field|values
specifier|private
specifier|final
name|float
index|[]
name|values
decl_stmt|;
DECL|field|currentReaderValues
specifier|private
name|float
index|[]
name|currentReaderValues
decl_stmt|;
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|parser
specifier|private
name|FloatParser
name|parser
decl_stmt|;
DECL|field|bottom
specifier|private
name|float
name|bottom
decl_stmt|;
DECL|method|FloatComparator
name|FloatComparator
parameter_list|(
name|int
name|numHits
parameter_list|,
name|String
name|field
parameter_list|,
name|FieldCache
operator|.
name|Parser
name|parser
parameter_list|)
block|{
name|values
operator|=
operator|new
name|float
index|[
name|numHits
index|]
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|parser
operator|=
operator|(
name|FloatParser
operator|)
name|parser
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
comment|// TODO: are there sneaky non-branch ways to compute
comment|// sign of float?
specifier|final
name|float
name|v1
init|=
name|values
index|[
name|slot1
index|]
decl_stmt|;
specifier|final
name|float
name|v2
init|=
name|values
index|[
name|slot2
index|]
decl_stmt|;
if|if
condition|(
name|v1
operator|>
name|v2
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|v1
operator|<
name|v2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
comment|// TODO: are there sneaky non-branch ways to compute
comment|// sign of float?
specifier|final
name|float
name|v2
init|=
name|currentReaderValues
index|[
name|doc
index|]
decl_stmt|;
if|if
condition|(
name|bottom
operator|>
name|v2
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|bottom
operator|<
name|v2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|values
index|[
name|slot
index|]
operator|=
name|currentReaderValues
index|[
name|doc
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|int
name|docBase
parameter_list|)
throws|throws
name|IOException
block|{
name|currentReaderValues
operator|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getFloats
argument_list|(
name|reader
argument_list|,
name|field
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|this
operator|.
name|bottom
operator|=
name|values
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Comparable
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|Float
operator|.
name|valueOf
argument_list|(
name|values
index|[
name|slot
index|]
argument_list|)
return|;
block|}
block|}
comment|/** Parses field's values as int (using {@link    *  FieldCache#getInts} and sorts by ascending value */
DECL|class|IntComparator
specifier|public
specifier|static
specifier|final
class|class
name|IntComparator
extends|extends
name|FieldComparator
block|{
DECL|field|values
specifier|private
specifier|final
name|int
index|[]
name|values
decl_stmt|;
DECL|field|currentReaderValues
specifier|private
name|int
index|[]
name|currentReaderValues
decl_stmt|;
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|parser
specifier|private
name|IntParser
name|parser
decl_stmt|;
DECL|field|bottom
specifier|private
name|int
name|bottom
decl_stmt|;
comment|// Value of bottom of queue
DECL|method|IntComparator
name|IntComparator
parameter_list|(
name|int
name|numHits
parameter_list|,
name|String
name|field
parameter_list|,
name|FieldCache
operator|.
name|Parser
name|parser
parameter_list|)
block|{
name|values
operator|=
operator|new
name|int
index|[
name|numHits
index|]
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|parser
operator|=
operator|(
name|IntParser
operator|)
name|parser
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
comment|// TODO: there are sneaky non-branch ways to compute
comment|// -1/+1/0 sign
comment|// Cannot return values[slot1] - values[slot2] because that
comment|// may overflow
specifier|final
name|int
name|v1
init|=
name|values
index|[
name|slot1
index|]
decl_stmt|;
specifier|final
name|int
name|v2
init|=
name|values
index|[
name|slot2
index|]
decl_stmt|;
if|if
condition|(
name|v1
operator|>
name|v2
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|v1
operator|<
name|v2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
comment|// TODO: there are sneaky non-branch ways to compute
comment|// -1/+1/0 sign
comment|// Cannot return bottom - values[slot2] because that
comment|// may overflow
specifier|final
name|int
name|v2
init|=
name|currentReaderValues
index|[
name|doc
index|]
decl_stmt|;
if|if
condition|(
name|bottom
operator|>
name|v2
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|bottom
operator|<
name|v2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|values
index|[
name|slot
index|]
operator|=
name|currentReaderValues
index|[
name|doc
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|int
name|docBase
parameter_list|)
throws|throws
name|IOException
block|{
name|currentReaderValues
operator|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getInts
argument_list|(
name|reader
argument_list|,
name|field
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|this
operator|.
name|bottom
operator|=
name|values
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Comparable
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|values
index|[
name|slot
index|]
argument_list|)
return|;
block|}
block|}
comment|/** Parses field's values as long (using {@link    *  FieldCache#getLongs} and sorts by ascending value */
DECL|class|LongComparator
specifier|public
specifier|static
specifier|final
class|class
name|LongComparator
extends|extends
name|FieldComparator
block|{
DECL|field|values
specifier|private
specifier|final
name|long
index|[]
name|values
decl_stmt|;
DECL|field|currentReaderValues
specifier|private
name|long
index|[]
name|currentReaderValues
decl_stmt|;
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|parser
specifier|private
name|LongParser
name|parser
decl_stmt|;
DECL|field|bottom
specifier|private
name|long
name|bottom
decl_stmt|;
DECL|method|LongComparator
name|LongComparator
parameter_list|(
name|int
name|numHits
parameter_list|,
name|String
name|field
parameter_list|,
name|FieldCache
operator|.
name|Parser
name|parser
parameter_list|)
block|{
name|values
operator|=
operator|new
name|long
index|[
name|numHits
index|]
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|parser
operator|=
operator|(
name|LongParser
operator|)
name|parser
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
comment|// TODO: there are sneaky non-branch ways to compute
comment|// -1/+1/0 sign
specifier|final
name|long
name|v1
init|=
name|values
index|[
name|slot1
index|]
decl_stmt|;
specifier|final
name|long
name|v2
init|=
name|values
index|[
name|slot2
index|]
decl_stmt|;
if|if
condition|(
name|v1
operator|>
name|v2
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|v1
operator|<
name|v2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
comment|// TODO: there are sneaky non-branch ways to compute
comment|// -1/+1/0 sign
specifier|final
name|long
name|v2
init|=
name|currentReaderValues
index|[
name|doc
index|]
decl_stmt|;
if|if
condition|(
name|bottom
operator|>
name|v2
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|bottom
operator|<
name|v2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|values
index|[
name|slot
index|]
operator|=
name|currentReaderValues
index|[
name|doc
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|int
name|docBase
parameter_list|)
throws|throws
name|IOException
block|{
name|currentReaderValues
operator|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getLongs
argument_list|(
name|reader
argument_list|,
name|field
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|this
operator|.
name|bottom
operator|=
name|values
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Comparable
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|values
index|[
name|slot
index|]
argument_list|)
return|;
block|}
block|}
comment|/** Sorts by descending relevance.  NOTE: if you are    *  sorting only by descending relevance and then    *  secondarily by ascending docID, performance is faster    *  using {@link TopScoreDocCollector} directly (which {@link    *  IndexSearcher#search} uses when no {@link Sort} is    *  specified). */
DECL|class|RelevanceComparator
specifier|public
specifier|static
specifier|final
class|class
name|RelevanceComparator
extends|extends
name|FieldComparator
block|{
DECL|field|scores
specifier|private
specifier|final
name|float
index|[]
name|scores
decl_stmt|;
DECL|field|bottom
specifier|private
name|float
name|bottom
decl_stmt|;
DECL|field|scorer
specifier|private
name|Scorer
name|scorer
decl_stmt|;
DECL|method|RelevanceComparator
name|RelevanceComparator
parameter_list|(
name|int
name|numHits
parameter_list|)
block|{
name|scores
operator|=
operator|new
name|float
index|[
name|numHits
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
specifier|final
name|float
name|score1
init|=
name|scores
index|[
name|slot1
index|]
decl_stmt|;
specifier|final
name|float
name|score2
init|=
name|scores
index|[
name|slot2
index|]
decl_stmt|;
return|return
name|score1
operator|>
name|score2
condition|?
operator|-
literal|1
else|:
operator|(
name|score1
operator|<
name|score2
condition|?
literal|1
else|:
literal|0
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|float
name|score
init|=
name|scorer
operator|.
name|score
argument_list|()
decl_stmt|;
return|return
name|bottom
operator|>
name|score
condition|?
operator|-
literal|1
else|:
operator|(
name|bottom
operator|<
name|score
condition|?
literal|1
else|:
literal|0
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|scores
index|[
name|slot
index|]
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|int
name|docBase
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|this
operator|.
name|bottom
operator|=
name|scores
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{
comment|// wrap with a ScoreCachingWrappingScorer so that successive calls to
comment|// score() will not incur score computation over and over again.
name|this
operator|.
name|scorer
operator|=
operator|new
name|ScoreCachingWrappingScorer
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Comparable
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|Float
operator|.
name|valueOf
argument_list|(
name|scores
index|[
name|slot
index|]
argument_list|)
return|;
block|}
block|}
comment|/** Parses field's values as short (using {@link    *  FieldCache#getShorts} and sorts by ascending value */
DECL|class|ShortComparator
specifier|public
specifier|static
specifier|final
class|class
name|ShortComparator
extends|extends
name|FieldComparator
block|{
DECL|field|values
specifier|private
specifier|final
name|short
index|[]
name|values
decl_stmt|;
DECL|field|currentReaderValues
specifier|private
name|short
index|[]
name|currentReaderValues
decl_stmt|;
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|parser
specifier|private
name|ShortParser
name|parser
decl_stmt|;
DECL|field|bottom
specifier|private
name|short
name|bottom
decl_stmt|;
DECL|method|ShortComparator
name|ShortComparator
parameter_list|(
name|int
name|numHits
parameter_list|,
name|String
name|field
parameter_list|,
name|FieldCache
operator|.
name|Parser
name|parser
parameter_list|)
block|{
name|values
operator|=
operator|new
name|short
index|[
name|numHits
index|]
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|parser
operator|=
operator|(
name|ShortParser
operator|)
name|parser
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
return|return
name|values
index|[
name|slot1
index|]
operator|-
name|values
index|[
name|slot2
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|bottom
operator|-
name|currentReaderValues
index|[
name|doc
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|values
index|[
name|slot
index|]
operator|=
name|currentReaderValues
index|[
name|doc
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|int
name|docBase
parameter_list|)
throws|throws
name|IOException
block|{
name|currentReaderValues
operator|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getShorts
argument_list|(
name|reader
argument_list|,
name|field
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|this
operator|.
name|bottom
operator|=
name|values
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Comparable
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|Short
operator|.
name|valueOf
argument_list|(
name|values
index|[
name|slot
index|]
argument_list|)
return|;
block|}
block|}
comment|/** Sorts by a field's value using the Collator for a    *  given Locale.*/
DECL|class|StringComparatorLocale
specifier|public
specifier|static
specifier|final
class|class
name|StringComparatorLocale
extends|extends
name|FieldComparator
block|{
DECL|field|values
specifier|private
specifier|final
name|String
index|[]
name|values
decl_stmt|;
DECL|field|currentReaderValues
specifier|private
name|String
index|[]
name|currentReaderValues
decl_stmt|;
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|collator
specifier|final
name|Collator
name|collator
decl_stmt|;
DECL|field|bottom
specifier|private
name|String
name|bottom
decl_stmt|;
DECL|method|StringComparatorLocale
name|StringComparatorLocale
parameter_list|(
name|int
name|numHits
parameter_list|,
name|String
name|field
parameter_list|,
name|Locale
name|locale
parameter_list|)
block|{
name|values
operator|=
operator|new
name|String
index|[
name|numHits
index|]
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|collator
operator|=
name|Collator
operator|.
name|getInstance
argument_list|(
name|locale
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
specifier|final
name|String
name|val1
init|=
name|values
index|[
name|slot1
index|]
decl_stmt|;
specifier|final
name|String
name|val2
init|=
name|values
index|[
name|slot2
index|]
decl_stmt|;
if|if
condition|(
name|val1
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
name|collator
operator|.
name|compare
argument_list|(
name|val1
argument_list|,
name|val2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
specifier|final
name|String
name|val2
init|=
name|currentReaderValues
index|[
name|doc
index|]
decl_stmt|;
if|if
condition|(
name|bottom
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
name|collator
operator|.
name|compare
argument_list|(
name|bottom
argument_list|,
name|val2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|values
index|[
name|slot
index|]
operator|=
name|currentReaderValues
index|[
name|doc
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|int
name|docBase
parameter_list|)
throws|throws
name|IOException
block|{
name|currentReaderValues
operator|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getStrings
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|this
operator|.
name|bottom
operator|=
name|values
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Comparable
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|values
index|[
name|slot
index|]
return|;
block|}
block|}
comment|/** Sorts by field's natural String sort order, using    *  ordinals.  This is functionally equivalent to {@link    *  StringValComparator}, but it first resolves the string    *  to their relative ordinal positions (using the index    *  returned by {@link FieldCache#getStringIndex}), and    *  does most comparisons using the ordinals.  For medium    *  to large results, this comparator will be much faster    *  than {@link StringValComparator}.  For very small    *  result sets it may be slower. */
DECL|class|StringOrdValComparator
specifier|public
specifier|static
specifier|final
class|class
name|StringOrdValComparator
extends|extends
name|FieldComparator
block|{
DECL|field|ords
specifier|private
specifier|final
name|int
index|[]
name|ords
decl_stmt|;
DECL|field|values
specifier|private
specifier|final
name|String
index|[]
name|values
decl_stmt|;
DECL|field|readerGen
specifier|private
specifier|final
name|int
index|[]
name|readerGen
decl_stmt|;
DECL|field|currentReaderGen
specifier|private
name|int
name|currentReaderGen
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|lookup
specifier|private
name|String
index|[]
name|lookup
decl_stmt|;
DECL|field|order
specifier|private
name|int
index|[]
name|order
decl_stmt|;
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|bottomSlot
specifier|private
name|int
name|bottomSlot
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|bottomOrd
specifier|private
name|int
name|bottomOrd
decl_stmt|;
DECL|field|bottomValue
specifier|private
name|String
name|bottomValue
decl_stmt|;
DECL|field|reversed
specifier|private
specifier|final
name|boolean
name|reversed
decl_stmt|;
DECL|field|sortPos
specifier|private
specifier|final
name|int
name|sortPos
decl_stmt|;
DECL|method|StringOrdValComparator
specifier|public
name|StringOrdValComparator
parameter_list|(
name|int
name|numHits
parameter_list|,
name|String
name|field
parameter_list|,
name|int
name|sortPos
parameter_list|,
name|boolean
name|reversed
parameter_list|)
block|{
name|ords
operator|=
operator|new
name|int
index|[
name|numHits
index|]
expr_stmt|;
name|values
operator|=
operator|new
name|String
index|[
name|numHits
index|]
expr_stmt|;
name|readerGen
operator|=
operator|new
name|int
index|[
name|numHits
index|]
expr_stmt|;
name|this
operator|.
name|sortPos
operator|=
name|sortPos
expr_stmt|;
name|this
operator|.
name|reversed
operator|=
name|reversed
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
if|if
condition|(
name|readerGen
index|[
name|slot1
index|]
operator|==
name|readerGen
index|[
name|slot2
index|]
condition|)
block|{
name|int
name|cmp
init|=
name|ords
index|[
name|slot1
index|]
operator|-
name|ords
index|[
name|slot2
index|]
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
block|{
return|return
name|cmp
return|;
block|}
block|}
specifier|final
name|String
name|val1
init|=
name|values
index|[
name|slot1
index|]
decl_stmt|;
specifier|final
name|String
name|val2
init|=
name|values
index|[
name|slot2
index|]
decl_stmt|;
if|if
condition|(
name|val1
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
name|val1
operator|.
name|compareTo
argument_list|(
name|val2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
assert|assert
name|bottomSlot
operator|!=
operator|-
literal|1
assert|;
name|int
name|order
init|=
name|this
operator|.
name|order
index|[
name|doc
index|]
decl_stmt|;
specifier|final
name|int
name|cmp
init|=
name|bottomOrd
operator|-
name|order
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
block|{
return|return
name|cmp
return|;
block|}
specifier|final
name|String
name|val2
init|=
name|lookup
index|[
name|order
index|]
decl_stmt|;
if|if
condition|(
name|bottomValue
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
comment|// bottom wins
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
block|{
comment|// doc wins
return|return
literal|1
return|;
block|}
return|return
name|bottomValue
operator|.
name|compareTo
argument_list|(
name|val2
argument_list|)
return|;
block|}
DECL|method|convert
specifier|private
name|void
name|convert
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
name|readerGen
index|[
name|slot
index|]
operator|=
name|currentReaderGen
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|String
name|value
init|=
name|values
index|[
name|slot
index|]
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|ords
index|[
name|slot
index|]
operator|=
literal|0
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|sortPos
operator|==
literal|0
operator|&&
name|bottomSlot
operator|!=
operator|-
literal|1
operator|&&
name|bottomSlot
operator|!=
name|slot
condition|)
block|{
comment|// Since we are the primary sort, the entries in the
comment|// queue are bounded by bottomOrd:
assert|assert
name|bottomOrd
operator|<
name|lookup
operator|.
name|length
assert|;
if|if
condition|(
name|reversed
condition|)
block|{
name|index
operator|=
name|binarySearch
argument_list|(
name|lookup
argument_list|,
name|value
argument_list|,
name|bottomOrd
argument_list|,
name|lookup
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|index
operator|=
name|binarySearch
argument_list|(
name|lookup
argument_list|,
name|value
argument_list|,
literal|0
argument_list|,
name|bottomOrd
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Full binary search
name|index
operator|=
name|binarySearch
argument_list|(
name|lookup
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|index
operator|=
operator|-
name|index
operator|-
literal|2
expr_stmt|;
block|}
name|ords
index|[
name|slot
index|]
operator|=
name|index
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
specifier|final
name|int
name|ord
init|=
name|order
index|[
name|doc
index|]
decl_stmt|;
name|ords
index|[
name|slot
index|]
operator|=
name|ord
expr_stmt|;
assert|assert
name|ord
operator|>=
literal|0
assert|;
name|values
index|[
name|slot
index|]
operator|=
name|lookup
index|[
name|ord
index|]
expr_stmt|;
name|readerGen
index|[
name|slot
index|]
operator|=
name|currentReaderGen
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|int
name|docBase
parameter_list|)
throws|throws
name|IOException
block|{
name|StringIndex
name|currentReaderValues
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getStringIndex
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|currentReaderGen
operator|++
expr_stmt|;
name|order
operator|=
name|currentReaderValues
operator|.
name|order
expr_stmt|;
name|lookup
operator|=
name|currentReaderValues
operator|.
name|lookup
expr_stmt|;
assert|assert
name|lookup
operator|.
name|length
operator|>
literal|0
assert|;
if|if
condition|(
name|bottomSlot
operator|!=
operator|-
literal|1
condition|)
block|{
name|convert
argument_list|(
name|bottomSlot
argument_list|)
expr_stmt|;
name|bottomOrd
operator|=
name|ords
index|[
name|bottomSlot
index|]
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|bottomSlot
operator|=
name|bottom
expr_stmt|;
if|if
condition|(
name|readerGen
index|[
name|bottom
index|]
operator|!=
name|currentReaderGen
condition|)
block|{
name|convert
argument_list|(
name|bottomSlot
argument_list|)
expr_stmt|;
block|}
name|bottomOrd
operator|=
name|ords
index|[
name|bottom
index|]
expr_stmt|;
assert|assert
name|bottomOrd
operator|>=
literal|0
assert|;
assert|assert
name|bottomOrd
operator|<
name|lookup
operator|.
name|length
assert|;
name|bottomValue
operator|=
name|values
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Comparable
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|values
index|[
name|slot
index|]
return|;
block|}
DECL|method|getValues
specifier|public
name|String
index|[]
name|getValues
parameter_list|()
block|{
return|return
name|values
return|;
block|}
DECL|method|getBottomSlot
specifier|public
name|int
name|getBottomSlot
parameter_list|()
block|{
return|return
name|bottomSlot
return|;
block|}
DECL|method|getField
specifier|public
name|String
name|getField
parameter_list|()
block|{
return|return
name|field
return|;
block|}
block|}
comment|/** Sorts by field's natural String sort order.  All    *  comparisons are done using String.compareTo, which is    *  slow for medium to large result sets but possibly    *  very fast for very small results sets. */
DECL|class|StringValComparator
specifier|public
specifier|static
specifier|final
class|class
name|StringValComparator
extends|extends
name|FieldComparator
block|{
DECL|field|values
specifier|private
name|String
index|[]
name|values
decl_stmt|;
DECL|field|currentReaderValues
specifier|private
name|String
index|[]
name|currentReaderValues
decl_stmt|;
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|bottom
specifier|private
name|String
name|bottom
decl_stmt|;
DECL|method|StringValComparator
name|StringValComparator
parameter_list|(
name|int
name|numHits
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|values
operator|=
operator|new
name|String
index|[
name|numHits
index|]
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
specifier|final
name|String
name|val1
init|=
name|values
index|[
name|slot1
index|]
decl_stmt|;
specifier|final
name|String
name|val2
init|=
name|values
index|[
name|slot2
index|]
decl_stmt|;
if|if
condition|(
name|val1
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
name|val1
operator|.
name|compareTo
argument_list|(
name|val2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
specifier|final
name|String
name|val2
init|=
name|currentReaderValues
index|[
name|doc
index|]
decl_stmt|;
if|if
condition|(
name|bottom
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
name|bottom
operator|.
name|compareTo
argument_list|(
name|val2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|values
index|[
name|slot
index|]
operator|=
name|currentReaderValues
index|[
name|doc
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|int
name|docBase
parameter_list|)
throws|throws
name|IOException
block|{
name|currentReaderValues
operator|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getStrings
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|this
operator|.
name|bottom
operator|=
name|values
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Comparable
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|values
index|[
name|slot
index|]
return|;
block|}
block|}
DECL|method|binarySearch
specifier|final
specifier|protected
specifier|static
name|int
name|binarySearch
parameter_list|(
name|String
index|[]
name|a
parameter_list|,
name|String
name|key
parameter_list|)
block|{
return|return
name|binarySearch
argument_list|(
name|a
argument_list|,
name|key
argument_list|,
literal|0
argument_list|,
name|a
operator|.
name|length
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|binarySearch
specifier|final
specifier|protected
specifier|static
name|int
name|binarySearch
parameter_list|(
name|String
index|[]
name|a
parameter_list|,
name|String
name|key
parameter_list|,
name|int
name|low
parameter_list|,
name|int
name|high
parameter_list|)
block|{
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|int
name|mid
init|=
operator|(
name|low
operator|+
name|high
operator|)
operator|>>>
literal|1
decl_stmt|;
name|String
name|midVal
init|=
name|a
index|[
name|mid
index|]
decl_stmt|;
name|int
name|cmp
decl_stmt|;
if|if
condition|(
name|midVal
operator|!=
literal|null
condition|)
block|{
name|cmp
operator|=
name|midVal
operator|.
name|compareTo
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cmp
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
else|else
return|return
name|mid
return|;
block|}
return|return
operator|-
operator|(
name|low
operator|+
literal|1
operator|)
return|;
block|}
block|}
end_class
end_unit
