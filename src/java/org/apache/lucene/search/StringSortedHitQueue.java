begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermEnum
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * Expert: A sorted hit queue for fields that contain string values.  * Hits are sorted into the queue by the values in the field and then by document number.  * Warning: The internal cache could be quite large, depending on the number of terms  * in the field!  All the terms are kept in memory, as well as a sorted array of  * integers representing their relative position.  *  *<p>Created: Feb 2, 2004 9:26:33 AM  *  * @author  Tim Jones (Nacimiento Software)  * @since   lucene 1.4  * @version $Id$  */
end_comment
begin_class
DECL|class|StringSortedHitQueue
class|class
name|StringSortedHitQueue
extends|extends
name|FieldSortedHitQueue
block|{
comment|/** 	 * Creates a hit queue sorted over the given field containing string values. 	 * @param reader Index to use. 	 * @param string_field Field containing string sort information 	 * @param size Number of hits to collect. 	 * @throws IOException If an error occurs reading the index. 	 */
DECL|method|StringSortedHitQueue
name|StringSortedHitQueue
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|string_field
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|reader
argument_list|,
name|string_field
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Returns a comparator for sorting hits according to a field containing strings. 	 * Just calls<code>comparator(IndexReader,String)</code>. 	 * @param reader  Index to use. 	 * @param field  Field containg string values. 	 * @return  Comparator for sorting hits. 	 * @throws IOException If an error occurs reading the index. 	 */
DECL|method|createComparator
specifier|protected
name|ScoreDocLookupComparator
name|createComparator
parameter_list|(
specifier|final
name|IndexReader
name|reader
parameter_list|,
specifier|final
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|comparator
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
return|;
block|}
comment|/** 	 * Returns a comparator for sorting hits according to a field containing strings. 	 * @param reader  Index to use. 	 * @param fieldname  Field containg string values. 	 * @return  Comparator for sorting hits. 	 * @throws IOException If an error occurs reading the index. 	 */
DECL|method|comparator
specifier|static
name|ScoreDocLookupComparator
name|comparator
parameter_list|(
specifier|final
name|IndexReader
name|reader
parameter_list|,
specifier|final
name|String
name|fieldname
parameter_list|)
throws|throws
name|IOException
block|{
name|TermEnum
name|enumerator
init|=
name|reader
operator|.
name|terms
argument_list|(
operator|new
name|Term
argument_list|(
name|fieldname
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|comparator
argument_list|(
name|reader
argument_list|,
name|enumerator
argument_list|,
name|fieldname
argument_list|)
return|;
block|}
comment|/** 	 * Returns a comparator for sorting hits according to a field containing strings using the given enumerator 	 * to collect term values. 	 * @param reader  Index to use. 	 * @param fieldname  Field containg string values. 	 * @return  Comparator for sorting hits. 	 * @throws IOException If an error occurs reading the index. 	 */
DECL|method|comparator
specifier|static
name|ScoreDocLookupComparator
name|comparator
parameter_list|(
specifier|final
name|IndexReader
name|reader
parameter_list|,
specifier|final
name|TermEnum
name|enumerator
parameter_list|,
specifier|final
name|String
name|fieldname
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|field
init|=
name|fieldname
operator|.
name|intern
argument_list|()
decl_stmt|;
return|return
operator|new
name|ScoreDocLookupComparator
argument_list|()
block|{
specifier|protected
specifier|final
name|int
index|[]
name|fieldOrder
init|=
name|generateSortIndex
argument_list|()
decl_stmt|;
specifier|protected
name|String
index|[]
name|terms
decl_stmt|;
specifier|private
specifier|final
name|int
index|[]
name|generateSortIndex
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
index|[]
name|retArray
init|=
operator|new
name|int
index|[
name|reader
operator|.
name|maxDoc
argument_list|()
index|]
decl_stmt|;
specifier|final
name|String
index|[]
name|mterms
init|=
operator|new
name|String
index|[
name|reader
operator|.
name|maxDoc
argument_list|()
index|]
decl_stmt|;
comment|// guess length
if|if
condition|(
name|retArray
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|TermDocs
name|termDocs
init|=
name|reader
operator|.
name|termDocs
argument_list|()
decl_stmt|;
name|int
name|t
init|=
literal|0
decl_stmt|;
comment|// current term number
try|try
block|{
if|if
condition|(
name|enumerator
operator|.
name|term
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no terms in field "
operator|+
name|field
argument_list|)
throw|;
block|}
comment|// NOTE: the contract for TermEnum says the
comment|// terms will be in natural order (which is
comment|// ordering by field name, term text).  The
comment|// contract for TermDocs says the docs will
comment|// be ordered by document number.  So the
comment|// following loop will automatically sort the
comment|// terms in the correct order.
comment|// if a given document has more than one term
comment|// in the field, only the last one will be used.
do|do
block|{
name|Term
name|term
init|=
name|enumerator
operator|.
name|term
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|.
name|field
argument_list|()
operator|!=
name|field
condition|)
break|break;
comment|// store term text
comment|// we expect that there is at most one term per document
if|if
condition|(
name|t
operator|>=
name|mterms
operator|.
name|length
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"there are more terms than documents in field \""
operator|+
name|field
operator|+
literal|"\""
argument_list|)
throw|;
name|mterms
index|[
name|t
index|]
operator|=
name|term
operator|.
name|text
argument_list|()
expr_stmt|;
comment|// store which documents use this term
name|termDocs
operator|.
name|seek
argument_list|(
name|enumerator
argument_list|)
expr_stmt|;
while|while
condition|(
name|termDocs
operator|.
name|next
argument_list|()
condition|)
block|{
name|retArray
index|[
name|termDocs
operator|.
name|doc
argument_list|()
index|]
operator|=
name|t
expr_stmt|;
block|}
name|t
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|enumerator
operator|.
name|next
argument_list|()
condition|)
do|;
block|}
finally|finally
block|{
name|termDocs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// if there are less terms than documents,
comment|// trim off the dead array space
if|if
condition|(
name|t
operator|<
name|mterms
operator|.
name|length
condition|)
block|{
name|terms
operator|=
operator|new
name|String
index|[
name|t
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|mterms
argument_list|,
literal|0
argument_list|,
name|terms
argument_list|,
literal|0
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|terms
operator|=
name|mterms
expr_stmt|;
block|}
block|}
return|return
name|retArray
return|;
block|}
specifier|public
specifier|final
name|int
name|compare
parameter_list|(
specifier|final
name|ScoreDoc
name|i
parameter_list|,
specifier|final
name|ScoreDoc
name|j
parameter_list|)
block|{
specifier|final
name|int
name|fi
init|=
name|fieldOrder
index|[
name|i
operator|.
name|doc
index|]
decl_stmt|;
specifier|final
name|int
name|fj
init|=
name|fieldOrder
index|[
name|j
operator|.
name|doc
index|]
decl_stmt|;
if|if
condition|(
name|fi
operator|<
name|fj
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|fi
operator|>
name|fj
condition|)
return|return
literal|1
return|;
return|return
literal|0
return|;
block|}
specifier|public
specifier|final
name|int
name|compareReverse
parameter_list|(
specifier|final
name|ScoreDoc
name|i
parameter_list|,
specifier|final
name|ScoreDoc
name|j
parameter_list|)
block|{
specifier|final
name|int
name|fi
init|=
name|fieldOrder
index|[
name|i
operator|.
name|doc
index|]
decl_stmt|;
specifier|final
name|int
name|fj
init|=
name|fieldOrder
index|[
name|j
operator|.
name|doc
index|]
decl_stmt|;
if|if
condition|(
name|fi
operator|>
name|fj
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|fi
operator|<
name|fj
condition|)
return|return
literal|1
return|;
return|return
literal|0
return|;
block|}
specifier|public
specifier|final
name|boolean
name|sizeMatches
parameter_list|(
specifier|final
name|int
name|n
parameter_list|)
block|{
return|return
name|fieldOrder
operator|.
name|length
operator|==
name|n
return|;
block|}
specifier|public
name|Object
name|sortValue
parameter_list|(
specifier|final
name|ScoreDoc
name|i
parameter_list|)
block|{
return|return
name|terms
index|[
name|fieldOrder
index|[
name|i
operator|.
name|doc
index|]
index|]
return|;
block|}
specifier|public
name|int
name|sortType
parameter_list|()
block|{
return|return
name|SortField
operator|.
name|STRING
return|;
block|}
block|}
return|;
block|}
block|}
end_class
end_unit
