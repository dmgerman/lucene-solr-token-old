begin_unit
begin_package
DECL|package|org.apache.lucene.search.payloads
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|payloads
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermPositions
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Searcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Similarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ComplexExplanation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|TermSpans
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanTermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanWeight
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanScorer
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * The score returned is based on the maximum payload score seen for the Term on the document, as opposed  * to the average as implemented by {@link org.apache.lucene.search.payloads.BoostingTermQuery}.  *  **/
end_comment
begin_class
DECL|class|BoostingFunctionTermQuery
specifier|public
class|class
name|BoostingFunctionTermQuery
extends|extends
name|SpanTermQuery
implements|implements
name|PayloadQuery
block|{
DECL|field|function
specifier|protected
name|PayloadFunction
name|function
decl_stmt|;
DECL|field|includeSpanScore
specifier|private
name|boolean
name|includeSpanScore
decl_stmt|;
DECL|method|BoostingFunctionTermQuery
specifier|public
name|BoostingFunctionTermQuery
parameter_list|(
name|Term
name|term
parameter_list|,
name|PayloadFunction
name|function
parameter_list|)
block|{
name|this
argument_list|(
name|term
argument_list|,
name|function
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|BoostingFunctionTermQuery
specifier|public
name|BoostingFunctionTermQuery
parameter_list|(
name|Term
name|term
parameter_list|,
name|PayloadFunction
name|function
parameter_list|,
name|boolean
name|includeSpanScore
parameter_list|)
block|{
name|super
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|this
operator|.
name|function
operator|=
name|function
expr_stmt|;
name|this
operator|.
name|includeSpanScore
operator|=
name|includeSpanScore
expr_stmt|;
block|}
DECL|method|createWeight
specifier|public
name|Weight
name|createWeight
parameter_list|(
name|Searcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|BoostingFunctionTermWeight
argument_list|(
name|this
argument_list|,
name|searcher
argument_list|)
return|;
block|}
DECL|class|BoostingFunctionTermWeight
specifier|protected
class|class
name|BoostingFunctionTermWeight
extends|extends
name|SpanWeight
block|{
DECL|method|BoostingFunctionTermWeight
specifier|public
name|BoostingFunctionTermWeight
parameter_list|(
name|BoostingFunctionTermQuery
name|query
parameter_list|,
name|Searcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|query
argument_list|,
name|searcher
argument_list|)
expr_stmt|;
block|}
DECL|method|scorer
specifier|public
name|Scorer
name|scorer
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|boolean
name|scoreDocsInOrder
parameter_list|,
name|boolean
name|topScorer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|BoostingFunctionSpanScorer
argument_list|(
operator|(
name|TermSpans
operator|)
name|query
operator|.
name|getSpans
argument_list|(
name|reader
argument_list|)
argument_list|,
name|this
argument_list|,
name|similarity
argument_list|,
name|reader
operator|.
name|norms
argument_list|(
name|query
operator|.
name|getField
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|class|BoostingFunctionSpanScorer
specifier|protected
class|class
name|BoostingFunctionSpanScorer
extends|extends
name|SpanScorer
block|{
comment|//TODO: is this the best way to allocate this?
DECL|field|payload
specifier|protected
name|byte
index|[]
name|payload
init|=
operator|new
name|byte
index|[
literal|256
index|]
decl_stmt|;
DECL|field|positions
specifier|protected
name|TermPositions
name|positions
decl_stmt|;
DECL|field|payloadScore
specifier|protected
name|float
name|payloadScore
decl_stmt|;
DECL|field|payloadsSeen
specifier|protected
name|int
name|payloadsSeen
decl_stmt|;
DECL|method|BoostingFunctionSpanScorer
specifier|public
name|BoostingFunctionSpanScorer
parameter_list|(
name|TermSpans
name|spans
parameter_list|,
name|Weight
name|weight
parameter_list|,
name|Similarity
name|similarity
parameter_list|,
name|byte
index|[]
name|norms
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|spans
argument_list|,
name|weight
argument_list|,
name|similarity
argument_list|,
name|norms
argument_list|)
expr_stmt|;
name|positions
operator|=
name|spans
operator|.
name|getPositions
argument_list|()
expr_stmt|;
block|}
DECL|method|setFreqCurrentDoc
specifier|protected
name|boolean
name|setFreqCurrentDoc
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|more
condition|)
block|{
return|return
literal|false
return|;
block|}
name|doc
operator|=
name|spans
operator|.
name|doc
argument_list|()
expr_stmt|;
name|freq
operator|=
literal|0.0f
expr_stmt|;
name|payloadScore
operator|=
literal|0
expr_stmt|;
name|payloadsSeen
operator|=
literal|0
expr_stmt|;
name|Similarity
name|similarity1
init|=
name|getSimilarity
argument_list|()
decl_stmt|;
while|while
condition|(
name|more
operator|&&
name|doc
operator|==
name|spans
operator|.
name|doc
argument_list|()
condition|)
block|{
name|int
name|matchLength
init|=
name|spans
operator|.
name|end
argument_list|()
operator|-
name|spans
operator|.
name|start
argument_list|()
decl_stmt|;
name|freq
operator|+=
name|similarity1
operator|.
name|sloppyFreq
argument_list|(
name|matchLength
argument_list|)
expr_stmt|;
name|processPayload
argument_list|(
name|similarity1
argument_list|)
expr_stmt|;
name|more
operator|=
name|spans
operator|.
name|next
argument_list|()
expr_stmt|;
comment|//this moves positions to the next match in this document
block|}
return|return
name|more
operator|||
operator|(
name|freq
operator|!=
literal|0
operator|)
return|;
block|}
DECL|method|processPayload
specifier|protected
name|void
name|processPayload
parameter_list|(
name|Similarity
name|similarity
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|positions
operator|.
name|isPayloadAvailable
argument_list|()
condition|)
block|{
name|payload
operator|=
name|positions
operator|.
name|getPayload
argument_list|(
name|payload
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|payloadScore
operator|=
name|function
operator|.
name|currentScore
argument_list|(
name|doc
argument_list|,
name|term
operator|.
name|field
argument_list|()
argument_list|,
name|payloadsSeen
argument_list|,
name|payloadScore
argument_list|,
name|similarity
operator|.
name|scorePayload
argument_list|(
name|doc
argument_list|,
name|term
operator|.
name|field
argument_list|()
argument_list|,
name|payload
argument_list|,
literal|0
argument_list|,
name|positions
operator|.
name|getPayloadLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|payloadsSeen
operator|++
expr_stmt|;
block|}
else|else
block|{
comment|//zero out the payload?
block|}
block|}
comment|/**        *        * @return {@link #getSpanScore()} * {@link #getPayloadScore()}        * @throws IOException        */
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|includeSpanScore
condition|?
name|getSpanScore
argument_list|()
operator|*
name|getPayloadScore
argument_list|()
else|:
name|getPayloadScore
argument_list|()
return|;
block|}
comment|/**        * Returns the SpanScorer score only.        *<p/>        * Should not be overriden without good cause!        *        * @return the score for just the Span part w/o the payload        * @throws IOException        *        * @see #score()        */
DECL|method|getSpanScore
specifier|protected
name|float
name|getSpanScore
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|super
operator|.
name|score
argument_list|()
return|;
block|}
comment|/**        * The score for the payload        * @return The score, as calculated by {@link PayloadFunction#docScore(int, String, int, float)}        */
DECL|method|getPayloadScore
specifier|protected
name|float
name|getPayloadScore
parameter_list|()
block|{
return|return
name|function
operator|.
name|docScore
argument_list|(
name|doc
argument_list|,
name|term
operator|.
name|field
argument_list|()
argument_list|,
name|payloadsSeen
argument_list|,
name|payloadScore
argument_list|)
return|;
block|}
DECL|method|explain
specifier|public
name|Explanation
name|explain
parameter_list|(
specifier|final
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|ComplexExplanation
name|result
init|=
operator|new
name|ComplexExplanation
argument_list|()
decl_stmt|;
name|Explanation
name|nonPayloadExpl
init|=
name|super
operator|.
name|explain
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|result
operator|.
name|addDetail
argument_list|(
name|nonPayloadExpl
argument_list|)
expr_stmt|;
comment|//QUESTION: Is there a way to avoid this skipTo call?  We need to know whether to load the payload or not
name|Explanation
name|payloadBoost
init|=
operator|new
name|Explanation
argument_list|()
decl_stmt|;
name|result
operator|.
name|addDetail
argument_list|(
name|payloadBoost
argument_list|)
expr_stmt|;
name|float
name|payloadScore
init|=
name|getPayloadScore
argument_list|()
decl_stmt|;
name|payloadBoost
operator|.
name|setValue
argument_list|(
name|payloadScore
argument_list|)
expr_stmt|;
comment|//GSI: I suppose we could toString the payload, but I don't think that would be a good idea
name|payloadBoost
operator|.
name|setDescription
argument_list|(
literal|"scorePayload(...)"
argument_list|)
expr_stmt|;
name|result
operator|.
name|setValue
argument_list|(
name|nonPayloadExpl
operator|.
name|getValue
argument_list|()
operator|*
name|payloadScore
argument_list|)
expr_stmt|;
name|result
operator|.
name|setDescription
argument_list|(
literal|"btq, product of:"
argument_list|)
expr_stmt|;
name|result
operator|.
name|setMatch
argument_list|(
name|nonPayloadExpl
operator|.
name|getValue
argument_list|()
operator|==
literal|0
condition|?
name|Boolean
operator|.
name|FALSE
else|:
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
comment|// LUCENE-1303
return|return
name|result
return|;
block|}
block|}
block|}
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|BoostingFunctionTermQuery
operator|)
condition|)
return|return
literal|false
return|;
name|BoostingFunctionTermQuery
name|other
init|=
operator|(
name|BoostingFunctionTermQuery
operator|)
name|o
decl_stmt|;
return|return
operator|(
name|this
operator|.
name|getBoost
argument_list|()
operator|==
name|other
operator|.
name|getBoost
argument_list|()
operator|)
operator|&&
name|this
operator|.
name|term
operator|.
name|equals
argument_list|(
name|other
operator|.
name|term
argument_list|)
operator|&&
name|this
operator|.
name|function
operator|.
name|equals
argument_list|(
name|other
operator|.
name|function
argument_list|)
return|;
block|}
block|}
end_class
end_unit
