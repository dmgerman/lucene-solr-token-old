begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_comment
comment|/**  * A {@link Collector} implementation that collects the top-scoring hits,  * returning them as a {@link TopDocs}. This is used by {@link IndexSearcher} to  * implement {@link TopDocs}-based search. Hits are sorted by score descending  * and then (when the scores are tied) docID ascending. When you create an  * instance of this collector you should know in advance whether documents are  * going to be collected in doc Id order or not.  *  *<p><b>NOTE</b>: The values Float.Nan,  * Float.NEGATIVE_INFINITY and Float.POSITIVE_INFINITY are  * not valid scores.  This collector will not properly  * collect hits with such scores.  */
end_comment
begin_class
DECL|class|TopScoreDocCollector
specifier|public
specifier|abstract
class|class
name|TopScoreDocCollector
extends|extends
name|TopDocsCollector
argument_list|<
name|ScoreDoc
argument_list|>
block|{
comment|// Assumes docs are scored in order.
DECL|class|InOrderTopScoreDocCollector
specifier|private
specifier|static
class|class
name|InOrderTopScoreDocCollector
extends|extends
name|TopScoreDocCollector
block|{
DECL|method|InOrderTopScoreDocCollector
specifier|private
name|InOrderTopScoreDocCollector
parameter_list|(
name|int
name|numHits
parameter_list|)
block|{
name|super
argument_list|(
name|numHits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|float
name|score
init|=
name|scorer
operator|.
name|score
argument_list|()
decl_stmt|;
name|totalHits
operator|++
expr_stmt|;
if|if
condition|(
name|score
operator|<=
name|pqTop
operator|.
name|score
condition|)
block|{
comment|// Since docs are returned in-order (i.e., increasing doc Id), a document
comment|// with equal score to pqTop.score cannot compete since HitQueue favors
comment|// documents with lower doc Ids. Therefore reject those docs too.
return|return;
block|}
name|pqTop
operator|.
name|doc
operator|=
name|doc
operator|+
name|docBase
expr_stmt|;
name|pqTop
operator|.
name|score
operator|=
name|score
expr_stmt|;
name|pqTop
operator|=
name|pq
operator|.
name|updateTop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|acceptsDocsOutOfOrder
specifier|public
name|boolean
name|acceptsDocsOutOfOrder
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// Assumes docs are scored out of order.
DECL|class|OutOfOrderTopScoreDocCollector
specifier|private
specifier|static
class|class
name|OutOfOrderTopScoreDocCollector
extends|extends
name|TopScoreDocCollector
block|{
DECL|method|OutOfOrderTopScoreDocCollector
specifier|private
name|OutOfOrderTopScoreDocCollector
parameter_list|(
name|int
name|numHits
parameter_list|)
block|{
name|super
argument_list|(
name|numHits
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|float
name|score
init|=
name|scorer
operator|.
name|score
argument_list|()
decl_stmt|;
name|totalHits
operator|++
expr_stmt|;
name|doc
operator|+=
name|docBase
expr_stmt|;
if|if
condition|(
name|score
operator|<
name|pqTop
operator|.
name|score
operator|||
operator|(
name|score
operator|==
name|pqTop
operator|.
name|score
operator|&&
name|doc
operator|>
name|pqTop
operator|.
name|doc
operator|)
condition|)
block|{
return|return;
block|}
name|pqTop
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
name|pqTop
operator|.
name|score
operator|=
name|score
expr_stmt|;
name|pqTop
operator|=
name|pq
operator|.
name|updateTop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|acceptsDocsOutOfOrder
specifier|public
name|boolean
name|acceptsDocsOutOfOrder
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/**    * Creates a new {@link TopScoreDocCollector} given the number of hits to    * collect and whether documents are scored in order by the input    * {@link Scorer} to {@link #setScorer(Scorer)}.    *    *<p><b>NOTE</b>: The instances returned by this method    * pre-allocate a full array of length    *<code>numHits</code>, and fill the array with sentinel    * objects.    */
DECL|method|create
specifier|public
specifier|static
name|TopScoreDocCollector
name|create
parameter_list|(
name|int
name|numHits
parameter_list|,
name|boolean
name|docsScoredInOrder
parameter_list|)
block|{
if|if
condition|(
name|docsScoredInOrder
condition|)
block|{
return|return
operator|new
name|InOrderTopScoreDocCollector
argument_list|(
name|numHits
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|OutOfOrderTopScoreDocCollector
argument_list|(
name|numHits
argument_list|)
return|;
block|}
block|}
DECL|field|pqTop
name|ScoreDoc
name|pqTop
decl_stmt|;
DECL|field|docBase
name|int
name|docBase
init|=
literal|0
decl_stmt|;
DECL|field|scorer
name|Scorer
name|scorer
decl_stmt|;
comment|// prevents instantiation
DECL|method|TopScoreDocCollector
specifier|private
name|TopScoreDocCollector
parameter_list|(
name|int
name|numHits
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|HitQueue
argument_list|(
name|numHits
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// HitQueue implements getSentinelObject to return a ScoreDoc, so we know
comment|// that at this point top() is already initialized.
name|pqTop
operator|=
name|pq
operator|.
name|top
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newTopDocs
specifier|protected
name|TopDocs
name|newTopDocs
parameter_list|(
name|ScoreDoc
index|[]
name|results
parameter_list|,
name|int
name|start
parameter_list|)
block|{
if|if
condition|(
name|results
operator|==
literal|null
condition|)
block|{
return|return
name|EMPTY_TOPDOCS
return|;
block|}
comment|// We need to compute maxScore in order to set it in TopDocs. If start == 0,
comment|// it means the largest element is already in results, use its score as
comment|// maxScore. Otherwise pop everything else, until the largest element is
comment|// extracted and use its score as maxScore.
name|float
name|maxScore
init|=
name|Float
operator|.
name|NaN
decl_stmt|;
if|if
condition|(
name|start
operator|==
literal|0
condition|)
block|{
name|maxScore
operator|=
name|results
index|[
literal|0
index|]
operator|.
name|score
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
name|pq
operator|.
name|size
argument_list|()
init|;
name|i
operator|>
literal|1
condition|;
name|i
operator|--
control|)
block|{
name|pq
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
name|maxScore
operator|=
name|pq
operator|.
name|pop
argument_list|()
operator|.
name|score
expr_stmt|;
block|}
return|return
operator|new
name|TopDocs
argument_list|(
name|totalHits
argument_list|,
name|results
argument_list|,
name|maxScore
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|int
name|base
parameter_list|)
block|{
name|docBase
operator|=
name|base
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
block|}
block|}
end_class
end_unit
