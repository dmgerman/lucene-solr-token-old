begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * Expert: Collects sorted results from Searchable's and collates them.  * The elements put into this queue must be of type FieldDoc.  *  *<p>Created: Feb 11, 2004 2:04:21 PM  *  * @author  Tim Jones (Nacimiento Software)  * @since   lucene 1.4  * @version $Id$  */
end_comment
begin_class
DECL|class|FieldDocSortedHitQueue
class|class
name|FieldDocSortedHitQueue
extends|extends
name|PriorityQueue
block|{
comment|// this cannot contain AUTO fields
DECL|field|fields
name|SortField
index|[]
name|fields
decl_stmt|;
comment|/** 	 * Creates a hit queue sorted by the given list of fields. 	 * @param fields Field names, in priority order (highest priority first). 	 * @param size  The number of hits to retain.  Must be greater than zero. 	 * @throws IOException 	 */
DECL|method|FieldDocSortedHitQueue
name|FieldDocSortedHitQueue
parameter_list|(
name|SortField
index|[]
name|fields
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
name|initialize
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Allows redefinition of sort fields if they are<code>null</code>. 	 * This is to handle the 	 * case using ParallelMultiSearcher where the original list 	 * contains AUTO and we don't know 	 * the actual sort type until the values come back.  This 	 * method is thread safe. 	 * @param fields 	 */
DECL|method|setFields
specifier|synchronized
name|void
name|setFields
parameter_list|(
name|SortField
index|[]
name|fields
parameter_list|)
block|{
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
block|}
comment|/** Returns the fields being used to sort. */
DECL|method|getFields
name|SortField
index|[]
name|getFields
parameter_list|()
block|{
return|return
name|fields
return|;
block|}
comment|/** 	 * Returns whether<code>a</code> is less relevant than<code>b</code>. 	 * @param a ScoreDoc 	 * @param b ScoreDoc 	 * @return<code>true</code> if document<code>a</code> should be sorted after document<code>b</code>. 	 */
DECL|method|lessThan
specifier|protected
specifier|final
name|boolean
name|lessThan
parameter_list|(
specifier|final
name|Object
name|a
parameter_list|,
specifier|final
name|Object
name|b
parameter_list|)
block|{
specifier|final
name|FieldDoc
name|docA
init|=
operator|(
name|FieldDoc
operator|)
name|a
decl_stmt|;
specifier|final
name|FieldDoc
name|docB
init|=
operator|(
name|FieldDoc
operator|)
name|b
decl_stmt|;
specifier|final
name|int
name|n
init|=
name|fields
operator|.
name|length
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
operator|&&
name|c
operator|==
literal|0
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|type
init|=
name|fields
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|fields
index|[
name|i
index|]
operator|.
name|getReverse
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|SortField
operator|.
name|SCORE
case|:
name|float
name|r1
init|=
operator|(
operator|(
name|Float
operator|)
name|docA
operator|.
name|fields
index|[
name|i
index|]
operator|)
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|float
name|r2
init|=
operator|(
operator|(
name|Float
operator|)
name|docB
operator|.
name|fields
index|[
name|i
index|]
operator|)
operator|.
name|floatValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|r1
operator|<
name|r2
condition|)
name|c
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|r1
operator|>
name|r2
condition|)
name|c
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|SortField
operator|.
name|DOC
case|:
case|case
name|SortField
operator|.
name|INT
case|:
case|case
name|SortField
operator|.
name|STRING
case|:
name|int
name|i1
init|=
operator|(
operator|(
name|Integer
operator|)
name|docA
operator|.
name|fields
index|[
name|i
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|i2
init|=
operator|(
operator|(
name|Integer
operator|)
name|docB
operator|.
name|fields
index|[
name|i
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|i1
operator|>
name|i2
condition|)
name|c
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|i1
operator|<
name|i2
condition|)
name|c
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|SortField
operator|.
name|FLOAT
case|:
name|float
name|f1
init|=
operator|(
operator|(
name|Float
operator|)
name|docA
operator|.
name|fields
index|[
name|i
index|]
operator|)
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|float
name|f2
init|=
operator|(
operator|(
name|Float
operator|)
name|docB
operator|.
name|fields
index|[
name|i
index|]
operator|)
operator|.
name|floatValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|f1
operator|>
name|f2
condition|)
name|c
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|f1
operator|<
name|f2
condition|)
name|c
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|SortField
operator|.
name|AUTO
case|:
comment|// we cannot handle this - even if we determine the type of object (Float or
comment|// Integer), we don't necessarily know how to compare them (both SCORE and
comment|// FLOAT both contain floats, but are sorted opposite of each other). Before
comment|// we get here, each AUTO should have been replaced with its actual value.
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"FieldDocSortedHitQueue cannot use an AUTO SortField"
argument_list|)
throw|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"invalid SortField type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|SortField
operator|.
name|SCORE
case|:
name|float
name|r1
init|=
operator|(
operator|(
name|Float
operator|)
name|docA
operator|.
name|fields
index|[
name|i
index|]
operator|)
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|float
name|r2
init|=
operator|(
operator|(
name|Float
operator|)
name|docB
operator|.
name|fields
index|[
name|i
index|]
operator|)
operator|.
name|floatValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|r1
operator|>
name|r2
condition|)
name|c
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|r1
operator|<
name|r2
condition|)
name|c
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|SortField
operator|.
name|DOC
case|:
case|case
name|SortField
operator|.
name|INT
case|:
case|case
name|SortField
operator|.
name|STRING
case|:
name|int
name|i1
init|=
operator|(
operator|(
name|Integer
operator|)
name|docA
operator|.
name|fields
index|[
name|i
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|i2
init|=
operator|(
operator|(
name|Integer
operator|)
name|docB
operator|.
name|fields
index|[
name|i
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|i1
operator|<
name|i2
condition|)
name|c
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|i1
operator|>
name|i2
condition|)
name|c
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|SortField
operator|.
name|FLOAT
case|:
name|float
name|f1
init|=
operator|(
operator|(
name|Float
operator|)
name|docA
operator|.
name|fields
index|[
name|i
index|]
operator|)
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|float
name|f2
init|=
operator|(
operator|(
name|Float
operator|)
name|docB
operator|.
name|fields
index|[
name|i
index|]
operator|)
operator|.
name|floatValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|f1
operator|<
name|f2
condition|)
name|c
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|f1
operator|>
name|f2
condition|)
name|c
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|SortField
operator|.
name|AUTO
case|:
comment|// we cannot handle this - even if we determine the type of object (Float or
comment|// Integer), we don't necessarily know how to compare them (both SCORE and
comment|// FLOAT both contain floats, but are sorted opposite of each other). Before
comment|// we get here, each AUTO should have been replaced with its actual value.
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"FieldDocSortedHitQueue cannot use an AUTO SortField"
argument_list|)
throw|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"invalid SortField type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|c
operator|>
literal|0
return|;
block|}
block|}
end_class
end_unit
