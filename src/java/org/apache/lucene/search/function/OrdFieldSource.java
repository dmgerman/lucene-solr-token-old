begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.search.function
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|function
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldCache
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * Expert: obtains the ordinal of the field value from the default Lucene   * {@link org.apache.lucene.search.FieldCache Fieldcache} using getStringIndex().  *<p>  * The native lucene index order is used to assign an ordinal value for each field value.  *<p  * Field values (terms) are lexicographically ordered by unicode value, and numbered starting at 1.  *<p>  * Example:  *<br>If there were only three field values: "apple","banana","pear"  *<br>then ord("apple")=1, ord("banana")=2, ord("pear")=3  *<p>  * WARNING:   * ord() depends on the position in an index and can thus change   * when other documents are inserted or deleted,  * or if a MultiSearcher is used.   *  *<p><font color="#FF0000">  * WARNING: The status of the<b>search.function</b> package is experimental.   * The APIs introduced here might change in the future and will not be   * supported anymore in such a case.</font>  *  *<p><b>NOTE</b>: with the switch in 2.9 to segment-based  * searching, if {@link #getValues} is invoked with a  * composite (multi-segment) reader, this can easily cause  * double RAM usage for the values in the FieldCache.  It's  * best to switch your application to pass only atomic  * (single segment) readers to this API.  Alternatively, for  * a short-term fix, you could wrap your ValueSource using  * {@link MultiValueSource}, which costs more CPU per lookup  * but will not consume double the FieldCache RAM.</p>  */
end_comment
begin_class
DECL|class|OrdFieldSource
specifier|public
class|class
name|OrdFieldSource
extends|extends
name|ValueSource
block|{
DECL|field|field
specifier|protected
name|String
name|field
decl_stmt|;
comment|/**     * Constructor for a certain field.    * @param field field whose values order is used.      */
DECL|method|OrdFieldSource
specifier|public
name|OrdFieldSource
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
comment|/*(non-Javadoc) @see org.apache.lucene.search.function.ValueSource#description() */
DECL|method|description
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
literal|"ord("
operator|+
name|field
operator|+
literal|')'
return|;
block|}
comment|/*(non-Javadoc) @see org.apache.lucene.search.function.ValueSource#getValues(org.apache.lucene.index.IndexReader) */
DECL|method|getValues
specifier|public
name|DocValues
name|getValues
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
index|[]
name|arr
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getStringIndex
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
operator|.
name|order
decl_stmt|;
return|return
operator|new
name|DocValues
argument_list|()
block|{
comment|/*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#floatVal(int) */
specifier|public
name|float
name|floatVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
operator|(
name|float
operator|)
name|arr
index|[
name|doc
index|]
return|;
block|}
comment|/*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#strVal(int) */
specifier|public
name|String
name|strVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
comment|// the string value of the ordinal, not the string itself
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|arr
index|[
name|doc
index|]
argument_list|)
return|;
block|}
comment|/*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#toString(int) */
specifier|public
name|String
name|toString
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|description
argument_list|()
operator|+
literal|'='
operator|+
name|intVal
argument_list|(
name|doc
argument_list|)
return|;
block|}
comment|/*(non-Javadoc) @see org.apache.lucene.search.function.DocValues#getInnerArray() */
name|Object
name|getInnerArray
parameter_list|()
block|{
return|return
name|arr
return|;
block|}
block|}
return|;
block|}
comment|/*(non-Javadoc) @see java.lang.Object#equals(java.lang.Object) */
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|.
name|getClass
argument_list|()
operator|!=
name|OrdFieldSource
operator|.
name|class
condition|)
return|return
literal|false
return|;
name|OrdFieldSource
name|other
init|=
operator|(
name|OrdFieldSource
operator|)
name|o
decl_stmt|;
return|return
name|this
operator|.
name|field
operator|.
name|equals
argument_list|(
name|other
operator|.
name|field
argument_list|)
return|;
block|}
DECL|field|hcode
specifier|private
specifier|static
specifier|final
name|int
name|hcode
init|=
name|OrdFieldSource
operator|.
name|class
operator|.
name|hashCode
argument_list|()
decl_stmt|;
comment|/*(non-Javadoc) @see java.lang.Object#hashCode() */
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|hcode
operator|+
name|field
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class
end_unit
