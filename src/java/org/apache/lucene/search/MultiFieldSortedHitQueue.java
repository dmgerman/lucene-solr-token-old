begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * Expert: A hit queue for sorting by hits by terms in more than one field.  * The type of content in each field could be determined dynamically by  * FieldSortedHitQueue.determineComparator().  *  *<p>Created: Feb 3, 2004 4:46:55 PM  *  * @author  Tim Jones (Nacimiento Software)  * @since   lucene 1.4  * @version $Id$  * @see FieldSortedHitQueue  * @see Searchable#search(Query,Filter,int,Sort)  */
end_comment
begin_class
DECL|class|MultiFieldSortedHitQueue
class|class
name|MultiFieldSortedHitQueue
extends|extends
name|PriorityQueue
block|{
comment|/** 	 * Creates a hit queue sorted by the given list of fields. 	 * @param reader  Index to use. 	 * @param fields Field names, in priority order (highest priority first).  Cannot be<code>null</code> or empty. 	 * @param size  The number of hits to retain.  Must be greater than zero. 	 * @throws IOException 	 */
DECL|method|MultiFieldSortedHitQueue
name|MultiFieldSortedHitQueue
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|SortField
index|[]
name|fields
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|n
init|=
name|fields
operator|.
name|length
decl_stmt|;
name|comparators
operator|=
operator|new
name|ScoreDocComparator
index|[
name|n
index|]
expr_stmt|;
name|this
operator|.
name|fields
operator|=
operator|new
name|SortField
index|[
name|n
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|String
name|fieldname
init|=
name|fields
index|[
name|i
index|]
operator|.
name|getField
argument_list|()
decl_stmt|;
name|comparators
index|[
name|i
index|]
operator|=
name|FieldSortedHitQueue
operator|.
name|getCachedComparator
argument_list|(
name|reader
argument_list|,
name|fieldname
argument_list|,
name|fields
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
argument_list|,
name|fields
index|[
name|i
index|]
operator|.
name|getFactory
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|fields
index|[
name|i
index|]
operator|=
operator|new
name|SortField
argument_list|(
name|fieldname
argument_list|,
name|comparators
index|[
name|i
index|]
operator|.
name|sortType
argument_list|()
argument_list|,
name|fields
index|[
name|i
index|]
operator|.
name|getReverse
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|initialize
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
comment|/** Stores a comparator corresponding to each field being sorted by */
DECL|field|comparators
specifier|protected
name|ScoreDocComparator
index|[]
name|comparators
decl_stmt|;
comment|/** Stores the sort criteria being used. */
DECL|field|fields
specifier|protected
name|SortField
index|[]
name|fields
decl_stmt|;
comment|/** Stores the maximum score value encountered, for normalizing. 	 *  we only care about scores greater than 1.0 - if all the scores 	 *  are less than 1.0, we don't have to normalize. */
DECL|field|maxscore
specifier|protected
name|float
name|maxscore
init|=
literal|1.0f
decl_stmt|;
comment|/** 	 * Returns whether<code>a</code> is less relevant than<code>b</code>. 	 * @param a ScoreDoc 	 * @param b ScoreDoc 	 * @return<code>true</code> if document<code>a</code> should be sorted after document<code>b</code>. 	 */
DECL|method|lessThan
specifier|protected
specifier|final
name|boolean
name|lessThan
parameter_list|(
specifier|final
name|Object
name|a
parameter_list|,
specifier|final
name|Object
name|b
parameter_list|)
block|{
specifier|final
name|ScoreDoc
name|docA
init|=
operator|(
name|ScoreDoc
operator|)
name|a
decl_stmt|;
specifier|final
name|ScoreDoc
name|docB
init|=
operator|(
name|ScoreDoc
operator|)
name|b
decl_stmt|;
comment|// keep track of maximum score
if|if
condition|(
name|docA
operator|.
name|score
operator|>
name|maxscore
condition|)
name|maxscore
operator|=
name|docA
operator|.
name|score
expr_stmt|;
if|if
condition|(
name|docB
operator|.
name|score
operator|>
name|maxscore
condition|)
name|maxscore
operator|=
name|docB
operator|.
name|score
expr_stmt|;
comment|// run comparators
specifier|final
name|int
name|n
init|=
name|comparators
operator|.
name|length
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
operator|&&
name|c
operator|==
literal|0
condition|;
operator|++
name|i
control|)
block|{
name|c
operator|=
operator|(
name|fields
index|[
name|i
index|]
operator|.
name|reverse
operator|)
condition|?
name|comparators
index|[
name|i
index|]
operator|.
name|compareReverse
argument_list|(
name|docA
argument_list|,
name|docB
argument_list|)
else|:
name|comparators
index|[
name|i
index|]
operator|.
name|compare
argument_list|(
name|docA
argument_list|,
name|docB
argument_list|)
expr_stmt|;
block|}
return|return
name|c
operator|>
literal|0
return|;
block|}
comment|/** 	 * Given a FieldDoc object, stores the values used 	 * to sort the given document.  These values are not the raw 	 * values out of the index, but the internal representation 	 * of them.  This is so the given search hit can be collated 	 * by a MultiSearcher with other search hits. 	 * @param  doc  The FieldDoc to store sort values into. 	 * @return  The same FieldDoc passed in. 	 * @see Searchable#search(Query,Filter,int,Sort) 	 */
DECL|method|fillFields
name|FieldDoc
name|fillFields
parameter_list|(
specifier|final
name|FieldDoc
name|doc
parameter_list|)
block|{
specifier|final
name|int
name|n
init|=
name|comparators
operator|.
name|length
decl_stmt|;
specifier|final
name|Comparable
index|[]
name|fields
init|=
operator|new
name|Comparable
index|[
name|n
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
name|fields
index|[
name|i
index|]
operator|=
name|comparators
index|[
name|i
index|]
operator|.
name|sortValue
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
if|if
condition|(
name|maxscore
operator|>
literal|1.0f
condition|)
name|doc
operator|.
name|score
operator|/=
name|maxscore
expr_stmt|;
comment|// normalize scores
return|return
name|doc
return|;
block|}
comment|/** Returns the SortFields being used by this hit queue. */
DECL|method|getFields
name|SortField
index|[]
name|getFields
parameter_list|()
block|{
return|return
name|fields
return|;
block|}
block|}
end_class
end_unit
