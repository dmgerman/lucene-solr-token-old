begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import
begin_comment
comment|/**  * Filter caching singleton.  It can be used   * to save filters locally for reuse.  * This class makes it possible to cache Filters even when using RMI, as it  * keeps the cache on the searcher side of the RMI connection.  *   * Also could be used as a persistent storage for any filter as long as the  * filter provides a proper hashCode(), as that is used as the key in the cache.  *   * The cache is periodically cleaned up from a separate thread to ensure the  * cache doesn't exceed the maximum size.  */
end_comment
begin_class
DECL|class|FilterManager
specifier|public
class|class
name|FilterManager
block|{
DECL|field|manager
specifier|protected
specifier|static
name|FilterManager
name|manager
decl_stmt|;
comment|/** The default maximum number of Filters in the cache */
DECL|field|DEFAULT_CACHE_CLEAN_SIZE
specifier|protected
specifier|static
specifier|final
name|int
name|DEFAULT_CACHE_CLEAN_SIZE
init|=
literal|100
decl_stmt|;
comment|/** The default frequency of cache cleanup */
DECL|field|DEFAULT_CACHE_SLEEP_TIME
specifier|protected
specifier|static
specifier|final
name|long
name|DEFAULT_CACHE_SLEEP_TIME
init|=
literal|1000
operator|*
literal|60
operator|*
literal|10
decl_stmt|;
comment|/** The cache itself */
DECL|field|cache
specifier|protected
name|Map
name|cache
decl_stmt|;
comment|/** Maximum allowed cache size */
DECL|field|cacheCleanSize
specifier|protected
name|int
name|cacheCleanSize
decl_stmt|;
comment|/** Cache cleaning frequency */
DECL|field|cleanSleepTime
specifier|protected
name|long
name|cleanSleepTime
decl_stmt|;
comment|/** Cache cleaner that runs in a separate thread */
DECL|field|filterCleaner
specifier|protected
name|FilterCleaner
name|filterCleaner
decl_stmt|;
DECL|method|getInstance
specifier|public
specifier|synchronized
specifier|static
name|FilterManager
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|manager
operator|==
literal|null
condition|)
block|{
name|manager
operator|=
operator|new
name|FilterManager
argument_list|()
expr_stmt|;
block|}
return|return
name|manager
return|;
block|}
comment|/**    * Sets up the FilterManager singleton.    */
DECL|method|FilterManager
specifier|protected
name|FilterManager
parameter_list|()
block|{
name|cache
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|cacheCleanSize
operator|=
name|DEFAULT_CACHE_CLEAN_SIZE
expr_stmt|;
comment|// Let the cache get to 100 items
name|cleanSleepTime
operator|=
name|DEFAULT_CACHE_SLEEP_TIME
expr_stmt|;
comment|// 10 minutes between cleanings
name|filterCleaner
operator|=
operator|new
name|FilterCleaner
argument_list|()
expr_stmt|;
name|Thread
name|fcThread
init|=
operator|new
name|Thread
argument_list|(
name|filterCleaner
argument_list|)
decl_stmt|;
comment|// set to be a Daemon so it doesn't have to be stopped
name|fcThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fcThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Sets the max size that cache should reach before it is cleaned up    * @param cacheCleanSize maximum allowed cache size    */
DECL|method|setCacheSize
specifier|public
name|void
name|setCacheSize
parameter_list|(
name|int
name|cacheCleanSize
parameter_list|)
block|{
name|this
operator|.
name|cacheCleanSize
operator|=
name|cacheCleanSize
expr_stmt|;
block|}
comment|/**    * Sets the cache cleaning frequency in milliseconds.    * @param cleanSleepTime cleaning frequency in milliseconds    */
DECL|method|setCleanThreadSleepTime
specifier|public
name|void
name|setCleanThreadSleepTime
parameter_list|(
name|long
name|cleanSleepTime
parameter_list|)
block|{
name|this
operator|.
name|cleanSleepTime
operator|=
name|cleanSleepTime
expr_stmt|;
block|}
comment|/**    * Returns the cached version of the filter.  Allows the caller to pass up    * a small filter but this will keep a persistent version around and allow    * the caching filter to do its job.    *     * @param filter The input filter    * @return The cached version of the filter    */
DECL|method|getFilter
specifier|public
name|Filter
name|getFilter
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
synchronized|synchronized
init|(
name|cache
init|)
block|{
name|FilterItem
name|fi
init|=
literal|null
decl_stmt|;
name|fi
operator|=
operator|(
name|FilterItem
operator|)
name|cache
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|filter
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fi
operator|!=
literal|null
condition|)
block|{
name|fi
operator|.
name|timestamp
operator|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
expr_stmt|;
return|return
name|fi
operator|.
name|filter
return|;
block|}
name|cache
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|filter
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|,
operator|new
name|FilterItem
argument_list|(
name|filter
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|filter
return|;
block|}
block|}
comment|/**    * Holds the filter and the last time the filter was used, to make LRU-based    * cache cleaning possible.    * TODO: Clean this up when we switch to Java 1.5    */
DECL|class|FilterItem
specifier|protected
class|class
name|FilterItem
block|{
DECL|field|filter
specifier|public
name|Filter
name|filter
decl_stmt|;
DECL|field|timestamp
specifier|public
name|long
name|timestamp
decl_stmt|;
DECL|method|FilterItem
specifier|public
name|FilterItem
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Keeps the cache from getting too big.    * If we were using Java 1.5, we could use LinkedHashMap and we would not need this thread    * to clean out the cache.    *     * The SortedSet sortedFilterItems is used only to sort the items from the cache,    * so when it's time to clean up we have the TreeSet sort the FilterItems by    * timestamp.    *     * Removes 1.5 * the numbers of items to make the cache smaller.    * For example:    * If cache clean size is 10, and the cache is at 15, we would remove (15 - 10) * 1.5 = 7.5 round up to 8.    * This way we clean the cache a bit more, and avoid having the cache cleaner having to do it frequently.    */
DECL|class|FilterCleaner
specifier|protected
class|class
name|FilterCleaner
implements|implements
name|Runnable
block|{
DECL|field|running
specifier|private
name|boolean
name|running
init|=
literal|true
decl_stmt|;
DECL|field|sortedFilterItems
specifier|private
name|TreeSet
name|sortedFilterItems
decl_stmt|;
DECL|method|FilterCleaner
specifier|public
name|FilterCleaner
parameter_list|()
block|{
name|sortedFilterItems
operator|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|Comparator
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|instanceof
name|Map
operator|.
name|Entry
operator|&&
name|b
operator|instanceof
name|Map
operator|.
name|Entry
condition|)
block|{
name|FilterItem
name|fia
init|=
call|(
name|FilterItem
call|)
argument_list|(
operator|(
name|Map
operator|.
name|Entry
operator|)
name|a
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|FilterItem
name|fib
init|=
call|(
name|FilterItem
call|)
argument_list|(
operator|(
name|Map
operator|.
name|Entry
operator|)
name|b
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|fia
operator|.
name|timestamp
operator|==
name|fib
operator|.
name|timestamp
condition|)
block|{
return|return
literal|0
return|;
block|}
comment|// smaller timestamp first
if|if
condition|(
name|fia
operator|.
name|timestamp
operator|<
name|fib
operator|.
name|timestamp
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
comment|// larger timestamp last
return|return
literal|1
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|"Objects are not Map.Entry"
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|running
condition|)
block|{
comment|// sort items from oldest to newest
comment|// we delete the oldest filters
if|if
condition|(
name|cache
operator|.
name|size
argument_list|()
operator|>
name|cacheCleanSize
condition|)
block|{
comment|// empty the temporary set
name|sortedFilterItems
operator|.
name|clear
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|cache
init|)
block|{
name|sortedFilterItems
operator|.
name|addAll
argument_list|(
name|cache
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|sortedFilterItems
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|numToDelete
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|cache
operator|.
name|size
argument_list|()
operator|-
name|cacheCleanSize
operator|)
operator|*
literal|1.5
argument_list|)
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
comment|// loop over the set and delete all of the cache entries not used in a while
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
name|counter
operator|++
operator|<
name|numToDelete
condition|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|cache
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// empty the set so we don't tie up the memory
name|sortedFilterItems
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// take a nap
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|cleanSleepTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
end_class
end_unit
