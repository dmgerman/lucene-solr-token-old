begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermDocs
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * @author yonik  * @version $Id$  */
end_comment
begin_class
DECL|class|PrefixFilter
specifier|public
class|class
name|PrefixFilter
extends|extends
name|Filter
block|{
DECL|field|prefix
specifier|protected
specifier|final
name|Term
name|prefix
decl_stmt|;
DECL|method|PrefixFilter
specifier|public
name|PrefixFilter
parameter_list|(
name|Term
name|prefix
parameter_list|)
block|{
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
block|}
DECL|method|getPrefix
specifier|public
name|Term
name|getPrefix
parameter_list|()
block|{
return|return
name|prefix
return|;
block|}
DECL|method|bits
specifier|public
name|BitSet
name|bits
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BitSet
name|bitSet
init|=
operator|new
name|BitSet
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
operator|new
name|PrefixGenerator
argument_list|(
name|prefix
argument_list|)
block|{
specifier|public
name|void
name|handleDoc
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|bitSet
operator|.
name|set
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|generate
argument_list|(
name|reader
argument_list|)
expr_stmt|;
return|return
name|bitSet
return|;
block|}
comment|/** Prints a user-readable version of this query. */
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"PrefixFilter("
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|prefix
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class
begin_comment
comment|// keep this protected until I decide if it's a good way
end_comment
begin_comment
comment|// to separate id generation from collection (or should
end_comment
begin_comment
comment|// I just reuse hitcollector???)
end_comment
begin_interface
DECL|interface|IdGenerator
interface|interface
name|IdGenerator
block|{
DECL|method|generate
specifier|public
name|void
name|generate
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|handleDoc
specifier|public
name|void
name|handleDoc
parameter_list|(
name|int
name|doc
parameter_list|)
function_decl|;
block|}
end_interface
begin_class
DECL|class|PrefixGenerator
specifier|abstract
class|class
name|PrefixGenerator
implements|implements
name|IdGenerator
block|{
DECL|field|prefix
specifier|protected
specifier|final
name|Term
name|prefix
decl_stmt|;
DECL|method|PrefixGenerator
name|PrefixGenerator
parameter_list|(
name|Term
name|prefix
parameter_list|)
block|{
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
block|}
DECL|method|generate
specifier|public
name|void
name|generate
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|TermEnum
name|enumerator
init|=
name|reader
operator|.
name|terms
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
name|TermDocs
name|termDocs
init|=
name|reader
operator|.
name|termDocs
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|prefixText
init|=
name|prefix
operator|.
name|text
argument_list|()
decl_stmt|;
name|String
name|prefixField
init|=
name|prefix
operator|.
name|field
argument_list|()
decl_stmt|;
do|do
block|{
name|Term
name|term
init|=
name|enumerator
operator|.
name|term
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|!=
literal|null
operator|&&
name|term
operator|.
name|text
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefixText
argument_list|)
operator|&&
name|term
operator|.
name|field
argument_list|()
operator|==
name|prefixField
condition|)
block|{
name|termDocs
operator|.
name|seek
argument_list|(
name|term
argument_list|)
expr_stmt|;
while|while
condition|(
name|termDocs
operator|.
name|next
argument_list|()
condition|)
block|{
name|handleDoc
argument_list|(
name|termDocs
operator|.
name|doc
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
do|while
condition|(
name|enumerator
operator|.
name|next
argument_list|()
condition|)
do|;
block|}
finally|finally
block|{
name|termDocs
operator|.
name|close
argument_list|()
expr_stmt|;
name|enumerator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
