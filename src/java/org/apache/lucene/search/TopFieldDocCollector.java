begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_comment
comment|/** A {@link HitCollector} implementation that collects the top-sorting  * documents, returning them as a {@link TopFieldDocs}.  This is used by {@link  * IndexSearcher} to implement {@link TopFieldDocs}-based search.  *  *<p>This may be extended, overriding the collect method to, e.g.,  * conditionally invoke<code>super()</code> in order to filter which  * documents are collected.  **/
end_comment
begin_class
DECL|class|TopFieldDocCollector
specifier|public
class|class
name|TopFieldDocCollector
extends|extends
name|TopDocCollector
block|{
comment|/** Construct to collect a given number of hits.    * @param reader the index to be searched    * @param sort the sort criteria    * @param numHits the maximum number of hits to collect    */
DECL|method|TopFieldDocCollector
specifier|public
name|TopFieldDocCollector
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|Sort
name|sort
parameter_list|,
name|int
name|numHits
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|numHits
argument_list|,
operator|new
name|FieldSortedHitQueue
argument_list|(
name|reader
argument_list|,
name|sort
operator|.
name|fields
argument_list|,
name|numHits
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// javadoc inherited
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|,
name|float
name|score
parameter_list|)
block|{
if|if
condition|(
name|score
operator|>
literal|0.0f
condition|)
block|{
name|totalHits
operator|++
expr_stmt|;
name|hq
operator|.
name|insert
argument_list|(
operator|new
name|FieldDoc
argument_list|(
name|doc
argument_list|,
name|score
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// javadoc inherited
DECL|method|topDocs
specifier|public
name|TopDocs
name|topDocs
parameter_list|()
block|{
name|FieldSortedHitQueue
name|fshq
init|=
operator|(
name|FieldSortedHitQueue
operator|)
name|hq
decl_stmt|;
name|ScoreDoc
index|[]
name|scoreDocs
init|=
operator|new
name|ScoreDoc
index|[
name|fshq
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|fshq
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
comment|// put docs in array
name|scoreDocs
index|[
name|i
index|]
operator|=
name|fshq
operator|.
name|fillFields
argument_list|(
operator|(
name|FieldDoc
operator|)
name|fshq
operator|.
name|pop
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|TopFieldDocs
argument_list|(
name|totalHits
argument_list|,
name|scoreDocs
argument_list|,
name|fshq
operator|.
name|getFields
argument_list|()
argument_list|,
name|fshq
operator|.
name|getMaxScore
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class
end_unit
