begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/** Implements the wildcard search query. Supported wildcards are<code>*</code>, which  * matches any character sequence (including the empty one), and<code>?</code>,  * which matches any single character. Note this query can be slow, as it  * needs to iterate over all terms. In order to prevent extremely slow WildcardQueries,  * a Wildcard term must not start with one of the wildcards<code>*</code> or  *<code>?</code>.  *   * @see WildcardTermEnum  */
end_comment
begin_class
DECL|class|WildcardQuery
specifier|public
class|class
name|WildcardQuery
extends|extends
name|MultiTermQuery
block|{
DECL|method|WildcardQuery
specifier|public
name|WildcardQuery
parameter_list|(
name|Term
name|term
parameter_list|)
block|{
name|super
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
DECL|method|getEnum
specifier|protected
name|FilteredTermEnum
name|getEnum
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|WildcardTermEnum
argument_list|(
name|reader
argument_list|,
name|getTerm
argument_list|()
argument_list|)
return|;
block|}
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|WildcardQuery
condition|)
return|return
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
return|return
literal|false
return|;
block|}
block|}
end_class
end_unit
