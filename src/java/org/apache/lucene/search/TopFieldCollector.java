begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldValueHitQueue
operator|.
name|Entry
import|;
end_import
begin_comment
comment|/**  * A {@link HitCollector} that sorts by {@link SortField} using   * {@link FieldComparator}s.  *  *<b>NOTE:</b> This API is experimental and might change in  * incompatible ways in the next release.  */
end_comment
begin_class
DECL|class|TopFieldCollector
specifier|public
specifier|final
class|class
name|TopFieldCollector
extends|extends
name|MultiReaderHitCollector
block|{
DECL|field|queue
specifier|private
specifier|final
name|FieldValueHitQueue
name|queue
decl_stmt|;
DECL|field|comparators
specifier|private
specifier|final
name|FieldComparator
index|[]
name|comparators
decl_stmt|;
DECL|field|comparator1
specifier|private
name|FieldComparator
name|comparator1
decl_stmt|;
DECL|field|numComparators
specifier|private
specifier|final
name|int
name|numComparators
decl_stmt|;
DECL|field|reverseMul
specifier|private
name|int
index|[]
name|reverseMul
decl_stmt|;
DECL|field|reverseMul1
specifier|private
name|int
name|reverseMul1
init|=
literal|0
decl_stmt|;
DECL|field|numHits
specifier|private
specifier|final
name|int
name|numHits
decl_stmt|;
DECL|field|totalHits
specifier|private
name|int
name|totalHits
decl_stmt|;
DECL|field|bottom
specifier|private
name|FieldValueHitQueue
operator|.
name|Entry
name|bottom
init|=
literal|null
decl_stmt|;
comment|/** Stores the maximum score value encountered, needed for normalizing. */
DECL|field|maxScore
specifier|private
name|float
name|maxScore
init|=
name|Float
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
DECL|field|queueFull
specifier|private
name|boolean
name|queueFull
decl_stmt|;
DECL|field|fillFields
specifier|private
name|boolean
name|fillFields
decl_stmt|;
DECL|method|TopFieldCollector
specifier|public
name|TopFieldCollector
parameter_list|(
name|Sort
name|sort
parameter_list|,
name|int
name|numHits
parameter_list|,
name|IndexReader
index|[]
name|subReaders
parameter_list|,
name|boolean
name|fillFields
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sort
operator|.
name|fields
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Sort must contain at least one field"
argument_list|)
throw|;
block|}
name|queue
operator|=
operator|new
name|FieldValueHitQueue
argument_list|(
name|sort
operator|.
name|fields
argument_list|,
name|numHits
argument_list|,
name|subReaders
argument_list|)
expr_stmt|;
name|comparators
operator|=
name|queue
operator|.
name|getComparators
argument_list|()
expr_stmt|;
name|reverseMul
operator|=
name|queue
operator|.
name|getReverseMul
argument_list|()
expr_stmt|;
name|numComparators
operator|=
name|comparators
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|numComparators
operator|==
literal|1
condition|)
block|{
name|comparator1
operator|=
name|comparators
index|[
literal|0
index|]
expr_stmt|;
name|reverseMul1
operator|=
name|reverseMul
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|comparator1
operator|=
literal|null
expr_stmt|;
name|reverseMul1
operator|=
literal|0
expr_stmt|;
block|}
name|this
operator|.
name|numHits
operator|=
name|numHits
expr_stmt|;
name|this
operator|.
name|fillFields
operator|=
name|fillFields
expr_stmt|;
block|}
DECL|field|currentDocBase
name|int
name|currentDocBase
decl_stmt|;
comment|// javadoc inherited
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|int
name|docBase
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|numSlotsFull
decl_stmt|;
if|if
condition|(
name|queueFull
condition|)
name|numSlotsFull
operator|=
name|numHits
expr_stmt|;
else|else
name|numSlotsFull
operator|=
name|totalHits
expr_stmt|;
name|currentDocBase
operator|=
name|docBase
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numComparators
condition|;
name|i
operator|++
control|)
block|{
name|comparators
index|[
name|i
index|]
operator|.
name|setNextReader
argument_list|(
name|reader
argument_list|,
name|docBase
argument_list|,
name|numSlotsFull
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateBottom
specifier|private
specifier|final
name|void
name|updateBottom
parameter_list|(
name|int
name|doc
parameter_list|,
name|float
name|score
parameter_list|)
block|{
name|bottom
operator|.
name|docID
operator|=
name|currentDocBase
operator|+
name|doc
expr_stmt|;
name|bottom
operator|.
name|score
operator|=
name|score
expr_stmt|;
name|queue
operator|.
name|adjustTop
argument_list|()
expr_stmt|;
name|bottom
operator|=
operator|(
name|FieldValueHitQueue
operator|.
name|Entry
operator|)
name|queue
operator|.
name|top
argument_list|()
expr_stmt|;
block|}
DECL|method|add
specifier|private
specifier|final
name|void
name|add
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|,
name|float
name|score
parameter_list|)
block|{
name|queue
operator|.
name|put
argument_list|(
operator|new
name|FieldValueHitQueue
operator|.
name|Entry
argument_list|(
name|slot
argument_list|,
name|currentDocBase
operator|+
name|doc
argument_list|,
name|score
argument_list|)
argument_list|)
expr_stmt|;
name|bottom
operator|=
operator|(
name|FieldValueHitQueue
operator|.
name|Entry
operator|)
name|queue
operator|.
name|top
argument_list|()
expr_stmt|;
name|queueFull
operator|=
name|totalHits
operator|==
name|numHits
expr_stmt|;
block|}
comment|// javadoc inherited
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|,
name|float
name|score
parameter_list|)
block|{
if|if
condition|(
name|score
operator|>
literal|0.0f
condition|)
block|{
name|maxScore
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxScore
argument_list|,
name|score
argument_list|)
expr_stmt|;
name|totalHits
operator|++
expr_stmt|;
comment|// TODO: one optimization we could do is to pre-fill
comment|// the queue with sentinel value that guaranteed to
comment|// always compare lower than a real hit; this would
comment|// save having to check queueFull on each insert
if|if
condition|(
name|queueFull
condition|)
block|{
if|if
condition|(
name|numComparators
operator|==
literal|1
condition|)
block|{
comment|// Common case
comment|// Fastmatch: return if this hit is not competitive
specifier|final
name|int
name|cmp
init|=
name|reverseMul1
operator|*
name|comparator1
operator|.
name|compareBottom
argument_list|(
name|doc
argument_list|,
name|score
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
block|{
comment|// Definitely not competitive
return|return;
block|}
elseif|else
if|if
condition|(
name|cmp
operator|==
literal|0
operator|&&
name|doc
operator|+
name|currentDocBase
operator|>
name|bottom
operator|.
name|docID
condition|)
block|{
comment|// Definitely not competitive
return|return;
block|}
comment|// This hit is competitive -- replace bottom
comment|// element in queue& adjustTop
name|comparator1
operator|.
name|copy
argument_list|(
name|bottom
operator|.
name|slot
argument_list|,
name|doc
argument_list|,
name|score
argument_list|)
expr_stmt|;
name|updateBottom
argument_list|(
name|doc
argument_list|,
name|score
argument_list|)
expr_stmt|;
name|comparator1
operator|.
name|setBottom
argument_list|(
name|bottom
operator|.
name|slot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Fastmatch: return if this hit is not competitive
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|c
init|=
name|reverseMul
index|[
name|i
index|]
operator|*
name|comparators
index|[
name|i
index|]
operator|.
name|compareBottom
argument_list|(
name|doc
argument_list|,
name|score
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|<
literal|0
condition|)
block|{
comment|// Definitely not competitive
return|return;
block|}
elseif|else
if|if
condition|(
name|c
operator|>
literal|0
condition|)
block|{
comment|// Definitely competitive
break|break;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
name|numComparators
operator|-
literal|1
condition|)
block|{
comment|// This is the equals case.
if|if
condition|(
name|doc
operator|+
name|currentDocBase
operator|>
name|bottom
operator|.
name|docID
condition|)
block|{
comment|// Definitely not competitive
return|return;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
comment|// This hit is competitive -- replace bottom
comment|// element in queue& adjustTop
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numComparators
condition|;
name|i
operator|++
control|)
block|{
name|comparators
index|[
name|i
index|]
operator|.
name|copy
argument_list|(
name|bottom
operator|.
name|slot
argument_list|,
name|doc
argument_list|,
name|score
argument_list|)
expr_stmt|;
block|}
name|updateBottom
argument_list|(
name|doc
argument_list|,
name|score
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numComparators
condition|;
name|i
operator|++
control|)
block|{
name|comparators
index|[
name|i
index|]
operator|.
name|setBottom
argument_list|(
name|bottom
operator|.
name|slot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// Startup transient: queue hasn't gathered numHits
comment|// yet
specifier|final
name|int
name|slot
init|=
name|totalHits
operator|-
literal|1
decl_stmt|;
comment|// Copy hit into queue
if|if
condition|(
name|numComparators
operator|==
literal|1
condition|)
block|{
comment|// Common case
name|comparator1
operator|.
name|copy
argument_list|(
name|slot
argument_list|,
name|doc
argument_list|,
name|score
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|slot
argument_list|,
name|doc
argument_list|,
name|score
argument_list|)
expr_stmt|;
if|if
condition|(
name|queueFull
condition|)
block|{
name|comparator1
operator|.
name|setBottom
argument_list|(
name|bottom
operator|.
name|slot
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numComparators
condition|;
name|i
operator|++
control|)
block|{
name|comparators
index|[
name|i
index|]
operator|.
name|copy
argument_list|(
name|slot
argument_list|,
name|doc
argument_list|,
name|score
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
name|slot
argument_list|,
name|doc
argument_list|,
name|score
argument_list|)
expr_stmt|;
if|if
condition|(
name|queueFull
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numComparators
condition|;
name|i
operator|++
control|)
block|{
name|comparators
index|[
name|i
index|]
operator|.
name|setBottom
argument_list|(
name|bottom
operator|.
name|slot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|// javadoc inherited
DECL|method|topDocs
specifier|public
name|TopDocs
name|topDocs
parameter_list|()
block|{
name|ScoreDoc
index|[]
name|scoreDocs
init|=
operator|new
name|ScoreDoc
index|[
name|queue
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
name|fillFields
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|queue
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|scoreDocs
index|[
name|i
index|]
operator|=
name|queue
operator|.
name|fillFields
argument_list|(
operator|(
name|FieldValueHitQueue
operator|.
name|Entry
operator|)
name|queue
operator|.
name|pop
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Entry
name|entry
init|=
operator|(
name|FieldValueHitQueue
operator|.
name|Entry
operator|)
name|queue
operator|.
name|pop
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|queue
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|scoreDocs
index|[
name|i
index|]
operator|=
operator|new
name|FieldDoc
argument_list|(
name|entry
operator|.
name|docID
argument_list|,
name|entry
operator|.
name|score
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|TopFieldDocs
argument_list|(
name|totalHits
argument_list|,
name|scoreDocs
argument_list|,
name|queue
operator|.
name|getFields
argument_list|()
argument_list|,
name|maxScore
argument_list|)
return|;
block|}
block|}
end_class
end_unit
