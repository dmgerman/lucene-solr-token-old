begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache Lucene" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Lucene", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|*
import|;
end_import
begin_class
DECL|class|PhraseScorer
specifier|abstract
class|class
name|PhraseScorer
extends|extends
name|Scorer
block|{
DECL|field|norms
specifier|protected
name|byte
index|[]
name|norms
decl_stmt|;
DECL|field|weight
specifier|protected
name|float
name|weight
decl_stmt|;
DECL|field|pq
specifier|protected
name|PhraseQueue
name|pq
decl_stmt|;
DECL|field|first
DECL|field|last
specifier|protected
name|PhrasePositions
name|first
decl_stmt|,
name|last
decl_stmt|;
DECL|method|PhraseScorer
name|PhraseScorer
parameter_list|(
name|TermPositions
index|[]
name|tps
parameter_list|,
name|byte
index|[]
name|n
parameter_list|,
name|float
name|w
parameter_list|)
throws|throws
name|IOException
block|{
name|norms
operator|=
name|n
expr_stmt|;
name|weight
operator|=
name|w
expr_stmt|;
comment|// use PQ to build a sorted list of PhrasePositions
name|pq
operator|=
operator|new
name|PhraseQueue
argument_list|(
name|tps
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tps
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|pq
operator|.
name|put
argument_list|(
operator|new
name|PhrasePositions
argument_list|(
name|tps
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|pqToList
argument_list|()
expr_stmt|;
block|}
DECL|method|score
specifier|final
name|void
name|score
parameter_list|(
name|HitCollector
name|results
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|last
operator|.
name|doc
operator|<
name|end
condition|)
block|{
comment|// find doc w/ all the terms
while|while
condition|(
name|first
operator|.
name|doc
operator|<
name|last
operator|.
name|doc
condition|)
block|{
comment|// scan forward in first
do|do
block|{
name|first
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|first
operator|.
name|doc
operator|<
name|last
operator|.
name|doc
condition|)
do|;
name|firstToLast
argument_list|()
expr_stmt|;
if|if
condition|(
name|last
operator|.
name|doc
operator|>=
name|end
condition|)
return|return;
block|}
comment|// found doc with all terms
name|float
name|freq
init|=
name|phraseFreq
argument_list|()
decl_stmt|;
comment|// check for phrase
if|if
condition|(
name|freq
operator|>
literal|0.0
condition|)
block|{
name|float
name|score
init|=
name|Similarity
operator|.
name|tf
argument_list|(
name|freq
argument_list|)
operator|*
name|weight
decl_stmt|;
comment|// compute score
name|score
operator|*=
name|Similarity
operator|.
name|decodeNorm
argument_list|(
name|norms
index|[
name|first
operator|.
name|doc
index|]
argument_list|)
expr_stmt|;
comment|// normalize
name|results
operator|.
name|collect
argument_list|(
name|first
operator|.
name|doc
argument_list|,
name|score
argument_list|)
expr_stmt|;
comment|// add to results
block|}
name|last
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// resume scanning
block|}
block|}
DECL|method|phraseFreq
specifier|abstract
specifier|protected
name|float
name|phraseFreq
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|pqToList
specifier|protected
specifier|final
name|void
name|pqToList
parameter_list|()
block|{
name|last
operator|=
name|first
operator|=
literal|null
expr_stmt|;
while|while
condition|(
name|pq
operator|.
name|top
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|PhrasePositions
name|pp
init|=
operator|(
name|PhrasePositions
operator|)
name|pq
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
comment|// add next to end of list
name|last
operator|.
name|next
operator|=
name|pp
expr_stmt|;
block|}
else|else
name|first
operator|=
name|pp
expr_stmt|;
name|last
operator|=
name|pp
expr_stmt|;
name|pp
operator|.
name|next
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|firstToLast
specifier|protected
specifier|final
name|void
name|firstToLast
parameter_list|()
block|{
name|last
operator|.
name|next
operator|=
name|first
expr_stmt|;
comment|// move first to end of list
name|last
operator|=
name|first
expr_stmt|;
name|first
operator|=
name|first
operator|.
name|next
expr_stmt|;
name|last
operator|.
name|next
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class
end_unit
