begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermEnum
import|;
end_import
begin_comment
comment|/** Abstract class for enumerating a subset of all terms.<p>Term enumerations are always ordered by Term.compareTo().  Each term in   the enumeration is greater than all that precede it.  */
end_comment
begin_class
DECL|class|FilteredTermEnum
specifier|public
specifier|abstract
class|class
name|FilteredTermEnum
extends|extends
name|TermEnum
block|{
DECL|field|currentTerm
specifier|private
name|Term
name|currentTerm
init|=
literal|null
decl_stmt|;
DECL|field|actualEnum
specifier|private
name|TermEnum
name|actualEnum
init|=
literal|null
decl_stmt|;
DECL|method|FilteredTermEnum
specifier|public
name|FilteredTermEnum
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|Term
name|term
parameter_list|)
throws|throws
name|IOException
block|{}
comment|/** Equality compare on the term */
DECL|method|termCompare
specifier|protected
specifier|abstract
name|boolean
name|termCompare
parameter_list|(
name|Term
name|term
parameter_list|)
function_decl|;
comment|/** Equality measure on the term */
DECL|method|difference
specifier|protected
specifier|abstract
name|float
name|difference
parameter_list|()
function_decl|;
comment|/** Indiciates the end of the enumeration has been reached */
DECL|method|endEnum
specifier|protected
specifier|abstract
name|boolean
name|endEnum
parameter_list|()
function_decl|;
DECL|method|setEnum
specifier|protected
name|void
name|setEnum
parameter_list|(
name|TermEnum
name|actualEnum
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|actualEnum
operator|=
name|actualEnum
expr_stmt|;
comment|// Find the first term that matches
name|Term
name|term
init|=
name|actualEnum
operator|.
name|term
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|!=
literal|null
operator|&&
name|termCompare
argument_list|(
name|term
argument_list|)
condition|)
name|currentTerm
operator|=
name|term
expr_stmt|;
else|else
name|next
argument_list|()
expr_stmt|;
block|}
comment|/**       * Returns the docFreq of the current Term in the enumeration.      * Initially invalid, valid after next() called for the first time.       */
DECL|method|docFreq
specifier|public
name|int
name|docFreq
parameter_list|()
block|{
if|if
condition|(
name|actualEnum
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|actualEnum
operator|.
name|docFreq
argument_list|()
return|;
block|}
comment|/** Increments the enumeration to the next element.  True if one exists. */
DECL|method|next
specifier|public
name|boolean
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|actualEnum
operator|==
literal|null
condition|)
return|return
literal|false
return|;
comment|// the actual enumerator is not initialized!
name|currentTerm
operator|=
literal|null
expr_stmt|;
while|while
condition|(
name|currentTerm
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|endEnum
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|actualEnum
operator|.
name|next
argument_list|()
condition|)
block|{
name|Term
name|term
init|=
name|actualEnum
operator|.
name|term
argument_list|()
decl_stmt|;
if|if
condition|(
name|termCompare
argument_list|(
name|term
argument_list|)
condition|)
block|{
name|currentTerm
operator|=
name|term
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
else|else
return|return
literal|false
return|;
block|}
name|currentTerm
operator|=
literal|null
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/** Returns the current Term in the enumeration.      * Initially invalid, valid after next() called for the first time. */
DECL|method|term
specifier|public
name|Term
name|term
parameter_list|()
block|{
return|return
name|currentTerm
return|;
block|}
comment|/** Closes the enumeration to further activity, freeing resources.  */
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|actualEnum
operator|.
name|close
argument_list|()
expr_stmt|;
name|currentTerm
operator|=
literal|null
expr_stmt|;
name|actualEnum
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class
end_unit
