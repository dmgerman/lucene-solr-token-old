begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * A range query that returns a constant score equal to it's boost for  * all documents in the range.  *<p>  * It does not have an upper bound on the number of clauses covered in the range.  *<p>  * If an endpoint is null, it is said to be "open".  * Either or both endpoints may be open.  Open endpoints may not be exclusive  * (you can't select all but the first or last term without explicitly specifying the term to exclude.)  *  * @author yonik  * @version $Id$  */
end_comment
begin_class
DECL|class|ConstantScoreRangeQuery
specifier|public
class|class
name|ConstantScoreRangeQuery
extends|extends
name|Query
block|{
DECL|field|fieldName
specifier|private
specifier|final
name|String
name|fieldName
decl_stmt|;
DECL|field|lowerVal
specifier|private
specifier|final
name|String
name|lowerVal
decl_stmt|;
DECL|field|upperVal
specifier|private
specifier|final
name|String
name|upperVal
decl_stmt|;
DECL|field|includeLower
specifier|private
specifier|final
name|boolean
name|includeLower
decl_stmt|;
DECL|field|includeUpper
specifier|private
specifier|final
name|boolean
name|includeUpper
decl_stmt|;
DECL|method|ConstantScoreRangeQuery
specifier|public
name|ConstantScoreRangeQuery
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|lowerVal
parameter_list|,
name|String
name|upperVal
parameter_list|,
name|boolean
name|includeLower
parameter_list|,
name|boolean
name|includeUpper
parameter_list|)
block|{
comment|// do a little bit of normalization...
comment|// open ended range queries should always be inclusive.
if|if
condition|(
name|lowerVal
operator|==
literal|null
condition|)
block|{
name|includeLower
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|includeLower
operator|&&
name|lowerVal
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|lowerVal
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|upperVal
operator|==
literal|null
condition|)
block|{
name|includeUpper
operator|=
literal|true
expr_stmt|;
block|}
name|this
operator|.
name|fieldName
operator|=
name|fieldName
operator|.
name|intern
argument_list|()
expr_stmt|;
comment|// intern it, just like terms...
name|this
operator|.
name|lowerVal
operator|=
name|lowerVal
expr_stmt|;
name|this
operator|.
name|upperVal
operator|=
name|upperVal
expr_stmt|;
name|this
operator|.
name|includeLower
operator|=
name|includeLower
expr_stmt|;
name|this
operator|.
name|includeUpper
operator|=
name|includeUpper
expr_stmt|;
block|}
comment|/** Returns the field name for this query */
DECL|method|getField
specifier|public
name|String
name|getField
parameter_list|()
block|{
return|return
name|fieldName
return|;
block|}
comment|/** Returns the value of the lower endpoint of this range query, null if open ended */
DECL|method|getLowerVal
specifier|public
name|String
name|getLowerVal
parameter_list|()
block|{
return|return
name|lowerVal
return|;
block|}
comment|/** Returns the value of the upper endpoint of this range query, null if open ended */
DECL|method|getUpperVal
specifier|public
name|String
name|getUpperVal
parameter_list|()
block|{
return|return
name|upperVal
return|;
block|}
comment|/** Returns<code>true</code> if the lower endpoint is inclusive */
DECL|method|includesLower
specifier|public
name|boolean
name|includesLower
parameter_list|()
block|{
return|return
name|includeLower
return|;
block|}
comment|/** Returns<code>true</code> if the upper endpoint is inclusive */
DECL|method|includesUpper
specifier|public
name|boolean
name|includesUpper
parameter_list|()
block|{
return|return
name|includeUpper
return|;
block|}
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Map to RangeFilter semantics which are slightly different...
name|RangeFilter
name|rangeFilt
init|=
operator|new
name|RangeFilter
argument_list|(
name|fieldName
argument_list|,
name|lowerVal
operator|!=
literal|null
condition|?
name|lowerVal
else|:
literal|""
argument_list|,
name|upperVal
argument_list|,
name|lowerVal
operator|==
literal|""
condition|?
literal|false
else|:
name|includeLower
argument_list|,
name|upperVal
operator|==
literal|null
condition|?
literal|false
else|:
name|includeUpper
argument_list|)
decl_stmt|;
name|Query
name|q
init|=
operator|new
name|ConstantScoreQuery
argument_list|(
name|rangeFilt
argument_list|)
decl_stmt|;
name|q
operator|.
name|setBoost
argument_list|(
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|q
return|;
block|}
comment|/** Prints a user-readable version of this query. */
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|getField
argument_list|()
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|includeLower
condition|?
literal|'['
else|:
literal|'{'
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|lowerVal
operator|!=
literal|null
condition|?
name|lowerVal
else|:
literal|"*"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|" TO "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|upperVal
operator|!=
literal|null
condition|?
name|upperVal
else|:
literal|"*"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|includeUpper
condition|?
literal|']'
else|:
literal|'}'
argument_list|)
expr_stmt|;
if|if
condition|(
name|getBoost
argument_list|()
operator|!=
literal|1.0f
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"^"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|Float
operator|.
name|toString
argument_list|(
name|getBoost
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Returns true if<code>o</code> is equal to this. */
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|ConstantScoreRangeQuery
operator|)
condition|)
return|return
literal|false
return|;
name|ConstantScoreRangeQuery
name|other
init|=
operator|(
name|ConstantScoreRangeQuery
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|fieldName
operator|!=
name|other
operator|.
name|fieldName
comment|// interned comparison
operator|||
name|this
operator|.
name|includeLower
operator|!=
name|other
operator|.
name|includeLower
operator|||
name|this
operator|.
name|includeUpper
operator|!=
name|other
operator|.
name|includeUpper
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|lowerVal
operator|!=
literal|null
condition|?
operator|!
name|this
operator|.
name|lowerVal
operator|.
name|equals
argument_list|(
name|other
operator|.
name|lowerVal
argument_list|)
else|:
name|other
operator|.
name|lowerVal
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|upperVal
operator|!=
literal|null
condition|?
operator|!
name|this
operator|.
name|upperVal
operator|.
name|equals
argument_list|(
name|other
operator|.
name|upperVal
argument_list|)
else|:
name|other
operator|.
name|upperVal
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|this
operator|.
name|getBoost
argument_list|()
operator|==
name|other
operator|.
name|getBoost
argument_list|()
return|;
block|}
comment|/** Returns a hash code value for this object.*/
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|h
init|=
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|getBoost
argument_list|()
argument_list|)
operator|^
name|fieldName
operator|.
name|hashCode
argument_list|()
decl_stmt|;
comment|// hashCode of "" is 0, so don't use that for null...
name|h
operator|^=
name|lowerVal
operator|!=
literal|null
condition|?
name|lowerVal
operator|.
name|hashCode
argument_list|()
else|:
literal|0x965a965a
expr_stmt|;
comment|// don't just XOR upperVal with out mixing either it or h, as it will cancel
comment|// out lowerVal if they are equal.
name|h
operator|^=
operator|(
name|h
operator|<<
literal|17
operator|)
operator||
operator|(
name|h
operator|>>>
literal|16
operator|)
expr_stmt|;
comment|// a reversible (one to one) 32 bit mapping mix
name|h
operator|^=
operator|(
name|upperVal
operator|!=
literal|null
condition|?
operator|(
name|upperVal
operator|.
name|hashCode
argument_list|()
operator|)
else|:
literal|0x5a695a69
operator|)
expr_stmt|;
name|h
operator|^=
operator|(
name|includeLower
condition|?
literal|0x665599aa
else|:
literal|0
operator|)
operator|^
operator|(
name|includeUpper
condition|?
literal|0x99aa5566
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|h
return|;
block|}
block|}
end_class
end_unit
