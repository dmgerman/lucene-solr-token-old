begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DateField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_comment
comment|/**  * A Filter that restricts search results to a range of time.  *  *<p>For this to work, documents must have been indexed with a  * {@link DateField}.  */
end_comment
begin_class
DECL|class|DateFilter
specifier|public
class|class
name|DateFilter
extends|extends
name|Filter
block|{
DECL|field|field
name|String
name|field
decl_stmt|;
DECL|field|start
name|String
name|start
init|=
name|DateField
operator|.
name|MIN_DATE_STRING
argument_list|()
decl_stmt|;
DECL|field|end
name|String
name|end
init|=
name|DateField
operator|.
name|MAX_DATE_STRING
argument_list|()
decl_stmt|;
DECL|method|DateFilter
specifier|private
name|DateFilter
parameter_list|(
name|String
name|f
parameter_list|)
block|{
name|field
operator|=
name|f
expr_stmt|;
block|}
comment|/**    * Constructs a filter for field<code>f</code> matching dates    * between<code>from</code> and<code>to</code> inclusively.    */
DECL|method|DateFilter
specifier|public
name|DateFilter
parameter_list|(
name|String
name|f
parameter_list|,
name|Date
name|from
parameter_list|,
name|Date
name|to
parameter_list|)
block|{
name|field
operator|=
name|f
expr_stmt|;
name|start
operator|=
name|DateField
operator|.
name|dateToString
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|end
operator|=
name|DateField
operator|.
name|dateToString
argument_list|(
name|to
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs a filter for field<code>f</code> matching times    * between<code>from</code> and<code>to</code> inclusively.    */
DECL|method|DateFilter
specifier|public
name|DateFilter
parameter_list|(
name|String
name|f
parameter_list|,
name|long
name|from
parameter_list|,
name|long
name|to
parameter_list|)
block|{
name|field
operator|=
name|f
expr_stmt|;
name|start
operator|=
name|DateField
operator|.
name|timeToString
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|end
operator|=
name|DateField
operator|.
name|timeToString
argument_list|(
name|to
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs a filter for field<code>f</code> matching    * dates on or before before<code>date</code>.    */
DECL|method|Before
specifier|public
specifier|static
name|DateFilter
name|Before
parameter_list|(
name|String
name|field
parameter_list|,
name|Date
name|date
parameter_list|)
block|{
name|DateFilter
name|result
init|=
operator|new
name|DateFilter
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|result
operator|.
name|end
operator|=
name|DateField
operator|.
name|dateToString
argument_list|(
name|date
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Constructs a filter for field<code>f</code> matching times    * on or before<code>time</code>.    */
DECL|method|Before
specifier|public
specifier|static
name|DateFilter
name|Before
parameter_list|(
name|String
name|field
parameter_list|,
name|long
name|time
parameter_list|)
block|{
name|DateFilter
name|result
init|=
operator|new
name|DateFilter
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|result
operator|.
name|end
operator|=
name|DateField
operator|.
name|timeToString
argument_list|(
name|time
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Constructs a filter for field<code>f</code> matching    * dates on or after<code>date</code>.    */
DECL|method|After
specifier|public
specifier|static
name|DateFilter
name|After
parameter_list|(
name|String
name|field
parameter_list|,
name|Date
name|date
parameter_list|)
block|{
name|DateFilter
name|result
init|=
operator|new
name|DateFilter
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|result
operator|.
name|start
operator|=
name|DateField
operator|.
name|dateToString
argument_list|(
name|date
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Constructs a filter for field<code>f</code> matching    * times on or after<code>time</code>.    */
DECL|method|After
specifier|public
specifier|static
name|DateFilter
name|After
parameter_list|(
name|String
name|field
parameter_list|,
name|long
name|time
parameter_list|)
block|{
name|DateFilter
name|result
init|=
operator|new
name|DateFilter
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|result
operator|.
name|start
operator|=
name|DateField
operator|.
name|timeToString
argument_list|(
name|time
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Returns a BitSet with true for documents which should be    * permitted in search results, and false for those that should    * not.    */
DECL|method|bits
specifier|public
name|BitSet
name|bits
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|BitSet
name|bits
init|=
operator|new
name|BitSet
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
name|TermEnum
name|enumerator
init|=
name|reader
operator|.
name|terms
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|start
argument_list|)
argument_list|)
decl_stmt|;
name|TermDocs
name|termDocs
init|=
name|reader
operator|.
name|termDocs
argument_list|()
decl_stmt|;
if|if
condition|(
name|enumerator
operator|.
name|term
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|bits
return|;
block|}
try|try
block|{
name|Term
name|stop
init|=
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|end
argument_list|)
decl_stmt|;
while|while
condition|(
name|enumerator
operator|.
name|term
argument_list|()
operator|.
name|compareTo
argument_list|(
name|stop
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|termDocs
operator|.
name|seek
argument_list|(
name|enumerator
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|termDocs
operator|.
name|next
argument_list|()
condition|)
block|{
name|bits
operator|.
name|set
argument_list|(
name|termDocs
operator|.
name|doc
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|enumerator
operator|.
name|next
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
finally|finally
block|{
name|enumerator
operator|.
name|close
argument_list|()
expr_stmt|;
name|termDocs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|bits
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|DateField
operator|.
name|stringToDate
argument_list|(
name|start
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|DateField
operator|.
name|stringToDate
argument_list|(
name|end
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class
end_unit
