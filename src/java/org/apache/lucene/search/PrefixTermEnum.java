begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_comment
comment|/**  * Subclass of FilteredTermEnum for enumerating all terms that match the  * specified prefix filter term.  *<p>  * Term enumerations are always ordered by Term.compareTo().  Each term in  * the enumeration is greater than all that precede it.  *  */
end_comment
begin_class
DECL|class|PrefixTermEnum
specifier|public
class|class
name|PrefixTermEnum
extends|extends
name|FilteredTermEnum
block|{
DECL|field|prefix
specifier|private
name|Term
name|prefix
decl_stmt|;
DECL|field|endEnum
specifier|private
name|boolean
name|endEnum
init|=
literal|false
decl_stmt|;
DECL|method|PrefixTermEnum
specifier|public
name|PrefixTermEnum
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|Term
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
name|setEnum
argument_list|(
name|reader
operator|.
name|terms
argument_list|(
operator|new
name|Term
argument_list|(
name|prefix
operator|.
name|field
argument_list|()
argument_list|,
name|prefix
operator|.
name|text
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|difference
specifier|public
name|float
name|difference
parameter_list|()
block|{
return|return
literal|1.0f
return|;
block|}
DECL|method|endEnum
specifier|protected
name|boolean
name|endEnum
parameter_list|()
block|{
return|return
name|endEnum
return|;
block|}
DECL|method|termCompare
specifier|protected
name|boolean
name|termCompare
parameter_list|(
name|Term
name|term
parameter_list|)
block|{
if|if
condition|(
name|term
operator|.
name|field
argument_list|()
operator|==
name|prefix
operator|.
name|field
argument_list|()
operator|&&
name|term
operator|.
name|text
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
operator|.
name|text
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|endEnum
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
end_class
end_unit
