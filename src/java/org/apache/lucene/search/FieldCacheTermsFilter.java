begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|OpenBitSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_comment
comment|/**  * A term filter built on top of a cached single field (in FieldCache). It can be used only  * with single-valued fields.  *<p/>  * FieldCacheTermsFilter builds a single cache for the field the first time it is used. Each  * subsequent FieldCacheTermsFilter on the same field then re-uses this cache even if the terms  * themselves are different.  *<p/>  * The FieldCacheTermsFilter is faster than building a TermsFilter each time.  * FieldCacheTermsFilter are fast to build in cases where number of documents are far more than  * unique terms. Internally, it creates a BitSet by term number and scans by document id.  *<p/>  * As with all FieldCache based functionality, FieldCacheTermsFilter is only valid for fields  * which contain zero or one terms for each document. Thus it works on dates, prices and other  * single value fields but will not work on regular text fields. It is preferable to use an  * NOT_ANALYZED field to ensure that there is only a single term.  *<p/>  * Also, collation is performed at the time the FieldCache is built; to change collation you  * need to override the getFieldCache() method to change the underlying cache.  */
end_comment
begin_class
DECL|class|FieldCacheTermsFilter
specifier|public
class|class
name|FieldCacheTermsFilter
extends|extends
name|Filter
block|{
DECL|field|field
specifier|private
name|String
name|field
decl_stmt|;
DECL|field|terms
specifier|private
name|Iterable
name|terms
decl_stmt|;
DECL|method|FieldCacheTermsFilter
specifier|public
name|FieldCacheTermsFilter
parameter_list|(
name|String
name|field
parameter_list|,
name|Iterable
name|terms
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|terms
operator|=
name|terms
expr_stmt|;
block|}
DECL|method|getFieldCache
specifier|public
name|FieldCache
name|getFieldCache
parameter_list|()
block|{
return|return
name|FieldCache
operator|.
name|DEFAULT
return|;
block|}
DECL|method|getDocIdSet
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FieldCacheTermsFilterDocIdSet
argument_list|(
name|getFieldCache
argument_list|()
operator|.
name|getStringIndex
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
argument_list|)
return|;
block|}
DECL|class|FieldCacheTermsFilterDocIdSet
specifier|protected
class|class
name|FieldCacheTermsFilterDocIdSet
extends|extends
name|DocIdSet
block|{
DECL|field|fcsi
specifier|private
name|FieldCache
operator|.
name|StringIndex
name|fcsi
decl_stmt|;
DECL|field|openBitSet
specifier|private
name|OpenBitSet
name|openBitSet
decl_stmt|;
DECL|method|FieldCacheTermsFilterDocIdSet
specifier|public
name|FieldCacheTermsFilterDocIdSet
parameter_list|(
name|FieldCache
operator|.
name|StringIndex
name|fcsi
parameter_list|)
block|{
name|this
operator|.
name|fcsi
operator|=
name|fcsi
expr_stmt|;
name|openBitSet
operator|=
operator|new
name|OpenBitSet
argument_list|(
name|this
operator|.
name|fcsi
operator|.
name|lookup
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|terms
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|term
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|termNumber
init|=
name|this
operator|.
name|fcsi
operator|.
name|binarySearchLookup
argument_list|(
operator|(
name|String
operator|)
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|termNumber
operator|>
literal|0
condition|)
block|{
name|openBitSet
operator|.
name|fastSet
argument_list|(
name|termNumber
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|iterator
specifier|public
name|DocIdSetIterator
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|FieldCacheTermsFilterDocIdSetIterator
argument_list|()
return|;
block|}
DECL|class|FieldCacheTermsFilterDocIdSetIterator
specifier|protected
class|class
name|FieldCacheTermsFilterDocIdSetIterator
extends|extends
name|DocIdSetIterator
block|{
DECL|field|doc
specifier|private
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|doc
specifier|public
name|int
name|doc
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
DECL|method|next
specifier|public
name|boolean
name|next
parameter_list|()
block|{
try|try
block|{
do|do
block|{
name|doc
operator|++
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|openBitSet
operator|.
name|fastGet
argument_list|(
name|fcsi
operator|.
name|order
index|[
name|doc
index|]
argument_list|)
condition|)
do|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
name|doc
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|method|skipTo
specifier|public
name|boolean
name|skipTo
parameter_list|(
name|int
name|target
parameter_list|)
block|{
try|try
block|{
name|doc
operator|=
name|target
expr_stmt|;
while|while
condition|(
operator|!
name|openBitSet
operator|.
name|fastGet
argument_list|(
name|fcsi
operator|.
name|order
index|[
name|doc
index|]
argument_list|)
condition|)
block|{
name|doc
operator|++
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
name|doc
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
block|}
end_class
end_unit
