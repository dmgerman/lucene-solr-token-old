begin_unit
begin_comment
comment|/* Generated By:JavaCC: Do not edit this line. QueryParser.java */
end_comment
begin_package
DECL|package|org.apache.lucene.queryParser
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|Collator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CachingTokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DateField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DateTools
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FuzzyQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiTermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiPhraseQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PhraseQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PrefixQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermRangeQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|WildcardQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Parameter
import|;
end_import
begin_comment
comment|/**  * This class is generated by JavaCC.  The most important method is  * {@link #parse(String)}.  *  * The syntax for query strings is as follows:  * A Query is a series of clauses.  * A clause may be prefixed by:  *<ul>  *<li> a plus (<code>+</code>) or a minus (<code>-</code>) sign, indicating  * that the clause is required or prohibited respectively; or  *<li> a term followed by a colon, indicating the field to be searched.  * This enables one to construct queries which search multiple fields.  *</ul>  *  * A clause may be either:  *<ul>  *<li> a term, indicating all the documents that contain this term; or  *<li> a nested query, enclosed in parentheses.  Note that this may be used  * with a<code>+</code>/<code>-</code> prefix to require any of a set of  * terms.  *</ul>  *  * Thus, in BNF, the query grammar is:  *<pre>  *   Query  ::= ( Clause )*  *   Clause ::= ["+", "-"] [&lt;TERM&gt; ":"] (&lt;TERM&gt; | "(" Query ")" )  *</pre>  *  *<p>  * Examples of appropriately formatted queries can be found in the<a  * href="../../../../../../queryparsersyntax.html">query syntax  * documentation</a>.  *</p>  *  *<p>  * In {@link TermRangeQuery}s, QueryParser tries to detect date values, e.g.  *<tt>date:[6/1/2005 TO 6/4/2005]</tt> produces a range query that searches  * for "date" fields between 2005-06-01 and 2005-06-04. Note that the format  * of the accepted input depends on {@link #setLocale(Locale) the locale}.  * By default a date is converted into a search term using the deprecated  * {@link DateField} for compatibility reasons.  * To use the new {@link DateTools} to convert dates, a  * {@link org.apache.lucene.document.DateTools.Resolution} has to be set.  *</p>  *<p>  * The date resolution that shall be used for RangeQueries can be set  * using {@link #setDateResolution(DateTools.Resolution)}  * or {@link #setDateResolution(String, DateTools.Resolution)}. The former  * sets the default date resolution for all fields, whereas the latter can  * be used to set field specific date resolutions. Field specific date  * resolutions take, if set, precedence over the default date resolution.  *</p>  *<p>  * If you use neither {@link DateField} nor {@link DateTools} in your  * index, you can create your own  * query parser that inherits QueryParser and overwrites  * {@link #getRangeQuery(String, String, String, boolean)} to  * use a different method for date conversion.  *</p>  *  *<p>Note that QueryParser is<em>not</em> thread-safe.</p>   *   *<p><b>NOTE</b>: there is a new QueryParser in contrib, which matches  * the same syntax as this class, but is more modular,  * enabling substantial customization to how a query is created.  */
end_comment
begin_class
DECL|class|QueryParser
specifier|public
class|class
name|QueryParser
implements|implements
name|QueryParserConstants
block|{
DECL|field|CONJ_NONE
specifier|private
specifier|static
specifier|final
name|int
name|CONJ_NONE
init|=
literal|0
decl_stmt|;
DECL|field|CONJ_AND
specifier|private
specifier|static
specifier|final
name|int
name|CONJ_AND
init|=
literal|1
decl_stmt|;
DECL|field|CONJ_OR
specifier|private
specifier|static
specifier|final
name|int
name|CONJ_OR
init|=
literal|2
decl_stmt|;
DECL|field|MOD_NONE
specifier|private
specifier|static
specifier|final
name|int
name|MOD_NONE
init|=
literal|0
decl_stmt|;
DECL|field|MOD_NOT
specifier|private
specifier|static
specifier|final
name|int
name|MOD_NOT
init|=
literal|10
decl_stmt|;
DECL|field|MOD_REQ
specifier|private
specifier|static
specifier|final
name|int
name|MOD_REQ
init|=
literal|11
decl_stmt|;
comment|// make it possible to call setDefaultOperator() without accessing
comment|// the nested class:
comment|/** Alternative form of QueryParser.Operator.AND */
DECL|field|AND_OPERATOR
specifier|public
specifier|static
specifier|final
name|Operator
name|AND_OPERATOR
init|=
name|Operator
operator|.
name|AND
decl_stmt|;
comment|/** Alternative form of QueryParser.Operator.OR */
DECL|field|OR_OPERATOR
specifier|public
specifier|static
specifier|final
name|Operator
name|OR_OPERATOR
init|=
name|Operator
operator|.
name|OR
decl_stmt|;
comment|/** The actual operator that parser uses to combine query terms */
DECL|field|operator
specifier|private
name|Operator
name|operator
init|=
name|OR_OPERATOR
decl_stmt|;
DECL|field|lowercaseExpandedTerms
name|boolean
name|lowercaseExpandedTerms
init|=
literal|true
decl_stmt|;
DECL|field|multiTermRewriteMethod
name|MultiTermQuery
operator|.
name|RewriteMethod
name|multiTermRewriteMethod
init|=
name|MultiTermQuery
operator|.
name|CONSTANT_SCORE_AUTO_REWRITE_DEFAULT
decl_stmt|;
DECL|field|allowLeadingWildcard
name|boolean
name|allowLeadingWildcard
init|=
literal|false
decl_stmt|;
DECL|field|enablePositionIncrements
name|boolean
name|enablePositionIncrements
init|=
literal|false
decl_stmt|;
DECL|field|analyzer
name|Analyzer
name|analyzer
decl_stmt|;
DECL|field|field
name|String
name|field
decl_stmt|;
DECL|field|phraseSlop
name|int
name|phraseSlop
init|=
literal|0
decl_stmt|;
DECL|field|fuzzyMinSim
name|float
name|fuzzyMinSim
init|=
name|FuzzyQuery
operator|.
name|defaultMinSimilarity
decl_stmt|;
DECL|field|fuzzyPrefixLength
name|int
name|fuzzyPrefixLength
init|=
name|FuzzyQuery
operator|.
name|defaultPrefixLength
decl_stmt|;
DECL|field|locale
name|Locale
name|locale
init|=
name|Locale
operator|.
name|getDefault
argument_list|()
decl_stmt|;
comment|// the default date resolution
DECL|field|dateResolution
name|DateTools
operator|.
name|Resolution
name|dateResolution
init|=
literal|null
decl_stmt|;
comment|// maps field names to date resolutions
DECL|field|fieldToDateResolution
name|Map
argument_list|<
name|String
argument_list|,
name|DateTools
operator|.
name|Resolution
argument_list|>
name|fieldToDateResolution
init|=
literal|null
decl_stmt|;
comment|// The collator to use when determining range inclusion,
comment|// for use when constructing RangeQuerys.
DECL|field|rangeCollator
name|Collator
name|rangeCollator
init|=
literal|null
decl_stmt|;
comment|/** The default operator for parsing queries.     * Use {@link QueryParser#setDefaultOperator} to change it.    */
DECL|class|Operator
specifier|static
specifier|public
specifier|final
class|class
name|Operator
extends|extends
name|Parameter
block|{
DECL|method|Operator
specifier|private
name|Operator
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|field|OR
specifier|static
specifier|public
specifier|final
name|Operator
name|OR
init|=
operator|new
name|Operator
argument_list|(
literal|"OR"
argument_list|)
decl_stmt|;
DECL|field|AND
specifier|static
specifier|public
specifier|final
name|Operator
name|AND
init|=
operator|new
name|Operator
argument_list|(
literal|"AND"
argument_list|)
decl_stmt|;
block|}
comment|/** Constructs a query parser.    *  @param f  the default field for query terms.    *  @param a   used to find terms in the query text.    */
DECL|method|QueryParser
specifier|public
name|QueryParser
parameter_list|(
name|String
name|f
parameter_list|,
name|Analyzer
name|a
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|FastCharStream
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|analyzer
operator|=
name|a
expr_stmt|;
name|field
operator|=
name|f
expr_stmt|;
block|}
comment|/** Parses a query string, returning a {@link org.apache.lucene.search.Query}.    *  @param query  the query string to be parsed.    *  @throws ParseException if the parsing fails    */
DECL|method|parse
specifier|public
name|Query
name|parse
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|ParseException
block|{
name|ReInit
argument_list|(
operator|new
name|FastCharStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|query
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
comment|// TopLevelQuery is a Query followed by the end-of-input (EOF)
name|Query
name|res
init|=
name|TopLevelQuery
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
name|res
operator|!=
literal|null
condition|?
name|res
else|:
name|newBooleanQuery
argument_list|(
literal|false
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|tme
parameter_list|)
block|{
comment|// rethrow to include the original query:
name|ParseException
name|e
init|=
operator|new
name|ParseException
argument_list|(
literal|"Cannot parse '"
operator|+
name|query
operator|+
literal|"': "
operator|+
name|tme
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|e
operator|.
name|initCause
argument_list|(
name|tme
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|TokenMgrError
name|tme
parameter_list|)
block|{
name|ParseException
name|e
init|=
operator|new
name|ParseException
argument_list|(
literal|"Cannot parse '"
operator|+
name|query
operator|+
literal|"': "
operator|+
name|tme
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|e
operator|.
name|initCause
argument_list|(
name|tme
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|BooleanQuery
operator|.
name|TooManyClauses
name|tmc
parameter_list|)
block|{
name|ParseException
name|e
init|=
operator|new
name|ParseException
argument_list|(
literal|"Cannot parse '"
operator|+
name|query
operator|+
literal|"': too many boolean clauses"
argument_list|)
decl_stmt|;
name|e
operator|.
name|initCause
argument_list|(
name|tmc
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * @return Returns the analyzer.    */
DECL|method|getAnalyzer
specifier|public
name|Analyzer
name|getAnalyzer
parameter_list|()
block|{
return|return
name|analyzer
return|;
block|}
comment|/**    * @return Returns the field.    */
DECL|method|getField
specifier|public
name|String
name|getField
parameter_list|()
block|{
return|return
name|field
return|;
block|}
comment|/**    * Get the minimal similarity for fuzzy queries.    */
DECL|method|getFuzzyMinSim
specifier|public
name|float
name|getFuzzyMinSim
parameter_list|()
block|{
return|return
name|fuzzyMinSim
return|;
block|}
comment|/**    * Set the minimum similarity for fuzzy queries.    * Default is 0.5f.    */
DECL|method|setFuzzyMinSim
specifier|public
name|void
name|setFuzzyMinSim
parameter_list|(
name|float
name|fuzzyMinSim
parameter_list|)
block|{
name|this
operator|.
name|fuzzyMinSim
operator|=
name|fuzzyMinSim
expr_stmt|;
block|}
comment|/**    * Get the prefix length for fuzzy queries.     * @return Returns the fuzzyPrefixLength.    */
DECL|method|getFuzzyPrefixLength
specifier|public
name|int
name|getFuzzyPrefixLength
parameter_list|()
block|{
return|return
name|fuzzyPrefixLength
return|;
block|}
comment|/**    * Set the prefix length for fuzzy queries. Default is 0.    * @param fuzzyPrefixLength The fuzzyPrefixLength to set.    */
DECL|method|setFuzzyPrefixLength
specifier|public
name|void
name|setFuzzyPrefixLength
parameter_list|(
name|int
name|fuzzyPrefixLength
parameter_list|)
block|{
name|this
operator|.
name|fuzzyPrefixLength
operator|=
name|fuzzyPrefixLength
expr_stmt|;
block|}
comment|/**    * Sets the default slop for phrases.  If zero, then exact phrase matches    * are required.  Default value is zero.    */
DECL|method|setPhraseSlop
specifier|public
name|void
name|setPhraseSlop
parameter_list|(
name|int
name|phraseSlop
parameter_list|)
block|{
name|this
operator|.
name|phraseSlop
operator|=
name|phraseSlop
expr_stmt|;
block|}
comment|/**    * Gets the default slop for phrases.    */
DECL|method|getPhraseSlop
specifier|public
name|int
name|getPhraseSlop
parameter_list|()
block|{
return|return
name|phraseSlop
return|;
block|}
comment|/**    * Set to<code>true</code> to allow leading wildcard characters.    *<p>    * When set,<code>*</code> or<code>?</code> are allowed as     * the first character of a PrefixQuery and WildcardQuery.    * Note that this can produce very slow    * queries on big indexes.     *<p>    * Default: false.    */
DECL|method|setAllowLeadingWildcard
specifier|public
name|void
name|setAllowLeadingWildcard
parameter_list|(
name|boolean
name|allowLeadingWildcard
parameter_list|)
block|{
name|this
operator|.
name|allowLeadingWildcard
operator|=
name|allowLeadingWildcard
expr_stmt|;
block|}
comment|/**    * @see #setAllowLeadingWildcard(boolean)    */
DECL|method|getAllowLeadingWildcard
specifier|public
name|boolean
name|getAllowLeadingWildcard
parameter_list|()
block|{
return|return
name|allowLeadingWildcard
return|;
block|}
comment|/**    * Set to<code>true</code> to enable position increments in result query.    *<p>    * When set, result phrase and multi-phrase queries will    * be aware of position increments.    * Useful when e.g. a StopFilter increases the position increment of    * the token that follows an omitted token.    *<p>    * Default: false.    */
DECL|method|setEnablePositionIncrements
specifier|public
name|void
name|setEnablePositionIncrements
parameter_list|(
name|boolean
name|enable
parameter_list|)
block|{
name|this
operator|.
name|enablePositionIncrements
operator|=
name|enable
expr_stmt|;
block|}
comment|/**    * @see #setEnablePositionIncrements(boolean)    */
DECL|method|getEnablePositionIncrements
specifier|public
name|boolean
name|getEnablePositionIncrements
parameter_list|()
block|{
return|return
name|enablePositionIncrements
return|;
block|}
comment|/**    * Sets the boolean operator of the QueryParser.    * In default mode (<code>OR_OPERATOR</code>) terms without any modifiers    * are considered optional: for example<code>capital of Hungary</code> is equal to    *<code>capital OR of OR Hungary</code>.<br/>    * In<code>AND_OPERATOR</code> mode terms are considered to be in conjunction: the    * above mentioned query is parsed as<code>capital AND of AND Hungary</code>    */
DECL|method|setDefaultOperator
specifier|public
name|void
name|setDefaultOperator
parameter_list|(
name|Operator
name|op
parameter_list|)
block|{
name|this
operator|.
name|operator
operator|=
name|op
expr_stmt|;
block|}
comment|/**    * Gets implicit operator setting, which will be either AND_OPERATOR    * or OR_OPERATOR.    */
DECL|method|getDefaultOperator
specifier|public
name|Operator
name|getDefaultOperator
parameter_list|()
block|{
return|return
name|operator
return|;
block|}
comment|/**    * Whether terms of wildcard, prefix, fuzzy and range queries are to be automatically    * lower-cased or not.  Default is<code>true</code>.    */
DECL|method|setLowercaseExpandedTerms
specifier|public
name|void
name|setLowercaseExpandedTerms
parameter_list|(
name|boolean
name|lowercaseExpandedTerms
parameter_list|)
block|{
name|this
operator|.
name|lowercaseExpandedTerms
operator|=
name|lowercaseExpandedTerms
expr_stmt|;
block|}
comment|/**    * @see #setLowercaseExpandedTerms(boolean)    */
DECL|method|getLowercaseExpandedTerms
specifier|public
name|boolean
name|getLowercaseExpandedTerms
parameter_list|()
block|{
return|return
name|lowercaseExpandedTerms
return|;
block|}
comment|/**    * By default QueryParser uses {@link MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}    * when creating a PrefixQuery, WildcardQuery or RangeQuery. This implementation is generally preferable because it     * a) Runs faster b) Does not have the scarcity of terms unduly influence score     * c) avoids any "TooManyBooleanClauses" exception.    * However, if your application really needs to use the    * old-fashioned BooleanQuery expansion rewriting and the above    * points are not relevant then use this to change    * the rewrite method.    */
DECL|method|setMultiTermRewriteMethod
specifier|public
name|void
name|setMultiTermRewriteMethod
parameter_list|(
name|MultiTermQuery
operator|.
name|RewriteMethod
name|method
parameter_list|)
block|{
name|multiTermRewriteMethod
operator|=
name|method
expr_stmt|;
block|}
comment|/**    * @see #setMultiTermRewriteMethod    */
DECL|method|getMultiTermRewriteMethod
specifier|public
name|MultiTermQuery
operator|.
name|RewriteMethod
name|getMultiTermRewriteMethod
parameter_list|()
block|{
return|return
name|multiTermRewriteMethod
return|;
block|}
comment|/**    * Set locale used by date range parsing.    */
DECL|method|setLocale
specifier|public
name|void
name|setLocale
parameter_list|(
name|Locale
name|locale
parameter_list|)
block|{
name|this
operator|.
name|locale
operator|=
name|locale
expr_stmt|;
block|}
comment|/**    * Returns current locale, allowing access by subclasses.    */
DECL|method|getLocale
specifier|public
name|Locale
name|getLocale
parameter_list|()
block|{
return|return
name|locale
return|;
block|}
comment|/**    * Sets the default date resolution used by RangeQueries for fields for which no    * specific date resolutions has been set. Field specific resolutions can be set    * with {@link #setDateResolution(String, DateTools.Resolution)}.    *      * @param dateResolution the default date resolution to set    */
DECL|method|setDateResolution
specifier|public
name|void
name|setDateResolution
parameter_list|(
name|DateTools
operator|.
name|Resolution
name|dateResolution
parameter_list|)
block|{
name|this
operator|.
name|dateResolution
operator|=
name|dateResolution
expr_stmt|;
block|}
comment|/**    * Sets the date resolution used by RangeQueries for a specific field.    *      * @param fieldName field for which the date resolution is to be set     * @param dateResolution date resolution to set    */
DECL|method|setDateResolution
specifier|public
name|void
name|setDateResolution
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|DateTools
operator|.
name|Resolution
name|dateResolution
parameter_list|)
block|{
if|if
condition|(
name|fieldName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field cannot be null."
argument_list|)
throw|;
block|}
if|if
condition|(
name|fieldToDateResolution
operator|==
literal|null
condition|)
block|{
comment|// lazily initialize HashMap
name|fieldToDateResolution
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DateTools
operator|.
name|Resolution
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|fieldToDateResolution
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|dateResolution
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the date resolution that is used by RangeQueries for the given field.     * Returns null, if no default or field specific date resolution has been set    * for the given field.    *    */
DECL|method|getDateResolution
specifier|public
name|DateTools
operator|.
name|Resolution
name|getDateResolution
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
if|if
condition|(
name|fieldName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field cannot be null."
argument_list|)
throw|;
block|}
if|if
condition|(
name|fieldToDateResolution
operator|==
literal|null
condition|)
block|{
comment|// no field specific date resolutions set; return default date resolution instead
return|return
name|this
operator|.
name|dateResolution
return|;
block|}
name|DateTools
operator|.
name|Resolution
name|resolution
init|=
operator|(
name|DateTools
operator|.
name|Resolution
operator|)
name|fieldToDateResolution
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolution
operator|==
literal|null
condition|)
block|{
comment|// no date resolutions set for the given field; return default date resolution instead
name|resolution
operator|=
name|this
operator|.
name|dateResolution
expr_stmt|;
block|}
return|return
name|resolution
return|;
block|}
comment|/**     * Sets the collator used to determine index term inclusion in ranges    * for RangeQuerys.    *<p/>    *<strong>WARNING:</strong> Setting the rangeCollator to a non-null    * collator using this method will cause every single index Term in the    * Field referenced by lowerTerm and/or upperTerm to be examined.    * Depending on the number of index Terms in this Field, the operation could    * be very slow.    *    *  @param rc  the collator to use when constructing RangeQuerys    */
DECL|method|setRangeCollator
specifier|public
name|void
name|setRangeCollator
parameter_list|(
name|Collator
name|rc
parameter_list|)
block|{
name|rangeCollator
operator|=
name|rc
expr_stmt|;
block|}
comment|/**    * @return the collator used to determine index term inclusion in ranges    * for RangeQuerys.    */
DECL|method|getRangeCollator
specifier|public
name|Collator
name|getRangeCollator
parameter_list|()
block|{
return|return
name|rangeCollator
return|;
block|}
DECL|method|addClause
specifier|protected
name|void
name|addClause
parameter_list|(
name|List
argument_list|<
name|BooleanClause
argument_list|>
name|clauses
parameter_list|,
name|int
name|conj
parameter_list|,
name|int
name|mods
parameter_list|,
name|Query
name|q
parameter_list|)
block|{
name|boolean
name|required
decl_stmt|,
name|prohibited
decl_stmt|;
comment|// If this term is introduced by AND, make the preceding term required,
comment|// unless it's already prohibited
if|if
condition|(
name|clauses
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|conj
operator|==
name|CONJ_AND
condition|)
block|{
name|BooleanClause
name|c
init|=
name|clauses
operator|.
name|get
argument_list|(
name|clauses
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|isProhibited
argument_list|()
condition|)
name|c
operator|.
name|setOccur
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clauses
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|operator
operator|==
name|AND_OPERATOR
operator|&&
name|conj
operator|==
name|CONJ_OR
condition|)
block|{
comment|// If this term is introduced by OR, make the preceding term optional,
comment|// unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)
comment|// notice if the input is a OR b, first term is parsed as required; without
comment|// this modification a OR b would parsed as +a OR b
name|BooleanClause
name|c
init|=
name|clauses
operator|.
name|get
argument_list|(
name|clauses
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|isProhibited
argument_list|()
condition|)
name|c
operator|.
name|setOccur
argument_list|(
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
comment|// We might have been passed a null query; the term might have been
comment|// filtered away by the analyzer.
if|if
condition|(
name|q
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|operator
operator|==
name|OR_OPERATOR
condition|)
block|{
comment|// We set REQUIRED if we're introduced by AND or +; PROHIBITED if
comment|// introduced by NOT or -; make sure not to set both.
name|prohibited
operator|=
operator|(
name|mods
operator|==
name|MOD_NOT
operator|)
expr_stmt|;
name|required
operator|=
operator|(
name|mods
operator|==
name|MOD_REQ
operator|)
expr_stmt|;
if|if
condition|(
name|conj
operator|==
name|CONJ_AND
operator|&&
operator|!
name|prohibited
condition|)
block|{
name|required
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// We set PROHIBITED if we're introduced by NOT or -; We set REQUIRED
comment|// if not PROHIBITED and not introduced by OR
name|prohibited
operator|=
operator|(
name|mods
operator|==
name|MOD_NOT
operator|)
expr_stmt|;
name|required
operator|=
operator|(
operator|!
name|prohibited
operator|&&
name|conj
operator|!=
name|CONJ_OR
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|required
operator|&&
operator|!
name|prohibited
condition|)
name|clauses
operator|.
name|add
argument_list|(
name|newBooleanClause
argument_list|(
name|q
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|required
operator|&&
operator|!
name|prohibited
condition|)
name|clauses
operator|.
name|add
argument_list|(
name|newBooleanClause
argument_list|(
name|q
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|required
operator|&&
name|prohibited
condition|)
name|clauses
operator|.
name|add
argument_list|(
name|newBooleanClause
argument_list|(
name|q
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
argument_list|)
expr_stmt|;
else|else
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Clause cannot be both required and prohibited"
argument_list|)
throw|;
block|}
comment|/**    * @exception ParseException throw in overridden method to disallow    */
DECL|method|getFieldQuery
specifier|protected
name|Query
name|getFieldQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|queryText
parameter_list|)
throws|throws
name|ParseException
block|{
comment|// Use the analyzer to get all the tokens, and then build a TermQuery,
comment|// PhraseQuery, or nothing based on the term count
name|TokenStream
name|source
decl_stmt|;
try|try
block|{
name|source
operator|=
name|analyzer
operator|.
name|reusableTokenStream
argument_list|(
name|field
argument_list|,
operator|new
name|StringReader
argument_list|(
name|queryText
argument_list|)
argument_list|)
expr_stmt|;
name|source
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|source
operator|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|field
argument_list|,
operator|new
name|StringReader
argument_list|(
name|queryText
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CachingTokenFilter
name|buffer
init|=
operator|new
name|CachingTokenFilter
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|TermAttribute
name|termAtt
init|=
literal|null
decl_stmt|;
name|PositionIncrementAttribute
name|posIncrAtt
init|=
literal|null
decl_stmt|;
name|int
name|numTokens
init|=
literal|0
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|buffer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// success==false if we hit an exception
block|}
if|if
condition|(
name|success
condition|)
block|{
if|if
condition|(
name|buffer
operator|.
name|hasAttribute
argument_list|(
name|TermAttribute
operator|.
name|class
argument_list|)
condition|)
block|{
name|termAtt
operator|=
name|buffer
operator|.
name|getAttribute
argument_list|(
name|TermAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|buffer
operator|.
name|hasAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
condition|)
block|{
name|posIncrAtt
operator|=
name|buffer
operator|.
name|getAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|positionCount
init|=
literal|0
decl_stmt|;
name|boolean
name|severalTokensAtSamePosition
init|=
literal|false
decl_stmt|;
name|boolean
name|hasMoreTokens
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|termAtt
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|hasMoreTokens
operator|=
name|buffer
operator|.
name|incrementToken
argument_list|()
expr_stmt|;
while|while
condition|(
name|hasMoreTokens
condition|)
block|{
name|numTokens
operator|++
expr_stmt|;
name|int
name|positionIncrement
init|=
operator|(
name|posIncrAtt
operator|!=
literal|null
operator|)
condition|?
name|posIncrAtt
operator|.
name|getPositionIncrement
argument_list|()
else|:
literal|1
decl_stmt|;
if|if
condition|(
name|positionIncrement
operator|!=
literal|0
condition|)
block|{
name|positionCount
operator|+=
name|positionIncrement
expr_stmt|;
block|}
else|else
block|{
name|severalTokensAtSamePosition
operator|=
literal|true
expr_stmt|;
block|}
name|hasMoreTokens
operator|=
name|buffer
operator|.
name|incrementToken
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
try|try
block|{
comment|// rewind the buffer stream
name|buffer
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// close original stream - all tokens buffered
name|source
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
if|if
condition|(
name|numTokens
operator|==
literal|0
condition|)
return|return
literal|null
return|;
elseif|else
if|if
condition|(
name|numTokens
operator|==
literal|1
condition|)
block|{
name|String
name|term
init|=
literal|null
decl_stmt|;
try|try
block|{
name|boolean
name|hasNext
init|=
name|buffer
operator|.
name|incrementToken
argument_list|()
decl_stmt|;
assert|assert
name|hasNext
operator|==
literal|true
assert|;
name|term
operator|=
name|termAtt
operator|.
name|term
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// safe to ignore, because we know the number of tokens
block|}
return|return
name|newTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|term
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|severalTokensAtSamePosition
condition|)
block|{
if|if
condition|(
name|positionCount
operator|==
literal|1
condition|)
block|{
comment|// no phrase query:
name|BooleanQuery
name|q
init|=
name|newBooleanQuery
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTokens
condition|;
name|i
operator|++
control|)
block|{
name|String
name|term
init|=
literal|null
decl_stmt|;
try|try
block|{
name|boolean
name|hasNext
init|=
name|buffer
operator|.
name|incrementToken
argument_list|()
decl_stmt|;
assert|assert
name|hasNext
operator|==
literal|true
assert|;
name|term
operator|=
name|termAtt
operator|.
name|term
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// safe to ignore, because we know the number of tokens
block|}
name|Query
name|currentQuery
init|=
name|newTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|term
argument_list|)
argument_list|)
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|currentQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
return|return
name|q
return|;
block|}
else|else
block|{
comment|// phrase query:
name|MultiPhraseQuery
name|mpq
init|=
name|newMultiPhraseQuery
argument_list|()
decl_stmt|;
name|mpq
operator|.
name|setSlop
argument_list|(
name|phraseSlop
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Term
argument_list|>
name|multiTerms
init|=
operator|new
name|ArrayList
argument_list|<
name|Term
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|position
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTokens
condition|;
name|i
operator|++
control|)
block|{
name|String
name|term
init|=
literal|null
decl_stmt|;
name|int
name|positionIncrement
init|=
literal|1
decl_stmt|;
try|try
block|{
name|boolean
name|hasNext
init|=
name|buffer
operator|.
name|incrementToken
argument_list|()
decl_stmt|;
assert|assert
name|hasNext
operator|==
literal|true
assert|;
name|term
operator|=
name|termAtt
operator|.
name|term
argument_list|()
expr_stmt|;
if|if
condition|(
name|posIncrAtt
operator|!=
literal|null
condition|)
block|{
name|positionIncrement
operator|=
name|posIncrAtt
operator|.
name|getPositionIncrement
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// safe to ignore, because we know the number of tokens
block|}
if|if
condition|(
name|positionIncrement
operator|>
literal|0
operator|&&
name|multiTerms
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|enablePositionIncrements
condition|)
block|{
name|mpq
operator|.
name|add
argument_list|(
name|multiTerms
operator|.
name|toArray
argument_list|(
operator|new
name|Term
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|position
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mpq
operator|.
name|add
argument_list|(
name|multiTerms
operator|.
name|toArray
argument_list|(
operator|new
name|Term
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|multiTerms
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|position
operator|+=
name|positionIncrement
expr_stmt|;
name|multiTerms
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|term
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enablePositionIncrements
condition|)
block|{
name|mpq
operator|.
name|add
argument_list|(
name|multiTerms
operator|.
name|toArray
argument_list|(
operator|new
name|Term
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|position
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mpq
operator|.
name|add
argument_list|(
name|multiTerms
operator|.
name|toArray
argument_list|(
operator|new
name|Term
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|mpq
return|;
block|}
block|}
else|else
block|{
name|PhraseQuery
name|pq
init|=
name|newPhraseQuery
argument_list|()
decl_stmt|;
name|pq
operator|.
name|setSlop
argument_list|(
name|phraseSlop
argument_list|)
expr_stmt|;
name|int
name|position
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTokens
condition|;
name|i
operator|++
control|)
block|{
name|String
name|term
init|=
literal|null
decl_stmt|;
name|int
name|positionIncrement
init|=
literal|1
decl_stmt|;
try|try
block|{
name|boolean
name|hasNext
init|=
name|buffer
operator|.
name|incrementToken
argument_list|()
decl_stmt|;
assert|assert
name|hasNext
operator|==
literal|true
assert|;
name|term
operator|=
name|termAtt
operator|.
name|term
argument_list|()
expr_stmt|;
if|if
condition|(
name|posIncrAtt
operator|!=
literal|null
condition|)
block|{
name|positionIncrement
operator|=
name|posIncrAtt
operator|.
name|getPositionIncrement
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// safe to ignore, because we know the number of tokens
block|}
if|if
condition|(
name|enablePositionIncrements
condition|)
block|{
name|position
operator|+=
name|positionIncrement
expr_stmt|;
name|pq
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|term
argument_list|)
argument_list|,
name|position
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pq
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|term
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|pq
return|;
block|}
block|}
block|}
comment|/**    * Base implementation delegates to {@link #getFieldQuery(String,String)}.    * This method may be overridden, for example, to return    * a SpanNearQuery instead of a PhraseQuery.    *    * @exception ParseException throw in overridden method to disallow    */
DECL|method|getFieldQuery
specifier|protected
name|Query
name|getFieldQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|queryText
parameter_list|,
name|int
name|slop
parameter_list|)
throws|throws
name|ParseException
block|{
name|Query
name|query
init|=
name|getFieldQuery
argument_list|(
name|field
argument_list|,
name|queryText
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|instanceof
name|PhraseQuery
condition|)
block|{
operator|(
operator|(
name|PhraseQuery
operator|)
name|query
operator|)
operator|.
name|setSlop
argument_list|(
name|slop
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|query
operator|instanceof
name|MultiPhraseQuery
condition|)
block|{
operator|(
operator|(
name|MultiPhraseQuery
operator|)
name|query
operator|)
operator|.
name|setSlop
argument_list|(
name|slop
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
comment|/**    * @exception ParseException throw in overridden method to disallow    */
DECL|method|getRangeQuery
specifier|protected
name|Query
name|getRangeQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|part1
parameter_list|,
name|String
name|part2
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|lowercaseExpandedTerms
condition|)
block|{
name|part1
operator|=
name|part1
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|part2
operator|=
name|part2
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|DateFormat
name|df
init|=
name|DateFormat
operator|.
name|getDateInstance
argument_list|(
name|DateFormat
operator|.
name|SHORT
argument_list|,
name|locale
argument_list|)
decl_stmt|;
name|df
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Date
name|d1
init|=
name|df
operator|.
name|parse
argument_list|(
name|part1
argument_list|)
decl_stmt|;
name|Date
name|d2
init|=
name|df
operator|.
name|parse
argument_list|(
name|part2
argument_list|)
decl_stmt|;
if|if
condition|(
name|inclusive
condition|)
block|{
comment|// The user can only specify the date, not the time, so make sure
comment|// the time is set to the latest possible time of that date to really
comment|// include all documents:
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|locale
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|d2
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|23
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|59
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|59
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|999
argument_list|)
expr_stmt|;
name|d2
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
name|DateTools
operator|.
name|Resolution
name|resolution
init|=
name|getDateResolution
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolution
operator|==
literal|null
condition|)
block|{
comment|// no default or field specific date resolution has been set,
comment|// use deprecated DateField to maintain compatibility with
comment|// pre-1.9 Lucene versions.
name|part1
operator|=
name|DateField
operator|.
name|dateToString
argument_list|(
name|d1
argument_list|)
expr_stmt|;
name|part2
operator|=
name|DateField
operator|.
name|dateToString
argument_list|(
name|d2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|part1
operator|=
name|DateTools
operator|.
name|dateToString
argument_list|(
name|d1
argument_list|,
name|resolution
argument_list|)
expr_stmt|;
name|part2
operator|=
name|DateTools
operator|.
name|dateToString
argument_list|(
name|d2
argument_list|,
name|resolution
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{ }
return|return
name|newRangeQuery
argument_list|(
name|field
argument_list|,
name|part1
argument_list|,
name|part2
argument_list|,
name|inclusive
argument_list|)
return|;
block|}
comment|/**   * Builds a new BooleanQuery instance   * @param disableCoord disable coord   * @return new BooleanQuery instance   */
DECL|method|newBooleanQuery
specifier|protected
name|BooleanQuery
name|newBooleanQuery
parameter_list|(
name|boolean
name|disableCoord
parameter_list|)
block|{
return|return
operator|new
name|BooleanQuery
argument_list|(
name|disableCoord
argument_list|)
return|;
block|}
comment|/**   * Builds a new BooleanClause instance   * @param q sub query   * @param occur how this clause should occur when matching documents   * @return new BooleanClause instance   */
DECL|method|newBooleanClause
specifier|protected
name|BooleanClause
name|newBooleanClause
parameter_list|(
name|Query
name|q
parameter_list|,
name|BooleanClause
operator|.
name|Occur
name|occur
parameter_list|)
block|{
return|return
operator|new
name|BooleanClause
argument_list|(
name|q
argument_list|,
name|occur
argument_list|)
return|;
block|}
comment|/**    * Builds a new TermQuery instance    * @param term term    * @return new TermQuery instance    */
DECL|method|newTermQuery
specifier|protected
name|Query
name|newTermQuery
parameter_list|(
name|Term
name|term
parameter_list|)
block|{
return|return
operator|new
name|TermQuery
argument_list|(
name|term
argument_list|)
return|;
block|}
comment|/**    * Builds a new PhraseQuery instance    * @return new PhraseQuery instance    */
DECL|method|newPhraseQuery
specifier|protected
name|PhraseQuery
name|newPhraseQuery
parameter_list|()
block|{
return|return
operator|new
name|PhraseQuery
argument_list|()
return|;
block|}
comment|/**    * Builds a new MultiPhraseQuery instance    * @return new MultiPhraseQuery instance    */
DECL|method|newMultiPhraseQuery
specifier|protected
name|MultiPhraseQuery
name|newMultiPhraseQuery
parameter_list|()
block|{
return|return
operator|new
name|MultiPhraseQuery
argument_list|()
return|;
block|}
comment|/**    * Builds a new PrefixQuery instance    * @param prefix Prefix term    * @return new PrefixQuery instance    */
DECL|method|newPrefixQuery
specifier|protected
name|Query
name|newPrefixQuery
parameter_list|(
name|Term
name|prefix
parameter_list|)
block|{
name|PrefixQuery
name|query
init|=
operator|new
name|PrefixQuery
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
name|query
operator|.
name|setRewriteMethod
argument_list|(
name|multiTermRewriteMethod
argument_list|)
expr_stmt|;
return|return
name|query
return|;
block|}
comment|/**    * Builds a new FuzzyQuery instance    * @param term Term    * @param minimumSimilarity minimum similarity    * @param prefixLength prefix length    * @return new FuzzyQuery Instance    */
DECL|method|newFuzzyQuery
specifier|protected
name|Query
name|newFuzzyQuery
parameter_list|(
name|Term
name|term
parameter_list|,
name|float
name|minimumSimilarity
parameter_list|,
name|int
name|prefixLength
parameter_list|)
block|{
comment|// FuzzyQuery doesn't yet allow constant score rewrite
return|return
operator|new
name|FuzzyQuery
argument_list|(
name|term
argument_list|,
name|minimumSimilarity
argument_list|,
name|prefixLength
argument_list|)
return|;
block|}
comment|/**    * Builds a new TermRangeQuery instance    * @param field Field    * @param part1 min    * @param part2 max    * @param inclusive true if range is inclusive    * @return new TermRangeQuery instance    */
DECL|method|newRangeQuery
specifier|protected
name|Query
name|newRangeQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|part1
parameter_list|,
name|String
name|part2
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
block|{
specifier|final
name|TermRangeQuery
name|query
init|=
operator|new
name|TermRangeQuery
argument_list|(
name|field
argument_list|,
name|part1
argument_list|,
name|part2
argument_list|,
name|inclusive
argument_list|,
name|inclusive
argument_list|,
name|rangeCollator
argument_list|)
decl_stmt|;
name|query
operator|.
name|setRewriteMethod
argument_list|(
name|multiTermRewriteMethod
argument_list|)
expr_stmt|;
return|return
name|query
return|;
block|}
comment|/**    * Builds a new MatchAllDocsQuery instance    * @return new MatchAllDocsQuery instance    */
DECL|method|newMatchAllDocsQuery
specifier|protected
name|Query
name|newMatchAllDocsQuery
parameter_list|()
block|{
return|return
operator|new
name|MatchAllDocsQuery
argument_list|()
return|;
block|}
comment|/**    * Builds a new WildcardQuery instance    * @param t wildcard term    * @return new WildcardQuery instance    */
DECL|method|newWildcardQuery
specifier|protected
name|Query
name|newWildcardQuery
parameter_list|(
name|Term
name|t
parameter_list|)
block|{
name|WildcardQuery
name|query
init|=
operator|new
name|WildcardQuery
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|query
operator|.
name|setRewriteMethod
argument_list|(
name|multiTermRewriteMethod
argument_list|)
expr_stmt|;
return|return
name|query
return|;
block|}
comment|/**    * Factory method for generating query, given a set of clauses.    * By default creates a boolean query composed of clauses passed in.    *    * Can be overridden by extending classes, to modify query being    * returned.    *    * @param clauses List that contains {@link BooleanClause} instances    *    to join.    *    * @return Resulting {@link Query} object.    * @exception ParseException throw in overridden method to disallow    */
DECL|method|getBooleanQuery
specifier|protected
name|Query
name|getBooleanQuery
parameter_list|(
name|List
argument_list|<
name|BooleanClause
argument_list|>
name|clauses
parameter_list|)
throws|throws
name|ParseException
block|{
return|return
name|getBooleanQuery
argument_list|(
name|clauses
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Factory method for generating query, given a set of clauses.    * By default creates a boolean query composed of clauses passed in.    *    * Can be overridden by extending classes, to modify query being    * returned.    *    * @param clauses List that contains {@link BooleanClause} instances    *    to join.    * @param disableCoord true if coord scoring should be disabled.    *    * @return Resulting {@link Query} object.    * @exception ParseException throw in overridden method to disallow    */
DECL|method|getBooleanQuery
specifier|protected
name|Query
name|getBooleanQuery
parameter_list|(
name|List
argument_list|<
name|BooleanClause
argument_list|>
name|clauses
parameter_list|,
name|boolean
name|disableCoord
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|clauses
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
comment|// all clause words were filtered away by the analyzer.
block|}
name|BooleanQuery
name|query
init|=
name|newBooleanQuery
argument_list|(
name|disableCoord
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|BooleanClause
name|clause
range|:
name|clauses
control|)
block|{
name|query
operator|.
name|add
argument_list|(
name|clause
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
comment|/**    * Factory method for generating a query. Called when parser    * parses an input term token that contains one or more wildcard    * characters (? and *), but is not a prefix term token (one    * that has just a single * character at the end)    *<p>    * Depending on settings, prefix term may be lower-cased    * automatically. It will not go through the default Analyzer,    * however, since normal Analyzers are unlikely to work properly    * with wildcard templates.    *<p>    * Can be overridden by extending classes, to provide custom handling for    * wildcard queries, which may be necessary due to missing analyzer calls.    *    * @param field Name of the field query will use.    * @param termStr Term token that contains one or more wild card    *   characters (? or *), but is not simple prefix term    *    * @return Resulting {@link Query} built for the term    * @exception ParseException throw in overridden method to disallow    */
DECL|method|getWildcardQuery
specifier|protected
name|Query
name|getWildcardQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|termStr
argument_list|)
condition|)
return|return
name|newMatchAllDocsQuery
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|allowLeadingWildcard
operator|&&
operator|(
name|termStr
operator|.
name|startsWith
argument_list|(
literal|"*"
argument_list|)
operator|||
name|termStr
operator|.
name|startsWith
argument_list|(
literal|"?"
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"'*' or '?' not allowed as first character in WildcardQuery"
argument_list|)
throw|;
if|if
condition|(
name|lowercaseExpandedTerms
condition|)
block|{
name|termStr
operator|=
name|termStr
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
name|Term
name|t
init|=
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|)
decl_stmt|;
return|return
name|newWildcardQuery
argument_list|(
name|t
argument_list|)
return|;
block|}
comment|/**    * Factory method for generating a query (similar to    * {@link #getWildcardQuery}). Called when parser parses an input term    * token that uses prefix notation; that is, contains a single '*' wildcard    * character as its last character. Since this is a special case    * of generic wildcard term, and such a query can be optimized easily,    * this usually results in a different query object.    *<p>    * Depending on settings, a prefix term may be lower-cased    * automatically. It will not go through the default Analyzer,    * however, since normal Analyzers are unlikely to work properly    * with wildcard templates.    *<p>    * Can be overridden by extending classes, to provide custom handling for    * wild card queries, which may be necessary due to missing analyzer calls.    *    * @param field Name of the field query will use.    * @param termStr Term token to use for building term for the query    *    (<b>without</b> trailing '*' character!)    *    * @return Resulting {@link Query} built for the term    * @exception ParseException throw in overridden method to disallow    */
DECL|method|getPrefixQuery
specifier|protected
name|Query
name|getPrefixQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
operator|!
name|allowLeadingWildcard
operator|&&
name|termStr
operator|.
name|startsWith
argument_list|(
literal|"*"
argument_list|)
condition|)
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"'*' not allowed as first character in PrefixQuery"
argument_list|)
throw|;
if|if
condition|(
name|lowercaseExpandedTerms
condition|)
block|{
name|termStr
operator|=
name|termStr
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
name|Term
name|t
init|=
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|)
decl_stmt|;
return|return
name|newPrefixQuery
argument_list|(
name|t
argument_list|)
return|;
block|}
comment|/**    * Factory method for generating a query (similar to    * {@link #getWildcardQuery}). Called when parser parses    * an input term token that has the fuzzy suffix (~) appended.    *    * @param field Name of the field query will use.    * @param termStr Term token to use for building term for the query    *    * @return Resulting {@link Query} built for the term    * @exception ParseException throw in overridden method to disallow    */
DECL|method|getFuzzyQuery
specifier|protected
name|Query
name|getFuzzyQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|,
name|float
name|minSimilarity
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|lowercaseExpandedTerms
condition|)
block|{
name|termStr
operator|=
name|termStr
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
name|Term
name|t
init|=
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|)
decl_stmt|;
return|return
name|newFuzzyQuery
argument_list|(
name|t
argument_list|,
name|minSimilarity
argument_list|,
name|fuzzyPrefixLength
argument_list|)
return|;
block|}
comment|/**    * Returns a String where the escape char has been    * removed, or kept only once if there was a double escape.    *     * Supports escaped unicode characters, e. g. translates    *<code>\\u0041</code> to<code>A</code>.    *     */
DECL|method|discardEscapeChar
specifier|private
name|String
name|discardEscapeChar
parameter_list|(
name|String
name|input
parameter_list|)
throws|throws
name|ParseException
block|{
comment|// Create char array to hold unescaped char sequence
name|char
index|[]
name|output
init|=
operator|new
name|char
index|[
name|input
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
comment|// The length of the output can be less than the input
comment|// due to discarded escape chars. This variable holds
comment|// the actual length of the output
name|int
name|length
init|=
literal|0
decl_stmt|;
comment|// We remember whether the last processed character was
comment|// an escape character
name|boolean
name|lastCharWasEscapeChar
init|=
literal|false
decl_stmt|;
comment|// The multiplier the current unicode digit must be multiplied with.
comment|// E. g. the first digit must be multiplied with 16^3, the second with 16^2...
name|int
name|codePointMultiplier
init|=
literal|0
decl_stmt|;
comment|// Used to calculate the codepoint of the escaped unicode character
name|int
name|codePoint
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|input
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|curChar
init|=
name|input
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|codePointMultiplier
operator|>
literal|0
condition|)
block|{
name|codePoint
operator|+=
name|hexToInt
argument_list|(
name|curChar
argument_list|)
operator|*
name|codePointMultiplier
expr_stmt|;
name|codePointMultiplier
operator|>>>=
literal|4
expr_stmt|;
if|if
condition|(
name|codePointMultiplier
operator|==
literal|0
condition|)
block|{
name|output
index|[
name|length
operator|++
index|]
operator|=
operator|(
name|char
operator|)
name|codePoint
expr_stmt|;
name|codePoint
operator|=
literal|0
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|lastCharWasEscapeChar
condition|)
block|{
if|if
condition|(
name|curChar
operator|==
literal|'u'
condition|)
block|{
comment|// found an escaped unicode character
name|codePointMultiplier
operator|=
literal|16
operator|*
literal|16
operator|*
literal|16
expr_stmt|;
block|}
else|else
block|{
comment|// this character was escaped
name|output
index|[
name|length
index|]
operator|=
name|curChar
expr_stmt|;
name|length
operator|++
expr_stmt|;
block|}
name|lastCharWasEscapeChar
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|curChar
operator|==
literal|'\\'
condition|)
block|{
name|lastCharWasEscapeChar
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|output
index|[
name|length
index|]
operator|=
name|curChar
expr_stmt|;
name|length
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|codePointMultiplier
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Truncated unicode escape sequence."
argument_list|)
throw|;
block|}
if|if
condition|(
name|lastCharWasEscapeChar
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Term can not end with escape character."
argument_list|)
throw|;
block|}
return|return
operator|new
name|String
argument_list|(
name|output
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
return|;
block|}
comment|/** Returns the numeric value of the hexadecimal character */
DECL|method|hexToInt
specifier|private
specifier|static
specifier|final
name|int
name|hexToInt
parameter_list|(
name|char
name|c
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
literal|'0'
operator|<=
name|c
operator|&&
name|c
operator|<=
literal|'9'
condition|)
block|{
return|return
name|c
operator|-
literal|'0'
return|;
block|}
elseif|else
if|if
condition|(
literal|'a'
operator|<=
name|c
operator|&&
name|c
operator|<=
literal|'f'
condition|)
block|{
return|return
name|c
operator|-
literal|'a'
operator|+
literal|10
return|;
block|}
elseif|else
if|if
condition|(
literal|'A'
operator|<=
name|c
operator|&&
name|c
operator|<=
literal|'F'
condition|)
block|{
return|return
name|c
operator|-
literal|'A'
operator|+
literal|10
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"None-hex character in unicode escape sequence: "
operator|+
name|c
argument_list|)
throw|;
block|}
block|}
comment|/**    * Returns a String where those characters that QueryParser    * expects to be escaped are escaped by a preceding<code>\</code>.    */
DECL|method|escape
specifier|public
specifier|static
name|String
name|escape
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// These characters are part of the query syntax and must be escaped
if|if
condition|(
name|c
operator|==
literal|'\\'
operator|||
name|c
operator|==
literal|'+'
operator|||
name|c
operator|==
literal|'-'
operator|||
name|c
operator|==
literal|'!'
operator|||
name|c
operator|==
literal|'('
operator|||
name|c
operator|==
literal|')'
operator|||
name|c
operator|==
literal|':'
operator|||
name|c
operator|==
literal|'^'
operator|||
name|c
operator|==
literal|'['
operator|||
name|c
operator|==
literal|']'
operator|||
name|c
operator|==
literal|'\"'
operator|||
name|c
operator|==
literal|'{'
operator|||
name|c
operator|==
literal|'}'
operator|||
name|c
operator|==
literal|'~'
operator|||
name|c
operator|==
literal|'*'
operator|||
name|c
operator|==
literal|'?'
operator|||
name|c
operator|==
literal|'|'
operator|||
name|c
operator|==
literal|'&'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Command line tool to test QueryParser, using {@link org.apache.lucene.analysis.SimpleAnalyzer}.    * Usage:<br>    *<code>java org.apache.lucene.queryParser.QueryParser&lt;input&gt;</code>    */
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: java org.apache.lucene.queryParser.QueryParser<input>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
literal|"field"
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|SimpleAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|Query
name|q
init|=
name|qp
operator|.
name|parse
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|q
operator|.
name|toString
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// *   Query  ::= ( Clause )*
comment|// *   Clause ::= ["+", "-"] [<TERM> ":"] (<TERM> | "(" Query ")" )
DECL|method|Conjunction
specifier|final
specifier|public
name|int
name|Conjunction
parameter_list|()
throws|throws
name|ParseException
block|{
name|int
name|ret
init|=
name|CONJ_NONE
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|AND
case|:
case|case
name|OR
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|AND
case|:
name|jj_consume_token
argument_list|(
name|AND
argument_list|)
expr_stmt|;
name|ret
operator|=
name|CONJ_AND
expr_stmt|;
break|break;
case|case
name|OR
case|:
name|jj_consume_token
argument_list|(
name|OR
argument_list|)
expr_stmt|;
name|ret
operator|=
name|CONJ_OR
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|0
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|1
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|ret
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|Modifiers
specifier|final
specifier|public
name|int
name|Modifiers
parameter_list|()
throws|throws
name|ParseException
block|{
name|int
name|ret
init|=
name|MOD_NONE
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|NOT
case|:
case|case
name|PLUS
case|:
case|case
name|MINUS
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|PLUS
case|:
name|jj_consume_token
argument_list|(
name|PLUS
argument_list|)
expr_stmt|;
name|ret
operator|=
name|MOD_REQ
expr_stmt|;
break|break;
case|case
name|MINUS
case|:
name|jj_consume_token
argument_list|(
name|MINUS
argument_list|)
expr_stmt|;
name|ret
operator|=
name|MOD_NOT
expr_stmt|;
break|break;
case|case
name|NOT
case|:
name|jj_consume_token
argument_list|(
name|NOT
argument_list|)
expr_stmt|;
name|ret
operator|=
name|MOD_NOT
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|2
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|3
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|ret
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|// This makes sure that there is no garbage after the query string
DECL|method|TopLevelQuery
specifier|final
specifier|public
name|Query
name|TopLevelQuery
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|ParseException
block|{
name|Query
name|q
decl_stmt|;
name|q
operator|=
name|Query
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|q
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|Query
specifier|final
specifier|public
name|Query
name|Query
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|ParseException
block|{
name|List
argument_list|<
name|BooleanClause
argument_list|>
name|clauses
init|=
operator|new
name|ArrayList
argument_list|<
name|BooleanClause
argument_list|>
argument_list|()
decl_stmt|;
name|Query
name|q
decl_stmt|,
name|firstQuery
init|=
literal|null
decl_stmt|;
name|int
name|conj
decl_stmt|,
name|mods
decl_stmt|;
name|mods
operator|=
name|Modifiers
argument_list|()
expr_stmt|;
name|q
operator|=
name|Clause
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|addClause
argument_list|(
name|clauses
argument_list|,
name|CONJ_NONE
argument_list|,
name|mods
argument_list|,
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
name|mods
operator|==
name|MOD_NONE
condition|)
name|firstQuery
operator|=
name|q
expr_stmt|;
name|label_1
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|AND
case|:
case|case
name|OR
case|:
case|case
name|NOT
case|:
case|case
name|PLUS
case|:
case|case
name|MINUS
case|:
case|case
name|LPAREN
case|:
case|case
name|STAR
case|:
case|case
name|QUOTED
case|:
case|case
name|TERM
case|:
case|case
name|PREFIXTERM
case|:
case|case
name|WILDTERM
case|:
case|case
name|RANGEIN_START
case|:
case|case
name|RANGEEX_START
case|:
case|case
name|NUMBER
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|4
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_1
break|;
block|}
name|conj
operator|=
name|Conjunction
argument_list|()
expr_stmt|;
name|mods
operator|=
name|Modifiers
argument_list|()
expr_stmt|;
name|q
operator|=
name|Clause
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|addClause
argument_list|(
name|clauses
argument_list|,
name|conj
argument_list|,
name|mods
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clauses
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|firstQuery
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|firstQuery
return|;
block|}
else|else
block|{
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|getBooleanQuery
argument_list|(
name|clauses
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|Clause
specifier|final
specifier|public
name|Query
name|Clause
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|ParseException
block|{
name|Query
name|q
decl_stmt|;
name|Token
name|fieldToken
init|=
literal|null
decl_stmt|,
name|boost
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|jj_2_1
argument_list|(
literal|2
argument_list|)
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|TERM
case|:
name|fieldToken
operator|=
name|jj_consume_token
argument_list|(
name|TERM
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|field
operator|=
name|discardEscapeChar
argument_list|(
name|fieldToken
operator|.
name|image
argument_list|)
expr_stmt|;
break|break;
case|case
name|STAR
case|:
name|jj_consume_token
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|field
operator|=
literal|"*"
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|5
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
else|else
block|{
empty_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|STAR
case|:
case|case
name|QUOTED
case|:
case|case
name|TERM
case|:
case|case
name|PREFIXTERM
case|:
case|case
name|WILDTERM
case|:
case|case
name|RANGEIN_START
case|:
case|case
name|RANGEEX_START
case|:
case|case
name|NUMBER
case|:
name|q
operator|=
name|Term
argument_list|(
name|field
argument_list|)
expr_stmt|;
break|break;
case|case
name|LPAREN
case|:
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|q
operator|=
name|Query
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|CARAT
case|:
name|jj_consume_token
argument_list|(
name|CARAT
argument_list|)
expr_stmt|;
name|boost
operator|=
name|jj_consume_token
argument_list|(
name|NUMBER
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|6
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|7
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
if|if
condition|(
name|boost
operator|!=
literal|null
condition|)
block|{
name|float
name|f
init|=
operator|(
name|float
operator|)
literal|1.0
decl_stmt|;
try|try
block|{
name|f
operator|=
name|Float
operator|.
name|valueOf
argument_list|(
name|boost
operator|.
name|image
argument_list|)
operator|.
name|floatValue
argument_list|()
expr_stmt|;
name|q
operator|.
name|setBoost
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{ }
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|q
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|Term
specifier|final
specifier|public
name|Query
name|Term
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|ParseException
block|{
name|Token
name|term
decl_stmt|,
name|boost
init|=
literal|null
decl_stmt|,
name|fuzzySlop
init|=
literal|null
decl_stmt|,
name|goop1
decl_stmt|,
name|goop2
decl_stmt|;
name|boolean
name|prefix
init|=
literal|false
decl_stmt|;
name|boolean
name|wildcard
init|=
literal|false
decl_stmt|;
name|boolean
name|fuzzy
init|=
literal|false
decl_stmt|;
name|Query
name|q
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|STAR
case|:
case|case
name|TERM
case|:
case|case
name|PREFIXTERM
case|:
case|case
name|WILDTERM
case|:
case|case
name|NUMBER
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|TERM
case|:
name|term
operator|=
name|jj_consume_token
argument_list|(
name|TERM
argument_list|)
expr_stmt|;
break|break;
case|case
name|STAR
case|:
name|term
operator|=
name|jj_consume_token
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
name|wildcard
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|PREFIXTERM
case|:
name|term
operator|=
name|jj_consume_token
argument_list|(
name|PREFIXTERM
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|WILDTERM
case|:
name|term
operator|=
name|jj_consume_token
argument_list|(
name|WILDTERM
argument_list|)
expr_stmt|;
name|wildcard
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|NUMBER
case|:
name|term
operator|=
name|jj_consume_token
argument_list|(
name|NUMBER
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|8
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|FUZZY_SLOP
case|:
name|fuzzySlop
operator|=
name|jj_consume_token
argument_list|(
name|FUZZY_SLOP
argument_list|)
expr_stmt|;
name|fuzzy
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|9
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|CARAT
case|:
name|jj_consume_token
argument_list|(
name|CARAT
argument_list|)
expr_stmt|;
name|boost
operator|=
name|jj_consume_token
argument_list|(
name|NUMBER
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|FUZZY_SLOP
case|:
name|fuzzySlop
operator|=
name|jj_consume_token
argument_list|(
name|FUZZY_SLOP
argument_list|)
expr_stmt|;
name|fuzzy
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|10
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|11
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|String
name|termImage
init|=
name|discardEscapeChar
argument_list|(
name|term
operator|.
name|image
argument_list|)
decl_stmt|;
if|if
condition|(
name|wildcard
condition|)
block|{
name|q
operator|=
name|getWildcardQuery
argument_list|(
name|field
argument_list|,
name|termImage
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|prefix
condition|)
block|{
name|q
operator|=
name|getPrefixQuery
argument_list|(
name|field
argument_list|,
name|discardEscapeChar
argument_list|(
name|term
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|term
operator|.
name|image
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fuzzy
condition|)
block|{
name|float
name|fms
init|=
name|fuzzyMinSim
decl_stmt|;
try|try
block|{
name|fms
operator|=
name|Float
operator|.
name|valueOf
argument_list|(
name|fuzzySlop
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{ }
if|if
condition|(
name|fms
argument_list|<
literal|0.0f
operator|||
name|fms
argument_list|>
literal|1.0f
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !"
argument_list|)
throw|;
block|}
block|}
name|q
operator|=
name|getFuzzyQuery
argument_list|(
name|field
argument_list|,
name|termImage
argument_list|,
name|fms
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|q
operator|=
name|getFieldQuery
argument_list|(
name|field
argument_list|,
name|termImage
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|RANGEIN_START
case|:
name|jj_consume_token
argument_list|(
name|RANGEIN_START
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|RANGEIN_GOOP
case|:
name|goop1
operator|=
name|jj_consume_token
argument_list|(
name|RANGEIN_GOOP
argument_list|)
expr_stmt|;
break|break;
case|case
name|RANGEIN_QUOTED
case|:
name|goop1
operator|=
name|jj_consume_token
argument_list|(
name|RANGEIN_QUOTED
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|12
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|RANGEIN_TO
case|:
name|jj_consume_token
argument_list|(
name|RANGEIN_TO
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|13
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|RANGEIN_GOOP
case|:
name|goop2
operator|=
name|jj_consume_token
argument_list|(
name|RANGEIN_GOOP
argument_list|)
expr_stmt|;
break|break;
case|case
name|RANGEIN_QUOTED
case|:
name|goop2
operator|=
name|jj_consume_token
argument_list|(
name|RANGEIN_QUOTED
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|14
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|jj_consume_token
argument_list|(
name|RANGEIN_END
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|CARAT
case|:
name|jj_consume_token
argument_list|(
name|CARAT
argument_list|)
expr_stmt|;
name|boost
operator|=
name|jj_consume_token
argument_list|(
name|NUMBER
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|15
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
if|if
condition|(
name|goop1
operator|.
name|kind
operator|==
name|RANGEIN_QUOTED
condition|)
block|{
name|goop1
operator|.
name|image
operator|=
name|goop1
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|goop1
operator|.
name|image
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|goop2
operator|.
name|kind
operator|==
name|RANGEIN_QUOTED
condition|)
block|{
name|goop2
operator|.
name|image
operator|=
name|goop2
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|goop2
operator|.
name|image
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|q
operator|=
name|getRangeQuery
argument_list|(
name|field
argument_list|,
name|discardEscapeChar
argument_list|(
name|goop1
operator|.
name|image
argument_list|)
argument_list|,
name|discardEscapeChar
argument_list|(
name|goop2
operator|.
name|image
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|RANGEEX_START
case|:
name|jj_consume_token
argument_list|(
name|RANGEEX_START
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|RANGEEX_GOOP
case|:
name|goop1
operator|=
name|jj_consume_token
argument_list|(
name|RANGEEX_GOOP
argument_list|)
expr_stmt|;
break|break;
case|case
name|RANGEEX_QUOTED
case|:
name|goop1
operator|=
name|jj_consume_token
argument_list|(
name|RANGEEX_QUOTED
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|16
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|RANGEEX_TO
case|:
name|jj_consume_token
argument_list|(
name|RANGEEX_TO
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|17
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|RANGEEX_GOOP
case|:
name|goop2
operator|=
name|jj_consume_token
argument_list|(
name|RANGEEX_GOOP
argument_list|)
expr_stmt|;
break|break;
case|case
name|RANGEEX_QUOTED
case|:
name|goop2
operator|=
name|jj_consume_token
argument_list|(
name|RANGEEX_QUOTED
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|18
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
name|jj_consume_token
argument_list|(
name|RANGEEX_END
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|CARAT
case|:
name|jj_consume_token
argument_list|(
name|CARAT
argument_list|)
expr_stmt|;
name|boost
operator|=
name|jj_consume_token
argument_list|(
name|NUMBER
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|19
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
if|if
condition|(
name|goop1
operator|.
name|kind
operator|==
name|RANGEEX_QUOTED
condition|)
block|{
name|goop1
operator|.
name|image
operator|=
name|goop1
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|goop1
operator|.
name|image
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|goop2
operator|.
name|kind
operator|==
name|RANGEEX_QUOTED
condition|)
block|{
name|goop2
operator|.
name|image
operator|=
name|goop2
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|goop2
operator|.
name|image
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|q
operator|=
name|getRangeQuery
argument_list|(
name|field
argument_list|,
name|discardEscapeChar
argument_list|(
name|goop1
operator|.
name|image
argument_list|)
argument_list|,
name|discardEscapeChar
argument_list|(
name|goop2
operator|.
name|image
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|QUOTED
case|:
name|term
operator|=
name|jj_consume_token
argument_list|(
name|QUOTED
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|FUZZY_SLOP
case|:
name|fuzzySlop
operator|=
name|jj_consume_token
argument_list|(
name|FUZZY_SLOP
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|20
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|CARAT
case|:
name|jj_consume_token
argument_list|(
name|CARAT
argument_list|)
expr_stmt|;
name|boost
operator|=
name|jj_consume_token
argument_list|(
name|NUMBER
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|21
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|int
name|s
init|=
name|phraseSlop
decl_stmt|;
if|if
condition|(
name|fuzzySlop
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|s
operator|=
name|Float
operator|.
name|valueOf
argument_list|(
name|fuzzySlop
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{ }
block|}
name|q
operator|=
name|getFieldQuery
argument_list|(
name|field
argument_list|,
name|discardEscapeChar
argument_list|(
name|term
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|term
operator|.
name|image
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|22
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
if|if
condition|(
name|boost
operator|!=
literal|null
condition|)
block|{
name|float
name|f
init|=
operator|(
name|float
operator|)
literal|1.0
decl_stmt|;
try|try
block|{
name|f
operator|=
name|Float
operator|.
name|valueOf
argument_list|(
name|boost
operator|.
name|image
argument_list|)
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
comment|/* Should this be handled somehow? (defaults to "no boost", if      * boost number is invalid)      */
block|}
comment|// avoid boosting null queries, such as those caused by stop words
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|q
operator|.
name|setBoost
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|q
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|jj_2_1
specifier|private
name|boolean
name|jj_2_1
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_1
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|0
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|jj_3R_3
specifier|private
name|boolean
name|jj_3R_3
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|STAR
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|COLON
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
DECL|method|jj_3R_2
specifier|private
name|boolean
name|jj_3R_2
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|TERM
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|COLON
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
DECL|method|jj_3_1
specifier|private
name|boolean
name|jj_3_1
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_2
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_3
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/** Generated Token Manager. */
DECL|field|token_source
specifier|public
name|QueryParserTokenManager
name|token_source
decl_stmt|;
comment|/** Current token. */
DECL|field|token
specifier|public
name|Token
name|token
decl_stmt|;
comment|/** Next token. */
DECL|field|jj_nt
specifier|public
name|Token
name|jj_nt
decl_stmt|;
DECL|field|jj_ntk
specifier|private
name|int
name|jj_ntk
decl_stmt|;
DECL|field|jj_scanpos
DECL|field|jj_lastpos
specifier|private
name|Token
name|jj_scanpos
decl_stmt|,
name|jj_lastpos
decl_stmt|;
DECL|field|jj_la
specifier|private
name|int
name|jj_la
decl_stmt|;
DECL|field|jj_gen
specifier|private
name|int
name|jj_gen
decl_stmt|;
DECL|field|jj_la1
specifier|final
specifier|private
name|int
index|[]
name|jj_la1
init|=
operator|new
name|int
index|[
literal|23
index|]
decl_stmt|;
DECL|field|jj_la1_0
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_0
decl_stmt|;
DECL|field|jj_la1_1
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_1
decl_stmt|;
static|static
block|{
name|jj_la1_init_0
argument_list|()
expr_stmt|;
name|jj_la1_init_1
argument_list|()
expr_stmt|;
block|}
DECL|method|jj_la1_init_0
specifier|private
specifier|static
name|void
name|jj_la1_init_0
parameter_list|()
block|{
name|jj_la1_0
operator|=
operator|new
name|int
index|[]
block|{
literal|0x300
block|,
literal|0x300
block|,
literal|0x1c00
block|,
literal|0x1c00
block|,
literal|0x3ed3f00
block|,
literal|0x90000
block|,
literal|0x20000
block|,
literal|0x3ed2000
block|,
literal|0x2690000
block|,
literal|0x100000
block|,
literal|0x100000
block|,
literal|0x20000
block|,
literal|0x30000000
block|,
literal|0x4000000
block|,
literal|0x30000000
block|,
literal|0x20000
block|,
literal|0x0
block|,
literal|0x40000000
block|,
literal|0x0
block|,
literal|0x20000
block|,
literal|0x100000
block|,
literal|0x20000
block|,
literal|0x3ed0000
block|,}
expr_stmt|;
block|}
DECL|method|jj_la1_init_1
specifier|private
specifier|static
name|void
name|jj_la1_init_1
parameter_list|()
block|{
name|jj_la1_1
operator|=
operator|new
name|int
index|[]
block|{
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x3
block|,
literal|0x0
block|,
literal|0x3
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,}
expr_stmt|;
block|}
DECL|field|jj_2_rtns
specifier|final
specifier|private
name|JJCalls
index|[]
name|jj_2_rtns
init|=
operator|new
name|JJCalls
index|[
literal|1
index|]
decl_stmt|;
DECL|field|jj_rescan
specifier|private
name|boolean
name|jj_rescan
init|=
literal|false
decl_stmt|;
DECL|field|jj_gc
specifier|private
name|int
name|jj_gc
init|=
literal|0
decl_stmt|;
comment|/** Constructor with user supplied CharStream. */
DECL|method|QueryParser
specifier|public
name|QueryParser
parameter_list|(
name|CharStream
name|stream
parameter_list|)
block|{
name|token_source
operator|=
operator|new
name|QueryParserTokenManager
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|23
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
comment|/** Reinitialise. */
DECL|method|ReInit
specifier|public
name|void
name|ReInit
parameter_list|(
name|CharStream
name|stream
parameter_list|)
block|{
name|token_source
operator|.
name|ReInit
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|23
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
comment|/** Constructor with generated Token Manager. */
DECL|method|QueryParser
specifier|public
name|QueryParser
parameter_list|(
name|QueryParserTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|23
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
comment|/** Reinitialise. */
DECL|method|ReInit
specifier|public
name|void
name|ReInit
parameter_list|(
name|QueryParserTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|23
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
DECL|method|jj_consume_token
specifier|private
name|Token
name|jj_consume_token
parameter_list|(
name|int
name|kind
parameter_list|)
throws|throws
name|ParseException
block|{
name|Token
name|oldToken
decl_stmt|;
if|if
condition|(
operator|(
name|oldToken
operator|=
name|token
operator|)
operator|.
name|next
operator|!=
literal|null
condition|)
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
else|else
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|kind
operator|==
name|kind
condition|)
block|{
name|jj_gen
operator|++
expr_stmt|;
if|if
condition|(
operator|++
name|jj_gc
operator|>
literal|100
condition|)
block|{
name|jj_gc
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|JJCalls
name|c
init|=
name|jj_2_rtns
index|[
name|i
index|]
decl_stmt|;
while|while
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|gen
operator|<
name|jj_gen
condition|)
name|c
operator|.
name|first
operator|=
literal|null
expr_stmt|;
name|c
operator|=
name|c
operator|.
name|next
expr_stmt|;
block|}
block|}
block|}
return|return
name|token
return|;
block|}
name|token
operator|=
name|oldToken
expr_stmt|;
name|jj_kind
operator|=
name|kind
expr_stmt|;
throw|throw
name|generateParseException
argument_list|()
throw|;
block|}
DECL|class|LookaheadSuccess
specifier|static
specifier|private
specifier|final
class|class
name|LookaheadSuccess
extends|extends
name|java
operator|.
name|lang
operator|.
name|Error
block|{ }
DECL|field|jj_ls
specifier|final
specifier|private
name|LookaheadSuccess
name|jj_ls
init|=
operator|new
name|LookaheadSuccess
argument_list|()
decl_stmt|;
DECL|method|jj_scan_token
specifier|private
name|boolean
name|jj_scan_token
parameter_list|(
name|int
name|kind
parameter_list|)
block|{
if|if
condition|(
name|jj_scanpos
operator|==
name|jj_lastpos
condition|)
block|{
name|jj_la
operator|--
expr_stmt|;
if|if
condition|(
name|jj_scanpos
operator|.
name|next
operator|==
literal|null
condition|)
block|{
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|jj_scanpos
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|jj_scanpos
operator|.
name|next
expr_stmt|;
block|}
block|}
else|else
block|{
name|jj_scanpos
operator|=
name|jj_scanpos
operator|.
name|next
expr_stmt|;
block|}
if|if
condition|(
name|jj_rescan
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|Token
name|tok
init|=
name|token
decl_stmt|;
while|while
condition|(
name|tok
operator|!=
literal|null
operator|&&
name|tok
operator|!=
name|jj_scanpos
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|tok
operator|=
name|tok
operator|.
name|next
expr_stmt|;
block|}
if|if
condition|(
name|tok
operator|!=
literal|null
condition|)
name|jj_add_error_token
argument_list|(
name|kind
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jj_scanpos
operator|.
name|kind
operator|!=
name|kind
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_la
operator|==
literal|0
operator|&&
name|jj_scanpos
operator|==
name|jj_lastpos
condition|)
throw|throw
name|jj_ls
throw|;
return|return
literal|false
return|;
block|}
comment|/** Get the next Token. */
DECL|method|getNextToken
specifier|final
specifier|public
name|Token
name|getNextToken
parameter_list|()
block|{
if|if
condition|(
name|token
operator|.
name|next
operator|!=
literal|null
condition|)
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
else|else
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|++
expr_stmt|;
return|return
name|token
return|;
block|}
comment|/** Get the specific Token. */
DECL|method|getToken
specifier|final
specifier|public
name|Token
name|getToken
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Token
name|t
init|=
name|token
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|t
operator|.
name|next
operator|!=
literal|null
condition|)
name|t
operator|=
name|t
operator|.
name|next
expr_stmt|;
else|else
name|t
operator|=
name|t
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
DECL|method|jj_ntk
specifier|private
name|int
name|jj_ntk
parameter_list|()
block|{
if|if
condition|(
operator|(
name|jj_nt
operator|=
name|token
operator|.
name|next
operator|)
operator|==
literal|null
condition|)
return|return
operator|(
name|jj_ntk
operator|=
operator|(
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
operator|)
operator|.
name|kind
operator|)
return|;
else|else
return|return
operator|(
name|jj_ntk
operator|=
name|jj_nt
operator|.
name|kind
operator|)
return|;
block|}
DECL|field|jj_expentries
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|int
index|[]
argument_list|>
name|jj_expentries
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|int
index|[]
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|jj_expentry
specifier|private
name|int
index|[]
name|jj_expentry
decl_stmt|;
DECL|field|jj_kind
specifier|private
name|int
name|jj_kind
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|jj_lasttokens
specifier|private
name|int
index|[]
name|jj_lasttokens
init|=
operator|new
name|int
index|[
literal|100
index|]
decl_stmt|;
DECL|field|jj_endpos
specifier|private
name|int
name|jj_endpos
decl_stmt|;
DECL|method|jj_add_error_token
specifier|private
name|void
name|jj_add_error_token
parameter_list|(
name|int
name|kind
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
if|if
condition|(
name|pos
operator|>=
literal|100
condition|)
return|return;
if|if
condition|(
name|pos
operator|==
name|jj_endpos
operator|+
literal|1
condition|)
block|{
name|jj_lasttokens
index|[
name|jj_endpos
operator|++
index|]
operator|=
name|kind
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|jj_endpos
operator|!=
literal|0
condition|)
block|{
name|jj_expentry
operator|=
operator|new
name|int
index|[
name|jj_endpos
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_endpos
condition|;
name|i
operator|++
control|)
block|{
name|jj_expentry
index|[
name|i
index|]
operator|=
name|jj_lasttokens
index|[
name|i
index|]
expr_stmt|;
block|}
name|jj_entries_loop
label|:
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Iterator
name|it
init|=
name|jj_expentries
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|int
index|[]
name|oldentry
init|=
operator|(
name|int
index|[]
operator|)
operator|(
name|it
operator|.
name|next
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|oldentry
operator|.
name|length
operator|==
name|jj_expentry
operator|.
name|length
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_expentry
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|oldentry
index|[
name|i
index|]
operator|!=
name|jj_expentry
index|[
name|i
index|]
condition|)
block|{
continue|continue
name|jj_entries_loop
continue|;
block|}
block|}
name|jj_expentries
operator|.
name|add
argument_list|(
name|jj_expentry
argument_list|)
expr_stmt|;
break|break
name|jj_entries_loop
break|;
block|}
block|}
if|if
condition|(
name|pos
operator|!=
literal|0
condition|)
name|jj_lasttokens
index|[
operator|(
name|jj_endpos
operator|=
name|pos
operator|)
operator|-
literal|1
index|]
operator|=
name|kind
expr_stmt|;
block|}
block|}
comment|/** Generate ParseException. */
DECL|method|generateParseException
specifier|public
name|ParseException
name|generateParseException
parameter_list|()
block|{
name|jj_expentries
operator|.
name|clear
argument_list|()
expr_stmt|;
name|boolean
index|[]
name|la1tokens
init|=
operator|new
name|boolean
index|[
literal|34
index|]
decl_stmt|;
if|if
condition|(
name|jj_kind
operator|>=
literal|0
condition|)
block|{
name|la1tokens
index|[
name|jj_kind
index|]
operator|=
literal|true
expr_stmt|;
name|jj_kind
operator|=
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|23
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|jj_la1
index|[
name|i
index|]
operator|==
name|jj_gen
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|32
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|jj_la1_0
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|jj_la1_1
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
literal|32
operator|+
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|34
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|la1tokens
index|[
name|i
index|]
condition|)
block|{
name|jj_expentry
operator|=
operator|new
name|int
index|[
literal|1
index|]
expr_stmt|;
name|jj_expentry
index|[
literal|0
index|]
operator|=
name|i
expr_stmt|;
name|jj_expentries
operator|.
name|add
argument_list|(
name|jj_expentry
argument_list|)
expr_stmt|;
block|}
block|}
name|jj_endpos
operator|=
literal|0
expr_stmt|;
name|jj_rescan_token
argument_list|()
expr_stmt|;
name|jj_add_error_token
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|exptokseq
init|=
operator|new
name|int
index|[
name|jj_expentries
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_expentries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|exptokseq
index|[
name|i
index|]
operator|=
name|jj_expentries
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ParseException
argument_list|(
name|token
argument_list|,
name|exptokseq
argument_list|,
name|tokenImage
argument_list|)
return|;
block|}
comment|/** Enable tracing. */
DECL|method|enable_tracing
specifier|final
specifier|public
name|void
name|enable_tracing
parameter_list|()
block|{   }
comment|/** Disable tracing. */
DECL|method|disable_tracing
specifier|final
specifier|public
name|void
name|disable_tracing
parameter_list|()
block|{   }
DECL|method|jj_rescan_token
specifier|private
name|void
name|jj_rescan_token
parameter_list|()
block|{
name|jj_rescan
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|JJCalls
name|p
init|=
name|jj_2_rtns
index|[
name|i
index|]
decl_stmt|;
do|do
block|{
if|if
condition|(
name|p
operator|.
name|gen
operator|>
name|jj_gen
condition|)
block|{
name|jj_la
operator|=
name|p
operator|.
name|arg
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|p
operator|.
name|first
expr_stmt|;
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
name|jj_3_1
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|p
operator|=
name|p
operator|.
name|next
expr_stmt|;
block|}
do|while
condition|(
name|p
operator|!=
literal|null
condition|)
do|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{ }
block|}
name|jj_rescan
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|jj_save
specifier|private
name|void
name|jj_save
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|xla
parameter_list|)
block|{
name|JJCalls
name|p
init|=
name|jj_2_rtns
index|[
name|index
index|]
decl_stmt|;
while|while
condition|(
name|p
operator|.
name|gen
operator|>
name|jj_gen
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|next
operator|==
literal|null
condition|)
block|{
name|p
operator|=
name|p
operator|.
name|next
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
break|break;
block|}
name|p
operator|=
name|p
operator|.
name|next
expr_stmt|;
block|}
name|p
operator|.
name|gen
operator|=
name|jj_gen
operator|+
name|xla
operator|-
name|jj_la
expr_stmt|;
name|p
operator|.
name|first
operator|=
name|token
expr_stmt|;
name|p
operator|.
name|arg
operator|=
name|xla
expr_stmt|;
block|}
DECL|class|JJCalls
specifier|static
specifier|final
class|class
name|JJCalls
block|{
DECL|field|gen
name|int
name|gen
decl_stmt|;
DECL|field|first
name|Token
name|first
decl_stmt|;
DECL|field|arg
name|int
name|arg
decl_stmt|;
DECL|field|next
name|JJCalls
name|next
decl_stmt|;
block|}
block|}
end_class
end_unit
