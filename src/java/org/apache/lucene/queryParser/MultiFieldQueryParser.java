begin_unit
begin_package
DECL|package|org.apache.lucene.queryParser
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
package|;
end_package
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation"  *    must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|CharStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|QueryParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|QueryParserTokenManager
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_comment
comment|/**  * A QueryParser which constructs queries to search multiple fields.  *  * @author<a href="mailto:kelvin@relevanz.com">Kelvin Tan</a>  * @version $Revision$  */
end_comment
begin_class
DECL|class|MultiFieldQueryParser
specifier|public
class|class
name|MultiFieldQueryParser
extends|extends
name|QueryParser
block|{
DECL|field|NORMAL_FIELD
specifier|public
specifier|static
specifier|final
name|int
name|NORMAL_FIELD
init|=
literal|0
decl_stmt|;
DECL|field|REQUIRED_FIELD
specifier|public
specifier|static
specifier|final
name|int
name|REQUIRED_FIELD
init|=
literal|1
decl_stmt|;
DECL|field|PROHIBITED_FIELD
specifier|public
specifier|static
specifier|final
name|int
name|PROHIBITED_FIELD
init|=
literal|2
decl_stmt|;
DECL|method|MultiFieldQueryParser
specifier|public
name|MultiFieldQueryParser
parameter_list|(
name|QueryParserTokenManager
name|tm
parameter_list|)
block|{
name|super
argument_list|(
name|tm
argument_list|)
expr_stmt|;
block|}
DECL|method|MultiFieldQueryParser
specifier|public
name|MultiFieldQueryParser
parameter_list|(
name|CharStream
name|stream
parameter_list|)
block|{
name|super
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
DECL|method|MultiFieldQueryParser
specifier|public
name|MultiFieldQueryParser
parameter_list|(
name|String
name|f
parameter_list|,
name|Analyzer
name|a
parameter_list|)
block|{
name|super
argument_list|(
name|f
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
comment|/**      *<p>      * Parses a query which searches on the fields specified.      *<p>      * If x fields are specified, this effectively constructs:      *<pre>      *<code>      * (field1:query) (field2:query) (field3:query)...(fieldx:query)      *</code>      *</pre>      *      * @param query Query string to parse      * @param fields Fields to search on      * @param analyzer Analyzer to use      * @throws ParseException if query parsing fails      * @throws TokenMgrError if query parsing fails      */
DECL|method|parse
specifier|public
specifier|static
name|Query
name|parse
parameter_list|(
name|String
name|query
parameter_list|,
name|String
index|[]
name|fields
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|ParseException
block|{
name|BooleanQuery
name|bQuery
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Query
name|q
init|=
name|parse
argument_list|(
name|query
argument_list|,
name|fields
index|[
name|i
index|]
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
name|bQuery
operator|.
name|add
argument_list|(
name|q
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|bQuery
return|;
block|}
comment|/**      *<p>      * Parses a query, searching on the fields specified.      * Use this if you need to specify certain fields as required,      * and others as prohibited.      *<p><pre>      * Usage:      *<code>      * String[] fields = {"filename", "contents", "description"};      * int[] flags = {MultiFieldQueryParser.NORMAL FIELD,      *                MultiFieldQueryParser.REQUIRED FIELD,      *                MultiFieldQueryParser.PROHIBITED FIELD,};      * parse(query, fields, flags, analyzer);      *</code>      *</pre>      *<p>      * The code above would construct a query:      *<pre>      *<code>      * (filename:query) +(contents:query) -(description:query)      *</code>      *</pre>      *      * @param query Query string to parse      * @param fields Fields to search on      * @param flags Flags describing the fields      * @param analyzer Analyzer to use      * @throws ParseException if query parsing fails      * @throws TokenMgrError if query parsing fails      */
DECL|method|parse
specifier|public
specifier|static
name|Query
name|parse
parameter_list|(
name|String
name|query
parameter_list|,
name|String
index|[]
name|fields
parameter_list|,
name|int
index|[]
name|flags
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|ParseException
block|{
name|BooleanQuery
name|bQuery
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Query
name|q
init|=
name|parse
argument_list|(
name|query
argument_list|,
name|fields
index|[
name|i
index|]
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
name|int
name|flag
init|=
name|flags
index|[
name|i
index|]
decl_stmt|;
switch|switch
condition|(
name|flag
condition|)
block|{
case|case
name|REQUIRED_FIELD
case|:
name|bQuery
operator|.
name|add
argument_list|(
name|q
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|PROHIBITED_FIELD
case|:
name|bQuery
operator|.
name|add
argument_list|(
name|q
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
default|default:
name|bQuery
operator|.
name|add
argument_list|(
name|q
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|bQuery
return|;
block|}
block|}
end_class
end_unit
