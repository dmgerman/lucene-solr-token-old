begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/**  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|OutputStream
import|;
end_import
begin_comment
comment|/** Optimized implementation of a vector of bits.  This is more-or-less like   java.util.BitSet, but also includes the following:<ul><li>a count() method, which efficiently computes the number of one bits;</li><li>optimized read from and write to disk;</li><li>inlinable get() method;</li></ul>    @author Doug Cutting   @version $Id$   */
end_comment
begin_class
DECL|class|BitVector
specifier|public
specifier|final
class|class
name|BitVector
block|{
DECL|field|bits
specifier|private
name|byte
index|[]
name|bits
decl_stmt|;
DECL|field|size
specifier|private
name|int
name|size
decl_stmt|;
DECL|field|count
specifier|private
name|int
name|count
init|=
operator|-
literal|1
decl_stmt|;
comment|/** Constructs a vector capable of holding<code>n</code> bits. */
DECL|method|BitVector
specifier|public
name|BitVector
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|size
operator|=
name|n
expr_stmt|;
name|bits
operator|=
operator|new
name|byte
index|[
operator|(
name|size
operator|>>
literal|3
operator|)
operator|+
literal|1
index|]
expr_stmt|;
block|}
comment|/** Sets the value of<code>bit</code> to one. */
DECL|method|set
specifier|public
specifier|final
name|void
name|set
parameter_list|(
name|int
name|bit
parameter_list|)
block|{
name|bits
index|[
name|bit
operator|>>
literal|3
index|]
operator||=
literal|1
operator|<<
operator|(
name|bit
operator|&
literal|7
operator|)
expr_stmt|;
name|count
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/** Sets the value of<code>bit</code> to zero. */
DECL|method|clear
specifier|public
specifier|final
name|void
name|clear
parameter_list|(
name|int
name|bit
parameter_list|)
block|{
name|bits
index|[
name|bit
operator|>>
literal|3
index|]
operator|&=
operator|~
operator|(
literal|1
operator|<<
operator|(
name|bit
operator|&
literal|7
operator|)
operator|)
expr_stmt|;
name|count
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/** Returns<code>true</code> if<code>bit</code> is one and<code>false</code> if it is zero. */
DECL|method|get
specifier|public
specifier|final
name|boolean
name|get
parameter_list|(
name|int
name|bit
parameter_list|)
block|{
return|return
operator|(
name|bits
index|[
name|bit
operator|>>
literal|3
index|]
operator|&
operator|(
literal|1
operator|<<
operator|(
name|bit
operator|&
literal|7
operator|)
operator|)
operator|)
operator|!=
literal|0
return|;
block|}
comment|/** Returns the number of bits in this vector.  This is also one greater than     the number of the largest valid bit number. */
DECL|method|size
specifier|public
specifier|final
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
comment|/** Returns the total number of one bits in this vector.  This is efficiently     computed and cached, so that, if the vector is not changed, no     recomputation is done for repeated calls. */
DECL|method|count
specifier|public
specifier|final
name|int
name|count
parameter_list|()
block|{
comment|// if the vector has been modified
if|if
condition|(
name|count
operator|==
operator|-
literal|1
condition|)
block|{
name|int
name|c
init|=
literal|0
decl_stmt|;
name|int
name|end
init|=
name|bits
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
name|c
operator|+=
name|BYTE_COUNTS
index|[
name|bits
index|[
name|i
index|]
operator|&
literal|0xFF
index|]
expr_stmt|;
comment|// sum bits per byte
name|count
operator|=
name|c
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
DECL|field|BYTE_COUNTS
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|BYTE_COUNTS
init|=
block|{
comment|// table of bits/byte
literal|0
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|2
block|,
literal|2
block|,
literal|3
block|,
literal|1
block|,
literal|2
block|,
literal|2
block|,
literal|3
block|,
literal|2
block|,
literal|3
block|,
literal|3
block|,
literal|4
block|,
literal|1
block|,
literal|2
block|,
literal|2
block|,
literal|3
block|,
literal|2
block|,
literal|3
block|,
literal|3
block|,
literal|4
block|,
literal|2
block|,
literal|3
block|,
literal|3
block|,
literal|4
block|,
literal|3
block|,
literal|4
block|,
literal|4
block|,
literal|5
block|,
literal|1
block|,
literal|2
block|,
literal|2
block|,
literal|3
block|,
literal|2
block|,
literal|3
block|,
literal|3
block|,
literal|4
block|,
literal|2
block|,
literal|3
block|,
literal|3
block|,
literal|4
block|,
literal|3
block|,
literal|4
block|,
literal|4
block|,
literal|5
block|,
literal|2
block|,
literal|3
block|,
literal|3
block|,
literal|4
block|,
literal|3
block|,
literal|4
block|,
literal|4
block|,
literal|5
block|,
literal|3
block|,
literal|4
block|,
literal|4
block|,
literal|5
block|,
literal|4
block|,
literal|5
block|,
literal|5
block|,
literal|6
block|,
literal|1
block|,
literal|2
block|,
literal|2
block|,
literal|3
block|,
literal|2
block|,
literal|3
block|,
literal|3
block|,
literal|4
block|,
literal|2
block|,
literal|3
block|,
literal|3
block|,
literal|4
block|,
literal|3
block|,
literal|4
block|,
literal|4
block|,
literal|5
block|,
literal|2
block|,
literal|3
block|,
literal|3
block|,
literal|4
block|,
literal|3
block|,
literal|4
block|,
literal|4
block|,
literal|5
block|,
literal|3
block|,
literal|4
block|,
literal|4
block|,
literal|5
block|,
literal|4
block|,
literal|5
block|,
literal|5
block|,
literal|6
block|,
literal|2
block|,
literal|3
block|,
literal|3
block|,
literal|4
block|,
literal|3
block|,
literal|4
block|,
literal|4
block|,
literal|5
block|,
literal|3
block|,
literal|4
block|,
literal|4
block|,
literal|5
block|,
literal|4
block|,
literal|5
block|,
literal|5
block|,
literal|6
block|,
literal|3
block|,
literal|4
block|,
literal|4
block|,
literal|5
block|,
literal|4
block|,
literal|5
block|,
literal|5
block|,
literal|6
block|,
literal|4
block|,
literal|5
block|,
literal|5
block|,
literal|6
block|,
literal|5
block|,
literal|6
block|,
literal|6
block|,
literal|7
block|,
literal|1
block|,
literal|2
block|,
literal|2
block|,
literal|3
block|,
literal|2
block|,
literal|3
block|,
literal|3
block|,
literal|4
block|,
literal|2
block|,
literal|3
block|,
literal|3
block|,
literal|4
block|,
literal|3
block|,
literal|4
block|,
literal|4
block|,
literal|5
block|,
literal|2
block|,
literal|3
block|,
literal|3
block|,
literal|4
block|,
literal|3
block|,
literal|4
block|,
literal|4
block|,
literal|5
block|,
literal|3
block|,
literal|4
block|,
literal|4
block|,
literal|5
block|,
literal|4
block|,
literal|5
block|,
literal|5
block|,
literal|6
block|,
literal|2
block|,
literal|3
block|,
literal|3
block|,
literal|4
block|,
literal|3
block|,
literal|4
block|,
literal|4
block|,
literal|5
block|,
literal|3
block|,
literal|4
block|,
literal|4
block|,
literal|5
block|,
literal|4
block|,
literal|5
block|,
literal|5
block|,
literal|6
block|,
literal|3
block|,
literal|4
block|,
literal|4
block|,
literal|5
block|,
literal|4
block|,
literal|5
block|,
literal|5
block|,
literal|6
block|,
literal|4
block|,
literal|5
block|,
literal|5
block|,
literal|6
block|,
literal|5
block|,
literal|6
block|,
literal|6
block|,
literal|7
block|,
literal|2
block|,
literal|3
block|,
literal|3
block|,
literal|4
block|,
literal|3
block|,
literal|4
block|,
literal|4
block|,
literal|5
block|,
literal|3
block|,
literal|4
block|,
literal|4
block|,
literal|5
block|,
literal|4
block|,
literal|5
block|,
literal|5
block|,
literal|6
block|,
literal|3
block|,
literal|4
block|,
literal|4
block|,
literal|5
block|,
literal|4
block|,
literal|5
block|,
literal|5
block|,
literal|6
block|,
literal|4
block|,
literal|5
block|,
literal|5
block|,
literal|6
block|,
literal|5
block|,
literal|6
block|,
literal|6
block|,
literal|7
block|,
literal|3
block|,
literal|4
block|,
literal|4
block|,
literal|5
block|,
literal|4
block|,
literal|5
block|,
literal|5
block|,
literal|6
block|,
literal|4
block|,
literal|5
block|,
literal|5
block|,
literal|6
block|,
literal|5
block|,
literal|6
block|,
literal|6
block|,
literal|7
block|,
literal|4
block|,
literal|5
block|,
literal|5
block|,
literal|6
block|,
literal|5
block|,
literal|6
block|,
literal|6
block|,
literal|7
block|,
literal|5
block|,
literal|6
block|,
literal|6
block|,
literal|7
block|,
literal|6
block|,
literal|7
block|,
literal|7
block|,
literal|8
block|}
decl_stmt|;
comment|/** Writes this vector to the file<code>name</code> in Directory<code>d</code>, in a format that can be read by the constructor {@link     #BitVector(Directory, String)}.  */
DECL|method|write
specifier|public
specifier|final
name|void
name|write
parameter_list|(
name|Directory
name|d
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputStream
name|output
init|=
name|d
operator|.
name|createFile
argument_list|(
name|name
argument_list|)
decl_stmt|;
try|try
block|{
name|output
operator|.
name|writeInt
argument_list|(
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// write size
name|output
operator|.
name|writeInt
argument_list|(
name|count
argument_list|()
argument_list|)
expr_stmt|;
comment|// write count
name|output
operator|.
name|writeBytes
argument_list|(
name|bits
argument_list|,
name|bits
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// write bits
block|}
finally|finally
block|{
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Constructs a bit vector from the file<code>name</code> in Directory<code>d</code>, as written by the {@link #write} method.     */
DECL|method|BitVector
specifier|public
name|BitVector
parameter_list|(
name|Directory
name|d
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexInput
name|input
init|=
name|d
operator|.
name|openInput
argument_list|(
name|name
argument_list|)
decl_stmt|;
try|try
block|{
name|size
operator|=
name|input
operator|.
name|readInt
argument_list|()
expr_stmt|;
comment|// read size
name|count
operator|=
name|input
operator|.
name|readInt
argument_list|()
expr_stmt|;
comment|// read count
name|bits
operator|=
operator|new
name|byte
index|[
operator|(
name|size
operator|>>
literal|3
operator|)
operator|+
literal|1
index|]
expr_stmt|;
comment|// allocate bits
name|input
operator|.
name|readBytes
argument_list|(
name|bits
argument_list|,
literal|0
argument_list|,
name|bits
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// read bits
block|}
finally|finally
block|{
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
