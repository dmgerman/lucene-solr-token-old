begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache Lucene" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Lucene", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_comment
comment|// copied from jdk 1.2b3 sources, so that we can use it in java 1.1
end_comment
begin_comment
comment|/**  * This class contains various methods for manipulating arrays (such as  * sorting and searching).  It also contains a static factory that allows  * arrays to be viewed as Lists.  *  * @author  Josh Bloch  * @version 1.17 03/18/98  * @since   JDK1.2  */
end_comment
begin_class
DECL|class|Arrays
specifier|public
class|class
name|Arrays
block|{
comment|/**      * Sorts the specified array of objects into ascending order, according      * to the<i>natural comparison method</i> of its elements.  All      * elements in the array must implement the Comparable interface.      * Furthermore, all elements in the array must be<i>mutually      * comparable</i> (that is, e1.compareTo(e2) must not throw a      * typeMismatchException for any elements e1 and e2 in the array).      *<p>      * This sort is guaranteed to be<em>stable</em>:  equal elements will      * not be reordered as a result of the sort.      *<p>      * The sorting algorithm is a modified mergesort (in which the merge is      * omitted if the highest element in the low sublist is less than the      * lowest element in the high sublist).  This algorithm offers guaranteed      * n*log(n) performance, and can approach linear performance on nearly      * sorted lists.      *       * @param a the array to be sorted.      * @exception ClassCastException array contains elements that are not      *<i>mutually comparable</i> (for example, Strings and      *		  Integers).      * @see Comparable      */
DECL|method|sort
specifier|public
specifier|static
name|void
name|sort
parameter_list|(
name|String
index|[]
name|a
parameter_list|)
block|{
name|String
name|aux
index|[]
init|=
operator|(
name|String
index|[]
operator|)
name|a
operator|.
name|clone
argument_list|()
decl_stmt|;
name|mergeSort
argument_list|(
name|aux
argument_list|,
name|a
argument_list|,
literal|0
argument_list|,
name|a
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|mergeSort
specifier|private
specifier|static
name|void
name|mergeSort
parameter_list|(
name|String
name|src
index|[]
parameter_list|,
name|String
name|dest
index|[]
parameter_list|,
name|int
name|low
parameter_list|,
name|int
name|high
parameter_list|)
block|{
name|int
name|length
init|=
name|high
operator|-
name|low
decl_stmt|;
comment|// Insertion sort on smallest arrays
if|if
condition|(
name|length
operator|<
literal|7
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|low
init|;
name|i
operator|<
name|high
condition|;
name|i
operator|++
control|)
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|>
name|low
operator|&&
operator|(
name|dest
index|[
name|j
operator|-
literal|1
index|]
operator|)
operator|.
name|compareTo
argument_list|(
name|dest
index|[
name|j
index|]
argument_list|)
operator|>
literal|0
condition|;
name|j
operator|--
control|)
name|swap
argument_list|(
name|dest
argument_list|,
name|j
argument_list|,
name|j
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Recursively sort halves of dest into src
name|int
name|mid
init|=
operator|(
name|low
operator|+
name|high
operator|)
operator|/
literal|2
decl_stmt|;
name|mergeSort
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|low
argument_list|,
name|mid
argument_list|)
expr_stmt|;
name|mergeSort
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|mid
argument_list|,
name|high
argument_list|)
expr_stmt|;
comment|// If list is already sorted, just copy from src to dest.  This is an
comment|// optimization that results in faster sorts for nearly ordered lists.
if|if
condition|(
operator|(
name|src
index|[
name|mid
operator|-
literal|1
index|]
operator|)
operator|.
name|compareTo
argument_list|(
name|src
index|[
name|mid
index|]
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|src
argument_list|,
name|low
argument_list|,
name|dest
argument_list|,
name|low
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Merge sorted halves (now in src) into dest
for|for
control|(
name|int
name|i
init|=
name|low
init|,
name|p
init|=
name|low
init|,
name|q
init|=
name|mid
init|;
name|i
operator|<
name|high
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|q
operator|>=
name|high
operator|||
name|p
operator|<
name|mid
operator|&&
operator|(
name|src
index|[
name|p
index|]
operator|)
operator|.
name|compareTo
argument_list|(
name|src
index|[
name|q
index|]
argument_list|)
operator|<=
literal|0
condition|)
name|dest
index|[
name|i
index|]
operator|=
name|src
index|[
name|p
operator|++
index|]
expr_stmt|;
else|else
name|dest
index|[
name|i
index|]
operator|=
name|src
index|[
name|q
operator|++
index|]
expr_stmt|;
block|}
block|}
comment|/**      * Swaps x[a] with x[b].      */
DECL|method|swap
specifier|private
specifier|static
name|void
name|swap
parameter_list|(
name|String
name|x
index|[]
parameter_list|,
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
name|String
name|t
init|=
name|x
index|[
name|a
index|]
decl_stmt|;
name|x
index|[
name|a
index|]
operator|=
name|x
index|[
name|b
index|]
expr_stmt|;
name|x
index|[
name|b
index|]
operator|=
name|t
expr_stmt|;
block|}
block|}
end_class
end_unit
