begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_comment
comment|/** Simple DocIdSet and DocIdSetIterator backed by a BitSet */
end_comment
begin_class
DECL|class|DocIdBitSet
specifier|public
class|class
name|DocIdBitSet
extends|extends
name|DocIdSet
block|{
DECL|field|bitSet
specifier|private
name|BitSet
name|bitSet
decl_stmt|;
DECL|method|DocIdBitSet
specifier|public
name|DocIdBitSet
parameter_list|(
name|BitSet
name|bitSet
parameter_list|)
block|{
name|this
operator|.
name|bitSet
operator|=
name|bitSet
expr_stmt|;
block|}
DECL|method|iterator
specifier|public
name|DocIdSetIterator
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|DocIdBitSetIterator
argument_list|(
name|bitSet
argument_list|)
return|;
block|}
comment|/**    * Returns the underlying BitSet.     */
DECL|method|getBitSet
specifier|public
name|BitSet
name|getBitSet
parameter_list|()
block|{
return|return
name|this
operator|.
name|bitSet
return|;
block|}
DECL|class|DocIdBitSetIterator
specifier|private
specifier|static
class|class
name|DocIdBitSetIterator
extends|extends
name|DocIdSetIterator
block|{
DECL|field|docId
specifier|private
name|int
name|docId
decl_stmt|;
DECL|field|bitSet
specifier|private
name|BitSet
name|bitSet
decl_stmt|;
DECL|method|DocIdBitSetIterator
name|DocIdBitSetIterator
parameter_list|(
name|BitSet
name|bitSet
parameter_list|)
block|{
name|this
operator|.
name|bitSet
operator|=
name|bitSet
expr_stmt|;
name|this
operator|.
name|docId
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|doc
specifier|public
name|int
name|doc
parameter_list|()
block|{
assert|assert
name|docId
operator|!=
operator|-
literal|1
assert|;
return|return
name|docId
return|;
block|}
DECL|method|next
specifier|public
name|boolean
name|next
parameter_list|()
block|{
comment|// (docId + 1) on next line requires -1 initial value for docNr:
return|return
name|checkNextDocId
argument_list|(
name|bitSet
operator|.
name|nextSetBit
argument_list|(
name|docId
operator|+
literal|1
argument_list|)
argument_list|)
return|;
block|}
DECL|method|skipTo
specifier|public
name|boolean
name|skipTo
parameter_list|(
name|int
name|skipDocNr
parameter_list|)
block|{
return|return
name|checkNextDocId
argument_list|(
name|bitSet
operator|.
name|nextSetBit
argument_list|(
name|skipDocNr
argument_list|)
argument_list|)
return|;
block|}
DECL|method|checkNextDocId
specifier|private
name|boolean
name|checkNextDocId
parameter_list|(
name|int
name|d
parameter_list|)
block|{
if|if
condition|(
name|d
operator|==
operator|-
literal|1
condition|)
block|{
comment|// -1 returned by BitSet.nextSetBit() when exhausted
name|docId
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|docId
operator|=
name|d
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
end_class
end_unit
