begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Simple lockless and memory barrier free String intern cache that is guaranteed  * to return the same String instance as String.intern() does.  */
end_comment
begin_class
DECL|class|SimpleStringInterner
specifier|public
class|class
name|SimpleStringInterner
extends|extends
name|StringInterner
block|{
DECL|class|Entry
specifier|private
specifier|static
class|class
name|Entry
block|{
DECL|field|str
specifier|final
specifier|private
name|String
name|str
decl_stmt|;
DECL|field|hash
specifier|final
specifier|private
name|int
name|hash
decl_stmt|;
DECL|field|next
specifier|private
name|Entry
name|next
decl_stmt|;
DECL|method|Entry
specifier|private
name|Entry
parameter_list|(
name|String
name|str
parameter_list|,
name|int
name|hash
parameter_list|,
name|Entry
name|next
parameter_list|)
block|{
name|this
operator|.
name|str
operator|=
name|str
expr_stmt|;
name|this
operator|.
name|hash
operator|=
name|hash
expr_stmt|;
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
block|}
block|}
DECL|field|cache
specifier|private
specifier|final
name|Entry
index|[]
name|cache
decl_stmt|;
DECL|field|maxChainLength
specifier|private
specifier|final
name|int
name|maxChainLength
decl_stmt|;
comment|/**    * @param tableSize  Size of the hash table, should be a power of two.    * @param maxChainLength  Maximum length of each bucket, after which the oldest item inserted is dropped.    */
DECL|method|SimpleStringInterner
specifier|public
name|SimpleStringInterner
parameter_list|(
name|int
name|tableSize
parameter_list|,
name|int
name|maxChainLength
parameter_list|)
block|{
name|cache
operator|=
operator|new
name|Entry
index|[
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|BitUtil
operator|.
name|nextHighestPowerOfTwo
argument_list|(
name|tableSize
argument_list|)
argument_list|)
index|]
expr_stmt|;
name|this
operator|.
name|maxChainLength
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|2
argument_list|,
name|maxChainLength
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|intern
specifier|public
name|String
name|intern
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|int
name|h
init|=
name|s
operator|.
name|hashCode
argument_list|()
decl_stmt|;
comment|// In the future, it may be worth augmenting the string hash
comment|// if the lower bits need better distribution.
name|int
name|slot
init|=
name|h
operator|&
operator|(
name|cache
operator|.
name|length
operator|-
literal|1
operator|)
decl_stmt|;
name|Entry
name|first
init|=
name|this
operator|.
name|cache
index|[
name|slot
index|]
decl_stmt|;
name|Entry
name|nextToLast
init|=
literal|null
decl_stmt|;
name|int
name|chainLength
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
name|e
init|=
name|first
init|;
name|e
operator|!=
literal|null
condition|;
name|e
operator|=
name|e
operator|.
name|next
control|)
block|{
if|if
condition|(
name|e
operator|.
name|hash
operator|==
name|h
operator|&&
operator|(
name|e
operator|.
name|str
operator|==
name|s
operator|||
name|e
operator|.
name|str
operator|.
name|compareTo
argument_list|(
name|s
argument_list|)
operator|==
literal|0
operator|)
condition|)
block|{
comment|// if (e.str == s || (e.hash == h&& e.str.compareTo(s)==0)) {
return|return
name|e
operator|.
name|str
return|;
block|}
name|chainLength
operator|++
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|next
operator|!=
literal|null
condition|)
block|{
name|nextToLast
operator|=
name|e
expr_stmt|;
block|}
block|}
comment|// insertion-order cache: add new entry at head
name|s
operator|=
name|s
operator|.
name|intern
argument_list|()
expr_stmt|;
name|this
operator|.
name|cache
index|[
name|slot
index|]
operator|=
operator|new
name|Entry
argument_list|(
name|s
argument_list|,
name|h
argument_list|,
name|first
argument_list|)
expr_stmt|;
if|if
condition|(
name|chainLength
operator|>=
name|maxChainLength
condition|)
block|{
comment|// prune last entry
name|nextToLast
operator|.
name|next
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
block|}
end_class
end_unit
