begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * {@link CharacterUtils} provides a unified interface to Character-related  * operations to implement backwards compatible character operations based on a  * {@link Version} instance.  */
end_comment
begin_class
DECL|class|CharacterUtils
specifier|public
specifier|abstract
class|class
name|CharacterUtils
block|{
DECL|field|JAVA_4
specifier|private
specifier|static
specifier|final
name|Java4CharacterUtils
name|JAVA_4
init|=
operator|new
name|Java4CharacterUtils
argument_list|()
decl_stmt|;
DECL|field|JAVA_5
specifier|private
specifier|static
specifier|final
name|Java5CharacterUtils
name|JAVA_5
init|=
operator|new
name|Java5CharacterUtils
argument_list|()
decl_stmt|;
comment|/**    * Returns a {@link CharacterUtils} implementation according to the given    * {@link Version} instance.    *     * @param matchVersion    *          a version instance    * @return a {@link CharacterUtils} implementation according to the given    *         {@link Version} instance.    */
DECL|method|getInstance
specifier|public
specifier|static
name|CharacterUtils
name|getInstance
parameter_list|(
name|Version
name|matchVersion
parameter_list|)
block|{
return|return
name|matchVersion
operator|.
name|onOrAfter
argument_list|(
name|Version
operator|.
name|LUCENE_31
argument_list|)
condition|?
name|JAVA_5
else|:
name|JAVA_4
return|;
block|}
comment|/**    * Returns the code point at the given index of the char array.    * Depending on the {@link Version} passed to    * {@link CharacterUtils#getInstance(Version)} this method mimics the behavior    * of {@link Character#codePointAt(char[], int)} as it would have been    * available on a Java 1.4 JVM or on a later virtual machine version.    *     * @param chars    *          a character array    * @param offset    *          the offset to the char values in the chars array to be converted    *     * @return the Unicode code point at the given index    * @throws NullPointerException    *           - if the array is null.    * @throws IndexOutOfBoundsException    *           - if the value offset is negative or not less than the length of    *           the char array.    */
DECL|method|codePointAt
specifier|public
specifier|abstract
name|int
name|codePointAt
parameter_list|(
name|char
index|[]
name|chars
parameter_list|,
name|int
name|offset
parameter_list|)
function_decl|;
comment|/**    * Returns the code point at the given index of the {@link CharSequence}.    * Depending on the {@link Version} passed to    * {@link CharacterUtils#getInstance(Version)} this method mimics the behavior    * of {@link Character#codePointAt(char[], int)} as it would have been    * available on a Java 1.4 JVM or on a later virtual machine version.    *     * @param seq    *          a character sequence    * @param offset    *          the offset to the char values in the chars array to be converted    *     * @return the Unicode code point at the given index    * @throws NullPointerException    *           - if the sequence is null.    * @throws IndexOutOfBoundsException    *           - if the value offset is negative or not less than the length of    *           the character sequence.    */
DECL|method|codePointAt
specifier|public
specifier|abstract
name|int
name|codePointAt
parameter_list|(
name|CharSequence
name|seq
parameter_list|,
name|int
name|offset
parameter_list|)
function_decl|;
DECL|class|Java5CharacterUtils
specifier|private
specifier|static
specifier|final
class|class
name|Java5CharacterUtils
extends|extends
name|CharacterUtils
block|{
DECL|method|Java5CharacterUtils
name|Java5CharacterUtils
parameter_list|()
block|{     }
empty_stmt|;
annotation|@
name|Override
DECL|method|codePointAt
specifier|public
specifier|final
name|int
name|codePointAt
parameter_list|(
name|char
index|[]
name|chars
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
name|Character
operator|.
name|codePointAt
argument_list|(
name|chars
argument_list|,
name|offset
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|codePointAt
specifier|public
name|int
name|codePointAt
parameter_list|(
name|CharSequence
name|seq
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
name|Character
operator|.
name|codePointAt
argument_list|(
name|seq
argument_list|,
name|offset
argument_list|)
return|;
block|}
block|}
DECL|class|Java4CharacterUtils
specifier|private
specifier|static
specifier|final
class|class
name|Java4CharacterUtils
extends|extends
name|CharacterUtils
block|{
DECL|method|Java4CharacterUtils
name|Java4CharacterUtils
parameter_list|()
block|{     }
empty_stmt|;
annotation|@
name|Override
DECL|method|codePointAt
specifier|public
specifier|final
name|int
name|codePointAt
parameter_list|(
name|char
index|[]
name|chars
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
name|chars
index|[
name|offset
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|codePointAt
specifier|public
name|int
name|codePointAt
parameter_list|(
name|CharSequence
name|seq
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
name|seq
operator|.
name|charAt
argument_list|(
name|offset
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
