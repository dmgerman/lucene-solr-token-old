begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|ArrayUtil
specifier|public
specifier|final
class|class
name|ArrayUtil
block|{
DECL|method|getNextSize
specifier|public
specifier|static
name|int
name|getNextSize
parameter_list|(
name|int
name|targetSize
parameter_list|)
block|{
comment|/* This over-allocates proportional to the list size, making room      * for additional growth.  The over-allocation is mild, but is      * enough to give linear-time amortized behavior over a long      * sequence of appends() in the presence of a poorly-performing      * system realloc().      * The growth pattern is:  0, 4, 8, 16, 25, 35, 46, 58, 72, 88, ...      */
return|return
operator|(
name|targetSize
operator|>>
literal|3
operator|)
operator|+
operator|(
name|targetSize
operator|<
literal|9
condition|?
literal|3
else|:
literal|6
operator|)
operator|+
name|targetSize
return|;
block|}
DECL|method|getShrinkSize
specifier|public
specifier|static
name|int
name|getShrinkSize
parameter_list|(
name|int
name|currentSize
parameter_list|,
name|int
name|targetSize
parameter_list|)
block|{
specifier|final
name|int
name|newSize
init|=
name|getNextSize
argument_list|(
name|targetSize
argument_list|)
decl_stmt|;
comment|// Only reallocate if we are "substantially" smaller.
comment|// This saves us from "running hot" (constantly making a
comment|// bit bigger then a bit smaller, over and over):
if|if
condition|(
name|newSize
operator|<
name|currentSize
operator|/
literal|2
condition|)
return|return
name|newSize
return|;
else|else
return|return
name|currentSize
return|;
block|}
DECL|method|grow
specifier|public
specifier|static
name|int
index|[]
name|grow
parameter_list|(
name|int
index|[]
name|array
parameter_list|,
name|int
name|minSize
parameter_list|)
block|{
if|if
condition|(
name|array
operator|.
name|length
operator|<
name|minSize
condition|)
block|{
name|int
index|[]
name|newArray
init|=
operator|new
name|int
index|[
name|getNextSize
argument_list|(
name|minSize
argument_list|)
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|array
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|newArray
return|;
block|}
else|else
return|return
name|array
return|;
block|}
DECL|method|grow
specifier|public
specifier|static
name|int
index|[]
name|grow
parameter_list|(
name|int
index|[]
name|array
parameter_list|)
block|{
return|return
name|grow
argument_list|(
name|array
argument_list|,
literal|1
operator|+
name|array
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|shrink
specifier|public
specifier|static
name|int
index|[]
name|shrink
parameter_list|(
name|int
index|[]
name|array
parameter_list|,
name|int
name|targetSize
parameter_list|)
block|{
specifier|final
name|int
name|newSize
init|=
name|getShrinkSize
argument_list|(
name|array
operator|.
name|length
argument_list|,
name|targetSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|newSize
operator|!=
name|array
operator|.
name|length
condition|)
block|{
name|int
index|[]
name|newArray
init|=
operator|new
name|int
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|newSize
argument_list|)
expr_stmt|;
return|return
name|newArray
return|;
block|}
else|else
return|return
name|array
return|;
block|}
DECL|method|grow
specifier|public
specifier|static
name|long
index|[]
name|grow
parameter_list|(
name|long
index|[]
name|array
parameter_list|,
name|int
name|minSize
parameter_list|)
block|{
if|if
condition|(
name|array
operator|.
name|length
operator|<
name|minSize
condition|)
block|{
name|long
index|[]
name|newArray
init|=
operator|new
name|long
index|[
name|getNextSize
argument_list|(
name|minSize
argument_list|)
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|array
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|newArray
return|;
block|}
else|else
return|return
name|array
return|;
block|}
DECL|method|grow
specifier|public
specifier|static
name|long
index|[]
name|grow
parameter_list|(
name|long
index|[]
name|array
parameter_list|)
block|{
return|return
name|grow
argument_list|(
name|array
argument_list|,
literal|1
operator|+
name|array
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|shrink
specifier|public
specifier|static
name|long
index|[]
name|shrink
parameter_list|(
name|long
index|[]
name|array
parameter_list|,
name|int
name|targetSize
parameter_list|)
block|{
specifier|final
name|int
name|newSize
init|=
name|getShrinkSize
argument_list|(
name|array
operator|.
name|length
argument_list|,
name|targetSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|newSize
operator|!=
name|array
operator|.
name|length
condition|)
block|{
name|long
index|[]
name|newArray
init|=
operator|new
name|long
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|newSize
argument_list|)
expr_stmt|;
return|return
name|newArray
return|;
block|}
else|else
return|return
name|array
return|;
block|}
DECL|method|grow
specifier|public
specifier|static
name|byte
index|[]
name|grow
parameter_list|(
name|byte
index|[]
name|array
parameter_list|,
name|int
name|minSize
parameter_list|)
block|{
if|if
condition|(
name|array
operator|.
name|length
operator|<
name|minSize
condition|)
block|{
name|byte
index|[]
name|newArray
init|=
operator|new
name|byte
index|[
name|getNextSize
argument_list|(
name|minSize
argument_list|)
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|array
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|newArray
return|;
block|}
else|else
return|return
name|array
return|;
block|}
DECL|method|grow
specifier|public
specifier|static
name|byte
index|[]
name|grow
parameter_list|(
name|byte
index|[]
name|array
parameter_list|)
block|{
return|return
name|grow
argument_list|(
name|array
argument_list|,
literal|1
operator|+
name|array
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|shrink
specifier|public
specifier|static
name|byte
index|[]
name|shrink
parameter_list|(
name|byte
index|[]
name|array
parameter_list|,
name|int
name|targetSize
parameter_list|)
block|{
specifier|final
name|int
name|newSize
init|=
name|getShrinkSize
argument_list|(
name|array
operator|.
name|length
argument_list|,
name|targetSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|newSize
operator|!=
name|array
operator|.
name|length
condition|)
block|{
name|byte
index|[]
name|newArray
init|=
operator|new
name|byte
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|newSize
argument_list|)
expr_stmt|;
return|return
name|newArray
return|;
block|}
else|else
return|return
name|array
return|;
block|}
comment|/** Returns hash of chars in range start (inclusive) to    *  end (inclusive) */
DECL|method|hashCode
specifier|public
specifier|static
name|int
name|hashCode
parameter_list|(
name|char
index|[]
name|array
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|int
name|code
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|end
operator|-
literal|1
init|;
name|i
operator|>=
name|start
condition|;
name|i
operator|--
control|)
name|code
operator|=
name|code
operator|*
literal|31
operator|+
name|array
index|[
name|i
index|]
expr_stmt|;
return|return
name|code
return|;
block|}
comment|/** Returns hash of chars in range start (inclusive) to    *  end (inclusive) */
DECL|method|hashCode
specifier|public
specifier|static
name|int
name|hashCode
parameter_list|(
name|byte
index|[]
name|array
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|int
name|code
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|end
operator|-
literal|1
init|;
name|i
operator|>=
name|start
condition|;
name|i
operator|--
control|)
name|code
operator|=
name|code
operator|*
literal|31
operator|+
name|array
index|[
name|i
index|]
expr_stmt|;
return|return
name|code
return|;
block|}
block|}
end_class
end_unit
