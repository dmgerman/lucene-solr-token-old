begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Fieldable
import|;
end_import
begin_class
DECL|class|StoredFieldsWriterPerField
specifier|final
class|class
name|StoredFieldsWriterPerField
extends|extends
name|DocFieldConsumerPerField
block|{
DECL|field|perThread
specifier|final
name|StoredFieldsWriterPerThread
name|perThread
decl_stmt|;
DECL|field|fieldInfo
specifier|final
name|FieldInfo
name|fieldInfo
decl_stmt|;
DECL|field|docState
specifier|final
name|DocumentsWriter
operator|.
name|DocState
name|docState
decl_stmt|;
DECL|method|StoredFieldsWriterPerField
specifier|public
name|StoredFieldsWriterPerField
parameter_list|(
name|StoredFieldsWriterPerThread
name|perThread
parameter_list|,
name|FieldInfo
name|fieldInfo
parameter_list|)
block|{
name|this
operator|.
name|perThread
operator|=
name|perThread
expr_stmt|;
name|this
operator|.
name|fieldInfo
operator|=
name|fieldInfo
expr_stmt|;
name|docState
operator|=
name|perThread
operator|.
name|docState
expr_stmt|;
block|}
comment|// Process all occurrences of a single field in one doc;
comment|// count is 1 if a given field occurs only once in the
comment|// Document, which is the "typical" case
DECL|method|processFields
specifier|public
name|void
name|processFields
parameter_list|(
name|Fieldable
index|[]
name|fields
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|StoredFieldsWriter
operator|.
name|PerDoc
name|doc
decl_stmt|;
if|if
condition|(
name|perThread
operator|.
name|doc
operator|==
literal|null
condition|)
block|{
name|doc
operator|=
name|perThread
operator|.
name|doc
operator|=
name|perThread
operator|.
name|storedFieldsWriter
operator|.
name|getPerDoc
argument_list|()
expr_stmt|;
name|doc
operator|.
name|docID
operator|=
name|docState
operator|.
name|docID
expr_stmt|;
name|perThread
operator|.
name|localFieldsWriter
operator|.
name|setFieldsStream
argument_list|(
name|doc
operator|.
name|fdt
argument_list|)
expr_stmt|;
assert|assert
name|doc
operator|.
name|numStoredFields
operator|==
literal|0
operator|:
literal|"doc.numStoredFields="
operator|+
name|doc
operator|.
name|numStoredFields
assert|;
assert|assert
literal|0
operator|==
name|doc
operator|.
name|fdt
operator|.
name|length
argument_list|()
assert|;
assert|assert
literal|0
operator|==
name|doc
operator|.
name|fdt
operator|.
name|getFilePointer
argument_list|()
assert|;
block|}
else|else
block|{
name|doc
operator|=
name|perThread
operator|.
name|doc
expr_stmt|;
assert|assert
name|doc
operator|.
name|docID
operator|==
name|docState
operator|.
name|docID
operator|:
literal|"doc.docID="
operator|+
name|doc
operator|.
name|docID
operator|+
literal|" docState.docID="
operator|+
name|docState
operator|.
name|docID
assert|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Fieldable
name|field
init|=
name|fields
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|isStored
argument_list|()
condition|)
block|{
name|perThread
operator|.
name|localFieldsWriter
operator|.
name|writeField
argument_list|(
name|fieldInfo
argument_list|,
name|field
argument_list|)
expr_stmt|;
assert|assert
name|docState
operator|.
name|testPoint
argument_list|(
literal|"StoredFieldsWriterPerField.processFields.writeField"
argument_list|)
assert|;
name|doc
operator|.
name|numStoredFields
operator|++
expr_stmt|;
block|}
block|}
block|}
DECL|method|abort
name|void
name|abort
parameter_list|()
block|{   }
block|}
end_class
end_unit
