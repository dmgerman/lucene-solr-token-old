begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Fieldable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import
begin_class
DECL|class|TermsHashPerField
specifier|final
class|class
name|TermsHashPerField
extends|extends
name|InvertedDocConsumerPerField
block|{
DECL|field|consumer
specifier|final
name|TermsHashConsumerPerField
name|consumer
decl_stmt|;
DECL|field|nextPerField
specifier|final
name|TermsHashPerField
name|nextPerField
decl_stmt|;
DECL|field|perThread
specifier|final
name|TermsHashPerThread
name|perThread
decl_stmt|;
DECL|field|docState
specifier|final
name|DocumentsWriter
operator|.
name|DocState
name|docState
decl_stmt|;
DECL|field|fieldState
specifier|final
name|FieldInvertState
name|fieldState
decl_stmt|;
DECL|field|termAtt
name|TermAttribute
name|termAtt
decl_stmt|;
comment|// Copied from our perThread
DECL|field|charPool
specifier|final
name|CharBlockPool
name|charPool
decl_stmt|;
DECL|field|intPool
specifier|final
name|IntBlockPool
name|intPool
decl_stmt|;
DECL|field|bytePool
specifier|final
name|ByteBlockPool
name|bytePool
decl_stmt|;
DECL|field|streamCount
specifier|final
name|int
name|streamCount
decl_stmt|;
DECL|field|numPostingInt
specifier|final
name|int
name|numPostingInt
decl_stmt|;
DECL|field|fieldInfo
specifier|final
name|FieldInfo
name|fieldInfo
decl_stmt|;
DECL|field|postingsCompacted
name|boolean
name|postingsCompacted
decl_stmt|;
DECL|field|numPostings
name|int
name|numPostings
decl_stmt|;
DECL|field|postingsHashSize
specifier|private
name|int
name|postingsHashSize
init|=
literal|4
decl_stmt|;
DECL|field|postingsHashHalfSize
specifier|private
name|int
name|postingsHashHalfSize
init|=
name|postingsHashSize
operator|/
literal|2
decl_stmt|;
DECL|field|postingsHashMask
specifier|private
name|int
name|postingsHashMask
init|=
name|postingsHashSize
operator|-
literal|1
decl_stmt|;
DECL|field|postingsHash
specifier|private
name|RawPostingList
index|[]
name|postingsHash
init|=
operator|new
name|RawPostingList
index|[
name|postingsHashSize
index|]
decl_stmt|;
DECL|field|p
specifier|private
name|RawPostingList
name|p
decl_stmt|;
DECL|method|TermsHashPerField
specifier|public
name|TermsHashPerField
parameter_list|(
name|DocInverterPerField
name|docInverterPerField
parameter_list|,
specifier|final
name|TermsHashPerThread
name|perThread
parameter_list|,
specifier|final
name|TermsHashPerThread
name|nextPerThread
parameter_list|,
specifier|final
name|FieldInfo
name|fieldInfo
parameter_list|)
block|{
name|this
operator|.
name|perThread
operator|=
name|perThread
expr_stmt|;
name|intPool
operator|=
name|perThread
operator|.
name|intPool
expr_stmt|;
name|charPool
operator|=
name|perThread
operator|.
name|charPool
expr_stmt|;
name|bytePool
operator|=
name|perThread
operator|.
name|bytePool
expr_stmt|;
name|docState
operator|=
name|perThread
operator|.
name|docState
expr_stmt|;
name|fieldState
operator|=
name|docInverterPerField
operator|.
name|fieldState
expr_stmt|;
name|this
operator|.
name|consumer
operator|=
name|perThread
operator|.
name|consumer
operator|.
name|addField
argument_list|(
name|this
argument_list|,
name|fieldInfo
argument_list|)
expr_stmt|;
name|streamCount
operator|=
name|consumer
operator|.
name|getStreamCount
argument_list|()
expr_stmt|;
name|numPostingInt
operator|=
literal|2
operator|*
name|streamCount
expr_stmt|;
name|this
operator|.
name|fieldInfo
operator|=
name|fieldInfo
expr_stmt|;
if|if
condition|(
name|nextPerThread
operator|!=
literal|null
condition|)
name|nextPerField
operator|=
operator|(
name|TermsHashPerField
operator|)
name|nextPerThread
operator|.
name|addField
argument_list|(
name|docInverterPerField
argument_list|,
name|fieldInfo
argument_list|)
expr_stmt|;
else|else
name|nextPerField
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|shrinkHash
name|void
name|shrinkHash
parameter_list|(
name|int
name|targetSize
parameter_list|)
block|{
assert|assert
name|postingsCompacted
operator|||
name|numPostings
operator|==
literal|0
assert|;
comment|// Cannot use ArrayUtil.shrink because we require power
comment|// of 2:
name|int
name|newSize
init|=
name|postingsHash
operator|.
name|length
decl_stmt|;
while|while
condition|(
name|newSize
operator|>=
literal|8
operator|&&
name|newSize
operator|/
literal|4
operator|>
name|targetSize
condition|)
block|{
name|newSize
operator|/=
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|newSize
operator|!=
name|postingsHash
operator|.
name|length
condition|)
block|{
name|postingsHash
operator|=
operator|new
name|RawPostingList
index|[
name|newSize
index|]
expr_stmt|;
name|postingsHashSize
operator|=
name|newSize
expr_stmt|;
name|postingsHashHalfSize
operator|=
name|newSize
operator|/
literal|2
expr_stmt|;
name|postingsHashMask
operator|=
name|newSize
operator|-
literal|1
expr_stmt|;
block|}
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
block|{
if|if
condition|(
operator|!
name|postingsCompacted
condition|)
name|compactPostings
argument_list|()
expr_stmt|;
assert|assert
name|numPostings
operator|<=
name|postingsHash
operator|.
name|length
assert|;
if|if
condition|(
name|numPostings
operator|>
literal|0
condition|)
block|{
name|perThread
operator|.
name|termsHash
operator|.
name|recyclePostings
argument_list|(
name|postingsHash
argument_list|,
name|numPostings
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|postingsHash
argument_list|,
literal|0
argument_list|,
name|numPostings
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|numPostings
operator|=
literal|0
expr_stmt|;
block|}
name|postingsCompacted
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|nextPerField
operator|!=
literal|null
condition|)
name|nextPerField
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|abort
specifier|synchronized
specifier|public
name|void
name|abort
parameter_list|()
block|{
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|nextPerField
operator|!=
literal|null
condition|)
name|nextPerField
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
DECL|method|initReader
specifier|public
name|void
name|initReader
parameter_list|(
name|ByteSliceReader
name|reader
parameter_list|,
name|RawPostingList
name|p
parameter_list|,
name|int
name|stream
parameter_list|)
block|{
assert|assert
name|stream
operator|<
name|streamCount
assert|;
specifier|final
name|int
index|[]
name|ints
init|=
name|intPool
operator|.
name|buffers
index|[
name|p
operator|.
name|intStart
operator|>>
name|DocumentsWriter
operator|.
name|INT_BLOCK_SHIFT
index|]
decl_stmt|;
specifier|final
name|int
name|upto
init|=
name|p
operator|.
name|intStart
operator|&
name|DocumentsWriter
operator|.
name|INT_BLOCK_MASK
decl_stmt|;
name|reader
operator|.
name|init
argument_list|(
name|bytePool
argument_list|,
name|p
operator|.
name|byteStart
operator|+
name|stream
operator|*
name|ByteBlockPool
operator|.
name|FIRST_LEVEL_SIZE
argument_list|,
name|ints
index|[
name|upto
operator|+
name|stream
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|compactPostings
specifier|private
specifier|synchronized
name|void
name|compactPostings
parameter_list|()
block|{
name|int
name|upto
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|postingsHashSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|postingsHash
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|upto
operator|<
name|i
condition|)
block|{
name|postingsHash
index|[
name|upto
index|]
operator|=
name|postingsHash
index|[
name|i
index|]
expr_stmt|;
name|postingsHash
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|upto
operator|++
expr_stmt|;
block|}
block|}
assert|assert
name|upto
operator|==
name|numPostings
assert|;
name|postingsCompacted
operator|=
literal|true
expr_stmt|;
block|}
comment|/** Collapse the hash table& sort in-place. */
DECL|method|sortPostings
specifier|public
name|RawPostingList
index|[]
name|sortPostings
parameter_list|()
block|{
name|compactPostings
argument_list|()
expr_stmt|;
name|quickSort
argument_list|(
name|postingsHash
argument_list|,
literal|0
argument_list|,
name|numPostings
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|postingsHash
return|;
block|}
DECL|method|quickSort
name|void
name|quickSort
parameter_list|(
name|RawPostingList
index|[]
name|postings
parameter_list|,
name|int
name|lo
parameter_list|,
name|int
name|hi
parameter_list|)
block|{
if|if
condition|(
name|lo
operator|>=
name|hi
condition|)
return|return;
elseif|else
if|if
condition|(
name|hi
operator|==
literal|1
operator|+
name|lo
condition|)
block|{
if|if
condition|(
name|comparePostings
argument_list|(
name|postings
index|[
name|lo
index|]
argument_list|,
name|postings
index|[
name|hi
index|]
argument_list|)
operator|>
literal|0
condition|)
block|{
specifier|final
name|RawPostingList
name|tmp
init|=
name|postings
index|[
name|lo
index|]
decl_stmt|;
name|postings
index|[
name|lo
index|]
operator|=
name|postings
index|[
name|hi
index|]
expr_stmt|;
name|postings
index|[
name|hi
index|]
operator|=
name|tmp
expr_stmt|;
block|}
return|return;
block|}
name|int
name|mid
init|=
operator|(
name|lo
operator|+
name|hi
operator|)
operator|>>>
literal|1
decl_stmt|;
if|if
condition|(
name|comparePostings
argument_list|(
name|postings
index|[
name|lo
index|]
argument_list|,
name|postings
index|[
name|mid
index|]
argument_list|)
operator|>
literal|0
condition|)
block|{
name|RawPostingList
name|tmp
init|=
name|postings
index|[
name|lo
index|]
decl_stmt|;
name|postings
index|[
name|lo
index|]
operator|=
name|postings
index|[
name|mid
index|]
expr_stmt|;
name|postings
index|[
name|mid
index|]
operator|=
name|tmp
expr_stmt|;
block|}
if|if
condition|(
name|comparePostings
argument_list|(
name|postings
index|[
name|mid
index|]
argument_list|,
name|postings
index|[
name|hi
index|]
argument_list|)
operator|>
literal|0
condition|)
block|{
name|RawPostingList
name|tmp
init|=
name|postings
index|[
name|mid
index|]
decl_stmt|;
name|postings
index|[
name|mid
index|]
operator|=
name|postings
index|[
name|hi
index|]
expr_stmt|;
name|postings
index|[
name|hi
index|]
operator|=
name|tmp
expr_stmt|;
if|if
condition|(
name|comparePostings
argument_list|(
name|postings
index|[
name|lo
index|]
argument_list|,
name|postings
index|[
name|mid
index|]
argument_list|)
operator|>
literal|0
condition|)
block|{
name|RawPostingList
name|tmp2
init|=
name|postings
index|[
name|lo
index|]
decl_stmt|;
name|postings
index|[
name|lo
index|]
operator|=
name|postings
index|[
name|mid
index|]
expr_stmt|;
name|postings
index|[
name|mid
index|]
operator|=
name|tmp2
expr_stmt|;
block|}
block|}
name|int
name|left
init|=
name|lo
operator|+
literal|1
decl_stmt|;
name|int
name|right
init|=
name|hi
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|left
operator|>=
name|right
condition|)
return|return;
name|RawPostingList
name|partition
init|=
name|postings
index|[
name|mid
index|]
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
while|while
condition|(
name|comparePostings
argument_list|(
name|postings
index|[
name|right
index|]
argument_list|,
name|partition
argument_list|)
operator|>
literal|0
condition|)
operator|--
name|right
expr_stmt|;
while|while
condition|(
name|left
operator|<
name|right
operator|&&
name|comparePostings
argument_list|(
name|postings
index|[
name|left
index|]
argument_list|,
name|partition
argument_list|)
operator|<=
literal|0
condition|)
operator|++
name|left
expr_stmt|;
if|if
condition|(
name|left
operator|<
name|right
condition|)
block|{
name|RawPostingList
name|tmp
init|=
name|postings
index|[
name|left
index|]
decl_stmt|;
name|postings
index|[
name|left
index|]
operator|=
name|postings
index|[
name|right
index|]
expr_stmt|;
name|postings
index|[
name|right
index|]
operator|=
name|tmp
expr_stmt|;
operator|--
name|right
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|quickSort
argument_list|(
name|postings
argument_list|,
name|lo
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|quickSort
argument_list|(
name|postings
argument_list|,
name|left
operator|+
literal|1
argument_list|,
name|hi
argument_list|)
expr_stmt|;
block|}
comment|/** Compares term text for two Posting instance and    *  returns -1 if p1< p2; 1 if p1> p2; else 0. */
DECL|method|comparePostings
name|int
name|comparePostings
parameter_list|(
name|RawPostingList
name|p1
parameter_list|,
name|RawPostingList
name|p2
parameter_list|)
block|{
if|if
condition|(
name|p1
operator|==
name|p2
condition|)
return|return
literal|0
return|;
specifier|final
name|char
index|[]
name|text1
init|=
name|charPool
operator|.
name|buffers
index|[
name|p1
operator|.
name|textStart
operator|>>
name|DocumentsWriter
operator|.
name|CHAR_BLOCK_SHIFT
index|]
decl_stmt|;
name|int
name|pos1
init|=
name|p1
operator|.
name|textStart
operator|&
name|DocumentsWriter
operator|.
name|CHAR_BLOCK_MASK
decl_stmt|;
specifier|final
name|char
index|[]
name|text2
init|=
name|charPool
operator|.
name|buffers
index|[
name|p2
operator|.
name|textStart
operator|>>
name|DocumentsWriter
operator|.
name|CHAR_BLOCK_SHIFT
index|]
decl_stmt|;
name|int
name|pos2
init|=
name|p2
operator|.
name|textStart
operator|&
name|DocumentsWriter
operator|.
name|CHAR_BLOCK_MASK
decl_stmt|;
assert|assert
name|text1
operator|!=
name|text2
operator|||
name|pos1
operator|!=
name|pos2
assert|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|char
name|c1
init|=
name|text1
index|[
name|pos1
operator|++
index|]
decl_stmt|;
specifier|final
name|char
name|c2
init|=
name|text2
index|[
name|pos2
operator|++
index|]
decl_stmt|;
if|if
condition|(
name|c1
operator|!=
name|c2
condition|)
block|{
if|if
condition|(
literal|0xffff
operator|==
name|c2
condition|)
return|return
literal|1
return|;
elseif|else
if|if
condition|(
literal|0xffff
operator|==
name|c1
condition|)
return|return
operator|-
literal|1
return|;
else|else
return|return
name|c1
operator|-
name|c2
return|;
block|}
else|else
comment|// This method should never compare equal postings
comment|// unless p1==p2
assert|assert
name|c1
operator|!=
literal|0xffff
assert|;
block|}
block|}
comment|/** Test whether the text for current RawPostingList p equals    *  current tokenText. */
DECL|method|postingEquals
specifier|private
name|boolean
name|postingEquals
parameter_list|(
specifier|final
name|char
index|[]
name|tokenText
parameter_list|,
specifier|final
name|int
name|tokenTextLen
parameter_list|)
block|{
specifier|final
name|char
index|[]
name|text
init|=
name|perThread
operator|.
name|charPool
operator|.
name|buffers
index|[
name|p
operator|.
name|textStart
operator|>>
name|DocumentsWriter
operator|.
name|CHAR_BLOCK_SHIFT
index|]
decl_stmt|;
assert|assert
name|text
operator|!=
literal|null
assert|;
name|int
name|pos
init|=
name|p
operator|.
name|textStart
operator|&
name|DocumentsWriter
operator|.
name|CHAR_BLOCK_MASK
decl_stmt|;
name|int
name|tokenPos
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|tokenPos
operator|<
name|tokenTextLen
condition|;
name|pos
operator|++
operator|,
name|tokenPos
operator|++
control|)
if|if
condition|(
name|tokenText
index|[
name|tokenPos
index|]
operator|!=
name|text
index|[
name|pos
index|]
condition|)
return|return
literal|false
return|;
return|return
literal|0xffff
operator|==
name|text
index|[
name|pos
index|]
return|;
block|}
DECL|field|doCall
specifier|private
name|boolean
name|doCall
decl_stmt|;
DECL|field|doNextCall
specifier|private
name|boolean
name|doNextCall
decl_stmt|;
DECL|method|start
name|void
name|start
parameter_list|(
name|Fieldable
name|f
parameter_list|)
block|{
name|termAtt
operator|=
operator|(
name|TermAttribute
operator|)
name|fieldState
operator|.
name|attributeSource
operator|.
name|getAttribute
argument_list|(
name|TermAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|start
argument_list|(
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
name|nextPerField
operator|!=
literal|null
condition|)
block|{
name|nextPerField
operator|.
name|start
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|start
name|boolean
name|start
parameter_list|(
name|Fieldable
index|[]
name|fields
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
name|doCall
operator|=
name|consumer
operator|.
name|start
argument_list|(
name|fields
argument_list|,
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|nextPerField
operator|!=
literal|null
condition|)
name|doNextCall
operator|=
name|nextPerField
operator|.
name|start
argument_list|(
name|fields
argument_list|,
name|count
argument_list|)
expr_stmt|;
return|return
name|doCall
operator|||
name|doNextCall
return|;
block|}
comment|// Secondary entry point (for 2nd& subsequent TermsHash),
comment|// because token text has already been "interned" into
comment|// textStart, so we hash by textStart
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|int
name|textStart
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|code
init|=
name|textStart
decl_stmt|;
name|int
name|hashPos
init|=
name|code
operator|&
name|postingsHashMask
decl_stmt|;
assert|assert
operator|!
name|postingsCompacted
assert|;
comment|// Locate RawPostingList in hash
name|p
operator|=
name|postingsHash
index|[
name|hashPos
index|]
expr_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|textStart
operator|!=
name|textStart
condition|)
block|{
comment|// Conflict: keep searching different locations in
comment|// the hash table.
specifier|final
name|int
name|inc
init|=
operator|(
operator|(
name|code
operator|>>
literal|8
operator|)
operator|+
name|code
operator|)
operator||
literal|1
decl_stmt|;
do|do
block|{
name|code
operator|+=
name|inc
expr_stmt|;
name|hashPos
operator|=
name|code
operator|&
name|postingsHashMask
expr_stmt|;
name|p
operator|=
name|postingsHash
index|[
name|hashPos
index|]
expr_stmt|;
block|}
do|while
condition|(
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|textStart
operator|!=
name|textStart
condition|)
do|;
block|}
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
comment|// First time we are seeing this token since we last
comment|// flushed the hash.
comment|// Refill?
if|if
condition|(
literal|0
operator|==
name|perThread
operator|.
name|freePostingsCount
condition|)
name|perThread
operator|.
name|morePostings
argument_list|()
expr_stmt|;
comment|// Pull next free RawPostingList from free list
name|p
operator|=
name|perThread
operator|.
name|freePostings
index|[
operator|--
name|perThread
operator|.
name|freePostingsCount
index|]
expr_stmt|;
assert|assert
name|p
operator|!=
literal|null
assert|;
name|p
operator|.
name|textStart
operator|=
name|textStart
expr_stmt|;
assert|assert
name|postingsHash
index|[
name|hashPos
index|]
operator|==
literal|null
assert|;
name|postingsHash
index|[
name|hashPos
index|]
operator|=
name|p
expr_stmt|;
name|numPostings
operator|++
expr_stmt|;
if|if
condition|(
name|numPostings
operator|==
name|postingsHashHalfSize
condition|)
name|rehashPostings
argument_list|(
literal|2
operator|*
name|postingsHashSize
argument_list|)
expr_stmt|;
comment|// Init stream slices
if|if
condition|(
name|numPostingInt
operator|+
name|intPool
operator|.
name|intUpto
operator|>
name|DocumentsWriter
operator|.
name|INT_BLOCK_SIZE
condition|)
name|intPool
operator|.
name|nextBuffer
argument_list|()
expr_stmt|;
if|if
condition|(
name|DocumentsWriter
operator|.
name|BYTE_BLOCK_SIZE
operator|-
name|bytePool
operator|.
name|byteUpto
operator|<
name|numPostingInt
operator|*
name|ByteBlockPool
operator|.
name|FIRST_LEVEL_SIZE
condition|)
name|bytePool
operator|.
name|nextBuffer
argument_list|()
expr_stmt|;
name|intUptos
operator|=
name|intPool
operator|.
name|buffer
expr_stmt|;
name|intUptoStart
operator|=
name|intPool
operator|.
name|intUpto
expr_stmt|;
name|intPool
operator|.
name|intUpto
operator|+=
name|streamCount
expr_stmt|;
name|p
operator|.
name|intStart
operator|=
name|intUptoStart
operator|+
name|intPool
operator|.
name|intOffset
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|streamCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|upto
init|=
name|bytePool
operator|.
name|newSlice
argument_list|(
name|ByteBlockPool
operator|.
name|FIRST_LEVEL_SIZE
argument_list|)
decl_stmt|;
name|intUptos
index|[
name|intUptoStart
operator|+
name|i
index|]
operator|=
name|upto
operator|+
name|bytePool
operator|.
name|byteOffset
expr_stmt|;
block|}
name|p
operator|.
name|byteStart
operator|=
name|intUptos
index|[
name|intUptoStart
index|]
expr_stmt|;
name|consumer
operator|.
name|newTerm
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|intUptos
operator|=
name|intPool
operator|.
name|buffers
index|[
name|p
operator|.
name|intStart
operator|>>
name|DocumentsWriter
operator|.
name|INT_BLOCK_SHIFT
index|]
expr_stmt|;
name|intUptoStart
operator|=
name|p
operator|.
name|intStart
operator|&
name|DocumentsWriter
operator|.
name|INT_BLOCK_MASK
expr_stmt|;
name|consumer
operator|.
name|addTerm
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Primary entry point (for first TermsHash)
DECL|method|add
name|void
name|add
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
operator|!
name|postingsCompacted
assert|;
comment|// We are first in the chain so we must "intern" the
comment|// term text into textStart address
comment|// Get the text of this term.
specifier|final
name|char
index|[]
name|tokenText
init|=
name|termAtt
operator|.
name|termBuffer
argument_list|()
decl_stmt|;
empty_stmt|;
specifier|final
name|int
name|tokenTextLen
init|=
name|termAtt
operator|.
name|termLength
argument_list|()
decl_stmt|;
comment|// Compute hashcode& replace any invalid UTF16 sequences
name|int
name|downto
init|=
name|tokenTextLen
decl_stmt|;
name|int
name|code
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|downto
operator|>
literal|0
condition|)
block|{
name|char
name|ch
init|=
name|tokenText
index|[
operator|--
name|downto
index|]
decl_stmt|;
if|if
condition|(
name|ch
operator|>=
name|UnicodeUtil
operator|.
name|UNI_SUR_LOW_START
operator|&&
name|ch
operator|<=
name|UnicodeUtil
operator|.
name|UNI_SUR_LOW_END
condition|)
block|{
if|if
condition|(
literal|0
operator|==
name|downto
condition|)
block|{
comment|// Unpaired
name|ch
operator|=
name|tokenText
index|[
name|downto
index|]
operator|=
name|UnicodeUtil
operator|.
name|UNI_REPLACEMENT_CHAR
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|char
name|ch2
init|=
name|tokenText
index|[
name|downto
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|ch2
operator|>=
name|UnicodeUtil
operator|.
name|UNI_SUR_HIGH_START
operator|&&
name|ch2
operator|<=
name|UnicodeUtil
operator|.
name|UNI_SUR_HIGH_END
condition|)
block|{
comment|// OK: high followed by low.  This is a valid
comment|// surrogate pair.
name|code
operator|=
operator|(
operator|(
name|code
operator|*
literal|31
operator|)
operator|+
name|ch
operator|)
operator|*
literal|31
operator|+
name|ch2
expr_stmt|;
name|downto
operator|--
expr_stmt|;
continue|continue;
block|}
else|else
block|{
comment|// Unpaired
name|ch
operator|=
name|tokenText
index|[
name|downto
index|]
operator|=
name|UnicodeUtil
operator|.
name|UNI_REPLACEMENT_CHAR
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|ch
operator|>=
name|UnicodeUtil
operator|.
name|UNI_SUR_HIGH_START
operator|&&
name|ch
operator|<=
name|UnicodeUtil
operator|.
name|UNI_SUR_HIGH_END
condition|)
comment|// Unpaired
name|ch
operator|=
name|tokenText
index|[
name|downto
index|]
operator|=
name|UnicodeUtil
operator|.
name|UNI_REPLACEMENT_CHAR
expr_stmt|;
name|code
operator|=
operator|(
name|code
operator|*
literal|31
operator|)
operator|+
name|ch
expr_stmt|;
block|}
name|int
name|hashPos
init|=
name|code
operator|&
name|postingsHashMask
decl_stmt|;
comment|// Locate RawPostingList in hash
name|p
operator|=
name|postingsHash
index|[
name|hashPos
index|]
expr_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
operator|!
name|postingEquals
argument_list|(
name|tokenText
argument_list|,
name|tokenTextLen
argument_list|)
condition|)
block|{
comment|// Conflict: keep searching different locations in
comment|// the hash table.
specifier|final
name|int
name|inc
init|=
operator|(
operator|(
name|code
operator|>>
literal|8
operator|)
operator|+
name|code
operator|)
operator||
literal|1
decl_stmt|;
do|do
block|{
name|code
operator|+=
name|inc
expr_stmt|;
name|hashPos
operator|=
name|code
operator|&
name|postingsHashMask
expr_stmt|;
name|p
operator|=
name|postingsHash
index|[
name|hashPos
index|]
expr_stmt|;
block|}
do|while
condition|(
name|p
operator|!=
literal|null
operator|&&
operator|!
name|postingEquals
argument_list|(
name|tokenText
argument_list|,
name|tokenTextLen
argument_list|)
condition|)
do|;
block|}
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
comment|// First time we are seeing this token since we last
comment|// flushed the hash.
specifier|final
name|int
name|textLen1
init|=
literal|1
operator|+
name|tokenTextLen
decl_stmt|;
if|if
condition|(
name|textLen1
operator|+
name|charPool
operator|.
name|charUpto
operator|>
name|DocumentsWriter
operator|.
name|CHAR_BLOCK_SIZE
condition|)
block|{
if|if
condition|(
name|textLen1
operator|>
name|DocumentsWriter
operator|.
name|CHAR_BLOCK_SIZE
condition|)
block|{
comment|// Just skip this term, to remain as robust as
comment|// possible during indexing.  A TokenFilter
comment|// can be inserted into the analyzer chain if
comment|// other behavior is wanted (pruning the term
comment|// to a prefix, throwing an exception, etc).
if|if
condition|(
name|docState
operator|.
name|maxTermPrefix
operator|==
literal|null
condition|)
name|docState
operator|.
name|maxTermPrefix
operator|=
operator|new
name|String
argument_list|(
name|tokenText
argument_list|,
literal|0
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|skippingLongTerm
argument_list|()
expr_stmt|;
return|return;
block|}
name|charPool
operator|.
name|nextBuffer
argument_list|()
expr_stmt|;
block|}
comment|// Refill?
if|if
condition|(
literal|0
operator|==
name|perThread
operator|.
name|freePostingsCount
condition|)
name|perThread
operator|.
name|morePostings
argument_list|()
expr_stmt|;
comment|// Pull next free RawPostingList from free list
name|p
operator|=
name|perThread
operator|.
name|freePostings
index|[
operator|--
name|perThread
operator|.
name|freePostingsCount
index|]
expr_stmt|;
assert|assert
name|p
operator|!=
literal|null
assert|;
specifier|final
name|char
index|[]
name|text
init|=
name|charPool
operator|.
name|buffer
decl_stmt|;
specifier|final
name|int
name|textUpto
init|=
name|charPool
operator|.
name|charUpto
decl_stmt|;
name|p
operator|.
name|textStart
operator|=
name|textUpto
operator|+
name|charPool
operator|.
name|charOffset
expr_stmt|;
name|charPool
operator|.
name|charUpto
operator|+=
name|textLen1
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|tokenText
argument_list|,
literal|0
argument_list|,
name|text
argument_list|,
name|textUpto
argument_list|,
name|tokenTextLen
argument_list|)
expr_stmt|;
name|text
index|[
name|textUpto
operator|+
name|tokenTextLen
index|]
operator|=
literal|0xffff
expr_stmt|;
assert|assert
name|postingsHash
index|[
name|hashPos
index|]
operator|==
literal|null
assert|;
name|postingsHash
index|[
name|hashPos
index|]
operator|=
name|p
expr_stmt|;
name|numPostings
operator|++
expr_stmt|;
if|if
condition|(
name|numPostings
operator|==
name|postingsHashHalfSize
condition|)
name|rehashPostings
argument_list|(
literal|2
operator|*
name|postingsHashSize
argument_list|)
expr_stmt|;
comment|// Init stream slices
if|if
condition|(
name|numPostingInt
operator|+
name|intPool
operator|.
name|intUpto
operator|>
name|DocumentsWriter
operator|.
name|INT_BLOCK_SIZE
condition|)
name|intPool
operator|.
name|nextBuffer
argument_list|()
expr_stmt|;
if|if
condition|(
name|DocumentsWriter
operator|.
name|BYTE_BLOCK_SIZE
operator|-
name|bytePool
operator|.
name|byteUpto
operator|<
name|numPostingInt
operator|*
name|ByteBlockPool
operator|.
name|FIRST_LEVEL_SIZE
condition|)
name|bytePool
operator|.
name|nextBuffer
argument_list|()
expr_stmt|;
name|intUptos
operator|=
name|intPool
operator|.
name|buffer
expr_stmt|;
name|intUptoStart
operator|=
name|intPool
operator|.
name|intUpto
expr_stmt|;
name|intPool
operator|.
name|intUpto
operator|+=
name|streamCount
expr_stmt|;
name|p
operator|.
name|intStart
operator|=
name|intUptoStart
operator|+
name|intPool
operator|.
name|intOffset
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|streamCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|upto
init|=
name|bytePool
operator|.
name|newSlice
argument_list|(
name|ByteBlockPool
operator|.
name|FIRST_LEVEL_SIZE
argument_list|)
decl_stmt|;
name|intUptos
index|[
name|intUptoStart
operator|+
name|i
index|]
operator|=
name|upto
operator|+
name|bytePool
operator|.
name|byteOffset
expr_stmt|;
block|}
name|p
operator|.
name|byteStart
operator|=
name|intUptos
index|[
name|intUptoStart
index|]
expr_stmt|;
name|consumer
operator|.
name|newTerm
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|intUptos
operator|=
name|intPool
operator|.
name|buffers
index|[
name|p
operator|.
name|intStart
operator|>>
name|DocumentsWriter
operator|.
name|INT_BLOCK_SHIFT
index|]
expr_stmt|;
name|intUptoStart
operator|=
name|p
operator|.
name|intStart
operator|&
name|DocumentsWriter
operator|.
name|INT_BLOCK_MASK
expr_stmt|;
name|consumer
operator|.
name|addTerm
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doNextCall
condition|)
name|nextPerField
operator|.
name|add
argument_list|(
name|p
operator|.
name|textStart
argument_list|)
expr_stmt|;
block|}
DECL|field|intUptos
name|int
index|[]
name|intUptos
decl_stmt|;
DECL|field|intUptoStart
name|int
name|intUptoStart
decl_stmt|;
DECL|method|writeByte
name|void
name|writeByte
parameter_list|(
name|int
name|stream
parameter_list|,
name|byte
name|b
parameter_list|)
block|{
name|int
name|upto
init|=
name|intUptos
index|[
name|intUptoStart
operator|+
name|stream
index|]
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|bytePool
operator|.
name|buffers
index|[
name|upto
operator|>>
name|DocumentsWriter
operator|.
name|BYTE_BLOCK_SHIFT
index|]
decl_stmt|;
assert|assert
name|bytes
operator|!=
literal|null
assert|;
name|int
name|offset
init|=
name|upto
operator|&
name|DocumentsWriter
operator|.
name|BYTE_BLOCK_MASK
decl_stmt|;
if|if
condition|(
name|bytes
index|[
name|offset
index|]
operator|!=
literal|0
condition|)
block|{
comment|// End of slice; allocate a new one
name|offset
operator|=
name|bytePool
operator|.
name|allocSlice
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|bytes
operator|=
name|bytePool
operator|.
name|buffer
expr_stmt|;
name|intUptos
index|[
name|intUptoStart
operator|+
name|stream
index|]
operator|=
name|offset
operator|+
name|bytePool
operator|.
name|byteOffset
expr_stmt|;
block|}
name|bytes
index|[
name|offset
index|]
operator|=
name|b
expr_stmt|;
operator|(
name|intUptos
index|[
name|intUptoStart
operator|+
name|stream
index|]
operator|)
operator|++
expr_stmt|;
block|}
DECL|method|writeBytes
specifier|public
name|void
name|writeBytes
parameter_list|(
name|int
name|stream
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
comment|// TODO: optimize
specifier|final
name|int
name|end
init|=
name|offset
operator|+
name|len
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
name|writeByte
argument_list|(
name|stream
argument_list|,
name|b
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|writeVInt
name|void
name|writeVInt
parameter_list|(
name|int
name|stream
parameter_list|,
name|int
name|i
parameter_list|)
block|{
assert|assert
name|stream
operator|<
name|streamCount
assert|;
while|while
condition|(
operator|(
name|i
operator|&
operator|~
literal|0x7F
operator|)
operator|!=
literal|0
condition|)
block|{
name|writeByte
argument_list|(
name|stream
argument_list|,
call|(
name|byte
call|)
argument_list|(
operator|(
name|i
operator|&
literal|0x7f
operator|)
operator||
literal|0x80
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|>>>=
literal|7
expr_stmt|;
block|}
name|writeByte
argument_list|(
name|stream
argument_list|,
operator|(
name|byte
operator|)
name|i
argument_list|)
expr_stmt|;
block|}
DECL|method|finish
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
block|{
name|consumer
operator|.
name|finish
argument_list|()
expr_stmt|;
if|if
condition|(
name|nextPerField
operator|!=
literal|null
condition|)
name|nextPerField
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
comment|/** Called when postings hash is too small (> 50%    *  occupied) or too large (< 20% occupied). */
DECL|method|rehashPostings
name|void
name|rehashPostings
parameter_list|(
specifier|final
name|int
name|newSize
parameter_list|)
block|{
specifier|final
name|int
name|newMask
init|=
name|newSize
operator|-
literal|1
decl_stmt|;
name|RawPostingList
index|[]
name|newHash
init|=
operator|new
name|RawPostingList
index|[
name|newSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|postingsHashSize
condition|;
name|i
operator|++
control|)
block|{
name|RawPostingList
name|p0
init|=
name|postingsHash
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|p0
operator|!=
literal|null
condition|)
block|{
name|int
name|code
decl_stmt|;
if|if
condition|(
name|perThread
operator|.
name|primary
condition|)
block|{
specifier|final
name|int
name|start
init|=
name|p0
operator|.
name|textStart
operator|&
name|DocumentsWriter
operator|.
name|CHAR_BLOCK_MASK
decl_stmt|;
specifier|final
name|char
index|[]
name|text
init|=
name|charPool
operator|.
name|buffers
index|[
name|p0
operator|.
name|textStart
operator|>>
name|DocumentsWriter
operator|.
name|CHAR_BLOCK_SHIFT
index|]
decl_stmt|;
name|int
name|pos
init|=
name|start
decl_stmt|;
while|while
condition|(
name|text
index|[
name|pos
index|]
operator|!=
literal|0xffff
condition|)
name|pos
operator|++
expr_stmt|;
name|code
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|pos
operator|>
name|start
condition|)
name|code
operator|=
operator|(
name|code
operator|*
literal|31
operator|)
operator|+
name|text
index|[
operator|--
name|pos
index|]
expr_stmt|;
block|}
else|else
name|code
operator|=
name|p0
operator|.
name|textStart
expr_stmt|;
name|int
name|hashPos
init|=
name|code
operator|&
name|newMask
decl_stmt|;
assert|assert
name|hashPos
operator|>=
literal|0
assert|;
if|if
condition|(
name|newHash
index|[
name|hashPos
index|]
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|inc
init|=
operator|(
operator|(
name|code
operator|>>
literal|8
operator|)
operator|+
name|code
operator|)
operator||
literal|1
decl_stmt|;
do|do
block|{
name|code
operator|+=
name|inc
expr_stmt|;
name|hashPos
operator|=
name|code
operator|&
name|newMask
expr_stmt|;
block|}
do|while
condition|(
name|newHash
index|[
name|hashPos
index|]
operator|!=
literal|null
condition|)
do|;
block|}
name|newHash
index|[
name|hashPos
index|]
operator|=
name|p0
expr_stmt|;
block|}
block|}
name|postingsHashMask
operator|=
name|newMask
expr_stmt|;
name|postingsHash
operator|=
name|newHash
expr_stmt|;
name|postingsHashSize
operator|=
name|newSize
expr_stmt|;
name|postingsHashHalfSize
operator|=
name|newSize
operator|>>
literal|1
expr_stmt|;
block|}
block|}
end_class
end_unit
