begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_class
DECL|class|FormatPostingsPositionsWriter
specifier|final
class|class
name|FormatPostingsPositionsWriter
extends|extends
name|FormatPostingsPositionsConsumer
block|{
DECL|field|parent
specifier|final
name|FormatPostingsDocsWriter
name|parent
decl_stmt|;
DECL|field|out
specifier|final
name|IndexOutput
name|out
decl_stmt|;
DECL|field|omitTermFreqAndPositions
name|boolean
name|omitTermFreqAndPositions
decl_stmt|;
DECL|field|storePayloads
name|boolean
name|storePayloads
decl_stmt|;
DECL|field|lastPayloadLength
name|int
name|lastPayloadLength
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|FormatPostingsPositionsWriter
name|FormatPostingsPositionsWriter
parameter_list|(
name|SegmentWriteState
name|state
parameter_list|,
name|FormatPostingsDocsWriter
name|parent
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|omitTermFreqAndPositions
operator|=
name|parent
operator|.
name|omitTermFreqAndPositions
expr_stmt|;
if|if
condition|(
name|parent
operator|.
name|parent
operator|.
name|parent
operator|.
name|fieldInfos
operator|.
name|hasProx
argument_list|()
condition|)
block|{
comment|// At least one field does not omit TF, so create the
comment|// prox file
specifier|final
name|String
name|fileName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|parent
operator|.
name|parent
operator|.
name|parent
operator|.
name|segment
argument_list|,
name|IndexFileNames
operator|.
name|PROX_EXTENSION
argument_list|)
decl_stmt|;
name|state
operator|.
name|flushedFiles
operator|.
name|add
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|out
operator|=
name|parent
operator|.
name|parent
operator|.
name|parent
operator|.
name|dir
operator|.
name|createOutput
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|parent
operator|.
name|skipListWriter
operator|.
name|setProxOutput
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
else|else
comment|// Every field omits TF so we will write no prox file
name|out
operator|=
literal|null
expr_stmt|;
block|}
DECL|field|lastPosition
name|int
name|lastPosition
decl_stmt|;
comment|/** Add a new position& payload */
DECL|method|addPosition
name|void
name|addPosition
parameter_list|(
name|int
name|position
parameter_list|,
name|byte
index|[]
name|payload
parameter_list|,
name|int
name|payloadOffset
parameter_list|,
name|int
name|payloadLength
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
operator|!
name|omitTermFreqAndPositions
operator|:
literal|"omitTermFreqAndPositions is true"
assert|;
assert|assert
name|out
operator|!=
literal|null
assert|;
specifier|final
name|int
name|delta
init|=
name|position
operator|-
name|lastPosition
decl_stmt|;
name|lastPosition
operator|=
name|position
expr_stmt|;
if|if
condition|(
name|storePayloads
condition|)
block|{
if|if
condition|(
name|payloadLength
operator|!=
name|lastPayloadLength
condition|)
block|{
name|lastPayloadLength
operator|=
name|payloadLength
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
operator|(
name|delta
operator|<<
literal|1
operator|)
operator||
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|payloadLength
argument_list|)
expr_stmt|;
block|}
else|else
name|out
operator|.
name|writeVInt
argument_list|(
name|delta
operator|<<
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|payloadLength
operator|>
literal|0
condition|)
name|out
operator|.
name|writeBytes
argument_list|(
name|payload
argument_list|,
name|payloadLength
argument_list|)
expr_stmt|;
block|}
else|else
name|out
operator|.
name|writeVInt
argument_list|(
name|delta
argument_list|)
expr_stmt|;
block|}
DECL|method|setField
name|void
name|setField
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|)
block|{
name|omitTermFreqAndPositions
operator|=
name|fieldInfo
operator|.
name|omitTermFreqAndPositions
expr_stmt|;
name|storePayloads
operator|=
name|omitTermFreqAndPositions
condition|?
literal|false
else|:
name|fieldInfo
operator|.
name|storePayloads
expr_stmt|;
block|}
comment|/** Called when we are done adding positions& payloads */
DECL|method|finish
name|void
name|finish
parameter_list|()
block|{
name|lastPosition
operator|=
literal|0
expr_stmt|;
name|lastPayloadLength
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|close
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
