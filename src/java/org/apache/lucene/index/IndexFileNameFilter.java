begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Copyright 2005 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import
begin_comment
comment|/**  * Filename filter that accept filenames and extensions only created by Lucene.  *   * @author Daniel Naber / Bernhard Messer  * @version $rcs = ' $Id: Exp $ ' ;  */
end_comment
begin_class
DECL|class|IndexFileNameFilter
specifier|public
class|class
name|IndexFileNameFilter
implements|implements
name|FilenameFilter
block|{
comment|/* (non-Javadoc)    * @see java.io.FilenameFilter#accept(java.io.File, java.lang.String)    */
DECL|method|accept
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|IndexFileNames
operator|.
name|INDEX_EXTENSIONS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|"."
operator|+
name|IndexFileNames
operator|.
name|INDEX_EXTENSIONS
index|[
name|i
index|]
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|IndexFileNames
operator|.
name|DELETABLE
argument_list|)
condition|)
return|return
literal|true
return|;
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS
argument_list|)
condition|)
return|return
literal|true
return|;
elseif|else
if|if
condition|(
name|name
operator|.
name|matches
argument_list|(
literal|".+\\.f\\d+"
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
block|}
end_class
end_unit
