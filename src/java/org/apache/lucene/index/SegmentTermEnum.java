begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/* ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2001 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation" and  *    "Apache Lucene" must not be used to endorse or promote products  *    derived from this software without prior written permission. For  *    written permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache",  *    "Apache Lucene", nor may "Apache" appear in their name, without  *    prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|InputStream
import|;
end_import
begin_class
DECL|class|SegmentTermEnum
specifier|final
class|class
name|SegmentTermEnum
extends|extends
name|TermEnum
implements|implements
name|Cloneable
block|{
DECL|field|input
specifier|private
name|InputStream
name|input
decl_stmt|;
DECL|field|fieldInfos
specifier|private
name|FieldInfos
name|fieldInfos
decl_stmt|;
DECL|field|size
name|int
name|size
decl_stmt|;
DECL|field|position
name|int
name|position
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|term
specifier|private
name|Term
name|term
init|=
operator|new
name|Term
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
DECL|field|termInfo
specifier|private
name|TermInfo
name|termInfo
init|=
operator|new
name|TermInfo
argument_list|()
decl_stmt|;
DECL|field|isIndex
name|boolean
name|isIndex
init|=
literal|false
decl_stmt|;
DECL|field|indexPointer
name|long
name|indexPointer
init|=
literal|0
decl_stmt|;
DECL|field|prev
name|Term
name|prev
decl_stmt|;
DECL|field|buffer
specifier|private
name|char
index|[]
name|buffer
init|=
block|{}
decl_stmt|;
DECL|method|SegmentTermEnum
name|SegmentTermEnum
parameter_list|(
name|InputStream
name|i
parameter_list|,
name|FieldInfos
name|fis
parameter_list|,
name|boolean
name|isi
parameter_list|)
throws|throws
name|IOException
block|{
name|input
operator|=
name|i
expr_stmt|;
name|fieldInfos
operator|=
name|fis
expr_stmt|;
name|size
operator|=
name|input
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|isIndex
operator|=
name|isi
expr_stmt|;
block|}
DECL|method|clone
specifier|protected
name|Object
name|clone
parameter_list|()
block|{
name|SegmentTermEnum
name|clone
init|=
literal|null
decl_stmt|;
try|try
block|{
name|clone
operator|=
operator|(
name|SegmentTermEnum
operator|)
name|super
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{}
name|clone
operator|.
name|input
operator|=
operator|(
name|InputStream
operator|)
name|input
operator|.
name|clone
argument_list|()
expr_stmt|;
name|clone
operator|.
name|termInfo
operator|=
operator|new
name|TermInfo
argument_list|(
name|termInfo
argument_list|)
expr_stmt|;
name|clone
operator|.
name|growBuffer
argument_list|(
name|term
operator|.
name|text
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|clone
return|;
block|}
DECL|method|seek
specifier|final
name|void
name|seek
parameter_list|(
name|long
name|pointer
parameter_list|,
name|int
name|p
parameter_list|,
name|Term
name|t
parameter_list|,
name|TermInfo
name|ti
parameter_list|)
throws|throws
name|IOException
block|{
name|input
operator|.
name|seek
argument_list|(
name|pointer
argument_list|)
expr_stmt|;
name|position
operator|=
name|p
expr_stmt|;
name|term
operator|=
name|t
expr_stmt|;
name|prev
operator|=
literal|null
expr_stmt|;
name|termInfo
operator|.
name|set
argument_list|(
name|ti
argument_list|)
expr_stmt|;
name|growBuffer
argument_list|(
name|term
operator|.
name|text
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// copy term text into buffer
block|}
comment|/** Increments the enumeration to the next element.  True if one exists.*/
DECL|method|next
specifier|public
specifier|final
name|boolean
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|position
operator|++
operator|>=
name|size
operator|-
literal|1
condition|)
block|{
name|term
operator|=
literal|null
expr_stmt|;
return|return
literal|false
return|;
block|}
name|prev
operator|=
name|term
expr_stmt|;
name|term
operator|=
name|readTerm
argument_list|()
expr_stmt|;
name|termInfo
operator|.
name|docFreq
operator|=
name|input
operator|.
name|readVInt
argument_list|()
expr_stmt|;
comment|// read doc freq
name|termInfo
operator|.
name|freqPointer
operator|+=
name|input
operator|.
name|readVLong
argument_list|()
expr_stmt|;
comment|// read freq pointer
name|termInfo
operator|.
name|proxPointer
operator|+=
name|input
operator|.
name|readVLong
argument_list|()
expr_stmt|;
comment|// read prox pointer
if|if
condition|(
name|isIndex
condition|)
name|indexPointer
operator|+=
name|input
operator|.
name|readVLong
argument_list|()
expr_stmt|;
comment|// read index pointer
return|return
literal|true
return|;
block|}
DECL|method|readTerm
specifier|private
specifier|final
name|Term
name|readTerm
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|start
init|=
name|input
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|input
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|int
name|totalLength
init|=
name|start
operator|+
name|length
decl_stmt|;
if|if
condition|(
name|buffer
operator|.
name|length
operator|<
name|totalLength
condition|)
name|growBuffer
argument_list|(
name|totalLength
argument_list|)
expr_stmt|;
name|input
operator|.
name|readChars
argument_list|(
name|buffer
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
operator|new
name|Term
argument_list|(
name|fieldInfos
operator|.
name|fieldName
argument_list|(
name|input
operator|.
name|readVInt
argument_list|()
argument_list|)
argument_list|,
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|totalLength
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|growBuffer
specifier|private
specifier|final
name|void
name|growBuffer
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|buffer
operator|=
operator|new
name|char
index|[
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|term
operator|.
name|text
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
comment|// copy contents
name|buffer
index|[
name|i
index|]
operator|=
name|term
operator|.
name|text
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
comment|/** Returns the current Term in the enumeration.     Initially invalid, valid after next() called for the first time.*/
DECL|method|term
specifier|public
specifier|final
name|Term
name|term
parameter_list|()
block|{
return|return
name|term
return|;
block|}
comment|/** Returns the current TermInfo in the enumeration.     Initially invalid, valid after next() called for the first time.*/
DECL|method|termInfo
specifier|final
name|TermInfo
name|termInfo
parameter_list|()
block|{
return|return
operator|new
name|TermInfo
argument_list|(
name|termInfo
argument_list|)
return|;
block|}
comment|/** Sets the argument to the current TermInfo in the enumeration.     Initially invalid, valid after next() called for the first time.*/
DECL|method|termInfo
specifier|final
name|void
name|termInfo
parameter_list|(
name|TermInfo
name|ti
parameter_list|)
block|{
name|ti
operator|.
name|set
argument_list|(
name|termInfo
argument_list|)
expr_stmt|;
block|}
comment|/** Returns the docFreq from the current TermInfo in the enumeration.     Initially invalid, valid after next() called for the first time.*/
DECL|method|docFreq
specifier|public
specifier|final
name|int
name|docFreq
parameter_list|()
block|{
return|return
name|termInfo
operator|.
name|docFreq
return|;
block|}
comment|/* Returns the freqPointer from the current TermInfo in the enumeration.     Initially invalid, valid after next() called for the first time.*/
DECL|method|freqPointer
specifier|final
name|long
name|freqPointer
parameter_list|()
block|{
return|return
name|termInfo
operator|.
name|freqPointer
return|;
block|}
comment|/* Returns the proxPointer from the current TermInfo in the enumeration.     Initially invalid, valid after next() called for the first time.*/
DECL|method|proxPointer
specifier|final
name|long
name|proxPointer
parameter_list|()
block|{
return|return
name|termInfo
operator|.
name|proxPointer
return|;
block|}
comment|/** Closes the enumeration to further activity, freeing resources. */
DECL|method|close
specifier|public
specifier|final
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
