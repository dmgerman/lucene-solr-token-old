begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_comment
comment|/**  * NewIndexModifier extends {@link IndexWriter} so that you can not only insert  * documents but also delete documents through a single interface. Internally,  * inserts and deletes are buffered before they are flushed to disk.  *<p>  * Design Overview  *<p>  * deleteDocuments() method works by buffering terms to be deleted. Deletes are  * deferred until ram is flushed to disk, either because enough new documents or  * delete terms are buffered, or because close() or flush() is called. Using  * Java synchronization, care is taken to ensure that an interleaved sequence of  * inserts and deletes for the same document are properly serialized.  */
end_comment
begin_class
DECL|class|NewIndexModifier
specifier|public
class|class
name|NewIndexModifier
extends|extends
name|IndexWriter
block|{
comment|// number of ram segments a delete term applies to
DECL|class|Num
specifier|private
class|class
name|Num
block|{
DECL|field|num
specifier|private
name|int
name|num
decl_stmt|;
DECL|method|Num
name|Num
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|this
operator|.
name|num
operator|=
name|num
expr_stmt|;
block|}
DECL|method|getNum
name|int
name|getNum
parameter_list|()
block|{
return|return
name|num
return|;
block|}
DECL|method|setNum
name|void
name|setNum
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|this
operator|.
name|num
operator|=
name|num
expr_stmt|;
block|}
block|}
comment|/**    * Default value is 10. Change using {@link #setMaxBufferedDeleteTerms(int)}.    */
DECL|field|DEFAULT_MAX_BUFFERED_DELETE_TERMS
specifier|public
specifier|final
specifier|static
name|int
name|DEFAULT_MAX_BUFFERED_DELETE_TERMS
init|=
literal|10
decl_stmt|;
comment|// the max number of delete terms that can be buffered before
comment|// they must be flushed to disk
DECL|field|maxBufferedDeleteTerms
specifier|private
name|int
name|maxBufferedDeleteTerms
init|=
name|DEFAULT_MAX_BUFFERED_DELETE_TERMS
decl_stmt|;
comment|// to buffer delete terms in ram before they are applied
comment|// key is delete term, value is number of ram segments the term applies to
DECL|field|bufferedDeleteTerms
specifier|private
name|HashMap
name|bufferedDeleteTerms
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
DECL|field|numBufferedDeleteTerms
specifier|private
name|int
name|numBufferedDeleteTerms
init|=
literal|0
decl_stmt|;
comment|/**    * @see IndexWriter#IndexWriter(String, Analyzer, boolean)    */
DECL|method|NewIndexModifier
specifier|public
name|NewIndexModifier
parameter_list|(
name|String
name|path
parameter_list|,
name|Analyzer
name|a
parameter_list|,
name|boolean
name|create
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|path
argument_list|,
name|a
argument_list|,
name|create
argument_list|)
expr_stmt|;
block|}
comment|/**    * @see IndexWriter#IndexWriter(File, Analyzer, boolean)    */
DECL|method|NewIndexModifier
specifier|public
name|NewIndexModifier
parameter_list|(
name|File
name|path
parameter_list|,
name|Analyzer
name|a
parameter_list|,
name|boolean
name|create
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|path
argument_list|,
name|a
argument_list|,
name|create
argument_list|)
expr_stmt|;
block|}
comment|/**    * @see IndexWriter#IndexWriter(Directory, Analyzer, boolean)    */
DECL|method|NewIndexModifier
specifier|public
name|NewIndexModifier
parameter_list|(
name|Directory
name|d
parameter_list|,
name|Analyzer
name|a
parameter_list|,
name|boolean
name|create
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|d
argument_list|,
name|a
argument_list|,
name|create
argument_list|)
expr_stmt|;
block|}
comment|/**    * @see IndexWriter#IndexWriter(String, Analyzer)    */
DECL|method|NewIndexModifier
specifier|public
name|NewIndexModifier
parameter_list|(
name|String
name|path
parameter_list|,
name|Analyzer
name|a
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|path
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
comment|/**    * @see IndexWriter#IndexWriter(File, Analyzer)    */
DECL|method|NewIndexModifier
specifier|public
name|NewIndexModifier
parameter_list|(
name|File
name|path
parameter_list|,
name|Analyzer
name|a
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|path
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
comment|/**    * @see IndexWriter#IndexWriter(Directory, Analyzer)    */
DECL|method|NewIndexModifier
specifier|public
name|NewIndexModifier
parameter_list|(
name|Directory
name|d
parameter_list|,
name|Analyzer
name|a
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|d
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
comment|/**    * Determines the minimal number of delete terms required before the buffered    * in-memory delete terms are applied and flushed. If there are documents    * buffered in memory at the time, they are merged and a new Segment is    * created. The delete terms are applied appropriately.    *<p>    * The default value is 10.    * @throws IllegalArgumentException if maxBufferedDeleteTerms is smaller than    *         1    */
DECL|method|setMaxBufferedDeleteTerms
specifier|public
name|void
name|setMaxBufferedDeleteTerms
parameter_list|(
name|int
name|maxBufferedDeleteTerms
parameter_list|)
block|{
if|if
condition|(
name|maxBufferedDeleteTerms
operator|<
literal|1
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"maxBufferedDeleteTerms must at least be 1"
argument_list|)
throw|;
name|this
operator|.
name|maxBufferedDeleteTerms
operator|=
name|maxBufferedDeleteTerms
expr_stmt|;
block|}
comment|/**    * @see #setMaxBufferedDeleteTerms    */
DECL|method|getMaxBufferedDeleteTerms
specifier|public
name|int
name|getMaxBufferedDeleteTerms
parameter_list|()
block|{
return|return
name|maxBufferedDeleteTerms
return|;
block|}
comment|// for test purpose
DECL|method|getBufferedDeleteTermsSize
specifier|final
specifier|synchronized
name|int
name|getBufferedDeleteTermsSize
parameter_list|()
block|{
return|return
name|bufferedDeleteTerms
operator|.
name|size
argument_list|()
return|;
block|}
comment|// for test purpose
DECL|method|getNumBufferedDeleteTerms
specifier|final
specifier|synchronized
name|int
name|getNumBufferedDeleteTerms
parameter_list|()
block|{
return|return
name|numBufferedDeleteTerms
return|;
block|}
comment|/**    * Updates a document by first deleting all documents containing    *<code>term</code> and then adding the new document.    */
DECL|method|updateDocument
specifier|public
name|void
name|updateDocument
parameter_list|(
name|Term
name|term
parameter_list|,
name|Document
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|updateDocument
argument_list|(
name|term
argument_list|,
name|doc
argument_list|,
name|getAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Updates a document by first deleting all documents containing    *<code>term</code> and then adding the new document.    */
DECL|method|updateDocument
specifier|public
name|void
name|updateDocument
parameter_list|(
name|Term
name|term
parameter_list|,
name|Document
name|doc
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|IOException
block|{
name|SegmentInfo
name|newSegmentInfo
init|=
name|buildSingleDocSegment
argument_list|(
name|doc
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|bufferDeleteTerm
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|ramSegmentInfos
operator|.
name|addElement
argument_list|(
name|newSegmentInfo
argument_list|)
expr_stmt|;
name|maybeFlushRamSegments
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Deletes all documents containing<code>term</code>.    */
DECL|method|deleteDocuments
specifier|public
specifier|synchronized
name|void
name|deleteDocuments
parameter_list|(
name|Term
name|term
parameter_list|)
throws|throws
name|IOException
block|{
name|bufferDeleteTerm
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|maybeFlushRamSegments
argument_list|()
expr_stmt|;
block|}
comment|/**    * Deletes all documents containing any of the terms. All deletes are flushed    * at the same time.    */
DECL|method|deleteDocuments
specifier|public
specifier|synchronized
name|void
name|deleteDocuments
parameter_list|(
name|Term
index|[]
name|terms
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bufferDeleteTerm
argument_list|(
name|terms
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|maybeFlushRamSegments
argument_list|()
expr_stmt|;
block|}
comment|// buffer a term in bufferedDeleteTerms. bufferedDeleteTerms also records
comment|// the current number of documents buffered in ram so that the delete term
comment|// will be applied to those ram segments as well as the disk segments
DECL|method|bufferDeleteTerm
specifier|private
name|void
name|bufferDeleteTerm
parameter_list|(
name|Term
name|term
parameter_list|)
block|{
name|Num
name|num
init|=
operator|(
name|Num
operator|)
name|bufferedDeleteTerms
operator|.
name|get
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|num
operator|==
literal|null
condition|)
block|{
name|bufferedDeleteTerms
operator|.
name|put
argument_list|(
name|term
argument_list|,
operator|new
name|Num
argument_list|(
name|getRAMSegmentCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|num
operator|.
name|setNum
argument_list|(
name|getRAMSegmentCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|numBufferedDeleteTerms
operator|++
expr_stmt|;
block|}
comment|// a flush is triggered if enough new documents are buffered or
comment|// if enough delete terms are buffered
DECL|method|timeToFlushRam
specifier|protected
name|boolean
name|timeToFlushRam
parameter_list|()
block|{
return|return
name|super
operator|.
name|timeToFlushRam
argument_list|()
operator|||
name|numBufferedDeleteTerms
operator|>=
name|maxBufferedDeleteTerms
return|;
block|}
DECL|method|anythingToFlushRam
specifier|protected
name|boolean
name|anythingToFlushRam
parameter_list|()
block|{
return|return
name|super
operator|.
name|anythingToFlushRam
argument_list|()
operator|||
name|bufferedDeleteTerms
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
DECL|method|onlyRamDocsToFlush
specifier|protected
name|boolean
name|onlyRamDocsToFlush
parameter_list|()
block|{
return|return
name|super
operator|.
name|onlyRamDocsToFlush
argument_list|()
operator|&&
name|bufferedDeleteTerms
operator|.
name|size
argument_list|()
operator|==
literal|0
return|;
block|}
DECL|method|doAfterFlushRamSegments
specifier|protected
name|void
name|doAfterFlushRamSegments
parameter_list|(
name|boolean
name|flushedRamSegments
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bufferedDeleteTerms
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|getInfoStream
argument_list|()
operator|!=
literal|null
condition|)
name|getInfoStream
argument_list|()
operator|.
name|println
argument_list|(
literal|"flush "
operator|+
name|numBufferedDeleteTerms
operator|+
literal|" buffered terms on "
operator|+
name|segmentInfos
operator|.
name|size
argument_list|()
operator|+
literal|" segments."
argument_list|)
expr_stmt|;
if|if
condition|(
name|flushedRamSegments
condition|)
block|{
name|IndexReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|SegmentReader
operator|.
name|get
argument_list|(
name|segmentInfos
operator|.
name|info
argument_list|(
name|segmentInfos
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setDeleter
argument_list|(
name|getDeleter
argument_list|()
argument_list|)
expr_stmt|;
comment|// apply delete terms to the segment just flushed from ram
comment|// apply appropriately so that a delete term is only applied to
comment|// the documents buffered before it, not those buffered after it
name|applyDeletesSelectively
argument_list|(
name|bufferedDeleteTerms
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|int
name|infosEnd
init|=
name|segmentInfos
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|flushedRamSegments
condition|)
block|{
name|infosEnd
operator|--
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|infosEnd
condition|;
name|i
operator|++
control|)
block|{
name|IndexReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|SegmentReader
operator|.
name|get
argument_list|(
name|segmentInfos
operator|.
name|info
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setDeleter
argument_list|(
name|getDeleter
argument_list|()
argument_list|)
expr_stmt|;
comment|// apply delete terms to disk segments
comment|// except the one just flushed from ram
name|applyDeletes
argument_list|(
name|bufferedDeleteTerms
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// clean up bufferedDeleteTerms
name|bufferedDeleteTerms
operator|.
name|clear
argument_list|()
expr_stmt|;
name|numBufferedDeleteTerms
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|// apply buffered delete terms to the segment just flushed from ram
comment|// apply appropriately so that a delete term is only applied to
comment|// the documents buffered before it, not those buffered after it
DECL|method|applyDeletesSelectively
specifier|private
specifier|final
name|void
name|applyDeletesSelectively
parameter_list|(
name|HashMap
name|deleteTerms
parameter_list|,
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|Iterator
name|iter
init|=
name|deleteTerms
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
name|entry
init|=
operator|(
name|Entry
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Term
name|term
init|=
operator|(
name|Term
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|TermDocs
name|docs
init|=
name|reader
operator|.
name|termDocs
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|docs
operator|!=
literal|null
condition|)
block|{
name|int
name|num
init|=
operator|(
operator|(
name|Num
operator|)
name|entry
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|getNum
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
name|docs
operator|.
name|next
argument_list|()
condition|)
block|{
name|int
name|doc
init|=
name|docs
operator|.
name|doc
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|>=
name|num
condition|)
block|{
break|break;
block|}
name|reader
operator|.
name|deleteDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|docs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// apply buffered delete terms to disk segments
comment|// except the one just flushed from ram
DECL|method|applyDeletes
specifier|private
specifier|final
name|void
name|applyDeletes
parameter_list|(
name|HashMap
name|deleteTerms
parameter_list|,
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|Iterator
name|iter
init|=
name|deleteTerms
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
name|entry
init|=
operator|(
name|Entry
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Term
name|term
init|=
operator|(
name|Term
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|reader
operator|.
name|deleteDocuments
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
