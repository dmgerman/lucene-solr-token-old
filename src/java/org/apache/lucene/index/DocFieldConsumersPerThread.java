begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_class
DECL|class|DocFieldConsumersPerThread
specifier|final
class|class
name|DocFieldConsumersPerThread
extends|extends
name|DocFieldConsumerPerThread
block|{
DECL|field|one
specifier|final
name|DocFieldConsumerPerThread
name|one
decl_stmt|;
DECL|field|two
specifier|final
name|DocFieldConsumerPerThread
name|two
decl_stmt|;
DECL|field|parent
specifier|final
name|DocFieldConsumers
name|parent
decl_stmt|;
DECL|field|docState
specifier|final
name|DocumentsWriter
operator|.
name|DocState
name|docState
decl_stmt|;
DECL|method|DocFieldConsumersPerThread
specifier|public
name|DocFieldConsumersPerThread
parameter_list|(
name|DocFieldProcessorPerThread
name|docFieldProcessorPerThread
parameter_list|,
name|DocFieldConsumers
name|parent
parameter_list|,
name|DocFieldConsumerPerThread
name|one
parameter_list|,
name|DocFieldConsumerPerThread
name|two
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|one
operator|=
name|one
expr_stmt|;
name|this
operator|.
name|two
operator|=
name|two
expr_stmt|;
name|docState
operator|=
name|docFieldProcessorPerThread
operator|.
name|docState
expr_stmt|;
block|}
DECL|method|startDocument
specifier|public
name|void
name|startDocument
parameter_list|()
throws|throws
name|IOException
block|{
name|one
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|two
operator|.
name|startDocument
argument_list|()
expr_stmt|;
block|}
DECL|method|abort
specifier|public
name|void
name|abort
parameter_list|()
block|{
try|try
block|{
name|one
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|two
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|finishDocument
specifier|public
name|DocumentsWriter
operator|.
name|DocWriter
name|finishDocument
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|DocumentsWriter
operator|.
name|DocWriter
name|oneDoc
init|=
name|one
operator|.
name|finishDocument
argument_list|()
decl_stmt|;
specifier|final
name|DocumentsWriter
operator|.
name|DocWriter
name|twoDoc
init|=
name|two
operator|.
name|finishDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|oneDoc
operator|==
literal|null
condition|)
return|return
name|twoDoc
return|;
elseif|else
if|if
condition|(
name|twoDoc
operator|==
literal|null
condition|)
return|return
name|oneDoc
return|;
else|else
block|{
name|DocFieldConsumers
operator|.
name|PerDoc
name|both
init|=
name|parent
operator|.
name|getPerDoc
argument_list|()
decl_stmt|;
name|both
operator|.
name|docID
operator|=
name|docState
operator|.
name|docID
expr_stmt|;
assert|assert
name|oneDoc
operator|.
name|docID
operator|==
name|docState
operator|.
name|docID
assert|;
assert|assert
name|twoDoc
operator|.
name|docID
operator|==
name|docState
operator|.
name|docID
assert|;
name|both
operator|.
name|one
operator|=
name|oneDoc
expr_stmt|;
name|both
operator|.
name|two
operator|=
name|twoDoc
expr_stmt|;
return|return
name|both
return|;
block|}
block|}
DECL|method|addField
specifier|public
name|DocFieldConsumerPerField
name|addField
parameter_list|(
name|FieldInfo
name|fi
parameter_list|)
block|{
return|return
operator|new
name|DocFieldConsumersPerField
argument_list|(
name|this
argument_list|,
name|one
operator|.
name|addField
argument_list|(
name|fi
argument_list|)
argument_list|,
name|two
operator|.
name|addField
argument_list|(
name|fi
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class
end_unit
