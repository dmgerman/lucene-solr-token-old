begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *<p/>  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Convenience class for holding TermVector information.  */
end_comment
begin_class
DECL|class|TermVectorEntry
specifier|public
class|class
name|TermVectorEntry
block|{
DECL|field|field
specifier|private
name|String
name|field
decl_stmt|;
DECL|field|term
specifier|private
name|String
name|term
decl_stmt|;
DECL|field|frequency
specifier|private
name|int
name|frequency
decl_stmt|;
DECL|field|offsets
specifier|private
name|TermVectorOffsetInfo
index|[]
name|offsets
decl_stmt|;
DECL|field|positions
name|int
index|[]
name|positions
decl_stmt|;
DECL|method|TermVectorEntry
specifier|public
name|TermVectorEntry
parameter_list|()
block|{   }
DECL|method|TermVectorEntry
specifier|public
name|TermVectorEntry
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|term
parameter_list|,
name|int
name|frequency
parameter_list|,
name|TermVectorOffsetInfo
index|[]
name|offsets
parameter_list|,
name|int
index|[]
name|positions
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
name|this
operator|.
name|frequency
operator|=
name|frequency
expr_stmt|;
name|this
operator|.
name|offsets
operator|=
name|offsets
expr_stmt|;
name|this
operator|.
name|positions
operator|=
name|positions
expr_stmt|;
block|}
DECL|method|getField
specifier|public
name|String
name|getField
parameter_list|()
block|{
return|return
name|field
return|;
block|}
DECL|method|getFrequency
specifier|public
name|int
name|getFrequency
parameter_list|()
block|{
return|return
name|frequency
return|;
block|}
DECL|method|getOffsets
specifier|public
name|TermVectorOffsetInfo
index|[]
name|getOffsets
parameter_list|()
block|{
return|return
name|offsets
return|;
block|}
DECL|method|getPositions
specifier|public
name|int
index|[]
name|getPositions
parameter_list|()
block|{
return|return
name|positions
return|;
block|}
DECL|method|getTerm
specifier|public
name|String
name|getTerm
parameter_list|()
block|{
return|return
name|term
return|;
block|}
comment|//Keep package local
DECL|method|setFrequency
name|void
name|setFrequency
parameter_list|(
name|int
name|frequency
parameter_list|)
block|{
name|this
operator|.
name|frequency
operator|=
name|frequency
expr_stmt|;
block|}
DECL|method|setOffsets
name|void
name|setOffsets
parameter_list|(
name|TermVectorOffsetInfo
index|[]
name|offsets
parameter_list|)
block|{
name|this
operator|.
name|offsets
operator|=
name|offsets
expr_stmt|;
block|}
DECL|method|setPositions
name|void
name|setPositions
parameter_list|(
name|int
index|[]
name|positions
parameter_list|)
block|{
name|this
operator|.
name|positions
operator|=
name|positions
expr_stmt|;
block|}
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|TermVectorEntry
name|that
init|=
operator|(
name|TermVectorEntry
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|term
operator|!=
literal|null
condition|?
operator|!
name|term
operator|.
name|equals
argument_list|(
name|that
operator|.
name|term
argument_list|)
else|:
name|that
operator|.
name|term
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|term
operator|!=
literal|null
condition|?
name|term
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"TermVectorEntry{"
operator|+
literal|"field='"
operator|+
name|field
operator|+
literal|'\''
operator|+
literal|", term='"
operator|+
name|term
operator|+
literal|'\''
operator|+
literal|", frequency="
operator|+
name|frequency
operator|+
literal|'}'
return|;
block|}
block|}
end_class
end_unit
