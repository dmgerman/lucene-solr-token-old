begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldSelector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DefaultSimilarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|BufferedIndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitVector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CloseableThreadLocal
import|;
end_import
begin_comment
comment|/**  * @version $Id$  */
end_comment
begin_class
DECL|class|SegmentReader
class|class
name|SegmentReader
extends|extends
name|DirectoryIndexReader
block|{
DECL|field|segment
specifier|private
name|String
name|segment
decl_stmt|;
DECL|field|si
specifier|private
name|SegmentInfo
name|si
decl_stmt|;
DECL|field|readBufferSize
specifier|private
name|int
name|readBufferSize
decl_stmt|;
DECL|field|fieldInfos
name|FieldInfos
name|fieldInfos
decl_stmt|;
DECL|field|fieldsReaderOrig
specifier|private
name|FieldsReader
name|fieldsReaderOrig
init|=
literal|null
decl_stmt|;
DECL|field|tis
name|TermInfosReader
name|tis
decl_stmt|;
DECL|field|termVectorsReaderOrig
name|TermVectorsReader
name|termVectorsReaderOrig
init|=
literal|null
decl_stmt|;
DECL|field|termVectorsLocal
name|CloseableThreadLocal
name|termVectorsLocal
init|=
operator|new
name|CloseableThreadLocal
argument_list|()
decl_stmt|;
DECL|field|deletedDocs
name|BitVector
name|deletedDocs
init|=
literal|null
decl_stmt|;
DECL|field|deletedDocsDirty
specifier|private
name|boolean
name|deletedDocsDirty
init|=
literal|false
decl_stmt|;
DECL|field|normsDirty
specifier|private
name|boolean
name|normsDirty
init|=
literal|false
decl_stmt|;
DECL|field|undeleteAll
specifier|private
name|boolean
name|undeleteAll
init|=
literal|false
decl_stmt|;
DECL|field|pendingDeleteCount
specifier|private
name|int
name|pendingDeleteCount
decl_stmt|;
DECL|field|rollbackDeletedDocsDirty
specifier|private
name|boolean
name|rollbackDeletedDocsDirty
init|=
literal|false
decl_stmt|;
DECL|field|rollbackNormsDirty
specifier|private
name|boolean
name|rollbackNormsDirty
init|=
literal|false
decl_stmt|;
DECL|field|rollbackUndeleteAll
specifier|private
name|boolean
name|rollbackUndeleteAll
init|=
literal|false
decl_stmt|;
DECL|field|rollbackPendingDeleteCount
specifier|private
name|int
name|rollbackPendingDeleteCount
decl_stmt|;
DECL|field|readOnly
specifier|private
name|boolean
name|readOnly
decl_stmt|;
DECL|field|freqStream
name|IndexInput
name|freqStream
decl_stmt|;
DECL|field|proxStream
name|IndexInput
name|proxStream
decl_stmt|;
comment|// optionally used for the .nrm file shared by multiple norms
DECL|field|singleNormStream
specifier|private
name|IndexInput
name|singleNormStream
decl_stmt|;
comment|// Compound File Reader when based on a compound file segment
DECL|field|cfsReader
name|CompoundFileReader
name|cfsReader
init|=
literal|null
decl_stmt|;
DECL|field|storeCFSReader
name|CompoundFileReader
name|storeCFSReader
init|=
literal|null
decl_stmt|;
comment|// indicates the SegmentReader with which the resources are being shared,
comment|// in case this is a re-opened reader
DECL|field|referencedSegmentReader
specifier|private
name|SegmentReader
name|referencedSegmentReader
init|=
literal|null
decl_stmt|;
comment|/**    * Sets the initial value     */
DECL|class|FieldsReaderLocal
specifier|private
class|class
name|FieldsReaderLocal
extends|extends
name|CloseableThreadLocal
block|{
DECL|method|initialValue
specifier|protected
name|Object
name|initialValue
parameter_list|()
block|{
return|return
operator|(
name|FieldsReader
operator|)
name|fieldsReaderOrig
operator|.
name|clone
argument_list|()
return|;
block|}
block|}
DECL|field|fieldsReaderLocal
name|CloseableThreadLocal
name|fieldsReaderLocal
init|=
operator|new
name|FieldsReaderLocal
argument_list|()
decl_stmt|;
DECL|class|Norm
specifier|private
class|class
name|Norm
block|{
DECL|field|refCount
specifier|volatile
name|int
name|refCount
decl_stmt|;
DECL|field|useSingleNormStream
name|boolean
name|useSingleNormStream
decl_stmt|;
DECL|method|incRef
specifier|public
specifier|synchronized
name|void
name|incRef
parameter_list|()
block|{
assert|assert
name|refCount
operator|>
literal|0
assert|;
name|refCount
operator|++
expr_stmt|;
block|}
DECL|method|decRef
specifier|public
specifier|synchronized
name|void
name|decRef
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|refCount
operator|>
literal|0
assert|;
if|if
condition|(
name|refCount
operator|==
literal|1
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
block|}
name|refCount
operator|--
expr_stmt|;
block|}
DECL|method|Norm
specifier|public
name|Norm
parameter_list|(
name|IndexInput
name|in
parameter_list|,
name|boolean
name|useSingleNormStream
parameter_list|,
name|int
name|number
parameter_list|,
name|long
name|normSeek
parameter_list|)
block|{
name|refCount
operator|=
literal|1
expr_stmt|;
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|number
operator|=
name|number
expr_stmt|;
name|this
operator|.
name|normSeek
operator|=
name|normSeek
expr_stmt|;
name|this
operator|.
name|useSingleNormStream
operator|=
name|useSingleNormStream
expr_stmt|;
block|}
DECL|field|in
specifier|private
name|IndexInput
name|in
decl_stmt|;
DECL|field|bytes
specifier|private
name|byte
index|[]
name|bytes
decl_stmt|;
DECL|field|dirty
specifier|private
name|boolean
name|dirty
decl_stmt|;
DECL|field|number
specifier|private
name|int
name|number
decl_stmt|;
DECL|field|normSeek
specifier|private
name|long
name|normSeek
decl_stmt|;
DECL|field|rollbackDirty
specifier|private
name|boolean
name|rollbackDirty
decl_stmt|;
DECL|method|reWrite
specifier|private
name|void
name|reWrite
parameter_list|(
name|SegmentInfo
name|si
parameter_list|)
throws|throws
name|IOException
block|{
comment|// NOTE: norms are re-written in regular directory, not cfs
name|si
operator|.
name|advanceNormGen
argument_list|(
name|this
operator|.
name|number
argument_list|)
expr_stmt|;
name|IndexOutput
name|out
init|=
name|directory
argument_list|()
operator|.
name|createOutput
argument_list|(
name|si
operator|.
name|getNormFileName
argument_list|(
name|this
operator|.
name|number
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|writeBytes
argument_list|(
name|bytes
argument_list|,
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|dirty
operator|=
literal|false
expr_stmt|;
block|}
comment|/** Closes the underlying IndexInput for this norm.      * It is still valid to access all other norm properties after close is called.      * @throws IOException      */
DECL|method|close
specifier|private
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|in
operator|!=
literal|null
operator|&&
operator|!
name|useSingleNormStream
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|in
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Increments the RC of this reader, as well as    * of all norms this reader is using    */
DECL|method|incRef
specifier|public
specifier|synchronized
name|void
name|incRef
parameter_list|()
block|{
name|super
operator|.
name|incRef
argument_list|()
expr_stmt|;
name|Iterator
name|it
init|=
name|norms
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Norm
name|norm
init|=
operator|(
name|Norm
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|norm
operator|.
name|incRef
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * only increments the RC of this reader, not tof     * he norms. This is important whenever a reopen()    * creates a new SegmentReader that doesn't share    * the norms with this one     */
DECL|method|incRefReaderNotNorms
specifier|private
specifier|synchronized
name|void
name|incRefReaderNotNorms
parameter_list|()
block|{
name|super
operator|.
name|incRef
argument_list|()
expr_stmt|;
block|}
DECL|method|decRef
specifier|public
specifier|synchronized
name|void
name|decRef
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|Iterator
name|it
init|=
name|norms
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Norm
name|norm
init|=
operator|(
name|Norm
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|norm
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|decRefReaderNotNorms
specifier|private
specifier|synchronized
name|void
name|decRefReaderNotNorms
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
DECL|field|norms
name|Map
name|norms
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|/** The class which implements SegmentReader. */
DECL|field|IMPL
specifier|private
specifier|static
name|Class
name|IMPL
decl_stmt|;
static|static
block|{
try|try
block|{
name|String
name|name
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"org.apache.lucene.SegmentReader.class"
argument_list|,
name|SegmentReader
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|IMPL
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"cannot load SegmentReader class: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
try|try
block|{
name|IMPL
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|SegmentReader
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"cannot load default SegmentReader class: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|field|READONLY_IMPL
specifier|private
specifier|static
name|Class
name|READONLY_IMPL
decl_stmt|;
static|static
block|{
try|try
block|{
name|String
name|name
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"org.apache.lucene.ReadOnlySegmentReader.class"
argument_list|,
name|ReadOnlySegmentReader
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|READONLY_IMPL
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"cannot load ReadOnlySegmentReader class: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
try|try
block|{
name|READONLY_IMPL
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|ReadOnlySegmentReader
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"cannot load default ReadOnlySegmentReader class: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|get
specifier|public
specifier|static
name|SegmentReader
name|get
parameter_list|(
name|SegmentInfo
name|si
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
return|return
name|get
argument_list|(
name|READ_ONLY_DEFAULT
argument_list|,
name|si
operator|.
name|dir
argument_list|,
name|si
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|BufferedIndexInput
operator|.
name|BUFFER_SIZE
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|get
specifier|public
specifier|static
name|SegmentReader
name|get
parameter_list|(
name|boolean
name|readOnly
parameter_list|,
name|SegmentInfo
name|si
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
return|return
name|get
argument_list|(
name|readOnly
argument_list|,
name|si
operator|.
name|dir
argument_list|,
name|si
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|BufferedIndexInput
operator|.
name|BUFFER_SIZE
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|get
specifier|static
name|SegmentReader
name|get
parameter_list|(
name|SegmentInfo
name|si
parameter_list|,
name|boolean
name|doOpenStores
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
return|return
name|get
argument_list|(
name|READ_ONLY_DEFAULT
argument_list|,
name|si
operator|.
name|dir
argument_list|,
name|si
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|BufferedIndexInput
operator|.
name|BUFFER_SIZE
argument_list|,
name|doOpenStores
argument_list|)
return|;
block|}
comment|/**    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|get
specifier|public
specifier|static
name|SegmentReader
name|get
parameter_list|(
name|SegmentInfo
name|si
parameter_list|,
name|int
name|readBufferSize
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
return|return
name|get
argument_list|(
name|READ_ONLY_DEFAULT
argument_list|,
name|si
operator|.
name|dir
argument_list|,
name|si
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|readBufferSize
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|get
specifier|static
name|SegmentReader
name|get
parameter_list|(
name|SegmentInfo
name|si
parameter_list|,
name|int
name|readBufferSize
parameter_list|,
name|boolean
name|doOpenStores
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
return|return
name|get
argument_list|(
name|READ_ONLY_DEFAULT
argument_list|,
name|si
operator|.
name|dir
argument_list|,
name|si
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|readBufferSize
argument_list|,
name|doOpenStores
argument_list|)
return|;
block|}
comment|/**    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|get
specifier|static
name|SegmentReader
name|get
parameter_list|(
name|boolean
name|readOnly
parameter_list|,
name|SegmentInfo
name|si
parameter_list|,
name|int
name|readBufferSize
parameter_list|,
name|boolean
name|doOpenStores
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
return|return
name|get
argument_list|(
name|readOnly
argument_list|,
name|si
operator|.
name|dir
argument_list|,
name|si
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|readBufferSize
argument_list|,
name|doOpenStores
argument_list|)
return|;
block|}
comment|/**    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|get
specifier|public
specifier|static
name|SegmentReader
name|get
parameter_list|(
name|boolean
name|readOnly
parameter_list|,
name|SegmentInfos
name|sis
parameter_list|,
name|SegmentInfo
name|si
parameter_list|,
name|boolean
name|closeDir
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
return|return
name|get
argument_list|(
name|readOnly
argument_list|,
name|si
operator|.
name|dir
argument_list|,
name|si
argument_list|,
name|sis
argument_list|,
name|closeDir
argument_list|,
literal|true
argument_list|,
name|BufferedIndexInput
operator|.
name|BUFFER_SIZE
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|get
specifier|public
specifier|static
name|SegmentReader
name|get
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|SegmentInfo
name|si
parameter_list|,
name|SegmentInfos
name|sis
parameter_list|,
name|boolean
name|closeDir
parameter_list|,
name|boolean
name|ownDir
parameter_list|,
name|int
name|readBufferSize
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
return|return
name|get
argument_list|(
name|READ_ONLY_DEFAULT
argument_list|,
name|dir
argument_list|,
name|si
argument_list|,
name|sis
argument_list|,
name|closeDir
argument_list|,
name|ownDir
argument_list|,
name|readBufferSize
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|get
specifier|public
specifier|static
name|SegmentReader
name|get
parameter_list|(
name|boolean
name|readOnly
parameter_list|,
name|Directory
name|dir
parameter_list|,
name|SegmentInfo
name|si
parameter_list|,
name|SegmentInfos
name|sis
parameter_list|,
name|boolean
name|closeDir
parameter_list|,
name|boolean
name|ownDir
parameter_list|,
name|int
name|readBufferSize
parameter_list|,
name|boolean
name|doOpenStores
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|SegmentReader
name|instance
decl_stmt|;
try|try
block|{
if|if
condition|(
name|readOnly
condition|)
name|instance
operator|=
operator|(
name|SegmentReader
operator|)
name|READONLY_IMPL
operator|.
name|newInstance
argument_list|()
expr_stmt|;
else|else
name|instance
operator|=
operator|(
name|SegmentReader
operator|)
name|IMPL
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"cannot load SegmentReader class: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|instance
operator|.
name|init
argument_list|(
name|dir
argument_list|,
name|sis
argument_list|,
name|closeDir
argument_list|,
name|readOnly
argument_list|)
expr_stmt|;
name|instance
operator|.
name|initialize
argument_list|(
name|si
argument_list|,
name|readBufferSize
argument_list|,
name|doOpenStores
argument_list|)
expr_stmt|;
return|return
name|instance
return|;
block|}
DECL|method|initialize
specifier|private
name|void
name|initialize
parameter_list|(
name|SegmentInfo
name|si
parameter_list|,
name|int
name|readBufferSize
parameter_list|,
name|boolean
name|doOpenStores
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|segment
operator|=
name|si
operator|.
name|name
expr_stmt|;
name|this
operator|.
name|si
operator|=
name|si
expr_stmt|;
name|this
operator|.
name|readBufferSize
operator|=
name|readBufferSize
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// Use compound file directory for some files, if it exists
name|Directory
name|cfsDir
init|=
name|directory
argument_list|()
decl_stmt|;
if|if
condition|(
name|si
operator|.
name|getUseCompoundFile
argument_list|()
condition|)
block|{
name|cfsReader
operator|=
operator|new
name|CompoundFileReader
argument_list|(
name|directory
argument_list|()
argument_list|,
name|segment
operator|+
literal|"."
operator|+
name|IndexFileNames
operator|.
name|COMPOUND_FILE_EXTENSION
argument_list|,
name|readBufferSize
argument_list|)
expr_stmt|;
name|cfsDir
operator|=
name|cfsReader
expr_stmt|;
block|}
specifier|final
name|Directory
name|storeDir
decl_stmt|;
if|if
condition|(
name|doOpenStores
condition|)
block|{
if|if
condition|(
name|si
operator|.
name|getDocStoreOffset
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|si
operator|.
name|getDocStoreIsCompoundFile
argument_list|()
condition|)
block|{
name|storeCFSReader
operator|=
operator|new
name|CompoundFileReader
argument_list|(
name|directory
argument_list|()
argument_list|,
name|si
operator|.
name|getDocStoreSegment
argument_list|()
operator|+
literal|"."
operator|+
name|IndexFileNames
operator|.
name|COMPOUND_FILE_STORE_EXTENSION
argument_list|,
name|readBufferSize
argument_list|)
expr_stmt|;
name|storeDir
operator|=
name|storeCFSReader
expr_stmt|;
block|}
else|else
block|{
name|storeDir
operator|=
name|directory
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|storeDir
operator|=
name|cfsDir
expr_stmt|;
block|}
block|}
else|else
name|storeDir
operator|=
literal|null
expr_stmt|;
name|fieldInfos
operator|=
operator|new
name|FieldInfos
argument_list|(
name|cfsDir
argument_list|,
name|segment
operator|+
literal|".fnm"
argument_list|)
expr_stmt|;
name|boolean
name|anyProx
init|=
literal|false
decl_stmt|;
specifier|final
name|int
name|numFields
init|=
name|fieldInfos
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|!
name|anyProx
operator|&&
name|i
operator|<
name|numFields
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|!
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|i
argument_list|)
operator|.
name|omitTf
condition|)
name|anyProx
operator|=
literal|true
expr_stmt|;
specifier|final
name|String
name|fieldsSegment
decl_stmt|;
if|if
condition|(
name|si
operator|.
name|getDocStoreOffset
argument_list|()
operator|!=
operator|-
literal|1
condition|)
name|fieldsSegment
operator|=
name|si
operator|.
name|getDocStoreSegment
argument_list|()
expr_stmt|;
else|else
name|fieldsSegment
operator|=
name|segment
expr_stmt|;
if|if
condition|(
name|doOpenStores
condition|)
block|{
name|fieldsReaderOrig
operator|=
operator|new
name|FieldsReader
argument_list|(
name|storeDir
argument_list|,
name|fieldsSegment
argument_list|,
name|fieldInfos
argument_list|,
name|readBufferSize
argument_list|,
name|si
operator|.
name|getDocStoreOffset
argument_list|()
argument_list|,
name|si
operator|.
name|docCount
argument_list|)
expr_stmt|;
comment|// Verify two sources of "maxDoc" agree:
if|if
condition|(
name|si
operator|.
name|getDocStoreOffset
argument_list|()
operator|==
operator|-
literal|1
operator|&&
name|fieldsReaderOrig
operator|.
name|size
argument_list|()
operator|!=
name|si
operator|.
name|docCount
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"doc counts differ for segment "
operator|+
name|si
operator|.
name|name
operator|+
literal|": fieldsReader shows "
operator|+
name|fieldsReaderOrig
operator|.
name|size
argument_list|()
operator|+
literal|" but segmentInfo shows "
operator|+
name|si
operator|.
name|docCount
argument_list|)
throw|;
block|}
block|}
name|tis
operator|=
operator|new
name|TermInfosReader
argument_list|(
name|cfsDir
argument_list|,
name|segment
argument_list|,
name|fieldInfos
argument_list|,
name|readBufferSize
argument_list|)
expr_stmt|;
name|loadDeletedDocs
argument_list|()
expr_stmt|;
comment|// make sure that all index files have been read or are kept open
comment|// so that if an index update removes them we'll still have them
name|freqStream
operator|=
name|cfsDir
operator|.
name|openInput
argument_list|(
name|segment
operator|+
literal|".frq"
argument_list|,
name|readBufferSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|anyProx
condition|)
name|proxStream
operator|=
name|cfsDir
operator|.
name|openInput
argument_list|(
name|segment
operator|+
literal|".prx"
argument_list|,
name|readBufferSize
argument_list|)
expr_stmt|;
name|openNorms
argument_list|(
name|cfsDir
argument_list|,
name|readBufferSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|doOpenStores
operator|&&
name|fieldInfos
operator|.
name|hasVectors
argument_list|()
condition|)
block|{
comment|// open term vector files only as needed
specifier|final
name|String
name|vectorsSegment
decl_stmt|;
if|if
condition|(
name|si
operator|.
name|getDocStoreOffset
argument_list|()
operator|!=
operator|-
literal|1
condition|)
name|vectorsSegment
operator|=
name|si
operator|.
name|getDocStoreSegment
argument_list|()
expr_stmt|;
else|else
name|vectorsSegment
operator|=
name|segment
expr_stmt|;
name|termVectorsReaderOrig
operator|=
operator|new
name|TermVectorsReader
argument_list|(
name|storeDir
argument_list|,
name|vectorsSegment
argument_list|,
name|fieldInfos
argument_list|,
name|readBufferSize
argument_list|,
name|si
operator|.
name|getDocStoreOffset
argument_list|()
argument_list|,
name|si
operator|.
name|docCount
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
comment|// With lock-less commits, it's entirely possible (and
comment|// fine) to hit a FileNotFound exception above.  In
comment|// this case, we want to explicitly close any subset
comment|// of things that were opened so that we don't have to
comment|// wait for a GC to do so.
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|doClose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|loadDeletedDocs
specifier|private
name|void
name|loadDeletedDocs
parameter_list|()
throws|throws
name|IOException
block|{
comment|// NOTE: the bitvector is stored using the regular directory, not cfs
if|if
condition|(
name|hasDeletions
argument_list|(
name|si
argument_list|)
condition|)
block|{
name|deletedDocs
operator|=
operator|new
name|BitVector
argument_list|(
name|directory
argument_list|()
argument_list|,
name|si
operator|.
name|getDelFileName
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
name|si
operator|.
name|getDelCount
argument_list|()
operator|==
name|deletedDocs
operator|.
name|count
argument_list|()
operator|:
literal|"delete count mismatch: info="
operator|+
name|si
operator|.
name|getDelCount
argument_list|()
operator|+
literal|" vs BitVector="
operator|+
name|deletedDocs
operator|.
name|count
argument_list|()
assert|;
comment|// Verify # deletes does not exceed maxDoc for this
comment|// segment:
assert|assert
name|si
operator|.
name|getDelCount
argument_list|()
operator|<=
name|maxDoc
argument_list|()
operator|:
literal|"delete count mismatch: "
operator|+
name|deletedDocs
operator|.
name|count
argument_list|()
operator|+
literal|") exceeds max doc ("
operator|+
name|maxDoc
argument_list|()
operator|+
literal|") for segment "
operator|+
name|si
operator|.
name|name
assert|;
block|}
else|else
assert|assert
name|si
operator|.
name|getDelCount
argument_list|()
operator|==
literal|0
assert|;
block|}
DECL|method|doReopen
specifier|protected
specifier|synchronized
name|DirectoryIndexReader
name|doReopen
parameter_list|(
name|SegmentInfos
name|infos
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|DirectoryIndexReader
name|newReader
decl_stmt|;
if|if
condition|(
name|infos
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|SegmentInfo
name|si
init|=
name|infos
operator|.
name|info
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|segment
operator|.
name|equals
argument_list|(
name|si
operator|.
name|name
argument_list|)
operator|&&
name|si
operator|.
name|getUseCompoundFile
argument_list|()
operator|==
name|SegmentReader
operator|.
name|this
operator|.
name|si
operator|.
name|getUseCompoundFile
argument_list|()
condition|)
block|{
name|newReader
operator|=
name|reopenSegment
argument_list|(
name|si
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// segment not referenced anymore, reopen not possible
comment|// or segment format changed
name|newReader
operator|=
name|SegmentReader
operator|.
name|get
argument_list|(
name|readOnly
argument_list|,
name|infos
argument_list|,
name|infos
operator|.
name|info
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|readOnly
condition|)
return|return
operator|new
name|ReadOnlyMultiSegmentReader
argument_list|(
name|directory
argument_list|,
name|infos
argument_list|,
name|closeDirectory
argument_list|,
operator|new
name|SegmentReader
index|[]
block|{
name|this
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
else|else
return|return
operator|new
name|MultiSegmentReader
argument_list|(
name|directory
argument_list|,
name|infos
argument_list|,
name|closeDirectory
argument_list|,
operator|new
name|SegmentReader
index|[]
block|{
name|this
block|}
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
name|newReader
return|;
block|}
DECL|method|reopenSegment
specifier|synchronized
name|SegmentReader
name|reopenSegment
parameter_list|(
name|SegmentInfo
name|si
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|boolean
name|deletionsUpToDate
init|=
operator|(
name|this
operator|.
name|si
operator|.
name|hasDeletions
argument_list|()
operator|==
name|si
operator|.
name|hasDeletions
argument_list|()
operator|)
operator|&&
operator|(
operator|!
name|si
operator|.
name|hasDeletions
argument_list|()
operator|||
name|this
operator|.
name|si
operator|.
name|getDelFileName
argument_list|()
operator|.
name|equals
argument_list|(
name|si
operator|.
name|getDelFileName
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|boolean
name|normsUpToDate
init|=
literal|true
decl_stmt|;
name|boolean
index|[]
name|fieldNormsChanged
init|=
operator|new
name|boolean
index|[
name|fieldInfos
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
name|normsUpToDate
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldInfos
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|si
operator|.
name|getNormFileName
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|si
operator|.
name|getNormFileName
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|normsUpToDate
operator|=
literal|false
expr_stmt|;
name|fieldNormsChanged
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|normsUpToDate
operator|&&
name|deletionsUpToDate
condition|)
block|{
return|return
name|this
return|;
block|}
comment|// clone reader
name|SegmentReader
name|clone
decl_stmt|;
if|if
condition|(
name|readOnly
condition|)
name|clone
operator|=
operator|new
name|ReadOnlySegmentReader
argument_list|()
expr_stmt|;
else|else
name|clone
operator|=
operator|new
name|SegmentReader
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|clone
operator|.
name|readOnly
operator|=
name|readOnly
expr_stmt|;
name|clone
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
name|clone
operator|.
name|si
operator|=
name|si
expr_stmt|;
name|clone
operator|.
name|segment
operator|=
name|segment
expr_stmt|;
name|clone
operator|.
name|readBufferSize
operator|=
name|readBufferSize
expr_stmt|;
name|clone
operator|.
name|cfsReader
operator|=
name|cfsReader
expr_stmt|;
name|clone
operator|.
name|storeCFSReader
operator|=
name|storeCFSReader
expr_stmt|;
name|clone
operator|.
name|fieldInfos
operator|=
name|fieldInfos
expr_stmt|;
name|clone
operator|.
name|tis
operator|=
name|tis
expr_stmt|;
name|clone
operator|.
name|freqStream
operator|=
name|freqStream
expr_stmt|;
name|clone
operator|.
name|proxStream
operator|=
name|proxStream
expr_stmt|;
name|clone
operator|.
name|termVectorsReaderOrig
operator|=
name|termVectorsReaderOrig
expr_stmt|;
if|if
condition|(
name|fieldsReaderOrig
operator|!=
literal|null
condition|)
block|{
name|clone
operator|.
name|fieldsReaderOrig
operator|=
operator|(
name|FieldsReader
operator|)
name|fieldsReaderOrig
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|deletionsUpToDate
condition|)
block|{
comment|// load deleted docs
name|clone
operator|.
name|deletedDocs
operator|=
literal|null
expr_stmt|;
name|clone
operator|.
name|loadDeletedDocs
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|clone
operator|.
name|deletedDocs
operator|=
name|this
operator|.
name|deletedDocs
expr_stmt|;
block|}
name|clone
operator|.
name|norms
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|normsUpToDate
condition|)
block|{
comment|// load norms
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldNormsChanged
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// copy unchanged norms to the cloned reader and incRef those norms
if|if
condition|(
operator|!
name|fieldNormsChanged
index|[
name|i
index|]
condition|)
block|{
name|String
name|curField
init|=
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|i
argument_list|)
operator|.
name|name
decl_stmt|;
name|Norm
name|norm
init|=
operator|(
name|Norm
operator|)
name|this
operator|.
name|norms
operator|.
name|get
argument_list|(
name|curField
argument_list|)
decl_stmt|;
name|norm
operator|.
name|incRef
argument_list|()
expr_stmt|;
name|clone
operator|.
name|norms
operator|.
name|put
argument_list|(
name|curField
argument_list|,
name|norm
argument_list|)
expr_stmt|;
block|}
block|}
name|clone
operator|.
name|openNorms
argument_list|(
name|si
operator|.
name|getUseCompoundFile
argument_list|()
condition|?
name|cfsReader
else|:
name|directory
argument_list|()
argument_list|,
name|readBufferSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Iterator
name|it
init|=
name|norms
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|field
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Norm
name|norm
init|=
operator|(
name|Norm
operator|)
name|norms
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|norm
operator|.
name|incRef
argument_list|()
expr_stmt|;
name|clone
operator|.
name|norms
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|norm
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|clone
operator|.
name|singleNormStream
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldInfos
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FieldInfo
name|fi
init|=
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|isIndexed
operator|&&
operator|!
name|fi
operator|.
name|omitNorms
condition|)
block|{
name|Directory
name|d
init|=
name|si
operator|.
name|getUseCompoundFile
argument_list|()
condition|?
name|cfsReader
else|:
name|directory
argument_list|()
decl_stmt|;
name|String
name|fileName
init|=
name|si
operator|.
name|getNormFileName
argument_list|(
name|fi
operator|.
name|number
argument_list|)
decl_stmt|;
if|if
condition|(
name|si
operator|.
name|hasSeparateNorms
argument_list|(
name|fi
operator|.
name|number
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|fileName
operator|.
name|endsWith
argument_list|(
literal|"."
operator|+
name|IndexFileNames
operator|.
name|NORMS_EXTENSION
argument_list|)
condition|)
block|{
name|clone
operator|.
name|singleNormStream
operator|=
name|d
operator|.
name|openInput
argument_list|(
name|fileName
argument_list|,
name|readBufferSize
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|this
operator|.
name|referencedSegmentReader
operator|!=
literal|null
condition|)
block|{
comment|// this reader shares resources with another SegmentReader,
comment|// so we increment the other readers refCount. We don't
comment|// increment the refCount of the norms because we did
comment|// that already for the shared norms
name|clone
operator|.
name|referencedSegmentReader
operator|=
name|this
operator|.
name|referencedSegmentReader
expr_stmt|;
name|referencedSegmentReader
operator|.
name|incRefReaderNotNorms
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// this reader wasn't reopened, so we increment this
comment|// readers refCount
name|clone
operator|.
name|referencedSegmentReader
operator|=
name|this
expr_stmt|;
name|incRefReaderNotNorms
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
comment|// An exception occured during reopen, we have to decRef the norms
comment|// that we incRef'ed already and close singleNormsStream and FieldsReader
name|clone
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|clone
return|;
block|}
DECL|method|commitChanges
specifier|protected
name|void
name|commitChanges
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|deletedDocsDirty
condition|)
block|{
comment|// re-write deleted
name|si
operator|.
name|advanceDelGen
argument_list|()
expr_stmt|;
comment|// We can write directly to the actual name (vs to a
comment|// .tmp& renaming it) because the file is not live
comment|// until segments file is written:
name|deletedDocs
operator|.
name|write
argument_list|(
name|directory
argument_list|()
argument_list|,
name|si
operator|.
name|getDelFileName
argument_list|()
argument_list|)
expr_stmt|;
name|si
operator|.
name|setDelCount
argument_list|(
name|si
operator|.
name|getDelCount
argument_list|()
operator|+
name|pendingDeleteCount
argument_list|)
expr_stmt|;
name|pendingDeleteCount
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|undeleteAll
operator|&&
name|si
operator|.
name|hasDeletions
argument_list|()
condition|)
block|{
name|si
operator|.
name|clearDelGen
argument_list|()
expr_stmt|;
name|si
operator|.
name|setDelCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|normsDirty
condition|)
block|{
comment|// re-write norms
name|si
operator|.
name|setNumFields
argument_list|(
name|fieldInfos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|norms
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Norm
name|norm
init|=
operator|(
name|Norm
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|norm
operator|.
name|dirty
condition|)
block|{
name|norm
operator|.
name|reWrite
argument_list|(
name|si
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|deletedDocsDirty
operator|=
literal|false
expr_stmt|;
name|normsDirty
operator|=
literal|false
expr_stmt|;
name|undeleteAll
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|getFieldsReader
name|FieldsReader
name|getFieldsReader
parameter_list|()
block|{
return|return
operator|(
name|FieldsReader
operator|)
name|fieldsReaderLocal
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|hasReferencedReader
init|=
operator|(
name|referencedSegmentReader
operator|!=
literal|null
operator|)
decl_stmt|;
name|termVectorsLocal
operator|.
name|close
argument_list|()
expr_stmt|;
name|fieldsReaderLocal
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasReferencedReader
condition|)
block|{
name|referencedSegmentReader
operator|.
name|decRefReaderNotNorms
argument_list|()
expr_stmt|;
name|referencedSegmentReader
operator|=
literal|null
expr_stmt|;
block|}
name|deletedDocs
operator|=
literal|null
expr_stmt|;
comment|// close the single norms stream
if|if
condition|(
name|singleNormStream
operator|!=
literal|null
condition|)
block|{
comment|// we can close this stream, even if the norms
comment|// are shared, because every reader has it's own
comment|// singleNormStream
name|singleNormStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|singleNormStream
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasReferencedReader
condition|)
block|{
comment|// close everything, nothing is shared anymore with other readers
if|if
condition|(
name|tis
operator|!=
literal|null
condition|)
block|{
name|tis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|freqStream
operator|!=
literal|null
condition|)
name|freqStream
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|proxStream
operator|!=
literal|null
condition|)
name|proxStream
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|termVectorsReaderOrig
operator|!=
literal|null
condition|)
name|termVectorsReaderOrig
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|fieldsReaderOrig
operator|!=
literal|null
condition|)
name|fieldsReaderOrig
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|cfsReader
operator|!=
literal|null
condition|)
name|cfsReader
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|storeCFSReader
operator|!=
literal|null
condition|)
name|storeCFSReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// In DirectoryIndexReader.reopen, our directory
comment|// instance was made private to us (cloned), so we
comment|// always call super.doClose to possibly close the
comment|// directory:
name|super
operator|.
name|doClose
argument_list|()
expr_stmt|;
block|}
DECL|method|hasDeletions
specifier|static
name|boolean
name|hasDeletions
parameter_list|(
name|SegmentInfo
name|si
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Don't call ensureOpen() here (it could affect performance)
return|return
name|si
operator|.
name|hasDeletions
argument_list|()
return|;
block|}
DECL|method|hasDeletions
specifier|public
name|boolean
name|hasDeletions
parameter_list|()
block|{
comment|// Don't call ensureOpen() here (it could affect performance)
return|return
name|deletedDocs
operator|!=
literal|null
return|;
block|}
DECL|method|usesCompoundFile
specifier|static
name|boolean
name|usesCompoundFile
parameter_list|(
name|SegmentInfo
name|si
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|si
operator|.
name|getUseCompoundFile
argument_list|()
return|;
block|}
DECL|method|hasSeparateNorms
specifier|static
name|boolean
name|hasSeparateNorms
parameter_list|(
name|SegmentInfo
name|si
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|si
operator|.
name|hasSeparateNorms
argument_list|()
return|;
block|}
DECL|method|doDelete
specifier|protected
name|void
name|doDelete
parameter_list|(
name|int
name|docNum
parameter_list|)
block|{
if|if
condition|(
name|deletedDocs
operator|==
literal|null
condition|)
name|deletedDocs
operator|=
operator|new
name|BitVector
argument_list|(
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|deletedDocsDirty
operator|=
literal|true
expr_stmt|;
name|undeleteAll
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|deletedDocs
operator|.
name|getAndSet
argument_list|(
name|docNum
argument_list|)
condition|)
name|pendingDeleteCount
operator|++
expr_stmt|;
block|}
DECL|method|doUndeleteAll
specifier|protected
name|void
name|doUndeleteAll
parameter_list|()
block|{
name|deletedDocs
operator|=
literal|null
expr_stmt|;
name|deletedDocsDirty
operator|=
literal|false
expr_stmt|;
name|undeleteAll
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|files
name|List
name|files
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|ArrayList
argument_list|(
name|si
operator|.
name|files
argument_list|()
argument_list|)
return|;
block|}
DECL|method|terms
specifier|public
name|TermEnum
name|terms
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|tis
operator|.
name|terms
argument_list|()
return|;
block|}
DECL|method|terms
specifier|public
name|TermEnum
name|terms
parameter_list|(
name|Term
name|t
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|tis
operator|.
name|terms
argument_list|(
name|t
argument_list|)
return|;
block|}
DECL|method|getFieldInfos
name|FieldInfos
name|getFieldInfos
parameter_list|()
block|{
return|return
name|fieldInfos
return|;
block|}
comment|/**    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|document
specifier|public
name|Document
name|document
parameter_list|(
name|int
name|n
parameter_list|,
name|FieldSelector
name|fieldSelector
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|isDeleted
argument_list|(
name|n
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"attempt to access a deleted document"
argument_list|)
throw|;
return|return
name|getFieldsReader
argument_list|()
operator|.
name|doc
argument_list|(
name|n
argument_list|,
name|fieldSelector
argument_list|)
return|;
block|}
DECL|method|isDeleted
specifier|public
specifier|synchronized
name|boolean
name|isDeleted
parameter_list|(
name|int
name|n
parameter_list|)
block|{
return|return
operator|(
name|deletedDocs
operator|!=
literal|null
operator|&&
name|deletedDocs
operator|.
name|get
argument_list|(
name|n
argument_list|)
operator|)
return|;
block|}
DECL|method|termDocs
specifier|public
name|TermDocs
name|termDocs
parameter_list|(
name|Term
name|term
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|AllTermDocs
argument_list|(
name|this
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|termDocs
argument_list|(
name|term
argument_list|)
return|;
block|}
block|}
DECL|method|termDocs
specifier|public
name|TermDocs
name|termDocs
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
operator|new
name|SegmentTermDocs
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|termPositions
specifier|public
name|TermPositions
name|termPositions
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
operator|new
name|SegmentTermPositions
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|docFreq
specifier|public
name|int
name|docFreq
parameter_list|(
name|Term
name|t
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|TermInfo
name|ti
init|=
name|tis
operator|.
name|get
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|ti
operator|!=
literal|null
condition|)
return|return
name|ti
operator|.
name|docFreq
return|;
else|else
return|return
literal|0
return|;
block|}
DECL|method|numDocs
specifier|public
name|int
name|numDocs
parameter_list|()
block|{
comment|// Don't call ensureOpen() here (it could affect performance)
name|int
name|n
init|=
name|maxDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|deletedDocs
operator|!=
literal|null
condition|)
name|n
operator|-=
name|deletedDocs
operator|.
name|count
argument_list|()
expr_stmt|;
return|return
name|n
return|;
block|}
DECL|method|maxDoc
specifier|public
name|int
name|maxDoc
parameter_list|()
block|{
comment|// Don't call ensureOpen() here (it could affect performance)
return|return
name|si
operator|.
name|docCount
return|;
block|}
DECL|method|setTermInfosIndexDivisor
specifier|public
name|void
name|setTermInfosIndexDivisor
parameter_list|(
name|int
name|indexDivisor
parameter_list|)
throws|throws
name|IllegalStateException
block|{
name|tis
operator|.
name|setIndexDivisor
argument_list|(
name|indexDivisor
argument_list|)
expr_stmt|;
block|}
DECL|method|getTermInfosIndexDivisor
specifier|public
name|int
name|getTermInfosIndexDivisor
parameter_list|()
block|{
return|return
name|tis
operator|.
name|getIndexDivisor
argument_list|()
return|;
block|}
comment|/**    * @see IndexReader#getFieldNames(IndexReader.FieldOption fldOption)    */
DECL|method|getFieldNames
specifier|public
name|Collection
name|getFieldNames
parameter_list|(
name|IndexReader
operator|.
name|FieldOption
name|fieldOption
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|Set
name|fieldSet
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldInfos
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FieldInfo
name|fi
init|=
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|ALL
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|fi
operator|.
name|isIndexed
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|UNINDEXED
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fi
operator|.
name|omitTf
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|OMIT_TF
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fi
operator|.
name|storePayloads
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|STORES_PAYLOADS
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fi
operator|.
name|isIndexed
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|INDEXED
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fi
operator|.
name|isIndexed
operator|&&
name|fi
operator|.
name|storeTermVector
operator|==
literal|false
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|INDEXED_NO_TERMVECTOR
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fi
operator|.
name|storeTermVector
operator|==
literal|true
operator|&&
name|fi
operator|.
name|storePositionWithTermVector
operator|==
literal|false
operator|&&
name|fi
operator|.
name|storeOffsetWithTermVector
operator|==
literal|false
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|TERMVECTOR
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fi
operator|.
name|isIndexed
operator|&&
name|fi
operator|.
name|storeTermVector
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|INDEXED_WITH_TERMVECTOR
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fi
operator|.
name|storePositionWithTermVector
operator|&&
name|fi
operator|.
name|storeOffsetWithTermVector
operator|==
literal|false
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|TERMVECTOR_WITH_POSITION
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fi
operator|.
name|storeOffsetWithTermVector
operator|&&
name|fi
operator|.
name|storePositionWithTermVector
operator|==
literal|false
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|TERMVECTOR_WITH_OFFSET
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|fi
operator|.
name|storeOffsetWithTermVector
operator|&&
name|fi
operator|.
name|storePositionWithTermVector
operator|)
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|TERMVECTOR_WITH_POSITION_OFFSET
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fieldSet
return|;
block|}
DECL|method|hasNorms
specifier|public
specifier|synchronized
name|boolean
name|hasNorms
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|norms
operator|.
name|containsKey
argument_list|(
name|field
argument_list|)
return|;
block|}
DECL|method|createFakeNorms
specifier|static
name|byte
index|[]
name|createFakeNorms
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|byte
index|[]
name|ones
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|ones
argument_list|,
name|DefaultSimilarity
operator|.
name|encodeNorm
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ones
return|;
block|}
DECL|field|ones
specifier|private
name|byte
index|[]
name|ones
decl_stmt|;
DECL|method|fakeNorms
specifier|private
name|byte
index|[]
name|fakeNorms
parameter_list|()
block|{
if|if
condition|(
name|ones
operator|==
literal|null
condition|)
name|ones
operator|=
name|createFakeNorms
argument_list|(
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ones
return|;
block|}
comment|// can return null if norms aren't stored
DECL|method|getNorms
specifier|protected
specifier|synchronized
name|byte
index|[]
name|getNorms
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|Norm
name|norm
init|=
operator|(
name|Norm
operator|)
name|norms
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|norm
operator|==
literal|null
condition|)
return|return
literal|null
return|;
comment|// not indexed, or norms not stored
synchronized|synchronized
init|(
name|norm
init|)
block|{
if|if
condition|(
name|norm
operator|.
name|bytes
operator|==
literal|null
condition|)
block|{
comment|// value not yet read
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|maxDoc
argument_list|()
index|]
decl_stmt|;
name|norms
argument_list|(
name|field
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|norm
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
comment|// cache it
comment|// it's OK to close the underlying IndexInput as we have cached the
comment|// norms and will never read them again.
name|norm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|norm
operator|.
name|bytes
return|;
block|}
block|}
comment|// returns fake norms if norms aren't available
DECL|method|norms
specifier|public
specifier|synchronized
name|byte
index|[]
name|norms
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|getNorms
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
name|bytes
operator|=
name|fakeNorms
argument_list|()
expr_stmt|;
return|return
name|bytes
return|;
block|}
DECL|method|doSetNorm
specifier|protected
name|void
name|doSetNorm
parameter_list|(
name|int
name|doc
parameter_list|,
name|String
name|field
parameter_list|,
name|byte
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|Norm
name|norm
init|=
operator|(
name|Norm
operator|)
name|norms
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|norm
operator|==
literal|null
condition|)
comment|// not an indexed field
return|return;
name|norm
operator|.
name|dirty
operator|=
literal|true
expr_stmt|;
comment|// mark it dirty
name|normsDirty
operator|=
literal|true
expr_stmt|;
name|norms
argument_list|(
name|field
argument_list|)
index|[
name|doc
index|]
operator|=
name|value
expr_stmt|;
comment|// set the value
block|}
comment|/** Read norms into a pre-allocated array. */
DECL|method|norms
specifier|public
specifier|synchronized
name|void
name|norms
parameter_list|(
name|String
name|field
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|Norm
name|norm
init|=
operator|(
name|Norm
operator|)
name|norms
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|norm
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|fakeNorms
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|,
name|offset
argument_list|,
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
synchronized|synchronized
init|(
name|norm
init|)
block|{
if|if
condition|(
name|norm
operator|.
name|bytes
operator|!=
literal|null
condition|)
block|{
comment|// can copy from cache
name|System
operator|.
name|arraycopy
argument_list|(
name|norm
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|,
name|offset
argument_list|,
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Read from disk.  norm.in may be shared across  multiple norms and
comment|// should only be used in a synchronized context.
name|IndexInput
name|normStream
decl_stmt|;
if|if
condition|(
name|norm
operator|.
name|useSingleNormStream
condition|)
block|{
name|normStream
operator|=
name|singleNormStream
expr_stmt|;
block|}
else|else
block|{
name|normStream
operator|=
name|norm
operator|.
name|in
expr_stmt|;
block|}
name|normStream
operator|.
name|seek
argument_list|(
name|norm
operator|.
name|normSeek
argument_list|)
expr_stmt|;
name|normStream
operator|.
name|readBytes
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|openNorms
specifier|private
name|void
name|openNorms
parameter_list|(
name|Directory
name|cfsDir
parameter_list|,
name|int
name|readBufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|nextNormSeek
init|=
name|SegmentMerger
operator|.
name|NORMS_HEADER
operator|.
name|length
decl_stmt|;
comment|//skip header (header unused for now)
name|int
name|maxDoc
init|=
name|maxDoc
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldInfos
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FieldInfo
name|fi
init|=
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|norms
operator|.
name|containsKey
argument_list|(
name|fi
operator|.
name|name
argument_list|)
condition|)
block|{
comment|// in case this SegmentReader is being re-opened, we might be able to
comment|// reuse some norm instances and skip loading them here
continue|continue;
block|}
if|if
condition|(
name|fi
operator|.
name|isIndexed
operator|&&
operator|!
name|fi
operator|.
name|omitNorms
condition|)
block|{
name|Directory
name|d
init|=
name|directory
argument_list|()
decl_stmt|;
name|String
name|fileName
init|=
name|si
operator|.
name|getNormFileName
argument_list|(
name|fi
operator|.
name|number
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|si
operator|.
name|hasSeparateNorms
argument_list|(
name|fi
operator|.
name|number
argument_list|)
condition|)
block|{
name|d
operator|=
name|cfsDir
expr_stmt|;
block|}
comment|// singleNormFile means multiple norms share this file
name|boolean
name|singleNormFile
init|=
name|fileName
operator|.
name|endsWith
argument_list|(
literal|"."
operator|+
name|IndexFileNames
operator|.
name|NORMS_EXTENSION
argument_list|)
decl_stmt|;
name|IndexInput
name|normInput
init|=
literal|null
decl_stmt|;
name|long
name|normSeek
decl_stmt|;
if|if
condition|(
name|singleNormFile
condition|)
block|{
name|normSeek
operator|=
name|nextNormSeek
expr_stmt|;
if|if
condition|(
name|singleNormStream
operator|==
literal|null
condition|)
block|{
name|singleNormStream
operator|=
name|d
operator|.
name|openInput
argument_list|(
name|fileName
argument_list|,
name|readBufferSize
argument_list|)
expr_stmt|;
block|}
comment|// All norms in the .nrm file can share a single IndexInput since
comment|// they are only used in a synchronized context.
comment|// If this were to change in the future, a clone could be done here.
name|normInput
operator|=
name|singleNormStream
expr_stmt|;
block|}
else|else
block|{
name|normSeek
operator|=
literal|0
expr_stmt|;
name|normInput
operator|=
name|d
operator|.
name|openInput
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
name|norms
operator|.
name|put
argument_list|(
name|fi
operator|.
name|name
argument_list|,
operator|new
name|Norm
argument_list|(
name|normInput
argument_list|,
name|singleNormFile
argument_list|,
name|fi
operator|.
name|number
argument_list|,
name|normSeek
argument_list|)
argument_list|)
expr_stmt|;
name|nextNormSeek
operator|+=
name|maxDoc
expr_stmt|;
comment|// increment also if some norms are separate
block|}
block|}
block|}
comment|// for testing only
DECL|method|normsClosed
name|boolean
name|normsClosed
parameter_list|()
block|{
if|if
condition|(
name|singleNormStream
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Iterator
name|it
init|=
name|norms
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Norm
name|norm
init|=
operator|(
name|Norm
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|norm
operator|.
name|refCount
operator|>
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|// for testing only
DECL|method|normsClosed
name|boolean
name|normsClosed
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|Norm
name|norm
init|=
operator|(
name|Norm
operator|)
name|norms
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
name|norm
operator|.
name|refCount
operator|==
literal|0
return|;
block|}
comment|/**    * Create a clone from the initial TermVectorsReader and store it in the ThreadLocal.    * @return TermVectorsReader    */
DECL|method|getTermVectorsReader
specifier|private
name|TermVectorsReader
name|getTermVectorsReader
parameter_list|()
block|{
assert|assert
name|termVectorsReaderOrig
operator|!=
literal|null
assert|;
name|TermVectorsReader
name|tvReader
init|=
operator|(
name|TermVectorsReader
operator|)
name|termVectorsLocal
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|tvReader
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|tvReader
operator|=
operator|(
name|TermVectorsReader
operator|)
name|termVectorsReaderOrig
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|cnse
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
name|termVectorsLocal
operator|.
name|set
argument_list|(
name|tvReader
argument_list|)
expr_stmt|;
block|}
return|return
name|tvReader
return|;
block|}
comment|/** Return a term frequency vector for the specified document and field. The    *  vector returned contains term numbers and frequencies for all terms in    *  the specified field of this document, if the field had storeTermVector    *  flag set.  If the flag was not set, the method returns null.    * @throws IOException    */
DECL|method|getTermFreqVector
specifier|public
name|TermFreqVector
name|getTermFreqVector
parameter_list|(
name|int
name|docNumber
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check if this field is invalid or has no stored term vector
name|ensureOpen
argument_list|()
expr_stmt|;
name|FieldInfo
name|fi
init|=
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|==
literal|null
operator|||
operator|!
name|fi
operator|.
name|storeTermVector
operator|||
name|termVectorsReaderOrig
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|TermVectorsReader
name|termVectorsReader
init|=
name|getTermVectorsReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|termVectorsReader
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|termVectorsReader
operator|.
name|get
argument_list|(
name|docNumber
argument_list|,
name|field
argument_list|)
return|;
block|}
DECL|method|getTermFreqVector
specifier|public
name|void
name|getTermFreqVector
parameter_list|(
name|int
name|docNumber
parameter_list|,
name|String
name|field
parameter_list|,
name|TermVectorMapper
name|mapper
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|FieldInfo
name|fi
init|=
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|==
literal|null
operator|||
operator|!
name|fi
operator|.
name|storeTermVector
operator|||
name|termVectorsReaderOrig
operator|==
literal|null
condition|)
return|return;
name|TermVectorsReader
name|termVectorsReader
init|=
name|getTermVectorsReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|termVectorsReader
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|termVectorsReader
operator|.
name|get
argument_list|(
name|docNumber
argument_list|,
name|field
argument_list|,
name|mapper
argument_list|)
expr_stmt|;
block|}
DECL|method|getTermFreqVector
specifier|public
name|void
name|getTermFreqVector
parameter_list|(
name|int
name|docNumber
parameter_list|,
name|TermVectorMapper
name|mapper
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|termVectorsReaderOrig
operator|==
literal|null
condition|)
return|return;
name|TermVectorsReader
name|termVectorsReader
init|=
name|getTermVectorsReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|termVectorsReader
operator|==
literal|null
condition|)
return|return;
name|termVectorsReader
operator|.
name|get
argument_list|(
name|docNumber
argument_list|,
name|mapper
argument_list|)
expr_stmt|;
block|}
comment|/** Return an array of term frequency vectors for the specified document.    *  The array contains a vector for each vectorized field in the document.    *  Each vector vector contains term numbers and frequencies for all terms    *  in a given vectorized field.    *  If no such fields existed, the method returns null.    * @throws IOException    */
DECL|method|getTermFreqVectors
specifier|public
name|TermFreqVector
index|[]
name|getTermFreqVectors
parameter_list|(
name|int
name|docNumber
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|termVectorsReaderOrig
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|TermVectorsReader
name|termVectorsReader
init|=
name|getTermVectorsReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|termVectorsReader
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|termVectorsReader
operator|.
name|get
argument_list|(
name|docNumber
argument_list|)
return|;
block|}
comment|/** Returns the field infos of this segment */
DECL|method|fieldInfos
name|FieldInfos
name|fieldInfos
parameter_list|()
block|{
return|return
name|fieldInfos
return|;
block|}
comment|/**    * Return the name of the segment this reader is reading.    */
DECL|method|getSegmentName
name|String
name|getSegmentName
parameter_list|()
block|{
return|return
name|segment
return|;
block|}
comment|/**    * Return the SegmentInfo of the segment this reader is reading.    */
DECL|method|getSegmentInfo
name|SegmentInfo
name|getSegmentInfo
parameter_list|()
block|{
return|return
name|si
return|;
block|}
DECL|method|setSegmentInfo
name|void
name|setSegmentInfo
parameter_list|(
name|SegmentInfo
name|info
parameter_list|)
block|{
name|si
operator|=
name|info
expr_stmt|;
block|}
DECL|method|startCommit
name|void
name|startCommit
parameter_list|()
block|{
name|super
operator|.
name|startCommit
argument_list|()
expr_stmt|;
name|rollbackDeletedDocsDirty
operator|=
name|deletedDocsDirty
expr_stmt|;
name|rollbackNormsDirty
operator|=
name|normsDirty
expr_stmt|;
name|rollbackUndeleteAll
operator|=
name|undeleteAll
expr_stmt|;
name|rollbackPendingDeleteCount
operator|=
name|pendingDeleteCount
expr_stmt|;
name|Iterator
name|it
init|=
name|norms
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Norm
name|norm
init|=
operator|(
name|Norm
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|norm
operator|.
name|rollbackDirty
operator|=
name|norm
operator|.
name|dirty
expr_stmt|;
block|}
block|}
DECL|method|rollbackCommit
name|void
name|rollbackCommit
parameter_list|()
block|{
name|super
operator|.
name|rollbackCommit
argument_list|()
expr_stmt|;
name|deletedDocsDirty
operator|=
name|rollbackDeletedDocsDirty
expr_stmt|;
name|normsDirty
operator|=
name|rollbackNormsDirty
expr_stmt|;
name|undeleteAll
operator|=
name|rollbackUndeleteAll
expr_stmt|;
name|pendingDeleteCount
operator|=
name|rollbackPendingDeleteCount
expr_stmt|;
name|Iterator
name|it
init|=
name|norms
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Norm
name|norm
init|=
operator|(
name|Norm
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|norm
operator|.
name|dirty
operator|=
name|norm
operator|.
name|rollbackDirty
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
