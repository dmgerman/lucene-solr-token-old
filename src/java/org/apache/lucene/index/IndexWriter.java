begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Similarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Lock
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|LockObtainFailedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitVector
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_comment
comment|/**   An<code>IndexWriter</code> creates and maintains an index.<p>The<code>create</code> argument to the<a href="#IndexWriter(org.apache.lucene.store.Directory, org.apache.lucene.analysis.Analyzer, boolean)"><b>constructor</b></a>   determines whether a new index is created, or whether an existing index is   opened.  Note that you   can open an index with<code>create=true</code> even while readers are   using the index.  The old readers will continue to search   the "point in time" snapshot they had opened, and won't   see the newly created index until they re-open.  There are   also<a href="#IndexWriter(org.apache.lucene.store.Directory, org.apache.lucene.analysis.Analyzer)"><b>constructors</b></a>   with no<code>create</code> argument which   will create a new index if there is not already an index at the   provided path and otherwise open the existing index.</p><p>In either case, documents are added with<a   href="#addDocument(org.apache.lucene.document.Document)"><b>addDocument</b></a>   and removed with<a   href="#deleteDocuments(org.apache.lucene.index.Term)"><b>deleteDocuments</b></a>.   A document can be updated with<a href="#updateDocument(org.apache.lucene.index.Term, org.apache.lucene.document.Document)"><b>updateDocument</b></a>    (which just deletes and then adds the entire document).   When finished adding, deleting and updating documents,<a href="#close()"><b>close</b></a> should be called.</p><p>These changes are buffered in memory and periodically   flushed to the {@link Directory} (during the above method   calls).  A flush is triggered when there are enough   buffered deletes (see {@link #setMaxBufferedDeleteTerms})   or enough added documents since the last flush, whichever   is sooner.  For the added documents, flushing is triggered   either by RAM usage of the documents (see {@link   #setRAMBufferSizeMB}) or the number of added documents.   The default is to flush when RAM usage hits 16 MB.  For   best indexing speed you should flush by RAM usage with a   large RAM buffer.  You can also force a flush by calling   {@link #flush}.  When a flush occurs, both pending deletes   and added documents are flushed to the index.  A flush may   also trigger one or more segment merges which by default   run with a background thread so as not to block the   addDocument calls (see<a href="#mergePolicy">below</a>   for changing the {@link MergeScheduler}).</p><a name="autoCommit"></a><p>The optional<code>autoCommit</code> argument to the<a href="#IndexWriter(org.apache.lucene.store.Directory, boolean, org.apache.lucene.analysis.Analyzer)"><b>constructors</b></a>   controls visibility of the changes to {@link IndexReader} instances reading the same index.   When this is<code>false</code>, changes are not   visible until {@link #close()} is called.   Note that changes will still be flushed to the   {@link org.apache.lucene.store.Directory} as new files,   but are not committed (no new<code>segments_N</code> file   is written referencing the new files) until {@link #close} is   called.  If something goes terribly wrong (for example the   JVM crashes) before {@link #close()}, then   the index will reflect none of the changes made (it will   remain in its starting state).   You can also call {@link #abort()}, which closes the writer without committing any   changes, and removes any index   files that had been flushed but are now unreferenced.   This mode is useful for preventing readers from refreshing   at a bad time (for example after you've done all your   deletes but before you've done your adds).   It can also be used to implement simple single-writer   transactional semantics ("all or none").</p><p>When<code>autoCommit</code> is<code>true</code> then   every flush is also a commit ({@link IndexReader}   instances will see each flush as changes to the index).   This is the default, to match the behavior before 2.2.   When running in this mode, be careful not to refresh your   readers while optimize or segment merges are taking place   as this can tie up substantial disk space.</p><p>Regardless of<code>autoCommit</code>, an {@link   IndexReader} or {@link org.apache.lucene.search.IndexSearcher} will only see the   index as of the "point in time" that it was opened.  Any   changes committed to the index after the reader was opened   are not visible until the reader is re-opened.</p><p>If an index will not have more documents added for a while and optimal search   performance is desired, then the<a href="#optimize()"><b>optimize</b></a>   method should be called before the index is closed.</p><p>Opening an<code>IndexWriter</code> creates a lock file for the directory in use. Trying to open   another<code>IndexWriter</code> on the same directory will lead to a   {@link LockObtainFailedException}. The {@link LockObtainFailedException}   is also thrown if an IndexReader on the same directory is used to delete documents   from the index.</p><a name="deletionPolicy"></a><p>Expert:<code>IndexWriter</code> allows an optional   {@link IndexDeletionPolicy} implementation to be   specified.  You can use this to control when prior commits   are deleted from the index.  The default policy is {@link   KeepOnlyLastCommitDeletionPolicy} which removes all prior   commits as soon as a new commit is done (this matches   behavior before 2.2).  Creating your own policy can allow   you to explicitly keep previous "point in time" commits   alive in the index for some time, to allow readers to   refresh to the new commit without having the old commit   deleted out from under them.  This is necessary on   filesystems like NFS that do not support "delete on last   close" semantics, which Lucene's "point in time" search   normally relies on.</p><a name="mergePolicy"></a><p>Expert:<code>IndexWriter</code> allows you to separately change   the {@link MergePolicy} and the {@link MergeScheduler}.   The {@link MergePolicy} is invoked whenever there are   changes to the segments in the index.  Its role is to   select which merges to do, if any, and return a {@link   MergePolicy.MergeSpecification} describing the merges.  It   also selects merges to do for optimize().  (The default is   {@link LogByteSizeMergePolicy}.  Then, the {@link   MergeScheduler} is invoked with the requested merges and   it decides when and how to run the merges.  The default is   {@link ConcurrentMergeScheduler}.</p> */
end_comment
begin_comment
comment|/*  * Clarification: Check Points (and commits)  * Being able to set autoCommit=false allows IndexWriter to flush and   * write new index files to the directory without writing a new segments_N  * file which references these new files. It also means that the state of   * the in memory SegmentInfos object is different than the most recent  * segments_N file written to the directory.  *   * Each time the SegmentInfos is changed, and matches the (possibly   * modified) directory files, we have a new "check point".   * If the modified/new SegmentInfos is written to disk - as a new   * (generation of) segments_N file - this check point is also an   * IndexCommitPoint.  *   * With autoCommit=true, every checkPoint is also a CommitPoint.  * With autoCommit=false, some checkPoints may not be commits.  *   * A new checkpoint always replaces the previous checkpoint and   * becomes the new "front" of the index. This allows the IndexFileDeleter   * to delete files that are referenced only by stale checkpoints.  * (files that were created since the last commit, but are no longer  * referenced by the "front" of the index). For this, IndexFileDeleter   * keeps track of the last non commit checkpoint.  */
end_comment
begin_class
DECL|class|IndexWriter
specifier|public
class|class
name|IndexWriter
block|{
comment|/**    * Default value for the write lock timeout (1,000).    * @see #setDefaultWriteLockTimeout    */
DECL|field|WRITE_LOCK_TIMEOUT
specifier|public
specifier|static
name|long
name|WRITE_LOCK_TIMEOUT
init|=
literal|1000
decl_stmt|;
DECL|field|writeLockTimeout
specifier|private
name|long
name|writeLockTimeout
init|=
name|WRITE_LOCK_TIMEOUT
decl_stmt|;
comment|/**    * Name of the write lock in the index.    */
DECL|field|WRITE_LOCK_NAME
specifier|public
specifier|static
specifier|final
name|String
name|WRITE_LOCK_NAME
init|=
literal|"write.lock"
decl_stmt|;
comment|/**    * @deprecated    * @see LogMergePolicy#DEFAULT_MERGE_FACTOR    */
DECL|field|DEFAULT_MERGE_FACTOR
specifier|public
specifier|final
specifier|static
name|int
name|DEFAULT_MERGE_FACTOR
init|=
name|LogMergePolicy
operator|.
name|DEFAULT_MERGE_FACTOR
decl_stmt|;
comment|/**    * Value to denote a flush trigger is disabled    */
DECL|field|DISABLE_AUTO_FLUSH
specifier|public
specifier|final
specifier|static
name|int
name|DISABLE_AUTO_FLUSH
init|=
operator|-
literal|1
decl_stmt|;
comment|/**    * Disabled by default (because IndexWriter flushes by RAM usage    * by default). Change using {@link #setMaxBufferedDocs(int)}.    */
DECL|field|DEFAULT_MAX_BUFFERED_DOCS
specifier|public
specifier|final
specifier|static
name|int
name|DEFAULT_MAX_BUFFERED_DOCS
init|=
name|DISABLE_AUTO_FLUSH
decl_stmt|;
comment|/**    * Default value is 16 MB (which means flush when buffered    * docs consume 16 MB RAM).  Change using {@link #setRAMBufferSizeMB}.    */
DECL|field|DEFAULT_RAM_BUFFER_SIZE_MB
specifier|public
specifier|final
specifier|static
name|double
name|DEFAULT_RAM_BUFFER_SIZE_MB
init|=
literal|16.0
decl_stmt|;
comment|/**    * Disabled by default (because IndexWriter flushes by RAM usage    * by default). Change using {@link #setMaxBufferedDeleteTerms(int)}.    */
DECL|field|DEFAULT_MAX_BUFFERED_DELETE_TERMS
specifier|public
specifier|final
specifier|static
name|int
name|DEFAULT_MAX_BUFFERED_DELETE_TERMS
init|=
name|DISABLE_AUTO_FLUSH
decl_stmt|;
comment|/**    * @deprecated    * @see LogDocMergePolicy#DEFAULT_MAX_MERGE_DOCS    */
DECL|field|DEFAULT_MAX_MERGE_DOCS
specifier|public
specifier|final
specifier|static
name|int
name|DEFAULT_MAX_MERGE_DOCS
init|=
name|LogDocMergePolicy
operator|.
name|DEFAULT_MAX_MERGE_DOCS
decl_stmt|;
comment|/**    * Default value is 10,000. Change using {@link #setMaxFieldLength(int)}.    */
DECL|field|DEFAULT_MAX_FIELD_LENGTH
specifier|public
specifier|final
specifier|static
name|int
name|DEFAULT_MAX_FIELD_LENGTH
init|=
literal|10000
decl_stmt|;
comment|/**    * Default value is 128. Change using {@link #setTermIndexInterval(int)}.    */
DECL|field|DEFAULT_TERM_INDEX_INTERVAL
specifier|public
specifier|final
specifier|static
name|int
name|DEFAULT_TERM_INDEX_INTERVAL
init|=
literal|128
decl_stmt|;
comment|/**    * Absolute hard maximum length for a term.  If a term    * arrives from the analyzer longer than this length, it    * is skipped and a message is printed to infoStream, if    * set (see {@link #setInfoStream}).    */
DECL|field|MAX_TERM_LENGTH
specifier|public
specifier|final
specifier|static
name|int
name|MAX_TERM_LENGTH
init|=
name|DocumentsWriter
operator|.
name|MAX_TERM_LENGTH
decl_stmt|;
comment|// The normal read buffer size defaults to 1024, but
comment|// increasing this during merging seems to yield
comment|// performance gains.  However we don't want to increase
comment|// it too much because there are quite a few
comment|// BufferedIndexInputs created during merging.  See
comment|// LUCENE-888 for details.
DECL|field|MERGE_READ_BUFFER_SIZE
specifier|private
specifier|final
specifier|static
name|int
name|MERGE_READ_BUFFER_SIZE
init|=
literal|4096
decl_stmt|;
comment|// Used for printing messages
DECL|field|MESSAGE_ID_LOCK
specifier|private
specifier|static
name|Object
name|MESSAGE_ID_LOCK
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|MESSAGE_ID
specifier|private
specifier|static
name|int
name|MESSAGE_ID
init|=
literal|0
decl_stmt|;
DECL|field|messageID
specifier|private
name|int
name|messageID
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|directory
specifier|private
name|Directory
name|directory
decl_stmt|;
comment|// where this index resides
DECL|field|analyzer
specifier|private
name|Analyzer
name|analyzer
decl_stmt|;
comment|// how to analyze text
DECL|field|similarity
specifier|private
name|Similarity
name|similarity
init|=
name|Similarity
operator|.
name|getDefault
argument_list|()
decl_stmt|;
comment|// how to normalize
DECL|field|commitPending
specifier|private
name|boolean
name|commitPending
decl_stmt|;
comment|// true if segmentInfos has changes not yet committed
DECL|field|rollbackSegmentInfos
specifier|private
name|SegmentInfos
name|rollbackSegmentInfos
decl_stmt|;
comment|// segmentInfos we will fallback to if the commit fails
DECL|field|localRollbackSegmentInfos
specifier|private
name|SegmentInfos
name|localRollbackSegmentInfos
decl_stmt|;
comment|// segmentInfos we will fallback to if the commit fails
DECL|field|localAutoCommit
specifier|private
name|boolean
name|localAutoCommit
decl_stmt|;
comment|// saved autoCommit during local transaction
DECL|field|autoCommit
specifier|private
name|boolean
name|autoCommit
init|=
literal|true
decl_stmt|;
comment|// false if we should commit only on close
DECL|field|segmentInfos
specifier|private
name|SegmentInfos
name|segmentInfos
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
comment|// the segments
DECL|field|docWriter
specifier|private
name|DocumentsWriter
name|docWriter
decl_stmt|;
DECL|field|deleter
specifier|private
name|IndexFileDeleter
name|deleter
decl_stmt|;
DECL|field|segmentsToOptimize
specifier|private
name|Set
name|segmentsToOptimize
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
comment|// used by optimize to note those needing optimization
DECL|field|writeLock
specifier|private
name|Lock
name|writeLock
decl_stmt|;
DECL|field|termIndexInterval
specifier|private
name|int
name|termIndexInterval
init|=
name|DEFAULT_TERM_INDEX_INTERVAL
decl_stmt|;
DECL|field|closeDir
specifier|private
name|boolean
name|closeDir
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
decl_stmt|;
DECL|field|closing
specifier|private
name|boolean
name|closing
decl_stmt|;
comment|// Holds all SegmentInfo instances currently involved in
comment|// merges
DECL|field|mergingSegments
specifier|private
name|HashSet
name|mergingSegments
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
DECL|field|mergePolicy
specifier|private
name|MergePolicy
name|mergePolicy
init|=
operator|new
name|LogByteSizeMergePolicy
argument_list|()
decl_stmt|;
DECL|field|mergeScheduler
specifier|private
name|MergeScheduler
name|mergeScheduler
init|=
operator|new
name|ConcurrentMergeScheduler
argument_list|()
decl_stmt|;
DECL|field|pendingMerges
specifier|private
name|LinkedList
name|pendingMerges
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
DECL|field|runningMerges
specifier|private
name|Set
name|runningMerges
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
DECL|field|mergeExceptions
specifier|private
name|List
name|mergeExceptions
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
DECL|field|mergeGen
specifier|private
name|long
name|mergeGen
decl_stmt|;
DECL|field|stopMerges
specifier|private
name|boolean
name|stopMerges
decl_stmt|;
comment|/**    * Used internally to throw an {@link    * AlreadyClosedException} if this IndexWriter has been    * closed.    * @throws AlreadyClosedException if this IndexWriter is    */
DECL|method|ensureOpen
specifier|protected
specifier|final
name|void
name|ensureOpen
parameter_list|()
throws|throws
name|AlreadyClosedException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|AlreadyClosedException
argument_list|(
literal|"this IndexWriter is closed"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Prints a message to the infoStream (if non-null),    * prefixed with the identifying information for this    * writer and the thread that's calling it.    */
DECL|method|message
specifier|public
name|void
name|message
parameter_list|(
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|infoStream
operator|.
name|println
argument_list|(
literal|"IW "
operator|+
name|messageID
operator|+
literal|" ["
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"]: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|setMessageID
specifier|private
specifier|synchronized
name|void
name|setMessageID
parameter_list|()
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
operator|&&
name|messageID
operator|==
operator|-
literal|1
condition|)
block|{
synchronized|synchronized
init|(
name|MESSAGE_ID_LOCK
init|)
block|{
name|messageID
operator|=
name|MESSAGE_ID
operator|++
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Casts current mergePolicy to LogMergePolicy, and throws    * an exception if the mergePolicy is not a LogMergePolicy.    */
DECL|method|getLogMergePolicy
specifier|private
name|LogMergePolicy
name|getLogMergePolicy
parameter_list|()
block|{
if|if
condition|(
name|mergePolicy
operator|instanceof
name|LogMergePolicy
condition|)
return|return
operator|(
name|LogMergePolicy
operator|)
name|mergePolicy
return|;
else|else
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"this method can only be called when the merge policy is the default LogMergePolicy"
argument_list|)
throw|;
block|}
comment|/**<p>Get the current setting of whether newly flushed    *  segments will use the compound file format.  Note that    *  this just returns the value previously set with    *  setUseCompoundFile(boolean), or the default value    *  (true).  You cannot use this to query the status of    *  previously flushed segments.</p>    *    *<p>Note that this method is a convenience method: it    *  just calls mergePolicy.getUseCompoundFile as long as    *  mergePolicy is an instance of {@link LogMergePolicy}.    *  Otherwise an IllegalArgumentException is thrown.</p>    *    *  @see #setUseCompoundFile(boolean)    */
DECL|method|getUseCompoundFile
specifier|public
name|boolean
name|getUseCompoundFile
parameter_list|()
block|{
return|return
name|getLogMergePolicy
argument_list|()
operator|.
name|getUseCompoundFile
argument_list|()
return|;
block|}
comment|/**<p>Setting to turn on usage of a compound file. When on,    *  multiple files for each segment are merged into a    *  single file when a new segment is flushed.</p>    *    *<p>Note that this method is a convenience method: it    *  just calls mergePolicy.setUseCompoundFile as long as    *  mergePolicy is an instance of {@link LogMergePolicy}.    *  Otherwise an IllegalArgumentException is thrown.</p>    */
DECL|method|setUseCompoundFile
specifier|public
name|void
name|setUseCompoundFile
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|getLogMergePolicy
argument_list|()
operator|.
name|setUseCompoundFile
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|getLogMergePolicy
argument_list|()
operator|.
name|setUseCompoundDocStore
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|/** Expert: Set the Similarity implementation used by this IndexWriter.    *    * @see Similarity#setDefault(Similarity)    */
DECL|method|setSimilarity
specifier|public
name|void
name|setSimilarity
parameter_list|(
name|Similarity
name|similarity
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|this
operator|.
name|similarity
operator|=
name|similarity
expr_stmt|;
block|}
comment|/** Expert: Return the Similarity implementation used by this IndexWriter.    *    *<p>This defaults to the current value of {@link Similarity#getDefault()}.    */
DECL|method|getSimilarity
specifier|public
name|Similarity
name|getSimilarity
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|similarity
return|;
block|}
comment|/** Expert: Set the interval between indexed terms.  Large values cause less    * memory to be used by IndexReader, but slow random-access to terms.  Small    * values cause more memory to be used by an IndexReader, and speed    * random-access to terms.    *    * This parameter determines the amount of computation required per query    * term, regardless of the number of documents that contain that term.  In    * particular, it is the maximum number of other terms that must be    * scanned before a term is located and its frequency and position information    * may be processed.  In a large index with user-entered query terms, query    * processing time is likely to be dominated not by term lookup but rather    * by the processing of frequency and positional data.  In a small index    * or when many uncommon query terms are generated (e.g., by wildcard    * queries) term lookup may become a dominant cost.    *    * In particular,<code>numUniqueTerms/interval</code> terms are read into    * memory by an IndexReader, and, on average,<code>interval/2</code> terms    * must be scanned for each random term access.    *    * @see #DEFAULT_TERM_INDEX_INTERVAL    */
DECL|method|setTermIndexInterval
specifier|public
name|void
name|setTermIndexInterval
parameter_list|(
name|int
name|interval
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|this
operator|.
name|termIndexInterval
operator|=
name|interval
expr_stmt|;
block|}
comment|/** Expert: Return the interval between indexed terms.    *    * @see #setTermIndexInterval(int)    */
DECL|method|getTermIndexInterval
specifier|public
name|int
name|getTermIndexInterval
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|termIndexInterval
return|;
block|}
comment|/**    * Constructs an IndexWriter for the index in<code>path</code>.    * Text will be analyzed with<code>a</code>.  If<code>create</code>    * is true, then a new, empty index will be created in    *<code>path</code>, replacing the index already there, if any.    *    * @param path the path to the index directory    * @param a the analyzer to use    * @param create<code>true</code> to create the index or overwrite    *  the existing one;<code>false</code> to append to the existing    *  index    * @throws CorruptIndexException if the index is corrupt    * @throws LockObtainFailedException if another writer    *  has this index open (<code>write.lock</code> could not    *  be obtained)    * @throws IOException if the directory cannot be read/written to, or    *  if it does not exist and<code>create</code> is    *<code>false</code> or if there is any other low-level    *  IO error    */
DECL|method|IndexWriter
specifier|public
name|IndexWriter
parameter_list|(
name|String
name|path
parameter_list|,
name|Analyzer
name|a
parameter_list|,
name|boolean
name|create
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|LockObtainFailedException
throws|,
name|IOException
block|{
name|init
argument_list|(
name|FSDirectory
operator|.
name|getDirectory
argument_list|(
name|path
argument_list|)
argument_list|,
name|a
argument_list|,
name|create
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs an IndexWriter for the index in<code>path</code>.    * Text will be analyzed with<code>a</code>.  If<code>create</code>    * is true, then a new, empty index will be created in    *<code>path</code>, replacing the index already there, if any.    *    * @param path the path to the index directory    * @param a the analyzer to use    * @param create<code>true</code> to create the index or overwrite    *  the existing one;<code>false</code> to append to the existing    *  index    * @throws CorruptIndexException if the index is corrupt    * @throws LockObtainFailedException if another writer    *  has this index open (<code>write.lock</code> could not    *  be obtained)    * @throws IOException if the directory cannot be read/written to, or    *  if it does not exist and<code>create</code> is    *<code>false</code> or if there is any other low-level    *  IO error    */
DECL|method|IndexWriter
specifier|public
name|IndexWriter
parameter_list|(
name|File
name|path
parameter_list|,
name|Analyzer
name|a
parameter_list|,
name|boolean
name|create
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|LockObtainFailedException
throws|,
name|IOException
block|{
name|init
argument_list|(
name|FSDirectory
operator|.
name|getDirectory
argument_list|(
name|path
argument_list|)
argument_list|,
name|a
argument_list|,
name|create
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs an IndexWriter for the index in<code>d</code>.    * Text will be analyzed with<code>a</code>.  If<code>create</code>    * is true, then a new, empty index will be created in    *<code>d</code>, replacing the index already there, if any.    *    * @param d the index directory    * @param a the analyzer to use    * @param create<code>true</code> to create the index or overwrite    *  the existing one;<code>false</code> to append to the existing    *  index    * @throws CorruptIndexException if the index is corrupt    * @throws LockObtainFailedException if another writer    *  has this index open (<code>write.lock</code> could not    *  be obtained)    * @throws IOException if the directory cannot be read/written to, or    *  if it does not exist and<code>create</code> is    *<code>false</code> or if there is any other low-level    *  IO error    */
DECL|method|IndexWriter
specifier|public
name|IndexWriter
parameter_list|(
name|Directory
name|d
parameter_list|,
name|Analyzer
name|a
parameter_list|,
name|boolean
name|create
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|LockObtainFailedException
throws|,
name|IOException
block|{
name|init
argument_list|(
name|d
argument_list|,
name|a
argument_list|,
name|create
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs an IndexWriter for the index in    *<code>path</code>, first creating it if it does not    * already exist.  Text will be analyzed with    *<code>a</code>.    *    * @param path the path to the index directory    * @param a the analyzer to use    * @throws CorruptIndexException if the index is corrupt    * @throws LockObtainFailedException if another writer    *  has this index open (<code>write.lock</code> could not    *  be obtained)    * @throws IOException if the directory cannot be    *  read/written to or if there is any other low-level    *  IO error    */
DECL|method|IndexWriter
specifier|public
name|IndexWriter
parameter_list|(
name|String
name|path
parameter_list|,
name|Analyzer
name|a
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|LockObtainFailedException
throws|,
name|IOException
block|{
name|init
argument_list|(
name|FSDirectory
operator|.
name|getDirectory
argument_list|(
name|path
argument_list|)
argument_list|,
name|a
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs an IndexWriter for the index in    *<code>path</code>, first creating it if it does not    * already exist.  Text will be analyzed with    *<code>a</code>.    *    * @param path the path to the index directory    * @param a the analyzer to use    * @throws CorruptIndexException if the index is corrupt    * @throws LockObtainFailedException if another writer    *  has this index open (<code>write.lock</code> could not    *  be obtained)    * @throws IOException if the directory cannot be    *  read/written to or if there is any other low-level    *  IO error    */
DECL|method|IndexWriter
specifier|public
name|IndexWriter
parameter_list|(
name|File
name|path
parameter_list|,
name|Analyzer
name|a
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|LockObtainFailedException
throws|,
name|IOException
block|{
name|init
argument_list|(
name|FSDirectory
operator|.
name|getDirectory
argument_list|(
name|path
argument_list|)
argument_list|,
name|a
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs an IndexWriter for the index in    *<code>d</code>, first creating it if it does not    * already exist.  Text will be analyzed with    *<code>a</code>.    *    * @param d the index directory    * @param a the analyzer to use    * @throws CorruptIndexException if the index is corrupt    * @throws LockObtainFailedException if another writer    *  has this index open (<code>write.lock</code> could not    *  be obtained)    * @throws IOException if the directory cannot be    *  read/written to or if there is any other low-level    *  IO error    */
DECL|method|IndexWriter
specifier|public
name|IndexWriter
parameter_list|(
name|Directory
name|d
parameter_list|,
name|Analyzer
name|a
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|LockObtainFailedException
throws|,
name|IOException
block|{
name|init
argument_list|(
name|d
argument_list|,
name|a
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs an IndexWriter for the index in    *<code>d</code>, first creating it if it does not    * already exist.  Text will be analyzed with    *<code>a</code>.    *    * @param d the index directory    * @param autoCommit see<a href="#autoCommit">above</a>    * @param a the analyzer to use    * @throws CorruptIndexException if the index is corrupt    * @throws LockObtainFailedException if another writer    *  has this index open (<code>write.lock</code> could not    *  be obtained)    * @throws IOException if the directory cannot be    *  read/written to or if there is any other low-level    *  IO error    */
DECL|method|IndexWriter
specifier|public
name|IndexWriter
parameter_list|(
name|Directory
name|d
parameter_list|,
name|boolean
name|autoCommit
parameter_list|,
name|Analyzer
name|a
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|LockObtainFailedException
throws|,
name|IOException
block|{
name|init
argument_list|(
name|d
argument_list|,
name|a
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|autoCommit
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs an IndexWriter for the index in<code>d</code>.    * Text will be analyzed with<code>a</code>.  If<code>create</code>    * is true, then a new, empty index will be created in    *<code>d</code>, replacing the index already there, if any.    *    * @param d the index directory    * @param autoCommit see<a href="#autoCommit">above</a>    * @param a the analyzer to use    * @param create<code>true</code> to create the index or overwrite    *  the existing one;<code>false</code> to append to the existing    *  index    * @throws CorruptIndexException if the index is corrupt    * @throws LockObtainFailedException if another writer    *  has this index open (<code>write.lock</code> could not    *  be obtained)    * @throws IOException if the directory cannot be read/written to, or    *  if it does not exist and<code>create</code> is    *<code>false</code> or if there is any other low-level    *  IO error    */
DECL|method|IndexWriter
specifier|public
name|IndexWriter
parameter_list|(
name|Directory
name|d
parameter_list|,
name|boolean
name|autoCommit
parameter_list|,
name|Analyzer
name|a
parameter_list|,
name|boolean
name|create
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|LockObtainFailedException
throws|,
name|IOException
block|{
name|init
argument_list|(
name|d
argument_list|,
name|a
argument_list|,
name|create
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|autoCommit
argument_list|)
expr_stmt|;
block|}
comment|/**    * Expert: constructs an IndexWriter with a custom {@link    * IndexDeletionPolicy}, for the index in<code>d</code>,    * first creating it if it does not already exist.  Text    * will be analyzed with<code>a</code>.    *    * @param d the index directory    * @param autoCommit see<a href="#autoCommit">above</a>    * @param a the analyzer to use    * @param deletionPolicy see<a href="#deletionPolicy">above</a>    * @throws CorruptIndexException if the index is corrupt    * @throws LockObtainFailedException if another writer    *  has this index open (<code>write.lock</code> could not    *  be obtained)    * @throws IOException if the directory cannot be    *  read/written to or if there is any other low-level    *  IO error    */
DECL|method|IndexWriter
specifier|public
name|IndexWriter
parameter_list|(
name|Directory
name|d
parameter_list|,
name|boolean
name|autoCommit
parameter_list|,
name|Analyzer
name|a
parameter_list|,
name|IndexDeletionPolicy
name|deletionPolicy
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|LockObtainFailedException
throws|,
name|IOException
block|{
name|init
argument_list|(
name|d
argument_list|,
name|a
argument_list|,
literal|false
argument_list|,
name|deletionPolicy
argument_list|,
name|autoCommit
argument_list|)
expr_stmt|;
block|}
comment|/**    * Expert: constructs an IndexWriter with a custom {@link    * IndexDeletionPolicy}, for the index in<code>d</code>.    * Text will be analyzed with<code>a</code>.  If    *<code>create</code> is true, then a new, empty index    * will be created in<code>d</code>, replacing the index    * already there, if any.    *    * @param d the index directory    * @param autoCommit see<a href="#autoCommit">above</a>    * @param a the analyzer to use    * @param create<code>true</code> to create the index or overwrite    *  the existing one;<code>false</code> to append to the existing    *  index    * @param deletionPolicy see<a href="#deletionPolicy">above</a>    * @throws CorruptIndexException if the index is corrupt    * @throws LockObtainFailedException if another writer    *  has this index open (<code>write.lock</code> could not    *  be obtained)    * @throws IOException if the directory cannot be read/written to, or    *  if it does not exist and<code>create</code> is    *<code>false</code> or if there is any other low-level    *  IO error    */
DECL|method|IndexWriter
specifier|public
name|IndexWriter
parameter_list|(
name|Directory
name|d
parameter_list|,
name|boolean
name|autoCommit
parameter_list|,
name|Analyzer
name|a
parameter_list|,
name|boolean
name|create
parameter_list|,
name|IndexDeletionPolicy
name|deletionPolicy
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|LockObtainFailedException
throws|,
name|IOException
block|{
name|init
argument_list|(
name|d
argument_list|,
name|a
argument_list|,
name|create
argument_list|,
literal|false
argument_list|,
name|deletionPolicy
argument_list|,
name|autoCommit
argument_list|)
expr_stmt|;
block|}
DECL|method|init
specifier|private
name|void
name|init
parameter_list|(
name|Directory
name|d
parameter_list|,
name|Analyzer
name|a
parameter_list|,
name|boolean
name|closeDir
parameter_list|,
name|IndexDeletionPolicy
name|deletionPolicy
parameter_list|,
name|boolean
name|autoCommit
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|LockObtainFailedException
throws|,
name|IOException
block|{
if|if
condition|(
name|IndexReader
operator|.
name|indexExists
argument_list|(
name|d
argument_list|)
condition|)
block|{
name|init
argument_list|(
name|d
argument_list|,
name|a
argument_list|,
literal|false
argument_list|,
name|closeDir
argument_list|,
name|deletionPolicy
argument_list|,
name|autoCommit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|init
argument_list|(
name|d
argument_list|,
name|a
argument_list|,
literal|true
argument_list|,
name|closeDir
argument_list|,
name|deletionPolicy
argument_list|,
name|autoCommit
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|init
specifier|private
name|void
name|init
parameter_list|(
name|Directory
name|d
parameter_list|,
name|Analyzer
name|a
parameter_list|,
specifier|final
name|boolean
name|create
parameter_list|,
name|boolean
name|closeDir
parameter_list|,
name|IndexDeletionPolicy
name|deletionPolicy
parameter_list|,
name|boolean
name|autoCommit
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|LockObtainFailedException
throws|,
name|IOException
block|{
name|this
operator|.
name|closeDir
operator|=
name|closeDir
expr_stmt|;
name|directory
operator|=
name|d
expr_stmt|;
name|analyzer
operator|=
name|a
expr_stmt|;
name|this
operator|.
name|infoStream
operator|=
name|defaultInfoStream
expr_stmt|;
name|setMessageID
argument_list|()
expr_stmt|;
if|if
condition|(
name|create
condition|)
block|{
comment|// Clear the write lock in case it's leftover:
name|directory
operator|.
name|clearLock
argument_list|(
name|IndexWriter
operator|.
name|WRITE_LOCK_NAME
argument_list|)
expr_stmt|;
block|}
name|Lock
name|writeLock
init|=
name|directory
operator|.
name|makeLock
argument_list|(
name|IndexWriter
operator|.
name|WRITE_LOCK_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|writeLock
operator|.
name|obtain
argument_list|(
name|writeLockTimeout
argument_list|)
condition|)
comment|// obtain write lock
throw|throw
operator|new
name|LockObtainFailedException
argument_list|(
literal|"Index locked for write: "
operator|+
name|writeLock
argument_list|)
throw|;
name|this
operator|.
name|writeLock
operator|=
name|writeLock
expr_stmt|;
comment|// save it
try|try
block|{
if|if
condition|(
name|create
condition|)
block|{
comment|// Try to read first.  This is to allow create
comment|// against an index that's currently open for
comment|// searching.  In this case we write the next
comment|// segments_N file with no segments:
try|try
block|{
name|segmentInfos
operator|.
name|read
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|segmentInfos
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Likely this means it's a fresh directory
block|}
name|segmentInfos
operator|.
name|write
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|segmentInfos
operator|.
name|read
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|autoCommit
operator|=
name|autoCommit
expr_stmt|;
if|if
condition|(
operator|!
name|autoCommit
condition|)
block|{
name|rollbackSegmentInfos
operator|=
operator|(
name|SegmentInfos
operator|)
name|segmentInfos
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
name|docWriter
operator|=
operator|new
name|DocumentsWriter
argument_list|(
name|directory
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|docWriter
operator|.
name|setInfoStream
argument_list|(
name|infoStream
argument_list|)
expr_stmt|;
comment|// Default deleter (for backwards compatibility) is
comment|// KeepOnlyLastCommitDeleter:
name|deleter
operator|=
operator|new
name|IndexFileDeleter
argument_list|(
name|directory
argument_list|,
name|deletionPolicy
operator|==
literal|null
condition|?
operator|new
name|KeepOnlyLastCommitDeletionPolicy
argument_list|()
else|:
name|deletionPolicy
argument_list|,
name|segmentInfos
argument_list|,
name|infoStream
argument_list|,
name|docWriter
argument_list|)
expr_stmt|;
name|pushMaxBufferedDocs
argument_list|()
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|message
argument_list|(
literal|"init: create="
operator|+
name|create
argument_list|)
expr_stmt|;
name|messageState
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|this
operator|.
name|writeLock
operator|.
name|release
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeLock
operator|=
literal|null
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Expert: set the merge policy used by this writer.    */
DECL|method|setMergePolicy
specifier|public
name|void
name|setMergePolicy
parameter_list|(
name|MergePolicy
name|mp
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|mp
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"MergePolicy must be non-null"
argument_list|)
throw|;
if|if
condition|(
name|mergePolicy
operator|!=
name|mp
condition|)
name|mergePolicy
operator|.
name|close
argument_list|()
expr_stmt|;
name|mergePolicy
operator|=
name|mp
expr_stmt|;
name|pushMaxBufferedDocs
argument_list|()
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"setMergePolicy "
operator|+
name|mp
argument_list|)
expr_stmt|;
block|}
comment|/**    * Expert: returns the current MergePolicy in use by this writer.    * @see #setMergePolicy    */
DECL|method|getMergePolicy
specifier|public
name|MergePolicy
name|getMergePolicy
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|mergePolicy
return|;
block|}
comment|/**    * Expert: set the merge scheduler used by this writer.    */
DECL|method|setMergeScheduler
specifier|public
name|void
name|setMergeScheduler
parameter_list|(
name|MergeScheduler
name|mergeScheduler
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|mergeScheduler
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"MergeScheduler must be non-null"
argument_list|)
throw|;
if|if
condition|(
name|this
operator|.
name|mergeScheduler
operator|!=
name|mergeScheduler
condition|)
block|{
name|finishMerges
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|mergeScheduler
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|mergeScheduler
operator|=
name|mergeScheduler
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"setMergeScheduler "
operator|+
name|mergeScheduler
argument_list|)
expr_stmt|;
block|}
comment|/**    * Expert: returns the current MergePolicy in use by this    * writer.    * @see #setMergePolicy    */
DECL|method|getMergeScheduler
specifier|public
name|MergeScheduler
name|getMergeScheduler
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|mergeScheduler
return|;
block|}
comment|/**<p>Determines the largest segment (measured by    * document count) that may be merged with other segments.    * Small values (e.g., less than 10,000) are best for    * interactive indexing, as this limits the length of    * pauses while indexing to a few seconds.  Larger values    * are best for batched indexing and speedier    * searches.</p>    *    *<p>The default value is {@link Integer#MAX_VALUE}.</p>    *    *<p>Note that this method is a convenience method: it    * just calls mergePolicy.setMaxMergeDocs as long as    * mergePolicy is an instance of {@link LogMergePolicy}.    * Otherwise an IllegalArgumentException is thrown.</p>    *    *<p>The default merge policy ({@link    * LogByteSizeMergePolicy}) also allows you to set this    * limit by net size (in MB) of the segment, using {@link    * LogByteSizeMergePolicy#setMaxMergeMB}.</p>    */
DECL|method|setMaxMergeDocs
specifier|public
name|void
name|setMaxMergeDocs
parameter_list|(
name|int
name|maxMergeDocs
parameter_list|)
block|{
name|getLogMergePolicy
argument_list|()
operator|.
name|setMaxMergeDocs
argument_list|(
name|maxMergeDocs
argument_list|)
expr_stmt|;
block|}
comment|/**    *<p>Returns the largest segment (measured by document    * count) that may be merged with other segments.</p>    *    *<p>Note that this method is a convenience method: it    * just calls mergePolicy.getMaxMergeDocs as long as    * mergePolicy is an instance of {@link LogMergePolicy}.    * Otherwise an IllegalArgumentException is thrown.</p>    *    * @see #setMaxMergeDocs    */
DECL|method|getMaxMergeDocs
specifier|public
name|int
name|getMaxMergeDocs
parameter_list|()
block|{
return|return
name|getLogMergePolicy
argument_list|()
operator|.
name|getMaxMergeDocs
argument_list|()
return|;
block|}
comment|/**    * The maximum number of terms that will be indexed for a single field in a    * document.  This limits the amount of memory required for indexing, so that    * collections with very large files will not crash the indexing process by    * running out of memory.  This setting refers to the number of running terms,    * not to the number of different terms.<p/>    *<strong>Note:</strong> this silently truncates large documents, excluding from the    * index all terms that occur further in the document.  If you know your source    * documents are large, be sure to set this value high enough to accomodate    * the expected size.  If you set it to Integer.MAX_VALUE, then the only limit    * is your memory, but you should anticipate an OutOfMemoryError.<p/>    * By default, no more than 10,000 terms will be indexed for a field.    */
DECL|method|setMaxFieldLength
specifier|public
name|void
name|setMaxFieldLength
parameter_list|(
name|int
name|maxFieldLength
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxFieldLength
operator|=
name|maxFieldLength
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"setMaxFieldLength "
operator|+
name|maxFieldLength
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the maximum number of terms that will be    * indexed for a single field in a document.    * @see #setMaxFieldLength    */
DECL|method|getMaxFieldLength
specifier|public
name|int
name|getMaxFieldLength
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|maxFieldLength
return|;
block|}
comment|/** Determines the minimal number of documents required    * before the buffered in-memory documents are flushed as    * a new Segment.  Large values generally gives faster    * indexing.    *    *<p>When this is set, the writer will flush every    * maxBufferedDocs added documents.  Pass in {@link    * #DISABLE_AUTO_FLUSH} to prevent triggering a flush due    * to number of buffered documents.  Note that if flushing    * by RAM usage is also enabled, then the flush will be    * triggered by whichever comes first.</p>    *    *<p>Disabled by default (writer flushes by RAM usage).</p>    *    * @throws IllegalArgumentException if maxBufferedDocs is    * enabled but smaller than 2, or it disables maxBufferedDocs    * when ramBufferSize is already disabled    * @see #setRAMBufferSizeMB    */
DECL|method|setMaxBufferedDocs
specifier|public
name|void
name|setMaxBufferedDocs
parameter_list|(
name|int
name|maxBufferedDocs
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|maxBufferedDocs
operator|!=
name|DISABLE_AUTO_FLUSH
operator|&&
name|maxBufferedDocs
operator|<
literal|2
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"maxBufferedDocs must at least be 2 when enabled"
argument_list|)
throw|;
if|if
condition|(
name|maxBufferedDocs
operator|==
name|DISABLE_AUTO_FLUSH
operator|&&
name|getRAMBufferSizeMB
argument_list|()
operator|==
name|DISABLE_AUTO_FLUSH
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"at least one of ramBufferSize and maxBufferedDocs must be enabled"
argument_list|)
throw|;
name|docWriter
operator|.
name|setMaxBufferedDocs
argument_list|(
name|maxBufferedDocs
argument_list|)
expr_stmt|;
name|pushMaxBufferedDocs
argument_list|()
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"setMaxBufferedDocs "
operator|+
name|maxBufferedDocs
argument_list|)
expr_stmt|;
block|}
comment|/**    * If we are flushing by doc count (not by RAM usage), and    * using LogDocMergePolicy then push maxBufferedDocs down    * as its minMergeDocs, to keep backwards compatibility.    */
DECL|method|pushMaxBufferedDocs
specifier|private
name|void
name|pushMaxBufferedDocs
parameter_list|()
block|{
if|if
condition|(
name|docWriter
operator|.
name|getMaxBufferedDocs
argument_list|()
operator|!=
name|DISABLE_AUTO_FLUSH
condition|)
block|{
specifier|final
name|MergePolicy
name|mp
init|=
name|mergePolicy
decl_stmt|;
if|if
condition|(
name|mp
operator|instanceof
name|LogDocMergePolicy
condition|)
block|{
name|LogDocMergePolicy
name|lmp
init|=
operator|(
name|LogDocMergePolicy
operator|)
name|mp
decl_stmt|;
specifier|final
name|int
name|maxBufferedDocs
init|=
name|docWriter
operator|.
name|getMaxBufferedDocs
argument_list|()
decl_stmt|;
if|if
condition|(
name|lmp
operator|.
name|getMinMergeDocs
argument_list|()
operator|!=
name|maxBufferedDocs
condition|)
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"now push maxBufferedDocs "
operator|+
name|maxBufferedDocs
operator|+
literal|" to LogDocMergePolicy"
argument_list|)
expr_stmt|;
name|lmp
operator|.
name|setMinMergeDocs
argument_list|(
name|maxBufferedDocs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Returns the number of buffered added documents that will    * trigger a flush if enabled.    * @see #setMaxBufferedDocs    */
DECL|method|getMaxBufferedDocs
specifier|public
name|int
name|getMaxBufferedDocs
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|docWriter
operator|.
name|getMaxBufferedDocs
argument_list|()
return|;
block|}
comment|/** Determines the amount of RAM that may be used for    * buffering added documents before they are flushed as a    * new Segment.  Generally for faster indexing performance    * it's best to flush by RAM usage instead of document    * count and use as large a RAM buffer as you can.    *    *<p>When this is set, the writer will flush whenever    * buffered documents use this much RAM.  Pass in {@link    * #DISABLE_AUTO_FLUSH} to prevent triggering a flush due    * to RAM usage.  Note that if flushing by document count    * is also enabled, then the flush will be triggered by    * whichever comes first.</p>    *    *<p> The default value is {@link #DEFAULT_RAM_BUFFER_SIZE_MB}.</p>    *     * @throws IllegalArgumentException if ramBufferSize is    * enabled but non-positive, or it disables ramBufferSize    * when maxBufferedDocs is already disabled    */
DECL|method|setRAMBufferSizeMB
specifier|public
name|void
name|setRAMBufferSizeMB
parameter_list|(
name|double
name|mb
parameter_list|)
block|{
if|if
condition|(
name|mb
operator|!=
name|DISABLE_AUTO_FLUSH
operator|&&
name|mb
operator|<=
literal|0.0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ramBufferSize should be> 0.0 MB when enabled"
argument_list|)
throw|;
if|if
condition|(
name|mb
operator|==
name|DISABLE_AUTO_FLUSH
operator|&&
name|getMaxBufferedDocs
argument_list|()
operator|==
name|DISABLE_AUTO_FLUSH
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"at least one of ramBufferSize and maxBufferedDocs must be enabled"
argument_list|)
throw|;
name|docWriter
operator|.
name|setRAMBufferSizeMB
argument_list|(
name|mb
argument_list|)
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"setRAMBufferSizeMB "
operator|+
name|mb
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the value set by {@link #setRAMBufferSizeMB} if enabled.    */
DECL|method|getRAMBufferSizeMB
specifier|public
name|double
name|getRAMBufferSizeMB
parameter_list|()
block|{
return|return
name|docWriter
operator|.
name|getRAMBufferSizeMB
argument_list|()
return|;
block|}
comment|/**    *<p>Determines the minimal number of delete terms required before the buffered    * in-memory delete terms are applied and flushed. If there are documents    * buffered in memory at the time, they are merged and a new segment is    * created.</p>     *<p>Disabled by default (writer flushes by RAM usage).</p>    *     * @throws IllegalArgumentException if maxBufferedDeleteTerms    * is enabled but smaller than 1    * @see #setRAMBufferSizeMB    */
DECL|method|setMaxBufferedDeleteTerms
specifier|public
name|void
name|setMaxBufferedDeleteTerms
parameter_list|(
name|int
name|maxBufferedDeleteTerms
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|maxBufferedDeleteTerms
operator|!=
name|DISABLE_AUTO_FLUSH
operator|&&
name|maxBufferedDeleteTerms
operator|<
literal|1
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"maxBufferedDeleteTerms must at least be 1 when enabled"
argument_list|)
throw|;
name|docWriter
operator|.
name|setMaxBufferedDeleteTerms
argument_list|(
name|maxBufferedDeleteTerms
argument_list|)
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"setMaxBufferedDeleteTerms "
operator|+
name|maxBufferedDeleteTerms
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the number of buffered deleted terms that will    * trigger a flush if enabled.    * @see #setMaxBufferedDeleteTerms    */
DECL|method|getMaxBufferedDeleteTerms
specifier|public
name|int
name|getMaxBufferedDeleteTerms
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|docWriter
operator|.
name|getMaxBufferedDeleteTerms
argument_list|()
return|;
block|}
comment|/** Determines how often segment indices are merged by addDocument().  With    * smaller values, less RAM is used while indexing, and searches on    * unoptimized indices are faster, but indexing speed is slower.  With larger    * values, more RAM is used during indexing, and while searches on unoptimized    * indices are slower, indexing is faster.  Thus larger values (> 10) are best    * for batch index creation, and smaller values (< 10) for indices that are    * interactively maintained.    *    *<p>Note that this method is a convenience method: it    * just calls mergePolicy.setMergeFactor as long as    * mergePolicy is an instance of {@link LogMergePolicy}.    * Otherwise an IllegalArgumentException is thrown.</p>    *    *<p>This must never be less than 2.  The default value is 10.    */
DECL|method|setMergeFactor
specifier|public
name|void
name|setMergeFactor
parameter_list|(
name|int
name|mergeFactor
parameter_list|)
block|{
name|getLogMergePolicy
argument_list|()
operator|.
name|setMergeFactor
argument_list|(
name|mergeFactor
argument_list|)
expr_stmt|;
block|}
comment|/**    *<p>Returns the number of segments that are merged at    * once and also controls the total number of segments    * allowed to accumulate in the index.</p>    *    *<p>Note that this method is a convenience method: it    * just calls mergePolicy.getMergeFactor as long as    * mergePolicy is an instance of {@link LogMergePolicy}.    * Otherwise an IllegalArgumentException is thrown.</p>    *    * @see #setMergeFactor    */
DECL|method|getMergeFactor
specifier|public
name|int
name|getMergeFactor
parameter_list|()
block|{
return|return
name|getLogMergePolicy
argument_list|()
operator|.
name|getMergeFactor
argument_list|()
return|;
block|}
comment|/** If non-null, this will be the default infoStream used    * by a newly instantiated IndexWriter.    * @see #setInfoStream    */
DECL|method|setDefaultInfoStream
specifier|public
specifier|static
name|void
name|setDefaultInfoStream
parameter_list|(
name|PrintStream
name|infoStream
parameter_list|)
block|{
name|IndexWriter
operator|.
name|defaultInfoStream
operator|=
name|infoStream
expr_stmt|;
block|}
comment|/**    * Returns the current default infoStream for newly    * instantiated IndexWriters.    * @see #setDefaultInfoStream    */
DECL|method|getDefaultInfoStream
specifier|public
specifier|static
name|PrintStream
name|getDefaultInfoStream
parameter_list|()
block|{
return|return
name|IndexWriter
operator|.
name|defaultInfoStream
return|;
block|}
comment|/** If non-null, information about merges, deletes and a    * message when maxFieldLength is reached will be printed    * to this.    */
DECL|method|setInfoStream
specifier|public
name|void
name|setInfoStream
parameter_list|(
name|PrintStream
name|infoStream
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|this
operator|.
name|infoStream
operator|=
name|infoStream
expr_stmt|;
name|setMessageID
argument_list|()
expr_stmt|;
name|docWriter
operator|.
name|setInfoStream
argument_list|(
name|infoStream
argument_list|)
expr_stmt|;
name|deleter
operator|.
name|setInfoStream
argument_list|(
name|infoStream
argument_list|)
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|messageState
argument_list|()
expr_stmt|;
block|}
DECL|method|messageState
specifier|private
name|void
name|messageState
parameter_list|()
block|{
name|message
argument_list|(
literal|"setInfoStream: dir="
operator|+
name|directory
operator|+
literal|" autoCommit="
operator|+
name|autoCommit
operator|+
literal|" mergePolicy="
operator|+
name|mergePolicy
operator|+
literal|" mergeScheduler="
operator|+
name|mergeScheduler
operator|+
literal|" ramBufferSizeMB="
operator|+
name|docWriter
operator|.
name|getRAMBufferSizeMB
argument_list|()
operator|+
literal|" maxBuffereDocs="
operator|+
name|docWriter
operator|.
name|getMaxBufferedDocs
argument_list|()
operator|+
literal|" maxBuffereDeleteTerms="
operator|+
name|docWriter
operator|.
name|getMaxBufferedDeleteTerms
argument_list|()
operator|+
literal|" maxFieldLength="
operator|+
name|maxFieldLength
operator|+
literal|" index="
operator|+
name|segString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the current infoStream in use by this writer.    * @see #setInfoStream    */
DECL|method|getInfoStream
specifier|public
name|PrintStream
name|getInfoStream
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|infoStream
return|;
block|}
comment|/**    * Sets the maximum time to wait for a write lock (in milliseconds) for this instance of IndexWriter.  @see    * @see #setDefaultWriteLockTimeout to change the default value for all instances of IndexWriter.    */
DECL|method|setWriteLockTimeout
specifier|public
name|void
name|setWriteLockTimeout
parameter_list|(
name|long
name|writeLockTimeout
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeLockTimeout
operator|=
name|writeLockTimeout
expr_stmt|;
block|}
comment|/**    * Returns allowed timeout when acquiring the write lock.    * @see #setWriteLockTimeout    */
DECL|method|getWriteLockTimeout
specifier|public
name|long
name|getWriteLockTimeout
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|writeLockTimeout
return|;
block|}
comment|/**    * Sets the default (for any instance of IndexWriter) maximum time to wait for a write lock (in    * milliseconds).    */
DECL|method|setDefaultWriteLockTimeout
specifier|public
specifier|static
name|void
name|setDefaultWriteLockTimeout
parameter_list|(
name|long
name|writeLockTimeout
parameter_list|)
block|{
name|IndexWriter
operator|.
name|WRITE_LOCK_TIMEOUT
operator|=
name|writeLockTimeout
expr_stmt|;
block|}
comment|/**    * Returns default write lock timeout for newly    * instantiated IndexWriters.    * @see #setDefaultWriteLockTimeout    */
DECL|method|getDefaultWriteLockTimeout
specifier|public
specifier|static
name|long
name|getDefaultWriteLockTimeout
parameter_list|()
block|{
return|return
name|IndexWriter
operator|.
name|WRITE_LOCK_TIMEOUT
return|;
block|}
comment|/**    * Flushes all changes to an index and closes all    * associated files.    *    *<p> If an Exception is hit during close, eg due to disk    * full or some other reason, then both the on-disk index    * and the internal state of the IndexWriter instance will    * be consistent.  However, the close will not be complete    * even though part of it (flushing buffered documents)    * may have succeeded, so the write lock will still be    * held.</p>    *     *<p> If you can correct the underlying cause (eg free up    * some disk space) then you can call close() again.    * Failing that, if you want to force the write lock to be    * released (dangerous, because you may then lose buffered    * docs in the IndexWriter instance) then you can do    * something like this:</p>    *    *<pre>    * try {    *   writer.close();    * } finally {    *   if (IndexReader.isLocked(directory)) {    *     IndexReader.unlock(directory);    *   }    * }    *</pre>    *    * after which, you must be certain not to use the writer    * instance anymore.</p>    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Closes the index with or without waiting for currently    * running merges to finish.  This is only meaningful when    * using a MergeScheduler that runs merges in background    * threads.    * @param waitForMerges if true, this call will block    * until all merges complete; else, it will ask all    * running merges to abort, wait until those merges have    * finished (which should be at most a few seconds), and    * then return.    */
DECL|method|close
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|waitForMerges
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|boolean
name|doClose
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// Ensure that only one thread actually gets to do the closing:
if|if
condition|(
operator|!
name|closing
condition|)
block|{
name|doClose
operator|=
literal|true
expr_stmt|;
name|closing
operator|=
literal|true
expr_stmt|;
block|}
else|else
name|doClose
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|doClose
condition|)
name|closeInternal
argument_list|(
name|waitForMerges
argument_list|)
expr_stmt|;
else|else
comment|// Another thread beat us to it (is actually doing the
comment|// close), so we will block until that other thread
comment|// has finished closing
name|waitForClose
argument_list|()
expr_stmt|;
block|}
DECL|method|waitForClose
specifier|synchronized
specifier|private
name|void
name|waitForClose
parameter_list|()
block|{
while|while
condition|(
operator|!
name|closed
operator|&&
name|closing
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{       }
block|}
block|}
DECL|method|closeInternal
specifier|private
name|void
name|closeInternal
parameter_list|(
name|boolean
name|waitForMerges
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"now flush at close"
argument_list|)
expr_stmt|;
name|docWriter
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Only allow a new merge to be triggered if we are
comment|// going to wait for merges:
name|flush
argument_list|(
name|waitForMerges
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mergePolicy
operator|.
name|close
argument_list|()
expr_stmt|;
name|finishMerges
argument_list|(
name|waitForMerges
argument_list|)
expr_stmt|;
name|mergeScheduler
operator|.
name|close
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|commitPending
condition|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|segmentInfos
operator|.
name|write
argument_list|(
name|directory
argument_list|)
expr_stmt|;
comment|// now commit changes
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"hit exception committing segments file during close"
argument_list|)
expr_stmt|;
name|deletePartialSegmentsFile
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"close: wrote segments file \""
operator|+
name|segmentInfos
operator|.
name|getCurrentSegmentFileName
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|deleter
operator|.
name|checkpoint
argument_list|(
name|segmentInfos
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|commitPending
operator|=
literal|false
expr_stmt|;
name|rollbackSegmentInfos
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"at close: "
operator|+
name|segString
argument_list|()
argument_list|)
expr_stmt|;
name|docWriter
operator|=
literal|null
expr_stmt|;
name|deleter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|closeDir
condition|)
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|writeLock
operator|!=
literal|null
condition|)
block|{
name|writeLock
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// release write lock
name|writeLock
operator|=
literal|null
expr_stmt|;
block|}
name|closed
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
operator|!
name|closed
condition|)
name|closing
operator|=
literal|false
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** Tells the docWriter to close its currently open shared    *  doc stores (stored fields& vectors files).    *  Return value specifices whether new doc store files are compound or not.    */
DECL|method|flushDocStores
specifier|private
specifier|synchronized
name|boolean
name|flushDocStores
parameter_list|()
throws|throws
name|IOException
block|{
name|List
name|files
init|=
name|docWriter
operator|.
name|files
argument_list|()
decl_stmt|;
name|boolean
name|useCompoundDocStore
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|files
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|docStoreSegment
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|docStoreSegment
operator|=
name|docWriter
operator|.
name|closeDocStore
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"hit exception closing doc store segment"
argument_list|)
expr_stmt|;
name|docWriter
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
block|}
name|useCompoundDocStore
operator|=
name|mergePolicy
operator|.
name|useCompoundDocStore
argument_list|(
name|segmentInfos
argument_list|)
expr_stmt|;
if|if
condition|(
name|useCompoundDocStore
operator|&&
name|docStoreSegment
operator|!=
literal|null
condition|)
block|{
comment|// Now build compound doc store file
name|success
operator|=
literal|false
expr_stmt|;
specifier|final
name|int
name|numSegments
init|=
name|segmentInfos
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|String
name|compoundFileName
init|=
name|docStoreSegment
operator|+
literal|"."
operator|+
name|IndexFileNames
operator|.
name|COMPOUND_FILE_STORE_EXTENSION
decl_stmt|;
try|try
block|{
name|CompoundFileWriter
name|cfsWriter
init|=
operator|new
name|CompoundFileWriter
argument_list|(
name|directory
argument_list|,
name|compoundFileName
argument_list|)
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|files
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
name|cfsWriter
operator|.
name|addFile
argument_list|(
operator|(
name|String
operator|)
name|files
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
comment|// Perform the merge
name|cfsWriter
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSegments
condition|;
name|i
operator|++
control|)
block|{
name|SegmentInfo
name|si
init|=
name|segmentInfos
operator|.
name|info
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|si
operator|.
name|getDocStoreOffset
argument_list|()
operator|!=
operator|-
literal|1
operator|&&
name|si
operator|.
name|getDocStoreSegment
argument_list|()
operator|.
name|equals
argument_list|(
name|docStoreSegment
argument_list|)
condition|)
name|si
operator|.
name|setDocStoreIsCompoundFile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|checkpoint
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"hit exception building compound file doc store for segment "
operator|+
name|docStoreSegment
argument_list|)
expr_stmt|;
comment|// Rollback to no compound file
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSegments
condition|;
name|i
operator|++
control|)
block|{
name|SegmentInfo
name|si
init|=
name|segmentInfos
operator|.
name|info
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|si
operator|.
name|getDocStoreOffset
argument_list|()
operator|!=
operator|-
literal|1
operator|&&
name|si
operator|.
name|getDocStoreSegment
argument_list|()
operator|.
name|equals
argument_list|(
name|docStoreSegment
argument_list|)
condition|)
name|si
operator|.
name|setDocStoreIsCompoundFile
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|deleter
operator|.
name|deleteFile
argument_list|(
name|compoundFileName
argument_list|)
expr_stmt|;
name|deletePartialSegmentsFile
argument_list|()
expr_stmt|;
block|}
block|}
name|deleter
operator|.
name|checkpoint
argument_list|(
name|segmentInfos
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|useCompoundDocStore
return|;
block|}
comment|/** Release the write lock, if needed. */
DECL|method|finalize
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
if|if
condition|(
name|writeLock
operator|!=
literal|null
condition|)
block|{
name|writeLock
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// release write lock
name|writeLock
operator|=
literal|null
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|finalize
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Returns the Directory used by this index. */
DECL|method|getDirectory
specifier|public
name|Directory
name|getDirectory
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|directory
return|;
block|}
comment|/** Returns the analyzer used by this index. */
DECL|method|getAnalyzer
specifier|public
name|Analyzer
name|getAnalyzer
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|analyzer
return|;
block|}
comment|/** Returns the number of documents currently in this index. */
DECL|method|docCount
specifier|public
specifier|synchronized
name|int
name|docCount
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|int
name|count
init|=
name|docWriter
operator|.
name|getNumDocsInRAM
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|segmentInfos
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SegmentInfo
name|si
init|=
name|segmentInfos
operator|.
name|info
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|count
operator|+=
name|si
operator|.
name|docCount
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
comment|/**    * The maximum number of terms that will be indexed for a single field in a    * document.  This limits the amount of memory required for indexing, so that    * collections with very large files will not crash the indexing process by    * running out of memory.<p/>    * Note that this effectively truncates large documents, excluding from the    * index terms that occur further in the document.  If you know your source    * documents are large, be sure to set this value high enough to accomodate    * the expected size.  If you set it to Integer.MAX_VALUE, then the only limit    * is your memory, but you should anticipate an OutOfMemoryError.<p/>    * By default, no more than 10,000 terms will be indexed for a field.    *    */
DECL|field|maxFieldLength
specifier|private
name|int
name|maxFieldLength
init|=
name|DEFAULT_MAX_FIELD_LENGTH
decl_stmt|;
comment|/**    * Adds a document to this index.  If the document contains more than    * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are    * discarded.    *    *<p> Note that if an Exception is hit (for example disk full)    * then the index will be consistent, but this document    * may not have been added.  Furthermore, it's possible    * the index will have one segment in non-compound format    * even when using compound files (when a merge has    * partially succeeded).</p>    *    *<p> This method periodically flushes pending documents    * to the Directory (every {@link #setMaxBufferedDocs}),    * and also periodically merges segments in the index    * (every {@link #setMergeFactor} flushes).  When this    * occurs, the method will take more time to run (possibly    * a long time if the index is large), and will require    * free temporary space in the Directory to do the    * merging.</p>    *    *<p>The amount of free space required when a merge is triggered is    * up to 1X the size of all segments being merged, when no    * readers/searchers are open against the index, and up to 2X the    * size of all segments being merged when readers/searchers are open    * against the index (see {@link #optimize()} for details). The    * sequence of primitive merge operations performed is governed by    * the merge policy.    *    *<p>Note that each term in the document can be no longer    * than 16383 characters, otherwise an    * IllegalArgumentException will be thrown.</p>    *    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|addDocument
specifier|public
name|void
name|addDocument
parameter_list|(
name|Document
name|doc
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|addDocument
argument_list|(
name|doc
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds a document to this index, using the provided analyzer instead of the    * value of {@link #getAnalyzer()}.  If the document contains more than    * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are    * discarded.    *    *<p>See {@link #addDocument(Document)} for details on    * index and IndexWriter state after an Exception, and    * flushing/merging temporary free space requirements.</p>    *    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|addDocument
specifier|public
name|void
name|addDocument
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|boolean
name|doFlush
init|=
literal|false
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|doFlush
operator|=
name|docWriter
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"hit exception adding document"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// If docWriter has some aborted files that were
comment|// never incref'd, then we clean them up here
if|if
condition|(
name|docWriter
operator|!=
literal|null
condition|)
block|{
specifier|final
name|List
name|files
init|=
name|docWriter
operator|.
name|abortedFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
name|deleter
operator|.
name|deleteNewFiles
argument_list|(
name|files
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|doFlush
condition|)
name|flush
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deletes the document(s) containing<code>term</code>.    * @param term the term to identify the documents to be deleted    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|deleteDocuments
specifier|public
name|void
name|deleteDocuments
parameter_list|(
name|Term
name|term
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|boolean
name|doFlush
init|=
name|docWriter
operator|.
name|bufferDeleteTerm
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|doFlush
condition|)
name|flush
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deletes the document(s) containing any of the    * terms. All deletes are flushed at the same time.    * @param terms array of terms to identify the documents    * to be deleted    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|deleteDocuments
specifier|public
name|void
name|deleteDocuments
parameter_list|(
name|Term
index|[]
name|terms
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|boolean
name|doFlush
init|=
name|docWriter
operator|.
name|bufferDeleteTerms
argument_list|(
name|terms
argument_list|)
decl_stmt|;
if|if
condition|(
name|doFlush
condition|)
name|flush
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Updates a document by first deleting the document(s)    * containing<code>term</code> and then adding the new    * document.  The delete and then add are atomic as seen    * by a reader on the same index (flush may happen only after    * the add).    * @param term the term to identify the document(s) to be    * deleted    * @param doc the document to be added    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|updateDocument
specifier|public
name|void
name|updateDocument
parameter_list|(
name|Term
name|term
parameter_list|,
name|Document
name|doc
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|updateDocument
argument_list|(
name|term
argument_list|,
name|doc
argument_list|,
name|getAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Updates a document by first deleting the document(s)    * containing<code>term</code> and then adding the new    * document.  The delete and then add are atomic as seen    * by a reader on the same index (flush may happen only after    * the add).    * @param term the term to identify the document(s) to be    * deleted    * @param doc the document to be added    * @param analyzer the analyzer to use when analyzing the document    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|updateDocument
specifier|public
name|void
name|updateDocument
parameter_list|(
name|Term
name|term
parameter_list|,
name|Document
name|doc
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|boolean
name|doFlush
init|=
literal|false
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|doFlush
operator|=
name|docWriter
operator|.
name|updateDocument
argument_list|(
name|term
argument_list|,
name|doc
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"hit exception updating document"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// If docWriter has some aborted files that were
comment|// never incref'd, then we clean them up here
specifier|final
name|List
name|files
init|=
name|docWriter
operator|.
name|abortedFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
name|deleter
operator|.
name|deleteNewFiles
argument_list|(
name|files
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|doFlush
condition|)
name|flush
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// for test purpose
DECL|method|getSegmentCount
specifier|final
specifier|synchronized
name|int
name|getSegmentCount
parameter_list|()
block|{
return|return
name|segmentInfos
operator|.
name|size
argument_list|()
return|;
block|}
comment|// for test purpose
DECL|method|getNumBufferedDocuments
specifier|final
specifier|synchronized
name|int
name|getNumBufferedDocuments
parameter_list|()
block|{
return|return
name|docWriter
operator|.
name|getNumDocsInRAM
argument_list|()
return|;
block|}
comment|// for test purpose
DECL|method|getDocCount
specifier|final
specifier|synchronized
name|int
name|getDocCount
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|segmentInfos
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|segmentInfos
operator|.
name|info
argument_list|(
name|i
argument_list|)
operator|.
name|docCount
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
DECL|method|newSegmentName
specifier|final
name|String
name|newSegmentName
parameter_list|()
block|{
comment|// Cannot synchronize on IndexWriter because that causes
comment|// deadlock
synchronized|synchronized
init|(
name|segmentInfos
init|)
block|{
comment|// Important to set commitPending so that the
comment|// segmentInfos is written on close.  Otherwise we
comment|// could close, re-open and re-return the same segment
comment|// name that was previously returned which can cause
comment|// problems at least with ConcurrentMergeScheduler.
name|commitPending
operator|=
literal|true
expr_stmt|;
return|return
literal|"_"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|segmentInfos
operator|.
name|counter
operator|++
argument_list|,
name|Character
operator|.
name|MAX_RADIX
argument_list|)
return|;
block|}
block|}
comment|/** If non-null, information about merges will be printed to this.    */
DECL|field|infoStream
specifier|private
name|PrintStream
name|infoStream
init|=
literal|null
decl_stmt|;
DECL|field|defaultInfoStream
specifier|private
specifier|static
name|PrintStream
name|defaultInfoStream
init|=
literal|null
decl_stmt|;
comment|/**    * Requests an "optimize" operation on an index, priming the index    * for the fastest available search. Traditionally this has meant    * merging all segments into a single segment as is done in the    * default merge policy, but individaul merge policies may implement    * optimize in different ways.    *    * @see LogMergePolicy#findMergesForOptimize    *    *<p>It is recommended that this method be called upon completion of indexing.  In    * environments with frequent updates, optimize is best done during low volume times, if at all.     *     *</p>    *<p>See http://www.gossamer-threads.com/lists/lucene/java-dev/47895 for more discussion.</p>    *    *<p>Note that this can require substantial temporary free    * space in the Directory (see<a target="_top"    * href="http://issues.apache.org/jira/browse/LUCENE-764">LUCENE-764</a>    * for details):</p>    *    *<ul>    *<li>    *     *<p>If no readers/searchers are open against the index,    * then free space required is up to 1X the total size of    * the starting index.  For example, if the starting    * index is 10 GB, then you must have up to 10 GB of free    * space before calling optimize.</p>    *    *<li>    *     *<p>If readers/searchers are using the index, then free    * space required is up to 2X the size of the starting    * index.  This is because in addition to the 1X used by    * optimize, the original 1X of the starting index is    * still consuming space in the Directory as the readers    * are holding the segments files open.  Even on Unix,    * where it will appear as if the files are gone ("ls"    * won't list them), they still consume storage due to    * "delete on last close" semantics.</p>    *     *<p>Furthermore, if some but not all readers re-open    * while the optimize is underway, this will cause> 2X    * temporary space to be consumed as those new readers    * will then hold open the partially optimized segments at    * that time.  It is best not to re-open readers while    * optimize is running.</p>    *    *</ul>    *    *<p>The actual temporary usage could be much less than    * these figures (it depends on many factors).</p>    *    *<p>In general, once the optimize completes, the total size of the    * index will be less than the size of the starting index.    * It could be quite a bit smaller (if there were many    * pending deletes) or just slightly smaller.</p>    *    *<p>If an Exception is hit during optimize(), for example    * due to disk full, the index will not be corrupt and no    * documents will have been lost.  However, it may have    * been partially optimized (some segments were merged but    * not all), and it's possible that one of the segments in    * the index will be in non-compound format even when    * using compound file format.  This will occur when the    * Exception is hit during conversion of the segment into    * compound format.</p>    *    *<p>This call will optimize those segments present in    * the index when the call started.  If other threads are    * still adding documents and flushing segments, those    * newly created segments will not be optimized unless you    * call optimize again.</p>    *    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error   */
DECL|method|optimize
specifier|public
name|void
name|optimize
parameter_list|()
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|optimize
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Optimize the index down to<= maxNumSegments.  If    * maxNumSegments==1 then this is the same as {@link    * #optimize()}.    * @param maxNumSegments maximum number of segments left    * in the index after optimization finishes    */
DECL|method|optimize
specifier|public
name|void
name|optimize
parameter_list|(
name|int
name|maxNumSegments
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|optimize
argument_list|(
name|maxNumSegments
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** Just like {@link #optimize()}, except you can specify    *  whether the call should block until the optimize    *  completes.  This is only meaningful with a    *  {@link MergeScheduler} that is able to run merges in    *  background threads. */
DECL|method|optimize
specifier|public
name|void
name|optimize
parameter_list|(
name|boolean
name|doWait
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|optimize
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** Just like {@link #optimize(int)}, except you can    *  specify whether the call should block until the    *  optimize completes.  This is only meaningful with a    *  {@link MergeScheduler} that is able to run merges in    *  background threads. */
DECL|method|optimize
specifier|public
name|void
name|optimize
parameter_list|(
name|int
name|maxNumSegments
parameter_list|,
name|boolean
name|doWait
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|maxNumSegments
operator|<
literal|1
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"maxNumSegments must be>= 1; got "
operator|+
name|maxNumSegments
argument_list|)
throw|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"optimize: index now "
operator|+
name|segString
argument_list|()
argument_list|)
expr_stmt|;
name|flush
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|resetMergeExceptions
argument_list|()
expr_stmt|;
name|segmentsToOptimize
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
specifier|final
name|int
name|numSegments
init|=
name|segmentInfos
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSegments
condition|;
name|i
operator|++
control|)
name|segmentsToOptimize
operator|.
name|add
argument_list|(
name|segmentInfos
operator|.
name|info
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now mark all pending& running merges as optimize
comment|// merge:
name|Iterator
name|it
init|=
name|pendingMerges
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|MergePolicy
operator|.
name|OneMerge
name|merge
init|=
operator|(
name|MergePolicy
operator|.
name|OneMerge
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|merge
operator|.
name|optimize
operator|=
literal|true
expr_stmt|;
name|merge
operator|.
name|maxNumSegmentsOptimize
operator|=
name|maxNumSegments
expr_stmt|;
block|}
name|it
operator|=
name|runningMerges
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|MergePolicy
operator|.
name|OneMerge
name|merge
init|=
operator|(
name|MergePolicy
operator|.
name|OneMerge
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|merge
operator|.
name|optimize
operator|=
literal|true
expr_stmt|;
name|merge
operator|.
name|maxNumSegmentsOptimize
operator|=
name|maxNumSegments
expr_stmt|;
block|}
block|}
name|maybeMerge
argument_list|(
name|maxNumSegments
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|doWait
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
while|while
condition|(
name|optimizeMergesPending
argument_list|()
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{           }
if|if
condition|(
name|mergeExceptions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Forward any exceptions in background merge
comment|// threads to the current thread:
specifier|final
name|int
name|size
init|=
name|mergeExceptions
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|MergePolicy
operator|.
name|OneMerge
name|merge
init|=
operator|(
name|MergePolicy
operator|.
name|OneMerge
operator|)
name|mergeExceptions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|merge
operator|.
name|optimize
condition|)
block|{
name|IOException
name|err
init|=
operator|new
name|IOException
argument_list|(
literal|"background merge hit exception: "
operator|+
name|merge
operator|.
name|segString
argument_list|(
name|directory
argument_list|)
argument_list|)
decl_stmt|;
name|err
operator|.
name|initCause
argument_list|(
name|merge
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|err
throw|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|// NOTE: in the ConcurrentMergeScheduler case, when
comment|// doWait is false, we can return immediately while
comment|// background threads accomplish the optimization
block|}
comment|/** Returns true if any merges in pendingMerges or    *  runningMerges are optimization merges. */
DECL|method|optimizeMergesPending
specifier|private
specifier|synchronized
name|boolean
name|optimizeMergesPending
parameter_list|()
block|{
name|Iterator
name|it
init|=
name|pendingMerges
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
if|if
condition|(
operator|(
operator|(
name|MergePolicy
operator|.
name|OneMerge
operator|)
name|it
operator|.
name|next
argument_list|()
operator|)
operator|.
name|optimize
condition|)
return|return
literal|true
return|;
name|it
operator|=
name|runningMerges
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
if|if
condition|(
operator|(
operator|(
name|MergePolicy
operator|.
name|OneMerge
operator|)
name|it
operator|.
name|next
argument_list|()
operator|)
operator|.
name|optimize
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
comment|/**    * Expert: asks the mergePolicy whether any merges are    * necessary now and if so, runs the requested merges and    * then iterate (test again if merges are needed) until no    * more merges are returned by the mergePolicy.    *    * Explicit calls to maybeMerge() are usually not    * necessary. The most common case is when merge policy    * parameters have changed.    */
DECL|method|maybeMerge
specifier|public
specifier|final
name|void
name|maybeMerge
parameter_list|()
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|maybeMerge
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|maybeMerge
specifier|private
specifier|final
name|void
name|maybeMerge
parameter_list|(
name|boolean
name|optimize
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|maybeMerge
argument_list|(
literal|1
argument_list|,
name|optimize
argument_list|)
expr_stmt|;
block|}
DECL|method|maybeMerge
specifier|private
specifier|final
name|void
name|maybeMerge
parameter_list|(
name|int
name|maxNumSegmentsOptimize
parameter_list|,
name|boolean
name|optimize
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|updatePendingMerges
argument_list|(
name|maxNumSegmentsOptimize
argument_list|,
name|optimize
argument_list|)
expr_stmt|;
name|mergeScheduler
operator|.
name|merge
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|updatePendingMerges
specifier|private
specifier|synchronized
name|void
name|updatePendingMerges
parameter_list|(
name|int
name|maxNumSegmentsOptimize
parameter_list|,
name|boolean
name|optimize
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
assert|assert
operator|!
name|optimize
operator|||
name|maxNumSegmentsOptimize
operator|>
literal|0
assert|;
if|if
condition|(
name|stopMerges
condition|)
return|return;
specifier|final
name|MergePolicy
operator|.
name|MergeSpecification
name|spec
decl_stmt|;
if|if
condition|(
name|optimize
condition|)
block|{
name|spec
operator|=
name|mergePolicy
operator|.
name|findMergesForOptimize
argument_list|(
name|segmentInfos
argument_list|,
name|this
argument_list|,
name|maxNumSegmentsOptimize
argument_list|,
name|segmentsToOptimize
argument_list|)
expr_stmt|;
if|if
condition|(
name|spec
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|numMerges
init|=
name|spec
operator|.
name|merges
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMerges
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|MergePolicy
operator|.
name|OneMerge
name|merge
init|=
operator|(
operator|(
name|MergePolicy
operator|.
name|OneMerge
operator|)
name|spec
operator|.
name|merges
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
decl_stmt|;
name|merge
operator|.
name|optimize
operator|=
literal|true
expr_stmt|;
name|merge
operator|.
name|maxNumSegmentsOptimize
operator|=
name|maxNumSegmentsOptimize
expr_stmt|;
block|}
block|}
block|}
else|else
name|spec
operator|=
name|mergePolicy
operator|.
name|findMerges
argument_list|(
name|segmentInfos
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|spec
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|numMerges
init|=
name|spec
operator|.
name|merges
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMerges
condition|;
name|i
operator|++
control|)
name|registerMerge
argument_list|(
operator|(
name|MergePolicy
operator|.
name|OneMerge
operator|)
name|spec
operator|.
name|merges
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Expert: the {@link MergeScheduler} calls this method    *  to retrieve the next merge requested by the    *  MergePolicy */
DECL|method|getNextMerge
specifier|synchronized
name|MergePolicy
operator|.
name|OneMerge
name|getNextMerge
parameter_list|()
block|{
if|if
condition|(
name|pendingMerges
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
else|else
block|{
comment|// Advance the merge from pending to running
name|MergePolicy
operator|.
name|OneMerge
name|merge
init|=
operator|(
name|MergePolicy
operator|.
name|OneMerge
operator|)
name|pendingMerges
operator|.
name|removeFirst
argument_list|()
decl_stmt|;
name|runningMerges
operator|.
name|add
argument_list|(
name|merge
argument_list|)
expr_stmt|;
return|return
name|merge
return|;
block|}
block|}
comment|/*    * Begin a transaction.  During a transaction, any segment    * merges that happen (or ram segments flushed) will not    * write a new segments file and will not remove any files    * that were present at the start of the transaction.  You    * must make a matched (try/finally) call to    * commitTransaction() or rollbackTransaction() to finish    * the transaction.    *    * Note that buffered documents and delete terms are not handled    * within the transactions, so they must be flushed before the    * transaction is started.    */
DECL|method|startTransaction
specifier|private
name|void
name|startTransaction
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"now start transaction"
argument_list|)
expr_stmt|;
assert|assert
name|docWriter
operator|.
name|getNumBufferedDeleteTerms
argument_list|()
operator|==
literal|0
operator|:
literal|"calling startTransaction with buffered delete terms not supported"
assert|;
assert|assert
name|docWriter
operator|.
name|getNumDocsInRAM
argument_list|()
operator|==
literal|0
operator|:
literal|"calling startTransaction with buffered documents not supported"
assert|;
name|localRollbackSegmentInfos
operator|=
operator|(
name|SegmentInfos
operator|)
name|segmentInfos
operator|.
name|clone
argument_list|()
expr_stmt|;
name|localAutoCommit
operator|=
name|autoCommit
expr_stmt|;
if|if
condition|(
name|localAutoCommit
condition|)
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"flush at startTransaction"
argument_list|)
expr_stmt|;
name|flush
argument_list|()
expr_stmt|;
comment|// Turn off auto-commit during our local transaction:
name|autoCommit
operator|=
literal|false
expr_stmt|;
block|}
else|else
comment|// We must "protect" our files at this point from
comment|// deletion in case we need to rollback:
name|deleter
operator|.
name|incRef
argument_list|(
name|segmentInfos
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/*    * Rolls back the transaction and restores state to where    * we were at the start.    */
DECL|method|rollbackTransaction
specifier|private
name|void
name|rollbackTransaction
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"now rollback transaction"
argument_list|)
expr_stmt|;
comment|// First restore autoCommit in case we hit an exception below:
name|autoCommit
operator|=
name|localAutoCommit
expr_stmt|;
comment|// Keep the same segmentInfos instance but replace all
comment|// of its SegmentInfo instances.  This is so the next
comment|// attempt to commit using this instance of IndexWriter
comment|// will always write to a new generation ("write once").
name|segmentInfos
operator|.
name|clear
argument_list|()
expr_stmt|;
name|segmentInfos
operator|.
name|addAll
argument_list|(
name|localRollbackSegmentInfos
argument_list|)
expr_stmt|;
name|localRollbackSegmentInfos
operator|=
literal|null
expr_stmt|;
comment|// Ask deleter to locate unreferenced files we had
comment|// created& remove them:
name|deleter
operator|.
name|checkpoint
argument_list|(
name|segmentInfos
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|autoCommit
condition|)
comment|// Remove the incRef we did in startTransaction:
name|deleter
operator|.
name|decRef
argument_list|(
name|segmentInfos
argument_list|)
expr_stmt|;
name|deleter
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|finishMerges
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|stopMerges
operator|=
literal|false
expr_stmt|;
block|}
comment|/*    * Commits the transaction.  This will write the new    * segments file and remove and pending deletions we have    * accumulated during the transaction    */
DECL|method|commitTransaction
specifier|private
name|void
name|commitTransaction
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"now commit transaction"
argument_list|)
expr_stmt|;
comment|// First restore autoCommit in case we hit an exception below:
name|autoCommit
operator|=
name|localAutoCommit
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|checkpoint
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"hit exception committing transaction"
argument_list|)
expr_stmt|;
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|autoCommit
condition|)
comment|// Remove the incRef we did in startTransaction.
name|deleter
operator|.
name|decRef
argument_list|(
name|localRollbackSegmentInfos
argument_list|)
expr_stmt|;
name|localRollbackSegmentInfos
operator|=
literal|null
expr_stmt|;
comment|// Give deleter a chance to remove files now:
name|deleter
operator|.
name|checkpoint
argument_list|(
name|segmentInfos
argument_list|,
name|autoCommit
argument_list|)
expr_stmt|;
block|}
comment|/**    * Close the<code>IndexWriter</code> without committing    * any of the changes that have occurred since it was    * opened. This removes any temporary files that had been    * created, after which the state of the index will be the    * same as it was when this writer was first opened.  This    * can only be called when this IndexWriter was opened    * with<code>autoCommit=false</code>.    * @throws IllegalStateException if this is called when    *  the writer was opened with<code>autoCommit=true</code>.    * @throws IOException if there is a low-level IO error    */
DECL|method|abort
specifier|public
name|void
name|abort
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|autoCommit
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"abort() can only be called when IndexWriter was opened with autoCommit=false"
argument_list|)
throw|;
name|boolean
name|doClose
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// Ensure that only one thread actually gets to do the closing:
if|if
condition|(
operator|!
name|closing
condition|)
block|{
name|doClose
operator|=
literal|true
expr_stmt|;
name|closing
operator|=
literal|true
expr_stmt|;
block|}
else|else
name|doClose
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|doClose
condition|)
block|{
name|finishMerges
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Must pre-close these two, in case they set
comment|// commitPending=true, so that we can then set it to
comment|// false before calling closeInternal
name|mergePolicy
operator|.
name|close
argument_list|()
expr_stmt|;
name|mergeScheduler
operator|.
name|close
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// Keep the same segmentInfos instance but replace all
comment|// of its SegmentInfo instances.  This is so the next
comment|// attempt to commit using this instance of IndexWriter
comment|// will always write to a new generation ("write
comment|// once").
name|segmentInfos
operator|.
name|clear
argument_list|()
expr_stmt|;
name|segmentInfos
operator|.
name|addAll
argument_list|(
name|rollbackSegmentInfos
argument_list|)
expr_stmt|;
name|docWriter
operator|.
name|abort
argument_list|()
expr_stmt|;
comment|// Ask deleter to locate unreferenced files& remove
comment|// them:
name|deleter
operator|.
name|checkpoint
argument_list|(
name|segmentInfos
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|deleter
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
name|commitPending
operator|=
literal|false
expr_stmt|;
name|closeInternal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
name|waitForClose
argument_list|()
expr_stmt|;
block|}
DECL|method|finishMerges
specifier|private
specifier|synchronized
name|void
name|finishMerges
parameter_list|(
name|boolean
name|waitForMerges
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|waitForMerges
condition|)
block|{
name|stopMerges
operator|=
literal|true
expr_stmt|;
comment|// Abort all pending& running merges:
name|Iterator
name|it
init|=
name|pendingMerges
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|MergePolicy
operator|.
name|OneMerge
name|merge
init|=
operator|(
name|MergePolicy
operator|.
name|OneMerge
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"now abort pending merge "
operator|+
name|merge
operator|.
name|segString
argument_list|(
name|directory
argument_list|)
argument_list|)
expr_stmt|;
name|merge
operator|.
name|abort
argument_list|()
expr_stmt|;
name|mergeFinish
argument_list|(
name|merge
argument_list|)
expr_stmt|;
block|}
name|pendingMerges
operator|.
name|clear
argument_list|()
expr_stmt|;
name|it
operator|=
name|runningMerges
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|MergePolicy
operator|.
name|OneMerge
name|merge
init|=
operator|(
name|MergePolicy
operator|.
name|OneMerge
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"now abort running merge "
operator|+
name|merge
operator|.
name|segString
argument_list|(
name|directory
argument_list|)
argument_list|)
expr_stmt|;
name|merge
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
comment|// These merges periodically check whether they have
comment|// been aborted, and stop if so.  We wait here to make
comment|// sure they all stop.  It should not take very long
comment|// because the merge threads periodically check if
comment|// they are aborted.
while|while
condition|(
name|runningMerges
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"now wait for "
operator|+
name|runningMerges
operator|.
name|size
argument_list|()
operator|+
literal|" running merge to abort"
argument_list|)
expr_stmt|;
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
assert|assert
literal|0
operator|==
name|mergingSegments
operator|.
name|size
argument_list|()
assert|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"all running merges have aborted"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
name|pendingMerges
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|||
name|runningMerges
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{         }
block|}
assert|assert
literal|0
operator|==
name|mergingSegments
operator|.
name|size
argument_list|()
assert|;
block|}
block|}
comment|/*    * Called whenever the SegmentInfos has been updated and    * the index files referenced exist (correctly) in the    * index directory.  If we are in autoCommit mode, we    * commit the change immediately.  Else, we mark    * commitPending.    */
DECL|method|checkpoint
specifier|private
specifier|synchronized
name|void
name|checkpoint
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|autoCommit
condition|)
block|{
name|segmentInfos
operator|.
name|write
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|commitPending
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"checkpoint: wrote segments file \""
operator|+
name|segmentInfos
operator|.
name|getCurrentSegmentFileName
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|commitPending
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/** Merges all segments from an array of indexes into this index.    *    *<p>This may be used to parallelize batch indexing.  A large document    * collection can be broken into sub-collections.  Each sub-collection can be    * indexed in parallel, on a different thread, process or machine.  The    * complete index can then be created by merging sub-collection indexes    * with this method.    *    *<p><b>NOTE:</b> the index in each Directory must not be    * changed (opened by a writer) while this method is    * running.  This method does not acquire a write lock in    * each input Directory, so it is up to the caller to    * enforce this.    *    *<p>After this completes, the index is optimized.    *    *<p>This method is transactional in how Exceptions are    * handled: it does not commit a new segments_N file until    * all indexes are added.  This means if an Exception    * occurs (for example disk full), then either no indexes    * will have been added or they all will have been.</p>    *    *<p>If an Exception is hit, it's still possible that all    * indexes were successfully added.  This happens when the    * Exception is hit when trying to build a CFS file.  In    * this case, one segment in the index will be in non-CFS    * format, even when using compound file format.</p>    *    *<p>Also note that on an Exception, the index may still    * have been partially or fully optimized even though none    * of the input indexes were added.</p>    *    *<p>Note that this requires temporary free space in the    * Directory up to 2X the sum of all input indexes    * (including the starting index).  If readers/searchers    * are open against the starting index, then temporary    * free space required will be higher by the size of the    * starting index (see {@link #optimize()} for details).    *</p>    *    *<p>Once this completes, the final size of the index    * will be less than the sum of all input index sizes    * (including the starting index).  It could be quite a    * bit smaller (if there were many pending deletes) or    * just slightly smaller.</p>    *    *<p>See<a target="_top"    * href="http://issues.apache.org/jira/browse/LUCENE-702">LUCENE-702</a>    * for details.</p>    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|addIndexes
specifier|public
specifier|synchronized
name|void
name|addIndexes
parameter_list|(
name|Directory
index|[]
name|dirs
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"flush at addIndexes"
argument_list|)
expr_stmt|;
name|flush
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|startTransaction
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SegmentInfos
name|sis
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
comment|// read infos from dir
name|sis
operator|.
name|read
argument_list|(
name|dirs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sis
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|segmentInfos
operator|.
name|addElement
argument_list|(
name|sis
operator|.
name|info
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
comment|// add each info
block|}
block|}
name|optimize
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
condition|)
block|{
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|resetMergeExceptions
specifier|private
specifier|synchronized
name|void
name|resetMergeExceptions
parameter_list|()
block|{
name|mergeExceptions
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|mergeGen
operator|++
expr_stmt|;
block|}
comment|/**    * Merges all segments from an array of indexes into this index.    *<p>    * This is similar to addIndexes(Directory[]). However, no optimize()    * is called either at the beginning or at the end. Instead, merges    * are carried out as necessary.    *    *<p><b>NOTE:</b> the index in each Directory must not be    * changed (opened by a writer) while this method is    * running.  This method does not acquire a write lock in    * each input Directory, so it is up to the caller to    * enforce this.    *    *<p>    * This requires this index not be among those to be added, and the    * upper bound* of those segment doc counts not exceed maxMergeDocs.    *    *<p>See {@link #addIndexes(Directory[])} for    * details on transactional semantics, temporary free    * space required in the Directory, and non-CFS segments    * on an Exception.</p>    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|addIndexesNoOptimize
specifier|public
specifier|synchronized
name|void
name|addIndexesNoOptimize
parameter_list|(
name|Directory
index|[]
name|dirs
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"flush at addIndexesNoOptimize"
argument_list|)
expr_stmt|;
name|flush
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|startTransaction
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|directory
operator|==
name|dirs
index|[
name|i
index|]
condition|)
block|{
comment|// cannot add this index: segments may be deleted in merge before added
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot add this index to itself"
argument_list|)
throw|;
block|}
name|SegmentInfos
name|sis
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
comment|// read infos from dir
name|sis
operator|.
name|read
argument_list|(
name|dirs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sis
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|SegmentInfo
name|info
init|=
name|sis
operator|.
name|info
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|segmentInfos
operator|.
name|addElement
argument_list|(
name|info
argument_list|)
expr_stmt|;
comment|// add each info
block|}
block|}
name|maybeMerge
argument_list|()
expr_stmt|;
comment|// If after merging there remain segments in the index
comment|// that are in a different directory, just copy these
comment|// over into our index.  This is necessary (before
comment|// finishing the transaction) to avoid leaving the
comment|// index in an unusable (inconsistent) state.
name|copyExternalSegments
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
condition|)
block|{
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/* If any of our segments are using a directory != ours    * then copy them over.  Currently this is only used by    * addIndexesNoOptimize(). */
DECL|method|copyExternalSegments
specifier|private
specifier|synchronized
name|void
name|copyExternalSegments
parameter_list|()
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
specifier|final
name|int
name|numSegments
init|=
name|segmentInfos
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSegments
condition|;
name|i
operator|++
control|)
block|{
name|SegmentInfo
name|info
init|=
name|segmentInfos
operator|.
name|info
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|dir
operator|!=
name|directory
condition|)
block|{
name|MergePolicy
operator|.
name|OneMerge
name|merge
init|=
operator|new
name|MergePolicy
operator|.
name|OneMerge
argument_list|(
name|segmentInfos
operator|.
name|range
argument_list|(
name|i
argument_list|,
literal|1
operator|+
name|i
argument_list|)
argument_list|,
name|info
operator|.
name|getUseCompoundFile
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|registerMerge
argument_list|(
name|merge
argument_list|)
condition|)
block|{
name|pendingMerges
operator|.
name|remove
argument_list|(
name|merge
argument_list|)
expr_stmt|;
name|runningMerges
operator|.
name|add
argument_list|(
name|merge
argument_list|)
expr_stmt|;
name|merge
argument_list|(
name|merge
argument_list|)
expr_stmt|;
block|}
else|else
comment|// This means there is a bug in the
comment|// MergeScheduler.  MergeSchedulers in general are
comment|// not allowed to run a merge involving segments
comment|// external to this IndexWriter's directory in the
comment|// background because this would put the index
comment|// into an inconsistent state (where segmentInfos
comment|// has been written with such external segments
comment|// that an IndexReader would fail to load).
throw|throw
operator|new
name|MergePolicy
operator|.
name|MergeException
argument_list|(
literal|"segment \""
operator|+
name|info
operator|.
name|name
operator|+
literal|" exists in external directory yet the MergeScheduler executed the merge in a separate thread"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** Merges the provided indexes into this index.    *<p>After this completes, the index is optimized.</p>    *<p>The provided IndexReaders are not closed.</p>     *<p>See {@link #addIndexes(Directory[])} for    * details on transactional semantics, temporary free    * space required in the Directory, and non-CFS segments    * on an Exception.</p>    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|addIndexes
specifier|public
specifier|synchronized
name|void
name|addIndexes
parameter_list|(
name|IndexReader
index|[]
name|readers
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|optimize
argument_list|()
expr_stmt|;
comment|// start with zero or 1 seg
specifier|final
name|String
name|mergedName
init|=
name|newSegmentName
argument_list|()
decl_stmt|;
name|SegmentMerger
name|merger
init|=
operator|new
name|SegmentMerger
argument_list|(
name|this
argument_list|,
name|mergedName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SegmentInfo
name|info
decl_stmt|;
name|IndexReader
name|sReader
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|segmentInfos
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// add existing index, if any
name|sReader
operator|=
name|SegmentReader
operator|.
name|get
argument_list|(
name|segmentInfos
operator|.
name|info
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|merger
operator|.
name|add
argument_list|(
name|sReader
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|readers
operator|.
name|length
condition|;
name|i
operator|++
control|)
comment|// add new indexes
name|merger
operator|.
name|add
argument_list|(
name|readers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|startTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|docCount
init|=
name|merger
operator|.
name|merge
argument_list|()
decl_stmt|;
comment|// merge 'em
if|if
condition|(
name|sReader
operator|!=
literal|null
condition|)
block|{
name|sReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|sReader
operator|=
literal|null
expr_stmt|;
block|}
name|segmentInfos
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// pop old infos& add new
name|info
operator|=
operator|new
name|SegmentInfo
argument_list|(
name|mergedName
argument_list|,
name|docCount
argument_list|,
name|directory
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|segmentInfos
operator|.
name|addElement
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"hit exception in addIndexes during merge"
argument_list|)
expr_stmt|;
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|sReader
operator|!=
literal|null
condition|)
block|{
name|sReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mergePolicy
operator|instanceof
name|LogMergePolicy
operator|&&
name|getUseCompoundFile
argument_list|()
condition|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|startTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|merger
operator|.
name|createCompoundFile
argument_list|(
name|mergedName
operator|+
literal|".cfs"
argument_list|)
expr_stmt|;
name|info
operator|.
name|setUseCompoundFile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"hit exception building compound file in addIndexes during merge"
argument_list|)
expr_stmt|;
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// This is called after pending added and deleted
comment|// documents have been flushed to the Directory but before
comment|// the change is committed (new segments_N file written).
DECL|method|doAfterFlush
name|void
name|doAfterFlush
parameter_list|()
throws|throws
name|IOException
block|{   }
comment|/**    * Flush all in-memory buffered updates (adds and deletes)    * to the Directory.     *<p>Note: if<code>autoCommit=false</code>, flushed data would still     * not be visible to readers, until {@link #close} is called.    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|flush
specifier|public
specifier|final
name|void
name|flush
parameter_list|()
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|flush
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Flush all in-memory buffered udpates (adds and deletes)    * to the Directory.    * @param triggerMerge if true, we may merge segments (if    *  deletes or docs were flushed) if necessary    * @param flushDocStores if false we are allowed to keep    *  doc stores open to share with the next segment    */
DECL|method|flush
specifier|protected
specifier|final
name|void
name|flush
parameter_list|(
name|boolean
name|triggerMerge
parameter_list|,
name|boolean
name|flushDocStores
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|doFlush
argument_list|(
name|flushDocStores
argument_list|)
operator|&&
name|triggerMerge
condition|)
name|maybeMerge
argument_list|()
expr_stmt|;
block|}
DECL|method|doFlush
specifier|private
specifier|synchronized
specifier|final
name|boolean
name|doFlush
parameter_list|(
name|boolean
name|flushDocStores
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
comment|// Make sure no threads are actively adding a document
name|docWriter
operator|.
name|pauseAllThreads
argument_list|()
expr_stmt|;
try|try
block|{
name|SegmentInfo
name|newSegment
init|=
literal|null
decl_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|docWriter
operator|.
name|getNumDocsInRAM
argument_list|()
decl_stmt|;
comment|// Always flush docs if there are any
name|boolean
name|flushDocs
init|=
name|numDocs
operator|>
literal|0
decl_stmt|;
comment|// With autoCommit=true we always must flush the doc
comment|// stores when we flush
name|flushDocStores
operator||=
name|autoCommit
expr_stmt|;
name|String
name|docStoreSegment
init|=
name|docWriter
operator|.
name|getDocStoreSegment
argument_list|()
decl_stmt|;
if|if
condition|(
name|docStoreSegment
operator|==
literal|null
condition|)
name|flushDocStores
operator|=
literal|false
expr_stmt|;
comment|// Always flush deletes if there are any delete terms.
comment|// TODO: when autoCommit=false we don't have to flush
comment|// deletes with every flushed segment; we can save
comment|// CPU/IO by buffering longer& flushing deletes only
comment|// when they are full or writer is being closed.  We
comment|// have to fix the "applyDeletesSelectively" logic to
comment|// apply to more than just the last flushed segment
name|boolean
name|flushDeletes
init|=
name|docWriter
operator|.
name|hasDeletes
argument_list|()
decl_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|message
argument_list|(
literal|"  flush: segment="
operator|+
name|docWriter
operator|.
name|getSegment
argument_list|()
operator|+
literal|" docStoreSegment="
operator|+
name|docWriter
operator|.
name|getDocStoreSegment
argument_list|()
operator|+
literal|" docStoreOffset="
operator|+
name|docWriter
operator|.
name|getDocStoreOffset
argument_list|()
operator|+
literal|" flushDocs="
operator|+
name|flushDocs
operator|+
literal|" flushDeletes="
operator|+
name|flushDeletes
operator|+
literal|" flushDocStores="
operator|+
name|flushDocStores
operator|+
literal|" numDocs="
operator|+
name|numDocs
operator|+
literal|" numBufDelTerms="
operator|+
name|docWriter
operator|.
name|getNumBufferedDeleteTerms
argument_list|()
argument_list|)
expr_stmt|;
name|message
argument_list|(
literal|"  index before flush "
operator|+
name|segString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|docStoreOffset
init|=
name|docWriter
operator|.
name|getDocStoreOffset
argument_list|()
decl_stmt|;
name|boolean
name|docStoreIsCompoundFile
init|=
literal|false
decl_stmt|;
comment|// Check if the doc stores must be separately flushed
comment|// because other segments, besides the one we are about
comment|// to flush, reference it
if|if
condition|(
name|flushDocStores
operator|&&
operator|(
operator|!
name|flushDocs
operator|||
operator|!
name|docWriter
operator|.
name|getSegment
argument_list|()
operator|.
name|equals
argument_list|(
name|docWriter
operator|.
name|getDocStoreSegment
argument_list|()
argument_list|)
operator|)
condition|)
block|{
comment|// We must separately flush the doc store
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"  flush shared docStore segment "
operator|+
name|docStoreSegment
argument_list|)
expr_stmt|;
name|docStoreIsCompoundFile
operator|=
name|flushDocStores
argument_list|()
expr_stmt|;
name|flushDocStores
operator|=
literal|false
expr_stmt|;
block|}
name|String
name|segment
init|=
name|docWriter
operator|.
name|getSegment
argument_list|()
decl_stmt|;
comment|// If we are flushing docs, segment must not be null:
assert|assert
name|segment
operator|!=
literal|null
operator|||
operator|!
name|flushDocs
assert|;
if|if
condition|(
name|flushDocs
operator|||
name|flushDeletes
condition|)
block|{
name|SegmentInfos
name|rollback
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|flushDeletes
condition|)
name|rollback
operator|=
operator|(
name|SegmentInfos
operator|)
name|segmentInfos
operator|.
name|clone
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|flushDocs
condition|)
block|{
if|if
condition|(
literal|0
operator|==
name|docStoreOffset
operator|&&
name|flushDocStores
condition|)
block|{
comment|// This means we are flushing private doc stores
comment|// with this segment, so it will not be shared
comment|// with other segments
assert|assert
name|docStoreSegment
operator|!=
literal|null
assert|;
assert|assert
name|docStoreSegment
operator|.
name|equals
argument_list|(
name|segment
argument_list|)
assert|;
name|docStoreOffset
operator|=
operator|-
literal|1
expr_stmt|;
name|docStoreIsCompoundFile
operator|=
literal|false
expr_stmt|;
name|docStoreSegment
operator|=
literal|null
expr_stmt|;
block|}
name|int
name|flushedDocCount
init|=
name|docWriter
operator|.
name|flush
argument_list|(
name|flushDocStores
argument_list|)
decl_stmt|;
name|newSegment
operator|=
operator|new
name|SegmentInfo
argument_list|(
name|segment
argument_list|,
name|flushedDocCount
argument_list|,
name|directory
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|docStoreOffset
argument_list|,
name|docStoreSegment
argument_list|,
name|docStoreIsCompoundFile
argument_list|)
expr_stmt|;
name|segmentInfos
operator|.
name|addElement
argument_list|(
name|newSegment
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flushDeletes
condition|)
block|{
comment|// we should be able to change this so we can
comment|// buffer deletes longer and then flush them to
comment|// multiple flushed segments, when
comment|// autoCommit=false
name|applyDeletes
argument_list|(
name|flushDocs
argument_list|)
expr_stmt|;
name|doAfterFlush
argument_list|()
expr_stmt|;
block|}
name|checkpoint
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"hit exception flushing segment "
operator|+
name|segment
argument_list|)
expr_stmt|;
if|if
condition|(
name|flushDeletes
condition|)
block|{
comment|// Carefully check if any partial .del files
comment|// should be removed:
specifier|final
name|int
name|size
init|=
name|rollback
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|newDelFileName
init|=
name|segmentInfos
operator|.
name|info
argument_list|(
name|i
argument_list|)
operator|.
name|getDelFileName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|delFileName
init|=
name|rollback
operator|.
name|info
argument_list|(
name|i
argument_list|)
operator|.
name|getDelFileName
argument_list|()
decl_stmt|;
if|if
condition|(
name|newDelFileName
operator|!=
literal|null
operator|&&
operator|!
name|newDelFileName
operator|.
name|equals
argument_list|(
name|delFileName
argument_list|)
condition|)
name|deleter
operator|.
name|deleteFile
argument_list|(
name|newDelFileName
argument_list|)
expr_stmt|;
block|}
comment|// Fully replace the segmentInfos since flushed
comment|// deletes could have changed any of the
comment|// SegmentInfo instances:
name|segmentInfos
operator|.
name|clear
argument_list|()
expr_stmt|;
name|segmentInfos
operator|.
name|addAll
argument_list|(
name|rollback
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Remove segment we added, if any:
if|if
condition|(
name|newSegment
operator|!=
literal|null
operator|&&
name|segmentInfos
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|segmentInfos
operator|.
name|info
argument_list|(
name|segmentInfos
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
name|newSegment
condition|)
name|segmentInfos
operator|.
name|remove
argument_list|(
name|segmentInfos
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flushDocs
condition|)
name|docWriter
operator|.
name|abort
argument_list|()
expr_stmt|;
name|deletePartialSegmentsFile
argument_list|()
expr_stmt|;
name|deleter
operator|.
name|checkpoint
argument_list|(
name|segmentInfos
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|segment
operator|!=
literal|null
condition|)
name|deleter
operator|.
name|refresh
argument_list|(
name|segment
argument_list|)
expr_stmt|;
block|}
block|}
name|deleter
operator|.
name|checkpoint
argument_list|(
name|segmentInfos
argument_list|,
name|autoCommit
argument_list|)
expr_stmt|;
if|if
condition|(
name|flushDocs
operator|&&
name|mergePolicy
operator|.
name|useCompoundFile
argument_list|(
name|segmentInfos
argument_list|,
name|newSegment
argument_list|)
condition|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|docWriter
operator|.
name|createCompoundFile
argument_list|(
name|segment
argument_list|)
expr_stmt|;
name|newSegment
operator|.
name|setUseCompoundFile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|checkpoint
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"hit exception creating compound file for newly flushed segment "
operator|+
name|segment
argument_list|)
expr_stmt|;
name|newSegment
operator|.
name|setUseCompoundFile
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|deleter
operator|.
name|deleteFile
argument_list|(
name|segment
operator|+
literal|"."
operator|+
name|IndexFileNames
operator|.
name|COMPOUND_FILE_EXTENSION
argument_list|)
expr_stmt|;
name|deletePartialSegmentsFile
argument_list|()
expr_stmt|;
block|}
block|}
name|deleter
operator|.
name|checkpoint
argument_list|(
name|segmentInfos
argument_list|,
name|autoCommit
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
finally|finally
block|{
name|docWriter
operator|.
name|clearFlushPending
argument_list|()
expr_stmt|;
name|docWriter
operator|.
name|resumeAllThreads
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Expert:  Return the total size of all index files currently cached in memory.    * Useful for size management with flushRamDocs()    */
DECL|method|ramSizeInBytes
specifier|public
specifier|final
name|long
name|ramSizeInBytes
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|docWriter
operator|.
name|getRAMUsed
argument_list|()
return|;
block|}
comment|/** Expert:  Return the number of documents whose segments are currently cached in memory.    * Useful when calling flush()    */
DECL|method|numRamDocs
specifier|public
specifier|final
specifier|synchronized
name|int
name|numRamDocs
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|docWriter
operator|.
name|getNumDocsInRAM
argument_list|()
return|;
block|}
DECL|method|ensureContiguousMerge
specifier|private
name|int
name|ensureContiguousMerge
parameter_list|(
name|MergePolicy
operator|.
name|OneMerge
name|merge
parameter_list|)
block|{
name|int
name|first
init|=
name|segmentInfos
operator|.
name|indexOf
argument_list|(
name|merge
operator|.
name|segments
operator|.
name|info
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|==
operator|-
literal|1
condition|)
throw|throw
operator|new
name|MergePolicy
operator|.
name|MergeException
argument_list|(
literal|"could not find segment "
operator|+
name|merge
operator|.
name|segments
operator|.
name|info
argument_list|(
literal|0
argument_list|)
operator|.
name|name
operator|+
literal|" in current segments"
argument_list|)
throw|;
specifier|final
name|int
name|numSegments
init|=
name|segmentInfos
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numSegmentsToMerge
init|=
name|merge
operator|.
name|segments
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSegmentsToMerge
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|SegmentInfo
name|info
init|=
name|merge
operator|.
name|segments
operator|.
name|info
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|+
name|i
operator|>=
name|numSegments
operator|||
operator|!
name|segmentInfos
operator|.
name|info
argument_list|(
name|first
operator|+
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|info
argument_list|)
condition|)
block|{
if|if
condition|(
name|segmentInfos
operator|.
name|indexOf
argument_list|(
name|info
argument_list|)
operator|==
operator|-
literal|1
condition|)
throw|throw
operator|new
name|MergePolicy
operator|.
name|MergeException
argument_list|(
literal|"MergePolicy selected a segment ("
operator|+
name|info
operator|.
name|name
operator|+
literal|") that is not in the index"
argument_list|)
throw|;
else|else
throw|throw
operator|new
name|MergePolicy
operator|.
name|MergeException
argument_list|(
literal|"MergePolicy selected non-contiguous segments to merge ("
operator|+
name|merge
operator|+
literal|" vs "
operator|+
name|segString
argument_list|()
operator|+
literal|"), which IndexWriter (currently) cannot handle"
argument_list|)
throw|;
block|}
block|}
return|return
name|first
return|;
block|}
comment|/* FIXME if we want to support non-contiguous segment merges */
DECL|method|commitMerge
specifier|synchronized
specifier|private
name|boolean
name|commitMerge
parameter_list|(
name|MergePolicy
operator|.
name|OneMerge
name|merge
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|merge
operator|.
name|registerDone
assert|;
comment|// If merge was explicitly aborted, or, if abort() or
comment|// rollbackTransaction() had been called since our merge
comment|// started (which results in an unqualified
comment|// deleter.refresh() call that will remove any index
comment|// file that current segments does not reference), we
comment|// abort this merge
if|if
condition|(
name|merge
operator|.
name|isAborted
argument_list|()
condition|)
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"commitMerge: skipping merge "
operator|+
name|merge
operator|.
name|segString
argument_list|(
name|directory
argument_list|)
operator|+
literal|": it was aborted"
argument_list|)
expr_stmt|;
assert|assert
name|merge
operator|.
name|increfDone
assert|;
name|decrefMergeSegments
argument_list|(
name|merge
argument_list|)
expr_stmt|;
name|deleter
operator|.
name|refresh
argument_list|(
name|merge
operator|.
name|info
operator|.
name|name
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|int
name|start
decl_stmt|;
try|try
block|{
name|SegmentInfos
name|sourceSegmentsClone
init|=
name|merge
operator|.
name|segmentsClone
decl_stmt|;
name|SegmentInfos
name|sourceSegments
init|=
name|merge
operator|.
name|segments
decl_stmt|;
name|start
operator|=
name|ensureContiguousMerge
argument_list|(
name|merge
argument_list|)
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"commitMerge "
operator|+
name|merge
operator|.
name|segString
argument_list|(
name|directory
argument_list|)
argument_list|)
expr_stmt|;
comment|// Carefully merge deletes that occurred after we
comment|// started merging:
name|BitVector
name|deletes
init|=
literal|null
decl_stmt|;
name|int
name|docUpto
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|numSegmentsToMerge
init|=
name|sourceSegments
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSegmentsToMerge
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|SegmentInfo
name|previousInfo
init|=
name|sourceSegmentsClone
operator|.
name|info
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|SegmentInfo
name|currentInfo
init|=
name|sourceSegments
operator|.
name|info
argument_list|(
name|i
argument_list|)
decl_stmt|;
assert|assert
name|currentInfo
operator|.
name|docCount
operator|==
name|previousInfo
operator|.
name|docCount
assert|;
specifier|final
name|int
name|docCount
init|=
name|currentInfo
operator|.
name|docCount
decl_stmt|;
if|if
condition|(
name|previousInfo
operator|.
name|hasDeletions
argument_list|()
condition|)
block|{
comment|// There were deletes on this segment when the merge
comment|// started.  The merge has collapsed away those
comment|// deletes, but, if new deletes were flushed since
comment|// the merge started, we must now carefully keep any
comment|// newly flushed deletes but mapping them to the new
comment|// docIDs.
assert|assert
name|currentInfo
operator|.
name|hasDeletions
argument_list|()
assert|;
comment|// Load deletes present @ start of merge, for this segment:
name|BitVector
name|previousDeletes
init|=
operator|new
name|BitVector
argument_list|(
name|previousInfo
operator|.
name|dir
argument_list|,
name|previousInfo
operator|.
name|getDelFileName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|currentInfo
operator|.
name|getDelFileName
argument_list|()
operator|.
name|equals
argument_list|(
name|previousInfo
operator|.
name|getDelFileName
argument_list|()
argument_list|)
condition|)
block|{
comment|// This means this segment has had new deletes
comment|// committed since we started the merge, so we
comment|// must merge them:
if|if
condition|(
name|deletes
operator|==
literal|null
condition|)
name|deletes
operator|=
operator|new
name|BitVector
argument_list|(
name|merge
operator|.
name|info
operator|.
name|docCount
argument_list|)
expr_stmt|;
name|BitVector
name|currentDeletes
init|=
operator|new
name|BitVector
argument_list|(
name|currentInfo
operator|.
name|dir
argument_list|,
name|currentInfo
operator|.
name|getDelFileName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|docCount
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|previousDeletes
operator|.
name|get
argument_list|(
name|j
argument_list|)
condition|)
assert|assert
name|currentDeletes
operator|.
name|get
argument_list|(
name|j
argument_list|)
assert|;
else|else
block|{
if|if
condition|(
name|currentDeletes
operator|.
name|get
argument_list|(
name|j
argument_list|)
condition|)
name|deletes
operator|.
name|set
argument_list|(
name|docUpto
argument_list|)
expr_stmt|;
name|docUpto
operator|++
expr_stmt|;
block|}
block|}
block|}
else|else
name|docUpto
operator|+=
name|docCount
operator|-
name|previousDeletes
operator|.
name|count
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentInfo
operator|.
name|hasDeletions
argument_list|()
condition|)
block|{
comment|// This segment had no deletes before but now it
comment|// does:
if|if
condition|(
name|deletes
operator|==
literal|null
condition|)
name|deletes
operator|=
operator|new
name|BitVector
argument_list|(
name|merge
operator|.
name|info
operator|.
name|docCount
argument_list|)
expr_stmt|;
name|BitVector
name|currentDeletes
init|=
operator|new
name|BitVector
argument_list|(
name|directory
argument_list|,
name|currentInfo
operator|.
name|getDelFileName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|docCount
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|currentDeletes
operator|.
name|get
argument_list|(
name|j
argument_list|)
condition|)
name|deletes
operator|.
name|set
argument_list|(
name|docUpto
argument_list|)
expr_stmt|;
name|docUpto
operator|++
expr_stmt|;
block|}
block|}
else|else
comment|// No deletes before or after
name|docUpto
operator|+=
name|currentInfo
operator|.
name|docCount
expr_stmt|;
name|merge
operator|.
name|checkAborted
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deletes
operator|!=
literal|null
condition|)
block|{
name|merge
operator|.
name|info
operator|.
name|advanceDelGen
argument_list|()
expr_stmt|;
name|deletes
operator|.
name|write
argument_list|(
name|directory
argument_list|,
name|merge
operator|.
name|info
operator|.
name|getDelFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"hit exception creating merged deletes file"
argument_list|)
expr_stmt|;
name|deleter
operator|.
name|refresh
argument_list|(
name|merge
operator|.
name|info
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Simple optimization: if the doc store we are using
comment|// has been closed and is in now compound format (but
comment|// wasn't when we started), then we will switch to the
comment|// compound format as well:
specifier|final
name|String
name|mergeDocStoreSegment
init|=
name|merge
operator|.
name|info
operator|.
name|getDocStoreSegment
argument_list|()
decl_stmt|;
if|if
condition|(
name|mergeDocStoreSegment
operator|!=
literal|null
operator|&&
operator|!
name|merge
operator|.
name|info
operator|.
name|getDocStoreIsCompoundFile
argument_list|()
condition|)
block|{
specifier|final
name|int
name|size
init|=
name|segmentInfos
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|SegmentInfo
name|info
init|=
name|segmentInfos
operator|.
name|info
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|String
name|docStoreSegment
init|=
name|info
operator|.
name|getDocStoreSegment
argument_list|()
decl_stmt|;
if|if
condition|(
name|docStoreSegment
operator|!=
literal|null
operator|&&
name|docStoreSegment
operator|.
name|equals
argument_list|(
name|mergeDocStoreSegment
argument_list|)
operator|&&
name|info
operator|.
name|getDocStoreIsCompoundFile
argument_list|()
condition|)
block|{
name|merge
operator|.
name|info
operator|.
name|setDocStoreIsCompoundFile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|success
operator|=
literal|false
expr_stmt|;
name|SegmentInfos
name|rollback
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rollback
operator|=
operator|(
name|SegmentInfos
operator|)
name|segmentInfos
operator|.
name|clone
argument_list|()
expr_stmt|;
name|segmentInfos
operator|.
name|subList
argument_list|(
name|start
argument_list|,
name|start
operator|+
name|merge
operator|.
name|segments
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|segmentInfos
operator|.
name|add
argument_list|(
name|start
argument_list|,
name|merge
operator|.
name|info
argument_list|)
expr_stmt|;
name|checkpoint
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
operator|&&
name|rollback
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"hit exception when checkpointing after merge"
argument_list|)
expr_stmt|;
name|segmentInfos
operator|.
name|clear
argument_list|()
expr_stmt|;
name|segmentInfos
operator|.
name|addAll
argument_list|(
name|rollback
argument_list|)
expr_stmt|;
name|deletePartialSegmentsFile
argument_list|()
expr_stmt|;
name|deleter
operator|.
name|refresh
argument_list|(
name|merge
operator|.
name|info
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|merge
operator|.
name|optimize
condition|)
name|segmentsToOptimize
operator|.
name|add
argument_list|(
name|merge
operator|.
name|info
argument_list|)
expr_stmt|;
comment|// Must checkpoint before decrefing so any newly
comment|// referenced files in the new merge.info are incref'd
comment|// first:
name|deleter
operator|.
name|checkpoint
argument_list|(
name|segmentInfos
argument_list|,
name|autoCommit
argument_list|)
expr_stmt|;
name|decrefMergeSegments
argument_list|(
name|merge
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|decrefMergeSegments
specifier|private
name|void
name|decrefMergeSegments
parameter_list|(
name|MergePolicy
operator|.
name|OneMerge
name|merge
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SegmentInfos
name|sourceSegmentsClone
init|=
name|merge
operator|.
name|segmentsClone
decl_stmt|;
specifier|final
name|int
name|numSegmentsToMerge
init|=
name|sourceSegmentsClone
operator|.
name|size
argument_list|()
decl_stmt|;
assert|assert
name|merge
operator|.
name|increfDone
assert|;
name|merge
operator|.
name|increfDone
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSegmentsToMerge
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|SegmentInfo
name|previousInfo
init|=
name|sourceSegmentsClone
operator|.
name|info
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Decref all files for this SegmentInfo (this
comment|// matches the incref in mergeInit):
if|if
condition|(
name|previousInfo
operator|.
name|dir
operator|==
name|directory
condition|)
name|deleter
operator|.
name|decRef
argument_list|(
name|previousInfo
operator|.
name|files
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Merges the indicated segments, replacing them in the stack with a    * single segment.    */
DECL|method|merge
specifier|final
name|void
name|merge
parameter_list|(
name|MergePolicy
operator|.
name|OneMerge
name|merge
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
assert|assert
name|merge
operator|.
name|registerDone
assert|;
assert|assert
operator|!
name|merge
operator|.
name|optimize
operator|||
name|merge
operator|.
name|maxNumSegmentsOptimize
operator|>
literal|0
assert|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
try|try
block|{
if|if
condition|(
name|merge
operator|.
name|info
operator|==
literal|null
condition|)
name|mergeInit
argument_list|(
name|merge
argument_list|)
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"now merge\n  merge="
operator|+
name|merge
operator|.
name|segString
argument_list|(
name|directory
argument_list|)
operator|+
literal|"\n  index="
operator|+
name|segString
argument_list|()
argument_list|)
expr_stmt|;
name|mergeMiddle
argument_list|(
name|merge
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MergePolicy
operator|.
name|MergeAbortedException
name|e
parameter_list|)
block|{
name|merge
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|addMergeException
argument_list|(
name|merge
argument_list|)
expr_stmt|;
comment|// We can ignore this exception, unless the merge
comment|// involves segments from external directories, in
comment|// which case we must throw it so, for example, the
comment|// rollbackTransaction code in addIndexes* is
comment|// executed.
if|if
condition|(
name|merge
operator|.
name|isExternal
condition|)
throw|throw
name|e
throw|;
block|}
block|}
finally|finally
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|success
operator|&&
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"hit exception during merge"
argument_list|)
expr_stmt|;
name|mergeFinish
argument_list|(
name|merge
argument_list|)
expr_stmt|;
comment|// This merge (and, generally, any change to the
comment|// segments) may now enable new merges, so we call
comment|// merge policy& update pending merges.
if|if
condition|(
name|success
operator|&&
operator|!
name|merge
operator|.
name|isAborted
argument_list|()
operator|&&
operator|!
name|closed
operator|&&
operator|!
name|closing
condition|)
name|updatePendingMerges
argument_list|(
name|merge
operator|.
name|maxNumSegmentsOptimize
argument_list|,
name|merge
operator|.
name|optimize
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|runningMerges
operator|.
name|remove
argument_list|(
name|merge
argument_list|)
expr_stmt|;
comment|// Optimize may be waiting on the final optimize
comment|// merge to finish; and finishMerges() may be
comment|// waiting for all merges to finish:
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/** Checks whether this merge involves any segments    *  already participating in a merge.  If not, this merge    *  is "registered", meaning we record that its segments    *  are now participating in a merge, and true is    *  returned.  Else (the merge conflicts) false is    *  returned. */
DECL|method|registerMerge
specifier|final
specifier|synchronized
name|boolean
name|registerMerge
parameter_list|(
name|MergePolicy
operator|.
name|OneMerge
name|merge
parameter_list|)
block|{
if|if
condition|(
name|merge
operator|.
name|registerDone
condition|)
return|return
literal|true
return|;
specifier|final
name|int
name|count
init|=
name|merge
operator|.
name|segments
operator|.
name|size
argument_list|()
decl_stmt|;
name|boolean
name|isExternal
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|SegmentInfo
name|info
init|=
name|merge
operator|.
name|segments
operator|.
name|info
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergingSegments
operator|.
name|contains
argument_list|(
name|info
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|segmentInfos
operator|.
name|indexOf
argument_list|(
name|info
argument_list|)
operator|==
operator|-
literal|1
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|info
operator|.
name|dir
operator|!=
name|directory
condition|)
name|isExternal
operator|=
literal|true
expr_stmt|;
block|}
name|pendingMerges
operator|.
name|add
argument_list|(
name|merge
argument_list|)
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"add merge to pendingMerges: "
operator|+
name|merge
operator|.
name|segString
argument_list|(
name|directory
argument_list|)
operator|+
literal|" [total "
operator|+
name|pendingMerges
operator|.
name|size
argument_list|()
operator|+
literal|" pending]"
argument_list|)
expr_stmt|;
name|merge
operator|.
name|mergeGen
operator|=
name|mergeGen
expr_stmt|;
name|merge
operator|.
name|isExternal
operator|=
name|isExternal
expr_stmt|;
comment|// OK it does not conflict; now record that this merge
comment|// is running (while synchronized) to avoid race
comment|// condition where two conflicting merges from different
comment|// threads, start
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
name|mergingSegments
operator|.
name|add
argument_list|(
name|merge
operator|.
name|segments
operator|.
name|info
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
comment|// Merge is now registered
name|merge
operator|.
name|registerDone
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/** Does initial setup for a merge, which is fast but holds    *  the synchronized lock on IndexWriter instance. */
DECL|method|mergeInit
specifier|final
specifier|synchronized
name|void
name|mergeInit
parameter_list|(
name|MergePolicy
operator|.
name|OneMerge
name|merge
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|merge
operator|.
name|registerDone
assert|;
if|if
condition|(
name|merge
operator|.
name|isAborted
argument_list|()
condition|)
return|return;
specifier|final
name|SegmentInfos
name|sourceSegments
init|=
name|merge
operator|.
name|segments
decl_stmt|;
specifier|final
name|int
name|end
init|=
name|sourceSegments
operator|.
name|size
argument_list|()
decl_stmt|;
name|ensureContiguousMerge
argument_list|(
name|merge
argument_list|)
expr_stmt|;
comment|// Check whether this merge will allow us to skip
comment|// merging the doc stores (stored field& vectors).
comment|// This is a very substantial optimization (saves tons
comment|// of IO) that can only be applied with
comment|// autoCommit=false.
name|Directory
name|lastDir
init|=
name|directory
decl_stmt|;
name|String
name|lastDocStoreSegment
init|=
literal|null
decl_stmt|;
name|int
name|next
init|=
operator|-
literal|1
decl_stmt|;
name|boolean
name|mergeDocStores
init|=
literal|false
decl_stmt|;
name|boolean
name|doFlushDocStore
init|=
literal|false
decl_stmt|;
specifier|final
name|String
name|currentDocStoreSegment
init|=
name|docWriter
operator|.
name|getDocStoreSegment
argument_list|()
decl_stmt|;
comment|// Test each segment to be merged: check if we need to
comment|// flush/merge doc stores
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|SegmentInfo
name|si
init|=
name|sourceSegments
operator|.
name|info
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// If it has deletions we must merge the doc stores
if|if
condition|(
name|si
operator|.
name|hasDeletions
argument_list|()
condition|)
name|mergeDocStores
operator|=
literal|true
expr_stmt|;
comment|// If it has its own (private) doc stores we must
comment|// merge the doc stores
if|if
condition|(
operator|-
literal|1
operator|==
name|si
operator|.
name|getDocStoreOffset
argument_list|()
condition|)
name|mergeDocStores
operator|=
literal|true
expr_stmt|;
comment|// If it has a different doc store segment than
comment|// previous segments, we must merge the doc stores
name|String
name|docStoreSegment
init|=
name|si
operator|.
name|getDocStoreSegment
argument_list|()
decl_stmt|;
if|if
condition|(
name|docStoreSegment
operator|==
literal|null
condition|)
name|mergeDocStores
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|lastDocStoreSegment
operator|==
literal|null
condition|)
name|lastDocStoreSegment
operator|=
name|docStoreSegment
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|lastDocStoreSegment
operator|.
name|equals
argument_list|(
name|docStoreSegment
argument_list|)
condition|)
name|mergeDocStores
operator|=
literal|true
expr_stmt|;
comment|// Segments' docScoreOffsets must be in-order,
comment|// contiguous.  For the default merge policy now
comment|// this will always be the case but for an arbitrary
comment|// merge policy this may not be the case
if|if
condition|(
operator|-
literal|1
operator|==
name|next
condition|)
name|next
operator|=
name|si
operator|.
name|getDocStoreOffset
argument_list|()
operator|+
name|si
operator|.
name|docCount
expr_stmt|;
elseif|else
if|if
condition|(
name|next
operator|!=
name|si
operator|.
name|getDocStoreOffset
argument_list|()
condition|)
name|mergeDocStores
operator|=
literal|true
expr_stmt|;
else|else
name|next
operator|=
name|si
operator|.
name|getDocStoreOffset
argument_list|()
operator|+
name|si
operator|.
name|docCount
expr_stmt|;
comment|// If the segment comes from a different directory
comment|// we must merge
if|if
condition|(
name|lastDir
operator|!=
name|si
operator|.
name|dir
condition|)
name|mergeDocStores
operator|=
literal|true
expr_stmt|;
comment|// If the segment is referencing the current "live"
comment|// doc store outputs then we must merge
if|if
condition|(
name|si
operator|.
name|getDocStoreOffset
argument_list|()
operator|!=
operator|-
literal|1
operator|&&
name|currentDocStoreSegment
operator|!=
literal|null
operator|&&
name|si
operator|.
name|getDocStoreSegment
argument_list|()
operator|.
name|equals
argument_list|(
name|currentDocStoreSegment
argument_list|)
condition|)
name|doFlushDocStore
operator|=
literal|true
expr_stmt|;
block|}
specifier|final
name|int
name|docStoreOffset
decl_stmt|;
specifier|final
name|String
name|docStoreSegment
decl_stmt|;
specifier|final
name|boolean
name|docStoreIsCompoundFile
decl_stmt|;
if|if
condition|(
name|mergeDocStores
condition|)
block|{
name|docStoreOffset
operator|=
operator|-
literal|1
expr_stmt|;
name|docStoreSegment
operator|=
literal|null
expr_stmt|;
name|docStoreIsCompoundFile
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|SegmentInfo
name|si
init|=
name|sourceSegments
operator|.
name|info
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|docStoreOffset
operator|=
name|si
operator|.
name|getDocStoreOffset
argument_list|()
expr_stmt|;
name|docStoreSegment
operator|=
name|si
operator|.
name|getDocStoreSegment
argument_list|()
expr_stmt|;
name|docStoreIsCompoundFile
operator|=
name|si
operator|.
name|getDocStoreIsCompoundFile
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mergeDocStores
operator|&&
name|doFlushDocStore
condition|)
block|{
comment|// SegmentMerger intends to merge the doc stores
comment|// (stored fields, vectors), and at least one of the
comment|// segments to be merged refers to the currently
comment|// live doc stores.
comment|// TODO: if we know we are about to merge away these
comment|// newly flushed doc store files then we should not
comment|// make compound file out of them...
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"flush at merge"
argument_list|)
expr_stmt|;
name|flush
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// We must take a full copy at this point so that we can
comment|// properly merge deletes in commitMerge()
name|merge
operator|.
name|segmentsClone
operator|=
operator|(
name|SegmentInfos
operator|)
name|merge
operator|.
name|segments
operator|.
name|clone
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|SegmentInfo
name|si
init|=
name|merge
operator|.
name|segmentsClone
operator|.
name|info
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// IncRef all files for this segment info to make sure
comment|// they are not removed while we are trying to merge.
if|if
condition|(
name|si
operator|.
name|dir
operator|==
name|directory
condition|)
name|deleter
operator|.
name|incRef
argument_list|(
name|si
operator|.
name|files
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|merge
operator|.
name|increfDone
operator|=
literal|true
expr_stmt|;
name|merge
operator|.
name|mergeDocStores
operator|=
name|mergeDocStores
expr_stmt|;
comment|// Bind a new segment name here so even with
comment|// ConcurrentMergePolicy we keep deterministic segment
comment|// names.
name|merge
operator|.
name|info
operator|=
operator|new
name|SegmentInfo
argument_list|(
name|newSegmentName
argument_list|()
argument_list|,
literal|0
argument_list|,
name|directory
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|docStoreOffset
argument_list|,
name|docStoreSegment
argument_list|,
name|docStoreIsCompoundFile
argument_list|)
expr_stmt|;
block|}
comment|/** Does fininishing for a merge, which is fast but holds    *  the synchronized lock on IndexWriter instance. */
DECL|method|mergeFinish
specifier|final
specifier|synchronized
name|void
name|mergeFinish
parameter_list|(
name|MergePolicy
operator|.
name|OneMerge
name|merge
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|merge
operator|.
name|increfDone
condition|)
name|decrefMergeSegments
argument_list|(
name|merge
argument_list|)
expr_stmt|;
assert|assert
name|merge
operator|.
name|registerDone
assert|;
specifier|final
name|SegmentInfos
name|sourceSegments
init|=
name|merge
operator|.
name|segments
decl_stmt|;
specifier|final
name|int
name|end
init|=
name|sourceSegments
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
name|mergingSegments
operator|.
name|remove
argument_list|(
name|sourceSegments
operator|.
name|info
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|merge
operator|.
name|registerDone
operator|=
literal|false
expr_stmt|;
block|}
comment|/** Does the actual (time-consuming) work of the merge,    *  but without holding synchronized lock on IndexWriter    *  instance */
DECL|method|mergeMiddle
specifier|final
specifier|private
name|int
name|mergeMiddle
parameter_list|(
name|MergePolicy
operator|.
name|OneMerge
name|merge
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|merge
operator|.
name|checkAborted
argument_list|(
name|directory
argument_list|)
expr_stmt|;
specifier|final
name|String
name|mergedName
init|=
name|merge
operator|.
name|info
operator|.
name|name
decl_stmt|;
name|SegmentMerger
name|merger
init|=
literal|null
decl_stmt|;
name|int
name|mergedDocCount
init|=
literal|0
decl_stmt|;
name|SegmentInfos
name|sourceSegments
init|=
name|merge
operator|.
name|segments
decl_stmt|;
name|SegmentInfos
name|sourceSegmentsClone
init|=
name|merge
operator|.
name|segmentsClone
decl_stmt|;
specifier|final
name|int
name|numSegments
init|=
name|sourceSegments
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"merging "
operator|+
name|merge
operator|.
name|segString
argument_list|(
name|directory
argument_list|)
argument_list|)
expr_stmt|;
name|merger
operator|=
operator|new
name|SegmentMerger
argument_list|(
name|this
argument_list|,
name|mergedName
argument_list|,
name|merge
argument_list|)
expr_stmt|;
comment|// This is try/finally to make sure merger's readers are
comment|// closed:
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|int
name|totDocCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSegments
condition|;
name|i
operator|++
control|)
block|{
name|SegmentInfo
name|si
init|=
name|sourceSegmentsClone
operator|.
name|info
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|IndexReader
name|reader
init|=
name|SegmentReader
operator|.
name|get
argument_list|(
name|si
argument_list|,
name|MERGE_READ_BUFFER_SIZE
argument_list|,
name|merge
operator|.
name|mergeDocStores
argument_list|)
decl_stmt|;
comment|// no need to set deleter (yet)
name|merger
operator|.
name|add
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|totDocCount
operator|+=
name|reader
operator|.
name|numDocs
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|message
argument_list|(
literal|"merge: total "
operator|+
name|totDocCount
operator|+
literal|" docs"
argument_list|)
expr_stmt|;
block|}
name|merge
operator|.
name|checkAborted
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|mergedDocCount
operator|=
name|merge
operator|.
name|info
operator|.
name|docCount
operator|=
name|merger
operator|.
name|merge
argument_list|(
name|merge
operator|.
name|mergeDocStores
argument_list|)
expr_stmt|;
assert|assert
name|mergedDocCount
operator|==
name|totDocCount
assert|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
comment|// close readers before we attempt to delete
comment|// now-obsolete segments
if|if
condition|(
name|merger
operator|!=
literal|null
condition|)
block|{
name|merger
operator|.
name|closeReaders
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"hit exception during merge; now refresh deleter on segment "
operator|+
name|mergedName
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|addMergeException
argument_list|(
name|merge
argument_list|)
expr_stmt|;
name|deleter
operator|.
name|refresh
argument_list|(
name|mergedName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|commitMerge
argument_list|(
name|merge
argument_list|)
condition|)
comment|// commitMerge will return false if this merge was aborted
return|return
literal|0
return|;
if|if
condition|(
name|merge
operator|.
name|useCompoundFile
condition|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
name|boolean
name|skip
init|=
literal|false
decl_stmt|;
specifier|final
name|String
name|compoundFileName
init|=
name|mergedName
operator|+
literal|"."
operator|+
name|IndexFileNames
operator|.
name|COMPOUND_FILE_EXTENSION
decl_stmt|;
try|try
block|{
try|try
block|{
name|merger
operator|.
name|createCompoundFile
argument_list|(
name|compoundFileName
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|segmentInfos
operator|.
name|indexOf
argument_list|(
name|merge
operator|.
name|info
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
comment|// If another merge kicked in and merged our
comment|// new segment away while we were trying to
comment|// build the compound file, we can hit a
comment|// FileNotFoundException and possibly
comment|// IOException over NFS.  We can tell this has
comment|// happened because our SegmentInfo is no
comment|// longer in the segments; if this has
comment|// happened it is safe to ignore the exception
comment|//& skip finishing/committing our compound
comment|// file creating.
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"hit exception creating compound file; ignoring it because our info (segment "
operator|+
name|merge
operator|.
name|info
operator|.
name|name
operator|+
literal|") has been merged away"
argument_list|)
expr_stmt|;
name|skip
operator|=
literal|true
expr_stmt|;
block|}
else|else
throw|throw
name|ioe
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"hit exception creating compound file during merge: skip="
operator|+
name|skip
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
operator|!
name|skip
condition|)
name|addMergeException
argument_list|(
name|merge
argument_list|)
expr_stmt|;
name|deleter
operator|.
name|deleteFile
argument_list|(
name|compoundFileName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|skip
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|skip
operator|||
name|segmentInfos
operator|.
name|indexOf
argument_list|(
name|merge
operator|.
name|info
argument_list|)
operator|==
operator|-
literal|1
operator|||
name|merge
operator|.
name|isAborted
argument_list|()
condition|)
block|{
comment|// Our segment (committed in non-compound
comment|// format) got merged away while we were
comment|// building the compound format.
name|deleter
operator|.
name|deleteFile
argument_list|(
name|compoundFileName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|success
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|merge
operator|.
name|info
operator|.
name|setUseCompoundFile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|checkpoint
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"hit exception checkpointing compound file during merge"
argument_list|)
expr_stmt|;
comment|// Must rollback:
name|addMergeException
argument_list|(
name|merge
argument_list|)
expr_stmt|;
name|merge
operator|.
name|info
operator|.
name|setUseCompoundFile
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|deletePartialSegmentsFile
argument_list|()
expr_stmt|;
name|deleter
operator|.
name|deleteFile
argument_list|(
name|compoundFileName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Give deleter a chance to remove files now.
name|deleter
operator|.
name|checkpoint
argument_list|(
name|segmentInfos
argument_list|,
name|autoCommit
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|mergedDocCount
return|;
block|}
DECL|method|addMergeException
specifier|synchronized
name|void
name|addMergeException
parameter_list|(
name|MergePolicy
operator|.
name|OneMerge
name|merge
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mergeExceptions
operator|.
name|contains
argument_list|(
name|merge
argument_list|)
operator|&&
name|mergeGen
operator|==
name|merge
operator|.
name|mergeGen
condition|)
name|mergeExceptions
operator|.
name|add
argument_list|(
name|merge
argument_list|)
expr_stmt|;
block|}
DECL|method|deletePartialSegmentsFile
specifier|private
name|void
name|deletePartialSegmentsFile
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|segmentInfos
operator|.
name|getLastGeneration
argument_list|()
operator|!=
name|segmentInfos
operator|.
name|getGeneration
argument_list|()
condition|)
block|{
name|String
name|segmentFileName
init|=
name|IndexFileNames
operator|.
name|fileNameFromGeneration
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS
argument_list|,
literal|""
argument_list|,
name|segmentInfos
operator|.
name|getGeneration
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"now delete partial segments file \""
operator|+
name|segmentFileName
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|deleter
operator|.
name|deleteFile
argument_list|(
name|segmentFileName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Called during flush to apply any buffered deletes.  If
comment|// flushedNewSegment is true then a new segment was just
comment|// created and flushed from the ram segments, so we will
comment|// selectively apply the deletes to that new segment.
DECL|method|applyDeletes
specifier|private
specifier|final
name|void
name|applyDeletes
parameter_list|(
name|boolean
name|flushedNewSegment
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
specifier|final
name|HashMap
name|bufferedDeleteTerms
init|=
name|docWriter
operator|.
name|getBufferedDeleteTerms
argument_list|()
decl_stmt|;
specifier|final
name|List
name|bufferedDeleteDocIDs
init|=
name|docWriter
operator|.
name|getBufferedDeleteDocIDs
argument_list|()
decl_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|message
argument_list|(
literal|"flush "
operator|+
name|docWriter
operator|.
name|getNumBufferedDeleteTerms
argument_list|()
operator|+
literal|" buffered deleted terms and "
operator|+
name|bufferedDeleteDocIDs
operator|.
name|size
argument_list|()
operator|+
literal|" deleted docIDs on "
operator|+
name|segmentInfos
operator|.
name|size
argument_list|()
operator|+
literal|" segments."
argument_list|)
expr_stmt|;
if|if
condition|(
name|flushedNewSegment
condition|)
block|{
name|IndexReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Open readers w/o opening the stored fields /
comment|// vectors because these files may still be held
comment|// open for writing by docWriter
name|reader
operator|=
name|SegmentReader
operator|.
name|get
argument_list|(
name|segmentInfos
operator|.
name|info
argument_list|(
name|segmentInfos
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Apply delete terms to the segment just flushed from ram
comment|// apply appropriately so that a delete term is only applied to
comment|// the documents buffered before it, not those buffered after it.
name|applyDeletesSelectively
argument_list|(
name|bufferedDeleteTerms
argument_list|,
name|bufferedDeleteDocIDs
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|reader
operator|.
name|doCommit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|doClose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
name|int
name|infosEnd
init|=
name|segmentInfos
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|flushedNewSegment
condition|)
block|{
name|infosEnd
operator|--
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|infosEnd
condition|;
name|i
operator|++
control|)
block|{
name|IndexReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|SegmentReader
operator|.
name|get
argument_list|(
name|segmentInfos
operator|.
name|info
argument_list|(
name|i
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Apply delete terms to disk segments
comment|// except the one just flushed from ram.
name|applyDeletes
argument_list|(
name|bufferedDeleteTerms
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|reader
operator|.
name|doCommit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|doClose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Clean up bufferedDeleteTerms.
name|docWriter
operator|.
name|clearBufferedDeletes
argument_list|()
expr_stmt|;
block|}
comment|// For test purposes.
DECL|method|getBufferedDeleteTermsSize
specifier|final
specifier|synchronized
name|int
name|getBufferedDeleteTermsSize
parameter_list|()
block|{
return|return
name|docWriter
operator|.
name|getBufferedDeleteTerms
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
comment|// For test purposes.
DECL|method|getNumBufferedDeleteTerms
specifier|final
specifier|synchronized
name|int
name|getNumBufferedDeleteTerms
parameter_list|()
block|{
return|return
name|docWriter
operator|.
name|getNumBufferedDeleteTerms
argument_list|()
return|;
block|}
comment|// Apply buffered delete terms to the segment just flushed from ram
comment|// apply appropriately so that a delete term is only applied to
comment|// the documents buffered before it, not those buffered after it.
DECL|method|applyDeletesSelectively
specifier|private
specifier|final
name|void
name|applyDeletesSelectively
parameter_list|(
name|HashMap
name|deleteTerms
parameter_list|,
name|List
name|deleteIds
parameter_list|,
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|Iterator
name|iter
init|=
name|deleteTerms
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
name|entry
init|=
operator|(
name|Entry
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Term
name|term
init|=
operator|(
name|Term
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|TermDocs
name|docs
init|=
name|reader
operator|.
name|termDocs
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|docs
operator|!=
literal|null
condition|)
block|{
name|int
name|num
init|=
operator|(
operator|(
name|DocumentsWriter
operator|.
name|Num
operator|)
name|entry
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|getNum
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
name|docs
operator|.
name|next
argument_list|()
condition|)
block|{
name|int
name|doc
init|=
name|docs
operator|.
name|doc
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|>=
name|num
condition|)
block|{
break|break;
block|}
name|reader
operator|.
name|deleteDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|docs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|deleteIds
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|iter
operator|=
name|deleteIds
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
name|reader
operator|.
name|deleteDocument
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|iter
operator|.
name|next
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Apply buffered delete terms to this reader.
DECL|method|applyDeletes
specifier|private
specifier|final
name|void
name|applyDeletes
parameter_list|(
name|HashMap
name|deleteTerms
parameter_list|,
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|Iterator
name|iter
init|=
name|deleteTerms
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
name|entry
init|=
operator|(
name|Entry
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|reader
operator|.
name|deleteDocuments
argument_list|(
operator|(
name|Term
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// utility routines for tests
DECL|method|newestSegment
name|SegmentInfo
name|newestSegment
parameter_list|()
block|{
return|return
name|segmentInfos
operator|.
name|info
argument_list|(
name|segmentInfos
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|segString
specifier|public
specifier|synchronized
name|String
name|segString
parameter_list|()
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|segmentInfos
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|segmentInfos
operator|.
name|info
argument_list|(
name|i
argument_list|)
operator|.
name|segString
argument_list|(
name|directory
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class
end_unit
