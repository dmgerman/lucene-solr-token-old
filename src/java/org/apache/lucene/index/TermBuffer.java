begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import
begin_class
DECL|class|TermBuffer
specifier|final
class|class
name|TermBuffer
implements|implements
name|Cloneable
block|{
DECL|field|field
specifier|private
name|String
name|field
decl_stmt|;
DECL|field|term
specifier|private
name|Term
name|term
decl_stmt|;
comment|// cached
DECL|field|preUTF8Strings
specifier|private
name|boolean
name|preUTF8Strings
decl_stmt|;
comment|// true if strings are stored in modified UTF8 encoding (LUCENE-510)
DECL|field|dirty
specifier|private
name|boolean
name|dirty
decl_stmt|;
comment|// true if text was set externally (ie not read via UTF8 bytes)
DECL|field|text
specifier|private
name|UnicodeUtil
operator|.
name|UTF16Result
name|text
init|=
operator|new
name|UnicodeUtil
operator|.
name|UTF16Result
argument_list|()
decl_stmt|;
DECL|field|bytes
specifier|private
name|UnicodeUtil
operator|.
name|UTF8Result
name|bytes
init|=
operator|new
name|UnicodeUtil
operator|.
name|UTF8Result
argument_list|()
decl_stmt|;
DECL|method|compareTo
specifier|public
specifier|final
name|int
name|compareTo
parameter_list|(
name|TermBuffer
name|other
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
name|other
operator|.
name|field
condition|)
comment|// fields are interned
return|return
name|compareChars
argument_list|(
name|text
operator|.
name|result
argument_list|,
name|text
operator|.
name|length
argument_list|,
name|other
operator|.
name|text
operator|.
name|result
argument_list|,
name|other
operator|.
name|text
operator|.
name|length
argument_list|)
return|;
else|else
return|return
name|field
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|field
argument_list|)
return|;
block|}
DECL|method|compareChars
specifier|private
specifier|static
specifier|final
name|int
name|compareChars
parameter_list|(
name|char
index|[]
name|chars1
parameter_list|,
name|int
name|len1
parameter_list|,
name|char
index|[]
name|chars2
parameter_list|,
name|int
name|len2
parameter_list|)
block|{
specifier|final
name|int
name|end
init|=
name|len1
operator|<
name|len2
condition|?
name|len1
else|:
name|len2
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|end
condition|;
name|k
operator|++
control|)
block|{
name|char
name|c1
init|=
name|chars1
index|[
name|k
index|]
decl_stmt|;
name|char
name|c2
init|=
name|chars2
index|[
name|k
index|]
decl_stmt|;
if|if
condition|(
name|c1
operator|!=
name|c2
condition|)
block|{
return|return
name|c1
operator|-
name|c2
return|;
block|}
block|}
return|return
name|len1
operator|-
name|len2
return|;
block|}
comment|/** Call this if the IndexInput passed to {@link #read}    *  stores terms in the "modified UTF8" (pre LUCENE-510)    *  format. */
DECL|method|setPreUTF8Strings
name|void
name|setPreUTF8Strings
parameter_list|()
block|{
name|preUTF8Strings
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|read
specifier|public
specifier|final
name|void
name|read
parameter_list|(
name|IndexInput
name|input
parameter_list|,
name|FieldInfos
name|fieldInfos
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|term
operator|=
literal|null
expr_stmt|;
comment|// invalidate cache
name|int
name|start
init|=
name|input
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|input
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|int
name|totalLength
init|=
name|start
operator|+
name|length
decl_stmt|;
if|if
condition|(
name|preUTF8Strings
condition|)
block|{
name|text
operator|.
name|setLength
argument_list|(
name|totalLength
argument_list|)
expr_stmt|;
name|input
operator|.
name|readChars
argument_list|(
name|text
operator|.
name|result
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|dirty
condition|)
block|{
comment|// Fully convert all bytes since bytes is dirty
name|UnicodeUtil
operator|.
name|UTF16toUTF8
argument_list|(
name|text
operator|.
name|result
argument_list|,
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|bytes
operator|.
name|setLength
argument_list|(
name|totalLength
argument_list|)
expr_stmt|;
name|input
operator|.
name|readBytes
argument_list|(
name|bytes
operator|.
name|result
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|UnicodeUtil
operator|.
name|UTF8toUTF16
argument_list|(
name|bytes
operator|.
name|result
argument_list|,
literal|0
argument_list|,
name|totalLength
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|dirty
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|// Incrementally convert only the UTF8 bytes that are new:
name|bytes
operator|.
name|setLength
argument_list|(
name|totalLength
argument_list|)
expr_stmt|;
name|input
operator|.
name|readBytes
argument_list|(
name|bytes
operator|.
name|result
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|UnicodeUtil
operator|.
name|UTF8toUTF16
argument_list|(
name|bytes
operator|.
name|result
argument_list|,
name|start
argument_list|,
name|length
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|field
operator|=
name|fieldInfos
operator|.
name|fieldName
argument_list|(
name|input
operator|.
name|readVInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|set
specifier|public
specifier|final
name|void
name|set
parameter_list|(
name|Term
name|term
parameter_list|)
block|{
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
name|reset
argument_list|()
expr_stmt|;
return|return;
block|}
specifier|final
name|String
name|termText
init|=
name|term
operator|.
name|text
argument_list|()
decl_stmt|;
specifier|final
name|int
name|termLen
init|=
name|termText
operator|.
name|length
argument_list|()
decl_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|termLen
argument_list|)
expr_stmt|;
name|termText
operator|.
name|getChars
argument_list|(
literal|0
argument_list|,
name|termLen
argument_list|,
name|text
operator|.
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dirty
operator|=
literal|true
expr_stmt|;
name|field
operator|=
name|term
operator|.
name|field
argument_list|()
expr_stmt|;
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
block|}
DECL|method|set
specifier|public
specifier|final
name|void
name|set
parameter_list|(
name|TermBuffer
name|other
parameter_list|)
block|{
name|text
operator|.
name|copyText
argument_list|(
name|other
operator|.
name|text
argument_list|)
expr_stmt|;
name|dirty
operator|=
literal|true
expr_stmt|;
name|field
operator|=
name|other
operator|.
name|field
expr_stmt|;
name|term
operator|=
name|other
operator|.
name|term
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|field
operator|=
literal|null
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|term
operator|=
literal|null
expr_stmt|;
name|dirty
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|toTerm
specifier|public
name|Term
name|toTerm
parameter_list|()
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
comment|// unset
return|return
literal|null
return|;
if|if
condition|(
name|term
operator|==
literal|null
condition|)
name|term
operator|=
operator|new
name|Term
argument_list|(
name|field
argument_list|,
operator|new
name|String
argument_list|(
name|text
operator|.
name|result
argument_list|,
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|term
return|;
block|}
DECL|method|clone
specifier|protected
name|Object
name|clone
parameter_list|()
block|{
name|TermBuffer
name|clone
init|=
literal|null
decl_stmt|;
try|try
block|{
name|clone
operator|=
operator|(
name|TermBuffer
operator|)
name|super
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{}
name|clone
operator|.
name|dirty
operator|=
literal|true
expr_stmt|;
name|clone
operator|.
name|bytes
operator|=
operator|new
name|UnicodeUtil
operator|.
name|UTF8Result
argument_list|()
expr_stmt|;
name|clone
operator|.
name|text
operator|=
operator|new
name|UnicodeUtil
operator|.
name|UTF16Result
argument_list|()
expr_stmt|;
name|clone
operator|.
name|text
operator|.
name|copyText
argument_list|(
name|text
argument_list|)
expr_stmt|;
return|return
name|clone
return|;
block|}
block|}
end_class
end_unit
