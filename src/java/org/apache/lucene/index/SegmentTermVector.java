begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  */
end_comment
begin_class
DECL|class|SegmentTermVector
class|class
name|SegmentTermVector
implements|implements
name|TermFreqVector
block|{
DECL|field|field
specifier|private
name|String
name|field
decl_stmt|;
DECL|field|terms
specifier|private
name|String
name|terms
index|[]
decl_stmt|;
DECL|field|termFreqs
specifier|private
name|int
name|termFreqs
index|[]
decl_stmt|;
DECL|method|SegmentTermVector
name|SegmentTermVector
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|terms
index|[]
parameter_list|,
name|int
name|termFreqs
index|[]
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|terms
operator|=
name|terms
expr_stmt|;
name|this
operator|.
name|termFreqs
operator|=
name|termFreqs
expr_stmt|;
block|}
comment|/**    *     * @return The number of the field this vector is associated with    */
DECL|method|getField
specifier|public
name|String
name|getField
parameter_list|()
block|{
return|return
name|field
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|field
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|terms
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|termFreqs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|IndexReader
name|ir
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toString
argument_list|()
return|;
comment|/*StringBuffer sb = new StringBuffer();     //TODO: Reimplement      sb.append('{');     sb.append(field).append(": ");     for (int i=0; i<terms.length; i++) {     if (i>0) sb.append(", ");     Term t = ir.getTerm(terms[i]);     String text = t == null ? "UNKNOWN(" + i + ")" : t.text;     sb.append(text).append('/').append(termFreqs[i]);     if (termProx != null) appendTermProx(sb.append('/'), termProx[i]);     }     sb.append('}');     return sb.toString();*/
block|}
comment|/** Number of terms in the term vector. If there are no terms in the    *  vector, returns 0.    */
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|terms
operator|==
literal|null
condition|?
literal|0
else|:
name|terms
operator|.
name|length
return|;
block|}
comment|/** Array of term numbers in ascending order. If there are no terms in    *  the vector, returns null.    */
DECL|method|getTerms
specifier|public
name|String
index|[]
name|getTerms
parameter_list|()
block|{
return|return
name|terms
return|;
block|}
comment|/** Array of term frequencies. Locations of the array correspond one to one    *  to the term numbers in the array obtained from<code>getTermNumbers</code>    *  method. Each location in the array contains the number of times this    *  term occurs in the document or the document field. If there are no terms in    *  the vector, returns null.    */
DECL|method|getTermFrequencies
specifier|public
name|int
index|[]
name|getTermFrequencies
parameter_list|()
block|{
return|return
name|termFreqs
return|;
block|}
comment|/** Return an index in the term numbers array returned from<code>getTermNumbers</code>    *  at which the term with the specified<code>termNumber</code> appears. If this    *  term does not appear in the array, return -1.    */
DECL|method|indexOf
specifier|public
name|int
name|indexOf
parameter_list|(
name|String
name|termText
parameter_list|)
block|{
name|int
name|res
init|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|terms
argument_list|,
name|termText
argument_list|)
decl_stmt|;
return|return
name|res
operator|>=
literal|0
condition|?
name|res
else|:
operator|-
literal|1
return|;
block|}
comment|/** Just like<code>indexOf(int)</code> but searches for a number of terms    *  at the same time. Returns an array that has the same size as the number    *  of terms searched for, each slot containing the result of searching for    *  that term number. Array of term numbers must be sorted in ascending order.    *    *  @param termNumbers array containing term numbers to look for    *  @param start index in the array where the list of termNumbers starts    *  @param len the number of termNumbers in the list    */
DECL|method|indexesOf
specifier|public
name|int
index|[]
name|indexesOf
parameter_list|(
name|String
index|[]
name|termNumbers
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|)
block|{
comment|// TODO: there must be a more efficient way of doing this.
comment|//       At least, we could advance the lower bound of the terms array
comment|//       as we find valid indexes. Also, it might be possible to leverage
comment|//       this even more by starting in the middle of the termNumbers array
comment|//       and thus dividing the terms array maybe in half with each found index.
name|int
name|res
index|[]
init|=
operator|new
name|int
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|res
index|[
name|i
index|]
operator|=
name|indexOf
argument_list|(
name|termNumbers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
block|}
end_class
end_unit
