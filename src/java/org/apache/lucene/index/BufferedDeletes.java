begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_comment
comment|/** Holds buffered deletes, by docID, term or query.  We  *  hold two instances of this class: one for the deletes  *  prior to the last flush, the other for deletes after  *  the last flush.  This is so if we need to abort  *  (discard all buffered docs) we can also discard the  *  buffered deletes yet keep the deletes done during  *  previously flushed segments. */
end_comment
begin_class
DECL|class|BufferedDeletes
class|class
name|BufferedDeletes
block|{
DECL|field|numTerms
name|int
name|numTerms
decl_stmt|;
DECL|field|terms
name|HashMap
argument_list|<
name|Term
argument_list|,
name|Num
argument_list|>
name|terms
init|=
operator|new
name|HashMap
argument_list|<
name|Term
argument_list|,
name|Num
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|queries
name|HashMap
argument_list|<
name|Query
argument_list|,
name|Integer
argument_list|>
name|queries
init|=
operator|new
name|HashMap
argument_list|<
name|Query
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|docIDs
name|List
argument_list|<
name|Integer
argument_list|>
name|docIDs
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|bytesUsed
name|long
name|bytesUsed
decl_stmt|;
comment|// Number of documents a delete term applies to.
DECL|class|Num
specifier|final
specifier|static
class|class
name|Num
block|{
DECL|field|num
specifier|private
name|int
name|num
decl_stmt|;
DECL|method|Num
name|Num
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|this
operator|.
name|num
operator|=
name|num
expr_stmt|;
block|}
DECL|method|getNum
name|int
name|getNum
parameter_list|()
block|{
return|return
name|num
return|;
block|}
DECL|method|setNum
name|void
name|setNum
parameter_list|(
name|int
name|num
parameter_list|)
block|{
comment|// Only record the new number if it's greater than the
comment|// current one.  This is important because if multiple
comment|// threads are replacing the same doc at nearly the
comment|// same time, it's possible that one thread that got a
comment|// higher docID is scheduled before the other
comment|// threads.
if|if
condition|(
name|num
operator|>
name|this
operator|.
name|num
condition|)
name|this
operator|.
name|num
operator|=
name|num
expr_stmt|;
block|}
block|}
DECL|method|size
name|int
name|size
parameter_list|()
block|{
comment|// We use numTerms not terms.size() intentionally, so
comment|// that deletes by the same term multiple times "count",
comment|// ie if you ask to flush every 1000 deletes then even
comment|// dup'd terms are counted towards that 1000
return|return
name|numTerms
operator|+
name|queries
operator|.
name|size
argument_list|()
operator|+
name|docIDs
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|update
name|void
name|update
parameter_list|(
name|BufferedDeletes
name|in
parameter_list|)
block|{
name|numTerms
operator|+=
name|in
operator|.
name|numTerms
expr_stmt|;
name|bytesUsed
operator|+=
name|in
operator|.
name|bytesUsed
expr_stmt|;
name|terms
operator|.
name|putAll
argument_list|(
name|in
operator|.
name|terms
argument_list|)
expr_stmt|;
name|queries
operator|.
name|putAll
argument_list|(
name|in
operator|.
name|queries
argument_list|)
expr_stmt|;
name|docIDs
operator|.
name|addAll
argument_list|(
name|in
operator|.
name|docIDs
argument_list|)
expr_stmt|;
name|in
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|clear
name|void
name|clear
parameter_list|()
block|{
name|terms
operator|.
name|clear
argument_list|()
expr_stmt|;
name|queries
operator|.
name|clear
argument_list|()
expr_stmt|;
name|docIDs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|numTerms
operator|=
literal|0
expr_stmt|;
name|bytesUsed
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|addBytesUsed
name|void
name|addBytesUsed
parameter_list|(
name|long
name|b
parameter_list|)
block|{
name|bytesUsed
operator|+=
name|b
expr_stmt|;
block|}
DECL|method|any
name|boolean
name|any
parameter_list|()
block|{
return|return
name|terms
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|||
name|docIDs
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|||
name|queries
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
comment|// Remaps all buffered deletes based on a completed
comment|// merge
DECL|method|remap
specifier|synchronized
name|void
name|remap
parameter_list|(
name|MergeDocIDRemapper
name|mapper
parameter_list|,
name|SegmentInfos
name|infos
parameter_list|,
name|int
index|[]
index|[]
name|docMaps
parameter_list|,
name|int
index|[]
name|delCounts
parameter_list|,
name|MergePolicy
operator|.
name|OneMerge
name|merge
parameter_list|,
name|int
name|mergeDocCount
parameter_list|)
block|{
specifier|final
name|HashMap
argument_list|<
name|Term
argument_list|,
name|Num
argument_list|>
name|newDeleteTerms
decl_stmt|;
comment|// Remap delete-by-term
if|if
condition|(
name|terms
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|newDeleteTerms
operator|=
operator|new
name|HashMap
argument_list|<
name|Term
argument_list|,
name|Num
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Term
argument_list|,
name|Num
argument_list|>
name|entry
range|:
name|terms
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Num
name|num
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|newDeleteTerms
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|Num
argument_list|(
name|mapper
operator|.
name|remap
argument_list|(
name|num
operator|.
name|getNum
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|newDeleteTerms
operator|=
literal|null
expr_stmt|;
comment|// Remap delete-by-docID
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|newDeleteDocIDs
decl_stmt|;
if|if
condition|(
name|docIDs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|newDeleteDocIDs
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|docIDs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Integer
name|num
range|:
name|docIDs
control|)
block|{
name|newDeleteDocIDs
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|mapper
operator|.
name|remap
argument_list|(
name|num
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|newDeleteDocIDs
operator|=
literal|null
expr_stmt|;
comment|// Remap delete-by-query
specifier|final
name|HashMap
argument_list|<
name|Query
argument_list|,
name|Integer
argument_list|>
name|newDeleteQueries
decl_stmt|;
if|if
condition|(
name|queries
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|newDeleteQueries
operator|=
operator|new
name|HashMap
argument_list|<
name|Query
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|queries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Query
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|queries
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Integer
name|num
init|=
operator|(
name|Integer
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|newDeleteQueries
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|mapper
operator|.
name|remap
argument_list|(
name|num
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|newDeleteQueries
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|newDeleteTerms
operator|!=
literal|null
condition|)
name|terms
operator|=
name|newDeleteTerms
expr_stmt|;
if|if
condition|(
name|newDeleteDocIDs
operator|!=
literal|null
condition|)
name|docIDs
operator|=
name|newDeleteDocIDs
expr_stmt|;
if|if
condition|(
name|newDeleteQueries
operator|!=
literal|null
condition|)
name|queries
operator|=
name|newDeleteQueries
expr_stmt|;
block|}
block|}
end_class
end_unit
