begin_unit
begin_package
DECL|package|org.apache.lucene.benchmark.byTask.tasks
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|tasks
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|PerfRunData
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|feeds
operator|.
name|DocMaker
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|utils
operator|.
name|StreamUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * A {@link WriteLineDocTask} which for Wikipedia input, will write category pages   * to  another file, while remaining pages will be written to the original file.  * The categories file is derived from the original file, by adding a prefix "categories-".   */
end_comment
begin_class
DECL|class|WriteEnwikiLineDocTask
specifier|public
class|class
name|WriteEnwikiLineDocTask
extends|extends
name|WriteLineDocTask
block|{
DECL|field|categoryLineFileOut
specifier|private
specifier|final
name|PrintWriter
name|categoryLineFileOut
decl_stmt|;
DECL|method|WriteEnwikiLineDocTask
specifier|public
name|WriteEnwikiLineDocTask
parameter_list|(
name|PerfRunData
name|runData
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|runData
argument_list|)
expr_stmt|;
name|OutputStream
name|out
init|=
name|StreamUtils
operator|.
name|outputStream
argument_list|(
name|categoriesLineFile
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|fname
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|categoryLineFileOut
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|out
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
name|StreamUtils
operator|.
name|BUFFER_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|writeHeader
argument_list|(
name|categoryLineFileOut
argument_list|)
expr_stmt|;
block|}
comment|/** Compose categories line file out of original line file */
DECL|method|categoriesLineFile
specifier|public
specifier|static
name|Path
name|categoriesLineFile
parameter_list|(
name|Path
name|f
parameter_list|)
block|{
name|Path
name|dir
init|=
name|f
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|String
name|categoriesName
init|=
literal|"categories-"
operator|+
name|f
operator|.
name|getFileName
argument_list|()
decl_stmt|;
return|return
name|dir
operator|.
name|resolve
argument_list|(
name|categoriesName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
name|categoryLineFileOut
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|lineFileOut
specifier|protected
name|PrintWriter
name|lineFileOut
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
name|IndexableField
name|titleField
init|=
name|doc
operator|.
name|getField
argument_list|(
name|DocMaker
operator|.
name|TITLE_FIELD
argument_list|)
decl_stmt|;
if|if
condition|(
name|titleField
operator|!=
literal|null
operator|&&
name|titleField
operator|.
name|stringValue
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Category:"
argument_list|)
condition|)
block|{
return|return
name|categoryLineFileOut
return|;
block|}
return|return
name|super
operator|.
name|lineFileOut
argument_list|(
name|doc
argument_list|)
return|;
block|}
block|}
end_class
end_unit
