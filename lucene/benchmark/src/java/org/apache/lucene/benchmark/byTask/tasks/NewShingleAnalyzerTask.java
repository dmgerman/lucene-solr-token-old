begin_unit
begin_package
DECL|package|org.apache.lucene.benchmark.byTask.tasks
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|tasks
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|shingle
operator|.
name|ShingleAnalyzerWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|shingle
operator|.
name|ShingleFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|PerfRunData
import|;
end_import
begin_comment
comment|/**  * Task to support benchmarking ShingleFilter / ShingleAnalyzerWrapper  *<p>  *<ul>  *<li><code>NewShingleAnalyzer</code> (constructs with all defaults)  *<li><code>NewShingleAnalyzer(analyzer:o.a.l.analysis.StandardAnalyzer,maxShingleSize:2,outputUnigrams:true)</code>  *</ul>  *</p>  */
end_comment
begin_class
DECL|class|NewShingleAnalyzerTask
specifier|public
class|class
name|NewShingleAnalyzerTask
extends|extends
name|PerfTask
block|{
DECL|field|analyzerClassName
specifier|private
name|String
name|analyzerClassName
init|=
literal|"standard.StandardAnalyzer"
decl_stmt|;
DECL|field|maxShingleSize
specifier|private
name|int
name|maxShingleSize
init|=
literal|2
decl_stmt|;
DECL|field|outputUnigrams
specifier|private
name|boolean
name|outputUnigrams
init|=
literal|true
decl_stmt|;
DECL|method|NewShingleAnalyzerTask
specifier|public
name|NewShingleAnalyzerTask
parameter_list|(
name|PerfRunData
name|runData
parameter_list|)
block|{
name|super
argument_list|(
name|runData
argument_list|)
expr_stmt|;
block|}
DECL|method|setAnalyzer
specifier|private
name|void
name|setAnalyzer
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|wrappedAnalyzer
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|analyzerClassName
operator|||
literal|0
operator|==
name|analyzerClassName
operator|.
name|length
argument_list|()
condition|)
block|{
name|analyzerClassName
operator|=
literal|"org.apache.lucene.analysis.standard.StandardAnalyzer"
expr_stmt|;
block|}
if|if
condition|(
operator|-
literal|1
operator|==
name|analyzerClassName
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|String
name|coreClassName
init|=
literal|"org.apache.lucene.analysis.core."
operator|+
name|analyzerClassName
decl_stmt|;
try|try
block|{
comment|// If there is no package, first attempt to instantiate a core analyzer
name|wrappedAnalyzer
operator|=
name|NewAnalyzerTask
operator|.
name|createAnalyzer
argument_list|(
name|coreClassName
argument_list|)
expr_stmt|;
name|analyzerClassName
operator|=
name|coreClassName
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// If this is not a core analyzer, try the base analysis package
name|analyzerClassName
operator|=
literal|"org.apache.lucene.analysis."
operator|+
name|analyzerClassName
expr_stmt|;
name|wrappedAnalyzer
operator|=
name|NewAnalyzerTask
operator|.
name|createAnalyzer
argument_list|(
name|analyzerClassName
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|analyzerClassName
operator|.
name|startsWith
argument_list|(
literal|"standard."
argument_list|)
condition|)
block|{
name|analyzerClassName
operator|=
literal|"org.apache.lucene.analysis."
operator|+
name|analyzerClassName
expr_stmt|;
block|}
name|wrappedAnalyzer
operator|=
name|NewAnalyzerTask
operator|.
name|createAnalyzer
argument_list|(
name|analyzerClassName
argument_list|)
expr_stmt|;
block|}
name|ShingleAnalyzerWrapper
name|analyzer
init|=
operator|new
name|ShingleAnalyzerWrapper
argument_list|(
name|wrappedAnalyzer
argument_list|,
name|ShingleFilter
operator|.
name|DEFAULT_MIN_SHINGLE_SIZE
argument_list|,
name|maxShingleSize
argument_list|,
name|ShingleFilter
operator|.
name|TOKEN_SEPARATOR
argument_list|,
name|outputUnigrams
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|getRunData
argument_list|()
operator|.
name|setAnalyzer
argument_list|(
name|analyzer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doLogic
specifier|public
name|int
name|doLogic
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|setAnalyzer
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Changed Analyzer to: ShingleAnalyzerWrapper, wrapping ShingleFilter over "
operator|+
name|analyzerClassName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error creating Analyzer"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|setParams
specifier|public
name|void
name|setParams
parameter_list|(
name|String
name|params
parameter_list|)
block|{
name|super
operator|.
name|setParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|params
argument_list|,
literal|","
argument_list|)
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|param
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|StringTokenizer
name|expr
init|=
operator|new
name|StringTokenizer
argument_list|(
name|param
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|expr
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|expr
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"analyzer"
argument_list|)
condition|)
block|{
name|analyzerClassName
operator|=
name|value
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"outputUnigrams"
argument_list|)
condition|)
block|{
name|outputUnigrams
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"maxShingleSize"
argument_list|)
condition|)
block|{
name|maxShingleSize
operator|=
operator|(
name|int
operator|)
name|Double
operator|.
name|parseDouble
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown parameter "
operator|+
name|param
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|supportsParams
specifier|public
name|boolean
name|supportsParams
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
