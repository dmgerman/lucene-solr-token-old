begin_unit
begin_package
DECL|package|org.apache.lucene.benchmark.byTask.feeds.demohtml
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|feeds
operator|.
name|demohtml
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import
begin_class
DECL|class|ParserThread
class|class
name|ParserThread
extends|extends
name|Thread
block|{
DECL|field|parser
name|HTMLParser
name|parser
decl_stmt|;
DECL|method|ParserThread
name|ParserThread
parameter_list|(
name|HTMLParser
name|p
parameter_list|)
block|{
name|parser
operator|=
name|p
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// convert pipeOut to pipeIn
try|try
block|{
try|try
block|{
comment|// parse document to pipeOut
name|parser
operator|.
name|HTMLDocument
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Parse Aborted: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TokenMgrError
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Parse Aborted: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|parser
operator|.
name|pipeOut
operator|.
name|close
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|parser
init|)
block|{
name|parser
operator|.
name|summary
operator|.
name|setLength
argument_list|(
name|HTMLParser
operator|.
name|SUMMARY_LENGTH
argument_list|)
expr_stmt|;
name|parser
operator|.
name|titleComplete
operator|=
literal|true
expr_stmt|;
name|parser
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
