begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.benchmark.quality
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|quality
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/**  * A QualityQuery has an ID and some name-value pairs.  *<p>   * The ID allows to map the quality query with its judgements.  *<p>  * The name-value pairs are used by a   * {@link org.apache.lucene.benchmark.quality.QualityQueryParser}  * to create a Lucene {@link org.apache.lucene.search.Query}.  *<p>  * It is very likely that name-value-pairs would be mapped into fields in a Lucene query,  * but it is up to the QualityQueryParser how to map - e.g. all values in a single field,   * or each pair as its own field, etc., - and this of course must match the way the   * searched index was constructed.  */
end_comment
begin_class
DECL|class|QualityQuery
specifier|public
class|class
name|QualityQuery
implements|implements
name|Comparable
argument_list|<
name|QualityQuery
argument_list|>
block|{
DECL|field|queryID
specifier|private
name|String
name|queryID
decl_stmt|;
DECL|field|nameValPairs
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nameValPairs
decl_stmt|;
comment|/**    * Create a QualityQuery with given ID and name-value pairs.    * @param queryID ID of this quality query.    * @param nameValPairs the contents of this quality query.    */
DECL|method|QualityQuery
specifier|public
name|QualityQuery
parameter_list|(
name|String
name|queryID
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nameValPairs
parameter_list|)
block|{
name|this
operator|.
name|queryID
operator|=
name|queryID
expr_stmt|;
name|this
operator|.
name|nameValPairs
operator|=
name|nameValPairs
expr_stmt|;
block|}
comment|/**    * Return all the names of name-value-pairs in this QualityQuery.    */
DECL|method|getNames
specifier|public
name|String
index|[]
name|getNames
parameter_list|()
block|{
return|return
name|nameValPairs
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/**    * Return the value of a certain name-value pair.    * @param name the name whose value should be returned.     */
DECL|method|getValue
specifier|public
name|String
name|getValue
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|nameValPairs
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    * Return the ID of this query.    * The ID allows to map the quality query with its judgements.    */
DECL|method|getQueryID
specifier|public
name|String
name|getQueryID
parameter_list|()
block|{
return|return
name|queryID
return|;
block|}
comment|/* for a nicer sort of input queries before running them.    * Try first as ints, fall back to string if not int. */
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|QualityQuery
name|other
parameter_list|)
block|{
try|try
block|{
comment|// compare as ints when ids ints
name|int
name|n
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|queryID
argument_list|)
decl_stmt|;
name|int
name|nOther
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|other
operator|.
name|queryID
argument_list|)
decl_stmt|;
return|return
name|n
operator|-
name|nOther
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// fall back to string comparison
return|return
name|queryID
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|queryID
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
