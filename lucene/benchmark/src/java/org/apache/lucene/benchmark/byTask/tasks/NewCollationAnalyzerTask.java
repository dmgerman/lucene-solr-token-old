begin_unit
begin_package
DECL|package|org.apache.lucene.benchmark.byTask.tasks
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|tasks
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|PerfRunData
import|;
end_import
begin_comment
comment|/**  * Task to support benchmarking collation.  *<br>  *<ul>  *<li><code>NewCollationAnalyzer</code> with the default jdk impl  *<li><code>NewCollationAnalyzer(impl:icu)</code> specify an impl (jdk,icu)  *</ul>  */
end_comment
begin_class
DECL|class|NewCollationAnalyzerTask
specifier|public
class|class
name|NewCollationAnalyzerTask
extends|extends
name|PerfTask
block|{
comment|/**    * Different Collation implementations: currently     * limited to what is provided in the JDK and ICU.    *     * @see<a href="http://site.icu-project.org/charts/collation-icu4j-sun">    *      Comparison of implementations</a>    */
DECL|enum|Implementation
specifier|public
enum|enum
name|Implementation
block|{
DECL|enum constant|JDK
name|JDK
argument_list|(
literal|"org.apache.lucene.collation.CollationKeyAnalyzer"
argument_list|,
literal|"java.text.Collator"
argument_list|)
block|,
DECL|enum constant|ICU
name|ICU
argument_list|(
literal|"org.apache.lucene.collation.ICUCollationKeyAnalyzer"
argument_list|,
literal|"com.ibm.icu.text.Collator"
argument_list|)
block|;
DECL|field|className
name|String
name|className
decl_stmt|;
DECL|field|collatorClassName
name|String
name|collatorClassName
decl_stmt|;
DECL|method|Implementation
name|Implementation
parameter_list|(
name|String
name|className
parameter_list|,
name|String
name|collatorClassName
parameter_list|)
block|{
name|this
operator|.
name|className
operator|=
name|className
expr_stmt|;
name|this
operator|.
name|collatorClassName
operator|=
name|collatorClassName
expr_stmt|;
block|}
block|}
DECL|field|impl
specifier|private
name|Implementation
name|impl
init|=
name|Implementation
operator|.
name|JDK
decl_stmt|;
DECL|method|NewCollationAnalyzerTask
specifier|public
name|NewCollationAnalyzerTask
parameter_list|(
name|PerfRunData
name|runData
parameter_list|)
block|{
name|super
argument_list|(
name|runData
argument_list|)
expr_stmt|;
block|}
DECL|method|createAnalyzer
specifier|static
name|Analyzer
name|createAnalyzer
parameter_list|(
name|Locale
name|locale
parameter_list|,
name|Implementation
name|impl
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|collatorClazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|impl
operator|.
name|collatorClassName
argument_list|)
decl_stmt|;
name|Method
name|collatorMethod
init|=
name|collatorClazz
operator|.
name|getMethod
argument_list|(
literal|"getInstance"
argument_list|,
name|Locale
operator|.
name|class
argument_list|)
decl_stmt|;
name|Object
name|collator
init|=
name|collatorMethod
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|locale
argument_list|)
decl_stmt|;
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Analyzer
argument_list|>
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|impl
operator|.
name|className
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|Analyzer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Constructor
argument_list|<
name|?
extends|extends
name|Analyzer
argument_list|>
name|ctor
init|=
name|clazz
operator|.
name|getConstructor
argument_list|(
name|collatorClazz
argument_list|)
decl_stmt|;
return|return
name|ctor
operator|.
name|newInstance
argument_list|(
name|collator
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doLogic
specifier|public
name|int
name|doLogic
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Locale
name|locale
init|=
name|getRunData
argument_list|()
operator|.
name|getLocale
argument_list|()
decl_stmt|;
if|if
condition|(
name|locale
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Locale must be set with the NewLocale task!"
argument_list|)
throw|;
name|Analyzer
name|analyzer
init|=
name|createAnalyzer
argument_list|(
name|locale
argument_list|,
name|impl
argument_list|)
decl_stmt|;
name|getRunData
argument_list|()
operator|.
name|setAnalyzer
argument_list|(
name|analyzer
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Changed Analyzer to: "
operator|+
name|analyzer
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"("
operator|+
name|locale
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error creating Analyzer: impl="
operator|+
name|impl
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|setParams
specifier|public
name|void
name|setParams
parameter_list|(
name|String
name|params
parameter_list|)
block|{
name|super
operator|.
name|setParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|params
argument_list|,
literal|","
argument_list|)
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|param
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|StringTokenizer
name|expr
init|=
operator|new
name|StringTokenizer
argument_list|(
name|param
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|expr
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|expr
operator|.
name|nextToken
argument_list|()
decl_stmt|;
comment|// for now we only support the "impl" parameter.
comment|// TODO: add strength, decomposition, etc
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"impl"
argument_list|)
condition|)
block|{
if|if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"icu"
argument_list|)
condition|)
name|impl
operator|=
name|Implementation
operator|.
name|ICU
expr_stmt|;
elseif|else
if|if
condition|(
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"jdk"
argument_list|)
condition|)
name|impl
operator|=
name|Implementation
operator|.
name|JDK
expr_stmt|;
else|else
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown parameter "
operator|+
name|param
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown parameter "
operator|+
name|param
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|supportsParams
specifier|public
name|boolean
name|supportsParams
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
