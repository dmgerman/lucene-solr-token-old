begin_unit
begin_package
DECL|package|org.apache.lucene.benchmark.utils
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|utils
package|;
end_package
begin_comment
comment|/*  * Copyright 2005 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_comment
comment|/**  * Split the Reuters SGML documents into Simple Text files containing: Title, Date, Dateline, Body  */
end_comment
begin_class
DECL|class|ExtractReuters
specifier|public
class|class
name|ExtractReuters
block|{
DECL|field|reutersDir
specifier|private
name|Path
name|reutersDir
decl_stmt|;
DECL|field|outputDir
specifier|private
name|Path
name|outputDir
decl_stmt|;
DECL|method|ExtractReuters
specifier|public
name|ExtractReuters
parameter_list|(
name|Path
name|reutersDir
parameter_list|,
name|Path
name|outputDir
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|reutersDir
operator|=
name|reutersDir
expr_stmt|;
name|this
operator|.
name|outputDir
operator|=
name|outputDir
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Deleting all files in "
operator|+
name|outputDir
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|rm
argument_list|(
name|outputDir
argument_list|)
expr_stmt|;
block|}
DECL|method|extract
specifier|public
name|void
name|extract
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|count
init|=
literal|0
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|outputDir
argument_list|)
expr_stmt|;
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|reutersDir
argument_list|,
literal|"*.sgm"
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|sgmFile
range|:
name|stream
control|)
block|{
name|extractFile
argument_list|(
name|sgmFile
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"No .sgm files in "
operator|+
name|reutersDir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|EXTRACTION_PATTERN
name|Pattern
name|EXTRACTION_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"<TITLE>(.*?)</TITLE>|<DATE>(.*?)</DATE>|<BODY>(.*?)</BODY>"
argument_list|)
decl_stmt|;
DECL|field|META_CHARS
specifier|private
specifier|static
name|String
index|[]
name|META_CHARS
init|=
block|{
literal|"&"
block|,
literal|"<"
block|,
literal|">"
block|,
literal|"\""
block|,
literal|"'"
block|}
decl_stmt|;
DECL|field|META_CHARS_SERIALIZATIONS
specifier|private
specifier|static
name|String
index|[]
name|META_CHARS_SERIALIZATIONS
init|=
block|{
literal|"&amp;"
block|,
literal|"&lt;"
block|,
literal|"&gt;"
block|,
literal|"&quot;"
block|,
literal|"&apos;"
block|}
decl_stmt|;
comment|/**    * Override if you wish to change what is extracted    */
DECL|method|extractFile
specifier|protected
name|void
name|extractFile
parameter_list|(
name|Path
name|sgmFile
parameter_list|)
block|{
try|try
init|(
name|BufferedReader
name|reader
init|=
name|Files
operator|.
name|newBufferedReader
argument_list|(
name|sgmFile
argument_list|,
name|StandardCharsets
operator|.
name|ISO_8859_1
argument_list|)
init|)
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|StringBuilder
name|outBuffer
init|=
operator|new
name|StringBuilder
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
name|int
name|docNumber
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
comment|// when we see a closing reuters tag, flush the file
if|if
condition|(
name|line
operator|.
name|indexOf
argument_list|(
literal|"</REUTERS"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
comment|// Replace the SGM escape sequences
name|buffer
operator|.
name|append
argument_list|(
name|line
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
comment|// accumulate the strings for now,
comment|// then apply regular expression to
comment|// get the pieces,
block|}
else|else
block|{
comment|// Extract the relevant pieces and write to a file in the output dir
name|Matcher
name|matcher
init|=
name|EXTRACTION_PATTERN
operator|.
name|matcher
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|matcher
operator|.
name|groupCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|matcher
operator|.
name|group
argument_list|(
name|i
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|outBuffer
operator|.
name|append
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|outBuffer
operator|.
name|append
argument_list|(
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|out
init|=
name|outBuffer
operator|.
name|toString
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|META_CHARS_SERIALIZATIONS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|=
name|out
operator|.
name|replaceAll
argument_list|(
name|META_CHARS_SERIALIZATIONS
index|[
name|i
index|]
argument_list|,
name|META_CHARS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|Path
name|outFile
init|=
name|outputDir
operator|.
name|resolve
argument_list|(
name|sgmFile
operator|.
name|getFileName
argument_list|()
operator|+
literal|"-"
operator|+
operator|(
name|docNumber
operator|++
operator|)
operator|+
literal|".txt"
argument_list|)
decl_stmt|;
comment|// System.out.println("Writing " + outFile);
try|try
init|(
name|BufferedWriter
name|writer
init|=
name|Files
operator|.
name|newBufferedWriter
argument_list|(
name|outFile
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|outBuffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|usage
argument_list|(
literal|"Wrong number of arguments ("
operator|+
name|args
operator|.
name|length
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return;
block|}
name|Path
name|reutersDir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|reutersDir
argument_list|)
condition|)
block|{
name|usage
argument_list|(
literal|"Cannot find Path to Reuters SGM files ("
operator|+
name|reutersDir
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// First, extract to a tmp directory and only if everything succeeds, rename
comment|// to output directory.
name|Path
name|outputDir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|args
index|[
literal|1
index|]
operator|+
literal|"-tmp"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|outputDir
argument_list|)
expr_stmt|;
name|ExtractReuters
name|extractor
init|=
operator|new
name|ExtractReuters
argument_list|(
name|reutersDir
argument_list|,
name|outputDir
argument_list|)
decl_stmt|;
name|extractor
operator|.
name|extract
argument_list|()
expr_stmt|;
comment|// Now rename to requested output dir
name|Files
operator|.
name|move
argument_list|(
name|outputDir
argument_list|,
name|Paths
operator|.
name|get
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|StandardCopyOption
operator|.
name|ATOMIC_MOVE
argument_list|)
expr_stmt|;
block|}
DECL|method|usage
specifier|private
specifier|static
name|void
name|usage
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: "
operator|+
name|msg
operator|+
literal|" :: java -cp<...> org.apache.lucene.benchmark.utils.ExtractReuters<Path to Reuters SGM files><Output Path>"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
