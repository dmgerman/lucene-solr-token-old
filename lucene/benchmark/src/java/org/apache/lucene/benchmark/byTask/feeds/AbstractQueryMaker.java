begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.benchmark.byTask.feeds
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|feeds
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|utils
operator|.
name|Config
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_comment
comment|/**  * Abstract base query maker.   * Each query maker should just implement the {@link #prepareQueries()} method.  **/
end_comment
begin_class
DECL|class|AbstractQueryMaker
specifier|public
specifier|abstract
class|class
name|AbstractQueryMaker
implements|implements
name|QueryMaker
block|{
DECL|field|qnum
specifier|protected
name|int
name|qnum
init|=
literal|0
decl_stmt|;
DECL|field|queries
specifier|protected
name|Query
index|[]
name|queries
decl_stmt|;
DECL|field|config
specifier|protected
name|Config
name|config
decl_stmt|;
annotation|@
name|Override
DECL|method|resetInputs
specifier|public
name|void
name|resetInputs
parameter_list|()
throws|throws
name|Exception
block|{
name|qnum
operator|=
literal|0
expr_stmt|;
comment|// re-initialize since properties by round may have changed.
name|setConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
DECL|method|prepareQueries
specifier|protected
specifier|abstract
name|Query
index|[]
name|prepareQueries
parameter_list|()
throws|throws
name|Exception
function_decl|;
annotation|@
name|Override
DECL|method|setConfig
specifier|public
name|void
name|setConfig
parameter_list|(
name|Config
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|queries
operator|=
name|prepareQueries
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|printQueries
specifier|public
name|String
name|printQueries
parameter_list|()
block|{
name|String
name|newline
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|queries
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|i
operator|+
literal|". "
operator|+
name|queries
index|[
name|i
index|]
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" - "
operator|+
name|queries
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|makeQuery
specifier|public
name|Query
name|makeQuery
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|queries
index|[
name|nextQnum
argument_list|()
index|]
return|;
block|}
comment|// return next qnum
DECL|method|nextQnum
specifier|protected
specifier|synchronized
name|int
name|nextQnum
parameter_list|()
block|{
name|int
name|res
init|=
name|qnum
decl_stmt|;
name|qnum
operator|=
operator|(
name|qnum
operator|+
literal|1
operator|)
operator|%
name|queries
operator|.
name|length
expr_stmt|;
return|return
name|res
return|;
block|}
comment|/*   *  (non-Javadoc)   * @see org.apache.lucene.benchmark.byTask.feeds.QueryMaker#makeQuery(int)   */
annotation|@
name|Override
DECL|method|makeQuery
specifier|public
name|Query
name|makeQuery
parameter_list|(
name|int
name|size
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|this
operator|+
literal|".makeQuery(int size) is not supported!"
argument_list|)
throw|;
block|}
block|}
end_class
end_unit
