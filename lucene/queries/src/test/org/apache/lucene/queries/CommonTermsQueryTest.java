begin_unit
begin_package
DECL|package|org.apache.lucene.queries
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SlowCompositeReaderWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|QueryUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LineFileDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_class
DECL|class|CommonTermsQueryTest
specifier|public
class|class
name|CommonTermsQueryTest
extends|extends
name|LuceneTestCase
block|{
DECL|method|testBasics
specifier|public
name|void
name|testBasics
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|String
index|[]
name|docs
init|=
operator|new
name|String
index|[]
block|{
literal|"this is the end of the world right"
block|,
literal|"is this it or maybe not"
block|,
literal|"this is the end of the universe as we know it"
block|,
literal|"there is the famous restaurant at the end of the universe"
block|,}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
name|docs
index|[
name|i
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
block|{
name|CommonTermsQuery
name|query
init|=
operator|new
name|CommonTermsQuery
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|2.0f
else|:
literal|0.5f
argument_list|)
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"is"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"this"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"end"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"world"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"universe"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"right"
argument_list|)
argument_list|)
expr_stmt|;
name|TopDocs
name|search
init|=
name|s
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|search
operator|.
name|totalHits
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|r
operator|.
name|document
argument_list|(
name|search
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|r
operator|.
name|document
argument_list|(
name|search
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|r
operator|.
name|document
argument_list|(
name|search
operator|.
name|scoreDocs
index|[
literal|2
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// only high freq
name|CommonTermsQuery
name|query
init|=
operator|new
name|CommonTermsQuery
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|2.0f
else|:
literal|0.5f
argument_list|)
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"is"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"this"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"end"
argument_list|)
argument_list|)
expr_stmt|;
name|TopDocs
name|search
init|=
name|s
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|search
operator|.
name|totalHits
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|r
operator|.
name|document
argument_list|(
name|search
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|r
operator|.
name|document
argument_list|(
name|search
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// low freq is mandatory
name|CommonTermsQuery
name|query
init|=
operator|new
name|CommonTermsQuery
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|2.0f
else|:
literal|0.5f
argument_list|)
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"is"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"this"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"end"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"world"
argument_list|)
argument_list|)
expr_stmt|;
name|TopDocs
name|search
init|=
name|s
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|search
operator|.
name|totalHits
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|r
operator|.
name|document
argument_list|(
name|search
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// low freq is mandatory
name|CommonTermsQuery
name|query
init|=
operator|new
name|CommonTermsQuery
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|2.0f
else|:
literal|0.5f
argument_list|)
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"restaurant"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"universe"
argument_list|)
argument_list|)
expr_stmt|;
name|TopDocs
name|search
init|=
name|s
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|search
operator|.
name|totalHits
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|r
operator|.
name|document
argument_list|(
name|search
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testEqualsHashCode
specifier|public
name|void
name|testEqualsHashCode
parameter_list|()
block|{
name|CommonTermsQuery
name|query
init|=
operator|new
name|CommonTermsQuery
argument_list|(
name|randomOccur
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|randomOccur
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|terms
init|=
name|atLeast
argument_list|(
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
condition|;
name|i
operator|++
control|)
block|{
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|_TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|_TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QueryUtils
operator|.
name|checkHashEquals
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|checkUnequal
argument_list|(
operator|new
name|CommonTermsQuery
argument_list|(
name|randomOccur
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|randomOccur
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|{
specifier|final
name|long
name|seed
init|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|CommonTermsQuery
name|left
init|=
operator|new
name|CommonTermsQuery
argument_list|(
name|randomOccur
argument_list|(
name|r
argument_list|)
argument_list|,
name|randomOccur
argument_list|(
name|r
argument_list|)
argument_list|,
name|r
operator|.
name|nextFloat
argument_list|()
argument_list|,
name|r
operator|.
name|nextBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|leftTerms
init|=
name|atLeast
argument_list|(
name|r
argument_list|,
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|leftTerms
condition|;
name|i
operator|++
control|)
block|{
name|left
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|_TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|r
argument_list|)
argument_list|,
name|_TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|r
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|left
operator|.
name|setHighFreqMinimumNumberShouldMatch
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|left
operator|.
name|setLowFreqMinimumNumberShouldMatch
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|CommonTermsQuery
name|right
init|=
operator|new
name|CommonTermsQuery
argument_list|(
name|randomOccur
argument_list|(
name|r
argument_list|)
argument_list|,
name|randomOccur
argument_list|(
name|r
argument_list|)
argument_list|,
name|r
operator|.
name|nextFloat
argument_list|()
argument_list|,
name|r
operator|.
name|nextBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|rightTerms
init|=
name|atLeast
argument_list|(
name|r
argument_list|,
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rightTerms
condition|;
name|i
operator|++
control|)
block|{
name|right
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|_TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|r
argument_list|)
argument_list|,
name|_TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|r
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|right
operator|.
name|setHighFreqMinimumNumberShouldMatch
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|right
operator|.
name|setLowFreqMinimumNumberShouldMatch
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|checkEqual
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|randomOccur
specifier|private
specifier|static
name|Occur
name|randomOccur
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
return|return
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Occur
operator|.
name|MUST
else|:
name|Occur
operator|.
name|SHOULD
return|;
block|}
DECL|method|testNullTerm
specifier|public
name|void
name|testNullTerm
parameter_list|()
block|{
name|Random
name|random
init|=
name|random
argument_list|()
decl_stmt|;
name|CommonTermsQuery
name|query
init|=
operator|new
name|CommonTermsQuery
argument_list|(
name|randomOccur
argument_list|(
name|random
argument_list|)
argument_list|,
name|randomOccur
argument_list|(
name|random
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|query
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"null values are not supported"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{            }
block|}
DECL|method|testMinShouldMatch
specifier|public
name|void
name|testMinShouldMatch
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|String
index|[]
name|docs
init|=
operator|new
name|String
index|[]
block|{
literal|"this is the end of the world right"
block|,
literal|"is this it or maybe not"
block|,
literal|"this is the end of the universe as we know it"
block|,
literal|"there is the famous restaurant at the end of the universe"
block|,}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
name|docs
index|[
name|i
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
block|{
name|CommonTermsQuery
name|query
init|=
operator|new
name|CommonTermsQuery
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|2.0f
else|:
literal|0.5f
argument_list|)
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"is"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"this"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"end"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"world"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"universe"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"right"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|setLowFreqMinimumNumberShouldMatch
argument_list|(
literal|0.5f
argument_list|)
expr_stmt|;
name|TopDocs
name|search
init|=
name|s
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|search
operator|.
name|totalHits
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|r
operator|.
name|document
argument_list|(
name|search
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|CommonTermsQuery
name|query
init|=
operator|new
name|CommonTermsQuery
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|2.0f
else|:
literal|0.5f
argument_list|)
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"is"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"this"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"end"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"world"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"universe"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"right"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|setLowFreqMinimumNumberShouldMatch
argument_list|(
literal|2.0f
argument_list|)
expr_stmt|;
name|TopDocs
name|search
init|=
name|s
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|search
operator|.
name|totalHits
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|r
operator|.
name|document
argument_list|(
name|search
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|CommonTermsQuery
name|query
init|=
operator|new
name|CommonTermsQuery
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|2.0f
else|:
literal|0.5f
argument_list|)
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"is"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"this"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"end"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"world"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"universe"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"right"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|setLowFreqMinimumNumberShouldMatch
argument_list|(
literal|0.49f
argument_list|)
expr_stmt|;
name|TopDocs
name|search
init|=
name|s
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|search
operator|.
name|totalHits
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|r
operator|.
name|document
argument_list|(
name|search
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|r
operator|.
name|document
argument_list|(
name|search
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|r
operator|.
name|document
argument_list|(
name|search
operator|.
name|scoreDocs
index|[
literal|2
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|CommonTermsQuery
name|query
init|=
operator|new
name|CommonTermsQuery
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|2.0f
else|:
literal|0.5f
argument_list|)
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"is"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"this"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"end"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"world"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"universe"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"right"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|setLowFreqMinimumNumberShouldMatch
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
name|TopDocs
name|search
init|=
name|s
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|search
operator|.
name|totalHits
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|r
operator|.
name|document
argument_list|(
name|search
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|r
operator|.
name|document
argument_list|(
name|search
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|r
operator|.
name|document
argument_list|(
name|search
operator|.
name|scoreDocs
index|[
literal|2
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|search
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|score
operator|>
name|search
operator|.
name|scoreDocs
index|[
literal|2
index|]
operator|.
name|score
argument_list|)
expr_stmt|;
block|}
block|{
name|CommonTermsQuery
name|query
init|=
operator|new
name|CommonTermsQuery
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|2.0f
else|:
literal|0.5f
argument_list|)
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"is"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"this"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"end"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"world"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"universe"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"right"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|setLowFreqMinimumNumberShouldMatch
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
name|query
operator|.
name|setHighFreqMinimumNumberShouldMatch
argument_list|(
literal|4.0f
argument_list|)
expr_stmt|;
name|TopDocs
name|search
init|=
name|s
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|search
operator|.
name|totalHits
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|search
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|score
argument_list|,
name|search
operator|.
name|scoreDocs
index|[
literal|2
index|]
operator|.
name|score
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|r
operator|.
name|document
argument_list|(
name|search
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
comment|// doc 2 and 3 only get a score from low freq terms
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"2"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|r
operator|.
name|document
argument_list|(
name|search
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|,
name|r
operator|.
name|document
argument_list|(
name|search
operator|.
name|scoreDocs
index|[
literal|2
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testIllegalOccur
specifier|public
name|void
name|testIllegalOccur
parameter_list|()
block|{
name|Random
name|random
init|=
name|random
argument_list|()
decl_stmt|;
try|try
block|{
operator|new
name|CommonTermsQuery
argument_list|(
name|Occur
operator|.
name|MUST_NOT
argument_list|,
name|randomOccur
argument_list|(
name|random
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"MUST_NOT is not supproted"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{            }
try|try
block|{
operator|new
name|CommonTermsQuery
argument_list|(
name|randomOccur
argument_list|(
name|random
argument_list|)
argument_list|,
name|Occur
operator|.
name|MUST_NOT
argument_list|,
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"MUST_NOT is not supproted"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{            }
block|}
DECL|method|testRandomIndex
specifier|public
name|void
name|testRandomIndex
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|createRandomIndex
argument_list|(
name|atLeast
argument_list|(
literal|50
argument_list|)
argument_list|,
name|w
argument_list|,
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
name|DirectoryReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|SlowCompositeReaderWrapper
name|wrapper
init|=
operator|new
name|SlowCompositeReaderWrapper
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|String
name|field
init|=
literal|"body"
decl_stmt|;
name|Terms
name|terms
init|=
name|wrapper
operator|.
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|PriorityQueue
argument_list|<
name|TermAndFreq
argument_list|>
name|lowFreqQueue
init|=
operator|new
name|PriorityQueue
argument_list|<
name|CommonTermsQueryTest
operator|.
name|TermAndFreq
argument_list|>
argument_list|(
literal|5
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|lessThan
parameter_list|(
name|TermAndFreq
name|a
parameter_list|,
name|TermAndFreq
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|freq
operator|>
name|b
operator|.
name|freq
return|;
block|}
block|}
decl_stmt|;
name|PriorityQueue
argument_list|<
name|TermAndFreq
argument_list|>
name|highFreqQueue
init|=
operator|new
name|PriorityQueue
argument_list|<
name|CommonTermsQueryTest
operator|.
name|TermAndFreq
argument_list|>
argument_list|(
literal|5
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|lessThan
parameter_list|(
name|TermAndFreq
name|a
parameter_list|,
name|TermAndFreq
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|freq
operator|<
name|b
operator|.
name|freq
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|TermsEnum
name|iterator
init|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|highFreqQueue
operator|.
name|size
argument_list|()
operator|<
literal|5
condition|)
block|{
name|highFreqQueue
operator|.
name|add
argument_list|(
operator|new
name|TermAndFreq
argument_list|(
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|iterator
operator|.
name|term
argument_list|()
argument_list|)
argument_list|,
name|iterator
operator|.
name|docFreq
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|lowFreqQueue
operator|.
name|add
argument_list|(
operator|new
name|TermAndFreq
argument_list|(
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|iterator
operator|.
name|term
argument_list|()
argument_list|)
argument_list|,
name|iterator
operator|.
name|docFreq
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|highFreqQueue
operator|.
name|top
argument_list|()
operator|.
name|freq
operator|<
name|iterator
operator|.
name|docFreq
argument_list|()
condition|)
block|{
name|highFreqQueue
operator|.
name|top
argument_list|()
operator|.
name|freq
operator|=
name|iterator
operator|.
name|docFreq
argument_list|()
expr_stmt|;
name|highFreqQueue
operator|.
name|top
argument_list|()
operator|.
name|term
operator|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|iterator
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
name|highFreqQueue
operator|.
name|updateTop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|lowFreqQueue
operator|.
name|top
argument_list|()
operator|.
name|freq
operator|>
name|iterator
operator|.
name|docFreq
argument_list|()
condition|)
block|{
name|lowFreqQueue
operator|.
name|top
argument_list|()
operator|.
name|freq
operator|=
name|iterator
operator|.
name|docFreq
argument_list|()
expr_stmt|;
name|lowFreqQueue
operator|.
name|top
argument_list|()
operator|.
name|term
operator|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|iterator
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
name|lowFreqQueue
operator|.
name|updateTop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|int
name|lowFreq
init|=
name|lowFreqQueue
operator|.
name|top
argument_list|()
operator|.
name|freq
decl_stmt|;
name|int
name|highFreq
init|=
name|highFreqQueue
operator|.
name|top
argument_list|()
operator|.
name|freq
decl_stmt|;
name|assumeTrue
argument_list|(
literal|"unlucky index"
argument_list|,
name|highFreq
operator|-
literal|1
operator|>
name|lowFreq
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TermAndFreq
argument_list|>
name|highTerms
init|=
name|queueToList
argument_list|(
name|highFreqQueue
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TermAndFreq
argument_list|>
name|lowTerms
init|=
name|queueToList
argument_list|(
name|lowFreqQueue
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|Occur
name|lowFreqOccur
init|=
name|randomOccur
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|BooleanQuery
name|verifyQuery
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|CommonTermsQuery
name|cq
init|=
operator|new
name|CommonTermsQuery
argument_list|(
name|randomOccur
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
name|lowFreqOccur
argument_list|,
name|highFreq
operator|-
literal|1
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|TermAndFreq
name|termAndFreq
range|:
name|lowTerms
control|)
block|{
name|cq
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|termAndFreq
operator|.
name|term
argument_list|)
argument_list|)
expr_stmt|;
name|verifyQuery
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|termAndFreq
operator|.
name|term
argument_list|)
argument_list|)
argument_list|,
name|lowFreqOccur
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TermAndFreq
name|termAndFreq
range|:
name|highTerms
control|)
block|{
name|cq
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|termAndFreq
operator|.
name|term
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TopDocs
name|cqSearch
init|=
name|searcher
operator|.
name|search
argument_list|(
name|cq
argument_list|,
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
name|TopDocs
name|verifySearch
init|=
name|searcher
operator|.
name|search
argument_list|(
name|verifyQuery
argument_list|,
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|verifySearch
operator|.
name|totalHits
argument_list|,
name|cqSearch
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|hits
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ScoreDoc
name|doc
range|:
name|verifySearch
operator|.
name|scoreDocs
control|)
block|{
name|hits
operator|.
name|add
argument_list|(
name|doc
operator|.
name|doc
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ScoreDoc
name|doc
range|:
name|cqSearch
operator|.
name|scoreDocs
control|)
block|{
name|assertTrue
argument_list|(
name|hits
operator|.
name|remove
argument_list|(
name|doc
operator|.
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|hits
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|/*        *  need to force merge here since QueryUtils adds checks based        *  on leave readers which have different statistics than the top        *  level reader if we have more than one segment. This could         *  result in a different query / results.        */
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|DirectoryReader
name|reader2
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|QueryUtils
operator|.
name|check
argument_list|(
name|random
argument_list|()
argument_list|,
name|cq
argument_list|,
name|newSearcher
argument_list|(
name|reader2
argument_list|)
argument_list|)
expr_stmt|;
name|reader2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|wrapper
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|queueToList
specifier|private
specifier|static
name|List
argument_list|<
name|TermAndFreq
argument_list|>
name|queueToList
parameter_list|(
name|PriorityQueue
argument_list|<
name|TermAndFreq
argument_list|>
name|queue
parameter_list|)
block|{
name|List
argument_list|<
name|TermAndFreq
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<
name|CommonTermsQueryTest
operator|.
name|TermAndFreq
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|queue
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|terms
operator|.
name|add
argument_list|(
name|queue
operator|.
name|pop
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|terms
return|;
block|}
DECL|class|TermAndFreq
specifier|private
specifier|static
class|class
name|TermAndFreq
block|{
DECL|field|term
name|BytesRef
name|term
decl_stmt|;
DECL|field|freq
name|int
name|freq
decl_stmt|;
DECL|method|TermAndFreq
specifier|public
name|TermAndFreq
parameter_list|(
name|BytesRef
name|term
parameter_list|,
name|int
name|freq
parameter_list|)
block|{
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
name|this
operator|.
name|freq
operator|=
name|freq
expr_stmt|;
block|}
block|}
comment|/**    * populates a writer with random stuff. this must be fully reproducable with    * the seed!    */
DECL|method|createRandomIndex
specifier|public
specifier|static
name|void
name|createRandomIndex
parameter_list|(
name|int
name|numdocs
parameter_list|,
name|RandomIndexWriter
name|writer
parameter_list|,
name|long
name|seed
parameter_list|)
throws|throws
name|IOException
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
comment|// primary source for our data is from linefiledocs, its realistic.
name|LineFileDocs
name|lineFileDocs
init|=
operator|new
name|LineFileDocs
argument_list|(
name|random
argument_list|)
decl_stmt|;
comment|// TODO: we should add other fields that use things like docs&freqs but omit
comment|// positions,
comment|// because linefiledocs doesn't cover all the possibilities.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numdocs
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|lineFileDocs
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|lineFileDocs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
