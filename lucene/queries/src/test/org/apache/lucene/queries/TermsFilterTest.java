begin_unit
begin_package
DECL|package|org.apache.lucene.queries
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SlowCompositeReaderWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitDocIdSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_class
DECL|class|TermsFilterTest
specifier|public
class|class
name|TermsFilterTest
extends|extends
name|LuceneTestCase
block|{
DECL|method|testCachability
specifier|public
name|void
name|testCachability
parameter_list|()
throws|throws
name|Exception
block|{
name|TermsFilter
name|a
init|=
name|termsFilter
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
operator|new
name|Term
argument_list|(
literal|"field1"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
literal|"field1"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|Filter
argument_list|>
name|cachedFilters
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|cachedFilters
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|TermsFilter
name|b
init|=
name|termsFilter
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
operator|new
name|Term
argument_list|(
literal|"field1"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
literal|"field1"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Must be cached"
argument_list|,
name|cachedFilters
operator|.
name|contains
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
comment|//duplicate term
name|assertTrue
argument_list|(
literal|"Must be cached"
argument_list|,
name|cachedFilters
operator|.
name|contains
argument_list|(
name|termsFilter
argument_list|(
literal|true
argument_list|,
operator|new
name|Term
argument_list|(
literal|"field1"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
literal|"field1"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
literal|"field1"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Must not be cached"
argument_list|,
name|cachedFilters
operator|.
name|contains
argument_list|(
name|termsFilter
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
operator|new
name|Term
argument_list|(
literal|"field1"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
literal|"field1"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
literal|"field1"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
literal|"field1"
argument_list|,
literal|"v"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMissingTerms
specifier|public
name|void
name|testMissingTerms
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|fieldName
init|=
literal|"field1"
decl_stmt|;
name|Directory
name|rd
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|rd
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|int
name|term
init|=
name|i
operator|*
literal|10
decl_stmt|;
comment|//terms are units of 10;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
name|fieldName
argument_list|,
literal|""
operator|+
name|term
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|reader
init|=
name|SlowCompositeReaderWrapper
operator|.
name|wrap
argument_list|(
name|w
operator|.
name|getReader
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|getContext
argument_list|()
operator|instanceof
name|LeafReaderContext
argument_list|)
expr_stmt|;
name|LeafReaderContext
name|context
init|=
operator|(
name|LeafReaderContext
operator|)
name|reader
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Term
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|terms
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|fieldName
argument_list|,
literal|"19"
argument_list|)
argument_list|)
expr_stmt|;
name|BitDocIdSet
name|bits
init|=
operator|(
name|BitDocIdSet
operator|)
name|termsFilter
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
name|terms
argument_list|)
operator|.
name|getDocIdSet
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getLiveDocs
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Must match nothing"
argument_list|,
name|bits
argument_list|)
expr_stmt|;
name|terms
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|fieldName
argument_list|,
literal|"20"
argument_list|)
argument_list|)
expr_stmt|;
name|bits
operator|=
operator|(
name|BitDocIdSet
operator|)
name|termsFilter
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
name|terms
argument_list|)
operator|.
name|getDocIdSet
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getLiveDocs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Must match 1"
argument_list|,
literal|1
argument_list|,
name|bits
operator|.
name|bits
argument_list|()
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
name|terms
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|fieldName
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|bits
operator|=
operator|(
name|BitDocIdSet
operator|)
name|termsFilter
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
name|terms
argument_list|)
operator|.
name|getDocIdSet
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getLiveDocs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Must match 2"
argument_list|,
literal|2
argument_list|,
name|bits
operator|.
name|bits
argument_list|()
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
name|terms
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|fieldName
argument_list|,
literal|"00"
argument_list|)
argument_list|)
expr_stmt|;
name|bits
operator|=
operator|(
name|BitDocIdSet
operator|)
name|termsFilter
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
name|terms
argument_list|)
operator|.
name|getDocIdSet
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getLiveDocs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Must match 2"
argument_list|,
literal|2
argument_list|,
name|bits
operator|.
name|bits
argument_list|()
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|rd
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testMissingField
specifier|public
name|void
name|testMissingField
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|fieldName
init|=
literal|"field1"
decl_stmt|;
name|Directory
name|rd1
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w1
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|rd1
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
name|fieldName
argument_list|,
literal|"content1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|w1
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|reader1
init|=
name|w1
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w1
operator|.
name|close
argument_list|()
expr_stmt|;
name|fieldName
operator|=
literal|"field2"
expr_stmt|;
name|Directory
name|rd2
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w2
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|rd2
argument_list|)
decl_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
name|fieldName
argument_list|,
literal|"content2"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|w2
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|reader2
init|=
name|w2
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w2
operator|.
name|close
argument_list|()
expr_stmt|;
name|TermsFilter
name|tf
init|=
operator|new
name|TermsFilter
argument_list|(
operator|new
name|Term
argument_list|(
name|fieldName
argument_list|,
literal|"content1"
argument_list|)
argument_list|)
decl_stmt|;
name|MultiReader
name|multi
init|=
operator|new
name|MultiReader
argument_list|(
name|reader1
argument_list|,
name|reader2
argument_list|)
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|context
range|:
name|multi
operator|.
name|leaves
argument_list|()
control|)
block|{
name|DocIdSet
name|docIdSet
init|=
name|tf
operator|.
name|getDocIdSet
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getLiveDocs
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|reader
argument_list|()
operator|.
name|docFreq
argument_list|(
operator|new
name|Term
argument_list|(
name|fieldName
argument_list|,
literal|"content1"
argument_list|)
argument_list|)
operator|==
literal|0
condition|)
block|{
name|assertNull
argument_list|(
name|docIdSet
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BitDocIdSet
name|bits
init|=
operator|(
name|BitDocIdSet
operator|)
name|docIdSet
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Must be>= 0"
argument_list|,
name|bits
operator|.
name|bits
argument_list|()
operator|.
name|cardinality
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|multi
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader1
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader2
operator|.
name|close
argument_list|()
expr_stmt|;
name|rd1
operator|.
name|close
argument_list|()
expr_stmt|;
name|rd2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testFieldNotPresent
specifier|public
name|void
name|testFieldNotPresent
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|int
name|num
init|=
name|atLeast
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|int
name|skip
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|num
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Term
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|terms
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
operator|+
name|i
argument_list|,
literal|"content1"
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
if|if
condition|(
name|skip
operator|==
name|i
condition|)
block|{
continue|continue;
block|}
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"field"
operator|+
name|i
argument_list|,
literal|"content1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|leaves
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LeafReaderContext
name|context
init|=
name|reader
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|TermsFilter
name|tf
init|=
operator|new
name|TermsFilter
argument_list|(
name|terms
argument_list|)
decl_stmt|;
name|BitDocIdSet
name|bits
init|=
operator|(
name|BitDocIdSet
operator|)
name|tf
operator|.
name|getDocIdSet
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getLiveDocs
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Must be num fields - 1 since we skip only one field"
argument_list|,
name|num
operator|-
literal|1
argument_list|,
name|bits
operator|.
name|bits
argument_list|()
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSkipField
specifier|public
name|void
name|testSkipField
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|int
name|num
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Term
argument_list|>
name|terms
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|String
name|field
init|=
literal|"field"
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|terms
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|"content1"
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
name|field
argument_list|,
literal|"content1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|int
name|randomFields
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randomFields
condition|;
name|i
operator|++
control|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|field
init|=
literal|"field"
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|Term
name|t
init|=
operator|new
name|Term
argument_list|(
name|field
argument_list|,
literal|"content1"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|terms
operator|.
name|contains
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|terms
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|leaves
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LeafReaderContext
name|context
init|=
name|reader
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|TermsFilter
name|tf
init|=
operator|new
name|TermsFilter
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|terms
argument_list|)
argument_list|)
decl_stmt|;
name|BitDocIdSet
name|bits
init|=
operator|(
name|BitDocIdSet
operator|)
name|tf
operator|.
name|getDocIdSet
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getLiveDocs
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|context
operator|.
name|reader
argument_list|()
operator|.
name|numDocs
argument_list|()
argument_list|,
name|bits
operator|.
name|bits
argument_list|()
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|int
name|num
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|singleField
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Term
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|String
name|field
init|=
literal|"field"
operator|+
operator|(
name|singleField
condition|?
literal|"1"
else|:
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|)
decl_stmt|;
name|String
name|string
init|=
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|terms
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|string
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
name|field
argument_list|,
name|string
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|int
name|numQueries
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numQueries
condition|;
name|i
operator|++
control|)
block|{
name|Collections
operator|.
name|shuffle
argument_list|(
name|terms
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numTerms
init|=
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|BooleanQuery
operator|.
name|getMaxClauseCount
argument_list|()
argument_list|,
name|terms
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numTerms
condition|;
name|j
operator|++
control|)
block|{
name|bq
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|terms
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TopDocs
name|queryResult
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|ConstantScoreQuery
argument_list|(
name|bq
argument_list|)
argument_list|,
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
name|MatchAllDocsQuery
name|matchAll
init|=
operator|new
name|MatchAllDocsQuery
argument_list|()
decl_stmt|;
specifier|final
name|TermsFilter
name|filter
init|=
name|termsFilter
argument_list|(
name|singleField
argument_list|,
name|terms
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|numTerms
argument_list|)
argument_list|)
decl_stmt|;
empty_stmt|;
name|TopDocs
name|filterResult
init|=
name|searcher
operator|.
name|search
argument_list|(
name|matchAll
argument_list|,
name|filter
argument_list|,
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|filterResult
operator|.
name|totalHits
argument_list|,
name|queryResult
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|ScoreDoc
index|[]
name|scoreDocs
init|=
name|filterResult
operator|.
name|scoreDocs
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|scoreDocs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|scoreDocs
index|[
name|j
index|]
operator|.
name|doc
argument_list|,
name|queryResult
operator|.
name|scoreDocs
index|[
name|j
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|termsFilter
specifier|private
name|TermsFilter
name|termsFilter
parameter_list|(
name|boolean
name|singleField
parameter_list|,
name|Term
modifier|...
name|terms
parameter_list|)
block|{
return|return
name|termsFilter
argument_list|(
name|singleField
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|terms
argument_list|)
argument_list|)
return|;
block|}
DECL|method|termsFilter
specifier|private
name|TermsFilter
name|termsFilter
parameter_list|(
name|boolean
name|singleField
parameter_list|,
name|Collection
argument_list|<
name|Term
argument_list|>
name|termList
parameter_list|)
block|{
if|if
condition|(
operator|!
name|singleField
condition|)
block|{
return|return
operator|new
name|TermsFilter
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|termList
argument_list|)
argument_list|)
return|;
block|}
specifier|final
name|TermsFilter
name|filter
decl_stmt|;
name|List
argument_list|<
name|BytesRef
argument_list|>
name|bytes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|field
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Term
name|term
range|:
name|termList
control|)
block|{
name|bytes
operator|.
name|add
argument_list|(
name|term
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|term
operator|.
name|field
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
name|field
operator|=
name|term
operator|.
name|field
argument_list|()
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|TermsFilter
argument_list|(
name|field
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
return|return
name|filter
return|;
block|}
DECL|method|testHashCodeAndEquals
specifier|public
name|void
name|testHashCodeAndEquals
parameter_list|()
block|{
name|int
name|num
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|singleField
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Term
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Term
argument_list|>
name|uniqueTerms
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|String
name|field
init|=
literal|"field"
operator|+
operator|(
name|singleField
condition|?
literal|"1"
else|:
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|)
decl_stmt|;
name|String
name|string
init|=
name|TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|terms
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|string
argument_list|)
argument_list|)
expr_stmt|;
name|uniqueTerms
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|string
argument_list|)
argument_list|)
expr_stmt|;
name|TermsFilter
name|left
init|=
name|termsFilter
argument_list|(
name|singleField
condition|?
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
else|:
literal|false
argument_list|,
name|uniqueTerms
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|terms
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|TermsFilter
name|right
init|=
name|termsFilter
argument_list|(
name|singleField
condition|?
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
else|:
literal|false
argument_list|,
name|terms
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|right
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|right
operator|.
name|hashCode
argument_list|()
argument_list|,
name|left
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|uniqueTerms
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|List
argument_list|<
name|Term
argument_list|>
name|asList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|uniqueTerms
argument_list|)
decl_stmt|;
name|asList
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|TermsFilter
name|notEqual
init|=
name|termsFilter
argument_list|(
name|singleField
condition|?
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
else|:
literal|false
argument_list|,
name|asList
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|left
operator|.
name|equals
argument_list|(
name|notEqual
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|right
operator|.
name|equals
argument_list|(
name|notEqual
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSingleFieldEquals
specifier|public
name|void
name|testSingleFieldEquals
parameter_list|()
block|{
comment|// Two terms with the same hash code
name|assertEquals
argument_list|(
literal|"AaAaBB"
operator|.
name|hashCode
argument_list|()
argument_list|,
literal|"BBBBBB"
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|TermsFilter
name|left
init|=
name|termsFilter
argument_list|(
literal|true
argument_list|,
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"AaAaAa"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"AaAaBB"
argument_list|)
argument_list|)
decl_stmt|;
name|TermsFilter
name|right
init|=
name|termsFilter
argument_list|(
literal|true
argument_list|,
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"AaAaAa"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"BBBBBB"
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|left
operator|.
name|equals
argument_list|(
name|right
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoTerms
specifier|public
name|void
name|testNoTerms
parameter_list|()
block|{
name|List
argument_list|<
name|Term
argument_list|>
name|emptyTerms
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BytesRef
argument_list|>
name|emptyBytesRef
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
try|try
block|{
operator|new
name|TermsFilter
argument_list|(
name|emptyTerms
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must fail - no terms!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{}
try|try
block|{
operator|new
name|TermsFilter
argument_list|(
name|emptyTerms
operator|.
name|toArray
argument_list|(
operator|new
name|Term
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must fail - no terms!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{}
try|try
block|{
operator|new
name|TermsFilter
argument_list|(
literal|null
argument_list|,
name|emptyBytesRef
operator|.
name|toArray
argument_list|(
operator|new
name|BytesRef
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must fail - no terms!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{}
try|try
block|{
operator|new
name|TermsFilter
argument_list|(
literal|null
argument_list|,
name|emptyBytesRef
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"must fail - no terms!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{}
block|}
DECL|method|testToString
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|TermsFilter
name|termsFilter
init|=
operator|new
name|TermsFilter
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field1"
argument_list|,
literal|"a"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
literal|"field1"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
literal|"field1"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"field1:a field1:b field1:c"
argument_list|,
name|termsFilter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
