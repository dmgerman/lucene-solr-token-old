begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.queries
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|FunctionQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|valuesource
operator|.
name|ConstValueSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BaseExplanationTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BoostQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|BM25Similarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|ClassicSimilarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|Similarity
import|;
end_import
begin_class
DECL|class|TestCustomScoreExplanations
specifier|public
class|class
name|TestCustomScoreExplanations
extends|extends
name|BaseExplanationTestCase
block|{
DECL|method|testOneTerm
specifier|public
name|void
name|testOneTerm
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|q
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"w1"
argument_list|)
argument_list|)
decl_stmt|;
name|CustomScoreQuery
name|csq
init|=
operator|new
name|CustomScoreQuery
argument_list|(
name|q
argument_list|,
operator|new
name|FunctionQuery
argument_list|(
operator|new
name|ConstValueSource
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|qtest
argument_list|(
name|csq
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testBoost
specifier|public
name|void
name|testBoost
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|q
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"w1"
argument_list|)
argument_list|)
decl_stmt|;
name|CustomScoreQuery
name|csq
init|=
operator|new
name|CustomScoreQuery
argument_list|(
name|q
argument_list|,
operator|new
name|FunctionQuery
argument_list|(
operator|new
name|ConstValueSource
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|qtest
argument_list|(
operator|new
name|BoostQuery
argument_list|(
name|csq
argument_list|,
literal|4
argument_list|)
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testTopLevelBoost
specifier|public
name|void
name|testTopLevelBoost
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|q
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"w1"
argument_list|)
argument_list|)
decl_stmt|;
name|CustomScoreQuery
name|csq
init|=
operator|new
name|CustomScoreQuery
argument_list|(
name|q
argument_list|,
operator|new
name|FunctionQuery
argument_list|(
operator|new
name|ConstValueSource
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|bqB
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bqB
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|bqB
operator|.
name|add
argument_list|(
name|csq
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|BooleanQuery
name|bq
init|=
name|bqB
operator|.
name|build
argument_list|()
decl_stmt|;
name|qtest
argument_list|(
operator|new
name|BoostQuery
argument_list|(
name|bq
argument_list|,
literal|6
argument_list|)
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testSubExplanations
specifier|public
name|void
name|testSubExplanations
parameter_list|()
throws|throws
name|IOException
block|{
name|Query
name|query
init|=
operator|new
name|FunctionQuery
argument_list|(
operator|new
name|ConstValueSource
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|BaseExplanationTestCase
operator|.
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|setSimilarity
argument_list|(
operator|new
name|BM25Similarity
argument_list|()
argument_list|)
expr_stmt|;
name|Explanation
name|expl
init|=
name|searcher
operator|.
name|explain
argument_list|(
name|query
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// function
name|assertEquals
argument_list|(
literal|5f
argument_list|,
name|expl
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
comment|// boost
name|assertEquals
argument_list|(
literal|"boost"
argument_list|,
name|expl
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1f
argument_list|,
name|expl
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
comment|// norm
name|assertEquals
argument_list|(
literal|"queryNorm"
argument_list|,
name|expl
operator|.
name|getDetails
argument_list|()
index|[
literal|2
index|]
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1f
argument_list|,
name|expl
operator|.
name|getDetails
argument_list|()
index|[
literal|2
index|]
operator|.
name|getValue
argument_list|()
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|BoostQuery
argument_list|(
name|query
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|expl
operator|=
name|searcher
operator|.
name|explain
argument_list|(
name|query
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// function
name|assertEquals
argument_list|(
literal|5f
argument_list|,
name|expl
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
comment|// boost
name|assertEquals
argument_list|(
literal|"boost"
argument_list|,
name|expl
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2f
argument_list|,
name|expl
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
comment|// norm
name|assertEquals
argument_list|(
literal|"queryNorm"
argument_list|,
name|expl
operator|.
name|getDetails
argument_list|()
index|[
literal|2
index|]
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1f
argument_list|,
name|expl
operator|.
name|getDetails
argument_list|()
index|[
literal|2
index|]
operator|.
name|getValue
argument_list|()
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|setSimilarity
argument_list|(
operator|new
name|ClassicSimilarity
argument_list|()
argument_list|)
expr_stmt|;
comment|// in order to have a queryNorm != 1
name|expl
operator|=
name|searcher
operator|.
name|explain
argument_list|(
name|query
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// function
name|assertEquals
argument_list|(
literal|5f
argument_list|,
name|expl
operator|.
name|getDetails
argument_list|()
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
comment|// boost
name|assertEquals
argument_list|(
literal|"boost"
argument_list|,
name|expl
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2f
argument_list|,
name|expl
operator|.
name|getDetails
argument_list|()
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
comment|// norm
name|assertEquals
argument_list|(
literal|"queryNorm"
argument_list|,
name|expl
operator|.
name|getDetails
argument_list|()
index|[
literal|2
index|]
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.5f
argument_list|,
name|expl
operator|.
name|getDetails
argument_list|()
index|[
literal|2
index|]
operator|.
name|getValue
argument_list|()
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
