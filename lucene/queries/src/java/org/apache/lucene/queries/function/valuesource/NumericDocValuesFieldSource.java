begin_unit
begin_package
DECL|package|org.apache.lucene.queries.function.valuesource
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|valuesource
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|FunctionValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|docvalues
operator|.
name|DoubleDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|docvalues
operator|.
name|FloatDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|docvalues
operator|.
name|IntDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|docvalues
operator|.
name|LongDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_comment
comment|/**  * A {@link ValueSource} for numeric {@link DocValues} types:<ul>  *<li>{@link org.apache.lucene.index.DocValues.Type#FLOAT_32},</li>  *<li>{@link org.apache.lucene.index.DocValues.Type#FLOAT_64},</li>  *<li>{@link org.apache.lucene.index.DocValues.Type#FIXED_INTS_8},</li>  *<li>{@link org.apache.lucene.index.DocValues.Type#FIXED_INTS_16},</li>  *<li>{@link org.apache.lucene.index.DocValues.Type#FIXED_INTS_32},</li>  *<li>{@link org.apache.lucene.index.DocValues.Type#FIXED_INTS_64},</li>  *<li>{@link org.apache.lucene.index.DocValues.Type#VAR_INTS}.</li></ul>  *<p>  * If the segment has no {@link DocValues}, the default  * {@link org.apache.lucene.index.DocValues.Source} of type  * {@link org.apache.lucene.index.DocValues.Type#FLOAT_64} will be used.  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|NumericDocValuesFieldSource
specifier|public
specifier|final
class|class
name|NumericDocValuesFieldSource
extends|extends
name|DocValuesFieldSource
block|{
DECL|class|DVIntValues
specifier|private
specifier|static
specifier|abstract
class|class
name|DVIntValues
extends|extends
name|IntDocValues
block|{
DECL|field|liveDocs
specifier|private
specifier|final
name|Bits
name|liveDocs
decl_stmt|;
DECL|field|source
specifier|private
specifier|final
name|DocValues
operator|.
name|Source
name|source
decl_stmt|;
DECL|method|DVIntValues
specifier|public
name|DVIntValues
parameter_list|(
name|ValueSource
name|vs
parameter_list|,
name|DocValues
operator|.
name|Source
name|source
parameter_list|,
name|Bits
name|liveDocs
parameter_list|)
block|{
name|super
argument_list|(
name|vs
argument_list|)
expr_stmt|;
name|this
operator|.
name|liveDocs
operator|=
name|liveDocs
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|exists
specifier|public
name|boolean
name|exists
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|liveDocs
operator|==
literal|null
operator|||
name|liveDocs
operator|.
name|get
argument_list|(
name|doc
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|bytesVal
specifier|public
name|boolean
name|bytesVal
parameter_list|(
name|int
name|doc
parameter_list|,
name|BytesRef
name|target
parameter_list|)
block|{
name|source
operator|.
name|getBytes
argument_list|(
name|doc
argument_list|,
name|target
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|intVal
specifier|public
name|int
name|intVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|source
operator|.
name|getInt
argument_list|(
name|doc
argument_list|)
return|;
block|}
block|}
DECL|class|DVLongValues
specifier|private
specifier|static
class|class
name|DVLongValues
extends|extends
name|LongDocValues
block|{
DECL|field|liveDocs
specifier|private
specifier|final
name|Bits
name|liveDocs
decl_stmt|;
DECL|field|source
specifier|private
specifier|final
name|DocValues
operator|.
name|Source
name|source
decl_stmt|;
DECL|method|DVLongValues
specifier|public
name|DVLongValues
parameter_list|(
name|ValueSource
name|vs
parameter_list|,
name|DocValues
operator|.
name|Source
name|source
parameter_list|,
name|Bits
name|liveDocs
parameter_list|)
block|{
name|super
argument_list|(
name|vs
argument_list|)
expr_stmt|;
name|this
operator|.
name|liveDocs
operator|=
name|liveDocs
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|exists
specifier|public
name|boolean
name|exists
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|liveDocs
operator|==
literal|null
operator|||
name|liveDocs
operator|.
name|get
argument_list|(
name|doc
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|bytesVal
specifier|public
name|boolean
name|bytesVal
parameter_list|(
name|int
name|doc
parameter_list|,
name|BytesRef
name|target
parameter_list|)
block|{
name|source
operator|.
name|getBytes
argument_list|(
name|doc
argument_list|,
name|target
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|longVal
specifier|public
name|long
name|longVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|source
operator|.
name|getInt
argument_list|(
name|doc
argument_list|)
return|;
block|}
block|}
DECL|class|DVDoubleValues
specifier|private
specifier|static
specifier|abstract
class|class
name|DVDoubleValues
extends|extends
name|DoubleDocValues
block|{
DECL|field|liveDocs
specifier|private
specifier|final
name|Bits
name|liveDocs
decl_stmt|;
DECL|field|source
specifier|private
specifier|final
name|DocValues
operator|.
name|Source
name|source
decl_stmt|;
DECL|method|DVDoubleValues
specifier|public
name|DVDoubleValues
parameter_list|(
name|ValueSource
name|vs
parameter_list|,
name|DocValues
operator|.
name|Source
name|source
parameter_list|,
name|Bits
name|liveDocs
parameter_list|)
block|{
name|super
argument_list|(
name|vs
argument_list|)
expr_stmt|;
name|this
operator|.
name|liveDocs
operator|=
name|liveDocs
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|exists
specifier|public
name|boolean
name|exists
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|liveDocs
operator|==
literal|null
operator|||
name|liveDocs
operator|.
name|get
argument_list|(
name|doc
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|bytesVal
specifier|public
name|boolean
name|bytesVal
parameter_list|(
name|int
name|doc
parameter_list|,
name|BytesRef
name|target
parameter_list|)
block|{
name|source
operator|.
name|getBytes
argument_list|(
name|doc
argument_list|,
name|target
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|doubleVal
specifier|public
name|double
name|doubleVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|source
operator|.
name|getFloat
argument_list|(
name|doc
argument_list|)
return|;
block|}
block|}
comment|/**    * @param fieldName the name of the {@link DocValues} field    * @param direct    whether or not to use a direct {@link org.apache.lucene.index.DocValues.Source}    */
DECL|method|NumericDocValuesFieldSource
specifier|public
name|NumericDocValuesFieldSource
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|boolean
name|direct
parameter_list|)
block|{
name|super
argument_list|(
name|fieldName
argument_list|,
name|direct
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getValues
specifier|public
name|FunctionValues
name|getValues
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Map
name|context
parameter_list|,
name|AtomicReaderContext
name|readerContext
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DocValues
operator|.
name|Source
name|source
init|=
name|getSource
argument_list|(
name|readerContext
operator|.
name|reader
argument_list|()
argument_list|,
name|DocValues
operator|.
name|Type
operator|.
name|FLOAT_64
argument_list|)
decl_stmt|;
specifier|final
name|Bits
name|liveDocs
init|=
name|readerContext
operator|.
name|reader
argument_list|()
operator|.
name|getLiveDocs
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|source
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|FIXED_INTS_8
case|:
case|case
name|FIXED_INTS_16
case|:
case|case
name|FIXED_INTS_32
case|:
case|case
name|FIXED_INTS_64
case|:
case|case
name|VAR_INTS
case|:
if|if
condition|(
name|source
operator|.
name|hasArray
argument_list|()
condition|)
block|{
specifier|final
name|Object
name|valuesArr
init|=
name|source
operator|.
name|getArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|valuesArr
operator|instanceof
name|long
index|[]
condition|)
block|{
specifier|final
name|long
index|[]
name|values
init|=
operator|(
name|long
index|[]
operator|)
name|source
operator|.
name|getArray
argument_list|()
decl_stmt|;
return|return
operator|new
name|DVLongValues
argument_list|(
name|this
argument_list|,
name|source
argument_list|,
name|liveDocs
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|long
name|longVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|values
index|[
name|doc
index|]
return|;
block|}
block|}
return|;
block|}
elseif|else
if|if
condition|(
name|valuesArr
operator|instanceof
name|int
index|[]
condition|)
block|{
specifier|final
name|int
index|[]
name|values
init|=
operator|(
name|int
index|[]
operator|)
name|source
operator|.
name|getArray
argument_list|()
decl_stmt|;
return|return
operator|new
name|DVIntValues
argument_list|(
name|this
argument_list|,
name|source
argument_list|,
name|liveDocs
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|int
name|intVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|values
index|[
name|doc
index|]
return|;
block|}
block|}
return|;
block|}
elseif|else
if|if
condition|(
name|valuesArr
operator|instanceof
name|short
index|[]
condition|)
block|{
specifier|final
name|short
index|[]
name|values
init|=
operator|(
name|short
index|[]
operator|)
name|source
operator|.
name|getArray
argument_list|()
decl_stmt|;
return|return
operator|new
name|DVIntValues
argument_list|(
name|this
argument_list|,
name|source
argument_list|,
name|liveDocs
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|int
name|intVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|values
index|[
name|doc
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|objectVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|shortVal
argument_list|(
name|doc
argument_list|)
return|;
block|}
block|}
return|;
block|}
elseif|else
if|if
condition|(
name|valuesArr
operator|instanceof
name|byte
index|[]
condition|)
block|{
specifier|final
name|byte
index|[]
name|values
init|=
operator|(
name|byte
index|[]
operator|)
name|source
operator|.
name|getArray
argument_list|()
decl_stmt|;
return|return
operator|new
name|DVIntValues
argument_list|(
name|this
argument_list|,
name|source
argument_list|,
name|liveDocs
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|int
name|intVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|values
index|[
name|doc
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|objectVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|byteVal
argument_list|(
name|doc
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
return|return
operator|new
name|DVLongValues
argument_list|(
name|this
argument_list|,
name|source
argument_list|,
name|liveDocs
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Object
name|objectVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
switch|switch
condition|(
name|source
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|FIXED_INTS_8
case|:
return|return
name|byteVal
argument_list|(
name|doc
argument_list|)
return|;
case|case
name|FIXED_INTS_16
case|:
return|return
name|shortVal
argument_list|(
name|doc
argument_list|)
return|;
case|case
name|FIXED_INTS_32
case|:
return|return
name|intVal
argument_list|(
name|doc
argument_list|)
return|;
case|case
name|FIXED_INTS_64
case|:
case|case
name|VAR_INTS
case|:
return|return
name|longVal
argument_list|(
name|doc
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
block|}
return|;
case|case
name|FLOAT_32
case|:
case|case
name|FLOAT_64
case|:
if|if
condition|(
name|source
operator|.
name|hasArray
argument_list|()
condition|)
block|{
specifier|final
name|Object
name|valuesArr
init|=
name|source
operator|.
name|getArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|valuesArr
operator|instanceof
name|float
index|[]
condition|)
block|{
specifier|final
name|float
index|[]
name|values
init|=
operator|(
name|float
index|[]
operator|)
name|valuesArr
decl_stmt|;
return|return
operator|new
name|FloatDocValues
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|liveDocs
operator|==
literal|null
operator|||
name|liveDocs
operator|.
name|get
argument_list|(
name|doc
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|bytesVal
parameter_list|(
name|int
name|doc
parameter_list|,
name|BytesRef
name|target
parameter_list|)
block|{
name|source
operator|.
name|getBytes
argument_list|(
name|doc
argument_list|,
name|target
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|floatVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|values
index|[
name|doc
index|]
return|;
block|}
block|}
return|;
block|}
elseif|else
if|if
condition|(
name|valuesArr
operator|instanceof
name|double
index|[]
condition|)
block|{
specifier|final
name|double
index|[]
name|values
init|=
operator|(
name|double
index|[]
operator|)
name|valuesArr
decl_stmt|;
return|return
operator|new
name|DVDoubleValues
argument_list|(
name|this
argument_list|,
name|source
argument_list|,
name|liveDocs
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|double
name|doubleVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|values
index|[
name|doc
index|]
return|;
block|}
block|}
return|;
block|}
block|}
return|return
operator|new
name|DVDoubleValues
argument_list|(
name|this
argument_list|,
name|source
argument_list|,
name|liveDocs
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Object
name|objectVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
switch|switch
condition|(
name|source
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|FLOAT_32
case|:
return|return
name|floatVal
argument_list|(
name|doc
argument_list|)
return|;
case|case
name|FLOAT_64
case|:
return|return
name|doubleVal
argument_list|(
name|doc
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
block|}
return|;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" only works with numeric types, not "
operator|+
name|source
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class
end_unit
