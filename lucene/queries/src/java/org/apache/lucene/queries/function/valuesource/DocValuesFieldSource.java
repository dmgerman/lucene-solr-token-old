begin_unit
begin_package
DECL|package|org.apache.lucene.queries.function.valuesource
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|valuesource
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import
begin_comment
comment|/**  * A {@link ValueSource} that is based on a field's {@link DocValues}.  * @lucene.experimental  */
end_comment
begin_class
DECL|class|DocValuesFieldSource
specifier|public
specifier|abstract
class|class
name|DocValuesFieldSource
extends|extends
name|ValueSource
block|{
DECL|field|fieldName
specifier|protected
specifier|final
name|String
name|fieldName
decl_stmt|;
DECL|field|direct
specifier|protected
specifier|final
name|boolean
name|direct
decl_stmt|;
DECL|method|DocValuesFieldSource
specifier|protected
name|DocValuesFieldSource
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|boolean
name|direct
parameter_list|)
block|{
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
name|this
operator|.
name|direct
operator|=
name|direct
expr_stmt|;
block|}
DECL|method|getSource
specifier|protected
specifier|final
name|DocValues
operator|.
name|Source
name|getSource
parameter_list|(
name|AtomicReader
name|reader
parameter_list|,
name|DocValues
operator|.
name|Type
name|defaultType
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DocValues
name|vals
init|=
name|reader
operator|.
name|docValues
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|vals
operator|==
literal|null
condition|)
block|{
switch|switch
condition|(
name|defaultType
condition|)
block|{
case|case
name|BYTES_FIXED_SORTED
case|:
case|case
name|BYTES_VAR_SORTED
case|:
return|return
name|DocValues
operator|.
name|getDefaultSortedSource
argument_list|(
name|defaultType
argument_list|,
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
return|;
default|default:
return|return
name|DocValues
operator|.
name|getDefaultSource
argument_list|(
name|defaultType
argument_list|)
return|;
block|}
block|}
return|return
name|direct
condition|?
name|vals
operator|.
name|getDirectSource
argument_list|()
else|:
name|vals
operator|.
name|getSource
argument_list|()
return|;
block|}
comment|/**    * @return whether or not a direct    * {@link org.apache.lucene.index.DocValues.Source} is used.    */
DECL|method|isDirect
specifier|public
name|boolean
name|isDirect
parameter_list|()
block|{
return|return
name|direct
return|;
block|}
comment|/**    * @return the field name    */
DECL|method|getFieldName
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|fieldName
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
name|getClass
argument_list|()
operator|.
name|isInstance
argument_list|(
name|o
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|DocValuesFieldSource
name|other
init|=
operator|(
name|DocValuesFieldSource
operator|)
name|o
decl_stmt|;
return|return
name|fieldName
operator|.
name|equals
argument_list|(
name|other
operator|.
name|fieldName
argument_list|)
operator|&&
name|direct
operator|==
name|other
operator|.
name|direct
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|h
init|=
name|getClass
argument_list|()
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|h
operator|=
literal|31
operator|*
name|h
operator|+
name|fieldName
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|h
operator|=
literal|31
operator|*
name|h
operator|+
operator|(
name|direct
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|h
return|;
block|}
annotation|@
name|Override
DECL|method|description
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
name|fieldName
return|;
block|}
block|}
end_class
end_unit
