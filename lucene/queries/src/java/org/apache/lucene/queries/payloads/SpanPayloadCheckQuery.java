begin_unit
begin_package
DECL|package|org.apache.lucene.queries.payloads
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|payloads
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|FilterSpans
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|FilterSpans
operator|.
name|AcceptStatus
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanWeight
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|Spans
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_comment
comment|/**  * Only return those matches that have a specific payload at the given position.  */
end_comment
begin_class
DECL|class|SpanPayloadCheckQuery
specifier|public
class|class
name|SpanPayloadCheckQuery
extends|extends
name|SpanQuery
block|{
DECL|field|payloadToMatch
specifier|protected
specifier|final
name|List
argument_list|<
name|BytesRef
argument_list|>
name|payloadToMatch
decl_stmt|;
DECL|field|match
specifier|protected
specifier|final
name|SpanQuery
name|match
decl_stmt|;
comment|/**    * @param match The underlying {@link org.apache.lucene.search.spans.SpanQuery} to check    * @param payloadToMatch The {@link java.util.List} of payloads to match    */
DECL|method|SpanPayloadCheckQuery
specifier|public
name|SpanPayloadCheckQuery
parameter_list|(
name|SpanQuery
name|match
parameter_list|,
name|List
argument_list|<
name|BytesRef
argument_list|>
name|payloadToMatch
parameter_list|)
block|{
name|this
operator|.
name|match
operator|=
name|match
expr_stmt|;
name|this
operator|.
name|payloadToMatch
operator|=
name|payloadToMatch
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getField
specifier|public
name|String
name|getField
parameter_list|()
block|{
return|return
name|match
operator|.
name|getField
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createWeight
specifier|public
name|SpanWeight
name|createWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|boolean
name|needsScores
parameter_list|)
throws|throws
name|IOException
block|{
name|SpanWeight
name|matchWeight
init|=
name|match
operator|.
name|createWeight
argument_list|(
name|searcher
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
operator|new
name|SpanPayloadCheckWeight
argument_list|(
name|searcher
argument_list|,
name|needsScores
condition|?
name|getTermContexts
argument_list|(
name|matchWeight
argument_list|)
else|:
literal|null
argument_list|,
name|matchWeight
argument_list|)
return|;
block|}
comment|/**    * Weight that pulls its Spans using a PayloadSpanCollector    */
DECL|class|SpanPayloadCheckWeight
specifier|public
class|class
name|SpanPayloadCheckWeight
extends|extends
name|SpanWeight
block|{
DECL|field|matchWeight
specifier|final
name|SpanWeight
name|matchWeight
decl_stmt|;
DECL|method|SpanPayloadCheckWeight
specifier|public
name|SpanPayloadCheckWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|Map
argument_list|<
name|Term
argument_list|,
name|TermContext
argument_list|>
name|termContexts
parameter_list|,
name|SpanWeight
name|matchWeight
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|SpanPayloadCheckQuery
operator|.
name|this
argument_list|,
name|searcher
argument_list|,
name|termContexts
argument_list|)
expr_stmt|;
name|this
operator|.
name|matchWeight
operator|=
name|matchWeight
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|extractTerms
specifier|public
name|void
name|extractTerms
parameter_list|(
name|Set
argument_list|<
name|Term
argument_list|>
name|terms
parameter_list|)
block|{
name|matchWeight
operator|.
name|extractTerms
argument_list|(
name|terms
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|extractTermContexts
specifier|public
name|void
name|extractTermContexts
parameter_list|(
name|Map
argument_list|<
name|Term
argument_list|,
name|TermContext
argument_list|>
name|contexts
parameter_list|)
block|{
name|matchWeight
operator|.
name|extractTermContexts
argument_list|(
name|contexts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSpans
specifier|public
name|Spans
name|getSpans
parameter_list|(
specifier|final
name|LeafReaderContext
name|context
parameter_list|,
name|Postings
name|requiredPostings
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|PayloadChecker
name|collector
init|=
operator|new
name|PayloadChecker
argument_list|()
decl_stmt|;
name|Spans
name|matchSpans
init|=
name|matchWeight
operator|.
name|getSpans
argument_list|(
name|context
argument_list|,
name|requiredPostings
operator|.
name|atLeast
argument_list|(
name|Postings
operator|.
name|PAYLOADS
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|matchSpans
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|new
name|FilterSpans
argument_list|(
name|matchSpans
argument_list|,
name|getSimScorer
argument_list|(
name|context
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|AcceptStatus
name|accept
parameter_list|(
name|Spans
name|candidate
parameter_list|)
throws|throws
name|IOException
block|{
name|collector
operator|.
name|reset
argument_list|()
expr_stmt|;
name|candidate
operator|.
name|collect
argument_list|(
name|collector
argument_list|)
expr_stmt|;
return|return
name|collector
operator|.
name|match
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|scorer
specifier|public
name|Scorer
name|scorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Terms
name|terms
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
operator|&&
name|terms
operator|.
name|hasPositions
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"field \""
operator|+
name|field
operator|+
literal|"\" was indexed without position data; cannot run SpanQuery (query="
operator|+
name|parentQuery
operator|+
literal|")"
argument_list|)
throw|;
block|}
return|return
name|getSpans
argument_list|(
name|context
argument_list|,
name|Postings
operator|.
name|PAYLOADS
argument_list|)
return|;
block|}
block|}
DECL|class|PayloadChecker
specifier|private
class|class
name|PayloadChecker
implements|implements
name|SpanCollector
block|{
DECL|field|upto
name|int
name|upto
init|=
literal|0
decl_stmt|;
DECL|field|matches
name|boolean
name|matches
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
DECL|method|collectLeaf
specifier|public
name|void
name|collectLeaf
parameter_list|(
name|PostingsEnum
name|postings
parameter_list|,
name|int
name|position
parameter_list|,
name|Term
name|term
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|matches
condition|)
return|return;
if|if
condition|(
name|upto
operator|>=
name|payloadToMatch
operator|.
name|size
argument_list|()
condition|)
block|{
name|matches
operator|=
literal|false
expr_stmt|;
return|return;
block|}
name|BytesRef
name|payload
init|=
name|postings
operator|.
name|getPayload
argument_list|()
decl_stmt|;
if|if
condition|(
name|payloadToMatch
operator|.
name|get
argument_list|(
name|upto
argument_list|)
operator|==
literal|null
condition|)
block|{
name|matches
operator|=
name|payload
operator|==
literal|null
expr_stmt|;
name|upto
operator|++
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|payload
operator|==
literal|null
condition|)
block|{
name|matches
operator|=
literal|false
expr_stmt|;
name|upto
operator|++
expr_stmt|;
return|return;
block|}
name|matches
operator|=
name|payloadToMatch
operator|.
name|get
argument_list|(
name|upto
argument_list|)
operator|.
name|bytesEquals
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|upto
operator|++
expr_stmt|;
block|}
DECL|method|match
name|AcceptStatus
name|match
parameter_list|()
block|{
return|return
name|matches
operator|&&
name|upto
operator|==
name|payloadToMatch
operator|.
name|size
argument_list|()
condition|?
name|AcceptStatus
operator|.
name|YES
else|:
name|AcceptStatus
operator|.
name|NO
return|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|this
operator|.
name|upto
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|matches
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"spanPayCheck("
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|match
operator|.
name|toString
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|", payloadRef: "
argument_list|)
expr_stmt|;
for|for
control|(
name|BytesRef
name|bytes
range|:
name|payloadToMatch
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|Term
operator|.
name|toString
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SpanPayloadCheckQuery
name|other
init|=
operator|(
name|SpanPayloadCheckQuery
operator|)
name|o
decl_stmt|;
return|return
name|this
operator|.
name|payloadToMatch
operator|.
name|equals
argument_list|(
name|other
operator|.
name|payloadToMatch
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|h
init|=
name|super
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|h
operator|=
operator|(
name|h
operator|*
literal|63
operator|)
operator|^
name|payloadToMatch
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|h
return|;
block|}
block|}
end_class
end_unit
