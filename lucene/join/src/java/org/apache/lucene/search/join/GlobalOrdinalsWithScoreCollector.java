begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.search.join
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Collector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|LeafCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LongBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LongValues
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_class
DECL|class|GlobalOrdinalsWithScoreCollector
specifier|abstract
class|class
name|GlobalOrdinalsWithScoreCollector
implements|implements
name|Collector
block|{
DECL|field|field
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|doMinMax
specifier|final
name|boolean
name|doMinMax
decl_stmt|;
DECL|field|min
specifier|final
name|int
name|min
decl_stmt|;
DECL|field|max
specifier|final
name|int
name|max
decl_stmt|;
DECL|field|ordinalMap
specifier|final
name|MultiDocValues
operator|.
name|OrdinalMap
name|ordinalMap
decl_stmt|;
DECL|field|collectedOrds
specifier|final
name|LongBitSet
name|collectedOrds
decl_stmt|;
DECL|field|scores
specifier|protected
specifier|final
name|Scores
name|scores
decl_stmt|;
DECL|field|occurrences
specifier|protected
specifier|final
name|Occurrences
name|occurrences
decl_stmt|;
DECL|method|GlobalOrdinalsWithScoreCollector
name|GlobalOrdinalsWithScoreCollector
parameter_list|(
name|String
name|field
parameter_list|,
name|MultiDocValues
operator|.
name|OrdinalMap
name|ordinalMap
parameter_list|,
name|long
name|valueCount
parameter_list|,
name|ScoreMode
name|scoreMode
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
if|if
condition|(
name|valueCount
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
comment|// We simply don't support more than
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't collect more than ["
operator|+
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|"] ids"
argument_list|)
throw|;
block|}
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|doMinMax
operator|=
operator|!
operator|(
name|min
operator|<=
literal|0
operator|&&
name|max
operator|==
name|Integer
operator|.
name|MAX_VALUE
operator|)
expr_stmt|;
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
empty_stmt|;
name|this
operator|.
name|ordinalMap
operator|=
name|ordinalMap
expr_stmt|;
name|this
operator|.
name|collectedOrds
operator|=
operator|new
name|LongBitSet
argument_list|(
name|valueCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|scoreMode
operator|!=
name|ScoreMode
operator|.
name|None
condition|)
block|{
name|this
operator|.
name|scores
operator|=
operator|new
name|Scores
argument_list|(
name|valueCount
argument_list|,
name|unset
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|scores
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|scoreMode
operator|==
name|ScoreMode
operator|.
name|Avg
operator|||
name|doMinMax
condition|)
block|{
name|this
operator|.
name|occurrences
operator|=
operator|new
name|Occurrences
argument_list|(
name|valueCount
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|occurrences
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|match
specifier|public
name|boolean
name|match
parameter_list|(
name|int
name|globalOrd
parameter_list|)
block|{
if|if
condition|(
name|collectedOrds
operator|.
name|get
argument_list|(
name|globalOrd
argument_list|)
condition|)
block|{
if|if
condition|(
name|doMinMax
condition|)
block|{
specifier|final
name|int
name|occurrence
init|=
name|occurrences
operator|.
name|getOccurrence
argument_list|(
name|globalOrd
argument_list|)
decl_stmt|;
return|return
name|occurrence
operator|>=
name|min
operator|&&
name|occurrence
operator|<=
name|max
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|score
specifier|public
name|float
name|score
parameter_list|(
name|int
name|globalOrdinal
parameter_list|)
block|{
return|return
name|scores
operator|.
name|getScore
argument_list|(
name|globalOrdinal
argument_list|)
return|;
block|}
DECL|method|doScore
specifier|protected
specifier|abstract
name|void
name|doScore
parameter_list|(
name|int
name|globalOrd
parameter_list|,
name|float
name|existingScore
parameter_list|,
name|float
name|newScore
parameter_list|)
function_decl|;
DECL|method|unset
specifier|protected
specifier|abstract
name|float
name|unset
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|getLeafCollector
specifier|public
name|LeafCollector
name|getLeafCollector
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedDocValues
name|docTermOrds
init|=
name|DocValues
operator|.
name|getSorted
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|ordinalMap
operator|!=
literal|null
condition|)
block|{
name|LongValues
name|segmentOrdToGlobalOrdLookup
init|=
name|ordinalMap
operator|.
name|getGlobalOrds
argument_list|(
name|context
operator|.
name|ord
argument_list|)
decl_stmt|;
return|return
operator|new
name|OrdinalMapCollector
argument_list|(
name|docTermOrds
argument_list|,
name|segmentOrdToGlobalOrdLookup
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|SegmentOrdinalCollector
argument_list|(
name|docTermOrds
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|needsScores
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|class|OrdinalMapCollector
specifier|final
class|class
name|OrdinalMapCollector
implements|implements
name|LeafCollector
block|{
DECL|field|docTermOrds
specifier|private
specifier|final
name|SortedDocValues
name|docTermOrds
decl_stmt|;
DECL|field|segmentOrdToGlobalOrdLookup
specifier|private
specifier|final
name|LongValues
name|segmentOrdToGlobalOrdLookup
decl_stmt|;
DECL|field|scorer
specifier|private
name|Scorer
name|scorer
decl_stmt|;
DECL|method|OrdinalMapCollector
name|OrdinalMapCollector
parameter_list|(
name|SortedDocValues
name|docTermOrds
parameter_list|,
name|LongValues
name|segmentOrdToGlobalOrdLookup
parameter_list|)
block|{
name|this
operator|.
name|docTermOrds
operator|=
name|docTermOrds
expr_stmt|;
name|this
operator|.
name|segmentOrdToGlobalOrdLookup
operator|=
name|segmentOrdToGlobalOrdLookup
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|segmentOrd
init|=
name|docTermOrds
operator|.
name|getOrd
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|segmentOrd
operator|!=
operator|-
literal|1
condition|)
block|{
specifier|final
name|int
name|globalOrd
init|=
operator|(
name|int
operator|)
name|segmentOrdToGlobalOrdLookup
operator|.
name|get
argument_list|(
name|segmentOrd
argument_list|)
decl_stmt|;
name|collectedOrds
operator|.
name|set
argument_list|(
name|globalOrd
argument_list|)
expr_stmt|;
name|float
name|existingScore
init|=
name|scores
operator|.
name|getScore
argument_list|(
name|globalOrd
argument_list|)
decl_stmt|;
name|float
name|newScore
init|=
name|scorer
operator|.
name|score
argument_list|()
decl_stmt|;
name|doScore
argument_list|(
name|globalOrd
argument_list|,
name|existingScore
argument_list|,
name|newScore
argument_list|)
expr_stmt|;
if|if
condition|(
name|occurrences
operator|!=
literal|null
condition|)
block|{
name|occurrences
operator|.
name|increment
argument_list|(
name|globalOrd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
block|}
block|}
DECL|class|SegmentOrdinalCollector
specifier|final
class|class
name|SegmentOrdinalCollector
implements|implements
name|LeafCollector
block|{
DECL|field|docTermOrds
specifier|private
specifier|final
name|SortedDocValues
name|docTermOrds
decl_stmt|;
DECL|field|scorer
specifier|private
name|Scorer
name|scorer
decl_stmt|;
DECL|method|SegmentOrdinalCollector
name|SegmentOrdinalCollector
parameter_list|(
name|SortedDocValues
name|docTermOrds
parameter_list|)
block|{
name|this
operator|.
name|docTermOrds
operator|=
name|docTermOrds
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|segmentOrd
init|=
name|docTermOrds
operator|.
name|getOrd
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|segmentOrd
operator|!=
operator|-
literal|1
condition|)
block|{
name|collectedOrds
operator|.
name|set
argument_list|(
name|segmentOrd
argument_list|)
expr_stmt|;
name|float
name|existingScore
init|=
name|scores
operator|.
name|getScore
argument_list|(
name|segmentOrd
argument_list|)
decl_stmt|;
name|float
name|newScore
init|=
name|scorer
operator|.
name|score
argument_list|()
decl_stmt|;
name|doScore
argument_list|(
name|segmentOrd
argument_list|,
name|existingScore
argument_list|,
name|newScore
argument_list|)
expr_stmt|;
if|if
condition|(
name|occurrences
operator|!=
literal|null
condition|)
block|{
name|occurrences
operator|.
name|increment
argument_list|(
name|segmentOrd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
block|}
block|}
DECL|class|Min
specifier|static
specifier|final
class|class
name|Min
extends|extends
name|GlobalOrdinalsWithScoreCollector
block|{
DECL|method|Min
specifier|public
name|Min
parameter_list|(
name|String
name|field
parameter_list|,
name|MultiDocValues
operator|.
name|OrdinalMap
name|ordinalMap
parameter_list|,
name|long
name|valueCount
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|,
name|ordinalMap
argument_list|,
name|valueCount
argument_list|,
name|ScoreMode
operator|.
name|Min
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doScore
specifier|protected
name|void
name|doScore
parameter_list|(
name|int
name|globalOrd
parameter_list|,
name|float
name|existingScore
parameter_list|,
name|float
name|newScore
parameter_list|)
block|{
name|scores
operator|.
name|setScore
argument_list|(
name|globalOrd
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|existingScore
argument_list|,
name|newScore
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|unset
specifier|protected
name|float
name|unset
parameter_list|()
block|{
return|return
name|Float
operator|.
name|POSITIVE_INFINITY
return|;
block|}
block|}
DECL|class|Max
specifier|static
specifier|final
class|class
name|Max
extends|extends
name|GlobalOrdinalsWithScoreCollector
block|{
DECL|method|Max
specifier|public
name|Max
parameter_list|(
name|String
name|field
parameter_list|,
name|MultiDocValues
operator|.
name|OrdinalMap
name|ordinalMap
parameter_list|,
name|long
name|valueCount
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|,
name|ordinalMap
argument_list|,
name|valueCount
argument_list|,
name|ScoreMode
operator|.
name|Max
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doScore
specifier|protected
name|void
name|doScore
parameter_list|(
name|int
name|globalOrd
parameter_list|,
name|float
name|existingScore
parameter_list|,
name|float
name|newScore
parameter_list|)
block|{
name|scores
operator|.
name|setScore
argument_list|(
name|globalOrd
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|existingScore
argument_list|,
name|newScore
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|unset
specifier|protected
name|float
name|unset
parameter_list|()
block|{
return|return
name|Float
operator|.
name|NEGATIVE_INFINITY
return|;
block|}
block|}
DECL|class|Sum
specifier|static
specifier|final
class|class
name|Sum
extends|extends
name|GlobalOrdinalsWithScoreCollector
block|{
DECL|method|Sum
specifier|public
name|Sum
parameter_list|(
name|String
name|field
parameter_list|,
name|MultiDocValues
operator|.
name|OrdinalMap
name|ordinalMap
parameter_list|,
name|long
name|valueCount
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|,
name|ordinalMap
argument_list|,
name|valueCount
argument_list|,
name|ScoreMode
operator|.
name|Total
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doScore
specifier|protected
name|void
name|doScore
parameter_list|(
name|int
name|globalOrd
parameter_list|,
name|float
name|existingScore
parameter_list|,
name|float
name|newScore
parameter_list|)
block|{
name|scores
operator|.
name|setScore
argument_list|(
name|globalOrd
argument_list|,
name|existingScore
operator|+
name|newScore
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|unset
specifier|protected
name|float
name|unset
parameter_list|()
block|{
return|return
literal|0f
return|;
block|}
block|}
DECL|class|Avg
specifier|static
specifier|final
class|class
name|Avg
extends|extends
name|GlobalOrdinalsWithScoreCollector
block|{
DECL|method|Avg
specifier|public
name|Avg
parameter_list|(
name|String
name|field
parameter_list|,
name|MultiDocValues
operator|.
name|OrdinalMap
name|ordinalMap
parameter_list|,
name|long
name|valueCount
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|,
name|ordinalMap
argument_list|,
name|valueCount
argument_list|,
name|ScoreMode
operator|.
name|Avg
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doScore
specifier|protected
name|void
name|doScore
parameter_list|(
name|int
name|globalOrd
parameter_list|,
name|float
name|existingScore
parameter_list|,
name|float
name|newScore
parameter_list|)
block|{
name|scores
operator|.
name|setScore
argument_list|(
name|globalOrd
argument_list|,
name|existingScore
operator|+
name|newScore
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|(
name|int
name|globalOrdinal
parameter_list|)
block|{
return|return
name|scores
operator|.
name|getScore
argument_list|(
name|globalOrdinal
argument_list|)
operator|/
name|occurrences
operator|.
name|getOccurrence
argument_list|(
name|globalOrdinal
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|unset
specifier|protected
name|float
name|unset
parameter_list|()
block|{
return|return
literal|0f
return|;
block|}
block|}
DECL|class|NoScore
specifier|static
specifier|final
class|class
name|NoScore
extends|extends
name|GlobalOrdinalsWithScoreCollector
block|{
DECL|method|NoScore
specifier|public
name|NoScore
parameter_list|(
name|String
name|field
parameter_list|,
name|MultiDocValues
operator|.
name|OrdinalMap
name|ordinalMap
parameter_list|,
name|long
name|valueCount
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|,
name|ordinalMap
argument_list|,
name|valueCount
argument_list|,
name|ScoreMode
operator|.
name|None
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLeafCollector
specifier|public
name|LeafCollector
name|getLeafCollector
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedDocValues
name|docTermOrds
init|=
name|DocValues
operator|.
name|getSorted
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|ordinalMap
operator|!=
literal|null
condition|)
block|{
name|LongValues
name|segmentOrdToGlobalOrdLookup
init|=
name|ordinalMap
operator|.
name|getGlobalOrds
argument_list|(
name|context
operator|.
name|ord
argument_list|)
decl_stmt|;
return|return
operator|new
name|LeafCollector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{           }
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|segmentOrd
init|=
name|docTermOrds
operator|.
name|getOrd
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|segmentOrd
operator|!=
operator|-
literal|1
condition|)
block|{
specifier|final
name|int
name|globalOrd
init|=
operator|(
name|int
operator|)
name|segmentOrdToGlobalOrdLookup
operator|.
name|get
argument_list|(
name|segmentOrd
argument_list|)
decl_stmt|;
name|collectedOrds
operator|.
name|set
argument_list|(
name|globalOrd
argument_list|)
expr_stmt|;
name|occurrences
operator|.
name|increment
argument_list|(
name|globalOrd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
else|else
block|{
return|return
operator|new
name|LeafCollector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{           }
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|segmentOrd
init|=
name|docTermOrds
operator|.
name|getOrd
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|segmentOrd
operator|!=
operator|-
literal|1
condition|)
block|{
name|collectedOrds
operator|.
name|set
argument_list|(
name|segmentOrd
argument_list|)
expr_stmt|;
name|occurrences
operator|.
name|increment
argument_list|(
name|segmentOrd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|doScore
specifier|protected
name|void
name|doScore
parameter_list|(
name|int
name|globalOrd
parameter_list|,
name|float
name|existingScore
parameter_list|,
name|float
name|newScore
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|(
name|int
name|globalOrdinal
parameter_list|)
block|{
return|return
literal|1f
return|;
block|}
annotation|@
name|Override
DECL|method|unset
specifier|protected
name|float
name|unset
parameter_list|()
block|{
return|return
literal|0f
return|;
block|}
annotation|@
name|Override
DECL|method|needsScores
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// Because the global ordinal is directly used as a key to a score we should be somewhat smart about allocation
comment|// the scores array. Most of the times not all docs match so splitting the scores array up in blocks can prevent creation of huge arrays.
comment|// Also working with smaller arrays is supposed to be more gc friendly
comment|//
comment|// At first a hash map implementation would make sense, but in the case that more than half of docs match this becomes more expensive
comment|// then just using an array.
comment|// Maybe this should become a method parameter?
DECL|field|arraySize
specifier|static
specifier|final
name|int
name|arraySize
init|=
literal|4096
decl_stmt|;
DECL|class|Scores
specifier|static
specifier|final
class|class
name|Scores
block|{
DECL|field|blocks
specifier|final
name|float
index|[]
index|[]
name|blocks
decl_stmt|;
DECL|field|unset
specifier|final
name|float
name|unset
decl_stmt|;
DECL|method|Scores
specifier|private
name|Scores
parameter_list|(
name|long
name|valueCount
parameter_list|,
name|float
name|unset
parameter_list|)
block|{
name|long
name|blockSize
init|=
name|valueCount
operator|+
name|arraySize
operator|-
literal|1
decl_stmt|;
name|blocks
operator|=
operator|new
name|float
index|[
call|(
name|int
call|)
argument_list|(
operator|(
name|blockSize
operator|)
operator|/
name|arraySize
argument_list|)
index|]
index|[]
expr_stmt|;
name|this
operator|.
name|unset
operator|=
name|unset
expr_stmt|;
block|}
DECL|method|setScore
specifier|public
name|void
name|setScore
parameter_list|(
name|int
name|globalOrdinal
parameter_list|,
name|float
name|score
parameter_list|)
block|{
name|int
name|block
init|=
name|globalOrdinal
operator|/
name|arraySize
decl_stmt|;
name|int
name|offset
init|=
name|globalOrdinal
operator|%
name|arraySize
decl_stmt|;
name|float
index|[]
name|scores
init|=
name|blocks
index|[
name|block
index|]
decl_stmt|;
if|if
condition|(
name|scores
operator|==
literal|null
condition|)
block|{
name|blocks
index|[
name|block
index|]
operator|=
name|scores
operator|=
operator|new
name|float
index|[
name|arraySize
index|]
expr_stmt|;
if|if
condition|(
name|unset
operator|!=
literal|0f
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|scores
argument_list|,
name|unset
argument_list|)
expr_stmt|;
block|}
block|}
name|scores
index|[
name|offset
index|]
operator|=
name|score
expr_stmt|;
block|}
DECL|method|getScore
specifier|public
name|float
name|getScore
parameter_list|(
name|int
name|globalOrdinal
parameter_list|)
block|{
name|int
name|block
init|=
name|globalOrdinal
operator|/
name|arraySize
decl_stmt|;
name|int
name|offset
init|=
name|globalOrdinal
operator|%
name|arraySize
decl_stmt|;
name|float
index|[]
name|scores
init|=
name|blocks
index|[
name|block
index|]
decl_stmt|;
name|float
name|score
decl_stmt|;
if|if
condition|(
name|scores
operator|!=
literal|null
condition|)
block|{
name|score
operator|=
name|scores
index|[
name|offset
index|]
expr_stmt|;
block|}
else|else
block|{
name|score
operator|=
name|unset
expr_stmt|;
block|}
return|return
name|score
return|;
block|}
block|}
DECL|class|Occurrences
specifier|static
specifier|final
class|class
name|Occurrences
block|{
DECL|field|blocks
specifier|final
name|int
index|[]
index|[]
name|blocks
decl_stmt|;
DECL|method|Occurrences
specifier|private
name|Occurrences
parameter_list|(
name|long
name|valueCount
parameter_list|)
block|{
name|long
name|blockSize
init|=
name|valueCount
operator|+
name|arraySize
operator|-
literal|1
decl_stmt|;
name|blocks
operator|=
operator|new
name|int
index|[
call|(
name|int
call|)
argument_list|(
name|blockSize
operator|/
name|arraySize
argument_list|)
index|]
index|[]
expr_stmt|;
block|}
DECL|method|increment
specifier|public
name|void
name|increment
parameter_list|(
name|int
name|globalOrdinal
parameter_list|)
block|{
name|int
name|block
init|=
name|globalOrdinal
operator|/
name|arraySize
decl_stmt|;
name|int
name|offset
init|=
name|globalOrdinal
operator|%
name|arraySize
decl_stmt|;
name|int
index|[]
name|occurrences
init|=
name|blocks
index|[
name|block
index|]
decl_stmt|;
if|if
condition|(
name|occurrences
operator|==
literal|null
condition|)
block|{
name|blocks
index|[
name|block
index|]
operator|=
name|occurrences
operator|=
operator|new
name|int
index|[
name|arraySize
index|]
expr_stmt|;
block|}
name|occurrences
index|[
name|offset
index|]
operator|++
expr_stmt|;
block|}
DECL|method|getOccurrence
specifier|public
name|int
name|getOccurrence
parameter_list|(
name|int
name|globalOrdinal
parameter_list|)
block|{
name|int
name|block
init|=
name|globalOrdinal
operator|/
name|arraySize
decl_stmt|;
name|int
name|offset
init|=
name|globalOrdinal
operator|%
name|arraySize
decl_stmt|;
name|int
index|[]
name|occurrences
init|=
name|blocks
index|[
name|block
index|]
decl_stmt|;
return|return
name|occurrences
index|[
name|offset
index|]
return|;
block|}
block|}
block|}
end_class
end_unit
