begin_unit
begin_package
DECL|package|org.apache.lucene.search.join
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|LongConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
operator|.
name|NumericType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BinaryDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedNumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SimpleCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|DocValuesTermsCollector
specifier|abstract
class|class
name|DocValuesTermsCollector
parameter_list|<
name|DV
parameter_list|>
extends|extends
name|SimpleCollector
block|{
annotation|@
name|FunctionalInterface
DECL|interface|Function
specifier|static
interface|interface
name|Function
parameter_list|<
name|R
parameter_list|>
block|{
DECL|method|apply
name|R
name|apply
parameter_list|(
name|LeafReader
name|t
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|field|docValues
specifier|protected
name|DV
name|docValues
decl_stmt|;
DECL|field|docValuesCall
specifier|private
specifier|final
name|Function
argument_list|<
name|DV
argument_list|>
name|docValuesCall
decl_stmt|;
DECL|method|DocValuesTermsCollector
specifier|public
name|DocValuesTermsCollector
parameter_list|(
name|Function
argument_list|<
name|DV
argument_list|>
name|docValuesCall
parameter_list|)
block|{
name|this
operator|.
name|docValuesCall
operator|=
name|docValuesCall
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doSetNextReader
specifier|protected
specifier|final
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|docValues
operator|=
name|docValuesCall
operator|.
name|apply
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|binaryDocValues
specifier|static
name|Function
argument_list|<
name|BinaryDocValues
argument_list|>
name|binaryDocValues
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
parameter_list|(
name|ctx
parameter_list|)
lambda|->
name|DocValues
operator|.
name|getBinary
argument_list|(
name|ctx
argument_list|,
name|field
argument_list|)
return|;
block|}
DECL|method|sortedSetDocValues
specifier|static
name|Function
argument_list|<
name|SortedSetDocValues
argument_list|>
name|sortedSetDocValues
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
parameter_list|(
name|ctx
parameter_list|)
lambda|->
name|DocValues
operator|.
name|getSortedSet
argument_list|(
name|ctx
argument_list|,
name|field
argument_list|)
return|;
block|}
DECL|method|numericAsBinaryDocValues
specifier|static
name|Function
argument_list|<
name|BinaryDocValues
argument_list|>
name|numericAsBinaryDocValues
parameter_list|(
name|String
name|field
parameter_list|,
name|NumericType
name|numTyp
parameter_list|)
block|{
return|return
parameter_list|(
name|ctx
parameter_list|)
lambda|->
block|{
specifier|final
name|NumericDocValues
name|numeric
init|=
name|DocValues
operator|.
name|getNumeric
argument_list|(
name|ctx
argument_list|,
name|field
argument_list|)
decl_stmt|;
specifier|final
name|BytesRefBuilder
name|bytes
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
specifier|final
name|LongConsumer
name|coder
init|=
name|coder
argument_list|(
name|bytes
argument_list|,
name|numTyp
argument_list|,
name|field
argument_list|)
decl_stmt|;
return|return
operator|new
name|BinaryDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|BytesRef
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
specifier|final
name|long
name|lVal
init|=
name|numeric
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
name|coder
operator|.
name|accept
argument_list|(
name|lVal
argument_list|)
expr_stmt|;
return|return
name|bytes
operator|.
name|get
argument_list|()
return|;
block|}
block|}
return|;
block|}
return|;
block|}
DECL|method|coder
specifier|static
name|LongConsumer
name|coder
parameter_list|(
name|BytesRefBuilder
name|bytes
parameter_list|,
name|NumericType
name|type
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|INT
case|:
return|return
parameter_list|(
name|l
parameter_list|)
lambda|->
name|NumericUtils
operator|.
name|intToPrefixCoded
argument_list|(
operator|(
name|int
operator|)
name|l
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
parameter_list|(
name|l
parameter_list|)
lambda|->
name|NumericUtils
operator|.
name|longToPrefixCoded
argument_list|(
name|l
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported "
operator|+
name|type
operator|+
literal|". Only "
operator|+
name|NumericType
operator|.
name|INT
operator|+
literal|" and "
operator|+
name|NumericType
operator|.
name|LONG
operator|+
literal|" are supported."
operator|+
literal|"Field "
operator|+
name|fieldName
argument_list|)
throw|;
block|}
block|}
comment|/** this adapter is quite weird. ords are per doc index, don't use ords across different docs*/
DECL|method|sortedNumericAsSortedSetDocValues
specifier|static
name|Function
argument_list|<
name|SortedSetDocValues
argument_list|>
name|sortedNumericAsSortedSetDocValues
parameter_list|(
name|String
name|field
parameter_list|,
name|NumericType
name|numTyp
parameter_list|)
block|{
return|return
parameter_list|(
name|ctx
parameter_list|)
lambda|->
block|{
specifier|final
name|SortedNumericDocValues
name|numerics
init|=
name|DocValues
operator|.
name|getSortedNumeric
argument_list|(
name|ctx
argument_list|,
name|field
argument_list|)
decl_stmt|;
specifier|final
name|BytesRefBuilder
name|bytes
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
specifier|final
name|LongConsumer
name|coder
init|=
name|coder
argument_list|(
name|bytes
argument_list|,
name|numTyp
argument_list|,
name|field
argument_list|)
decl_stmt|;
return|return
operator|new
name|SortedSetDocValues
argument_list|()
block|{
specifier|private
name|int
name|index
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
annotation|@
name|Override
specifier|public
name|long
name|nextOrd
parameter_list|()
block|{
return|return
name|index
operator|<
name|numerics
operator|.
name|count
argument_list|()
operator|-
literal|1
condition|?
operator|++
name|index
else|:
name|NO_MORE_ORDS
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|numerics
operator|.
name|setDocument
argument_list|(
name|docID
argument_list|)
expr_stmt|;
name|index
operator|=
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|long
name|ord
parameter_list|)
block|{
assert|assert
name|ord
operator|>=
literal|0
operator|&&
name|ord
operator|<
name|numerics
operator|.
name|count
argument_list|()
assert|;
specifier|final
name|long
name|value
init|=
name|numerics
operator|.
name|valueAt
argument_list|(
operator|(
name|int
operator|)
name|ord
argument_list|)
decl_stmt|;
name|coder
operator|.
name|accept
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|bytes
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getValueCount
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"it's just number encoding wrapper"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|lookupTerm
parameter_list|(
name|BytesRef
name|key
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"it's just number encoding wrapper"
argument_list|)
throw|;
block|}
block|}
return|;
block|}
return|;
block|}
block|}
end_class
end_unit
