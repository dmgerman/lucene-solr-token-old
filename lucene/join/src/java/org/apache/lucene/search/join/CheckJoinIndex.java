begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.search.join
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_comment
comment|/** Utility class to check a block join index. */
end_comment
begin_class
DECL|class|CheckJoinIndex
specifier|public
class|class
name|CheckJoinIndex
block|{
DECL|method|CheckJoinIndex
specifier|private
name|CheckJoinIndex
parameter_list|()
block|{}
comment|/**    * Check that the given index is good to use for block joins.    * @throws IllegalStateException if the index does not have an appropriate structure    */
DECL|method|check
specifier|public
specifier|static
name|void
name|check
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|BitSetProducer
name|parentsFilter
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|LeafReaderContext
name|context
range|:
name|reader
operator|.
name|leaves
argument_list|()
control|)
block|{
if|if
condition|(
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
specifier|final
name|BitSet
name|parents
init|=
name|parentsFilter
operator|.
name|getBitSet
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|parents
operator|==
literal|null
operator|||
name|parents
operator|.
name|cardinality
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Every segment should have at least one parent, but "
operator|+
name|context
operator|.
name|reader
argument_list|()
operator|+
literal|" does not have any"
argument_list|)
throw|;
block|}
if|if
condition|(
name|parents
operator|.
name|get
argument_list|(
name|context
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The last document of a segment must always be a parent, but "
operator|+
name|context
operator|.
name|reader
argument_list|()
operator|+
literal|" has a child as a last doc"
argument_list|)
throw|;
block|}
specifier|final
name|Bits
name|liveDocs
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getLiveDocs
argument_list|()
decl_stmt|;
if|if
condition|(
name|liveDocs
operator|!=
literal|null
condition|)
block|{
name|int
name|prevParentDoc
init|=
operator|-
literal|1
decl_stmt|;
name|DocIdSetIterator
name|it
init|=
operator|new
name|BitSetIterator
argument_list|(
name|parents
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|parentDoc
init|=
name|it
operator|.
name|nextDoc
argument_list|()
init|;
name|parentDoc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|parentDoc
operator|=
name|it
operator|.
name|nextDoc
argument_list|()
control|)
block|{
specifier|final
name|boolean
name|parentIsLive
init|=
name|liveDocs
operator|.
name|get
argument_list|(
name|parentDoc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|child
init|=
name|prevParentDoc
operator|+
literal|1
init|;
name|child
operator|!=
name|parentDoc
condition|;
name|child
operator|++
control|)
block|{
specifier|final
name|boolean
name|childIsLive
init|=
name|liveDocs
operator|.
name|get
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentIsLive
operator|!=
name|childIsLive
condition|)
block|{
if|if
condition|(
name|childIsLive
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Parent doc "
operator|+
name|parentDoc
operator|+
literal|" of segment "
operator|+
name|context
operator|.
name|reader
argument_list|()
operator|+
literal|" is live but has a deleted child document "
operator|+
name|child
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Parent doc "
operator|+
name|parentDoc
operator|+
literal|" of segment "
operator|+
name|context
operator|.
name|reader
argument_list|()
operator|+
literal|" is deleted but has a live child document "
operator|+
name|child
argument_list|)
throw|;
block|}
block|}
block|}
name|prevParentDoc
operator|=
name|parentDoc
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class
end_unit
