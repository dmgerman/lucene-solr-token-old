begin_unit
begin_package
DECL|package|org.apache.lucene.search.join
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedNumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortedNumericSelector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortedSetSelector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_comment
comment|/** Select a value from a block of documents.  *  @lucene.internal */
end_comment
begin_class
DECL|class|BlockJoinSelector
specifier|public
class|class
name|BlockJoinSelector
block|{
comment|/** Type of selection to perform. If none of the documents in the block have    *  a value then no value will be selected. */
DECL|enum|Type
specifier|public
enum|enum
name|Type
block|{
DECL|enum constant|MIN
DECL|enum constant|MAX
name|MIN
block|,
name|MAX
block|;   }
comment|/** Return a {@link Bits} instance that returns true if, and only if, any of    *  the children of the given parent document has a value. */
DECL|method|wrap
specifier|public
specifier|static
name|Bits
name|wrap
parameter_list|(
specifier|final
name|Bits
name|docsWithValue
parameter_list|,
name|BitSet
name|parents
parameter_list|,
name|BitSet
name|children
parameter_list|)
block|{
return|return
operator|new
name|Bits
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
assert|assert
name|parents
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|:
literal|"this selector may only be used on parent documents"
assert|;
if|if
condition|(
name|docID
operator|==
literal|0
condition|)
block|{
comment|// no children
return|return
literal|false
return|;
block|}
specifier|final
name|int
name|firstChild
init|=
name|parents
operator|.
name|prevSetBit
argument_list|(
name|docID
operator|-
literal|1
argument_list|)
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|child
init|=
name|children
operator|.
name|nextSetBit
argument_list|(
name|firstChild
argument_list|)
init|;
name|child
operator|<
name|docID
condition|;
name|child
operator|=
name|children
operator|.
name|nextSetBit
argument_list|(
name|child
operator|+
literal|1
argument_list|)
control|)
block|{
if|if
condition|(
name|docsWithValue
operator|.
name|get
argument_list|(
name|child
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|docsWithValue
operator|.
name|length
argument_list|()
return|;
block|}
block|}
return|;
block|}
comment|/** Wraps the provided {@link SortedSetDocValues} in order to only select    *  one value per parent among its {@code children} using the configured    *  {@code selection} type. */
DECL|method|wrap
specifier|public
specifier|static
name|SortedDocValues
name|wrap
parameter_list|(
name|SortedSetDocValues
name|sortedSet
parameter_list|,
name|Type
name|selection
parameter_list|,
name|BitSet
name|parents
parameter_list|,
name|BitSet
name|children
parameter_list|)
block|{
name|SortedDocValues
name|values
decl_stmt|;
switch|switch
condition|(
name|selection
condition|)
block|{
case|case
name|MIN
case|:
name|values
operator|=
name|SortedSetSelector
operator|.
name|wrap
argument_list|(
name|sortedSet
argument_list|,
name|SortedSetSelector
operator|.
name|Type
operator|.
name|MIN
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAX
case|:
name|values
operator|=
name|SortedSetSelector
operator|.
name|wrap
argument_list|(
name|sortedSet
argument_list|,
name|SortedSetSelector
operator|.
name|Type
operator|.
name|MAX
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
return|return
name|wrap
argument_list|(
name|values
argument_list|,
name|selection
argument_list|,
name|parents
argument_list|,
name|children
argument_list|)
return|;
block|}
comment|/** Wraps the provided {@link SortedDocValues} in order to only select    *  one value per parent among its {@code children} using the configured    *  {@code selection} type. */
DECL|method|wrap
specifier|public
specifier|static
name|SortedDocValues
name|wrap
parameter_list|(
specifier|final
name|SortedDocValues
name|values
parameter_list|,
name|Type
name|selection
parameter_list|,
name|BitSet
name|parents
parameter_list|,
name|BitSet
name|children
parameter_list|)
block|{
return|return
operator|new
name|SortedDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getOrd
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
assert|assert
name|parents
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|:
literal|"this selector may only be used on parent documents"
assert|;
if|if
condition|(
name|docID
operator|==
literal|0
condition|)
block|{
comment|// no children
return|return
operator|-
literal|1
return|;
block|}
specifier|final
name|int
name|firstChild
init|=
name|parents
operator|.
name|prevSetBit
argument_list|(
name|docID
operator|-
literal|1
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|ord
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|child
init|=
name|children
operator|.
name|nextSetBit
argument_list|(
name|firstChild
argument_list|)
init|;
name|child
operator|<
name|docID
condition|;
name|child
operator|=
name|children
operator|.
name|nextSetBit
argument_list|(
name|child
operator|+
literal|1
argument_list|)
control|)
block|{
specifier|final
name|int
name|childOrd
init|=
name|values
operator|.
name|getOrd
argument_list|(
name|child
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|selection
condition|)
block|{
case|case
name|MIN
case|:
if|if
condition|(
name|ord
operator|==
operator|-
literal|1
condition|)
block|{
name|ord
operator|=
name|childOrd
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|childOrd
operator|!=
operator|-
literal|1
condition|)
block|{
name|ord
operator|=
name|Math
operator|.
name|min
argument_list|(
name|ord
argument_list|,
name|childOrd
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MAX
case|:
name|ord
operator|=
name|Math
operator|.
name|max
argument_list|(
name|ord
argument_list|,
name|childOrd
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
return|return
name|ord
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|int
name|ord
parameter_list|)
block|{
return|return
name|values
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getValueCount
parameter_list|()
block|{
return|return
name|values
operator|.
name|getValueCount
argument_list|()
return|;
block|}
block|}
return|;
block|}
comment|/** Wraps the provided {@link SortedNumericDocValues} in order to only select    *  one value per parent among its {@code children} using the configured    *  {@code selection} type. */
DECL|method|wrap
specifier|public
specifier|static
name|NumericDocValues
name|wrap
parameter_list|(
name|SortedNumericDocValues
name|sortedNumerics
parameter_list|,
name|Type
name|selection
parameter_list|,
name|BitSet
name|parents
parameter_list|,
name|BitSet
name|children
parameter_list|)
block|{
name|NumericDocValues
name|values
decl_stmt|;
switch|switch
condition|(
name|selection
condition|)
block|{
case|case
name|MIN
case|:
name|values
operator|=
name|SortedNumericSelector
operator|.
name|wrap
argument_list|(
name|sortedNumerics
argument_list|,
name|SortedNumericSelector
operator|.
name|Type
operator|.
name|MIN
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAX
case|:
name|values
operator|=
name|SortedNumericSelector
operator|.
name|wrap
argument_list|(
name|sortedNumerics
argument_list|,
name|SortedNumericSelector
operator|.
name|Type
operator|.
name|MAX
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
return|return
name|wrap
argument_list|(
name|values
argument_list|,
name|DocValues
operator|.
name|docsWithValue
argument_list|(
name|sortedNumerics
argument_list|,
name|parents
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|selection
argument_list|,
name|parents
argument_list|,
name|children
argument_list|)
return|;
block|}
DECL|method|wrap
specifier|public
specifier|static
name|NumericDocValues
name|wrap
parameter_list|(
specifier|final
name|NumericDocValues
name|values
parameter_list|,
name|Bits
name|docsWithValue
parameter_list|,
name|Type
name|selection
parameter_list|,
name|BitSet
name|parents
parameter_list|,
name|BitSet
name|children
parameter_list|)
block|{
return|return
operator|new
name|NumericDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
assert|assert
name|parents
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|:
literal|"this selector may only be used on parent documents"
assert|;
if|if
condition|(
name|docID
operator|==
literal|0
condition|)
block|{
comment|// no children
return|return
literal|0
return|;
block|}
specifier|final
name|int
name|firstChild
init|=
name|parents
operator|.
name|prevSetBit
argument_list|(
name|docID
operator|-
literal|1
argument_list|)
operator|+
literal|1
decl_stmt|;
name|long
name|value
init|=
literal|0
decl_stmt|;
name|boolean
name|hasValue
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|child
init|=
name|children
operator|.
name|nextSetBit
argument_list|(
name|firstChild
argument_list|)
init|;
name|child
operator|<
name|docID
condition|;
name|child
operator|=
name|children
operator|.
name|nextSetBit
argument_list|(
name|child
operator|+
literal|1
argument_list|)
control|)
block|{
specifier|final
name|long
name|childValue
init|=
name|values
operator|.
name|get
argument_list|(
name|child
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|childHasValue
init|=
name|value
operator|!=
literal|0
operator|||
name|docsWithValue
operator|.
name|get
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasValue
operator|==
literal|false
condition|)
block|{
name|value
operator|=
name|childValue
expr_stmt|;
name|hasValue
operator|=
name|childHasValue
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|childHasValue
condition|)
block|{
switch|switch
condition|(
name|selection
condition|)
block|{
case|case
name|MIN
case|:
name|value
operator|=
name|Math
operator|.
name|min
argument_list|(
name|value
argument_list|,
name|childValue
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAX
case|:
name|value
operator|=
name|Math
operator|.
name|max
argument_list|(
name|value
argument_list|,
name|childValue
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
block|}
return|return
name|value
return|;
block|}
block|}
return|;
block|}
block|}
end_class
end_unit
