begin_unit
begin_package
DECL|package|org.apache.lucene.search.join
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|LeafFieldComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * A special sort field that allows sorting parent docs based on nested / child level fields.  * Based on the sort order it either takes the document with the lowest or highest field value into account.  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|ToParentBlockJoinSortField
specifier|public
class|class
name|ToParentBlockJoinSortField
extends|extends
name|SortField
block|{
DECL|field|order
specifier|private
specifier|final
name|boolean
name|order
decl_stmt|;
DECL|field|parentFilter
specifier|private
specifier|final
name|BitDocIdSetFilter
name|parentFilter
decl_stmt|;
DECL|field|childFilter
specifier|private
specifier|final
name|BitDocIdSetFilter
name|childFilter
decl_stmt|;
comment|/**    * Create ToParentBlockJoinSortField. The parent document ordering is based on child document ordering (reverse).    *    * @param field The sort field on the nested / child level.    * @param type The sort type on the nested / child level.    * @param reverse Whether natural order should be reversed on the nested / child level.    * @param parentFilter Filter that identifies the parent documents.    * @param childFilter Filter that defines which child documents participates in sorting.    */
DECL|method|ToParentBlockJoinSortField
specifier|public
name|ToParentBlockJoinSortField
parameter_list|(
name|String
name|field
parameter_list|,
name|Type
name|type
parameter_list|,
name|boolean
name|reverse
parameter_list|,
name|BitDocIdSetFilter
name|parentFilter
parameter_list|,
name|BitDocIdSetFilter
name|childFilter
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|,
name|type
argument_list|,
name|reverse
argument_list|)
expr_stmt|;
name|this
operator|.
name|order
operator|=
name|reverse
expr_stmt|;
name|this
operator|.
name|parentFilter
operator|=
name|parentFilter
expr_stmt|;
name|this
operator|.
name|childFilter
operator|=
name|childFilter
expr_stmt|;
block|}
comment|/**    * Create ToParentBlockJoinSortField.    *    * @param field The sort field on the nested / child level.    * @param type The sort type on the nested / child level.    * @param reverse Whether natural order should be reversed on the nested / child document level.    * @param order Whether natural order should be reversed on the parent level.    * @param parentFilter Filter that identifies the parent documents.    * @param childFilter Filter that defines which child documents participates in sorting.    */
DECL|method|ToParentBlockJoinSortField
specifier|public
name|ToParentBlockJoinSortField
parameter_list|(
name|String
name|field
parameter_list|,
name|Type
name|type
parameter_list|,
name|boolean
name|reverse
parameter_list|,
name|boolean
name|order
parameter_list|,
name|BitDocIdSetFilter
name|parentFilter
parameter_list|,
name|BitDocIdSetFilter
name|childFilter
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|,
name|type
argument_list|,
name|reverse
argument_list|)
expr_stmt|;
name|this
operator|.
name|order
operator|=
name|order
expr_stmt|;
name|this
operator|.
name|parentFilter
operator|=
name|parentFilter
expr_stmt|;
name|this
operator|.
name|childFilter
operator|=
name|childFilter
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getComparator
specifier|public
name|FieldComparator
argument_list|<
name|?
argument_list|>
name|getComparator
parameter_list|(
name|int
name|numHits
parameter_list|,
name|int
name|sortPos
parameter_list|)
throws|throws
name|IOException
block|{
name|FieldComparator
argument_list|<
name|Object
argument_list|>
name|wrappedFieldComparator
init|=
operator|(
name|FieldComparator
operator|)
name|super
operator|.
name|getComparator
argument_list|(
name|numHits
operator|+
literal|1
argument_list|,
name|sortPos
argument_list|)
decl_stmt|;
if|if
condition|(
name|order
condition|)
block|{
return|return
operator|new
name|ToParentBlockJoinFieldComparator
operator|.
name|Highest
argument_list|(
name|wrappedFieldComparator
argument_list|,
name|parentFilter
argument_list|,
name|childFilter
argument_list|,
name|numHits
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ToParentBlockJoinFieldComparator
operator|.
name|Lowest
argument_list|(
name|wrappedFieldComparator
argument_list|,
name|parentFilter
argument_list|,
name|childFilter
argument_list|,
name|numHits
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
