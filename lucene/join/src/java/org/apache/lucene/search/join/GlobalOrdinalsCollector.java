begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.search.join
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Collector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|LeafCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LongBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LongValues
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * A collector that collects all ordinals from a specified field matching the query.  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|GlobalOrdinalsCollector
specifier|final
class|class
name|GlobalOrdinalsCollector
implements|implements
name|Collector
block|{
DECL|field|field
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|collectedOrds
specifier|final
name|LongBitSet
name|collectedOrds
decl_stmt|;
DECL|field|ordinalMap
specifier|final
name|MultiDocValues
operator|.
name|OrdinalMap
name|ordinalMap
decl_stmt|;
DECL|method|GlobalOrdinalsCollector
name|GlobalOrdinalsCollector
parameter_list|(
name|String
name|field
parameter_list|,
name|MultiDocValues
operator|.
name|OrdinalMap
name|ordinalMap
parameter_list|,
name|long
name|valueCount
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|ordinalMap
operator|=
name|ordinalMap
expr_stmt|;
name|this
operator|.
name|collectedOrds
operator|=
operator|new
name|LongBitSet
argument_list|(
name|valueCount
argument_list|)
expr_stmt|;
block|}
DECL|method|getCollectorOrdinals
specifier|public
name|LongBitSet
name|getCollectorOrdinals
parameter_list|()
block|{
return|return
name|collectedOrds
return|;
block|}
annotation|@
name|Override
DECL|method|needsScores
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getLeafCollector
specifier|public
name|LeafCollector
name|getLeafCollector
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedDocValues
name|docTermOrds
init|=
name|DocValues
operator|.
name|getSorted
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|ordinalMap
operator|!=
literal|null
condition|)
block|{
name|LongValues
name|segmentOrdToGlobalOrdLookup
init|=
name|ordinalMap
operator|.
name|getGlobalOrds
argument_list|(
name|context
operator|.
name|ord
argument_list|)
decl_stmt|;
return|return
operator|new
name|OrdinalMapCollector
argument_list|(
name|docTermOrds
argument_list|,
name|segmentOrdToGlobalOrdLookup
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|SegmentOrdinalCollector
argument_list|(
name|docTermOrds
argument_list|)
return|;
block|}
block|}
DECL|class|OrdinalMapCollector
specifier|final
class|class
name|OrdinalMapCollector
implements|implements
name|LeafCollector
block|{
DECL|field|docTermOrds
specifier|private
specifier|final
name|SortedDocValues
name|docTermOrds
decl_stmt|;
DECL|field|segmentOrdToGlobalOrdLookup
specifier|private
specifier|final
name|LongValues
name|segmentOrdToGlobalOrdLookup
decl_stmt|;
DECL|method|OrdinalMapCollector
name|OrdinalMapCollector
parameter_list|(
name|SortedDocValues
name|docTermOrds
parameter_list|,
name|LongValues
name|segmentOrdToGlobalOrdLookup
parameter_list|)
block|{
name|this
operator|.
name|docTermOrds
operator|=
name|docTermOrds
expr_stmt|;
name|this
operator|.
name|segmentOrdToGlobalOrdLookup
operator|=
name|segmentOrdToGlobalOrdLookup
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|segmentOrd
init|=
name|docTermOrds
operator|.
name|getOrd
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|segmentOrd
operator|!=
operator|-
literal|1
condition|)
block|{
specifier|final
name|long
name|globalOrd
init|=
name|segmentOrdToGlobalOrdLookup
operator|.
name|get
argument_list|(
name|segmentOrd
argument_list|)
decl_stmt|;
name|collectedOrds
operator|.
name|set
argument_list|(
name|globalOrd
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{     }
block|}
DECL|class|SegmentOrdinalCollector
specifier|final
class|class
name|SegmentOrdinalCollector
implements|implements
name|LeafCollector
block|{
DECL|field|docTermOrds
specifier|private
specifier|final
name|SortedDocValues
name|docTermOrds
decl_stmt|;
DECL|method|SegmentOrdinalCollector
name|SegmentOrdinalCollector
parameter_list|(
name|SortedDocValues
name|docTermOrds
parameter_list|)
block|{
name|this
operator|.
name|docTermOrds
operator|=
name|docTermOrds
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|segmentOrd
init|=
name|docTermOrds
operator|.
name|getOrd
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|segmentOrd
operator|!=
operator|-
literal|1
condition|)
block|{
name|collectedOrds
operator|.
name|set
argument_list|(
name|segmentOrd
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{     }
block|}
block|}
end_class
end_unit
