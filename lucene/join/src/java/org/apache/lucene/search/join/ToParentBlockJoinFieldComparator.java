begin_unit
begin_package
DECL|package|org.apache.lucene.search.join
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldComparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitDocIdSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitSet
import|;
end_import
begin_comment
comment|/**  * A field comparator that allows parent documents to be sorted by fields  * from the nested / child documents.  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|ToParentBlockJoinFieldComparator
specifier|public
specifier|abstract
class|class
name|ToParentBlockJoinFieldComparator
extends|extends
name|FieldComparator
argument_list|<
name|Object
argument_list|>
block|{
DECL|field|parentFilter
specifier|private
specifier|final
name|BitDocIdSetFilter
name|parentFilter
decl_stmt|;
DECL|field|childFilter
specifier|private
specifier|final
name|BitDocIdSetFilter
name|childFilter
decl_stmt|;
DECL|field|spareSlot
specifier|final
name|int
name|spareSlot
decl_stmt|;
DECL|field|wrappedComparator
name|FieldComparator
argument_list|<
name|Object
argument_list|>
name|wrappedComparator
decl_stmt|;
DECL|field|parentDocuments
name|BitSet
name|parentDocuments
decl_stmt|;
DECL|field|childDocuments
name|BitSet
name|childDocuments
decl_stmt|;
DECL|method|ToParentBlockJoinFieldComparator
name|ToParentBlockJoinFieldComparator
parameter_list|(
name|FieldComparator
argument_list|<
name|Object
argument_list|>
name|wrappedComparator
parameter_list|,
name|BitDocIdSetFilter
name|parentFilter
parameter_list|,
name|BitDocIdSetFilter
name|childFilter
parameter_list|,
name|int
name|spareSlot
parameter_list|)
block|{
name|this
operator|.
name|wrappedComparator
operator|=
name|wrappedComparator
expr_stmt|;
name|this
operator|.
name|parentFilter
operator|=
name|parentFilter
expr_stmt|;
name|this
operator|.
name|childFilter
operator|=
name|childFilter
expr_stmt|;
name|this
operator|.
name|spareSlot
operator|=
name|spareSlot
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
return|return
name|wrappedComparator
operator|.
name|compare
argument_list|(
name|slot1
argument_list|,
name|slot2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
name|wrappedComparator
operator|.
name|setBottom
argument_list|(
name|slot
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setTopValue
specifier|public
name|void
name|setTopValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|wrappedComparator
operator|.
name|setTopValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|FieldComparator
argument_list|<
name|Object
argument_list|>
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|BitDocIdSet
name|children
init|=
name|childFilter
operator|.
name|getDocIdSet
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
name|childDocuments
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|childDocuments
operator|=
name|children
operator|.
name|bits
argument_list|()
expr_stmt|;
block|}
name|BitDocIdSet
name|parents
init|=
name|parentFilter
operator|.
name|getDocIdSet
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|parents
operator|==
literal|null
condition|)
block|{
name|parentDocuments
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|parentDocuments
operator|=
name|parents
operator|.
name|bits
argument_list|()
expr_stmt|;
block|}
name|wrappedComparator
operator|=
name|wrappedComparator
operator|.
name|setNextReader
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Object
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|wrappedComparator
operator|.
name|value
argument_list|(
name|slot
argument_list|)
return|;
block|}
comment|/**    * Concrete implementation of {@link ToParentBlockJoinSortField} to sorts the parent docs with the lowest values    * in the child / nested docs first.    */
DECL|class|Lowest
specifier|public
specifier|static
specifier|final
class|class
name|Lowest
extends|extends
name|ToParentBlockJoinFieldComparator
block|{
comment|/**      * Create ToParentBlockJoinFieldComparator.Lowest      *      * @param wrappedComparator The {@link FieldComparator} on the child / nested level.      * @param parentFilter Filter that identifies the parent documents.      * @param childFilter Filter that defines which child / nested documents participates in sorting.      * @param spareSlot The extra slot inside the wrapped comparator that is used to compare which nested document      *                  inside the parent document scope is most competitive.      */
DECL|method|Lowest
specifier|public
name|Lowest
parameter_list|(
name|FieldComparator
argument_list|<
name|Object
argument_list|>
name|wrappedComparator
parameter_list|,
name|BitDocIdSetFilter
name|parentFilter
parameter_list|,
name|BitDocIdSetFilter
name|childFilter
parameter_list|,
name|int
name|spareSlot
parameter_list|)
block|{
name|super
argument_list|(
name|wrappedComparator
argument_list|,
name|parentFilter
argument_list|,
name|childFilter
argument_list|,
name|spareSlot
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|parentDoc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|parentDoc
operator|==
literal|0
operator|||
name|parentDocuments
operator|==
literal|null
operator|||
name|childDocuments
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
comment|// We need to copy the lowest value from all child docs into slot.
name|int
name|prevParentDoc
init|=
name|parentDocuments
operator|.
name|prevSetBit
argument_list|(
name|parentDoc
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|childDoc
init|=
name|childDocuments
operator|.
name|nextSetBit
argument_list|(
name|prevParentDoc
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|childDoc
operator|>=
name|parentDoc
operator|||
name|childDoc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
return|return
literal|0
return|;
block|}
comment|// We only need to emit a single cmp value for any matching child doc
name|int
name|cmp
init|=
name|wrappedComparator
operator|.
name|compareBottom
argument_list|(
name|childDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
return|return
name|cmp
return|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|childDoc
operator|=
name|childDocuments
operator|.
name|nextSetBit
argument_list|(
name|childDoc
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|childDoc
operator|>=
name|parentDoc
operator|||
name|childDoc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
return|return
name|cmp
return|;
block|}
name|int
name|cmp1
init|=
name|wrappedComparator
operator|.
name|compareBottom
argument_list|(
name|childDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp1
operator|>
literal|0
condition|)
block|{
return|return
name|cmp1
return|;
block|}
else|else
block|{
if|if
condition|(
name|cmp1
operator|==
literal|0
condition|)
block|{
name|cmp
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|parentDoc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|parentDoc
operator|==
literal|0
operator|||
name|parentDocuments
operator|==
literal|null
operator|||
name|childDocuments
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// We need to copy the lowest value from all child docs into slot.
name|int
name|prevParentDoc
init|=
name|parentDocuments
operator|.
name|prevSetBit
argument_list|(
name|parentDoc
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|childDoc
init|=
name|childDocuments
operator|.
name|nextSetBit
argument_list|(
name|prevParentDoc
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|childDoc
operator|>=
name|parentDoc
operator|||
name|childDoc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
return|return;
block|}
name|wrappedComparator
operator|.
name|copy
argument_list|(
name|spareSlot
argument_list|,
name|childDoc
argument_list|)
expr_stmt|;
name|wrappedComparator
operator|.
name|copy
argument_list|(
name|slot
argument_list|,
name|childDoc
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|childDoc
operator|=
name|childDocuments
operator|.
name|nextSetBit
argument_list|(
name|childDoc
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|childDoc
operator|>=
name|parentDoc
operator|||
name|childDoc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
return|return;
block|}
name|wrappedComparator
operator|.
name|copy
argument_list|(
name|spareSlot
argument_list|,
name|childDoc
argument_list|)
expr_stmt|;
if|if
condition|(
name|wrappedComparator
operator|.
name|compare
argument_list|(
name|spareSlot
argument_list|,
name|slot
argument_list|)
operator|<
literal|0
condition|)
block|{
name|wrappedComparator
operator|.
name|copy
argument_list|(
name|slot
argument_list|,
name|childDoc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|compareTop
specifier|public
name|int
name|compareTop
parameter_list|(
name|int
name|parentDoc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|parentDoc
operator|==
literal|0
operator|||
name|parentDocuments
operator|==
literal|null
operator|||
name|childDocuments
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
comment|// We need to copy the lowest value from all nested docs into slot.
name|int
name|prevParentDoc
init|=
name|parentDocuments
operator|.
name|prevSetBit
argument_list|(
name|parentDoc
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|childDoc
init|=
name|childDocuments
operator|.
name|nextSetBit
argument_list|(
name|prevParentDoc
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|childDoc
operator|>=
name|parentDoc
operator|||
name|childDoc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
return|return
literal|0
return|;
block|}
comment|// We only need to emit a single cmp value for any matching child doc
name|int
name|cmp
init|=
name|wrappedComparator
operator|.
name|compareBottom
argument_list|(
name|childDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
return|return
name|cmp
return|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|childDoc
operator|=
name|childDocuments
operator|.
name|nextSetBit
argument_list|(
name|childDoc
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|childDoc
operator|>=
name|parentDoc
operator|||
name|childDoc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
return|return
name|cmp
return|;
block|}
name|int
name|cmp1
init|=
name|wrappedComparator
operator|.
name|compareTop
argument_list|(
name|childDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp1
operator|>
literal|0
condition|)
block|{
return|return
name|cmp1
return|;
block|}
else|else
block|{
if|if
condition|(
name|cmp1
operator|==
literal|0
condition|)
block|{
name|cmp
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * Concrete implementation of {@link ToParentBlockJoinSortField} to sorts the parent docs with the highest values    * in the child / nested docs first.    */
DECL|class|Highest
specifier|public
specifier|static
specifier|final
class|class
name|Highest
extends|extends
name|ToParentBlockJoinFieldComparator
block|{
comment|/**      * Create ToParentBlockJoinFieldComparator.Highest      *      * @param wrappedComparator The {@link FieldComparator} on the child / nested level.      * @param parentFilter Filter that identifies the parent documents.      * @param childFilter Filter that defines which child / nested documents participates in sorting.      * @param spareSlot The extra slot inside the wrapped comparator that is used to compare which nested document      *                  inside the parent document scope is most competitive.      */
DECL|method|Highest
specifier|public
name|Highest
parameter_list|(
name|FieldComparator
argument_list|<
name|Object
argument_list|>
name|wrappedComparator
parameter_list|,
name|BitDocIdSetFilter
name|parentFilter
parameter_list|,
name|BitDocIdSetFilter
name|childFilter
parameter_list|,
name|int
name|spareSlot
parameter_list|)
block|{
name|super
argument_list|(
name|wrappedComparator
argument_list|,
name|parentFilter
argument_list|,
name|childFilter
argument_list|,
name|spareSlot
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|parentDoc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|parentDoc
operator|==
literal|0
operator|||
name|parentDocuments
operator|==
literal|null
operator|||
name|childDocuments
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|prevParentDoc
init|=
name|parentDocuments
operator|.
name|prevSetBit
argument_list|(
name|parentDoc
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|childDoc
init|=
name|childDocuments
operator|.
name|nextSetBit
argument_list|(
name|prevParentDoc
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|childDoc
operator|>=
name|parentDoc
operator|||
name|childDoc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|cmp
init|=
name|wrappedComparator
operator|.
name|compareBottom
argument_list|(
name|childDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
block|{
return|return
name|cmp
return|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|childDoc
operator|=
name|childDocuments
operator|.
name|nextSetBit
argument_list|(
name|childDoc
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|childDoc
operator|>=
name|parentDoc
operator|||
name|childDoc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
return|return
name|cmp
return|;
block|}
name|int
name|cmp1
init|=
name|wrappedComparator
operator|.
name|compareBottom
argument_list|(
name|childDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp1
operator|<
literal|0
condition|)
block|{
return|return
name|cmp1
return|;
block|}
else|else
block|{
if|if
condition|(
name|cmp1
operator|==
literal|0
condition|)
block|{
name|cmp
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|parentDoc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|parentDoc
operator|==
literal|0
operator|||
name|parentDocuments
operator|==
literal|null
operator|||
name|childDocuments
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|int
name|prevParentDoc
init|=
name|parentDocuments
operator|.
name|prevSetBit
argument_list|(
name|parentDoc
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|childDoc
init|=
name|childDocuments
operator|.
name|nextSetBit
argument_list|(
name|prevParentDoc
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|childDoc
operator|>=
name|parentDoc
operator|||
name|childDoc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
return|return;
block|}
name|wrappedComparator
operator|.
name|copy
argument_list|(
name|spareSlot
argument_list|,
name|childDoc
argument_list|)
expr_stmt|;
name|wrappedComparator
operator|.
name|copy
argument_list|(
name|slot
argument_list|,
name|childDoc
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|childDoc
operator|=
name|childDocuments
operator|.
name|nextSetBit
argument_list|(
name|childDoc
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|childDoc
operator|>=
name|parentDoc
operator|||
name|childDoc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
return|return;
block|}
name|wrappedComparator
operator|.
name|copy
argument_list|(
name|spareSlot
argument_list|,
name|childDoc
argument_list|)
expr_stmt|;
if|if
condition|(
name|wrappedComparator
operator|.
name|compare
argument_list|(
name|spareSlot
argument_list|,
name|slot
argument_list|)
operator|>
literal|0
condition|)
block|{
name|wrappedComparator
operator|.
name|copy
argument_list|(
name|slot
argument_list|,
name|childDoc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|compareTop
specifier|public
name|int
name|compareTop
parameter_list|(
name|int
name|parentDoc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|parentDoc
operator|==
literal|0
operator|||
name|parentDocuments
operator|==
literal|null
operator|||
name|childDocuments
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|prevParentDoc
init|=
name|parentDocuments
operator|.
name|prevSetBit
argument_list|(
name|parentDoc
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|childDoc
init|=
name|childDocuments
operator|.
name|nextSetBit
argument_list|(
name|prevParentDoc
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|childDoc
operator|>=
name|parentDoc
operator|||
name|childDoc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|cmp
init|=
name|wrappedComparator
operator|.
name|compareBottom
argument_list|(
name|childDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
block|{
return|return
name|cmp
return|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|childDoc
operator|=
name|childDocuments
operator|.
name|nextSetBit
argument_list|(
name|childDoc
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|childDoc
operator|>=
name|parentDoc
operator|||
name|childDoc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
return|return
name|cmp
return|;
block|}
name|int
name|cmp1
init|=
name|wrappedComparator
operator|.
name|compareTop
argument_list|(
name|childDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp1
operator|<
literal|0
condition|)
block|{
return|return
name|cmp1
return|;
block|}
else|else
block|{
if|if
condition|(
name|cmp1
operator|==
literal|0
condition|)
block|{
name|cmp
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class
end_unit
