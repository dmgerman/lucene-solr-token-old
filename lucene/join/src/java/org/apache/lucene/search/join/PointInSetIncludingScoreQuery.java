begin_unit
begin_package
DECL|package|org.apache.lucene.search.join
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DoublePoint
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FloatPoint
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|IntPoint
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LongPoint
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PointValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PointValues
operator|.
name|IntersectVisitor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PointValues
operator|.
name|Relation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PrefixCodedTerms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PrefixCodedTerms
operator|.
name|TermIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreScorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PointInSetQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|DocIdSetBuilder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|// A TermsIncludingScoreQuery variant for point values:
end_comment
begin_class
DECL|class|PointInSetIncludingScoreQuery
specifier|abstract
class|class
name|PointInSetIncludingScoreQuery
extends|extends
name|Query
block|{
DECL|field|toString
specifier|static
name|BiFunction
argument_list|<
name|byte
index|[]
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Number
argument_list|>
argument_list|,
name|String
argument_list|>
name|toString
init|=
parameter_list|(
name|value
parameter_list|,
name|numericType
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|Integer
operator|.
name|class
operator|.
name|equals
argument_list|(
name|numericType
argument_list|)
condition|)
block|{
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|IntPoint
operator|.
name|decodeDimension
argument_list|(
name|value
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Long
operator|.
name|class
operator|.
name|equals
argument_list|(
name|numericType
argument_list|)
condition|)
block|{
return|return
name|Long
operator|.
name|toString
argument_list|(
name|LongPoint
operator|.
name|decodeDimension
argument_list|(
name|value
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Float
operator|.
name|class
operator|.
name|equals
argument_list|(
name|numericType
argument_list|)
condition|)
block|{
return|return
name|Float
operator|.
name|toString
argument_list|(
name|FloatPoint
operator|.
name|decodeDimension
argument_list|(
name|value
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Double
operator|.
name|class
operator|.
name|equals
argument_list|(
name|numericType
argument_list|)
condition|)
block|{
return|return
name|Double
operator|.
name|toString
argument_list|(
name|DoublePoint
operator|.
name|decodeDimension
argument_list|(
name|value
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|"unsupported"
return|;
block|}
block|}
decl_stmt|;
DECL|field|originalQuery
specifier|final
name|Query
name|originalQuery
decl_stmt|;
DECL|field|multipleValuesPerDocument
specifier|final
name|boolean
name|multipleValuesPerDocument
decl_stmt|;
DECL|field|sortedPackedPoints
specifier|final
name|PrefixCodedTerms
name|sortedPackedPoints
decl_stmt|;
DECL|field|sortedPackedPointsHashCode
specifier|final
name|int
name|sortedPackedPointsHashCode
decl_stmt|;
DECL|field|field
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|bytesPerDim
specifier|final
name|int
name|bytesPerDim
decl_stmt|;
DECL|field|aggregatedJoinScores
specifier|final
name|List
argument_list|<
name|Float
argument_list|>
name|aggregatedJoinScores
decl_stmt|;
DECL|class|Stream
specifier|static
specifier|abstract
class|class
name|Stream
extends|extends
name|PointInSetQuery
operator|.
name|Stream
block|{
DECL|field|score
name|float
name|score
decl_stmt|;
block|}
DECL|method|PointInSetIncludingScoreQuery
name|PointInSetIncludingScoreQuery
parameter_list|(
name|Query
name|originalQuery
parameter_list|,
name|boolean
name|multipleValuesPerDocument
parameter_list|,
name|String
name|field
parameter_list|,
name|int
name|bytesPerDim
parameter_list|,
name|Stream
name|packedPoints
parameter_list|)
block|{
name|this
operator|.
name|originalQuery
operator|=
name|originalQuery
expr_stmt|;
name|this
operator|.
name|multipleValuesPerDocument
operator|=
name|multipleValuesPerDocument
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
if|if
condition|(
name|bytesPerDim
argument_list|<
literal|1
operator|||
name|bytesPerDim
argument_list|>
name|PointValues
operator|.
name|MAX_NUM_BYTES
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"bytesPerDim must be> 0 and<= "
operator|+
name|PointValues
operator|.
name|MAX_NUM_BYTES
operator|+
literal|"; got "
operator|+
name|bytesPerDim
argument_list|)
throw|;
block|}
name|this
operator|.
name|bytesPerDim
operator|=
name|bytesPerDim
expr_stmt|;
name|aggregatedJoinScores
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|PrefixCodedTerms
operator|.
name|Builder
name|builder
init|=
operator|new
name|PrefixCodedTerms
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|BytesRefBuilder
name|previous
init|=
literal|null
decl_stmt|;
name|BytesRef
name|current
decl_stmt|;
while|while
condition|(
operator|(
name|current
operator|=
name|packedPoints
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|current
operator|.
name|length
operator|!=
name|bytesPerDim
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"packed point length should be "
operator|+
operator|(
name|bytesPerDim
operator|)
operator|+
literal|" but got "
operator|+
name|current
operator|.
name|length
operator|+
literal|"; field=\""
operator|+
name|field
operator|+
literal|"\"bytesPerDim="
operator|+
name|bytesPerDim
argument_list|)
throw|;
block|}
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|previous
operator|=
operator|new
name|BytesRefBuilder
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|int
name|cmp
init|=
name|previous
operator|.
name|get
argument_list|()
operator|.
name|compareTo
argument_list|(
name|current
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unexpected duplicated value: "
operator|+
name|current
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|cmp
operator|>=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"values are out of order: saw "
operator|+
name|previous
operator|+
literal|" before "
operator|+
name|current
argument_list|)
throw|;
block|}
block|}
name|builder
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|current
argument_list|)
expr_stmt|;
name|aggregatedJoinScores
operator|.
name|add
argument_list|(
name|packedPoints
operator|.
name|score
argument_list|)
expr_stmt|;
name|previous
operator|.
name|copyBytes
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
name|sortedPackedPoints
operator|=
name|builder
operator|.
name|finish
argument_list|()
expr_stmt|;
name|sortedPackedPointsHashCode
operator|=
name|sortedPackedPoints
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createWeight
specifier|public
specifier|final
name|Weight
name|createWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|boolean
name|needsScores
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Weight
name|originalWeight
init|=
name|originalQuery
operator|.
name|createWeight
argument_list|(
name|searcher
argument_list|,
name|needsScores
argument_list|)
decl_stmt|;
return|return
operator|new
name|Weight
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|extractTerms
parameter_list|(
name|Set
argument_list|<
name|Term
argument_list|>
name|terms
parameter_list|)
block|{       }
annotation|@
name|Override
specifier|public
name|Explanation
name|explain
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|Scorer
name|scorer
init|=
name|scorer
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|scorer
operator|!=
literal|null
condition|)
block|{
name|int
name|target
init|=
name|scorer
operator|.
name|iterator
argument_list|()
operator|.
name|advance
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
name|target
condition|)
block|{
return|return
name|Explanation
operator|.
name|match
argument_list|(
name|scorer
operator|.
name|score
argument_list|()
argument_list|,
literal|"A match"
argument_list|)
return|;
block|}
block|}
return|return
name|Explanation
operator|.
name|noMatch
argument_list|(
literal|"Not a match"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getValueForNormalization
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|originalWeight
operator|.
name|getValueForNormalization
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|normalize
parameter_list|(
name|float
name|norm
parameter_list|,
name|float
name|boost
parameter_list|)
block|{
name|originalWeight
operator|.
name|normalize
argument_list|(
name|norm
argument_list|,
name|boost
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Scorer
name|scorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|LeafReader
name|reader
init|=
name|context
operator|.
name|reader
argument_list|()
decl_stmt|;
name|PointValues
name|values
init|=
name|reader
operator|.
name|getPointValues
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|FieldInfo
name|fieldInfo
init|=
name|reader
operator|.
name|getFieldInfos
argument_list|()
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldInfo
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|fieldInfo
operator|.
name|getPointDimensionCount
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field=\""
operator|+
name|field
operator|+
literal|"\" was indexed with numDims="
operator|+
name|fieldInfo
operator|.
name|getPointDimensionCount
argument_list|()
operator|+
literal|" but this query has numDims=1"
argument_list|)
throw|;
block|}
if|if
condition|(
name|fieldInfo
operator|.
name|getPointNumBytes
argument_list|()
operator|!=
name|bytesPerDim
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field=\""
operator|+
name|field
operator|+
literal|"\" was indexed with bytesPerDim="
operator|+
name|fieldInfo
operator|.
name|getPointNumBytes
argument_list|()
operator|+
literal|" but this query has bytesPerDim="
operator|+
name|bytesPerDim
argument_list|)
throw|;
block|}
name|FixedBitSet
name|result
init|=
operator|new
name|FixedBitSet
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
name|float
index|[]
name|scores
init|=
operator|new
name|float
index|[
name|reader
operator|.
name|maxDoc
argument_list|()
index|]
decl_stmt|;
name|values
operator|.
name|intersect
argument_list|(
name|field
argument_list|,
operator|new
name|MergePointVisitor
argument_list|(
name|sortedPackedPoints
argument_list|,
name|result
argument_list|,
name|scores
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|Scorer
argument_list|(
name|this
argument_list|)
block|{
name|DocIdSetIterator
name|disi
init|=
operator|new
name|BitSetIterator
argument_list|(
name|result
argument_list|,
literal|10L
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|scores
index|[
name|docID
argument_list|()
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|disi
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|DocIdSetIterator
name|iterator
parameter_list|()
block|{
return|return
name|disi
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
DECL|class|MergePointVisitor
specifier|private
class|class
name|MergePointVisitor
implements|implements
name|IntersectVisitor
block|{
DECL|field|result
specifier|private
specifier|final
name|FixedBitSet
name|result
decl_stmt|;
DECL|field|scores
specifier|private
specifier|final
name|float
index|[]
name|scores
decl_stmt|;
DECL|field|iterator
specifier|private
name|TermIterator
name|iterator
decl_stmt|;
DECL|field|scoreIterator
specifier|private
name|Iterator
argument_list|<
name|Float
argument_list|>
name|scoreIterator
decl_stmt|;
DECL|field|nextQueryPoint
specifier|private
name|BytesRef
name|nextQueryPoint
decl_stmt|;
DECL|field|nextScore
name|float
name|nextScore
decl_stmt|;
DECL|field|scratch
specifier|private
specifier|final
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|method|MergePointVisitor
specifier|private
name|MergePointVisitor
parameter_list|(
name|PrefixCodedTerms
name|sortedPackedPoints
parameter_list|,
name|FixedBitSet
name|result
parameter_list|,
name|float
index|[]
name|scores
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
name|this
operator|.
name|scores
operator|=
name|scores
expr_stmt|;
name|scratch
operator|.
name|length
operator|=
name|bytesPerDim
expr_stmt|;
name|this
operator|.
name|iterator
operator|=
name|sortedPackedPoints
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|this
operator|.
name|scoreIterator
operator|=
name|aggregatedJoinScores
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|nextQueryPoint
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|scoreIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|nextScore
operator|=
name|scoreIterator
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|visit
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"shouldn't get here, since CELL_INSIDE_QUERY isn't emitted"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|visit
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|,
name|byte
index|[]
name|packedValue
parameter_list|)
block|{
name|scratch
operator|.
name|bytes
operator|=
name|packedValue
expr_stmt|;
while|while
condition|(
name|nextQueryPoint
operator|!=
literal|null
condition|)
block|{
name|int
name|cmp
init|=
name|nextQueryPoint
operator|.
name|compareTo
argument_list|(
name|scratch
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
comment|// Query point equals index point, so collect and return
if|if
condition|(
name|multipleValuesPerDocument
condition|)
block|{
if|if
condition|(
name|result
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|==
literal|false
condition|)
block|{
name|result
operator|.
name|set
argument_list|(
name|docID
argument_list|)
expr_stmt|;
name|scores
index|[
name|docID
index|]
operator|=
name|nextScore
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|.
name|set
argument_list|(
name|docID
argument_list|)
expr_stmt|;
name|scores
index|[
name|docID
index|]
operator|=
name|nextScore
expr_stmt|;
block|}
break|break;
block|}
elseif|else
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
block|{
comment|// Query point is before index point, so we move to next query point
name|nextQueryPoint
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|scoreIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|nextScore
operator|=
name|scoreIterator
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Query point is after index point, so we don't collect and we return:
break|break;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|Relation
name|compare
parameter_list|(
name|byte
index|[]
name|minPackedValue
parameter_list|,
name|byte
index|[]
name|maxPackedValue
parameter_list|)
block|{
while|while
condition|(
name|nextQueryPoint
operator|!=
literal|null
condition|)
block|{
name|scratch
operator|.
name|bytes
operator|=
name|minPackedValue
expr_stmt|;
name|int
name|cmpMin
init|=
name|nextQueryPoint
operator|.
name|compareTo
argument_list|(
name|scratch
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmpMin
operator|<
literal|0
condition|)
block|{
comment|// query point is before the start of this cell
name|nextQueryPoint
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|scoreIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|nextScore
operator|=
name|scoreIterator
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
continue|continue;
block|}
name|scratch
operator|.
name|bytes
operator|=
name|maxPackedValue
expr_stmt|;
name|int
name|cmpMax
init|=
name|nextQueryPoint
operator|.
name|compareTo
argument_list|(
name|scratch
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmpMax
operator|>
literal|0
condition|)
block|{
comment|// query point is after the end of this cell
return|return
name|Relation
operator|.
name|CELL_OUTSIDE_QUERY
return|;
block|}
return|return
name|Relation
operator|.
name|CELL_CROSSES_QUERY
return|;
block|}
comment|// We exhausted all points in the query:
return|return
name|Relation
operator|.
name|CELL_OUTSIDE_QUERY
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
specifier|final
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
name|super
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|hash
operator|=
literal|31
operator|*
name|hash
operator|+
name|field
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|hash
operator|=
literal|31
operator|*
name|hash
operator|+
name|originalQuery
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|hash
operator|=
literal|31
operator|*
name|hash
operator|+
name|sortedPackedPointsHashCode
expr_stmt|;
name|hash
operator|=
literal|31
operator|*
name|hash
operator|+
name|bytesPerDim
expr_stmt|;
return|return
name|hash
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
specifier|final
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|equals
argument_list|(
name|other
argument_list|)
condition|)
block|{
specifier|final
name|PointInSetIncludingScoreQuery
name|q
init|=
operator|(
name|PointInSetIncludingScoreQuery
operator|)
name|other
decl_stmt|;
return|return
name|q
operator|.
name|field
operator|.
name|equals
argument_list|(
name|field
argument_list|)
operator|&&
name|q
operator|.
name|originalQuery
operator|.
name|equals
argument_list|(
name|originalQuery
argument_list|)
operator|&&
name|q
operator|.
name|bytesPerDim
operator|==
name|bytesPerDim
operator|&&
name|q
operator|.
name|sortedPackedPointsHashCode
operator|==
name|sortedPackedPointsHashCode
operator|&&
name|q
operator|.
name|sortedPackedPoints
operator|.
name|equals
argument_list|(
name|sortedPackedPoints
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
specifier|final
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|field
operator|.
name|equals
argument_list|(
name|field
argument_list|)
operator|==
literal|false
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|field
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
name|TermIterator
name|iterator
init|=
name|sortedPackedPoints
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|byte
index|[]
name|pointBytes
init|=
operator|new
name|byte
index|[
name|bytesPerDim
index|]
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|BytesRef
name|point
init|=
name|iterator
operator|.
name|next
argument_list|()
init|;
name|point
operator|!=
literal|null
condition|;
name|point
operator|=
name|iterator
operator|.
name|next
argument_list|()
control|)
block|{
if|if
condition|(
name|first
operator|==
literal|false
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|point
operator|.
name|bytes
argument_list|,
name|point
operator|.
name|offset
argument_list|,
name|pointBytes
argument_list|,
literal|0
argument_list|,
name|pointBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|toString
argument_list|(
name|pointBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|toString
specifier|protected
specifier|abstract
name|String
name|toString
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
function_decl|;
block|}
end_class
end_unit
