begin_unit
begin_package
DECL|package|org.apache.lucene.search.join
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
operator|.
name|EMPTY
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|CachingWrapperFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Filter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_comment
comment|/** A {@link CachingWrapperFilter} that caches sets using a {@link FixedBitSet},  *  as required for joins. */
end_comment
begin_class
DECL|class|FixedBitSetCachingWrapperFilter
specifier|public
specifier|final
class|class
name|FixedBitSetCachingWrapperFilter
extends|extends
name|CachingWrapperFilter
block|{
comment|/** Sole constructor, see {@link CachingWrapperFilter#CachingWrapperFilter(Filter)}. */
DECL|method|FixedBitSetCachingWrapperFilter
specifier|public
name|FixedBitSetCachingWrapperFilter
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
name|super
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|docIdSetToCache
specifier|protected
name|DocIdSet
name|docIdSetToCache
parameter_list|(
name|DocIdSet
name|docIdSet
parameter_list|,
name|LeafReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|docIdSet
operator|==
literal|null
condition|)
block|{
return|return
name|EMPTY
return|;
block|}
elseif|else
if|if
condition|(
name|docIdSet
operator|instanceof
name|FixedBitSet
condition|)
block|{
comment|// this is different from CachingWrapperFilter: even when the DocIdSet is
comment|// cacheable, we convert it to a FixedBitSet since we require all the
comment|// cached filters to be FixedBitSets
return|return
name|docIdSet
return|;
block|}
else|else
block|{
specifier|final
name|DocIdSetIterator
name|it
init|=
name|docIdSet
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|it
operator|==
literal|null
condition|)
block|{
return|return
name|EMPTY
return|;
block|}
else|else
block|{
specifier|final
name|FixedBitSet
name|copy
init|=
operator|new
name|FixedBitSet
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
name|copy
operator|.
name|or
argument_list|(
name|it
argument_list|)
expr_stmt|;
return|return
name|copy
return|;
block|}
block|}
block|}
block|}
end_class
end_unit
