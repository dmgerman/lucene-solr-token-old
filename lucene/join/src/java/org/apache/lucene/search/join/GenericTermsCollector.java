begin_unit
begin_package
DECL|package|org.apache.lucene.search.join
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BinaryDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Collector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|LeafCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|DocValuesTermsCollector
operator|.
name|Function
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|TermsWithScoreCollector
operator|.
name|MV
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|TermsWithScoreCollector
operator|.
name|SV
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefHash
import|;
end_import
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_interface
DECL|interface|GenericTermsCollector
interface|interface
name|GenericTermsCollector
extends|extends
name|Collector
block|{
DECL|method|getCollectedTerms
name|BytesRefHash
name|getCollectedTerms
parameter_list|()
function_decl|;
DECL|method|getScoresPerTerm
name|float
index|[]
name|getScoresPerTerm
parameter_list|()
function_decl|;
DECL|method|createCollectorMV
specifier|static
name|GenericTermsCollector
name|createCollectorMV
parameter_list|(
name|Function
argument_list|<
name|SortedSetDocValues
argument_list|>
name|mvFunction
parameter_list|,
name|ScoreMode
name|mode
parameter_list|)
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|None
case|:
return|return
name|wrap
argument_list|(
operator|new
name|TermsCollector
operator|.
name|MV
argument_list|(
name|mvFunction
argument_list|)
argument_list|)
return|;
case|case
name|Avg
case|:
return|return
operator|new
name|MV
operator|.
name|Avg
argument_list|(
name|mvFunction
argument_list|)
return|;
default|default:
return|return
operator|new
name|MV
argument_list|(
name|mvFunction
argument_list|,
name|mode
argument_list|)
return|;
block|}
block|}
DECL|method|verbose
specifier|static
name|Function
argument_list|<
name|SortedSetDocValues
argument_list|>
name|verbose
parameter_list|(
name|PrintStream
name|out
parameter_list|,
name|Function
argument_list|<
name|SortedSetDocValues
argument_list|>
name|mvFunction
parameter_list|)
block|{
return|return
parameter_list|(
name|ctx
parameter_list|)
lambda|->
block|{
specifier|final
name|SortedSetDocValues
name|target
init|=
name|mvFunction
operator|.
name|apply
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
return|return
operator|new
name|SortedSetDocValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
name|target
operator|.
name|setDocument
argument_list|(
name|docID
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"\ndoc# "
operator|+
name|docID
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|nextOrd
parameter_list|()
block|{
return|return
name|target
operator|.
name|nextOrd
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|long
name|ord
parameter_list|)
block|{
specifier|final
name|BytesRef
name|val
init|=
name|target
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|val
operator|.
name|toString
argument_list|()
operator|+
literal|", "
argument_list|)
expr_stmt|;
return|return
name|val
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getValueCount
parameter_list|()
block|{
return|return
name|target
operator|.
name|getValueCount
argument_list|()
return|;
block|}
block|}
return|;
block|}
return|;
block|}
DECL|method|createCollectorSV
specifier|static
name|GenericTermsCollector
name|createCollectorSV
parameter_list|(
name|Function
argument_list|<
name|BinaryDocValues
argument_list|>
name|svFunction
parameter_list|,
name|ScoreMode
name|mode
parameter_list|)
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|None
case|:
return|return
name|wrap
argument_list|(
operator|new
name|TermsCollector
operator|.
name|SV
argument_list|(
name|svFunction
argument_list|)
argument_list|)
return|;
case|case
name|Avg
case|:
return|return
operator|new
name|SV
operator|.
name|Avg
argument_list|(
name|svFunction
argument_list|)
return|;
default|default:
return|return
operator|new
name|SV
argument_list|(
name|svFunction
argument_list|,
name|mode
argument_list|)
return|;
block|}
block|}
DECL|method|wrap
specifier|static
name|GenericTermsCollector
name|wrap
parameter_list|(
specifier|final
name|TermsCollector
argument_list|<
name|?
argument_list|>
name|collector
parameter_list|)
block|{
return|return
operator|new
name|GenericTermsCollector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|LeafCollector
name|getLeafCollector
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|collector
operator|.
name|getLeafCollector
argument_list|(
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
name|collector
operator|.
name|needsScores
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRefHash
name|getCollectedTerms
parameter_list|()
block|{
return|return
name|collector
operator|.
name|getCollectorTerms
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
index|[]
name|getScoresPerTerm
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"scores are not available for "
operator|+
name|collector
argument_list|)
throw|;
block|}
block|}
return|;
block|}
block|}
end_interface
end_unit
