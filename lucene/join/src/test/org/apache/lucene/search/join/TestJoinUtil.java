begin_unit
begin_package
DECL|package|org.apache.lucene.search.join
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomInts
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedSetDocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BinaryDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiFields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NoMergePolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SlowCompositeReaderWrapper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldValueQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FilterScorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SimpleCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopScoreDocCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TotalHitCountCollector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import
begin_class
DECL|class|TestJoinUtil
specifier|public
class|class
name|TestJoinUtil
extends|extends
name|LuceneTestCase
block|{
DECL|method|testSimple
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|idField
init|=
literal|"id"
decl_stmt|;
specifier|final
name|String
name|toField
init|=
literal|"productId"
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// 0
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"description"
argument_list|,
literal|"random text"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"name"
argument_list|,
literal|"name1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|idField
argument_list|,
literal|"1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|idField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 1
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"price"
argument_list|,
literal|"10.0"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|idField
argument_list|,
literal|"2"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|idField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|toField
argument_list|,
literal|"1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|toField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 2
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"price"
argument_list|,
literal|"20.0"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|idField
argument_list|,
literal|"3"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|idField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|toField
argument_list|,
literal|"1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|toField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 3
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"description"
argument_list|,
literal|"more random text"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"name"
argument_list|,
literal|"name2"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|idField
argument_list|,
literal|"4"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|idField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// 4
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"price"
argument_list|,
literal|"10.0"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|idField
argument_list|,
literal|"5"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|idField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"5"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|toField
argument_list|,
literal|"4"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|toField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 5
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"price"
argument_list|,
literal|"20.0"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|idField
argument_list|,
literal|"6"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|idField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"6"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|toField
argument_list|,
literal|"4"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|toField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexSearcher
name|indexSearcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|w
operator|.
name|getReader
argument_list|()
argument_list|)
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Search for product
name|Query
name|joinQuery
init|=
name|JoinUtil
operator|.
name|createJoinQuery
argument_list|(
name|idField
argument_list|,
literal|false
argument_list|,
name|toField
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name"
argument_list|,
literal|"name2"
argument_list|)
argument_list|)
argument_list|,
name|indexSearcher
argument_list|,
name|ScoreMode
operator|.
name|None
argument_list|)
decl_stmt|;
name|TopDocs
name|result
init|=
name|indexSearcher
operator|.
name|search
argument_list|(
name|joinQuery
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|result
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|result
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|joinQuery
operator|=
name|JoinUtil
operator|.
name|createJoinQuery
argument_list|(
name|idField
argument_list|,
literal|false
argument_list|,
name|toField
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name"
argument_list|,
literal|"name1"
argument_list|)
argument_list|)
argument_list|,
name|indexSearcher
argument_list|,
name|ScoreMode
operator|.
name|None
argument_list|)
expr_stmt|;
name|result
operator|=
name|indexSearcher
operator|.
name|search
argument_list|(
name|joinQuery
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
comment|// Search for offer
name|joinQuery
operator|=
name|JoinUtil
operator|.
name|createJoinQuery
argument_list|(
name|toField
argument_list|,
literal|false
argument_list|,
name|idField
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
argument_list|,
name|indexSearcher
argument_list|,
name|ScoreMode
operator|.
name|None
argument_list|)
expr_stmt|;
name|result
operator|=
name|indexSearcher
operator|.
name|search
argument_list|(
name|joinQuery
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|indexSearcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSimpleOrdinalsJoin
specifier|public
name|void
name|testSimpleOrdinalsJoin
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|idField
init|=
literal|"id"
decl_stmt|;
specifier|final
name|String
name|productIdField
init|=
literal|"productId"
decl_stmt|;
comment|// A field indicating to what type a document belongs, which is then used to distinques between documents during joining.
specifier|final
name|String
name|typeField
init|=
literal|"type"
decl_stmt|;
comment|// A single sorted doc values field that holds the join values for all document types.
comment|// Typically during indexing a schema will automatically create this field with the values
specifier|final
name|String
name|joinField
init|=
name|idField
operator|+
name|productIdField
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|INSTANCE
argument_list|)
argument_list|)
decl_stmt|;
comment|// 0
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|idField
argument_list|,
literal|"1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|typeField
argument_list|,
literal|"product"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"description"
argument_list|,
literal|"random text"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"name"
argument_list|,
literal|"name1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|joinField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 1
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|productIdField
argument_list|,
literal|"1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|typeField
argument_list|,
literal|"price"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"price"
argument_list|,
literal|"10.0"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|joinField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 2
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|productIdField
argument_list|,
literal|"1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|typeField
argument_list|,
literal|"price"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"price"
argument_list|,
literal|"20.0"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|joinField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 3
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|idField
argument_list|,
literal|"2"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|typeField
argument_list|,
literal|"product"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"description"
argument_list|,
literal|"more random text"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"name"
argument_list|,
literal|"name2"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|joinField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// 4
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|productIdField
argument_list|,
literal|"2"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|typeField
argument_list|,
literal|"price"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"price"
argument_list|,
literal|"10.0"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|joinField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 5
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|productIdField
argument_list|,
literal|"2"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|typeField
argument_list|,
literal|"price"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"price"
argument_list|,
literal|"20.0"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|joinField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexSearcher
name|indexSearcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|w
operator|.
name|getReader
argument_list|()
argument_list|)
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|r
init|=
name|indexSearcher
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
name|SortedDocValues
index|[]
name|values
init|=
operator|new
name|SortedDocValues
index|[
name|r
operator|.
name|leaves
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LeafReader
name|leafReader
init|=
name|r
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|reader
argument_list|()
decl_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|DocValues
operator|.
name|getSorted
argument_list|(
name|leafReader
argument_list|,
name|joinField
argument_list|)
expr_stmt|;
block|}
name|MultiDocValues
operator|.
name|OrdinalMap
name|ordinalMap
init|=
name|MultiDocValues
operator|.
name|OrdinalMap
operator|.
name|build
argument_list|(
name|r
operator|.
name|getCoreCacheKey
argument_list|()
argument_list|,
name|values
argument_list|,
name|PackedInts
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|Query
name|toQuery
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|typeField
argument_list|,
literal|"price"
argument_list|)
argument_list|)
decl_stmt|;
name|Query
name|fromQuery
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name"
argument_list|,
literal|"name2"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Search for product and return prices
name|Query
name|joinQuery
init|=
name|JoinUtil
operator|.
name|createJoinQuery
argument_list|(
name|joinField
argument_list|,
name|fromQuery
argument_list|,
name|toQuery
argument_list|,
name|indexSearcher
argument_list|,
name|ScoreMode
operator|.
name|None
argument_list|,
name|ordinalMap
argument_list|)
decl_stmt|;
name|TopDocs
name|result
init|=
name|indexSearcher
operator|.
name|search
argument_list|(
name|joinQuery
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|result
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|result
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|fromQuery
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"name"
argument_list|,
literal|"name1"
argument_list|)
argument_list|)
expr_stmt|;
name|joinQuery
operator|=
name|JoinUtil
operator|.
name|createJoinQuery
argument_list|(
name|joinField
argument_list|,
name|fromQuery
argument_list|,
name|toQuery
argument_list|,
name|indexSearcher
argument_list|,
name|ScoreMode
operator|.
name|None
argument_list|,
name|ordinalMap
argument_list|)
expr_stmt|;
name|result
operator|=
name|indexSearcher
operator|.
name|search
argument_list|(
name|joinQuery
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
comment|// Search for prices and return products
name|fromQuery
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"price"
argument_list|,
literal|"20.0"
argument_list|)
argument_list|)
expr_stmt|;
name|toQuery
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|typeField
argument_list|,
literal|"product"
argument_list|)
argument_list|)
expr_stmt|;
name|joinQuery
operator|=
name|JoinUtil
operator|.
name|createJoinQuery
argument_list|(
name|joinField
argument_list|,
name|fromQuery
argument_list|,
name|toQuery
argument_list|,
name|indexSearcher
argument_list|,
name|ScoreMode
operator|.
name|None
argument_list|,
name|ordinalMap
argument_list|)
expr_stmt|;
name|result
operator|=
name|indexSearcher
operator|.
name|search
argument_list|(
name|joinQuery
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|indexSearcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testRandomOrdinalsJoin
specifier|public
name|void
name|testRandomOrdinalsJoin
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexIterationContext
name|context
init|=
name|createContext
argument_list|(
literal|512
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|searchIters
init|=
literal|10
decl_stmt|;
name|IndexSearcher
name|indexSearcher
init|=
name|context
operator|.
name|searcher
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|searchIters
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"search iter="
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|int
name|r
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|context
operator|.
name|randomUniqueValues
operator|.
name|length
argument_list|)
decl_stmt|;
name|boolean
name|from
init|=
name|context
operator|.
name|randomFrom
index|[
name|r
index|]
decl_stmt|;
name|String
name|randomValue
init|=
name|context
operator|.
name|randomUniqueValues
index|[
name|r
index|]
decl_stmt|;
name|BitSet
name|expectedResult
init|=
name|createExpectedResult
argument_list|(
name|randomValue
argument_list|,
name|from
argument_list|,
name|indexSearcher
operator|.
name|getIndexReader
argument_list|()
argument_list|,
name|context
argument_list|)
decl_stmt|;
specifier|final
name|Query
name|actualQuery
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
name|randomValue
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"actualQuery="
operator|+
name|actualQuery
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ScoreMode
name|scoreMode
init|=
name|ScoreMode
operator|.
name|values
argument_list|()
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|ScoreMode
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"scoreMode="
operator|+
name|scoreMode
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Query
name|joinQuery
decl_stmt|;
if|if
condition|(
name|from
condition|)
block|{
name|BooleanQuery
operator|.
name|Builder
name|fromQuery
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|fromQuery
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"type"
argument_list|,
literal|"from"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|fromQuery
operator|.
name|add
argument_list|(
name|actualQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|Query
name|toQuery
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"type"
argument_list|,
literal|"to"
argument_list|)
argument_list|)
decl_stmt|;
name|joinQuery
operator|=
name|JoinUtil
operator|.
name|createJoinQuery
argument_list|(
literal|"join_field"
argument_list|,
name|fromQuery
operator|.
name|build
argument_list|()
argument_list|,
name|toQuery
argument_list|,
name|indexSearcher
argument_list|,
name|scoreMode
argument_list|,
name|context
operator|.
name|ordinalMap
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BooleanQuery
operator|.
name|Builder
name|fromQuery
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|fromQuery
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"type"
argument_list|,
literal|"to"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|fromQuery
operator|.
name|add
argument_list|(
name|actualQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|Query
name|toQuery
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"type"
argument_list|,
literal|"from"
argument_list|)
argument_list|)
decl_stmt|;
name|joinQuery
operator|=
name|JoinUtil
operator|.
name|createJoinQuery
argument_list|(
literal|"join_field"
argument_list|,
name|fromQuery
operator|.
name|build
argument_list|()
argument_list|,
name|toQuery
argument_list|,
name|indexSearcher
argument_list|,
name|scoreMode
argument_list|,
name|context
operator|.
name|ordinalMap
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"joinQuery="
operator|+
name|joinQuery
argument_list|)
expr_stmt|;
block|}
specifier|final
name|BitSet
name|actualResult
init|=
operator|new
name|FixedBitSet
argument_list|(
name|indexSearcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|TopScoreDocCollector
name|topScoreDocCollector
init|=
name|TopScoreDocCollector
operator|.
name|create
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|indexSearcher
operator|.
name|search
argument_list|(
name|joinQuery
argument_list|,
name|MultiCollector
operator|.
name|wrap
argument_list|(
operator|new
name|BitSetCollector
argument_list|(
name|actualResult
argument_list|)
argument_list|,
name|topScoreDocCollector
argument_list|)
argument_list|)
expr_stmt|;
name|assertBitSet
argument_list|(
name|expectedResult
argument_list|,
name|actualResult
argument_list|,
name|indexSearcher
argument_list|)
expr_stmt|;
name|TopDocs
name|expectedTopDocs
init|=
name|createExpectedTopDocs
argument_list|(
name|randomValue
argument_list|,
name|from
argument_list|,
name|scoreMode
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|TopDocs
name|actualTopDocs
init|=
name|topScoreDocCollector
operator|.
name|topDocs
argument_list|()
decl_stmt|;
name|assertTopDocs
argument_list|(
name|expectedTopDocs
argument_list|,
name|actualTopDocs
argument_list|,
name|scoreMode
argument_list|,
name|indexSearcher
argument_list|,
name|joinQuery
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testMinMaxScore
specifier|public
name|void
name|testMinMaxScore
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|priceField
init|=
literal|"price"
decl_stmt|;
comment|// FunctionQuery would be helpful, but join module doesn't depend on queries module.
name|Query
name|priceQuery
init|=
operator|new
name|Query
argument_list|()
block|{
specifier|private
specifier|final
name|Query
name|fieldQuery
init|=
operator|new
name|FieldValueQuery
argument_list|(
name|priceField
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Weight
name|createWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|boolean
name|needsScores
parameter_list|)
throws|throws
name|IOException
block|{
name|Weight
name|fieldWeight
init|=
name|fieldQuery
operator|.
name|createWeight
argument_list|(
name|searcher
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
operator|new
name|Weight
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|extractTerms
parameter_list|(
name|Set
argument_list|<
name|Term
argument_list|>
name|terms
parameter_list|)
block|{           }
annotation|@
name|Override
specifier|public
name|Explanation
name|explain
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getValueForNormalization
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|normalize
parameter_list|(
name|float
name|norm
parameter_list|,
name|float
name|topLevelBoost
parameter_list|)
block|{           }
annotation|@
name|Override
specifier|public
name|Scorer
name|scorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|Scorer
name|fieldScorer
init|=
name|fieldWeight
operator|.
name|scorer
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldScorer
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|NumericDocValues
name|price
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getNumericDocValues
argument_list|(
name|priceField
argument_list|)
decl_stmt|;
return|return
operator|new
name|FilterScorer
argument_list|(
name|fieldScorer
argument_list|,
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|float
operator|)
name|price
operator|.
name|get
argument_list|(
name|in
operator|.
name|docID
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
name|fieldQuery
operator|.
name|toString
argument_list|(
name|field
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|KEYWORD
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|lowestScoresPerParent
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|highestScoresPerParent
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numParents
init|=
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|16
argument_list|,
literal|64
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|numParents
condition|;
name|p
operator|++
control|)
block|{
name|String
name|parentId
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|Document
name|parentDoc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|parentDoc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
name|parentId
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|parentDoc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"type"
argument_list|,
literal|"to"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|parentDoc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"join_field"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|parentId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|parentDoc
argument_list|)
expr_stmt|;
name|int
name|numChildren
init|=
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|int
name|lowest
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|int
name|highest
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|numChildren
condition|;
name|c
operator|++
control|)
block|{
name|String
name|childId
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|p
operator|+
name|c
argument_list|)
decl_stmt|;
name|Document
name|childDoc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|childDoc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
name|childId
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|childDoc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"type"
argument_list|,
literal|"from"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|childDoc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"join_field"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|parentId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|price
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|childDoc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
name|priceField
argument_list|,
name|price
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|childDoc
argument_list|)
expr_stmt|;
name|lowest
operator|=
name|Math
operator|.
name|min
argument_list|(
name|lowest
argument_list|,
name|price
argument_list|)
expr_stmt|;
name|highest
operator|=
name|Math
operator|.
name|max
argument_list|(
name|highest
argument_list|,
name|price
argument_list|)
expr_stmt|;
block|}
name|lowestScoresPerParent
operator|.
name|put
argument_list|(
name|parentId
argument_list|,
operator|(
name|float
operator|)
name|lowest
argument_list|)
expr_stmt|;
name|highestScoresPerParent
operator|.
name|put
argument_list|(
name|parentId
argument_list|,
operator|(
name|float
operator|)
name|highest
argument_list|)
expr_stmt|;
block|}
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
argument_list|)
decl_stmt|;
name|SortedDocValues
index|[]
name|values
init|=
operator|new
name|SortedDocValues
index|[
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|leadContext
range|:
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|leaves
argument_list|()
control|)
block|{
name|values
index|[
name|leadContext
operator|.
name|ord
index|]
operator|=
name|DocValues
operator|.
name|getSorted
argument_list|(
name|leadContext
operator|.
name|reader
argument_list|()
argument_list|,
literal|"join_field"
argument_list|)
expr_stmt|;
block|}
name|MultiDocValues
operator|.
name|OrdinalMap
name|ordinalMap
init|=
name|MultiDocValues
operator|.
name|OrdinalMap
operator|.
name|build
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|getCoreCacheKey
argument_list|()
argument_list|,
name|values
argument_list|,
name|PackedInts
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|fromQuery
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|fromQuery
operator|.
name|add
argument_list|(
name|priceQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|Query
name|toQuery
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"type"
argument_list|,
literal|"to"
argument_list|)
argument_list|)
decl_stmt|;
name|Query
name|joinQuery
init|=
name|JoinUtil
operator|.
name|createJoinQuery
argument_list|(
literal|"join_field"
argument_list|,
name|fromQuery
operator|.
name|build
argument_list|()
argument_list|,
name|toQuery
argument_list|,
name|searcher
argument_list|,
name|ScoreMode
operator|.
name|Min
argument_list|,
name|ordinalMap
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|joinQuery
argument_list|,
name|numParents
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numParents
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|topDocs
operator|.
name|scoreDocs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ScoreDoc
name|scoreDoc
init|=
name|topDocs
operator|.
name|scoreDocs
index|[
name|i
index|]
decl_stmt|;
name|String
name|id
init|=
name|SlowCompositeReaderWrapper
operator|.
name|wrap
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
operator|.
name|document
argument_list|(
name|scoreDoc
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|lowestScoresPerParent
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|,
name|scoreDoc
operator|.
name|score
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
block|}
name|joinQuery
operator|=
name|JoinUtil
operator|.
name|createJoinQuery
argument_list|(
literal|"join_field"
argument_list|,
name|fromQuery
operator|.
name|build
argument_list|()
argument_list|,
name|toQuery
argument_list|,
name|searcher
argument_list|,
name|ScoreMode
operator|.
name|Max
argument_list|,
name|ordinalMap
argument_list|)
expr_stmt|;
name|topDocs
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|joinQuery
argument_list|,
name|numParents
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numParents
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|topDocs
operator|.
name|scoreDocs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ScoreDoc
name|scoreDoc
init|=
name|topDocs
operator|.
name|scoreDocs
index|[
name|i
index|]
decl_stmt|;
name|String
name|id
init|=
name|SlowCompositeReaderWrapper
operator|.
name|wrap
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
argument_list|)
operator|.
name|document
argument_list|(
name|scoreDoc
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|highestScoresPerParent
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|,
name|scoreDoc
operator|.
name|score
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
block|}
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testMinMaxDocs
specifier|public
name|void
name|testMinMaxDocs
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|KEYWORD
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|minChildDocsPerParent
init|=
literal|2
decl_stmt|;
name|int
name|maxChildDocsPerParent
init|=
literal|16
decl_stmt|;
name|int
name|numParents
init|=
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|16
argument_list|,
literal|64
argument_list|)
decl_stmt|;
name|int
index|[]
name|childDocsPerParent
init|=
operator|new
name|int
index|[
name|numParents
index|]
decl_stmt|;
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|numParents
condition|;
name|p
operator|++
control|)
block|{
name|String
name|parentId
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|Document
name|parentDoc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|parentDoc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
name|parentId
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|parentDoc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"type"
argument_list|,
literal|"to"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|parentDoc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"join_field"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|parentId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|parentDoc
argument_list|)
expr_stmt|;
name|int
name|numChildren
init|=
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
name|minChildDocsPerParent
argument_list|,
name|maxChildDocsPerParent
argument_list|)
decl_stmt|;
name|childDocsPerParent
index|[
name|p
index|]
operator|=
name|numChildren
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|numChildren
condition|;
name|c
operator|++
control|)
block|{
name|String
name|childId
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|p
operator|+
name|c
argument_list|)
decl_stmt|;
name|Document
name|childDoc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|childDoc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
name|childId
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|childDoc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"type"
argument_list|,
literal|"from"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|childDoc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"join_field"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|parentId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|childDoc
argument_list|)
expr_stmt|;
block|}
block|}
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
argument_list|)
decl_stmt|;
name|SortedDocValues
index|[]
name|values
init|=
operator|new
name|SortedDocValues
index|[
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|leadContext
range|:
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|leaves
argument_list|()
control|)
block|{
name|values
index|[
name|leadContext
operator|.
name|ord
index|]
operator|=
name|DocValues
operator|.
name|getSorted
argument_list|(
name|leadContext
operator|.
name|reader
argument_list|()
argument_list|,
literal|"join_field"
argument_list|)
expr_stmt|;
block|}
name|MultiDocValues
operator|.
name|OrdinalMap
name|ordinalMap
init|=
name|MultiDocValues
operator|.
name|OrdinalMap
operator|.
name|build
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|getCoreCacheKey
argument_list|()
argument_list|,
name|values
argument_list|,
name|PackedInts
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|Query
name|fromQuery
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"type"
argument_list|,
literal|"from"
argument_list|)
argument_list|)
decl_stmt|;
name|Query
name|toQuery
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"type"
argument_list|,
literal|"to"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|iters
init|=
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|3
argument_list|,
literal|9
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|iters
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|ScoreMode
name|scoreMode
init|=
name|ScoreMode
operator|.
name|values
argument_list|()
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|ScoreMode
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|int
name|min
init|=
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
name|minChildDocsPerParent
argument_list|,
name|maxChildDocsPerParent
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|max
init|=
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
name|min
argument_list|,
name|maxChildDocsPerParent
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"iter="
operator|+
name|i
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"scoreMode="
operator|+
name|scoreMode
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"min="
operator|+
name|min
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"max="
operator|+
name|max
argument_list|)
expr_stmt|;
block|}
name|Query
name|joinQuery
init|=
name|JoinUtil
operator|.
name|createJoinQuery
argument_list|(
literal|"join_field"
argument_list|,
name|fromQuery
argument_list|,
name|toQuery
argument_list|,
name|searcher
argument_list|,
name|scoreMode
argument_list|,
name|ordinalMap
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
decl_stmt|;
name|TotalHitCountCollector
name|collector
init|=
operator|new
name|TotalHitCountCollector
argument_list|()
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
name|joinQuery
argument_list|,
name|collector
argument_list|)
expr_stmt|;
name|int
name|expectedCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|numChildDocs
range|:
name|childDocsPerParent
control|)
block|{
if|if
condition|(
name|numChildDocs
operator|>=
name|min
operator|&&
name|numChildDocs
operator|<=
name|max
condition|)
block|{
name|expectedCount
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|expectedCount
argument_list|,
name|collector
operator|.
name|getTotalHits
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// TermsWithScoreCollector.MV.Avg forgets to grow beyond TermsWithScoreCollector.INITIAL_ARRAY_SIZE
DECL|method|testOverflowTermsWithScoreCollector
specifier|public
name|void
name|testOverflowTermsWithScoreCollector
parameter_list|()
throws|throws
name|Exception
block|{
name|test300spartans
argument_list|(
literal|true
argument_list|,
name|ScoreMode
operator|.
name|Avg
argument_list|)
expr_stmt|;
block|}
DECL|method|testOverflowTermsWithScoreCollectorRandom
specifier|public
name|void
name|testOverflowTermsWithScoreCollectorRandom
parameter_list|()
throws|throws
name|Exception
block|{
name|test300spartans
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
name|ScoreMode
operator|.
name|values
argument_list|()
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|ScoreMode
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|test300spartans
name|void
name|test300spartans
parameter_list|(
name|boolean
name|multipleValues
parameter_list|,
name|ScoreMode
name|scoreMode
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|idField
init|=
literal|"id"
decl_stmt|;
specifier|final
name|String
name|toField
init|=
literal|"productId"
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// 0
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"description"
argument_list|,
literal|"random text"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"name"
argument_list|,
literal|"name1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|idField
argument_list|,
literal|"0"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|idField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"price"
argument_list|,
literal|"10.0"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|multipleValues
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|300
condition|;
name|i
operator|++
control|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesField
argument_list|(
name|toField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|""
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|toField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexSearcher
name|indexSearcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|w
operator|.
name|getReader
argument_list|()
argument_list|)
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Search for product
name|Query
name|joinQuery
init|=
name|JoinUtil
operator|.
name|createJoinQuery
argument_list|(
name|toField
argument_list|,
name|multipleValues
argument_list|,
name|idField
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"price"
argument_list|,
literal|"10.0"
argument_list|)
argument_list|)
argument_list|,
name|indexSearcher
argument_list|,
name|scoreMode
argument_list|)
decl_stmt|;
name|TopDocs
name|result
init|=
name|indexSearcher
operator|.
name|search
argument_list|(
name|joinQuery
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|indexSearcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** LUCENE-5487: verify a join query inside a SHOULD BQ    *  will still use the join query's optimized BulkScorers */
DECL|method|testInsideBooleanQuery
specifier|public
name|void
name|testInsideBooleanQuery
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|idField
init|=
literal|"id"
decl_stmt|;
specifier|final
name|String
name|toField
init|=
literal|"productId"
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// 0
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"description"
argument_list|,
literal|"random text"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"name"
argument_list|,
literal|"name1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|idField
argument_list|,
literal|"7"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|idField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"7"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 1
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"price"
argument_list|,
literal|"10.0"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|idField
argument_list|,
literal|"2"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|idField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|toField
argument_list|,
literal|"7"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 2
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"price"
argument_list|,
literal|"20.0"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|idField
argument_list|,
literal|"3"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|idField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|toField
argument_list|,
literal|"7"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 3
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"description"
argument_list|,
literal|"more random text"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"name"
argument_list|,
literal|"name2"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|idField
argument_list|,
literal|"0"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// 4
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"price"
argument_list|,
literal|"10.0"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|idField
argument_list|,
literal|"5"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|idField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"5"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|toField
argument_list|,
literal|"0"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 5
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"price"
argument_list|,
literal|"20.0"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|idField
argument_list|,
literal|"6"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|idField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"6"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|toField
argument_list|,
literal|"0"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|IndexSearcher
name|indexSearcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|w
operator|.
name|getReader
argument_list|()
argument_list|)
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Search for product
name|Query
name|joinQuery
init|=
name|JoinUtil
operator|.
name|createJoinQuery
argument_list|(
name|idField
argument_list|,
literal|false
argument_list|,
name|toField
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"description"
argument_list|,
literal|"random"
argument_list|)
argument_list|)
argument_list|,
name|indexSearcher
argument_list|,
name|ScoreMode
operator|.
name|Avg
argument_list|)
decl_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|joinQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|indexSearcher
operator|.
name|search
argument_list|(
name|bq
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|SimpleCollector
argument_list|()
block|{
name|boolean
name|sawFive
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
comment|// Hairy / evil (depends on how BooleanScorer
comment|// stores temporarily collected docIDs by
comment|// appending to head of linked list):
if|if
condition|(
name|docID
operator|==
literal|5
condition|)
block|{
name|sawFive
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|docID
operator|==
literal|1
condition|)
block|{
name|assertFalse
argument_list|(
literal|"optimized bulkScorer was not used for join query embedded in boolean query!"
argument_list|,
name|sawFive
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|indexSearcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSimpleWithScoring
specifier|public
name|void
name|testSimpleWithScoring
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|idField
init|=
literal|"id"
decl_stmt|;
specifier|final
name|String
name|toField
init|=
literal|"movieId"
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// 0
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"description"
argument_list|,
literal|"A random movie"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"name"
argument_list|,
literal|"Movie 1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|idField
argument_list|,
literal|"1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|idField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 1
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"subtitle"
argument_list|,
literal|"The first subtitle of this movie"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|idField
argument_list|,
literal|"2"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|idField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|toField
argument_list|,
literal|"1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|toField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 2
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"subtitle"
argument_list|,
literal|"random subtitle; random event movie"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|idField
argument_list|,
literal|"3"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|idField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|toField
argument_list|,
literal|"1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|toField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 3
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"description"
argument_list|,
literal|"A second random movie"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"name"
argument_list|,
literal|"Movie 2"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|idField
argument_list|,
literal|"4"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|idField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// 4
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"subtitle"
argument_list|,
literal|"a very random event happened during christmas night"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|idField
argument_list|,
literal|"5"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|idField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"5"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|toField
argument_list|,
literal|"4"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|toField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// 5
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"subtitle"
argument_list|,
literal|"movie end movie test 123 test 123 random"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|idField
argument_list|,
literal|"6"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|idField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"6"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
name|toField
argument_list|,
literal|"4"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|toField
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexSearcher
name|indexSearcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|w
operator|.
name|getReader
argument_list|()
argument_list|)
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Search for movie via subtitle
name|Query
name|joinQuery
init|=
name|JoinUtil
operator|.
name|createJoinQuery
argument_list|(
name|toField
argument_list|,
literal|false
argument_list|,
name|idField
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"subtitle"
argument_list|,
literal|"random"
argument_list|)
argument_list|)
argument_list|,
name|indexSearcher
argument_list|,
name|ScoreMode
operator|.
name|Max
argument_list|)
decl_stmt|;
name|TopDocs
name|result
init|=
name|indexSearcher
operator|.
name|search
argument_list|(
name|joinQuery
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
comment|// Score mode max.
name|joinQuery
operator|=
name|JoinUtil
operator|.
name|createJoinQuery
argument_list|(
name|toField
argument_list|,
literal|false
argument_list|,
name|idField
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"subtitle"
argument_list|,
literal|"movie"
argument_list|)
argument_list|)
argument_list|,
name|indexSearcher
argument_list|,
name|ScoreMode
operator|.
name|Max
argument_list|)
expr_stmt|;
name|result
operator|=
name|indexSearcher
operator|.
name|search
argument_list|(
name|joinQuery
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
comment|// Score mode total
name|joinQuery
operator|=
name|JoinUtil
operator|.
name|createJoinQuery
argument_list|(
name|toField
argument_list|,
literal|false
argument_list|,
name|idField
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"subtitle"
argument_list|,
literal|"movie"
argument_list|)
argument_list|)
argument_list|,
name|indexSearcher
argument_list|,
name|ScoreMode
operator|.
name|Total
argument_list|)
expr_stmt|;
name|result
operator|=
name|indexSearcher
operator|.
name|search
argument_list|(
name|joinQuery
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
comment|//Score mode avg
name|joinQuery
operator|=
name|JoinUtil
operator|.
name|createJoinQuery
argument_list|(
name|toField
argument_list|,
literal|false
argument_list|,
name|idField
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"subtitle"
argument_list|,
literal|"movie"
argument_list|)
argument_list|)
argument_list|,
name|indexSearcher
argument_list|,
name|ScoreMode
operator|.
name|Avg
argument_list|)
expr_stmt|;
name|result
operator|=
name|indexSearcher
operator|.
name|search
argument_list|(
name|joinQuery
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|indexSearcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Slow
DECL|method|testSingleValueRandomJoin
specifier|public
name|void
name|testSingleValueRandomJoin
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|maxIndexIter
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|6
argument_list|,
literal|12
argument_list|)
decl_stmt|;
name|int
name|maxSearchIter
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|13
argument_list|,
literal|26
argument_list|)
decl_stmt|;
name|executeRandomJoin
argument_list|(
literal|false
argument_list|,
name|maxIndexIter
argument_list|,
name|maxSearchIter
argument_list|,
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|87
argument_list|,
literal|764
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Slow
comment|// This test really takes more time, that is why the number of iterations are smaller.
DECL|method|testMultiValueRandomJoin
specifier|public
name|void
name|testMultiValueRandomJoin
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|maxIndexIter
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|int
name|maxSearchIter
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|6
argument_list|,
literal|12
argument_list|)
decl_stmt|;
name|executeRandomJoin
argument_list|(
literal|true
argument_list|,
name|maxIndexIter
argument_list|,
name|maxSearchIter
argument_list|,
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|11
argument_list|,
literal|57
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|executeRandomJoin
specifier|private
name|void
name|executeRandomJoin
parameter_list|(
name|boolean
name|multipleValuesPerDocument
parameter_list|,
name|int
name|maxIndexIter
parameter_list|,
name|int
name|maxSearchIter
parameter_list|,
name|int
name|numberOfDocumentsToIndex
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|indexIter
init|=
literal|1
init|;
name|indexIter
operator|<=
name|maxIndexIter
condition|;
name|indexIter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"indexIter="
operator|+
name|indexIter
argument_list|)
expr_stmt|;
block|}
name|IndexIterationContext
name|context
init|=
name|createContext
argument_list|(
name|numberOfDocumentsToIndex
argument_list|,
name|multipleValuesPerDocument
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|IndexSearcher
name|indexSearcher
init|=
name|context
operator|.
name|searcher
decl_stmt|;
for|for
control|(
name|int
name|searchIter
init|=
literal|1
init|;
name|searchIter
operator|<=
name|maxSearchIter
condition|;
name|searchIter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"searchIter="
operator|+
name|searchIter
argument_list|)
expr_stmt|;
block|}
name|int
name|r
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|context
operator|.
name|randomUniqueValues
operator|.
name|length
argument_list|)
decl_stmt|;
name|boolean
name|from
init|=
name|context
operator|.
name|randomFrom
index|[
name|r
index|]
decl_stmt|;
name|String
name|randomValue
init|=
name|context
operator|.
name|randomUniqueValues
index|[
name|r
index|]
decl_stmt|;
name|BitSet
name|expectedResult
init|=
name|createExpectedResult
argument_list|(
name|randomValue
argument_list|,
name|from
argument_list|,
name|indexSearcher
operator|.
name|getIndexReader
argument_list|()
argument_list|,
name|context
argument_list|)
decl_stmt|;
specifier|final
name|Query
name|actualQuery
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
name|randomValue
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"actualQuery="
operator|+
name|actualQuery
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ScoreMode
name|scoreMode
init|=
name|ScoreMode
operator|.
name|values
argument_list|()
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|ScoreMode
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"scoreMode="
operator|+
name|scoreMode
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Query
name|joinQuery
decl_stmt|;
if|if
condition|(
name|from
condition|)
block|{
name|joinQuery
operator|=
name|JoinUtil
operator|.
name|createJoinQuery
argument_list|(
literal|"from"
argument_list|,
name|multipleValuesPerDocument
argument_list|,
literal|"to"
argument_list|,
name|actualQuery
argument_list|,
name|indexSearcher
argument_list|,
name|scoreMode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|joinQuery
operator|=
name|JoinUtil
operator|.
name|createJoinQuery
argument_list|(
literal|"to"
argument_list|,
name|multipleValuesPerDocument
argument_list|,
literal|"from"
argument_list|,
name|actualQuery
argument_list|,
name|indexSearcher
argument_list|,
name|scoreMode
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"joinQuery="
operator|+
name|joinQuery
argument_list|)
expr_stmt|;
block|}
comment|// Need to know all documents that have matches. TopDocs doesn't give me that and then I'd be also testing TopDocsCollector...
specifier|final
name|BitSet
name|actualResult
init|=
operator|new
name|FixedBitSet
argument_list|(
name|indexSearcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|TopScoreDocCollector
name|topScoreDocCollector
init|=
name|TopScoreDocCollector
operator|.
name|create
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|indexSearcher
operator|.
name|search
argument_list|(
name|joinQuery
argument_list|,
name|MultiCollector
operator|.
name|wrap
argument_list|(
operator|new
name|BitSetCollector
argument_list|(
name|actualResult
argument_list|)
argument_list|,
name|topScoreDocCollector
argument_list|)
argument_list|)
expr_stmt|;
comment|// Asserting bit set...
name|assertBitSet
argument_list|(
name|expectedResult
argument_list|,
name|actualResult
argument_list|,
name|indexSearcher
argument_list|)
expr_stmt|;
comment|// Asserting TopDocs...
name|TopDocs
name|expectedTopDocs
init|=
name|createExpectedTopDocs
argument_list|(
name|randomValue
argument_list|,
name|from
argument_list|,
name|scoreMode
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|TopDocs
name|actualTopDocs
init|=
name|topScoreDocCollector
operator|.
name|topDocs
argument_list|()
decl_stmt|;
name|assertTopDocs
argument_list|(
name|expectedTopDocs
argument_list|,
name|actualTopDocs
argument_list|,
name|scoreMode
argument_list|,
name|indexSearcher
argument_list|,
name|joinQuery
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|assertBitSet
specifier|private
name|void
name|assertBitSet
parameter_list|(
name|BitSet
name|expectedResult
parameter_list|,
name|BitSet
name|actualResult
parameter_list|,
name|IndexSearcher
name|indexSearcher
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"expected cardinality:"
operator|+
name|expectedResult
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
name|DocIdSetIterator
name|iterator
init|=
operator|new
name|BitSetIterator
argument_list|(
name|expectedResult
argument_list|,
name|expectedResult
operator|.
name|cardinality
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|iterator
operator|.
name|nextDoc
argument_list|()
init|;
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|doc
operator|=
name|iterator
operator|.
name|nextDoc
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Expected doc[%d] with id value %s"
argument_list|,
name|doc
argument_list|,
name|indexSearcher
operator|.
name|doc
argument_list|(
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"actual cardinality:"
operator|+
name|actualResult
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
name|iterator
operator|=
operator|new
name|BitSetIterator
argument_list|(
name|actualResult
argument_list|,
name|actualResult
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|iterator
operator|.
name|nextDoc
argument_list|()
init|;
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|doc
operator|=
name|iterator
operator|.
name|nextDoc
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Actual doc[%d] with id value %s"
argument_list|,
name|doc
argument_list|,
name|indexSearcher
operator|.
name|doc
argument_list|(
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|expectedResult
argument_list|,
name|actualResult
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTopDocs
specifier|private
name|void
name|assertTopDocs
parameter_list|(
name|TopDocs
name|expectedTopDocs
parameter_list|,
name|TopDocs
name|actualTopDocs
parameter_list|,
name|ScoreMode
name|scoreMode
parameter_list|,
name|IndexSearcher
name|indexSearcher
parameter_list|,
name|Query
name|joinQuery
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|expectedTopDocs
operator|.
name|totalHits
argument_list|,
name|actualTopDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedTopDocs
operator|.
name|scoreDocs
operator|.
name|length
argument_list|,
name|actualTopDocs
operator|.
name|scoreDocs
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|scoreMode
operator|==
name|ScoreMode
operator|.
name|None
condition|)
block|{
return|return;
block|}
name|assertEquals
argument_list|(
name|expectedTopDocs
operator|.
name|getMaxScore
argument_list|()
argument_list|,
name|actualTopDocs
operator|.
name|getMaxScore
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedTopDocs
operator|.
name|scoreDocs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"Expected doc: %d | Actual doc: %d\n"
argument_list|,
name|expectedTopDocs
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
argument_list|,
name|actualTopDocs
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"Expected score: %f | Actual score: %f\n"
argument_list|,
name|expectedTopDocs
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|score
argument_list|,
name|actualTopDocs
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|score
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedTopDocs
operator|.
name|scoreDocs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expectedTopDocs
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
argument_list|,
name|actualTopDocs
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedTopDocs
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|score
argument_list|,
name|actualTopDocs
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|score
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|Explanation
name|explanation
init|=
name|indexSearcher
operator|.
name|explain
argument_list|(
name|joinQuery
argument_list|,
name|expectedTopDocs
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedTopDocs
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|score
argument_list|,
name|explanation
operator|.
name|getValue
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createContext
specifier|private
name|IndexIterationContext
name|createContext
parameter_list|(
name|int
name|nDocs
parameter_list|,
name|boolean
name|multipleValuesPerDocument
parameter_list|,
name|boolean
name|globalOrdinalJoin
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|globalOrdinalJoin
condition|)
block|{
name|assertFalse
argument_list|(
literal|"ordinal join doesn't support multiple join values per document"
argument_list|,
name|multipleValuesPerDocument
argument_list|)
expr_stmt|;
block|}
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|KEYWORD
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|IndexIterationContext
name|context
init|=
operator|new
name|IndexIterationContext
argument_list|()
decl_stmt|;
name|int
name|numRandomValues
init|=
name|nDocs
operator|/
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|context
operator|.
name|randomUniqueValues
operator|=
operator|new
name|String
index|[
name|numRandomValues
index|]
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|trackSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|context
operator|.
name|randomFrom
operator|=
operator|new
name|boolean
index|[
name|numRandomValues
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRandomValues
condition|;
name|i
operator|++
control|)
block|{
name|String
name|uniqueRandomValue
decl_stmt|;
do|do
block|{
comment|//        uniqueRandomValue = TestUtil.randomRealisticUnicodeString(random());
name|uniqueRandomValue
operator|=
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|uniqueRandomValue
argument_list|)
operator|||
name|trackSet
operator|.
name|contains
argument_list|(
name|uniqueRandomValue
argument_list|)
condition|)
do|;
comment|// Generate unique values and empty strings aren't allowed.
name|trackSet
operator|.
name|add
argument_list|(
name|uniqueRandomValue
argument_list|)
expr_stmt|;
name|context
operator|.
name|randomFrom
index|[
name|i
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
expr_stmt|;
name|context
operator|.
name|randomUniqueValues
index|[
name|i
index|]
operator|=
name|uniqueRandomValue
expr_stmt|;
block|}
name|RandomDoc
index|[]
name|docs
init|=
operator|new
name|RandomDoc
index|[
name|nDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nDocs
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|randomI
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|context
operator|.
name|randomUniqueValues
operator|.
name|length
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|context
operator|.
name|randomUniqueValues
index|[
name|randomI
index|]
decl_stmt|;
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
name|random
argument_list|()
argument_list|,
literal|"id"
argument_list|,
name|id
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
name|random
argument_list|()
argument_list|,
literal|"value"
argument_list|,
name|value
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|from
init|=
name|context
operator|.
name|randomFrom
index|[
name|randomI
index|]
decl_stmt|;
name|int
name|numberOfLinkValues
init|=
name|multipleValuesPerDocument
condition|?
literal|2
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
else|:
literal|1
decl_stmt|;
name|docs
index|[
name|i
index|]
operator|=
operator|new
name|RandomDoc
argument_list|(
name|id
argument_list|,
name|numberOfLinkValues
argument_list|,
name|value
argument_list|,
name|from
argument_list|)
expr_stmt|;
if|if
condition|(
name|globalOrdinalJoin
condition|)
block|{
name|document
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"type"
argument_list|,
name|from
condition|?
literal|"from"
else|:
literal|"to"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numberOfLinkValues
condition|;
name|j
operator|++
control|)
block|{
name|String
name|linkValue
init|=
name|context
operator|.
name|randomUniqueValues
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|context
operator|.
name|randomUniqueValues
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|docs
index|[
name|i
index|]
operator|.
name|linkValues
operator|.
name|add
argument_list|(
name|linkValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|from
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|.
name|fromDocuments
operator|.
name|containsKey
argument_list|(
name|linkValue
argument_list|)
condition|)
block|{
name|context
operator|.
name|fromDocuments
operator|.
name|put
argument_list|(
name|linkValue
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|context
operator|.
name|randomValueFromDocs
operator|.
name|containsKey
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|context
operator|.
name|randomValueFromDocs
operator|.
name|put
argument_list|(
name|value
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|fromDocuments
operator|.
name|get
argument_list|(
name|linkValue
argument_list|)
operator|.
name|add
argument_list|(
name|docs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|context
operator|.
name|randomValueFromDocs
operator|.
name|get
argument_list|(
name|value
argument_list|)
operator|.
name|add
argument_list|(
name|docs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
name|random
argument_list|()
argument_list|,
literal|"from"
argument_list|,
name|linkValue
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|multipleValuesPerDocument
condition|)
block|{
name|document
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesField
argument_list|(
literal|"from"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|linkValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|document
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"from"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|linkValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|globalOrdinalJoin
condition|)
block|{
name|document
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"join_field"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|linkValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|context
operator|.
name|toDocuments
operator|.
name|containsKey
argument_list|(
name|linkValue
argument_list|)
condition|)
block|{
name|context
operator|.
name|toDocuments
operator|.
name|put
argument_list|(
name|linkValue
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|context
operator|.
name|randomValueToDocs
operator|.
name|containsKey
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|context
operator|.
name|randomValueToDocs
operator|.
name|put
argument_list|(
name|value
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|toDocuments
operator|.
name|get
argument_list|(
name|linkValue
argument_list|)
operator|.
name|add
argument_list|(
name|docs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|context
operator|.
name|randomValueToDocs
operator|.
name|get
argument_list|(
name|value
argument_list|)
operator|.
name|add
argument_list|(
name|docs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
name|random
argument_list|()
argument_list|,
literal|"to"
argument_list|,
name|linkValue
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|multipleValuesPerDocument
condition|)
block|{
name|document
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesField
argument_list|(
literal|"to"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|linkValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|document
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"to"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|linkValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|globalOrdinalJoin
condition|)
block|{
name|document
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"join_field"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|linkValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|w
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|4
condition|)
block|{
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Added document["
operator|+
name|docs
index|[
name|i
index|]
operator|.
name|id
operator|+
literal|"]: "
operator|+
name|document
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|w
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Pre-compute all possible hits for all unique random values. On top of this also compute all possible score for
comment|// any ScoreMode.
name|DirectoryReader
name|topLevelReader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|topLevelReader
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|context
operator|.
name|randomUniqueValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|uniqueRandomValue
init|=
name|context
operator|.
name|randomUniqueValues
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|String
name|fromField
decl_stmt|;
specifier|final
name|String
name|toField
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|JoinScore
argument_list|>
argument_list|>
name|queryVals
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|randomFrom
index|[
name|i
index|]
condition|)
block|{
name|fromField
operator|=
literal|"from"
expr_stmt|;
name|toField
operator|=
literal|"to"
expr_stmt|;
name|queryVals
operator|=
name|context
operator|.
name|fromHitsToJoinScore
expr_stmt|;
block|}
else|else
block|{
name|fromField
operator|=
literal|"to"
expr_stmt|;
name|toField
operator|=
literal|"from"
expr_stmt|;
name|queryVals
operator|=
name|context
operator|.
name|toHitsToJoinScore
expr_stmt|;
block|}
specifier|final
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|JoinScore
argument_list|>
name|joinValueToJoinScores
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|multipleValuesPerDocument
condition|)
block|{
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
name|uniqueRandomValue
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SimpleCollector
argument_list|()
block|{
specifier|private
name|Scorer
name|scorer
decl_stmt|;
specifier|private
name|SortedSetDocValues
name|docTermOrds
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|docTermOrds
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|long
name|ord
decl_stmt|;
while|while
condition|(
operator|(
name|ord
operator|=
name|docTermOrds
operator|.
name|nextOrd
argument_list|()
operator|)
operator|!=
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
condition|)
block|{
specifier|final
name|BytesRef
name|joinValue
init|=
name|docTermOrds
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
decl_stmt|;
name|JoinScore
name|joinScore
init|=
name|joinValueToJoinScores
operator|.
name|get
argument_list|(
name|joinValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinScore
operator|==
literal|null
condition|)
block|{
name|joinValueToJoinScores
operator|.
name|put
argument_list|(
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|joinValue
argument_list|)
argument_list|,
name|joinScore
operator|=
operator|new
name|JoinScore
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|joinScore
operator|.
name|addScore
argument_list|(
name|scorer
operator|.
name|score
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|docTermOrds
operator|=
name|DocValues
operator|.
name|getSortedSet
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|fromField
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"value"
argument_list|,
name|uniqueRandomValue
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SimpleCollector
argument_list|()
block|{
specifier|private
name|Scorer
name|scorer
decl_stmt|;
specifier|private
name|BinaryDocValues
name|terms
decl_stmt|;
specifier|private
name|Bits
name|docsWithField
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BytesRef
name|joinValue
init|=
name|terms
operator|.
name|get
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinValue
operator|.
name|length
operator|==
literal|0
operator|&&
operator|!
name|docsWithField
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
block|{
return|return;
block|}
name|JoinScore
name|joinScore
init|=
name|joinValueToJoinScores
operator|.
name|get
argument_list|(
name|joinValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinScore
operator|==
literal|null
condition|)
block|{
name|joinValueToJoinScores
operator|.
name|put
argument_list|(
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|joinValue
argument_list|)
argument_list|,
name|joinScore
operator|=
operator|new
name|JoinScore
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"expected val="
operator|+
name|joinValue
operator|.
name|utf8ToString
argument_list|()
operator|+
literal|" expected score="
operator|+
name|scorer
operator|.
name|score
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|joinScore
operator|.
name|addScore
argument_list|(
name|scorer
operator|.
name|score
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|terms
operator|=
name|DocValues
operator|.
name|getBinary
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|fromField
argument_list|)
expr_stmt|;
name|docsWithField
operator|=
name|DocValues
operator|.
name|getDocsWithField
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|fromField
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|JoinScore
argument_list|>
name|docToJoinScore
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|multipleValuesPerDocument
condition|)
block|{
name|LeafReader
name|slowCompositeReader
init|=
name|SlowCompositeReaderWrapper
operator|.
name|wrap
argument_list|(
name|topLevelReader
argument_list|)
decl_stmt|;
name|Terms
name|terms
init|=
name|slowCompositeReader
operator|.
name|terms
argument_list|(
name|toField
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
name|PostingsEnum
name|postingsEnum
init|=
literal|null
decl_stmt|;
name|SortedSet
argument_list|<
name|BytesRef
argument_list|>
name|joinValues
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|BytesRef
operator|.
name|getUTF8SortedAsUnicodeComparator
argument_list|()
argument_list|)
decl_stmt|;
name|joinValues
operator|.
name|addAll
argument_list|(
name|joinValueToJoinScores
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|BytesRef
name|joinValue
range|:
name|joinValues
control|)
block|{
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|termsEnum
operator|.
name|seekExact
argument_list|(
name|joinValue
argument_list|)
condition|)
block|{
name|postingsEnum
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|postingsEnum
argument_list|,
name|PostingsEnum
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|JoinScore
name|joinScore
init|=
name|joinValueToJoinScores
operator|.
name|get
argument_list|(
name|joinValue
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|postingsEnum
operator|.
name|nextDoc
argument_list|()
init|;
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|doc
operator|=
name|postingsEnum
operator|.
name|nextDoc
argument_list|()
control|)
block|{
comment|// First encountered join value determines the score.
comment|// Something to keep in mind for many-to-many relations.
if|if
condition|(
operator|!
name|docToJoinScore
operator|.
name|containsKey
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|docToJoinScore
operator|.
name|put
argument_list|(
name|doc
argument_list|,
name|joinScore
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
else|else
block|{
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
operator|new
name|SimpleCollector
argument_list|()
block|{
specifier|private
name|BinaryDocValues
name|terms
decl_stmt|;
specifier|private
name|int
name|docBase
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
specifier|final
name|BytesRef
name|joinValue
init|=
name|terms
operator|.
name|get
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|JoinScore
name|joinScore
init|=
name|joinValueToJoinScores
operator|.
name|get
argument_list|(
name|joinValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|joinScore
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|docToJoinScore
operator|.
name|put
argument_list|(
name|docBase
operator|+
name|doc
argument_list|,
name|joinScore
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|terms
operator|=
name|DocValues
operator|.
name|getBinary
argument_list|(
name|context
operator|.
name|reader
argument_list|()
argument_list|,
name|toField
argument_list|)
expr_stmt|;
name|docBase
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{           }
annotation|@
name|Override
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|queryVals
operator|.
name|put
argument_list|(
name|uniqueRandomValue
argument_list|,
name|docToJoinScore
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|globalOrdinalJoin
condition|)
block|{
name|SortedDocValues
index|[]
name|values
init|=
operator|new
name|SortedDocValues
index|[
name|topLevelReader
operator|.
name|leaves
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|leadContext
range|:
name|topLevelReader
operator|.
name|leaves
argument_list|()
control|)
block|{
name|values
index|[
name|leadContext
operator|.
name|ord
index|]
operator|=
name|DocValues
operator|.
name|getSorted
argument_list|(
name|leadContext
operator|.
name|reader
argument_list|()
argument_list|,
literal|"join_field"
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|ordinalMap
operator|=
name|MultiDocValues
operator|.
name|OrdinalMap
operator|.
name|build
argument_list|(
name|topLevelReader
operator|.
name|getCoreCacheKey
argument_list|()
argument_list|,
name|values
argument_list|,
name|PackedInts
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|searcher
operator|=
name|searcher
expr_stmt|;
name|context
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
return|return
name|context
return|;
block|}
DECL|method|createExpectedTopDocs
specifier|private
name|TopDocs
name|createExpectedTopDocs
parameter_list|(
name|String
name|queryValue
parameter_list|,
specifier|final
name|boolean
name|from
parameter_list|,
specifier|final
name|ScoreMode
name|scoreMode
parameter_list|,
name|IndexIterationContext
name|context
parameter_list|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|JoinScore
argument_list|>
name|hitsToJoinScores
decl_stmt|;
if|if
condition|(
name|from
condition|)
block|{
name|hitsToJoinScores
operator|=
name|context
operator|.
name|fromHitsToJoinScore
operator|.
name|get
argument_list|(
name|queryValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hitsToJoinScores
operator|=
name|context
operator|.
name|toHitsToJoinScore
operator|.
name|get
argument_list|(
name|queryValue
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|JoinScore
argument_list|>
argument_list|>
name|hits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|hitsToJoinScores
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|hits
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|JoinScore
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|JoinScore
argument_list|>
name|hit1
parameter_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|JoinScore
argument_list|>
name|hit2
parameter_list|)
block|{
name|float
name|score1
init|=
name|hit1
operator|.
name|getValue
argument_list|()
operator|.
name|score
argument_list|(
name|scoreMode
argument_list|)
decl_stmt|;
name|float
name|score2
init|=
name|hit2
operator|.
name|getValue
argument_list|()
operator|.
name|score
argument_list|(
name|scoreMode
argument_list|)
decl_stmt|;
name|int
name|cmp
init|=
name|Float
operator|.
name|compare
argument_list|(
name|score2
argument_list|,
name|score1
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
block|{
return|return
name|cmp
return|;
block|}
return|return
name|hit1
operator|.
name|getKey
argument_list|()
operator|-
name|hit2
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ScoreDoc
index|[]
name|scoreDocs
init|=
operator|new
name|ScoreDoc
index|[
name|Math
operator|.
name|min
argument_list|(
literal|10
argument_list|,
name|hits
operator|.
name|size
argument_list|()
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|scoreDocs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|JoinScore
argument_list|>
name|hit
init|=
name|hits
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|scoreDocs
index|[
name|i
index|]
operator|=
operator|new
name|ScoreDoc
argument_list|(
name|hit
operator|.
name|getKey
argument_list|()
argument_list|,
name|hit
operator|.
name|getValue
argument_list|()
operator|.
name|score
argument_list|(
name|scoreMode
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|TopDocs
argument_list|(
name|hits
operator|.
name|size
argument_list|()
argument_list|,
name|scoreDocs
argument_list|,
name|hits
operator|.
name|isEmpty
argument_list|()
condition|?
name|Float
operator|.
name|NaN
else|:
name|hits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|score
argument_list|(
name|scoreMode
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createExpectedResult
specifier|private
name|BitSet
name|createExpectedResult
parameter_list|(
name|String
name|queryValue
parameter_list|,
name|boolean
name|from
parameter_list|,
name|IndexReader
name|topLevelReader
parameter_list|,
name|IndexIterationContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RandomDoc
argument_list|>
argument_list|>
name|randomValueDocs
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RandomDoc
argument_list|>
argument_list|>
name|linkValueDocuments
decl_stmt|;
if|if
condition|(
name|from
condition|)
block|{
name|randomValueDocs
operator|=
name|context
operator|.
name|randomValueFromDocs
expr_stmt|;
name|linkValueDocuments
operator|=
name|context
operator|.
name|toDocuments
expr_stmt|;
block|}
else|else
block|{
name|randomValueDocs
operator|=
name|context
operator|.
name|randomValueToDocs
expr_stmt|;
name|linkValueDocuments
operator|=
name|context
operator|.
name|fromDocuments
expr_stmt|;
block|}
name|BitSet
name|expectedResult
init|=
operator|new
name|FixedBitSet
argument_list|(
name|topLevelReader
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RandomDoc
argument_list|>
name|matchingDocs
init|=
name|randomValueDocs
operator|.
name|get
argument_list|(
name|queryValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchingDocs
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|FixedBitSet
argument_list|(
name|topLevelReader
operator|.
name|maxDoc
argument_list|()
argument_list|)
return|;
block|}
for|for
control|(
name|RandomDoc
name|matchingDoc
range|:
name|matchingDocs
control|)
block|{
for|for
control|(
name|String
name|linkValue
range|:
name|matchingDoc
operator|.
name|linkValues
control|)
block|{
name|List
argument_list|<
name|RandomDoc
argument_list|>
name|otherMatchingDocs
init|=
name|linkValueDocuments
operator|.
name|get
argument_list|(
name|linkValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|otherMatchingDocs
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|RandomDoc
name|otherSideDoc
range|:
name|otherMatchingDocs
control|)
block|{
name|PostingsEnum
name|postingsEnum
init|=
name|MultiFields
operator|.
name|getTermDocsEnum
argument_list|(
name|topLevelReader
argument_list|,
literal|"id"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|otherSideDoc
operator|.
name|id
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
assert|assert
name|postingsEnum
operator|!=
literal|null
assert|;
name|int
name|doc
init|=
name|postingsEnum
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
name|expectedResult
operator|.
name|set
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|expectedResult
return|;
block|}
DECL|class|IndexIterationContext
specifier|private
specifier|static
class|class
name|IndexIterationContext
block|{
DECL|field|randomUniqueValues
name|String
index|[]
name|randomUniqueValues
decl_stmt|;
DECL|field|randomFrom
name|boolean
index|[]
name|randomFrom
decl_stmt|;
DECL|field|fromDocuments
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RandomDoc
argument_list|>
argument_list|>
name|fromDocuments
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|toDocuments
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RandomDoc
argument_list|>
argument_list|>
name|toDocuments
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|randomValueFromDocs
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RandomDoc
argument_list|>
argument_list|>
name|randomValueFromDocs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|randomValueToDocs
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RandomDoc
argument_list|>
argument_list|>
name|randomValueToDocs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|fromHitsToJoinScore
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|JoinScore
argument_list|>
argument_list|>
name|fromHitsToJoinScore
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|toHitsToJoinScore
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|JoinScore
argument_list|>
argument_list|>
name|toHitsToJoinScore
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|ordinalMap
name|MultiDocValues
operator|.
name|OrdinalMap
name|ordinalMap
decl_stmt|;
DECL|field|dir
name|Directory
name|dir
decl_stmt|;
DECL|field|searcher
name|IndexSearcher
name|searcher
decl_stmt|;
DECL|method|close
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|RandomDoc
specifier|private
specifier|static
class|class
name|RandomDoc
block|{
DECL|field|id
specifier|final
name|String
name|id
decl_stmt|;
DECL|field|linkValues
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|linkValues
decl_stmt|;
DECL|field|value
specifier|final
name|String
name|value
decl_stmt|;
DECL|field|from
specifier|final
name|boolean
name|from
decl_stmt|;
DECL|method|RandomDoc
specifier|private
name|RandomDoc
parameter_list|(
name|String
name|id
parameter_list|,
name|int
name|numberOfLinkValues
parameter_list|,
name|String
name|value
parameter_list|,
name|boolean
name|from
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|from
operator|=
name|from
expr_stmt|;
name|linkValues
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numberOfLinkValues
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
block|}
DECL|class|JoinScore
specifier|private
specifier|static
class|class
name|JoinScore
block|{
DECL|field|minScore
name|float
name|minScore
init|=
name|Float
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
DECL|field|maxScore
name|float
name|maxScore
init|=
name|Float
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
DECL|field|total
name|float
name|total
decl_stmt|;
DECL|field|count
name|int
name|count
decl_stmt|;
DECL|method|addScore
name|void
name|addScore
parameter_list|(
name|float
name|score
parameter_list|)
block|{
if|if
condition|(
name|score
operator|>
name|maxScore
condition|)
block|{
name|maxScore
operator|=
name|score
expr_stmt|;
block|}
if|if
condition|(
name|score
operator|<
name|minScore
condition|)
block|{
name|minScore
operator|=
name|score
expr_stmt|;
block|}
name|total
operator|+=
name|score
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
DECL|method|score
name|float
name|score
parameter_list|(
name|ScoreMode
name|mode
parameter_list|)
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|None
case|:
return|return
literal|1f
return|;
case|case
name|Total
case|:
return|return
name|total
return|;
case|case
name|Avg
case|:
return|return
name|total
operator|/
name|count
return|;
case|case
name|Min
case|:
return|return
name|minScore
return|;
case|case
name|Max
case|:
return|return
name|maxScore
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported ScoreMode: "
operator|+
name|mode
argument_list|)
throw|;
block|}
block|}
DECL|class|BitSetCollector
specifier|private
specifier|static
class|class
name|BitSetCollector
extends|extends
name|SimpleCollector
block|{
DECL|field|bitSet
specifier|private
specifier|final
name|BitSet
name|bitSet
decl_stmt|;
DECL|field|docBase
specifier|private
name|int
name|docBase
decl_stmt|;
DECL|method|BitSetCollector
specifier|private
name|BitSetCollector
parameter_list|(
name|BitSet
name|bitSet
parameter_list|)
block|{
name|this
operator|.
name|bitSet
operator|=
name|bitSet
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|bitSet
operator|.
name|set
argument_list|(
name|docBase
operator|+
name|doc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doSetNextReader
specifier|protected
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|docBase
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|needsScores
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class
end_unit
