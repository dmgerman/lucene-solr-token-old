begin_unit
begin_package
DECL|package|org.apache.lucene.search.similarities
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|OrdTermState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|CollectionStatistics
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermStatistics
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TermContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import
begin_comment
comment|/**  * Tests the {@link SimilarityBase}-based Similarities. Contains unit tests and   * integration tests for all Similarities and correctness tests for a select  * few.  *<p>This class maintains a list of  * {@code SimilarityBase} subclasses. Each test case performs its test on all  * items in the list. If a test case fails, the name of the Similarity that  * caused the failure is returned as part of the assertion error message.</p>  *<p>Unit testing is performed by constructing statistics manually and calling  * the {@link SimilarityBase#score(BasicStats, float, int)} method of the  * Similarities. The statistics represent corner cases of corpus distributions.  *</p>  *<p>For the integration tests, a small (8-document) collection is indexed. The  * tests verify that for a specific query, all relevant documents are returned  * in the correct order. The collection consists of two poems of English poet  *<a href="http://en.wikipedia.org/wiki/William_blake">William Blake</a>.</p>  *<p>Note: the list of Similarities is maintained by hand. If a new Similarity  * is added to the {@code org.apache.lucene.search.similarities} package, the  * list should be updated accordingly.</p>  *<p>  * In the correctness tests, the score is verified against the result of manual  * computation. Since it would be impossible to test all Similarities  * (e.g. all possible DFR combinations, all parameter values for LM), only   * the best performing setups in the original papers are verified.  *</p>  */
end_comment
begin_class
DECL|class|TestSimilarityBase
specifier|public
class|class
name|TestSimilarityBase
extends|extends
name|LuceneTestCase
block|{
DECL|field|FIELD_BODY
specifier|private
specifier|static
name|String
name|FIELD_BODY
init|=
literal|"body"
decl_stmt|;
DECL|field|FIELD_ID
specifier|private
specifier|static
name|String
name|FIELD_ID
init|=
literal|"id"
decl_stmt|;
comment|/** The tolerance range for float equality. */
DECL|field|FLOAT_EPSILON
specifier|private
specifier|static
name|float
name|FLOAT_EPSILON
init|=
literal|1e-5f
decl_stmt|;
comment|/** The DFR basic models to test. */
DECL|field|BASIC_MODELS
specifier|static
name|BasicModel
index|[]
name|BASIC_MODELS
init|=
block|{
operator|new
name|BasicModelBE
argument_list|()
block|,
operator|new
name|BasicModelD
argument_list|()
block|,
operator|new
name|BasicModelG
argument_list|()
block|,
operator|new
name|BasicModelIF
argument_list|()
block|,
operator|new
name|BasicModelIn
argument_list|()
block|,
operator|new
name|BasicModelIne
argument_list|()
block|,
operator|new
name|BasicModelP
argument_list|()
block|}
decl_stmt|;
comment|/** The DFR aftereffects to test. */
DECL|field|AFTER_EFFECTS
specifier|static
name|AfterEffect
index|[]
name|AFTER_EFFECTS
init|=
block|{
operator|new
name|AfterEffectB
argument_list|()
block|,
operator|new
name|AfterEffectL
argument_list|()
block|,
operator|new
name|AfterEffect
operator|.
name|NoAfterEffect
argument_list|()
block|}
decl_stmt|;
comment|/** The DFR normalizations to test. */
DECL|field|NORMALIZATIONS
specifier|static
name|Normalization
index|[]
name|NORMALIZATIONS
init|=
block|{
operator|new
name|NormalizationH1
argument_list|()
block|,
operator|new
name|NormalizationH2
argument_list|()
block|,
operator|new
name|NormalizationH3
argument_list|()
block|,
operator|new
name|NormalizationZ
argument_list|()
block|,
operator|new
name|Normalization
operator|.
name|NoNormalization
argument_list|()
block|}
decl_stmt|;
comment|/** The distributions for IB. */
DECL|field|DISTRIBUTIONS
specifier|static
name|Distribution
index|[]
name|DISTRIBUTIONS
init|=
block|{
operator|new
name|DistributionLL
argument_list|()
block|,
operator|new
name|DistributionSPL
argument_list|()
block|}
decl_stmt|;
comment|/** Lambdas for IB. */
DECL|field|LAMBDAS
specifier|static
name|Lambda
index|[]
name|LAMBDAS
init|=
block|{
operator|new
name|LambdaDF
argument_list|()
block|,
operator|new
name|LambdaTTF
argument_list|()
block|}
decl_stmt|;
DECL|field|searcher
specifier|private
name|IndexSearcher
name|searcher
decl_stmt|;
DECL|field|dir
specifier|private
name|Directory
name|dir
decl_stmt|;
DECL|field|reader
specifier|private
name|IndexReader
name|reader
decl_stmt|;
comment|/** The list of similarities to test. */
DECL|field|sims
specifier|private
name|List
argument_list|<
name|SimilarityBase
argument_list|>
name|sims
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|dir
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|,
name|dir
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|ft
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|ft
operator|.
name|setIndexed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
name|newField
argument_list|(
name|FIELD_ID
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|ft
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
name|newField
argument_list|(
name|FIELD_BODY
argument_list|,
name|docs
index|[
name|i
index|]
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|reader
operator|=
name|writer
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|searcher
operator|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|sims
operator|=
operator|new
name|ArrayList
argument_list|<
name|SimilarityBase
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|BasicModel
name|basicModel
range|:
name|BASIC_MODELS
control|)
block|{
for|for
control|(
name|AfterEffect
name|afterEffect
range|:
name|AFTER_EFFECTS
control|)
block|{
for|for
control|(
name|Normalization
name|normalization
range|:
name|NORMALIZATIONS
control|)
block|{
name|sims
operator|.
name|add
argument_list|(
operator|new
name|DFRSimilarity
argument_list|(
name|basicModel
argument_list|,
name|afterEffect
argument_list|,
name|normalization
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Distribution
name|distribution
range|:
name|DISTRIBUTIONS
control|)
block|{
for|for
control|(
name|Lambda
name|lambda
range|:
name|LAMBDAS
control|)
block|{
for|for
control|(
name|Normalization
name|normalization
range|:
name|NORMALIZATIONS
control|)
block|{
name|sims
operator|.
name|add
argument_list|(
operator|new
name|IBSimilarity
argument_list|(
name|distribution
argument_list|,
name|lambda
argument_list|,
name|normalization
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|sims
operator|.
name|add
argument_list|(
operator|new
name|LMDirichletSimilarity
argument_list|()
argument_list|)
expr_stmt|;
name|sims
operator|.
name|add
argument_list|(
operator|new
name|LMJelinekMercerSimilarity
argument_list|(
literal|0.1f
argument_list|)
argument_list|)
expr_stmt|;
name|sims
operator|.
name|add
argument_list|(
operator|new
name|LMJelinekMercerSimilarity
argument_list|(
literal|0.7f
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// ------------------------------- Unit tests --------------------------------
comment|/** The default number of documents in the unit tests. */
DECL|field|NUMBER_OF_DOCUMENTS
specifier|private
specifier|static
name|int
name|NUMBER_OF_DOCUMENTS
init|=
literal|100
decl_stmt|;
comment|/** The default total number of tokens in the field in the unit tests. */
DECL|field|NUMBER_OF_FIELD_TOKENS
specifier|private
specifier|static
name|long
name|NUMBER_OF_FIELD_TOKENS
init|=
literal|5000
decl_stmt|;
comment|/** The default average field length in the unit tests. */
DECL|field|AVG_FIELD_LENGTH
specifier|private
specifier|static
name|float
name|AVG_FIELD_LENGTH
init|=
literal|50
decl_stmt|;
comment|/** The default document frequency in the unit tests. */
DECL|field|DOC_FREQ
specifier|private
specifier|static
name|int
name|DOC_FREQ
init|=
literal|10
decl_stmt|;
comment|/**    * The default total number of occurrences of this term across all documents    * in the unit tests.    */
DECL|field|TOTAL_TERM_FREQ
specifier|private
specifier|static
name|long
name|TOTAL_TERM_FREQ
init|=
literal|70
decl_stmt|;
comment|/** The default tf in the unit tests. */
DECL|field|FREQ
specifier|private
specifier|static
name|float
name|FREQ
init|=
literal|7
decl_stmt|;
comment|/** The default document length in the unit tests. */
DECL|field|DOC_LEN
specifier|private
specifier|static
name|int
name|DOC_LEN
init|=
literal|40
decl_stmt|;
comment|/** Creates the default statistics object that the specific tests modify. */
DECL|method|createStats
specifier|private
name|BasicStats
name|createStats
parameter_list|()
block|{
name|BasicStats
name|stats
init|=
operator|new
name|BasicStats
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|stats
operator|.
name|setNumberOfDocuments
argument_list|(
name|NUMBER_OF_DOCUMENTS
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setNumberOfFieldTokens
argument_list|(
name|NUMBER_OF_FIELD_TOKENS
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setAvgFieldLength
argument_list|(
name|AVG_FIELD_LENGTH
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setDocFreq
argument_list|(
name|DOC_FREQ
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setTotalTermFreq
argument_list|(
name|TOTAL_TERM_FREQ
argument_list|)
expr_stmt|;
return|return
name|stats
return|;
block|}
DECL|method|toCollectionStats
specifier|private
name|CollectionStatistics
name|toCollectionStats
parameter_list|(
name|BasicStats
name|stats
parameter_list|)
block|{
return|return
operator|new
name|CollectionStatistics
argument_list|(
literal|"spoof"
argument_list|,
name|stats
operator|.
name|getNumberOfDocuments
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
name|stats
operator|.
name|getNumberOfFieldTokens
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|toTermStats
specifier|private
name|TermStatistics
name|toTermStats
parameter_list|(
name|BasicStats
name|stats
parameter_list|)
block|{
return|return
operator|new
name|TermStatistics
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"spoofyText"
argument_list|)
argument_list|,
name|stats
operator|.
name|getDocFreq
argument_list|()
argument_list|,
name|stats
operator|.
name|getTotalTermFreq
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * The generic test core called by all unit test methods. It calls the    * {@link SimilarityBase#score(BasicStats, float, int)} method of all    * Similarities in {@link #sims} and checks if the score is valid; i.e. it    * is a finite positive real number.    */
DECL|method|unitTestCore
specifier|private
name|void
name|unitTestCore
parameter_list|(
name|BasicStats
name|stats
parameter_list|,
name|float
name|freq
parameter_list|,
name|int
name|docLen
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|SimilarityBase
name|sim
range|:
name|sims
control|)
block|{
name|BasicStats
name|realStats
init|=
operator|(
name|BasicStats
operator|)
name|sim
operator|.
name|computeStats
argument_list|(
name|toCollectionStats
argument_list|(
name|stats
argument_list|)
argument_list|,
name|stats
operator|.
name|getTotalBoost
argument_list|()
argument_list|,
name|toTermStats
argument_list|(
name|stats
argument_list|)
argument_list|)
decl_stmt|;
name|float
name|score
init|=
name|sim
operator|.
name|score
argument_list|(
name|realStats
argument_list|,
name|freq
argument_list|,
name|docLen
argument_list|)
decl_stmt|;
name|float
name|explScore
init|=
name|sim
operator|.
name|explain
argument_list|(
name|realStats
argument_list|,
literal|1
argument_list|,
operator|new
name|Explanation
argument_list|(
name|freq
argument_list|,
literal|"freq"
argument_list|)
argument_list|,
name|docLen
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Score infinite: "
operator|+
name|sim
operator|.
name|toString
argument_list|()
argument_list|,
name|Float
operator|.
name|isInfinite
argument_list|(
name|score
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Score NaN: "
operator|+
name|sim
operator|.
name|toString
argument_list|()
argument_list|,
name|Float
operator|.
name|isNaN
argument_list|(
name|score
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Score negative: "
operator|+
name|sim
operator|.
name|toString
argument_list|()
argument_list|,
name|score
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"score() and explain() return different values: "
operator|+
name|sim
operator|.
name|toString
argument_list|()
argument_list|,
name|score
argument_list|,
name|explScore
argument_list|,
name|FLOAT_EPSILON
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Runs the unit test with the default statistics. */
DECL|method|testDefault
specifier|public
name|void
name|testDefault
parameter_list|()
throws|throws
name|IOException
block|{
name|unitTestCore
argument_list|(
name|createStats
argument_list|()
argument_list|,
name|FREQ
argument_list|,
name|DOC_LEN
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests correct behavior when    * {@code numberOfDocuments = numberOfFieldTokens}.    */
DECL|method|testSparseDocuments
specifier|public
name|void
name|testSparseDocuments
parameter_list|()
throws|throws
name|IOException
block|{
name|BasicStats
name|stats
init|=
name|createStats
argument_list|()
decl_stmt|;
name|stats
operator|.
name|setNumberOfFieldTokens
argument_list|(
name|stats
operator|.
name|getNumberOfDocuments
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setTotalTermFreq
argument_list|(
name|stats
operator|.
name|getDocFreq
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setAvgFieldLength
argument_list|(
operator|(
name|float
operator|)
name|stats
operator|.
name|getNumberOfFieldTokens
argument_list|()
operator|/
name|stats
operator|.
name|getNumberOfDocuments
argument_list|()
argument_list|)
expr_stmt|;
name|unitTestCore
argument_list|(
name|stats
argument_list|,
name|FREQ
argument_list|,
name|DOC_LEN
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests correct behavior when    * {@code numberOfDocuments> numberOfFieldTokens}.    */
DECL|method|testVerySparseDocuments
specifier|public
name|void
name|testVerySparseDocuments
parameter_list|()
throws|throws
name|IOException
block|{
name|BasicStats
name|stats
init|=
name|createStats
argument_list|()
decl_stmt|;
name|stats
operator|.
name|setNumberOfFieldTokens
argument_list|(
name|stats
operator|.
name|getNumberOfDocuments
argument_list|()
operator|*
literal|2
operator|/
literal|3
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setTotalTermFreq
argument_list|(
name|stats
operator|.
name|getDocFreq
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setAvgFieldLength
argument_list|(
operator|(
name|float
operator|)
name|stats
operator|.
name|getNumberOfFieldTokens
argument_list|()
operator|/
name|stats
operator|.
name|getNumberOfDocuments
argument_list|()
argument_list|)
expr_stmt|;
name|unitTestCore
argument_list|(
name|stats
argument_list|,
name|FREQ
argument_list|,
name|DOC_LEN
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests correct behavior when    * {@code NumberOfDocuments = 1}.    */
DECL|method|testOneDocument
specifier|public
name|void
name|testOneDocument
parameter_list|()
throws|throws
name|IOException
block|{
name|BasicStats
name|stats
init|=
name|createStats
argument_list|()
decl_stmt|;
name|stats
operator|.
name|setNumberOfDocuments
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setNumberOfFieldTokens
argument_list|(
name|DOC_LEN
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setAvgFieldLength
argument_list|(
name|DOC_LEN
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setDocFreq
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setTotalTermFreq
argument_list|(
operator|(
name|int
operator|)
name|FREQ
argument_list|)
expr_stmt|;
name|unitTestCore
argument_list|(
name|stats
argument_list|,
name|FREQ
argument_list|,
name|DOC_LEN
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests correct behavior when    * {@code docFreq = numberOfDocuments}.    */
DECL|method|testAllDocumentsRelevant
specifier|public
name|void
name|testAllDocumentsRelevant
parameter_list|()
throws|throws
name|IOException
block|{
name|BasicStats
name|stats
init|=
name|createStats
argument_list|()
decl_stmt|;
name|float
name|mult
init|=
operator|(
literal|0.0f
operator|+
name|stats
operator|.
name|getNumberOfDocuments
argument_list|()
operator|)
operator|/
name|stats
operator|.
name|getDocFreq
argument_list|()
decl_stmt|;
name|stats
operator|.
name|setTotalTermFreq
argument_list|(
call|(
name|int
call|)
argument_list|(
name|stats
operator|.
name|getTotalTermFreq
argument_list|()
operator|*
name|mult
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setDocFreq
argument_list|(
name|stats
operator|.
name|getNumberOfDocuments
argument_list|()
argument_list|)
expr_stmt|;
name|unitTestCore
argument_list|(
name|stats
argument_list|,
name|FREQ
argument_list|,
name|DOC_LEN
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests correct behavior when    * {@code docFreq> numberOfDocuments / 2}.    */
DECL|method|testMostDocumentsRelevant
specifier|public
name|void
name|testMostDocumentsRelevant
parameter_list|()
throws|throws
name|IOException
block|{
name|BasicStats
name|stats
init|=
name|createStats
argument_list|()
decl_stmt|;
name|float
name|mult
init|=
operator|(
literal|0.6f
operator|*
name|stats
operator|.
name|getNumberOfDocuments
argument_list|()
operator|)
operator|/
name|stats
operator|.
name|getDocFreq
argument_list|()
decl_stmt|;
name|stats
operator|.
name|setTotalTermFreq
argument_list|(
call|(
name|int
call|)
argument_list|(
name|stats
operator|.
name|getTotalTermFreq
argument_list|()
operator|*
name|mult
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setDocFreq
argument_list|(
call|(
name|int
call|)
argument_list|(
name|stats
operator|.
name|getNumberOfDocuments
argument_list|()
operator|*
literal|0.6
argument_list|)
argument_list|)
expr_stmt|;
name|unitTestCore
argument_list|(
name|stats
argument_list|,
name|FREQ
argument_list|,
name|DOC_LEN
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests correct behavior when    * {@code docFreq = 1}.    */
DECL|method|testOnlyOneRelevantDocument
specifier|public
name|void
name|testOnlyOneRelevantDocument
parameter_list|()
throws|throws
name|IOException
block|{
name|BasicStats
name|stats
init|=
name|createStats
argument_list|()
decl_stmt|;
name|stats
operator|.
name|setDocFreq
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setTotalTermFreq
argument_list|(
operator|(
name|int
operator|)
name|FREQ
operator|+
literal|3
argument_list|)
expr_stmt|;
name|unitTestCore
argument_list|(
name|stats
argument_list|,
name|FREQ
argument_list|,
name|DOC_LEN
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests correct behavior when    * {@code totalTermFreq = numberOfFieldTokens}.    */
DECL|method|testAllTermsRelevant
specifier|public
name|void
name|testAllTermsRelevant
parameter_list|()
throws|throws
name|IOException
block|{
name|BasicStats
name|stats
init|=
name|createStats
argument_list|()
decl_stmt|;
name|stats
operator|.
name|setTotalTermFreq
argument_list|(
name|stats
operator|.
name|getNumberOfFieldTokens
argument_list|()
argument_list|)
expr_stmt|;
name|unitTestCore
argument_list|(
name|stats
argument_list|,
name|DOC_LEN
argument_list|,
name|DOC_LEN
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setAvgFieldLength
argument_list|(
name|DOC_LEN
operator|+
literal|10
argument_list|)
expr_stmt|;
name|unitTestCore
argument_list|(
name|stats
argument_list|,
name|DOC_LEN
argument_list|,
name|DOC_LEN
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests correct behavior when    * {@code totalTermFreq> numberOfDocuments}.    */
DECL|method|testMoreTermsThanDocuments
specifier|public
name|void
name|testMoreTermsThanDocuments
parameter_list|()
throws|throws
name|IOException
block|{
name|BasicStats
name|stats
init|=
name|createStats
argument_list|()
decl_stmt|;
name|stats
operator|.
name|setTotalTermFreq
argument_list|(
name|stats
operator|.
name|getTotalTermFreq
argument_list|()
operator|+
name|stats
operator|.
name|getNumberOfDocuments
argument_list|()
argument_list|)
expr_stmt|;
name|unitTestCore
argument_list|(
name|stats
argument_list|,
literal|2
operator|*
name|FREQ
argument_list|,
name|DOC_LEN
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests correct behavior when    * {@code totalTermFreq = numberOfDocuments}.    */
DECL|method|testNumberOfTermsAsDocuments
specifier|public
name|void
name|testNumberOfTermsAsDocuments
parameter_list|()
throws|throws
name|IOException
block|{
name|BasicStats
name|stats
init|=
name|createStats
argument_list|()
decl_stmt|;
name|stats
operator|.
name|setTotalTermFreq
argument_list|(
name|stats
operator|.
name|getNumberOfDocuments
argument_list|()
argument_list|)
expr_stmt|;
name|unitTestCore
argument_list|(
name|stats
argument_list|,
name|FREQ
argument_list|,
name|DOC_LEN
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests correct behavior when {@code totalTermFreq = 1}.    */
DECL|method|testOneTerm
specifier|public
name|void
name|testOneTerm
parameter_list|()
throws|throws
name|IOException
block|{
name|BasicStats
name|stats
init|=
name|createStats
argument_list|()
decl_stmt|;
name|stats
operator|.
name|setDocFreq
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setTotalTermFreq
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|unitTestCore
argument_list|(
name|stats
argument_list|,
literal|1
argument_list|,
name|DOC_LEN
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests correct behavior when {@code totalTermFreq = freq}.    */
DECL|method|testOneRelevantDocument
specifier|public
name|void
name|testOneRelevantDocument
parameter_list|()
throws|throws
name|IOException
block|{
name|BasicStats
name|stats
init|=
name|createStats
argument_list|()
decl_stmt|;
name|stats
operator|.
name|setDocFreq
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setTotalTermFreq
argument_list|(
operator|(
name|int
operator|)
name|FREQ
argument_list|)
expr_stmt|;
name|unitTestCore
argument_list|(
name|stats
argument_list|,
name|FREQ
argument_list|,
name|DOC_LEN
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests correct behavior when {@code numberOfFieldTokens = freq}.    */
DECL|method|testAllTermsRelevantOnlyOneDocument
specifier|public
name|void
name|testAllTermsRelevantOnlyOneDocument
parameter_list|()
throws|throws
name|IOException
block|{
name|BasicStats
name|stats
init|=
name|createStats
argument_list|()
decl_stmt|;
name|stats
operator|.
name|setNumberOfDocuments
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setNumberOfFieldTokens
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setAvgFieldLength
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setDocFreq
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setTotalTermFreq
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|unitTestCore
argument_list|(
name|stats
argument_list|,
literal|50
argument_list|,
literal|50
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests correct behavior when there is only one document with a single term     * in the collection.    */
DECL|method|testOnlyOneTermOneDocument
specifier|public
name|void
name|testOnlyOneTermOneDocument
parameter_list|()
throws|throws
name|IOException
block|{
name|BasicStats
name|stats
init|=
name|createStats
argument_list|()
decl_stmt|;
name|stats
operator|.
name|setNumberOfDocuments
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setNumberOfFieldTokens
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setAvgFieldLength
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setDocFreq
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setTotalTermFreq
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|unitTestCore
argument_list|(
name|stats
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests correct behavior when there is only one term in the field, but    * more than one documents.    */
DECL|method|testOnlyOneTerm
specifier|public
name|void
name|testOnlyOneTerm
parameter_list|()
throws|throws
name|IOException
block|{
name|BasicStats
name|stats
init|=
name|createStats
argument_list|()
decl_stmt|;
name|stats
operator|.
name|setNumberOfFieldTokens
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setAvgFieldLength
argument_list|(
literal|1.0f
operator|/
name|stats
operator|.
name|getNumberOfDocuments
argument_list|()
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setDocFreq
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setTotalTermFreq
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|unitTestCore
argument_list|(
name|stats
argument_list|,
literal|1
argument_list|,
name|DOC_LEN
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests correct behavior when {@code avgFieldLength = docLen}.    */
DECL|method|testDocumentLengthAverage
specifier|public
name|void
name|testDocumentLengthAverage
parameter_list|()
throws|throws
name|IOException
block|{
name|BasicStats
name|stats
init|=
name|createStats
argument_list|()
decl_stmt|;
name|unitTestCore
argument_list|(
name|stats
argument_list|,
name|FREQ
argument_list|,
operator|(
name|int
operator|)
name|stats
operator|.
name|getAvgFieldLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// ---------------------------- Correctness tests ----------------------------
comment|/** Correctness test for the Dirichlet LM model. */
DECL|method|testLMDirichlet
specifier|public
name|void
name|testLMDirichlet
parameter_list|()
throws|throws
name|IOException
block|{
name|float
name|p
init|=
operator|(
name|FREQ
operator|+
literal|2000.0f
operator|*
operator|(
name|TOTAL_TERM_FREQ
operator|+
literal|1
operator|)
operator|/
operator|(
name|NUMBER_OF_FIELD_TOKENS
operator|+
literal|1.0f
operator|)
operator|)
operator|/
operator|(
name|DOC_LEN
operator|+
literal|2000.0f
operator|)
decl_stmt|;
name|float
name|a
init|=
literal|2000.0f
operator|/
operator|(
name|DOC_LEN
operator|+
literal|2000.0f
operator|)
decl_stmt|;
name|float
name|gold
init|=
call|(
name|float
call|)
argument_list|(
name|Math
operator|.
name|log
argument_list|(
name|p
operator|/
operator|(
name|a
operator|*
operator|(
name|TOTAL_TERM_FREQ
operator|+
literal|1
operator|)
operator|/
operator|(
name|NUMBER_OF_FIELD_TOKENS
operator|+
literal|1.0f
operator|)
operator|)
argument_list|)
operator|+
name|Math
operator|.
name|log
argument_list|(
name|a
argument_list|)
argument_list|)
decl_stmt|;
name|correctnessTestCore
argument_list|(
operator|new
name|LMDirichletSimilarity
argument_list|()
argument_list|,
name|gold
argument_list|)
expr_stmt|;
block|}
comment|/** Correctness test for the Jelinek-Mercer LM model. */
DECL|method|testLMJelinekMercer
specifier|public
name|void
name|testLMJelinekMercer
parameter_list|()
throws|throws
name|IOException
block|{
name|float
name|p
init|=
operator|(
literal|1
operator|-
literal|0.1f
operator|)
operator|*
name|FREQ
operator|/
name|DOC_LEN
operator|+
literal|0.1f
operator|*
operator|(
name|TOTAL_TERM_FREQ
operator|+
literal|1
operator|)
operator|/
operator|(
name|NUMBER_OF_FIELD_TOKENS
operator|+
literal|1.0f
operator|)
decl_stmt|;
name|float
name|gold
init|=
call|(
name|float
call|)
argument_list|(
name|Math
operator|.
name|log
argument_list|(
name|p
operator|/
operator|(
literal|0.1f
operator|*
operator|(
name|TOTAL_TERM_FREQ
operator|+
literal|1
operator|)
operator|/
operator|(
name|NUMBER_OF_FIELD_TOKENS
operator|+
literal|1.0f
operator|)
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|correctnessTestCore
argument_list|(
operator|new
name|LMJelinekMercerSimilarity
argument_list|(
literal|0.1f
argument_list|)
argument_list|,
name|gold
argument_list|)
expr_stmt|;
block|}
comment|/**    * Correctness test for the LL IB model with DF-based lambda and    * no normalization.    */
DECL|method|testLLForIB
specifier|public
name|void
name|testLLForIB
parameter_list|()
throws|throws
name|IOException
block|{
name|SimilarityBase
name|sim
init|=
operator|new
name|IBSimilarity
argument_list|(
operator|new
name|DistributionLL
argument_list|()
argument_list|,
operator|new
name|LambdaDF
argument_list|()
argument_list|,
operator|new
name|Normalization
operator|.
name|NoNormalization
argument_list|()
argument_list|)
decl_stmt|;
name|correctnessTestCore
argument_list|(
name|sim
argument_list|,
literal|4.178574562072754f
argument_list|)
expr_stmt|;
block|}
comment|/**    * Correctness test for the SPL IB model with TTF-based lambda and    * no normalization.    */
DECL|method|testSPLForIB
specifier|public
name|void
name|testSPLForIB
parameter_list|()
throws|throws
name|IOException
block|{
name|SimilarityBase
name|sim
init|=
operator|new
name|IBSimilarity
argument_list|(
operator|new
name|DistributionSPL
argument_list|()
argument_list|,
operator|new
name|LambdaTTF
argument_list|()
argument_list|,
operator|new
name|Normalization
operator|.
name|NoNormalization
argument_list|()
argument_list|)
decl_stmt|;
name|correctnessTestCore
argument_list|(
name|sim
argument_list|,
literal|2.2387237548828125f
argument_list|)
expr_stmt|;
block|}
comment|/** Correctness test for the PL2 DFR model. */
DECL|method|testPL2
specifier|public
name|void
name|testPL2
parameter_list|()
throws|throws
name|IOException
block|{
name|SimilarityBase
name|sim
init|=
operator|new
name|DFRSimilarity
argument_list|(
operator|new
name|BasicModelP
argument_list|()
argument_list|,
operator|new
name|AfterEffectL
argument_list|()
argument_list|,
operator|new
name|NormalizationH2
argument_list|()
argument_list|)
decl_stmt|;
name|float
name|tfn
init|=
call|(
name|float
call|)
argument_list|(
name|FREQ
operator|*
name|SimilarityBase
operator|.
name|log2
argument_list|(
literal|1
operator|+
name|AVG_FIELD_LENGTH
operator|/
name|DOC_LEN
argument_list|)
argument_list|)
decl_stmt|;
comment|// 8.1894750101
name|float
name|l
init|=
literal|1.0f
operator|/
operator|(
name|tfn
operator|+
literal|1.0f
operator|)
decl_stmt|;
comment|// 0.108820144666
name|float
name|lambda
init|=
operator|(
literal|1.0f
operator|+
name|TOTAL_TERM_FREQ
operator|)
operator|/
operator|(
literal|1f
operator|+
name|NUMBER_OF_DOCUMENTS
operator|)
decl_stmt|;
comment|// 0.7029703
name|float
name|p
init|=
call|(
name|float
call|)
argument_list|(
name|tfn
operator|*
name|SimilarityBase
operator|.
name|log2
argument_list|(
name|tfn
operator|/
name|lambda
argument_list|)
operator|+
operator|(
name|lambda
operator|+
literal|1
operator|/
operator|(
literal|12
operator|*
name|tfn
operator|)
operator|-
name|tfn
operator|)
operator|*
name|SimilarityBase
operator|.
name|log2
argument_list|(
name|Math
operator|.
name|E
argument_list|)
operator|+
literal|0.5
operator|*
name|SimilarityBase
operator|.
name|log2
argument_list|(
literal|2
operator|*
name|Math
operator|.
name|PI
operator|*
name|tfn
argument_list|)
argument_list|)
decl_stmt|;
comment|// 21.065619
name|float
name|gold
init|=
name|l
operator|*
name|p
decl_stmt|;
comment|// 2.2923636
name|correctnessTestCore
argument_list|(
name|sim
argument_list|,
name|gold
argument_list|)
expr_stmt|;
block|}
comment|/** Correctness test for the IneB2 DFR model. */
DECL|method|testIneB2
specifier|public
name|void
name|testIneB2
parameter_list|()
throws|throws
name|IOException
block|{
name|SimilarityBase
name|sim
init|=
operator|new
name|DFRSimilarity
argument_list|(
operator|new
name|BasicModelIne
argument_list|()
argument_list|,
operator|new
name|AfterEffectB
argument_list|()
argument_list|,
operator|new
name|NormalizationH2
argument_list|()
argument_list|)
decl_stmt|;
name|correctnessTestCore
argument_list|(
name|sim
argument_list|,
literal|5.747603416442871f
argument_list|)
expr_stmt|;
block|}
comment|/** Correctness test for the GL1 DFR model. */
DECL|method|testGL1
specifier|public
name|void
name|testGL1
parameter_list|()
throws|throws
name|IOException
block|{
name|SimilarityBase
name|sim
init|=
operator|new
name|DFRSimilarity
argument_list|(
operator|new
name|BasicModelG
argument_list|()
argument_list|,
operator|new
name|AfterEffectL
argument_list|()
argument_list|,
operator|new
name|NormalizationH1
argument_list|()
argument_list|)
decl_stmt|;
name|correctnessTestCore
argument_list|(
name|sim
argument_list|,
literal|1.6390540599822998f
argument_list|)
expr_stmt|;
block|}
comment|/** Correctness test for the BEB1 DFR model. */
DECL|method|testBEB1
specifier|public
name|void
name|testBEB1
parameter_list|()
throws|throws
name|IOException
block|{
name|SimilarityBase
name|sim
init|=
operator|new
name|DFRSimilarity
argument_list|(
operator|new
name|BasicModelBE
argument_list|()
argument_list|,
operator|new
name|AfterEffectB
argument_list|()
argument_list|,
operator|new
name|NormalizationH1
argument_list|()
argument_list|)
decl_stmt|;
name|float
name|tfn
init|=
name|FREQ
operator|*
name|AVG_FIELD_LENGTH
operator|/
name|DOC_LEN
decl_stmt|;
comment|// 8.75
name|float
name|b
init|=
operator|(
name|TOTAL_TERM_FREQ
operator|+
literal|1
operator|+
literal|1
operator|)
operator|/
operator|(
operator|(
name|DOC_FREQ
operator|+
literal|1
operator|)
operator|*
operator|(
name|tfn
operator|+
literal|1
operator|)
operator|)
decl_stmt|;
comment|// 0.67132866
name|double
name|f
init|=
name|TOTAL_TERM_FREQ
operator|+
literal|1
operator|+
name|tfn
decl_stmt|;
name|double
name|n
init|=
name|f
operator|+
name|NUMBER_OF_DOCUMENTS
decl_stmt|;
name|double
name|n1
init|=
name|n
operator|+
name|f
operator|-
literal|1
decl_stmt|;
comment|// 258.5
name|double
name|m1
init|=
name|n
operator|+
name|f
operator|-
name|tfn
operator|-
literal|2
decl_stmt|;
comment|// 248.75
name|double
name|n2
init|=
name|f
decl_stmt|;
comment|// 79.75
name|double
name|m2
init|=
name|f
operator|-
name|tfn
decl_stmt|;
comment|// 71.0
name|float
name|be
init|=
call|(
name|float
call|)
argument_list|(
operator|-
name|SimilarityBase
operator|.
name|log2
argument_list|(
name|n
operator|-
literal|1
argument_list|)
operator|-
name|SimilarityBase
operator|.
name|log2
argument_list|(
name|Math
operator|.
name|E
argument_list|)
operator|+
comment|// -8.924494472554715
operator|(
operator|(
name|m1
operator|+
literal|0.5f
operator|)
operator|*
name|SimilarityBase
operator|.
name|log2
argument_list|(
name|n1
operator|/
name|m1
argument_list|)
operator|+
operator|(
name|n1
operator|-
name|m1
operator|)
operator|*
name|SimilarityBase
operator|.
name|log2
argument_list|(
name|n1
argument_list|)
operator|)
operator|-
comment|// 91.9620374903885
operator|(
operator|(
name|m2
operator|+
literal|0.5f
operator|)
operator|*
name|SimilarityBase
operator|.
name|log2
argument_list|(
name|n2
operator|/
name|m2
argument_list|)
operator|+
operator|(
name|n2
operator|-
name|m2
operator|)
operator|*
name|SimilarityBase
operator|.
name|log2
argument_list|(
name|n2
argument_list|)
operator|)
argument_list|)
decl_stmt|;
comment|// 67.26544321004599
comment|// 15.7720995
name|float
name|gold
init|=
name|b
operator|*
name|be
decl_stmt|;
comment|// 10.588263
name|correctnessTestCore
argument_list|(
name|sim
argument_list|,
name|gold
argument_list|)
expr_stmt|;
block|}
comment|/** Correctness test for the D DFR model (basic model only). */
DECL|method|testD
specifier|public
name|void
name|testD
parameter_list|()
throws|throws
name|IOException
block|{
name|SimilarityBase
name|sim
init|=
operator|new
name|DFRSimilarity
argument_list|(
operator|new
name|BasicModelD
argument_list|()
argument_list|,
operator|new
name|AfterEffect
operator|.
name|NoAfterEffect
argument_list|()
argument_list|,
operator|new
name|Normalization
operator|.
name|NoNormalization
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|totalTermFreqNorm
init|=
name|TOTAL_TERM_FREQ
operator|+
name|FREQ
operator|+
literal|1
decl_stmt|;
name|double
name|p
init|=
literal|1.0
operator|/
operator|(
name|NUMBER_OF_DOCUMENTS
operator|+
literal|1
operator|)
decl_stmt|;
comment|// 0.009900990099009901
name|double
name|phi
init|=
name|FREQ
operator|/
name|totalTermFreqNorm
decl_stmt|;
comment|// 0.08974358974358974
name|double
name|D
init|=
name|phi
operator|*
name|SimilarityBase
operator|.
name|log2
argument_list|(
name|phi
operator|/
name|p
argument_list|)
operator|+
comment|// 0.17498542370019005
operator|(
literal|1
operator|-
name|phi
operator|)
operator|*
name|SimilarityBase
operator|.
name|log2
argument_list|(
operator|(
literal|1
operator|-
name|phi
operator|)
operator|/
operator|(
literal|1
operator|-
name|p
operator|)
argument_list|)
decl_stmt|;
name|float
name|gold
init|=
call|(
name|float
call|)
argument_list|(
name|totalTermFreqNorm
operator|*
name|D
operator|+
literal|0.5
operator|*
name|SimilarityBase
operator|.
name|log2
argument_list|(
literal|1
operator|+
literal|2
operator|*
name|Math
operator|.
name|PI
operator|*
name|FREQ
operator|*
operator|(
literal|1
operator|-
name|phi
operator|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// 16.328257
name|correctnessTestCore
argument_list|(
name|sim
argument_list|,
name|gold
argument_list|)
expr_stmt|;
block|}
comment|/** Correctness test for the In2 DFR model with no aftereffect. */
DECL|method|testIn2
specifier|public
name|void
name|testIn2
parameter_list|()
throws|throws
name|IOException
block|{
name|SimilarityBase
name|sim
init|=
operator|new
name|DFRSimilarity
argument_list|(
operator|new
name|BasicModelIn
argument_list|()
argument_list|,
operator|new
name|AfterEffect
operator|.
name|NoAfterEffect
argument_list|()
argument_list|,
operator|new
name|NormalizationH2
argument_list|()
argument_list|)
decl_stmt|;
name|float
name|tfn
init|=
call|(
name|float
call|)
argument_list|(
name|FREQ
operator|*
name|SimilarityBase
operator|.
name|log2
argument_list|(
comment|// 8.1894750101
literal|1
operator|+
name|AVG_FIELD_LENGTH
operator|/
name|DOC_LEN
argument_list|)
argument_list|)
decl_stmt|;
name|float
name|gold
init|=
call|(
name|float
call|)
argument_list|(
name|tfn
operator|*
name|SimilarityBase
operator|.
name|log2
argument_list|(
comment|// 26.7459577898
operator|(
name|NUMBER_OF_DOCUMENTS
operator|+
literal|1
operator|)
operator|/
operator|(
name|DOC_FREQ
operator|+
literal|0.5
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|correctnessTestCore
argument_list|(
name|sim
argument_list|,
name|gold
argument_list|)
expr_stmt|;
block|}
comment|/** Correctness test for the IFB DFR model with no normalization. */
DECL|method|testIFB
specifier|public
name|void
name|testIFB
parameter_list|()
throws|throws
name|IOException
block|{
name|SimilarityBase
name|sim
init|=
operator|new
name|DFRSimilarity
argument_list|(
operator|new
name|BasicModelIF
argument_list|()
argument_list|,
operator|new
name|AfterEffectB
argument_list|()
argument_list|,
operator|new
name|Normalization
operator|.
name|NoNormalization
argument_list|()
argument_list|)
decl_stmt|;
name|float
name|B
init|=
operator|(
name|TOTAL_TERM_FREQ
operator|+
literal|1
operator|+
literal|1
operator|)
operator|/
operator|(
operator|(
name|DOC_FREQ
operator|+
literal|1
operator|)
operator|*
operator|(
name|FREQ
operator|+
literal|1
operator|)
operator|)
decl_stmt|;
comment|// 0.8875
name|float
name|IF
init|=
call|(
name|float
call|)
argument_list|(
name|FREQ
operator|*
name|SimilarityBase
operator|.
name|log2
argument_list|(
comment|// 8.97759389642
literal|1
operator|+
operator|(
name|NUMBER_OF_DOCUMENTS
operator|+
literal|1
operator|)
operator|/
operator|(
name|TOTAL_TERM_FREQ
operator|+
literal|0.5
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|float
name|gold
init|=
name|B
operator|*
name|IF
decl_stmt|;
comment|// 7.96761458307
name|correctnessTestCore
argument_list|(
name|sim
argument_list|,
name|gold
argument_list|)
expr_stmt|;
block|}
comment|/**    * The generic test core called by all correctness test methods. It calls the    * {@link SimilarityBase#score(BasicStats, float, int)} method of all    * Similarities in {@link #sims} and compares the score against the manually    * computed {@code gold}.    */
DECL|method|correctnessTestCore
specifier|private
name|void
name|correctnessTestCore
parameter_list|(
name|SimilarityBase
name|sim
parameter_list|,
name|float
name|gold
parameter_list|)
throws|throws
name|IOException
block|{
name|BasicStats
name|stats
init|=
name|createStats
argument_list|()
decl_stmt|;
name|BasicStats
name|realStats
init|=
operator|(
name|BasicStats
operator|)
name|sim
operator|.
name|computeStats
argument_list|(
name|toCollectionStats
argument_list|(
name|stats
argument_list|)
argument_list|,
name|stats
operator|.
name|getTotalBoost
argument_list|()
argument_list|,
name|toTermStats
argument_list|(
name|stats
argument_list|)
argument_list|)
decl_stmt|;
name|float
name|score
init|=
name|sim
operator|.
name|score
argument_list|(
name|realStats
argument_list|,
name|FREQ
argument_list|,
name|DOC_LEN
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sim
operator|.
name|toString
argument_list|()
operator|+
literal|" score not correct."
argument_list|,
name|gold
argument_list|,
name|score
argument_list|,
name|FLOAT_EPSILON
argument_list|)
expr_stmt|;
block|}
comment|// ---------------------------- Integration tests ----------------------------
comment|/** The "collection" for the integration tests. */
DECL|field|docs
name|String
index|[]
name|docs
init|=
operator|new
name|String
index|[]
block|{
literal|"Tiger, tiger burning bright   In the forest of the night   What immortal hand or eye   Could frame thy fearful symmetry ?"
block|,
literal|"In what distant depths or skies   Burnt the fire of thine eyes ?   On what wings dare he aspire ?   What the hands the seize the fire ?"
block|,
literal|"And what shoulder and what art   Could twist the sinews of thy heart ?   And when thy heart began to beat What dread hand ? And what dread feet ?"
block|,
literal|"What the hammer? What the chain ?   In what furnace was thy brain ?   What the anvil ? And what dread grasp   Dare its deadly terrors clasp ?"
block|,
literal|"And when the stars threw down their spears   And water'd heaven with their tear   Did he smile his work to see ?   Did he, who made the lamb, made thee ?"
block|,
literal|"Tiger, tiger burning bright   In the forest of the night   What immortal hand or eye   Dare frame thy fearful symmetry ?"
block|,
literal|"Cruelty has a human heart   And jealousy a human face   Terror the human form divine   And Secrecy the human dress ."
block|,
literal|"The human dress is forg'd iron   The human form a fiery forge   The human face a furnace seal'd   The human heart its fiery gorge ."
block|}
decl_stmt|;
comment|/**    * Tests whether all similarities return three documents for the query word    * "heart".    */
DECL|method|testHeartList
specifier|public
name|void
name|testHeartList
parameter_list|()
throws|throws
name|IOException
block|{
name|Query
name|q
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_BODY
argument_list|,
literal|"heart"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|SimilarityBase
name|sim
range|:
name|sims
control|)
block|{
name|searcher
operator|.
name|setSimilarityProvider
argument_list|(
operator|new
name|BasicSimilarityProvider
argument_list|(
name|sim
argument_list|)
argument_list|)
expr_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Failed: "
operator|+
name|sim
operator|.
name|toString
argument_list|()
argument_list|,
literal|3
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Test whether all similarities return document 3 before documents 7 and 8. */
DECL|method|testHeartRanking
specifier|public
name|void
name|testHeartRanking
parameter_list|()
throws|throws
name|IOException
block|{
name|assumeFalse
argument_list|(
literal|"PreFlex codec does not support the stats necessary for this test!"
argument_list|,
literal|"Lucene3x"
operator|.
name|equals
argument_list|(
name|Codec
operator|.
name|getDefault
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|q
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD_BODY
argument_list|,
literal|"heart"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|SimilarityBase
name|sim
range|:
name|sims
control|)
block|{
name|searcher
operator|.
name|setSimilarityProvider
argument_list|(
operator|new
name|BasicSimilarityProvider
argument_list|(
name|sim
argument_list|)
argument_list|)
expr_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Failed: "
operator|+
name|sim
operator|.
name|toString
argument_list|()
argument_list|,
literal|"2"
argument_list|,
name|reader
operator|.
name|document
argument_list|(
name|topDocs
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
name|FIELD_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
