begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|Collator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_comment
comment|/**  * A basic 'positive' Unit test class for the TermRangeFilter class.  *   *<p>  * NOTE: at the moment, this class only tests for 'positive' results, it does  * not verify the results to ensure there are no 'false positives', nor does it  * adequately test 'negative' results. It also does not test that garbage in  * results in an Exception.  */
end_comment
begin_class
DECL|class|TestTermRangeFilter
specifier|public
class|class
name|TestTermRangeFilter
extends|extends
name|BaseTestRangeFilter
block|{
DECL|method|testRangeFilterId
specifier|public
name|void
name|testRangeFilterId
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexReader
name|reader
init|=
name|signedIndexReader
decl_stmt|;
name|IndexSearcher
name|search
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|int
name|medId
init|=
operator|(
operator|(
name|maxId
operator|-
name|minId
operator|)
operator|/
literal|2
operator|)
decl_stmt|;
name|String
name|minIP
init|=
name|pad
argument_list|(
name|minId
argument_list|)
decl_stmt|;
name|String
name|maxIP
init|=
name|pad
argument_list|(
name|maxId
argument_list|)
decl_stmt|;
name|String
name|medIP
init|=
name|pad
argument_list|(
name|medId
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
name|reader
operator|.
name|numDocs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"num of docs"
argument_list|,
name|numDocs
argument_list|,
literal|1
operator|+
name|maxId
operator|-
name|minId
argument_list|)
expr_stmt|;
name|ScoreDoc
index|[]
name|result
decl_stmt|;
name|Query
name|q
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"body"
argument_list|)
argument_list|)
decl_stmt|;
comment|// test id, bounded on both ends
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|minIP
argument_list|,
name|maxIP
argument_list|,
name|T
argument_list|,
name|T
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"find all"
argument_list|,
name|numDocs
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|minIP
argument_list|,
name|maxIP
argument_list|,
name|T
argument_list|,
name|F
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"all but last"
argument_list|,
name|numDocs
operator|-
literal|1
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|minIP
argument_list|,
name|maxIP
argument_list|,
name|F
argument_list|,
name|T
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"all but first"
argument_list|,
name|numDocs
operator|-
literal|1
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|minIP
argument_list|,
name|maxIP
argument_list|,
name|F
argument_list|,
name|F
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"all but ends"
argument_list|,
name|numDocs
operator|-
literal|2
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|medIP
argument_list|,
name|maxIP
argument_list|,
name|T
argument_list|,
name|T
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"med and up"
argument_list|,
literal|1
operator|+
name|maxId
operator|-
name|medId
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|minIP
argument_list|,
name|medIP
argument_list|,
name|T
argument_list|,
name|T
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"up to med"
argument_list|,
literal|1
operator|+
name|medId
operator|-
name|minId
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// unbounded id
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|minIP
argument_list|,
literal|null
argument_list|,
name|T
argument_list|,
name|F
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"min and up"
argument_list|,
name|numDocs
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
literal|null
argument_list|,
name|maxIP
argument_list|,
name|F
argument_list|,
name|T
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max and down"
argument_list|,
name|numDocs
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|minIP
argument_list|,
literal|null
argument_list|,
name|F
argument_list|,
name|F
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"not min, but up"
argument_list|,
name|numDocs
operator|-
literal|1
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
literal|null
argument_list|,
name|maxIP
argument_list|,
name|F
argument_list|,
name|F
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"not max, but down"
argument_list|,
name|numDocs
operator|-
literal|1
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|medIP
argument_list|,
name|maxIP
argument_list|,
name|T
argument_list|,
name|F
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"med and up, not max"
argument_list|,
name|maxId
operator|-
name|medId
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|minIP
argument_list|,
name|medIP
argument_list|,
name|F
argument_list|,
name|T
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"not min, up to med"
argument_list|,
name|medId
operator|-
name|minId
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// very small sets
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|minIP
argument_list|,
name|minIP
argument_list|,
name|F
argument_list|,
name|F
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"min,min,F,F"
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|medIP
argument_list|,
name|medIP
argument_list|,
name|F
argument_list|,
name|F
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"med,med,F,F"
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|maxIP
argument_list|,
name|maxIP
argument_list|,
name|F
argument_list|,
name|F
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max,max,F,F"
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|minIP
argument_list|,
name|minIP
argument_list|,
name|T
argument_list|,
name|T
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"min,min,T,T"
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
literal|null
argument_list|,
name|minIP
argument_list|,
name|F
argument_list|,
name|T
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nul,min,F,T"
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|maxIP
argument_list|,
name|maxIP
argument_list|,
name|T
argument_list|,
name|T
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max,max,T,T"
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|maxIP
argument_list|,
literal|null
argument_list|,
name|T
argument_list|,
name|F
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max,nul,T,T"
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|medIP
argument_list|,
name|medIP
argument_list|,
name|T
argument_list|,
name|T
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"med,med,T,T"
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|testRangeFilterIdCollating
specifier|public
name|void
name|testRangeFilterIdCollating
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexReader
name|reader
init|=
name|signedIndexReader
decl_stmt|;
name|IndexSearcher
name|search
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|Collator
name|c
init|=
name|Collator
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
name|int
name|medId
init|=
operator|(
operator|(
name|maxId
operator|-
name|minId
operator|)
operator|/
literal|2
operator|)
decl_stmt|;
name|String
name|minIP
init|=
name|pad
argument_list|(
name|minId
argument_list|)
decl_stmt|;
name|String
name|maxIP
init|=
name|pad
argument_list|(
name|maxId
argument_list|)
decl_stmt|;
name|String
name|medIP
init|=
name|pad
argument_list|(
name|medId
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
name|reader
operator|.
name|numDocs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"num of docs"
argument_list|,
name|numDocs
argument_list|,
literal|1
operator|+
name|maxId
operator|-
name|minId
argument_list|)
expr_stmt|;
name|Query
name|q
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"body"
argument_list|)
argument_list|)
decl_stmt|;
comment|// test id, bounded on both ends
name|int
name|numHits
init|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|minIP
argument_list|,
name|maxIP
argument_list|,
name|T
argument_list|,
name|T
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
decl_stmt|;
name|assertEquals
argument_list|(
literal|"find all"
argument_list|,
name|numDocs
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|minIP
argument_list|,
name|maxIP
argument_list|,
name|T
argument_list|,
name|F
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"all but last"
argument_list|,
name|numDocs
operator|-
literal|1
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|minIP
argument_list|,
name|maxIP
argument_list|,
name|F
argument_list|,
name|T
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"all but first"
argument_list|,
name|numDocs
operator|-
literal|1
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|minIP
argument_list|,
name|maxIP
argument_list|,
name|F
argument_list|,
name|F
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"all but ends"
argument_list|,
name|numDocs
operator|-
literal|2
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|medIP
argument_list|,
name|maxIP
argument_list|,
name|T
argument_list|,
name|T
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"med and up"
argument_list|,
literal|1
operator|+
name|maxId
operator|-
name|medId
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|minIP
argument_list|,
name|medIP
argument_list|,
name|T
argument_list|,
name|T
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"up to med"
argument_list|,
literal|1
operator|+
name|medId
operator|-
name|minId
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
comment|// unbounded id
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|minIP
argument_list|,
literal|null
argument_list|,
name|T
argument_list|,
name|F
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"min and up"
argument_list|,
name|numDocs
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
literal|null
argument_list|,
name|maxIP
argument_list|,
name|F
argument_list|,
name|T
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max and down"
argument_list|,
name|numDocs
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|minIP
argument_list|,
literal|null
argument_list|,
name|F
argument_list|,
name|F
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"not min, but up"
argument_list|,
name|numDocs
operator|-
literal|1
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
literal|null
argument_list|,
name|maxIP
argument_list|,
name|F
argument_list|,
name|F
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"not max, but down"
argument_list|,
name|numDocs
operator|-
literal|1
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|medIP
argument_list|,
name|maxIP
argument_list|,
name|T
argument_list|,
name|F
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"med and up, not max"
argument_list|,
name|maxId
operator|-
name|medId
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|minIP
argument_list|,
name|medIP
argument_list|,
name|F
argument_list|,
name|T
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"not min, up to med"
argument_list|,
name|medId
operator|-
name|minId
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
comment|// very small sets
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|minIP
argument_list|,
name|minIP
argument_list|,
name|F
argument_list|,
name|F
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"min,min,F,F"
argument_list|,
literal|0
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|medIP
argument_list|,
name|medIP
argument_list|,
name|F
argument_list|,
name|F
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"med,med,F,F"
argument_list|,
literal|0
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|maxIP
argument_list|,
name|maxIP
argument_list|,
name|F
argument_list|,
name|F
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max,max,F,F"
argument_list|,
literal|0
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|minIP
argument_list|,
name|minIP
argument_list|,
name|T
argument_list|,
name|T
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"min,min,T,T"
argument_list|,
literal|1
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
literal|null
argument_list|,
name|minIP
argument_list|,
name|F
argument_list|,
name|T
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nul,min,F,T"
argument_list|,
literal|1
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|maxIP
argument_list|,
name|maxIP
argument_list|,
name|T
argument_list|,
name|T
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max,max,T,T"
argument_list|,
literal|1
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|maxIP
argument_list|,
literal|null
argument_list|,
name|T
argument_list|,
name|F
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max,nul,T,T"
argument_list|,
literal|1
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"id"
argument_list|,
name|medIP
argument_list|,
name|medIP
argument_list|,
name|T
argument_list|,
name|T
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"med,med,T,T"
argument_list|,
literal|1
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
block|}
DECL|method|testRangeFilterRand
specifier|public
name|void
name|testRangeFilterRand
parameter_list|()
throws|throws
name|IOException
block|{
name|IndexReader
name|reader
init|=
name|signedIndexReader
decl_stmt|;
name|IndexSearcher
name|search
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|String
name|minRP
init|=
name|pad
argument_list|(
name|signedIndexDir
operator|.
name|minR
argument_list|)
decl_stmt|;
name|String
name|maxRP
init|=
name|pad
argument_list|(
name|signedIndexDir
operator|.
name|maxR
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
name|reader
operator|.
name|numDocs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"num of docs"
argument_list|,
name|numDocs
argument_list|,
literal|1
operator|+
name|maxId
operator|-
name|minId
argument_list|)
expr_stmt|;
name|ScoreDoc
index|[]
name|result
decl_stmt|;
name|Query
name|q
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"body"
argument_list|)
argument_list|)
decl_stmt|;
comment|// test extremes, bounded on both ends
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"rand"
argument_list|,
name|minRP
argument_list|,
name|maxRP
argument_list|,
name|T
argument_list|,
name|T
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"find all"
argument_list|,
name|numDocs
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"rand"
argument_list|,
name|minRP
argument_list|,
name|maxRP
argument_list|,
name|T
argument_list|,
name|F
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"all but biggest"
argument_list|,
name|numDocs
operator|-
literal|1
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"rand"
argument_list|,
name|minRP
argument_list|,
name|maxRP
argument_list|,
name|F
argument_list|,
name|T
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"all but smallest"
argument_list|,
name|numDocs
operator|-
literal|1
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"rand"
argument_list|,
name|minRP
argument_list|,
name|maxRP
argument_list|,
name|F
argument_list|,
name|F
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"all but extremes"
argument_list|,
name|numDocs
operator|-
literal|2
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// unbounded
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"rand"
argument_list|,
name|minRP
argument_list|,
literal|null
argument_list|,
name|T
argument_list|,
name|F
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"smallest and up"
argument_list|,
name|numDocs
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"rand"
argument_list|,
literal|null
argument_list|,
name|maxRP
argument_list|,
name|F
argument_list|,
name|T
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"biggest and down"
argument_list|,
name|numDocs
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"rand"
argument_list|,
name|minRP
argument_list|,
literal|null
argument_list|,
name|F
argument_list|,
name|F
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"not smallest, but up"
argument_list|,
name|numDocs
operator|-
literal|1
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"rand"
argument_list|,
literal|null
argument_list|,
name|maxRP
argument_list|,
name|F
argument_list|,
name|F
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"not biggest, but down"
argument_list|,
name|numDocs
operator|-
literal|1
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// very small sets
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"rand"
argument_list|,
name|minRP
argument_list|,
name|minRP
argument_list|,
name|F
argument_list|,
name|F
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"min,min,F,F"
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"rand"
argument_list|,
name|maxRP
argument_list|,
name|maxRP
argument_list|,
name|F
argument_list|,
name|F
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max,max,F,F"
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"rand"
argument_list|,
name|minRP
argument_list|,
name|minRP
argument_list|,
name|T
argument_list|,
name|T
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"min,min,T,T"
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"rand"
argument_list|,
literal|null
argument_list|,
name|minRP
argument_list|,
name|F
argument_list|,
name|T
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nul,min,F,T"
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"rand"
argument_list|,
name|maxRP
argument_list|,
name|maxRP
argument_list|,
name|T
argument_list|,
name|T
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max,max,T,T"
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"rand"
argument_list|,
name|maxRP
argument_list|,
literal|null
argument_list|,
name|T
argument_list|,
name|F
argument_list|)
argument_list|,
name|numDocs
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max,nul,T,T"
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|testRangeFilterRandCollating
specifier|public
name|void
name|testRangeFilterRandCollating
parameter_list|()
throws|throws
name|IOException
block|{
comment|// using the unsigned index because collation seems to ignore hyphens
name|IndexReader
name|reader
init|=
name|unsignedIndexReader
decl_stmt|;
name|IndexSearcher
name|search
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|Collator
name|c
init|=
name|Collator
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
name|String
name|minRP
init|=
name|pad
argument_list|(
name|unsignedIndexDir
operator|.
name|minR
argument_list|)
decl_stmt|;
name|String
name|maxRP
init|=
name|pad
argument_list|(
name|unsignedIndexDir
operator|.
name|maxR
argument_list|)
decl_stmt|;
name|int
name|numDocs
init|=
name|reader
operator|.
name|numDocs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"num of docs"
argument_list|,
name|numDocs
argument_list|,
literal|1
operator|+
name|maxId
operator|-
name|minId
argument_list|)
expr_stmt|;
name|Query
name|q
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"body"
argument_list|)
argument_list|)
decl_stmt|;
comment|// test extremes, bounded on both ends
name|int
name|numHits
init|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"rand"
argument_list|,
name|minRP
argument_list|,
name|maxRP
argument_list|,
name|T
argument_list|,
name|T
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
decl_stmt|;
name|assertEquals
argument_list|(
literal|"find all"
argument_list|,
name|numDocs
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"rand"
argument_list|,
name|minRP
argument_list|,
name|maxRP
argument_list|,
name|T
argument_list|,
name|F
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"all but biggest"
argument_list|,
name|numDocs
operator|-
literal|1
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"rand"
argument_list|,
name|minRP
argument_list|,
name|maxRP
argument_list|,
name|F
argument_list|,
name|T
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"all but smallest"
argument_list|,
name|numDocs
operator|-
literal|1
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"rand"
argument_list|,
name|minRP
argument_list|,
name|maxRP
argument_list|,
name|F
argument_list|,
name|F
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"all but extremes"
argument_list|,
name|numDocs
operator|-
literal|2
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
comment|// unbounded
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"rand"
argument_list|,
name|minRP
argument_list|,
literal|null
argument_list|,
name|T
argument_list|,
name|F
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"smallest and up"
argument_list|,
name|numDocs
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"rand"
argument_list|,
literal|null
argument_list|,
name|maxRP
argument_list|,
name|F
argument_list|,
name|T
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"biggest and down"
argument_list|,
name|numDocs
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"rand"
argument_list|,
name|minRP
argument_list|,
literal|null
argument_list|,
name|F
argument_list|,
name|F
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"not smallest, but up"
argument_list|,
name|numDocs
operator|-
literal|1
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"rand"
argument_list|,
literal|null
argument_list|,
name|maxRP
argument_list|,
name|F
argument_list|,
name|F
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"not biggest, but down"
argument_list|,
name|numDocs
operator|-
literal|1
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
comment|// very small sets
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"rand"
argument_list|,
name|minRP
argument_list|,
name|minRP
argument_list|,
name|F
argument_list|,
name|F
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"min,min,F,F"
argument_list|,
literal|0
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"rand"
argument_list|,
name|maxRP
argument_list|,
name|maxRP
argument_list|,
name|F
argument_list|,
name|F
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max,max,F,F"
argument_list|,
literal|0
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"rand"
argument_list|,
name|minRP
argument_list|,
name|minRP
argument_list|,
name|T
argument_list|,
name|T
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"min,min,T,T"
argument_list|,
literal|1
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"rand"
argument_list|,
literal|null
argument_list|,
name|minRP
argument_list|,
name|F
argument_list|,
name|T
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nul,min,F,T"
argument_list|,
literal|1
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"rand"
argument_list|,
name|maxRP
argument_list|,
name|maxRP
argument_list|,
name|T
argument_list|,
name|T
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max,max,T,T"
argument_list|,
literal|1
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"rand"
argument_list|,
name|maxRP
argument_list|,
literal|null
argument_list|,
name|T
argument_list|,
name|F
argument_list|,
name|c
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max,nul,T,T"
argument_list|,
literal|1
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
block|}
DECL|method|testFarsi
specifier|public
name|void
name|testFarsi
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* build an index */
name|Directory
name|farsiIndex
init|=
name|newDirectory
argument_list|(
name|rand
argument_list|)
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|rand
argument_list|,
name|farsiIndex
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content"
argument_list|,
literal|"\u0633\u0627\u0628"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|"body"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|search
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|Query
name|q
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"body"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Neither Java 1.4.2 nor 1.5.0 has Farsi Locale collation available in
comment|// RuleBasedCollator. However, the Arabic Locale seems to order the Farsi
comment|// characters properly.
name|Collator
name|collator
init|=
name|Collator
operator|.
name|getInstance
argument_list|(
operator|new
name|Locale
argument_list|(
literal|"ar"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi
comment|// orders the U+0698 character before the U+0633 character, so the single
comment|// index Term below should NOT be returned by a TermRangeFilter with a Farsi
comment|// Collator (or an Arabic one for the case when Farsi is not supported).
name|int
name|numHits
init|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"content"
argument_list|,
literal|"\u062F"
argument_list|,
literal|"\u0698"
argument_list|,
name|T
argument_list|,
name|T
argument_list|,
name|collator
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The index Term should not be included."
argument_list|,
literal|0
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"content"
argument_list|,
literal|"\u0633"
argument_list|,
literal|"\u0638"
argument_list|,
name|T
argument_list|,
name|T
argument_list|,
name|collator
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The index Term should be included."
argument_list|,
literal|1
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|search
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|farsiIndex
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testDanish
specifier|public
name|void
name|testDanish
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* build an index */
name|Directory
name|danishIndex
init|=
name|newDirectory
argument_list|(
name|rand
argument_list|)
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|rand
argument_list|,
name|danishIndex
argument_list|)
decl_stmt|;
comment|// Danish collation orders the words below in the given order
comment|// (example taken from TestSort.testInternationalSort() ).
name|String
index|[]
name|words
init|=
block|{
literal|"H\u00D8T"
block|,
literal|"H\u00C5T"
block|,
literal|"MAND"
block|}
decl_stmt|;
for|for
control|(
name|int
name|docnum
init|=
literal|0
init|;
name|docnum
operator|<
name|words
operator|.
name|length
condition|;
operator|++
name|docnum
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content"
argument_list|,
name|words
index|[
name|docnum
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|"body"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|search
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|Query
name|q
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"body"
argument_list|)
argument_list|)
decl_stmt|;
name|Collator
name|collator
init|=
name|Collator
operator|.
name|getInstance
argument_list|(
operator|new
name|Locale
argument_list|(
literal|"da"
argument_list|,
literal|"dk"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Unicode order would not include "H\u00C5T" in [ "H\u00D8T", "MAND" ],
comment|// but Danish collation does.
name|int
name|numHits
init|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"content"
argument_list|,
literal|"H\u00D8T"
argument_list|,
literal|"MAND"
argument_list|,
name|F
argument_list|,
name|F
argument_list|,
name|collator
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The index Term should be included."
argument_list|,
literal|1
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|numHits
operator|=
name|search
operator|.
name|search
argument_list|(
name|q
argument_list|,
operator|new
name|TermRangeFilter
argument_list|(
literal|"content"
argument_list|,
literal|"H\u00C5T"
argument_list|,
literal|"MAND"
argument_list|,
name|F
argument_list|,
name|F
argument_list|,
name|collator
argument_list|)
argument_list|,
literal|1000
argument_list|)
operator|.
name|totalHits
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The index Term should not be included."
argument_list|,
literal|0
argument_list|,
name|numHits
argument_list|)
expr_stmt|;
name|search
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|danishIndex
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
