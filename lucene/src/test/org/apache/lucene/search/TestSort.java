begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|Collator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldValueHitQueue
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|cache
operator|.
name|ByteValuesCreator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|cache
operator|.
name|CachedArrayCreator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|cache
operator|.
name|DoubleValuesCreator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|cache
operator|.
name|FloatValuesCreator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|cache
operator|.
name|IntValuesCreator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|cache
operator|.
name|LongValuesCreator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|cache
operator|.
name|ShortValuesCreator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|LockObtainFailedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|DocIdBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_comment
comment|/**  * Unit tests for sorting code.  *  *<p>Created: Feb 17, 2004 4:55:10 PM  *  * @since   lucene 1.4  */
end_comment
begin_class
DECL|class|TestSort
specifier|public
class|class
name|TestSort
extends|extends
name|LuceneTestCase
implements|implements
name|Serializable
block|{
DECL|field|NUM_STRINGS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_STRINGS
init|=
literal|6000
operator|*
name|RANDOM_MULTIPLIER
decl_stmt|;
DECL|field|full
specifier|private
name|IndexSearcher
name|full
decl_stmt|;
DECL|field|searchX
specifier|private
name|IndexSearcher
name|searchX
decl_stmt|;
DECL|field|searchY
specifier|private
name|IndexSearcher
name|searchY
decl_stmt|;
DECL|field|queryX
specifier|private
name|Query
name|queryX
decl_stmt|;
DECL|field|queryY
specifier|private
name|Query
name|queryY
decl_stmt|;
DECL|field|queryA
specifier|private
name|Query
name|queryA
decl_stmt|;
DECL|field|queryE
specifier|private
name|Query
name|queryE
decl_stmt|;
DECL|field|queryF
specifier|private
name|Query
name|queryF
decl_stmt|;
DECL|field|queryG
specifier|private
name|Query
name|queryG
decl_stmt|;
DECL|field|queryM
specifier|private
name|Query
name|queryM
decl_stmt|;
DECL|field|sort
specifier|private
name|Sort
name|sort
decl_stmt|;
comment|// document data:
comment|// the tracer field is used to determine which document was hit
comment|// the contents field is used to search and sort by relevance
comment|// the int field to sort by int
comment|// the float field to sort by float
comment|// the string field to sort by string
comment|// the i18n field includes accented characters for testing locale-specific sorting
DECL|field|data
specifier|private
name|String
index|[]
index|[]
name|data
init|=
operator|new
name|String
index|[]
index|[]
block|{
comment|// tracer  contents         int            float           string   custom   i18n               long            double,          short,     byte, 'custom parser encoding'
block|{
literal|"A"
block|,
literal|"x a"
block|,
literal|"5"
block|,
literal|"4f"
block|,
literal|"c"
block|,
literal|"A-3"
block|,
literal|"p\u00EAche"
block|,
literal|"10"
block|,
literal|"-4.0"
block|,
literal|"3"
block|,
literal|"126"
block|,
literal|"J"
block|}
block|,
comment|//A, x
block|{
literal|"B"
block|,
literal|"y a"
block|,
literal|"5"
block|,
literal|"3.4028235E38"
block|,
literal|"i"
block|,
literal|"B-10"
block|,
literal|"HAT"
block|,
literal|"1000000000"
block|,
literal|"40.0"
block|,
literal|"24"
block|,
literal|"1"
block|,
literal|"I"
block|}
block|,
comment|//B, y
block|{
literal|"C"
block|,
literal|"x a b c"
block|,
literal|"2147483647"
block|,
literal|"1.0"
block|,
literal|"j"
block|,
literal|"A-2"
block|,
literal|"p\u00E9ch\u00E9"
block|,
literal|"99999999"
block|,
literal|"40.00002343"
block|,
literal|"125"
block|,
literal|"15"
block|,
literal|"H"
block|}
block|,
comment|//C, x
block|{
literal|"D"
block|,
literal|"y a b c"
block|,
literal|"-1"
block|,
literal|"0.0f"
block|,
literal|"a"
block|,
literal|"C-0"
block|,
literal|"HUT"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Double
operator|.
name|MIN_VALUE
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Short
operator|.
name|MIN_VALUE
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Byte
operator|.
name|MIN_VALUE
argument_list|)
block|,
literal|"G"
block|}
block|,
comment|//D, y
block|{
literal|"E"
block|,
literal|"x a b c d"
block|,
literal|"5"
block|,
literal|"2f"
block|,
literal|"h"
block|,
literal|"B-8"
block|,
literal|"peach"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Short
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Byte
operator|.
name|MAX_VALUE
argument_list|)
block|,
literal|"F"
block|}
block|,
comment|//E,x
block|{
literal|"F"
block|,
literal|"y a b c d"
block|,
literal|"2"
block|,
literal|"3.14159f"
block|,
literal|"g"
block|,
literal|"B-1"
block|,
literal|"H\u00C5T"
block|,
literal|"-44"
block|,
literal|"343.034435444"
block|,
literal|"-3"
block|,
literal|"0"
block|,
literal|"E"
block|}
block|,
comment|//F,y
block|{
literal|"G"
block|,
literal|"x a b c d"
block|,
literal|"3"
block|,
literal|"-1.0"
block|,
literal|"f"
block|,
literal|"C-100"
block|,
literal|"sin"
block|,
literal|"323254543543"
block|,
literal|"4.043544"
block|,
literal|"5"
block|,
literal|"100"
block|,
literal|"D"
block|}
block|,
comment|//G,x
block|{
literal|"H"
block|,
literal|"y a b c d"
block|,
literal|"0"
block|,
literal|"1.4E-45"
block|,
literal|"e"
block|,
literal|"C-88"
block|,
literal|"H\u00D8T"
block|,
literal|"1023423423005"
block|,
literal|"4.043545"
block|,
literal|"10"
block|,
literal|"-50"
block|,
literal|"C"
block|}
block|,
comment|//H,y
block|{
literal|"I"
block|,
literal|"x a b c d e f"
block|,
literal|"-2147483648"
block|,
literal|"1.0e+0"
block|,
literal|"d"
block|,
literal|"A-10"
block|,
literal|"s\u00EDn"
block|,
literal|"332422459999"
block|,
literal|"4.043546"
block|,
literal|"-340"
block|,
literal|"51"
block|,
literal|"B"
block|}
block|,
comment|//I,x
block|{
literal|"J"
block|,
literal|"y a b c d e f"
block|,
literal|"4"
block|,
literal|".5"
block|,
literal|"b"
block|,
literal|"C-7"
block|,
literal|"HOT"
block|,
literal|"34334543543"
block|,
literal|"4.0000220343"
block|,
literal|"300"
block|,
literal|"2"
block|,
literal|"A"
block|}
block|,
comment|//J,y
block|{
literal|"W"
block|,
literal|"g"
block|,
literal|"1"
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|}
block|,
block|{
literal|"X"
block|,
literal|"g"
block|,
literal|"1"
block|,
literal|"0.1"
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|}
block|,
block|{
literal|"Y"
block|,
literal|"g"
block|,
literal|"1"
block|,
literal|"0.2"
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|}
block|,
block|{
literal|"Z"
block|,
literal|"f g"
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|}
block|,
comment|// Sort Missing first/last
block|{
literal|"a"
block|,
literal|"m"
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|}
block|,
block|{
literal|"b"
block|,
literal|"m"
block|,
literal|"4"
block|,
literal|"4.0"
block|,
literal|"4"
block|,
literal|null
block|,
literal|null
block|,
literal|"4"
block|,
literal|"4"
block|,
literal|"4"
block|,
literal|"4"
block|,
literal|null
block|}
block|,
block|{
literal|"c"
block|,
literal|"m"
block|,
literal|"5"
block|,
literal|"5.0"
block|,
literal|"5"
block|,
literal|null
block|,
literal|null
block|,
literal|"5"
block|,
literal|"5"
block|,
literal|"5"
block|,
literal|"5"
block|,
literal|null
block|}
block|,
block|{
literal|"d"
block|,
literal|"m"
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|}
block|}
decl_stmt|;
comment|// the sort order of Ã versus U depends on the version of the rules being used
comment|// for the inherited root locale: Ã's order isnt specified in Locale.US since
comment|// its not used in english.
specifier|private
name|boolean
name|oStrokeFirst
init|=
name|Collator
operator|.
name|getInstance
argument_list|(
operator|new
name|Locale
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|compare
argument_list|(
literal|"Ã"
argument_list|,
literal|"U"
argument_list|)
operator|<
literal|0
decl_stmt|;
comment|// create an index of all the documents, or just the x, or just the y documents
specifier|private
name|IndexSearcher
name|getIndex
parameter_list|(
name|boolean
name|even
parameter_list|,
name|boolean
name|odd
parameter_list|)
throws|throws
name|IOException
block|{
name|Directory
name|indexStore
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|dirs
operator|.
name|add
argument_list|(
name|indexStore
argument_list|)
expr_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|,
name|indexStore
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|i
operator|%
literal|2
operator|)
operator|==
literal|0
operator|&&
name|even
operator|)
operator|||
operator|(
operator|(
name|i
operator|%
literal|2
operator|)
operator|==
literal|1
operator|&&
name|odd
operator|)
condition|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tracer"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|0
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"contents"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
index|[
name|i
index|]
index|[
literal|2
index|]
operator|!=
literal|null
condition|)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"int"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|2
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
index|[
name|i
index|]
index|[
literal|3
index|]
operator|!=
literal|null
condition|)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"float"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|3
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
index|[
name|i
index|]
index|[
literal|4
index|]
operator|!=
literal|null
condition|)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"string"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|4
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
index|[
name|i
index|]
index|[
literal|5
index|]
operator|!=
literal|null
condition|)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"custom"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|5
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
index|[
name|i
index|]
index|[
literal|6
index|]
operator|!=
literal|null
condition|)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"i18n"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|6
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
index|[
name|i
index|]
index|[
literal|7
index|]
operator|!=
literal|null
condition|)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"long"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|7
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
index|[
name|i
index|]
index|[
literal|8
index|]
operator|!=
literal|null
condition|)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"double"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|8
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
index|[
name|i
index|]
index|[
literal|9
index|]
operator|!=
literal|null
condition|)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"short"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|9
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
index|[
name|i
index|]
index|[
literal|10
index|]
operator|!=
literal|null
condition|)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"byte"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|10
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
index|[
name|i
index|]
index|[
literal|11
index|]
operator|!=
literal|null
condition|)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"parser"
argument_list|,
name|data
index|[
name|i
index|]
index|[
literal|11
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setBoost
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// produce some scores above 1.0
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|s
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|s
operator|.
name|setDefaultFieldSortScoring
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
specifier|private
name|IndexSearcher
name|getFullIndex
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getIndex
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
name|IndexSearcher
name|getFullStrings
parameter_list|()
throws|throws
name|CorruptIndexException
throws|,
name|LockObtainFailedException
throws|,
name|IOException
block|{
name|Directory
name|indexStore
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|dirs
operator|.
name|add
argument_list|(
name|indexStore
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|indexStore
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|4
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|(
literal|97
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_STRINGS
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|String
name|num
init|=
name|getRandomCharString
argument_list|(
name|getRandomNumber
argument_list|(
literal|2
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|48
argument_list|,
literal|52
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tracer"
argument_list|,
name|num
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
comment|//doc.add (new Field ("contents", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"string"
argument_list|,
name|num
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|num2
init|=
name|getRandomCharString
argument_list|(
name|getRandomNumber
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|48
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"string2"
argument_list|,
name|num2
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tracer2"
argument_list|,
name|num2
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setBoost
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// produce some scores above 1.0
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|//writer.optimize ();
comment|//System.out.println(writer.getSegmentCount());
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
operator|new
name|IndexSearcher
argument_list|(
name|indexStore
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|String
name|getRandomNumberString
parameter_list|(
name|int
name|num
parameter_list|,
name|int
name|low
parameter_list|,
name|int
name|high
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|getRandomNumber
argument_list|(
name|low
argument_list|,
name|high
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getRandomCharString
parameter_list|(
name|int
name|num
parameter_list|)
block|{
return|return
name|getRandomCharString
argument_list|(
name|num
argument_list|,
literal|48
argument_list|,
literal|122
argument_list|)
return|;
block|}
specifier|public
name|String
name|getRandomCharString
parameter_list|(
name|int
name|num
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|new
name|Character
argument_list|(
operator|(
name|char
operator|)
name|getRandomNumber
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|int
name|getRandomNumber
parameter_list|(
specifier|final
name|int
name|low
parameter_list|,
specifier|final
name|int
name|high
parameter_list|)
block|{
name|int
name|randInt
init|=
operator|(
name|Math
operator|.
name|abs
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
operator|%
operator|(
name|high
operator|-
name|low
operator|)
operator|)
operator|+
name|low
decl_stmt|;
return|return
name|randInt
return|;
block|}
specifier|private
name|IndexSearcher
name|getXIndex
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getIndex
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|IndexSearcher
name|getYIndex
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getIndex
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
name|IndexSearcher
name|getEmptyIndex
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getIndex
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|full
operator|=
name|getFullIndex
argument_list|()
expr_stmt|;
name|searchX
operator|=
name|getXIndex
argument_list|()
expr_stmt|;
name|searchY
operator|=
name|getYIndex
argument_list|()
expr_stmt|;
name|queryX
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"contents"
argument_list|,
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|queryY
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"contents"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|queryA
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"contents"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|queryE
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"contents"
argument_list|,
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
name|queryF
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"contents"
argument_list|,
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
name|queryG
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"contents"
argument_list|,
literal|"g"
argument_list|)
argument_list|)
expr_stmt|;
name|queryM
operator|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"contents"
argument_list|,
literal|"m"
argument_list|)
argument_list|)
expr_stmt|;
name|sort
operator|=
operator|new
name|Sort
argument_list|()
expr_stmt|;
block|}
specifier|private
name|ArrayList
argument_list|<
name|Directory
argument_list|>
name|dirs
init|=
operator|new
name|ArrayList
argument_list|<
name|Directory
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|full
operator|.
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|searchX
operator|.
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|searchY
operator|.
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|full
operator|.
name|close
argument_list|()
expr_stmt|;
name|searchX
operator|.
name|close
argument_list|()
expr_stmt|;
name|searchY
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|Directory
name|dir
range|:
name|dirs
control|)
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|// test the sorts by score and document number
specifier|public
name|void
name|testBuiltInSorts
parameter_list|()
throws|throws
name|Exception
block|{
name|sort
operator|=
operator|new
name|Sort
argument_list|()
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"ACEGI"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"BDFHJ"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"ACEGI"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"BDFHJ"
argument_list|)
expr_stmt|;
block|}
comment|// test sorts where the type of field is specified
specifier|public
name|void
name|testTypedSort
parameter_list|()
throws|throws
name|Exception
block|{
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|)
argument_list|,
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"IGAEC"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"DHFJB"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|)
argument_list|,
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"GCIEA"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"DHJFB"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"long"
argument_list|,
name|SortField
operator|.
name|LONG
argument_list|)
argument_list|,
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"EACGI"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"FBJHD"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"double"
argument_list|,
name|SortField
operator|.
name|DOUBLE
argument_list|)
argument_list|,
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"AGICE"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"DJHBF"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"byte"
argument_list|,
name|SortField
operator|.
name|BYTE
argument_list|)
argument_list|,
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"CIGAE"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"DHFBJ"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"short"
argument_list|,
name|SortField
operator|.
name|SHORT
argument_list|)
argument_list|,
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"IAGCE"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"DFHBJ"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|)
argument_list|,
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"AIGEC"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"DJHFB"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|SortMissingLastTestHelper
block|{
name|CachedArrayCreator
argument_list|<
name|?
argument_list|>
name|creator
decl_stmt|;
name|Object
name|min
decl_stmt|;
name|Object
name|max
decl_stmt|;
name|SortMissingLastTestHelper
parameter_list|(
name|CachedArrayCreator
argument_list|<
name|?
argument_list|>
name|c
parameter_list|,
name|Object
name|min
parameter_list|,
name|Object
name|max
parameter_list|)
block|{
name|creator
operator|=
name|c
expr_stmt|;
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
block|}
block|}
comment|// test sorts where the type of field is specified
specifier|public
name|void
name|testSortMissingLast
parameter_list|()
throws|throws
name|Exception
block|{
name|SortMissingLastTestHelper
index|[]
name|testers
init|=
operator|new
name|SortMissingLastTestHelper
index|[]
block|{
operator|new
name|SortMissingLastTestHelper
argument_list|(
operator|new
name|ByteValuesCreator
argument_list|(
literal|"byte"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Byte
operator|.
name|MIN_VALUE
argument_list|,
name|Byte
operator|.
name|MAX_VALUE
argument_list|)
block|,
operator|new
name|SortMissingLastTestHelper
argument_list|(
operator|new
name|ShortValuesCreator
argument_list|(
literal|"short"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Short
operator|.
name|MIN_VALUE
argument_list|,
name|Short
operator|.
name|MAX_VALUE
argument_list|)
block|,
operator|new
name|SortMissingLastTestHelper
argument_list|(
operator|new
name|IntValuesCreator
argument_list|(
literal|"int"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
block|,
operator|new
name|SortMissingLastTestHelper
argument_list|(
operator|new
name|LongValuesCreator
argument_list|(
literal|"long"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
block|,
operator|new
name|SortMissingLastTestHelper
argument_list|(
operator|new
name|FloatValuesCreator
argument_list|(
literal|"float"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Float
operator|.
name|MIN_VALUE
argument_list|,
name|Float
operator|.
name|MAX_VALUE
argument_list|)
block|,
operator|new
name|SortMissingLastTestHelper
argument_list|(
operator|new
name|DoubleValuesCreator
argument_list|(
literal|"double"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|,
name|Double
operator|.
name|MAX_VALUE
argument_list|)
block|,     }
decl_stmt|;
for|for
control|(
name|SortMissingLastTestHelper
name|t
range|:
name|testers
control|)
block|{
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
name|t
operator|.
name|creator
argument_list|,
literal|false
argument_list|)
argument_list|,
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"creator:"
operator|+
name|t
operator|.
name|creator
argument_list|,
name|full
argument_list|,
name|queryM
argument_list|,
name|sort
argument_list|,
literal|"adbc"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
name|t
operator|.
name|creator
argument_list|,
literal|false
argument_list|)
operator|.
name|setMissingValue
argument_list|(
name|t
operator|.
name|max
argument_list|)
argument_list|,
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"creator:"
operator|+
name|t
operator|.
name|creator
argument_list|,
name|full
argument_list|,
name|queryM
argument_list|,
name|sort
argument_list|,
literal|"bcad"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
name|t
operator|.
name|creator
argument_list|,
literal|false
argument_list|)
operator|.
name|setMissingValue
argument_list|(
name|t
operator|.
name|min
argument_list|)
argument_list|,
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"creator:"
operator|+
name|t
operator|.
name|creator
argument_list|,
name|full
argument_list|,
name|queryM
argument_list|,
name|sort
argument_list|,
literal|"adbc"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test String sorting: small queue to many matches, multi field sort, reverse sort    */
specifier|public
name|void
name|testStringSort
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|ScoreDoc
index|[]
name|result
init|=
literal|null
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|getFullStrings
argument_list|()
decl_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|)
argument_list|,
operator|new
name|SortField
argument_list|(
literal|"string2"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|,
literal|true
argument_list|)
argument_list|,
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|result
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|500
argument_list|,
name|sort
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|n
init|=
name|result
operator|.
name|length
decl_stmt|;
name|String
name|last
init|=
literal|null
decl_stmt|;
name|String
name|lastSub
init|=
literal|null
decl_stmt|;
name|int
name|lastDocId
init|=
literal|0
decl_stmt|;
name|boolean
name|fail
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|n
condition|;
operator|++
name|x
control|)
block|{
name|Document
name|doc2
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|result
index|[
name|x
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|String
index|[]
name|v
init|=
name|doc2
operator|.
name|getValues
argument_list|(
literal|"tracer"
argument_list|)
decl_stmt|;
name|String
index|[]
name|v2
init|=
name|doc2
operator|.
name|getValues
argument_list|(
literal|"tracer2"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|v
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
name|int
name|cmp
init|=
name|v
index|[
name|j
index|]
operator|.
name|compareTo
argument_list|(
name|last
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|cmp
operator|>=
literal|0
operator|)
condition|)
block|{
comment|// ensure first field is in order
name|fail
operator|=
literal|true
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"fail:"
operator|+
name|v
index|[
name|j
index|]
operator|+
literal|"< "
operator|+
name|last
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
comment|// ensure second field is in reverse order
name|cmp
operator|=
name|v2
index|[
name|j
index|]
operator|.
name|compareTo
argument_list|(
name|lastSub
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
name|fail
operator|=
literal|true
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"rev field fail:"
operator|+
name|v2
index|[
name|j
index|]
operator|+
literal|"> "
operator|+
name|lastSub
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
comment|// ensure docid is in order
if|if
condition|(
name|result
index|[
name|x
index|]
operator|.
name|doc
operator|<
name|lastDocId
condition|)
block|{
name|fail
operator|=
literal|true
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"doc fail:"
operator|+
name|result
index|[
name|x
index|]
operator|.
name|doc
operator|+
literal|"> "
operator|+
name|lastDocId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|last
operator|=
name|v
index|[
name|j
index|]
expr_stmt|;
name|lastSub
operator|=
name|v2
index|[
name|j
index|]
expr_stmt|;
name|lastDocId
operator|=
name|result
index|[
name|x
index|]
operator|.
name|doc
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|v
index|[
name|j
index|]
operator|+
literal|"("
operator|+
name|v2
index|[
name|j
index|]
operator|+
literal|")("
operator|+
name|result
index|[
name|x
index|]
operator|.
name|doc
operator|+
literal|") "
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fail
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"topn field1(field2)(docID):"
operator|+
name|buff
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Found sort results out of order"
argument_list|,
name|fail
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**     * test sorts where the type of field is specified and a custom field parser     * is used, that uses a simple char encoding. The sorted string contains a     * character beginning from 'A' that is mapped to a numeric value using some     * "funny" algorithm to be different for each data type.    */
specifier|public
name|void
name|testCustomFieldParserSort
parameter_list|()
throws|throws
name|Exception
block|{
comment|// since tests explicilty uses different parsers on the same fieldname
comment|// we explicitly check/purge the FieldCache between each assertMatch
name|FieldCache
name|fc
init|=
name|FieldCache
operator|.
name|DEFAULT
decl_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"parser"
argument_list|,
operator|new
name|FieldCache
operator|.
name|IntParser
argument_list|()
block|{
specifier|public
specifier|final
name|int
name|parseInt
parameter_list|(
specifier|final
name|BytesRef
name|term
parameter_list|)
block|{
return|return
operator|(
name|term
operator|.
name|bytes
index|[
name|term
operator|.
name|offset
index|]
operator|-
literal|'A'
operator|)
operator|*
literal|123456
return|;
block|}
block|}
argument_list|)
argument_list|,
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"JIHGFEDCBA"
argument_list|)
expr_stmt|;
name|assertSaneFieldCaches
argument_list|(
name|getName
argument_list|()
operator|+
literal|" IntParser"
argument_list|)
expr_stmt|;
name|fc
operator|.
name|purgeAllCaches
argument_list|()
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"parser"
argument_list|,
operator|new
name|FieldCache
operator|.
name|FloatParser
argument_list|()
block|{
specifier|public
specifier|final
name|float
name|parseFloat
parameter_list|(
specifier|final
name|BytesRef
name|term
parameter_list|)
block|{
return|return
operator|(
name|float
operator|)
name|Math
operator|.
name|sqrt
argument_list|(
name|term
operator|.
name|bytes
index|[
name|term
operator|.
name|offset
index|]
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|,
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"JIHGFEDCBA"
argument_list|)
expr_stmt|;
name|assertSaneFieldCaches
argument_list|(
name|getName
argument_list|()
operator|+
literal|" FloatParser"
argument_list|)
expr_stmt|;
name|fc
operator|.
name|purgeAllCaches
argument_list|()
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"parser"
argument_list|,
operator|new
name|FieldCache
operator|.
name|LongParser
argument_list|()
block|{
specifier|public
specifier|final
name|long
name|parseLong
parameter_list|(
specifier|final
name|BytesRef
name|term
parameter_list|)
block|{
return|return
operator|(
name|term
operator|.
name|bytes
index|[
name|term
operator|.
name|offset
index|]
operator|-
literal|'A'
operator|)
operator|*
literal|1234567890L
return|;
block|}
block|}
argument_list|)
argument_list|,
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"JIHGFEDCBA"
argument_list|)
expr_stmt|;
name|assertSaneFieldCaches
argument_list|(
name|getName
argument_list|()
operator|+
literal|" LongParser"
argument_list|)
expr_stmt|;
name|fc
operator|.
name|purgeAllCaches
argument_list|()
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"parser"
argument_list|,
operator|new
name|FieldCache
operator|.
name|DoubleParser
argument_list|()
block|{
specifier|public
specifier|final
name|double
name|parseDouble
parameter_list|(
specifier|final
name|BytesRef
name|term
parameter_list|)
block|{
return|return
name|Math
operator|.
name|pow
argument_list|(
name|term
operator|.
name|bytes
index|[
name|term
operator|.
name|offset
index|]
argument_list|,
operator|(
name|term
operator|.
name|bytes
index|[
name|term
operator|.
name|offset
index|]
operator|-
literal|'A'
operator|)
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|,
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"JIHGFEDCBA"
argument_list|)
expr_stmt|;
name|assertSaneFieldCaches
argument_list|(
name|getName
argument_list|()
operator|+
literal|" DoubleParser"
argument_list|)
expr_stmt|;
name|fc
operator|.
name|purgeAllCaches
argument_list|()
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"parser"
argument_list|,
operator|new
name|FieldCache
operator|.
name|ByteParser
argument_list|()
block|{
specifier|public
specifier|final
name|byte
name|parseByte
parameter_list|(
specifier|final
name|BytesRef
name|term
parameter_list|)
block|{
return|return
call|(
name|byte
call|)
argument_list|(
name|term
operator|.
name|bytes
index|[
name|term
operator|.
name|offset
index|]
operator|-
literal|'A'
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|,
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"JIHGFEDCBA"
argument_list|)
expr_stmt|;
name|assertSaneFieldCaches
argument_list|(
name|getName
argument_list|()
operator|+
literal|" ByteParser"
argument_list|)
expr_stmt|;
name|fc
operator|.
name|purgeAllCaches
argument_list|()
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"parser"
argument_list|,
operator|new
name|FieldCache
operator|.
name|ShortParser
argument_list|()
block|{
specifier|public
specifier|final
name|short
name|parseShort
parameter_list|(
specifier|final
name|BytesRef
name|term
parameter_list|)
block|{
return|return
call|(
name|short
call|)
argument_list|(
name|term
operator|.
name|bytes
index|[
name|term
operator|.
name|offset
index|]
operator|-
literal|'A'
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|,
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"JIHGFEDCBA"
argument_list|)
expr_stmt|;
name|assertSaneFieldCaches
argument_list|(
name|getName
argument_list|()
operator|+
literal|" ShortParser"
argument_list|)
expr_stmt|;
name|fc
operator|.
name|purgeAllCaches
argument_list|()
expr_stmt|;
block|}
comment|// test sorts when there's nothing in the index
specifier|public
name|void
name|testEmptyIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexSearcher
name|empty
init|=
name|getEmptyIndex
argument_list|()
decl_stmt|;
name|sort
operator|=
operator|new
name|Sort
argument_list|()
expr_stmt|;
name|assertMatches
argument_list|(
name|empty
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|empty
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|)
argument_list|,
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|empty
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|,
literal|true
argument_list|)
argument_list|,
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|empty
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|)
argument_list|,
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|empty
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|MyFieldComparator
extends|extends
name|FieldComparator
block|{
name|int
index|[]
name|docValues
decl_stmt|;
name|int
index|[]
name|slotValues
decl_stmt|;
name|int
name|bottomValue
decl_stmt|;
name|MyFieldComparator
parameter_list|(
name|int
name|numHits
parameter_list|)
block|{
name|slotValues
operator|=
operator|new
name|int
index|[
name|numHits
index|]
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|slotValues
index|[
name|slot
index|]
operator|=
name|docValues
index|[
name|doc
index|]
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
return|return
name|slotValues
index|[
name|slot1
index|]
operator|-
name|slotValues
index|[
name|slot2
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
name|bottomValue
operator|-
name|docValues
index|[
name|doc
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setBottom
parameter_list|(
name|int
name|bottom
parameter_list|)
block|{
name|bottomValue
operator|=
name|slotValues
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|FieldComparator
name|setNextReader
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|int
name|docBase
parameter_list|)
throws|throws
name|IOException
block|{
name|docValues
operator|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getInts
argument_list|(
name|reader
argument_list|,
literal|"parser"
argument_list|,
operator|new
name|FieldCache
operator|.
name|IntParser
argument_list|()
block|{
specifier|public
specifier|final
name|int
name|parseInt
parameter_list|(
specifier|final
name|BytesRef
name|term
parameter_list|)
block|{
return|return
operator|(
name|term
operator|.
name|bytes
index|[
name|term
operator|.
name|offset
index|]
operator|-
literal|'A'
operator|)
operator|*
literal|123456
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Comparable
argument_list|<
name|?
argument_list|>
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|slotValues
index|[
name|slot
index|]
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|MyFieldComparatorSource
extends|extends
name|FieldComparatorSource
block|{
annotation|@
name|Override
specifier|public
name|FieldComparator
name|newComparator
parameter_list|(
name|String
name|fieldname
parameter_list|,
name|int
name|numHits
parameter_list|,
name|int
name|sortPos
parameter_list|,
name|boolean
name|reversed
parameter_list|)
block|{
return|return
operator|new
name|MyFieldComparator
argument_list|(
name|numHits
argument_list|)
return|;
block|}
block|}
comment|// Test sorting w/ custom FieldComparator
specifier|public
name|void
name|testNewCustomFieldParserSort
parameter_list|()
throws|throws
name|Exception
block|{
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"parser"
argument_list|,
operator|new
name|MyFieldComparatorSource
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"JIHGFEDCBA"
argument_list|)
expr_stmt|;
block|}
comment|// test sorts in reverse
specifier|public
name|void
name|testReverseSort
parameter_list|()
throws|throws
name|Exception
block|{
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|null
argument_list|,
name|SortField
operator|.
name|SCORE
argument_list|,
literal|true
argument_list|)
argument_list|,
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"IEGCA"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"JFHDB"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|null
argument_list|,
name|SortField
operator|.
name|DOC
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"IGECA"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"JHFDB"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"CAEGI"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"BJFHD"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"AECIG"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"BFJHD"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"CEGIA"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"BFHJD"
argument_list|)
expr_stmt|;
block|}
comment|// test sorting when the sort field is empty (undefined) for some of the documents
specifier|public
name|void
name|testEmptyFieldSort
parameter_list|()
throws|throws
name|Exception
block|{
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"ZJI"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"IJZ"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"i18n"
argument_list|,
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"ZJI"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"i18n"
argument_list|,
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"IJZ"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"IZJ"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"JZI"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"ZJI"
argument_list|)
expr_stmt|;
comment|// using a nonexisting field as first sort key shouldn't make a difference:
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"nosuchfield"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|)
argument_list|,
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"ZJI"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"IJZ"
argument_list|)
expr_stmt|;
comment|// When a field is null for both documents, the next SortField should be used.
comment|// Works for
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|)
argument_list|,
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|)
argument_list|,
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryG
argument_list|,
name|sort
argument_list|,
literal|"ZWXY"
argument_list|)
expr_stmt|;
comment|// Reverse the last criterium to make sure the test didn't pass by chance
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|)
argument_list|,
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|)
argument_list|,
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryG
argument_list|,
name|sort
argument_list|,
literal|"ZYXW"
argument_list|)
expr_stmt|;
comment|// Do the same for a ParallelMultiSearcher
name|ExecutorService
name|exec
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|2
argument_list|,
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|IndexSearcher
name|parallelSearcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|full
operator|.
name|getIndexReader
argument_list|()
argument_list|,
name|exec
argument_list|)
decl_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|)
argument_list|,
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|)
argument_list|,
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|parallelSearcher
argument_list|,
name|queryG
argument_list|,
name|sort
argument_list|,
literal|"ZWXY"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|)
argument_list|,
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|)
argument_list|,
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|parallelSearcher
argument_list|,
name|queryG
argument_list|,
name|sort
argument_list|,
literal|"ZYXW"
argument_list|)
expr_stmt|;
name|parallelSearcher
operator|.
name|close
argument_list|()
expr_stmt|;
name|exec
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|exec
operator|.
name|awaitTermination
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
comment|// test sorts using a series of fields
specifier|public
name|void
name|testSortCombos
parameter_list|()
throws|throws
name|Exception
block|{
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|)
argument_list|,
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"IGEAC"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|SortField
argument_list|(
literal|null
argument_list|,
name|SortField
operator|.
name|DOC
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"CEAGI"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|)
argument_list|,
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"GICEA"
argument_list|)
expr_stmt|;
block|}
comment|// test using a Locale for sorting strings
specifier|public
name|void
name|testLocaleSort
parameter_list|()
throws|throws
name|Exception
block|{
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"AIGEC"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"DJHFB"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|Locale
operator|.
name|US
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"CEGIA"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"BFHJD"
argument_list|)
expr_stmt|;
block|}
comment|// test using various international locales with accented characters
comment|// (which sort differently depending on locale)
specifier|public
name|void
name|testInternationalSort
parameter_list|()
throws|throws
name|Exception
block|{
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"i18n"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
name|oStrokeFirst
condition|?
literal|"BFJHD"
else|:
literal|"BFJDH"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"i18n"
argument_list|,
operator|new
name|Locale
argument_list|(
literal|"sv"
argument_list|,
literal|"se"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"BJDFH"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"i18n"
argument_list|,
operator|new
name|Locale
argument_list|(
literal|"da"
argument_list|,
literal|"dk"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryY
argument_list|,
name|sort
argument_list|,
literal|"BJDHF"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"i18n"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"ECAGI"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"i18n"
argument_list|,
name|Locale
operator|.
name|FRANCE
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|full
argument_list|,
name|queryX
argument_list|,
name|sort
argument_list|,
literal|"EACGI"
argument_list|)
expr_stmt|;
block|}
comment|// test a variety of sorts using a parallel multisearcher
specifier|public
name|void
name|testParallelMultiSort
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|exec
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|2
argument_list|,
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
operator|new
name|MultiReader
argument_list|(
operator|new
name|IndexReader
index|[]
block|{
name|searchX
operator|.
name|getIndexReader
argument_list|()
block|,
name|searchY
operator|.
name|getIndexReader
argument_list|()
block|}
argument_list|)
argument_list|,
name|exec
argument_list|)
decl_stmt|;
name|runMultiSorts
argument_list|(
name|searcher
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
name|exec
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|exec
operator|.
name|awaitTermination
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTopDocsScores
parameter_list|()
throws|throws
name|Exception
block|{
comment|// There was previously a bug in FieldSortedHitQueue.maxscore when only a single
comment|// doc was added.  That is what the following tests for.
name|Sort
name|sort
init|=
operator|new
name|Sort
argument_list|()
decl_stmt|;
name|int
name|nDocs
init|=
literal|10
decl_stmt|;
comment|// try to pick a query that will result in an unnormalized
comment|// score greater than 1 to test for correct normalization
specifier|final
name|TopDocs
name|docs1
init|=
name|full
operator|.
name|search
argument_list|(
name|queryE
argument_list|,
literal|null
argument_list|,
name|nDocs
argument_list|,
name|sort
argument_list|)
decl_stmt|;
comment|// a filter that only allows through the first hit
name|Filter
name|filt
init|=
operator|new
name|Filter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|BitSet
name|bs
init|=
operator|new
name|BitSet
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
name|bs
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|bs
operator|.
name|set
argument_list|(
name|docs1
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
return|return
operator|new
name|DocIdBitSet
argument_list|(
name|bs
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|TopDocs
name|docs2
init|=
name|full
operator|.
name|search
argument_list|(
name|queryE
argument_list|,
name|filt
argument_list|,
name|nDocs
argument_list|,
name|sort
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|docs1
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|score
argument_list|,
name|docs2
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|score
argument_list|,
literal|1e-6
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSortWithoutFillFields
parameter_list|()
throws|throws
name|Exception
block|{
comment|// There was previously a bug in TopFieldCollector when fillFields was set
comment|// to false - the same doc and score was set in ScoreDoc[] array. This test
comment|// asserts that if fillFields is false, the documents are set properly. It
comment|// does not use Searcher's default search methods (with Sort) since all set
comment|// fillFields to true.
name|Sort
index|[]
name|sort
init|=
operator|new
name|Sort
index|[]
block|{
operator|new
name|Sort
argument_list|(
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
block|,
operator|new
name|Sort
argument_list|()
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sort
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Query
name|q
init|=
operator|new
name|MatchAllDocsQuery
argument_list|()
decl_stmt|;
name|TopDocsCollector
argument_list|<
name|Entry
argument_list|>
name|tdc
init|=
name|TopFieldCollector
operator|.
name|create
argument_list|(
name|sort
index|[
name|i
index|]
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|full
operator|.
name|search
argument_list|(
name|q
argument_list|,
name|tdc
argument_list|)
expr_stmt|;
name|ScoreDoc
index|[]
name|sd
init|=
name|tdc
operator|.
name|topDocs
argument_list|()
operator|.
name|scoreDocs
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|sd
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|sd
index|[
name|j
index|]
operator|.
name|doc
operator|!=
name|sd
index|[
name|j
operator|-
literal|1
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|testSortWithoutScoreTracking
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Two Sort criteria to instantiate the multi/single comparators.
name|Sort
index|[]
name|sort
init|=
operator|new
name|Sort
index|[]
block|{
operator|new
name|Sort
argument_list|(
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
block|,
operator|new
name|Sort
argument_list|()
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sort
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Query
name|q
init|=
operator|new
name|MatchAllDocsQuery
argument_list|()
decl_stmt|;
name|TopDocsCollector
argument_list|<
name|Entry
argument_list|>
name|tdc
init|=
name|TopFieldCollector
operator|.
name|create
argument_list|(
name|sort
index|[
name|i
index|]
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|full
operator|.
name|search
argument_list|(
name|q
argument_list|,
name|tdc
argument_list|)
expr_stmt|;
name|TopDocs
name|td
init|=
name|tdc
operator|.
name|topDocs
argument_list|()
decl_stmt|;
name|ScoreDoc
index|[]
name|sd
init|=
name|td
operator|.
name|scoreDocs
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sd
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|Float
operator|.
name|isNaN
argument_list|(
name|sd
index|[
name|j
index|]
operator|.
name|score
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|Float
operator|.
name|isNaN
argument_list|(
name|td
operator|.
name|getMaxScore
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testSortWithScoreNoMaxScoreTracking
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Two Sort criteria to instantiate the multi/single comparators.
name|Sort
index|[]
name|sort
init|=
operator|new
name|Sort
index|[]
block|{
operator|new
name|Sort
argument_list|(
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
block|,
operator|new
name|Sort
argument_list|()
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sort
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Query
name|q
init|=
operator|new
name|MatchAllDocsQuery
argument_list|()
decl_stmt|;
name|TopDocsCollector
argument_list|<
name|Entry
argument_list|>
name|tdc
init|=
name|TopFieldCollector
operator|.
name|create
argument_list|(
name|sort
index|[
name|i
index|]
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|full
operator|.
name|search
argument_list|(
name|q
argument_list|,
name|tdc
argument_list|)
expr_stmt|;
name|TopDocs
name|td
init|=
name|tdc
operator|.
name|topDocs
argument_list|()
decl_stmt|;
name|ScoreDoc
index|[]
name|sd
init|=
name|td
operator|.
name|scoreDocs
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sd
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertTrue
argument_list|(
operator|!
name|Float
operator|.
name|isNaN
argument_list|(
name|sd
index|[
name|j
index|]
operator|.
name|score
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|Float
operator|.
name|isNaN
argument_list|(
name|td
operator|.
name|getMaxScore
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// MultiComparatorScoringNoMaxScoreCollector
specifier|public
name|void
name|testSortWithScoreNoMaxScoreTrackingMulti
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Two Sort criteria to instantiate the multi/single comparators.
name|Sort
index|[]
name|sort
init|=
operator|new
name|Sort
index|[]
block|{
operator|new
name|Sort
argument_list|(
name|SortField
operator|.
name|FIELD_DOC
argument_list|,
name|SortField
operator|.
name|FIELD_SCORE
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sort
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Query
name|q
init|=
operator|new
name|MatchAllDocsQuery
argument_list|()
decl_stmt|;
name|TopDocsCollector
argument_list|<
name|Entry
argument_list|>
name|tdc
init|=
name|TopFieldCollector
operator|.
name|create
argument_list|(
name|sort
index|[
name|i
index|]
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|full
operator|.
name|search
argument_list|(
name|q
argument_list|,
name|tdc
argument_list|)
expr_stmt|;
name|TopDocs
name|td
init|=
name|tdc
operator|.
name|topDocs
argument_list|()
decl_stmt|;
name|ScoreDoc
index|[]
name|sd
init|=
name|td
operator|.
name|scoreDocs
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sd
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertTrue
argument_list|(
operator|!
name|Float
operator|.
name|isNaN
argument_list|(
name|sd
index|[
name|j
index|]
operator|.
name|score
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|Float
operator|.
name|isNaN
argument_list|(
name|td
operator|.
name|getMaxScore
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testSortWithScoreAndMaxScoreTracking
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Two Sort criteria to instantiate the multi/single comparators.
name|Sort
index|[]
name|sort
init|=
operator|new
name|Sort
index|[]
block|{
operator|new
name|Sort
argument_list|(
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
block|,
operator|new
name|Sort
argument_list|()
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sort
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Query
name|q
init|=
operator|new
name|MatchAllDocsQuery
argument_list|()
decl_stmt|;
name|TopDocsCollector
argument_list|<
name|Entry
argument_list|>
name|tdc
init|=
name|TopFieldCollector
operator|.
name|create
argument_list|(
name|sort
index|[
name|i
index|]
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|full
operator|.
name|search
argument_list|(
name|q
argument_list|,
name|tdc
argument_list|)
expr_stmt|;
name|TopDocs
name|td
init|=
name|tdc
operator|.
name|topDocs
argument_list|()
decl_stmt|;
name|ScoreDoc
index|[]
name|sd
init|=
name|td
operator|.
name|scoreDocs
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sd
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertTrue
argument_list|(
operator|!
name|Float
operator|.
name|isNaN
argument_list|(
name|sd
index|[
name|j
index|]
operator|.
name|score
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
operator|!
name|Float
operator|.
name|isNaN
argument_list|(
name|td
operator|.
name|getMaxScore
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testOutOfOrderDocsScoringSort
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Two Sort criteria to instantiate the multi/single comparators.
name|Sort
index|[]
name|sort
init|=
operator|new
name|Sort
index|[]
block|{
operator|new
name|Sort
argument_list|(
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
block|,
operator|new
name|Sort
argument_list|()
block|}
decl_stmt|;
name|boolean
index|[]
index|[]
name|tfcOptions
init|=
operator|new
name|boolean
index|[]
index|[]
block|{
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|false
block|}
block|,
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|true
block|}
block|,
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|false
block|}
block|,
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|true
block|}
block|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|false
block|,
literal|false
block|}
block|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|false
block|,
literal|true
block|}
block|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|false
block|}
block|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|}
block|,     }
decl_stmt|;
name|String
index|[]
name|actualTFCClasses
init|=
operator|new
name|String
index|[]
block|{
literal|"OutOfOrderOneComparatorNonScoringCollector"
block|,
literal|"OutOfOrderOneComparatorScoringMaxScoreCollector"
block|,
literal|"OutOfOrderOneComparatorScoringNoMaxScoreCollector"
block|,
literal|"OutOfOrderOneComparatorScoringMaxScoreCollector"
block|,
literal|"OutOfOrderOneComparatorNonScoringCollector"
block|,
literal|"OutOfOrderOneComparatorScoringMaxScoreCollector"
block|,
literal|"OutOfOrderOneComparatorScoringNoMaxScoreCollector"
block|,
literal|"OutOfOrderOneComparatorScoringMaxScoreCollector"
block|}
decl_stmt|;
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
comment|// Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2
comment|// which delegates to BS if there are no mandatory clauses.
name|bq
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
comment|// Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return
comment|// the clause instead of BQ.
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sort
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|tfcOptions
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|TopDocsCollector
argument_list|<
name|Entry
argument_list|>
name|tdc
init|=
name|TopFieldCollector
operator|.
name|create
argument_list|(
name|sort
index|[
name|i
index|]
argument_list|,
literal|10
argument_list|,
name|tfcOptions
index|[
name|j
index|]
index|[
literal|0
index|]
argument_list|,
name|tfcOptions
index|[
name|j
index|]
index|[
literal|1
index|]
argument_list|,
name|tfcOptions
index|[
name|j
index|]
index|[
literal|2
index|]
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tdc
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"$"
operator|+
name|actualTFCClasses
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|full
operator|.
name|search
argument_list|(
name|bq
argument_list|,
name|tdc
argument_list|)
expr_stmt|;
name|TopDocs
name|td
init|=
name|tdc
operator|.
name|topDocs
argument_list|()
decl_stmt|;
name|ScoreDoc
index|[]
name|sd
init|=
name|td
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|sd
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// OutOfOrderMulti*Collector
specifier|public
name|void
name|testOutOfOrderDocsScoringSortMulti
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Two Sort criteria to instantiate the multi/single comparators.
name|Sort
index|[]
name|sort
init|=
operator|new
name|Sort
index|[]
block|{
operator|new
name|Sort
argument_list|(
name|SortField
operator|.
name|FIELD_DOC
argument_list|,
name|SortField
operator|.
name|FIELD_SCORE
argument_list|)
block|}
decl_stmt|;
name|boolean
index|[]
index|[]
name|tfcOptions
init|=
operator|new
name|boolean
index|[]
index|[]
block|{
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|false
block|}
block|,
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|true
block|}
block|,
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|false
block|}
block|,
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|true
block|}
block|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|false
block|,
literal|false
block|}
block|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|false
block|,
literal|true
block|}
block|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|false
block|}
block|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|}
block|,     }
decl_stmt|;
name|String
index|[]
name|actualTFCClasses
init|=
operator|new
name|String
index|[]
block|{
literal|"OutOfOrderMultiComparatorNonScoringCollector"
block|,
literal|"OutOfOrderMultiComparatorScoringMaxScoreCollector"
block|,
literal|"OutOfOrderMultiComparatorScoringNoMaxScoreCollector"
block|,
literal|"OutOfOrderMultiComparatorScoringMaxScoreCollector"
block|,
literal|"OutOfOrderMultiComparatorNonScoringCollector"
block|,
literal|"OutOfOrderMultiComparatorScoringMaxScoreCollector"
block|,
literal|"OutOfOrderMultiComparatorScoringNoMaxScoreCollector"
block|,
literal|"OutOfOrderMultiComparatorScoringMaxScoreCollector"
block|}
decl_stmt|;
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
comment|// Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2
comment|// which delegates to BS if there are no mandatory clauses.
name|bq
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
comment|// Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return
comment|// the clause instead of BQ.
name|bq
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sort
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|tfcOptions
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|TopDocsCollector
argument_list|<
name|Entry
argument_list|>
name|tdc
init|=
name|TopFieldCollector
operator|.
name|create
argument_list|(
name|sort
index|[
name|i
index|]
argument_list|,
literal|10
argument_list|,
name|tfcOptions
index|[
name|j
index|]
index|[
literal|0
index|]
argument_list|,
name|tfcOptions
index|[
name|j
index|]
index|[
literal|1
index|]
argument_list|,
name|tfcOptions
index|[
name|j
index|]
index|[
literal|2
index|]
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tdc
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"$"
operator|+
name|actualTFCClasses
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|full
operator|.
name|search
argument_list|(
name|bq
argument_list|,
name|tdc
argument_list|)
expr_stmt|;
name|TopDocs
name|td
init|=
name|tdc
operator|.
name|topDocs
argument_list|()
decl_stmt|;
name|ScoreDoc
index|[]
name|sd
init|=
name|td
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|sd
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|testSortWithScoreAndMaxScoreTrackingNoResults
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Two Sort criteria to instantiate the multi/single comparators.
name|Sort
index|[]
name|sort
init|=
operator|new
name|Sort
index|[]
block|{
operator|new
name|Sort
argument_list|(
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
block|,
operator|new
name|Sort
argument_list|()
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sort
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|TopDocsCollector
argument_list|<
name|Entry
argument_list|>
name|tdc
init|=
name|TopFieldCollector
operator|.
name|create
argument_list|(
name|sort
index|[
name|i
index|]
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TopDocs
name|td
init|=
name|tdc
operator|.
name|topDocs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|td
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Float
operator|.
name|isNaN
argument_list|(
name|td
operator|.
name|getMaxScore
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// runs a variety of sorts useful for multisearchers
specifier|private
name|void
name|runMultiSorts
parameter_list|(
name|IndexSearcher
name|multi
parameter_list|,
name|boolean
name|isFull
parameter_list|)
throws|throws
name|Exception
block|{
name|sort
operator|.
name|setSort
argument_list|(
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|String
name|expected
init|=
name|isFull
condition|?
literal|"ABCDEFGHIJ"
else|:
literal|"ACEGIBDFHJ"
decl_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
name|isFull
condition|?
literal|"IDHFGJABEC"
else|:
literal|"IDHFGJAEBC"
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|)
argument_list|,
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|expected
operator|=
name|isFull
condition|?
literal|"IDHFGJABEC"
else|:
literal|"IDHFGJAEBC"
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
name|isFull
condition|?
literal|"IDHFGJABEC"
else|:
literal|"IDHFGJAEBC"
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|)
argument_list|,
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"GDHJCIEFAB"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"GDHJCIEFAB"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"DJAIHGFEBC"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
name|isFull
condition|?
literal|"CABEJGFHDI"
else|:
literal|"CAEBJGFHDI"
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"BAFECIJHDG"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"CBEFGHIAJD"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|)
argument_list|,
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"IDHFGJEABC"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|)
argument_list|,
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"GDHJICEFAB"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"IZJ"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"int"
argument_list|,
name|SortField
operator|.
name|INT
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"JZI"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"float"
argument_list|,
name|SortField
operator|.
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"ZJI"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"ZJI"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryF
argument_list|,
name|sort
argument_list|,
literal|"IJZ"
argument_list|)
expr_stmt|;
comment|// up to this point, all of the searches should have "sane"
comment|// FieldCache behavior, and should have reused hte cache in several cases
name|assertSaneFieldCaches
argument_list|(
name|getName
argument_list|()
operator|+
literal|" various"
argument_list|)
expr_stmt|;
comment|// next we'll check Locale based (String[]) for 'string', so purge first
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|purgeAllCaches
argument_list|()
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"DJAIHGFEBC"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|Locale
operator|.
name|US
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"CBEFGHIAJD"
argument_list|)
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|Locale
operator|.
name|UK
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
name|multi
argument_list|,
name|queryA
argument_list|,
name|sort
argument_list|,
literal|"DJAIHGFEBC"
argument_list|)
expr_stmt|;
name|assertSaneFieldCaches
argument_list|(
name|getName
argument_list|()
operator|+
literal|" Locale.US + Locale.UK"
argument_list|)
expr_stmt|;
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|purgeAllCaches
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|assertMatches
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|Query
name|query
parameter_list|,
name|Sort
name|sort
parameter_list|,
name|String
name|expectedResult
parameter_list|)
throws|throws
name|IOException
block|{
name|assertMatches
argument_list|(
literal|null
argument_list|,
name|searcher
argument_list|,
name|query
argument_list|,
name|sort
argument_list|,
name|expectedResult
argument_list|)
expr_stmt|;
block|}
comment|// make sure the documents returned by the search match the expected list
specifier|private
name|void
name|assertMatches
parameter_list|(
name|String
name|msg
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|,
name|Query
name|query
parameter_list|,
name|Sort
name|sort
parameter_list|,
name|String
name|expectedResult
parameter_list|)
throws|throws
name|IOException
block|{
comment|//ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;
name|TopDocs
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|expectedResult
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|sort
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|result
init|=
name|hits
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedResult
operator|.
name|length
argument_list|()
argument_list|,
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|int
name|n
init|=
name|result
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|Document
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|result
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|String
index|[]
name|v
init|=
name|doc
operator|.
name|getValues
argument_list|(
literal|"tracer"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|v
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|buff
operator|.
name|append
argument_list|(
name|v
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|expectedResult
argument_list|,
name|buff
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|getScores
parameter_list|(
name|ScoreDoc
index|[]
name|hits
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|scoreMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|n
init|=
name|hits
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|Document
name|doc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|String
index|[]
name|v
init|=
name|doc
operator|.
name|getValues
argument_list|(
literal|"tracer"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|v
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scoreMap
operator|.
name|put
argument_list|(
name|v
index|[
literal|0
index|]
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
name|hits
index|[
name|i
index|]
operator|.
name|score
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|scoreMap
return|;
block|}
comment|// make sure all the values in the maps match
specifier|private
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|void
name|assertSameValues
parameter_list|(
name|HashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|m1
parameter_list|,
name|HashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|m2
parameter_list|)
block|{
name|int
name|n
init|=
name|m1
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|m
init|=
name|m2
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|n
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|K
argument_list|>
name|iter
init|=
name|m1
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|K
name|key
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|V
name|o1
init|=
name|m1
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|V
name|o2
init|=
name|m2
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|o1
operator|instanceof
name|Float
condition|)
block|{
name|assertEquals
argument_list|(
operator|(
operator|(
name|Float
operator|)
name|o1
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|,
operator|(
operator|(
name|Float
operator|)
name|o2
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|,
literal|1e-6
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|m1
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|m2
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|testEmptyStringVsNullStringSort
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"f"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"t"
argument_list|,
literal|"1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"t"
argument_list|,
literal|"1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|s
init|=
operator|new
name|IndexSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|TopDocs
name|hits
init|=
name|s
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"t"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
operator|new
name|Sort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"f"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
comment|// null sorts first
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hits
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testLUCENE2142
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|indexStore
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|indexStore
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"string"
argument_list|,
literal|"a"
operator|+
name|i
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"string"
argument_list|,
literal|"b"
operator|+
name|i
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
comment|// enforce one segment to have a higher unique term count in all cases
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|sort
operator|.
name|setSort
argument_list|(
operator|new
name|SortField
argument_list|(
literal|"string"
argument_list|,
name|SortField
operator|.
name|STRING
argument_list|)
argument_list|,
name|SortField
operator|.
name|FIELD_DOC
argument_list|)
expr_stmt|;
comment|// this should not throw AIOOBE or RuntimeEx
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|indexStore
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|500
argument_list|,
name|sort
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
name|indexStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testCountingCollector
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|indexStore
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|,
name|indexStore
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"string"
argument_list|,
literal|"a"
operator|+
name|i
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"string"
argument_list|,
literal|"b"
operator|+
name|i
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|TotalHitCountCollector
name|c
init|=
operator|new
name|TotalHitCountCollector
argument_list|()
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|null
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|c
operator|.
name|getTotalHits
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|indexStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
