begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * TestExplanations subclass focusing on basic query types  */
end_comment
begin_class
DECL|class|TestSimpleExplanations
specifier|public
class|class
name|TestSimpleExplanations
extends|extends
name|TestExplanations
block|{
comment|// we focus on queries that don't rewrite to other queries.
comment|// if we get those covered well, then the ones that rewrite should
comment|// also be covered.
comment|/* simple term tests */
DECL|method|testT1
specifier|public
name|void
name|testT1
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"w1"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testT2
specifier|public
name|void
name|testT2
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"w1^1000"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
comment|/* MatchAllDocs */
DECL|method|testMA1
specifier|public
name|void
name|testMA1
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testMA2
specifier|public
name|void
name|testMA2
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|q
init|=
operator|new
name|MatchAllDocsQuery
argument_list|()
decl_stmt|;
name|q
operator|.
name|setBoost
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|qtest
argument_list|(
name|q
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
comment|/* some simple phrase tests */
DECL|method|testP1
specifier|public
name|void
name|testP1
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"\"w1 w2\""
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testP2
specifier|public
name|void
name|testP2
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"\"w1 w3\""
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testP3
specifier|public
name|void
name|testP3
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"\"w1 w2\"~1"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testP4
specifier|public
name|void
name|testP4
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"\"w2 w3\"~1"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testP5
specifier|public
name|void
name|testP5
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"\"w3 w2\"~1"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testP6
specifier|public
name|void
name|testP6
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"\"w3 w2\"~2"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testP7
specifier|public
name|void
name|testP7
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"\"w3 w2\"~3"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
comment|/* some simple filtered query tests */
DECL|method|testFQ1
specifier|public
name|void
name|testFQ1
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
operator|new
name|FilteredQuery
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"w1"
argument_list|)
argument_list|,
operator|new
name|ItemizedFilter
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
argument_list|)
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testFQ2
specifier|public
name|void
name|testFQ2
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
operator|new
name|FilteredQuery
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"w1"
argument_list|)
argument_list|,
operator|new
name|ItemizedFilter
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
argument_list|)
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testFQ3
specifier|public
name|void
name|testFQ3
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
operator|new
name|FilteredQuery
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"xx"
argument_list|)
argument_list|,
operator|new
name|ItemizedFilter
argument_list|(
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
block|}
argument_list|)
argument_list|)
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testFQ4
specifier|public
name|void
name|testFQ4
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
operator|new
name|FilteredQuery
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"xx^1000"
argument_list|)
argument_list|,
operator|new
name|ItemizedFilter
argument_list|(
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
block|}
argument_list|)
argument_list|)
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testFQ6
specifier|public
name|void
name|testFQ6
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|q
init|=
operator|new
name|FilteredQuery
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"xx"
argument_list|)
argument_list|,
operator|new
name|ItemizedFilter
argument_list|(
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|q
operator|.
name|setBoost
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|qtest
argument_list|(
name|q
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
comment|/* ConstantScoreQueries */
DECL|method|testCSQ1
specifier|public
name|void
name|testCSQ1
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|q
init|=
operator|new
name|ConstantScoreQuery
argument_list|(
operator|new
name|ItemizedFilter
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|qtest
argument_list|(
name|q
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testCSQ2
specifier|public
name|void
name|testCSQ2
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|q
init|=
operator|new
name|ConstantScoreQuery
argument_list|(
operator|new
name|ItemizedFilter
argument_list|(
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|qtest
argument_list|(
name|q
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testCSQ3
specifier|public
name|void
name|testCSQ3
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|q
init|=
operator|new
name|ConstantScoreQuery
argument_list|(
operator|new
name|ItemizedFilter
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|2
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|q
operator|.
name|setBoost
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|qtest
argument_list|(
name|q
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|2
block|}
argument_list|)
expr_stmt|;
block|}
comment|/* DisjunctionMaxQuery */
DECL|method|testDMQ1
specifier|public
name|void
name|testDMQ1
parameter_list|()
throws|throws
name|Exception
block|{
name|DisjunctionMaxQuery
name|q
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
literal|0.0f
argument_list|)
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"w1"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"w5"
argument_list|)
argument_list|)
expr_stmt|;
name|qtest
argument_list|(
name|q
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testDMQ2
specifier|public
name|void
name|testDMQ2
parameter_list|()
throws|throws
name|Exception
block|{
name|DisjunctionMaxQuery
name|q
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
literal|0.5f
argument_list|)
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"w1"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"w5"
argument_list|)
argument_list|)
expr_stmt|;
name|qtest
argument_list|(
name|q
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testDMQ3
specifier|public
name|void
name|testDMQ3
parameter_list|()
throws|throws
name|Exception
block|{
name|DisjunctionMaxQuery
name|q
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
literal|0.5f
argument_list|)
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"QQ"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"w5"
argument_list|)
argument_list|)
expr_stmt|;
name|qtest
argument_list|(
name|q
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testDMQ4
specifier|public
name|void
name|testDMQ4
parameter_list|()
throws|throws
name|Exception
block|{
name|DisjunctionMaxQuery
name|q
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
literal|0.5f
argument_list|)
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"QQ"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"xx"
argument_list|)
argument_list|)
expr_stmt|;
name|qtest
argument_list|(
name|q
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testDMQ5
specifier|public
name|void
name|testDMQ5
parameter_list|()
throws|throws
name|Exception
block|{
name|DisjunctionMaxQuery
name|q
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
literal|0.5f
argument_list|)
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"yy -QQ"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"xx"
argument_list|)
argument_list|)
expr_stmt|;
name|qtest
argument_list|(
name|q
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testDMQ6
specifier|public
name|void
name|testDMQ6
parameter_list|()
throws|throws
name|Exception
block|{
name|DisjunctionMaxQuery
name|q
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
literal|0.5f
argument_list|)
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"-yy w3"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"xx"
argument_list|)
argument_list|)
expr_stmt|;
name|qtest
argument_list|(
name|q
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testDMQ7
specifier|public
name|void
name|testDMQ7
parameter_list|()
throws|throws
name|Exception
block|{
name|DisjunctionMaxQuery
name|q
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
literal|0.5f
argument_list|)
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"-yy w3"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"w2"
argument_list|)
argument_list|)
expr_stmt|;
name|qtest
argument_list|(
name|q
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testDMQ8
specifier|public
name|void
name|testDMQ8
parameter_list|()
throws|throws
name|Exception
block|{
name|DisjunctionMaxQuery
name|q
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
literal|0.5f
argument_list|)
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"yy w5^100"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"xx^100000"
argument_list|)
argument_list|)
expr_stmt|;
name|qtest
argument_list|(
name|q
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testDMQ9
specifier|public
name|void
name|testDMQ9
parameter_list|()
throws|throws
name|Exception
block|{
name|DisjunctionMaxQuery
name|q
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
literal|0.5f
argument_list|)
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"yy w5^100"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"xx^0"
argument_list|)
argument_list|)
expr_stmt|;
name|qtest
argument_list|(
name|q
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
comment|/* MultiPhraseQuery */
DECL|method|testMPQ1
specifier|public
name|void
name|testMPQ1
parameter_list|()
throws|throws
name|Exception
block|{
name|MultiPhraseQuery
name|q
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|ta
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"w1"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|ta
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"w2"
block|,
literal|"w3"
block|,
literal|"xx"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|qtest
argument_list|(
name|q
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testMPQ2
specifier|public
name|void
name|testMPQ2
parameter_list|()
throws|throws
name|Exception
block|{
name|MultiPhraseQuery
name|q
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|ta
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"w1"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|ta
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"w2"
block|,
literal|"w3"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|qtest
argument_list|(
name|q
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testMPQ3
specifier|public
name|void
name|testMPQ3
parameter_list|()
throws|throws
name|Exception
block|{
name|MultiPhraseQuery
name|q
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|ta
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"w1"
block|,
literal|"xx"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|ta
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"w2"
block|,
literal|"w3"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|qtest
argument_list|(
name|q
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testMPQ4
specifier|public
name|void
name|testMPQ4
parameter_list|()
throws|throws
name|Exception
block|{
name|MultiPhraseQuery
name|q
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|ta
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"w1"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|ta
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"w2"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|qtest
argument_list|(
name|q
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testMPQ5
specifier|public
name|void
name|testMPQ5
parameter_list|()
throws|throws
name|Exception
block|{
name|MultiPhraseQuery
name|q
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|ta
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"w1"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|ta
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"w2"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|setSlop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|qtest
argument_list|(
name|q
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testMPQ6
specifier|public
name|void
name|testMPQ6
parameter_list|()
throws|throws
name|Exception
block|{
name|MultiPhraseQuery
name|q
init|=
operator|new
name|MultiPhraseQuery
argument_list|()
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|ta
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"w1"
block|,
literal|"w3"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|ta
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"w2"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|setSlop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|qtest
argument_list|(
name|q
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
comment|/* some simple tests of boolean queries containing term queries */
DECL|method|testBQ1
specifier|public
name|void
name|testBQ1
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"+w1 +w2"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testBQ2
specifier|public
name|void
name|testBQ2
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"+yy +w3"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testBQ3
specifier|public
name|void
name|testBQ3
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"yy +w3"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testBQ4
specifier|public
name|void
name|testBQ4
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"w1 (-xx w2)"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testBQ5
specifier|public
name|void
name|testBQ5
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"w1 (+qq w2)"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testBQ6
specifier|public
name|void
name|testBQ6
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"w1 -(-qq w5)"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testBQ7
specifier|public
name|void
name|testBQ7
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"+w1 +(qq (xx -w2) (+w3 +w4))"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testBQ8
specifier|public
name|void
name|testBQ8
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"+w1 (qq (xx -w2) (+w3 +w4))"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testBQ9
specifier|public
name|void
name|testBQ9
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"+w1 (qq (-xx w2) -(+w3 +w4))"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testBQ10
specifier|public
name|void
name|testBQ10
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"+w1 +(qq (-xx w2) -(+w3 +w4))"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testBQ11
specifier|public
name|void
name|testBQ11
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"w1 w2^1000.0"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testBQ14
specifier|public
name|void
name|testBQ14
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|q
init|=
operator|new
name|BooleanQuery
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"QQQQQ"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"w1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|qtest
argument_list|(
name|q
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testBQ15
specifier|public
name|void
name|testBQ15
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|q
init|=
operator|new
name|BooleanQuery
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"QQQQQ"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"w1"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|qtest
argument_list|(
name|q
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testBQ16
specifier|public
name|void
name|testBQ16
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|q
init|=
operator|new
name|BooleanQuery
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"QQQQQ"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"w1 -xx"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|qtest
argument_list|(
name|q
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testBQ17
specifier|public
name|void
name|testBQ17
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|q
init|=
operator|new
name|BooleanQuery
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"w2"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"w1 -xx"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|qtest
argument_list|(
name|q
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testBQ19
specifier|public
name|void
name|testBQ19
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"-yy w3"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testBQ20
specifier|public
name|void
name|testBQ20
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
name|q
init|=
operator|new
name|BooleanQuery
argument_list|()
decl_stmt|;
name|q
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"QQQQQ"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"yy"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"zz"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"w5"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|q
operator|.
name|add
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"w4"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|qtest
argument_list|(
name|q
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
comment|/* BQ of TQ: using alt so some fields have zero boost and some don't */
DECL|method|testMultiFieldBQ1
specifier|public
name|void
name|testMultiFieldBQ1
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"+w1 +alt:w2"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiFieldBQ2
specifier|public
name|void
name|testMultiFieldBQ2
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"+yy +alt:w3"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiFieldBQ3
specifier|public
name|void
name|testMultiFieldBQ3
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"yy +alt:w3"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiFieldBQ4
specifier|public
name|void
name|testMultiFieldBQ4
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"w1 (-xx alt:w2)"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiFieldBQ5
specifier|public
name|void
name|testMultiFieldBQ5
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"w1 (+alt:qq alt:w2)"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiFieldBQ6
specifier|public
name|void
name|testMultiFieldBQ6
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"w1 -(-alt:qq alt:w5)"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiFieldBQ7
specifier|public
name|void
name|testMultiFieldBQ7
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"+w1 +(alt:qq (alt:xx -alt:w2) (+alt:w3 +alt:w4))"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiFieldBQ8
specifier|public
name|void
name|testMultiFieldBQ8
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"+alt:w1 (qq (alt:xx -w2) (+alt:w3 +w4))"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiFieldBQ9
specifier|public
name|void
name|testMultiFieldBQ9
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"+w1 (alt:qq (-xx w2) -(+alt:w3 +w4))"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiFieldBQ10
specifier|public
name|void
name|testMultiFieldBQ10
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"+w1 +(alt:qq (-xx alt:w2) -(+alt:w3 +w4))"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
expr_stmt|;
block|}
comment|/* BQ of PQ: using alt so some fields have zero boost and some don't */
DECL|method|testMultiFieldBQofPQ1
specifier|public
name|void
name|testMultiFieldBQofPQ1
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"\"w1 w2\" alt:\"w1 w2\""
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiFieldBQofPQ2
specifier|public
name|void
name|testMultiFieldBQofPQ2
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"\"w1 w3\" alt:\"w1 w3\""
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiFieldBQofPQ3
specifier|public
name|void
name|testMultiFieldBQofPQ3
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"\"w1 w2\"~1 alt:\"w1 w2\"~1"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiFieldBQofPQ4
specifier|public
name|void
name|testMultiFieldBQofPQ4
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"\"w2 w3\"~1 alt:\"w2 w3\"~1"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiFieldBQofPQ5
specifier|public
name|void
name|testMultiFieldBQofPQ5
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"\"w3 w2\"~1 alt:\"w3 w2\"~1"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiFieldBQofPQ6
specifier|public
name|void
name|testMultiFieldBQofPQ6
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"\"w3 w2\"~2 alt:\"w3 w2\"~2"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiFieldBQofPQ7
specifier|public
name|void
name|testMultiFieldBQofPQ7
parameter_list|()
throws|throws
name|Exception
block|{
name|qtest
argument_list|(
literal|"\"w3 w2\"~3 alt:\"w3 w2\"~3"
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
