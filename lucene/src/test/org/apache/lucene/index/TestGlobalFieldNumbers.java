begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|BinaryField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
operator|.
name|FieldNumberBiMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|DefaultSegmentInfosWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|LockObtainFailedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_class
DECL|class|TestGlobalFieldNumbers
specifier|public
class|class
name|TestGlobalFieldNumbers
extends|extends
name|LuceneTestCase
block|{
DECL|method|testGlobalFieldNumberFiles
specifier|public
name|void
name|testGlobalFieldNumberFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|num
init|=
name|atLeast
argument_list|(
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
block|{
name|IndexWriterConfig
name|config
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f1"
argument_list|,
literal|"d1 first field"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f2"
argument_list|,
literal|"d1 second field"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|string
range|:
name|writer
operator|.
name|getIndexFileNames
argument_list|()
control|)
block|{
name|assertFalse
argument_list|(
name|string
operator|.
name|endsWith
argument_list|(
literal|".fnx"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|files
init|=
name|writer
operator|.
name|getIndexFileNames
argument_list|()
decl_stmt|;
name|files
operator|.
name|remove
argument_list|(
literal|"1.fnx"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|string
range|:
name|files
control|)
block|{
name|assertFalse
argument_list|(
name|string
operator|.
name|endsWith
argument_list|(
literal|".fnx"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFNXFiles
argument_list|(
name|dir
argument_list|,
literal|"1.fnx"
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f1"
argument_list|,
literal|"d2 first field"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|BinaryField
argument_list|(
literal|"f3"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|files
operator|=
name|writer
operator|.
name|getIndexFileNames
argument_list|()
expr_stmt|;
name|files
operator|.
name|remove
argument_list|(
literal|"2.fnx"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|string
range|:
name|files
control|)
block|{
name|assertFalse
argument_list|(
name|string
operator|.
name|endsWith
argument_list|(
literal|".fnx"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFNXFiles
argument_list|(
name|dir
argument_list|,
literal|"2.fnx"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFNXFiles
argument_list|(
name|dir
argument_list|,
literal|"2.fnx"
argument_list|)
expr_stmt|;
block|}
block|{
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f1"
argument_list|,
literal|"d3 first field"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f2"
argument_list|,
literal|"d3 second field"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|BinaryField
argument_list|(
literal|"f3"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|files
init|=
name|writer
operator|.
name|getIndexFileNames
argument_list|()
decl_stmt|;
name|files
operator|.
name|remove
argument_list|(
literal|"2.fnx"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|string
range|:
name|files
control|)
block|{
name|assertFalse
argument_list|(
name|string
operator|.
name|endsWith
argument_list|(
literal|".fnx"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFNXFiles
argument_list|(
name|dir
argument_list|,
literal|"2.fnx"
argument_list|)
expr_stmt|;
block|}
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|" field numbers got mixed up"
argument_list|,
name|writer
operator|.
name|anyNonBulkMerges
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFNXFiles
argument_list|(
name|dir
argument_list|,
literal|"2.fnx"
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testIndexReaderCommit
specifier|public
name|void
name|testIndexReaderCommit
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|num
init|=
name|atLeast
argument_list|(
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
block|{
name|IndexWriterConfig
name|config
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f1"
argument_list|,
literal|"d1 first field"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f2"
argument_list|,
literal|"d1 second field"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFNXFiles
argument_list|(
name|dir
argument_list|,
literal|"1.fnx"
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f1"
argument_list|,
literal|"d2 first field"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|BinaryField
argument_list|(
literal|"f3"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFNXFiles
argument_list|(
name|dir
argument_list|,
literal|"2.fnx"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFNXFiles
argument_list|(
name|dir
argument_list|,
literal|"2.fnx"
argument_list|)
expr_stmt|;
block|}
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|reader
operator|.
name|deleteDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|reader
operator|.
name|commit
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// make sure this reader can not modify the field map
name|assertFNXFiles
argument_list|(
name|dir
argument_list|,
literal|"2.fnx"
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|" field numbers got mixed up"
argument_list|,
name|writer
operator|.
name|anyNonBulkMerges
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFNXFiles
argument_list|(
name|dir
argument_list|,
literal|"2.fnx"
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testGlobalFieldNumberFilesAcrossCommits
specifier|public
name|void
name|testGlobalFieldNumberFilesAcrossCommits
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|num
init|=
name|atLeast
argument_list|(
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
block|{
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setIndexDeletionPolicy
argument_list|(
operator|new
name|KeepAllDeletionPolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f1"
argument_list|,
literal|"d1 first field"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f2"
argument_list|,
literal|"d1 second field"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFNXFiles
argument_list|(
name|dir
argument_list|,
literal|"1.fnx"
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f1"
argument_list|,
literal|"d2 first field"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|BinaryField
argument_list|(
literal|"f3"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFNXFiles
argument_list|(
name|dir
argument_list|,
literal|"1.fnx"
argument_list|,
literal|"2.fnx"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFNXFiles
argument_list|(
name|dir
argument_list|,
literal|"1.fnx"
argument_list|,
literal|"2.fnx"
argument_list|)
expr_stmt|;
block|}
block|{
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f1"
argument_list|,
literal|"d3 first field"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f2"
argument_list|,
literal|"d3 second field"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|BinaryField
argument_list|(
literal|"f3"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFNXFiles
argument_list|(
name|dir
argument_list|,
literal|"2.fnx"
argument_list|)
expr_stmt|;
block|}
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|" field numbers got mixed up"
argument_list|,
name|writer
operator|.
name|anyNonBulkMerges
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFNXFiles
argument_list|(
name|dir
argument_list|,
literal|"2.fnx"
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testGlobalFieldNumberOnOldCommit
specifier|public
name|void
name|testGlobalFieldNumberOnOldCommit
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|num
init|=
name|atLeast
argument_list|(
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setIndexDeletionPolicy
argument_list|(
operator|new
name|KeepAllDeletionPolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f1"
argument_list|,
literal|"d1 first field"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f2"
argument_list|,
literal|"d1 second field"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFNXFiles
argument_list|(
name|dir
argument_list|,
literal|"1.fnx"
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f1"
argument_list|,
literal|"d2 first field"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|BinaryField
argument_list|(
literal|"f3"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertFNXFiles
argument_list|(
name|dir
argument_list|,
literal|"1.fnx"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFNXFiles
argument_list|(
name|dir
argument_list|,
literal|"1.fnx"
argument_list|,
literal|"2.fnx"
argument_list|)
expr_stmt|;
comment|// open first commit
name|List
argument_list|<
name|IndexCommit
argument_list|>
name|listCommits
init|=
name|IndexReader
operator|.
name|listCommits
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|listCommits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setIndexDeletionPolicy
argument_list|(
operator|new
name|KeepAllDeletionPolicy
argument_list|()
argument_list|)
operator|.
name|setIndexCommit
argument_list|(
name|listCommits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f1"
argument_list|,
literal|"d2 first field"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|BinaryField
argument_list|(
literal|"f3"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// now we have 3 files since f3 is not present in the first commit
name|assertFNXFiles
argument_list|(
name|dir
argument_list|,
literal|"1.fnx"
argument_list|,
literal|"2.fnx"
argument_list|,
literal|"3.fnx"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFNXFiles
argument_list|(
name|dir
argument_list|,
literal|"1.fnx"
argument_list|,
literal|"2.fnx"
argument_list|,
literal|"3.fnx"
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|listCommits
operator|=
name|IndexReader
operator|.
name|listCommits
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listCommits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFNXFiles
argument_list|(
name|dir
argument_list|,
literal|"3.fnx"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFNXFiles
argument_list|(
name|dir
argument_list|,
literal|"3.fnx"
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|buildRandomIndex
specifier|private
specifier|final
name|Directory
name|buildRandomIndex
parameter_list|(
name|String
index|[]
name|fieldNames
parameter_list|,
name|int
name|numDocs
parameter_list|,
name|IndexWriterConfig
name|conf
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|LockObtainFailedException
throws|,
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numFields
init|=
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|fieldNames
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numFields
condition|;
name|j
operator|++
control|)
block|{
name|FieldType
name|customType
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|customType
operator|.
name|setIndexed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType
operator|.
name|setTokenized
argument_list|(
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|customType
operator|.
name|setOmitNorms
argument_list|(
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
name|fieldNames
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|fieldNames
operator|.
name|length
argument_list|)
index|]
argument_list|,
name|_TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|)
argument_list|,
name|customType
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
operator|==
literal|0
condition|)
block|{
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|dir
return|;
block|}
DECL|method|testOptimize
specifier|public
name|void
name|testOptimize
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
operator|*
name|RANDOM_MULTIPLIER
condition|;
name|i
operator|++
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numFields
init|=
literal|2
operator|+
operator|(
name|TEST_NIGHTLY
condition|?
name|random
operator|.
name|nextInt
argument_list|(
literal|200
argument_list|)
else|:
name|random
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
operator|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numFields
condition|;
name|j
operator|++
control|)
block|{
name|fieldNames
operator|.
name|add
argument_list|(
literal|"field_"
operator|+
name|j
argument_list|)
expr_stmt|;
block|}
name|Directory
name|base
init|=
name|buildRandomIndex
argument_list|(
name|fieldNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|,
literal|20
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|base
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|FieldNumberBiMap
name|globalFieldMap
init|=
name|writer
operator|.
name|segmentInfos
operator|.
name|getOrLoadGlobalFieldNumberMap
argument_list|(
name|base
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|entries
init|=
name|globalFieldMap
operator|.
name|entries
argument_list|()
decl_stmt|;
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|afterOptmize
init|=
name|globalFieldMap
operator|.
name|entries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|entries
argument_list|,
name|afterOptmize
argument_list|)
expr_stmt|;
name|base
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testAddIndexesStableFieldNumbers
specifier|public
name|void
name|testAddIndexesStableFieldNumbers
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
operator|*
name|RANDOM_MULTIPLIER
condition|;
name|i
operator|++
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numFields
init|=
literal|2
operator|+
operator|(
name|TEST_NIGHTLY
condition|?
name|random
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
else|:
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numFields
condition|;
name|j
operator|++
control|)
block|{
name|fieldNames
operator|.
name|add
argument_list|(
literal|"field_"
operator|+
name|j
argument_list|)
expr_stmt|;
block|}
name|Directory
name|base
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|base
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|string
range|:
name|fieldNames
control|)
block|{
name|FieldType
name|customType
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|customType
operator|.
name|setIndexed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType
operator|.
name|setTokenized
argument_list|(
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|customType
operator|.
name|setOmitNorms
argument_list|(
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
name|string
argument_list|,
name|_TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|)
argument_list|,
name|customType
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|FieldNumberBiMap
name|globalFieldMap
init|=
name|writer
operator|.
name|segmentInfos
operator|.
name|getOrLoadGlobalFieldNumberMap
argument_list|(
name|base
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|entries
init|=
name|globalFieldMap
operator|.
name|entries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|entries
operator|.
name|size
argument_list|()
argument_list|,
name|fieldNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
comment|// all fields are in this fieldMap
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|int
name|numIndexes
init|=
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numIndexes
condition|;
name|j
operator|++
control|)
block|{
name|Directory
name|toAdd
init|=
name|buildRandomIndex
argument_list|(
name|fieldNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|,
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|base
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|IndexReader
name|open
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|toAdd
argument_list|)
decl_stmt|;
name|w
operator|.
name|addIndexes
argument_list|(
name|open
argument_list|)
expr_stmt|;
name|open
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|w
operator|.
name|addIndexes
argument_list|(
name|toAdd
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|FieldNumberBiMap
name|map
init|=
name|w
operator|.
name|segmentInfos
operator|.
name|getOrLoadGlobalFieldNumberMap
argument_list|(
name|toAdd
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|entries
argument_list|,
name|map
operator|.
name|entries
argument_list|()
argument_list|)
expr_stmt|;
name|toAdd
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|base
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
operator|new
name|LogByteSizeMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|w
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentInfos
name|sis
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|sis
operator|.
name|read
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|SegmentInfo
name|segmentInfo
init|=
name|sis
operator|.
name|info
argument_list|(
name|sis
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// last segment must
comment|// have all fields with
comment|// consistent numbers
name|FieldInfos
name|fieldInfos
init|=
name|segmentInfo
operator|.
name|getFieldInfos
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|fieldInfos
operator|.
name|size
argument_list|()
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|assertEquals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|fieldInfos
operator|.
name|fieldNumber
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|fieldInfos
operator|.
name|fieldName
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|base
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|field|oldNames
specifier|final
name|String
index|[]
name|oldNames
init|=
block|{
literal|"30.cfs"
block|,
literal|"30.nocfs"
block|,
literal|"31.cfs"
block|,
literal|"31.nocfs"
block|, }
decl_stmt|;
DECL|method|testAddOldIndex
specifier|public
name|void
name|testAddOldIndex
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|i
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|oldNames
operator|.
name|length
argument_list|)
decl_stmt|;
name|File
name|oldIndxeDir
init|=
name|_TestUtil
operator|.
name|getTempDir
argument_list|(
name|oldNames
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
literal|null
decl_stmt|;
try|try
block|{
name|_TestUtil
operator|.
name|unzip
argument_list|(
name|getDataFile
argument_list|(
literal|"index."
operator|+
name|oldNames
index|[
name|i
index|]
operator|+
literal|".zip"
argument_list|)
argument_list|,
name|oldIndxeDir
argument_list|)
expr_stmt|;
name|dir
operator|=
name|newFSDirectory
argument_list|(
name|oldIndxeDir
argument_list|)
expr_stmt|;
name|SegmentInfos
name|infos
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|infos
operator|.
name|read
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|sortedMap
init|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|FieldNumberBiMap
name|biMap
init|=
operator|new
name|FieldNumberBiMap
argument_list|()
decl_stmt|;
name|int
name|maxFieldNum
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|SegmentInfo
name|segmentInfo
range|:
name|infos
control|)
block|{
for|for
control|(
name|FieldInfo
name|fieldInfo
range|:
name|segmentInfo
operator|.
name|getFieldInfos
argument_list|()
control|)
block|{
name|int
name|globNumber
init|=
name|biMap
operator|.
name|addOrGet
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|,
name|fieldInfo
operator|.
name|number
argument_list|)
decl_stmt|;
name|maxFieldNum
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxFieldNum
argument_list|,
name|globNumber
argument_list|)
expr_stmt|;
name|sortedMap
operator|.
name|put
argument_list|(
name|globNumber
argument_list|,
name|fieldInfo
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
block|}
name|Directory
name|base
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|base
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|NO_COMPOUND_FILES
argument_list|)
argument_list|)
decl_stmt|;
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|copySortedMap
init|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|(
name|sortedMap
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|sortedMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// add every field at least once
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|int
name|nextField
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|maxFieldNum
operator|+
literal|1
argument_list|)
decl_stmt|;
name|sortedMap
operator|.
name|remove
argument_list|(
name|nextField
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|copySortedMap
operator|.
name|get
argument_list|(
name|nextField
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|FieldType
name|customType
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|customType
operator|.
name|setIndexed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType
operator|.
name|setTokenized
argument_list|(
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|customType
operator|.
name|setOmitNorms
argument_list|(
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
name|name
argument_list|,
name|_TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|)
argument_list|,
name|customType
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|expectedEntries
init|=
name|writer
operator|.
name|segmentInfos
operator|.
name|getOrLoadGlobalFieldNumberMap
argument_list|(
name|base
argument_list|)
operator|.
name|entries
argument_list|()
decl_stmt|;
name|writer
operator|.
name|addIndexes
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// add the old index
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|base
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|NO_COMPOUND_FILES
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// make sure the old index is the latest segment
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// we don't merge here since we use NoMergePolicy
name|SegmentInfos
name|sis
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|sis
operator|.
name|read
argument_list|(
name|base
argument_list|)
expr_stmt|;
comment|// check that the latest global field numbers are consistent and carried
comment|// over from the 4.0 index
name|FieldNumberBiMap
name|actualGlobalMap
init|=
name|sis
operator|.
name|getOrLoadGlobalFieldNumberMap
argument_list|(
name|base
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedEntries
argument_list|,
name|actualGlobalMap
operator|.
name|entries
argument_list|()
argument_list|)
expr_stmt|;
name|base
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|_TestUtil
operator|.
name|rmDir
argument_list|(
name|oldIndxeDir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFilesOnOldIndex
specifier|public
name|void
name|testFilesOnOldIndex
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|i
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|oldNames
operator|.
name|length
argument_list|)
decl_stmt|;
name|File
name|oldIndxeDir
init|=
name|_TestUtil
operator|.
name|getTempDir
argument_list|(
name|oldNames
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
literal|null
decl_stmt|;
name|MergePolicy
name|policy
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
name|NoMergePolicy
operator|.
name|COMPOUND_FILES
else|:
name|NoMergePolicy
operator|.
name|NO_COMPOUND_FILES
decl_stmt|;
try|try
block|{
name|_TestUtil
operator|.
name|unzip
argument_list|(
name|getDataFile
argument_list|(
literal|"index."
operator|+
name|oldNames
index|[
name|i
index|]
operator|+
literal|".zip"
argument_list|)
argument_list|,
name|oldIndxeDir
argument_list|)
expr_stmt|;
name|dir
operator|=
name|newFSDirectory
argument_list|(
name|oldIndxeDir
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|policy
argument_list|)
argument_list|)
decl_stmt|;
name|SegmentInfos
name|segmentInfos
init|=
name|writer
operator|.
name|segmentInfos
decl_stmt|;
name|assertTrue
argument_list|(
name|DefaultSegmentInfosWriter
operator|.
name|FORMAT_4_0
operator|<
name|segmentInfos
operator|.
name|getFormat
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segmentInfos
operator|.
name|getGlobalFieldMapVersion
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|string
range|:
name|writer
operator|.
name|getIndexFileNames
argument_list|()
control|)
block|{
name|assertFalse
argument_list|(
name|string
operator|.
name|endsWith
argument_list|(
literal|".fnx"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|DefaultSegmentInfosWriter
operator|.
name|FORMAT_4_0
operator|<
name|segmentInfos
operator|.
name|getFormat
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segmentInfos
operator|.
name|getGlobalFieldMapVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|files
init|=
name|writer
operator|.
name|getIndexFileNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|string
range|:
name|files
control|)
block|{
name|assertFalse
argument_list|(
name|string
operator|.
name|endsWith
argument_list|(
literal|".fnx"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f1"
argument_list|,
literal|"d1 first field"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|writer
operator|.
name|prepareCommit
argument_list|()
expr_stmt|;
comment|// the fnx file should still be under control of the SIS
name|assertTrue
argument_list|(
name|DefaultSegmentInfosWriter
operator|.
name|FORMAT_4_0
operator|<
name|segmentInfos
operator|.
name|getFormat
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|segmentInfos
operator|.
name|getLastGlobalFieldMapVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segmentInfos
operator|.
name|getGlobalFieldMapVersion
argument_list|()
argument_list|)
expr_stmt|;
name|files
operator|=
name|writer
operator|.
name|getIndexFileNames
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|string
range|:
name|files
control|)
block|{
name|assertFalse
argument_list|(
name|string
operator|.
name|endsWith
argument_list|(
literal|".fnx"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// now we should see the fnx file even if this is a 3.x segment
name|assertTrue
argument_list|(
name|DefaultSegmentInfosWriter
operator|.
name|FORMAT_4_0
operator|<
name|segmentInfos
operator|.
name|getFormat
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segmentInfos
operator|.
name|getGlobalFieldMapVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|segmentInfos
operator|.
name|getLastGlobalFieldMapVersion
argument_list|()
argument_list|)
expr_stmt|;
name|files
operator|=
name|writer
operator|.
name|getIndexFileNames
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|files
operator|.
name|remove
argument_list|(
literal|"1.fnx"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|string
range|:
name|files
control|)
block|{
name|assertFalse
argument_list|(
name|string
operator|.
name|endsWith
argument_list|(
literal|".fnx"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|_TestUtil
operator|.
name|rmDir
argument_list|(
name|oldIndxeDir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|KeepAllDeletionPolicy
class|class
name|KeepAllDeletionPolicy
implements|implements
name|IndexDeletionPolicy
block|{
DECL|method|onInit
specifier|public
name|void
name|onInit
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|IndexCommit
argument_list|>
name|commits
parameter_list|)
throws|throws
name|IOException
block|{     }
DECL|method|onCommit
specifier|public
name|void
name|onCommit
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|IndexCommit
argument_list|>
name|commits
parameter_list|)
throws|throws
name|IOException
block|{     }
block|}
DECL|method|assertFNXFiles
specifier|public
specifier|static
name|void
name|assertFNXFiles
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
modifier|...
name|expectedFnxFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|listAll
init|=
name|dir
operator|.
name|listAll
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|fnxFiles
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|string
range|:
name|listAll
control|)
block|{
if|if
condition|(
name|string
operator|.
name|endsWith
argument_list|(
literal|".fnx"
argument_list|)
condition|)
block|{
name|fnxFiles
operator|.
name|add
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|""
operator|+
name|fnxFiles
argument_list|,
name|expectedFnxFiles
operator|.
name|length
argument_list|,
name|fnxFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|string
range|:
name|expectedFnxFiles
control|)
block|{
name|assertTrue
argument_list|(
literal|" missing fnx file: "
operator|+
name|string
argument_list|,
name|fnxFiles
operator|.
name|contains
argument_list|(
name|string
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
