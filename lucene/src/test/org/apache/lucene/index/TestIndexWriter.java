begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CachingTokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Fieldable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|CodecProvider
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
operator|.
name|Index
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
operator|.
name|Store
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
operator|.
name|TermVector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
operator|.
name|OpenMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PhraseQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanTermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Lock
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|LockFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|MockRAMDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|NoLockFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|SingleInstanceLockFactory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ThreadInterruptedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_class
DECL|class|TestIndexWriter
specifier|public
class|class
name|TestIndexWriter
extends|extends
name|LuceneTestCase
block|{
DECL|method|TestIndexWriter
specifier|public
name|TestIndexWriter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|testDocCount
specifier|public
name|void
name|testDocCount
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
literal|null
decl_stmt|;
name|IndexReader
name|reader
init|=
literal|null
decl_stmt|;
name|int
name|i
decl_stmt|;
name|long
name|savedWriteLockTimeout
init|=
name|IndexWriterConfig
operator|.
name|getDefaultWriteLockTimeout
argument_list|()
decl_stmt|;
try|try
block|{
name|IndexWriterConfig
operator|.
name|setDefaultWriteLockTimeout
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2000
argument_list|,
name|IndexWriterConfig
operator|.
name|getDefaultWriteLockTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IndexWriterConfig
operator|.
name|setDefaultWriteLockTimeout
argument_list|(
name|savedWriteLockTimeout
argument_list|)
expr_stmt|;
block|}
comment|// add 100 documents
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|writer
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// delete 40 documents
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|40
condition|;
name|i
operator|++
control|)
block|{
name|reader
operator|.
name|deleteDocument
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// test doc count before segments are merged/index is optimized
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|writer
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// optimize the index and check that the new doc count is correct
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|writer
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|writer
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|writer
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|writer
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// check that the index reader gives the same numbers.
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// make sure opening a new index for create over
comment|// this existing one works correctly:
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|writer
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|writer
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|addDoc
specifier|private
specifier|static
name|void
name|addDoc
parameter_list|(
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|addDocWithIndex
specifier|private
name|void
name|addDocWithIndex
parameter_list|(
name|IndexWriter
name|writer
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content"
argument_list|,
literal|"aaa "
operator|+
name|index
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|index
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|/*       Test: make sure when we run out of disk space or hit       random IOExceptions in any of the addIndexes(*) calls       that 1) index is not corrupt (searcher can open/search       it) and 2) transactional semantics are followed:       either all or none of the incoming documents were in       fact added.     */
DECL|method|testAddIndexOnDiskFull
specifier|public
name|void
name|testAddIndexOnDiskFull
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|START_COUNT
init|=
literal|57
decl_stmt|;
name|int
name|NUM_DIR
init|=
literal|50
decl_stmt|;
name|int
name|END_COUNT
init|=
name|START_COUNT
operator|+
name|NUM_DIR
operator|*
literal|25
decl_stmt|;
comment|// Build up a bunch of dirs that have indexes which we
comment|// will then merge together by calling addIndexes(*):
name|Directory
index|[]
name|dirs
init|=
operator|new
name|Directory
index|[
name|NUM_DIR
index|]
decl_stmt|;
name|long
name|inputDiskUsage
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_DIR
condition|;
name|i
operator|++
control|)
block|{
name|dirs
index|[
name|i
index|]
operator|=
operator|new
name|RAMDirectory
argument_list|()
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dirs
index|[
name|i
index|]
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|25
condition|;
name|j
operator|++
control|)
block|{
name|addDocWithIndex
argument_list|(
name|writer
argument_list|,
literal|25
operator|*
name|i
operator|+
name|j
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
index|[]
name|files
init|=
name|dirs
index|[
name|i
index|]
operator|.
name|listAll
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|files
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|inputDiskUsage
operator|+=
name|dirs
index|[
name|i
index|]
operator|.
name|fileLength
argument_list|(
name|files
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Now, build a starting index that has START_COUNT docs.  We
comment|// will then try to addIndexesNoOptimize into a copy of this:
name|RAMDirectory
name|startDir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|startDir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|START_COUNT
condition|;
name|j
operator|++
control|)
block|{
name|addDocWithIndex
argument_list|(
name|writer
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Make sure starting index seems to be working properly:
name|Term
name|searchTerm
init|=
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|)
decl_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|startDir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"first docFreq"
argument_list|,
literal|57
argument_list|,
name|reader
operator|.
name|docFreq
argument_list|(
name|searchTerm
argument_list|)
argument_list|)
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|searchTerm
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|"first number of hits"
argument_list|,
literal|57
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Iterate with larger and larger amounts of free
comment|// disk space.  With little free disk space,
comment|// addIndexes will certainly run out of space&
comment|// fail.  Verify that when this happens, index is
comment|// not corrupt and index in fact has added no
comment|// documents.  Then, we increase disk space by 2000
comment|// bytes each iteration.  At some point there is
comment|// enough free disk space and addIndexes should
comment|// succeed and index should show all documents were
comment|// added.
comment|// String[] files = startDir.listAll();
name|long
name|diskUsage
init|=
name|startDir
operator|.
name|sizeInBytes
argument_list|()
decl_stmt|;
name|long
name|startDiskUsage
init|=
literal|0
decl_stmt|;
name|String
index|[]
name|files
init|=
name|startDir
operator|.
name|listAll
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|startDiskUsage
operator|+=
name|startDir
operator|.
name|fileLength
argument_list|(
name|files
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|3
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: iter="
operator|+
name|iter
argument_list|)
expr_stmt|;
comment|// Start with 100 bytes more than we are currently using:
name|long
name|diskFree
init|=
name|diskUsage
operator|+
literal|100
decl_stmt|;
name|int
name|method
init|=
name|iter
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
name|String
name|methodName
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|method
condition|)
block|{
name|methodName
operator|=
literal|"addIndexes(Directory[]) + optimize()"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|1
operator|==
name|method
condition|)
block|{
name|methodName
operator|=
literal|"addIndexes(IndexReader[])"
expr_stmt|;
block|}
else|else
block|{
name|methodName
operator|=
literal|"addIndexes(Directory[])"
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|done
condition|)
block|{
comment|// Make a new dir that will enforce disk usage:
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|(
name|startDir
argument_list|)
decl_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|APPEND
argument_list|)
argument_list|)
expr_stmt|;
name|IOException
name|err
init|=
literal|null
decl_stmt|;
name|MergeScheduler
name|ms
init|=
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergeScheduler
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|2
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|ms
operator|instanceof
name|ConcurrentMergeScheduler
condition|)
comment|// This test intentionally produces exceptions
comment|// in the threads that CMS launches; we don't
comment|// want to pollute test output with these.
if|if
condition|(
literal|0
operator|==
name|x
condition|)
operator|(
operator|(
name|ConcurrentMergeScheduler
operator|)
name|ms
operator|)
operator|.
name|setSuppressExceptions
argument_list|()
expr_stmt|;
else|else
operator|(
operator|(
name|ConcurrentMergeScheduler
operator|)
name|ms
operator|)
operator|.
name|clearSuppressExceptions
argument_list|()
expr_stmt|;
comment|// Two loops: first time, limit disk space&
comment|// throw random IOExceptions; second time, no
comment|// disk space limit:
name|double
name|rate
init|=
literal|0.05
decl_stmt|;
name|double
name|diskRatio
init|=
operator|(
operator|(
name|double
operator|)
name|diskFree
operator|)
operator|/
name|diskUsage
decl_stmt|;
name|long
name|thisDiskFree
decl_stmt|;
name|String
name|testName
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|x
condition|)
block|{
name|thisDiskFree
operator|=
name|diskFree
expr_stmt|;
if|if
condition|(
name|diskRatio
operator|>=
literal|2.0
condition|)
block|{
name|rate
operator|/=
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|diskRatio
operator|>=
literal|4.0
condition|)
block|{
name|rate
operator|/=
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|diskRatio
operator|>=
literal|6.0
condition|)
block|{
name|rate
operator|=
literal|0.0
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
name|testName
operator|=
literal|"disk full test "
operator|+
name|methodName
operator|+
literal|" with disk full at "
operator|+
name|diskFree
operator|+
literal|" bytes"
expr_stmt|;
block|}
else|else
block|{
name|thisDiskFree
operator|=
literal|0
expr_stmt|;
name|rate
operator|=
literal|0.0
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|testName
operator|=
literal|"disk full test "
operator|+
name|methodName
operator|+
literal|" with unlimited disk space"
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\ncycle: "
operator|+
name|testName
argument_list|)
expr_stmt|;
name|dir
operator|.
name|setMaxSizeInBytes
argument_list|(
name|thisDiskFree
argument_list|)
expr_stmt|;
name|dir
operator|.
name|setRandomIOExceptionRate
argument_list|(
name|rate
argument_list|,
name|diskFree
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
literal|0
operator|==
name|method
condition|)
block|{
name|writer
operator|.
name|addIndexes
argument_list|(
name|dirs
argument_list|)
expr_stmt|;
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|1
operator|==
name|method
condition|)
block|{
name|IndexReader
name|readers
index|[]
init|=
operator|new
name|IndexReader
index|[
name|dirs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|readers
index|[
name|i
index|]
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dirs
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|writer
operator|.
name|addIndexes
argument_list|(
name|readers
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|readers
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|writer
operator|.
name|addIndexes
argument_list|(
name|dirs
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  success!"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|0
operator|==
name|x
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
name|err
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  hit IOException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|1
operator|==
name|x
condition|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|methodName
operator|+
literal|" hit IOException after disk space was freed up"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Make sure all threads from
comment|// ConcurrentMergeScheduler are done
name|_TestUtil
operator|.
name|syncConcurrentMerges
argument_list|(
name|writer
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  now test readers"
argument_list|)
expr_stmt|;
block|}
comment|// Finally, verify index is not corrupt, and, if
comment|// we succeeded, we see all docs added, and if we
comment|// failed, we see either all docs or no docs added
comment|// (transactional semantics):
try|try
block|{
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|testName
operator|+
literal|": exception when creating IndexReader: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|int
name|result
init|=
name|reader
operator|.
name|docFreq
argument_list|(
name|searchTerm
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
condition|)
block|{
if|if
condition|(
name|result
operator|!=
name|START_COUNT
condition|)
block|{
name|fail
argument_list|(
name|testName
operator|+
literal|": method did not throw exception but docFreq('aaa') is "
operator|+
name|result
operator|+
literal|" instead of expected "
operator|+
name|START_COUNT
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// On hitting exception we still may have added
comment|// all docs:
if|if
condition|(
name|result
operator|!=
name|START_COUNT
operator|&&
name|result
operator|!=
name|END_COUNT
condition|)
block|{
name|err
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|testName
operator|+
literal|": method did throw exception but docFreq('aaa') is "
operator|+
name|result
operator|+
literal|" instead of expected "
operator|+
name|START_COUNT
operator|+
literal|" or "
operator|+
name|END_COUNT
argument_list|)
expr_stmt|;
block|}
block|}
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
try|try
block|{
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|searchTerm
argument_list|)
argument_list|,
literal|null
argument_list|,
name|END_COUNT
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|testName
operator|+
literal|": exception when searching: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|int
name|result2
init|=
name|hits
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|success
condition|)
block|{
if|if
condition|(
name|result2
operator|!=
name|result
condition|)
block|{
name|fail
argument_list|(
name|testName
operator|+
literal|": method did not throw exception but hits.length for search on term 'aaa' is "
operator|+
name|result2
operator|+
literal|" instead of expected "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// On hitting exception we still may have added
comment|// all docs:
if|if
condition|(
name|result2
operator|!=
name|result
condition|)
block|{
name|err
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|testName
operator|+
literal|": method did throw exception but hits.length for search on term 'aaa' is "
operator|+
name|result2
operator|+
literal|" instead of expected "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
block|}
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  count is "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|done
operator|||
name|result
operator|==
name|END_COUNT
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  start disk = "
operator|+
name|startDiskUsage
operator|+
literal|"; input disk = "
operator|+
name|inputDiskUsage
operator|+
literal|"; max used = "
operator|+
name|dir
operator|.
name|getMaxUsedSizeInBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|done
condition|)
block|{
comment|// Javadocs state that temp free Directory space
comment|// required is at most 2X total input size of
comment|// indices so let's make sure:
name|assertTrue
argument_list|(
literal|"max free Directory space required exceeded 1X the total input index sizes during "
operator|+
name|methodName
operator|+
literal|": max temp usage = "
operator|+
operator|(
name|dir
operator|.
name|getMaxUsedSizeInBytes
argument_list|()
operator|-
name|startDiskUsage
operator|)
operator|+
literal|" bytes; "
operator|+
literal|"starting disk usage = "
operator|+
name|startDiskUsage
operator|+
literal|" bytes; "
operator|+
literal|"input index disk usage = "
operator|+
name|inputDiskUsage
operator|+
literal|" bytes"
argument_list|,
operator|(
name|dir
operator|.
name|getMaxUsedSizeInBytes
argument_list|()
operator|-
name|startDiskUsage
operator|)
operator|<
literal|2
operator|*
operator|(
name|startDiskUsage
operator|+
name|inputDiskUsage
operator|)
argument_list|)
expr_stmt|;
block|}
comment|// Make sure we don't hit disk full during close below:
name|dir
operator|.
name|setMaxSizeInBytes
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dir
operator|.
name|setRandomIOExceptionRate
argument_list|(
literal|0.0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Wait for all BG threads to finish else
comment|// dir.close() will throw IOException because
comment|// there are still open files
name|_TestUtil
operator|.
name|syncConcurrentMerges
argument_list|(
name|ms
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Try again with 5000 more bytes of free space:
name|diskFree
operator|+=
literal|5000
expr_stmt|;
block|}
block|}
name|startDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/*      * Make sure IndexWriter cleans up on hitting a disk      * full exception in addDocument.      */
DECL|method|testAddDocumentOnDiskFull
specifier|public
name|void
name|testAddDocumentOnDiskFull
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|pass
init|=
literal|0
init|;
name|pass
operator|<
literal|2
condition|;
name|pass
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: pass="
operator|+
name|pass
argument_list|)
expr_stmt|;
name|boolean
name|doAbort
init|=
name|pass
operator|==
literal|1
decl_stmt|;
name|long
name|diskFree
init|=
literal|200
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: cycle: diskFree="
operator|+
name|diskFree
argument_list|)
expr_stmt|;
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|dir
operator|.
name|setMaxSizeInBytes
argument_list|(
name|diskFree
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|MergeScheduler
name|ms
init|=
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergeScheduler
argument_list|()
decl_stmt|;
if|if
condition|(
name|ms
operator|instanceof
name|ConcurrentMergeScheduler
condition|)
comment|// This test intentionally produces exceptions
comment|// in the threads that CMS launches; we don't
comment|// want to pollute test output with these.
operator|(
operator|(
name|ConcurrentMergeScheduler
operator|)
name|ms
operator|)
operator|.
name|setSuppressExceptions
argument_list|()
expr_stmt|;
name|boolean
name|hitError
init|=
literal|false
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|200
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: exception on addDoc"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
name|hitError
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|hitError
condition|)
block|{
if|if
condition|(
name|doAbort
condition|)
block|{
name|writer
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: exception on close"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
name|dir
operator|.
name|setMaxSizeInBytes
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|_TestUtil
operator|.
name|syncConcurrentMerges
argument_list|(
name|ms
argument_list|)
expr_stmt|;
name|assertNoUnreferencedFiles
argument_list|(
name|dir
argument_list|,
literal|"after disk full during addDocument"
argument_list|)
expr_stmt|;
comment|// Make sure reader can open the index:
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now try again w/ more space:
name|diskFree
operator|+=
literal|500
expr_stmt|;
block|}
else|else
block|{
name|_TestUtil
operator|.
name|syncConcurrentMerges
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
DECL|method|assertNoUnreferencedFiles
specifier|public
specifier|static
name|void
name|assertNoUnreferencedFiles
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|startFiles
init|=
name|dir
operator|.
name|listAll
argument_list|()
decl_stmt|;
name|SegmentInfos
name|infos
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|infos
operator|.
name|read
argument_list|(
name|dir
argument_list|)
expr_stmt|;
operator|new
name|IndexFileDeleter
argument_list|(
name|dir
argument_list|,
operator|new
name|KeepOnlyLastCommitDeletionPolicy
argument_list|()
argument_list|,
name|infos
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|CodecProvider
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|endFiles
init|=
name|dir
operator|.
name|listAll
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|startFiles
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|endFiles
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|startFiles
argument_list|,
name|endFiles
argument_list|)
condition|)
block|{
name|fail
argument_list|(
name|message
operator|+
literal|": before delete:\n    "
operator|+
name|arrayToString
argument_list|(
name|startFiles
argument_list|)
operator|+
literal|"\n  after delete:\n    "
operator|+
name|arrayToString
argument_list|(
name|endFiles
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testOptimizeMaxNumSegments
specifier|public
name|void
name|testOptimizeMaxNumSegments
parameter_list|()
throws|throws
name|IOException
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
specifier|final
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|numDocs
init|=
literal|38
init|;
name|numDocs
operator|<
literal|500
condition|;
name|numDocs
operator|+=
literal|38
control|)
block|{
name|LogDocMergePolicy
name|ldmp
init|=
operator|new
name|LogDocMergePolicy
argument_list|()
decl_stmt|;
name|ldmp
operator|.
name|setMinMergeDocs
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ldmp
operator|.
name|setMergeFactor
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|CREATE
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|ldmp
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numDocs
condition|;
name|j
operator|++
control|)
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentInfos
name|sis
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|sis
operator|.
name|read
argument_list|(
name|dir
argument_list|)
expr_stmt|;
specifier|final
name|int
name|segCount
init|=
name|sis
operator|.
name|size
argument_list|()
decl_stmt|;
name|ldmp
operator|=
operator|new
name|LogDocMergePolicy
argument_list|()
expr_stmt|;
name|ldmp
operator|.
name|setMergeFactor
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|ldmp
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|optimize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|sis
operator|=
operator|new
name|SegmentInfos
argument_list|()
expr_stmt|;
name|sis
operator|.
name|read
argument_list|(
name|dir
argument_list|)
expr_stmt|;
specifier|final
name|int
name|optSegCount
init|=
name|sis
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|segCount
operator|<
literal|3
condition|)
name|assertEquals
argument_list|(
name|segCount
argument_list|,
name|optSegCount
argument_list|)
expr_stmt|;
else|else
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|optSegCount
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testOptimizeMaxNumSegments2
specifier|public
name|void
name|testOptimizeMaxNumSegments2
parameter_list|()
throws|throws
name|IOException
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
specifier|final
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|LogDocMergePolicy
name|ldmp
init|=
operator|new
name|LogDocMergePolicy
argument_list|()
decl_stmt|;
name|ldmp
operator|.
name|setMinMergeDocs
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ldmp
operator|.
name|setMergeFactor
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|ldmp
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|10
condition|;
name|iter
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|19
condition|;
name|i
operator|++
control|)
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ConcurrentMergeScheduler
operator|)
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergeScheduler
argument_list|()
operator|)
operator|.
name|sync
argument_list|()
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|SegmentInfos
name|sis
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|sis
operator|.
name|read
argument_list|(
name|dir
argument_list|)
expr_stmt|;
specifier|final
name|int
name|segCount
init|=
name|sis
operator|.
name|size
argument_list|()
decl_stmt|;
name|writer
operator|.
name|optimize
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|sis
operator|=
operator|new
name|SegmentInfos
argument_list|()
expr_stmt|;
operator|(
operator|(
name|ConcurrentMergeScheduler
operator|)
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergeScheduler
argument_list|()
operator|)
operator|.
name|sync
argument_list|()
expr_stmt|;
name|sis
operator|.
name|read
argument_list|(
name|dir
argument_list|)
expr_stmt|;
specifier|final
name|int
name|optSegCount
init|=
name|sis
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|segCount
operator|<
literal|7
condition|)
name|assertEquals
argument_list|(
name|segCount
argument_list|,
name|optSegCount
argument_list|)
expr_stmt|;
else|else
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|optSegCount
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Make sure optimize doesn't use any more than 1X      * starting index size as its temporary free space      * required.      */
DECL|method|testOptimizeTempSpaceUsage
specifier|public
name|void
name|testOptimizeTempSpaceUsage
parameter_list|()
throws|throws
name|IOException
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|500
condition|;
name|j
operator|++
control|)
block|{
name|addDocWithIndex
argument_list|(
name|writer
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|startDiskUsage
init|=
literal|0
decl_stmt|;
name|String
index|[]
name|files
init|=
name|dir
operator|.
name|listAll
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|startDiskUsage
operator|+=
name|dir
operator|.
name|fileLength
argument_list|(
name|files
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|dir
operator|.
name|resetMaxUsedSizeInBytes
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|APPEND
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|maxDiskUsage
init|=
name|dir
operator|.
name|getMaxUsedSizeInBytes
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"optimized used too much temporary space: starting usage was "
operator|+
name|startDiskUsage
operator|+
literal|" bytes; max temp usage was "
operator|+
name|maxDiskUsage
operator|+
literal|" but should have been "
operator|+
operator|(
literal|2
operator|*
name|startDiskUsage
operator|)
operator|+
literal|" (= 2X starting usage)"
argument_list|,
name|maxDiskUsage
operator|<=
literal|2
operator|*
name|startDiskUsage
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|arrayToString
specifier|static
name|String
name|arrayToString
parameter_list|(
name|String
index|[]
name|l
parameter_list|)
block|{
name|String
name|s
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|s
operator|+=
literal|"\n    "
expr_stmt|;
block|}
name|s
operator|+=
name|l
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
comment|// Make sure we can open an index for create even when a
comment|// reader holds it open (this fails pre lock-less
comment|// commits on windows):
DECL|method|testCreateWithReader
specifier|public
name|void
name|testCreateWithReader
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|indexDir
init|=
name|_TestUtil
operator|.
name|getTempDir
argument_list|(
literal|"lucenetestindexwriter"
argument_list|)
decl_stmt|;
try|try
block|{
name|Directory
name|dir
init|=
name|FSDirectory
operator|.
name|open
argument_list|(
name|indexDir
argument_list|)
decl_stmt|;
comment|// add one document& close writer
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// now open reader:
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"should be one document"
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// now open index for create:
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"should be zero documents"
argument_list|,
name|writer
operator|.
name|maxDoc
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"should be one document"
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|IndexReader
name|reader2
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"should be one document"
argument_list|,
name|reader2
operator|.
name|numDocs
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rmDir
argument_list|(
name|indexDir
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Simulate a writer that crashed while writing segments
comment|// file: make sure we can still open the index (ie,
comment|// gracefully fallback to the previous segments file),
comment|// and that we can add to the index:
DECL|method|testSimulatedCrashedWriter
specifier|public
name|void
name|testSimulatedCrashedWriter
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
literal|null
decl_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// add 100 documents
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
comment|// close
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|gen
init|=
name|SegmentInfos
operator|.
name|getCurrentSegmentGeneration
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"segment generation should be> 0 but got "
operator|+
name|gen
argument_list|,
name|gen
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Make the next segments file, with last byte
comment|// missing, to simulate a writer that crashed while
comment|// writing segments file:
name|String
name|fileNameIn
init|=
name|SegmentInfos
operator|.
name|getCurrentSegmentFileName
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|String
name|fileNameOut
init|=
name|IndexFileNames
operator|.
name|fileNameFromGeneration
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS
argument_list|,
literal|""
argument_list|,
literal|1
operator|+
name|gen
argument_list|)
decl_stmt|;
name|IndexInput
name|in
init|=
name|dir
operator|.
name|openInput
argument_list|(
name|fileNameIn
argument_list|)
decl_stmt|;
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|fileNameOut
argument_list|)
decl_stmt|;
name|long
name|length
init|=
name|in
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"reader failed to open on a crashed index"
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"writer failed to open on a crashed index"
argument_list|)
expr_stmt|;
block|}
comment|// add 100 documents
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
comment|// close
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Simulate a corrupt index by removing last byte of
comment|// latest segments file and make sure we get an
comment|// IOException trying to open the index:
DECL|method|testSimulatedCorruptIndex1
specifier|public
name|void
name|testSimulatedCorruptIndex1
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
literal|null
decl_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// add 100 documents
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
comment|// close
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|gen
init|=
name|SegmentInfos
operator|.
name|getCurrentSegmentGeneration
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"segment generation should be> 0 but got "
operator|+
name|gen
argument_list|,
name|gen
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|fileNameIn
init|=
name|SegmentInfos
operator|.
name|getCurrentSegmentFileName
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|String
name|fileNameOut
init|=
name|IndexFileNames
operator|.
name|fileNameFromGeneration
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS
argument_list|,
literal|""
argument_list|,
literal|1
operator|+
name|gen
argument_list|)
decl_stmt|;
name|IndexInput
name|in
init|=
name|dir
operator|.
name|openInput
argument_list|(
name|fileNameIn
argument_list|)
decl_stmt|;
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|fileNameOut
argument_list|)
decl_stmt|;
name|long
name|length
init|=
name|in
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|deleteFile
argument_list|(
name|fileNameIn
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"reader did not hit IOException on opening a corrupt index"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{         }
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testChangesAfterClose
specifier|public
name|void
name|testChangesAfterClose
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
literal|null
decl_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
comment|// close
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit AlreadyClosedException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
comment|// Simulate a corrupt index by removing one of the cfs
comment|// files and make sure we get an IOException trying to
comment|// open the index:
DECL|method|testSimulatedCorruptIndex2
specifier|public
name|void
name|testSimulatedCorruptIndex2
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
literal|null
decl_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// add 100 documents
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
comment|// close
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|gen
init|=
name|SegmentInfos
operator|.
name|getCurrentSegmentGeneration
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"segment generation should be> 0 but got "
operator|+
name|gen
argument_list|,
name|gen
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
index|[]
name|files
init|=
name|dir
operator|.
name|listAll
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|files
index|[
name|i
index|]
operator|.
name|endsWith
argument_list|(
literal|".cfs"
argument_list|)
condition|)
block|{
name|dir
operator|.
name|deleteFile
argument_list|(
name|files
index|[
name|i
index|]
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|IndexReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"reader did not hit IOException on opening a corrupt index"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{         }
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*      * Simple test for "commit on close": open writer then      * add a bunch of docs, making sure reader does not see      * these docs until writer is closed.      */
DECL|method|testCommitOnClose
specifier|public
name|void
name|testCommitOnClose
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|14
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Term
name|searchTerm
init|=
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|searchTerm
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|"first number of hits"
argument_list|,
literal|14
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|11
condition|;
name|j
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|searchTerm
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reader incorrectly sees changes from writer"
argument_list|,
literal|14
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"reader should have still been current"
argument_list|,
name|reader
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Now, close the writer:
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"reader should not be current now"
argument_list|,
name|reader
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|searchTerm
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reader did not see changes after writer was closed"
argument_list|,
literal|47
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/*      * Simple test for "commit on close": open writer, then      * add a bunch of docs, making sure reader does not see      * them until writer has closed.  Then instead of      * closing the writer, call abort and verify reader sees      * nothing was added.  Then verify we can open the index      * and add docs to it.      */
DECL|method|testCommitOnCloseAbort
specifier|public
name|void
name|testCommitOnCloseAbort
parameter_list|()
throws|throws
name|IOException
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|14
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Term
name|searchTerm
init|=
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|searchTerm
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|"first number of hits"
argument_list|,
literal|14
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|APPEND
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|17
condition|;
name|j
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
comment|// Delete all docs:
name|writer
operator|.
name|deleteDocuments
argument_list|(
name|searchTerm
argument_list|)
expr_stmt|;
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|searchTerm
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reader incorrectly sees changes from writer"
argument_list|,
literal|14
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now, close the writer:
name|writer
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|assertNoUnreferencedFiles
argument_list|(
name|dir
argument_list|,
literal|"unreferenced files remain after rollback()"
argument_list|)
expr_stmt|;
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|searchTerm
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"saw changes after writer.abort"
argument_list|,
literal|14
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now make sure we can re-open the index, add docs,
comment|// and all is good:
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|APPEND
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
comment|// On abort, writer in fact may write to the same
comment|// segments_N file:
name|dir
operator|.
name|setPreventDoubleWrite
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|12
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|17
condition|;
name|j
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|searchTerm
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reader incorrectly sees changes from writer"
argument_list|,
literal|14
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|searchTerm
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"didn't see changes after close"
argument_list|,
literal|218
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/*      * Verify that a writer with "commit on close" indeed      * cleans up the temp segments created after opening      * that are not referenced by the starting segments      * file.  We check this by using MockRAMDirectory to      * measure max temp disk space used.      */
DECL|method|testCommitOnCloseDiskUsage
specifier|public
name|void
name|testCommitOnCloseDiskUsage
parameter_list|()
throws|throws
name|IOException
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|30
condition|;
name|j
operator|++
control|)
block|{
name|addDocWithIndex
argument_list|(
name|writer
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|resetMaxUsedSizeInBytes
argument_list|()
expr_stmt|;
name|long
name|startDiskUsage
init|=
name|dir
operator|.
name|getMaxUsedSizeInBytes
argument_list|()
decl_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|APPEND
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|10
argument_list|)
operator|.
name|setMergeScheduler
argument_list|(
operator|new
name|SerialMergeScheduler
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|1470
condition|;
name|j
operator|++
control|)
block|{
name|addDocWithIndex
argument_list|(
name|writer
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
name|long
name|midDiskUsage
init|=
name|dir
operator|.
name|getMaxUsedSizeInBytes
argument_list|()
decl_stmt|;
name|dir
operator|.
name|resetMaxUsedSizeInBytes
argument_list|()
expr_stmt|;
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|endDiskUsage
init|=
name|dir
operator|.
name|getMaxUsedSizeInBytes
argument_list|()
decl_stmt|;
comment|// Ending index is 50X as large as starting index; due
comment|// to 2X disk usage normally we allow 100X max
comment|// transient usage.  If something is wrong w/ deleter
comment|// and it doesn't delete intermediate segments then it
comment|// will exceed this 100X:
comment|// System.out.println("start " + startDiskUsage + "; mid " + midDiskUsage + ";end " + endDiskUsage);
name|assertTrue
argument_list|(
literal|"writer used too much space while adding documents: mid="
operator|+
name|midDiskUsage
operator|+
literal|" start="
operator|+
name|startDiskUsage
operator|+
literal|" end="
operator|+
name|endDiskUsage
argument_list|,
name|midDiskUsage
operator|<
literal|100
operator|*
name|startDiskUsage
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"writer used too much space after close: endDiskUsage="
operator|+
name|endDiskUsage
operator|+
literal|" startDiskUsage="
operator|+
name|startDiskUsage
argument_list|,
name|endDiskUsage
operator|<
literal|100
operator|*
name|startDiskUsage
argument_list|)
expr_stmt|;
block|}
comment|/*      * Verify that calling optimize when writer is open for      * "commit on close" works correctly both for rollback()      * and close().      */
DECL|method|testCommitOnCloseOptimize
specifier|public
name|void
name|testCommitOnCloseOptimize
parameter_list|()
throws|throws
name|IOException
block|{
name|RAMDirectory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|17
condition|;
name|j
operator|++
control|)
block|{
name|addDocWithIndex
argument_list|(
name|writer
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|APPEND
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
comment|// Open a reader before closing (commiting) the writer:
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Reader should see index as unoptimized at this
comment|// point:
name|assertFalse
argument_list|(
literal|"Reader incorrectly sees that the index is optimized"
argument_list|,
name|reader
operator|.
name|isOptimized
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Abort the writer:
name|writer
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|assertNoUnreferencedFiles
argument_list|(
name|dir
argument_list|,
literal|"aborted writer after optimize"
argument_list|)
expr_stmt|;
comment|// Open a reader after aborting writer:
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Reader should still see index as unoptimized:
name|assertFalse
argument_list|(
literal|"Reader incorrectly sees that the index is optimized"
argument_list|,
name|reader
operator|.
name|isOptimized
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|APPEND
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertNoUnreferencedFiles
argument_list|(
name|dir
argument_list|,
literal|"aborted writer after optimize"
argument_list|)
expr_stmt|;
comment|// Open a reader after aborting writer:
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Reader should still see index as unoptimized:
name|assertTrue
argument_list|(
literal|"Reader incorrectly sees that the index is unoptimized"
argument_list|,
name|reader
operator|.
name|isOptimized
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testIndexNoDocuments
specifier|public
name|void
name|testIndexNoDocuments
parameter_list|()
throws|throws
name|IOException
block|{
name|RAMDirectory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|APPEND
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testManyFields
specifier|public
name|void
name|testManyFields
parameter_list|()
throws|throws
name|IOException
block|{
name|RAMDirectory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
name|j
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"a"
operator|+
name|j
argument_list|,
literal|"aaa"
operator|+
name|j
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"b"
operator|+
name|j
argument_list|,
literal|"aaa"
operator|+
name|j
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"c"
operator|+
name|j
argument_list|,
literal|"aaa"
operator|+
name|j
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"d"
operator|+
name|j
argument_list|,
literal|"aaa"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"e"
operator|+
name|j
argument_list|,
literal|"aaa"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f"
operator|+
name|j
argument_list|,
literal|"aaa"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
name|j
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|docFreq
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
operator|+
name|j
argument_list|,
literal|"aaa"
operator|+
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|docFreq
argument_list|(
operator|new
name|Term
argument_list|(
literal|"b"
operator|+
name|j
argument_list|,
literal|"aaa"
operator|+
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|docFreq
argument_list|(
operator|new
name|Term
argument_list|(
literal|"c"
operator|+
name|j
argument_list|,
literal|"aaa"
operator|+
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|docFreq
argument_list|(
operator|new
name|Term
argument_list|(
literal|"d"
operator|+
name|j
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|docFreq
argument_list|(
operator|new
name|Term
argument_list|(
literal|"e"
operator|+
name|j
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|docFreq
argument_list|(
operator|new
name|Term
argument_list|(
literal|"f"
operator|+
name|j
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSmallRAMBuffer
specifier|public
name|void
name|testSmallRAMBuffer
parameter_list|()
throws|throws
name|IOException
block|{
name|RAMDirectory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setRAMBufferSizeMB
argument_list|(
literal|0.000001
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|lastNumFile
init|=
name|dir
operator|.
name|listAll
argument_list|()
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|9
condition|;
name|j
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"aaa"
operator|+
name|j
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|int
name|numFile
init|=
name|dir
operator|.
name|listAll
argument_list|()
operator|.
name|length
decl_stmt|;
comment|// Verify that with a tiny RAM buffer we see new
comment|// segment after every doc
name|assertTrue
argument_list|(
name|numFile
operator|>
name|lastNumFile
argument_list|)
expr_stmt|;
name|lastNumFile
operator|=
name|numFile
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Make sure it's OK to change RAM buffer size and // maxBufferedDocs in a      * write session      *       * @deprecated after all the setters on IW go away (4.0), this test can be      *             removed because changing ram buffer settings during a write      *             session won't be possible.      */
DECL|method|testChangingRAMBuffer
specifier|public
name|void
name|testChangingRAMBuffer
parameter_list|()
throws|throws
name|IOException
block|{
name|RAMDirectory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|10
argument_list|)
operator|.
name|setRAMBufferSizeMB
argument_list|(
name|IndexWriterConfig
operator|.
name|DISABLE_AUTO_FLUSH
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|lastFlushCount
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
literal|52
condition|;
name|j
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"aaa"
operator|+
name|j
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|_TestUtil
operator|.
name|syncConcurrentMerges
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|int
name|flushCount
init|=
name|writer
operator|.
name|getFlushCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|j
operator|==
literal|1
condition|)
name|lastFlushCount
operator|=
name|flushCount
expr_stmt|;
elseif|else
if|if
condition|(
name|j
operator|<
literal|10
condition|)
comment|// No new files should be created
name|assertEquals
argument_list|(
name|flushCount
argument_list|,
name|lastFlushCount
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
literal|10
operator|==
name|j
condition|)
block|{
name|assertTrue
argument_list|(
name|flushCount
operator|>
name|lastFlushCount
argument_list|)
expr_stmt|;
name|lastFlushCount
operator|=
name|flushCount
expr_stmt|;
name|writer
operator|.
name|setRAMBufferSizeMB
argument_list|(
literal|0.000001
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setMaxBufferedDocs
argument_list|(
name|IndexWriterConfig
operator|.
name|DISABLE_AUTO_FLUSH
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|j
operator|<
literal|20
condition|)
block|{
name|assertTrue
argument_list|(
name|flushCount
operator|>
name|lastFlushCount
argument_list|)
expr_stmt|;
name|lastFlushCount
operator|=
name|flushCount
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|20
operator|==
name|j
condition|)
block|{
name|writer
operator|.
name|setRAMBufferSizeMB
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setMaxBufferedDocs
argument_list|(
name|IndexWriterConfig
operator|.
name|DISABLE_AUTO_FLUSH
argument_list|)
expr_stmt|;
name|lastFlushCount
operator|=
name|flushCount
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|j
operator|<
literal|30
condition|)
block|{
name|assertEquals
argument_list|(
name|flushCount
argument_list|,
name|lastFlushCount
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|30
operator|==
name|j
condition|)
block|{
name|writer
operator|.
name|setRAMBufferSizeMB
argument_list|(
literal|0.000001
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setMaxBufferedDocs
argument_list|(
name|IndexWriterConfig
operator|.
name|DISABLE_AUTO_FLUSH
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|j
operator|<
literal|40
condition|)
block|{
name|assertTrue
argument_list|(
name|flushCount
operator|>
name|lastFlushCount
argument_list|)
expr_stmt|;
name|lastFlushCount
operator|=
name|flushCount
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|40
operator|==
name|j
condition|)
block|{
name|writer
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setRAMBufferSizeMB
argument_list|(
name|IndexWriterConfig
operator|.
name|DISABLE_AUTO_FLUSH
argument_list|)
expr_stmt|;
name|lastFlushCount
operator|=
name|flushCount
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|j
operator|<
literal|50
condition|)
block|{
name|assertEquals
argument_list|(
name|flushCount
argument_list|,
name|lastFlushCount
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setRAMBufferSizeMB
argument_list|(
name|IndexWriterConfig
operator|.
name|DISABLE_AUTO_FLUSH
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|50
operator|==
name|j
condition|)
block|{
name|assertTrue
argument_list|(
name|flushCount
operator|>
name|lastFlushCount
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * @deprecated after setters on IW go away, this test can be deleted because      *             changing those settings on IW won't be possible.      */
DECL|method|testChangingRAMBuffer2
specifier|public
name|void
name|testChangingRAMBuffer2
parameter_list|()
throws|throws
name|IOException
block|{
name|RAMDirectory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|10
argument_list|)
operator|.
name|setMaxBufferedDeleteTerms
argument_list|(
literal|10
argument_list|)
operator|.
name|setRAMBufferSizeMB
argument_list|(
name|IndexWriterConfig
operator|.
name|DISABLE_AUTO_FLUSH
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
literal|52
condition|;
name|j
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"aaa"
operator|+
name|j
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|int
name|lastFlushCount
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
literal|52
condition|;
name|j
operator|++
control|)
block|{
name|writer
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaa"
operator|+
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|_TestUtil
operator|.
name|syncConcurrentMerges
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|int
name|flushCount
init|=
name|writer
operator|.
name|getFlushCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|j
operator|==
literal|1
condition|)
name|lastFlushCount
operator|=
name|flushCount
expr_stmt|;
elseif|else
if|if
condition|(
name|j
operator|<
literal|10
condition|)
block|{
comment|// No new files should be created
name|assertEquals
argument_list|(
name|flushCount
argument_list|,
name|lastFlushCount
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|10
operator|==
name|j
condition|)
block|{
name|assertTrue
argument_list|(
name|flushCount
operator|>
name|lastFlushCount
argument_list|)
expr_stmt|;
name|lastFlushCount
operator|=
name|flushCount
expr_stmt|;
name|writer
operator|.
name|setRAMBufferSizeMB
argument_list|(
literal|0.000001
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setMaxBufferedDeleteTerms
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|j
operator|<
literal|20
condition|)
block|{
name|assertTrue
argument_list|(
name|flushCount
operator|>
name|lastFlushCount
argument_list|)
expr_stmt|;
name|lastFlushCount
operator|=
name|flushCount
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|20
operator|==
name|j
condition|)
block|{
name|writer
operator|.
name|setRAMBufferSizeMB
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setMaxBufferedDeleteTerms
argument_list|(
name|IndexWriterConfig
operator|.
name|DISABLE_AUTO_FLUSH
argument_list|)
expr_stmt|;
name|lastFlushCount
operator|=
name|flushCount
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|j
operator|<
literal|30
condition|)
block|{
name|assertEquals
argument_list|(
name|flushCount
argument_list|,
name|lastFlushCount
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|30
operator|==
name|j
condition|)
block|{
name|writer
operator|.
name|setRAMBufferSizeMB
argument_list|(
literal|0.000001
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setMaxBufferedDeleteTerms
argument_list|(
name|IndexWriterConfig
operator|.
name|DISABLE_AUTO_FLUSH
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setMaxBufferedDeleteTerms
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|j
operator|<
literal|40
condition|)
block|{
name|assertTrue
argument_list|(
name|flushCount
operator|>
name|lastFlushCount
argument_list|)
expr_stmt|;
name|lastFlushCount
operator|=
name|flushCount
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|40
operator|==
name|j
condition|)
block|{
name|writer
operator|.
name|setMaxBufferedDeleteTerms
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setRAMBufferSizeMB
argument_list|(
name|IndexWriterConfig
operator|.
name|DISABLE_AUTO_FLUSH
argument_list|)
expr_stmt|;
name|lastFlushCount
operator|=
name|flushCount
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|j
operator|<
literal|50
condition|)
block|{
name|assertEquals
argument_list|(
name|flushCount
argument_list|,
name|lastFlushCount
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setMaxBufferedDeleteTerms
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setRAMBufferSizeMB
argument_list|(
name|IndexWriterConfig
operator|.
name|DISABLE_AUTO_FLUSH
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|50
operator|==
name|j
condition|)
block|{
name|assertTrue
argument_list|(
name|flushCount
operator|>
name|lastFlushCount
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testDiverseDocs
specifier|public
name|void
name|testDiverseDocs
parameter_list|()
throws|throws
name|IOException
block|{
name|RAMDirectory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setRAMBufferSizeMB
argument_list|(
literal|0.5
argument_list|)
argument_list|)
decl_stmt|;
name|Random
name|rand
init|=
name|newRandom
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
comment|// First, docs where every term is unique (heavy on
comment|// Posting instances)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
name|j
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|100
condition|;
name|k
operator|++
control|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|()
argument_list|)
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|// Next, many single term docs where only one term
comment|// occurs (heavy on byte blocks)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
name|j
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"aaa aaa aaa aaa aaa aaa aaa aaa aaa aaa"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|// Next, many single term docs where only one term
comment|// occurs but the terms are very long (heavy on
comment|// char[] arrays)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
name|j
operator|++
control|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|x
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|j
argument_list|)
operator|+
literal|"."
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|1000
condition|;
name|k
operator|++
control|)
name|b
operator|.
name|append
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|String
name|longTerm
init|=
name|b
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
name|longTerm
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|300
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testEnablingNorms
specifier|public
name|void
name|testEnablingNorms
parameter_list|()
throws|throws
name|IOException
block|{
name|RAMDirectory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
comment|// Enable norms for only 1 doc, pre flush
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Field
name|f
init|=
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"aaa"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
decl_stmt|;
if|if
condition|(
name|j
operator|!=
literal|8
condition|)
block|{
name|f
operator|.
name|setOmitNorms
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Term
name|searchTerm
init|=
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaa"
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|searchTerm
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|CREATE
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
comment|// Enable norms for only 1 doc, post flush
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|27
condition|;
name|j
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Field
name|f
init|=
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"aaa"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
decl_stmt|;
if|if
condition|(
name|j
operator|!=
literal|26
condition|)
block|{
name|f
operator|.
name|setOmitNorms
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|searcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|searchTerm
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|27
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testHighFreqTerm
specifier|public
name|void
name|testHighFreqTerm
parameter_list|()
throws|throws
name|IOException
block|{
name|RAMDirectory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxFieldLength
argument_list|(
literal|100000000
argument_list|)
operator|.
name|setRAMBufferSizeMB
argument_list|(
literal|0.01
argument_list|)
argument_list|)
decl_stmt|;
comment|// Massive doc that has 128 K a's
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4096
condition|;
name|i
operator|++
control|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|" a a a a a a a a"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|" a a a a a a a a"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|" a a a a a a a a"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|" a a a a a a a a"
argument_list|)
expr_stmt|;
block|}
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
name|b
operator|.
name|toString
argument_list|()
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|Term
name|t
init|=
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|docFreq
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|DocsEnum
name|td
init|=
name|MultiFields
operator|.
name|getTermDocsEnum
argument_list|(
name|reader
argument_list|,
name|MultiFields
operator|.
name|getDeletedDocs
argument_list|(
name|reader
argument_list|)
argument_list|,
literal|"field"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|td
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|128
operator|*
literal|1024
argument_list|,
name|td
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Make sure that a Directory implementation that does
comment|// not use LockFactory at all (ie overrides makeLock and
comment|// implements its own private locking) works OK.  This
comment|// was raised on java-dev as loss of backwards
comment|// compatibility.
DECL|method|testNullLockFactory
specifier|public
name|void
name|testNullLockFactory
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
class|class
name|MyRAMDirectory
extends|extends
name|RAMDirectory
block|{
specifier|private
name|LockFactory
name|myLockFactory
decl_stmt|;
name|MyRAMDirectory
parameter_list|()
block|{
name|lockFactory
operator|=
literal|null
expr_stmt|;
name|myLockFactory
operator|=
operator|new
name|SingleInstanceLockFactory
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|makeLock
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|myLockFactory
operator|.
name|makeLock
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
name|Directory
name|dir
init|=
operator|new
name|MyRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Term
name|searchTerm
init|=
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|searchTerm
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|"did not get right number of hits"
argument_list|,
literal|100
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testFlushWithNoMerging
specifier|public
name|void
name|testFlushWithNoMerging
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"aaa"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|19
condition|;
name|i
operator|++
control|)
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentInfos
name|sis
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|sis
operator|.
name|read
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// Since we flushed w/o allowing merging we should now
comment|// have 10 segments
assert|assert
name|sis
operator|.
name|size
argument_list|()
operator|==
literal|10
assert|;
block|}
comment|// Make sure we can flush segment w/ norms, then add
comment|// empty doc (no norms) and flush
DECL|method|testEmptyDocAfterFlushingRealDoc
specifier|public
name|void
name|testEmptyDocAfterFlushingRealDoc
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"aaa"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|_TestUtil
operator|.
name|checkIndex
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test calling optimize(false) whereby optimize is kicked
comment|// off but we don't wait for it to finish (but
comment|// writer.close()) does wait
DECL|method|testBackgroundOptimize
specifier|public
name|void
name|testBackgroundOptimize
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|pass
init|=
literal|0
init|;
name|pass
operator|<
literal|2
condition|;
name|pass
operator|++
control|)
block|{
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|CREATE
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
operator|(
operator|(
name|LogMergePolicy
operator|)
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergePolicy
argument_list|()
operator|)
operator|.
name|setMergeFactor
argument_list|(
literal|101
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"aaa"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|200
condition|;
name|i
operator|++
control|)
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|optimize
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
literal|0
operator|==
name|pass
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|isOptimized
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Get another segment to flush so we can verify it is
comment|// NOT included in the optimization
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|reader
operator|.
name|isOptimized
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentInfos
name|infos
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|infos
operator|.
name|read
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|infos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|rmDir
specifier|private
name|void
name|rmDir
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
name|File
index|[]
name|files
init|=
name|dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|files
index|[
name|i
index|]
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
name|dir
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test that no NullPointerException will be raised,    * when adding one document with a single, empty field    * and term vectors enabled.    * @throws IOException    *    */
DECL|method|testBadSegment
specifier|public
name|void
name|testBadSegment
parameter_list|()
throws|throws
name|IOException
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|iw
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tvtest"
argument_list|,
literal|""
argument_list|,
name|Store
operator|.
name|NO
argument_list|,
name|Index
operator|.
name|ANALYZED
argument_list|,
name|TermVector
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1008
DECL|method|testNoTermVectorAfterTermVector
specifier|public
name|void
name|testNoTermVectorAfterTermVector
parameter_list|()
throws|throws
name|IOException
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|iw
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tvtest"
argument_list|,
literal|"a b c"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|document
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tvtest"
argument_list|,
literal|"x y z"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
comment|// Make first segment
name|iw
operator|.
name|commit
argument_list|()
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tvtest"
argument_list|,
literal|"a b c"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
comment|// Make 2nd segment
name|iw
operator|.
name|commit
argument_list|()
expr_stmt|;
name|iw
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1010
DECL|method|testNoTermVectorAfterTermVectorMerge
specifier|public
name|void
name|testNoTermVectorAfterTermVectorMerge
parameter_list|()
throws|throws
name|IOException
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|iw
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tvtest"
argument_list|,
literal|"a b c"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|iw
operator|.
name|commit
argument_list|()
expr_stmt|;
name|document
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tvtest"
argument_list|,
literal|"x y z"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
comment|// Make first segment
name|iw
operator|.
name|commit
argument_list|()
expr_stmt|;
name|iw
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tvtest"
argument_list|,
literal|"a b c"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
comment|// Make 2nd segment
name|iw
operator|.
name|commit
argument_list|()
expr_stmt|;
name|iw
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1036
DECL|method|testMaxThreadPriority
specifier|public
name|void
name|testMaxThreadPriority
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|pri
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getPriority
argument_list|()
decl_stmt|;
try|try
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|conf
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
decl_stmt|;
operator|(
operator|(
name|LogMergePolicy
operator|)
name|conf
operator|.
name|getMergePolicy
argument_list|()
operator|)
operator|.
name|setMergeFactor
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|IndexWriter
name|iw
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tvtest"
argument_list|,
literal|"a b c"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setPriority
argument_list|(
name|Thread
operator|.
name|MAX_PRIORITY
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
name|iw
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setPriority
argument_list|(
name|pri
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Just intercepts all merges& verifies that we are never
comment|// merging a segment with>= 20 (maxMergeDocs) docs
DECL|class|MyMergeScheduler
specifier|private
class|class
name|MyMergeScheduler
extends|extends
name|MergeScheduler
block|{
annotation|@
name|Override
DECL|method|merge
specifier|synchronized
specifier|public
name|void
name|merge
parameter_list|(
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|MergePolicy
operator|.
name|OneMerge
name|merge
init|=
name|writer
operator|.
name|getNextMerge
argument_list|()
decl_stmt|;
if|if
condition|(
name|merge
operator|==
literal|null
condition|)
break|break;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|merge
operator|.
name|segments
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
assert|assert
name|merge
operator|.
name|segments
operator|.
name|info
argument_list|(
name|i
argument_list|)
operator|.
name|docCount
operator|<
literal|20
assert|;
name|writer
operator|.
name|merge
argument_list|(
name|merge
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{}
block|}
comment|// LUCENE-1013
DECL|method|testSetMaxMergeDocs
specifier|public
name|void
name|testSetMaxMergeDocs
parameter_list|()
throws|throws
name|IOException
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|conf
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMergeScheduler
argument_list|(
operator|new
name|MyMergeScheduler
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|LogMergePolicy
name|lmp
init|=
operator|(
name|LogMergePolicy
operator|)
name|conf
operator|.
name|getMergePolicy
argument_list|()
decl_stmt|;
name|lmp
operator|.
name|setMaxMergeDocs
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|lmp
operator|.
name|setMergeFactor
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|IndexWriter
name|iw
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tvtest"
argument_list|,
literal|"a b c"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|177
condition|;
name|i
operator|++
control|)
name|iw
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1072
DECL|method|testExceptionFromTokenStream
specifier|public
name|void
name|testExceptionFromTokenStream
parameter_list|()
throws|throws
name|IOException
block|{
name|RAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|conf
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TokenStream
name|tokenStream
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|TokenFilter
argument_list|(
operator|new
name|MockTokenizer
argument_list|(
name|reader
argument_list|,
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|)
argument_list|)
block|{
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|count
operator|++
operator|==
literal|5
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|()
throw|;
block|}
return|return
name|input
operator|.
name|incrementToken
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|String
name|contents
init|=
literal|"aa bb cc dd ee ff gg hh ii jj kk"
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content"
argument_list|,
name|contents
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
comment|// Make sure we can add another normal document
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content"
argument_list|,
literal|"aa bb cc dd"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// Make sure we can add another normal document
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content"
argument_list|,
literal|"aa bb cc dd"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|Term
name|t
init|=
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"aa"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|reader
operator|.
name|docFreq
argument_list|(
name|t
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Make sure the doc that hit the exception was marked
comment|// as deleted:
name|DocsEnum
name|tdocs
init|=
name|MultiFields
operator|.
name|getTermDocsEnum
argument_list|(
name|reader
argument_list|,
name|MultiFields
operator|.
name|getDeletedDocs
argument_list|(
name|reader
argument_list|)
argument_list|,
name|t
operator|.
name|field
argument_list|()
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|t
operator|.
name|text
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|tdocs
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reader
operator|.
name|docFreq
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"gg"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|FailOnlyOnFlush
specifier|private
specifier|static
class|class
name|FailOnlyOnFlush
extends|extends
name|MockRAMDirectory
operator|.
name|Failure
block|{
DECL|field|doFail
name|boolean
name|doFail
init|=
literal|false
decl_stmt|;
DECL|field|count
name|int
name|count
decl_stmt|;
annotation|@
name|Override
DECL|method|setDoFail
specifier|public
name|void
name|setDoFail
parameter_list|()
block|{
name|this
operator|.
name|doFail
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clearDoFail
specifier|public
name|void
name|clearDoFail
parameter_list|()
block|{
name|this
operator|.
name|doFail
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|eval
specifier|public
name|void
name|eval
parameter_list|(
name|MockRAMDirectory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|doFail
condition|)
block|{
name|StackTraceElement
index|[]
name|trace
init|=
operator|new
name|Exception
argument_list|()
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
name|boolean
name|sawAppend
init|=
literal|false
decl_stmt|;
name|boolean
name|sawFlush
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|trace
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
literal|"org.apache.lucene.index.FreqProxTermsWriter"
operator|.
name|equals
argument_list|(
name|trace
index|[
name|i
index|]
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|&&
literal|"appendPostings"
operator|.
name|equals
argument_list|(
name|trace
index|[
name|i
index|]
operator|.
name|getMethodName
argument_list|()
argument_list|)
condition|)
name|sawAppend
operator|=
literal|true
expr_stmt|;
if|if
condition|(
literal|"doFlush"
operator|.
name|equals
argument_list|(
name|trace
index|[
name|i
index|]
operator|.
name|getMethodName
argument_list|()
argument_list|)
condition|)
name|sawFlush
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|sawAppend
operator|&&
name|sawFlush
operator|&&
name|count
operator|++
operator|>=
literal|30
condition|)
block|{
name|doFail
operator|=
literal|false
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"now failing during flush"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|// LUCENE-1072: make sure an errant exception on flushing
comment|// one segment only takes out those docs in that one flush
DECL|method|testDocumentsWriterAbort
specifier|public
name|void
name|testDocumentsWriterAbort
parameter_list|()
throws|throws
name|IOException
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|FailOnlyOnFlush
name|failure
init|=
operator|new
name|FailOnlyOnFlush
argument_list|()
decl_stmt|;
name|failure
operator|.
name|setDoFail
argument_list|()
expr_stmt|;
name|dir
operator|.
name|failOn
argument_list|(
name|failure
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|String
name|contents
init|=
literal|"aa bb cc dd ee ff gg hh ii jj kk"
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content"
argument_list|,
name|contents
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|hitError
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|200
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// only one flush should fail:
name|assertFalse
argument_list|(
name|hitError
argument_list|)
expr_stmt|;
name|hitError
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|hitError
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|198
argument_list|,
name|reader
operator|.
name|docFreq
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"aa"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|CrashingFilter
specifier|private
class|class
name|CrashingFilter
extends|extends
name|TokenFilter
block|{
DECL|field|fieldName
name|String
name|fieldName
decl_stmt|;
DECL|field|count
name|int
name|count
decl_stmt|;
DECL|method|CrashingFilter
specifier|public
name|CrashingFilter
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|fieldName
operator|.
name|equals
argument_list|(
literal|"crash"
argument_list|)
operator|&&
name|count
operator|++
operator|>=
literal|4
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"I'm experiencing problems"
argument_list|)
throw|;
return|return
name|input
operator|.
name|incrementToken
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|method|testDocumentsWriterExceptions
specifier|public
name|void
name|testDocumentsWriterExceptions
parameter_list|()
throws|throws
name|IOException
block|{
name|Analyzer
name|analyzer
init|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TokenStream
name|tokenStream
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|CrashingFilter
argument_list|(
name|fieldName
argument_list|,
operator|new
name|MockTokenizer
argument_list|(
name|reader
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|analyzer
argument_list|)
argument_list|)
decl_stmt|;
comment|//writer.setInfoStream(System.out);
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"contents"
argument_list|,
literal|"here are some contents"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"crash"
argument_list|,
literal|"this should crash after 4 terms"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"other"
argument_list|,
literal|"this will not get indexed"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{       }
if|if
condition|(
literal|0
operator|==
name|i
condition|)
block|{
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"contents"
argument_list|,
literal|"here are some contents"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|expected
init|=
literal|3
operator|+
operator|(
literal|1
operator|-
name|i
operator|)
operator|*
literal|2
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|reader
operator|.
name|docFreq
argument_list|(
operator|new
name|Term
argument_list|(
literal|"contents"
argument_list|,
literal|"here"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numDel
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|reader
operator|.
name|maxDoc
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|reader
operator|.
name|isDeleted
argument_list|(
name|j
argument_list|)
condition|)
name|numDel
operator|++
expr_stmt|;
else|else
block|{
name|reader
operator|.
name|document
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|reader
operator|.
name|getTermFreqVectors
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numDel
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|analyzer
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"contents"
argument_list|,
literal|"here are some contents"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|17
condition|;
name|j
operator|++
control|)
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|expected
operator|=
literal|19
operator|+
operator|(
literal|1
operator|-
name|i
operator|)
operator|*
literal|2
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|reader
operator|.
name|docFreq
argument_list|(
operator|new
name|Term
argument_list|(
literal|"contents"
argument_list|,
literal|"here"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|numDel
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|reader
operator|.
name|maxDoc
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|reader
operator|.
name|isDeleted
argument_list|(
name|j
argument_list|)
condition|)
name|numDel
operator|++
expr_stmt|;
else|else
block|{
name|reader
operator|.
name|document
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|reader
operator|.
name|getTermFreqVectors
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|numDel
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testDocumentsWriterExceptionThreads
specifier|public
name|void
name|testDocumentsWriterExceptionThreads
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|analyzer
init|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TokenStream
name|tokenStream
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|CrashingFilter
argument_list|(
name|fieldName
argument_list|,
operator|new
name|MockTokenizer
argument_list|(
name|reader
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|int
name|NUM_THREAD
init|=
literal|3
decl_stmt|;
specifier|final
name|int
name|NUM_ITER
init|=
literal|100
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
block|{
specifier|final
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|analyzer
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|finalI
init|=
name|i
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|NUM_THREAD
index|]
decl_stmt|;
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|NUM_THREAD
condition|;
name|t
operator|++
control|)
block|{
name|threads
index|[
name|t
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|NUM_ITER
condition|;
name|iter
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"contents"
argument_list|,
literal|"here are some contents"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"crash"
argument_list|,
literal|"this should crash after 4 terms"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"other"
argument_list|,
literal|"this will not get indexed"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{                     }
if|if
condition|(
literal|0
operator|==
name|finalI
condition|)
block|{
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"contents"
argument_list|,
literal|"here are some contents"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": ERROR: hit unexpected exception"
argument_list|)
expr_stmt|;
name|t
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|threads
index|[
name|t
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|NUM_THREAD
condition|;
name|t
operator|++
control|)
name|threads
index|[
name|t
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|expected
init|=
operator|(
literal|3
operator|+
operator|(
literal|1
operator|-
name|i
operator|)
operator|*
literal|2
operator|)
operator|*
name|NUM_THREAD
operator|*
name|NUM_ITER
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|reader
operator|.
name|docFreq
argument_list|(
operator|new
name|Term
argument_list|(
literal|"contents"
argument_list|,
literal|"here"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numDel
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|reader
operator|.
name|maxDoc
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|reader
operator|.
name|isDeleted
argument_list|(
name|j
argument_list|)
condition|)
name|numDel
operator|++
expr_stmt|;
else|else
block|{
name|reader
operator|.
name|document
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|reader
operator|.
name|getTermFreqVectors
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_THREAD
operator|*
name|NUM_ITER
argument_list|,
name|numDel
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|analyzer
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"contents"
argument_list|,
literal|"here are some contents"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|17
condition|;
name|j
operator|++
control|)
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|expected
operator|+=
literal|17
operator|-
name|NUM_THREAD
operator|*
name|NUM_ITER
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|reader
operator|.
name|docFreq
argument_list|(
operator|new
name|Term
argument_list|(
literal|"contents"
argument_list|,
literal|"here"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|numDel
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|reader
operator|.
name|maxDoc
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|reader
operator|.
name|isDeleted
argument_list|(
name|j
argument_list|)
condition|)
name|numDel
operator|++
expr_stmt|;
else|else
block|{
name|reader
operator|.
name|document
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|reader
operator|.
name|getTermFreqVectors
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|numDel
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testVariableSchema
specifier|public
name|void
name|testVariableSchema
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|int
name|delID
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|LogMergePolicy
name|lmp
init|=
operator|(
name|LogMergePolicy
operator|)
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergePolicy
argument_list|()
decl_stmt|;
name|lmp
operator|.
name|setMergeFactor
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|lmp
operator|.
name|setUseCompoundFile
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|lmp
operator|.
name|setUseCompoundDocStore
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|String
name|contents
init|=
literal|"aa bb cc dd ee ff gg hh ii jj kk"
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|7
condition|)
block|{
comment|// Add empty docs here
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content3"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Field
operator|.
name|Store
name|storeVal
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content4"
argument_list|,
name|contents
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|storeVal
operator|=
name|Field
operator|.
name|Store
operator|.
name|YES
expr_stmt|;
block|}
else|else
name|storeVal
operator|=
name|Field
operator|.
name|Store
operator|.
name|NO
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content1"
argument_list|,
name|contents
argument_list|,
name|storeVal
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content3"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content5"
argument_list|,
literal|""
argument_list|,
name|storeVal
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|4
condition|;
name|j
operator|++
control|)
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|reader
operator|.
name|deleteDocument
argument_list|(
name|delID
operator|++
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
literal|0
operator|==
name|i
operator|%
literal|4
condition|)
block|{
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LogMergePolicy
name|lmp2
init|=
operator|(
name|LogMergePolicy
operator|)
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergePolicy
argument_list|()
decl_stmt|;
name|lmp2
operator|.
name|setUseCompoundFile
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|lmp2
operator|.
name|setUseCompoundDocStore
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|testNoWaitClose
specifier|public
name|void
name|testNoWaitClose
parameter_list|()
throws|throws
name|Throwable
block|{
name|RAMDirectory
name|directory
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
specifier|final
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Field
name|idField
init|=
operator|new
name|Field
argument_list|(
literal|"id"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|idField
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|pass
init|=
literal|0
init|;
name|pass
operator|<
literal|2
condition|;
name|pass
operator|++
control|)
block|{
name|IndexWriterConfig
name|conf
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|CREATE
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|pass
operator|==
literal|2
condition|)
block|{
name|conf
operator|.
name|setMergeScheduler
argument_list|(
operator|new
name|SerialMergeScheduler
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|directory
argument_list|,
name|conf
argument_list|)
decl_stmt|;
operator|(
operator|(
name|LogMergePolicy
operator|)
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergePolicy
argument_list|()
operator|)
operator|.
name|setMergeFactor
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|//System.out.println("TEST: pass=" + pass + " cms=" + (pass>= 2));
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|10
condition|;
name|iter
operator|++
control|)
block|{
comment|//System.out.println("TEST: iter=" + iter);
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|199
condition|;
name|j
operator|++
control|)
block|{
name|idField
operator|.
name|setValue
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|iter
operator|*
literal|201
operator|+
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|int
name|delID
init|=
name|iter
operator|*
literal|199
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|20
condition|;
name|j
operator|++
control|)
block|{
name|writer
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|delID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|delID
operator|+=
literal|5
expr_stmt|;
block|}
comment|// Force a bunch of merge threads to kick off so we
comment|// stress out aborting them on close:
operator|(
operator|(
name|LogMergePolicy
operator|)
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergePolicy
argument_list|()
operator|)
operator|.
name|setMergeFactor
argument_list|(
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|IndexWriter
name|finalWriter
init|=
name|writer
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|Throwable
argument_list|>
name|failure
init|=
operator|new
name|ArrayList
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
name|Thread
name|t1
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|finalWriter
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyClosedException
name|e
parameter_list|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|failure
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
if|if
condition|(
name|failure
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
throw|throw
name|failure
operator|.
name|get
argument_list|(
literal|0
argument_list|)
throw|;
name|t1
operator|.
name|start
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|t1
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Make sure reader can read
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|directory
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Reopen
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|directory
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|APPEND
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Used by test cases below
DECL|class|IndexerThread
specifier|private
class|class
name|IndexerThread
extends|extends
name|Thread
block|{
DECL|field|diskFull
name|boolean
name|diskFull
decl_stmt|;
DECL|field|error
name|Throwable
name|error
decl_stmt|;
DECL|field|ace
name|AlreadyClosedException
name|ace
decl_stmt|;
DECL|field|writer
name|IndexWriter
name|writer
decl_stmt|;
DECL|field|noErrors
name|boolean
name|noErrors
decl_stmt|;
DECL|field|addCount
specifier|volatile
name|int
name|addCount
decl_stmt|;
DECL|method|IndexerThread
specifier|public
name|IndexerThread
parameter_list|(
name|IndexWriter
name|writer
parameter_list|,
name|boolean
name|noErrors
parameter_list|)
block|{
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
name|this
operator|.
name|noErrors
operator|=
name|noErrors
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"aaa bbb ccc ddd eee fff ggg hhh iii jjj"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|idUpto
init|=
literal|0
decl_stmt|;
name|int
name|fullCount
init|=
literal|0
decl_stmt|;
specifier|final
name|long
name|stopTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|200
decl_stmt|;
do|do
block|{
try|try
block|{
name|writer
operator|.
name|updateDocument
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
operator|(
name|idUpto
operator|++
operator|)
argument_list|)
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|addCount
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|//System.out.println(Thread.currentThread().getName() + ": hit exc");
comment|//ioe.printStackTrace(System.out);
if|if
condition|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"fake disk full at"
argument_list|)
operator|||
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
literal|"now failing on purpose"
argument_list|)
condition|)
block|{
name|diskFull
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ThreadInterruptedException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
if|if
condition|(
name|fullCount
operator|++
operator|>=
literal|5
condition|)
break|break;
block|}
else|else
block|{
if|if
condition|(
name|noErrors
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": ERROR: unexpected IOException:"
argument_list|)
expr_stmt|;
name|ioe
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|error
operator|=
name|ioe
expr_stmt|;
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//t.printStackTrace(System.out);
if|if
condition|(
name|noErrors
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": ERROR: unexpected Throwable:"
argument_list|)
expr_stmt|;
name|t
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|error
operator|=
name|t
expr_stmt|;
block|}
break|break;
block|}
block|}
do|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|stopTime
condition|)
do|;
block|}
block|}
comment|// LUCENE-1130: make sure we can close() even while
comment|// threads are trying to add documents.  Strictly
comment|// speaking, this isn't valid us of Lucene's APIs, but we
comment|// still want to be robust to this case:
DECL|method|testCloseWithThreads
specifier|public
name|void
name|testCloseWithThreads
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|NUM_THREADS
init|=
literal|3
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|7
condition|;
name|iter
operator|++
control|)
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|conf
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|10
argument_list|)
decl_stmt|;
comment|// We expect AlreadyClosedException
operator|(
operator|(
name|ConcurrentMergeScheduler
operator|)
name|conf
operator|.
name|getMergeScheduler
argument_list|()
operator|)
operator|.
name|setSuppressExceptions
argument_list|()
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
operator|(
operator|(
name|LogMergePolicy
operator|)
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergePolicy
argument_list|()
operator|)
operator|.
name|setMergeFactor
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|IndexerThread
index|[]
name|threads
init|=
operator|new
name|IndexerThread
index|[
name|NUM_THREADS
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|IndexerThread
argument_list|(
name|writer
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
comment|// only stop when at least one thread has added a doc
if|if
condition|(
name|threads
index|[
name|i
index|]
operator|.
name|addCount
operator|>
literal|0
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|writer
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Make sure threads that are adding docs are not hung:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
block|{
comment|// Without fix for LUCENE-1130: one of the
comment|// threads will hang
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
if|if
condition|(
name|threads
index|[
name|i
index|]
operator|.
name|isAlive
argument_list|()
condition|)
name|fail
argument_list|(
literal|"thread seems to be hung"
argument_list|)
expr_stmt|;
block|}
comment|// Quick test to make sure index is not corrupt:
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|DocsEnum
name|tdocs
init|=
name|MultiFields
operator|.
name|getTermDocsEnum
argument_list|(
name|reader
argument_list|,
name|MultiFields
operator|.
name|getDeletedDocs
argument_list|(
name|reader
argument_list|)
argument_list|,
literal|"field"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|tdocs
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocsEnum
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|count
operator|>
literal|0
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// LUCENE-1130: make sure immeidate disk full on creating
comment|// an IndexWriter (hit during DW.ThreadState.init()) is
comment|// OK:
DECL|method|testImmediateDiskFull
specifier|public
name|void
name|testImmediateDiskFull
parameter_list|()
throws|throws
name|IOException
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|dir
operator|.
name|setMaxSizeInBytes
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|dir
operator|.
name|getRecomputedActualSizeInBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"aaa bbb ccc ddd eee fff ggg hhh iii jjj"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit disk full"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{     }
comment|// Without fix for LUCENE-1130: this call will hang:
try|try
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit disk full"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{     }
try|try
block|{
name|writer
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit disk full"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{     }
comment|// Make sure once disk space is avail again, we can
comment|// cleanly close:
name|dir
operator|.
name|setMaxSizeInBytes
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1130: make sure immediate disk full on creating
comment|// an IndexWriter (hit during DW.ThreadState.init()), with
comment|// multiple threads, is OK:
DECL|method|testImmediateDiskFullWithThreads
specifier|public
name|void
name|testImmediateDiskFullWithThreads
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|NUM_THREADS
init|=
literal|3
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|10
condition|;
name|iter
operator|++
control|)
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|conf
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
decl_stmt|;
comment|// We expect disk full exceptions in the merge threads
operator|(
operator|(
name|ConcurrentMergeScheduler
operator|)
name|conf
operator|.
name|getMergeScheduler
argument_list|()
operator|)
operator|.
name|setSuppressExceptions
argument_list|()
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
operator|(
operator|(
name|LogMergePolicy
operator|)
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergePolicy
argument_list|()
operator|)
operator|.
name|setMergeFactor
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|dir
operator|.
name|setMaxSizeInBytes
argument_list|(
literal|4
operator|*
literal|1024
operator|+
literal|20
operator|*
name|iter
argument_list|)
expr_stmt|;
name|IndexerThread
index|[]
name|threads
init|=
operator|new
name|IndexerThread
index|[
name|NUM_THREADS
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|IndexerThread
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
block|{
comment|// Without fix for LUCENE-1130: one of the
comment|// threads will hang
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"hit unexpected Throwable"
argument_list|,
name|threads
index|[
name|i
index|]
operator|.
name|error
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// Make sure once disk space is avail again, we can
comment|// cleanly close:
name|dir
operator|.
name|setMaxSizeInBytes
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Throws IOException during FieldsWriter.flushDocument and during DocumentsWriter.abort
DECL|class|FailOnlyOnAbortOrFlush
specifier|private
specifier|static
class|class
name|FailOnlyOnAbortOrFlush
extends|extends
name|MockRAMDirectory
operator|.
name|Failure
block|{
DECL|field|onlyOnce
specifier|private
name|boolean
name|onlyOnce
decl_stmt|;
DECL|method|FailOnlyOnAbortOrFlush
specifier|public
name|FailOnlyOnAbortOrFlush
parameter_list|(
name|boolean
name|onlyOnce
parameter_list|)
block|{
name|this
operator|.
name|onlyOnce
operator|=
name|onlyOnce
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|eval
specifier|public
name|void
name|eval
parameter_list|(
name|MockRAMDirectory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|doFail
condition|)
block|{
name|StackTraceElement
index|[]
name|trace
init|=
operator|new
name|Exception
argument_list|()
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|trace
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
literal|"abort"
operator|.
name|equals
argument_list|(
name|trace
index|[
name|i
index|]
operator|.
name|getMethodName
argument_list|()
argument_list|)
operator|||
literal|"flushDocument"
operator|.
name|equals
argument_list|(
name|trace
index|[
name|i
index|]
operator|.
name|getMethodName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|onlyOnce
condition|)
name|doFail
operator|=
literal|false
expr_stmt|;
comment|//System.out.println(Thread.currentThread().getName() + ": now fail");
comment|//new Throwable().printStackTrace(System.out);
throw|throw
operator|new
name|IOException
argument_list|(
literal|"now failing on purpose"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
comment|// Runs test, with one thread, using the specific failure
comment|// to trigger an IOException
DECL|method|_testSingleThreadFailure
specifier|public
name|void
name|_testSingleThreadFailure
parameter_list|(
name|MockRAMDirectory
operator|.
name|Failure
name|failure
parameter_list|)
throws|throws
name|IOException
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"aaa bbb ccc ddd eee fff ggg hhh iii jjj"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|dir
operator|.
name|failOn
argument_list|(
name|failure
argument_list|)
expr_stmt|;
name|failure
operator|.
name|setDoFail
argument_list|()
expr_stmt|;
try|try
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{     }
name|failure
operator|.
name|clearDoFail
argument_list|()
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Runs test, with multiple threads, using the specific
comment|// failure to trigger an IOException
DECL|method|_testMultipleThreadsFailure
specifier|public
name|void
name|_testMultipleThreadsFailure
parameter_list|(
name|MockRAMDirectory
operator|.
name|Failure
name|failure
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|NUM_THREADS
init|=
literal|3
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|2
condition|;
name|iter
operator|++
control|)
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|conf
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
decl_stmt|;
comment|// We expect disk full exceptions in the merge threads
operator|(
operator|(
name|ConcurrentMergeScheduler
operator|)
name|conf
operator|.
name|getMergeScheduler
argument_list|()
operator|)
operator|.
name|setSuppressExceptions
argument_list|()
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
operator|(
operator|(
name|LogMergePolicy
operator|)
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergePolicy
argument_list|()
operator|)
operator|.
name|setMergeFactor
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|IndexerThread
index|[]
name|threads
init|=
operator|new
name|IndexerThread
index|[
name|NUM_THREADS
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|IndexerThread
argument_list|(
name|writer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|dir
operator|.
name|failOn
argument_list|(
name|failure
argument_list|)
expr_stmt|;
name|failure
operator|.
name|setDoFail
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"hit unexpected Throwable"
argument_list|,
name|threads
index|[
name|i
index|]
operator|.
name|error
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|writer
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|failure
operator|.
name|clearDoFail
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|success
condition|)
block|{
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|reader
operator|.
name|maxDoc
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|reader
operator|.
name|isDeleted
argument_list|(
name|j
argument_list|)
condition|)
block|{
name|reader
operator|.
name|document
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|reader
operator|.
name|getTermFreqVectors
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// LUCENE-1130: make sure initial IOException, and then 2nd
comment|// IOException during rollback(), is OK:
DECL|method|testIOExceptionDuringAbort
specifier|public
name|void
name|testIOExceptionDuringAbort
parameter_list|()
throws|throws
name|IOException
block|{
name|_testSingleThreadFailure
argument_list|(
operator|new
name|FailOnlyOnAbortOrFlush
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// LUCENE-1130: make sure initial IOException, and then 2nd
comment|// IOException during rollback(), is OK:
DECL|method|testIOExceptionDuringAbortOnlyOnce
specifier|public
name|void
name|testIOExceptionDuringAbortOnlyOnce
parameter_list|()
throws|throws
name|IOException
block|{
name|_testSingleThreadFailure
argument_list|(
operator|new
name|FailOnlyOnAbortOrFlush
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// LUCENE-1130: make sure initial IOException, and then 2nd
comment|// IOException during rollback(), with multiple threads, is OK:
DECL|method|testIOExceptionDuringAbortWithThreads
specifier|public
name|void
name|testIOExceptionDuringAbortWithThreads
parameter_list|()
throws|throws
name|Exception
block|{
name|_testMultipleThreadsFailure
argument_list|(
operator|new
name|FailOnlyOnAbortOrFlush
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// LUCENE-1130: make sure initial IOException, and then 2nd
comment|// IOException during rollback(), with multiple threads, is OK:
DECL|method|testIOExceptionDuringAbortWithThreadsOnlyOnce
specifier|public
name|void
name|testIOExceptionDuringAbortWithThreadsOnlyOnce
parameter_list|()
throws|throws
name|Exception
block|{
name|_testMultipleThreadsFailure
argument_list|(
operator|new
name|FailOnlyOnAbortOrFlush
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Throws IOException during DocumentsWriter.closeDocStore
DECL|class|FailOnlyInCloseDocStore
specifier|private
specifier|static
class|class
name|FailOnlyInCloseDocStore
extends|extends
name|MockRAMDirectory
operator|.
name|Failure
block|{
DECL|field|onlyOnce
specifier|private
name|boolean
name|onlyOnce
decl_stmt|;
DECL|method|FailOnlyInCloseDocStore
specifier|public
name|FailOnlyInCloseDocStore
parameter_list|(
name|boolean
name|onlyOnce
parameter_list|)
block|{
name|this
operator|.
name|onlyOnce
operator|=
name|onlyOnce
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|eval
specifier|public
name|void
name|eval
parameter_list|(
name|MockRAMDirectory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|doFail
condition|)
block|{
name|StackTraceElement
index|[]
name|trace
init|=
operator|new
name|Exception
argument_list|()
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|trace
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
literal|"closeDocStore"
operator|.
name|equals
argument_list|(
name|trace
index|[
name|i
index|]
operator|.
name|getMethodName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|onlyOnce
condition|)
name|doFail
operator|=
literal|false
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"now failing on purpose"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
comment|// LUCENE-1130: test IOException in closeDocStore
DECL|method|testIOExceptionDuringCloseDocStore
specifier|public
name|void
name|testIOExceptionDuringCloseDocStore
parameter_list|()
throws|throws
name|IOException
block|{
name|_testSingleThreadFailure
argument_list|(
operator|new
name|FailOnlyInCloseDocStore
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// LUCENE-1130: test IOException in closeDocStore
DECL|method|testIOExceptionDuringCloseDocStoreOnlyOnce
specifier|public
name|void
name|testIOExceptionDuringCloseDocStoreOnlyOnce
parameter_list|()
throws|throws
name|IOException
block|{
name|_testSingleThreadFailure
argument_list|(
operator|new
name|FailOnlyInCloseDocStore
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// LUCENE-1130: test IOException in closeDocStore, with threads
DECL|method|testIOExceptionDuringCloseDocStoreWithThreads
specifier|public
name|void
name|testIOExceptionDuringCloseDocStoreWithThreads
parameter_list|()
throws|throws
name|Exception
block|{
name|_testMultipleThreadsFailure
argument_list|(
operator|new
name|FailOnlyInCloseDocStore
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// LUCENE-1130: test IOException in closeDocStore, with threads
DECL|method|testIOExceptionDuringCloseDocStoreWithThreadsOnlyOnce
specifier|public
name|void
name|testIOExceptionDuringCloseDocStoreWithThreadsOnlyOnce
parameter_list|()
throws|throws
name|Exception
block|{
name|_testMultipleThreadsFailure
argument_list|(
operator|new
name|FailOnlyInCloseDocStore
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Throws IOException during DocumentsWriter.writeSegment
DECL|class|FailOnlyInWriteSegment
specifier|private
specifier|static
class|class
name|FailOnlyInWriteSegment
extends|extends
name|MockRAMDirectory
operator|.
name|Failure
block|{
DECL|field|onlyOnce
specifier|private
name|boolean
name|onlyOnce
decl_stmt|;
DECL|method|FailOnlyInWriteSegment
specifier|public
name|FailOnlyInWriteSegment
parameter_list|(
name|boolean
name|onlyOnce
parameter_list|)
block|{
name|this
operator|.
name|onlyOnce
operator|=
name|onlyOnce
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|eval
specifier|public
name|void
name|eval
parameter_list|(
name|MockRAMDirectory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|doFail
condition|)
block|{
name|StackTraceElement
index|[]
name|trace
init|=
operator|new
name|Exception
argument_list|()
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|trace
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
literal|"flush"
operator|.
name|equals
argument_list|(
name|trace
index|[
name|i
index|]
operator|.
name|getMethodName
argument_list|()
argument_list|)
operator|&&
literal|"org.apache.lucene.index.DocFieldProcessor"
operator|.
name|equals
argument_list|(
name|trace
index|[
name|i
index|]
operator|.
name|getClassName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|onlyOnce
condition|)
name|doFail
operator|=
literal|false
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"now failing on purpose"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
comment|// LUCENE-1130: test IOException in writeSegment
DECL|method|testIOExceptionDuringWriteSegment
specifier|public
name|void
name|testIOExceptionDuringWriteSegment
parameter_list|()
throws|throws
name|IOException
block|{
name|_testSingleThreadFailure
argument_list|(
operator|new
name|FailOnlyInWriteSegment
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// LUCENE-1130: test IOException in writeSegment
DECL|method|testIOExceptionDuringWriteSegmentOnlyOnce
specifier|public
name|void
name|testIOExceptionDuringWriteSegmentOnlyOnce
parameter_list|()
throws|throws
name|IOException
block|{
name|_testSingleThreadFailure
argument_list|(
operator|new
name|FailOnlyInWriteSegment
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// LUCENE-1130: test IOException in writeSegment, with threads
DECL|method|testIOExceptionDuringWriteSegmentWithThreads
specifier|public
name|void
name|testIOExceptionDuringWriteSegmentWithThreads
parameter_list|()
throws|throws
name|Exception
block|{
name|_testMultipleThreadsFailure
argument_list|(
operator|new
name|FailOnlyInWriteSegment
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// LUCENE-1130: test IOException in writeSegment, with threads
DECL|method|testIOExceptionDuringWriteSegmentWithThreadsOnlyOnce
specifier|public
name|void
name|testIOExceptionDuringWriteSegmentWithThreadsOnlyOnce
parameter_list|()
throws|throws
name|Exception
block|{
name|_testMultipleThreadsFailure
argument_list|(
operator|new
name|FailOnlyInWriteSegment
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// LUCENE-1084: test unlimited field length
DECL|method|testUnlimitedMaxFieldLength
specifier|public
name|void
name|testUnlimitedMaxFieldLength
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
name|b
operator|.
name|append
argument_list|(
literal|" a"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|" x"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
name|b
operator|.
name|toString
argument_list|()
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Term
name|t
init|=
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|docFreq
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1044: Simulate checksum error in segments_N
DECL|method|testSegmentsChecksumError
specifier|public
name|void
name|testSegmentsChecksumError
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
literal|null
decl_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// add 100 documents
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
comment|// close
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|gen
init|=
name|SegmentInfos
operator|.
name|getCurrentSegmentGeneration
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"segment generation should be> 0 but got "
operator|+
name|gen
argument_list|,
name|gen
operator|>
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|String
name|segmentsFileName
init|=
name|SegmentInfos
operator|.
name|getCurrentSegmentFileName
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|IndexInput
name|in
init|=
name|dir
operator|.
name|openInput
argument_list|(
name|segmentsFileName
argument_list|)
decl_stmt|;
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
name|IndexFileNames
operator|.
name|fileNameFromGeneration
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS
argument_list|,
literal|""
argument_list|,
literal|1
operator|+
name|gen
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|in
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|byte
name|b
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
call|(
name|byte
call|)
argument_list|(
literal|1
operator|+
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"segmentInfos failed to retry fallback to correct segments_N file"
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1044: test writer.commit() when ac=false
DECL|method|testForceCommit
specifier|public
name|void
name|testForceCommit
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
operator|(
operator|(
name|LogMergePolicy
operator|)
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergePolicy
argument_list|()
operator|)
operator|.
name|setMergeFactor
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|23
condition|;
name|i
operator|++
control|)
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|IndexReader
name|reader2
init|=
name|reader
operator|.
name|reopen
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|23
argument_list|,
name|reader2
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|17
condition|;
name|i
operator|++
control|)
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|23
argument_list|,
name|reader2
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|reader2
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|23
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|40
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Throws IOException during MockRAMDirectory.sync
DECL|class|FailOnlyInSync
specifier|private
specifier|static
class|class
name|FailOnlyInSync
extends|extends
name|MockRAMDirectory
operator|.
name|Failure
block|{
DECL|field|didFail
name|boolean
name|didFail
decl_stmt|;
annotation|@
name|Override
DECL|method|eval
specifier|public
name|void
name|eval
parameter_list|(
name|MockRAMDirectory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|doFail
condition|)
block|{
name|StackTraceElement
index|[]
name|trace
init|=
operator|new
name|Exception
argument_list|()
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|trace
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|doFail
operator|&&
literal|"org.apache.lucene.store.MockRAMDirectory"
operator|.
name|equals
argument_list|(
name|trace
index|[
name|i
index|]
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|&&
literal|"sync"
operator|.
name|equals
argument_list|(
name|trace
index|[
name|i
index|]
operator|.
name|getMethodName
argument_list|()
argument_list|)
condition|)
block|{
name|didFail
operator|=
literal|true
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"now failing on purpose during sync"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
comment|// LUCENE-1044: test exception during sync
DECL|method|testExceptionDuringSync
specifier|public
name|void
name|testExceptionDuringSync
parameter_list|()
throws|throws
name|IOException
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|FailOnlyInSync
name|failure
init|=
operator|new
name|FailOnlyInSync
argument_list|()
decl_stmt|;
name|dir
operator|.
name|failOn
argument_list|(
name|failure
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|failure
operator|.
name|setDoFail
argument_list|()
expr_stmt|;
operator|(
operator|(
name|LogMergePolicy
operator|)
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergePolicy
argument_list|()
operator|)
operator|.
name|setMergeFactor
argument_list|(
literal|5
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|23
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|i
operator|-
literal|1
operator|)
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
try|try
block|{
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
operator|(
operator|(
name|ConcurrentMergeScheduler
operator|)
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergeScheduler
argument_list|()
operator|)
operator|.
name|sync
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|failure
operator|.
name|didFail
argument_list|)
expr_stmt|;
name|failure
operator|.
name|clearDoFail
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|23
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1168
DECL|method|testTermVectorCorruption
specifier|public
name|void
name|testTermVectorCorruption
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|2
condition|;
name|iter
operator|++
control|)
block|{
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
operator|.
name|setRAMBufferSizeMB
argument_list|(
name|IndexWriterConfig
operator|.
name|DISABLE_AUTO_FLUSH
argument_list|)
operator|.
name|setMergeScheduler
argument_list|(
operator|new
name|SerialMergeScheduler
argument_list|()
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
operator|new
name|LogDocMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Field
name|storedField
init|=
operator|new
name|Field
argument_list|(
literal|"stored"
argument_list|,
literal|"stored"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NO
argument_list|)
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
name|storedField
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|document
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
name|storedField
argument_list|)
expr_stmt|;
name|Field
name|termVectorField
init|=
operator|new
name|Field
argument_list|(
literal|"termVector"
argument_list|,
literal|"termVector"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
name|termVectorField
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reader
operator|.
name|numDocs
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|reader
operator|.
name|document
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|reader
operator|.
name|getTermFreqVectors
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
operator|.
name|setRAMBufferSizeMB
argument_list|(
name|IndexWriterConfig
operator|.
name|DISABLE_AUTO_FLUSH
argument_list|)
operator|.
name|setMergeScheduler
argument_list|(
operator|new
name|SerialMergeScheduler
argument_list|()
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
operator|new
name|LogDocMergePolicy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Directory
index|[]
name|indexDirs
init|=
block|{
operator|new
name|MockRAMDirectory
argument_list|(
name|dir
argument_list|)
block|}
decl_stmt|;
name|writer
operator|.
name|addIndexes
argument_list|(
name|indexDirs
argument_list|)
expr_stmt|;
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1168
DECL|method|testTermVectorCorruption2
specifier|public
name|void
name|testTermVectorCorruption2
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|2
condition|;
name|iter
operator|++
control|)
block|{
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
operator|.
name|setRAMBufferSizeMB
argument_list|(
name|IndexWriterConfig
operator|.
name|DISABLE_AUTO_FLUSH
argument_list|)
operator|.
name|setMergeScheduler
argument_list|(
operator|new
name|SerialMergeScheduler
argument_list|()
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
operator|new
name|LogDocMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Field
name|storedField
init|=
operator|new
name|Field
argument_list|(
literal|"stored"
argument_list|,
literal|"stored"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NO
argument_list|)
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
name|storedField
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|document
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
name|storedField
argument_list|)
expr_stmt|;
name|Field
name|termVectorField
init|=
operator|new
name|Field
argument_list|(
literal|"termVector"
argument_list|,
literal|"termVector"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
name|termVectorField
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|getTermFreqVectors
argument_list|(
literal|0
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|getTermFreqVectors
argument_list|(
literal|1
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|getTermFreqVectors
argument_list|(
literal|2
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1168
DECL|method|testTermVectorCorruption3
specifier|public
name|void
name|testTermVectorCorruption3
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
operator|.
name|setRAMBufferSizeMB
argument_list|(
name|IndexWriterConfig
operator|.
name|DISABLE_AUTO_FLUSH
argument_list|)
operator|.
name|setMergeScheduler
argument_list|(
operator|new
name|SerialMergeScheduler
argument_list|()
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
operator|new
name|LogDocMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|document
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|Field
name|storedField
init|=
operator|new
name|Field
argument_list|(
literal|"stored"
argument_list|,
literal|"stored"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NO
argument_list|)
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
name|storedField
argument_list|)
expr_stmt|;
name|Field
name|termVectorField
init|=
operator|new
name|Field
argument_list|(
literal|"termVector"
argument_list|,
literal|"termVector"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
name|termVectorField
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
name|writer
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
operator|.
name|setRAMBufferSizeMB
argument_list|(
name|IndexWriterConfig
operator|.
name|DISABLE_AUTO_FLUSH
argument_list|)
operator|.
name|setMergeScheduler
argument_list|(
operator|new
name|SerialMergeScheduler
argument_list|()
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
operator|new
name|LogDocMergePolicy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
name|writer
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|reader
operator|.
name|getTermFreqVectors
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|reader
operator|.
name|document
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1084: test user-specified field length
DECL|method|testUserSpecifiedMaxFieldLength
specifier|public
name|void
name|testUserSpecifiedMaxFieldLength
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxFieldLength
argument_list|(
literal|100000
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
name|b
operator|.
name|append
argument_list|(
literal|" a"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|" x"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
name|b
operator|.
name|toString
argument_list|()
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Term
name|t
init|=
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|docFreq
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-325: test expungeDeletes, when 2 singular merges
comment|// are required
DECL|method|testExpungeDeletes
specifier|public
name|void
name|testExpungeDeletes
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
operator|.
name|setRAMBufferSizeMB
argument_list|(
name|IndexWriterConfig
operator|.
name|DISABLE_AUTO_FLUSH
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|document
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|Field
name|storedField
init|=
operator|new
name|Field
argument_list|(
literal|"stored"
argument_list|,
literal|"stored"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NO
argument_list|)
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
name|storedField
argument_list|)
expr_stmt|;
name|Field
name|termVectorField
init|=
operator|new
name|Field
argument_list|(
literal|"termVector"
argument_list|,
literal|"termVector"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
name|termVectorField
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
name|writer
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|ir
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|ir
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|ir
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|ir
operator|.
name|deleteDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ir
operator|.
name|deleteDocument
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|ir
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|writer
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|writer
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|expungeDeletes
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|writer
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|ir
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|ir
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|ir
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-325: test expungeDeletes, when many adjacent merges are required
DECL|method|testExpungeDeletes2
specifier|public
name|void
name|testExpungeDeletes2
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
operator|.
name|setRAMBufferSizeMB
argument_list|(
name|IndexWriterConfig
operator|.
name|DISABLE_AUTO_FLUSH
argument_list|)
argument_list|)
decl_stmt|;
operator|(
operator|(
name|LogMergePolicy
operator|)
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergePolicy
argument_list|()
operator|)
operator|.
name|setMergeFactor
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|document
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|Field
name|storedField
init|=
operator|new
name|Field
argument_list|(
literal|"stored"
argument_list|,
literal|"stored"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NO
argument_list|)
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
name|storedField
argument_list|)
expr_stmt|;
name|Field
name|termVectorField
init|=
operator|new
name|Field
argument_list|(
literal|"termVector"
argument_list|,
literal|"termVector"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
name|termVectorField
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|98
condition|;
name|i
operator|++
control|)
name|writer
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|ir
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|98
argument_list|,
name|ir
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|98
argument_list|,
name|ir
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|98
condition|;
name|i
operator|+=
literal|2
control|)
name|ir
operator|.
name|deleteDocument
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|49
argument_list|,
name|ir
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LogMergePolicy
operator|)
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergePolicy
argument_list|()
operator|)
operator|.
name|setMergeFactor
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|49
argument_list|,
name|writer
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|expungeDeletes
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|ir
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|49
argument_list|,
name|ir
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|49
argument_list|,
name|ir
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-325: test expungeDeletes without waiting, when
comment|// many adjacent merges are required
DECL|method|testExpungeDeletes3
specifier|public
name|void
name|testExpungeDeletes3
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
operator|.
name|setRAMBufferSizeMB
argument_list|(
name|IndexWriterConfig
operator|.
name|DISABLE_AUTO_FLUSH
argument_list|)
argument_list|)
decl_stmt|;
operator|(
operator|(
name|LogMergePolicy
operator|)
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergePolicy
argument_list|()
operator|)
operator|.
name|setMergeFactor
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|document
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|Field
name|storedField
init|=
operator|new
name|Field
argument_list|(
literal|"stored"
argument_list|,
literal|"stored"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NO
argument_list|)
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
name|storedField
argument_list|)
expr_stmt|;
name|Field
name|termVectorField
init|=
operator|new
name|Field
argument_list|(
literal|"termVector"
argument_list|,
literal|"termVector"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
decl_stmt|;
name|document
operator|.
name|add
argument_list|(
name|termVectorField
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|98
condition|;
name|i
operator|++
control|)
name|writer
operator|.
name|addDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|ir
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|98
argument_list|,
name|ir
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|98
argument_list|,
name|ir
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|98
condition|;
name|i
operator|+=
literal|2
control|)
name|ir
operator|.
name|deleteDocument
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|49
argument_list|,
name|ir
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Force many merges to happen
operator|(
operator|(
name|LogMergePolicy
operator|)
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergePolicy
argument_list|()
operator|)
operator|.
name|setMergeFactor
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|writer
operator|.
name|expungeDeletes
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|ir
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|49
argument_list|,
name|ir
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|49
argument_list|,
name|ir
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1179
DECL|method|testEmptyFieldName
specifier|public
name|void
name|testEmptyFieldName
parameter_list|()
throws|throws
name|IOException
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|""
argument_list|,
literal|"a b c"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1198
DECL|class|MockIndexWriter
specifier|private
specifier|static
specifier|final
class|class
name|MockIndexWriter
extends|extends
name|IndexWriter
block|{
DECL|method|MockIndexWriter
specifier|public
name|MockIndexWriter
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|IndexWriterConfig
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|field|doFail
name|boolean
name|doFail
decl_stmt|;
annotation|@
name|Override
DECL|method|testPoint
name|boolean
name|testPoint
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|doFail
operator|&&
name|name
operator|.
name|equals
argument_list|(
literal|"DocumentsWriter.ThreadState.init start"
argument_list|)
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"intentionally failing"
argument_list|)
throw|;
return|return
literal|true
return|;
block|}
block|}
DECL|method|testExceptionDocumentsWriterInit
specifier|public
name|void
name|testExceptionDocumentsWriterInit
parameter_list|()
throws|throws
name|IOException
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|MockIndexWriter
name|w
init|=
operator|new
name|MockIndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"a field"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|doFail
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|re
parameter_list|)
block|{
comment|// expected
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|_TestUtil
operator|.
name|checkIndex
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1208
DECL|method|testExceptionJustBeforeFlush
specifier|public
name|void
name|testExceptionJustBeforeFlush
parameter_list|()
throws|throws
name|IOException
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|MockIndexWriter
name|w
init|=
operator|new
name|MockIndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"a field"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|Analyzer
name|analyzer
init|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TokenStream
name|tokenStream
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|CrashingFilter
argument_list|(
name|fieldName
argument_list|,
operator|new
name|MockTokenizer
argument_list|(
name|reader
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Document
name|crashDoc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|crashDoc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"crash"
argument_list|,
literal|"do it on token 4"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|crashDoc
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// expected
block|}
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|MockIndexWriter2
specifier|private
specifier|static
specifier|final
class|class
name|MockIndexWriter2
extends|extends
name|IndexWriter
block|{
DECL|method|MockIndexWriter2
specifier|public
name|MockIndexWriter2
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|IndexWriterConfig
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|field|doFail
name|boolean
name|doFail
decl_stmt|;
DECL|field|failed
name|boolean
name|failed
decl_stmt|;
annotation|@
name|Override
DECL|method|testPoint
name|boolean
name|testPoint
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|doFail
operator|&&
name|name
operator|.
name|equals
argument_list|(
literal|"startMergeInit"
argument_list|)
condition|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"intentionally failing"
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
block|}
comment|// LUCENE-1210
DECL|method|testExceptionOnMergeInit
specifier|public
name|void
name|testExceptionOnMergeInit
parameter_list|()
throws|throws
name|IOException
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|conf
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
decl_stmt|;
operator|(
operator|(
name|LogMergePolicy
operator|)
name|conf
operator|.
name|getMergePolicy
argument_list|()
operator|)
operator|.
name|setMergeFactor
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|MockIndexWriter2
name|w
init|=
operator|new
name|MockIndexWriter2
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|w
operator|.
name|doFail
operator|=
literal|true
expr_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"a field"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
try|try
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|re
parameter_list|)
block|{
break|break;
block|}
operator|(
operator|(
name|ConcurrentMergeScheduler
operator|)
name|w
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergeScheduler
argument_list|()
operator|)
operator|.
name|sync
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|w
operator|.
name|failed
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|MockIndexWriter3
specifier|private
specifier|static
specifier|final
class|class
name|MockIndexWriter3
extends|extends
name|IndexWriter
block|{
DECL|method|MockIndexWriter3
specifier|public
name|MockIndexWriter3
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|IndexWriterConfig
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|field|afterWasCalled
name|boolean
name|afterWasCalled
decl_stmt|;
DECL|field|beforeWasCalled
name|boolean
name|beforeWasCalled
decl_stmt|;
annotation|@
name|Override
DECL|method|doAfterFlush
specifier|public
name|void
name|doAfterFlush
parameter_list|()
block|{
name|afterWasCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doBeforeFlush
specifier|protected
name|void
name|doBeforeFlush
parameter_list|()
throws|throws
name|IOException
block|{
name|beforeWasCalled
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// LUCENE-1222
DECL|method|testDoBeforeAfterFlush
specifier|public
name|void
name|testDoBeforeAfterFlush
parameter_list|()
throws|throws
name|IOException
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|MockIndexWriter3
name|w
init|=
operator|new
name|MockIndexWriter3
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"a field"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|w
operator|.
name|beforeWasCalled
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|w
operator|.
name|afterWasCalled
argument_list|)
expr_stmt|;
name|w
operator|.
name|beforeWasCalled
operator|=
literal|false
expr_stmt|;
name|w
operator|.
name|afterWasCalled
operator|=
literal|false
expr_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|w
operator|.
name|beforeWasCalled
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|w
operator|.
name|afterWasCalled
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|ir
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ir
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ir
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|FailOnlyInCommit
specifier|private
specifier|static
class|class
name|FailOnlyInCommit
extends|extends
name|MockRAMDirectory
operator|.
name|Failure
block|{
DECL|field|fail1
DECL|field|fail2
name|boolean
name|fail1
decl_stmt|,
name|fail2
decl_stmt|;
annotation|@
name|Override
DECL|method|eval
specifier|public
name|void
name|eval
parameter_list|(
name|MockRAMDirectory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|StackTraceElement
index|[]
name|trace
init|=
operator|new
name|Exception
argument_list|()
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
name|boolean
name|isCommit
init|=
literal|false
decl_stmt|;
name|boolean
name|isDelete
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|trace
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
literal|"org.apache.lucene.index.SegmentInfos"
operator|.
name|equals
argument_list|(
name|trace
index|[
name|i
index|]
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|&&
literal|"prepareCommit"
operator|.
name|equals
argument_list|(
name|trace
index|[
name|i
index|]
operator|.
name|getMethodName
argument_list|()
argument_list|)
condition|)
name|isCommit
operator|=
literal|true
expr_stmt|;
if|if
condition|(
literal|"org.apache.lucene.store.MockRAMDirectory"
operator|.
name|equals
argument_list|(
name|trace
index|[
name|i
index|]
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|&&
literal|"deleteFile"
operator|.
name|equals
argument_list|(
name|trace
index|[
name|i
index|]
operator|.
name|getMethodName
argument_list|()
argument_list|)
condition|)
name|isDelete
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isCommit
condition|)
block|{
if|if
condition|(
operator|!
name|isDelete
condition|)
block|{
name|fail1
operator|=
literal|true
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"now fail first"
argument_list|)
throw|;
block|}
else|else
block|{
name|fail2
operator|=
literal|true
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"now fail during delete"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|// LUCENE-1214
DECL|method|testExceptionsDuringCommit
specifier|public
name|void
name|testExceptionsDuringCommit
parameter_list|()
throws|throws
name|Throwable
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|FailOnlyInCommit
name|failure
init|=
operator|new
name|FailOnlyInCommit
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"a field"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|dir
operator|.
name|failOn
argument_list|(
name|failure
argument_list|)
expr_stmt|;
try|try
block|{
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|fail
argument_list|(
literal|"expected only RuntimeException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|re
parameter_list|)
block|{
comment|// Expected
block|}
name|assertTrue
argument_list|(
name|failure
operator|.
name|fail1
operator|&&
name|failure
operator|.
name|fail2
argument_list|)
expr_stmt|;
name|w
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|field|utf8Data
specifier|final
name|String
index|[]
name|utf8Data
init|=
operator|new
name|String
index|[]
block|{
comment|// unpaired low surrogate
literal|"ab\udc17cd"
block|,
literal|"ab\ufffdcd"
block|,
literal|"\udc17abcd"
block|,
literal|"\ufffdabcd"
block|,
literal|"\udc17"
block|,
literal|"\ufffd"
block|,
literal|"ab\udc17\udc17cd"
block|,
literal|"ab\ufffd\ufffdcd"
block|,
literal|"\udc17\udc17abcd"
block|,
literal|"\ufffd\ufffdabcd"
block|,
literal|"\udc17\udc17"
block|,
literal|"\ufffd\ufffd"
block|,
comment|// unpaired high surrogate
literal|"ab\ud917cd"
block|,
literal|"ab\ufffdcd"
block|,
literal|"\ud917abcd"
block|,
literal|"\ufffdabcd"
block|,
literal|"\ud917"
block|,
literal|"\ufffd"
block|,
literal|"ab\ud917\ud917cd"
block|,
literal|"ab\ufffd\ufffdcd"
block|,
literal|"\ud917\ud917abcd"
block|,
literal|"\ufffd\ufffdabcd"
block|,
literal|"\ud917\ud917"
block|,
literal|"\ufffd\ufffd"
block|,
comment|// backwards surrogates
literal|"ab\udc17\ud917cd"
block|,
literal|"ab\ufffd\ufffdcd"
block|,
literal|"\udc17\ud917abcd"
block|,
literal|"\ufffd\ufffdabcd"
block|,
literal|"\udc17\ud917"
block|,
literal|"\ufffd\ufffd"
block|,
literal|"ab\udc17\ud917\udc17\ud917cd"
block|,
literal|"ab\ufffd\ud917\udc17\ufffdcd"
block|,
literal|"\udc17\ud917\udc17\ud917abcd"
block|,
literal|"\ufffd\ud917\udc17\ufffdabcd"
block|,
literal|"\udc17\ud917\udc17\ud917"
block|,
literal|"\ufffd\ud917\udc17\ufffd"
block|}
decl_stmt|;
comment|// LUCENE-510
DECL|method|testInvalidUTF16
specifier|public
name|void
name|testInvalidUTF16
parameter_list|()
throws|throws
name|Throwable
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
specifier|final
name|int
name|count
init|=
name|utf8Data
operator|.
name|length
operator|/
literal|2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f"
operator|+
name|i
argument_list|,
name|utf8Data
index|[
literal|2
operator|*
name|i
index|]
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|ir
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Document
name|doc2
init|=
name|ir
operator|.
name|document
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"field "
operator|+
name|i
operator|+
literal|" was not indexed correctly"
argument_list|,
literal|1
argument_list|,
name|ir
operator|.
name|docFreq
argument_list|(
operator|new
name|Term
argument_list|(
literal|"f"
operator|+
name|i
argument_list|,
name|utf8Data
index|[
literal|2
operator|*
name|i
operator|+
literal|1
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"field "
operator|+
name|i
operator|+
literal|" is incorrect"
argument_list|,
name|utf8Data
index|[
literal|2
operator|*
name|i
operator|+
literal|1
index|]
argument_list|,
name|doc2
operator|.
name|getField
argument_list|(
literal|"f"
operator|+
name|i
argument_list|)
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-510
DECL|method|testAllUnicodeChars
specifier|public
name|void
name|testAllUnicodeChars
parameter_list|()
throws|throws
name|Throwable
block|{
name|BytesRef
name|utf8
init|=
operator|new
name|BytesRef
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|UnicodeUtil
operator|.
name|UTF16Result
name|utf16
init|=
operator|new
name|UnicodeUtil
operator|.
name|UTF16Result
argument_list|()
decl_stmt|;
name|char
index|[]
name|chars
init|=
operator|new
name|char
index|[
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|ch
init|=
literal|0
init|;
name|ch
operator|<
literal|0x0010FFFF
condition|;
name|ch
operator|++
control|)
block|{
if|if
condition|(
name|ch
operator|==
literal|0xd800
condition|)
comment|// Skip invalid code points
name|ch
operator|=
literal|0xe000
expr_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|ch
operator|<=
literal|0xffff
condition|)
block|{
name|chars
index|[
name|len
operator|++
index|]
operator|=
operator|(
name|char
operator|)
name|ch
expr_stmt|;
block|}
else|else
block|{
name|chars
index|[
name|len
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
operator|(
operator|(
name|ch
operator|-
literal|0x0010000
operator|)
operator|>>
literal|10
operator|)
operator|+
name|UnicodeUtil
operator|.
name|UNI_SUR_HIGH_START
argument_list|)
expr_stmt|;
name|chars
index|[
name|len
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
operator|(
operator|(
name|ch
operator|-
literal|0x0010000
operator|)
operator|&
literal|0x3FFL
operator|)
operator|+
name|UnicodeUtil
operator|.
name|UNI_SUR_LOW_START
argument_list|)
expr_stmt|;
block|}
name|UnicodeUtil
operator|.
name|UTF16toUTF8
argument_list|(
name|chars
argument_list|,
literal|0
argument_list|,
name|len
argument_list|,
name|utf8
argument_list|)
expr_stmt|;
name|String
name|s1
init|=
operator|new
name|String
argument_list|(
name|chars
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|String
name|s2
init|=
operator|new
name|String
argument_list|(
name|utf8
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|utf8
operator|.
name|length
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"codepoint "
operator|+
name|ch
argument_list|,
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
name|UnicodeUtil
operator|.
name|UTF8toUTF16
argument_list|(
name|utf8
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|utf8
operator|.
name|length
argument_list|,
name|utf16
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"codepoint "
operator|+
name|ch
argument_list|,
name|s1
argument_list|,
operator|new
name|String
argument_list|(
name|utf16
operator|.
name|result
argument_list|,
literal|0
argument_list|,
name|utf16
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b
init|=
name|s1
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|utf8
operator|.
name|length
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|utf8
operator|.
name|length
condition|;
name|j
operator|++
control|)
name|assertEquals
argument_list|(
name|utf8
operator|.
name|bytes
index|[
name|j
index|]
argument_list|,
name|b
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|r
name|Random
name|r
decl_stmt|;
DECL|method|nextInt
specifier|private
name|int
name|nextInt
parameter_list|(
name|int
name|lim
parameter_list|)
block|{
return|return
name|r
operator|.
name|nextInt
argument_list|(
name|lim
argument_list|)
return|;
block|}
DECL|method|nextInt
specifier|private
name|int
name|nextInt
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
return|return
name|start
operator|+
name|nextInt
argument_list|(
name|end
operator|-
name|start
argument_list|)
return|;
block|}
DECL|method|fillUnicode
specifier|private
name|boolean
name|fillUnicode
parameter_list|(
name|char
index|[]
name|buffer
parameter_list|,
name|char
index|[]
name|expected
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|count
parameter_list|)
block|{
specifier|final
name|int
name|len
init|=
name|offset
operator|+
name|count
decl_stmt|;
name|boolean
name|hasIllegal
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|offset
operator|>
literal|0
operator|&&
name|buffer
index|[
name|offset
index|]
operator|>=
literal|0xdc00
operator|&&
name|buffer
index|[
name|offset
index|]
operator|<
literal|0xe000
condition|)
comment|// Don't start in the middle of a valid surrogate pair
name|offset
operator|--
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|int
name|t
init|=
name|nextInt
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|t
operator|&&
name|i
operator|<
name|len
operator|-
literal|1
condition|)
block|{
comment|// Make a surrogate pair
comment|// High surrogate
name|expected
index|[
name|i
index|]
operator|=
name|buffer
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|char
operator|)
name|nextInt
argument_list|(
literal|0xd800
argument_list|,
literal|0xdc00
argument_list|)
expr_stmt|;
comment|// Low surrogate
name|expected
index|[
name|i
index|]
operator|=
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|nextInt
argument_list|(
literal|0xdc00
argument_list|,
literal|0xe000
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|t
operator|<=
literal|1
condition|)
name|expected
index|[
name|i
index|]
operator|=
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|nextInt
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
literal|2
operator|==
name|t
condition|)
name|expected
index|[
name|i
index|]
operator|=
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|nextInt
argument_list|(
literal|0x80
argument_list|,
literal|0x800
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
literal|3
operator|==
name|t
condition|)
name|expected
index|[
name|i
index|]
operator|=
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|nextInt
argument_list|(
literal|0x800
argument_list|,
literal|0xd800
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
literal|4
operator|==
name|t
condition|)
name|expected
index|[
name|i
index|]
operator|=
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|nextInt
argument_list|(
literal|0xe000
argument_list|,
literal|0xffff
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
literal|5
operator|==
name|t
operator|&&
name|i
operator|<
name|len
operator|-
literal|1
condition|)
block|{
comment|// Illegal unpaired surrogate
if|if
condition|(
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|7
condition|)
block|{
if|if
condition|(
name|r
operator|.
name|nextBoolean
argument_list|()
condition|)
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|nextInt
argument_list|(
literal|0xd800
argument_list|,
literal|0xdc00
argument_list|)
expr_stmt|;
else|else
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|nextInt
argument_list|(
literal|0xdc00
argument_list|,
literal|0xe000
argument_list|)
expr_stmt|;
name|expected
index|[
name|i
operator|++
index|]
operator|=
literal|0xfffd
expr_stmt|;
name|expected
index|[
name|i
index|]
operator|=
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|nextInt
argument_list|(
literal|0x800
argument_list|,
literal|0xd800
argument_list|)
expr_stmt|;
name|hasIllegal
operator|=
literal|true
expr_stmt|;
block|}
else|else
name|expected
index|[
name|i
index|]
operator|=
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|nextInt
argument_list|(
literal|0x800
argument_list|,
literal|0xd800
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expected
index|[
name|i
index|]
operator|=
name|buffer
index|[
name|i
index|]
operator|=
literal|' '
expr_stmt|;
block|}
block|}
return|return
name|hasIllegal
return|;
block|}
comment|// LUCENE-510
DECL|method|testRandomUnicodeStrings
specifier|public
name|void
name|testRandomUnicodeStrings
parameter_list|()
throws|throws
name|Throwable
block|{
name|r
operator|=
name|newRandom
argument_list|()
expr_stmt|;
name|char
index|[]
name|buffer
init|=
operator|new
name|char
index|[
literal|20
index|]
decl_stmt|;
name|char
index|[]
name|expected
init|=
operator|new
name|char
index|[
literal|20
index|]
decl_stmt|;
name|BytesRef
name|utf8
init|=
operator|new
name|BytesRef
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|UnicodeUtil
operator|.
name|UTF16Result
name|utf16
init|=
operator|new
name|UnicodeUtil
operator|.
name|UTF16Result
argument_list|()
decl_stmt|;
name|int
name|num
init|=
literal|100000
operator|*
name|RANDOM_MULTIPLIER
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|num
condition|;
name|iter
operator|++
control|)
block|{
name|boolean
name|hasIllegal
init|=
name|fillUnicode
argument_list|(
name|buffer
argument_list|,
name|expected
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|UnicodeUtil
operator|.
name|UTF16toUTF8
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|,
name|utf8
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasIllegal
condition|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|b
operator|.
name|length
argument_list|,
name|utf8
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|b
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|assertEquals
argument_list|(
name|b
index|[
name|i
index|]
argument_list|,
name|utf8
operator|.
name|bytes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|UnicodeUtil
operator|.
name|UTF8toUTF16
argument_list|(
name|utf8
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|utf8
operator|.
name|length
argument_list|,
name|utf16
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|utf16
operator|.
name|length
argument_list|,
literal|20
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
name|assertEquals
argument_list|(
name|expected
index|[
name|i
index|]
argument_list|,
name|utf16
operator|.
name|result
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// LUCENE-510
DECL|method|testIncrementalUnicodeStrings
specifier|public
name|void
name|testIncrementalUnicodeStrings
parameter_list|()
throws|throws
name|Throwable
block|{
name|r
operator|=
name|newRandom
argument_list|()
expr_stmt|;
name|char
index|[]
name|buffer
init|=
operator|new
name|char
index|[
literal|20
index|]
decl_stmt|;
name|char
index|[]
name|expected
init|=
operator|new
name|char
index|[
literal|20
index|]
decl_stmt|;
name|BytesRef
name|utf8
init|=
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[
literal|20
index|]
argument_list|)
decl_stmt|;
name|UnicodeUtil
operator|.
name|UTF16Result
name|utf16
init|=
operator|new
name|UnicodeUtil
operator|.
name|UTF16Result
argument_list|()
decl_stmt|;
name|UnicodeUtil
operator|.
name|UTF16Result
name|utf16a
init|=
operator|new
name|UnicodeUtil
operator|.
name|UTF16Result
argument_list|()
decl_stmt|;
name|boolean
name|hasIllegal
init|=
literal|false
decl_stmt|;
name|byte
index|[]
name|last
init|=
operator|new
name|byte
index|[
literal|60
index|]
decl_stmt|;
name|int
name|num
init|=
literal|100000
operator|*
name|RANDOM_MULTIPLIER
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|num
condition|;
name|iter
operator|++
control|)
block|{
specifier|final
name|int
name|prefix
decl_stmt|;
if|if
condition|(
name|iter
operator|==
literal|0
operator|||
name|hasIllegal
condition|)
name|prefix
operator|=
literal|0
expr_stmt|;
else|else
name|prefix
operator|=
name|nextInt
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|hasIllegal
operator|=
name|fillUnicode
argument_list|(
name|buffer
argument_list|,
name|expected
argument_list|,
name|prefix
argument_list|,
literal|20
operator|-
name|prefix
argument_list|)
expr_stmt|;
name|UnicodeUtil
operator|.
name|UTF16toUTF8
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|,
name|utf8
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasIllegal
condition|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|b
operator|.
name|length
argument_list|,
name|utf8
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|b
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|assertEquals
argument_list|(
name|b
index|[
name|i
index|]
argument_list|,
name|utf8
operator|.
name|bytes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|int
name|bytePrefix
init|=
literal|20
decl_stmt|;
if|if
condition|(
name|iter
operator|==
literal|0
operator|||
name|hasIllegal
condition|)
name|bytePrefix
operator|=
literal|0
expr_stmt|;
else|else
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|last
index|[
name|i
index|]
operator|!=
name|utf8
operator|.
name|bytes
index|[
name|i
index|]
condition|)
block|{
name|bytePrefix
operator|=
name|i
expr_stmt|;
break|break;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|utf8
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|last
argument_list|,
literal|0
argument_list|,
name|utf8
operator|.
name|length
argument_list|)
expr_stmt|;
name|UnicodeUtil
operator|.
name|UTF8toUTF16
argument_list|(
name|utf8
operator|.
name|bytes
argument_list|,
name|bytePrefix
argument_list|,
name|utf8
operator|.
name|length
operator|-
name|bytePrefix
argument_list|,
name|utf16
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|utf16
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
name|assertEquals
argument_list|(
name|expected
index|[
name|i
index|]
argument_list|,
name|utf16
operator|.
name|result
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|UnicodeUtil
operator|.
name|UTF8toUTF16
argument_list|(
name|utf8
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|utf8
operator|.
name|length
argument_list|,
name|utf16a
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|utf16a
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
name|assertEquals
argument_list|(
name|expected
index|[
name|i
index|]
argument_list|,
name|utf16a
operator|.
name|result
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// LUCENE-1255
DECL|method|testNegativePositions
specifier|public
name|void
name|testNegativePositions
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|TokenStream
name|tokens
init|=
operator|new
name|TokenStream
argument_list|()
block|{
specifier|final
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|PositionIncrementAttribute
name|posIncrAtt
init|=
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|terms
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|incrementToken
parameter_list|()
block|{
if|if
condition|(
operator|!
name|terms
operator|.
name|hasNext
argument_list|()
condition|)
return|return
literal|false
return|;
name|clearAttributes
argument_list|()
expr_stmt|;
name|termAtt
operator|.
name|append
argument_list|(
name|terms
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|posIncrAtt
operator|.
name|setPositionIncrement
argument_list|(
name|first
condition|?
literal|0
else|:
literal|1
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
name|tokens
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|IndexSearcher
name|s
init|=
operator|new
name|IndexSearcher
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|PhraseQuery
name|pq
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|pq
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|pq
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|pq
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|s
operator|.
name|search
argument_list|(
name|pq
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|Query
name|q
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|hits
operator|=
name|s
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|DocsAndPositionsEnum
name|tps
init|=
name|MultiFields
operator|.
name|getTermPositionsEnum
argument_list|(
name|s
operator|.
name|getIndexReader
argument_list|()
argument_list|,
name|MultiFields
operator|.
name|getDeletedDocs
argument_list|(
name|s
operator|.
name|getIndexReader
argument_list|()
argument_list|)
argument_list|,
literal|"field"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tps
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocsEnum
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tps
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tps
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|_TestUtil
operator|.
name|checkIndex
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1274: test writer.prepareCommit()
DECL|method|testPrepareCommit
specifier|public
name|void
name|testPrepareCommit
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
operator|(
operator|(
name|LogMergePolicy
operator|)
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergePolicy
argument_list|()
operator|)
operator|.
name|setMergeFactor
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|23
condition|;
name|i
operator|++
control|)
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|prepareCommit
argument_list|()
expr_stmt|;
name|IndexReader
name|reader2
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader2
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|IndexReader
name|reader3
init|=
name|reader
operator|.
name|reopen
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader2
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|23
argument_list|,
name|reader3
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader2
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|17
condition|;
name|i
operator|++
control|)
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|23
argument_list|,
name|reader3
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|reader3
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|23
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|prepareCommit
argument_list|()
expr_stmt|;
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|23
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|40
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1274: test writer.prepareCommit()
DECL|method|testPrepareCommitRollback
specifier|public
name|void
name|testPrepareCommitRollback
parameter_list|()
throws|throws
name|IOException
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|dir
operator|.
name|setPreventDoubleWrite
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
operator|(
operator|(
name|LogMergePolicy
operator|)
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergePolicy
argument_list|()
operator|)
operator|.
name|setMergeFactor
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|23
condition|;
name|i
operator|++
control|)
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|prepareCommit
argument_list|()
expr_stmt|;
name|IndexReader
name|reader2
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader2
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|IndexReader
name|reader3
init|=
name|reader
operator|.
name|reopen
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader2
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader3
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader2
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|17
condition|;
name|i
operator|++
control|)
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader3
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|reader3
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|prepareCommit
argument_list|()
expr_stmt|;
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1274
DECL|method|testPrepareCommitNoChanges
specifier|public
name|void
name|testPrepareCommitNoChanges
parameter_list|()
throws|throws
name|IOException
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|prepareCommit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|RunAddIndexesThreads
specifier|private
specifier|abstract
specifier|static
class|class
name|RunAddIndexesThreads
block|{
DECL|field|dir
DECL|field|dir2
name|Directory
name|dir
decl_stmt|,
name|dir2
decl_stmt|;
DECL|field|NUM_INIT_DOCS
specifier|final
specifier|static
name|int
name|NUM_INIT_DOCS
init|=
literal|17
decl_stmt|;
DECL|field|writer2
name|IndexWriter
name|writer2
decl_stmt|;
DECL|field|failures
specifier|final
name|List
argument_list|<
name|Throwable
argument_list|>
name|failures
init|=
operator|new
name|ArrayList
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|didClose
specifier|volatile
name|boolean
name|didClose
decl_stmt|;
DECL|field|readers
specifier|final
name|IndexReader
index|[]
name|readers
decl_stmt|;
DECL|field|NUM_COPY
specifier|final
name|int
name|NUM_COPY
decl_stmt|;
DECL|field|NUM_THREADS
specifier|final
specifier|static
name|int
name|NUM_THREADS
init|=
literal|5
decl_stmt|;
DECL|field|threads
specifier|final
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|NUM_THREADS
index|]
decl_stmt|;
DECL|method|RunAddIndexesThreads
specifier|public
name|RunAddIndexesThreads
parameter_list|(
name|int
name|numCopy
parameter_list|)
throws|throws
name|Throwable
block|{
name|NUM_COPY
operator|=
name|numCopy
expr_stmt|;
name|dir
operator|=
operator|new
name|MockRAMDirectory
argument_list|()
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_INIT_DOCS
condition|;
name|i
operator|++
control|)
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir2
operator|=
operator|new
name|MockRAMDirectory
argument_list|()
expr_stmt|;
name|writer2
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir2
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer2
operator|.
name|commit
argument_list|()
expr_stmt|;
name|readers
operator|=
operator|new
name|IndexReader
index|[
name|NUM_COPY
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_COPY
condition|;
name|i
operator|++
control|)
name|readers
index|[
name|i
index|]
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|launchThreads
name|void
name|launchThreads
parameter_list|(
specifier|final
name|int
name|numIter
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
specifier|final
name|Directory
index|[]
name|dirs
init|=
operator|new
name|Directory
index|[
name|NUM_COPY
index|]
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|NUM_COPY
condition|;
name|k
operator|++
control|)
name|dirs
index|[
name|k
index|]
operator|=
operator|new
name|MockRAMDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// System.out.println(Thread.currentThread().getName() + ": iter j=" + j);
if|if
condition|(
name|numIter
operator|>
literal|0
operator|&&
name|j
operator|==
name|numIter
condition|)
break|break;
name|doBody
argument_list|(
name|j
operator|++
argument_list|,
name|dirs
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|handle
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|joinThreads
name|void
name|joinThreads
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
DECL|method|close
name|void
name|close
parameter_list|(
name|boolean
name|doWait
parameter_list|)
throws|throws
name|Throwable
block|{
name|didClose
operator|=
literal|true
expr_stmt|;
name|writer2
operator|.
name|close
argument_list|(
name|doWait
argument_list|)
expr_stmt|;
block|}
DECL|method|closeDir
name|void
name|closeDir
parameter_list|()
throws|throws
name|Throwable
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_COPY
condition|;
name|i
operator|++
control|)
name|readers
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|doBody
specifier|abstract
name|void
name|doBody
parameter_list|(
name|int
name|j
parameter_list|,
name|Directory
index|[]
name|dirs
parameter_list|)
throws|throws
name|Throwable
function_decl|;
DECL|method|handle
specifier|abstract
name|void
name|handle
parameter_list|(
name|Throwable
name|t
parameter_list|)
function_decl|;
block|}
DECL|class|CommitAndAddIndexes
specifier|private
class|class
name|CommitAndAddIndexes
extends|extends
name|RunAddIndexesThreads
block|{
DECL|method|CommitAndAddIndexes
specifier|public
name|CommitAndAddIndexes
parameter_list|(
name|int
name|numCopy
parameter_list|)
throws|throws
name|Throwable
block|{
name|super
argument_list|(
name|numCopy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle
name|void
name|handle
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|failures
init|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doBody
name|void
name|doBody
parameter_list|(
name|int
name|j
parameter_list|,
name|Directory
index|[]
name|dirs
parameter_list|)
throws|throws
name|Throwable
block|{
switch|switch
condition|(
name|j
operator|%
literal|5
condition|)
block|{
case|case
literal|0
case|:
name|writer2
operator|.
name|addIndexes
argument_list|(
name|dirs
argument_list|)
expr_stmt|;
name|writer2
operator|.
name|optimize
argument_list|()
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|writer2
operator|.
name|addIndexes
argument_list|(
name|dirs
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|writer2
operator|.
name|addIndexes
argument_list|(
name|readers
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|writer2
operator|.
name|addIndexes
argument_list|(
name|dirs
argument_list|)
expr_stmt|;
name|writer2
operator|.
name|maybeMerge
argument_list|()
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|writer2
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// LUCENE-1335: test simultaneous addIndexes& commits
comment|// from multiple threads
DECL|method|testAddIndexesWithThreads
specifier|public
name|void
name|testAddIndexesWithThreads
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|int
name|NUM_ITER
init|=
literal|15
decl_stmt|;
specifier|final
name|int
name|NUM_COPY
init|=
literal|3
decl_stmt|;
name|CommitAndAddIndexes
name|c
init|=
operator|new
name|CommitAndAddIndexes
argument_list|(
name|NUM_COPY
argument_list|)
decl_stmt|;
name|c
operator|.
name|launchThreads
argument_list|(
name|NUM_ITER
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
name|addDoc
argument_list|(
name|c
operator|.
name|writer2
argument_list|)
expr_stmt|;
name|c
operator|.
name|joinThreads
argument_list|()
expr_stmt|;
name|int
name|expectedNumDocs
init|=
literal|100
operator|+
name|NUM_COPY
operator|*
operator|(
literal|4
operator|*
name|NUM_ITER
operator|/
literal|5
operator|)
operator|*
name|RunAddIndexesThreads
operator|.
name|NUM_THREADS
operator|*
name|RunAddIndexesThreads
operator|.
name|NUM_INIT_DOCS
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedNumDocs
argument_list|,
name|c
operator|.
name|writer2
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|failures
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|_TestUtil
operator|.
name|checkIndex
argument_list|(
name|c
operator|.
name|dir2
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|c
operator|.
name|dir2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedNumDocs
argument_list|,
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|c
operator|.
name|closeDir
argument_list|()
expr_stmt|;
block|}
DECL|class|CommitAndAddIndexes2
specifier|private
class|class
name|CommitAndAddIndexes2
extends|extends
name|CommitAndAddIndexes
block|{
DECL|method|CommitAndAddIndexes2
specifier|public
name|CommitAndAddIndexes2
parameter_list|(
name|int
name|numCopy
parameter_list|)
throws|throws
name|Throwable
block|{
name|super
argument_list|(
name|numCopy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle
name|void
name|handle
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|t
operator|instanceof
name|AlreadyClosedException
operator|)
operator|&&
operator|!
operator|(
name|t
operator|instanceof
name|NullPointerException
operator|)
condition|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|failures
init|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// LUCENE-1335: test simultaneous addIndexes& close
DECL|method|testAddIndexesWithClose
specifier|public
name|void
name|testAddIndexesWithClose
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|int
name|NUM_COPY
init|=
literal|3
decl_stmt|;
name|CommitAndAddIndexes2
name|c
init|=
operator|new
name|CommitAndAddIndexes2
argument_list|(
name|NUM_COPY
argument_list|)
decl_stmt|;
comment|//c.writer2.setInfoStream(System.out);
name|c
operator|.
name|launchThreads
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Close w/o first stopping/joining the threads
name|c
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//c.writer2.close();
name|c
operator|.
name|joinThreads
argument_list|()
expr_stmt|;
name|_TestUtil
operator|.
name|checkIndex
argument_list|(
name|c
operator|.
name|dir2
argument_list|)
expr_stmt|;
name|c
operator|.
name|closeDir
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|failures
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|class|CommitAndAddIndexes3
specifier|private
class|class
name|CommitAndAddIndexes3
extends|extends
name|RunAddIndexesThreads
block|{
DECL|method|CommitAndAddIndexes3
specifier|public
name|CommitAndAddIndexes3
parameter_list|(
name|int
name|numCopy
parameter_list|)
throws|throws
name|Throwable
block|{
name|super
argument_list|(
name|numCopy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doBody
name|void
name|doBody
parameter_list|(
name|int
name|j
parameter_list|,
name|Directory
index|[]
name|dirs
parameter_list|)
throws|throws
name|Throwable
block|{
switch|switch
condition|(
name|j
operator|%
literal|5
condition|)
block|{
case|case
literal|0
case|:
name|writer2
operator|.
name|addIndexes
argument_list|(
name|dirs
argument_list|)
expr_stmt|;
name|writer2
operator|.
name|optimize
argument_list|()
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|writer2
operator|.
name|addIndexes
argument_list|(
name|dirs
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|writer2
operator|.
name|addIndexes
argument_list|(
name|readers
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|writer2
operator|.
name|optimize
argument_list|()
expr_stmt|;
case|case
literal|4
case|:
name|writer2
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|handle
name|void
name|handle
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|boolean
name|report
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|AlreadyClosedException
operator|||
name|t
operator|instanceof
name|MergePolicy
operator|.
name|MergeAbortedException
operator|||
name|t
operator|instanceof
name|NullPointerException
condition|)
block|{
name|report
operator|=
operator|!
name|didClose
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|t
operator|instanceof
name|IOException
condition|)
block|{
name|Throwable
name|t2
init|=
name|t
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|t2
operator|instanceof
name|MergePolicy
operator|.
name|MergeAbortedException
condition|)
block|{
name|report
operator|=
operator|!
name|didClose
expr_stmt|;
block|}
block|}
if|if
condition|(
name|report
condition|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|failures
init|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// LUCENE-1335: test simultaneous addIndexes& close
DECL|method|testAddIndexesWithCloseNoWait
specifier|public
name|void
name|testAddIndexesWithCloseNoWait
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|int
name|NUM_COPY
init|=
literal|50
decl_stmt|;
name|CommitAndAddIndexes3
name|c
init|=
operator|new
name|CommitAndAddIndexes3
argument_list|(
name|NUM_COPY
argument_list|)
decl_stmt|;
name|c
operator|.
name|launchThreads
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
comment|// Close w/o first stopping/joining the threads
name|c
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|c
operator|.
name|joinThreads
argument_list|()
expr_stmt|;
name|_TestUtil
operator|.
name|checkIndex
argument_list|(
name|c
operator|.
name|dir2
argument_list|)
expr_stmt|;
name|c
operator|.
name|closeDir
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|failures
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// LUCENE-1335: test simultaneous addIndexes& close
DECL|method|testAddIndexesWithRollback
specifier|public
name|void
name|testAddIndexesWithRollback
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|int
name|NUM_COPY
init|=
literal|50
decl_stmt|;
name|CommitAndAddIndexes3
name|c
init|=
operator|new
name|CommitAndAddIndexes3
argument_list|(
name|NUM_COPY
argument_list|)
decl_stmt|;
name|c
operator|.
name|launchThreads
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
comment|// Close w/o first stopping/joining the threads
name|c
operator|.
name|didClose
operator|=
literal|true
expr_stmt|;
name|c
operator|.
name|writer2
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|c
operator|.
name|joinThreads
argument_list|()
expr_stmt|;
name|_TestUtil
operator|.
name|checkIndex
argument_list|(
name|c
operator|.
name|dir2
argument_list|)
expr_stmt|;
name|c
operator|.
name|closeDir
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|failures
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// LUCENE-1347
DECL|class|MockIndexWriter4
specifier|private
specifier|static
specifier|final
class|class
name|MockIndexWriter4
extends|extends
name|IndexWriter
block|{
DECL|method|MockIndexWriter4
specifier|public
name|MockIndexWriter4
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|IndexWriterConfig
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|field|doFail
name|boolean
name|doFail
decl_stmt|;
annotation|@
name|Override
DECL|method|testPoint
name|boolean
name|testPoint
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|doFail
operator|&&
name|name
operator|.
name|equals
argument_list|(
literal|"rollback before checkpoint"
argument_list|)
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"intentionally failing"
argument_list|)
throw|;
return|return
literal|true
return|;
block|}
block|}
comment|// LUCENE-1347
DECL|method|testRollbackExceptionHang
specifier|public
name|void
name|testRollbackExceptionHang
parameter_list|()
throws|throws
name|Throwable
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|MockIndexWriter4
name|w
init|=
operator|new
name|MockIndexWriter4
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|addDoc
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|w
operator|.
name|doFail
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|w
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit intentional RuntimeException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|re
parameter_list|)
block|{
comment|// expected
block|}
name|w
operator|.
name|doFail
operator|=
literal|false
expr_stmt|;
name|w
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1219
DECL|method|testBinaryFieldOffsetLength
specifier|public
name|void
name|testBinaryFieldOffsetLength
parameter_list|()
throws|throws
name|IOException
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|50
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
name|b
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|i
operator|+
literal|77
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Field
name|f
init|=
operator|new
name|Field
argument_list|(
literal|"binary"
argument_list|,
name|b
argument_list|,
literal|10
argument_list|,
literal|17
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bx
init|=
name|f
operator|.
name|getBinaryValue
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|bx
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|50
argument_list|,
name|bx
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|f
operator|.
name|getBinaryOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|f
operator|.
name|getBinaryLength
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|ir
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|doc
operator|=
name|ir
operator|.
name|document
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|f
operator|=
name|doc
operator|.
name|getField
argument_list|(
literal|"binary"
argument_list|)
expr_stmt|;
name|b
operator|=
name|f
operator|.
name|getBinaryValue
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|b
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|b
operator|.
name|length
argument_list|,
literal|17
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|87
argument_list|,
name|b
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1382
DECL|method|testCommitUserData
specifier|public
name|void
name|testCommitUserData
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|17
condition|;
name|j
operator|++
control|)
name|addDoc
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|IndexReader
operator|.
name|getCommitUserData
argument_list|(
name|dir
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// commit(Map) never called for this index
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|getCommitUserData
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|17
condition|;
name|j
operator|++
control|)
name|addDoc
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|data
operator|.
name|put
argument_list|(
literal|"label"
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test1"
argument_list|,
name|IndexReader
operator|.
name|getCommitUserData
argument_list|(
name|dir
argument_list|)
operator|.
name|get
argument_list|(
literal|"label"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test1"
argument_list|,
name|r
operator|.
name|getCommitUserData
argument_list|()
operator|.
name|get
argument_list|(
literal|"label"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test1"
argument_list|,
name|IndexReader
operator|.
name|getCommitUserData
argument_list|(
name|dir
argument_list|)
operator|.
name|get
argument_list|(
literal|"label"
argument_list|)
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testOptimizeExceptions
specifier|public
name|void
name|testOptimizeExceptions
parameter_list|()
throws|throws
name|IOException
block|{
name|RAMDirectory
name|startDir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|conf
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
decl_stmt|;
operator|(
operator|(
name|LogMergePolicy
operator|)
name|conf
operator|.
name|getMergePolicy
argument_list|()
operator|)
operator|.
name|setMergeFactor
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|startDir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|27
condition|;
name|i
operator|++
control|)
name|addDoc
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|200
condition|;
name|i
operator|++
control|)
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|(
name|startDir
argument_list|)
decl_stmt|;
name|conf
operator|=
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ConcurrentMergeScheduler
operator|)
name|conf
operator|.
name|getMergeScheduler
argument_list|()
operator|)
operator|.
name|setSuppressExceptions
argument_list|()
expr_stmt|;
name|w
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|dir
operator|.
name|setRandomIOExceptionRate
argument_list|(
literal|0.5
argument_list|,
literal|100
argument_list|)
expr_stmt|;
try|try
block|{
name|w
operator|.
name|optimize
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
name|ioe
operator|.
name|getCause
argument_list|()
operator|==
literal|null
condition|)
name|fail
argument_list|(
literal|"optimize threw IOException without root cause"
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// LUCENE-1429
DECL|method|testOutOfMemoryErrorCausesCloseToFail
specifier|public
name|void
name|testOutOfMemoryErrorCausesCloseToFail
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|Throwable
argument_list|>
name|thrown
init|=
operator|new
name|ArrayList
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
operator|new
name|MockRAMDirectory
argument_list|()
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|message
parameter_list|(
specifier|final
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|.
name|startsWith
argument_list|(
literal|"now flush at close"
argument_list|)
operator|&&
literal|0
operator|==
name|thrown
operator|.
name|size
argument_list|()
condition|)
block|{
name|thrown
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|OutOfMemoryError
argument_list|(
literal|"fake OOME at "
operator|+
name|message
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
comment|// need to set an info stream so message is called
name|writer
operator|.
name|setInfoStream
argument_list|(
operator|new
name|PrintStream
argument_list|(
operator|new
name|ByteArrayOutputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"OutOfMemoryError expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|OutOfMemoryError
name|expected
parameter_list|)
block|{}
comment|// throws IllegalStateEx w/o bug fix
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1442
DECL|method|testDoubleOffsetCounting
specifier|public
name|void
name|testDoubleOffsetCounting
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Field
name|f
init|=
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"abcd"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|Field
name|f2
init|=
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f2
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|r
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TermVectorOffsetInfo
index|[]
name|termOffsets
init|=
operator|(
operator|(
name|TermPositionVector
operator|)
name|r
operator|.
name|getTermFreqVector
argument_list|(
literal|0
argument_list|,
literal|"field"
argument_list|)
operator|)
operator|.
name|getOffsets
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Token "" occurred once
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|termOffsets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|termOffsets
index|[
literal|0
index|]
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|termOffsets
index|[
literal|0
index|]
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
comment|// Token "abcd" occurred three times
name|termOffsets
operator|=
operator|(
operator|(
name|TermPositionVector
operator|)
name|r
operator|.
name|getTermFreqVector
argument_list|(
literal|0
argument_list|,
literal|"field"
argument_list|)
operator|)
operator|.
name|getOffsets
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|termOffsets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|termOffsets
index|[
literal|0
index|]
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|termOffsets
index|[
literal|0
index|]
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|termOffsets
index|[
literal|1
index|]
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|termOffsets
index|[
literal|1
index|]
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|termOffsets
index|[
literal|2
index|]
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|termOffsets
index|[
literal|2
index|]
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1442
DECL|method|testDoubleOffsetCounting2
specifier|public
name|void
name|testDoubleOffsetCounting2
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Field
name|f
init|=
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"abcd"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|r
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TermVectorOffsetInfo
index|[]
name|termOffsets
init|=
operator|(
operator|(
name|TermPositionVector
operator|)
name|r
operator|.
name|getTermFreqVector
argument_list|(
literal|0
argument_list|,
literal|"field"
argument_list|)
operator|)
operator|.
name|getOffsets
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|termOffsets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|termOffsets
index|[
literal|0
index|]
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|termOffsets
index|[
literal|0
index|]
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|termOffsets
index|[
literal|1
index|]
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|termOffsets
index|[
literal|1
index|]
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1448
DECL|method|testEndOffsetPositionCharAnalyzer
specifier|public
name|void
name|testEndOffsetPositionCharAnalyzer
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Field
name|f
init|=
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"abcd   "
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|r
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TermVectorOffsetInfo
index|[]
name|termOffsets
init|=
operator|(
operator|(
name|TermPositionVector
operator|)
name|r
operator|.
name|getTermFreqVector
argument_list|(
literal|0
argument_list|,
literal|"field"
argument_list|)
operator|)
operator|.
name|getOffsets
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|termOffsets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|termOffsets
index|[
literal|0
index|]
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|termOffsets
index|[
literal|0
index|]
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|termOffsets
index|[
literal|1
index|]
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|termOffsets
index|[
literal|1
index|]
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1448
DECL|method|testEndOffsetPositionWithCachingTokenFilter
specifier|public
name|void
name|testEndOffsetPositionWithCachingTokenFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|Analyzer
name|analyzer
init|=
operator|new
name|MockAnalyzer
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|analyzer
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|TokenStream
name|stream
init|=
operator|new
name|CachingTokenFilter
argument_list|(
name|analyzer
operator|.
name|tokenStream
argument_list|(
literal|"field"
argument_list|,
operator|new
name|StringReader
argument_list|(
literal|"abcd   "
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Field
name|f
init|=
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
name|stream
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|r
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TermVectorOffsetInfo
index|[]
name|termOffsets
init|=
operator|(
operator|(
name|TermPositionVector
operator|)
name|r
operator|.
name|getTermFreqVector
argument_list|(
literal|0
argument_list|,
literal|"field"
argument_list|)
operator|)
operator|.
name|getOffsets
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|termOffsets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|termOffsets
index|[
literal|0
index|]
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|termOffsets
index|[
literal|0
index|]
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|termOffsets
index|[
literal|1
index|]
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|termOffsets
index|[
literal|1
index|]
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1448
DECL|method|testEndOffsetPositionStopFilter
specifier|public
name|void
name|testEndOffsetPositionStopFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|,
name|MockTokenFilter
operator|.
name|ENGLISH_STOPSET
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Field
name|f
init|=
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"abcd the"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|r
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TermVectorOffsetInfo
index|[]
name|termOffsets
init|=
operator|(
operator|(
name|TermPositionVector
operator|)
name|r
operator|.
name|getTermFreqVector
argument_list|(
literal|0
argument_list|,
literal|"field"
argument_list|)
operator|)
operator|.
name|getOffsets
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|termOffsets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|termOffsets
index|[
literal|0
index|]
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|termOffsets
index|[
literal|0
index|]
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|termOffsets
index|[
literal|1
index|]
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|13
argument_list|,
name|termOffsets
index|[
literal|1
index|]
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1448
DECL|method|testEndOffsetPositionStandard
specifier|public
name|void
name|testEndOffsetPositionStandard
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Field
name|f
init|=
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"abcd the  "
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
decl_stmt|;
name|Field
name|f2
init|=
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"crunch man"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f2
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|r
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TermPositionVector
name|tpv
init|=
operator|(
operator|(
name|TermPositionVector
operator|)
name|r
operator|.
name|getTermFreqVector
argument_list|(
literal|0
argument_list|,
literal|"field"
argument_list|)
operator|)
decl_stmt|;
name|TermVectorOffsetInfo
index|[]
name|termOffsets
init|=
name|tpv
operator|.
name|getOffsets
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|termOffsets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|termOffsets
index|[
literal|0
index|]
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|termOffsets
index|[
literal|0
index|]
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|termOffsets
operator|=
name|tpv
operator|.
name|getOffsets
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|termOffsets
index|[
literal|0
index|]
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|termOffsets
index|[
literal|0
index|]
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|termOffsets
operator|=
name|tpv
operator|.
name|getOffsets
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|18
argument_list|,
name|termOffsets
index|[
literal|0
index|]
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|21
argument_list|,
name|termOffsets
index|[
literal|0
index|]
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1448
DECL|method|testEndOffsetPositionStandardEmptyField
specifier|public
name|void
name|testEndOffsetPositionStandardEmptyField
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Field
name|f
init|=
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
decl_stmt|;
name|Field
name|f2
init|=
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"crunch man"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f2
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|r
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TermPositionVector
name|tpv
init|=
operator|(
operator|(
name|TermPositionVector
operator|)
name|r
operator|.
name|getTermFreqVector
argument_list|(
literal|0
argument_list|,
literal|"field"
argument_list|)
operator|)
decl_stmt|;
name|TermVectorOffsetInfo
index|[]
name|termOffsets
init|=
name|tpv
operator|.
name|getOffsets
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|termOffsets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|termOffsets
index|[
literal|0
index|]
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|termOffsets
index|[
literal|0
index|]
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|termOffsets
operator|=
name|tpv
operator|.
name|getOffsets
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|termOffsets
index|[
literal|0
index|]
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|termOffsets
index|[
literal|0
index|]
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1448
DECL|method|testEndOffsetPositionStandardEmptyField2
specifier|public
name|void
name|testEndOffsetPositionStandardEmptyField2
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Field
name|f
init|=
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"abcd"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
name|Field
name|f2
init|=
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"crunch"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f2
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|r
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TermPositionVector
name|tpv
init|=
operator|(
operator|(
name|TermPositionVector
operator|)
name|r
operator|.
name|getTermFreqVector
argument_list|(
literal|0
argument_list|,
literal|"field"
argument_list|)
operator|)
decl_stmt|;
name|TermVectorOffsetInfo
index|[]
name|termOffsets
init|=
name|tpv
operator|.
name|getOffsets
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|termOffsets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|termOffsets
index|[
literal|0
index|]
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|termOffsets
index|[
literal|0
index|]
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|termOffsets
operator|=
name|tpv
operator|.
name|getOffsets
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|termOffsets
index|[
literal|0
index|]
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|termOffsets
index|[
literal|0
index|]
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1468 -- make sure opening an IndexWriter with
comment|// create=true does not remove non-index files
DECL|method|testOtherFiles
specifier|public
name|void
name|testOtherFiles
parameter_list|()
throws|throws
name|Throwable
block|{
name|File
name|indexDir
init|=
operator|new
name|File
argument_list|(
name|TEMP_DIR
argument_list|,
literal|"otherfiles"
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
name|FSDirectory
operator|.
name|open
argument_list|(
name|indexDir
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Create my own random file:
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"myrandomfile"
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|42
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|dir
operator|.
name|fileExists
argument_list|(
literal|"myrandomfile"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|_TestUtil
operator|.
name|rmDir
argument_list|(
name|indexDir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDeadlock
specifier|public
name|void
name|testDeadlock
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"content"
argument_list|,
literal|"aaa bbb ccc ddd eee fff ggg hhh iii"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|,
name|Field
operator|.
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// index has 2 segments
name|MockRAMDirectory
name|dir2
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer2
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir2
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|writer2
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer2
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|r1
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|IndexReader
name|r2
init|=
operator|(
name|IndexReader
operator|)
name|r1
operator|.
name|clone
argument_list|()
decl_stmt|;
name|writer
operator|.
name|addIndexes
argument_list|(
operator|new
name|IndexReader
index|[]
block|{
name|r1
block|,
name|r2
block|}
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|r3
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|r3
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|r3
operator|.
name|close
argument_list|()
expr_stmt|;
name|r1
operator|.
name|close
argument_list|()
expr_stmt|;
name|r2
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir2
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|IndexerThreadInterrupt
specifier|private
class|class
name|IndexerThreadInterrupt
extends|extends
name|Thread
block|{
DECL|field|failed
specifier|volatile
name|boolean
name|failed
decl_stmt|;
DECL|field|finish
specifier|volatile
name|boolean
name|finish
decl_stmt|;
DECL|field|allowInterrupt
specifier|volatile
name|boolean
name|allowInterrupt
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|RAMDirectory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
literal|null
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
while|while
condition|(
operator|!
name|finish
condition|)
block|{
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|w
operator|!=
literal|null
condition|)
block|{
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|IndexWriterConfig
name|conf
init|=
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
decl_stmt|;
operator|(
operator|(
name|LogMergePolicy
operator|)
name|conf
operator|.
name|getMergePolicy
argument_list|()
operator|)
operator|.
name|setMergeFactor
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|w
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|//((ConcurrentMergeScheduler) w.getMergeScheduler()).setSuppressExceptions();
if|if
condition|(
operator|!
name|first
operator|&&
operator|!
name|allowInterrupt
condition|)
block|{
comment|// tell main thread it can interrupt us any time,
comment|// starting now
name|allowInterrupt
operator|=
literal|true
expr_stmt|;
block|}
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"some text contents"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|_TestUtil
operator|.
name|checkIndex
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|first
operator|&&
operator|!
name|allowInterrupt
condition|)
block|{
comment|// Strangely, if we interrupt a thread before
comment|// all classes are loaded, the class loader
comment|// seems to do scary things with the interrupt
comment|// status.  In java 1.5, it'll throw an
comment|// incorrect ClassNotFoundException.  In java
comment|// 1.6, it'll silently clear the interrupt.
comment|// So, on first iteration through here we
comment|// don't open ourselves up for interrupts
comment|// until we've done the above loop.
name|allowInterrupt
operator|=
literal|true
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ThreadInterruptedException
name|re
parameter_list|)
block|{
name|Throwable
name|e
init|=
name|re
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|InterruptedException
argument_list|)
expr_stmt|;
if|if
condition|(
name|finish
condition|)
block|{
break|break;
block|}
comment|// Make sure IW cleared the interrupted bit
comment|// TODO: remove that false once test is fixed for real
if|if
condition|(
literal|false
operator|&&
name|interrupted
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"FAILED; InterruptedException hit but thread.interrupted() was true"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"FAILED; unexpected exception"
argument_list|)
expr_stmt|;
name|t
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|failed
condition|)
block|{
comment|// clear interrupt state:
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
try|try
block|{
name|w
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
try|try
block|{
name|_TestUtil
operator|.
name|checkIndex
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"CheckIndex FAILED: unexpected exception"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|IndexReader
name|r
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|//System.out.println("doc count=" + r.numDocs());
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"IndexReader.open FAILED: unexpected exception"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testThreadInterruptDeadlock
specifier|public
name|void
name|testThreadInterruptDeadlock
parameter_list|()
throws|throws
name|Exception
block|{
name|IndexerThreadInterrupt
name|t
init|=
operator|new
name|IndexerThreadInterrupt
argument_list|()
decl_stmt|;
name|t
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// issue 100 interrupts to child thread
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
literal|100
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|allowInterrupt
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|t
operator|.
name|allowInterrupt
operator|=
literal|false
expr_stmt|;
name|t
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|t
operator|.
name|isAlive
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
name|t
operator|.
name|allowInterrupt
operator|=
literal|false
expr_stmt|;
name|t
operator|.
name|finish
operator|=
literal|true
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|t
operator|.
name|failed
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexStoreCombos
specifier|public
name|void
name|testIndexStoreCombos
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRAMDirectory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|50
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
name|b
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|i
operator|+
literal|77
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Field
name|f
init|=
operator|new
name|Field
argument_list|(
literal|"binary"
argument_list|,
name|b
argument_list|,
literal|10
argument_list|,
literal|17
argument_list|)
decl_stmt|;
name|f
operator|.
name|setTokenStream
argument_list|(
operator|new
name|MockTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"doc1field1"
argument_list|)
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Field
name|f2
init|=
operator|new
name|Field
argument_list|(
literal|"string"
argument_list|,
literal|"value"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
decl_stmt|;
name|f2
operator|.
name|setTokenStream
argument_list|(
operator|new
name|MockTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"doc1field2"
argument_list|)
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f2
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// add 2 docs to test in-memory merging
name|f
operator|.
name|setTokenStream
argument_list|(
operator|new
name|MockTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"doc2field1"
argument_list|)
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|f2
operator|.
name|setTokenStream
argument_list|(
operator|new
name|MockTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"doc2field2"
argument_list|)
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// force segment flush so we can force a segment merge with doc3 later.
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|f
operator|.
name|setTokenStream
argument_list|(
operator|new
name|MockTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"doc3field1"
argument_list|)
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|f2
operator|.
name|setTokenStream
argument_list|(
operator|new
name|MockTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"doc3field2"
argument_list|)
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|w
operator|.
name|optimize
argument_list|()
expr_stmt|;
comment|// force segment merge.
name|IndexReader
name|ir
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|doc
operator|=
name|ir
operator|.
name|document
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|f
operator|=
name|doc
operator|.
name|getField
argument_list|(
literal|"binary"
argument_list|)
expr_stmt|;
name|b
operator|=
name|f
operator|.
name|getBinaryValue
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|b
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|b
operator|.
name|length
argument_list|,
literal|17
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|87
argument_list|,
name|b
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ir
operator|.
name|document
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldable
argument_list|(
literal|"binary"
argument_list|)
operator|.
name|isBinary
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ir
operator|.
name|document
argument_list|(
literal|1
argument_list|)
operator|.
name|getFieldable
argument_list|(
literal|"binary"
argument_list|)
operator|.
name|isBinary
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ir
operator|.
name|document
argument_list|(
literal|2
argument_list|)
operator|.
name|getFieldable
argument_list|(
literal|"binary"
argument_list|)
operator|.
name|isBinary
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|ir
operator|.
name|document
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"string"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|ir
operator|.
name|document
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"string"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|ir
operator|.
name|document
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|(
literal|"string"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test that the terms were indexed.
name|assertTrue
argument_list|(
name|MultiFields
operator|.
name|getTermDocsEnum
argument_list|(
name|ir
argument_list|,
literal|null
argument_list|,
literal|"binary"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"doc1field1"
argument_list|)
argument_list|)
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocsEnum
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MultiFields
operator|.
name|getTermDocsEnum
argument_list|(
name|ir
argument_list|,
literal|null
argument_list|,
literal|"binary"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"doc2field1"
argument_list|)
argument_list|)
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocsEnum
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MultiFields
operator|.
name|getTermDocsEnum
argument_list|(
name|ir
argument_list|,
literal|null
argument_list|,
literal|"binary"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"doc3field1"
argument_list|)
argument_list|)
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocsEnum
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MultiFields
operator|.
name|getTermDocsEnum
argument_list|(
name|ir
argument_list|,
literal|null
argument_list|,
literal|"string"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"doc1field2"
argument_list|)
argument_list|)
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocsEnum
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MultiFields
operator|.
name|getTermDocsEnum
argument_list|(
name|ir
argument_list|,
literal|null
argument_list|,
literal|"string"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"doc2field2"
argument_list|)
argument_list|)
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocsEnum
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MultiFields
operator|.
name|getTermDocsEnum
argument_list|(
name|ir
argument_list|,
literal|null
argument_list|,
literal|"string"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"doc3field2"
argument_list|)
argument_list|)
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocsEnum
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1727: make sure doc fields are stored in order
DECL|method|testStoredFieldsOrder
specifier|public
name|void
name|testStoredFieldsOrder
parameter_list|()
throws|throws
name|Throwable
block|{
name|Directory
name|d
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|d
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"zzz"
argument_list|,
literal|"a b c"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"aaa"
argument_list|,
literal|"a b c"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"zzz"
argument_list|,
literal|"1 2 3"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|doc
operator|=
name|r
operator|.
name|document
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Fieldable
argument_list|>
name|it
init|=
name|doc
operator|.
name|getFields
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Field
name|f
init|=
operator|(
name|Field
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|name
argument_list|()
argument_list|,
literal|"zzz"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|stringValue
argument_list|()
argument_list|,
literal|"a b c"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|=
operator|(
name|Field
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|name
argument_list|()
argument_list|,
literal|"aaa"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|stringValue
argument_list|()
argument_list|,
literal|"a b c"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|=
operator|(
name|Field
operator|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|name
argument_list|()
argument_list|,
literal|"zzz"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|stringValue
argument_list|()
argument_list|,
literal|"1 2 3"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testEmbeddedFFFF
specifier|public
name|void
name|testEmbeddedFFFF
parameter_list|()
throws|throws
name|Throwable
block|{
name|Directory
name|d
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|d
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"a a\uffffb"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"a"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|docFreq
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"a\uffffb"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|_TestUtil
operator|.
name|checkIndex
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testNoDocsIndex
specifier|public
name|void
name|testNoDocsIndex
parameter_list|()
throws|throws
name|Throwable
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|LogMergePolicy
name|lmp
init|=
operator|(
name|LogMergePolicy
operator|)
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergePolicy
argument_list|()
decl_stmt|;
name|lmp
operator|.
name|setUseCompoundFile
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|lmp
operator|.
name|setUseCompoundDocStore
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setInfoStream
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|bos
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|_TestUtil
operator|.
name|checkIndex
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-2095: make sure with multiple threads commit
comment|// doesn't return until all changes are in fact in the
comment|// index
DECL|method|testCommitThreadSafety
specifier|public
name|void
name|testCommitThreadSafety
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|int
name|NUM_THREADS
init|=
literal|5
decl_stmt|;
specifier|final
name|double
name|RUN_SEC
init|=
literal|0.5
decl_stmt|;
specifier|final
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
specifier|final
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
specifier|final
name|AtomicBoolean
name|failed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|NUM_THREADS
index|]
decl_stmt|;
specifier|final
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
operator|(
call|(
name|long
call|)
argument_list|(
name|RUN_SEC
operator|*
literal|1000
argument_list|)
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|finalI
init|=
name|i
decl_stmt|;
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
specifier|final
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|IndexReader
name|r
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|Field
name|f
init|=
operator|new
name|Field
argument_list|(
literal|"f"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
do|do
block|{
if|if
condition|(
name|failed
operator|.
name|get
argument_list|()
condition|)
break|break;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|String
name|s
init|=
name|finalI
operator|+
literal|"_"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|count
operator|++
argument_list|)
decl_stmt|;
name|f
operator|.
name|setValue
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|IndexReader
name|r2
init|=
name|r
operator|.
name|reopen
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|r2
operator|!=
name|r
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|=
name|r2
expr_stmt|;
name|assertEquals
argument_list|(
literal|"term=f:"
operator|+
name|s
argument_list|,
literal|1
argument_list|,
name|r
operator|.
name|docFreq
argument_list|(
operator|new
name|Term
argument_list|(
literal|"f"
argument_list|,
name|s
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|endTime
condition|)
do|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|failed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// both start& end are inclusive
DECL|method|getInt
specifier|private
specifier|final
name|int
name|getInt
parameter_list|(
name|Random
name|r
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
return|return
name|start
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|1
operator|+
name|end
operator|-
name|start
argument_list|)
return|;
block|}
DECL|method|checkTermsOrder
specifier|private
name|void
name|checkTermsOrder
parameter_list|(
name|IndexReader
name|r
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|allTerms
parameter_list|,
name|boolean
name|isTop
parameter_list|)
throws|throws
name|IOException
block|{
name|TermsEnum
name|terms
init|=
name|MultiFields
operator|.
name|getFields
argument_list|(
name|r
argument_list|)
operator|.
name|terms
argument_list|(
literal|"f"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|BytesRef
name|last
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|seenTerms
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|BytesRef
name|term
init|=
name|terms
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|assertTrue
argument_list|(
name|last
operator|.
name|compareTo
argument_list|(
name|term
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|last
operator|.
name|copy
argument_list|(
name|term
argument_list|)
expr_stmt|;
specifier|final
name|String
name|s
init|=
name|term
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"term "
operator|+
name|termDesc
argument_list|(
name|s
argument_list|)
operator|+
literal|" was not added to index (count="
operator|+
name|allTerms
operator|.
name|size
argument_list|()
operator|+
literal|")"
argument_list|,
name|allTerms
operator|.
name|contains
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|seenTerms
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isTop
condition|)
block|{
name|assertTrue
argument_list|(
name|allTerms
operator|.
name|equals
argument_list|(
name|seenTerms
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Test seeking:
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|seenTerms
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BytesRef
name|tr
init|=
operator|new
name|BytesRef
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"seek failed for term="
operator|+
name|termDesc
argument_list|(
name|tr
operator|.
name|utf8ToString
argument_list|()
argument_list|)
argument_list|,
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|FOUND
argument_list|,
name|terms
operator|.
name|seek
argument_list|(
name|tr
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|asUnicodeChar
specifier|private
specifier|final
name|String
name|asUnicodeChar
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
literal|"U+"
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|c
argument_list|)
return|;
block|}
DECL|method|termDesc
specifier|private
specifier|final
name|String
name|termDesc
parameter_list|(
name|String
name|s
parameter_list|)
block|{
specifier|final
name|String
name|s0
decl_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|length
argument_list|()
operator|<=
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
name|s0
operator|=
name|asUnicodeChar
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|s0
operator|=
name|asUnicodeChar
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
literal|","
operator|+
name|asUnicodeChar
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|s0
return|;
block|}
comment|// Make sure terms, including ones with surrogate pairs,
comment|// sort in codepoint sort order by default
DECL|method|testTermUTF16SortOrder
specifier|public
name|void
name|testTermUTF16SortOrder
parameter_list|()
throws|throws
name|Throwable
block|{
name|Random
name|rnd
init|=
name|newRandom
argument_list|()
decl_stmt|;
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|rnd
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
comment|// Single segment
name|Field
name|f
init|=
operator|new
name|Field
argument_list|(
literal|"f"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|char
index|[]
name|chars
init|=
operator|new
name|char
index|[
literal|2
index|]
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|allTerms
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|num
init|=
literal|200
operator|*
name|RANDOM_MULTIPLIER
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|s
decl_stmt|;
if|if
condition|(
name|rnd
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// Single char
if|if
condition|(
name|rnd
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// Above surrogates
name|chars
index|[
literal|0
index|]
operator|=
operator|(
name|char
operator|)
name|getInt
argument_list|(
name|rnd
argument_list|,
literal|1
operator|+
name|UnicodeUtil
operator|.
name|UNI_SUR_LOW_END
argument_list|,
literal|0xffff
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Below surrogates
name|chars
index|[
literal|0
index|]
operator|=
operator|(
name|char
operator|)
name|getInt
argument_list|(
name|rnd
argument_list|,
literal|0
argument_list|,
name|UnicodeUtil
operator|.
name|UNI_SUR_HIGH_START
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|s
operator|=
operator|new
name|String
argument_list|(
name|chars
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Surrogate pair
name|chars
index|[
literal|0
index|]
operator|=
operator|(
name|char
operator|)
name|getInt
argument_list|(
name|rnd
argument_list|,
name|UnicodeUtil
operator|.
name|UNI_SUR_HIGH_START
argument_list|,
name|UnicodeUtil
operator|.
name|UNI_SUR_HIGH_END
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|int
operator|)
name|chars
index|[
literal|0
index|]
operator|)
operator|>=
name|UnicodeUtil
operator|.
name|UNI_SUR_HIGH_START
operator|&&
operator|(
operator|(
name|int
operator|)
name|chars
index|[
literal|0
index|]
operator|)
operator|<=
name|UnicodeUtil
operator|.
name|UNI_SUR_HIGH_END
argument_list|)
expr_stmt|;
name|chars
index|[
literal|1
index|]
operator|=
operator|(
name|char
operator|)
name|getInt
argument_list|(
name|rnd
argument_list|,
name|UnicodeUtil
operator|.
name|UNI_SUR_LOW_START
argument_list|,
name|UnicodeUtil
operator|.
name|UNI_SUR_LOW_END
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|String
argument_list|(
name|chars
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
name|allTerms
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|f
operator|.
name|setValue
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
literal|1
operator|+
name|i
operator|)
operator|%
literal|42
operator|==
literal|0
condition|)
block|{
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
name|IndexReader
name|r
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
comment|// Test each sub-segment
specifier|final
name|IndexReader
index|[]
name|subs
init|=
name|r
operator|.
name|getSequentialSubReaders
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|checkTermsOrder
argument_list|(
name|subs
index|[
name|i
index|]
argument_list|,
name|allTerms
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|checkTermsOrder
argument_list|(
name|r
argument_list|,
name|allTerms
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Test multi segment
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
comment|// Test optimized single segment
name|r
operator|=
name|writer
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|checkTermsOrder
argument_list|(
name|r
argument_list|,
name|allTerms
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testIndexDivisor
specifier|public
name|void
name|testIndexDivisor
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|,
name|IndexWriter
operator|.
name|MaxFieldLength
operator|.
name|UNLIMITED
argument_list|)
decl_stmt|;
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// must be> 256
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|300
condition|;
name|i
operator|++
control|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
literal|""
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Field
name|f
init|=
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
name|s
operator|.
name|toString
argument_list|()
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|(
literal|2
argument_list|)
operator|.
name|getSequentialSubReaders
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|TermsEnum
name|t
init|=
name|r
operator|.
name|fields
argument_list|()
operator|.
name|terms
argument_list|(
literal|"field"
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|t
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|DocsEnum
name|docs
init|=
name|t
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|docs
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocsEnum
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docs
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|300
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testDeleteUnusedFiles
specifier|public
name|void
name|testDeleteUnusedFiles
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|2
condition|;
name|iter
operator|++
control|)
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"go"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
decl_stmt|;
if|if
condition|(
name|iter
operator|==
literal|0
condition|)
block|{
comment|// use NRT
name|r
operator|=
name|w
operator|.
name|getReader
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// don't use NRT
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|r
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|dir
operator|.
name|listAll
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|files
operator|.
name|contains
argument_list|(
literal|"_0.cfs"
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|optimize
argument_list|()
expr_stmt|;
if|if
condition|(
name|iter
operator|==
literal|1
condition|)
block|{
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|IndexReader
name|r2
init|=
name|r
operator|.
name|reopen
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|!=
name|r2
argument_list|)
expr_stmt|;
name|files
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|dir
operator|.
name|listAll
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|files
operator|.
name|contains
argument_list|(
literal|"_0.cfs"
argument_list|)
argument_list|)
expr_stmt|;
comment|// optimize created this
name|assertTrue
argument_list|(
name|files
operator|.
name|contains
argument_list|(
literal|"_2.cfs"
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|deleteUnusedFiles
argument_list|()
expr_stmt|;
name|files
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|dir
operator|.
name|listAll
argument_list|()
argument_list|)
expr_stmt|;
comment|// r still holds this file open
name|assertTrue
argument_list|(
name|files
operator|.
name|contains
argument_list|(
literal|"_0.cfs"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|files
operator|.
name|contains
argument_list|(
literal|"_2.cfs"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|iter
operator|==
literal|0
condition|)
block|{
comment|// on closing NRT reader, it calls writer.deleteUnusedFiles
name|files
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|dir
operator|.
name|listAll
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|files
operator|.
name|contains
argument_list|(
literal|"_0.cfs"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// now writer can remove it
name|w
operator|.
name|deleteUnusedFiles
argument_list|()
expr_stmt|;
name|files
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|dir
operator|.
name|listAll
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|files
operator|.
name|contains
argument_list|(
literal|"_0.cfs"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|files
operator|.
name|contains
argument_list|(
literal|"_2.cfs"
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|r2
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testDeleteUnsedFiles2
specifier|public
name|void
name|testDeleteUnsedFiles2
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Validates that iw.deleteUnusedFiles() also deletes unused index commits
comment|// in case a deletion policy which holds onto commits is used.
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|SnapshotDeletionPolicy
name|sdp
init|=
operator|new
name|SnapshotDeletionPolicy
argument_list|(
operator|new
name|KeepOnlyLastCommitDeletionPolicy
argument_list|()
argument_list|)
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setIndexDeletionPolicy
argument_list|(
name|sdp
argument_list|)
argument_list|)
decl_stmt|;
comment|// First commit
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"c"
argument_list|,
literal|"val"
argument_list|,
name|Store
operator|.
name|YES
argument_list|,
name|Index
operator|.
name|ANALYZED
argument_list|,
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|IndexReader
operator|.
name|listCommits
argument_list|(
name|dir
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Keep that commit
name|sdp
operator|.
name|snapshot
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
comment|// Second commit - now KeepOnlyLastCommit cannot delete the prev commit.
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"c"
argument_list|,
literal|"val"
argument_list|,
name|Store
operator|.
name|YES
argument_list|,
name|Index
operator|.
name|ANALYZED
argument_list|,
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|IndexReader
operator|.
name|listCommits
argument_list|(
name|dir
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Should delete the unreferenced commit
name|sdp
operator|.
name|release
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|deleteUnusedFiles
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|IndexReader
operator|.
name|listCommits
argument_list|(
name|dir
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|FlushCountingIndexWriter
specifier|private
specifier|static
class|class
name|FlushCountingIndexWriter
extends|extends
name|IndexWriter
block|{
DECL|field|flushCount
name|int
name|flushCount
decl_stmt|;
DECL|method|FlushCountingIndexWriter
specifier|public
name|FlushCountingIndexWriter
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|IndexWriterConfig
name|iwc
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|dir
argument_list|,
name|iwc
argument_list|)
expr_stmt|;
block|}
DECL|method|doAfterFlush
specifier|public
name|void
name|doAfterFlush
parameter_list|()
block|{
name|flushCount
operator|++
expr_stmt|;
block|}
block|}
DECL|method|testIndexingThenDeleting
specifier|public
name|void
name|testIndexingThenDeleting
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Random
name|r
init|=
name|newRandom
argument_list|()
decl_stmt|;
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|FlushCountingIndexWriter
name|w
init|=
operator|new
name|FlushCountingIndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setRAMBufferSizeMB
argument_list|(
literal|0.5
argument_list|)
argument_list|)
decl_stmt|;
comment|//w.setInfoStream(System.out);
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"field"
argument_list|,
literal|"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|num
init|=
literal|6
operator|*
name|RANDOM_MULTIPLIER
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|num
condition|;
name|iter
operator|++
control|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
specifier|final
name|boolean
name|doIndexing
init|=
name|r
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|doIndexing
condition|)
block|{
comment|// Add docs until a flush is triggered
specifier|final
name|int
name|startFlushCount
init|=
name|w
operator|.
name|flushCount
decl_stmt|;
while|while
condition|(
name|w
operator|.
name|flushCount
operator|==
name|startFlushCount
condition|)
block|{
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Delete docs until a flush is triggered
specifier|final
name|int
name|startFlushCount
init|=
name|w
operator|.
name|flushCount
decl_stmt|;
while|while
condition|(
name|w
operator|.
name|flushCount
operator|==
name|startFlushCount
condition|)
block|{
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|""
operator|+
name|count
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"flush happened too quickly during "
operator|+
operator|(
name|doIndexing
condition|?
literal|"indexing"
else|:
literal|"deleting"
operator|)
operator|+
literal|" count="
operator|+
name|count
argument_list|,
name|count
operator|>
literal|2500
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testNoCommits
specifier|public
name|void
name|testNoCommits
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Tests that if we don't call commit(), the directory has 0 commits. This has
comment|// changed since LUCENE-2386, where before IW would always commit on a fresh
comment|// new index.
name|Directory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|IndexReader
operator|.
name|listCommits
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"listCommits should have thrown an exception over empty index"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
comment|// that's expected !
block|}
comment|// No changes still should generate a commit, because it's a new index.
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected 1 commits!"
argument_list|,
literal|1
argument_list|,
name|IndexReader
operator|.
name|listCommits
argument_list|(
name|dir
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmptyFSDirWithNoLock
specifier|public
name|void
name|testEmptyFSDirWithNoLock
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Tests that if FSDir is opened w/ a NoLockFactory (or SingleInstanceLF),
comment|// then IndexWriter ctor succeeds. Previously (LUCENE-2386) it failed
comment|// when listAll() was called in IndexFileDeleter.
name|FSDirectory
name|dir
init|=
name|FSDirectory
operator|.
name|open
argument_list|(
operator|new
name|File
argument_list|(
name|TEMP_DIR
argument_list|,
literal|"emptyFSDirNoLock"
argument_list|)
argument_list|,
name|NoLockFactory
operator|.
name|getNoLockFactory
argument_list|()
argument_list|)
decl_stmt|;
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testEmptyDirRollback
specifier|public
name|void
name|testEmptyDirRollback
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Tests that if IW is created over an empty Directory, some documents are
comment|// indexed, flushed (but not committed) and then IW rolls back, then no
comment|// files are left in the Directory.
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
comment|// Creating over empty dir should not create any files.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dir
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
comment|// create as many files as possible
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"c"
argument_list|,
literal|"val"
argument_list|,
name|Store
operator|.
name|YES
argument_list|,
name|Index
operator|.
name|ANALYZED
argument_list|,
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// Adding just one document does not call flush yet.
name|assertEquals
argument_list|(
literal|"only the stored and term vector files should exist in the directory"
argument_list|,
literal|5
argument_list|,
name|dir
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"c"
argument_list|,
literal|"val"
argument_list|,
name|Store
operator|.
name|YES
argument_list|,
name|Index
operator|.
name|ANALYZED
argument_list|,
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// The second document should cause a flush.
name|assertTrue
argument_list|(
literal|"flush should have occurred and files created"
argument_list|,
name|dir
operator|.
name|listAll
argument_list|()
operator|.
name|length
operator|>
literal|5
argument_list|)
expr_stmt|;
comment|// After rollback, IW should remove all files
name|writer
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"no files should exist in the directory after rollback"
argument_list|,
literal|0
argument_list|,
name|dir
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Since we rolled-back above, that close should be a no-op
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected a no-op close after IW.rollback()"
argument_list|,
literal|0
argument_list|,
name|dir
operator|.
name|listAll
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|testNoSegmentFile
specifier|public
name|void
name|testNoSegmentFile
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|tempDir
init|=
name|_TestUtil
operator|.
name|getTempDir
argument_list|(
literal|"noSegmentFile"
argument_list|)
decl_stmt|;
try|try
block|{
name|Directory
name|dir
init|=
name|FSDirectory
operator|.
name|open
argument_list|(
name|tempDir
argument_list|)
decl_stmt|;
name|dir
operator|.
name|setLockFactory
argument_list|(
name|NoLockFactory
operator|.
name|getNoLockFactory
argument_list|()
argument_list|)
expr_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"c"
argument_list|,
literal|"val"
argument_list|,
name|Store
operator|.
name|YES
argument_list|,
name|Index
operator|.
name|ANALYZED
argument_list|,
name|TermVector
operator|.
name|WITH_POSITIONS_OFFSETS
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexWriter
name|w2
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|CREATE
argument_list|)
argument_list|)
decl_stmt|;
name|w2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// If we don't do that, the test fails on Windows
name|w
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|_TestUtil
operator|.
name|rmDir
argument_list|(
name|tempDir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFutureCommit
specifier|public
name|void
name|testFutureCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
operator|new
name|MockRAMDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setIndexDeletionPolicy
argument_list|(
name|NoDeletionPolicy
operator|.
name|INSTANCE
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// commit to "first"
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|commitData
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|commitData
operator|.
name|put
argument_list|(
literal|"tag"
argument_list|,
literal|"first"
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|(
name|commitData
argument_list|)
expr_stmt|;
comment|// commit to "second"
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|commitData
operator|.
name|put
argument_list|(
literal|"tag"
argument_list|,
literal|"second"
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|(
name|commitData
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// open "first" with IndexWriter
name|IndexCommit
name|commit
init|=
literal|null
decl_stmt|;
for|for
control|(
name|IndexCommit
name|c
range|:
name|IndexReader
operator|.
name|listCommits
argument_list|(
name|dir
argument_list|)
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
literal|"tag"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"first"
argument_list|)
condition|)
block|{
name|commit
operator|=
name|c
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|w
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setIndexDeletionPolicy
argument_list|(
name|NoDeletionPolicy
operator|.
name|INSTANCE
argument_list|)
operator|.
name|setIndexCommit
argument_list|(
name|commit
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|w
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
comment|// commit IndexWriter to "third"
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|commitData
operator|.
name|put
argument_list|(
literal|"tag"
argument_list|,
literal|"third"
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|(
name|commitData
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// make sure "second" commit is still there
name|commit
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|IndexCommit
name|c
range|:
name|IndexReader
operator|.
name|listCommits
argument_list|(
name|dir
argument_list|)
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
literal|"tag"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"second"
argument_list|)
condition|)
block|{
name|commit
operator|=
name|c
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|commit
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// open "second", w/ writeable IndexReader& commit
name|r
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|commit
argument_list|,
name|NoDeletionPolicy
operator|.
name|INSTANCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|deleteDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|r
operator|.
name|deleteDocument
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|commitData
operator|.
name|put
argument_list|(
literal|"tag"
argument_list|,
literal|"fourth"
argument_list|)
expr_stmt|;
name|r
operator|.
name|commit
argument_list|(
name|commitData
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// make sure "third" commit is still there
name|commit
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|IndexCommit
name|c
range|:
name|IndexReader
operator|.
name|listCommits
argument_list|(
name|dir
argument_list|)
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
literal|"tag"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"third"
argument_list|)
condition|)
block|{
name|commit
operator|=
name|c
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testRandomStoredFields
specifier|public
name|void
name|testRandomStoredFields
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|index
init|=
name|_TestUtil
operator|.
name|getTempDir
argument_list|(
literal|"lucenerandfields"
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
name|FSDirectory
operator|.
name|open
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|Random
name|rand
init|=
name|newRandom
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|rand
argument_list|,
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|rand
argument_list|,
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|()
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|rand
argument_list|,
literal|5
argument_list|,
literal|20
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|//w.w.setInfoStream(System.out);
comment|//w.w.setUseCompoundFile(false);
specifier|final
name|int
name|docCount
init|=
literal|200
operator|*
name|RANDOM_MULTIPLIER
decl_stmt|;
specifier|final
name|int
name|fieldCount
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|rand
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|fieldIDs
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Field
name|idField
init|=
operator|new
name|Field
argument_list|(
literal|"id"
argument_list|,
literal|""
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NOT_ANALYZED
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
name|i
operator|++
control|)
block|{
name|fieldIDs
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Document
argument_list|>
name|docs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Document
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docCount
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|idField
argument_list|)
expr_stmt|;
specifier|final
name|String
name|id
init|=
literal|""
operator|+
name|i
decl_stmt|;
name|idField
operator|.
name|setValue
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|docs
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|doc
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|field
range|:
name|fieldIDs
control|)
block|{
specifier|final
name|String
name|s
decl_stmt|;
if|if
condition|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
operator|!=
literal|3
condition|)
block|{
name|s
operator|=
name|_TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|rand
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f"
operator|+
name|field
argument_list|,
name|s
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|,
name|Field
operator|.
name|Index
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|s
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
operator|==
literal|17
condition|)
block|{
comment|// mixup binding of field name -> Number every so often
name|Collections
operator|.
name|shuffle
argument_list|(
name|fieldIDs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|3
operator|&&
name|i
operator|>
literal|0
condition|)
block|{
specifier|final
name|String
name|delID
init|=
literal|""
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|delID
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|remove
argument_list|(
name|delID
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|docs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|idsList
init|=
name|docs
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|docs
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|2
condition|;
name|x
operator|++
control|)
block|{
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
operator|new
name|IndexSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|1000
operator|*
name|RANDOM_MULTIPLIER
condition|;
name|iter
operator|++
control|)
block|{
name|String
name|testID
init|=
name|idsList
index|[
name|rand
operator|.
name|nextInt
argument_list|(
name|idsList
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|TopDocs
name|hits
init|=
name|s
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|testID
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|r
operator|.
name|document
argument_list|(
name|hits
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|Document
name|docExp
init|=
name|docs
operator|.
name|get
argument_list|(
name|testID
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"doc "
operator|+
name|testID
operator|+
literal|", field f"
operator|+
name|fieldCount
operator|+
literal|" is wrong"
argument_list|,
name|docExp
operator|.
name|get
argument_list|(
literal|"f"
operator|+
name|i
argument_list|)
argument_list|,
name|doc
operator|.
name|get
argument_list|(
literal|"f"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|w
operator|.
name|optimize
argument_list|()
expr_stmt|;
block|}
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
name|_TestUtil
operator|.
name|rmDir
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
