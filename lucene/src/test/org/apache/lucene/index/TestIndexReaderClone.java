begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_comment
comment|/**  * Tests cloning multiple types of readers, modifying the liveDocs and norms  * and verifies copy on write semantics of the liveDocs and norms is  * implemented properly  */
end_comment
begin_class
DECL|class|TestIndexReaderClone
specifier|public
class|class
name|TestIndexReaderClone
extends|extends
name|LuceneTestCase
block|{
DECL|method|testDirectoryReader
specifier|public
name|void
name|testDirectoryReader
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Directory
name|dir
init|=
name|createIndex
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|performDefaultTests
argument_list|(
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testMultiReader
specifier|public
name|void
name|testMultiReader
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Directory
name|dir1
init|=
name|createIndex
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|IndexReader
name|r1
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir1
argument_list|)
decl_stmt|;
specifier|final
name|Directory
name|dir2
init|=
name|createIndex
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|IndexReader
name|r2
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir2
argument_list|)
decl_stmt|;
specifier|final
name|MultiReader
name|mr
init|=
operator|new
name|MultiReader
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
decl_stmt|;
name|performDefaultTests
argument_list|(
name|mr
argument_list|)
expr_stmt|;
name|dir1
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testParallelReader
specifier|public
name|void
name|testParallelReader
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Directory
name|dir1
init|=
name|createIndex
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|IndexReader
name|r1
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir1
argument_list|)
decl_stmt|;
specifier|final
name|Directory
name|dir2
init|=
name|createIndex
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|IndexReader
name|r2
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir2
argument_list|)
decl_stmt|;
specifier|final
name|ParallelReader
name|pr
init|=
operator|new
name|ParallelReader
argument_list|()
decl_stmt|;
name|pr
operator|.
name|add
argument_list|(
name|r1
argument_list|)
expr_stmt|;
name|pr
operator|.
name|add
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|performDefaultTests
argument_list|(
name|pr
argument_list|)
expr_stmt|;
name|dir1
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createIndex
specifier|private
name|Directory
name|createIndex
parameter_list|(
name|int
name|no
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"field"
operator|+
name|no
argument_list|,
literal|"yes it's stored"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|dir
return|;
block|}
DECL|method|performDefaultTests
specifier|private
name|void
name|performDefaultTests
parameter_list|(
name|IndexReader
name|r1
parameter_list|)
throws|throws
name|Exception
block|{
name|IndexReader
name|r2
init|=
operator|(
name|IndexReader
operator|)
name|r1
operator|.
name|clone
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|r1
operator|!=
name|r2
argument_list|)
expr_stmt|;
name|TestIndexReader
operator|.
name|assertIndexEquals
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
expr_stmt|;
name|r1
operator|.
name|close
argument_list|()
expr_stmt|;
name|r2
operator|.
name|close
argument_list|()
expr_stmt|;
name|TestIndexReaderReopen
operator|.
name|assertReaderClosed
argument_list|(
name|r1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TestIndexReaderReopen
operator|.
name|assertReaderClosed
argument_list|(
name|r2
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
