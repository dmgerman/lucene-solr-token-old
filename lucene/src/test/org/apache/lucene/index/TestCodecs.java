begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FieldsConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FieldsProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PostingsConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|TermStats
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|TermsConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene3x
operator|.
name|Lucene3xCodec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|mocksep
operator|.
name|MockSepPostingsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
operator|.
name|IndexOptions
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PhraseQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|InfoStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|OpenBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import
begin_comment
comment|// TODO: test multiple codecs here?
end_comment
begin_comment
comment|// TODO
end_comment
begin_comment
comment|//   - test across fields
end_comment
begin_comment
comment|//   - fix this test to run once for all codecs
end_comment
begin_comment
comment|//   - make more docs per term, to test> 1 level skipping
end_comment
begin_comment
comment|//   - test all combinations of payloads/not and omitTF/not
end_comment
begin_comment
comment|//   - test w/ different indexDivisor
end_comment
begin_comment
comment|//   - test field where payload length rarely changes
end_comment
begin_comment
comment|//   - 0-term fields
end_comment
begin_comment
comment|//   - seek/skip to same term/doc i'm already on
end_comment
begin_comment
comment|//   - mix in deleted docs
end_comment
begin_comment
comment|//   - seek, skip beyond end -- assert returns false
end_comment
begin_comment
comment|//   - seek, skip to things that don't exist -- ensure it
end_comment
begin_comment
comment|//     goes to 1 before next one known to exist
end_comment
begin_comment
comment|//   - skipTo(term)
end_comment
begin_comment
comment|//   - skipTo(doc)
end_comment
begin_class
DECL|class|TestCodecs
specifier|public
class|class
name|TestCodecs
extends|extends
name|LuceneTestCase
block|{
DECL|field|fieldNames
specifier|private
specifier|static
name|String
index|[]
name|fieldNames
init|=
operator|new
name|String
index|[]
block|{
literal|"one"
block|,
literal|"two"
block|,
literal|"three"
block|,
literal|"four"
block|}
decl_stmt|;
DECL|field|NUM_TEST_ITER
specifier|private
specifier|static
name|int
name|NUM_TEST_ITER
decl_stmt|;
DECL|field|NUM_TEST_THREADS
specifier|private
specifier|final
specifier|static
name|int
name|NUM_TEST_THREADS
init|=
literal|3
decl_stmt|;
DECL|field|NUM_FIELDS
specifier|private
specifier|final
specifier|static
name|int
name|NUM_FIELDS
init|=
literal|4
decl_stmt|;
DECL|field|NUM_TERMS_RAND
specifier|private
specifier|final
specifier|static
name|int
name|NUM_TERMS_RAND
init|=
literal|50
decl_stmt|;
comment|// must be> 16 to test skipping
DECL|field|DOC_FREQ_RAND
specifier|private
specifier|final
specifier|static
name|int
name|DOC_FREQ_RAND
init|=
literal|500
decl_stmt|;
comment|// must be> 16 to test skipping
DECL|field|TERM_DOC_FREQ_RAND
specifier|private
specifier|final
specifier|static
name|int
name|TERM_DOC_FREQ_RAND
init|=
literal|20
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|NUM_TEST_ITER
operator|=
name|atLeast
argument_list|(
literal|20
argument_list|)
expr_stmt|;
block|}
DECL|class|FieldData
class|class
name|FieldData
implements|implements
name|Comparable
block|{
DECL|field|fieldInfo
specifier|final
name|FieldInfo
name|fieldInfo
decl_stmt|;
DECL|field|terms
specifier|final
name|TermData
index|[]
name|terms
decl_stmt|;
DECL|field|omitTF
specifier|final
name|boolean
name|omitTF
decl_stmt|;
DECL|field|storePayloads
specifier|final
name|boolean
name|storePayloads
decl_stmt|;
DECL|method|FieldData
specifier|public
name|FieldData
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|FieldInfos
name|fieldInfos
parameter_list|,
specifier|final
name|TermData
index|[]
name|terms
parameter_list|,
specifier|final
name|boolean
name|omitTF
parameter_list|,
specifier|final
name|boolean
name|storePayloads
parameter_list|)
block|{
name|this
operator|.
name|omitTF
operator|=
name|omitTF
expr_stmt|;
name|this
operator|.
name|storePayloads
operator|=
name|storePayloads
expr_stmt|;
name|fieldInfos
operator|.
name|addOrUpdate
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fieldInfo
operator|=
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// TODO: change this test to use all three
name|fieldInfo
operator|.
name|indexOptions
operator|=
name|omitTF
condition|?
name|IndexOptions
operator|.
name|DOCS_ONLY
else|:
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
expr_stmt|;
name|fieldInfo
operator|.
name|storePayloads
operator|=
name|storePayloads
expr_stmt|;
name|this
operator|.
name|terms
operator|=
name|terms
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|terms
index|[
name|i
index|]
operator|.
name|field
operator|=
name|this
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|terms
argument_list|)
expr_stmt|;
block|}
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
specifier|final
name|Object
name|other
parameter_list|)
block|{
return|return
name|fieldInfo
operator|.
name|name
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|FieldData
operator|)
name|other
operator|)
operator|.
name|fieldInfo
operator|.
name|name
argument_list|)
return|;
block|}
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|FieldsConsumer
name|consumer
parameter_list|)
throws|throws
name|Throwable
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|terms
argument_list|)
expr_stmt|;
specifier|final
name|TermsConsumer
name|termsConsumer
init|=
name|consumer
operator|.
name|addField
argument_list|(
name|fieldInfo
argument_list|)
decl_stmt|;
name|long
name|sumTotalTermCount
init|=
literal|0
decl_stmt|;
name|long
name|sumDF
init|=
literal|0
decl_stmt|;
name|OpenBitSet
name|visitedDocs
init|=
operator|new
name|OpenBitSet
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|TermData
name|term
range|:
name|terms
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|term
operator|.
name|docs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|visitedDocs
operator|.
name|set
argument_list|(
name|term
operator|.
name|docs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|sumDF
operator|+=
name|term
operator|.
name|docs
operator|.
name|length
expr_stmt|;
name|sumTotalTermCount
operator|+=
name|term
operator|.
name|write
argument_list|(
name|termsConsumer
argument_list|)
expr_stmt|;
block|}
name|termsConsumer
operator|.
name|finish
argument_list|(
name|sumTotalTermCount
argument_list|,
name|sumDF
argument_list|,
operator|(
name|int
operator|)
name|visitedDocs
operator|.
name|cardinality
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|PositionData
class|class
name|PositionData
block|{
DECL|field|pos
name|int
name|pos
decl_stmt|;
DECL|field|payload
name|BytesRef
name|payload
decl_stmt|;
DECL|method|PositionData
name|PositionData
parameter_list|(
specifier|final
name|int
name|pos
parameter_list|,
specifier|final
name|BytesRef
name|payload
parameter_list|)
block|{
name|this
operator|.
name|pos
operator|=
name|pos
expr_stmt|;
name|this
operator|.
name|payload
operator|=
name|payload
expr_stmt|;
block|}
block|}
DECL|class|TermData
class|class
name|TermData
implements|implements
name|Comparable
block|{
DECL|field|text2
name|String
name|text2
decl_stmt|;
DECL|field|text
specifier|final
name|BytesRef
name|text
decl_stmt|;
DECL|field|docs
name|int
index|[]
name|docs
decl_stmt|;
DECL|field|positions
name|PositionData
index|[]
index|[]
name|positions
decl_stmt|;
DECL|field|field
name|FieldData
name|field
decl_stmt|;
DECL|method|TermData
specifier|public
name|TermData
parameter_list|(
specifier|final
name|String
name|text
parameter_list|,
specifier|final
name|int
index|[]
name|docs
parameter_list|,
specifier|final
name|PositionData
index|[]
index|[]
name|positions
parameter_list|)
block|{
name|this
operator|.
name|text
operator|=
operator|new
name|BytesRef
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|this
operator|.
name|text2
operator|=
name|text
expr_stmt|;
name|this
operator|.
name|docs
operator|=
name|docs
expr_stmt|;
name|this
operator|.
name|positions
operator|=
name|positions
expr_stmt|;
block|}
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
return|return
name|text
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|TermData
operator|)
name|o
operator|)
operator|.
name|text
argument_list|)
return|;
block|}
DECL|method|write
specifier|public
name|long
name|write
parameter_list|(
specifier|final
name|TermsConsumer
name|termsConsumer
parameter_list|)
throws|throws
name|Throwable
block|{
specifier|final
name|PostingsConsumer
name|postingsConsumer
init|=
name|termsConsumer
operator|.
name|startTerm
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|long
name|totTF
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|termDocFreq
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|omitTF
condition|)
block|{
name|termDocFreq
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|termDocFreq
operator|=
name|positions
index|[
name|i
index|]
operator|.
name|length
expr_stmt|;
block|}
name|postingsConsumer
operator|.
name|startDoc
argument_list|(
name|docs
index|[
name|i
index|]
argument_list|,
name|termDocFreq
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|field
operator|.
name|omitTF
condition|)
block|{
name|totTF
operator|+=
name|positions
index|[
name|i
index|]
operator|.
name|length
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|positions
index|[
name|i
index|]
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|PositionData
name|pos
init|=
name|positions
index|[
name|i
index|]
index|[
name|j
index|]
decl_stmt|;
name|postingsConsumer
operator|.
name|addPosition
argument_list|(
name|pos
operator|.
name|pos
argument_list|,
name|pos
operator|.
name|payload
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|postingsConsumer
operator|.
name|finishDoc
argument_list|()
expr_stmt|;
block|}
block|}
name|termsConsumer
operator|.
name|finishTerm
argument_list|(
name|text
argument_list|,
operator|new
name|TermStats
argument_list|(
name|docs
operator|.
name|length
argument_list|,
name|totTF
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|totTF
return|;
block|}
block|}
DECL|field|SEGMENT
specifier|final
specifier|private
specifier|static
name|String
name|SEGMENT
init|=
literal|"0"
decl_stmt|;
DECL|method|makeRandomTerms
name|TermData
index|[]
name|makeRandomTerms
parameter_list|(
specifier|final
name|boolean
name|omitTF
parameter_list|,
specifier|final
name|boolean
name|storePayloads
parameter_list|)
block|{
specifier|final
name|int
name|numTerms
init|=
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|NUM_TERMS_RAND
argument_list|)
decl_stmt|;
comment|//final int numTerms = 2;
specifier|final
name|TermData
index|[]
name|terms
init|=
operator|new
name|TermData
index|[
name|numTerms
index|]
decl_stmt|;
specifier|final
name|HashSet
argument_list|<
name|String
argument_list|>
name|termsSeen
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTerms
condition|;
name|i
operator|++
control|)
block|{
comment|// Make term text
name|String
name|text2
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|text2
operator|=
name|_TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|termsSeen
operator|.
name|contains
argument_list|(
name|text2
argument_list|)
operator|&&
operator|!
name|text2
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|termsSeen
operator|.
name|add
argument_list|(
name|text2
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
specifier|final
name|int
name|docFreq
init|=
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|DOC_FREQ_RAND
argument_list|)
decl_stmt|;
specifier|final
name|int
index|[]
name|docs
init|=
operator|new
name|int
index|[
name|docFreq
index|]
decl_stmt|;
name|PositionData
index|[]
index|[]
name|positions
decl_stmt|;
if|if
condition|(
operator|!
name|omitTF
condition|)
name|positions
operator|=
operator|new
name|PositionData
index|[
name|docFreq
index|]
index|[]
expr_stmt|;
else|else
name|positions
operator|=
literal|null
expr_stmt|;
name|int
name|docID
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|docFreq
condition|;
name|j
operator|++
control|)
block|{
name|docID
operator|+=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|docs
index|[
name|j
index|]
operator|=
name|docID
expr_stmt|;
if|if
condition|(
operator|!
name|omitTF
condition|)
block|{
specifier|final
name|int
name|termFreq
init|=
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|TERM_DOC_FREQ_RAND
argument_list|)
decl_stmt|;
name|positions
index|[
name|j
index|]
operator|=
operator|new
name|PositionData
index|[
name|termFreq
index|]
expr_stmt|;
name|int
name|position
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|termFreq
condition|;
name|k
operator|++
control|)
block|{
name|position
operator|+=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|BytesRef
name|payload
decl_stmt|;
if|if
condition|(
name|storePayloads
operator|&&
name|random
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
operator|==
literal|0
condition|)
block|{
specifier|final
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|l
init|=
literal|0
init|;
name|l
operator|<
name|bytes
operator|.
name|length
condition|;
name|l
operator|++
control|)
block|{
name|bytes
index|[
name|l
index|]
operator|=
operator|(
name|byte
operator|)
name|random
operator|.
name|nextInt
argument_list|(
literal|255
argument_list|)
expr_stmt|;
block|}
name|payload
operator|=
operator|new
name|BytesRef
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|payload
operator|=
literal|null
expr_stmt|;
block|}
name|positions
index|[
name|j
index|]
index|[
name|k
index|]
operator|=
operator|new
name|PositionData
argument_list|(
name|position
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|terms
index|[
name|i
index|]
operator|=
operator|new
name|TermData
argument_list|(
name|text2
argument_list|,
name|docs
argument_list|,
name|positions
argument_list|)
expr_stmt|;
block|}
return|return
name|terms
return|;
block|}
DECL|method|testFixedPostings
specifier|public
name|void
name|testFixedPostings
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|int
name|NUM_TERMS
init|=
literal|100
decl_stmt|;
specifier|final
name|TermData
index|[]
name|terms
init|=
operator|new
name|TermData
index|[
name|NUM_TERMS
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_TERMS
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
index|[]
name|docs
init|=
operator|new
name|int
index|[]
block|{
name|i
block|}
decl_stmt|;
specifier|final
name|String
name|text
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|,
name|Character
operator|.
name|MAX_RADIX
argument_list|)
decl_stmt|;
name|terms
index|[
name|i
index|]
operator|=
operator|new
name|TermData
argument_list|(
name|text
argument_list|,
name|docs
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|final
name|FieldInfos
name|fieldInfos
init|=
operator|new
name|FieldInfos
argument_list|(
operator|new
name|FieldInfos
operator|.
name|FieldNumberBiMap
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|FieldData
name|field
init|=
operator|new
name|FieldData
argument_list|(
literal|"field"
argument_list|,
name|fieldInfos
argument_list|,
name|terms
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|FieldData
index|[]
name|fields
init|=
operator|new
name|FieldData
index|[]
block|{
name|field
block|}
decl_stmt|;
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|FieldInfos
name|clonedFieldInfos
init|=
operator|(
name|FieldInfos
operator|)
name|fieldInfos
operator|.
name|clone
argument_list|()
decl_stmt|;
name|this
operator|.
name|write
argument_list|(
name|fieldInfos
argument_list|,
name|dir
argument_list|,
name|fields
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Codec
name|codec
init|=
name|Codec
operator|.
name|getDefault
argument_list|()
decl_stmt|;
specifier|final
name|SegmentInfo
name|si
init|=
operator|new
name|SegmentInfo
argument_list|(
name|SEGMENT
argument_list|,
literal|10000
argument_list|,
name|dir
argument_list|,
literal|false
argument_list|,
name|codec
argument_list|,
name|clonedFieldInfos
argument_list|)
decl_stmt|;
specifier|final
name|FieldsProducer
name|reader
init|=
name|codec
operator|.
name|postingsFormat
argument_list|()
operator|.
name|fieldsProducer
argument_list|(
operator|new
name|SegmentReadState
argument_list|(
name|dir
argument_list|,
name|si
argument_list|,
name|fieldInfos
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|)
argument_list|,
name|IndexReader
operator|.
name|DEFAULT_TERMS_INDEX_DIVISOR
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|FieldsEnum
name|fieldsEnum
init|=
name|reader
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|fieldsEnum
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Terms
name|terms2
init|=
name|fieldsEnum
operator|.
name|terms
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|terms2
argument_list|)
expr_stmt|;
specifier|final
name|TermsEnum
name|termsEnum
init|=
name|terms2
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|DocsEnum
name|docsEnum
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_TERMS
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|BytesRef
name|term
init|=
name|termsEnum
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|terms
index|[
name|i
index|]
operator|.
name|text2
argument_list|,
name|term
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
comment|// do this twice to stress test the codec's reuse, ie,
comment|// make sure it properly fully resets (rewinds) its
comment|// internal state:
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|2
condition|;
name|iter
operator|++
control|)
block|{
name|docsEnum
operator|=
name|_TestUtil
operator|.
name|docs
argument_list|(
name|random
argument_list|,
name|termsEnum
argument_list|,
literal|null
argument_list|,
name|docsEnum
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|terms
index|[
name|i
index|]
operator|.
name|docs
index|[
literal|0
index|]
argument_list|,
name|docsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocsEnum
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertNull
argument_list|(
name|termsEnum
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_TERMS
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|termsEnum
operator|.
name|seekCeil
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|terms
index|[
name|i
index|]
operator|.
name|text2
argument_list|)
argument_list|)
argument_list|,
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|FOUND
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|fieldsEnum
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testRandomPostings
specifier|public
name|void
name|testRandomPostings
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|FieldInfos
name|fieldInfos
init|=
operator|new
name|FieldInfos
argument_list|(
operator|new
name|FieldInfos
operator|.
name|FieldNumberBiMap
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|FieldData
index|[]
name|fields
init|=
operator|new
name|FieldData
index|[
name|NUM_FIELDS
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_FIELDS
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|boolean
name|omitTF
init|=
literal|0
operator|==
operator|(
name|i
operator|%
literal|3
operator|)
decl_stmt|;
specifier|final
name|boolean
name|storePayloads
init|=
literal|1
operator|==
operator|(
name|i
operator|%
literal|3
operator|)
decl_stmt|;
name|fields
index|[
name|i
index|]
operator|=
operator|new
name|FieldData
argument_list|(
name|fieldNames
index|[
name|i
index|]
argument_list|,
name|fieldInfos
argument_list|,
name|this
operator|.
name|makeRandomTerms
argument_list|(
name|omitTF
argument_list|,
name|storePayloads
argument_list|)
argument_list|,
name|omitTF
argument_list|,
name|storePayloads
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: now write postings"
argument_list|)
expr_stmt|;
block|}
name|FieldInfos
name|clonedFieldInfos
init|=
operator|(
name|FieldInfos
operator|)
name|fieldInfos
operator|.
name|clone
argument_list|()
decl_stmt|;
name|this
operator|.
name|write
argument_list|(
name|fieldInfos
argument_list|,
name|dir
argument_list|,
name|fields
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Codec
name|codec
init|=
name|Codec
operator|.
name|getDefault
argument_list|()
decl_stmt|;
specifier|final
name|SegmentInfo
name|si
init|=
operator|new
name|SegmentInfo
argument_list|(
name|SEGMENT
argument_list|,
literal|10000
argument_list|,
name|dir
argument_list|,
literal|false
argument_list|,
name|codec
argument_list|,
name|clonedFieldInfos
argument_list|)
decl_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: now read postings"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|FieldsProducer
name|terms
init|=
name|codec
operator|.
name|postingsFormat
argument_list|()
operator|.
name|fieldsProducer
argument_list|(
operator|new
name|SegmentReadState
argument_list|(
name|dir
argument_list|,
name|si
argument_list|,
name|fieldInfos
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|)
argument_list|,
name|IndexReader
operator|.
name|DEFAULT_TERMS_INDEX_DIVISOR
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Verify
index|[]
name|threads
init|=
operator|new
name|Verify
index|[
name|NUM_TEST_THREADS
operator|-
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_TEST_THREADS
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Verify
argument_list|(
name|si
argument_list|,
name|fields
argument_list|,
name|terms
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
operator|new
name|Verify
argument_list|(
name|si
argument_list|,
name|fields
argument_list|,
name|terms
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_TEST_THREADS
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
assert|assert
operator|!
name|threads
index|[
name|i
index|]
operator|.
name|failed
assert|;
block|}
name|terms
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSepPositionAfterMerge
specifier|public
name|void
name|testSepPositionAfterMerge
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|IndexWriterConfig
name|config
init|=
name|newIndexWriterConfig
argument_list|(
name|Version
operator|.
name|LUCENE_31
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
decl_stmt|;
name|config
operator|.
name|setCodec
argument_list|(
name|_TestUtil
operator|.
name|alwaysPostingsFormat
argument_list|(
operator|new
name|MockSepPostingsFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|config
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|PhraseQuery
name|pq
init|=
operator|new
name|PhraseQuery
argument_list|()
decl_stmt|;
name|pq
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"bbb"
argument_list|)
argument_list|)
expr_stmt|;
name|pq
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"ccc"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|customType
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_UNSTORED
argument_list|)
decl_stmt|;
name|customType
operator|.
name|setOmitNorms
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"content"
argument_list|,
literal|"aaa bbb ccc ddd"
argument_list|,
name|customType
argument_list|)
argument_list|)
expr_stmt|;
comment|// add document and force commit for creating a first segment
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ScoreDoc
index|[]
name|results
init|=
name|this
operator|.
name|search
argument_list|(
name|writer
argument_list|,
name|pq
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
comment|// add document and force commit for creating a second segment
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// at this point, there should be at least two segments
name|results
operator|=
name|this
operator|.
name|search
argument_list|(
name|writer
argument_list|,
name|pq
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// optimise to merge the segments.
name|results
operator|=
name|this
operator|.
name|search
argument_list|(
name|writer
argument_list|,
name|pq
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|search
specifier|private
name|ScoreDoc
index|[]
name|search
parameter_list|(
specifier|final
name|IndexWriter
name|writer
parameter_list|,
specifier|final
name|Query
name|q
parameter_list|,
specifier|final
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|null
argument_list|,
name|n
argument_list|)
operator|.
name|scoreDocs
return|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|Verify
specifier|private
class|class
name|Verify
extends|extends
name|Thread
block|{
DECL|field|termsDict
specifier|final
name|Fields
name|termsDict
decl_stmt|;
DECL|field|fields
specifier|final
name|FieldData
index|[]
name|fields
decl_stmt|;
DECL|field|si
specifier|final
name|SegmentInfo
name|si
decl_stmt|;
DECL|field|failed
specifier|volatile
name|boolean
name|failed
decl_stmt|;
DECL|method|Verify
name|Verify
parameter_list|(
specifier|final
name|SegmentInfo
name|si
parameter_list|,
specifier|final
name|FieldData
index|[]
name|fields
parameter_list|,
specifier|final
name|Fields
name|termsDict
parameter_list|)
block|{
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
name|this
operator|.
name|termsDict
operator|=
name|termsDict
expr_stmt|;
name|this
operator|.
name|si
operator|=
name|si
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|_run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Throwable
name|t
parameter_list|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
DECL|method|verifyDocs
specifier|private
name|void
name|verifyDocs
parameter_list|(
specifier|final
name|int
index|[]
name|docs
parameter_list|,
specifier|final
name|PositionData
index|[]
index|[]
name|positions
parameter_list|,
specifier|final
name|DocsEnum
name|docsEnum
parameter_list|,
specifier|final
name|boolean
name|doPos
parameter_list|)
throws|throws
name|Throwable
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|doc
init|=
name|docsEnum
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|docs
index|[
name|i
index|]
argument_list|,
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|doPos
condition|)
block|{
name|this
operator|.
name|verifyPositions
argument_list|(
name|positions
index|[
name|i
index|]
argument_list|,
operator|(
operator|(
name|DocsAndPositionsEnum
operator|)
name|docsEnum
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docsEnum
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|field|data
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|10
index|]
decl_stmt|;
DECL|method|verifyPositions
specifier|private
name|void
name|verifyPositions
parameter_list|(
specifier|final
name|PositionData
index|[]
name|positions
parameter_list|,
specifier|final
name|DocsAndPositionsEnum
name|posEnum
parameter_list|)
throws|throws
name|Throwable
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|positions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|pos
init|=
name|posEnum
operator|.
name|nextPosition
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|positions
index|[
name|i
index|]
operator|.
name|pos
argument_list|,
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|positions
index|[
name|i
index|]
operator|.
name|payload
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|posEnum
operator|.
name|hasPayload
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|TestCodecs
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
operator|<
literal|2
condition|)
block|{
comment|// Verify the payload bytes
specifier|final
name|BytesRef
name|otherPayload
init|=
name|posEnum
operator|.
name|getPayload
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"expected="
operator|+
name|positions
index|[
name|i
index|]
operator|.
name|payload
operator|.
name|toString
argument_list|()
operator|+
literal|" got="
operator|+
name|otherPayload
operator|.
name|toString
argument_list|()
argument_list|,
name|positions
index|[
name|i
index|]
operator|.
name|payload
operator|.
name|equals
argument_list|(
name|otherPayload
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|posEnum
operator|.
name|hasPayload
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|_run
specifier|public
name|void
name|_run
parameter_list|()
throws|throws
name|Throwable
block|{
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|NUM_TEST_ITER
condition|;
name|iter
operator|++
control|)
block|{
specifier|final
name|FieldData
name|field
init|=
name|fields
index|[
name|TestCodecs
operator|.
name|random
operator|.
name|nextInt
argument_list|(
name|fields
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
specifier|final
name|TermsEnum
name|termsEnum
init|=
name|termsDict
operator|.
name|terms
argument_list|(
name|field
operator|.
name|fieldInfo
operator|.
name|name
argument_list|)
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|si
operator|.
name|getCodec
argument_list|()
operator|instanceof
name|Lucene3xCodec
condition|)
block|{
comment|// code below expects unicode sort order
continue|continue;
block|}
name|int
name|upto
init|=
literal|0
decl_stmt|;
comment|// Test straight enum of the terms:
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|BytesRef
name|term
init|=
name|termsEnum
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
break|break;
block|}
specifier|final
name|BytesRef
name|expected
init|=
operator|new
name|BytesRef
argument_list|(
name|field
operator|.
name|terms
index|[
name|upto
operator|++
index|]
operator|.
name|text2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"expected="
operator|+
name|expected
operator|+
literal|" vs actual "
operator|+
name|term
argument_list|,
name|expected
operator|.
name|bytesEquals
argument_list|(
name|term
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|upto
argument_list|,
name|field
operator|.
name|terms
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Test random seek:
name|TermData
name|term
init|=
name|field
operator|.
name|terms
index|[
name|TestCodecs
operator|.
name|random
operator|.
name|nextInt
argument_list|(
name|field
operator|.
name|terms
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|TermsEnum
operator|.
name|SeekStatus
name|status
init|=
name|termsEnum
operator|.
name|seekCeil
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|term
operator|.
name|text2
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|status
argument_list|,
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|FOUND
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|term
operator|.
name|docs
operator|.
name|length
argument_list|,
name|termsEnum
operator|.
name|docFreq
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|omitTF
condition|)
block|{
name|this
operator|.
name|verifyDocs
argument_list|(
name|term
operator|.
name|docs
argument_list|,
name|term
operator|.
name|positions
argument_list|,
name|_TestUtil
operator|.
name|docs
argument_list|(
name|random
argument_list|,
name|termsEnum
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|verifyDocs
argument_list|(
name|term
operator|.
name|docs
argument_list|,
name|term
operator|.
name|positions
argument_list|,
name|termsEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Test random seek by ord:
specifier|final
name|int
name|idx
init|=
name|TestCodecs
operator|.
name|random
operator|.
name|nextInt
argument_list|(
name|field
operator|.
name|terms
operator|.
name|length
argument_list|)
decl_stmt|;
name|term
operator|=
name|field
operator|.
name|terms
index|[
name|idx
index|]
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|termsEnum
operator|.
name|seekExact
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|uoe
parameter_list|)
block|{
comment|// ok -- skip it
block|}
if|if
condition|(
name|success
condition|)
block|{
name|assertEquals
argument_list|(
name|status
argument_list|,
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|FOUND
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|termsEnum
operator|.
name|term
argument_list|()
operator|.
name|bytesEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|term
operator|.
name|text2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|term
operator|.
name|docs
operator|.
name|length
argument_list|,
name|termsEnum
operator|.
name|docFreq
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|omitTF
condition|)
block|{
name|this
operator|.
name|verifyDocs
argument_list|(
name|term
operator|.
name|docs
argument_list|,
name|term
operator|.
name|positions
argument_list|,
name|_TestUtil
operator|.
name|docs
argument_list|(
name|random
argument_list|,
name|termsEnum
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|verifyDocs
argument_list|(
name|term
operator|.
name|docs
argument_list|,
name|term
operator|.
name|positions
argument_list|,
name|termsEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Test seek to non-existent terms:
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: seek non-exist terms"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|text2
init|=
name|_TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|)
operator|+
literal|"."
decl_stmt|;
name|status
operator|=
name|termsEnum
operator|.
name|seekCeil
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|text2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|status
operator|==
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|NOT_FOUND
operator|||
name|status
operator|==
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|END
argument_list|)
expr_stmt|;
block|}
comment|// Seek to each term, backwards:
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: seek terms backwards"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|field
operator|.
name|terms
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|assertEquals
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": field="
operator|+
name|field
operator|.
name|fieldInfo
operator|.
name|name
operator|+
literal|" term="
operator|+
name|field
operator|.
name|terms
index|[
name|i
index|]
operator|.
name|text2
argument_list|,
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|FOUND
argument_list|,
name|termsEnum
operator|.
name|seekCeil
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|field
operator|.
name|terms
index|[
name|i
index|]
operator|.
name|text2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|field
operator|.
name|terms
index|[
name|i
index|]
operator|.
name|docs
operator|.
name|length
argument_list|,
name|termsEnum
operator|.
name|docFreq
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Seek to each term by ord, backwards
for|for
control|(
name|int
name|i
init|=
name|field
operator|.
name|terms
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
try|try
block|{
name|termsEnum
operator|.
name|seekExact
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|field
operator|.
name|terms
index|[
name|i
index|]
operator|.
name|docs
operator|.
name|length
argument_list|,
name|termsEnum
operator|.
name|docFreq
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|termsEnum
operator|.
name|term
argument_list|()
operator|.
name|bytesEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|field
operator|.
name|terms
index|[
name|i
index|]
operator|.
name|text2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|uoe
parameter_list|)
block|{           }
block|}
comment|// Seek to non-existent empty-string term
name|status
operator|=
name|termsEnum
operator|.
name|seekCeil
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|status
argument_list|)
expr_stmt|;
comment|//assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);
comment|// Make sure we're now pointing to first term
name|assertTrue
argument_list|(
name|termsEnum
operator|.
name|term
argument_list|()
operator|.
name|bytesEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|field
operator|.
name|terms
index|[
literal|0
index|]
operator|.
name|text2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test docs enum
name|termsEnum
operator|.
name|seekCeil
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|upto
operator|=
literal|0
expr_stmt|;
do|do
block|{
name|term
operator|=
name|field
operator|.
name|terms
index|[
name|upto
index|]
expr_stmt|;
if|if
condition|(
name|TestCodecs
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
operator|==
literal|1
condition|)
block|{
specifier|final
name|DocsEnum
name|docs
decl_stmt|;
specifier|final
name|DocsEnum
name|docsAndFreqs
decl_stmt|;
specifier|final
name|DocsAndPositionsEnum
name|postings
decl_stmt|;
if|if
condition|(
operator|!
name|field
operator|.
name|omitTF
condition|)
block|{
name|postings
operator|=
name|termsEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|postings
operator|!=
literal|null
condition|)
block|{
name|docs
operator|=
name|docsAndFreqs
operator|=
name|postings
expr_stmt|;
block|}
else|else
block|{
name|docs
operator|=
name|docsAndFreqs
operator|=
name|_TestUtil
operator|.
name|docs
argument_list|(
name|random
argument_list|,
name|termsEnum
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|postings
operator|=
literal|null
expr_stmt|;
name|docsAndFreqs
operator|=
literal|null
expr_stmt|;
name|docs
operator|=
name|_TestUtil
operator|.
name|docs
argument_list|(
name|random
argument_list|,
name|termsEnum
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|int
name|upto2
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|upto2
operator|<
name|term
operator|.
name|docs
operator|.
name|length
operator|-
literal|1
condition|)
block|{
comment|// Maybe skip:
specifier|final
name|int
name|left
init|=
name|term
operator|.
name|docs
operator|.
name|length
operator|-
name|upto2
decl_stmt|;
name|int
name|doc
decl_stmt|;
if|if
condition|(
name|TestCodecs
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
operator|==
literal|1
operator|&&
name|left
operator|>=
literal|1
condition|)
block|{
specifier|final
name|int
name|inc
init|=
literal|1
operator|+
name|TestCodecs
operator|.
name|random
operator|.
name|nextInt
argument_list|(
name|left
operator|-
literal|1
argument_list|)
decl_stmt|;
name|upto2
operator|+=
name|inc
expr_stmt|;
if|if
condition|(
name|TestCodecs
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
operator|==
literal|1
condition|)
block|{
name|doc
operator|=
name|docs
operator|.
name|advance
argument_list|(
name|term
operator|.
name|docs
index|[
name|upto2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|term
operator|.
name|docs
index|[
name|upto2
index|]
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|=
name|docs
operator|.
name|advance
argument_list|(
literal|1
operator|+
name|term
operator|.
name|docs
index|[
name|upto2
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
comment|// skipped past last doc
assert|assert
name|upto2
operator|==
name|term
operator|.
name|docs
operator|.
name|length
operator|-
literal|1
assert|;
break|break;
block|}
else|else
block|{
comment|// skipped to next doc
assert|assert
name|upto2
operator|<
name|term
operator|.
name|docs
operator|.
name|length
operator|-
literal|1
assert|;
if|if
condition|(
name|doc
operator|>=
name|term
operator|.
name|docs
index|[
literal|1
operator|+
name|upto2
index|]
condition|)
block|{
name|upto2
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|doc
operator|=
name|docs
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|doc
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|upto2
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|term
operator|.
name|docs
index|[
name|upto2
index|]
argument_list|,
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|field
operator|.
name|omitTF
condition|)
block|{
name|assertEquals
argument_list|(
name|term
operator|.
name|positions
index|[
name|upto2
index|]
operator|.
name|length
argument_list|,
name|postings
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|TestCodecs
operator|.
name|random
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
operator|==
literal|1
condition|)
block|{
name|this
operator|.
name|verifyPositions
argument_list|(
name|term
operator|.
name|positions
index|[
name|upto2
index|]
argument_list|,
name|postings
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|docs
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|upto
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|termsEnum
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
do|;
name|assertEquals
argument_list|(
name|upto
argument_list|,
name|field
operator|.
name|terms
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|write
specifier|private
name|void
name|write
parameter_list|(
specifier|final
name|FieldInfos
name|fieldInfos
parameter_list|,
specifier|final
name|Directory
name|dir
parameter_list|,
specifier|final
name|FieldData
index|[]
name|fields
parameter_list|,
name|boolean
name|allowPreFlex
parameter_list|)
throws|throws
name|Throwable
block|{
specifier|final
name|int
name|termIndexInterval
init|=
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|13
argument_list|,
literal|27
argument_list|)
decl_stmt|;
specifier|final
name|Codec
name|codec
init|=
name|Codec
operator|.
name|getDefault
argument_list|()
decl_stmt|;
specifier|final
name|SegmentWriteState
name|state
init|=
operator|new
name|SegmentWriteState
argument_list|(
name|InfoStream
operator|.
name|getDefault
argument_list|()
argument_list|,
name|dir
argument_list|,
name|SEGMENT
argument_list|,
name|fieldInfos
argument_list|,
literal|10000
argument_list|,
name|termIndexInterval
argument_list|,
name|codec
argument_list|,
literal|null
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|FieldsConsumer
name|consumer
init|=
name|codec
operator|.
name|postingsFormat
argument_list|()
operator|.
name|fieldsConsumer
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|fields
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|FieldData
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
operator|!
name|allowPreFlex
operator|&&
name|codec
operator|instanceof
name|Lucene3xCodec
condition|)
block|{
comment|// code below expects unicode sort order
continue|continue;
block|}
name|field
operator|.
name|write
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
