begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMDirectory
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_class
DECL|class|TestIndexInput
specifier|public
class|class
name|TestIndexInput
extends|extends
name|LuceneTestCase
block|{
DECL|field|READ_TEST_BYTES
specifier|static
specifier|final
name|byte
index|[]
name|READ_TEST_BYTES
init|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0x80
block|,
literal|0x01
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
literal|0x7F
block|,
operator|(
name|byte
operator|)
literal|0x80
block|,
operator|(
name|byte
operator|)
literal|0x80
block|,
literal|0x01
block|,
operator|(
name|byte
operator|)
literal|0x81
block|,
operator|(
name|byte
operator|)
literal|0x80
block|,
literal|0x01
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0x07
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0x07
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0x7F
block|,
literal|0x06
block|,
literal|'L'
block|,
literal|'u'
block|,
literal|'c'
block|,
literal|'e'
block|,
literal|'n'
block|,
literal|'e'
block|,
comment|// 2-byte UTF-8 (U+00BF "INVERTED QUESTION MARK")
literal|0x02
block|,
operator|(
name|byte
operator|)
literal|0xC2
block|,
operator|(
name|byte
operator|)
literal|0xBF
block|,
literal|0x0A
block|,
literal|'L'
block|,
literal|'u'
block|,
operator|(
name|byte
operator|)
literal|0xC2
block|,
operator|(
name|byte
operator|)
literal|0xBF
block|,
literal|'c'
block|,
literal|'e'
block|,
operator|(
name|byte
operator|)
literal|0xC2
block|,
operator|(
name|byte
operator|)
literal|0xBF
block|,
literal|'n'
block|,
literal|'e'
block|,
comment|// 3-byte UTF-8 (U+2620 "SKULL AND CROSSBONES")
literal|0x03
block|,
operator|(
name|byte
operator|)
literal|0xE2
block|,
operator|(
name|byte
operator|)
literal|0x98
block|,
operator|(
name|byte
operator|)
literal|0xA0
block|,
literal|0x0C
block|,
literal|'L'
block|,
literal|'u'
block|,
operator|(
name|byte
operator|)
literal|0xE2
block|,
operator|(
name|byte
operator|)
literal|0x98
block|,
operator|(
name|byte
operator|)
literal|0xA0
block|,
literal|'c'
block|,
literal|'e'
block|,
operator|(
name|byte
operator|)
literal|0xE2
block|,
operator|(
name|byte
operator|)
literal|0x98
block|,
operator|(
name|byte
operator|)
literal|0xA0
block|,
literal|'n'
block|,
literal|'e'
block|,
comment|// surrogate pairs
comment|// (U+1D11E "MUSICAL SYMBOL G CLEF")
comment|// (U+1D160 "MUSICAL SYMBOL EIGHTH NOTE")
literal|0x04
block|,
operator|(
name|byte
operator|)
literal|0xF0
block|,
operator|(
name|byte
operator|)
literal|0x9D
block|,
operator|(
name|byte
operator|)
literal|0x84
block|,
operator|(
name|byte
operator|)
literal|0x9E
block|,
literal|0x08
block|,
operator|(
name|byte
operator|)
literal|0xF0
block|,
operator|(
name|byte
operator|)
literal|0x9D
block|,
operator|(
name|byte
operator|)
literal|0x84
block|,
operator|(
name|byte
operator|)
literal|0x9E
block|,
operator|(
name|byte
operator|)
literal|0xF0
block|,
operator|(
name|byte
operator|)
literal|0x9D
block|,
operator|(
name|byte
operator|)
literal|0x85
block|,
operator|(
name|byte
operator|)
literal|0xA0
block|,
literal|0x0E
block|,
literal|'L'
block|,
literal|'u'
block|,
operator|(
name|byte
operator|)
literal|0xF0
block|,
operator|(
name|byte
operator|)
literal|0x9D
block|,
operator|(
name|byte
operator|)
literal|0x84
block|,
operator|(
name|byte
operator|)
literal|0x9E
block|,
literal|'c'
block|,
literal|'e'
block|,
operator|(
name|byte
operator|)
literal|0xF0
block|,
operator|(
name|byte
operator|)
literal|0x9D
block|,
operator|(
name|byte
operator|)
literal|0x85
block|,
operator|(
name|byte
operator|)
literal|0xA0
block|,
literal|'n'
block|,
literal|'e'
block|,
comment|// null bytes
literal|0x01
block|,
literal|0x00
block|,
literal|0x08
block|,
literal|'L'
block|,
literal|'u'
block|,
literal|0x00
block|,
literal|'c'
block|,
literal|'e'
block|,
literal|0x00
block|,
literal|'n'
block|,
literal|'e'
block|,   }
decl_stmt|;
DECL|method|checkReads
specifier|private
name|void
name|checkReads
parameter_list|(
name|IndexInput
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|128
argument_list|,
name|is
operator|.
name|readVInt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|16383
argument_list|,
name|is
operator|.
name|readVInt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|16384
argument_list|,
name|is
operator|.
name|readVInt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|16385
argument_list|,
name|is
operator|.
name|readVInt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|is
operator|.
name|readVInt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|is
operator|.
name|readVLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|is
operator|.
name|readVLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Lucene"
argument_list|,
name|is
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\u00BF"
argument_list|,
name|is
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Lu\u00BFce\u00BFne"
argument_list|,
name|is
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\u2620"
argument_list|,
name|is
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Lu\u2620ce\u2620ne"
argument_list|,
name|is
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\uD834\uDD1E"
argument_list|,
name|is
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\uD834\uDD1E\uD834\uDD60"
argument_list|,
name|is
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Lu\uD834\uDD1Ece\uD834\uDD60ne"
argument_list|,
name|is
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\u0000"
argument_list|,
name|is
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Lu\u0000ce\u0000ne"
argument_list|,
name|is
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// this test only checks BufferedIndexInput because MockIndexInput extends BufferedIndexInput
DECL|method|testBufferedIndexInputRead
specifier|public
name|void
name|testBufferedIndexInputRead
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|IndexInput
name|is
init|=
operator|new
name|MockIndexInput
argument_list|(
name|READ_TEST_BYTES
argument_list|)
decl_stmt|;
name|checkReads
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// this test checks the raw IndexInput methods as it uses RAMIndexInput which extends IndexInput directly
DECL|method|testRawIndexInputRead
specifier|public
name|void
name|testRawIndexInputRead
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|RAMDirectory
name|dir
init|=
operator|new
name|RAMDirectory
argument_list|()
decl_stmt|;
specifier|final
name|IndexOutput
name|os
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"foo"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|)
argument_list|)
decl_stmt|;
name|os
operator|.
name|writeBytes
argument_list|(
name|READ_TEST_BYTES
argument_list|,
name|READ_TEST_BYTES
operator|.
name|length
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|IndexInput
name|is
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"foo"
argument_list|,
name|newIOContext
argument_list|(
name|random
argument_list|)
argument_list|)
decl_stmt|;
name|checkReads
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
