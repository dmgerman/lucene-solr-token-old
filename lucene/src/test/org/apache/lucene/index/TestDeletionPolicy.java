begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
operator|.
name|OpenMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|DefaultSimilarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_comment
comment|/*   Verify we can read the pre-2.1 file format, do searches   against it, and add documents to it. */
end_comment
begin_class
DECL|class|TestDeletionPolicy
specifier|public
class|class
name|TestDeletionPolicy
extends|extends
name|LuceneTestCase
block|{
DECL|method|verifyCommitOrder
specifier|private
name|void
name|verifyCommitOrder
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|IndexCommit
argument_list|>
name|commits
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|IndexCommit
name|firstCommit
init|=
name|commits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|long
name|last
init|=
name|SegmentInfos
operator|.
name|generationFromSegmentsFileName
argument_list|(
name|firstCommit
operator|.
name|getSegmentsFileName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|last
argument_list|,
name|firstCommit
operator|.
name|getGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|lastVersion
init|=
name|firstCommit
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|long
name|lastTimestamp
init|=
name|firstCommit
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|commits
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|IndexCommit
name|commit
init|=
name|commits
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|now
init|=
name|SegmentInfos
operator|.
name|generationFromSegmentsFileName
argument_list|(
name|commit
operator|.
name|getSegmentsFileName
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|nowVersion
init|=
name|commit
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|long
name|nowTimestamp
init|=
name|commit
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"SegmentInfos commits are out-of-order"
argument_list|,
name|now
operator|>
name|last
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"SegmentInfos versions are out-of-order"
argument_list|,
name|nowVersion
operator|>
name|lastVersion
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"SegmentInfos timestamps are out-of-order: now="
operator|+
name|nowTimestamp
operator|+
literal|" vs last="
operator|+
name|lastTimestamp
argument_list|,
name|nowTimestamp
operator|>=
name|lastTimestamp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|now
argument_list|,
name|commit
operator|.
name|getGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|last
operator|=
name|now
expr_stmt|;
name|lastVersion
operator|=
name|nowVersion
expr_stmt|;
name|lastTimestamp
operator|=
name|nowTimestamp
expr_stmt|;
block|}
block|}
DECL|class|KeepAllDeletionPolicy
class|class
name|KeepAllDeletionPolicy
implements|implements
name|IndexDeletionPolicy
block|{
DECL|field|numOnInit
name|int
name|numOnInit
decl_stmt|;
DECL|field|numOnCommit
name|int
name|numOnCommit
decl_stmt|;
DECL|field|dir
name|Directory
name|dir
decl_stmt|;
DECL|method|onInit
specifier|public
name|void
name|onInit
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|IndexCommit
argument_list|>
name|commits
parameter_list|)
throws|throws
name|IOException
block|{
name|verifyCommitOrder
argument_list|(
name|commits
argument_list|)
expr_stmt|;
name|numOnInit
operator|++
expr_stmt|;
block|}
DECL|method|onCommit
specifier|public
name|void
name|onCommit
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|IndexCommit
argument_list|>
name|commits
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexCommit
name|lastCommit
init|=
name|commits
operator|.
name|get
argument_list|(
name|commits
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|DirectoryReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"lastCommit.segmentCount()="
operator|+
name|lastCommit
operator|.
name|getSegmentCount
argument_list|()
operator|+
literal|" vs IndexReader.segmentCount="
operator|+
name|r
operator|.
name|getSequentialSubReaders
argument_list|()
operator|.
name|length
argument_list|,
name|r
operator|.
name|getSequentialSubReaders
argument_list|()
operator|.
name|length
argument_list|,
name|lastCommit
operator|.
name|getSegmentCount
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|verifyCommitOrder
argument_list|(
name|commits
argument_list|)
expr_stmt|;
name|numOnCommit
operator|++
expr_stmt|;
block|}
block|}
comment|/**    * This is useful for adding to a big index when you know    * readers are not using it.    */
DECL|class|KeepNoneOnInitDeletionPolicy
class|class
name|KeepNoneOnInitDeletionPolicy
implements|implements
name|IndexDeletionPolicy
block|{
DECL|field|numOnInit
name|int
name|numOnInit
decl_stmt|;
DECL|field|numOnCommit
name|int
name|numOnCommit
decl_stmt|;
DECL|method|onInit
specifier|public
name|void
name|onInit
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|IndexCommit
argument_list|>
name|commits
parameter_list|)
throws|throws
name|IOException
block|{
name|verifyCommitOrder
argument_list|(
name|commits
argument_list|)
expr_stmt|;
name|numOnInit
operator|++
expr_stmt|;
comment|// On init, delete all commit points:
for|for
control|(
specifier|final
name|IndexCommit
name|commit
range|:
name|commits
control|)
block|{
name|commit
operator|.
name|delete
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|commit
operator|.
name|isDeleted
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onCommit
specifier|public
name|void
name|onCommit
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|IndexCommit
argument_list|>
name|commits
parameter_list|)
throws|throws
name|IOException
block|{
name|verifyCommitOrder
argument_list|(
name|commits
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|commits
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Delete all but last one:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
operator|(
operator|(
name|IndexCommit
operator|)
name|commits
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|numOnCommit
operator|++
expr_stmt|;
block|}
block|}
DECL|class|KeepLastNDeletionPolicy
class|class
name|KeepLastNDeletionPolicy
implements|implements
name|IndexDeletionPolicy
block|{
DECL|field|numOnInit
name|int
name|numOnInit
decl_stmt|;
DECL|field|numOnCommit
name|int
name|numOnCommit
decl_stmt|;
DECL|field|numToKeep
name|int
name|numToKeep
decl_stmt|;
DECL|field|numDelete
name|int
name|numDelete
decl_stmt|;
DECL|field|seen
name|Set
argument_list|<
name|String
argument_list|>
name|seen
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|KeepLastNDeletionPolicy
specifier|public
name|KeepLastNDeletionPolicy
parameter_list|(
name|int
name|numToKeep
parameter_list|)
block|{
name|this
operator|.
name|numToKeep
operator|=
name|numToKeep
expr_stmt|;
block|}
DECL|method|onInit
specifier|public
name|void
name|onInit
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|IndexCommit
argument_list|>
name|commits
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: onInit"
argument_list|)
expr_stmt|;
block|}
name|verifyCommitOrder
argument_list|(
name|commits
argument_list|)
expr_stmt|;
name|numOnInit
operator|++
expr_stmt|;
comment|// do no deletions on init
name|doDeletes
argument_list|(
name|commits
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|onCommit
specifier|public
name|void
name|onCommit
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|IndexCommit
argument_list|>
name|commits
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: onCommit"
argument_list|)
expr_stmt|;
block|}
name|verifyCommitOrder
argument_list|(
name|commits
argument_list|)
expr_stmt|;
name|doDeletes
argument_list|(
name|commits
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|doDeletes
specifier|private
name|void
name|doDeletes
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|IndexCommit
argument_list|>
name|commits
parameter_list|,
name|boolean
name|isCommit
parameter_list|)
block|{
comment|// Assert that we really are only called for each new
comment|// commit:
if|if
condition|(
name|isCommit
condition|)
block|{
name|String
name|fileName
init|=
operator|(
operator|(
name|IndexCommit
operator|)
name|commits
operator|.
name|get
argument_list|(
name|commits
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|)
operator|.
name|getSegmentsFileName
argument_list|()
decl_stmt|;
if|if
condition|(
name|seen
operator|.
name|contains
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"onCommit was called twice on the same commit point: "
operator|+
name|fileName
argument_list|)
throw|;
block|}
name|seen
operator|.
name|add
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|numOnCommit
operator|++
expr_stmt|;
block|}
name|int
name|size
init|=
name|commits
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
operator|-
name|numToKeep
condition|;
name|i
operator|++
control|)
block|{
operator|(
operator|(
name|IndexCommit
operator|)
name|commits
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|delete
argument_list|()
expr_stmt|;
name|numDelete
operator|++
expr_stmt|;
block|}
block|}
block|}
comment|/*    * Delete a commit only when it has been obsoleted by N    * seconds.    */
DECL|class|ExpirationTimeDeletionPolicy
class|class
name|ExpirationTimeDeletionPolicy
implements|implements
name|IndexDeletionPolicy
block|{
DECL|field|dir
name|Directory
name|dir
decl_stmt|;
DECL|field|expirationTimeSeconds
name|double
name|expirationTimeSeconds
decl_stmt|;
DECL|field|numDelete
name|int
name|numDelete
decl_stmt|;
DECL|method|ExpirationTimeDeletionPolicy
specifier|public
name|ExpirationTimeDeletionPolicy
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|double
name|seconds
parameter_list|)
block|{
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|this
operator|.
name|expirationTimeSeconds
operator|=
name|seconds
expr_stmt|;
block|}
DECL|method|onInit
specifier|public
name|void
name|onInit
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|IndexCommit
argument_list|>
name|commits
parameter_list|)
throws|throws
name|IOException
block|{
name|verifyCommitOrder
argument_list|(
name|commits
argument_list|)
expr_stmt|;
name|onCommit
argument_list|(
name|commits
argument_list|)
expr_stmt|;
block|}
DECL|method|onCommit
specifier|public
name|void
name|onCommit
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|IndexCommit
argument_list|>
name|commits
parameter_list|)
throws|throws
name|IOException
block|{
name|verifyCommitOrder
argument_list|(
name|commits
argument_list|)
expr_stmt|;
name|IndexCommit
name|lastCommit
init|=
name|commits
operator|.
name|get
argument_list|(
name|commits
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// Any commit older than expireTime should be deleted:
name|double
name|expireTime
init|=
name|dir
operator|.
name|fileModified
argument_list|(
name|lastCommit
operator|.
name|getSegmentsFileName
argument_list|()
argument_list|)
operator|/
literal|1000.0
operator|-
name|expirationTimeSeconds
decl_stmt|;
for|for
control|(
specifier|final
name|IndexCommit
name|commit
range|:
name|commits
control|)
block|{
name|double
name|modTime
init|=
name|dir
operator|.
name|fileModified
argument_list|(
name|commit
operator|.
name|getSegmentsFileName
argument_list|()
argument_list|)
operator|/
literal|1000.0
decl_stmt|;
if|if
condition|(
name|commit
operator|!=
name|lastCommit
operator|&&
name|modTime
operator|<
name|expireTime
condition|)
block|{
name|commit
operator|.
name|delete
argument_list|()
expr_stmt|;
name|numDelete
operator|+=
literal|1
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*    * Test "by time expiration" deletion policy:    */
DECL|method|testExpirationTimeDeletionPolicy
specifier|public
name|void
name|testExpirationTimeDeletionPolicy
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|double
name|SECONDS
init|=
literal|2.0
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|ExpirationTimeDeletionPolicy
name|policy
init|=
operator|new
name|ExpirationTimeDeletionPolicy
argument_list|(
name|dir
argument_list|,
name|SECONDS
argument_list|)
decl_stmt|;
name|IndexWriterConfig
name|conf
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setIndexDeletionPolicy
argument_list|(
name|policy
argument_list|)
decl_stmt|;
name|MergePolicy
name|mp
init|=
name|conf
operator|.
name|getMergePolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|mp
operator|instanceof
name|LogMergePolicy
condition|)
block|{
operator|(
operator|(
name|LogMergePolicy
operator|)
name|mp
operator|)
operator|.
name|setUseCompoundFile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|int
name|ITER
init|=
literal|9
decl_stmt|;
name|long
name|lastDeleteTime
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ITER
condition|;
name|i
operator|++
control|)
block|{
comment|// Record last time when writer performed deletes of
comment|// past commits
name|lastDeleteTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|conf
operator|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|APPEND
argument_list|)
operator|.
name|setIndexDeletionPolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|mp
operator|=
name|conf
operator|.
name|getMergePolicy
argument_list|()
expr_stmt|;
if|if
condition|(
name|mp
operator|instanceof
name|LogMergePolicy
condition|)
block|{
operator|(
operator|(
name|LogMergePolicy
operator|)
name|mp
operator|)
operator|.
name|setUseCompoundFile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|17
condition|;
name|j
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|ITER
operator|-
literal|1
condition|)
block|{
comment|// Make sure to sleep long enough so that some commit
comment|// points will be deleted:
name|Thread
operator|.
name|sleep
argument_list|(
call|(
name|int
call|)
argument_list|(
literal|1000.0
operator|*
operator|(
name|SECONDS
operator|/
literal|5.0
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// First, make sure the policy in fact deleted something:
name|assertTrue
argument_list|(
literal|"no commits were deleted"
argument_list|,
name|policy
operator|.
name|numDelete
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Then simplistic check: just verify that the
comment|// segments_N's that still exist are in fact within SECONDS
comment|// seconds of the last one's mod time, and, that I can
comment|// open a reader on each:
name|long
name|gen
init|=
name|SegmentInfos
operator|.
name|getCurrentSegmentGeneration
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|String
name|fileName
init|=
name|IndexFileNames
operator|.
name|fileNameFromGeneration
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS
argument_list|,
literal|""
argument_list|,
name|gen
argument_list|)
decl_stmt|;
name|dir
operator|.
name|deleteFile
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS_GEN
argument_list|)
expr_stmt|;
name|boolean
name|oneSecondResolution
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|gen
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|fileName
operator|=
name|IndexFileNames
operator|.
name|fileNameFromGeneration
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS
argument_list|,
literal|""
argument_list|,
name|gen
argument_list|)
expr_stmt|;
comment|// if we are on a filesystem that seems to have only
comment|// 1 second resolution, allow +1 second in commit
comment|// age tolerance:
name|long
name|modTime
init|=
name|dir
operator|.
name|fileModified
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|oneSecondResolution
operator|&=
operator|(
name|modTime
operator|%
literal|1000
operator|)
operator|==
literal|0
expr_stmt|;
specifier|final
name|long
name|leeway
init|=
call|(
name|long
call|)
argument_list|(
operator|(
name|SECONDS
operator|+
operator|(
name|oneSecondResolution
condition|?
literal|1.0
else|:
literal|0.0
operator|)
operator|)
operator|*
literal|1000
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"commit point was older than "
operator|+
name|SECONDS
operator|+
literal|" seconds ("
operator|+
operator|(
name|lastDeleteTime
operator|-
name|modTime
operator|)
operator|+
literal|" msec) but did not get deleted "
argument_list|,
name|lastDeleteTime
operator|-
name|modTime
operator|<=
name|leeway
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// OK
break|break;
block|}
name|dir
operator|.
name|deleteFile
argument_list|(
name|IndexFileNames
operator|.
name|fileNameFromGeneration
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS
argument_list|,
literal|""
argument_list|,
name|gen
argument_list|)
argument_list|)
expr_stmt|;
name|gen
operator|--
expr_stmt|;
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/*    * Test a silly deletion policy that keeps all commits around.    */
DECL|method|testKeepAllDeletionPolicy
specifier|public
name|void
name|testKeepAllDeletionPolicy
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|pass
init|=
literal|0
init|;
name|pass
operator|<
literal|2
condition|;
name|pass
operator|++
control|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: cycle pass="
operator|+
name|pass
argument_list|)
expr_stmt|;
block|}
name|boolean
name|useCompoundFile
init|=
operator|(
name|pass
operator|%
literal|2
operator|)
operator|!=
literal|0
decl_stmt|;
comment|// Never deletes a commit
name|KeepAllDeletionPolicy
name|policy
init|=
operator|new
name|KeepAllDeletionPolicy
argument_list|()
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|policy
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|IndexWriterConfig
name|conf
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setIndexDeletionPolicy
argument_list|(
name|policy
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|10
argument_list|)
operator|.
name|setMergeScheduler
argument_list|(
operator|new
name|SerialMergeScheduler
argument_list|()
argument_list|)
decl_stmt|;
name|MergePolicy
name|mp
init|=
name|conf
operator|.
name|getMergePolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|mp
operator|instanceof
name|LogMergePolicy
condition|)
block|{
operator|(
operator|(
name|LogMergePolicy
operator|)
name|mp
operator|)
operator|.
name|setUseCompoundFile
argument_list|(
name|useCompoundFile
argument_list|)
expr_stmt|;
block|}
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|107
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|boolean
name|needsMerging
decl_stmt|;
block|{
name|DirectoryReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|needsMerging
operator|=
name|r
operator|.
name|getSequentialSubReaders
argument_list|()
operator|.
name|length
operator|!=
literal|1
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|needsMerging
condition|)
block|{
name|conf
operator|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|APPEND
argument_list|)
operator|.
name|setIndexDeletionPolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|mp
operator|=
name|conf
operator|.
name|getMergePolicy
argument_list|()
expr_stmt|;
if|if
condition|(
name|mp
operator|instanceof
name|LogMergePolicy
condition|)
block|{
operator|(
operator|(
name|LogMergePolicy
operator|)
name|mp
operator|)
operator|.
name|setUseCompoundFile
argument_list|(
name|useCompoundFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TEST: open writer for forceMerge"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|needsMerging
condition|?
literal|1
else|:
literal|0
argument_list|,
name|policy
operator|.
name|numOnInit
argument_list|)
expr_stmt|;
comment|// If we are not auto committing then there should
comment|// be exactly 2 commits (one per close above):
name|assertEquals
argument_list|(
literal|1
operator|+
operator|(
name|needsMerging
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|,
name|policy
operator|.
name|numOnCommit
argument_list|)
expr_stmt|;
comment|// Test listCommits
name|Collection
argument_list|<
name|IndexCommit
argument_list|>
name|commits
init|=
name|DirectoryReader
operator|.
name|listCommits
argument_list|(
name|dir
argument_list|)
decl_stmt|;
comment|// 2 from closing writer
name|assertEquals
argument_list|(
literal|1
operator|+
operator|(
name|needsMerging
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|,
name|commits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure we can open a reader on each commit:
for|for
control|(
specifier|final
name|IndexCommit
name|commit
range|:
name|commits
control|)
block|{
name|IndexReader
name|r
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|commit
argument_list|)
decl_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Simplistic check: just verify all segments_N's still
comment|// exist, and, I can open a reader on each:
name|dir
operator|.
name|deleteFile
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS_GEN
argument_list|)
expr_stmt|;
name|long
name|gen
init|=
name|SegmentInfos
operator|.
name|getCurrentSegmentGeneration
argument_list|(
name|dir
argument_list|)
decl_stmt|;
while|while
condition|(
name|gen
operator|>
literal|0
condition|)
block|{
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|deleteFile
argument_list|(
name|IndexFileNames
operator|.
name|fileNameFromGeneration
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS
argument_list|,
literal|""
argument_list|,
name|gen
argument_list|)
argument_list|)
expr_stmt|;
name|gen
operator|--
expr_stmt|;
if|if
condition|(
name|gen
operator|>
literal|0
condition|)
block|{
comment|// Now that we've removed a commit point, which
comment|// should have orphan'd at least one index file.
comment|// Open& close a writer and assert that it
comment|// actually removed something:
name|int
name|preCount
init|=
name|dir
operator|.
name|listAll
argument_list|()
operator|.
name|length
decl_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|APPEND
argument_list|)
operator|.
name|setIndexDeletionPolicy
argument_list|(
name|policy
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|int
name|postCount
init|=
name|dir
operator|.
name|listAll
argument_list|()
operator|.
name|length
decl_stmt|;
name|assertTrue
argument_list|(
name|postCount
operator|<
name|preCount
argument_list|)
expr_stmt|;
block|}
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* Uses KeepAllDeletionPolicy to keep all commits around,    * then, opens a new IndexWriter on a previous commit    * point. */
DECL|method|testOpenPriorSnapshot
specifier|public
name|void
name|testOpenPriorSnapshot
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Never deletes a commit
name|KeepAllDeletionPolicy
name|policy
init|=
operator|new
name|KeepAllDeletionPolicy
argument_list|()
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|policy
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setIndexDeletionPolicy
argument_list|(
name|policy
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
literal|1
operator|+
name|i
operator|)
operator|%
literal|2
operator|==
literal|0
condition|)
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|IndexCommit
argument_list|>
name|commits
init|=
name|DirectoryReader
operator|.
name|listCommits
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|commits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|IndexCommit
name|lastCommit
init|=
literal|null
decl_stmt|;
for|for
control|(
specifier|final
name|IndexCommit
name|commit
range|:
name|commits
control|)
block|{
if|if
condition|(
name|lastCommit
operator|==
literal|null
operator|||
name|commit
operator|.
name|getGeneration
argument_list|()
operator|>
name|lastCommit
operator|.
name|getGeneration
argument_list|()
condition|)
name|lastCommit
operator|=
name|commit
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|lastCommit
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// Now add 1 doc and merge
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setIndexDeletionPolicy
argument_list|(
name|policy
argument_list|)
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|writer
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|DirectoryReader
operator|.
name|listCommits
argument_list|(
name|dir
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now open writer on the commit just before merge:
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setIndexDeletionPolicy
argument_list|(
name|policy
argument_list|)
operator|.
name|setIndexCommit
argument_list|(
name|lastCommit
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|writer
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
comment|// Should undo our rollback:
name|writer
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|DirectoryReader
name|r
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
comment|// Still merged, still 11 docs
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|getSequentialSubReaders
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|r
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setIndexDeletionPolicy
argument_list|(
name|policy
argument_list|)
operator|.
name|setIndexCommit
argument_list|(
name|lastCommit
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|writer
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
comment|// Commits the rollback:
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now 8 because we made another commit
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|DirectoryReader
operator|.
name|listCommits
argument_list|(
name|dir
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// Not fully merged because we rolled it back, and now only
comment|// 10 docs
name|assertTrue
argument_list|(
name|r
operator|.
name|getSequentialSubReaders
argument_list|()
operator|.
name|length
operator|>
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|r
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Re-merge
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setIndexDeletionPolicy
argument_list|(
name|policy
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|getSequentialSubReaders
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|r
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now open writer on the commit just before merging,
comment|// but this time keeping only the last commit:
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setIndexCommit
argument_list|(
name|lastCommit
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|writer
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reader still sees fully merged index, because writer
comment|// opened on the prior commit has not yet committed:
name|r
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|getSequentialSubReaders
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|r
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now reader sees not-fully-merged index:
name|r
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|getSequentialSubReaders
argument_list|()
operator|.
name|length
operator|>
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|r
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/* Test keeping NO commit points.  This is a viable and    * useful case eg where you want to build a big index and    * you know there are no readers.    */
DECL|method|testKeepNoneOnInitDeletionPolicy
specifier|public
name|void
name|testKeepNoneOnInitDeletionPolicy
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|pass
init|=
literal|0
init|;
name|pass
operator|<
literal|2
condition|;
name|pass
operator|++
control|)
block|{
name|boolean
name|useCompoundFile
init|=
operator|(
name|pass
operator|%
literal|2
operator|)
operator|!=
literal|0
decl_stmt|;
name|KeepNoneOnInitDeletionPolicy
name|policy
init|=
operator|new
name|KeepNoneOnInitDeletionPolicy
argument_list|()
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|conf
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|CREATE
argument_list|)
operator|.
name|setIndexDeletionPolicy
argument_list|(
name|policy
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|MergePolicy
name|mp
init|=
name|conf
operator|.
name|getMergePolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|mp
operator|instanceof
name|LogMergePolicy
condition|)
block|{
operator|(
operator|(
name|LogMergePolicy
operator|)
name|mp
operator|)
operator|.
name|setUseCompoundFile
argument_list|(
name|useCompoundFile
argument_list|)
expr_stmt|;
block|}
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|107
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|conf
operator|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|APPEND
argument_list|)
operator|.
name|setIndexDeletionPolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|mp
operator|=
name|conf
operator|.
name|getMergePolicy
argument_list|()
expr_stmt|;
if|if
condition|(
name|mp
operator|instanceof
name|LogMergePolicy
condition|)
block|{
operator|(
operator|(
name|LogMergePolicy
operator|)
name|mp
operator|)
operator|.
name|setUseCompoundFile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policy
operator|.
name|numOnInit
argument_list|)
expr_stmt|;
comment|// If we are not auto committing then there should
comment|// be exactly 2 commits (one per close above):
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|policy
operator|.
name|numOnCommit
argument_list|)
expr_stmt|;
comment|// Simplistic check: just verify the index is in fact
comment|// readable:
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*    * Test a deletion policy that keeps last N commits.    */
DECL|method|testKeepLastNDeletionPolicy
specifier|public
name|void
name|testKeepLastNDeletionPolicy
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|N
init|=
literal|5
decl_stmt|;
for|for
control|(
name|int
name|pass
init|=
literal|0
init|;
name|pass
operator|<
literal|2
condition|;
name|pass
operator|++
control|)
block|{
name|boolean
name|useCompoundFile
init|=
operator|(
name|pass
operator|%
literal|2
operator|)
operator|!=
literal|0
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|KeepLastNDeletionPolicy
name|policy
init|=
operator|new
name|KeepLastNDeletionPolicy
argument_list|(
name|N
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|N
operator|+
literal|1
condition|;
name|j
operator|++
control|)
block|{
name|IndexWriterConfig
name|conf
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|CREATE
argument_list|)
operator|.
name|setIndexDeletionPolicy
argument_list|(
name|policy
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|MergePolicy
name|mp
init|=
name|conf
operator|.
name|getMergePolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|mp
operator|instanceof
name|LogMergePolicy
condition|)
block|{
operator|(
operator|(
name|LogMergePolicy
operator|)
name|mp
operator|)
operator|.
name|setUseCompoundFile
argument_list|(
name|useCompoundFile
argument_list|)
expr_stmt|;
block|}
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|17
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|policy
operator|.
name|numDelete
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|N
argument_list|,
name|policy
operator|.
name|numOnInit
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|N
operator|+
literal|1
argument_list|,
name|policy
operator|.
name|numOnCommit
argument_list|)
expr_stmt|;
comment|// Simplistic check: just verify only the past N segments_N's still
comment|// exist, and, I can open a reader on each:
name|dir
operator|.
name|deleteFile
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS_GEN
argument_list|)
expr_stmt|;
name|long
name|gen
init|=
name|SegmentInfos
operator|.
name|getCurrentSegmentGeneration
argument_list|(
name|dir
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|N
condition|)
block|{
name|fail
argument_list|(
literal|"should have failed on commits prior to last "
operator|+
name|N
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|i
operator|!=
name|N
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|i
operator|<
name|N
condition|)
block|{
name|dir
operator|.
name|deleteFile
argument_list|(
name|IndexFileNames
operator|.
name|fileNameFromGeneration
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS
argument_list|,
literal|""
argument_list|,
name|gen
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|gen
operator|--
expr_stmt|;
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*    * Test a deletion policy that keeps last N commits    * around, through creates.    */
DECL|method|testKeepLastNDeletionPolicyWithCreates
specifier|public
name|void
name|testKeepLastNDeletionPolicyWithCreates
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|N
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|pass
init|=
literal|0
init|;
name|pass
operator|<
literal|2
condition|;
name|pass
operator|++
control|)
block|{
name|boolean
name|useCompoundFile
init|=
operator|(
name|pass
operator|%
literal|2
operator|)
operator|!=
literal|0
decl_stmt|;
name|KeepLastNDeletionPolicy
name|policy
init|=
operator|new
name|KeepLastNDeletionPolicy
argument_list|(
name|N
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriterConfig
name|conf
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|CREATE
argument_list|)
operator|.
name|setIndexDeletionPolicy
argument_list|(
name|policy
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|MergePolicy
name|mp
init|=
name|conf
operator|.
name|getMergePolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|mp
operator|instanceof
name|LogMergePolicy
condition|)
block|{
operator|(
operator|(
name|LogMergePolicy
operator|)
name|mp
operator|)
operator|.
name|setUseCompoundFile
argument_list|(
name|useCompoundFile
argument_list|)
expr_stmt|;
block|}
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Term
name|searchTerm
init|=
operator|new
name|Term
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|TermQuery
argument_list|(
name|searchTerm
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|conf
operator|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|APPEND
argument_list|)
operator|.
name|setIndexDeletionPolicy
argument_list|(
name|policy
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|mp
operator|=
name|conf
operator|.
name|getMergePolicy
argument_list|()
expr_stmt|;
if|if
condition|(
name|mp
operator|instanceof
name|LogMergePolicy
condition|)
block|{
operator|(
operator|(
name|LogMergePolicy
operator|)
name|mp
operator|)
operator|.
name|setUseCompoundFile
argument_list|(
name|useCompoundFile
argument_list|)
expr_stmt|;
block|}
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|17
condition|;
name|j
operator|++
control|)
block|{
name|addDocWithID
argument_list|(
name|writer
argument_list|,
name|i
operator|*
operator|(
name|N
operator|+
literal|1
operator|)
operator|+
name|j
argument_list|)
expr_stmt|;
block|}
comment|// this is a commit
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|IndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setIndexDeletionPolicy
argument_list|(
name|policy
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|COMPOUND_FILES
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|writer
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
operator|(
name|i
operator|*
operator|(
name|N
operator|+
literal|1
operator|)
operator|+
literal|3
operator|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// this is a commit
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|16
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|CREATE
argument_list|)
operator|.
name|setIndexDeletionPolicy
argument_list|(
name|policy
argument_list|)
argument_list|)
expr_stmt|;
comment|// This will not commit: there are no changes
comment|// pending because we opened for "create":
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
operator|*
operator|(
name|N
operator|+
literal|1
operator|)
argument_list|,
name|policy
operator|.
name|numOnInit
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
operator|(
name|N
operator|+
literal|1
operator|)
operator|+
literal|1
argument_list|,
name|policy
operator|.
name|numOnCommit
argument_list|)
expr_stmt|;
name|IndexReader
name|rwReader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|rwReader
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Simplistic check: just verify only the past N segments_N's still
comment|// exist, and, I can open a reader on each:
name|long
name|gen
init|=
name|SegmentInfos
operator|.
name|getCurrentSegmentGeneration
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|dir
operator|.
name|deleteFile
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS_GEN
argument_list|)
expr_stmt|;
name|int
name|expectedCount
init|=
literal|0
decl_stmt|;
name|rwReader
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
comment|// Work backwards in commits on what the expected
comment|// count should be.
name|searcher
operator|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCount
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedCount
operator|==
literal|0
condition|)
block|{
name|expectedCount
operator|=
literal|16
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expectedCount
operator|==
literal|16
condition|)
block|{
name|expectedCount
operator|=
literal|17
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expectedCount
operator|==
literal|17
condition|)
block|{
name|expectedCount
operator|=
literal|0
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|N
condition|)
block|{
name|fail
argument_list|(
literal|"should have failed on commits before last "
operator|+
name|N
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|i
operator|!=
name|N
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|i
operator|<
name|N
condition|)
block|{
name|dir
operator|.
name|deleteFile
argument_list|(
name|IndexFileNames
operator|.
name|fileNameFromGeneration
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS
argument_list|,
literal|""
argument_list|,
name|gen
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|gen
operator|--
expr_stmt|;
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addDocWithID
specifier|private
name|void
name|addDocWithID
parameter_list|(
name|IndexWriter
name|writer
parameter_list|,
name|int
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|,
name|TextField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|id
argument_list|,
name|StringField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|addDoc
specifier|private
name|void
name|addDoc
parameter_list|(
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"content"
argument_list|,
literal|"aaa"
argument_list|,
name|TextField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
