begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|BinaryField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_class
DECL|class|TestConsistentFieldNumbers
specifier|public
class|class
name|TestConsistentFieldNumbers
extends|extends
name|LuceneTestCase
block|{
annotation|@
name|Test
DECL|method|testSameFieldNumbersAcrossSegments
specifier|public
name|void
name|testSameFieldNumbersAcrossSegments
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|COMPOUND_FILES
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|d1
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d1
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f1"
argument_list|,
literal|"first field"
argument_list|,
name|StringField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|d1
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f2"
argument_list|,
literal|"second field"
argument_list|,
name|StringField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d1
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|COMPOUND_FILES
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|Document
name|d2
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|customType2
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType2
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|d2
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"f2"
argument_list|,
literal|"second field"
argument_list|)
argument_list|)
expr_stmt|;
name|d2
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f1"
argument_list|,
literal|"first field"
argument_list|,
name|customType2
argument_list|)
argument_list|)
expr_stmt|;
name|d2
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"f3"
argument_list|,
literal|"third field"
argument_list|)
argument_list|)
expr_stmt|;
name|d2
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"f4"
argument_list|,
literal|"fourth field"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d2
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentInfos
name|sis
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|sis
operator|.
name|read
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|sis
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FieldInfos
name|fis1
init|=
name|sis
operator|.
name|info
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldInfos
argument_list|()
decl_stmt|;
name|FieldInfos
name|fis2
init|=
name|sis
operator|.
name|info
argument_list|(
literal|1
argument_list|)
operator|.
name|getFieldInfos
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"f1"
argument_list|,
name|fis1
operator|.
name|fieldInfo
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f2"
argument_list|,
name|fis1
operator|.
name|fieldInfo
argument_list|(
literal|1
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f1"
argument_list|,
name|fis2
operator|.
name|fieldInfo
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f2"
argument_list|,
name|fis2
operator|.
name|fieldInfo
argument_list|(
literal|1
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f3"
argument_list|,
name|fis2
operator|.
name|fieldInfo
argument_list|(
literal|2
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f4"
argument_list|,
name|fis2
operator|.
name|fieldInfo
argument_list|(
literal|3
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|sis
operator|=
operator|new
name|SegmentInfos
argument_list|()
expr_stmt|;
name|sis
operator|.
name|read
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sis
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FieldInfos
name|fis3
init|=
name|sis
operator|.
name|info
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldInfos
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"f1"
argument_list|,
name|fis3
operator|.
name|fieldInfo
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f2"
argument_list|,
name|fis3
operator|.
name|fieldInfo
argument_list|(
literal|1
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f3"
argument_list|,
name|fis3
operator|.
name|fieldInfo
argument_list|(
literal|2
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f4"
argument_list|,
name|fis3
operator|.
name|fieldInfo
argument_list|(
literal|3
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAddIndexes
specifier|public
name|void
name|testAddIndexes
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir1
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|Directory
name|dir2
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir1
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|COMPOUND_FILES
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|d1
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d1
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f1"
argument_list|,
literal|"first field"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|d1
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f2"
argument_list|,
literal|"second field"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir2
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|COMPOUND_FILES
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|d2
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|customType2
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType2
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|d2
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f2"
argument_list|,
literal|"second field"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|d2
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f1"
argument_list|,
literal|"first field"
argument_list|,
name|customType2
argument_list|)
argument_list|)
expr_stmt|;
name|d2
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f3"
argument_list|,
literal|"third field"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|d2
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f4"
argument_list|,
literal|"fourth field"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d2
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir1
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|COMPOUND_FILES
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addIndexes
argument_list|(
name|dir2
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentInfos
name|sis
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|sis
operator|.
name|read
argument_list|(
name|dir1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|sis
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FieldInfos
name|fis1
init|=
name|sis
operator|.
name|info
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldInfos
argument_list|()
decl_stmt|;
name|FieldInfos
name|fis2
init|=
name|sis
operator|.
name|info
argument_list|(
literal|1
argument_list|)
operator|.
name|getFieldInfos
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"f1"
argument_list|,
name|fis1
operator|.
name|fieldInfo
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f2"
argument_list|,
name|fis1
operator|.
name|fieldInfo
argument_list|(
literal|1
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
comment|// make sure the ordering of the "external" segment is preserved
name|assertEquals
argument_list|(
literal|"f2"
argument_list|,
name|fis2
operator|.
name|fieldInfo
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f1"
argument_list|,
name|fis2
operator|.
name|fieldInfo
argument_list|(
literal|1
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f3"
argument_list|,
name|fis2
operator|.
name|fieldInfo
argument_list|(
literal|2
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f4"
argument_list|,
name|fis2
operator|.
name|fieldInfo
argument_list|(
literal|3
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir1
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|sis
operator|=
operator|new
name|SegmentInfos
argument_list|()
expr_stmt|;
name|sis
operator|.
name|read
argument_list|(
name|dir1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sis
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FieldInfos
name|fis3
init|=
name|sis
operator|.
name|info
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldInfos
argument_list|()
decl_stmt|;
comment|// after merging the ordering should be identical to the first segment
name|assertEquals
argument_list|(
literal|"f1"
argument_list|,
name|fis3
operator|.
name|fieldInfo
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f2"
argument_list|,
name|fis3
operator|.
name|fieldInfo
argument_list|(
literal|1
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f3"
argument_list|,
name|fis3
operator|.
name|fieldInfo
argument_list|(
literal|2
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f4"
argument_list|,
name|fis3
operator|.
name|fieldInfo
argument_list|(
literal|3
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|dir1
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testFieldNumberGaps
specifier|public
name|void
name|testFieldNumberGaps
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|numIters
init|=
name|atLeast
argument_list|(
literal|13
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIters
condition|;
name|i
operator|++
control|)
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
block|{
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|NO_COMPOUND_FILES
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f1"
argument_list|,
literal|"d1 first field"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f2"
argument_list|,
literal|"d1 second field"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentInfos
name|sis
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|sis
operator|.
name|read
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sis
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FieldInfos
name|fis1
init|=
name|sis
operator|.
name|info
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldInfos
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"f1"
argument_list|,
name|fis1
operator|.
name|fieldInfo
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f2"
argument_list|,
name|fis1
operator|.
name|fieldInfo
argument_list|(
literal|1
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dir
operator|.
name|fileExists
argument_list|(
literal|"1.fnx"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
name|NoMergePolicy
operator|.
name|NO_COMPOUND_FILES
else|:
name|NoMergePolicy
operator|.
name|COMPOUND_FILES
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f1"
argument_list|,
literal|"d2 first field"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|BinaryField
argument_list|(
literal|"f3"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentInfos
name|sis
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|sis
operator|.
name|read
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|sis
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FieldInfos
name|fis1
init|=
name|sis
operator|.
name|info
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldInfos
argument_list|()
decl_stmt|;
name|FieldInfos
name|fis2
init|=
name|sis
operator|.
name|info
argument_list|(
literal|1
argument_list|)
operator|.
name|getFieldInfos
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"f1"
argument_list|,
name|fis1
operator|.
name|fieldInfo
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f2"
argument_list|,
name|fis1
operator|.
name|fieldInfo
argument_list|(
literal|1
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f1"
argument_list|,
name|fis2
operator|.
name|fieldInfo
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|fis2
operator|.
name|fieldInfo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f3"
argument_list|,
name|fis2
operator|.
name|fieldInfo
argument_list|(
literal|2
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dir
operator|.
name|fileExists
argument_list|(
literal|"1.fnx"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dir
operator|.
name|fileExists
argument_list|(
literal|"2.fnx"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
name|NoMergePolicy
operator|.
name|NO_COMPOUND_FILES
else|:
name|NoMergePolicy
operator|.
name|COMPOUND_FILES
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f1"
argument_list|,
literal|"d3 first field"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"f2"
argument_list|,
literal|"d3 second field"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
operator|new
name|BinaryField
argument_list|(
literal|"f3"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentInfos
name|sis
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|sis
operator|.
name|read
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|sis
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FieldInfos
name|fis1
init|=
name|sis
operator|.
name|info
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldInfos
argument_list|()
decl_stmt|;
name|FieldInfos
name|fis2
init|=
name|sis
operator|.
name|info
argument_list|(
literal|1
argument_list|)
operator|.
name|getFieldInfos
argument_list|()
decl_stmt|;
name|FieldInfos
name|fis3
init|=
name|sis
operator|.
name|info
argument_list|(
literal|2
argument_list|)
operator|.
name|getFieldInfos
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"f1"
argument_list|,
name|fis1
operator|.
name|fieldInfo
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f2"
argument_list|,
name|fis1
operator|.
name|fieldInfo
argument_list|(
literal|1
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f1"
argument_list|,
name|fis2
operator|.
name|fieldInfo
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|fis2
operator|.
name|fieldInfo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f3"
argument_list|,
name|fis2
operator|.
name|fieldInfo
argument_list|(
literal|2
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f1"
argument_list|,
name|fis3
operator|.
name|fieldInfo
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f2"
argument_list|,
name|fis3
operator|.
name|fieldInfo
argument_list|(
literal|1
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f3"
argument_list|,
name|fis3
operator|.
name|fieldInfo
argument_list|(
literal|2
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dir
operator|.
name|fileExists
argument_list|(
literal|"1.fnx"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dir
operator|.
name|fileExists
argument_list|(
literal|"2.fnx"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dir
operator|.
name|fileExists
argument_list|(
literal|"3.fnx"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
name|NoMergePolicy
operator|.
name|NO_COMPOUND_FILES
else|:
name|NoMergePolicy
operator|.
name|COMPOUND_FILES
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"f1"
argument_list|,
literal|"d1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// nuke the first segment entirely so that the segment with gaps is
comment|// loaded first!
name|writer
operator|.
name|expungeDeletes
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
operator|new
name|LogByteSizeMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|" field numbers got mixed up"
argument_list|,
name|writer
operator|.
name|anyNonBulkMerges
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentInfos
name|sis
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|sis
operator|.
name|read
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sis
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FieldInfos
name|fis1
init|=
name|sis
operator|.
name|info
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldInfos
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"f1"
argument_list|,
name|fis1
operator|.
name|fieldInfo
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f2"
argument_list|,
name|fis1
operator|.
name|fieldInfo
argument_list|(
literal|1
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f3"
argument_list|,
name|fis1
operator|.
name|fieldInfo
argument_list|(
literal|2
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dir
operator|.
name|fileExists
argument_list|(
literal|"1.fnx"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dir
operator|.
name|fileExists
argument_list|(
literal|"2.fnx"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dir
operator|.
name|fileExists
argument_list|(
literal|"3.fnx"
argument_list|)
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testManyFields
specifier|public
name|void
name|testManyFields
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|NUM_DOCS
init|=
name|atLeast
argument_list|(
literal|200
argument_list|)
decl_stmt|;
specifier|final
name|int
name|MAX_FIELDS
init|=
name|atLeast
argument_list|(
literal|50
argument_list|)
decl_stmt|;
name|int
index|[]
index|[]
name|docs
init|=
operator|new
name|int
index|[
name|NUM_DOCS
index|]
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|docs
index|[
name|i
index|]
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|docs
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|random
operator|.
name|nextInt
argument_list|(
name|MAX_FIELDS
argument_list|)
expr_stmt|;
block|}
block|}
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_DOCS
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|docs
index|[
name|i
index|]
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|d
operator|.
name|add
argument_list|(
name|getField
argument_list|(
name|docs
index|[
name|i
index|]
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentInfos
name|sis
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|sis
operator|.
name|read
argument_list|(
name|dir
argument_list|)
expr_stmt|;
for|for
control|(
name|SegmentInfo
name|si
range|:
name|sis
control|)
block|{
name|FieldInfos
name|fis
init|=
name|si
operator|.
name|getFieldInfos
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldInfo
name|fi
range|:
name|fis
control|)
block|{
name|Field
name|expected
init|=
name|getField
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|fi
operator|.
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|fieldType
argument_list|()
operator|.
name|indexed
argument_list|()
argument_list|,
name|fi
operator|.
name|isIndexed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|fieldType
argument_list|()
operator|.
name|storeTermVectors
argument_list|()
argument_list|,
name|fi
operator|.
name|storeTermVector
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|fieldType
argument_list|()
operator|.
name|storeTermVectorPositions
argument_list|()
argument_list|,
name|fi
operator|.
name|storePositionWithTermVector
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|fieldType
argument_list|()
operator|.
name|storeTermVectorOffsets
argument_list|()
argument_list|,
name|fi
operator|.
name|storeOffsetWithTermVector
argument_list|)
expr_stmt|;
block|}
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getField
specifier|private
name|Field
name|getField
parameter_list|(
name|int
name|number
parameter_list|)
block|{
name|int
name|mode
init|=
name|number
operator|%
literal|16
decl_stmt|;
name|String
name|fieldName
init|=
literal|""
operator|+
name|number
decl_stmt|;
name|FieldType
name|customType
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|FieldType
name|customType2
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType2
operator|.
name|setTokenized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|FieldType
name|customType3
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_UNSTORED
argument_list|)
decl_stmt|;
name|customType3
operator|.
name|setTokenized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|FieldType
name|customType4
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_UNSTORED
argument_list|)
decl_stmt|;
name|customType4
operator|.
name|setTokenized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|customType4
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType4
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FieldType
name|customType5
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_UNSTORED
argument_list|)
decl_stmt|;
name|customType5
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType5
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FieldType
name|customType6
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType6
operator|.
name|setTokenized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|customType6
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType6
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FieldType
name|customType7
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_UNSTORED
argument_list|)
decl_stmt|;
name|customType7
operator|.
name|setTokenized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|customType7
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType7
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FieldType
name|customType8
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType8
operator|.
name|setTokenized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|customType8
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType8
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FieldType
name|customType9
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_UNSTORED
argument_list|)
decl_stmt|;
name|customType9
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType9
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FieldType
name|customType10
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType10
operator|.
name|setTokenized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|customType10
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType10
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FieldType
name|customType11
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_UNSTORED
argument_list|)
decl_stmt|;
name|customType11
operator|.
name|setTokenized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|customType11
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType11
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FieldType
name|customType12
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType12
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType12
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType12
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FieldType
name|customType13
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_UNSTORED
argument_list|)
decl_stmt|;
name|customType13
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType13
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType13
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FieldType
name|customType14
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType14
operator|.
name|setTokenized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|customType14
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType14
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType14
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FieldType
name|customType15
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_UNSTORED
argument_list|)
decl_stmt|;
name|customType15
operator|.
name|setTokenized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|customType15
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType15
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType15
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
literal|0
case|:
return|return
operator|new
name|Field
argument_list|(
name|fieldName
argument_list|,
literal|"some text"
argument_list|,
name|customType
argument_list|)
return|;
case|case
literal|1
case|:
return|return
operator|new
name|TextField
argument_list|(
name|fieldName
argument_list|,
literal|"some text"
argument_list|)
return|;
case|case
literal|2
case|:
return|return
operator|new
name|Field
argument_list|(
name|fieldName
argument_list|,
literal|"some text"
argument_list|,
name|customType2
argument_list|)
return|;
case|case
literal|3
case|:
return|return
operator|new
name|Field
argument_list|(
name|fieldName
argument_list|,
literal|"some text"
argument_list|,
name|customType3
argument_list|)
return|;
case|case
literal|4
case|:
return|return
operator|new
name|Field
argument_list|(
name|fieldName
argument_list|,
literal|"some text"
argument_list|,
name|customType4
argument_list|)
return|;
case|case
literal|5
case|:
return|return
operator|new
name|Field
argument_list|(
name|fieldName
argument_list|,
literal|"some text"
argument_list|,
name|customType5
argument_list|)
return|;
case|case
literal|6
case|:
return|return
operator|new
name|Field
argument_list|(
name|fieldName
argument_list|,
literal|"some text"
argument_list|,
name|customType6
argument_list|)
return|;
case|case
literal|7
case|:
return|return
operator|new
name|Field
argument_list|(
name|fieldName
argument_list|,
literal|"some text"
argument_list|,
name|customType7
argument_list|)
return|;
case|case
literal|8
case|:
return|return
operator|new
name|Field
argument_list|(
name|fieldName
argument_list|,
literal|"some text"
argument_list|,
name|customType8
argument_list|)
return|;
case|case
literal|9
case|:
return|return
operator|new
name|Field
argument_list|(
name|fieldName
argument_list|,
literal|"some text"
argument_list|,
name|customType9
argument_list|)
return|;
case|case
literal|10
case|:
return|return
operator|new
name|Field
argument_list|(
name|fieldName
argument_list|,
literal|"some text"
argument_list|,
name|customType10
argument_list|)
return|;
case|case
literal|11
case|:
return|return
operator|new
name|Field
argument_list|(
name|fieldName
argument_list|,
literal|"some text"
argument_list|,
name|customType11
argument_list|)
return|;
case|case
literal|12
case|:
return|return
operator|new
name|Field
argument_list|(
name|fieldName
argument_list|,
literal|"some text"
argument_list|,
name|customType12
argument_list|)
return|;
case|case
literal|13
case|:
return|return
operator|new
name|Field
argument_list|(
name|fieldName
argument_list|,
literal|"some text"
argument_list|,
name|customType13
argument_list|)
return|;
case|case
literal|14
case|:
return|return
operator|new
name|Field
argument_list|(
name|fieldName
argument_list|,
literal|"some text"
argument_list|,
name|customType14
argument_list|)
return|;
case|case
literal|15
case|:
return|return
operator|new
name|Field
argument_list|(
name|fieldName
argument_list|,
literal|"some text"
argument_list|,
name|customType15
argument_list|)
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
block|}
end_class
end_unit
