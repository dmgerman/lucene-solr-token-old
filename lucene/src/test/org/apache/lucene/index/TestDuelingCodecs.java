begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|PerDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|IndexDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|IndexDocValues
operator|.
name|Source
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|ValueType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LineFileDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|AutomatonTestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|CompiledAutomaton
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|RegExp
import|;
end_import
begin_comment
comment|/**  * Compares one codec against another  */
end_comment
begin_class
DECL|class|TestDuelingCodecs
specifier|public
class|class
name|TestDuelingCodecs
extends|extends
name|LuceneTestCase
block|{
DECL|field|leftDir
specifier|private
name|Directory
name|leftDir
decl_stmt|;
DECL|field|leftReader
specifier|private
name|IndexReader
name|leftReader
decl_stmt|;
DECL|field|leftCodec
specifier|private
name|Codec
name|leftCodec
decl_stmt|;
DECL|field|rightDir
specifier|private
name|Directory
name|rightDir
decl_stmt|;
DECL|field|rightReader
specifier|private
name|IndexReader
name|rightReader
decl_stmt|;
DECL|field|rightCodec
specifier|private
name|Codec
name|rightCodec
decl_stmt|;
DECL|field|info
specifier|private
name|String
name|info
decl_stmt|;
comment|// for debugging
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|// for now its SimpleText vs Lucene40(random postings format)
comment|// as this gives the best overall coverage. when we have more
comment|// codecs we should probably pick 2 from Codec.availableCodecs()
comment|// TODO: it would also be nice to support preflex, but it doesn't
comment|// support a lot of the current feature set (docvalues, statistics)
comment|// so this would make assertEquals complicated.
name|leftCodec
operator|=
name|Codec
operator|.
name|forName
argument_list|(
literal|"SimpleText"
argument_list|)
expr_stmt|;
name|rightCodec
operator|=
operator|new
name|RandomCodec
argument_list|(
name|random
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|leftDir
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
name|rightDir
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
name|long
name|seed
init|=
name|random
operator|.
name|nextLong
argument_list|()
decl_stmt|;
comment|// must use same seed because of random payloads, etc
name|Analyzer
name|leftAnalyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
argument_list|)
decl_stmt|;
name|Analyzer
name|rightAnalyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
argument_list|)
decl_stmt|;
comment|// but these can be different
comment|// TODO: this turns this into a really big test of Multi*, is that what we want?
name|IndexWriterConfig
name|leftConfig
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|leftAnalyzer
argument_list|)
decl_stmt|;
name|leftConfig
operator|.
name|setCodec
argument_list|(
name|leftCodec
argument_list|)
expr_stmt|;
comment|// preserve docids
name|leftConfig
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
expr_stmt|;
name|IndexWriterConfig
name|rightConfig
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
name|rightAnalyzer
argument_list|)
decl_stmt|;
name|rightConfig
operator|.
name|setCodec
argument_list|(
name|rightCodec
argument_list|)
expr_stmt|;
comment|// preserve docids
name|rightConfig
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
expr_stmt|;
comment|// must use same seed because of random docvalues fields, etc
name|RandomIndexWriter
name|leftWriter
init|=
operator|new
name|RandomIndexWriter
argument_list|(
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
argument_list|,
name|leftDir
argument_list|,
name|leftConfig
argument_list|)
decl_stmt|;
name|RandomIndexWriter
name|rightWriter
init|=
operator|new
name|RandomIndexWriter
argument_list|(
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
argument_list|,
name|rightDir
argument_list|,
name|rightConfig
argument_list|)
decl_stmt|;
name|int
name|numdocs
init|=
name|atLeast
argument_list|(
literal|500
argument_list|)
decl_stmt|;
name|createRandomIndex
argument_list|(
name|numdocs
argument_list|,
name|leftWriter
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|createRandomIndex
argument_list|(
name|numdocs
argument_list|,
name|rightWriter
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|leftReader
operator|=
name|leftWriter
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|leftWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|rightReader
operator|=
name|rightWriter
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|rightWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|info
operator|=
literal|"left: "
operator|+
name|leftCodec
operator|.
name|toString
argument_list|()
operator|+
literal|" / right: "
operator|+
name|rightCodec
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|leftReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|rightReader
operator|.
name|close
argument_list|()
expr_stmt|;
name|leftDir
operator|.
name|close
argument_list|()
expr_stmt|;
name|rightDir
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/**    * populates a writer with random stuff. this must be fully reproducable with the seed!    */
DECL|method|createRandomIndex
specifier|public
specifier|static
name|void
name|createRandomIndex
parameter_list|(
name|int
name|numdocs
parameter_list|,
name|RandomIndexWriter
name|writer
parameter_list|,
name|long
name|seed
parameter_list|)
throws|throws
name|IOException
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
comment|// primary source for our data is from linefiledocs, its realistic.
name|LineFileDocs
name|lineFileDocs
init|=
operator|new
name|LineFileDocs
argument_list|(
name|random
argument_list|)
decl_stmt|;
comment|// TODO: we should add other fields that use things like docs&freqs but omit positions,
comment|// because linefiledocs doesn't cover all the possibilities.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numdocs
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|addDocument
argument_list|(
name|lineFileDocs
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * checks the two indexes are equivalent    */
DECL|method|testEquals
specifier|public
name|void
name|testEquals
parameter_list|()
throws|throws
name|Exception
block|{
name|assertReaderStatistics
argument_list|(
name|leftReader
argument_list|,
name|rightReader
argument_list|)
expr_stmt|;
name|assertFields
argument_list|(
name|MultiFields
operator|.
name|getFields
argument_list|(
name|leftReader
argument_list|)
argument_list|,
name|MultiFields
operator|.
name|getFields
argument_list|(
name|rightReader
argument_list|)
argument_list|)
expr_stmt|;
name|assertNorms
argument_list|(
name|leftReader
argument_list|,
name|rightReader
argument_list|)
expr_stmt|;
name|assertStoredFields
argument_list|(
name|leftReader
argument_list|,
name|rightReader
argument_list|)
expr_stmt|;
name|assertTermVectors
argument_list|(
name|leftReader
argument_list|,
name|rightReader
argument_list|)
expr_stmt|;
name|assertDocValues
argument_list|(
name|leftReader
argument_list|,
name|rightReader
argument_list|)
expr_stmt|;
name|assertDeletedDocs
argument_list|(
name|leftReader
argument_list|,
name|rightReader
argument_list|)
expr_stmt|;
block|}
comment|/**     * checks that reader-level statistics are the same     */
DECL|method|assertReaderStatistics
specifier|public
name|void
name|assertReaderStatistics
parameter_list|(
name|IndexReader
name|leftReader
parameter_list|,
name|IndexReader
name|rightReader
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Somewhat redundant: we never delete docs
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftReader
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|rightReader
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftReader
operator|.
name|numDocs
argument_list|()
argument_list|,
name|rightReader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftReader
operator|.
name|numDeletedDocs
argument_list|()
argument_list|,
name|rightReader
operator|.
name|numDeletedDocs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftReader
operator|.
name|hasDeletions
argument_list|()
argument_list|,
name|rightReader
operator|.
name|hasDeletions
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|leftReader
operator|.
name|getUniqueTermCount
argument_list|()
operator|!=
operator|-
literal|1
operator|&&
name|rightReader
operator|.
name|getUniqueTermCount
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftReader
operator|.
name|getUniqueTermCount
argument_list|()
argument_list|,
name|rightReader
operator|.
name|getUniqueTermCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**     * Fields api equivalency     */
DECL|method|assertFields
specifier|public
name|void
name|assertFields
parameter_list|(
name|Fields
name|leftFields
parameter_list|,
name|Fields
name|rightFields
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Fields could be null if there are no postings,
comment|// but then it must be null for both
if|if
condition|(
name|leftFields
operator|==
literal|null
operator|||
name|rightFields
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|info
argument_list|,
name|leftFields
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|info
argument_list|,
name|rightFields
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertFieldStatistics
argument_list|(
name|leftFields
argument_list|,
name|rightFields
argument_list|)
expr_stmt|;
name|FieldsEnum
name|leftEnum
init|=
name|leftFields
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|FieldsEnum
name|rightEnum
init|=
name|rightFields
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|field
decl_stmt|;
while|while
condition|(
operator|(
name|field
operator|=
name|leftEnum
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|info
argument_list|,
name|field
argument_list|,
name|rightEnum
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTerms
argument_list|(
name|leftEnum
operator|.
name|terms
argument_list|()
argument_list|,
name|rightEnum
operator|.
name|terms
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|rightEnum
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**     * checks that top-level statistics on Fields are the same     */
DECL|method|assertFieldStatistics
specifier|public
name|void
name|assertFieldStatistics
parameter_list|(
name|Fields
name|leftFields
parameter_list|,
name|Fields
name|rightFields
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|leftFields
operator|.
name|getUniqueFieldCount
argument_list|()
operator|!=
operator|-
literal|1
operator|&&
name|rightFields
operator|.
name|getUniqueFieldCount
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftFields
operator|.
name|getUniqueFieldCount
argument_list|()
argument_list|,
name|rightFields
operator|.
name|getUniqueFieldCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|leftFields
operator|.
name|getUniqueTermCount
argument_list|()
operator|!=
operator|-
literal|1
operator|&&
name|rightFields
operator|.
name|getUniqueTermCount
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftFields
operator|.
name|getUniqueTermCount
argument_list|()
argument_list|,
name|rightFields
operator|.
name|getUniqueTermCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**     * Terms api equivalency     */
DECL|method|assertTerms
specifier|public
name|void
name|assertTerms
parameter_list|(
name|Terms
name|leftTerms
parameter_list|,
name|Terms
name|rightTerms
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|leftTerms
operator|==
literal|null
operator|||
name|rightTerms
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|info
argument_list|,
name|leftTerms
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|info
argument_list|,
name|rightTerms
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTermsStatistics
argument_list|(
name|leftTerms
argument_list|,
name|rightTerms
argument_list|)
expr_stmt|;
name|TermsEnum
name|leftTermsEnum
init|=
name|leftTerms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|TermsEnum
name|rightTermsEnum
init|=
name|rightTerms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertTermsEnum
argument_list|(
name|leftTermsEnum
argument_list|,
name|rightTermsEnum
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// TODO: test seeking too
name|int
name|numIntersections
init|=
name|atLeast
argument_list|(
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIntersections
condition|;
name|i
operator|++
control|)
block|{
name|String
name|re
init|=
name|AutomatonTestUtil
operator|.
name|randomRegexp
argument_list|(
name|random
argument_list|)
decl_stmt|;
name|CompiledAutomaton
name|automaton
init|=
operator|new
name|CompiledAutomaton
argument_list|(
operator|new
name|RegExp
argument_list|(
name|re
argument_list|,
name|RegExp
operator|.
name|NONE
argument_list|)
operator|.
name|toAutomaton
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|automaton
operator|.
name|type
operator|==
name|CompiledAutomaton
operator|.
name|AUTOMATON_TYPE
operator|.
name|NORMAL
condition|)
block|{
comment|// TODO: test start term too
name|TermsEnum
name|leftIntersection
init|=
name|leftTerms
operator|.
name|intersect
argument_list|(
name|automaton
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|TermsEnum
name|rightIntersection
init|=
name|rightTerms
operator|.
name|intersect
argument_list|(
name|automaton
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTermsEnum
argument_list|(
name|leftIntersection
argument_list|,
name|rightIntersection
argument_list|,
name|rarely
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**     * checks collection-level statistics on Terms     */
DECL|method|assertTermsStatistics
specifier|public
name|void
name|assertTermsStatistics
parameter_list|(
name|Terms
name|leftTerms
parameter_list|,
name|Terms
name|rightTerms
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|leftTerms
operator|.
name|getComparator
argument_list|()
operator|==
name|rightTerms
operator|.
name|getComparator
argument_list|()
assert|;
if|if
condition|(
name|leftTerms
operator|.
name|getDocCount
argument_list|()
operator|!=
operator|-
literal|1
operator|&&
name|rightTerms
operator|.
name|getDocCount
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftTerms
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|rightTerms
operator|.
name|getDocCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|leftTerms
operator|.
name|getSumDocFreq
argument_list|()
operator|!=
operator|-
literal|1
operator|&&
name|rightTerms
operator|.
name|getSumDocFreq
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftTerms
operator|.
name|getSumDocFreq
argument_list|()
argument_list|,
name|rightTerms
operator|.
name|getSumDocFreq
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|leftTerms
operator|.
name|getSumTotalTermFreq
argument_list|()
operator|!=
operator|-
literal|1
operator|&&
name|rightTerms
operator|.
name|getSumTotalTermFreq
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftTerms
operator|.
name|getSumTotalTermFreq
argument_list|()
argument_list|,
name|rightTerms
operator|.
name|getSumTotalTermFreq
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|leftTerms
operator|.
name|getUniqueTermCount
argument_list|()
operator|!=
operator|-
literal|1
operator|&&
name|rightTerms
operator|.
name|getUniqueTermCount
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftTerms
operator|.
name|getUniqueTermCount
argument_list|()
argument_list|,
name|rightTerms
operator|.
name|getUniqueTermCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**     * checks the terms enum sequentially    * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums    */
DECL|method|assertTermsEnum
specifier|public
name|void
name|assertTermsEnum
parameter_list|(
name|TermsEnum
name|leftTermsEnum
parameter_list|,
name|TermsEnum
name|rightTermsEnum
parameter_list|,
name|boolean
name|deep
parameter_list|)
throws|throws
name|Exception
block|{
name|BytesRef
name|term
decl_stmt|;
name|Bits
name|randomBits
init|=
operator|new
name|RandomBits
argument_list|(
name|leftReader
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|random
operator|.
name|nextDouble
argument_list|()
argument_list|,
name|random
argument_list|)
decl_stmt|;
name|DocsAndPositionsEnum
name|leftPositions
init|=
literal|null
decl_stmt|;
name|DocsAndPositionsEnum
name|rightPositions
init|=
literal|null
decl_stmt|;
name|DocsEnum
name|leftDocs
init|=
literal|null
decl_stmt|;
name|DocsEnum
name|rightDocs
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|term
operator|=
name|leftTermsEnum
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|info
argument_list|,
name|term
argument_list|,
name|rightTermsEnum
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTermStats
argument_list|(
name|leftTermsEnum
argument_list|,
name|rightTermsEnum
argument_list|)
expr_stmt|;
if|if
condition|(
name|deep
condition|)
block|{
name|assertDocsAndPositionsEnum
argument_list|(
name|leftPositions
operator|=
name|leftTermsEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
name|leftPositions
argument_list|)
argument_list|,
name|rightPositions
operator|=
name|rightTermsEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
name|rightPositions
argument_list|)
argument_list|)
expr_stmt|;
name|assertDocsAndPositionsEnum
argument_list|(
name|leftPositions
operator|=
name|leftTermsEnum
operator|.
name|docsAndPositions
argument_list|(
name|randomBits
argument_list|,
name|leftPositions
argument_list|)
argument_list|,
name|rightPositions
operator|=
name|rightTermsEnum
operator|.
name|docsAndPositions
argument_list|(
name|randomBits
argument_list|,
name|rightPositions
argument_list|)
argument_list|)
expr_stmt|;
name|assertPositionsSkipping
argument_list|(
name|leftTermsEnum
operator|.
name|docFreq
argument_list|()
argument_list|,
name|leftPositions
operator|=
name|leftTermsEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
name|leftPositions
argument_list|)
argument_list|,
name|rightPositions
operator|=
name|rightTermsEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
name|rightPositions
argument_list|)
argument_list|)
expr_stmt|;
name|assertPositionsSkipping
argument_list|(
name|leftTermsEnum
operator|.
name|docFreq
argument_list|()
argument_list|,
name|leftPositions
operator|=
name|leftTermsEnum
operator|.
name|docsAndPositions
argument_list|(
name|randomBits
argument_list|,
name|leftPositions
argument_list|)
argument_list|,
name|rightPositions
operator|=
name|rightTermsEnum
operator|.
name|docsAndPositions
argument_list|(
name|randomBits
argument_list|,
name|rightPositions
argument_list|)
argument_list|)
expr_stmt|;
comment|// with freqs:
name|assertDocsEnum
argument_list|(
name|leftDocs
operator|=
name|leftTermsEnum
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
name|leftDocs
argument_list|,
literal|true
argument_list|)
argument_list|,
name|rightDocs
operator|=
name|rightTermsEnum
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
name|rightDocs
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertDocsEnum
argument_list|(
name|leftDocs
operator|=
name|leftTermsEnum
operator|.
name|docs
argument_list|(
name|randomBits
argument_list|,
name|leftDocs
argument_list|,
literal|true
argument_list|)
argument_list|,
name|rightDocs
operator|=
name|rightTermsEnum
operator|.
name|docs
argument_list|(
name|randomBits
argument_list|,
name|rightDocs
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// w/o freqs:
name|assertDocsEnum
argument_list|(
name|leftDocs
operator|=
name|leftTermsEnum
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
name|leftDocs
argument_list|,
literal|false
argument_list|)
argument_list|,
name|rightDocs
operator|=
name|rightTermsEnum
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
name|rightDocs
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertDocsEnum
argument_list|(
name|leftDocs
operator|=
name|leftTermsEnum
operator|.
name|docs
argument_list|(
name|randomBits
argument_list|,
name|leftDocs
argument_list|,
literal|false
argument_list|)
argument_list|,
name|rightDocs
operator|=
name|rightTermsEnum
operator|.
name|docs
argument_list|(
name|randomBits
argument_list|,
name|rightDocs
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// with freqs:
name|assertDocsSkipping
argument_list|(
name|leftTermsEnum
operator|.
name|docFreq
argument_list|()
argument_list|,
name|leftDocs
operator|=
name|leftTermsEnum
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
name|leftDocs
argument_list|,
literal|true
argument_list|)
argument_list|,
name|rightDocs
operator|=
name|rightTermsEnum
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
name|rightDocs
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertDocsSkipping
argument_list|(
name|leftTermsEnum
operator|.
name|docFreq
argument_list|()
argument_list|,
name|leftDocs
operator|=
name|leftTermsEnum
operator|.
name|docs
argument_list|(
name|randomBits
argument_list|,
name|leftDocs
argument_list|,
literal|true
argument_list|)
argument_list|,
name|rightDocs
operator|=
name|rightTermsEnum
operator|.
name|docs
argument_list|(
name|randomBits
argument_list|,
name|rightDocs
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// w/o freqs:
name|assertDocsSkipping
argument_list|(
name|leftTermsEnum
operator|.
name|docFreq
argument_list|()
argument_list|,
name|leftDocs
operator|=
name|leftTermsEnum
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
name|leftDocs
argument_list|,
literal|false
argument_list|)
argument_list|,
name|rightDocs
operator|=
name|rightTermsEnum
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
name|rightDocs
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertDocsSkipping
argument_list|(
name|leftTermsEnum
operator|.
name|docFreq
argument_list|()
argument_list|,
name|leftDocs
operator|=
name|leftTermsEnum
operator|.
name|docs
argument_list|(
name|randomBits
argument_list|,
name|leftDocs
argument_list|,
literal|false
argument_list|)
argument_list|,
name|rightDocs
operator|=
name|rightTermsEnum
operator|.
name|docs
argument_list|(
name|randomBits
argument_list|,
name|rightDocs
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|assertNull
argument_list|(
name|info
argument_list|,
name|rightTermsEnum
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * checks term-level statistics    */
DECL|method|assertTermStats
specifier|public
name|void
name|assertTermStats
parameter_list|(
name|TermsEnum
name|leftTermsEnum
parameter_list|,
name|TermsEnum
name|rightTermsEnum
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftTermsEnum
operator|.
name|docFreq
argument_list|()
argument_list|,
name|rightTermsEnum
operator|.
name|docFreq
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|leftTermsEnum
operator|.
name|totalTermFreq
argument_list|()
operator|!=
operator|-
literal|1
operator|&&
name|rightTermsEnum
operator|.
name|totalTermFreq
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftTermsEnum
operator|.
name|totalTermFreq
argument_list|()
argument_list|,
name|rightTermsEnum
operator|.
name|totalTermFreq
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * checks docs + freqs + positions + payloads, sequentially    */
DECL|method|assertDocsAndPositionsEnum
specifier|public
name|void
name|assertDocsAndPositionsEnum
parameter_list|(
name|DocsAndPositionsEnum
name|leftDocs
parameter_list|,
name|DocsAndPositionsEnum
name|rightDocs
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|leftDocs
operator|==
literal|null
operator|||
name|rightDocs
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|leftDocs
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rightDocs
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTrue
argument_list|(
name|info
argument_list|,
name|leftDocs
operator|.
name|docID
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|leftDocs
operator|.
name|docID
argument_list|()
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|info
argument_list|,
name|rightDocs
operator|.
name|docID
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|rightDocs
operator|.
name|docID
argument_list|()
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
name|int
name|docid
decl_stmt|;
while|while
condition|(
operator|(
name|docid
operator|=
name|leftDocs
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|assertEquals
argument_list|(
name|info
argument_list|,
name|docid
argument_list|,
name|rightDocs
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|freq
init|=
name|leftDocs
operator|.
name|freq
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|info
argument_list|,
name|freq
argument_list|,
name|rightDocs
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|freq
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftDocs
operator|.
name|nextPosition
argument_list|()
argument_list|,
name|rightDocs
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftDocs
operator|.
name|hasPayload
argument_list|()
argument_list|,
name|rightDocs
operator|.
name|hasPayload
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|leftDocs
operator|.
name|hasPayload
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftDocs
operator|.
name|getPayload
argument_list|()
argument_list|,
name|rightDocs
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
name|info
argument_list|,
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|rightDocs
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * checks docs + freqs, sequentially    */
DECL|method|assertDocsEnum
specifier|public
name|void
name|assertDocsEnum
parameter_list|(
name|DocsEnum
name|leftDocs
parameter_list|,
name|DocsEnum
name|rightDocs
parameter_list|,
name|boolean
name|hasFreqs
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|leftDocs
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|rightDocs
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTrue
argument_list|(
name|info
argument_list|,
name|leftDocs
operator|.
name|docID
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|leftDocs
operator|.
name|docID
argument_list|()
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|info
argument_list|,
name|rightDocs
operator|.
name|docID
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|rightDocs
operator|.
name|docID
argument_list|()
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
name|int
name|docid
decl_stmt|;
while|while
condition|(
operator|(
name|docid
operator|=
name|leftDocs
operator|.
name|nextDoc
argument_list|()
operator|)
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|assertEquals
argument_list|(
name|info
argument_list|,
name|docid
argument_list|,
name|rightDocs
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasFreqs
condition|)
block|{
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftDocs
operator|.
name|freq
argument_list|()
argument_list|,
name|rightDocs
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|info
argument_list|,
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|rightDocs
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * checks advancing docs    */
DECL|method|assertDocsSkipping
specifier|public
name|void
name|assertDocsSkipping
parameter_list|(
name|int
name|docFreq
parameter_list|,
name|DocsEnum
name|leftDocs
parameter_list|,
name|DocsEnum
name|rightDocs
parameter_list|,
name|boolean
name|hasFreqs
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|leftDocs
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|rightDocs
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|docid
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|averageGap
init|=
name|leftReader
operator|.
name|maxDoc
argument_list|()
operator|/
operator|(
literal|1
operator|+
name|docFreq
operator|)
decl_stmt|;
name|int
name|skipInterval
init|=
literal|16
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// nextDoc()
name|docid
operator|=
name|leftDocs
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|info
argument_list|,
name|docid
argument_list|,
name|rightDocs
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// advance()
name|int
name|skip
init|=
name|docid
operator|+
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|skipInterval
operator|+
name|random
operator|.
name|nextGaussian
argument_list|()
operator|*
name|averageGap
argument_list|)
argument_list|)
decl_stmt|;
name|docid
operator|=
name|leftDocs
operator|.
name|advance
argument_list|(
name|skip
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
argument_list|,
name|docid
argument_list|,
name|rightDocs
operator|.
name|advance
argument_list|(
name|skip
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|docid
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|hasFreqs
condition|)
block|{
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftDocs
operator|.
name|freq
argument_list|()
argument_list|,
name|rightDocs
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * checks advancing docs + positions    */
DECL|method|assertPositionsSkipping
specifier|public
name|void
name|assertPositionsSkipping
parameter_list|(
name|int
name|docFreq
parameter_list|,
name|DocsAndPositionsEnum
name|leftDocs
parameter_list|,
name|DocsAndPositionsEnum
name|rightDocs
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|leftDocs
operator|==
literal|null
operator|||
name|rightDocs
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|leftDocs
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rightDocs
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|docid
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|averageGap
init|=
name|leftReader
operator|.
name|maxDoc
argument_list|()
operator|/
operator|(
literal|1
operator|+
name|docFreq
operator|)
decl_stmt|;
name|int
name|skipInterval
init|=
literal|16
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// nextDoc()
name|docid
operator|=
name|leftDocs
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|info
argument_list|,
name|docid
argument_list|,
name|rightDocs
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// advance()
name|int
name|skip
init|=
name|docid
operator|+
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|skipInterval
operator|+
name|random
operator|.
name|nextGaussian
argument_list|()
operator|*
name|averageGap
argument_list|)
argument_list|)
decl_stmt|;
name|docid
operator|=
name|leftDocs
operator|.
name|advance
argument_list|(
name|skip
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
argument_list|,
name|docid
argument_list|,
name|rightDocs
operator|.
name|advance
argument_list|(
name|skip
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|docid
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
return|return;
block|}
name|int
name|freq
init|=
name|leftDocs
operator|.
name|freq
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|info
argument_list|,
name|freq
argument_list|,
name|rightDocs
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|freq
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftDocs
operator|.
name|nextPosition
argument_list|()
argument_list|,
name|rightDocs
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftDocs
operator|.
name|hasPayload
argument_list|()
argument_list|,
name|rightDocs
operator|.
name|hasPayload
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|leftDocs
operator|.
name|hasPayload
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftDocs
operator|.
name|getPayload
argument_list|()
argument_list|,
name|rightDocs
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**     * checks that norms are the same across all fields     */
DECL|method|assertNorms
specifier|public
name|void
name|assertNorms
parameter_list|(
name|IndexReader
name|leftReader
parameter_list|,
name|IndexReader
name|rightReader
parameter_list|)
throws|throws
name|Exception
block|{
name|Fields
name|leftFields
init|=
name|MultiFields
operator|.
name|getFields
argument_list|(
name|leftReader
argument_list|)
decl_stmt|;
name|Fields
name|rightFields
init|=
name|MultiFields
operator|.
name|getFields
argument_list|(
name|rightReader
argument_list|)
decl_stmt|;
comment|// Fields could be null if there are no postings,
comment|// but then it must be null for both
if|if
condition|(
name|leftFields
operator|==
literal|null
operator|||
name|rightFields
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|info
argument_list|,
name|leftFields
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|info
argument_list|,
name|rightFields
argument_list|)
expr_stmt|;
return|return;
block|}
name|FieldsEnum
name|fieldsEnum
init|=
name|leftFields
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|field
decl_stmt|;
while|while
condition|(
operator|(
name|field
operator|=
name|fieldsEnum
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftReader
operator|.
name|hasNorms
argument_list|(
name|field
argument_list|)
argument_list|,
name|rightReader
operator|.
name|hasNorms
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|leftReader
operator|.
name|hasNorms
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|byte
name|leftNorms
index|[]
init|=
name|MultiNorms
operator|.
name|norms
argument_list|(
name|leftReader
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|byte
name|rightNorms
index|[]
init|=
name|MultiNorms
operator|.
name|norms
argument_list|(
name|rightReader
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|info
argument_list|,
name|leftNorms
argument_list|,
name|rightNorms
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**     * checks that stored fields of all documents are the same     */
DECL|method|assertStoredFields
specifier|public
name|void
name|assertStoredFields
parameter_list|(
name|IndexReader
name|leftReader
parameter_list|,
name|IndexReader
name|rightReader
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|leftReader
operator|.
name|maxDoc
argument_list|()
operator|==
name|rightReader
operator|.
name|maxDoc
argument_list|()
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|leftReader
operator|.
name|maxDoc
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|leftDoc
init|=
name|leftReader
operator|.
name|document
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Document
name|rightDoc
init|=
name|rightReader
operator|.
name|document
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// TODO: I think this is bogus because we don't document what the order should be
comment|// from these iterators, etc. I think the codec should be free to order this stuff
comment|// in whatever way it wants (e.g. maybe it packs related fields together or something)
name|Iterator
argument_list|<
name|IndexableField
argument_list|>
name|leftIterator
init|=
name|leftDoc
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|IndexableField
argument_list|>
name|rightIterator
init|=
name|rightDoc
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|leftIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|info
argument_list|,
name|rightIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertStoredField
argument_list|(
name|leftIterator
operator|.
name|next
argument_list|()
argument_list|,
name|rightIterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|info
argument_list|,
name|rightIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**     * checks that two stored fields are equivalent     */
DECL|method|assertStoredField
specifier|public
name|void
name|assertStoredField
parameter_list|(
name|IndexableField
name|leftField
parameter_list|,
name|IndexableField
name|rightField
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftField
operator|.
name|name
argument_list|()
argument_list|,
name|rightField
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftField
operator|.
name|binaryValue
argument_list|()
argument_list|,
name|rightField
operator|.
name|binaryValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftField
operator|.
name|stringValue
argument_list|()
argument_list|,
name|rightField
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftField
operator|.
name|numericValue
argument_list|()
argument_list|,
name|rightField
operator|.
name|numericValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftField
operator|.
name|numeric
argument_list|()
argument_list|,
name|rightField
operator|.
name|numeric
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftField
operator|.
name|numericDataType
argument_list|()
argument_list|,
name|rightField
operator|.
name|numericDataType
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: should we check the FT at all?
block|}
comment|/**     * checks that term vectors across all fields are equivalent     */
DECL|method|assertTermVectors
specifier|public
name|void
name|assertTermVectors
parameter_list|(
name|IndexReader
name|leftReader
parameter_list|,
name|IndexReader
name|rightReader
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|leftReader
operator|.
name|maxDoc
argument_list|()
operator|==
name|rightReader
operator|.
name|maxDoc
argument_list|()
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|leftReader
operator|.
name|maxDoc
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Fields
name|leftFields
init|=
name|leftReader
operator|.
name|getTermVectors
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Fields
name|rightFields
init|=
name|rightReader
operator|.
name|getTermVectors
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertFields
argument_list|(
name|leftFields
argument_list|,
name|rightFields
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * checks that docvalues across all fields are equivalent    */
DECL|method|assertDocValues
specifier|public
name|void
name|assertDocValues
parameter_list|(
name|IndexReader
name|leftReader
parameter_list|,
name|IndexReader
name|rightReader
parameter_list|)
throws|throws
name|Exception
block|{
name|PerDocValues
name|leftPerDoc
init|=
name|MultiPerDocValues
operator|.
name|getPerDocs
argument_list|(
name|leftReader
argument_list|)
decl_stmt|;
name|PerDocValues
name|rightPerDoc
init|=
name|MultiPerDocValues
operator|.
name|getPerDocs
argument_list|(
name|rightReader
argument_list|)
decl_stmt|;
name|Fields
name|leftFields
init|=
name|MultiFields
operator|.
name|getFields
argument_list|(
name|leftReader
argument_list|)
decl_stmt|;
name|Fields
name|rightFields
init|=
name|MultiFields
operator|.
name|getFields
argument_list|(
name|rightReader
argument_list|)
decl_stmt|;
comment|// Fields could be null if there are no postings,
comment|// but then it must be null for both
if|if
condition|(
name|leftFields
operator|==
literal|null
operator|||
name|rightFields
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|info
argument_list|,
name|leftFields
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|info
argument_list|,
name|rightFields
argument_list|)
expr_stmt|;
return|return;
block|}
name|FieldsEnum
name|fieldsEnum
init|=
name|leftFields
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|field
decl_stmt|;
while|while
condition|(
operator|(
name|field
operator|=
name|fieldsEnum
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|IndexDocValues
name|leftDocValues
init|=
name|leftPerDoc
operator|.
name|docValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|IndexDocValues
name|rightDocValues
init|=
name|rightPerDoc
operator|.
name|docValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftDocValues
operator|==
literal|null
operator|||
name|rightDocValues
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|info
argument_list|,
name|leftDocValues
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|info
argument_list|,
name|rightDocValues
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|assertDocValuesSource
argument_list|(
name|leftDocValues
operator|.
name|getDirectSource
argument_list|()
argument_list|,
name|rightDocValues
operator|.
name|getDirectSource
argument_list|()
argument_list|)
expr_stmt|;
name|assertDocValuesSource
argument_list|(
name|leftDocValues
operator|.
name|getSource
argument_list|()
argument_list|,
name|rightDocValues
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * checks source API    */
DECL|method|assertDocValuesSource
specifier|public
name|void
name|assertDocValuesSource
parameter_list|(
name|Source
name|left
parameter_list|,
name|Source
name|right
parameter_list|)
throws|throws
name|Exception
block|{
name|ValueType
name|leftType
init|=
name|left
operator|.
name|type
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftType
argument_list|,
name|right
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|leftType
condition|)
block|{
case|case
name|VAR_INTS
case|:
case|case
name|FIXED_INTS_8
case|:
case|case
name|FIXED_INTS_16
case|:
case|case
name|FIXED_INTS_32
case|:
case|case
name|FIXED_INTS_64
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|leftReader
operator|.
name|maxDoc
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|info
argument_list|,
name|left
operator|.
name|getInt
argument_list|(
name|i
argument_list|)
argument_list|,
name|right
operator|.
name|getInt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|FLOAT_32
case|:
case|case
name|FLOAT_64
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|leftReader
operator|.
name|maxDoc
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|info
argument_list|,
name|left
operator|.
name|getFloat
argument_list|(
name|i
argument_list|)
argument_list|,
name|right
operator|.
name|getFloat
argument_list|(
name|i
argument_list|)
argument_list|,
literal|0F
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BYTES_FIXED_STRAIGHT
case|:
case|case
name|BYTES_FIXED_DEREF
case|:
case|case
name|BYTES_VAR_STRAIGHT
case|:
case|case
name|BYTES_VAR_DEREF
case|:
name|BytesRef
name|b1
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|BytesRef
name|b2
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|leftReader
operator|.
name|maxDoc
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|left
operator|.
name|getBytes
argument_list|(
name|i
argument_list|,
name|b1
argument_list|)
expr_stmt|;
name|right
operator|.
name|getBytes
argument_list|(
name|i
argument_list|,
name|b2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info
argument_list|,
name|b1
argument_list|,
name|b2
argument_list|)
expr_stmt|;
block|}
break|break;
comment|// TODO: can we test these?
case|case
name|BYTES_VAR_SORTED
case|:
case|case
name|BYTES_FIXED_SORTED
case|:
block|}
block|}
comment|// TODO: this is kinda stupid, we don't delete documents in the test.
DECL|method|assertDeletedDocs
specifier|public
name|void
name|assertDeletedDocs
parameter_list|(
name|IndexReader
name|leftReader
parameter_list|,
name|IndexReader
name|rightReader
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|leftReader
operator|.
name|numDeletedDocs
argument_list|()
operator|==
name|rightReader
operator|.
name|numDeletedDocs
argument_list|()
assert|;
name|Bits
name|leftBits
init|=
name|MultiFields
operator|.
name|getLiveDocs
argument_list|(
name|leftReader
argument_list|)
decl_stmt|;
name|Bits
name|rightBits
init|=
name|MultiFields
operator|.
name|getLiveDocs
argument_list|(
name|rightReader
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftBits
operator|==
literal|null
operator|||
name|rightBits
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|info
argument_list|,
name|leftBits
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|info
argument_list|,
name|rightBits
argument_list|)
expr_stmt|;
return|return;
block|}
assert|assert
name|leftReader
operator|.
name|maxDoc
argument_list|()
operator|==
name|rightReader
operator|.
name|maxDoc
argument_list|()
assert|;
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftBits
operator|.
name|length
argument_list|()
argument_list|,
name|rightBits
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|leftReader
operator|.
name|maxDoc
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|info
argument_list|,
name|leftBits
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|rightBits
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RandomBits
specifier|private
specifier|static
class|class
name|RandomBits
implements|implements
name|Bits
block|{
DECL|field|bits
name|FixedBitSet
name|bits
decl_stmt|;
DECL|method|RandomBits
name|RandomBits
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|double
name|pctLive
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
name|bits
operator|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|random
operator|.
name|nextDouble
argument_list|()
operator|<=
name|pctLive
condition|)
block|{
name|bits
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|boolean
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|bits
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|length
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|bits
operator|.
name|length
argument_list|()
return|;
block|}
block|}
block|}
end_class
end_unit
