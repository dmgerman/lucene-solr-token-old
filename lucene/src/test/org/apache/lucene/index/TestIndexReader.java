begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene40
operator|.
name|Lucene40PostingsFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|BinaryField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
operator|.
name|FieldOption
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
operator|.
name|OpenMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldCache
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|LockObtainFailedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|NoSuchDirectoryException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import
begin_class
DECL|class|TestIndexReader
specifier|public
class|class
name|TestIndexReader
extends|extends
name|LuceneTestCase
block|{
DECL|method|testIsCurrent
specifier|public
name|void
name|testIsCurrent
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|d
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|d
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|addDocumentWithFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// set up reader:
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
comment|// modify index by adding another document:
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|d
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|APPEND
argument_list|)
argument_list|)
expr_stmt|;
name|addDocumentWithFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|reader
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
comment|// re-create index:
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|d
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|addDocumentWithFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|reader
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the IndexReader.getFieldNames implementation      * @throws Exception on error      */
DECL|method|testGetFieldNames
specifier|public
name|void
name|testGetFieldNames
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|d
init|=
name|newDirectory
argument_list|()
decl_stmt|;
comment|// set up writer
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|d
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|customType3
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|customType3
operator|.
name|setStored
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"keyword"
argument_list|,
literal|"test1"
argument_list|,
name|StringField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"text"
argument_list|,
literal|"test1"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"unindexed"
argument_list|,
literal|"test1"
argument_list|,
name|customType3
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"unstored"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// set up reader
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|reader
operator|.
name|getFieldNames
argument_list|(
name|IndexReader
operator|.
name|FieldOption
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"keyword"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"unindexed"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"unstored"
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// add more documents
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|d
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|APPEND
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// want to get some more segments here
name|int
name|mergeFactor
init|=
operator|(
operator|(
name|LogMergePolicy
operator|)
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergePolicy
argument_list|()
operator|)
operator|.
name|getMergeFactor
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
operator|*
name|mergeFactor
condition|;
name|i
operator|++
control|)
block|{
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"keyword"
argument_list|,
literal|"test1"
argument_list|,
name|StringField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"text"
argument_list|,
literal|"test1"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"unindexed"
argument_list|,
literal|"test1"
argument_list|,
name|customType3
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"unstored"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|// new fields are in some different segments (we hope)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
operator|*
name|mergeFactor
condition|;
name|i
operator|++
control|)
block|{
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"keyword2"
argument_list|,
literal|"test1"
argument_list|,
name|StringField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"text2"
argument_list|,
literal|"test1"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"unindexed2"
argument_list|,
literal|"test1"
argument_list|,
name|customType3
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"unstored2"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|// new termvector fields
name|FieldType
name|customType5
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType5
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FieldType
name|customType6
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType6
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType6
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FieldType
name|customType7
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType7
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType7
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FieldType
name|customType8
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType8
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType8
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType8
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
operator|*
name|mergeFactor
condition|;
name|i
operator|++
control|)
block|{
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tvnot"
argument_list|,
literal|"tvnot"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"termvector"
argument_list|,
literal|"termvector"
argument_list|,
name|customType5
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tvoffset"
argument_list|,
literal|"tvoffset"
argument_list|,
name|customType6
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tvposition"
argument_list|,
literal|"tvposition"
argument_list|,
name|customType7
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tvpositionoffset"
argument_list|,
literal|"tvpositionoffset"
argument_list|,
name|customType8
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// verify fields again
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|fieldNames
operator|=
name|reader
operator|.
name|getFieldNames
argument_list|(
name|IndexReader
operator|.
name|FieldOption
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|13
argument_list|,
name|fieldNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// the following fields
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"keyword"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"unindexed"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"unstored"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"keyword2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"text2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"unindexed2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"unstored2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"tvnot"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"termvector"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"tvposition"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"tvoffset"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"tvpositionoffset"
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify that only indexed fields were returned
name|fieldNames
operator|=
name|reader
operator|.
name|getFieldNames
argument_list|(
name|IndexReader
operator|.
name|FieldOption
operator|.
name|INDEXED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|fieldNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 6 original + the 5 termvector fields
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"keyword"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"unstored"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"keyword2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"text2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"unstored2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"tvnot"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"termvector"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"tvposition"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"tvoffset"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"tvpositionoffset"
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify that only unindexed fields were returned
name|fieldNames
operator|=
name|reader
operator|.
name|getFieldNames
argument_list|(
name|IndexReader
operator|.
name|FieldOption
operator|.
name|UNINDEXED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fieldNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// the following fields
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"unindexed"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"unindexed2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify index term vector fields
name|fieldNames
operator|=
name|reader
operator|.
name|getFieldNames
argument_list|(
name|IndexReader
operator|.
name|FieldOption
operator|.
name|TERMVECTOR
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fieldNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1 field has term vector only
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"termvector"
argument_list|)
argument_list|)
expr_stmt|;
name|fieldNames
operator|=
name|reader
operator|.
name|getFieldNames
argument_list|(
name|IndexReader
operator|.
name|FieldOption
operator|.
name|TERMVECTOR_WITH_POSITION
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fieldNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 4 fields are indexed with term vectors
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"tvposition"
argument_list|)
argument_list|)
expr_stmt|;
name|fieldNames
operator|=
name|reader
operator|.
name|getFieldNames
argument_list|(
name|IndexReader
operator|.
name|FieldOption
operator|.
name|TERMVECTOR_WITH_OFFSET
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fieldNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 4 fields are indexed with term vectors
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"tvoffset"
argument_list|)
argument_list|)
expr_stmt|;
name|fieldNames
operator|=
name|reader
operator|.
name|getFieldNames
argument_list|(
name|IndexReader
operator|.
name|FieldOption
operator|.
name|TERMVECTOR_WITH_POSITION_OFFSET
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fieldNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 4 fields are indexed with term vectors
name|assertTrue
argument_list|(
name|fieldNames
operator|.
name|contains
argument_list|(
literal|"tvpositionoffset"
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testTermVectors
specifier|public
name|void
name|testTermVectors
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|d
init|=
name|newDirectory
argument_list|()
decl_stmt|;
comment|// set up writer
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|d
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// want to get some more segments here
comment|// new termvector fields
name|int
name|mergeFactor
init|=
operator|(
operator|(
name|LogMergePolicy
operator|)
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergePolicy
argument_list|()
operator|)
operator|.
name|getMergeFactor
argument_list|()
decl_stmt|;
name|FieldType
name|customType5
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType5
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FieldType
name|customType6
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType6
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType6
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FieldType
name|customType7
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType7
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType7
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FieldType
name|customType8
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType8
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType8
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType8
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
operator|*
name|mergeFactor
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tvnot"
argument_list|,
literal|"one two two three three three"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"termvector"
argument_list|,
literal|"one two two three three three"
argument_list|,
name|customType5
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tvoffset"
argument_list|,
literal|"one two two three three three"
argument_list|,
name|customType6
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tvposition"
argument_list|,
literal|"one two two three three three"
argument_list|,
name|customType7
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"tvpositionoffset"
argument_list|,
literal|"one two two three three three"
argument_list|,
name|customType8
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|assertTermDocsCount
specifier|static
name|void
name|assertTermDocsCount
parameter_list|(
name|String
name|msg
parameter_list|,
name|IndexReader
name|reader
parameter_list|,
name|Term
name|term
parameter_list|,
name|int
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|DocsEnum
name|tdocs
init|=
name|_TestUtil
operator|.
name|docs
argument_list|(
name|random
argument_list|,
name|reader
argument_list|,
name|term
operator|.
name|field
argument_list|()
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|term
operator|.
name|text
argument_list|()
argument_list|)
argument_list|,
name|MultiFields
operator|.
name|getLiveDocs
argument_list|(
name|reader
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|tdocs
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|tdocs
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|msg
operator|+
literal|", count mismatch"
argument_list|,
name|expected
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
DECL|method|testBinaryFields
specifier|public
name|void
name|testBinaryFields
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bin
init|=
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|}
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|addDoc
argument_list|(
name|writer
argument_list|,
literal|"document number "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
name|addDocumentWithFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|addDocumentWithDifferentFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|addDocumentWithTermVectorFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|APPEND
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|BinaryField
argument_list|(
literal|"bin1"
argument_list|,
name|bin
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"junk"
argument_list|,
literal|"junk text"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc2
init|=
name|reader
operator|.
name|document
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|IndexableField
index|[]
name|fields
init|=
name|doc2
operator|.
name|getFields
argument_list|(
literal|"bin1"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fields
operator|.
name|length
argument_list|)
expr_stmt|;
name|IndexableField
name|b1
init|=
name|fields
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|b1
operator|.
name|binaryValue
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|BytesRef
name|bytesRef
init|=
name|b1
operator|.
name|binaryValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|bin
operator|.
name|length
argument_list|,
name|bytesRef
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bin
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|bin
index|[
name|i
index|]
argument_list|,
name|bytesRef
operator|.
name|bytes
index|[
name|i
operator|+
name|bytesRef
operator|.
name|offset
index|]
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// force merge
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|APPEND
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|doc2
operator|=
name|reader
operator|.
name|document
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fields
operator|=
name|doc2
operator|.
name|getFields
argument_list|(
literal|"bin1"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fields
operator|.
name|length
argument_list|)
expr_stmt|;
name|b1
operator|=
name|fields
index|[
literal|0
index|]
expr_stmt|;
name|assertTrue
argument_list|(
name|b1
operator|.
name|binaryValue
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|bytesRef
operator|=
name|b1
operator|.
name|binaryValue
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|bin
operator|.
name|length
argument_list|,
name|bytesRef
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bin
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|bin
index|[
name|i
index|]
argument_list|,
name|bytesRef
operator|.
name|bytes
index|[
name|i
operator|+
name|bytesRef
operator|.
name|offset
index|]
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/* ??? public void testOpenEmptyDirectory() throws IOException{       String dirName = "test.empty";       File fileDirName = new File(dirName);       if (!fileDirName.exists()) {         fileDirName.mkdir();       }       try {         IndexReader.open(fileDirName);         fail("opening IndexReader on empty directory failed to produce FileNotFoundException");       } catch (FileNotFoundException e) {         // GOOD       }       rmDir(fileDirName);     }*/
DECL|method|testFilesOpenClose
specifier|public
name|void
name|testFilesOpenClose
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Create initial data set
name|File
name|dirFile
init|=
name|_TestUtil
operator|.
name|getTempDir
argument_list|(
literal|"TestIndexReader.testFilesOpenClose"
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
name|newFSDirectory
argument_list|(
name|dirFile
argument_list|)
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|addDoc
argument_list|(
name|writer
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Try to erase the data - this ensures that the writer closed all files
name|_TestUtil
operator|.
name|rmDir
argument_list|(
name|dirFile
argument_list|)
expr_stmt|;
name|dir
operator|=
name|newFSDirectory
argument_list|(
name|dirFile
argument_list|)
expr_stmt|;
comment|// Now create the data set again, just as before
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
name|writer
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now open existing directory and test that reader closes all files
name|dir
operator|=
name|newFSDirectory
argument_list|(
name|dirFile
argument_list|)
expr_stmt|;
name|IndexReader
name|reader1
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|reader1
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// The following will fail if reader did not close
comment|// all files
name|_TestUtil
operator|.
name|rmDir
argument_list|(
name|dirFile
argument_list|)
expr_stmt|;
block|}
DECL|method|testLastModified
specifier|public
name|void
name|testLastModified
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|IndexReader
operator|.
name|indexExists
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|CREATE
argument_list|)
argument_list|)
decl_stmt|;
name|addDocumentWithFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|IndexWriter
operator|.
name|isLocked
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
comment|// writer open, so dir is locked
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|IndexReader
operator|.
name|indexExists
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|IndexWriter
operator|.
name|isLocked
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
comment|// reader only, no lock
name|long
name|version
init|=
name|IndexReader
operator|.
name|lastModified
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
name|long
name|version2
init|=
name|IndexReader
operator|.
name|lastModified
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|version
argument_list|,
name|version2
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// modify index and check version has been
comment|// incremented:
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|addDocumentWithFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"old lastModified is "
operator|+
name|version
operator|+
literal|"; new lastModified is "
operator|+
name|IndexReader
operator|.
name|lastModified
argument_list|(
name|dir
argument_list|)
argument_list|,
name|version
operator|<=
name|IndexReader
operator|.
name|lastModified
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testVersion
specifier|public
name|void
name|testVersion
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|IndexReader
operator|.
name|indexExists
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|addDocumentWithFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|IndexWriter
operator|.
name|isLocked
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
comment|// writer open, so dir is locked
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|IndexReader
operator|.
name|indexExists
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|IndexWriter
operator|.
name|isLocked
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
comment|// reader only, no lock
name|long
name|version
init|=
name|IndexReader
operator|.
name|getCurrentVersion
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// modify index and check version has been
comment|// incremented:
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|CREATE
argument_list|)
argument_list|)
expr_stmt|;
name|addDocumentWithFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"old version is "
operator|+
name|version
operator|+
literal|"; new version is "
operator|+
name|IndexReader
operator|.
name|getCurrentVersion
argument_list|(
name|dir
argument_list|)
argument_list|,
name|version
operator|<
name|IndexReader
operator|.
name|getCurrentVersion
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testOpenReaderAfterDelete
specifier|public
name|void
name|testOpenReaderAfterDelete
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|dirFile
init|=
name|_TestUtil
operator|.
name|getTempDir
argument_list|(
literal|"deletetest"
argument_list|)
decl_stmt|;
name|Directory
name|dir
init|=
name|newFSDirectory
argument_list|(
name|dirFile
argument_list|)
decl_stmt|;
try|try
block|{
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected FileNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|dirFile
operator|.
name|delete
argument_list|()
expr_stmt|;
comment|// Make sure we still get a CorruptIndexException (not NPE):
try|try
block|{
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected FileNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|addDocumentWithFields
specifier|static
name|void
name|addDocumentWithFields
parameter_list|(
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|customType3
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|customType3
operator|.
name|setStored
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"keyword"
argument_list|,
literal|"test1"
argument_list|,
name|StringField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"text"
argument_list|,
literal|"test1"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"unindexed"
argument_list|,
literal|"test1"
argument_list|,
name|customType3
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"unstored"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|addDocumentWithDifferentFields
specifier|static
name|void
name|addDocumentWithDifferentFields
parameter_list|(
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|customType3
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|customType3
operator|.
name|setStored
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"keyword2"
argument_list|,
literal|"test1"
argument_list|,
name|StringField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"text2"
argument_list|,
literal|"test1"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"unindexed2"
argument_list|,
literal|"test1"
argument_list|,
name|customType3
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|TextField
argument_list|(
literal|"unstored2"
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|addDocumentWithTermVectorFields
specifier|static
name|void
name|addDocumentWithTermVectorFields
parameter_list|(
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|customType5
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType5
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FieldType
name|customType6
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType6
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType6
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FieldType
name|customType7
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType7
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType7
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FieldType
name|customType8
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType8
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType8
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|customType8
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"tvnot"
argument_list|,
literal|"tvnot"
argument_list|,
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"termvector"
argument_list|,
literal|"termvector"
argument_list|,
name|customType5
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"tvoffset"
argument_list|,
literal|"tvoffset"
argument_list|,
name|customType6
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"tvposition"
argument_list|,
literal|"tvposition"
argument_list|,
name|customType7
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"tvpositionoffset"
argument_list|,
literal|"tvpositionoffset"
argument_list|,
name|customType8
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|addDoc
specifier|static
name|void
name|addDoc
parameter_list|(
name|IndexWriter
name|writer
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"content"
argument_list|,
name|value
argument_list|,
name|TextField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|assertIndexEquals
specifier|public
specifier|static
name|void
name|assertIndexEquals
parameter_list|(
name|IndexReader
name|index1
parameter_list|,
name|IndexReader
name|index2
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|"IndexReaders have different values for numDocs."
argument_list|,
name|index1
operator|.
name|numDocs
argument_list|()
argument_list|,
name|index2
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"IndexReaders have different values for maxDoc."
argument_list|,
name|index1
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|index2
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Only one IndexReader has deletions."
argument_list|,
name|index1
operator|.
name|hasDeletions
argument_list|()
argument_list|,
name|index2
operator|.
name|hasDeletions
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|index1
operator|instanceof
name|ParallelReader
operator|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Single segment test differs."
argument_list|,
name|index1
operator|.
name|getSequentialSubReaders
argument_list|()
operator|.
name|length
operator|==
literal|1
argument_list|,
name|index2
operator|.
name|getSequentialSubReaders
argument_list|()
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// check field names
name|Collection
argument_list|<
name|String
argument_list|>
name|fields1
init|=
name|index1
operator|.
name|getFieldNames
argument_list|(
name|FieldOption
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|fields2
init|=
name|index1
operator|.
name|getFieldNames
argument_list|(
name|FieldOption
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"IndexReaders have different numbers of fields."
argument_list|,
name|fields1
operator|.
name|size
argument_list|()
argument_list|,
name|fields2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|it1
init|=
name|fields1
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|it2
init|=
name|fields1
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Different field names."
argument_list|,
name|it1
operator|.
name|next
argument_list|()
argument_list|,
name|it2
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check norms
name|it1
operator|=
name|fields1
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|curField
init|=
name|it1
operator|.
name|next
argument_list|()
decl_stmt|;
name|byte
index|[]
name|norms1
init|=
name|MultiNorms
operator|.
name|norms
argument_list|(
name|index1
argument_list|,
name|curField
argument_list|)
decl_stmt|;
name|byte
index|[]
name|norms2
init|=
name|MultiNorms
operator|.
name|norms
argument_list|(
name|index2
argument_list|,
name|curField
argument_list|)
decl_stmt|;
if|if
condition|(
name|norms1
operator|!=
literal|null
operator|&&
name|norms2
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|norms1
operator|.
name|length
argument_list|,
name|norms2
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|norms1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Norm different for doc "
operator|+
name|i
operator|+
literal|" and field '"
operator|+
name|curField
operator|+
literal|"'."
argument_list|,
name|norms1
index|[
name|i
index|]
argument_list|,
name|norms2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|assertSame
argument_list|(
name|norms1
argument_list|,
name|norms2
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check deletions
specifier|final
name|Bits
name|liveDocs1
init|=
name|MultiFields
operator|.
name|getLiveDocs
argument_list|(
name|index1
argument_list|)
decl_stmt|;
specifier|final
name|Bits
name|liveDocs2
init|=
name|MultiFields
operator|.
name|getLiveDocs
argument_list|(
name|index2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index1
operator|.
name|maxDoc
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Doc "
operator|+
name|i
operator|+
literal|" only deleted in one index."
argument_list|,
name|liveDocs1
operator|==
literal|null
operator|||
operator|!
name|liveDocs1
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|liveDocs2
operator|==
literal|null
operator|||
operator|!
name|liveDocs2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check stored fields
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index1
operator|.
name|maxDoc
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|liveDocs1
operator|==
literal|null
operator|||
name|liveDocs1
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|Document
name|doc1
init|=
name|index1
operator|.
name|document
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Document
name|doc2
init|=
name|index2
operator|.
name|document
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IndexableField
argument_list|>
name|field1
init|=
name|doc1
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|IndexableField
argument_list|>
name|field2
init|=
name|doc2
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Different numbers of fields for doc "
operator|+
name|i
operator|+
literal|"."
argument_list|,
name|field1
operator|.
name|size
argument_list|()
argument_list|,
name|field2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|IndexableField
argument_list|>
name|itField1
init|=
name|field1
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|IndexableField
argument_list|>
name|itField2
init|=
name|field2
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itField1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Field
name|curField1
init|=
operator|(
name|Field
operator|)
name|itField1
operator|.
name|next
argument_list|()
decl_stmt|;
name|Field
name|curField2
init|=
operator|(
name|Field
operator|)
name|itField2
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Different fields names for doc "
operator|+
name|i
operator|+
literal|"."
argument_list|,
name|curField1
operator|.
name|name
argument_list|()
argument_list|,
name|curField2
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Different field values for doc "
operator|+
name|i
operator|+
literal|"."
argument_list|,
name|curField1
operator|.
name|stringValue
argument_list|()
argument_list|,
name|curField2
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// check dictionary and posting lists
name|FieldsEnum
name|fenum1
init|=
name|MultiFields
operator|.
name|getFields
argument_list|(
name|index1
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|FieldsEnum
name|fenum2
init|=
name|MultiFields
operator|.
name|getFields
argument_list|(
name|index1
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|field1
init|=
literal|null
decl_stmt|;
name|Bits
name|liveDocs
init|=
name|MultiFields
operator|.
name|getLiveDocs
argument_list|(
name|index1
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|field1
operator|=
name|fenum1
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Different fields"
argument_list|,
name|field1
argument_list|,
name|fenum2
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|Terms
name|terms1
init|=
name|fenum1
operator|.
name|terms
argument_list|()
decl_stmt|;
if|if
condition|(
name|terms1
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|fenum2
operator|.
name|terms
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|TermsEnum
name|enum1
init|=
name|terms1
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Terms
name|terms2
init|=
name|fenum2
operator|.
name|terms
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|terms2
argument_list|)
expr_stmt|;
name|TermsEnum
name|enum2
init|=
name|terms2
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|enum1
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Different terms"
argument_list|,
name|enum1
operator|.
name|term
argument_list|()
argument_list|,
name|enum2
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|DocsAndPositionsEnum
name|tp1
init|=
name|enum1
operator|.
name|docsAndPositions
argument_list|(
name|liveDocs
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|DocsAndPositionsEnum
name|tp2
init|=
name|enum2
operator|.
name|docsAndPositions
argument_list|(
name|liveDocs
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|tp1
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|assertTrue
argument_list|(
name|tp2
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Different doc id in postinglist of term "
operator|+
name|enum1
operator|.
name|term
argument_list|()
operator|+
literal|"."
argument_list|,
name|tp1
operator|.
name|docID
argument_list|()
argument_list|,
name|tp2
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Different term frequence in postinglist of term "
operator|+
name|enum1
operator|.
name|term
argument_list|()
operator|+
literal|"."
argument_list|,
name|tp1
operator|.
name|freq
argument_list|()
argument_list|,
name|tp2
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tp1
operator|.
name|freq
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Different positions in postinglist of term "
operator|+
name|enum1
operator|.
name|term
argument_list|()
operator|+
literal|"."
argument_list|,
name|tp1
operator|.
name|nextPosition
argument_list|()
argument_list|,
name|tp2
operator|.
name|nextPosition
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|testGetIndexCommit
specifier|public
name|void
name|testGetIndexCommit
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|d
init|=
name|newDirectory
argument_list|()
decl_stmt|;
comment|// set up writer
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|d
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|27
condition|;
name|i
operator|++
control|)
name|addDocumentWithFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|SegmentInfos
name|sis
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|sis
operator|.
name|read
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|IndexCommit
name|c
init|=
name|r
operator|.
name|getIndexCommit
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|sis
operator|.
name|getCurrentSegmentFileName
argument_list|()
argument_list|,
name|c
operator|.
name|getSegmentsFileName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getIndexCommit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Change the index
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|d
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|APPEND
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
name|addDocumentWithFields
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|r2
init|=
name|IndexReader
operator|.
name|openIfChanged
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c
operator|.
name|equals
argument_list|(
name|r2
operator|.
name|getIndexCommit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r2
operator|.
name|getIndexCommit
argument_list|()
operator|.
name|getSegmentCount
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|r2
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|d
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|APPEND
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|forceMerge
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|r2
operator|=
name|IndexReader
operator|.
name|openIfChanged
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|IndexReader
operator|.
name|openIfChanged
argument_list|(
name|r2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r2
operator|.
name|getIndexCommit
argument_list|()
operator|.
name|getSegmentCount
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|r2
operator|.
name|close
argument_list|()
expr_stmt|;
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createDocument
specifier|static
name|Document
name|createDocument
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|customType
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
name|customType
operator|.
name|setTokenized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|customType
operator|.
name|setOmitNorms
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|,
name|customType
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
comment|// LUCENE-1468 -- make sure on attempting to open an
comment|// IndexReader on a non-existent directory, you get a
comment|// good exception
DECL|method|testNoDir
specifier|public
name|void
name|testNoDir
parameter_list|()
throws|throws
name|Throwable
block|{
name|Directory
name|dir
init|=
name|newFSDirectory
argument_list|(
name|_TestUtil
operator|.
name|getTempDir
argument_list|(
literal|"doesnotexist"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchDirectoryException
name|nsde
parameter_list|)
block|{
comment|// expected
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1509
DECL|method|testNoDupCommitFileNames
specifier|public
name|void
name|testNoDupCommitFileNames
parameter_list|()
throws|throws
name|Throwable
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMaxBufferedDocs
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|createDocument
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|createDocument
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|createDocument
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|IndexCommit
argument_list|>
name|commits
init|=
name|IndexReader
operator|.
name|listCommits
argument_list|(
name|dir
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|IndexCommit
name|commit
range|:
name|commits
control|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|files
init|=
name|commit
operator|.
name|getFileNames
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|seen
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|fileName
range|:
name|files
control|)
block|{
name|assertTrue
argument_list|(
literal|"file "
operator|+
name|fileName
operator|+
literal|" was duplicated"
argument_list|,
operator|!
name|seen
operator|.
name|contains
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
name|seen
operator|.
name|add
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1579: Ensure that on a cloned reader, segments
comment|// reuse the doc values arrays in FieldCache
DECL|method|testFieldCacheReuseAfterClone
specifier|public
name|void
name|testFieldCacheReuseAfterClone
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"number"
argument_list|,
literal|"17"
argument_list|,
name|StringField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Open reader
name|IndexReader
name|r
init|=
name|getOnlySegmentReader
argument_list|(
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
index|[]
name|ints
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getInts
argument_list|(
name|r
argument_list|,
literal|"number"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ints
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|ints
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Clone reader
name|IndexReader
name|r2
init|=
operator|(
name|IndexReader
operator|)
name|r
operator|.
name|clone
argument_list|()
decl_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|r2
operator|!=
name|r
argument_list|)
expr_stmt|;
specifier|final
name|int
index|[]
name|ints2
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getInts
argument_list|(
name|r2
argument_list|,
literal|"number"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|r2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ints2
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|ints2
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ints
operator|==
name|ints2
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1579: Ensure that on a reopened reader, that any
comment|// shared segments reuse the doc values arrays in
comment|// FieldCache
DECL|method|testFieldCacheReuseAfterReopen
specifier|public
name|void
name|testFieldCacheReuseAfterReopen
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"number"
argument_list|,
literal|"17"
argument_list|,
name|StringField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// Open reader1
name|IndexReader
name|r
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|IndexReader
name|r1
init|=
name|getOnlySegmentReader
argument_list|(
name|r
argument_list|)
decl_stmt|;
specifier|final
name|int
index|[]
name|ints
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getInts
argument_list|(
name|r1
argument_list|,
literal|"number"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ints
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|ints
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Add new segment
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// Reopen reader1 --> reader2
name|IndexReader
name|r2
init|=
name|IndexReader
operator|.
name|openIfChanged
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|sub0
init|=
name|r2
operator|.
name|getSequentialSubReaders
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|int
index|[]
name|ints2
init|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getInts
argument_list|(
name|sub0
argument_list|,
literal|"number"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|r2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ints
operator|==
name|ints2
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1586: getUniqueTermCount
DECL|method|testUniqueTermCount
specifier|public
name|void
name|testUniqueTermCount
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"field"
argument_list|,
literal|"a b c d e f g h i j k l m n o p q r s t u v w x y z"
argument_list|,
name|TextField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"number"
argument_list|,
literal|"0 1 2 3 4 5 6 7 8 9"
argument_list|,
name|TextField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|IndexReader
name|r
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|IndexReader
name|r1
init|=
name|getOnlySegmentReader
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|36
argument_list|,
name|r1
operator|.
name|getUniqueTermCount
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|IndexReader
name|r2
init|=
name|IndexReader
operator|.
name|openIfChanged
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|r2
operator|.
name|getUniqueTermCount
argument_list|()
argument_list|)
expr_stmt|;
name|IndexReader
index|[]
name|subs
init|=
name|r2
operator|.
name|getSequentialSubReaders
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|36
argument_list|,
name|subs
index|[
name|i
index|]
operator|.
name|getUniqueTermCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|r2
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-1609: don't load terms index
DECL|method|testNoTermsIndex
specifier|public
name|void
name|testNoTermsIndex
parameter_list|()
throws|throws
name|Throwable
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setCodec
argument_list|(
name|_TestUtil
operator|.
name|alwaysPostingsFormat
argument_list|(
operator|new
name|Lucene40PostingsFormat
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"field"
argument_list|,
literal|"a b c d e f g h i j k l m n o p q r s t u v w x y z"
argument_list|,
name|TextField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"number"
argument_list|,
literal|"0 1 2 3 4 5 6 7 8 9"
argument_list|,
name|TextField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|r
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|r
operator|.
name|docFreq
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
comment|// expected
block|}
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
operator|(
operator|(
name|SegmentReader
operator|)
name|r
operator|.
name|getSequentialSubReaders
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getTermInfosIndexDivisor
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setCodec
argument_list|(
name|_TestUtil
operator|.
name|alwaysPostingsFormat
argument_list|(
operator|new
name|Lucene40PostingsFormat
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// LUCENE-1718: ensure re-open carries over no terms index:
name|IndexReader
name|r2
init|=
name|IndexReader
operator|.
name|openIfChanged
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|IndexReader
operator|.
name|openIfChanged
argument_list|(
name|r2
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
index|[]
name|subReaders
init|=
name|r2
operator|.
name|getSequentialSubReaders
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|subReaders
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|subReaders
index|[
name|i
index|]
operator|.
name|docFreq
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
comment|// expected
block|}
block|}
name|r2
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-2046
DECL|method|testPrepareCommitIsCurrent
specifier|public
name|void
name|testPrepareCommitIsCurrent
parameter_list|()
throws|throws
name|Throwable
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|prepareCommit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|IndexReader
name|r2
init|=
name|IndexReader
operator|.
name|openIfChanged
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|isCurrent
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-2753
DECL|method|testListCommits
specifier|public
name|void
name|testListCommits
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|SnapshotDeletionPolicy
name|sdp
init|=
operator|new
name|SnapshotDeletionPolicy
argument_list|(
operator|new
name|KeepOnlyLastCommitDeletionPolicy
argument_list|()
argument_list|)
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
literal|null
argument_list|)
operator|.
name|setIndexDeletionPolicy
argument_list|(
name|sdp
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|sdp
operator|.
name|snapshot
argument_list|(
literal|"c1"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|sdp
operator|.
name|snapshot
argument_list|(
literal|"c2"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|sdp
operator|.
name|snapshot
argument_list|(
literal|"c3"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|currentGen
init|=
literal|0
decl_stmt|;
for|for
control|(
name|IndexCommit
name|ic
range|:
name|IndexReader
operator|.
name|listCommits
argument_list|(
name|dir
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
literal|"currentGen="
operator|+
name|currentGen
operator|+
literal|" commitGen="
operator|+
name|ic
operator|.
name|getGeneration
argument_list|()
argument_list|,
name|currentGen
operator|<
name|ic
operator|.
name|getGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|currentGen
operator|=
name|ic
operator|.
name|getGeneration
argument_list|()
expr_stmt|;
block|}
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// LUCENE-2812
DECL|method|testIndexExists
specifier|public
name|void
name|testIndexExists
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|prepareCommit
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|IndexReader
operator|.
name|indexExists
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|IndexReader
operator|.
name|indexExists
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Make sure totalTermFreq works correctly in the terms
comment|// dict cache
DECL|method|testTotalTermFreqCached
specifier|public
name|void
name|testTotalTermFreqCached
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Document
name|d
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|d
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"f"
argument_list|,
literal|"a a b"
argument_list|,
name|TextField
operator|.
name|TYPE_UNSTORED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Make sure codec impls totalTermFreq (eg PreFlex doesn't)
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|MultiFields
operator|.
name|totalTermFreq
argument_list|(
name|r
argument_list|,
literal|"f"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"b"
argument_list|)
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|MultiFields
operator|.
name|totalTermFreq
argument_list|(
name|r
argument_list|,
literal|"f"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"b"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|MultiFields
operator|.
name|totalTermFreq
argument_list|(
name|r
argument_list|,
literal|"f"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|MultiFields
operator|.
name|totalTermFreq
argument_list|(
name|r
argument_list|,
literal|"f"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"b"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// LUCENE-2474
DECL|method|testReaderFinishedListener
specifier|public
name|void
name|testReaderFinishedListener
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
operator|(
operator|(
name|LogMergePolicy
operator|)
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getMergePolicy
argument_list|()
operator|)
operator|.
name|setMergeFactor
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
specifier|final
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|int
index|[]
name|closeCount
init|=
operator|new
name|int
index|[
literal|1
index|]
decl_stmt|;
specifier|final
name|IndexReader
operator|.
name|ReaderClosedListener
name|listener
init|=
operator|new
name|IndexReader
operator|.
name|ReaderClosedListener
argument_list|()
block|{
specifier|public
name|void
name|onClose
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
block|{
name|closeCount
index|[
literal|0
index|]
operator|++
expr_stmt|;
block|}
block|}
decl_stmt|;
name|reader
operator|.
name|addReaderClosedListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Close the top reader, its the only one that should be closed
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|closeCount
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexReader
name|reader2
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|reader2
operator|.
name|addReaderClosedListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|closeCount
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|reader2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|closeCount
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testOOBDocID
specifier|public
name|void
name|testOOBDocID
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|r
operator|.
name|document
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|r
operator|.
name|document
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not hit exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// expected
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testTryIncRef
specifier|public
name|void
name|testTryIncRef
parameter_list|()
throws|throws
name|CorruptIndexException
throws|,
name|LockObtainFailedException
throws|,
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|IndexReader
name|r
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|tryIncRef
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|tryIncRef
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testStressTryIncRef
specifier|public
name|void
name|testStressTryIncRef
parameter_list|()
throws|throws
name|CorruptIndexException
throws|,
name|LockObtainFailedException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|IndexReader
name|r
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|int
name|numThreads
init|=
name|atLeast
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|IncThread
index|[]
name|threads
init|=
operator|new
name|IncThread
index|[
name|numThreads
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|IncThread
argument_list|(
name|r
argument_list|,
name|random
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|tryIncRef
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|threads
index|[
name|i
index|]
operator|.
name|failed
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|r
operator|.
name|tryIncRef
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|IncThread
specifier|static
class|class
name|IncThread
extends|extends
name|Thread
block|{
DECL|field|toInc
specifier|final
name|IndexReader
name|toInc
decl_stmt|;
DECL|field|random
specifier|final
name|Random
name|random
decl_stmt|;
DECL|field|failed
name|Throwable
name|failed
decl_stmt|;
DECL|method|IncThread
name|IncThread
parameter_list|(
name|IndexReader
name|toInc
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
name|this
operator|.
name|toInc
operator|=
name|toInc
expr_stmt|;
name|this
operator|.
name|random
operator|=
name|random
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
name|toInc
operator|.
name|tryIncRef
argument_list|()
condition|)
block|{
name|assertFalse
argument_list|(
name|toInc
operator|.
name|hasDeletions
argument_list|()
argument_list|)
expr_stmt|;
name|toInc
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|toInc
operator|.
name|tryIncRef
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|failed
operator|=
name|e
expr_stmt|;
block|}
block|}
block|}
DECL|method|testLoadCertainFields
specifier|public
name|void
name|testLoadCertainFields
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"field1"
argument_list|,
literal|"foobar"
argument_list|,
name|StringField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newField
argument_list|(
literal|"field2"
argument_list|,
literal|"foobaz"
argument_list|,
name|StringField
operator|.
name|TYPE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|fieldsToLoad
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|document
argument_list|(
literal|0
argument_list|,
name|fieldsToLoad
argument_list|)
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|fieldsToLoad
operator|.
name|add
argument_list|(
literal|"field1"
argument_list|)
expr_stmt|;
name|Document
name|doc2
init|=
name|r
operator|.
name|document
argument_list|(
literal|0
argument_list|,
name|fieldsToLoad
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|doc2
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foobar"
argument_list|,
name|doc2
operator|.
name|get
argument_list|(
literal|"field1"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
