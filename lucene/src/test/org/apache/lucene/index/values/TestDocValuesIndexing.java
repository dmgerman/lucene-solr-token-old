begin_unit
begin_package
DECL|package|org.apache.lucene.index.values
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|AbstractField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DocValuesField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
operator|.
name|Index
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
operator|.
name|Store
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LogDocMergePolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LogMergePolicy
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiPerDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|CodecProvider
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|PerDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|DocValues
operator|.
name|MissingValue
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|DocValues
operator|.
name|Source
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|QueryParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|LockObtainFailedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FloatsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LongsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|OpenBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_comment
comment|/**  *   * Tests DocValues integration into IndexWriter& Codecs  *   */
end_comment
begin_class
DECL|class|TestDocValuesIndexing
specifier|public
class|class
name|TestDocValuesIndexing
extends|extends
name|LuceneTestCase
block|{
comment|/*    * TODO: Roadmap to land on trunk    *     * - Add documentation for:     *  - DocValues     * - add test for unoptimized case with deletes    * - add multithreaded tests / integrate into stress indexing?    */
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|assumeFalse
argument_list|(
literal|"cannot work with preflex codec"
argument_list|,
name|CodecProvider
operator|.
name|getDefault
argument_list|()
operator|.
name|getDefaultFieldCodec
argument_list|()
operator|.
name|equals
argument_list|(
literal|"PreFlex"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Simple test case to show how to use the API    */
DECL|method|testDocValuesSimple
specifier|public
name|void
name|testDocValuesSimple
parameter_list|()
throws|throws
name|CorruptIndexException
throws|,
name|IOException
throws|,
name|ParseException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|writer
init|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|writerConfig
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|DocValuesField
name|valuesField
init|=
operator|new
name|DocValuesField
argument_list|(
literal|"docId"
argument_list|)
decl_stmt|;
name|valuesField
operator|.
name|setInt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|valuesField
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"docId"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|Store
operator|.
name|NO
argument_list|,
name|Index
operator|.
name|ANALYZED
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|commit
argument_list|()
expr_stmt|;
name|writer
operator|.
name|optimize
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|isOptimized
argument_list|()
argument_list|)
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|QueryParser
name|parser
init|=
operator|new
name|QueryParser
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
literal|"docId"
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
decl_stmt|;
name|TopDocs
name|search
init|=
name|searcher
operator|.
name|search
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
literal|"0 OR 1 OR 2 OR 3 OR 4"
argument_list|)
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|search
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|ScoreDoc
index|[]
name|scoreDocs
init|=
name|search
operator|.
name|scoreDocs
decl_stmt|;
name|DocValues
name|docValues
init|=
name|MultiPerDocValues
operator|.
name|getPerDocs
argument_list|(
name|reader
argument_list|)
operator|.
name|docValues
argument_list|(
literal|"docId"
argument_list|)
decl_stmt|;
name|Source
name|source
init|=
name|docValues
operator|.
name|getSource
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|scoreDocs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|i
argument_list|,
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|source
operator|.
name|getInt
argument_list|(
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests complete indexing of {@link Type} including deletions, merging and    * sparse value fields on Compound-File    */
DECL|method|testIndexBytesNoDeletesCFS
specifier|public
name|void
name|testIndexBytesNoDeletesCFS
parameter_list|()
throws|throws
name|IOException
block|{
name|runTestIndexBytes
argument_list|(
name|writerConfig
argument_list|(
literal|true
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexBytesDeletesCFS
specifier|public
name|void
name|testIndexBytesDeletesCFS
parameter_list|()
throws|throws
name|IOException
block|{
name|runTestIndexBytes
argument_list|(
name|writerConfig
argument_list|(
literal|true
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexNumericsNoDeletesCFS
specifier|public
name|void
name|testIndexNumericsNoDeletesCFS
parameter_list|()
throws|throws
name|IOException
block|{
name|runTestNumerics
argument_list|(
name|writerConfig
argument_list|(
literal|true
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexNumericsDeletesCFS
specifier|public
name|void
name|testIndexNumericsDeletesCFS
parameter_list|()
throws|throws
name|IOException
block|{
name|runTestNumerics
argument_list|(
name|writerConfig
argument_list|(
literal|true
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests complete indexing of {@link Type} including deletions, merging and    * sparse value fields on None-Compound-File    */
DECL|method|testIndexBytesNoDeletes
specifier|public
name|void
name|testIndexBytesNoDeletes
parameter_list|()
throws|throws
name|IOException
block|{
name|runTestIndexBytes
argument_list|(
name|writerConfig
argument_list|(
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexBytesDeletes
specifier|public
name|void
name|testIndexBytesDeletes
parameter_list|()
throws|throws
name|IOException
block|{
name|runTestIndexBytes
argument_list|(
name|writerConfig
argument_list|(
literal|false
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexNumericsNoDeletes
specifier|public
name|void
name|testIndexNumericsNoDeletes
parameter_list|()
throws|throws
name|IOException
block|{
name|runTestNumerics
argument_list|(
name|writerConfig
argument_list|(
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexNumericsDeletes
specifier|public
name|void
name|testIndexNumericsDeletes
parameter_list|()
throws|throws
name|IOException
block|{
name|runTestNumerics
argument_list|(
name|writerConfig
argument_list|(
literal|false
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddIndexes
specifier|public
name|void
name|testAddIndexes
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|valuesPerIndex
init|=
literal|10
decl_stmt|;
name|List
argument_list|<
name|Type
argument_list|>
name|values
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Type
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|values
argument_list|,
name|random
argument_list|)
expr_stmt|;
name|Type
name|first
init|=
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Type
name|second
init|=
name|values
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
literal|"[first="
operator|+
name|first
operator|.
name|name
argument_list|()
operator|+
literal|", second="
operator|+
name|second
operator|.
name|name
argument_list|()
operator|+
literal|"]"
decl_stmt|;
comment|// index first index
name|Directory
name|d_1
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w_1
init|=
operator|new
name|IndexWriter
argument_list|(
name|d_1
argument_list|,
name|writerConfig
argument_list|(
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|indexValues
argument_list|(
name|w_1
argument_list|,
name|valuesPerIndex
argument_list|,
name|first
argument_list|,
name|values
argument_list|,
literal|false
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|w_1
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|valuesPerIndex
argument_list|,
name|w_1
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|_TestUtil
operator|.
name|checkIndex
argument_list|(
name|d_1
argument_list|,
name|w_1
operator|.
name|getConfig
argument_list|()
operator|.
name|getCodecProvider
argument_list|()
argument_list|)
expr_stmt|;
comment|// index second index
name|Directory
name|d_2
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w_2
init|=
operator|new
name|IndexWriter
argument_list|(
name|d_2
argument_list|,
name|writerConfig
argument_list|(
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|indexValues
argument_list|(
name|w_2
argument_list|,
name|valuesPerIndex
argument_list|,
name|second
argument_list|,
name|values
argument_list|,
literal|false
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|w_2
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|valuesPerIndex
argument_list|,
name|w_2
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|_TestUtil
operator|.
name|checkIndex
argument_list|(
name|d_2
argument_list|,
name|w_2
operator|.
name|getConfig
argument_list|()
operator|.
name|getCodecProvider
argument_list|()
argument_list|)
expr_stmt|;
name|Directory
name|target
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|target
argument_list|,
name|writerConfig
argument_list|(
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|IndexReader
name|r_1
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|w_1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|IndexReader
name|r_2
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|w_2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|w
operator|.
name|addIndexes
argument_list|(
name|d_1
argument_list|,
name|d_2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|w
operator|.
name|addIndexes
argument_list|(
name|r_1
argument_list|,
name|r_2
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|optimize
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
name|_TestUtil
operator|.
name|checkIndex
argument_list|(
name|target
argument_list|,
name|w
operator|.
name|getConfig
argument_list|()
operator|.
name|getCodecProvider
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|valuesPerIndex
operator|*
literal|2
argument_list|,
name|w
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// check values
name|IndexReader
name|merged
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|w
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|DocValuesEnum
name|vE_1
init|=
name|getValuesEnum
argument_list|(
name|getDocValues
argument_list|(
name|r_1
argument_list|,
name|first
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|DocValuesEnum
name|vE_2
init|=
name|getValuesEnum
argument_list|(
name|getDocValues
argument_list|(
name|r_2
argument_list|,
name|second
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|DocValuesEnum
name|vE_1_merged
init|=
name|getValuesEnum
argument_list|(
name|getDocValues
argument_list|(
name|merged
argument_list|,
name|first
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|DocValuesEnum
name|vE_2_merged
init|=
name|getValuesEnum
argument_list|(
name|getDocValues
argument_list|(
name|merged
argument_list|,
name|second
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|second
operator|==
name|Type
operator|.
name|BYTES_VAR_STRAIGHT
operator|||
name|second
operator|==
name|Type
operator|.
name|BYTES_FIXED_STRAIGHT
condition|)
block|{
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|valuesPerIndex
operator|-
literal|1
argument_list|,
name|vE_2_merged
operator|.
name|advance
argument_list|(
name|valuesPerIndex
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valuesPerIndex
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|i
argument_list|,
name|vE_1
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|i
argument_list|,
name|vE_1_merged
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|i
argument_list|,
name|vE_2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|i
operator|+
name|valuesPerIndex
argument_list|,
name|vE_2_merged
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|DocValuesEnum
operator|.
name|NO_MORE_DOCS
argument_list|,
name|vE_1
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|DocValuesEnum
operator|.
name|NO_MORE_DOCS
argument_list|,
name|vE_2
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|DocValuesEnum
operator|.
name|NO_MORE_DOCS
argument_list|,
name|vE_1_merged
operator|.
name|advance
argument_list|(
name|valuesPerIndex
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|DocValuesEnum
operator|.
name|NO_MORE_DOCS
argument_list|,
name|vE_2_merged
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
comment|// close resources
name|r_1
operator|.
name|close
argument_list|()
expr_stmt|;
name|r_2
operator|.
name|close
argument_list|()
expr_stmt|;
name|merged
operator|.
name|close
argument_list|()
expr_stmt|;
name|w_1
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|w_2
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|d_1
operator|.
name|close
argument_list|()
expr_stmt|;
name|d_2
operator|.
name|close
argument_list|()
expr_stmt|;
name|target
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|writerConfig
specifier|private
name|IndexWriterConfig
name|writerConfig
parameter_list|(
name|boolean
name|useCompoundFile
parameter_list|)
block|{
specifier|final
name|IndexWriterConfig
name|cfg
init|=
name|newIndexWriterConfig
argument_list|(
name|TEST_VERSION_CURRENT
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|)
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|setMergePolicy
argument_list|(
name|newLogMergePolicy
argument_list|(
name|random
argument_list|)
argument_list|)
expr_stmt|;
name|LogMergePolicy
name|policy
init|=
operator|new
name|LogDocMergePolicy
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setMergePolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setUseCompoundFile
argument_list|(
name|useCompoundFile
argument_list|)
expr_stmt|;
return|return
name|cfg
return|;
block|}
DECL|method|runTestNumerics
specifier|public
name|void
name|runTestNumerics
parameter_list|(
name|IndexWriterConfig
name|cfg
parameter_list|,
name|boolean
name|withDeletions
parameter_list|)
throws|throws
name|IOException
block|{
name|Directory
name|d
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|d
argument_list|,
name|cfg
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numValues
init|=
literal|179
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|151
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Type
argument_list|>
name|numVariantList
init|=
operator|new
name|ArrayList
argument_list|<
name|Type
argument_list|>
argument_list|(
name|NUMERICS
argument_list|)
decl_stmt|;
comment|// run in random order to test if fill works correctly during merges
name|Collections
operator|.
name|shuffle
argument_list|(
name|numVariantList
argument_list|,
name|random
argument_list|)
expr_stmt|;
for|for
control|(
name|Type
name|val
range|:
name|numVariantList
control|)
block|{
name|OpenBitSet
name|deleted
init|=
name|indexValues
argument_list|(
name|w
argument_list|,
name|numValues
argument_list|,
name|val
argument_list|,
name|numVariantList
argument_list|,
name|withDeletions
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Closeable
argument_list|>
name|closeables
init|=
operator|new
name|ArrayList
argument_list|<
name|Closeable
argument_list|>
argument_list|()
decl_stmt|;
name|IndexReader
name|r
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|w
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numRemainingValues
init|=
call|(
name|int
call|)
argument_list|(
name|numValues
operator|-
name|deleted
operator|.
name|cardinality
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|base
init|=
name|r
operator|.
name|numDocs
argument_list|()
operator|-
name|numRemainingValues
decl_stmt|;
switch|switch
condition|(
name|val
condition|)
block|{
case|case
name|INTS
case|:
block|{
name|DocValues
name|intsReader
init|=
name|getDocValues
argument_list|(
name|r
argument_list|,
name|val
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|intsReader
argument_list|)
expr_stmt|;
name|Source
name|ints
init|=
name|getSource
argument_list|(
name|intsReader
argument_list|)
decl_stmt|;
name|MissingValue
name|missing
init|=
name|ints
operator|.
name|getMissing
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|base
condition|;
name|i
operator|++
control|)
block|{
name|long
name|value
init|=
name|ints
operator|.
name|getInt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"index "
operator|+
name|i
argument_list|,
name|missing
operator|.
name|longValue
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|DocValuesEnum
name|intsEnum
init|=
name|getValuesEnum
argument_list|(
name|intsReader
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|intsEnum
operator|.
name|advance
argument_list|(
literal|0
argument_list|)
operator|>=
name|base
argument_list|)
expr_stmt|;
name|intsEnum
operator|=
name|getValuesEnum
argument_list|(
name|intsReader
argument_list|)
expr_stmt|;
name|LongsRef
name|enumRef
init|=
name|intsEnum
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|int
name|expected
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|base
init|;
name|i
operator|<
name|r
operator|.
name|numDocs
argument_list|()
condition|;
name|i
operator|++
operator|,
name|expected
operator|++
control|)
block|{
while|while
condition|(
name|deleted
operator|.
name|get
argument_list|(
name|expected
argument_list|)
condition|)
block|{
name|expected
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"advance failed at index: "
operator|+
name|i
operator|+
literal|" of "
operator|+
name|r
operator|.
name|numDocs
argument_list|()
operator|+
literal|" docs"
argument_list|,
name|i
argument_list|,
name|intsEnum
operator|.
name|advance
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|enumRef
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|ints
operator|.
name|getInt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|FLOAT_32
case|:
case|case
name|FLOAT_64
case|:
block|{
name|DocValues
name|floatReader
init|=
name|getDocValues
argument_list|(
name|r
argument_list|,
name|val
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|floatReader
argument_list|)
expr_stmt|;
name|Source
name|floats
init|=
name|getSource
argument_list|(
name|floatReader
argument_list|)
decl_stmt|;
name|MissingValue
name|missing
init|=
name|floats
operator|.
name|getMissing
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|base
condition|;
name|i
operator|++
control|)
block|{
name|double
name|value
init|=
name|floats
operator|.
name|getFloat
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|" floats failed for doc: "
operator|+
name|i
operator|+
literal|" base: "
operator|+
name|base
argument_list|,
name|missing
operator|.
name|doubleValue
argument_list|,
name|value
argument_list|,
literal|0.0d
argument_list|)
expr_stmt|;
block|}
name|DocValuesEnum
name|floatEnum
init|=
name|getValuesEnum
argument_list|(
name|floatReader
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|floatEnum
operator|.
name|advance
argument_list|(
literal|0
argument_list|)
operator|>=
name|base
argument_list|)
expr_stmt|;
name|floatEnum
operator|=
name|getValuesEnum
argument_list|(
name|floatReader
argument_list|)
expr_stmt|;
name|FloatsRef
name|enumRef
init|=
name|floatEnum
operator|.
name|getFloat
argument_list|()
decl_stmt|;
name|int
name|expected
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|base
init|;
name|i
operator|<
name|r
operator|.
name|numDocs
argument_list|()
condition|;
name|i
operator|++
operator|,
name|expected
operator|++
control|)
block|{
while|while
condition|(
name|deleted
operator|.
name|get
argument_list|(
name|expected
argument_list|)
condition|)
block|{
name|expected
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"advance failed at index: "
operator|+
name|i
operator|+
literal|" of "
operator|+
name|r
operator|.
name|numDocs
argument_list|()
operator|+
literal|" docs base:"
operator|+
name|base
argument_list|,
name|i
argument_list|,
name|floatEnum
operator|.
name|advance
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|floatEnum
operator|.
name|getClass
argument_list|()
operator|+
literal|" index "
operator|+
name|i
argument_list|,
literal|2.0
operator|*
name|expected
argument_list|,
name|enumRef
operator|.
name|get
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"index "
operator|+
name|i
argument_list|,
literal|2.0
operator|*
name|expected
argument_list|,
name|floats
operator|.
name|getFloat
argument_list|(
name|i
argument_list|)
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
name|fail
argument_list|(
literal|"unexpected value "
operator|+
name|val
argument_list|)
expr_stmt|;
block|}
name|closeables
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
for|for
control|(
name|Closeable
name|toClose
range|:
name|closeables
control|)
block|{
name|toClose
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|runTestIndexBytes
specifier|public
name|void
name|runTestIndexBytes
parameter_list|(
name|IndexWriterConfig
name|cfg
parameter_list|,
name|boolean
name|withDeletions
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|LockObtainFailedException
throws|,
name|IOException
block|{
specifier|final
name|Directory
name|d
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|d
argument_list|,
name|cfg
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Type
argument_list|>
name|byteVariantList
init|=
operator|new
name|ArrayList
argument_list|<
name|Type
argument_list|>
argument_list|(
name|BYTES
argument_list|)
decl_stmt|;
comment|// run in random order to test if fill works correctly during merges
name|Collections
operator|.
name|shuffle
argument_list|(
name|byteVariantList
argument_list|,
name|random
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numValues
init|=
literal|179
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|151
argument_list|)
decl_stmt|;
for|for
control|(
name|Type
name|byteIndexValue
range|:
name|byteVariantList
control|)
block|{
name|List
argument_list|<
name|Closeable
argument_list|>
name|closeables
init|=
operator|new
name|ArrayList
argument_list|<
name|Closeable
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|bytesSize
init|=
literal|7
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|128
argument_list|)
decl_stmt|;
name|OpenBitSet
name|deleted
init|=
name|indexValues
argument_list|(
name|w
argument_list|,
name|numValues
argument_list|,
name|byteIndexValue
argument_list|,
name|byteVariantList
argument_list|,
name|withDeletions
argument_list|,
name|bytesSize
argument_list|)
decl_stmt|;
specifier|final
name|IndexReader
name|r
init|=
name|IndexReader
operator|.
name|open
argument_list|(
name|w
argument_list|,
name|withDeletions
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|numDeletedDocs
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numRemainingValues
init|=
call|(
name|int
call|)
argument_list|(
name|numValues
operator|-
name|deleted
operator|.
name|cardinality
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|base
init|=
name|r
operator|.
name|numDocs
argument_list|()
operator|-
name|numRemainingValues
decl_stmt|;
name|DocValues
name|bytesReader
init|=
name|getDocValues
argument_list|(
name|r
argument_list|,
name|byteIndexValue
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"field "
operator|+
name|byteIndexValue
operator|.
name|name
argument_list|()
operator|+
literal|" returned null reader - maybe merged failed"
argument_list|,
name|bytesReader
argument_list|)
expr_stmt|;
name|Source
name|bytes
init|=
name|getSource
argument_list|(
name|bytesReader
argument_list|)
decl_stmt|;
name|byte
name|upto
init|=
literal|0
decl_stmt|;
comment|// test the filled up slots for correctness
name|MissingValue
name|missing
init|=
name|bytes
operator|.
name|getMissing
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|base
condition|;
name|i
operator|++
control|)
block|{
name|BytesRef
name|br
init|=
name|bytes
operator|.
name|getBytes
argument_list|(
name|i
argument_list|,
operator|new
name|BytesRef
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
literal|" field: "
operator|+
name|byteIndexValue
operator|.
name|name
argument_list|()
operator|+
literal|" at index: "
operator|+
name|i
operator|+
literal|" base: "
operator|+
name|base
operator|+
literal|" numDocs:"
operator|+
name|r
operator|.
name|numDocs
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|byteIndexValue
condition|)
block|{
case|case
name|BYTES_VAR_STRAIGHT
case|:
case|case
name|BYTES_FIXED_STRAIGHT
case|:
comment|// fixed straight returns bytesref with zero bytes all of fixed
comment|// length
if|if
condition|(
name|missing
operator|.
name|bytesValue
operator|!=
literal|null
condition|)
block|{
name|assertNotNull
argument_list|(
literal|"expected none null - "
operator|+
name|msg
argument_list|,
name|br
argument_list|)
expr_stmt|;
if|if
condition|(
name|br
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
literal|"expected zero bytes of length "
operator|+
name|bytesSize
operator|+
literal|" - "
operator|+
name|msg
argument_list|,
name|bytesSize
argument_list|,
name|br
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|br
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Byte at index "
operator|+
name|j
operator|+
literal|" doesn't match - "
operator|+
name|msg
argument_list|,
literal|0
argument_list|,
name|br
operator|.
name|bytes
index|[
name|br
operator|.
name|offset
operator|+
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|assertNull
argument_list|(
literal|"expected null - "
operator|+
name|msg
operator|+
literal|" "
operator|+
name|br
argument_list|,
name|br
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BYTES_VAR_SORTED
case|:
case|case
name|BYTES_FIXED_SORTED
case|:
case|case
name|BYTES_VAR_DEREF
case|:
case|case
name|BYTES_FIXED_DEREF
case|:
default|default:
name|assertNull
argument_list|(
literal|"expected null - "
operator|+
name|msg
operator|+
literal|" "
operator|+
name|br
argument_list|,
name|br
argument_list|)
expr_stmt|;
comment|// make sure we advance at least until base
name|DocValuesEnum
name|bytesEnum
init|=
name|getValuesEnum
argument_list|(
name|bytesReader
argument_list|)
decl_stmt|;
specifier|final
name|int
name|advancedTo
init|=
name|bytesEnum
operator|.
name|advance
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|byteIndexValue
operator|.
name|name
argument_list|()
operator|+
literal|" advanced failed base:"
operator|+
name|base
operator|+
literal|" advancedTo: "
operator|+
name|advancedTo
argument_list|,
name|base
operator|<=
name|advancedTo
argument_list|)
expr_stmt|;
block|}
block|}
name|DocValuesEnum
name|bytesEnum
init|=
name|getValuesEnum
argument_list|(
name|bytesReader
argument_list|)
decl_stmt|;
specifier|final
name|BytesRef
name|enumRef
init|=
name|bytesEnum
operator|.
name|bytes
argument_list|()
decl_stmt|;
comment|// test the actual doc values added in this iteration
name|assertEquals
argument_list|(
name|base
operator|+
name|numRemainingValues
argument_list|,
name|r
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|v
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|base
init|;
name|i
operator|<
name|r
operator|.
name|numDocs
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|msg
init|=
literal|" field: "
operator|+
name|byteIndexValue
operator|.
name|name
argument_list|()
operator|+
literal|" at index: "
operator|+
name|i
operator|+
literal|" base: "
operator|+
name|base
operator|+
literal|" numDocs:"
operator|+
name|r
operator|.
name|numDocs
argument_list|()
operator|+
literal|" bytesSize: "
operator|+
name|bytesSize
operator|+
literal|" src: "
operator|+
name|bytes
decl_stmt|;
while|while
condition|(
name|withDeletions
operator|&&
name|deleted
operator|.
name|get
argument_list|(
name|v
operator|++
argument_list|)
condition|)
block|{
name|upto
operator|+=
name|bytesSize
expr_stmt|;
block|}
name|BytesRef
name|br
init|=
name|bytes
operator|.
name|getBytes
argument_list|(
name|i
argument_list|,
operator|new
name|BytesRef
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytesEnum
operator|.
name|docID
argument_list|()
operator|!=
name|i
condition|)
block|{
name|assertEquals
argument_list|(
literal|"seek failed for index "
operator|+
name|i
operator|+
literal|" "
operator|+
name|msg
argument_list|,
name|i
argument_list|,
name|bytesEnum
operator|.
name|advance
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|br
operator|.
name|length
condition|;
name|j
operator|++
operator|,
name|upto
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|" enumRef not initialized "
operator|+
name|msg
argument_list|,
name|enumRef
operator|.
name|bytes
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"EnumRef Byte at index "
operator|+
name|j
operator|+
literal|" doesn't match - "
operator|+
name|msg
argument_list|,
name|upto
argument_list|,
name|enumRef
operator|.
name|bytes
index|[
name|enumRef
operator|.
name|offset
operator|+
name|j
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|br
operator|.
name|bytes
operator|.
name|length
operator|>
name|br
operator|.
name|offset
operator|+
name|j
operator|)
condition|)
name|br
operator|=
name|bytes
operator|.
name|getBytes
argument_list|(
name|i
argument_list|,
operator|new
name|BytesRef
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"BytesRef index exceeded ["
operator|+
name|msg
operator|+
literal|"] offset: "
operator|+
name|br
operator|.
name|offset
operator|+
literal|" length: "
operator|+
name|br
operator|.
name|length
operator|+
literal|" index: "
operator|+
operator|(
name|br
operator|.
name|offset
operator|+
name|j
operator|)
argument_list|,
name|br
operator|.
name|bytes
operator|.
name|length
operator|>
name|br
operator|.
name|offset
operator|+
name|j
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SourceRef Byte at index "
operator|+
name|j
operator|+
literal|" doesn't match - "
operator|+
name|msg
argument_list|,
name|upto
argument_list|,
name|br
operator|.
name|bytes
index|[
name|br
operator|.
name|offset
operator|+
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// clean up
name|closeables
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
for|for
control|(
name|Closeable
name|toClose
range|:
name|closeables
control|)
block|{
name|toClose
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|d
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getDocValues
specifier|private
name|DocValues
name|getDocValues
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|optimized
init|=
name|reader
operator|.
name|isOptimized
argument_list|()
decl_stmt|;
name|PerDocValues
name|perDoc
init|=
name|optimized
condition|?
name|reader
operator|.
name|getSequentialSubReaders
argument_list|()
index|[
literal|0
index|]
operator|.
name|perDocValues
argument_list|()
else|:
name|MultiPerDocValues
operator|.
name|getPerDocs
argument_list|(
name|reader
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|random
operator|.
name|nextInt
argument_list|(
name|optimized
condition|?
literal|3
else|:
literal|2
argument_list|)
condition|)
block|{
comment|// case 2 only if optimized
case|case
literal|0
case|:
return|return
name|perDoc
operator|.
name|docValues
argument_list|(
name|field
argument_list|)
return|;
case|case
literal|1
case|:
name|DocValues
name|docValues
init|=
name|perDoc
operator|.
name|docValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|docValues
operator|!=
literal|null
condition|)
block|{
return|return
name|docValues
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no such field "
operator|+
name|field
argument_list|)
throw|;
case|case
literal|2
case|:
comment|// this only works if we are on an optimized index!
return|return
name|reader
operator|.
name|getSequentialSubReaders
argument_list|()
index|[
literal|0
index|]
operator|.
name|docValues
argument_list|(
name|field
argument_list|)
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
DECL|method|getSource
specifier|private
name|Source
name|getSource
parameter_list|(
name|DocValues
name|values
parameter_list|)
throws|throws
name|IOException
block|{
name|Source
name|source
decl_stmt|;
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|source
operator|=
name|values
operator|.
name|load
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// getSource uses cache internally
name|source
operator|=
name|values
operator|.
name|getSource
argument_list|()
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|source
return|;
block|}
DECL|method|getValuesEnum
specifier|private
name|DocValuesEnum
name|getValuesEnum
parameter_list|(
name|DocValues
name|values
parameter_list|)
throws|throws
name|IOException
block|{
name|DocValuesEnum
name|valuesEnum
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|values
operator|instanceof
name|MultiDocValues
operator|)
operator|&&
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// TODO not supported by MultiDocValues yet!
name|valuesEnum
operator|=
name|getSource
argument_list|(
name|values
argument_list|)
operator|.
name|getEnum
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|valuesEnum
operator|=
name|values
operator|.
name|getEnum
argument_list|()
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|valuesEnum
argument_list|)
expr_stmt|;
return|return
name|valuesEnum
return|;
block|}
DECL|field|BYTES
specifier|private
specifier|static
name|EnumSet
argument_list|<
name|Type
argument_list|>
name|BYTES
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|Type
operator|.
name|BYTES_FIXED_DEREF
argument_list|,
name|Type
operator|.
name|BYTES_FIXED_SORTED
argument_list|,
name|Type
operator|.
name|BYTES_FIXED_STRAIGHT
argument_list|,
name|Type
operator|.
name|BYTES_VAR_DEREF
argument_list|,
name|Type
operator|.
name|BYTES_VAR_SORTED
argument_list|,
name|Type
operator|.
name|BYTES_VAR_STRAIGHT
argument_list|)
decl_stmt|;
DECL|field|NUMERICS
specifier|private
specifier|static
name|EnumSet
argument_list|<
name|Type
argument_list|>
name|NUMERICS
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|Type
operator|.
name|INTS
argument_list|,
name|Type
operator|.
name|FLOAT_32
argument_list|,
name|Type
operator|.
name|FLOAT_64
argument_list|)
decl_stmt|;
DECL|field|IDX_VALUES
specifier|private
specifier|static
name|Index
index|[]
name|IDX_VALUES
init|=
operator|new
name|Index
index|[]
block|{
name|Index
operator|.
name|ANALYZED
block|,
name|Index
operator|.
name|ANALYZED_NO_NORMS
block|,
name|Index
operator|.
name|NOT_ANALYZED
block|,
name|Index
operator|.
name|NOT_ANALYZED_NO_NORMS
block|,
name|Index
operator|.
name|NO
block|}
decl_stmt|;
DECL|method|indexValues
specifier|private
name|OpenBitSet
name|indexValues
parameter_list|(
name|IndexWriter
name|w
parameter_list|,
name|int
name|numValues
parameter_list|,
name|Type
name|value
parameter_list|,
name|List
argument_list|<
name|Type
argument_list|>
name|valueVarList
parameter_list|,
name|boolean
name|withDeletions
parameter_list|,
name|int
name|multOfSeven
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
specifier|final
name|boolean
name|isNumeric
init|=
name|NUMERICS
operator|.
name|contains
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|OpenBitSet
name|deleted
init|=
operator|new
name|OpenBitSet
argument_list|(
name|numValues
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|Index
name|idx
init|=
name|IDX_VALUES
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|IDX_VALUES
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|AbstractField
name|field
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
operator|new
name|DocValuesField
argument_list|(
name|value
operator|.
name|name
argument_list|()
argument_list|)
else|:
name|newField
argument_list|(
name|value
operator|.
name|name
argument_list|()
argument_list|,
name|_TestUtil
operator|.
name|randomRealisticUnicodeString
argument_list|(
name|random
argument_list|,
literal|10
argument_list|)
argument_list|,
name|idx
operator|==
name|Index
operator|.
name|NO
condition|?
name|Store
operator|.
name|YES
else|:
name|Store
operator|.
name|NO
argument_list|,
name|idx
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|DocValuesField
name|valField
init|=
operator|new
name|DocValuesField
argument_list|(
literal|"prototype"
argument_list|)
decl_stmt|;
specifier|final
name|BytesRef
name|bytesRef
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
specifier|final
name|String
name|idBase
init|=
name|value
operator|.
name|name
argument_list|()
operator|+
literal|"_"
decl_stmt|;
specifier|final
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|multOfSeven
index|]
decl_stmt|;
if|if
condition|(
name|bytesRef
operator|!=
literal|null
condition|)
block|{
name|bytesRef
operator|.
name|bytes
operator|=
name|b
expr_stmt|;
name|bytesRef
operator|.
name|length
operator|=
name|b
operator|.
name|length
expr_stmt|;
name|bytesRef
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
block|}
name|byte
name|upto
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isNumeric
condition|)
block|{
switch|switch
condition|(
name|value
condition|)
block|{
case|case
name|INTS
case|:
name|valField
operator|.
name|setInt
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT_32
case|:
case|case
name|FLOAT_64
case|:
name|valField
operator|.
name|setFloat
argument_list|(
literal|2.0f
operator|*
name|i
argument_list|)
expr_stmt|;
break|break;
default|default:
name|fail
argument_list|(
literal|"unexpected value "
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|b
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|b
index|[
name|j
index|]
operator|=
name|upto
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|bytesRef
operator|!=
literal|null
condition|)
block|{
name|valField
operator|.
name|setBytes
argument_list|(
name|bytesRef
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|doc
operator|.
name|removeFields
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"id"
argument_list|,
name|idBase
operator|+
name|i
argument_list|,
name|Store
operator|.
name|YES
argument_list|,
name|Index
operator|.
name|NOT_ANALYZED_NO_NORMS
argument_list|)
argument_list|)
expr_stmt|;
name|valField
operator|.
name|set
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|7
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|withDeletions
operator|&&
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|Type
name|val
init|=
name|valueVarList
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|1
operator|+
name|valueVarList
operator|.
name|indexOf
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|randInt
init|=
name|val
operator|==
name|value
condition|?
name|random
operator|.
name|nextInt
argument_list|(
literal|1
operator|+
name|i
argument_list|)
else|:
name|random
operator|.
name|nextInt
argument_list|(
name|numValues
argument_list|)
decl_stmt|;
name|w
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
name|val
operator|.
name|name
argument_list|()
operator|+
literal|"_"
operator|+
name|randInt
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|val
operator|==
name|value
condition|)
block|{
name|deleted
operator|.
name|set
argument_list|(
name|randInt
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|w
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// TODO test unoptimized with deletions
if|if
condition|(
name|withDeletions
operator|||
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
name|w
operator|.
name|optimize
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|deleted
return|;
block|}
block|}
end_class
end_unit
