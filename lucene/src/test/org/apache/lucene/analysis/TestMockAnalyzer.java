begin_unit
begin_package
DECL|package|org.apache.lucene.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|TestMockAnalyzer
specifier|public
class|class
name|TestMockAnalyzer
extends|extends
name|BaseTokenStreamTestCase
block|{
DECL|method|testWhitespace
specifier|public
name|void
name|testWhitespace
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|()
decl_stmt|;
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
literal|"A bc defg hiJklmn opqrstuv wxy z "
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"bc"
block|,
literal|"defg"
block|,
literal|"hijklmn"
block|,
literal|"opqrstuv"
block|,
literal|"wxy"
block|,
literal|"z"
block|}
argument_list|)
expr_stmt|;
name|assertAnalyzesToReuse
argument_list|(
name|a
argument_list|,
literal|"aba cadaba shazam"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"aba"
block|,
literal|"cadaba"
block|,
literal|"shazam"
block|}
argument_list|)
expr_stmt|;
name|assertAnalyzesToReuse
argument_list|(
name|a
argument_list|,
literal|"break on whitespace"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"break"
block|,
literal|"on"
block|,
literal|"whitespace"
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimple
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|MockAnalyzer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
literal|"a-bc123 defg+hijklmn567opqrstuv78wxy_z "
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"bc"
block|,
literal|"defg"
block|,
literal|"hijklmn"
block|,
literal|"opqrstuv"
block|,
literal|"wxy"
block|,
literal|"z"
block|}
argument_list|)
expr_stmt|;
name|assertAnalyzesToReuse
argument_list|(
name|a
argument_list|,
literal|"aba4cadaba-Shazam"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"aba"
block|,
literal|"cadaba"
block|,
literal|"shazam"
block|}
argument_list|)
expr_stmt|;
name|assertAnalyzesToReuse
argument_list|(
name|a
argument_list|,
literal|"break+on/Letters"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"break"
block|,
literal|"on"
block|,
literal|"letters"
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testKeyword
specifier|public
name|void
name|testKeyword
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|a
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|MockAnalyzer
operator|.
name|KEYWORD
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
literal|"a-bc123 defg+hijklmn567opqrstuv78wxy_z "
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a-bc123 defg+hijklmn567opqrstuv78wxy_z "
block|}
argument_list|)
expr_stmt|;
name|assertAnalyzesToReuse
argument_list|(
name|a
argument_list|,
literal|"aba4cadaba-Shazam"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"aba4cadaba-Shazam"
block|}
argument_list|)
expr_stmt|;
name|assertAnalyzesToReuse
argument_list|(
name|a
argument_list|,
literal|"break+on/Nothing"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"break+on/Nothing"
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
