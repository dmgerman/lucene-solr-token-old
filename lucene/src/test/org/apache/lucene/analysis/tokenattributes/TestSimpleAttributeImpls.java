begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.tokenattributes
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Payload
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeImpl
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeSource
operator|.
name|AttributeFactory
import|;
end_import
begin_class
annotation|@
name|Deprecated
DECL|class|TestSimpleAttributeImpls
specifier|public
class|class
name|TestSimpleAttributeImpls
extends|extends
name|LuceneTestCase
block|{
DECL|method|testFlagsAttribute
specifier|public
name|void
name|testFlagsAttribute
parameter_list|()
throws|throws
name|Exception
block|{
name|FlagsAttributeImpl
name|att
init|=
operator|new
name|FlagsAttributeImpl
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|att
operator|.
name|getFlags
argument_list|()
argument_list|)
expr_stmt|;
name|att
operator|.
name|setFlags
argument_list|(
literal|1234
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"flags=1234"
argument_list|,
name|att
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|FlagsAttributeImpl
name|att2
init|=
operator|(
name|FlagsAttributeImpl
operator|)
name|assertCloneIsEqual
argument_list|(
name|att
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1234
argument_list|,
name|att2
operator|.
name|getFlags
argument_list|()
argument_list|)
expr_stmt|;
name|att2
operator|=
operator|(
name|FlagsAttributeImpl
operator|)
name|assertCopyIsEqual
argument_list|(
name|att
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1234
argument_list|,
name|att2
operator|.
name|getFlags
argument_list|()
argument_list|)
expr_stmt|;
name|att
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|att
operator|.
name|getFlags
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPositionIncrementAttribute
specifier|public
name|void
name|testPositionIncrementAttribute
parameter_list|()
throws|throws
name|Exception
block|{
name|PositionIncrementAttributeImpl
name|att
init|=
operator|new
name|PositionIncrementAttributeImpl
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|att
operator|.
name|getPositionIncrement
argument_list|()
argument_list|)
expr_stmt|;
name|att
operator|.
name|setPositionIncrement
argument_list|(
literal|1234
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"positionIncrement=1234"
argument_list|,
name|att
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|PositionIncrementAttributeImpl
name|att2
init|=
operator|(
name|PositionIncrementAttributeImpl
operator|)
name|assertCloneIsEqual
argument_list|(
name|att
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1234
argument_list|,
name|att2
operator|.
name|getPositionIncrement
argument_list|()
argument_list|)
expr_stmt|;
name|att2
operator|=
operator|(
name|PositionIncrementAttributeImpl
operator|)
name|assertCopyIsEqual
argument_list|(
name|att
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1234
argument_list|,
name|att2
operator|.
name|getPositionIncrement
argument_list|()
argument_list|)
expr_stmt|;
name|att
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|att
operator|.
name|getPositionIncrement
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTypeAttribute
specifier|public
name|void
name|testTypeAttribute
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeAttributeImpl
name|att
init|=
operator|new
name|TypeAttributeImpl
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|TypeAttribute
operator|.
name|DEFAULT_TYPE
argument_list|,
name|att
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|att
operator|.
name|setType
argument_list|(
literal|"hallo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"type=hallo"
argument_list|,
name|att
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|TypeAttributeImpl
name|att2
init|=
operator|(
name|TypeAttributeImpl
operator|)
name|assertCloneIsEqual
argument_list|(
name|att
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"hallo"
argument_list|,
name|att2
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|att2
operator|=
operator|(
name|TypeAttributeImpl
operator|)
name|assertCopyIsEqual
argument_list|(
name|att
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hallo"
argument_list|,
name|att2
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|att
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeAttribute
operator|.
name|DEFAULT_TYPE
argument_list|,
name|att
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPayloadAttribute
specifier|public
name|void
name|testPayloadAttribute
parameter_list|()
throws|throws
name|Exception
block|{
name|PayloadAttributeImpl
name|att
init|=
operator|new
name|PayloadAttributeImpl
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|att
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|Payload
name|pl
init|=
operator|new
name|Payload
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
argument_list|)
decl_stmt|;
name|att
operator|.
name|setPayload
argument_list|(
name|pl
argument_list|)
expr_stmt|;
name|PayloadAttributeImpl
name|att2
init|=
operator|(
name|PayloadAttributeImpl
operator|)
name|assertCloneIsEqual
argument_list|(
name|att
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|pl
argument_list|,
name|att2
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|pl
argument_list|,
name|att2
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|att2
operator|=
operator|(
name|PayloadAttributeImpl
operator|)
name|assertCopyIsEqual
argument_list|(
name|att
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pl
argument_list|,
name|att2
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|pl
argument_list|,
name|att2
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|att
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|att
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testOffsetAttribute
specifier|public
name|void
name|testOffsetAttribute
parameter_list|()
throws|throws
name|Exception
block|{
name|OffsetAttributeImpl
name|att
init|=
operator|new
name|OffsetAttributeImpl
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|att
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|att
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|att
operator|.
name|setOffset
argument_list|(
literal|12
argument_list|,
literal|34
argument_list|)
expr_stmt|;
comment|// no string test here, because order unknown
name|OffsetAttributeImpl
name|att2
init|=
operator|(
name|OffsetAttributeImpl
operator|)
name|assertCloneIsEqual
argument_list|(
name|att
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|att2
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|34
argument_list|,
name|att2
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|att2
operator|=
operator|(
name|OffsetAttributeImpl
operator|)
name|assertCopyIsEqual
argument_list|(
name|att
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|att2
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|34
argument_list|,
name|att2
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
name|att
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|att
operator|.
name|startOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|att
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testKeywordAttribute
specifier|public
name|void
name|testKeywordAttribute
parameter_list|()
block|{
name|AttributeImpl
name|attrImpl
init|=
name|AttributeFactory
operator|.
name|DEFAULT_ATTRIBUTE_FACTORY
operator|.
name|createAttributeInstance
argument_list|(
name|KeywordAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|KeywordAttributeImpl
operator|.
name|class
argument_list|,
name|attrImpl
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|KeywordAttributeImpl
name|att
init|=
operator|(
name|KeywordAttributeImpl
operator|)
name|attrImpl
decl_stmt|;
name|assertFalse
argument_list|(
name|att
operator|.
name|isKeyword
argument_list|()
argument_list|)
expr_stmt|;
name|att
operator|.
name|setKeyword
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|att
operator|.
name|isKeyword
argument_list|()
argument_list|)
expr_stmt|;
name|KeywordAttributeImpl
name|assertCloneIsEqual
init|=
operator|(
name|KeywordAttributeImpl
operator|)
name|assertCloneIsEqual
argument_list|(
name|att
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|assertCloneIsEqual
operator|.
name|isKeyword
argument_list|()
argument_list|)
expr_stmt|;
name|assertCloneIsEqual
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|assertCloneIsEqual
operator|.
name|isKeyword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|att
operator|.
name|isKeyword
argument_list|()
argument_list|)
expr_stmt|;
name|att
operator|.
name|copyTo
argument_list|(
name|assertCloneIsEqual
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertCloneIsEqual
operator|.
name|isKeyword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|att
operator|.
name|isKeyword
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertCloneIsEqual
specifier|public
specifier|static
specifier|final
name|AttributeImpl
name|assertCloneIsEqual
parameter_list|(
name|AttributeImpl
name|att
parameter_list|)
block|{
name|AttributeImpl
name|clone
init|=
operator|(
name|AttributeImpl
operator|)
name|att
operator|.
name|clone
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Clone must be equal"
argument_list|,
name|att
argument_list|,
name|clone
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Clone's hashcode must be equal"
argument_list|,
name|att
operator|.
name|hashCode
argument_list|()
argument_list|,
name|clone
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|clone
return|;
block|}
DECL|method|assertCopyIsEqual
specifier|public
specifier|static
specifier|final
name|AttributeImpl
name|assertCopyIsEqual
parameter_list|(
name|AttributeImpl
name|att
parameter_list|)
throws|throws
name|Exception
block|{
name|AttributeImpl
name|copy
init|=
name|att
operator|.
name|getClass
argument_list|()
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|att
operator|.
name|copyTo
argument_list|(
name|copy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Copied instance must be equal"
argument_list|,
name|att
argument_list|,
name|copy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Copied instance's hashcode must be equal"
argument_list|,
name|att
operator|.
name|hashCode
argument_list|()
argument_list|,
name|copy
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|copy
return|;
block|}
block|}
end_class
end_unit
