begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_comment
comment|/**  * Tests for StringHelper.getVersionComparator  */
end_comment
begin_class
DECL|class|TestVersionComparator
specifier|public
class|class
name|TestVersionComparator
extends|extends
name|LuceneTestCase
block|{
DECL|method|testVersions
specifier|public
name|void
name|testVersions
parameter_list|()
block|{
name|Comparator
argument_list|<
name|String
argument_list|>
name|comp
init|=
name|StringHelper
operator|.
name|getVersionComparator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
literal|"1"
argument_list|,
literal|"1"
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
literal|"2"
argument_list|,
literal|"1"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
literal|"1.1"
argument_list|,
literal|"1"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
literal|"1"
argument_list|,
literal|"1.1"
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
literal|"1.1"
argument_list|,
literal|"1.1"
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
literal|"1.0"
argument_list|,
literal|"1"
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
literal|"1"
argument_list|,
literal|"1.0"
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
literal|"1.0.1"
argument_list|,
literal|"1.0"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
literal|"1.0"
argument_list|,
literal|"1.0.1"
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
literal|"1.02.003"
argument_list|,
literal|"1.2.3.0"
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
literal|"1.2.3.0"
argument_list|,
literal|"1.02.003"
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
literal|"1.10"
argument_list|,
literal|"1.9"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
literal|"1.9"
argument_list|,
literal|"1.10"
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
