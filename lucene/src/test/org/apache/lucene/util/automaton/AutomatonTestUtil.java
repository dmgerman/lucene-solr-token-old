begin_unit
begin_package
DECL|package|org.apache.lucene.util.automaton
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_class
DECL|class|AutomatonTestUtil
specifier|public
class|class
name|AutomatonTestUtil
block|{
comment|/** Returns random string, including full unicode range. */
DECL|method|randomRegexp
specifier|public
specifier|static
name|RegExp
name|randomRegexp
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|regexp
init|=
name|randomRegexpString
argument_list|(
name|r
argument_list|)
decl_stmt|;
comment|// we will also generate some undefined unicode queries
if|if
condition|(
operator|!
name|UnicodeUtil
operator|.
name|validUTF16String
argument_list|(
name|regexp
argument_list|)
condition|)
continue|continue;
try|try
block|{
comment|// NOTE: we parse-tostring-parse again, because we are
comment|// really abusing RegExp.toString() here (its just for debugging)
return|return
operator|new
name|RegExp
argument_list|(
operator|new
name|RegExp
argument_list|(
name|regexp
argument_list|,
name|RegExp
operator|.
name|NONE
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|RegExp
operator|.
name|NONE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
block|}
block|}
DECL|method|randomRegexpString
specifier|private
specifier|static
name|String
name|randomRegexpString
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
specifier|final
name|int
name|end
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
decl_stmt|;
if|if
condition|(
name|end
operator|==
literal|0
condition|)
block|{
comment|// allow 0 length
return|return
literal|""
return|;
block|}
specifier|final
name|char
index|[]
name|buffer
init|=
operator|new
name|char
index|[
name|end
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|int
name|t
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|11
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|t
operator|&&
name|i
operator|<
name|end
operator|-
literal|1
condition|)
block|{
comment|// Make a surrogate pair
comment|// High surrogate
name|buffer
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|char
operator|)
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|r
argument_list|,
literal|0xd800
argument_list|,
literal|0xdbff
argument_list|)
expr_stmt|;
comment|// Low surrogate
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|r
argument_list|,
literal|0xdc00
argument_list|,
literal|0xdfff
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|t
operator|<=
literal|1
condition|)
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|r
operator|.
name|nextInt
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
literal|2
operator|==
name|t
condition|)
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|r
argument_list|,
literal|0x80
argument_list|,
literal|0x800
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
literal|3
operator|==
name|t
condition|)
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|r
argument_list|,
literal|0x800
argument_list|,
literal|0xd7ff
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
literal|4
operator|==
name|t
condition|)
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|r
argument_list|,
literal|0xe000
argument_list|,
literal|0xffff
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
literal|5
operator|==
name|t
condition|)
name|buffer
index|[
name|i
index|]
operator|=
literal|'.'
expr_stmt|;
elseif|else
if|if
condition|(
literal|6
operator|==
name|t
condition|)
name|buffer
index|[
name|i
index|]
operator|=
literal|'?'
expr_stmt|;
elseif|else
if|if
condition|(
literal|7
operator|==
name|t
condition|)
name|buffer
index|[
name|i
index|]
operator|=
literal|'*'
expr_stmt|;
elseif|else
if|if
condition|(
literal|8
operator|==
name|t
condition|)
name|buffer
index|[
name|i
index|]
operator|=
literal|'+'
expr_stmt|;
elseif|else
if|if
condition|(
literal|9
operator|==
name|t
condition|)
name|buffer
index|[
name|i
index|]
operator|=
literal|'('
expr_stmt|;
elseif|else
if|if
condition|(
literal|10
operator|==
name|t
condition|)
name|buffer
index|[
name|i
index|]
operator|=
literal|')'
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|end
argument_list|)
return|;
block|}
comment|// picks a random int code point that this transition
comment|// accepts, avoiding the surrogates range since they are
comment|// "defined" in UTF32.  Don't call this on a transition
comment|// that only accepts UTF16 surrogate values!!
DECL|method|getRandomCodePoint
specifier|private
specifier|static
name|int
name|getRandomCodePoint
parameter_list|(
specifier|final
name|Random
name|r
parameter_list|,
specifier|final
name|Transition
name|t
parameter_list|)
block|{
return|return
name|t
operator|.
name|min
operator|+
name|r
operator|.
name|nextInt
argument_list|(
name|t
operator|.
name|max
operator|-
name|t
operator|.
name|min
operator|+
literal|1
argument_list|)
return|;
block|}
DECL|class|RandomAcceptedStrings
specifier|public
specifier|static
class|class
name|RandomAcceptedStrings
block|{
DECL|field|leadsToAccept
specifier|private
specifier|final
name|Map
argument_list|<
name|Transition
argument_list|,
name|Boolean
argument_list|>
name|leadsToAccept
decl_stmt|;
DECL|field|a
specifier|private
specifier|final
name|Automaton
name|a
decl_stmt|;
DECL|class|ArrivingTransition
specifier|private
specifier|static
class|class
name|ArrivingTransition
block|{
DECL|field|from
specifier|final
name|State
name|from
decl_stmt|;
DECL|field|t
specifier|final
name|Transition
name|t
decl_stmt|;
DECL|method|ArrivingTransition
specifier|public
name|ArrivingTransition
parameter_list|(
name|State
name|from
parameter_list|,
name|Transition
name|t
parameter_list|)
block|{
name|this
operator|.
name|from
operator|=
name|from
expr_stmt|;
name|this
operator|.
name|t
operator|=
name|t
expr_stmt|;
block|}
block|}
DECL|method|RandomAcceptedStrings
specifier|public
name|RandomAcceptedStrings
parameter_list|(
name|Automaton
name|a
parameter_list|)
block|{
name|this
operator|.
name|a
operator|=
name|a
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|isSingleton
argument_list|()
condition|)
block|{
name|leadsToAccept
operator|=
literal|null
expr_stmt|;
return|return;
block|}
comment|// must use IdentityHashmap because two Transitions w/
comment|// different start nodes can be considered the same
name|leadsToAccept
operator|=
operator|new
name|IdentityHashMap
argument_list|<
name|Transition
argument_list|,
name|Boolean
argument_list|>
argument_list|()
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|State
argument_list|,
name|List
argument_list|<
name|ArrivingTransition
argument_list|>
argument_list|>
name|allArriving
init|=
operator|new
name|HashMap
argument_list|<
name|State
argument_list|,
name|List
argument_list|<
name|ArrivingTransition
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|LinkedList
argument_list|<
name|State
argument_list|>
name|q
init|=
operator|new
name|LinkedList
argument_list|<
name|State
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|State
argument_list|>
name|seen
init|=
operator|new
name|HashSet
argument_list|<
name|State
argument_list|>
argument_list|()
decl_stmt|;
comment|// reverse map the transitions, so we can quickly look
comment|// up all arriving transitions to a given state
for|for
control|(
name|State
name|s
range|:
name|a
operator|.
name|getNumberedStates
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|numTransitions
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Transition
name|t
init|=
name|s
operator|.
name|transitionsArray
index|[
name|i
index|]
decl_stmt|;
name|List
argument_list|<
name|ArrivingTransition
argument_list|>
name|tl
init|=
name|allArriving
operator|.
name|get
argument_list|(
name|t
operator|.
name|to
argument_list|)
decl_stmt|;
if|if
condition|(
name|tl
operator|==
literal|null
condition|)
block|{
name|tl
operator|=
operator|new
name|ArrayList
argument_list|<
name|ArrivingTransition
argument_list|>
argument_list|()
expr_stmt|;
name|allArriving
operator|.
name|put
argument_list|(
name|t
operator|.
name|to
argument_list|,
name|tl
argument_list|)
expr_stmt|;
block|}
name|tl
operator|.
name|add
argument_list|(
operator|new
name|ArrivingTransition
argument_list|(
name|s
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|.
name|accept
condition|)
block|{
name|q
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|seen
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Breadth-first search, from accept states,
comment|// backwards:
while|while
condition|(
operator|!
name|q
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|State
name|s
init|=
name|q
operator|.
name|removeFirst
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ArrivingTransition
argument_list|>
name|arriving
init|=
name|allArriving
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|arriving
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ArrivingTransition
name|at
range|:
name|arriving
control|)
block|{
specifier|final
name|State
name|from
init|=
name|at
operator|.
name|from
decl_stmt|;
if|if
condition|(
operator|!
name|seen
operator|.
name|contains
argument_list|(
name|from
argument_list|)
condition|)
block|{
name|q
operator|.
name|add
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|seen
operator|.
name|add
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|leadsToAccept
operator|.
name|put
argument_list|(
name|at
operator|.
name|t
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|getRandomAcceptedString
specifier|public
name|int
index|[]
name|getRandomAcceptedString
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|soFar
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|isSingleton
argument_list|()
condition|)
block|{
comment|// accepts only one
specifier|final
name|String
name|s
init|=
name|a
operator|.
name|singleton
decl_stmt|;
name|int
name|charUpto
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|charUpto
operator|<
name|s
operator|.
name|length
argument_list|()
condition|)
block|{
specifier|final
name|int
name|cp
init|=
name|s
operator|.
name|codePointAt
argument_list|(
name|charUpto
argument_list|)
decl_stmt|;
name|charUpto
operator|+=
name|Character
operator|.
name|charCount
argument_list|(
name|cp
argument_list|)
expr_stmt|;
name|soFar
operator|.
name|add
argument_list|(
name|cp
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|State
name|s
init|=
name|a
operator|.
name|initial
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|s
operator|.
name|accept
condition|)
block|{
if|if
condition|(
name|s
operator|.
name|numTransitions
operator|==
literal|0
condition|)
block|{
comment|// stop now
break|break;
block|}
else|else
block|{
if|if
condition|(
name|r
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
name|s
operator|.
name|numTransitions
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"this automaton has dead states"
argument_list|)
throw|;
block|}
name|boolean
name|cheat
init|=
name|r
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
specifier|final
name|Transition
name|t
decl_stmt|;
if|if
condition|(
name|cheat
condition|)
block|{
comment|// pick a transition that we know is the fastest
comment|// path to an accept state
name|List
argument_list|<
name|Transition
argument_list|>
name|toAccept
init|=
operator|new
name|ArrayList
argument_list|<
name|Transition
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|numTransitions
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Transition
name|t0
init|=
name|s
operator|.
name|transitionsArray
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|leadsToAccept
operator|.
name|containsKey
argument_list|(
name|t0
argument_list|)
condition|)
block|{
name|toAccept
operator|.
name|add
argument_list|(
name|t0
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|toAccept
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// this is OK -- it means we jumped into a cycle
name|t
operator|=
name|s
operator|.
name|transitionsArray
index|[
name|r
operator|.
name|nextInt
argument_list|(
name|s
operator|.
name|numTransitions
argument_list|)
index|]
expr_stmt|;
block|}
else|else
block|{
name|t
operator|=
name|toAccept
operator|.
name|get
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|toAccept
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|t
operator|=
name|s
operator|.
name|transitionsArray
index|[
name|r
operator|.
name|nextInt
argument_list|(
name|s
operator|.
name|numTransitions
argument_list|)
index|]
expr_stmt|;
block|}
name|soFar
operator|.
name|add
argument_list|(
name|getRandomCodePoint
argument_list|(
name|r
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
name|t
operator|.
name|to
expr_stmt|;
block|}
block|}
return|return
name|ArrayUtil
operator|.
name|toIntArray
argument_list|(
name|soFar
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
