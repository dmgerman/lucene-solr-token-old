begin_unit
begin_package
DECL|package|org.apache.lucene.util.automaton
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|_TestUtil
import|;
end_import
begin_class
DECL|class|AutomatonTestUtil
specifier|public
class|class
name|AutomatonTestUtil
block|{
comment|/** Returns random string, including full unicode range. */
DECL|method|randomRegexp
specifier|public
specifier|static
name|RegExp
name|randomRegexp
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|regexp
init|=
name|randomRegexpString
argument_list|(
name|r
argument_list|)
decl_stmt|;
comment|// we will also generate some undefined unicode queries
if|if
condition|(
operator|!
name|UnicodeUtil
operator|.
name|validUTF16String
argument_list|(
name|regexp
argument_list|)
condition|)
continue|continue;
try|try
block|{
return|return
operator|new
name|RegExp
argument_list|(
name|regexp
argument_list|,
name|RegExp
operator|.
name|NONE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
block|}
block|}
DECL|method|randomRegexpString
specifier|private
specifier|static
name|String
name|randomRegexpString
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
specifier|final
name|int
name|end
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
decl_stmt|;
if|if
condition|(
name|end
operator|==
literal|0
condition|)
block|{
comment|// allow 0 length
return|return
literal|""
return|;
block|}
specifier|final
name|char
index|[]
name|buffer
init|=
operator|new
name|char
index|[
name|end
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|int
name|t
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|11
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|t
operator|&&
name|i
operator|<
name|end
operator|-
literal|1
condition|)
block|{
comment|// Make a surrogate pair
comment|// High surrogate
name|buffer
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|char
operator|)
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|r
argument_list|,
literal|0xd800
argument_list|,
literal|0xdbff
argument_list|)
expr_stmt|;
comment|// Low surrogate
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|r
argument_list|,
literal|0xdc00
argument_list|,
literal|0xdfff
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|t
operator|<=
literal|1
condition|)
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|r
operator|.
name|nextInt
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
literal|2
operator|==
name|t
condition|)
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|r
argument_list|,
literal|0x80
argument_list|,
literal|0x800
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
literal|3
operator|==
name|t
condition|)
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|r
argument_list|,
literal|0x800
argument_list|,
literal|0xd7ff
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
literal|4
operator|==
name|t
condition|)
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|_TestUtil
operator|.
name|nextInt
argument_list|(
name|r
argument_list|,
literal|0xe000
argument_list|,
literal|0xffff
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
literal|5
operator|==
name|t
condition|)
name|buffer
index|[
name|i
index|]
operator|=
literal|'.'
expr_stmt|;
elseif|else
if|if
condition|(
literal|6
operator|==
name|t
condition|)
name|buffer
index|[
name|i
index|]
operator|=
literal|'?'
expr_stmt|;
elseif|else
if|if
condition|(
literal|7
operator|==
name|t
condition|)
name|buffer
index|[
name|i
index|]
operator|=
literal|'*'
expr_stmt|;
elseif|else
if|if
condition|(
literal|8
operator|==
name|t
condition|)
name|buffer
index|[
name|i
index|]
operator|=
literal|'+'
expr_stmt|;
elseif|else
if|if
condition|(
literal|9
operator|==
name|t
condition|)
name|buffer
index|[
name|i
index|]
operator|=
literal|'('
expr_stmt|;
elseif|else
if|if
condition|(
literal|10
operator|==
name|t
condition|)
name|buffer
index|[
name|i
index|]
operator|=
literal|')'
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|end
argument_list|)
return|;
block|}
block|}
end_class
end_unit
