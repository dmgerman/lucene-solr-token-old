begin_unit
begin_package
DECL|package|org.apache.lucene.util.automaton
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_comment
comment|/**   * This test builds some randomish NFA/DFA and minimizes them.  * the minimal and non-minimal are compared to ensure they are the same.  */
end_comment
begin_class
DECL|class|TestMinimize
specifier|public
class|class
name|TestMinimize
extends|extends
name|LuceneTestCase
block|{
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
block|{
name|int
name|num
init|=
literal|10000
operator|*
name|RANDOM_MULTIPLIER
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|Automaton
name|a
init|=
name|randomishAutomaton
argument_list|()
decl_stmt|;
name|Automaton
name|b
init|=
name|a
operator|.
name|clone
argument_list|()
decl_stmt|;
name|MinimizationOperations
operator|.
name|minimize
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|BasicOperations
operator|.
name|sameLanguage
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|randomishAutomaton
specifier|private
name|Automaton
name|randomishAutomaton
parameter_list|()
block|{
comment|// get two random Automata from regexps
name|Automaton
name|a1
init|=
name|AutomatonTestUtil
operator|.
name|randomRegexp
argument_list|(
name|random
argument_list|)
operator|.
name|toAutomaton
argument_list|()
decl_stmt|;
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
name|a1
operator|=
name|BasicOperations
operator|.
name|complement
argument_list|(
name|a1
argument_list|)
expr_stmt|;
name|Automaton
name|a2
init|=
name|AutomatonTestUtil
operator|.
name|randomRegexp
argument_list|(
name|random
argument_list|)
operator|.
name|toAutomaton
argument_list|()
decl_stmt|;
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
name|a2
operator|=
name|BasicOperations
operator|.
name|complement
argument_list|(
name|a2
argument_list|)
expr_stmt|;
comment|// combine them in random ways
switch|switch
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
return|return
name|BasicOperations
operator|.
name|concatenate
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|BasicOperations
operator|.
name|union
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|)
return|;
default|default:
return|return
name|BasicOperations
operator|.
name|minus
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
