begin_unit
begin_package
DECL|package|org.apache.lucene.util.automaton
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_class
DECL|class|TestBasicOperations
specifier|public
class|class
name|TestBasicOperations
extends|extends
name|LuceneTestCase
block|{
comment|/** Test optimization to concatenate() */
DECL|method|testSingletonConcatenate
specifier|public
name|void
name|testSingletonConcatenate
parameter_list|()
block|{
name|Automaton
name|singleton
init|=
name|BasicAutomata
operator|.
name|makeString
argument_list|(
literal|"prefix"
argument_list|)
decl_stmt|;
name|Automaton
name|expandedSingleton
init|=
name|singleton
operator|.
name|cloneExpanded
argument_list|()
decl_stmt|;
name|Automaton
name|other
init|=
name|BasicAutomata
operator|.
name|makeCharRange
argument_list|(
literal|'5'
argument_list|,
literal|'7'
argument_list|)
decl_stmt|;
name|Automaton
name|concat
init|=
name|BasicOperations
operator|.
name|concatenate
argument_list|(
name|singleton
argument_list|,
name|other
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|concat
operator|.
name|isDeterministic
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BasicOperations
operator|.
name|concatenate
argument_list|(
name|expandedSingleton
argument_list|,
name|other
argument_list|)
argument_list|,
name|concat
argument_list|)
expr_stmt|;
block|}
comment|/** Test optimization to concatenate() to an NFA */
DECL|method|testSingletonNFAConcatenate
specifier|public
name|void
name|testSingletonNFAConcatenate
parameter_list|()
block|{
name|Automaton
name|singleton
init|=
name|BasicAutomata
operator|.
name|makeString
argument_list|(
literal|"prefix"
argument_list|)
decl_stmt|;
name|Automaton
name|expandedSingleton
init|=
name|singleton
operator|.
name|cloneExpanded
argument_list|()
decl_stmt|;
comment|// an NFA (two transitions for 't' from initial state)
name|Automaton
name|nfa
init|=
name|BasicOperations
operator|.
name|union
argument_list|(
name|BasicAutomata
operator|.
name|makeString
argument_list|(
literal|"this"
argument_list|)
argument_list|,
name|BasicAutomata
operator|.
name|makeString
argument_list|(
literal|"three"
argument_list|)
argument_list|)
decl_stmt|;
name|Automaton
name|concat
init|=
name|BasicOperations
operator|.
name|concatenate
argument_list|(
name|singleton
argument_list|,
name|nfa
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|concat
operator|.
name|isDeterministic
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BasicOperations
operator|.
name|concatenate
argument_list|(
name|expandedSingleton
argument_list|,
name|nfa
argument_list|)
argument_list|,
name|concat
argument_list|)
expr_stmt|;
block|}
comment|/** Test optimization to concatenate() with empty String */
DECL|method|testEmptySingletonConcatenate
specifier|public
name|void
name|testEmptySingletonConcatenate
parameter_list|()
block|{
name|Automaton
name|singleton
init|=
name|BasicAutomata
operator|.
name|makeString
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|Automaton
name|expandedSingleton
init|=
name|singleton
operator|.
name|cloneExpanded
argument_list|()
decl_stmt|;
name|Automaton
name|other
init|=
name|BasicAutomata
operator|.
name|makeCharRange
argument_list|(
literal|'5'
argument_list|,
literal|'7'
argument_list|)
decl_stmt|;
name|Automaton
name|concat1
init|=
name|BasicOperations
operator|.
name|concatenate
argument_list|(
name|expandedSingleton
argument_list|,
name|other
argument_list|)
decl_stmt|;
name|Automaton
name|concat2
init|=
name|BasicOperations
operator|.
name|concatenate
argument_list|(
name|singleton
argument_list|,
name|other
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|concat2
operator|.
name|isDeterministic
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|concat1
argument_list|,
name|concat2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|other
argument_list|,
name|concat1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|other
argument_list|,
name|concat2
argument_list|)
expr_stmt|;
block|}
comment|/** Test optimization to concatenate() with empty String to an NFA */
DECL|method|testEmptySingletonNFAConcatenate
specifier|public
name|void
name|testEmptySingletonNFAConcatenate
parameter_list|()
block|{
name|Automaton
name|singleton
init|=
name|BasicAutomata
operator|.
name|makeString
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|Automaton
name|expandedSingleton
init|=
name|singleton
operator|.
name|cloneExpanded
argument_list|()
decl_stmt|;
comment|// an NFA (two transitions for 't' from initial state)
name|Automaton
name|nfa
init|=
name|BasicOperations
operator|.
name|union
argument_list|(
name|BasicAutomata
operator|.
name|makeString
argument_list|(
literal|"this"
argument_list|)
argument_list|,
name|BasicAutomata
operator|.
name|makeString
argument_list|(
literal|"three"
argument_list|)
argument_list|)
decl_stmt|;
name|Automaton
name|concat1
init|=
name|BasicOperations
operator|.
name|concatenate
argument_list|(
name|expandedSingleton
argument_list|,
name|nfa
argument_list|)
decl_stmt|;
name|Automaton
name|concat2
init|=
name|BasicOperations
operator|.
name|concatenate
argument_list|(
name|singleton
argument_list|,
name|nfa
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|concat2
operator|.
name|isDeterministic
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|concat1
argument_list|,
name|concat2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nfa
argument_list|,
name|concat1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nfa
argument_list|,
name|concat2
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
