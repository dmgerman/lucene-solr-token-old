begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_comment
comment|/*  * Some of this code came from the excellent Unicode  * conversion examples from:  *  *   http://www.unicode.org/Public/PROGRAMS/CVTUTF  *  * Full Copyright for that code follows: */
end_comment
begin_comment
comment|/*  * Copyright 2001-2004 Unicode, Inc.  *   * Disclaimer  *   * This source code is provided as is by Unicode, Inc. No claims are  * made as to fitness for any particular purpose. No warranties of any  * kind are expressed or implied. The recipient agrees to determine  * applicability of information provided. If this file has been  * purchased on magnetic or optical media from Unicode, Inc., the  * sole remedy for any claim will be exchange of defective media  * within 90 days of receipt.  *   * Limitations on Rights to Redistribute This Code  *   * Unicode, Inc. hereby grants the right to freely use the information  * supplied in this file in the creation of products supporting the  * Unicode Standard, and to make copies of this file in any form  * for internal or external distribution as long as this notice  * remains attached.  */
end_comment
begin_class
DECL|class|TestUnicodeUtil
specifier|public
class|class
name|TestUnicodeUtil
extends|extends
name|LuceneTestCase
block|{
DECL|method|testNextValidUTF16String
specifier|public
name|void
name|testNextValidUTF16String
parameter_list|()
block|{
comment|// valid UTF-16
name|assertEquals
argument_list|(
literal|"dogs"
argument_list|,
name|UnicodeUtil
operator|.
name|nextValidUTF16String
argument_list|(
literal|"dogs"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dogs\uD802\uDC02"
argument_list|,
name|UnicodeUtil
operator|.
name|nextValidUTF16String
argument_list|(
literal|"dogs\uD802\uDC02"
argument_list|)
argument_list|)
expr_stmt|;
comment|// an illegal combination, where we have not yet enumerated into the supp
comment|// plane so we increment to H + \uDC00 (the lowest possible trail surrogate)
name|assertEquals
argument_list|(
literal|"dogs\uD801\uDC00"
argument_list|,
name|UnicodeUtil
operator|.
name|nextValidUTF16String
argument_list|(
literal|"dogs\uD801"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dogs\uD801\uDC00"
argument_list|,
name|UnicodeUtil
operator|.
name|nextValidUTF16String
argument_list|(
literal|"dogs\uD801b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dogs\uD801\uDC00"
argument_list|,
name|UnicodeUtil
operator|.
name|nextValidUTF16String
argument_list|(
literal|"dogs\uD801\uD800"
argument_list|)
argument_list|)
expr_stmt|;
comment|// an illegal combination where we have already enumerated the trail
comment|// we must increment the lead and start the trail back at the beginning.
name|assertEquals
argument_list|(
literal|"dogs\uD802\uDC00"
argument_list|,
name|UnicodeUtil
operator|.
name|nextValidUTF16String
argument_list|(
literal|"dogs\uD801\uE001"
argument_list|)
argument_list|)
expr_stmt|;
comment|// an illegal combination where we have exhausted the supp plane
comment|// we must now move to the lower bmp.
name|assertEquals
argument_list|(
literal|"dogs\uE000"
argument_list|,
name|UnicodeUtil
operator|.
name|nextValidUTF16String
argument_list|(
literal|"dogs\uDBFF\uE001"
argument_list|)
argument_list|)
expr_stmt|;
comment|// an unpaired trail surrogate. this is invalid when not preceded by a lead
comment|// surrogate. in this case we have to bump to \uE000 (the lowest possible
comment|// "upper BMP")
name|assertEquals
argument_list|(
literal|"dogs\uE000"
argument_list|,
name|UnicodeUtil
operator|.
name|nextValidUTF16String
argument_list|(
literal|"dogs\uDC00"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\uE000"
argument_list|,
name|UnicodeUtil
operator|.
name|nextValidUTF16String
argument_list|(
literal|"\uDC00dogs"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCodePointCount
specifier|public
name|void
name|testCodePointCount
parameter_list|()
block|{
specifier|final
name|Random
name|r
init|=
name|newRandom
argument_list|()
decl_stmt|;
name|BytesRef
name|utf8
init|=
operator|new
name|BytesRef
argument_list|(
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50000
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|s
init|=
name|_TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|UnicodeUtil
operator|.
name|UTF16toUTF8
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|,
name|utf8
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|codePointCount
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|UnicodeUtil
operator|.
name|codePointCount
argument_list|(
name|utf8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testUTF8toUTF32
specifier|public
name|void
name|testUTF8toUTF32
parameter_list|()
block|{
specifier|final
name|Random
name|r
init|=
name|newRandom
argument_list|()
decl_stmt|;
name|BytesRef
name|utf8
init|=
operator|new
name|BytesRef
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|IntsRef
name|utf32
init|=
operator|new
name|IntsRef
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|int
index|[]
name|codePoints
init|=
operator|new
name|int
index|[
literal|20
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50000
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|s
init|=
name|_TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|UnicodeUtil
operator|.
name|UTF16toUTF8
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|,
name|utf8
argument_list|)
expr_stmt|;
name|UnicodeUtil
operator|.
name|UTF8toUTF32
argument_list|(
name|utf8
argument_list|,
name|utf32
argument_list|)
expr_stmt|;
name|int
name|charUpto
init|=
literal|0
decl_stmt|;
name|int
name|intUpto
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|charUpto
operator|<
name|s
operator|.
name|length
argument_list|()
condition|)
block|{
specifier|final
name|int
name|cp
init|=
name|s
operator|.
name|codePointAt
argument_list|(
name|charUpto
argument_list|)
decl_stmt|;
name|codePoints
index|[
name|intUpto
operator|++
index|]
operator|=
name|cp
expr_stmt|;
name|charUpto
operator|+=
name|Character
operator|.
name|charCount
argument_list|(
name|cp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ArrayUtil
operator|.
name|equals
argument_list|(
name|codePoints
argument_list|,
literal|0
argument_list|,
name|utf32
operator|.
name|ints
argument_list|,
name|utf32
operator|.
name|offset
argument_list|,
name|intUpto
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"FAILED"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  char["
operator|+
name|j
operator|+
literal|"]="
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|intUpto
argument_list|,
name|utf32
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|intUpto
condition|;
name|j
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|utf32
operator|.
name|ints
index|[
name|j
index|]
argument_list|)
operator|+
literal|" vs "
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|codePoints
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"mismatch"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
