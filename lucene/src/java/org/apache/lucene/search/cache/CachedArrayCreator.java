begin_unit
begin_package
DECL|package|org.apache.lucene.search.cache
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|cache
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiFields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldCache
operator|.
name|Parser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|OpenBitSet
import|;
end_import
begin_class
DECL|class|CachedArrayCreator
specifier|public
specifier|abstract
class|class
name|CachedArrayCreator
parameter_list|<
name|T
extends|extends
name|CachedArray
parameter_list|>
extends|extends
name|EntryCreatorWithOptions
argument_list|<
name|T
argument_list|>
block|{
DECL|field|OPTION_VALIDATE
specifier|public
specifier|static
specifier|final
name|int
name|OPTION_VALIDATE
init|=
literal|1
decl_stmt|;
DECL|field|OPTION_CACHE_VALUES
specifier|public
specifier|static
specifier|final
name|int
name|OPTION_CACHE_VALUES
init|=
literal|2
decl_stmt|;
DECL|field|OPTION_CACHE_BITS
specifier|public
specifier|static
specifier|final
name|int
name|OPTION_CACHE_BITS
init|=
literal|4
decl_stmt|;
comment|// Composite Options Fields
DECL|field|CACHE_VALUES_AND_BITS
specifier|public
specifier|static
specifier|final
name|int
name|CACHE_VALUES_AND_BITS
init|=
name|OPTION_CACHE_VALUES
operator|^
name|OPTION_CACHE_BITS
decl_stmt|;
DECL|field|CACHE_VALUES_AND_BITS_VALIDATE
specifier|public
specifier|static
specifier|final
name|int
name|CACHE_VALUES_AND_BITS_VALIDATE
init|=
name|OPTION_CACHE_VALUES
operator|^
name|OPTION_CACHE_BITS
operator|^
name|OPTION_VALIDATE
decl_stmt|;
DECL|field|field
specifier|public
specifier|final
name|String
name|field
decl_stmt|;
DECL|method|CachedArrayCreator
specifier|public
name|CachedArrayCreator
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|super
argument_list|(
name|OPTION_CACHE_VALUES
operator|^
name|OPTION_VALIDATE
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field can not be null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
DECL|method|CachedArrayCreator
specifier|public
name|CachedArrayCreator
parameter_list|(
name|String
name|field
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|super
argument_list|(
name|flags
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field can not be null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
comment|/**    * Note that the 'flags' are not part of the key -- subsequent calls to the cache    * with different options will use the same cache entry.    */
annotation|@
name|Override
DECL|method|getCacheKey
specifier|public
name|EntryKey
name|getCacheKey
parameter_list|()
block|{
return|return
operator|new
name|SimpleEntryKey
argument_list|(
name|CachedArray
operator|.
name|class
argument_list|,
name|getArrayType
argument_list|()
argument_list|,
name|field
argument_list|)
return|;
comment|//return new Integer( CachedArrayCreator.class.hashCode() ^ getArrayType().hashCode() ^ field.hashCode() );
block|}
comment|/** Return the type that the array will hold */
DECL|method|getArrayType
specifier|public
specifier|abstract
name|Class
name|getArrayType
parameter_list|()
function_decl|;
DECL|method|getParser
specifier|public
specifier|abstract
name|Parser
name|getParser
parameter_list|()
function_decl|;
DECL|method|getSortTypeID
specifier|public
specifier|abstract
name|int
name|getSortTypeID
parameter_list|()
function_decl|;
DECL|method|assertSameParserAndResetCounts
specifier|protected
name|void
name|assertSameParserAndResetCounts
parameter_list|(
name|T
name|value
parameter_list|,
name|Parser
name|parser
parameter_list|)
block|{
name|int
name|parserHashCode
init|=
name|parser
operator|.
name|hashCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|parserHashCode
operator|!=
literal|null
operator|&&
name|value
operator|.
name|parserHashCode
operator|!=
name|parserHashCode
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Parser changed in subsequet call.  "
operator|+
name|value
operator|.
name|parserHashCode
operator|+
literal|" != "
operator|+
name|parserHashCode
operator|+
literal|" :: "
operator|+
name|parser
argument_list|)
throw|;
block|}
name|value
operator|.
name|parserHashCode
operator|=
name|parserHashCode
expr_stmt|;
name|value
operator|.
name|numDocs
operator|=
name|value
operator|.
name|numTerms
operator|=
literal|0
expr_stmt|;
block|}
comment|/**    * Utility function to help check what bits are valid    */
DECL|method|checkMatchAllBits
specifier|protected
name|Bits
name|checkMatchAllBits
parameter_list|(
name|Bits
name|deleted
parameter_list|,
name|OpenBitSet
name|valid
parameter_list|,
name|int
name|maxDocs
parameter_list|,
name|int
name|numDocs
parameter_list|)
block|{
if|if
condition|(
name|numDocs
operator|!=
name|maxDocs
condition|)
block|{
if|if
condition|(
name|hasOption
argument_list|(
name|OPTION_CACHE_BITS
argument_list|)
condition|)
block|{
if|if
condition|(
name|deleted
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDocs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|valid
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
return|return
name|valid
return|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDocs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|deleted
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|&&
operator|!
name|valid
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
return|return
name|valid
return|;
block|}
block|}
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
operator|new
name|Bits
operator|.
name|MatchAllBits
argument_list|(
name|maxDocs
argument_list|)
return|;
block|}
DECL|method|fillValidBits
specifier|public
name|void
name|fillValidBits
parameter_list|(
name|T
name|vals
parameter_list|,
name|IndexReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|vals
operator|.
name|numDocs
operator|=
name|vals
operator|.
name|numTerms
operator|=
literal|0
expr_stmt|;
name|Terms
name|terms
init|=
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
specifier|final
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|Bits
name|delDocs
init|=
name|MultiFields
operator|.
name|getDeletedDocs
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|OpenBitSet
name|validBits
init|=
operator|new
name|OpenBitSet
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
name|DocsEnum
name|docs
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|BytesRef
name|term
init|=
name|termsEnum
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|docs
operator|=
name|termsEnum
operator|.
name|docs
argument_list|(
name|delDocs
argument_list|,
name|docs
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|int
name|docID
init|=
name|docs
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|docID
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
break|break;
block|}
name|validBits
operator|.
name|set
argument_list|(
name|docID
argument_list|)
expr_stmt|;
name|vals
operator|.
name|numDocs
operator|++
expr_stmt|;
block|}
name|vals
operator|.
name|numTerms
operator|++
expr_stmt|;
block|}
name|vals
operator|.
name|valid
operator|=
name|checkMatchAllBits
argument_list|(
name|delDocs
argument_list|,
name|validBits
argument_list|,
name|vals
operator|.
name|numDocs
argument_list|,
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|vals
operator|.
name|numDocs
operator|<
literal|1
condition|)
block|{
name|vals
operator|.
name|valid
operator|=
operator|new
name|Bits
operator|.
name|MatchNoBits
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
