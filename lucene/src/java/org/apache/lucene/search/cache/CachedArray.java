begin_unit
begin_package
DECL|package|org.apache.lucene.search.cache
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|cache
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_class
DECL|class|CachedArray
specifier|public
specifier|abstract
class|class
name|CachedArray
block|{
DECL|field|parserHashCode
specifier|public
name|Integer
name|parserHashCode
decl_stmt|;
comment|// a flag to make sure you don't change what you are asking for in subsequent requests
DECL|field|numDocs
specifier|public
name|int
name|numDocs
decl_stmt|;
DECL|field|numTerms
specifier|public
name|int
name|numTerms
decl_stmt|;
comment|/**    * NOTE: these Bits may have false positives for deleted documents.  That is,    * Documents that are deleted may be marked as valid but the array value is not.    */
DECL|field|valid
specifier|public
name|Bits
name|valid
decl_stmt|;
DECL|method|CachedArray
specifier|public
name|CachedArray
parameter_list|()
block|{
name|this
operator|.
name|parserHashCode
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|numDocs
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|numTerms
operator|=
literal|0
expr_stmt|;
block|}
comment|/**    * @return the native array    */
DECL|method|getRawArray
specifier|public
specifier|abstract
name|Object
name|getRawArray
parameter_list|()
function_decl|;
comment|//-------------------------------------------------------------
comment|// Concrete Values
comment|//-------------------------------------------------------------
DECL|class|ByteValues
specifier|public
specifier|static
class|class
name|ByteValues
extends|extends
name|CachedArray
block|{
DECL|field|values
specifier|public
name|byte
index|[]
name|values
init|=
literal|null
decl_stmt|;
DECL|method|getRawArray
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getRawArray
parameter_list|()
block|{
return|return
name|values
return|;
block|}
block|}
empty_stmt|;
DECL|class|ShortValues
specifier|public
specifier|static
class|class
name|ShortValues
extends|extends
name|CachedArray
block|{
DECL|field|values
specifier|public
name|short
index|[]
name|values
init|=
literal|null
decl_stmt|;
DECL|method|getRawArray
annotation|@
name|Override
specifier|public
name|short
index|[]
name|getRawArray
parameter_list|()
block|{
return|return
name|values
return|;
block|}
block|}
empty_stmt|;
DECL|class|IntValues
specifier|public
specifier|static
class|class
name|IntValues
extends|extends
name|CachedArray
block|{
DECL|field|values
specifier|public
name|int
index|[]
name|values
init|=
literal|null
decl_stmt|;
DECL|method|getRawArray
annotation|@
name|Override
specifier|public
name|int
index|[]
name|getRawArray
parameter_list|()
block|{
return|return
name|values
return|;
block|}
block|}
empty_stmt|;
DECL|class|FloatValues
specifier|public
specifier|static
class|class
name|FloatValues
extends|extends
name|CachedArray
block|{
DECL|field|values
specifier|public
name|float
index|[]
name|values
init|=
literal|null
decl_stmt|;
DECL|method|getRawArray
annotation|@
name|Override
specifier|public
name|float
index|[]
name|getRawArray
parameter_list|()
block|{
return|return
name|values
return|;
block|}
block|}
empty_stmt|;
DECL|class|LongValues
specifier|public
specifier|static
class|class
name|LongValues
extends|extends
name|CachedArray
block|{
DECL|field|values
specifier|public
name|long
index|[]
name|values
init|=
literal|null
decl_stmt|;
DECL|method|getRawArray
annotation|@
name|Override
specifier|public
name|long
index|[]
name|getRawArray
parameter_list|()
block|{
return|return
name|values
return|;
block|}
block|}
empty_stmt|;
DECL|class|DoubleValues
specifier|public
specifier|static
class|class
name|DoubleValues
extends|extends
name|CachedArray
block|{
DECL|field|values
specifier|public
name|double
index|[]
name|values
init|=
literal|null
decl_stmt|;
DECL|method|getRawArray
annotation|@
name|Override
specifier|public
name|double
index|[]
name|getRawArray
parameter_list|()
block|{
return|return
name|values
return|;
block|}
block|}
empty_stmt|;
block|}
end_class
end_unit
