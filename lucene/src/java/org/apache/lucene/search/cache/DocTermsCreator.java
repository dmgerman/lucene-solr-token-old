begin_unit
begin_package
DECL|package|org.apache.lucene.search.cache
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|cache
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiFields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldCache
operator|.
name|DocTerms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PagedBytes
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|GrowableWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import
begin_comment
comment|// TODO: this if DocTermsIndex was already created, we should share it...
end_comment
begin_class
DECL|class|DocTermsCreator
specifier|public
class|class
name|DocTermsCreator
extends|extends
name|EntryCreatorWithOptions
argument_list|<
name|DocTerms
argument_list|>
block|{
DECL|field|FASTER_BUT_MORE_RAM
specifier|public
specifier|static
specifier|final
name|int
name|FASTER_BUT_MORE_RAM
init|=
literal|2
decl_stmt|;
DECL|field|field
specifier|public
name|String
name|field
decl_stmt|;
DECL|method|DocTermsCreator
specifier|public
name|DocTermsCreator
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|super
argument_list|(
name|FASTER_BUT_MORE_RAM
argument_list|)
expr_stmt|;
comment|// By default turn on FASTER_BUT_MORE_RAM
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field can not be null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
DECL|method|DocTermsCreator
specifier|public
name|DocTermsCreator
parameter_list|(
name|String
name|field
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|super
argument_list|(
name|flags
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field can not be null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCacheKey
specifier|public
name|SimpleEntryKey
name|getCacheKey
parameter_list|()
block|{
return|return
operator|new
name|SimpleEntryKey
argument_list|(
name|DocTermsCreator
operator|.
name|class
argument_list|,
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|create
specifier|public
name|DocTerms
name|create
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|Terms
name|terms
init|=
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|reader
argument_list|,
name|field
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|fasterButMoreRAM
init|=
name|hasOption
argument_list|(
name|FASTER_BUT_MORE_RAM
argument_list|)
decl_stmt|;
specifier|final
name|int
name|termCountHardLimit
init|=
name|reader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
comment|// Holds the actual term data, expanded.
specifier|final
name|PagedBytes
name|bytes
init|=
operator|new
name|PagedBytes
argument_list|(
literal|15
argument_list|)
decl_stmt|;
name|int
name|startBPV
decl_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
comment|// Try for coarse estimate for number of bits; this
comment|// should be an underestimate most of the time, which
comment|// is fine -- GrowableWriter will reallocate as needed
name|long
name|numUniqueTerms
init|=
literal|0
decl_stmt|;
try|try
block|{
name|numUniqueTerms
operator|=
name|terms
operator|.
name|getUniqueTermCount
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|uoe
parameter_list|)
block|{
name|numUniqueTerms
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|numUniqueTerms
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|numUniqueTerms
operator|>
name|termCountHardLimit
condition|)
block|{
name|numUniqueTerms
operator|=
name|termCountHardLimit
expr_stmt|;
block|}
name|startBPV
operator|=
name|PackedInts
operator|.
name|bitsRequired
argument_list|(
name|numUniqueTerms
operator|*
literal|4
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|startBPV
operator|=
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
name|startBPV
operator|=
literal|1
expr_stmt|;
block|}
specifier|final
name|GrowableWriter
name|docToOffset
init|=
operator|new
name|GrowableWriter
argument_list|(
name|startBPV
argument_list|,
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|fasterButMoreRAM
argument_list|)
decl_stmt|;
comment|// pointer==0 means not set
name|bytes
operator|.
name|copyUsingLengthPrefix
argument_list|(
operator|new
name|BytesRef
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
name|int
name|termCount
init|=
literal|0
decl_stmt|;
specifier|final
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|Bits
name|liveDocs
init|=
name|MultiFields
operator|.
name|getLiveDocs
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|DocsEnum
name|docs
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|termCount
operator|++
operator|==
name|termCountHardLimit
condition|)
block|{
comment|// app is misusing the API (there is more than
comment|// one term per doc); in this case we make best
comment|// effort to load what we can (see LUCENE-2142)
break|break;
block|}
specifier|final
name|BytesRef
name|term
init|=
name|termsEnum
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
break|break;
block|}
specifier|final
name|long
name|pointer
init|=
name|bytes
operator|.
name|copyUsingLengthPrefix
argument_list|(
name|term
argument_list|)
decl_stmt|;
name|docs
operator|=
name|termsEnum
operator|.
name|docs
argument_list|(
name|liveDocs
argument_list|,
name|docs
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|int
name|docID
init|=
name|docs
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|docID
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
break|break;
block|}
name|docToOffset
operator|.
name|set
argument_list|(
name|docID
argument_list|,
name|pointer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// maybe an int-only impl?
return|return
operator|new
name|DocTermsImpl
argument_list|(
name|bytes
operator|.
name|freeze
argument_list|(
literal|true
argument_list|)
argument_list|,
name|docToOffset
operator|.
name|getMutable
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|validate
specifier|public
name|DocTerms
name|validate
parameter_list|(
name|DocTerms
name|entry
parameter_list|,
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO? nothing? perhaps subsequent call with FASTER_BUT_MORE_RAM?
return|return
name|entry
return|;
block|}
DECL|class|DocTermsImpl
specifier|private
specifier|static
class|class
name|DocTermsImpl
extends|extends
name|DocTerms
block|{
DECL|field|bytes
specifier|private
specifier|final
name|PagedBytes
operator|.
name|Reader
name|bytes
decl_stmt|;
DECL|field|docToOffset
specifier|private
specifier|final
name|PackedInts
operator|.
name|Reader
name|docToOffset
decl_stmt|;
DECL|method|DocTermsImpl
specifier|public
name|DocTermsImpl
parameter_list|(
name|PagedBytes
operator|.
name|Reader
name|bytes
parameter_list|,
name|PackedInts
operator|.
name|Reader
name|docToOffset
parameter_list|)
block|{
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
name|this
operator|.
name|docToOffset
operator|=
name|docToOffset
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|docToOffset
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|exists
specifier|public
name|boolean
name|exists
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|docToOffset
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getTerm
specifier|public
name|BytesRef
name|getTerm
parameter_list|(
name|int
name|docID
parameter_list|,
name|BytesRef
name|ret
parameter_list|)
block|{
specifier|final
name|long
name|pointer
init|=
name|docToOffset
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
return|return
name|bytes
operator|.
name|fill
argument_list|(
name|ret
argument_list|,
name|pointer
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
