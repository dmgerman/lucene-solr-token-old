begin_unit
begin_package
DECL|package|org.apache.lucene.search.cache
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|cache
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_comment
comment|/**  * Create Cached Values for a given key  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|EntryCreator
specifier|public
specifier|abstract
class|class
name|EntryCreator
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Serializable
block|{
DECL|method|create
specifier|public
specifier|abstract
name|T
name|create
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|validate
specifier|public
specifier|abstract
name|T
name|validate
parameter_list|(
name|T
name|entry
parameter_list|,
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Indicate if a cached cached value should be checked before usage.    * This is useful if an application wants to support subsequent calls    * to the same cached object that may alter the cached object.  If    * an application wants to avoid this (synchronized) check, it should    * return 'false'    *    * @return 'true' if the Cache should call 'validate' before returning a cached object    */
DECL|method|shouldValidate
specifier|public
name|boolean
name|shouldValidate
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**    * @return A key to identify valid cache entries for subsequent requests    */
DECL|method|getCacheKey
specifier|public
specifier|abstract
name|EntryKey
name|getCacheKey
parameter_list|()
function_decl|;
comment|//------------------------------------------------------------------------
comment|// The Following code is a hack to make things work while the
comment|// EntryCreator is stored in in the FieldCache.
comment|// When the FieldCache is replaced with a simpler map LUCENE-2665
comment|// This can be removed
comment|//------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|EntryCreator
condition|)
block|{
return|return
name|getCacheKey
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|EntryCreator
operator|)
name|obj
operator|)
operator|.
name|getCacheKey
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getCacheKey
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class
end_unit
