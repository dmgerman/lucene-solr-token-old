begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsAndPositionsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Attribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeImpl
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Automaton
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|BasicAutomata
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|BasicOperations
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|ByteRunAutomaton
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|LevenshteinAutomata
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_comment
comment|/** Subclass of TermsEnum for enumerating all terms that are similar  * to the specified filter term.  *  *<p>Term enumerations are always ordered by  * {@link #getComparator}.  Each term in the enumeration is  * greater than all that precede it.</p>  */
end_comment
begin_class
DECL|class|FuzzyTermsEnum
specifier|public
specifier|final
class|class
name|FuzzyTermsEnum
extends|extends
name|TermsEnum
block|{
DECL|field|actualEnum
specifier|private
name|TermsEnum
name|actualEnum
decl_stmt|;
DECL|field|actualBoostAtt
specifier|private
name|BoostAttribute
name|actualBoostAtt
decl_stmt|;
DECL|field|boostAtt
specifier|private
specifier|final
name|BoostAttribute
name|boostAtt
init|=
name|attributes
argument_list|()
operator|.
name|addAttribute
argument_list|(
name|BoostAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|maxBoostAtt
specifier|private
specifier|final
name|MaxNonCompetitiveBoostAttribute
name|maxBoostAtt
decl_stmt|;
DECL|field|dfaAtt
specifier|private
specifier|final
name|LevenshteinAutomataAttribute
name|dfaAtt
decl_stmt|;
DECL|field|bottom
specifier|private
name|float
name|bottom
decl_stmt|;
DECL|field|bottomTerm
specifier|private
name|BytesRef
name|bottomTerm
decl_stmt|;
comment|// TODO: chicken-and-egg
DECL|field|termComparator
specifier|private
specifier|final
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|termComparator
init|=
name|BytesRef
operator|.
name|getUTF8SortedAsUnicodeComparator
argument_list|()
decl_stmt|;
DECL|field|minSimilarity
specifier|private
specifier|final
name|float
name|minSimilarity
decl_stmt|;
DECL|field|scale_factor
specifier|private
specifier|final
name|float
name|scale_factor
decl_stmt|;
DECL|field|termLength
specifier|private
specifier|final
name|int
name|termLength
decl_stmt|;
DECL|field|maxEdits
specifier|private
name|int
name|maxEdits
decl_stmt|;
DECL|field|raw
specifier|private
specifier|final
name|boolean
name|raw
decl_stmt|;
DECL|field|tenum
specifier|private
specifier|final
name|TermsEnum
name|tenum
decl_stmt|;
DECL|field|term
specifier|private
specifier|final
name|Term
name|term
decl_stmt|;
DECL|field|termText
specifier|private
specifier|final
name|int
name|termText
index|[]
decl_stmt|;
DECL|field|realPrefixLength
specifier|private
specifier|final
name|int
name|realPrefixLength
decl_stmt|;
comment|/**    * Constructor for enumeration of all terms from specified<code>reader</code> which share a prefix of    * length<code>prefixLength</code> with<code>term</code> and which have a fuzzy similarity&gt;    *<code>minSimilarity</code>.    *<p>    * After calling the constructor the enumeration is already pointing to the first     * valid term if such a term exists.     *     * @param tenum Delivers terms.    * @param atts {@link AttributeSource} created by the rewrite method of {@link MultiTermQuery}    * thats contains information about competitive boosts during rewrite. It is also used    * to cache DFAs between segment transitions.    * @param term Pattern term.    * @param minSimilarity Minimum required similarity for terms from the reader.    * @param prefixLength Length of required common prefix. Default value is 0.    * @throws IOException    */
DECL|method|FuzzyTermsEnum
specifier|public
name|FuzzyTermsEnum
parameter_list|(
name|TermsEnum
name|tenum
parameter_list|,
name|AttributeSource
name|atts
parameter_list|,
name|Term
name|term
parameter_list|,
specifier|final
name|float
name|minSimilarity
parameter_list|,
specifier|final
name|int
name|prefixLength
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|minSimilarity
operator|>=
literal|1.0f
operator|&&
name|minSimilarity
operator|!=
operator|(
name|int
operator|)
name|minSimilarity
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"fractional edit distances are not allowed"
argument_list|)
throw|;
if|if
condition|(
name|minSimilarity
operator|<
literal|0.0f
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"minimumSimilarity cannot be less than 0"
argument_list|)
throw|;
if|if
condition|(
name|prefixLength
operator|<
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"prefixLength cannot be less than 0"
argument_list|)
throw|;
name|this
operator|.
name|tenum
operator|=
name|tenum
expr_stmt|;
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
comment|// convert the string into a utf32 int[] representation for fast comparisons
specifier|final
name|String
name|utf16
init|=
name|term
operator|.
name|text
argument_list|()
decl_stmt|;
name|this
operator|.
name|termText
operator|=
operator|new
name|int
index|[
name|utf16
operator|.
name|codePointCount
argument_list|(
literal|0
argument_list|,
name|utf16
operator|.
name|length
argument_list|()
argument_list|)
index|]
expr_stmt|;
for|for
control|(
name|int
name|cp
init|,
name|i
init|=
literal|0
init|,
name|j
init|=
literal|0
init|;
name|i
operator|<
name|utf16
operator|.
name|length
argument_list|()
condition|;
name|i
operator|+=
name|Character
operator|.
name|charCount
argument_list|(
name|cp
argument_list|)
control|)
name|termText
index|[
name|j
operator|++
index|]
operator|=
name|cp
operator|=
name|utf16
operator|.
name|codePointAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|this
operator|.
name|termLength
operator|=
name|termText
operator|.
name|length
expr_stmt|;
name|this
operator|.
name|dfaAtt
operator|=
name|atts
operator|.
name|addAttribute
argument_list|(
name|LevenshteinAutomataAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
comment|//The prefix could be longer than the word.
comment|//It's kind of silly though.  It means we must match the entire word.
name|this
operator|.
name|realPrefixLength
operator|=
name|prefixLength
operator|>
name|termLength
condition|?
name|termLength
else|:
name|prefixLength
expr_stmt|;
comment|// if minSimilarity>= 1, we treat it as number of edits
if|if
condition|(
name|minSimilarity
operator|>=
literal|1f
condition|)
block|{
name|this
operator|.
name|minSimilarity
operator|=
literal|1
operator|-
operator|(
name|minSimilarity
operator|+
literal|1
operator|)
operator|/
name|this
operator|.
name|termLength
expr_stmt|;
name|maxEdits
operator|=
operator|(
name|int
operator|)
name|minSimilarity
expr_stmt|;
name|raw
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|minSimilarity
operator|=
name|minSimilarity
expr_stmt|;
comment|// calculate the maximum k edits for this similarity
name|maxEdits
operator|=
name|initialMaxDistance
argument_list|(
name|this
operator|.
name|minSimilarity
argument_list|,
name|termLength
argument_list|)
expr_stmt|;
name|raw
operator|=
literal|false
expr_stmt|;
block|}
name|this
operator|.
name|scale_factor
operator|=
literal|1.0f
operator|/
operator|(
literal|1.0f
operator|-
name|this
operator|.
name|minSimilarity
operator|)
expr_stmt|;
name|this
operator|.
name|maxBoostAtt
operator|=
name|atts
operator|.
name|addAttribute
argument_list|(
name|MaxNonCompetitiveBoostAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
name|bottom
operator|=
name|maxBoostAtt
operator|.
name|getMaxNonCompetitiveBoost
argument_list|()
expr_stmt|;
name|bottomTerm
operator|=
name|maxBoostAtt
operator|.
name|getCompetitiveTerm
argument_list|()
expr_stmt|;
name|bottomChanged
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * return an automata-based enum for matching up to editDistance from    * lastTerm, if possible    */
DECL|method|getAutomatonEnum
specifier|private
name|TermsEnum
name|getAutomatonEnum
parameter_list|(
name|int
name|editDistance
parameter_list|,
name|BytesRef
name|lastTerm
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|ByteRunAutomaton
argument_list|>
name|runAutomata
init|=
name|initAutomata
argument_list|(
name|editDistance
argument_list|)
decl_stmt|;
if|if
condition|(
name|editDistance
operator|<
name|runAutomata
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
operator|new
name|AutomatonFuzzyTermsEnum
argument_list|(
name|runAutomata
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|editDistance
operator|+
literal|1
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|ByteRunAutomaton
index|[
name|editDistance
operator|+
literal|1
index|]
argument_list|)
argument_list|,
name|lastTerm
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/** initialize levenshtein DFAs up to maxDistance, if possible */
DECL|method|initAutomata
specifier|private
name|List
argument_list|<
name|ByteRunAutomaton
argument_list|>
name|initAutomata
parameter_list|(
name|int
name|maxDistance
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|ByteRunAutomaton
argument_list|>
name|runAutomata
init|=
name|dfaAtt
operator|.
name|automata
argument_list|()
decl_stmt|;
if|if
condition|(
name|runAutomata
operator|.
name|size
argument_list|()
operator|<=
name|maxDistance
operator|&&
name|maxDistance
operator|<=
name|LevenshteinAutomata
operator|.
name|MAXIMUM_SUPPORTED_DISTANCE
condition|)
block|{
name|LevenshteinAutomata
name|builder
init|=
operator|new
name|LevenshteinAutomata
argument_list|(
name|UnicodeUtil
operator|.
name|newString
argument_list|(
name|termText
argument_list|,
name|realPrefixLength
argument_list|,
name|termText
operator|.
name|length
operator|-
name|realPrefixLength
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|runAutomata
operator|.
name|size
argument_list|()
init|;
name|i
operator|<=
name|maxDistance
condition|;
name|i
operator|++
control|)
block|{
name|Automaton
name|a
init|=
name|builder
operator|.
name|toAutomaton
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// constant prefix
if|if
condition|(
name|realPrefixLength
operator|>
literal|0
condition|)
block|{
name|Automaton
name|prefix
init|=
name|BasicAutomata
operator|.
name|makeString
argument_list|(
name|UnicodeUtil
operator|.
name|newString
argument_list|(
name|termText
argument_list|,
literal|0
argument_list|,
name|realPrefixLength
argument_list|)
argument_list|)
decl_stmt|;
name|a
operator|=
name|BasicOperations
operator|.
name|concatenate
argument_list|(
name|prefix
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
name|runAutomata
operator|.
name|add
argument_list|(
operator|new
name|ByteRunAutomaton
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|runAutomata
return|;
block|}
comment|/** swap in a new actual enum to proxy to */
DECL|method|setEnum
specifier|private
name|void
name|setEnum
parameter_list|(
name|TermsEnum
name|actualEnum
parameter_list|)
block|{
name|this
operator|.
name|actualEnum
operator|=
name|actualEnum
expr_stmt|;
name|this
operator|.
name|actualBoostAtt
operator|=
name|actualEnum
operator|.
name|attributes
argument_list|()
operator|.
name|addAttribute
argument_list|(
name|BoostAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * fired when the max non-competitive boost has changed. this is the hook to    * swap in a smarter actualEnum    */
DECL|method|bottomChanged
specifier|private
name|void
name|bottomChanged
parameter_list|(
name|BytesRef
name|lastTerm
parameter_list|,
name|boolean
name|init
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|oldMaxEdits
init|=
name|maxEdits
decl_stmt|;
comment|// true if the last term encountered is lexicographically equal or after the bottom term in the PQ
name|boolean
name|termAfter
init|=
name|bottomTerm
operator|==
literal|null
operator|||
operator|(
name|lastTerm
operator|!=
literal|null
operator|&&
name|termComparator
operator|.
name|compare
argument_list|(
name|lastTerm
argument_list|,
name|bottomTerm
argument_list|)
operator|>=
literal|0
operator|)
decl_stmt|;
comment|// as long as the max non-competitive boost is>= the max boost
comment|// for some edit distance, keep dropping the max edit distance.
while|while
condition|(
name|maxEdits
operator|>
literal|0
operator|&&
operator|(
name|termAfter
condition|?
name|bottom
operator|>=
name|calculateMaxBoost
argument_list|(
name|maxEdits
argument_list|)
else|:
name|bottom
operator|>
name|calculateMaxBoost
argument_list|(
name|maxEdits
argument_list|)
operator|)
condition|)
name|maxEdits
operator|--
expr_stmt|;
if|if
condition|(
name|oldMaxEdits
operator|!=
name|maxEdits
operator|||
name|init
condition|)
block|{
comment|// the maximum n has changed
name|TermsEnum
name|newEnum
init|=
name|getAutomatonEnum
argument_list|(
name|maxEdits
argument_list|,
name|lastTerm
argument_list|)
decl_stmt|;
if|if
condition|(
name|newEnum
operator|!=
literal|null
condition|)
block|{
name|setEnum
argument_list|(
name|newEnum
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|init
condition|)
block|{
name|setEnum
argument_list|(
operator|new
name|LinearFuzzyTermsEnum
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// for some raw min similarity and input term length, the maximum # of edits
DECL|method|initialMaxDistance
specifier|private
name|int
name|initialMaxDistance
parameter_list|(
name|float
name|minimumSimilarity
parameter_list|,
name|int
name|termLen
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
operator|(
literal|1D
operator|-
name|minimumSimilarity
operator|)
operator|*
name|termLen
argument_list|)
return|;
block|}
comment|// for some number of edits, the maximum possible scaled boost
DECL|method|calculateMaxBoost
specifier|private
name|float
name|calculateMaxBoost
parameter_list|(
name|int
name|nEdits
parameter_list|)
block|{
specifier|final
name|float
name|similarity
init|=
literal|1.0f
operator|-
operator|(
operator|(
name|float
operator|)
name|nEdits
operator|/
call|(
name|float
call|)
argument_list|(
name|termLength
argument_list|)
operator|)
decl_stmt|;
return|return
operator|(
name|similarity
operator|-
name|minSimilarity
operator|)
operator|*
name|scale_factor
return|;
block|}
DECL|field|queuedBottom
specifier|private
name|BytesRef
name|queuedBottom
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|next
specifier|public
name|BytesRef
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|queuedBottom
operator|!=
literal|null
condition|)
block|{
name|bottomChanged
argument_list|(
name|queuedBottom
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|queuedBottom
operator|=
literal|null
expr_stmt|;
block|}
name|BytesRef
name|term
init|=
name|actualEnum
operator|.
name|next
argument_list|()
decl_stmt|;
name|boostAtt
operator|.
name|setBoost
argument_list|(
name|actualBoostAtt
operator|.
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|float
name|bottom
init|=
name|maxBoostAtt
operator|.
name|getMaxNonCompetitiveBoost
argument_list|()
decl_stmt|;
specifier|final
name|BytesRef
name|bottomTerm
init|=
name|maxBoostAtt
operator|.
name|getCompetitiveTerm
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|!=
literal|null
operator|&&
operator|(
name|bottom
operator|!=
name|this
operator|.
name|bottom
operator|||
name|bottomTerm
operator|!=
name|this
operator|.
name|bottomTerm
operator|)
condition|)
block|{
name|this
operator|.
name|bottom
operator|=
name|bottom
expr_stmt|;
name|this
operator|.
name|bottomTerm
operator|=
name|bottomTerm
expr_stmt|;
comment|// clone the term before potentially doing something with it
comment|// this is a rare but wonderful occurrence anyway
name|queuedBottom
operator|=
operator|new
name|BytesRef
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
return|return
name|term
return|;
block|}
comment|// proxy all other enum calls to the actual enum
annotation|@
name|Override
DECL|method|docFreq
specifier|public
name|int
name|docFreq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|actualEnum
operator|.
name|docFreq
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|totalTermFreq
specifier|public
name|long
name|totalTermFreq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|actualEnum
operator|.
name|totalTermFreq
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|docs
specifier|public
name|DocsEnum
name|docs
parameter_list|(
name|Bits
name|skipDocs
parameter_list|,
name|DocsEnum
name|reuse
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|actualEnum
operator|.
name|docs
argument_list|(
name|skipDocs
argument_list|,
name|reuse
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|docsAndPositions
specifier|public
name|DocsAndPositionsEnum
name|docsAndPositions
parameter_list|(
name|Bits
name|skipDocs
parameter_list|,
name|DocsAndPositionsEnum
name|reuse
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|actualEnum
operator|.
name|docsAndPositions
argument_list|(
name|skipDocs
argument_list|,
name|reuse
argument_list|)
return|;
block|}
DECL|method|seek
specifier|public
name|void
name|seek
parameter_list|(
name|BytesRef
name|term
parameter_list|,
name|TermState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|actualEnum
operator|.
name|seek
argument_list|(
name|term
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|termState
specifier|public
name|TermState
name|termState
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|actualEnum
operator|.
name|termState
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getComparator
specifier|public
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|getComparator
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|actualEnum
operator|.
name|getComparator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|ord
specifier|public
name|long
name|ord
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|actualEnum
operator|.
name|ord
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|seek
specifier|public
name|SeekStatus
name|seek
parameter_list|(
name|BytesRef
name|text
parameter_list|,
name|boolean
name|useCache
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|actualEnum
operator|.
name|seek
argument_list|(
name|text
argument_list|,
name|useCache
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|seek
specifier|public
name|SeekStatus
name|seek
parameter_list|(
name|long
name|ord
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|actualEnum
operator|.
name|seek
argument_list|(
name|ord
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|term
specifier|public
name|BytesRef
name|term
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|actualEnum
operator|.
name|term
argument_list|()
return|;
block|}
comment|/**    * Implement fuzzy enumeration with automaton.    *<p>    * This is the fastest method as opposed to LinearFuzzyTermsEnum:    * as enumeration is logarithmic to the number of terms (instead of linear)    * and comparison is linear to length of the term (rather than quadratic)    */
DECL|class|AutomatonFuzzyTermsEnum
specifier|private
class|class
name|AutomatonFuzzyTermsEnum
extends|extends
name|AutomatonTermsEnum
block|{
DECL|field|matchers
specifier|private
specifier|final
name|ByteRunAutomaton
name|matchers
index|[]
decl_stmt|;
DECL|field|termRef
specifier|private
specifier|final
name|BytesRef
name|termRef
decl_stmt|;
DECL|field|lastTerm
specifier|private
specifier|final
name|BytesRef
name|lastTerm
decl_stmt|;
DECL|field|boostAtt
specifier|private
specifier|final
name|BoostAttribute
name|boostAtt
init|=
name|attributes
argument_list|()
operator|.
name|addAttribute
argument_list|(
name|BoostAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|AutomatonFuzzyTermsEnum
specifier|public
name|AutomatonFuzzyTermsEnum
parameter_list|(
name|ByteRunAutomaton
name|matchers
index|[]
parameter_list|,
name|BytesRef
name|lastTerm
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|matchers
index|[
name|matchers
operator|.
name|length
operator|-
literal|1
index|]
argument_list|,
name|tenum
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|matchers
operator|=
name|matchers
expr_stmt|;
name|this
operator|.
name|lastTerm
operator|=
name|lastTerm
expr_stmt|;
name|termRef
operator|=
operator|new
name|BytesRef
argument_list|(
name|term
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** finds the smallest Lev(n) DFA that accepts the term. */
annotation|@
name|Override
DECL|method|accept
specifier|protected
name|AcceptStatus
name|accept
parameter_list|(
name|BytesRef
name|term
parameter_list|)
block|{
if|if
condition|(
name|term
operator|.
name|equals
argument_list|(
name|termRef
argument_list|)
condition|)
block|{
comment|// ed = 0
name|boostAtt
operator|.
name|setBoost
argument_list|(
literal|1.0F
argument_list|)
expr_stmt|;
return|return
name|AcceptStatus
operator|.
name|YES_AND_SEEK
return|;
block|}
name|int
name|codePointCount
init|=
operator|-
literal|1
decl_stmt|;
comment|// TODO: benchmark doing this backwards
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|matchers
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|matchers
index|[
name|i
index|]
operator|.
name|run
argument_list|(
name|term
operator|.
name|bytes
argument_list|,
name|term
operator|.
name|offset
argument_list|,
name|term
operator|.
name|length
argument_list|)
condition|)
block|{
comment|// this sucks, we convert just to score based on length.
if|if
condition|(
name|codePointCount
operator|==
operator|-
literal|1
condition|)
block|{
name|codePointCount
operator|=
name|UnicodeUtil
operator|.
name|codePointCount
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
specifier|final
name|float
name|similarity
init|=
literal|1.0f
operator|-
operator|(
operator|(
name|float
operator|)
name|i
operator|/
call|(
name|float
call|)
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|codePointCount
argument_list|,
name|termLength
argument_list|)
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|similarity
operator|>
name|minSimilarity
condition|)
block|{
name|boostAtt
operator|.
name|setBoost
argument_list|(
operator|(
name|similarity
operator|-
name|minSimilarity
operator|)
operator|*
name|scale_factor
argument_list|)
expr_stmt|;
return|return
name|AcceptStatus
operator|.
name|YES_AND_SEEK
return|;
block|}
else|else
block|{
return|return
name|AcceptStatus
operator|.
name|NO_AND_SEEK
return|;
block|}
block|}
return|return
name|AcceptStatus
operator|.
name|NO_AND_SEEK
return|;
block|}
comment|/** defers to superclass, except can start at an arbitrary location */
annotation|@
name|Override
DECL|method|nextSeekTerm
specifier|protected
name|BytesRef
name|nextSeekTerm
parameter_list|(
name|BytesRef
name|term
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|term
operator|==
literal|null
condition|)
name|term
operator|=
name|lastTerm
expr_stmt|;
return|return
name|super
operator|.
name|nextSeekTerm
argument_list|(
name|term
argument_list|)
return|;
block|}
block|}
comment|/**    * Implement fuzzy enumeration with linear brute force.    */
DECL|class|LinearFuzzyTermsEnum
specifier|private
class|class
name|LinearFuzzyTermsEnum
extends|extends
name|FilteredTermsEnum
block|{
comment|/* Allows us save time required to create a new array      * every time similarity is called.      */
DECL|field|d
specifier|private
name|int
index|[]
name|d
decl_stmt|;
DECL|field|p
specifier|private
name|int
index|[]
name|p
decl_stmt|;
comment|// this is the text, minus the prefix
DECL|field|text
specifier|private
specifier|final
name|int
index|[]
name|text
decl_stmt|;
DECL|field|boostAtt
specifier|private
specifier|final
name|BoostAttribute
name|boostAtt
init|=
name|attributes
argument_list|()
operator|.
name|addAttribute
argument_list|(
name|BoostAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Constructor for enumeration of all terms from specified<code>reader</code> which share a prefix of      * length<code>prefixLength</code> with<code>term</code> and which have a fuzzy similarity&gt;      *<code>minSimilarity</code>.      *<p>      * After calling the constructor the enumeration is already pointing to the first       * valid term if such a term exists.       *       * @param reader Delivers terms.      * @param term Pattern term.      * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.      * @param prefixLength Length of required common prefix. Default value is 0.      * @throws IOException      */
DECL|method|LinearFuzzyTermsEnum
specifier|public
name|LinearFuzzyTermsEnum
parameter_list|()
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|tenum
argument_list|)
expr_stmt|;
name|this
operator|.
name|text
operator|=
operator|new
name|int
index|[
name|termLength
operator|-
name|realPrefixLength
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|termText
argument_list|,
name|realPrefixLength
argument_list|,
name|text
argument_list|,
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|String
name|prefix
init|=
name|UnicodeUtil
operator|.
name|newString
argument_list|(
name|termText
argument_list|,
literal|0
argument_list|,
name|realPrefixLength
argument_list|)
decl_stmt|;
name|prefixBytesRef
operator|=
operator|new
name|BytesRef
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|this
operator|.
name|d
operator|=
operator|new
name|int
index|[
name|this
operator|.
name|text
operator|.
name|length
operator|+
literal|1
index|]
expr_stmt|;
name|this
operator|.
name|p
operator|=
operator|new
name|int
index|[
name|this
operator|.
name|text
operator|.
name|length
operator|+
literal|1
index|]
expr_stmt|;
name|setInitialSeekTerm
argument_list|(
name|prefixBytesRef
argument_list|)
expr_stmt|;
block|}
DECL|field|prefixBytesRef
specifier|private
specifier|final
name|BytesRef
name|prefixBytesRef
decl_stmt|;
comment|// used for unicode conversion from BytesRef byte[] to int[]
DECL|field|utf32
specifier|private
specifier|final
name|IntsRef
name|utf32
init|=
operator|new
name|IntsRef
argument_list|(
literal|20
argument_list|)
decl_stmt|;
comment|/**      * The termCompare method in FuzzyTermEnum uses Levenshtein distance to       * calculate the distance between the given term and the comparing term.       */
annotation|@
name|Override
DECL|method|accept
specifier|protected
specifier|final
name|AcceptStatus
name|accept
parameter_list|(
name|BytesRef
name|term
parameter_list|)
block|{
if|if
condition|(
name|term
operator|.
name|startsWith
argument_list|(
name|prefixBytesRef
argument_list|)
condition|)
block|{
name|UnicodeUtil
operator|.
name|UTF8toUTF32
argument_list|(
name|term
argument_list|,
name|utf32
argument_list|)
expr_stmt|;
specifier|final
name|float
name|similarity
init|=
name|similarity
argument_list|(
name|utf32
operator|.
name|ints
argument_list|,
name|realPrefixLength
argument_list|,
name|utf32
operator|.
name|length
operator|-
name|realPrefixLength
argument_list|)
decl_stmt|;
if|if
condition|(
name|similarity
operator|>
name|minSimilarity
condition|)
block|{
name|boostAtt
operator|.
name|setBoost
argument_list|(
operator|(
name|similarity
operator|-
name|minSimilarity
operator|)
operator|*
name|scale_factor
argument_list|)
expr_stmt|;
return|return
name|AcceptStatus
operator|.
name|YES
return|;
block|}
else|else
return|return
name|AcceptStatus
operator|.
name|NO
return|;
block|}
else|else
block|{
return|return
name|AcceptStatus
operator|.
name|END
return|;
block|}
block|}
comment|/******************************      * Compute Levenshtein distance      ******************************/
comment|/**      *<p>Similarity returns a number that is 1.0f or less (including negative numbers)      * based on how similar the Term is compared to a target term.  It returns      * exactly 0.0f when      *<pre>      *    editDistance&gt; maximumEditDistance</pre>      * Otherwise it returns:      *<pre>      *    1 - (editDistance / length)</pre>      * where length is the length of the shortest term (text or target) including a      * prefix that are identical and editDistance is the Levenshtein distance for      * the two words.</p>      *      *<p>Embedded within this algorithm is a fail-fast Levenshtein distance      * algorithm.  The fail-fast algorithm differs from the standard Levenshtein      * distance algorithm in that it is aborted if it is discovered that the      * minimum distance between the words is greater than some threshold.      *      *<p>To calculate the maximum distance threshold we use the following formula:      *<pre>      *     (1 - minimumSimilarity) * length</pre>      * where length is the shortest term including any prefix that is not part of the      * similarity comparison.  This formula was derived by solving for what maximum value      * of distance returns false for the following statements:      *<pre>      *   similarity = 1 - ((float)distance / (float) (prefixLength + Math.min(textlen, targetlen)));      *   return (similarity> minimumSimilarity);</pre>      * where distance is the Levenshtein distance for the two words.      *</p>      *<p>Levenshtein distance (also known as edit distance) is a measure of similarity      * between two strings where the distance is measured as the number of character      * deletions, insertions or substitutions required to transform one string to      * the other string.      * @param target the target word or phrase      * @return the similarity,  0.0 or less indicates that it matches less than the required      * threshold and 1.0 indicates that the text and target are identical      */
DECL|method|similarity
specifier|private
specifier|final
name|float
name|similarity
parameter_list|(
specifier|final
name|int
index|[]
name|target
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
specifier|final
name|int
name|m
init|=
name|length
decl_stmt|;
specifier|final
name|int
name|n
init|=
name|text
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|0
condition|)
block|{
comment|//we don't have anything to compare.  That means if we just add
comment|//the letters for m we get the new word
return|return
name|realPrefixLength
operator|==
literal|0
condition|?
literal|0.0f
else|:
literal|1.0f
operator|-
operator|(
operator|(
name|float
operator|)
name|m
operator|/
name|realPrefixLength
operator|)
return|;
block|}
if|if
condition|(
name|m
operator|==
literal|0
condition|)
block|{
return|return
name|realPrefixLength
operator|==
literal|0
condition|?
literal|0.0f
else|:
literal|1.0f
operator|-
operator|(
operator|(
name|float
operator|)
name|n
operator|/
name|realPrefixLength
operator|)
return|;
block|}
specifier|final
name|int
name|maxDistance
init|=
name|calculateMaxDistance
argument_list|(
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxDistance
operator|<
name|Math
operator|.
name|abs
argument_list|(
name|m
operator|-
name|n
argument_list|)
condition|)
block|{
comment|//just adding the characters of m to n or vice-versa results in
comment|//too many edits
comment|//for example "pre" length is 3 and "prefixes" length is 8.  We can see that
comment|//given this optimal circumstance, the edit distance cannot be less than 5.
comment|//which is 8-3 or more precisely Math.abs(3-8).
comment|//if our maximum edit distance is 4, then we can discard this word
comment|//without looking at it.
return|return
name|Float
operator|.
name|NEGATIVE_INFINITY
return|;
block|}
comment|// init matrix d
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|n
condition|;
operator|++
name|i
control|)
block|{
name|p
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
comment|// start computing edit distance
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|m
condition|;
operator|++
name|j
control|)
block|{
comment|// iterates through target
name|int
name|bestPossibleEditDistance
init|=
name|m
decl_stmt|;
specifier|final
name|int
name|t_j
init|=
name|target
index|[
name|offset
operator|+
name|j
operator|-
literal|1
index|]
decl_stmt|;
comment|// jth character of t
name|d
index|[
literal|0
index|]
operator|=
name|j
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|n
condition|;
operator|++
name|i
control|)
block|{
comment|// iterates through text
comment|// minimum of cell to the left+1, to the top+1, diagonally left and up +(0|1)
if|if
condition|(
name|t_j
operator|!=
name|text
index|[
name|i
operator|-
literal|1
index|]
condition|)
block|{
name|d
index|[
name|i
index|]
operator|=
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|d
index|[
name|i
operator|-
literal|1
index|]
argument_list|,
name|p
index|[
name|i
index|]
argument_list|)
argument_list|,
name|p
index|[
name|i
operator|-
literal|1
index|]
argument_list|)
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|d
index|[
name|i
index|]
operator|=
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|d
index|[
name|i
operator|-
literal|1
index|]
operator|+
literal|1
argument_list|,
name|p
index|[
name|i
index|]
operator|+
literal|1
argument_list|)
argument_list|,
name|p
index|[
name|i
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|bestPossibleEditDistance
operator|=
name|Math
operator|.
name|min
argument_list|(
name|bestPossibleEditDistance
argument_list|,
name|d
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|//After calculating row i, the best possible edit distance
comment|//can be found by found by finding the smallest value in a given column.
comment|//If the bestPossibleEditDistance is greater than the max distance, abort.
if|if
condition|(
name|j
operator|>
name|maxDistance
operator|&&
name|bestPossibleEditDistance
operator|>
name|maxDistance
condition|)
block|{
comment|//equal is okay, but not greater
comment|//the closest the target can be to the text is just too far away.
comment|//this target is leaving the party early.
return|return
name|Float
operator|.
name|NEGATIVE_INFINITY
return|;
block|}
comment|// copy current distance counts to 'previous row' distance counts: swap p and d
name|int
name|_d
index|[]
init|=
name|p
decl_stmt|;
name|p
operator|=
name|d
expr_stmt|;
name|d
operator|=
name|_d
expr_stmt|;
block|}
comment|// our last action in the above loop was to switch d and p, so p now
comment|// actually has the most recent cost counts
comment|// this will return less than 0.0 when the edit distance is
comment|// greater than the number of characters in the shorter word.
comment|// but this was the formula that was previously used in FuzzyTermEnum,
comment|// so it has not been changed (even though minimumSimilarity must be
comment|// greater than 0.0)
return|return
literal|1.0f
operator|-
operator|(
operator|(
name|float
operator|)
name|p
index|[
name|n
index|]
operator|/
call|(
name|float
call|)
argument_list|(
name|realPrefixLength
operator|+
name|Math
operator|.
name|min
argument_list|(
name|n
argument_list|,
name|m
argument_list|)
argument_list|)
operator|)
return|;
block|}
comment|/**      * The max Distance is the maximum Levenshtein distance for the text      * compared to some other value that results in score that is      * better than the minimum similarity.      * @param m the length of the "other value"      * @return the maximum levenshtein distance that we care about      */
DECL|method|calculateMaxDistance
specifier|private
name|int
name|calculateMaxDistance
parameter_list|(
name|int
name|m
parameter_list|)
block|{
return|return
name|raw
condition|?
name|maxEdits
else|:
name|Math
operator|.
name|min
argument_list|(
name|maxEdits
argument_list|,
call|(
name|int
call|)
argument_list|(
operator|(
literal|1
operator|-
name|minSimilarity
operator|)
operator|*
operator|(
name|Math
operator|.
name|min
argument_list|(
name|text
operator|.
name|length
argument_list|,
name|m
argument_list|)
operator|+
name|realPrefixLength
operator|)
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/** @lucene.internal */
DECL|method|getMinSimilarity
specifier|public
name|float
name|getMinSimilarity
parameter_list|()
block|{
return|return
name|minSimilarity
return|;
block|}
comment|/** @lucene.internal */
DECL|method|getScaleFactor
specifier|public
name|float
name|getScaleFactor
parameter_list|()
block|{
return|return
name|scale_factor
return|;
block|}
comment|/** @lucene.internal */
DECL|interface|LevenshteinAutomataAttribute
specifier|public
specifier|static
interface|interface
name|LevenshteinAutomataAttribute
extends|extends
name|Attribute
block|{
DECL|method|automata
specifier|public
name|List
argument_list|<
name|ByteRunAutomaton
argument_list|>
name|automata
parameter_list|()
function_decl|;
block|}
comment|/** @lucene.internal */
DECL|class|LevenshteinAutomataAttributeImpl
specifier|public
specifier|static
specifier|final
class|class
name|LevenshteinAutomataAttributeImpl
extends|extends
name|AttributeImpl
implements|implements
name|LevenshteinAutomataAttribute
block|{
DECL|field|automata
specifier|private
specifier|final
name|List
argument_list|<
name|ByteRunAutomaton
argument_list|>
name|automata
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteRunAutomaton
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|automata
specifier|public
name|List
argument_list|<
name|ByteRunAutomaton
argument_list|>
name|automata
parameter_list|()
block|{
return|return
name|automata
return|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|automata
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|automata
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|LevenshteinAutomataAttributeImpl
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|automata
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|LevenshteinAutomataAttributeImpl
operator|)
name|other
operator|)
operator|.
name|automata
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|copyTo
specifier|public
name|void
name|copyTo
parameter_list|(
name|AttributeImpl
name|target
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|ByteRunAutomaton
argument_list|>
name|targetAutomata
init|=
operator|(
operator|(
name|LevenshteinAutomataAttribute
operator|)
name|target
operator|)
operator|.
name|automata
argument_list|()
decl_stmt|;
name|targetAutomata
operator|.
name|clear
argument_list|()
expr_stmt|;
name|targetAutomata
operator|.
name|addAll
argument_list|(
name|automata
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
