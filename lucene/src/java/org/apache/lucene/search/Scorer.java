begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import
begin_comment
comment|/**  * Expert: Common scoring functionality for different types of queries.  *  *<p>  * A<code>Scorer</code> iterates over documents matching a  * query in increasing order of doc Id.  *</p>  *<p>  * Document scores are computed using a given<code>Similarity</code>  * implementation.  *</p>  *  *<p><b>NOTE</b>: The values Float.Nan,  * Float.NEGATIVE_INFINITY and Float.POSITIVE_INFINITY are  * not valid scores.  Certain collectors (eg {@link  * TopScoreDocCollector}) will not properly collect hits  * with these scores.  */
end_comment
begin_class
DECL|class|Scorer
specifier|public
specifier|abstract
class|class
name|Scorer
extends|extends
name|DocIdSetIterator
block|{
DECL|field|similarity
specifier|private
specifier|final
name|Similarity
name|similarity
decl_stmt|;
DECL|field|weight
specifier|protected
specifier|final
name|Weight
name|weight
decl_stmt|;
comment|/** Constructs a Scorer.    * @param similarity The<code>Similarity</code> implementation used by this scorer.    */
DECL|method|Scorer
specifier|protected
name|Scorer
parameter_list|(
name|Similarity
name|similarity
parameter_list|)
block|{
name|this
argument_list|(
name|similarity
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs a Scorer    * @param similarity The<code>Similarity</code> implementation used by this scorer.    * @param weight The scorers<code>Weight</code>    */
DECL|method|Scorer
specifier|protected
name|Scorer
parameter_list|(
name|Similarity
name|similarity
parameter_list|,
name|Weight
name|weight
parameter_list|)
block|{
name|this
operator|.
name|similarity
operator|=
name|similarity
expr_stmt|;
name|this
operator|.
name|weight
operator|=
name|weight
expr_stmt|;
block|}
comment|/** Returns the Similarity implementation used by this scorer. */
DECL|method|getSimilarity
specifier|public
name|Similarity
name|getSimilarity
parameter_list|()
block|{
return|return
name|this
operator|.
name|similarity
return|;
block|}
comment|/** Scores and collects all matching documents.    * @param collector The collector to which all matching documents are passed.    */
DECL|method|score
specifier|public
name|void
name|score
parameter_list|(
name|Collector
name|collector
parameter_list|)
throws|throws
name|IOException
block|{
name|collector
operator|.
name|setScorer
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|int
name|doc
decl_stmt|;
while|while
condition|(
operator|(
name|doc
operator|=
name|nextDoc
argument_list|()
operator|)
operator|!=
name|NO_MORE_DOCS
condition|)
block|{
name|collector
operator|.
name|collect
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Expert: Collects matching documents in a range. Hook for optimization.    * Note,<code>firstDocID</code> is added to ensure that {@link #nextDoc()}    * was called before this method.    *     * @param collector    *          The collector to which all matching documents are passed.    * @param max    *          Do not score documents past this.    * @param firstDocID    *          The first document ID (ensures {@link #nextDoc()} is called before    *          this method.    * @return true if more matching documents may remain.    */
DECL|method|score
specifier|protected
name|boolean
name|score
parameter_list|(
name|Collector
name|collector
parameter_list|,
name|int
name|max
parameter_list|,
name|int
name|firstDocID
parameter_list|)
throws|throws
name|IOException
block|{
name|collector
operator|.
name|setScorer
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|int
name|doc
init|=
name|firstDocID
decl_stmt|;
while|while
condition|(
name|doc
operator|<
name|max
condition|)
block|{
name|collector
operator|.
name|collect
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
name|nextDoc
argument_list|()
expr_stmt|;
block|}
return|return
name|doc
operator|!=
name|NO_MORE_DOCS
return|;
block|}
comment|/** Returns the score of the current document matching the query.    * Initially invalid, until {@link #nextDoc()} or {@link #advance(int)}    * is called the first time, or when called from within    * {@link Collector#collect}.    */
DECL|method|score
specifier|public
specifier|abstract
name|float
name|score
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/** Returns number of matches for the current document.    *  This returns a float (not int) because    *  SloppyPhraseScorer discounts its freq according to how    *  "sloppy" the match was.    *    * @lucene.experimental */
DECL|method|freq
specifier|public
name|float
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|this
operator|+
literal|" does not implement freq()"
argument_list|)
throw|;
block|}
comment|/**    * A callback to gather information from a scorer and its sub-scorers. Each    * the top-level scorer as well as each of its sub-scorers are passed to    * either one of the visit methods depending on their boolean relationship in    * the query.    * @lucene.experimental    */
DECL|class|ScorerVisitor
specifier|public
specifier|static
specifier|abstract
class|class
name|ScorerVisitor
parameter_list|<
name|P
extends|extends
name|Query
parameter_list|,
name|C
extends|extends
name|Query
parameter_list|,
name|S
extends|extends
name|Scorer
parameter_list|>
block|{
comment|/**      * Invoked for all optional scorer       *       * @param parent the parent query of the child query or<code>null</code> if the child is a top-level query      * @param child the query of the currently visited scorer      * @param scorer the current scorer      */
DECL|method|visitOptional
specifier|public
name|void
name|visitOptional
parameter_list|(
name|P
name|parent
parameter_list|,
name|C
name|child
parameter_list|,
name|S
name|scorer
parameter_list|)
block|{}
comment|/**      * Invoked for all required scorer       *       * @param parent the parent query of the child query or<code>null</code> if the child is a top-level query      * @param child the query of the currently visited scorer      * @param scorer the current scorer      */
DECL|method|visitRequired
specifier|public
name|void
name|visitRequired
parameter_list|(
name|P
name|parent
parameter_list|,
name|C
name|child
parameter_list|,
name|S
name|scorer
parameter_list|)
block|{}
comment|/**      * Invoked for all prohibited scorer       *       * @param parent the parent query of the child query or<code>null</code> if the child is a top-level query      * @param child the query of the currently visited scorer      * @param scorer the current scorer      */
DECL|method|visitProhibited
specifier|public
name|void
name|visitProhibited
parameter_list|(
name|P
name|parent
parameter_list|,
name|C
name|child
parameter_list|,
name|S
name|scorer
parameter_list|)
block|{}
block|}
comment|/**    * Expert: call this to gather details for all sub-scorers for this query.    * This can be used, in conjunction with a custom {@link Collector} to gather    * details about how each sub-query matched the current hit.    *     * @param visitor a callback executed for each sub-scorer    * @lucene.experimental    */
DECL|method|visitScorers
specifier|public
name|void
name|visitScorers
parameter_list|(
name|ScorerVisitor
argument_list|<
name|Query
argument_list|,
name|Query
argument_list|,
name|Scorer
argument_list|>
name|visitor
parameter_list|)
block|{
name|visitSubScorers
argument_list|(
literal|null
argument_list|,
name|Occur
operator|.
name|MUST
comment|/*must id default*/
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@link Scorer} subclasses should implement this method if the subclass    * itself contains multiple scorers to support gathering details for    * sub-scorers via {@link ScorerVisitor}    *<p>    * Note: this method will throw {@link UnsupportedOperationException} if no    * associated {@link Weight} instance is provided to    * {@link #Scorer(Similarity, Weight)}    *</p>    *     * @lucene.experimental    */
DECL|method|visitSubScorers
specifier|protected
name|void
name|visitSubScorers
parameter_list|(
name|Query
name|parent
parameter_list|,
name|Occur
name|relationship
parameter_list|,
name|ScorerVisitor
argument_list|<
name|Query
argument_list|,
name|Query
argument_list|,
name|Scorer
argument_list|>
name|visitor
parameter_list|)
block|{
if|if
condition|(
name|weight
operator|==
literal|null
condition|)
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
specifier|final
name|Query
name|q
init|=
name|weight
operator|.
name|getQuery
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|relationship
condition|)
block|{
case|case
name|MUST
case|:
name|visitor
operator|.
name|visitRequired
argument_list|(
name|parent
argument_list|,
name|q
argument_list|,
name|this
argument_list|)
expr_stmt|;
break|break;
case|case
name|MUST_NOT
case|:
name|visitor
operator|.
name|visitProhibited
argument_list|(
name|parent
argument_list|,
name|q
argument_list|,
name|this
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOULD
case|:
name|visitor
operator|.
name|visitOptional
argument_list|(
name|parent
argument_list|,
name|q
argument_list|,
name|this
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
end_class
end_unit
