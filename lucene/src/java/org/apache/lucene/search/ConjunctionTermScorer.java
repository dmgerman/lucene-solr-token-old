begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Similarity
operator|.
name|ExactDocScorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_comment
comment|/** Scorer for conjunctions, sets of terms, all of which are required. */
end_comment
begin_class
DECL|class|ConjunctionTermScorer
specifier|final
class|class
name|ConjunctionTermScorer
extends|extends
name|Scorer
block|{
DECL|field|coord
specifier|private
specifier|final
name|float
name|coord
decl_stmt|;
DECL|field|lastDoc
specifier|private
name|int
name|lastDoc
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|docsAndFreqs
specifier|private
specifier|final
name|DocsAndFreqs
index|[]
name|docsAndFreqs
decl_stmt|;
DECL|field|lead
specifier|private
specifier|final
name|DocsAndFreqs
name|lead
decl_stmt|;
DECL|method|ConjunctionTermScorer
name|ConjunctionTermScorer
parameter_list|(
name|Weight
name|weight
parameter_list|,
name|float
name|coord
parameter_list|,
name|DocsAndFreqs
index|[]
name|docsAndFreqs
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|weight
argument_list|)
expr_stmt|;
name|this
operator|.
name|coord
operator|=
name|coord
expr_stmt|;
name|this
operator|.
name|docsAndFreqs
operator|=
name|docsAndFreqs
expr_stmt|;
comment|// Sort the array the first time to allow the least frequent DocsEnum to
comment|// lead the matching.
name|ArrayUtil
operator|.
name|mergeSort
argument_list|(
name|docsAndFreqs
argument_list|,
operator|new
name|Comparator
argument_list|<
name|DocsAndFreqs
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|DocsAndFreqs
name|o1
parameter_list|,
name|DocsAndFreqs
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|freq
operator|-
name|o2
operator|.
name|freq
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|lead
operator|=
name|docsAndFreqs
index|[
literal|0
index|]
expr_stmt|;
comment|// least frequent DocsEnum leads the intersection
block|}
DECL|method|doNext
specifier|private
name|int
name|doNext
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
do|do
block|{
if|if
condition|(
name|lead
operator|.
name|doc
operator|==
name|DocsEnum
operator|.
name|NO_MORE_DOCS
condition|)
block|{
return|return
name|NO_MORE_DOCS
return|;
block|}
name|advanceHead
label|:
do|do
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|docsAndFreqs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|docsAndFreqs
index|[
name|i
index|]
operator|.
name|doc
operator|<
name|doc
condition|)
block|{
name|docsAndFreqs
index|[
name|i
index|]
operator|.
name|doc
operator|=
name|docsAndFreqs
index|[
name|i
index|]
operator|.
name|docs
operator|.
name|advance
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|docsAndFreqs
index|[
name|i
index|]
operator|.
name|doc
operator|>
name|doc
condition|)
block|{
comment|// DocsEnum beyond the current doc - break and advance lead
break|break
name|advanceHead
break|;
block|}
block|}
comment|// success - all DocsEnums are on the same doc
return|return
name|doc
return|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
comment|// advance head for next iteration
name|doc
operator|=
name|lead
operator|.
name|doc
operator|=
name|lead
operator|.
name|docs
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|lead
operator|.
name|doc
operator|=
name|lead
operator|.
name|docs
operator|.
name|advance
argument_list|(
name|target
argument_list|)
expr_stmt|;
return|return
name|lastDoc
operator|=
name|doNext
argument_list|(
name|lead
operator|.
name|doc
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|lastDoc
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
name|lead
operator|.
name|doc
operator|=
name|lead
operator|.
name|docs
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
return|return
name|lastDoc
operator|=
name|doNext
argument_list|(
name|lead
operator|.
name|doc
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
name|float
name|sum
init|=
literal|0.0f
decl_stmt|;
for|for
control|(
name|DocsAndFreqs
name|docs
range|:
name|docsAndFreqs
control|)
block|{
name|sum
operator|+=
name|docs
operator|.
name|docScorer
operator|.
name|score
argument_list|(
name|lastDoc
argument_list|,
name|docs
operator|.
name|docs
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sum
operator|*
name|coord
return|;
block|}
DECL|class|DocsAndFreqs
specifier|static
specifier|final
class|class
name|DocsAndFreqs
block|{
DECL|field|docs
specifier|final
name|DocsEnum
name|docs
decl_stmt|;
DECL|field|freq
specifier|final
name|int
name|freq
decl_stmt|;
DECL|field|docScorer
specifier|final
name|ExactDocScorer
name|docScorer
decl_stmt|;
DECL|field|doc
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|DocsAndFreqs
name|DocsAndFreqs
parameter_list|(
name|DocsEnum
name|docs
parameter_list|,
name|int
name|freq
parameter_list|,
name|ExactDocScorer
name|docScorer
parameter_list|)
block|{
name|this
operator|.
name|docs
operator|=
name|docs
expr_stmt|;
name|this
operator|.
name|freq
operator|=
name|freq
expr_stmt|;
name|this
operator|.
name|docScorer
operator|=
name|docScorer
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
