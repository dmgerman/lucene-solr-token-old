begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiFields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Fields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|QueryParser
import|;
end_import
begin_comment
comment|// for javadoc
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Attribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeImpl
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PagedBytes
import|;
end_import
begin_comment
comment|/**  * An abstract {@link Query} that matches documents  * containing a subset of terms provided by a {@link  * FilteredTermsEnum} enumeration.  *  *<p>This query cannot be used directly; you must subclass  * it and define {@link #getTermsEnum} to provide a {@link  * FilteredTermsEnum} that iterates through the terms to be  * matched.  *  *<p><b>NOTE</b>: if {@link #setRewriteMethod} is either  * {@link #CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE} or {@link  * #SCORING_BOOLEAN_QUERY_REWRITE}, you may encounter a  * {@link BooleanQuery.TooManyClauses} exception during  * searching, which happens when the number of terms to be  * searched exceeds {@link  * BooleanQuery#getMaxClauseCount()}.  Setting {@link  * #setRewriteMethod} to {@link #CONSTANT_SCORE_FILTER_REWRITE}  * prevents this.  *  *<p>The recommended rewrite method is {@link  * #CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}: it doesn't spend CPU  * computing unhelpful scores, and it tries to pick the most  * performant rewrite method given the query. If you  * need scoring (like {@link FuzzyQuery}, use  * {@link TopTermsScoringBooleanQueryRewrite} which uses  * a priority queue to only collect competitive terms  * and not hit this limitation.  *  * Note that {@link QueryParser} produces  * MultiTermQueries using {@link  * #CONSTANT_SCORE_AUTO_REWRITE_DEFAULT} by default.  */
end_comment
begin_class
DECL|class|MultiTermQuery
specifier|public
specifier|abstract
class|class
name|MultiTermQuery
extends|extends
name|Query
block|{
DECL|field|field
specifier|protected
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|rewriteMethod
specifier|protected
name|RewriteMethod
name|rewriteMethod
init|=
name|CONSTANT_SCORE_AUTO_REWRITE_DEFAULT
decl_stmt|;
DECL|field|numberOfTerms
specifier|transient
name|int
name|numberOfTerms
init|=
literal|0
decl_stmt|;
comment|/** Add this {@link Attribute} to a {@link TermsEnum} returned by {@link #getTermsEnum}    * and update the boost on each returned term. This enables to control the boost factor    * for each matching term in {@link #SCORING_BOOLEAN_QUERY_REWRITE} or    * {@link TopTermsBooleanQueryRewrite} mode.    * {@link FuzzyQuery} is using this to take the edit distance into account.    */
DECL|interface|BoostAttribute
specifier|public
specifier|static
interface|interface
name|BoostAttribute
extends|extends
name|Attribute
block|{
comment|/** Sets the boost in this attribute */
DECL|method|setBoost
specifier|public
name|void
name|setBoost
parameter_list|(
name|float
name|boost
parameter_list|)
function_decl|;
comment|/** Retrieves the boost, default is {@code 1.0f}. */
DECL|method|getBoost
specifier|public
name|float
name|getBoost
parameter_list|()
function_decl|;
comment|/** Sets the maximum boost for terms that would never get      * into the priority queue of {@link MultiTermQuery.TopTermsBooleanQueryRewrite}.      * This value is not changed by {@link AttributeImpl#clear}      * and not used in {@code equals()} and {@code hashCode()}.      * Do not change the value in the {@link TermsEnum}!      */
DECL|method|setMaxNonCompetitiveBoost
specifier|public
name|void
name|setMaxNonCompetitiveBoost
parameter_list|(
name|float
name|maxNonCompetitiveBoost
parameter_list|)
function_decl|;
comment|/** Retrieves the maximum boost that is not competitive,      * default is megative infinity. You can use this boost value      * as a hint when writing the {@link TermsEnum}.      */
DECL|method|getMaxNonCompetitiveBoost
specifier|public
name|float
name|getMaxNonCompetitiveBoost
parameter_list|()
function_decl|;
block|}
comment|/** Implementation class for {@link BoostAttribute}. */
DECL|class|BoostAttributeImpl
specifier|public
specifier|static
specifier|final
class|class
name|BoostAttributeImpl
extends|extends
name|AttributeImpl
implements|implements
name|BoostAttribute
block|{
DECL|field|boost
DECL|field|maxNonCompetitiveBoost
specifier|private
name|float
name|boost
init|=
literal|1.0f
decl_stmt|,
name|maxNonCompetitiveBoost
init|=
name|Float
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
DECL|method|setBoost
specifier|public
name|void
name|setBoost
parameter_list|(
name|float
name|boost
parameter_list|)
block|{
name|this
operator|.
name|boost
operator|=
name|boost
expr_stmt|;
block|}
DECL|method|getBoost
specifier|public
name|float
name|getBoost
parameter_list|()
block|{
return|return
name|boost
return|;
block|}
DECL|method|setMaxNonCompetitiveBoost
specifier|public
name|void
name|setMaxNonCompetitiveBoost
parameter_list|(
name|float
name|maxNonCompetitiveBoost
parameter_list|)
block|{
name|this
operator|.
name|maxNonCompetitiveBoost
operator|=
name|maxNonCompetitiveBoost
expr_stmt|;
block|}
DECL|method|getMaxNonCompetitiveBoost
specifier|public
name|float
name|getMaxNonCompetitiveBoost
parameter_list|()
block|{
return|return
name|maxNonCompetitiveBoost
return|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|boost
operator|=
literal|1.0f
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|other
operator|instanceof
name|BoostAttributeImpl
condition|)
return|return
operator|(
operator|(
name|BoostAttributeImpl
operator|)
name|other
operator|)
operator|.
name|boost
operator|==
name|boost
return|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|boost
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|copyTo
specifier|public
name|void
name|copyTo
parameter_list|(
name|AttributeImpl
name|target
parameter_list|)
block|{
operator|(
operator|(
name|BoostAttribute
operator|)
name|target
operator|)
operator|.
name|setBoost
argument_list|(
name|boost
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Abstract class that defines how the query is rewritten. */
DECL|class|RewriteMethod
specifier|public
specifier|static
specifier|abstract
class|class
name|RewriteMethod
implements|implements
name|Serializable
block|{
DECL|method|rewrite
specifier|public
specifier|abstract
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|MultiTermQuery
name|query
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|class|ConstantScoreFilterRewrite
specifier|private
specifier|static
specifier|final
class|class
name|ConstantScoreFilterRewrite
extends|extends
name|RewriteMethod
block|{
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|MultiTermQuery
name|query
parameter_list|)
block|{
name|Query
name|result
init|=
operator|new
name|ConstantScoreQuery
argument_list|(
operator|new
name|MultiTermQueryWrapperFilter
argument_list|<
name|MultiTermQuery
argument_list|>
argument_list|(
name|query
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|setBoost
argument_list|(
name|query
operator|.
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|// Make sure we are still a singleton even after deserializing
DECL|method|readResolve
specifier|protected
name|Object
name|readResolve
parameter_list|()
block|{
return|return
name|CONSTANT_SCORE_FILTER_REWRITE
return|;
block|}
block|}
comment|/** A rewrite method that first creates a private Filter,    *  by visiting each term in sequence and marking all docs    *  for that term.  Matching documents are assigned a    *  constant score equal to the query's boost.    *     *<p> This method is faster than the BooleanQuery    *  rewrite methods when the number of matched terms or    *  matched documents is non-trivial. Also, it will never    *  hit an errant {@link BooleanQuery.TooManyClauses}    *  exception.    *    *  @see #setRewriteMethod */
DECL|field|CONSTANT_SCORE_FILTER_REWRITE
specifier|public
specifier|final
specifier|static
name|RewriteMethod
name|CONSTANT_SCORE_FILTER_REWRITE
init|=
operator|new
name|ConstantScoreFilterRewrite
argument_list|()
decl_stmt|;
DECL|class|BooleanQueryRewrite
specifier|private
specifier|abstract
specifier|static
class|class
name|BooleanQueryRewrite
extends|extends
name|RewriteMethod
block|{
DECL|method|collectTerms
specifier|protected
specifier|final
name|int
name|collectTerms
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|MultiTermQuery
name|query
parameter_list|,
name|TermCollector
name|collector
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Fields
name|fields
init|=
name|MultiFields
operator|.
name|getFields
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
comment|// reader has no fields
return|return
literal|0
return|;
block|}
specifier|final
name|Terms
name|terms
init|=
name|fields
operator|.
name|terms
argument_list|(
name|query
operator|.
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|==
literal|null
condition|)
block|{
comment|// field does not exist
return|return
literal|0
return|;
block|}
specifier|final
name|TermsEnum
name|termsEnum
init|=
name|query
operator|.
name|getTermsEnum
argument_list|(
name|reader
argument_list|)
decl_stmt|;
assert|assert
name|termsEnum
operator|!=
literal|null
assert|;
if|if
condition|(
name|termsEnum
operator|==
name|TermsEnum
operator|.
name|EMPTY
condition|)
return|return
literal|0
return|;
specifier|final
name|BoostAttribute
name|boostAtt
init|=
name|termsEnum
operator|.
name|attributes
argument_list|()
operator|.
name|addAttribute
argument_list|(
name|BoostAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|collector
operator|.
name|boostAtt
operator|=
name|boostAtt
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|BytesRef
name|bytes
decl_stmt|;
while|while
condition|(
operator|(
name|bytes
operator|=
name|termsEnum
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|collector
operator|.
name|collect
argument_list|(
name|termsEnum
argument_list|,
name|bytes
argument_list|,
name|boostAtt
operator|.
name|getBoost
argument_list|()
argument_list|)
condition|)
block|{
name|termsEnum
operator|.
name|cacheCurrentTerm
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|collector
operator|.
name|boostAtt
operator|=
literal|null
expr_stmt|;
return|return
name|count
return|;
block|}
DECL|class|TermCollector
specifier|protected
specifier|static
specifier|abstract
class|class
name|TermCollector
block|{
DECL|field|boostAtt
specifier|private
name|BoostAttribute
name|boostAtt
init|=
literal|null
decl_stmt|;
comment|/** return false to stop collecting */
DECL|method|collect
specifier|public
specifier|abstract
name|boolean
name|collect
parameter_list|(
name|TermsEnum
name|termsEnum
parameter_list|,
name|BytesRef
name|bytes
parameter_list|,
name|float
name|boost
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** set the minimum boost as a hint for the term producer */
DECL|method|setMaxNonCompetitiveBoost
specifier|protected
specifier|final
name|void
name|setMaxNonCompetitiveBoost
parameter_list|(
name|float
name|maxNonCompetitiveBoost
parameter_list|)
block|{
assert|assert
name|boostAtt
operator|!=
literal|null
assert|;
name|boostAtt
operator|.
name|setMaxNonCompetitiveBoost
argument_list|(
name|maxNonCompetitiveBoost
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|ScoringBooleanQueryRewrite
specifier|private
specifier|static
class|class
name|ScoringBooleanQueryRewrite
extends|extends
name|BooleanQueryRewrite
block|{
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
specifier|final
name|IndexReader
name|reader
parameter_list|,
specifier|final
name|MultiTermQuery
name|query
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BooleanQuery
name|result
init|=
operator|new
name|BooleanQuery
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|Term
name|placeholderTerm
init|=
operator|new
name|Term
argument_list|(
name|query
operator|.
name|field
argument_list|)
decl_stmt|;
name|query
operator|.
name|incTotalNumberOfTerms
argument_list|(
name|collectTerms
argument_list|(
name|reader
argument_list|,
name|query
argument_list|,
operator|new
name|TermCollector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|collect
parameter_list|(
name|TermsEnum
name|termsEnum
parameter_list|,
name|BytesRef
name|bytes
parameter_list|,
name|float
name|boost
parameter_list|)
block|{
comment|// add new TQ, we must clone the term, else it may get overwritten!
name|TermQuery
name|tq
init|=
operator|new
name|TermQuery
argument_list|(
name|placeholderTerm
operator|.
name|createTerm
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|bytes
argument_list|)
argument_list|)
argument_list|,
name|termsEnum
operator|.
name|docFreq
argument_list|()
argument_list|)
decl_stmt|;
name|tq
operator|.
name|setBoost
argument_list|(
name|query
operator|.
name|getBoost
argument_list|()
operator|*
name|boost
argument_list|)
expr_stmt|;
comment|// set the boost
name|result
operator|.
name|add
argument_list|(
name|tq
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
comment|// add to query
return|return
literal|true
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|// Make sure we are still a singleton even after deserializing
DECL|method|readResolve
specifier|protected
name|Object
name|readResolve
parameter_list|()
block|{
return|return
name|SCORING_BOOLEAN_QUERY_REWRITE
return|;
block|}
block|}
comment|/** A rewrite method that first translates each term into    *  {@link BooleanClause.Occur#SHOULD} clause in a    *  BooleanQuery, and keeps the scores as computed by the    *  query.  Note that typically such scores are    *  meaningless to the user, and require non-trivial CPU    *  to compute, so it's almost always better to use {@link    *  #CONSTANT_SCORE_AUTO_REWRITE_DEFAULT} instead.    *    *<p><b>NOTE</b>: This rewrite method will hit {@link    *  BooleanQuery.TooManyClauses} if the number of terms    *  exceeds {@link BooleanQuery#getMaxClauseCount}.    *    *  @see #setRewriteMethod */
DECL|field|SCORING_BOOLEAN_QUERY_REWRITE
specifier|public
specifier|final
specifier|static
name|RewriteMethod
name|SCORING_BOOLEAN_QUERY_REWRITE
init|=
operator|new
name|ScoringBooleanQueryRewrite
argument_list|()
decl_stmt|;
comment|/**    * Base rewrite method for collecting only the top terms    * via a priority queue.    */
DECL|class|TopTermsBooleanQueryRewrite
specifier|public
specifier|static
specifier|abstract
class|class
name|TopTermsBooleanQueryRewrite
extends|extends
name|BooleanQueryRewrite
block|{
DECL|field|size
specifier|private
specifier|final
name|int
name|size
decl_stmt|;
comment|/**       * Create a TopTermsBooleanQueryRewrite for       * at most<code>size</code> terms.      *<p>      * NOTE: if {@link BooleanQuery#getMaxClauseCount} is smaller than       *<code>size</code>, then it will be used instead.       */
DECL|method|TopTermsBooleanQueryRewrite
specifier|public
name|TopTermsBooleanQueryRewrite
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
comment|/**       * Create a TopTermsBooleanQueryRewrite that is limited      * to at most {@link BooleanQuery#getMaxClauseCount} terms.       */
DECL|method|TopTermsBooleanQueryRewrite
specifier|public
name|TopTermsBooleanQueryRewrite
parameter_list|()
block|{
name|this
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
comment|/** Return a suitable Query for a MultiTermQuery term. */
DECL|method|getQuery
specifier|protected
specifier|abstract
name|Query
name|getQuery
parameter_list|(
name|Term
name|term
parameter_list|,
name|int
name|docCount
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
specifier|final
name|IndexReader
name|reader
parameter_list|,
specifier|final
name|MultiTermQuery
name|query
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|maxSize
init|=
name|Math
operator|.
name|min
argument_list|(
name|size
argument_list|,
name|BooleanQuery
operator|.
name|getMaxClauseCount
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|PriorityQueue
argument_list|<
name|ScoreTerm
argument_list|>
name|stQueue
init|=
operator|new
name|PriorityQueue
argument_list|<
name|ScoreTerm
argument_list|>
argument_list|()
decl_stmt|;
name|collectTerms
argument_list|(
name|reader
argument_list|,
name|query
argument_list|,
operator|new
name|TermCollector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|collect
parameter_list|(
name|TermsEnum
name|termsEnum
parameter_list|,
name|BytesRef
name|bytes
parameter_list|,
name|float
name|boost
parameter_list|)
block|{
comment|// ignore uncompetetive hits
if|if
condition|(
name|stQueue
operator|.
name|size
argument_list|()
operator|>=
name|maxSize
operator|&&
name|boost
operator|<=
name|stQueue
operator|.
name|peek
argument_list|()
operator|.
name|boost
condition|)
return|return
literal|true
return|;
comment|// add new entry in PQ, we must clone the term, else it may get overwritten!
name|st
operator|.
name|bytes
operator|.
name|copy
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|st
operator|.
name|boost
operator|=
name|boost
expr_stmt|;
name|st
operator|.
name|docFreq
operator|=
name|termsEnum
operator|.
name|docFreq
argument_list|()
expr_stmt|;
name|stQueue
operator|.
name|offer
argument_list|(
name|st
argument_list|)
expr_stmt|;
comment|// possibly drop entries from queue
name|st
operator|=
operator|(
name|stQueue
operator|.
name|size
argument_list|()
operator|>
name|maxSize
operator|)
condition|?
name|stQueue
operator|.
name|poll
argument_list|()
else|:
operator|new
name|ScoreTerm
argument_list|()
expr_stmt|;
name|setMaxNonCompetitiveBoost
argument_list|(
operator|(
name|stQueue
operator|.
name|size
argument_list|()
operator|>=
name|maxSize
operator|)
condition|?
name|stQueue
operator|.
name|peek
argument_list|()
operator|.
name|boost
else|:
name|Float
operator|.
name|NEGATIVE_INFINITY
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// reusable instance
specifier|private
name|ScoreTerm
name|st
init|=
operator|new
name|ScoreTerm
argument_list|()
decl_stmt|;
block|}
argument_list|)
expr_stmt|;
specifier|final
name|Term
name|placeholderTerm
init|=
operator|new
name|Term
argument_list|(
name|query
operator|.
name|field
argument_list|)
decl_stmt|;
specifier|final
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|ScoreTerm
name|st
range|:
name|stQueue
control|)
block|{
comment|// add new query, we must clone the term, else it may get overwritten!
name|Query
name|tq
init|=
name|getQuery
argument_list|(
name|placeholderTerm
operator|.
name|createTerm
argument_list|(
name|st
operator|.
name|bytes
argument_list|)
argument_list|,
name|st
operator|.
name|docFreq
argument_list|)
decl_stmt|;
name|tq
operator|.
name|setBoost
argument_list|(
name|query
operator|.
name|getBoost
argument_list|()
operator|*
name|st
operator|.
name|boost
argument_list|)
expr_stmt|;
comment|// set the boost
name|bq
operator|.
name|add
argument_list|(
name|tq
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
comment|// add to query
block|}
name|query
operator|.
name|incTotalNumberOfTerms
argument_list|(
name|bq
operator|.
name|clauses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|bq
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|17
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|size
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|TopTermsBooleanQueryRewrite
name|other
init|=
operator|(
name|TopTermsBooleanQueryRewrite
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|size
operator|!=
name|other
operator|.
name|size
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
DECL|class|ScoreTerm
specifier|private
specifier|static
class|class
name|ScoreTerm
implements|implements
name|Comparable
argument_list|<
name|ScoreTerm
argument_list|>
block|{
DECL|field|bytes
specifier|public
specifier|final
name|BytesRef
name|bytes
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|field|boost
specifier|public
name|float
name|boost
decl_stmt|;
DECL|field|docFreq
specifier|public
name|int
name|docFreq
decl_stmt|;
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|ScoreTerm
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|boost
operator|==
name|other
operator|.
name|boost
condition|)
comment|// TODO: is it OK to use default compare here?
return|return
name|other
operator|.
name|bytes
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|bytes
argument_list|)
return|;
else|else
return|return
name|Float
operator|.
name|compare
argument_list|(
name|this
operator|.
name|boost
argument_list|,
name|other
operator|.
name|boost
argument_list|)
return|;
block|}
block|}
block|}
comment|/**    * A rewrite method that first translates each term into    * {@link BooleanClause.Occur#SHOULD} clause in a BooleanQuery, and keeps the    * scores as computed by the query.    *     *<p>    * This rewrite mode only uses the top scoring terms so it will not overflow    * the boolean max clause count. It is the default rewrite mode for    * {@link FuzzyQuery}.    *     * @see #setRewriteMethod    */
DECL|class|TopTermsScoringBooleanQueryRewrite
specifier|public
specifier|static
specifier|final
class|class
name|TopTermsScoringBooleanQueryRewrite
extends|extends
name|TopTermsBooleanQueryRewrite
block|{
comment|/**       * Create a TopTermsScoringBooleanQueryRewrite that is limited      * to at most {@link BooleanQuery#getMaxClauseCount} terms.       */
DECL|method|TopTermsScoringBooleanQueryRewrite
specifier|public
name|TopTermsScoringBooleanQueryRewrite
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**       * Create a TopTermsScoringBooleanQueryRewrite for       * at most<code>size</code> terms.      *<p>      * NOTE: if {@link BooleanQuery#getMaxClauseCount} is smaller than       *<code>size</code>, then it will be used instead.       */
DECL|method|TopTermsScoringBooleanQueryRewrite
specifier|public
name|TopTermsScoringBooleanQueryRewrite
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|super
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getQuery
specifier|protected
name|Query
name|getQuery
parameter_list|(
name|Term
name|term
parameter_list|,
name|int
name|docFreq
parameter_list|)
block|{
return|return
operator|new
name|TermQuery
argument_list|(
name|term
argument_list|,
name|docFreq
argument_list|)
return|;
block|}
block|}
comment|/**    * A rewrite method that first translates each term into    * {@link BooleanClause.Occur#SHOULD} clause in a BooleanQuery, but the scores    * are only computed as the boost.    *<p>    * This rewrite method only uses the top scoring terms so it will not overflow    * the boolean max clause count.    *     * @see #setRewriteMethod    */
DECL|class|TopTermsBoostOnlyBooleanQueryRewrite
specifier|public
specifier|static
specifier|final
class|class
name|TopTermsBoostOnlyBooleanQueryRewrite
extends|extends
name|TopTermsBooleanQueryRewrite
block|{
comment|/**       * Create a TopTermsBoostOnlyBooleanQueryRewrite that is limited      * to at most {@link BooleanQuery#getMaxClauseCount} terms.       */
DECL|method|TopTermsBoostOnlyBooleanQueryRewrite
specifier|public
name|TopTermsBoostOnlyBooleanQueryRewrite
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**       * Create a TopTermsBoostOnlyBooleanQueryRewrite for       * at most<code>size</code> terms.      *<p>      * NOTE: if {@link BooleanQuery#getMaxClauseCount} is smaller than       *<code>size</code>, then it will be used instead.       */
DECL|method|TopTermsBoostOnlyBooleanQueryRewrite
specifier|public
name|TopTermsBoostOnlyBooleanQueryRewrite
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|super
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getQuery
specifier|protected
name|Query
name|getQuery
parameter_list|(
name|Term
name|term
parameter_list|,
name|int
name|docFreq
parameter_list|)
block|{
return|return
operator|new
name|ConstantScoreQuery
argument_list|(
operator|new
name|QueryWrapperFilter
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|term
argument_list|,
name|docFreq
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|class|ConstantScoreBooleanQueryRewrite
specifier|private
specifier|static
class|class
name|ConstantScoreBooleanQueryRewrite
extends|extends
name|ScoringBooleanQueryRewrite
implements|implements
name|Serializable
block|{
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|MultiTermQuery
name|query
parameter_list|)
throws|throws
name|IOException
block|{
name|Query
name|result
init|=
name|super
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|,
name|query
argument_list|)
decl_stmt|;
assert|assert
name|result
operator|instanceof
name|BooleanQuery
assert|;
comment|// TODO: if empty boolean query return NullQuery?
if|if
condition|(
operator|!
operator|(
operator|(
name|BooleanQuery
operator|)
name|result
operator|)
operator|.
name|clauses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// strip the scores off
name|result
operator|=
operator|new
name|ConstantScoreQuery
argument_list|(
operator|new
name|QueryWrapperFilter
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setBoost
argument_list|(
name|query
operator|.
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|// Make sure we are still a singleton even after deserializing
annotation|@
name|Override
DECL|method|readResolve
specifier|protected
name|Object
name|readResolve
parameter_list|()
block|{
return|return
name|CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE
return|;
block|}
block|}
comment|/** Like {@link #SCORING_BOOLEAN_QUERY_REWRITE} except    *  scores are not computed.  Instead, each matching    *  document receives a constant score equal to the    *  query's boost.    *     *<p><b>NOTE</b>: This rewrite method will hit {@link    *  BooleanQuery.TooManyClauses} if the number of terms    *  exceeds {@link BooleanQuery#getMaxClauseCount}.    *    *  @see #setRewriteMethod */
DECL|field|CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE
specifier|public
specifier|final
specifier|static
name|RewriteMethod
name|CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE
init|=
operator|new
name|ConstantScoreBooleanQueryRewrite
argument_list|()
decl_stmt|;
comment|/** A rewrite method that tries to pick the best    *  constant-score rewrite method based on term and    *  document counts from the query.  If both the number of    *  terms and documents is small enough, then {@link    *  #CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE} is used.    *  Otherwise, {@link #CONSTANT_SCORE_FILTER_REWRITE} is    *  used.    */
DECL|class|ConstantScoreAutoRewrite
specifier|public
specifier|static
class|class
name|ConstantScoreAutoRewrite
extends|extends
name|BooleanQueryRewrite
block|{
comment|// Defaults derived from rough tests with a 20.0 million
comment|// doc Wikipedia index.  With more than 350 terms in the
comment|// query, the filter method is fastest:
DECL|field|DEFAULT_TERM_COUNT_CUTOFF
specifier|public
specifier|static
name|int
name|DEFAULT_TERM_COUNT_CUTOFF
init|=
literal|350
decl_stmt|;
comment|// If the query will hit more than 1 in 1000 of the docs
comment|// in the index (0.1%), the filter method is fastest:
DECL|field|DEFAULT_DOC_COUNT_PERCENT
specifier|public
specifier|static
name|double
name|DEFAULT_DOC_COUNT_PERCENT
init|=
literal|0.1
decl_stmt|;
DECL|field|termCountCutoff
specifier|private
name|int
name|termCountCutoff
init|=
name|DEFAULT_TERM_COUNT_CUTOFF
decl_stmt|;
DECL|field|docCountPercent
specifier|private
name|double
name|docCountPercent
init|=
name|DEFAULT_DOC_COUNT_PERCENT
decl_stmt|;
comment|/** If the number of terms in this query is equal to or      *  larger than this setting then {@link      *  #CONSTANT_SCORE_FILTER_REWRITE} is used. */
DECL|method|setTermCountCutoff
specifier|public
name|void
name|setTermCountCutoff
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|termCountCutoff
operator|=
name|count
expr_stmt|;
block|}
comment|/** @see #setTermCountCutoff */
DECL|method|getTermCountCutoff
specifier|public
name|int
name|getTermCountCutoff
parameter_list|()
block|{
return|return
name|termCountCutoff
return|;
block|}
comment|/** If the number of documents to be visited in the      *  postings exceeds this specified percentage of the      *  maxDoc() for the index, then {@link      *  #CONSTANT_SCORE_FILTER_REWRITE} is used.      *  @param percent 0.0 to 100.0 */
DECL|method|setDocCountPercent
specifier|public
name|void
name|setDocCountPercent
parameter_list|(
name|double
name|percent
parameter_list|)
block|{
name|docCountPercent
operator|=
name|percent
expr_stmt|;
block|}
comment|/** @see #setDocCountPercent */
DECL|method|getDocCountPercent
specifier|public
name|double
name|getDocCountPercent
parameter_list|()
block|{
return|return
name|docCountPercent
return|;
block|}
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
specifier|final
name|IndexReader
name|reader
parameter_list|,
specifier|final
name|MultiTermQuery
name|query
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get the enum and start visiting terms.  If we
comment|// exhaust the enum before hitting either of the
comment|// cutoffs, we use ConstantBooleanQueryRewrite; else,
comment|// ConstantFilterRewrite:
specifier|final
name|int
name|docCountCutoff
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|docCountPercent
operator|/
literal|100.
operator|)
operator|*
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|termCountLimit
init|=
name|Math
operator|.
name|min
argument_list|(
name|BooleanQuery
operator|.
name|getMaxClauseCount
argument_list|()
argument_list|,
name|termCountCutoff
argument_list|)
decl_stmt|;
specifier|final
name|CutOffTermCollector
name|col
init|=
operator|new
name|CutOffTermCollector
argument_list|(
name|reader
argument_list|,
name|query
operator|.
name|field
argument_list|,
name|docCountCutoff
argument_list|,
name|termCountLimit
argument_list|)
decl_stmt|;
name|collectTerms
argument_list|(
name|reader
argument_list|,
name|query
argument_list|,
name|col
argument_list|)
expr_stmt|;
if|if
condition|(
name|col
operator|.
name|hasCutOff
condition|)
block|{
return|return
name|CONSTANT_SCORE_FILTER_REWRITE
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|,
name|query
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|col
operator|.
name|termCount
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|BooleanQuery
argument_list|(
literal|true
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|PagedBytes
operator|.
name|Reader
name|bytesReader
init|=
name|col
operator|.
name|pendingTerms
operator|.
name|freeze
argument_list|(
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|Term
name|placeholderTerm
init|=
operator|new
name|Term
argument_list|(
name|query
operator|.
name|field
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|col
operator|.
name|startOffset
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|col
operator|.
name|termCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|BytesRef
name|bytes
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|start
operator|=
name|bytesReader
operator|.
name|fillUsingLengthPrefix3
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|placeholderTerm
operator|.
name|createTerm
argument_list|(
name|bytes
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
comment|// Strip scores
specifier|final
name|Query
name|result
init|=
operator|new
name|ConstantScoreQuery
argument_list|(
operator|new
name|QueryWrapperFilter
argument_list|(
name|bq
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|setBoost
argument_list|(
name|query
operator|.
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|incTotalNumberOfTerms
argument_list|(
name|col
operator|.
name|termCount
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
finally|finally
block|{
name|bytesReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|CutOffTermCollector
specifier|private
specifier|static
specifier|final
class|class
name|CutOffTermCollector
extends|extends
name|TermCollector
block|{
DECL|method|CutOffTermCollector
name|CutOffTermCollector
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|String
name|field
parameter_list|,
name|int
name|docCountCutoff
parameter_list|,
name|int
name|termCountLimit
parameter_list|)
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|docCountCutoff
operator|=
name|docCountCutoff
expr_stmt|;
name|this
operator|.
name|termCountLimit
operator|=
name|termCountLimit
expr_stmt|;
block|}
DECL|method|collect
specifier|public
name|boolean
name|collect
parameter_list|(
name|TermsEnum
name|termsEnum
parameter_list|,
name|BytesRef
name|bytes
parameter_list|,
name|float
name|boost
parameter_list|)
throws|throws
name|IOException
block|{
name|termCount
operator|++
expr_stmt|;
if|if
condition|(
name|termCount
operator|>=
name|termCountLimit
operator|||
name|docVisitCount
operator|>=
name|docCountCutoff
condition|)
block|{
name|hasCutOff
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
name|pendingTerms
operator|.
name|copyUsingLengthPrefix
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|docVisitCount
operator|+=
name|termsEnum
operator|.
name|docFreq
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|field|docVisitCount
name|int
name|docVisitCount
init|=
literal|0
decl_stmt|;
DECL|field|hasCutOff
name|boolean
name|hasCutOff
init|=
literal|false
decl_stmt|;
DECL|field|termCount
name|int
name|termCount
init|=
literal|0
decl_stmt|;
DECL|field|reader
specifier|final
name|IndexReader
name|reader
decl_stmt|;
DECL|field|field
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|docCountCutoff
DECL|field|termCountLimit
specifier|final
name|int
name|docCountCutoff
decl_stmt|,
name|termCountLimit
decl_stmt|;
DECL|field|pendingTerms
specifier|final
name|PagedBytes
name|pendingTerms
init|=
operator|new
name|PagedBytes
argument_list|(
literal|15
argument_list|)
decl_stmt|;
comment|// max term size is 32 KiB
DECL|field|startOffset
specifier|final
name|long
name|startOffset
init|=
name|pendingTerms
operator|.
name|getPointer
argument_list|()
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|1279
decl_stmt|;
return|return
call|(
name|int
call|)
argument_list|(
name|prime
operator|*
name|termCountCutoff
operator|+
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|docCountPercent
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|ConstantScoreAutoRewrite
name|other
init|=
operator|(
name|ConstantScoreAutoRewrite
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|termCountCutoff
operator|!=
name|termCountCutoff
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|other
operator|.
name|docCountPercent
argument_list|)
operator|!=
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|docCountPercent
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
comment|/** Read-only default instance of {@link    *  ConstantScoreAutoRewrite}, with {@link    *  ConstantScoreAutoRewrite#setTermCountCutoff} set to    *  {@link    *  ConstantScoreAutoRewrite#DEFAULT_TERM_COUNT_CUTOFF}    *  and {@link    *  ConstantScoreAutoRewrite#setDocCountPercent} set to    *  {@link    *  ConstantScoreAutoRewrite#DEFAULT_DOC_COUNT_PERCENT}.    *  Note that you cannot alter the configuration of this    *  instance; you'll need to create a private instance    *  instead. */
DECL|field|CONSTANT_SCORE_AUTO_REWRITE_DEFAULT
specifier|public
specifier|final
specifier|static
name|RewriteMethod
name|CONSTANT_SCORE_AUTO_REWRITE_DEFAULT
init|=
operator|new
name|ConstantScoreAutoRewrite
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setTermCountCutoff
parameter_list|(
name|int
name|count
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Please create a private instance"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDocCountPercent
parameter_list|(
name|double
name|percent
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Please create a private instance"
argument_list|)
throw|;
block|}
comment|// Make sure we are still a singleton even after deserializing
specifier|protected
name|Object
name|readResolve
parameter_list|()
block|{
return|return
name|CONSTANT_SCORE_AUTO_REWRITE_DEFAULT
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Constructs a query matching terms that cannot be represented with a single    * Term.    */
DECL|method|MultiTermQuery
specifier|public
name|MultiTermQuery
parameter_list|(
specifier|final
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
assert|assert
name|field
operator|!=
literal|null
assert|;
block|}
comment|/** Returns the field name for this query */
DECL|method|getField
specifier|public
specifier|final
name|String
name|getField
parameter_list|()
block|{
return|return
name|field
return|;
block|}
comment|/** Construct the enumeration to be used, expanding the    *  pattern term.  This method should only be called if    *  the field exists (ie, implementations can assume the    *  field does exist).  This method should not return null    *  (should instead return {@link TermsEnum#EMPTY} if no    *  terms match).  The TermsEnum must already be    *  positioned to the first matching term. */
DECL|method|getTermsEnum
specifier|protected
specifier|abstract
name|TermsEnum
name|getTermsEnum
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Expert: Return the number of unique terms visited during execution of the query.    * If there are many of them, you may consider using another query type    * or optimize your total term count in index.    *<p>This method is not thread safe, be sure to only call it when no query is running!    * If you re-use the same query instance for another    * search, be sure to first reset the term counter    * with {@link #clearTotalNumberOfTerms}.    *<p>On optimized indexes / no MultiReaders, you get the correct number of    * unique terms for the whole index. Use this number to compare different queries.    * For non-optimized indexes this number can also be achieved in    * non-constant-score mode. In constant-score mode you get the total number of    * terms seeked for all segments / sub-readers.    * @see #clearTotalNumberOfTerms    */
DECL|method|getTotalNumberOfTerms
specifier|public
name|int
name|getTotalNumberOfTerms
parameter_list|()
block|{
return|return
name|numberOfTerms
return|;
block|}
comment|/**    * Expert: Resets the counting of unique terms.    * Do this before executing the query/filter.    * @see #getTotalNumberOfTerms    */
DECL|method|clearTotalNumberOfTerms
specifier|public
name|void
name|clearTotalNumberOfTerms
parameter_list|()
block|{
name|numberOfTerms
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|incTotalNumberOfTerms
specifier|protected
name|void
name|incTotalNumberOfTerms
parameter_list|(
name|int
name|inc
parameter_list|)
block|{
name|numberOfTerms
operator|+=
name|inc
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|rewriteMethod
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|,
name|this
argument_list|)
return|;
block|}
comment|/**    * @see #setRewriteMethod    */
DECL|method|getRewriteMethod
specifier|public
name|RewriteMethod
name|getRewriteMethod
parameter_list|()
block|{
return|return
name|rewriteMethod
return|;
block|}
comment|/**    * Sets the rewrite method to be used when executing the    * query.  You can use one of the four core methods, or    * implement your own subclass of {@link RewriteMethod}. */
DECL|method|setRewriteMethod
specifier|public
name|void
name|setRewriteMethod
parameter_list|(
name|RewriteMethod
name|method
parameter_list|)
block|{
name|rewriteMethod
operator|=
name|method
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|rewriteMethod
operator|.
name|hashCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|field
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|MultiTermQuery
name|other
init|=
operator|(
name|MultiTermQuery
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|getBoost
argument_list|()
argument_list|)
operator|!=
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|other
operator|.
name|getBoost
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|rewriteMethod
operator|.
name|equals
argument_list|(
name|other
operator|.
name|rewriteMethod
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|(
name|other
operator|.
name|field
operator|==
literal|null
condition|?
name|field
operator|==
literal|null
else|:
name|other
operator|.
name|field
operator|.
name|equals
argument_list|(
name|field
argument_list|)
operator|)
return|;
block|}
block|}
end_class
end_unit
