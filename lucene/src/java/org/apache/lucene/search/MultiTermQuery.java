begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Fields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
operator|.
name|QueryParser
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Attribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeImpl
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ByteBlockPool
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefHash
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ReaderUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefHash
operator|.
name|DirectBytesStartArray
import|;
end_import
begin_comment
comment|/**  * An abstract {@link Query} that matches documents  * containing a subset of terms provided by a {@link  * FilteredTermsEnum} enumeration.  *  *<p>This query cannot be used directly; you must subclass  * it and define {@link #getTermsEnum(IndexReader,AttributeSource)} to provide a {@link  * FilteredTermsEnum} that iterates through the terms to be  * matched.  *  *<p><b>NOTE</b>: if {@link #setRewriteMethod} is either  * {@link #CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE} or {@link  * #SCORING_BOOLEAN_QUERY_REWRITE}, you may encounter a  * {@link BooleanQuery.TooManyClauses} exception during  * searching, which happens when the number of terms to be  * searched exceeds {@link  * BooleanQuery#getMaxClauseCount()}.  Setting {@link  * #setRewriteMethod} to {@link #CONSTANT_SCORE_FILTER_REWRITE}  * prevents this.  *  *<p>The recommended rewrite method is {@link  * #CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}: it doesn't spend CPU  * computing unhelpful scores, and it tries to pick the most  * performant rewrite method given the query. If you  * need scoring (like {@link FuzzyQuery}, use  * {@link TopTermsScoringBooleanQueryRewrite} which uses  * a priority queue to only collect competitive terms  * and not hit this limitation.  *  * Note that {@link QueryParser} produces  * MultiTermQueries using {@link  * #CONSTANT_SCORE_AUTO_REWRITE_DEFAULT} by default.  */
end_comment
begin_class
DECL|class|MultiTermQuery
specifier|public
specifier|abstract
class|class
name|MultiTermQuery
extends|extends
name|Query
block|{
DECL|field|field
specifier|protected
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|rewriteMethod
specifier|protected
name|RewriteMethod
name|rewriteMethod
init|=
name|CONSTANT_SCORE_AUTO_REWRITE_DEFAULT
decl_stmt|;
DECL|field|numberOfTerms
specifier|transient
name|int
name|numberOfTerms
init|=
literal|0
decl_stmt|;
comment|/** Add this {@link Attribute} to a {@link TermsEnum} returned by {@link #getTermsEnum(IndexReader,AttributeSource)}    * and update the boost on each returned term. This enables to control the boost factor    * for each matching term in {@link #SCORING_BOOLEAN_QUERY_REWRITE} or    * {@link TopTermsBooleanQueryRewrite} mode.    * {@link FuzzyQuery} is using this to take the edit distance into account.    *<p><b>Please note:</b> This attribute is intended to be added only by the TermsEnum    * to itsself in its constructor and consumed by the {@link RewriteMethod}.    * @lucene.internal    */
DECL|interface|BoostAttribute
specifier|public
specifier|static
interface|interface
name|BoostAttribute
extends|extends
name|Attribute
block|{
comment|/** Sets the boost in this attribute */
DECL|method|setBoost
specifier|public
name|void
name|setBoost
parameter_list|(
name|float
name|boost
parameter_list|)
function_decl|;
comment|/** Retrieves the boost, default is {@code 1.0f}. */
DECL|method|getBoost
specifier|public
name|float
name|getBoost
parameter_list|()
function_decl|;
block|}
comment|/** Implementation class for {@link BoostAttribute}. */
DECL|class|BoostAttributeImpl
specifier|public
specifier|static
specifier|final
class|class
name|BoostAttributeImpl
extends|extends
name|AttributeImpl
implements|implements
name|BoostAttribute
block|{
DECL|field|boost
specifier|private
name|float
name|boost
init|=
literal|1.0f
decl_stmt|;
DECL|method|setBoost
specifier|public
name|void
name|setBoost
parameter_list|(
name|float
name|boost
parameter_list|)
block|{
name|this
operator|.
name|boost
operator|=
name|boost
expr_stmt|;
block|}
DECL|method|getBoost
specifier|public
name|float
name|getBoost
parameter_list|()
block|{
return|return
name|boost
return|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|boost
operator|=
literal|1.0f
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|other
operator|instanceof
name|BoostAttributeImpl
condition|)
return|return
operator|(
operator|(
name|BoostAttributeImpl
operator|)
name|other
operator|)
operator|.
name|boost
operator|==
name|boost
return|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|boost
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|copyTo
specifier|public
name|void
name|copyTo
parameter_list|(
name|AttributeImpl
name|target
parameter_list|)
block|{
operator|(
operator|(
name|BoostAttribute
operator|)
name|target
operator|)
operator|.
name|setBoost
argument_list|(
name|boost
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Add this {@link Attribute} to a fresh {@link AttributeSource} before calling    * {@link #getTermsEnum(IndexReader,AttributeSource)}.    * {@link FuzzyQuery} is using this to control its internal behaviour    * to only return competitive terms.    *<p><b>Please note:</b> This attribute is intended to be added by the {@link RewriteMethod}    * to an empty {@link AttributeSource} that is shared for all segments    * during query rewrite. This attribute source is passed to all segment enums    * on {@link #getTermsEnum(IndexReader,AttributeSource)}.    * {@link TopTermsBooleanQueryRewrite} uses this attribute to    * inform all enums about the current boost, that is not competitive.    * @lucene.internal    */
DECL|interface|MaxNonCompetitiveBoostAttribute
specifier|public
specifier|static
interface|interface
name|MaxNonCompetitiveBoostAttribute
extends|extends
name|Attribute
block|{
comment|/** This is the maximum boost that would not be competitive. */
DECL|method|setMaxNonCompetitiveBoost
specifier|public
name|void
name|setMaxNonCompetitiveBoost
parameter_list|(
name|float
name|maxNonCompetitiveBoost
parameter_list|)
function_decl|;
comment|/** This is the maximum boost that would not be competitive. Default is negative infinity, which means every term is competitive. */
DECL|method|getMaxNonCompetitiveBoost
specifier|public
name|float
name|getMaxNonCompetitiveBoost
parameter_list|()
function_decl|;
comment|/** This is the term or<code>null<code> of the term that triggered the boost change. */
DECL|method|setCompetitiveTerm
specifier|public
name|void
name|setCompetitiveTerm
parameter_list|(
name|BytesRef
name|competitiveTerm
parameter_list|)
function_decl|;
comment|/** This is the term or<code>null<code> of the term that triggered the boost change. Default is<code>null</code>, which means every term is competitoive. */
DECL|method|getCompetitiveTerm
specifier|public
name|BytesRef
name|getCompetitiveTerm
parameter_list|()
function_decl|;
block|}
comment|/** Implementation class for {@link MaxNonCompetitiveBoostAttribute}. */
DECL|class|MaxNonCompetitiveBoostAttributeImpl
specifier|public
specifier|static
specifier|final
class|class
name|MaxNonCompetitiveBoostAttributeImpl
extends|extends
name|AttributeImpl
implements|implements
name|MaxNonCompetitiveBoostAttribute
block|{
DECL|field|maxNonCompetitiveBoost
specifier|private
name|float
name|maxNonCompetitiveBoost
init|=
name|Float
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
DECL|field|competitiveTerm
specifier|private
name|BytesRef
name|competitiveTerm
init|=
literal|null
decl_stmt|;
DECL|method|setMaxNonCompetitiveBoost
specifier|public
name|void
name|setMaxNonCompetitiveBoost
parameter_list|(
specifier|final
name|float
name|maxNonCompetitiveBoost
parameter_list|)
block|{
name|this
operator|.
name|maxNonCompetitiveBoost
operator|=
name|maxNonCompetitiveBoost
expr_stmt|;
block|}
DECL|method|getMaxNonCompetitiveBoost
specifier|public
name|float
name|getMaxNonCompetitiveBoost
parameter_list|()
block|{
return|return
name|maxNonCompetitiveBoost
return|;
block|}
DECL|method|setCompetitiveTerm
specifier|public
name|void
name|setCompetitiveTerm
parameter_list|(
specifier|final
name|BytesRef
name|competitiveTerm
parameter_list|)
block|{
name|this
operator|.
name|competitiveTerm
operator|=
name|competitiveTerm
expr_stmt|;
block|}
DECL|method|getCompetitiveTerm
specifier|public
name|BytesRef
name|getCompetitiveTerm
parameter_list|()
block|{
return|return
name|competitiveTerm
return|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|maxNonCompetitiveBoost
operator|=
name|Float
operator|.
name|NEGATIVE_INFINITY
expr_stmt|;
name|competitiveTerm
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|other
operator|instanceof
name|MaxNonCompetitiveBoostAttributeImpl
condition|)
block|{
specifier|final
name|MaxNonCompetitiveBoostAttributeImpl
name|o
init|=
operator|(
name|MaxNonCompetitiveBoostAttributeImpl
operator|)
name|other
decl_stmt|;
return|return
operator|(
name|o
operator|.
name|maxNonCompetitiveBoost
operator|==
name|maxNonCompetitiveBoost
operator|)
operator|&&
operator|(
name|o
operator|.
name|competitiveTerm
operator|==
literal|null
condition|?
name|competitiveTerm
operator|==
literal|null
else|:
name|o
operator|.
name|competitiveTerm
operator|.
name|equals
argument_list|(
name|competitiveTerm
argument_list|)
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|maxNonCompetitiveBoost
argument_list|)
decl_stmt|;
if|if
condition|(
name|competitiveTerm
operator|!=
literal|null
condition|)
name|hash
operator|=
literal|31
operator|*
name|hash
operator|+
name|competitiveTerm
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|hash
return|;
block|}
annotation|@
name|Override
DECL|method|copyTo
specifier|public
name|void
name|copyTo
parameter_list|(
name|AttributeImpl
name|target
parameter_list|)
block|{
specifier|final
name|MaxNonCompetitiveBoostAttributeImpl
name|t
init|=
operator|(
name|MaxNonCompetitiveBoostAttributeImpl
operator|)
name|target
decl_stmt|;
name|t
operator|.
name|setMaxNonCompetitiveBoost
argument_list|(
name|maxNonCompetitiveBoost
argument_list|)
expr_stmt|;
name|t
operator|.
name|setCompetitiveTerm
argument_list|(
name|competitiveTerm
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Abstract class that defines how the query is rewritten. */
DECL|class|RewriteMethod
specifier|public
specifier|static
specifier|abstract
class|class
name|RewriteMethod
implements|implements
name|Serializable
block|{
DECL|method|rewrite
specifier|public
specifier|abstract
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|MultiTermQuery
name|query
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|class|ConstantScoreFilterRewrite
specifier|private
specifier|static
specifier|final
class|class
name|ConstantScoreFilterRewrite
extends|extends
name|RewriteMethod
block|{
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|MultiTermQuery
name|query
parameter_list|)
block|{
name|Query
name|result
init|=
operator|new
name|ConstantScoreQuery
argument_list|(
operator|new
name|MultiTermQueryWrapperFilter
argument_list|<
name|MultiTermQuery
argument_list|>
argument_list|(
name|query
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|setBoost
argument_list|(
name|query
operator|.
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|// Make sure we are still a singleton even after deserializing
DECL|method|readResolve
specifier|protected
name|Object
name|readResolve
parameter_list|()
block|{
return|return
name|CONSTANT_SCORE_FILTER_REWRITE
return|;
block|}
block|}
comment|/** A rewrite method that first creates a private Filter,    *  by visiting each term in sequence and marking all docs    *  for that term.  Matching documents are assigned a    *  constant score equal to the query's boost.    *     *<p> This method is faster than the BooleanQuery    *  rewrite methods when the number of matched terms or    *  matched documents is non-trivial. Also, it will never    *  hit an errant {@link BooleanQuery.TooManyClauses}    *  exception.    *    *  @see #setRewriteMethod */
DECL|field|CONSTANT_SCORE_FILTER_REWRITE
specifier|public
specifier|final
specifier|static
name|RewriteMethod
name|CONSTANT_SCORE_FILTER_REWRITE
init|=
operator|new
name|ConstantScoreFilterRewrite
argument_list|()
decl_stmt|;
DECL|class|BooleanQueryRewrite
specifier|private
specifier|abstract
specifier|static
class|class
name|BooleanQueryRewrite
extends|extends
name|RewriteMethod
block|{
DECL|method|collectTerms
specifier|protected
specifier|final
name|int
name|collectTerms
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|MultiTermQuery
name|query
parameter_list|,
name|TermCollector
name|collector
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|IndexReader
argument_list|>
name|subReaders
init|=
operator|new
name|ArrayList
argument_list|<
name|IndexReader
argument_list|>
argument_list|()
decl_stmt|;
name|ReaderUtil
operator|.
name|gatherSubReaders
argument_list|(
name|subReaders
argument_list|,
name|reader
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|lastTermComp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|IndexReader
name|r
range|:
name|subReaders
control|)
block|{
specifier|final
name|Fields
name|fields
init|=
name|r
operator|.
name|fields
argument_list|()
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
comment|// reader has no fields
continue|continue;
block|}
specifier|final
name|Terms
name|terms
init|=
name|fields
operator|.
name|terms
argument_list|(
name|query
operator|.
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|==
literal|null
condition|)
block|{
comment|// field does not exist
continue|continue;
block|}
specifier|final
name|TermsEnum
name|termsEnum
init|=
name|query
operator|.
name|getTermsEnum
argument_list|(
name|r
argument_list|,
name|collector
operator|.
name|attributes
argument_list|)
decl_stmt|;
assert|assert
name|termsEnum
operator|!=
literal|null
assert|;
if|if
condition|(
name|termsEnum
operator|==
name|TermsEnum
operator|.
name|EMPTY
condition|)
continue|continue;
comment|// Check comparator compatibility:
specifier|final
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|newTermComp
init|=
name|termsEnum
operator|.
name|getComparator
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastTermComp
operator|!=
literal|null
operator|&&
name|newTermComp
operator|!=
name|lastTermComp
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term comparator should not change between segments: "
operator|+
name|lastTermComp
operator|+
literal|" != "
operator|+
name|newTermComp
argument_list|)
throw|;
name|lastTermComp
operator|=
name|newTermComp
expr_stmt|;
name|collector
operator|.
name|setNextEnum
argument_list|(
name|termsEnum
argument_list|)
expr_stmt|;
name|BytesRef
name|bytes
decl_stmt|;
while|while
condition|(
operator|(
name|bytes
operator|=
name|termsEnum
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|collector
operator|.
name|collect
argument_list|(
name|bytes
argument_list|)
condition|)
block|{
name|termsEnum
operator|.
name|cacheCurrentTerm
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
else|else
block|{
return|return
name|count
return|;
comment|// interrupt whole term collection, so also don't iterate other subReaders
block|}
block|}
block|}
return|return
name|count
return|;
block|}
DECL|class|TermCollector
specifier|protected
specifier|static
specifier|abstract
class|class
name|TermCollector
block|{
comment|/** attributes used for communication with the enum */
DECL|field|attributes
specifier|public
specifier|final
name|AttributeSource
name|attributes
init|=
operator|new
name|AttributeSource
argument_list|()
decl_stmt|;
comment|/** return false to stop collecting */
DECL|method|collect
specifier|public
specifier|abstract
name|boolean
name|collect
parameter_list|(
name|BytesRef
name|bytes
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** the next segment's {@link TermsEnum} that is used to collect terms */
DECL|method|setNextEnum
specifier|public
specifier|abstract
name|void
name|setNextEnum
parameter_list|(
name|TermsEnum
name|termsEnum
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
block|}
DECL|class|ScoringBooleanQueryRewrite
specifier|private
specifier|static
class|class
name|ScoringBooleanQueryRewrite
extends|extends
name|BooleanQueryRewrite
block|{
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
specifier|final
name|IndexReader
name|reader
parameter_list|,
specifier|final
name|MultiTermQuery
name|query
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ParallelArraysTermCollector
name|col
init|=
operator|new
name|ParallelArraysTermCollector
argument_list|()
decl_stmt|;
name|collectTerms
argument_list|(
name|reader
argument_list|,
name|query
argument_list|,
name|col
argument_list|)
expr_stmt|;
specifier|final
name|Term
name|placeholderTerm
init|=
operator|new
name|Term
argument_list|(
name|query
operator|.
name|field
argument_list|)
decl_stmt|;
specifier|final
name|BooleanQuery
name|result
init|=
operator|new
name|BooleanQuery
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|col
operator|.
name|terms
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
specifier|final
name|int
name|sort
index|[]
init|=
name|col
operator|.
name|terms
operator|.
name|sort
argument_list|(
name|col
operator|.
name|termsEnum
operator|.
name|getComparator
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
index|[]
name|docFreq
init|=
name|col
operator|.
name|array
operator|.
name|docFreq
decl_stmt|;
specifier|final
name|float
index|[]
name|boost
init|=
name|col
operator|.
name|array
operator|.
name|boost
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|pos
init|=
name|sort
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|Term
name|term
init|=
name|placeholderTerm
operator|.
name|createTerm
argument_list|(
name|col
operator|.
name|terms
operator|.
name|get
argument_list|(
name|pos
argument_list|,
operator|new
name|BytesRef
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
assert|assert
name|reader
operator|.
name|docFreq
argument_list|(
name|term
argument_list|)
operator|==
name|docFreq
index|[
name|pos
index|]
assert|;
specifier|final
name|TermQuery
name|tq
init|=
operator|new
name|TermQuery
argument_list|(
name|term
argument_list|,
name|docFreq
index|[
name|pos
index|]
argument_list|)
decl_stmt|;
name|tq
operator|.
name|setBoost
argument_list|(
name|query
operator|.
name|getBoost
argument_list|()
operator|*
name|boost
index|[
name|pos
index|]
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|tq
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
block|}
name|query
operator|.
name|incTotalNumberOfTerms
argument_list|(
name|size
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|// Make sure we are still a singleton even after deserializing
DECL|method|readResolve
specifier|protected
name|Object
name|readResolve
parameter_list|()
block|{
return|return
name|SCORING_BOOLEAN_QUERY_REWRITE
return|;
block|}
DECL|class|ParallelArraysTermCollector
specifier|static
specifier|final
class|class
name|ParallelArraysTermCollector
extends|extends
name|TermCollector
block|{
DECL|field|array
specifier|final
name|TermFreqBoostByteStart
name|array
init|=
operator|new
name|TermFreqBoostByteStart
argument_list|(
literal|16
argument_list|)
decl_stmt|;
DECL|field|terms
specifier|final
name|BytesRefHash
name|terms
init|=
operator|new
name|BytesRefHash
argument_list|(
operator|new
name|ByteBlockPool
argument_list|(
operator|new
name|ByteBlockPool
operator|.
name|DirectAllocator
argument_list|()
argument_list|)
argument_list|,
literal|16
argument_list|,
name|array
argument_list|)
decl_stmt|;
DECL|field|termsEnum
name|TermsEnum
name|termsEnum
decl_stmt|;
DECL|field|boostAtt
specifier|private
name|BoostAttribute
name|boostAtt
decl_stmt|;
annotation|@
name|Override
DECL|method|setNextEnum
specifier|public
name|void
name|setNextEnum
parameter_list|(
name|TermsEnum
name|termsEnum
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|termsEnum
operator|=
name|termsEnum
expr_stmt|;
name|this
operator|.
name|boostAtt
operator|=
name|termsEnum
operator|.
name|attributes
argument_list|()
operator|.
name|addAttribute
argument_list|(
name|BoostAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|boolean
name|collect
parameter_list|(
name|BytesRef
name|bytes
parameter_list|)
block|{
specifier|final
name|int
name|e
init|=
name|terms
operator|.
name|add
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|<
literal|0
condition|)
block|{
comment|// duplicate term: update docFreq
specifier|final
name|int
name|pos
init|=
operator|(
operator|-
name|e
operator|)
operator|-
literal|1
decl_stmt|;
name|array
operator|.
name|docFreq
index|[
name|pos
index|]
operator|+=
name|termsEnum
operator|.
name|docFreq
argument_list|()
expr_stmt|;
assert|assert
name|array
operator|.
name|boost
index|[
name|pos
index|]
operator|==
name|boostAtt
operator|.
name|getBoost
argument_list|()
operator|:
literal|"boost should be equal in all segment TermsEnums"
assert|;
block|}
else|else
block|{
comment|// new entry: we populate the entry initially
name|array
operator|.
name|docFreq
index|[
name|e
index|]
operator|=
name|termsEnum
operator|.
name|docFreq
argument_list|()
expr_stmt|;
name|array
operator|.
name|boost
index|[
name|e
index|]
operator|=
name|boostAtt
operator|.
name|getBoost
argument_list|()
expr_stmt|;
block|}
comment|// if the new entry reaches the max clause count, we exit early
if|if
condition|(
name|e
operator|>=
name|BooleanQuery
operator|.
name|getMaxClauseCount
argument_list|()
condition|)
throw|throw
operator|new
name|BooleanQuery
operator|.
name|TooManyClauses
argument_list|()
throw|;
return|return
literal|true
return|;
block|}
block|}
comment|/** Special implementation of BytesStartArray that keeps parallel arrays for boost and docFreq */
DECL|class|TermFreqBoostByteStart
specifier|static
specifier|final
class|class
name|TermFreqBoostByteStart
extends|extends
name|DirectBytesStartArray
block|{
DECL|field|docFreq
name|int
index|[]
name|docFreq
decl_stmt|;
DECL|field|boost
name|float
index|[]
name|boost
decl_stmt|;
DECL|method|TermFreqBoostByteStart
specifier|public
name|TermFreqBoostByteStart
parameter_list|(
name|int
name|initSize
parameter_list|)
block|{
name|super
argument_list|(
name|initSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|int
index|[]
name|init
parameter_list|()
block|{
specifier|final
name|int
index|[]
name|ord
init|=
name|super
operator|.
name|init
argument_list|()
decl_stmt|;
name|boost
operator|=
operator|new
name|float
index|[
name|ArrayUtil
operator|.
name|oversize
argument_list|(
name|ord
operator|.
name|length
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_FLOAT
argument_list|)
index|]
expr_stmt|;
name|docFreq
operator|=
operator|new
name|int
index|[
name|ArrayUtil
operator|.
name|oversize
argument_list|(
name|ord
operator|.
name|length
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
argument_list|)
index|]
expr_stmt|;
assert|assert
name|boost
operator|.
name|length
operator|>=
name|ord
operator|.
name|length
operator|&&
name|docFreq
operator|.
name|length
operator|>=
name|ord
operator|.
name|length
assert|;
return|return
name|ord
return|;
block|}
annotation|@
name|Override
DECL|method|grow
specifier|public
name|int
index|[]
name|grow
parameter_list|()
block|{
specifier|final
name|int
index|[]
name|ord
init|=
name|super
operator|.
name|grow
argument_list|()
decl_stmt|;
name|docFreq
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|docFreq
argument_list|,
name|ord
operator|.
name|length
argument_list|)
expr_stmt|;
name|boost
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|boost
argument_list|,
name|ord
operator|.
name|length
argument_list|)
expr_stmt|;
assert|assert
name|boost
operator|.
name|length
operator|>=
name|ord
operator|.
name|length
operator|&&
name|docFreq
operator|.
name|length
operator|>=
name|ord
operator|.
name|length
assert|;
return|return
name|ord
return|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|int
index|[]
name|clear
parameter_list|()
block|{
name|boost
operator|=
literal|null
expr_stmt|;
name|docFreq
operator|=
literal|null
expr_stmt|;
return|return
name|super
operator|.
name|clear
argument_list|()
return|;
block|}
block|}
block|}
comment|/** A rewrite method that first translates each term into    *  {@link BooleanClause.Occur#SHOULD} clause in a    *  BooleanQuery, and keeps the scores as computed by the    *  query.  Note that typically such scores are    *  meaningless to the user, and require non-trivial CPU    *  to compute, so it's almost always better to use {@link    *  #CONSTANT_SCORE_AUTO_REWRITE_DEFAULT} instead.    *    *<p><b>NOTE</b>: This rewrite method will hit {@link    *  BooleanQuery.TooManyClauses} if the number of terms    *  exceeds {@link BooleanQuery#getMaxClauseCount}.    *    *  @see #setRewriteMethod */
DECL|field|SCORING_BOOLEAN_QUERY_REWRITE
specifier|public
specifier|final
specifier|static
name|RewriteMethod
name|SCORING_BOOLEAN_QUERY_REWRITE
init|=
operator|new
name|ScoringBooleanQueryRewrite
argument_list|()
decl_stmt|;
comment|/**    * Base rewrite method for collecting only the top terms    * via a priority queue.    */
DECL|class|TopTermsBooleanQueryRewrite
specifier|public
specifier|static
specifier|abstract
class|class
name|TopTermsBooleanQueryRewrite
extends|extends
name|BooleanQueryRewrite
block|{
DECL|field|size
specifier|private
specifier|final
name|int
name|size
decl_stmt|;
comment|/**       * Create a TopTermsBooleanQueryRewrite for       * at most<code>size</code> terms.      *<p>      * NOTE: if {@link BooleanQuery#getMaxClauseCount} is smaller than       *<code>size</code>, then it will be used instead.       */
DECL|method|TopTermsBooleanQueryRewrite
specifier|public
name|TopTermsBooleanQueryRewrite
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
comment|/** Return a suitable Query for a MultiTermQuery term. */
DECL|method|getQuery
specifier|protected
specifier|abstract
name|Query
name|getQuery
parameter_list|(
name|Term
name|term
parameter_list|,
name|int
name|docCount
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
specifier|final
name|IndexReader
name|reader
parameter_list|,
specifier|final
name|MultiTermQuery
name|query
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|maxSize
init|=
name|Math
operator|.
name|min
argument_list|(
name|size
argument_list|,
name|BooleanQuery
operator|.
name|getMaxClauseCount
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|PriorityQueue
argument_list|<
name|ScoreTerm
argument_list|>
name|stQueue
init|=
operator|new
name|PriorityQueue
argument_list|<
name|ScoreTerm
argument_list|>
argument_list|()
decl_stmt|;
name|collectTerms
argument_list|(
name|reader
argument_list|,
name|query
argument_list|,
operator|new
name|TermCollector
argument_list|()
block|{
specifier|private
specifier|final
name|MaxNonCompetitiveBoostAttribute
name|maxBoostAtt
init|=
name|attributes
operator|.
name|addAttribute
argument_list|(
name|MaxNonCompetitiveBoostAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|ScoreTerm
argument_list|>
name|visitedTerms
init|=
operator|new
name|HashMap
argument_list|<
name|BytesRef
argument_list|,
name|ScoreTerm
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|TermsEnum
name|termsEnum
decl_stmt|;
specifier|private
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|termComp
decl_stmt|;
specifier|private
name|BoostAttribute
name|boostAtt
decl_stmt|;
specifier|private
name|ScoreTerm
name|st
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setNextEnum
parameter_list|(
name|TermsEnum
name|termsEnum
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|termsEnum
operator|=
name|termsEnum
expr_stmt|;
name|this
operator|.
name|termComp
operator|=
name|termsEnum
operator|.
name|getComparator
argument_list|()
expr_stmt|;
comment|// lazy init the initial ScoreTerm because comparator is not known on ctor:
if|if
condition|(
name|st
operator|==
literal|null
condition|)
name|st
operator|=
operator|new
name|ScoreTerm
argument_list|(
name|this
operator|.
name|termComp
argument_list|)
expr_stmt|;
name|boostAtt
operator|=
name|termsEnum
operator|.
name|attributes
argument_list|()
operator|.
name|addAttribute
argument_list|(
name|BoostAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|collect
parameter_list|(
name|BytesRef
name|bytes
parameter_list|)
block|{
specifier|final
name|float
name|boost
init|=
name|boostAtt
operator|.
name|getBoost
argument_list|()
decl_stmt|;
comment|// ignore uncompetetive hits
if|if
condition|(
name|stQueue
operator|.
name|size
argument_list|()
operator|==
name|maxSize
condition|)
block|{
specifier|final
name|ScoreTerm
name|t
init|=
name|stQueue
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|boost
operator|<
name|t
operator|.
name|boost
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|boost
operator|==
name|t
operator|.
name|boost
operator|&&
name|termComp
operator|.
name|compare
argument_list|(
name|bytes
argument_list|,
name|t
operator|.
name|bytes
argument_list|)
operator|>
literal|0
condition|)
return|return
literal|true
return|;
block|}
name|ScoreTerm
name|t
init|=
name|visitedTerms
operator|.
name|get
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
comment|// if the term is already in the PQ, only update docFreq of term in PQ
name|t
operator|.
name|docFreq
operator|+=
name|termsEnum
operator|.
name|docFreq
argument_list|()
expr_stmt|;
assert|assert
name|t
operator|.
name|boost
operator|==
name|boost
operator|:
literal|"boost should be equal in all segment TermsEnums"
assert|;
block|}
else|else
block|{
comment|// add new entry in PQ, we must clone the term, else it may get overwritten!
name|st
operator|.
name|bytes
operator|.
name|copy
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|st
operator|.
name|boost
operator|=
name|boost
expr_stmt|;
name|st
operator|.
name|docFreq
operator|=
name|termsEnum
operator|.
name|docFreq
argument_list|()
expr_stmt|;
name|visitedTerms
operator|.
name|put
argument_list|(
name|st
operator|.
name|bytes
argument_list|,
name|st
argument_list|)
expr_stmt|;
name|stQueue
operator|.
name|offer
argument_list|(
name|st
argument_list|)
expr_stmt|;
comment|// possibly drop entries from queue
if|if
condition|(
name|stQueue
operator|.
name|size
argument_list|()
operator|>
name|maxSize
condition|)
block|{
name|st
operator|=
name|stQueue
operator|.
name|poll
argument_list|()
expr_stmt|;
name|visitedTerms
operator|.
name|remove
argument_list|(
name|st
operator|.
name|bytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|st
operator|=
operator|new
name|ScoreTerm
argument_list|(
name|termComp
argument_list|)
expr_stmt|;
block|}
assert|assert
name|stQueue
operator|.
name|size
argument_list|()
operator|<=
name|maxSize
operator|:
literal|"the PQ size must be limited to maxSize"
assert|;
comment|// set maxBoostAtt with values to help FuzzyTermsEnum to optimize
if|if
condition|(
name|stQueue
operator|.
name|size
argument_list|()
operator|==
name|maxSize
condition|)
block|{
name|t
operator|=
name|stQueue
operator|.
name|peek
argument_list|()
expr_stmt|;
name|maxBoostAtt
operator|.
name|setMaxNonCompetitiveBoost
argument_list|(
name|t
operator|.
name|boost
argument_list|)
expr_stmt|;
name|maxBoostAtt
operator|.
name|setCompetitiveTerm
argument_list|(
name|t
operator|.
name|bytes
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|Term
name|placeholderTerm
init|=
operator|new
name|Term
argument_list|(
name|query
operator|.
name|field
argument_list|)
decl_stmt|;
specifier|final
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|ScoreTerm
index|[]
name|scoreTerms
init|=
name|stQueue
operator|.
name|toArray
argument_list|(
operator|new
name|ScoreTerm
index|[
name|stQueue
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|scoreTerms
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ScoreTerm
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|ScoreTerm
name|st1
parameter_list|,
name|ScoreTerm
name|st2
parameter_list|)
block|{
assert|assert
name|st1
operator|.
name|termComp
operator|==
name|st2
operator|.
name|termComp
operator|:
literal|"term comparator should not change between segments"
assert|;
return|return
name|st1
operator|.
name|termComp
operator|.
name|compare
argument_list|(
name|st1
operator|.
name|bytes
argument_list|,
name|st2
operator|.
name|bytes
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|ScoreTerm
name|st
range|:
name|scoreTerms
control|)
block|{
specifier|final
name|Term
name|term
init|=
name|placeholderTerm
operator|.
name|createTerm
argument_list|(
name|st
operator|.
name|bytes
argument_list|)
decl_stmt|;
assert|assert
name|reader
operator|.
name|docFreq
argument_list|(
name|term
argument_list|)
operator|==
name|st
operator|.
name|docFreq
assert|;
name|Query
name|tq
init|=
name|getQuery
argument_list|(
name|term
argument_list|,
name|st
operator|.
name|docFreq
argument_list|)
decl_stmt|;
name|tq
operator|.
name|setBoost
argument_list|(
name|query
operator|.
name|getBoost
argument_list|()
operator|*
name|st
operator|.
name|boost
argument_list|)
expr_stmt|;
comment|// set the boost
name|bq
operator|.
name|add
argument_list|(
name|tq
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
comment|// add to query
block|}
name|query
operator|.
name|incTotalNumberOfTerms
argument_list|(
name|scoreTerms
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|bq
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|31
operator|*
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|TopTermsBooleanQueryRewrite
name|other
init|=
operator|(
name|TopTermsBooleanQueryRewrite
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|size
operator|!=
name|other
operator|.
name|size
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
DECL|class|ScoreTerm
specifier|static
specifier|final
class|class
name|ScoreTerm
implements|implements
name|Comparable
argument_list|<
name|ScoreTerm
argument_list|>
block|{
DECL|field|termComp
specifier|public
specifier|final
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|termComp
decl_stmt|;
DECL|field|bytes
specifier|public
specifier|final
name|BytesRef
name|bytes
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|field|boost
specifier|public
name|float
name|boost
decl_stmt|;
DECL|field|docFreq
specifier|public
name|int
name|docFreq
decl_stmt|;
DECL|method|ScoreTerm
specifier|public
name|ScoreTerm
parameter_list|(
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|termComp
parameter_list|)
block|{
name|this
operator|.
name|termComp
operator|=
name|termComp
expr_stmt|;
block|}
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|ScoreTerm
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|boost
operator|==
name|other
operator|.
name|boost
condition|)
return|return
name|termComp
operator|.
name|compare
argument_list|(
name|other
operator|.
name|bytes
argument_list|,
name|this
operator|.
name|bytes
argument_list|)
return|;
else|else
return|return
name|Float
operator|.
name|compare
argument_list|(
name|this
operator|.
name|boost
argument_list|,
name|other
operator|.
name|boost
argument_list|)
return|;
block|}
block|}
block|}
comment|/**    * A rewrite method that first translates each term into    * {@link BooleanClause.Occur#SHOULD} clause in a BooleanQuery, and keeps the    * scores as computed by the query.    *     *<p>    * This rewrite method only uses the top scoring terms so it will not overflow    * the boolean max clause count. It is the default rewrite method for    * {@link FuzzyQuery}.    *     * @see #setRewriteMethod    */
DECL|class|TopTermsScoringBooleanQueryRewrite
specifier|public
specifier|static
specifier|final
class|class
name|TopTermsScoringBooleanQueryRewrite
extends|extends
name|TopTermsBooleanQueryRewrite
block|{
comment|/**       * Create a TopTermsScoringBooleanQueryRewrite for       * at most<code>size</code> terms.      *<p>      * NOTE: if {@link BooleanQuery#getMaxClauseCount} is smaller than       *<code>size</code>, then it will be used instead.       */
DECL|method|TopTermsScoringBooleanQueryRewrite
specifier|public
name|TopTermsScoringBooleanQueryRewrite
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|super
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getQuery
specifier|protected
name|Query
name|getQuery
parameter_list|(
name|Term
name|term
parameter_list|,
name|int
name|docFreq
parameter_list|)
block|{
return|return
operator|new
name|TermQuery
argument_list|(
name|term
argument_list|,
name|docFreq
argument_list|)
return|;
block|}
block|}
comment|/**    * A rewrite method that first translates each term into    * {@link BooleanClause.Occur#SHOULD} clause in a BooleanQuery, but the scores    * are only computed as the boost.    *<p>    * This rewrite method only uses the top scoring terms so it will not overflow    * the boolean max clause count.    *     * @see #setRewriteMethod    */
DECL|class|TopTermsBoostOnlyBooleanQueryRewrite
specifier|public
specifier|static
specifier|final
class|class
name|TopTermsBoostOnlyBooleanQueryRewrite
extends|extends
name|TopTermsBooleanQueryRewrite
block|{
comment|/**       * Create a TopTermsBoostOnlyBooleanQueryRewrite for       * at most<code>size</code> terms.      *<p>      * NOTE: if {@link BooleanQuery#getMaxClauseCount} is smaller than       *<code>size</code>, then it will be used instead.       */
DECL|method|TopTermsBoostOnlyBooleanQueryRewrite
specifier|public
name|TopTermsBoostOnlyBooleanQueryRewrite
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|super
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getQuery
specifier|protected
name|Query
name|getQuery
parameter_list|(
name|Term
name|term
parameter_list|,
name|int
name|docFreq
parameter_list|)
block|{
return|return
operator|new
name|ConstantScoreQuery
argument_list|(
operator|new
name|QueryWrapperFilter
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|term
argument_list|,
name|docFreq
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|class|ConstantScoreBooleanQueryRewrite
specifier|private
specifier|static
class|class
name|ConstantScoreBooleanQueryRewrite
extends|extends
name|ScoringBooleanQueryRewrite
implements|implements
name|Serializable
block|{
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|MultiTermQuery
name|query
parameter_list|)
throws|throws
name|IOException
block|{
name|Query
name|result
init|=
name|super
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|,
name|query
argument_list|)
decl_stmt|;
assert|assert
name|result
operator|instanceof
name|BooleanQuery
assert|;
comment|// TODO: if empty boolean query return NullQuery?
if|if
condition|(
operator|!
operator|(
operator|(
name|BooleanQuery
operator|)
name|result
operator|)
operator|.
name|clauses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// strip the scores off
name|result
operator|=
operator|new
name|ConstantScoreQuery
argument_list|(
operator|new
name|QueryWrapperFilter
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setBoost
argument_list|(
name|query
operator|.
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|// Make sure we are still a singleton even after deserializing
annotation|@
name|Override
DECL|method|readResolve
specifier|protected
name|Object
name|readResolve
parameter_list|()
block|{
return|return
name|CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE
return|;
block|}
block|}
comment|/** Like {@link #SCORING_BOOLEAN_QUERY_REWRITE} except    *  scores are not computed.  Instead, each matching    *  document receives a constant score equal to the    *  query's boost.    *     *<p><b>NOTE</b>: This rewrite method will hit {@link    *  BooleanQuery.TooManyClauses} if the number of terms    *  exceeds {@link BooleanQuery#getMaxClauseCount}.    *    *  @see #setRewriteMethod */
DECL|field|CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE
specifier|public
specifier|final
specifier|static
name|RewriteMethod
name|CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE
init|=
operator|new
name|ConstantScoreBooleanQueryRewrite
argument_list|()
decl_stmt|;
comment|/** A rewrite method that tries to pick the best    *  constant-score rewrite method based on term and    *  document counts from the query.  If both the number of    *  terms and documents is small enough, then {@link    *  #CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE} is used.    *  Otherwise, {@link #CONSTANT_SCORE_FILTER_REWRITE} is    *  used.    */
DECL|class|ConstantScoreAutoRewrite
specifier|public
specifier|static
class|class
name|ConstantScoreAutoRewrite
extends|extends
name|BooleanQueryRewrite
block|{
comment|// Defaults derived from rough tests with a 20.0 million
comment|// doc Wikipedia index.  With more than 350 terms in the
comment|// query, the filter method is fastest:
DECL|field|DEFAULT_TERM_COUNT_CUTOFF
specifier|public
specifier|static
name|int
name|DEFAULT_TERM_COUNT_CUTOFF
init|=
literal|350
decl_stmt|;
comment|// If the query will hit more than 1 in 1000 of the docs
comment|// in the index (0.1%), the filter method is fastest:
DECL|field|DEFAULT_DOC_COUNT_PERCENT
specifier|public
specifier|static
name|double
name|DEFAULT_DOC_COUNT_PERCENT
init|=
literal|0.1
decl_stmt|;
DECL|field|termCountCutoff
specifier|private
name|int
name|termCountCutoff
init|=
name|DEFAULT_TERM_COUNT_CUTOFF
decl_stmt|;
DECL|field|docCountPercent
specifier|private
name|double
name|docCountPercent
init|=
name|DEFAULT_DOC_COUNT_PERCENT
decl_stmt|;
comment|/** If the number of terms in this query is equal to or      *  larger than this setting then {@link      *  #CONSTANT_SCORE_FILTER_REWRITE} is used. */
DECL|method|setTermCountCutoff
specifier|public
name|void
name|setTermCountCutoff
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|termCountCutoff
operator|=
name|count
expr_stmt|;
block|}
comment|/** @see #setTermCountCutoff */
DECL|method|getTermCountCutoff
specifier|public
name|int
name|getTermCountCutoff
parameter_list|()
block|{
return|return
name|termCountCutoff
return|;
block|}
comment|/** If the number of documents to be visited in the      *  postings exceeds this specified percentage of the      *  maxDoc() for the index, then {@link      *  #CONSTANT_SCORE_FILTER_REWRITE} is used.      *  @param percent 0.0 to 100.0 */
DECL|method|setDocCountPercent
specifier|public
name|void
name|setDocCountPercent
parameter_list|(
name|double
name|percent
parameter_list|)
block|{
name|docCountPercent
operator|=
name|percent
expr_stmt|;
block|}
comment|/** @see #setDocCountPercent */
DECL|method|getDocCountPercent
specifier|public
name|double
name|getDocCountPercent
parameter_list|()
block|{
return|return
name|docCountPercent
return|;
block|}
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
specifier|final
name|IndexReader
name|reader
parameter_list|,
specifier|final
name|MultiTermQuery
name|query
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get the enum and start visiting terms.  If we
comment|// exhaust the enum before hitting either of the
comment|// cutoffs, we use ConstantBooleanQueryRewrite; else,
comment|// ConstantFilterRewrite:
specifier|final
name|int
name|docCountCutoff
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|docCountPercent
operator|/
literal|100.
operator|)
operator|*
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|termCountLimit
init|=
name|Math
operator|.
name|min
argument_list|(
name|BooleanQuery
operator|.
name|getMaxClauseCount
argument_list|()
argument_list|,
name|termCountCutoff
argument_list|)
decl_stmt|;
specifier|final
name|CutOffTermCollector
name|col
init|=
operator|new
name|CutOffTermCollector
argument_list|(
name|docCountCutoff
argument_list|,
name|termCountLimit
argument_list|)
decl_stmt|;
name|collectTerms
argument_list|(
name|reader
argument_list|,
name|query
argument_list|,
name|col
argument_list|)
expr_stmt|;
specifier|final
name|int
name|size
init|=
name|col
operator|.
name|pendingTerms
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|col
operator|.
name|hasCutOff
condition|)
block|{
return|return
name|CONSTANT_SCORE_FILTER_REWRITE
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|,
name|query
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|BooleanQuery
argument_list|(
literal|true
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|Term
name|placeholderTerm
init|=
operator|new
name|Term
argument_list|(
name|query
operator|.
name|field
argument_list|)
decl_stmt|;
specifier|final
name|BytesRefHash
name|pendingTerms
init|=
name|col
operator|.
name|pendingTerms
decl_stmt|;
specifier|final
name|int
name|sort
index|[]
init|=
name|pendingTerms
operator|.
name|sort
argument_list|(
name|col
operator|.
name|termsEnum
operator|.
name|getComparator
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
comment|// docFreq is not used for constant score here, we pass 1
comment|// to explicitely set a fake value, so it's not calculated
name|bq
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|placeholderTerm
operator|.
name|createTerm
argument_list|(
name|pendingTerms
operator|.
name|get
argument_list|(
name|sort
index|[
name|i
index|]
argument_list|,
operator|new
name|BytesRef
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
comment|// Strip scores
specifier|final
name|Query
name|result
init|=
operator|new
name|ConstantScoreQuery
argument_list|(
operator|new
name|QueryWrapperFilter
argument_list|(
name|bq
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|setBoost
argument_list|(
name|query
operator|.
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|incTotalNumberOfTerms
argument_list|(
name|size
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
DECL|class|CutOffTermCollector
specifier|static
specifier|final
class|class
name|CutOffTermCollector
extends|extends
name|TermCollector
block|{
DECL|method|CutOffTermCollector
name|CutOffTermCollector
parameter_list|(
name|int
name|docCountCutoff
parameter_list|,
name|int
name|termCountLimit
parameter_list|)
block|{
name|this
operator|.
name|docCountCutoff
operator|=
name|docCountCutoff
expr_stmt|;
name|this
operator|.
name|termCountLimit
operator|=
name|termCountLimit
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextEnum
specifier|public
name|void
name|setNextEnum
parameter_list|(
name|TermsEnum
name|termsEnum
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|termsEnum
operator|=
name|termsEnum
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|boolean
name|collect
parameter_list|(
name|BytesRef
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pendingTerms
operator|.
name|size
argument_list|()
operator|>=
name|termCountLimit
operator|||
name|docVisitCount
operator|>=
name|docCountCutoff
condition|)
block|{
name|hasCutOff
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
name|pendingTerms
operator|.
name|add
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|docVisitCount
operator|+=
name|termsEnum
operator|.
name|docFreq
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|field|docVisitCount
name|int
name|docVisitCount
init|=
literal|0
decl_stmt|;
DECL|field|hasCutOff
name|boolean
name|hasCutOff
init|=
literal|false
decl_stmt|;
DECL|field|termsEnum
name|TermsEnum
name|termsEnum
decl_stmt|;
DECL|field|docCountCutoff
DECL|field|termCountLimit
specifier|final
name|int
name|docCountCutoff
decl_stmt|,
name|termCountLimit
decl_stmt|;
DECL|field|pendingTerms
specifier|final
name|BytesRefHash
name|pendingTerms
init|=
operator|new
name|BytesRefHash
argument_list|()
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|1279
decl_stmt|;
return|return
call|(
name|int
call|)
argument_list|(
name|prime
operator|*
name|termCountCutoff
operator|+
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|docCountPercent
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|ConstantScoreAutoRewrite
name|other
init|=
operator|(
name|ConstantScoreAutoRewrite
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|termCountCutoff
operator|!=
name|termCountCutoff
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|other
operator|.
name|docCountPercent
argument_list|)
operator|!=
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|docCountPercent
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
comment|/** Read-only default instance of {@link    *  ConstantScoreAutoRewrite}, with {@link    *  ConstantScoreAutoRewrite#setTermCountCutoff} set to    *  {@link    *  ConstantScoreAutoRewrite#DEFAULT_TERM_COUNT_CUTOFF}    *  and {@link    *  ConstantScoreAutoRewrite#setDocCountPercent} set to    *  {@link    *  ConstantScoreAutoRewrite#DEFAULT_DOC_COUNT_PERCENT}.    *  Note that you cannot alter the configuration of this    *  instance; you'll need to create a private instance    *  instead. */
DECL|field|CONSTANT_SCORE_AUTO_REWRITE_DEFAULT
specifier|public
specifier|final
specifier|static
name|RewriteMethod
name|CONSTANT_SCORE_AUTO_REWRITE_DEFAULT
init|=
operator|new
name|ConstantScoreAutoRewrite
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setTermCountCutoff
parameter_list|(
name|int
name|count
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Please create a private instance"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDocCountPercent
parameter_list|(
name|double
name|percent
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Please create a private instance"
argument_list|)
throw|;
block|}
comment|// Make sure we are still a singleton even after deserializing
specifier|protected
name|Object
name|readResolve
parameter_list|()
block|{
return|return
name|CONSTANT_SCORE_AUTO_REWRITE_DEFAULT
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Constructs a query matching terms that cannot be represented with a single    * Term.    */
DECL|method|MultiTermQuery
specifier|public
name|MultiTermQuery
parameter_list|(
specifier|final
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
assert|assert
name|field
operator|!=
literal|null
assert|;
block|}
comment|/** Returns the field name for this query */
DECL|method|getField
specifier|public
specifier|final
name|String
name|getField
parameter_list|()
block|{
return|return
name|field
return|;
block|}
comment|/** Construct the enumeration to be used, expanding the    *  pattern term.  This method should only be called if    *  the field exists (ie, implementations can assume the    *  field does exist).  This method should not return null    *  (should instead return {@link TermsEnum#EMPTY} if no    *  terms match).  The TermsEnum must already be    *  positioned to the first matching term.    * The given {@link AttributeSource} is passed by the {@link RewriteMethod} to    * provide attributes, the rewrite method uses to inform about e.g. maximum competitive boosts.    * This is currently only used by {@link TopTermsBooleanQueryRewrite}    */
DECL|method|getTermsEnum
specifier|protected
specifier|abstract
name|TermsEnum
name|getTermsEnum
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|AttributeSource
name|atts
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Convenience method, if no attributes are needed:    * This simply passes empty attributes and is equal to:    *<code>getTermsEnum(reader, new AttributeSource())</code>    */
DECL|method|getTermsEnum
specifier|protected
specifier|final
name|TermsEnum
name|getTermsEnum
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getTermsEnum
argument_list|(
name|reader
argument_list|,
operator|new
name|AttributeSource
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Expert: Return the number of unique terms visited during execution of the query.    * If there are many of them, you may consider using another query type    * or optimize your total term count in index.    *<p>This method is not thread safe, be sure to only call it when no query is running!    * If you re-use the same query instance for another    * search, be sure to first reset the term counter    * with {@link #clearTotalNumberOfTerms}.    *<p>On optimized indexes / no MultiReaders, you get the correct number of    * unique terms for the whole index. Use this number to compare different queries.    * For non-optimized indexes this number can also be achieved in    * non-constant-score mode. In constant-score mode you get the total number of    * terms seeked for all segments / sub-readers.    * @see #clearTotalNumberOfTerms    */
DECL|method|getTotalNumberOfTerms
specifier|public
name|int
name|getTotalNumberOfTerms
parameter_list|()
block|{
return|return
name|numberOfTerms
return|;
block|}
comment|/**    * Expert: Resets the counting of unique terms.    * Do this before executing the query/filter.    * @see #getTotalNumberOfTerms    */
DECL|method|clearTotalNumberOfTerms
specifier|public
name|void
name|clearTotalNumberOfTerms
parameter_list|()
block|{
name|numberOfTerms
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|incTotalNumberOfTerms
specifier|protected
name|void
name|incTotalNumberOfTerms
parameter_list|(
name|int
name|inc
parameter_list|)
block|{
name|numberOfTerms
operator|+=
name|inc
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|rewriteMethod
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|,
name|this
argument_list|)
return|;
block|}
comment|/**    * @see #setRewriteMethod    */
DECL|method|getRewriteMethod
specifier|public
name|RewriteMethod
name|getRewriteMethod
parameter_list|()
block|{
return|return
name|rewriteMethod
return|;
block|}
comment|/**    * Sets the rewrite method to be used when executing the    * query.  You can use one of the four core methods, or    * implement your own subclass of {@link RewriteMethod}. */
DECL|method|setRewriteMethod
specifier|public
name|void
name|setRewriteMethod
parameter_list|(
name|RewriteMethod
name|method
parameter_list|)
block|{
name|rewriteMethod
operator|=
name|method
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|getBoost
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|rewriteMethod
operator|.
name|hashCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|field
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|MultiTermQuery
name|other
init|=
operator|(
name|MultiTermQuery
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|getBoost
argument_list|()
argument_list|)
operator|!=
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|other
operator|.
name|getBoost
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|rewriteMethod
operator|.
name|equals
argument_list|(
name|other
operator|.
name|rewriteMethod
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|(
name|other
operator|.
name|field
operator|==
literal|null
condition|?
name|field
operator|==
literal|null
else|:
name|other
operator|.
name|field
operator|.
name|equals
argument_list|(
name|field
argument_list|)
operator|)
return|;
block|}
block|}
end_class
end_unit
