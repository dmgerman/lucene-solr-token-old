begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|WeakHashMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
operator|.
name|AtomicReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_comment
comment|/**  * Wraps another filter's result and caches it.  The purpose is to allow  * filters to simply filter, and then wrap with this class  * to add caching.  *  *<p><b>NOTE</b>: if you wrap this filter as a query (eg,  * using ConstantScoreQuery), you'll likely want to enforce  * deletions (using either {@link DeletesMode#RECACHE} or  * {@link DeletesMode#DYNAMIC}).  */
end_comment
begin_class
DECL|class|CachingWrapperFilter
specifier|public
class|class
name|CachingWrapperFilter
extends|extends
name|Filter
block|{
comment|// TODO: make this filter aware of ReaderContext. a cached filter could
comment|// specify the actual readers key or something similar to indicate on which
comment|// level of the readers hierarchy it should be cached.
DECL|field|filter
name|Filter
name|filter
decl_stmt|;
comment|/**    * Expert: Specifies how new deletions against a reopened    * reader should be handled.    *    *<p>The default is IGNORE, which means the cache entry    * will be re-used for a given segment, even when that    * segment has been reopened due to changes in deletions.    * This is a big performance gain, especially with    * near-real-timer readers, since you don't hit a cache    * miss on every reopened reader for prior segments.</p>    *    *<p>However, in some cases this can cause invalid query    * results, allowing deleted documents to be returned.    * This only happens if the main query does not rule out    * deleted documents on its own, such as a toplevel    * ConstantScoreQuery.  To fix this, use RECACHE to    * re-create the cached filter (at a higher per-reopen    * cost, but at faster subsequent search performance), or    * use DYNAMIC to dynamically intersect deleted docs (fast    * reopen time but some hit to search performance).</p>    */
DECL|enum|DeletesMode
DECL|enum constant|IGNORE
DECL|enum constant|RECACHE
DECL|enum constant|DYNAMIC
specifier|public
specifier|static
enum|enum
name|DeletesMode
block|{
name|IGNORE
block|,
name|RECACHE
block|,
name|DYNAMIC
block|}
empty_stmt|;
DECL|field|cache
specifier|protected
specifier|final
name|FilterCache
argument_list|<
name|DocIdSet
argument_list|>
name|cache
decl_stmt|;
DECL|class|FilterCache
specifier|static
specifier|abstract
class|class
name|FilterCache
parameter_list|<
name|T
parameter_list|>
block|{
comment|/**      * A transient Filter cache (package private because of test)      */
comment|// NOTE: not final so that we can dynamically re-init
comment|// after de-serialize
DECL|field|cache
specifier|transient
name|Map
argument_list|<
name|Object
argument_list|,
name|T
argument_list|>
name|cache
decl_stmt|;
DECL|field|deletesMode
specifier|private
specifier|final
name|DeletesMode
name|deletesMode
decl_stmt|;
DECL|method|FilterCache
specifier|public
name|FilterCache
parameter_list|(
name|DeletesMode
name|deletesMode
parameter_list|)
block|{
name|this
operator|.
name|deletesMode
operator|=
name|deletesMode
expr_stmt|;
block|}
DECL|method|get
specifier|public
specifier|synchronized
name|T
name|get
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|Object
name|coreKey
parameter_list|,
name|Object
name|delCoreKey
parameter_list|)
throws|throws
name|IOException
block|{
name|T
name|value
decl_stmt|;
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
name|cache
operator|=
operator|new
name|WeakHashMap
argument_list|<
name|Object
argument_list|,
name|T
argument_list|>
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|deletesMode
operator|==
name|DeletesMode
operator|.
name|IGNORE
condition|)
block|{
comment|// key on core
name|value
operator|=
name|cache
operator|.
name|get
argument_list|(
name|coreKey
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deletesMode
operator|==
name|DeletesMode
operator|.
name|RECACHE
condition|)
block|{
comment|// key on deletes, if any, else core
name|value
operator|=
name|cache
operator|.
name|get
argument_list|(
name|delCoreKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|deletesMode
operator|==
name|DeletesMode
operator|.
name|DYNAMIC
assert|;
comment|// first try for exact match
name|value
operator|=
name|cache
operator|.
name|get
argument_list|(
name|delCoreKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
comment|// now for core match, but dynamically AND
comment|// live docs
name|value
operator|=
name|cache
operator|.
name|get
argument_list|(
name|coreKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Bits
name|liveDocs
init|=
name|reader
operator|.
name|getLiveDocs
argument_list|()
decl_stmt|;
if|if
condition|(
name|liveDocs
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|mergeLiveDocs
argument_list|(
name|liveDocs
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|value
return|;
block|}
DECL|method|mergeLiveDocs
specifier|protected
specifier|abstract
name|T
name|mergeLiveDocs
parameter_list|(
name|Bits
name|liveDocs
parameter_list|,
name|T
name|value
parameter_list|)
function_decl|;
DECL|method|put
specifier|public
specifier|synchronized
name|void
name|put
parameter_list|(
name|Object
name|coreKey
parameter_list|,
name|Object
name|delCoreKey
parameter_list|,
name|T
name|value
parameter_list|)
block|{
if|if
condition|(
name|deletesMode
operator|==
name|DeletesMode
operator|.
name|IGNORE
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|coreKey
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deletesMode
operator|==
name|DeletesMode
operator|.
name|RECACHE
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|delCoreKey
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cache
operator|.
name|put
argument_list|(
name|coreKey
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|delCoreKey
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * New deletes are ignored by default, which gives higher    * cache hit rate on reopened readers.  Most of the time    * this is safe, because the filter will be AND'd with a    * Query that fully enforces deletions.  If instead you    * need this filter to always enforce deletions, pass    * either {@link DeletesMode#RECACHE} or {@link    * DeletesMode#DYNAMIC}.    * @param filter Filter to cache results of    */
DECL|method|CachingWrapperFilter
specifier|public
name|CachingWrapperFilter
parameter_list|(
name|Filter
name|filter
parameter_list|)
block|{
name|this
argument_list|(
name|filter
argument_list|,
name|DeletesMode
operator|.
name|IGNORE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Expert: by default, the cached filter will be shared    * across reopened segments that only had changes to their    * deletions.      *    * @param filter Filter to cache results of    * @param deletesMode See {@link DeletesMode}    */
DECL|method|CachingWrapperFilter
specifier|public
name|CachingWrapperFilter
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|DeletesMode
name|deletesMode
parameter_list|)
block|{
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|cache
operator|=
operator|new
name|FilterCache
argument_list|<
name|DocIdSet
argument_list|>
argument_list|(
name|deletesMode
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|DocIdSet
name|mergeLiveDocs
parameter_list|(
specifier|final
name|Bits
name|liveDocs
parameter_list|,
specifier|final
name|DocIdSet
name|docIdSet
parameter_list|)
block|{
return|return
operator|new
name|FilteredDocIdSet
argument_list|(
name|docIdSet
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|match
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
name|liveDocs
operator|.
name|get
argument_list|(
name|docID
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
expr_stmt|;
block|}
comment|/** Provide the DocIdSet to be cached, using the DocIdSet provided    *  by the wrapped Filter.    *<p>This implementation returns the given {@link DocIdSet}, if {@link DocIdSet#isCacheable}    *  returns<code>true</code>, else it copies the {@link DocIdSetIterator} into    *  an {@link FixedBitSet}.    */
DECL|method|docIdSetToCache
specifier|protected
name|DocIdSet
name|docIdSetToCache
parameter_list|(
name|DocIdSet
name|docIdSet
parameter_list|,
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|docIdSet
operator|==
literal|null
condition|)
block|{
comment|// this is better than returning null, as the nonnull result can be cached
return|return
name|DocIdSet
operator|.
name|EMPTY_DOCIDSET
return|;
block|}
elseif|else
if|if
condition|(
name|docIdSet
operator|.
name|isCacheable
argument_list|()
condition|)
block|{
return|return
name|docIdSet
return|;
block|}
else|else
block|{
specifier|final
name|DocIdSetIterator
name|it
init|=
name|docIdSet
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// null is allowed to be returned by iterator(),
comment|// in this case we wrap with the empty set,
comment|// which is cacheable.
if|if
condition|(
name|it
operator|==
literal|null
condition|)
block|{
return|return
name|DocIdSet
operator|.
name|EMPTY_DOCIDSET
return|;
block|}
else|else
block|{
specifier|final
name|FixedBitSet
name|bits
init|=
operator|new
name|FixedBitSet
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
name|bits
operator|.
name|or
argument_list|(
name|it
argument_list|)
expr_stmt|;
return|return
name|bits
return|;
block|}
block|}
block|}
comment|// for testing
DECL|field|hitCount
DECL|field|missCount
name|int
name|hitCount
decl_stmt|,
name|missCount
decl_stmt|;
annotation|@
name|Override
DECL|method|getDocIdSet
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|IndexReader
name|reader
init|=
name|context
operator|.
name|reader
decl_stmt|;
specifier|final
name|Object
name|coreKey
init|=
name|reader
operator|.
name|getCoreCacheKey
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|delCoreKey
init|=
name|reader
operator|.
name|hasDeletions
argument_list|()
condition|?
name|reader
operator|.
name|getLiveDocs
argument_list|()
else|:
name|coreKey
decl_stmt|;
name|DocIdSet
name|docIdSet
init|=
name|cache
operator|.
name|get
argument_list|(
name|reader
argument_list|,
name|coreKey
argument_list|,
name|delCoreKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|docIdSet
operator|!=
literal|null
condition|)
block|{
name|hitCount
operator|++
expr_stmt|;
return|return
name|docIdSet
return|;
block|}
name|missCount
operator|++
expr_stmt|;
comment|// cache miss
name|docIdSet
operator|=
name|docIdSetToCache
argument_list|(
name|filter
operator|.
name|getDocIdSet
argument_list|(
name|context
argument_list|)
argument_list|,
name|reader
argument_list|)
expr_stmt|;
if|if
condition|(
name|docIdSet
operator|!=
literal|null
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|coreKey
argument_list|,
name|delCoreKey
argument_list|,
name|docIdSet
argument_list|)
expr_stmt|;
block|}
return|return
name|docIdSet
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"CachingWrapperFilter("
operator|+
name|filter
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|CachingWrapperFilter
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|this
operator|.
name|filter
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|CachingWrapperFilter
operator|)
name|o
operator|)
operator|.
name|filter
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|filter
operator|.
name|hashCode
argument_list|()
operator|^
literal|0x1117BF25
return|;
block|}
block|}
end_class
end_unit
