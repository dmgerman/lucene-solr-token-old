begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Copyright 2005 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
operator|.
name|AtomicReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_comment
comment|/**  * Wraps another SpanFilter's result and caches it.  The purpose is to allow  * filters to simply filter, and then wrap with this class to add caching.  */
end_comment
begin_class
DECL|class|CachingSpanFilter
specifier|public
class|class
name|CachingSpanFilter
extends|extends
name|SpanFilter
block|{
DECL|field|filter
specifier|private
name|SpanFilter
name|filter
decl_stmt|;
comment|/**    * A transient Filter cache (package private because of test)    */
DECL|field|cache
specifier|private
specifier|final
name|CachingWrapperFilter
operator|.
name|FilterCache
argument_list|<
name|SpanFilterResult
argument_list|>
name|cache
decl_stmt|;
comment|/** Wraps another SpanFilter's result and caches it.    * @param filter Filter to cache results of    */
DECL|method|CachingSpanFilter
specifier|public
name|CachingSpanFilter
parameter_list|(
name|SpanFilter
name|filter
parameter_list|)
block|{
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|this
operator|.
name|cache
operator|=
operator|new
name|CachingWrapperFilter
operator|.
name|FilterCache
argument_list|<
name|SpanFilterResult
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDocIdSet
specifier|public
name|DocIdSet
name|getDocIdSet
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|,
specifier|final
name|Bits
name|acceptDocs
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SpanFilterResult
name|result
init|=
name|getCachedResult
argument_list|(
name|context
argument_list|)
decl_stmt|;
return|return
name|BitsFilteredDocIdSet
operator|.
name|wrap
argument_list|(
name|result
operator|.
name|getDocIdSet
argument_list|()
argument_list|,
name|acceptDocs
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|bitSpans
specifier|public
name|SpanFilterResult
name|bitSpans
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|,
specifier|final
name|Bits
name|acceptDocs
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SpanFilterResult
name|result
init|=
name|getCachedResult
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|acceptDocs
operator|==
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
else|else
block|{
comment|// TODO: filter positions more efficient
name|List
argument_list|<
name|SpanFilterResult
operator|.
name|PositionInfo
argument_list|>
name|allPositions
init|=
name|result
operator|.
name|getPositions
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SpanFilterResult
operator|.
name|PositionInfo
argument_list|>
name|positions
init|=
operator|new
name|ArrayList
argument_list|<
name|SpanFilterResult
operator|.
name|PositionInfo
argument_list|>
argument_list|(
name|allPositions
operator|.
name|size
argument_list|()
operator|/
literal|2
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|SpanFilterResult
operator|.
name|PositionInfo
name|p
range|:
name|allPositions
control|)
block|{
if|if
condition|(
name|acceptDocs
operator|.
name|get
argument_list|(
name|p
operator|.
name|getDoc
argument_list|()
argument_list|)
condition|)
block|{
name|positions
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|SpanFilterResult
argument_list|(
name|BitsFilteredDocIdSet
operator|.
name|wrap
argument_list|(
name|result
operator|.
name|getDocIdSet
argument_list|()
argument_list|,
name|acceptDocs
argument_list|)
argument_list|,
name|positions
argument_list|)
return|;
block|}
block|}
comment|/** Provide the DocIdSet to be cached, using the DocIdSet provided    *  by the wrapped Filter.    *<p>This implementation returns the given {@link DocIdSet}, if {@link DocIdSet#isCacheable}    *  returns<code>true</code>, else it copies the {@link DocIdSetIterator} into    *  an {@link FixedBitSet}.    */
DECL|method|spanFilterResultToCache
specifier|protected
name|SpanFilterResult
name|spanFilterResultToCache
parameter_list|(
name|SpanFilterResult
name|result
parameter_list|,
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|result
operator|==
literal|null
operator|||
name|result
operator|.
name|getDocIdSet
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// this is better than returning null, as the nonnull result can be cached
return|return
name|SpanFilterResult
operator|.
name|EMPTY_SPAN_FILTER_RESULT
return|;
block|}
elseif|else
if|if
condition|(
name|result
operator|.
name|getDocIdSet
argument_list|()
operator|.
name|isCacheable
argument_list|()
condition|)
block|{
return|return
name|result
return|;
block|}
else|else
block|{
specifier|final
name|DocIdSetIterator
name|it
init|=
name|result
operator|.
name|getDocIdSet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// null is allowed to be returned by iterator(),
comment|// in this case we wrap with the empty set,
comment|// which is cacheable.
if|if
condition|(
name|it
operator|==
literal|null
condition|)
block|{
return|return
name|SpanFilterResult
operator|.
name|EMPTY_SPAN_FILTER_RESULT
return|;
block|}
else|else
block|{
specifier|final
name|FixedBitSet
name|bits
init|=
operator|new
name|FixedBitSet
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
name|bits
operator|.
name|or
argument_list|(
name|it
argument_list|)
expr_stmt|;
return|return
operator|new
name|SpanFilterResult
argument_list|(
name|bits
argument_list|,
name|result
operator|.
name|getPositions
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
comment|// for testing
DECL|field|hitCount
DECL|field|missCount
name|int
name|hitCount
decl_stmt|,
name|missCount
decl_stmt|;
DECL|method|getCachedResult
specifier|private
name|SpanFilterResult
name|getCachedResult
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|IndexReader
name|reader
init|=
name|context
operator|.
name|reader
decl_stmt|;
specifier|final
name|Object
name|coreKey
init|=
name|reader
operator|.
name|getCoreCacheKey
argument_list|()
decl_stmt|;
name|SpanFilterResult
name|result
init|=
name|cache
operator|.
name|get
argument_list|(
name|reader
argument_list|,
name|coreKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|hitCount
operator|++
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
name|missCount
operator|++
expr_stmt|;
comment|// cache miss: we use no acceptDocs here
comment|// (this saves time on building SpanFilterResult, the acceptDocs will be applied on the cached set)
name|result
operator|=
name|spanFilterResultToCache
argument_list|(
name|filter
operator|.
name|bitSpans
argument_list|(
name|context
argument_list|,
literal|null
comment|/**!!!*/
argument_list|)
argument_list|,
name|reader
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|coreKey
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"CachingSpanFilter("
operator|+
name|filter
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|CachingSpanFilter
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|this
operator|.
name|filter
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|CachingSpanFilter
operator|)
name|o
operator|)
operator|.
name|filter
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|filter
operator|.
name|hashCode
argument_list|()
operator|^
literal|0x1117BF25
return|;
block|}
block|}
end_class
end_unit
