begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|NRTManager
import|;
end_import
begin_comment
comment|// javadocs
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_comment
comment|// javadocs
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_comment
comment|/**  * Utility class to safely share {@link IndexSearcher} instances across multiple  * threads, while periodically reopening. This class ensures each searcher is  * closed only once all threads have finished using it.  *   *<p>  * Use {@link #acquire} to obtain the current searcher, and {@link #release} to  * release it, like this:  *   *<pre class="prettyprint">  * IndexSearcher s = manager.acquire();  * try {  *   // Do searching, doc retrieval, etc. with s  * } finally {  *   manager.release(s);  * }  * // Do not use s after this!  * s = null;  *</pre>  *   *<p>  * In addition you should periodically call {@link #maybeReopen}. While it's  * possible to call this just before running each query, this is discouraged  * since it penalizes the unlucky queries that do the reopen. It's better to use  * a separate background thread, that periodically calls maybeReopen. Finally,  * be sure to call {@link #close} once you are done.  *   *<p>  *<b>NOTE</b>: if you have an {@link IndexWriter}, it's better to use  * {@link NRTManager} since that class pulls near-real-time readers from the  * IndexWriter.  *   * @see SearcherFactory  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|SearcherManager
specifier|public
specifier|final
class|class
name|SearcherManager
block|{
DECL|field|currentSearcher
specifier|private
specifier|volatile
name|IndexSearcher
name|currentSearcher
decl_stmt|;
DECL|field|searcherFactory
specifier|private
specifier|final
name|SearcherFactory
name|searcherFactory
decl_stmt|;
DECL|field|reopenLock
specifier|private
specifier|final
name|Semaphore
name|reopenLock
init|=
operator|new
name|Semaphore
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|/**    * Creates and returns a new SearcherManager from the given {@link IndexWriter}.     * @param writer the IndexWriter to open the IndexReader from.    * @param applyAllDeletes If<code>true</code>, all buffered deletes will    *        be applied (made visible) in the {@link IndexSearcher} / {@link IndexReader}.    *        If<code>false</code>, the deletes may or may not be applied, but remain buffered     *        (in IndexWriter) so that they will be applied in the future.    *        Applying deletes can be costly, so if your app can tolerate deleted documents    *        being returned you might gain some performance by passing<code>false</code>.    *        See {@link IndexReader#openIfChanged(IndexReader, IndexWriter, boolean)}.    * @param searcherFactory An optional {@link SearcherFactory}. Pass    *<code>null</code> if you don't require the searcher to be warmed    *        before going live or other custom behavior.    *            * @throws IOException    */
DECL|method|SearcherManager
specifier|public
name|SearcherManager
parameter_list|(
name|IndexWriter
name|writer
parameter_list|,
name|boolean
name|applyAllDeletes
parameter_list|,
name|SearcherFactory
name|searcherFactory
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|searcherFactory
operator|==
literal|null
condition|)
block|{
name|searcherFactory
operator|=
operator|new
name|SearcherFactory
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|searcherFactory
operator|=
name|searcherFactory
expr_stmt|;
name|currentSearcher
operator|=
name|searcherFactory
operator|.
name|newSearcher
argument_list|(
name|IndexReader
operator|.
name|open
argument_list|(
name|writer
argument_list|,
name|applyAllDeletes
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates and returns a new SearcherManager from the given {@link Directory}.     * @param dir the directory to open the IndexReader on.    * @param searcherFactory An optional {@link SearcherFactory}. Pass    *<code>null</code> if you don't require the searcher to be warmed    *        before going live or other custom behavior.    *            * @throws IOException    */
DECL|method|SearcherManager
specifier|public
name|SearcherManager
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|SearcherFactory
name|searcherFactory
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|searcherFactory
operator|==
literal|null
condition|)
block|{
name|searcherFactory
operator|=
operator|new
name|SearcherFactory
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|searcherFactory
operator|=
name|searcherFactory
expr_stmt|;
name|currentSearcher
operator|=
name|searcherFactory
operator|.
name|newSearcher
argument_list|(
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * You must call this, periodically, to perform a reopen. This calls    * {@link IndexReader#openIfChanged(IndexReader)} with the underlying reader, and if that returns a    * new reader, it's warmed (if you provided a {@link SearcherFactory} and then    * swapped into production.    *     *<p>    *<b>Threads</b>: it's fine for more than one thread to call this at once.    * Only the first thread will attempt the reopen; subsequent threads will see    * that another thread is already handling reopen and will return immediately.    * Note that this means if another thread is already reopening then subsequent    * threads will return right away without waiting for the reader reopen to    * complete.    *</p>    *     *<p>    * This method returns true if a new reader was in fact opened or     * if the current searcher has no pending changes.    *</p>    */
DECL|method|maybeReopen
specifier|public
name|boolean
name|maybeReopen
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
comment|// Ensure only 1 thread does reopen at once; other
comment|// threads just return immediately:
if|if
condition|(
name|reopenLock
operator|.
name|tryAcquire
argument_list|()
condition|)
block|{
try|try
block|{
comment|// IR.openIfChanged preserves NRT and applyDeletes
comment|// in the newly returned reader:
specifier|final
name|IndexReader
name|newReader
decl_stmt|;
specifier|final
name|IndexSearcher
name|searcherToReopen
init|=
name|acquire
argument_list|()
decl_stmt|;
try|try
block|{
name|newReader
operator|=
name|IndexReader
operator|.
name|openIfChanged
argument_list|(
name|searcherToReopen
operator|.
name|getIndexReader
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|release
argument_list|(
name|searcherToReopen
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newReader
operator|!=
literal|null
condition|)
block|{
specifier|final
name|IndexSearcher
name|newSearcher
init|=
name|searcherFactory
operator|.
name|newSearcher
argument_list|(
name|newReader
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|swapSearcher
argument_list|(
name|newSearcher
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|release
argument_list|(
name|newSearcher
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|reopenLock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Returns<code>true</code> if no changes have occured since this searcher    * ie. reader was opened, otherwise<code>false</code>.    * @see IndexReader#isCurrent()     */
DECL|method|isSearcherCurrent
specifier|public
name|boolean
name|isSearcherCurrent
parameter_list|()
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
specifier|final
name|IndexSearcher
name|searcher
init|=
name|acquire
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|isCurrent
argument_list|()
return|;
block|}
finally|finally
block|{
name|release
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Release the searcher previously obtained with {@link #acquire}.    *     *<p>    *<b>NOTE</b>: it's safe to call this after {@link #close}.    */
DECL|method|release
specifier|public
name|void
name|release
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|searcher
operator|!=
literal|null
assert|;
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
comment|/**    * Close this SearcherManager to future searching. Any searches still in    * process in other threads won't be affected, and they should still call    * {@link #release} after they are done.    */
DECL|method|close
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|currentSearcher
operator|!=
literal|null
condition|)
block|{
comment|// make sure we can call this more than once
comment|// closeable javadoc says:
comment|// if this is already closed then invoking this method has no effect.
name|swapSearcher
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Obtain the current IndexSearcher. You must match every call to acquire with    * one call to {@link #release}; it's best to do so in a finally clause.    */
DECL|method|acquire
specifier|public
name|IndexSearcher
name|acquire
parameter_list|()
block|{
name|IndexSearcher
name|searcher
decl_stmt|;
do|do
block|{
if|if
condition|(
operator|(
name|searcher
operator|=
name|currentSearcher
operator|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AlreadyClosedException
argument_list|(
literal|"this SearcherManager is closed"
argument_list|)
throw|;
block|}
block|}
do|while
condition|(
operator|!
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|tryIncRef
argument_list|()
condition|)
do|;
return|return
name|searcher
return|;
block|}
DECL|method|ensureOpen
specifier|private
name|void
name|ensureOpen
parameter_list|()
block|{
if|if
condition|(
name|currentSearcher
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AlreadyClosedException
argument_list|(
literal|"this SearcherManager is closed"
argument_list|)
throw|;
block|}
block|}
DECL|method|swapSearcher
specifier|private
specifier|synchronized
name|void
name|swapSearcher
parameter_list|(
name|IndexSearcher
name|newSearcher
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
comment|// Don't allow un-closing!
if|if
condition|(
name|currentSearcher
operator|==
literal|null
operator|&&
name|newSearcher
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AlreadyClosedException
argument_list|(
literal|"this SearcherManager is closed"
argument_list|)
throw|;
block|}
specifier|final
name|IndexSearcher
name|oldSearcher
init|=
name|currentSearcher
decl_stmt|;
name|currentSearcher
operator|=
name|newSearcher
expr_stmt|;
name|release
argument_list|(
name|oldSearcher
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
