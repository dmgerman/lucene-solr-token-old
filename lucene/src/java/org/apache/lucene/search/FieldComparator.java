begin_unit
begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
operator|.
name|AtomicReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|IndexDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|IndexDocValues
operator|.
name|Source
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldCache
operator|.
name|DocTerms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldCache
operator|.
name|DocTermsIndex
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|cache
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|cache
operator|.
name|CachedArray
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|Direct16
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|Direct32
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|Direct8
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * Expert: a FieldComparator compares hits so as to determine their  * sort order when collecting the top results with {@link  * TopFieldCollector}.  The concrete public FieldComparator  * classes here correspond to the SortField types.  *  *<p>This API is designed to achieve high performance  * sorting, by exposing a tight interaction with {@link  * FieldValueHitQueue} as it visits hits.  Whenever a hit is  * competitive, it's enrolled into a virtual slot, which is  * an int ranging from 0 to numHits-1.  The {@link  * FieldComparator} is made aware of segment transitions  * during searching in case any internal state it's tracking  * needs to be recomputed during these transitions.</p>  *  *<p>A comparator must define these functions:</p>  *  *<ul>  *  *<li> {@link #compare} Compare a hit at 'slot a'  *       with hit 'slot b'.  *  *<li> {@link #setBottom} This method is called by  *       {@link FieldValueHitQueue} to notify the  *       FieldComparator of the current weakest ("bottom")  *       slot.  Note that this slot may not hold the weakest  *       value according to your comparator, in cases where  *       your comparator is not the primary one (ie, is only  *       used to break ties from the comparators before it).  *  *<li> {@link #compareBottom} Compare a new hit (docID)  *       against the "weakest" (bottom) entry in the queue.  *  *<li> {@link #copy} Installs a new hit into the  *       priority queue.  The {@link FieldValueHitQueue}  *       calls this method when a new hit is competitive.  *  *<li> {@link #setNextReader(IndexReader.AtomicReaderContext)} Invoked  *       when the search is switching to the next segment.  *       You may need to update internal state of the  *       comparator, for example retrieving new values from  *       the {@link FieldCache}.  *  *<li> {@link #value} Return the sort value stored in  *       the specified slot.  This is only called at the end  *       of the search, in order to populate {@link  *       FieldDoc#fields} when returning the top results.  *</ul>  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|FieldComparator
specifier|public
specifier|abstract
class|class
name|FieldComparator
parameter_list|<
name|T
parameter_list|>
block|{
comment|/**    * Compare hit at slot1 with hit at slot2.    *     * @param slot1 first slot to compare    * @param slot2 second slot to compare    * @return any N< 0 if slot2's value is sorted after    * slot1, any N> 0 if the slot2's value is sorted before    * slot1 and 0 if they are equal    */
DECL|method|compare
specifier|public
specifier|abstract
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
function_decl|;
comment|/**    * Set the bottom slot, ie the "weakest" (sorted last)    * entry in the queue.  When {@link #compareBottom} is    * called, you should compare against this slot.  This    * will always be called before {@link #compareBottom}.    *     * @param slot the currently weakest (sorted last) slot in the queue    */
DECL|method|setBottom
specifier|public
specifier|abstract
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|slot
parameter_list|)
function_decl|;
comment|/**    * Compare the bottom of the queue with doc.  This will    * only invoked after setBottom has been called.  This    * should return the same result as {@link    * #compare(int,int)}} as if bottom were slot1 and the new    * document were slot 2.    *        *<p>For a search that hits many results, this method    * will be the hotspot (invoked by far the most    * frequently).</p>    *     * @param doc that was hit    * @return any N< 0 if the doc's value is sorted after    * the bottom entry (not competitive), any N> 0 if the    * doc's value is sorted before the bottom entry and 0 if    * they are equal.    */
DECL|method|compareBottom
specifier|public
specifier|abstract
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * This method is called when a new hit is competitive.    * You should copy any state associated with this document    * that will be required for future comparisons, into the    * specified slot.    *     * @param slot which slot to copy the hit to    * @param doc docID relative to current reader    */
DECL|method|copy
specifier|public
specifier|abstract
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Set a new {@link AtomicReaderContext}. All subsequent docIDs are relative to    * the current reader (you must add docBase if you need to    * map it to a top-level docID).    *     * @param context current reader context    * @return the comparator to use for this segment; most    *   comparators can just return "this" to reuse the same    *   comparator across segments    * @throws IOException    */
DECL|method|setNextReader
specifier|public
specifier|abstract
name|FieldComparator
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Sets the Scorer to use in case a document's score is    *  needed.    *     * @param scorer Scorer instance that you should use to    * obtain the current hit's score, if necessary. */
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{
comment|// Empty implementation since most comparators don't need the score. This
comment|// can be overridden by those that need it.
block|}
comment|/**    * Return the actual value in the slot.    *    * @param slot the value    * @return value in this slot    */
DECL|method|value
specifier|public
specifier|abstract
name|T
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
function_decl|;
comment|/** Returns -1 if first is less than second.  Default    *  impl to assume the type implements Comparable and    *  invoke .compareTo; be sure to override this method if    *  your FieldComparator's type isn't a Comparable or    *  if your values may sometimes be null */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|compareValues
specifier|public
name|int
name|compareValues
parameter_list|(
name|T
name|first
parameter_list|,
name|T
name|second
parameter_list|)
block|{
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|second
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|second
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
operator|(
operator|(
name|Comparable
argument_list|<
name|T
argument_list|>
operator|)
name|first
operator|)
operator|.
name|compareTo
argument_list|(
name|second
argument_list|)
return|;
block|}
block|}
DECL|class|NumericComparator
specifier|public
specifier|static
specifier|abstract
class|class
name|NumericComparator
parameter_list|<
name|T
extends|extends
name|CachedArray
parameter_list|,
name|U
extends|extends
name|Number
parameter_list|>
extends|extends
name|FieldComparator
argument_list|<
name|U
argument_list|>
block|{
DECL|field|creator
specifier|protected
specifier|final
name|CachedArrayCreator
argument_list|<
name|T
argument_list|>
name|creator
decl_stmt|;
DECL|field|cached
specifier|protected
name|T
name|cached
decl_stmt|;
DECL|field|checkMissing
specifier|protected
specifier|final
name|boolean
name|checkMissing
decl_stmt|;
DECL|field|valid
specifier|protected
name|Bits
name|valid
decl_stmt|;
DECL|method|NumericComparator
specifier|public
name|NumericComparator
parameter_list|(
name|CachedArrayCreator
argument_list|<
name|T
argument_list|>
name|c
parameter_list|,
name|boolean
name|checkMissing
parameter_list|)
block|{
name|this
operator|.
name|creator
operator|=
name|c
expr_stmt|;
name|this
operator|.
name|checkMissing
operator|=
name|checkMissing
expr_stmt|;
block|}
DECL|method|setup
specifier|protected
name|FieldComparator
name|setup
parameter_list|(
name|T
name|cached
parameter_list|)
block|{
name|this
operator|.
name|cached
operator|=
name|cached
expr_stmt|;
if|if
condition|(
name|checkMissing
condition|)
name|valid
operator|=
name|cached
operator|.
name|valid
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
comment|/** Parses field's values as byte (using {@link    *  FieldCache#getBytes} and sorts by ascending value */
DECL|class|ByteComparator
specifier|public
specifier|static
specifier|final
class|class
name|ByteComparator
extends|extends
name|NumericComparator
argument_list|<
name|ByteValues
argument_list|,
name|Byte
argument_list|>
block|{
DECL|field|docValues
specifier|private
name|byte
index|[]
name|docValues
decl_stmt|;
DECL|field|values
specifier|private
specifier|final
name|byte
index|[]
name|values
decl_stmt|;
DECL|field|missingValue
specifier|private
specifier|final
name|byte
name|missingValue
decl_stmt|;
DECL|field|bottom
specifier|private
name|byte
name|bottom
decl_stmt|;
DECL|method|ByteComparator
name|ByteComparator
parameter_list|(
name|int
name|numHits
parameter_list|,
name|ByteValuesCreator
name|creator
parameter_list|,
name|Byte
name|missingValue
parameter_list|)
block|{
name|super
argument_list|(
name|creator
argument_list|,
name|missingValue
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|byte
index|[
name|numHits
index|]
expr_stmt|;
name|this
operator|.
name|missingValue
operator|=
name|checkMissing
condition|?
name|missingValue
operator|.
name|byteValue
argument_list|()
else|:
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
return|return
name|values
index|[
name|slot1
index|]
operator|-
name|values
index|[
name|slot2
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|byte
name|v2
init|=
name|docValues
index|[
name|doc
index|]
decl_stmt|;
if|if
condition|(
name|valid
operator|!=
literal|null
operator|&&
name|v2
operator|==
literal|0
operator|&&
operator|!
name|valid
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
name|v2
operator|=
name|missingValue
expr_stmt|;
return|return
name|bottom
operator|-
name|v2
return|;
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|byte
name|v2
init|=
name|docValues
index|[
name|doc
index|]
decl_stmt|;
if|if
condition|(
name|valid
operator|!=
literal|null
operator|&&
name|v2
operator|==
literal|0
operator|&&
operator|!
name|valid
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
name|v2
operator|=
name|missingValue
expr_stmt|;
name|values
index|[
name|slot
index|]
operator|=
name|v2
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|FieldComparator
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|setup
argument_list|(
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getBytes
argument_list|(
name|context
operator|.
name|reader
argument_list|,
name|creator
operator|.
name|field
argument_list|,
name|creator
argument_list|)
argument_list|)
expr_stmt|;
name|docValues
operator|=
name|cached
operator|.
name|values
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|this
operator|.
name|bottom
operator|=
name|values
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Byte
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|Byte
operator|.
name|valueOf
argument_list|(
name|values
index|[
name|slot
index|]
argument_list|)
return|;
block|}
block|}
comment|/** Parses field's values as double (using {@link    *  FieldCache#getDoubles} and sorts by ascending value */
DECL|class|DoubleComparator
specifier|public
specifier|static
specifier|final
class|class
name|DoubleComparator
extends|extends
name|NumericComparator
argument_list|<
name|DoubleValues
argument_list|,
name|Double
argument_list|>
block|{
DECL|field|docValues
specifier|private
name|double
index|[]
name|docValues
decl_stmt|;
DECL|field|values
specifier|private
specifier|final
name|double
index|[]
name|values
decl_stmt|;
DECL|field|missingValue
specifier|private
specifier|final
name|double
name|missingValue
decl_stmt|;
DECL|field|bottom
specifier|private
name|double
name|bottom
decl_stmt|;
DECL|method|DoubleComparator
name|DoubleComparator
parameter_list|(
name|int
name|numHits
parameter_list|,
name|DoubleValuesCreator
name|creator
parameter_list|,
name|Double
name|missingValue
parameter_list|)
block|{
name|super
argument_list|(
name|creator
argument_list|,
name|missingValue
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|double
index|[
name|numHits
index|]
expr_stmt|;
name|this
operator|.
name|missingValue
operator|=
name|checkMissing
condition|?
name|missingValue
operator|.
name|doubleValue
argument_list|()
else|:
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
specifier|final
name|double
name|v1
init|=
name|values
index|[
name|slot1
index|]
decl_stmt|;
specifier|final
name|double
name|v2
init|=
name|values
index|[
name|slot2
index|]
decl_stmt|;
if|if
condition|(
name|v1
operator|>
name|v2
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|v1
operator|<
name|v2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|double
name|v2
init|=
name|docValues
index|[
name|doc
index|]
decl_stmt|;
if|if
condition|(
name|valid
operator|!=
literal|null
operator|&&
name|v2
operator|==
literal|0
operator|&&
operator|!
name|valid
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
name|v2
operator|=
name|missingValue
expr_stmt|;
if|if
condition|(
name|bottom
operator|>
name|v2
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|bottom
operator|<
name|v2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|double
name|v2
init|=
name|docValues
index|[
name|doc
index|]
decl_stmt|;
if|if
condition|(
name|valid
operator|!=
literal|null
operator|&&
name|v2
operator|==
literal|0
operator|&&
operator|!
name|valid
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
name|v2
operator|=
name|missingValue
expr_stmt|;
name|values
index|[
name|slot
index|]
operator|=
name|v2
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|FieldComparator
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|setup
argument_list|(
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getDoubles
argument_list|(
name|context
operator|.
name|reader
argument_list|,
name|creator
operator|.
name|field
argument_list|,
name|creator
argument_list|)
argument_list|)
expr_stmt|;
name|docValues
operator|=
name|cached
operator|.
name|values
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|this
operator|.
name|bottom
operator|=
name|values
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Double
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|Double
operator|.
name|valueOf
argument_list|(
name|values
index|[
name|slot
index|]
argument_list|)
return|;
block|}
block|}
comment|/** Uses float index values to sort by ascending value */
DECL|class|FloatDocValuesComparator
specifier|public
specifier|static
specifier|final
class|class
name|FloatDocValuesComparator
extends|extends
name|FieldComparator
argument_list|<
name|Double
argument_list|>
block|{
DECL|field|values
specifier|private
specifier|final
name|double
index|[]
name|values
decl_stmt|;
DECL|field|currentReaderValues
specifier|private
name|Source
name|currentReaderValues
decl_stmt|;
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|bottom
specifier|private
name|double
name|bottom
decl_stmt|;
DECL|method|FloatDocValuesComparator
name|FloatDocValuesComparator
parameter_list|(
name|int
name|numHits
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|values
operator|=
operator|new
name|double
index|[
name|numHits
index|]
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
specifier|final
name|double
name|v1
init|=
name|values
index|[
name|slot1
index|]
decl_stmt|;
specifier|final
name|double
name|v2
init|=
name|values
index|[
name|slot2
index|]
decl_stmt|;
if|if
condition|(
name|v1
operator|>
name|v2
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|v1
operator|<
name|v2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
specifier|final
name|double
name|v2
init|=
name|currentReaderValues
operator|.
name|getFloat
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|bottom
operator|>
name|v2
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|bottom
operator|<
name|v2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|values
index|[
name|slot
index|]
operator|=
name|currentReaderValues
operator|.
name|getFloat
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|FieldComparator
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|IndexDocValues
name|docValues
init|=
name|context
operator|.
name|reader
operator|.
name|docValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|docValues
operator|!=
literal|null
condition|)
block|{
name|currentReaderValues
operator|=
name|docValues
operator|.
name|getSource
argument_list|()
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|this
operator|.
name|bottom
operator|=
name|values
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Double
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|Double
operator|.
name|valueOf
argument_list|(
name|values
index|[
name|slot
index|]
argument_list|)
return|;
block|}
block|}
comment|/** Parses field's values as float (using {@link    *  FieldCache#getFloats} and sorts by ascending value */
DECL|class|FloatComparator
specifier|public
specifier|static
specifier|final
class|class
name|FloatComparator
extends|extends
name|NumericComparator
argument_list|<
name|FloatValues
argument_list|,
name|Float
argument_list|>
block|{
DECL|field|docValues
specifier|private
name|float
index|[]
name|docValues
decl_stmt|;
DECL|field|values
specifier|private
specifier|final
name|float
index|[]
name|values
decl_stmt|;
DECL|field|missingValue
specifier|private
specifier|final
name|float
name|missingValue
decl_stmt|;
DECL|field|bottom
specifier|private
name|float
name|bottom
decl_stmt|;
DECL|method|FloatComparator
name|FloatComparator
parameter_list|(
name|int
name|numHits
parameter_list|,
name|FloatValuesCreator
name|creator
parameter_list|,
name|Float
name|missingValue
parameter_list|)
block|{
name|super
argument_list|(
name|creator
argument_list|,
name|missingValue
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|float
index|[
name|numHits
index|]
expr_stmt|;
name|this
operator|.
name|missingValue
operator|=
name|checkMissing
condition|?
name|missingValue
operator|.
name|floatValue
argument_list|()
else|:
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
comment|// TODO: are there sneaky non-branch ways to compute
comment|// sign of float?
specifier|final
name|float
name|v1
init|=
name|values
index|[
name|slot1
index|]
decl_stmt|;
specifier|final
name|float
name|v2
init|=
name|values
index|[
name|slot2
index|]
decl_stmt|;
if|if
condition|(
name|v1
operator|>
name|v2
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|v1
operator|<
name|v2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
comment|// TODO: are there sneaky non-branch ways to compute sign of float?
name|float
name|v2
init|=
name|docValues
index|[
name|doc
index|]
decl_stmt|;
if|if
condition|(
name|valid
operator|!=
literal|null
operator|&&
name|v2
operator|==
literal|0
operator|&&
operator|!
name|valid
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
name|v2
operator|=
name|missingValue
expr_stmt|;
if|if
condition|(
name|bottom
operator|>
name|v2
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|bottom
operator|<
name|v2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|float
name|v2
init|=
name|docValues
index|[
name|doc
index|]
decl_stmt|;
if|if
condition|(
name|valid
operator|!=
literal|null
operator|&&
name|v2
operator|==
literal|0
operator|&&
operator|!
name|valid
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
name|v2
operator|=
name|missingValue
expr_stmt|;
name|values
index|[
name|slot
index|]
operator|=
name|v2
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|FieldComparator
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|setup
argument_list|(
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getFloats
argument_list|(
name|context
operator|.
name|reader
argument_list|,
name|creator
operator|.
name|field
argument_list|,
name|creator
argument_list|)
argument_list|)
expr_stmt|;
name|docValues
operator|=
name|cached
operator|.
name|values
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|this
operator|.
name|bottom
operator|=
name|values
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Float
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|Float
operator|.
name|valueOf
argument_list|(
name|values
index|[
name|slot
index|]
argument_list|)
return|;
block|}
block|}
comment|/** Parses field's values as short (using {@link    *  FieldCache#getShorts} and sorts by ascending value */
DECL|class|ShortComparator
specifier|public
specifier|static
specifier|final
class|class
name|ShortComparator
extends|extends
name|NumericComparator
argument_list|<
name|ShortValues
argument_list|,
name|Short
argument_list|>
block|{
DECL|field|docValues
specifier|private
name|short
index|[]
name|docValues
decl_stmt|;
DECL|field|values
specifier|private
specifier|final
name|short
index|[]
name|values
decl_stmt|;
DECL|field|bottom
specifier|private
name|short
name|bottom
decl_stmt|;
DECL|field|missingValue
specifier|private
specifier|final
name|short
name|missingValue
decl_stmt|;
DECL|method|ShortComparator
name|ShortComparator
parameter_list|(
name|int
name|numHits
parameter_list|,
name|ShortValuesCreator
name|creator
parameter_list|,
name|Short
name|missingValue
parameter_list|)
block|{
name|super
argument_list|(
name|creator
argument_list|,
name|missingValue
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|short
index|[
name|numHits
index|]
expr_stmt|;
name|this
operator|.
name|missingValue
operator|=
name|checkMissing
condition|?
name|missingValue
operator|.
name|shortValue
argument_list|()
else|:
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
return|return
name|values
index|[
name|slot1
index|]
operator|-
name|values
index|[
name|slot2
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|short
name|v2
init|=
name|docValues
index|[
name|doc
index|]
decl_stmt|;
if|if
condition|(
name|valid
operator|!=
literal|null
operator|&&
name|v2
operator|==
literal|0
operator|&&
operator|!
name|valid
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
name|v2
operator|=
name|missingValue
expr_stmt|;
return|return
name|bottom
operator|-
name|v2
return|;
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|short
name|v2
init|=
name|docValues
index|[
name|doc
index|]
decl_stmt|;
if|if
condition|(
name|valid
operator|!=
literal|null
operator|&&
name|v2
operator|==
literal|0
operator|&&
operator|!
name|valid
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
name|v2
operator|=
name|missingValue
expr_stmt|;
name|values
index|[
name|slot
index|]
operator|=
name|v2
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|FieldComparator
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|setup
argument_list|(
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getShorts
argument_list|(
name|context
operator|.
name|reader
argument_list|,
name|creator
operator|.
name|field
argument_list|,
name|creator
argument_list|)
argument_list|)
expr_stmt|;
name|docValues
operator|=
name|cached
operator|.
name|values
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|this
operator|.
name|bottom
operator|=
name|values
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Short
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|Short
operator|.
name|valueOf
argument_list|(
name|values
index|[
name|slot
index|]
argument_list|)
return|;
block|}
block|}
comment|/** Parses field's values as int (using {@link    *  FieldCache#getInts} and sorts by ascending value */
DECL|class|IntComparator
specifier|public
specifier|static
specifier|final
class|class
name|IntComparator
extends|extends
name|NumericComparator
argument_list|<
name|IntValues
argument_list|,
name|Integer
argument_list|>
block|{
DECL|field|docValues
specifier|private
name|int
index|[]
name|docValues
decl_stmt|;
DECL|field|values
specifier|private
specifier|final
name|int
index|[]
name|values
decl_stmt|;
DECL|field|bottom
specifier|private
name|int
name|bottom
decl_stmt|;
comment|// Value of bottom of queue
DECL|field|missingValue
specifier|final
name|int
name|missingValue
decl_stmt|;
DECL|method|IntComparator
name|IntComparator
parameter_list|(
name|int
name|numHits
parameter_list|,
name|IntValuesCreator
name|creator
parameter_list|,
name|Integer
name|missingValue
parameter_list|)
block|{
name|super
argument_list|(
name|creator
argument_list|,
name|missingValue
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|int
index|[
name|numHits
index|]
expr_stmt|;
name|this
operator|.
name|missingValue
operator|=
name|checkMissing
condition|?
name|missingValue
operator|.
name|intValue
argument_list|()
else|:
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
comment|// TODO: there are sneaky non-branch ways to compute
comment|// -1/+1/0 sign
comment|// Cannot return values[slot1] - values[slot2] because that
comment|// may overflow
specifier|final
name|int
name|v1
init|=
name|values
index|[
name|slot1
index|]
decl_stmt|;
specifier|final
name|int
name|v2
init|=
name|values
index|[
name|slot2
index|]
decl_stmt|;
if|if
condition|(
name|v1
operator|>
name|v2
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|v1
operator|<
name|v2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
comment|// TODO: there are sneaky non-branch ways to compute
comment|// -1/+1/0 sign
comment|// Cannot return bottom - values[slot2] because that
comment|// may overflow
name|int
name|v2
init|=
name|docValues
index|[
name|doc
index|]
decl_stmt|;
if|if
condition|(
name|valid
operator|!=
literal|null
operator|&&
name|v2
operator|==
literal|0
operator|&&
operator|!
name|valid
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
name|v2
operator|=
name|missingValue
expr_stmt|;
if|if
condition|(
name|bottom
operator|>
name|v2
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|bottom
operator|<
name|v2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|int
name|v2
init|=
name|docValues
index|[
name|doc
index|]
decl_stmt|;
if|if
condition|(
name|valid
operator|!=
literal|null
operator|&&
name|v2
operator|==
literal|0
operator|&&
operator|!
name|valid
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
name|v2
operator|=
name|missingValue
expr_stmt|;
name|values
index|[
name|slot
index|]
operator|=
name|v2
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|FieldComparator
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|setup
argument_list|(
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getInts
argument_list|(
name|context
operator|.
name|reader
argument_list|,
name|creator
operator|.
name|field
argument_list|,
name|creator
argument_list|)
argument_list|)
expr_stmt|;
name|docValues
operator|=
name|cached
operator|.
name|values
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|this
operator|.
name|bottom
operator|=
name|values
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Integer
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|values
index|[
name|slot
index|]
argument_list|)
return|;
block|}
block|}
comment|/** Loads int index values and sorts by ascending value. */
DECL|class|IntDocValuesComparator
specifier|public
specifier|static
specifier|final
class|class
name|IntDocValuesComparator
extends|extends
name|FieldComparator
argument_list|<
name|Long
argument_list|>
block|{
DECL|field|values
specifier|private
specifier|final
name|long
index|[]
name|values
decl_stmt|;
DECL|field|currentReaderValues
specifier|private
name|Source
name|currentReaderValues
decl_stmt|;
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|bottom
specifier|private
name|long
name|bottom
decl_stmt|;
DECL|method|IntDocValuesComparator
name|IntDocValuesComparator
parameter_list|(
name|int
name|numHits
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|values
operator|=
operator|new
name|long
index|[
name|numHits
index|]
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
comment|// TODO: there are sneaky non-branch ways to compute
comment|// -1/+1/0 sign
specifier|final
name|long
name|v1
init|=
name|values
index|[
name|slot1
index|]
decl_stmt|;
specifier|final
name|long
name|v2
init|=
name|values
index|[
name|slot2
index|]
decl_stmt|;
if|if
condition|(
name|v1
operator|>
name|v2
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|v1
operator|<
name|v2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
comment|// TODO: there are sneaky non-branch ways to compute
comment|// -1/+1/0 sign
specifier|final
name|long
name|v2
init|=
name|currentReaderValues
operator|.
name|getInt
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|bottom
operator|>
name|v2
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|bottom
operator|<
name|v2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|values
index|[
name|slot
index|]
operator|=
name|currentReaderValues
operator|.
name|getInt
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|FieldComparator
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexDocValues
name|docValues
init|=
name|context
operator|.
name|reader
operator|.
name|docValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|docValues
operator|!=
literal|null
condition|)
block|{
name|currentReaderValues
operator|=
name|docValues
operator|.
name|getSource
argument_list|()
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|this
operator|.
name|bottom
operator|=
name|values
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Long
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|values
index|[
name|slot
index|]
argument_list|)
return|;
block|}
block|}
comment|/** Parses field's values as long (using {@link    *  FieldCache#getLongs} and sorts by ascending value */
DECL|class|LongComparator
specifier|public
specifier|static
specifier|final
class|class
name|LongComparator
extends|extends
name|NumericComparator
argument_list|<
name|LongValues
argument_list|,
name|Long
argument_list|>
block|{
DECL|field|docValues
specifier|private
name|long
index|[]
name|docValues
decl_stmt|;
DECL|field|values
specifier|private
specifier|final
name|long
index|[]
name|values
decl_stmt|;
DECL|field|bottom
specifier|private
name|long
name|bottom
decl_stmt|;
DECL|field|missingValue
specifier|private
specifier|final
name|long
name|missingValue
decl_stmt|;
DECL|method|LongComparator
name|LongComparator
parameter_list|(
name|int
name|numHits
parameter_list|,
name|LongValuesCreator
name|creator
parameter_list|,
name|Long
name|missingValue
parameter_list|)
block|{
name|super
argument_list|(
name|creator
argument_list|,
name|missingValue
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|long
index|[
name|numHits
index|]
expr_stmt|;
name|this
operator|.
name|missingValue
operator|=
name|checkMissing
condition|?
name|missingValue
operator|.
name|longValue
argument_list|()
else|:
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
comment|// TODO: there are sneaky non-branch ways to compute
comment|// -1/+1/0 sign
specifier|final
name|long
name|v1
init|=
name|values
index|[
name|slot1
index|]
decl_stmt|;
specifier|final
name|long
name|v2
init|=
name|values
index|[
name|slot2
index|]
decl_stmt|;
if|if
condition|(
name|v1
operator|>
name|v2
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|v1
operator|<
name|v2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
comment|// TODO: there are sneaky non-branch ways to compute
comment|// -1/+1/0 sign
name|long
name|v2
init|=
name|docValues
index|[
name|doc
index|]
decl_stmt|;
if|if
condition|(
name|valid
operator|!=
literal|null
operator|&&
name|v2
operator|==
literal|0
operator|&&
operator|!
name|valid
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
name|v2
operator|=
name|missingValue
expr_stmt|;
if|if
condition|(
name|bottom
operator|>
name|v2
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|bottom
operator|<
name|v2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|long
name|v2
init|=
name|docValues
index|[
name|doc
index|]
decl_stmt|;
if|if
condition|(
name|valid
operator|!=
literal|null
operator|&&
name|v2
operator|==
literal|0
operator|&&
operator|!
name|valid
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
name|v2
operator|=
name|missingValue
expr_stmt|;
name|values
index|[
name|slot
index|]
operator|=
name|v2
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|FieldComparator
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|setup
argument_list|(
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getLongs
argument_list|(
name|context
operator|.
name|reader
argument_list|,
name|creator
operator|.
name|field
argument_list|,
name|creator
argument_list|)
argument_list|)
expr_stmt|;
name|docValues
operator|=
name|cached
operator|.
name|values
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|this
operator|.
name|bottom
operator|=
name|values
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Long
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|values
index|[
name|slot
index|]
argument_list|)
return|;
block|}
block|}
comment|/** Sorts by descending relevance.  NOTE: if you are    *  sorting only by descending relevance and then    *  secondarily by ascending docID, performance is faster    *  using {@link TopScoreDocCollector} directly (which {@link    *  IndexSearcher#search} uses when no {@link Sort} is    *  specified). */
DECL|class|RelevanceComparator
specifier|public
specifier|static
specifier|final
class|class
name|RelevanceComparator
extends|extends
name|FieldComparator
argument_list|<
name|Float
argument_list|>
block|{
DECL|field|scores
specifier|private
specifier|final
name|float
index|[]
name|scores
decl_stmt|;
DECL|field|bottom
specifier|private
name|float
name|bottom
decl_stmt|;
DECL|field|scorer
specifier|private
name|Scorer
name|scorer
decl_stmt|;
DECL|method|RelevanceComparator
name|RelevanceComparator
parameter_list|(
name|int
name|numHits
parameter_list|)
block|{
name|scores
operator|=
operator|new
name|float
index|[
name|numHits
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
specifier|final
name|float
name|score1
init|=
name|scores
index|[
name|slot1
index|]
decl_stmt|;
specifier|final
name|float
name|score2
init|=
name|scores
index|[
name|slot2
index|]
decl_stmt|;
return|return
name|score1
operator|>
name|score2
condition|?
operator|-
literal|1
else|:
operator|(
name|score1
operator|<
name|score2
condition|?
literal|1
else|:
literal|0
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|float
name|score
init|=
name|scorer
operator|.
name|score
argument_list|()
decl_stmt|;
return|return
name|bottom
operator|>
name|score
condition|?
operator|-
literal|1
else|:
operator|(
name|bottom
operator|<
name|score
condition|?
literal|1
else|:
literal|0
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|scores
index|[
name|slot
index|]
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|FieldComparator
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|this
operator|.
name|bottom
operator|=
name|scores
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{
comment|// wrap with a ScoreCachingWrappingScorer so that successive calls to
comment|// score() will not incur score computation over and
comment|// over again.
if|if
condition|(
operator|!
operator|(
name|scorer
operator|instanceof
name|ScoreCachingWrappingScorer
operator|)
condition|)
block|{
name|this
operator|.
name|scorer
operator|=
operator|new
name|ScoreCachingWrappingScorer
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Float
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|Float
operator|.
name|valueOf
argument_list|(
name|scores
index|[
name|slot
index|]
argument_list|)
return|;
block|}
comment|// Override because we sort reverse of natural Float order:
annotation|@
name|Override
DECL|method|compareValues
specifier|public
name|int
name|compareValues
parameter_list|(
name|Float
name|first
parameter_list|,
name|Float
name|second
parameter_list|)
block|{
comment|// Reversed intentionally because relevance by default
comment|// sorts descending:
return|return
name|second
operator|.
name|compareTo
argument_list|(
name|first
argument_list|)
return|;
block|}
block|}
comment|/** Sorts by ascending docID */
DECL|class|DocComparator
specifier|public
specifier|static
specifier|final
class|class
name|DocComparator
extends|extends
name|FieldComparator
argument_list|<
name|Integer
argument_list|>
block|{
DECL|field|docIDs
specifier|private
specifier|final
name|int
index|[]
name|docIDs
decl_stmt|;
DECL|field|docBase
specifier|private
name|int
name|docBase
decl_stmt|;
DECL|field|bottom
specifier|private
name|int
name|bottom
decl_stmt|;
DECL|method|DocComparator
name|DocComparator
parameter_list|(
name|int
name|numHits
parameter_list|)
block|{
name|docIDs
operator|=
operator|new
name|int
index|[
name|numHits
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
comment|// No overflow risk because docIDs are non-negative
return|return
name|docIDs
index|[
name|slot1
index|]
operator|-
name|docIDs
index|[
name|slot2
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
comment|// No overflow risk because docIDs are non-negative
return|return
name|bottom
operator|-
operator|(
name|docBase
operator|+
name|doc
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
name|docIDs
index|[
name|slot
index|]
operator|=
name|docBase
operator|+
name|doc
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|FieldComparator
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
block|{
comment|// TODO: can we "map" our docIDs to the current
comment|// reader? saves having to then subtract on every
comment|// compare call
name|this
operator|.
name|docBase
operator|=
name|context
operator|.
name|docBase
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|this
operator|.
name|bottom
operator|=
name|docIDs
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|Integer
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|docIDs
index|[
name|slot
index|]
argument_list|)
return|;
block|}
block|}
comment|/** Sorts by field's natural Term sort order, using    *  ordinals.  This is functionally equivalent to {@link    *  TermValComparator}, but it first resolves the string    *  to their relative ordinal positions (using the index    *  returned by {@link FieldCache#getTermsIndex}), and    *  does most comparisons using the ordinals.  For medium    *  to large results, this comparator will be much faster    *  than {@link TermValComparator}.  For very small    *  result sets it may be slower. */
DECL|class|TermOrdValComparator
specifier|public
specifier|static
specifier|final
class|class
name|TermOrdValComparator
extends|extends
name|FieldComparator
argument_list|<
name|BytesRef
argument_list|>
block|{
comment|/** @lucene.internal */
DECL|field|ords
specifier|final
name|int
index|[]
name|ords
decl_stmt|;
comment|/** @lucene.internal */
DECL|field|values
specifier|final
name|BytesRef
index|[]
name|values
decl_stmt|;
comment|/** @lucene.internal */
DECL|field|readerGen
specifier|final
name|int
index|[]
name|readerGen
decl_stmt|;
comment|/** @lucene.internal */
DECL|field|currentReaderGen
name|int
name|currentReaderGen
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|termsIndex
specifier|private
name|DocTermsIndex
name|termsIndex
decl_stmt|;
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
comment|/** @lucene.internal */
DECL|field|bottomSlot
name|int
name|bottomSlot
init|=
operator|-
literal|1
decl_stmt|;
comment|/** @lucene.internal */
DECL|field|bottomOrd
name|int
name|bottomOrd
decl_stmt|;
comment|/** @lucene.internal */
DECL|field|bottomSameReader
name|boolean
name|bottomSameReader
decl_stmt|;
comment|/** @lucene.internal */
DECL|field|bottomValue
name|BytesRef
name|bottomValue
decl_stmt|;
comment|/** @lucene.internal */
DECL|field|tempBR
specifier|final
name|BytesRef
name|tempBR
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|method|TermOrdValComparator
specifier|public
name|TermOrdValComparator
parameter_list|(
name|int
name|numHits
parameter_list|,
name|String
name|field
parameter_list|,
name|int
name|sortPos
parameter_list|,
name|boolean
name|reversed
parameter_list|)
block|{
name|ords
operator|=
operator|new
name|int
index|[
name|numHits
index|]
expr_stmt|;
name|values
operator|=
operator|new
name|BytesRef
index|[
name|numHits
index|]
expr_stmt|;
name|readerGen
operator|=
operator|new
name|int
index|[
name|numHits
index|]
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
if|if
condition|(
name|readerGen
index|[
name|slot1
index|]
operator|==
name|readerGen
index|[
name|slot2
index|]
condition|)
block|{
return|return
name|ords
index|[
name|slot1
index|]
operator|-
name|ords
index|[
name|slot2
index|]
return|;
block|}
specifier|final
name|BytesRef
name|val1
init|=
name|values
index|[
name|slot1
index|]
decl_stmt|;
specifier|final
name|BytesRef
name|val2
init|=
name|values
index|[
name|slot2
index|]
decl_stmt|;
if|if
condition|(
name|val1
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
name|val1
operator|.
name|compareTo
argument_list|(
name|val2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/** Base class for specialized (per bit width of the      * ords) per-segment comparator.  NOTE: this is messy;      * we do this only because hotspot can't reliably inline      * the underlying array access when looking up doc->ord      * @lucene.internal      */
DECL|class|PerSegmentComparator
specifier|abstract
class|class
name|PerSegmentComparator
extends|extends
name|FieldComparator
argument_list|<
name|BytesRef
argument_list|>
block|{
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|FieldComparator
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|TermOrdValComparator
operator|.
name|this
operator|.
name|setNextReader
argument_list|(
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
return|return
name|TermOrdValComparator
operator|.
name|this
operator|.
name|compare
argument_list|(
name|slot1
argument_list|,
name|slot2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|TermOrdValComparator
operator|.
name|this
operator|.
name|setBottom
argument_list|(
name|bottom
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|BytesRef
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|TermOrdValComparator
operator|.
name|this
operator|.
name|value
argument_list|(
name|slot
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareValues
specifier|public
name|int
name|compareValues
parameter_list|(
name|BytesRef
name|val1
parameter_list|,
name|BytesRef
name|val2
parameter_list|)
block|{
if|if
condition|(
name|val1
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
name|val1
operator|.
name|compareTo
argument_list|(
name|val2
argument_list|)
return|;
block|}
block|}
comment|// Used per-segment when bit width of doc->ord is 8:
DECL|class|ByteOrdComparator
specifier|private
specifier|final
class|class
name|ByteOrdComparator
extends|extends
name|PerSegmentComparator
block|{
DECL|field|readerOrds
specifier|private
specifier|final
name|byte
index|[]
name|readerOrds
decl_stmt|;
DECL|field|termsIndex
specifier|private
specifier|final
name|DocTermsIndex
name|termsIndex
decl_stmt|;
DECL|field|docBase
specifier|private
specifier|final
name|int
name|docBase
decl_stmt|;
DECL|method|ByteOrdComparator
specifier|public
name|ByteOrdComparator
parameter_list|(
name|byte
index|[]
name|readerOrds
parameter_list|,
name|DocTermsIndex
name|termsIndex
parameter_list|,
name|int
name|docBase
parameter_list|)
block|{
name|this
operator|.
name|readerOrds
operator|=
name|readerOrds
expr_stmt|;
name|this
operator|.
name|termsIndex
operator|=
name|termsIndex
expr_stmt|;
name|this
operator|.
name|docBase
operator|=
name|docBase
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
assert|assert
name|bottomSlot
operator|!=
operator|-
literal|1
assert|;
if|if
condition|(
name|bottomSameReader
condition|)
block|{
comment|// ord is precisely comparable, even in the equal case
return|return
name|bottomOrd
operator|-
operator|(
name|readerOrds
index|[
name|doc
index|]
operator|&
literal|0xFF
operator|)
return|;
block|}
else|else
block|{
comment|// ord is only approx comparable: if they are not
comment|// equal, we can use that; if they are equal, we
comment|// must fallback to compare by value
specifier|final
name|int
name|order
init|=
name|readerOrds
index|[
name|doc
index|]
operator|&
literal|0xFF
decl_stmt|;
specifier|final
name|int
name|cmp
init|=
name|bottomOrd
operator|-
name|order
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
block|{
return|return
name|cmp
return|;
block|}
if|if
condition|(
name|bottomValue
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|order
operator|==
literal|0
condition|)
block|{
comment|// unset
return|return
literal|0
return|;
block|}
comment|// bottom wins
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|order
operator|==
literal|0
condition|)
block|{
comment|// doc wins
return|return
literal|1
return|;
block|}
name|termsIndex
operator|.
name|lookup
argument_list|(
name|order
argument_list|,
name|tempBR
argument_list|)
expr_stmt|;
return|return
name|bottomValue
operator|.
name|compareTo
argument_list|(
name|tempBR
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
specifier|final
name|int
name|ord
init|=
name|readerOrds
index|[
name|doc
index|]
operator|&
literal|0xFF
decl_stmt|;
name|ords
index|[
name|slot
index|]
operator|=
name|ord
expr_stmt|;
if|if
condition|(
name|ord
operator|==
literal|0
condition|)
block|{
name|values
index|[
name|slot
index|]
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|ord
operator|>
literal|0
assert|;
if|if
condition|(
name|values
index|[
name|slot
index|]
operator|==
literal|null
condition|)
block|{
name|values
index|[
name|slot
index|]
operator|=
operator|new
name|BytesRef
argument_list|()
expr_stmt|;
block|}
name|termsIndex
operator|.
name|lookup
argument_list|(
name|ord
argument_list|,
name|values
index|[
name|slot
index|]
argument_list|)
expr_stmt|;
block|}
name|readerGen
index|[
name|slot
index|]
operator|=
name|currentReaderGen
expr_stmt|;
block|}
block|}
comment|// Used per-segment when bit width of doc->ord is 16:
DECL|class|ShortOrdComparator
specifier|private
specifier|final
class|class
name|ShortOrdComparator
extends|extends
name|PerSegmentComparator
block|{
DECL|field|readerOrds
specifier|private
specifier|final
name|short
index|[]
name|readerOrds
decl_stmt|;
DECL|field|termsIndex
specifier|private
specifier|final
name|DocTermsIndex
name|termsIndex
decl_stmt|;
DECL|field|docBase
specifier|private
specifier|final
name|int
name|docBase
decl_stmt|;
DECL|method|ShortOrdComparator
specifier|public
name|ShortOrdComparator
parameter_list|(
name|short
index|[]
name|readerOrds
parameter_list|,
name|DocTermsIndex
name|termsIndex
parameter_list|,
name|int
name|docBase
parameter_list|)
block|{
name|this
operator|.
name|readerOrds
operator|=
name|readerOrds
expr_stmt|;
name|this
operator|.
name|termsIndex
operator|=
name|termsIndex
expr_stmt|;
name|this
operator|.
name|docBase
operator|=
name|docBase
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
assert|assert
name|bottomSlot
operator|!=
operator|-
literal|1
assert|;
if|if
condition|(
name|bottomSameReader
condition|)
block|{
comment|// ord is precisely comparable, even in the equal case
return|return
name|bottomOrd
operator|-
operator|(
name|readerOrds
index|[
name|doc
index|]
operator|&
literal|0xFFFF
operator|)
return|;
block|}
else|else
block|{
comment|// ord is only approx comparable: if they are not
comment|// equal, we can use that; if they are equal, we
comment|// must fallback to compare by value
specifier|final
name|int
name|order
init|=
name|readerOrds
index|[
name|doc
index|]
operator|&
literal|0xFFFF
decl_stmt|;
specifier|final
name|int
name|cmp
init|=
name|bottomOrd
operator|-
name|order
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
block|{
return|return
name|cmp
return|;
block|}
if|if
condition|(
name|bottomValue
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|order
operator|==
literal|0
condition|)
block|{
comment|// unset
return|return
literal|0
return|;
block|}
comment|// bottom wins
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|order
operator|==
literal|0
condition|)
block|{
comment|// doc wins
return|return
literal|1
return|;
block|}
name|termsIndex
operator|.
name|lookup
argument_list|(
name|order
argument_list|,
name|tempBR
argument_list|)
expr_stmt|;
return|return
name|bottomValue
operator|.
name|compareTo
argument_list|(
name|tempBR
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
specifier|final
name|int
name|ord
init|=
name|readerOrds
index|[
name|doc
index|]
operator|&
literal|0xFFFF
decl_stmt|;
name|ords
index|[
name|slot
index|]
operator|=
name|ord
expr_stmt|;
if|if
condition|(
name|ord
operator|==
literal|0
condition|)
block|{
name|values
index|[
name|slot
index|]
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|ord
operator|>
literal|0
assert|;
if|if
condition|(
name|values
index|[
name|slot
index|]
operator|==
literal|null
condition|)
block|{
name|values
index|[
name|slot
index|]
operator|=
operator|new
name|BytesRef
argument_list|()
expr_stmt|;
block|}
name|termsIndex
operator|.
name|lookup
argument_list|(
name|ord
argument_list|,
name|values
index|[
name|slot
index|]
argument_list|)
expr_stmt|;
block|}
name|readerGen
index|[
name|slot
index|]
operator|=
name|currentReaderGen
expr_stmt|;
block|}
block|}
comment|// Used per-segment when bit width of doc->ord is 32:
DECL|class|IntOrdComparator
specifier|private
specifier|final
class|class
name|IntOrdComparator
extends|extends
name|PerSegmentComparator
block|{
DECL|field|readerOrds
specifier|private
specifier|final
name|int
index|[]
name|readerOrds
decl_stmt|;
DECL|field|termsIndex
specifier|private
specifier|final
name|DocTermsIndex
name|termsIndex
decl_stmt|;
DECL|field|docBase
specifier|private
specifier|final
name|int
name|docBase
decl_stmt|;
DECL|method|IntOrdComparator
specifier|public
name|IntOrdComparator
parameter_list|(
name|int
index|[]
name|readerOrds
parameter_list|,
name|DocTermsIndex
name|termsIndex
parameter_list|,
name|int
name|docBase
parameter_list|)
block|{
name|this
operator|.
name|readerOrds
operator|=
name|readerOrds
expr_stmt|;
name|this
operator|.
name|termsIndex
operator|=
name|termsIndex
expr_stmt|;
name|this
operator|.
name|docBase
operator|=
name|docBase
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
assert|assert
name|bottomSlot
operator|!=
operator|-
literal|1
assert|;
if|if
condition|(
name|bottomSameReader
condition|)
block|{
comment|// ord is precisely comparable, even in the equal case
return|return
name|bottomOrd
operator|-
name|readerOrds
index|[
name|doc
index|]
return|;
block|}
else|else
block|{
comment|// ord is only approx comparable: if they are not
comment|// equal, we can use that; if they are equal, we
comment|// must fallback to compare by value
specifier|final
name|int
name|order
init|=
name|readerOrds
index|[
name|doc
index|]
decl_stmt|;
specifier|final
name|int
name|cmp
init|=
name|bottomOrd
operator|-
name|order
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
block|{
return|return
name|cmp
return|;
block|}
if|if
condition|(
name|bottomValue
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|order
operator|==
literal|0
condition|)
block|{
comment|// unset
return|return
literal|0
return|;
block|}
comment|// bottom wins
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|order
operator|==
literal|0
condition|)
block|{
comment|// doc wins
return|return
literal|1
return|;
block|}
name|termsIndex
operator|.
name|lookup
argument_list|(
name|order
argument_list|,
name|tempBR
argument_list|)
expr_stmt|;
return|return
name|bottomValue
operator|.
name|compareTo
argument_list|(
name|tempBR
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
specifier|final
name|int
name|ord
init|=
name|readerOrds
index|[
name|doc
index|]
decl_stmt|;
name|ords
index|[
name|slot
index|]
operator|=
name|ord
expr_stmt|;
if|if
condition|(
name|ord
operator|==
literal|0
condition|)
block|{
name|values
index|[
name|slot
index|]
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|ord
operator|>
literal|0
assert|;
if|if
condition|(
name|values
index|[
name|slot
index|]
operator|==
literal|null
condition|)
block|{
name|values
index|[
name|slot
index|]
operator|=
operator|new
name|BytesRef
argument_list|()
expr_stmt|;
block|}
name|termsIndex
operator|.
name|lookup
argument_list|(
name|ord
argument_list|,
name|values
index|[
name|slot
index|]
argument_list|)
expr_stmt|;
block|}
name|readerGen
index|[
name|slot
index|]
operator|=
name|currentReaderGen
expr_stmt|;
block|}
block|}
comment|// Used per-segment when bit width is not a native array
comment|// size (8, 16, 32):
DECL|class|AnyOrdComparator
specifier|private
specifier|final
class|class
name|AnyOrdComparator
extends|extends
name|PerSegmentComparator
block|{
DECL|field|readerOrds
specifier|private
specifier|final
name|PackedInts
operator|.
name|Reader
name|readerOrds
decl_stmt|;
DECL|field|termsIndex
specifier|private
specifier|final
name|DocTermsIndex
name|termsIndex
decl_stmt|;
DECL|field|docBase
specifier|private
specifier|final
name|int
name|docBase
decl_stmt|;
DECL|method|AnyOrdComparator
specifier|public
name|AnyOrdComparator
parameter_list|(
name|PackedInts
operator|.
name|Reader
name|readerOrds
parameter_list|,
name|DocTermsIndex
name|termsIndex
parameter_list|,
name|int
name|docBase
parameter_list|)
block|{
name|this
operator|.
name|readerOrds
operator|=
name|readerOrds
expr_stmt|;
name|this
operator|.
name|termsIndex
operator|=
name|termsIndex
expr_stmt|;
name|this
operator|.
name|docBase
operator|=
name|docBase
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
assert|assert
name|bottomSlot
operator|!=
operator|-
literal|1
assert|;
if|if
condition|(
name|bottomSameReader
condition|)
block|{
comment|// ord is precisely comparable, even in the equal case
return|return
name|bottomOrd
operator|-
operator|(
name|int
operator|)
name|readerOrds
operator|.
name|get
argument_list|(
name|doc
argument_list|)
return|;
block|}
else|else
block|{
comment|// ord is only approx comparable: if they are not
comment|// equal, we can use that; if they are equal, we
comment|// must fallback to compare by value
specifier|final
name|int
name|order
init|=
operator|(
name|int
operator|)
name|readerOrds
operator|.
name|get
argument_list|(
name|doc
argument_list|)
decl_stmt|;
specifier|final
name|int
name|cmp
init|=
name|bottomOrd
operator|-
name|order
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
block|{
return|return
name|cmp
return|;
block|}
if|if
condition|(
name|bottomValue
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|order
operator|==
literal|0
condition|)
block|{
comment|// unset
return|return
literal|0
return|;
block|}
comment|// bottom wins
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|order
operator|==
literal|0
condition|)
block|{
comment|// doc wins
return|return
literal|1
return|;
block|}
name|termsIndex
operator|.
name|lookup
argument_list|(
name|order
argument_list|,
name|tempBR
argument_list|)
expr_stmt|;
return|return
name|bottomValue
operator|.
name|compareTo
argument_list|(
name|tempBR
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
specifier|final
name|int
name|ord
init|=
operator|(
name|int
operator|)
name|readerOrds
operator|.
name|get
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|ords
index|[
name|slot
index|]
operator|=
name|ord
expr_stmt|;
if|if
condition|(
name|ord
operator|==
literal|0
condition|)
block|{
name|values
index|[
name|slot
index|]
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|ord
operator|>
literal|0
assert|;
if|if
condition|(
name|values
index|[
name|slot
index|]
operator|==
literal|null
condition|)
block|{
name|values
index|[
name|slot
index|]
operator|=
operator|new
name|BytesRef
argument_list|()
expr_stmt|;
block|}
name|termsIndex
operator|.
name|lookup
argument_list|(
name|ord
argument_list|,
name|values
index|[
name|slot
index|]
argument_list|)
expr_stmt|;
block|}
name|readerGen
index|[
name|slot
index|]
operator|=
name|currentReaderGen
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|FieldComparator
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|docBase
init|=
name|context
operator|.
name|docBase
decl_stmt|;
name|termsIndex
operator|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getTermsIndex
argument_list|(
name|context
operator|.
name|reader
argument_list|,
name|field
argument_list|)
expr_stmt|;
specifier|final
name|PackedInts
operator|.
name|Reader
name|docToOrd
init|=
name|termsIndex
operator|.
name|getDocToOrd
argument_list|()
decl_stmt|;
name|FieldComparator
name|perSegComp
decl_stmt|;
if|if
condition|(
name|docToOrd
operator|instanceof
name|Direct8
condition|)
block|{
name|perSegComp
operator|=
operator|new
name|ByteOrdComparator
argument_list|(
operator|(
operator|(
name|Direct8
operator|)
name|docToOrd
operator|)
operator|.
name|getArray
argument_list|()
argument_list|,
name|termsIndex
argument_list|,
name|docBase
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|docToOrd
operator|instanceof
name|Direct16
condition|)
block|{
name|perSegComp
operator|=
operator|new
name|ShortOrdComparator
argument_list|(
operator|(
operator|(
name|Direct16
operator|)
name|docToOrd
operator|)
operator|.
name|getArray
argument_list|()
argument_list|,
name|termsIndex
argument_list|,
name|docBase
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|docToOrd
operator|instanceof
name|Direct32
condition|)
block|{
name|perSegComp
operator|=
operator|new
name|IntOrdComparator
argument_list|(
operator|(
operator|(
name|Direct32
operator|)
name|docToOrd
operator|)
operator|.
name|getArray
argument_list|()
argument_list|,
name|termsIndex
argument_list|,
name|docBase
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|perSegComp
operator|=
operator|new
name|AnyOrdComparator
argument_list|(
name|docToOrd
argument_list|,
name|termsIndex
argument_list|,
name|docBase
argument_list|)
expr_stmt|;
block|}
name|currentReaderGen
operator|++
expr_stmt|;
if|if
condition|(
name|bottomSlot
operator|!=
operator|-
literal|1
condition|)
block|{
name|perSegComp
operator|.
name|setBottom
argument_list|(
name|bottomSlot
argument_list|)
expr_stmt|;
block|}
return|return
name|perSegComp
return|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|bottomSlot
operator|=
name|bottom
expr_stmt|;
name|bottomValue
operator|=
name|values
index|[
name|bottomSlot
index|]
expr_stmt|;
if|if
condition|(
name|currentReaderGen
operator|==
name|readerGen
index|[
name|bottomSlot
index|]
condition|)
block|{
name|bottomOrd
operator|=
name|ords
index|[
name|bottomSlot
index|]
expr_stmt|;
name|bottomSameReader
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|bottomValue
operator|==
literal|null
condition|)
block|{
comment|// 0 ord is null for all segments
assert|assert
name|ords
index|[
name|bottomSlot
index|]
operator|==
literal|0
assert|;
name|bottomOrd
operator|=
literal|0
expr_stmt|;
name|bottomSameReader
operator|=
literal|true
expr_stmt|;
name|readerGen
index|[
name|bottomSlot
index|]
operator|=
name|currentReaderGen
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|index
init|=
name|binarySearch
argument_list|(
name|tempBR
argument_list|,
name|termsIndex
argument_list|,
name|bottomValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|bottomOrd
operator|=
operator|-
name|index
operator|-
literal|2
expr_stmt|;
name|bottomSameReader
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|bottomOrd
operator|=
name|index
expr_stmt|;
comment|// exact value match
name|bottomSameReader
operator|=
literal|true
expr_stmt|;
name|readerGen
index|[
name|bottomSlot
index|]
operator|=
name|currentReaderGen
expr_stmt|;
name|ords
index|[
name|bottomSlot
index|]
operator|=
name|bottomOrd
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|BytesRef
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|values
index|[
name|slot
index|]
return|;
block|}
block|}
comment|/** Sorts by field's natural Term sort order.  All    *  comparisons are done using BytesRef.compareTo, which is    *  slow for medium to large result sets but possibly    *  very fast for very small results sets. */
DECL|class|TermValComparator
specifier|public
specifier|static
specifier|final
class|class
name|TermValComparator
extends|extends
name|FieldComparator
argument_list|<
name|BytesRef
argument_list|>
block|{
DECL|field|values
specifier|private
name|BytesRef
index|[]
name|values
decl_stmt|;
DECL|field|docTerms
specifier|private
name|DocTerms
name|docTerms
decl_stmt|;
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|bottom
specifier|private
name|BytesRef
name|bottom
decl_stmt|;
DECL|field|tempBR
specifier|private
specifier|final
name|BytesRef
name|tempBR
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|method|TermValComparator
name|TermValComparator
parameter_list|(
name|int
name|numHits
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|values
operator|=
operator|new
name|BytesRef
index|[
name|numHits
index|]
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
specifier|final
name|BytesRef
name|val1
init|=
name|values
index|[
name|slot1
index|]
decl_stmt|;
specifier|final
name|BytesRef
name|val2
init|=
name|values
index|[
name|slot2
index|]
decl_stmt|;
if|if
condition|(
name|val1
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
name|val1
operator|.
name|compareTo
argument_list|(
name|val2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareBottom
specifier|public
name|int
name|compareBottom
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|BytesRef
name|val2
init|=
name|docTerms
operator|.
name|getTerm
argument_list|(
name|doc
argument_list|,
name|tempBR
argument_list|)
decl_stmt|;
if|if
condition|(
name|bottom
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
name|bottom
operator|.
name|compareTo
argument_list|(
name|val2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|doc
parameter_list|)
block|{
if|if
condition|(
name|values
index|[
name|slot
index|]
operator|==
literal|null
condition|)
block|{
name|values
index|[
name|slot
index|]
operator|=
operator|new
name|BytesRef
argument_list|()
expr_stmt|;
block|}
name|docTerms
operator|.
name|getTerm
argument_list|(
name|doc
argument_list|,
name|values
index|[
name|slot
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|FieldComparator
name|setNextReader
parameter_list|(
name|AtomicReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|docTerms
operator|=
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|getTerms
argument_list|(
name|context
operator|.
name|reader
argument_list|,
name|field
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|setBottom
specifier|public
name|void
name|setBottom
parameter_list|(
specifier|final
name|int
name|bottom
parameter_list|)
block|{
name|this
operator|.
name|bottom
operator|=
name|values
index|[
name|bottom
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|BytesRef
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|values
index|[
name|slot
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|compareValues
specifier|public
name|int
name|compareValues
parameter_list|(
name|BytesRef
name|val1
parameter_list|,
name|BytesRef
name|val2
parameter_list|)
block|{
if|if
condition|(
name|val1
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|val2
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
name|val1
operator|.
name|compareTo
argument_list|(
name|val2
argument_list|)
return|;
block|}
block|}
DECL|method|binarySearch
specifier|final
specifier|protected
specifier|static
name|int
name|binarySearch
parameter_list|(
name|BytesRef
name|br
parameter_list|,
name|DocTermsIndex
name|a
parameter_list|,
name|BytesRef
name|key
parameter_list|)
block|{
return|return
name|binarySearch
argument_list|(
name|br
argument_list|,
name|a
argument_list|,
name|key
argument_list|,
literal|1
argument_list|,
name|a
operator|.
name|numOrd
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|binarySearch
specifier|final
specifier|protected
specifier|static
name|int
name|binarySearch
parameter_list|(
name|BytesRef
name|br
parameter_list|,
name|DocTermsIndex
name|a
parameter_list|,
name|BytesRef
name|key
parameter_list|,
name|int
name|low
parameter_list|,
name|int
name|high
parameter_list|)
block|{
while|while
condition|(
name|low
operator|<=
name|high
condition|)
block|{
name|int
name|mid
init|=
operator|(
name|low
operator|+
name|high
operator|)
operator|>>>
literal|1
decl_stmt|;
name|BytesRef
name|midVal
init|=
name|a
operator|.
name|lookup
argument_list|(
name|mid
argument_list|,
name|br
argument_list|)
decl_stmt|;
name|int
name|cmp
decl_stmt|;
if|if
condition|(
name|midVal
operator|!=
literal|null
condition|)
block|{
name|cmp
operator|=
name|midVal
operator|.
name|compareTo
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cmp
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|cmp
operator|<
literal|0
condition|)
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
name|high
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
else|else
return|return
name|mid
return|;
block|}
return|return
operator|-
operator|(
name|low
operator|+
literal|1
operator|)
return|;
block|}
block|}
end_class
end_unit
