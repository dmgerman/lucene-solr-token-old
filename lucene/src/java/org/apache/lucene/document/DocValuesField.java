begin_unit
begin_package
DECL|package|org.apache.lucene.document
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
operator|.
name|Type
import|;
end_import
begin_comment
comment|// javadocs
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_comment
comment|/**  *<p>  * This class provides a {@link Field} that enables storing of typed  * per-document values for scoring, sorting or value retrieval. Here's an  * example usage, adding an int value (<code>22</code>):  *   *<pre>  *   document.add(new DocValuesField(name, 22, DocValues.Type.VAR_INTS));  *</pre>  *   * For optimal performance, re-use the<code>DocValuesField</code> and  * {@link Document} instance for more than one document:  *   *<pre>  *  DocValuesField field = new DocValuesField(name, 0, DocValues.Type.VAR_INTS);  *  Document document = new Document();  *  document.add(field);  *   *  for(all documents) {  *    ...  *    field.setValue(value)  *    writer.addDocument(document);  *    ...  *  }  *</pre>  *   *<p>  * If you also need to store the value, you should add a  * separate {@link StoredField} instance.  * */
end_comment
begin_class
DECL|class|DocValuesField
specifier|public
class|class
name|DocValuesField
extends|extends
name|Field
block|{
DECL|field|bytesComparator
specifier|protected
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|bytesComparator
decl_stmt|;
DECL|field|types
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|DocValues
operator|.
name|Type
argument_list|,
name|FieldType
argument_list|>
name|types
init|=
operator|new
name|HashMap
argument_list|<
name|DocValues
operator|.
name|Type
argument_list|,
name|FieldType
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|DocValues
operator|.
name|Type
name|type
range|:
name|DocValues
operator|.
name|Type
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|FieldType
name|ft
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setDocValueType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|ft
operator|.
name|freeze
argument_list|()
expr_stmt|;
name|types
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|ft
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|BYTES
specifier|private
specifier|static
name|EnumSet
argument_list|<
name|Type
argument_list|>
name|BYTES
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|Type
operator|.
name|BYTES_FIXED_DEREF
argument_list|,
name|Type
operator|.
name|BYTES_FIXED_STRAIGHT
argument_list|,
name|Type
operator|.
name|BYTES_VAR_DEREF
argument_list|,
name|Type
operator|.
name|BYTES_VAR_STRAIGHT
argument_list|,
name|Type
operator|.
name|BYTES_FIXED_SORTED
argument_list|,
name|Type
operator|.
name|BYTES_VAR_SORTED
argument_list|)
decl_stmt|;
DECL|field|INTS
specifier|private
specifier|static
name|EnumSet
argument_list|<
name|Type
argument_list|>
name|INTS
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|Type
operator|.
name|VAR_INTS
argument_list|,
name|Type
operator|.
name|FIXED_INTS_8
argument_list|,
name|Type
operator|.
name|FIXED_INTS_16
argument_list|,
name|Type
operator|.
name|FIXED_INTS_32
argument_list|,
name|Type
operator|.
name|FIXED_INTS_64
argument_list|)
decl_stmt|;
DECL|method|getFieldType
specifier|public
specifier|static
name|FieldType
name|getFieldType
parameter_list|(
name|DocValues
operator|.
name|Type
name|type
parameter_list|)
block|{
return|return
name|types
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|DocValuesField
specifier|public
name|DocValuesField
parameter_list|(
name|String
name|name
parameter_list|,
name|BytesRef
name|bytes
parameter_list|,
name|DocValues
operator|.
name|Type
name|docValueType
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|getFieldType
argument_list|(
name|docValueType
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|BYTES
operator|.
name|contains
argument_list|(
name|docValueType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"docValueType must be one of: "
operator|+
name|BYTES
operator|+
literal|"; got "
operator|+
name|docValueType
argument_list|)
throw|;
block|}
name|fieldsData
operator|=
name|bytes
expr_stmt|;
block|}
DECL|method|DocValuesField
specifier|public
name|DocValuesField
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|value
parameter_list|,
name|DocValues
operator|.
name|Type
name|docValueType
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|getFieldType
argument_list|(
name|docValueType
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|INTS
operator|.
name|contains
argument_list|(
name|docValueType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"docValueType must be one of: "
operator|+
name|INTS
operator|+
literal|"; got "
operator|+
name|docValueType
argument_list|)
throw|;
block|}
name|fieldsData
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|DocValuesField
specifier|public
name|DocValuesField
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|value
parameter_list|,
name|DocValues
operator|.
name|Type
name|docValueType
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|getFieldType
argument_list|(
name|docValueType
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|INTS
operator|.
name|contains
argument_list|(
name|docValueType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"docValueType must be one of: "
operator|+
name|INTS
operator|+
literal|"; got "
operator|+
name|docValueType
argument_list|)
throw|;
block|}
name|fieldsData
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|DocValuesField
specifier|public
name|DocValuesField
parameter_list|(
name|String
name|name
parameter_list|,
name|float
name|value
parameter_list|,
name|DocValues
operator|.
name|Type
name|docValueType
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|getFieldType
argument_list|(
name|docValueType
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|docValueType
operator|!=
name|DocValues
operator|.
name|Type
operator|.
name|FLOAT_32
operator|&&
name|docValueType
operator|!=
name|DocValues
operator|.
name|Type
operator|.
name|FLOAT_64
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"docValueType must be FLOAT_32/64; got "
operator|+
name|docValueType
argument_list|)
throw|;
block|}
name|fieldsData
operator|=
name|Float
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|DocValuesField
specifier|public
name|DocValuesField
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|value
parameter_list|,
name|DocValues
operator|.
name|Type
name|docValueType
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|getFieldType
argument_list|(
name|docValueType
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|docValueType
operator|!=
name|DocValues
operator|.
name|Type
operator|.
name|FLOAT_32
operator|&&
name|docValueType
operator|!=
name|DocValues
operator|.
name|Type
operator|.
name|FLOAT_64
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"docValueType must be FLOAT_32/64; got "
operator|+
name|docValueType
argument_list|)
throw|;
block|}
name|fieldsData
operator|=
name|Double
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
