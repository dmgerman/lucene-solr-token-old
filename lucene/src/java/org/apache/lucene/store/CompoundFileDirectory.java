begin_unit
begin_package
DECL|package|org.apache.lucene.store
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * Class for accessing a compound stream.  * This class implements a directory, but is limited to only read operations.  * Directory methods that would normally modify data throw an exception.  * @lucene.experimental  */
end_comment
begin_class
DECL|class|CompoundFileDirectory
specifier|public
specifier|abstract
class|class
name|CompoundFileDirectory
extends|extends
name|Directory
block|{
comment|/** Offset/Length for a slice inside of a compound file */
DECL|class|FileEntry
specifier|public
specifier|static
specifier|final
class|class
name|FileEntry
block|{
DECL|field|offset
name|long
name|offset
decl_stmt|;
DECL|field|length
name|long
name|length
decl_stmt|;
block|}
DECL|field|directory
specifier|private
specifier|final
name|Directory
name|directory
decl_stmt|;
DECL|field|fileName
specifier|private
specifier|final
name|String
name|fileName
decl_stmt|;
DECL|field|readBufferSize
specifier|protected
specifier|final
name|int
name|readBufferSize
decl_stmt|;
DECL|field|entries
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|FileEntry
argument_list|>
name|entries
decl_stmt|;
DECL|field|openForWrite
specifier|private
name|boolean
name|openForWrite
decl_stmt|;
DECL|field|SENTINEL
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|FileEntry
argument_list|>
name|SENTINEL
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
DECL|field|writer
specifier|private
name|CompoundFileWriter
name|writer
decl_stmt|;
comment|/**    * Create a new CompoundFileDirectory.    *<p>    * NOTE: subclasses must call {@link #initForRead(Map)} before the directory can be used.    */
DECL|method|CompoundFileDirectory
specifier|public
name|CompoundFileDirectory
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|String
name|fileName
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
name|this
operator|.
name|fileName
operator|=
name|fileName
expr_stmt|;
name|this
operator|.
name|readBufferSize
operator|=
name|BufferedIndexInput
operator|.
name|bufferSize
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|isOpen
operator|=
literal|false
expr_stmt|;
block|}
comment|/** Initialize with a map of filename->slices */
DECL|method|initForRead
specifier|protected
specifier|final
name|void
name|initForRead
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|FileEntry
argument_list|>
name|entries
parameter_list|)
block|{
name|this
operator|.
name|entries
operator|=
name|entries
expr_stmt|;
name|this
operator|.
name|isOpen
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|openForWrite
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|initForWrite
specifier|protected
specifier|final
name|void
name|initForWrite
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
operator|!
operator|(
name|directory
operator|instanceof
name|CompoundFileDirectory
operator|)
operator|:
literal|"compound file inside of compound file: "
operator|+
name|fileName
assert|;
name|this
operator|.
name|entries
operator|=
name|SENTINEL
expr_stmt|;
name|this
operator|.
name|openForWrite
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|isOpen
operator|=
literal|true
expr_stmt|;
name|writer
operator|=
operator|new
name|CompoundFileWriter
argument_list|(
name|directory
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
comment|/** Helper method that reads CFS entries from an input stream */
DECL|method|readEntries
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|FileEntry
argument_list|>
name|readEntries
parameter_list|(
name|IndexInput
name|stream
parameter_list|,
name|Directory
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
comment|// read the first VInt. If it is negative, it's the version number
comment|// otherwise it's the count (pre-3.1 indexes)
specifier|final
name|int
name|firstInt
init|=
name|stream
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstInt
operator|==
name|CompoundFileWriter
operator|.
name|FORMAT_CURRENT
condition|)
block|{
name|IndexInput
name|input
init|=
literal|null
decl_stmt|;
try|try
block|{
name|input
operator|=
name|dir
operator|.
name|openInput
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|IndexFileNames
operator|.
name|stripExtension
argument_list|(
name|name
argument_list|)
argument_list|,
literal|""
argument_list|,
name|IndexFileNames
operator|.
name|COMPOUND_FILE_ENTRIES_EXTENSION
argument_list|)
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|)
expr_stmt|;
specifier|final
name|int
name|readInt
init|=
name|input
operator|.
name|readInt
argument_list|()
decl_stmt|;
comment|// unused right now
assert|assert
name|readInt
operator|==
name|CompoundFileWriter
operator|.
name|ENTRY_FORMAT_CURRENT
assert|;
specifier|final
name|int
name|numEntries
init|=
name|input
operator|.
name|readVInt
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|FileEntry
argument_list|>
name|mapping
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CompoundFileDirectory
operator|.
name|FileEntry
argument_list|>
argument_list|(
name|numEntries
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numEntries
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|FileEntry
name|fileEntry
init|=
operator|new
name|FileEntry
argument_list|()
decl_stmt|;
name|mapping
operator|.
name|put
argument_list|(
name|input
operator|.
name|readString
argument_list|()
argument_list|,
name|fileEntry
argument_list|)
expr_stmt|;
name|fileEntry
operator|.
name|offset
operator|=
name|input
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|fileEntry
operator|.
name|length
operator|=
name|input
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
return|return
name|mapping
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeSafely
argument_list|(
literal|true
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO remove once 3.x is not supported anymore
return|return
name|readLegacyEntries
argument_list|(
name|stream
argument_list|,
name|firstInt
argument_list|)
return|;
block|}
DECL|method|readLegacyEntries
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|FileEntry
argument_list|>
name|readLegacyEntries
parameter_list|(
name|IndexInput
name|stream
parameter_list|,
name|int
name|firstInt
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|FileEntry
argument_list|>
name|entries
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|FileEntry
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|count
decl_stmt|;
specifier|final
name|boolean
name|stripSegmentName
decl_stmt|;
if|if
condition|(
name|firstInt
operator|<
name|CompoundFileWriter
operator|.
name|FORMAT_PRE_VERSION
condition|)
block|{
if|if
condition|(
name|firstInt
operator|<
name|CompoundFileWriter
operator|.
name|FORMAT_CURRENT
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"Incompatible format version: "
operator|+
name|firstInt
operator|+
literal|" expected "
operator|+
name|CompoundFileWriter
operator|.
name|FORMAT_CURRENT
argument_list|)
throw|;
block|}
comment|// It's a post-3.1 index, read the count.
name|count
operator|=
name|stream
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|stripSegmentName
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|count
operator|=
name|firstInt
expr_stmt|;
name|stripSegmentName
operator|=
literal|true
expr_stmt|;
block|}
comment|// read the directory and init files
name|long
name|streamLength
init|=
name|stream
operator|.
name|length
argument_list|()
decl_stmt|;
name|FileEntry
name|entry
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|long
name|offset
init|=
name|stream
operator|.
name|readLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|offset
argument_list|<
literal|0
operator|||
name|offset
argument_list|>
name|streamLength
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"Invalid CFS entry offset: "
operator|+
name|offset
argument_list|)
throw|;
block|}
name|String
name|id
init|=
name|stream
operator|.
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
name|stripSegmentName
condition|)
block|{
comment|// Fix the id to not include the segment names. This is relevant for
comment|// pre-3.1 indexes.
name|id
operator|=
name|IndexFileNames
operator|.
name|stripSegmentName
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
comment|// set length of the previous entry
name|entry
operator|.
name|length
operator|=
name|offset
operator|-
name|entry
operator|.
name|offset
expr_stmt|;
block|}
name|entry
operator|=
operator|new
name|FileEntry
argument_list|()
expr_stmt|;
name|entry
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|entries
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
comment|// set the length of the final entry
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|length
operator|=
name|streamLength
operator|-
name|entry
operator|.
name|offset
expr_stmt|;
block|}
return|return
name|entries
return|;
block|}
DECL|method|getDirectory
specifier|public
name|Directory
name|getDirectory
parameter_list|()
block|{
return|return
name|directory
return|;
block|}
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|fileName
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isOpen
condition|)
block|{
comment|// allow double close - usually to be consistent with other closeables
assert|assert
name|entries
operator|==
literal|null
assert|;
return|return;
comment|// already closed
block|}
name|entries
operator|=
literal|null
expr_stmt|;
name|isOpen
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
assert|assert
name|openForWrite
assert|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|openInput
specifier|public
specifier|synchronized
name|IndexInput
name|openInput
parameter_list|(
name|String
name|fileName
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
assert|assert
operator|!
name|openForWrite
assert|;
specifier|final
name|String
name|id
init|=
name|IndexFileNames
operator|.
name|stripSegmentName
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
specifier|final
name|FileEntry
name|entry
init|=
name|entries
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No sub-file with id "
operator|+
name|id
operator|+
literal|" found (fileName="
operator|+
name|fileName
operator|+
literal|" files: "
operator|+
name|entries
operator|.
name|keySet
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
return|return
name|openInputSlice
argument_list|(
name|id
argument_list|,
name|entry
operator|.
name|offset
argument_list|,
name|entry
operator|.
name|length
argument_list|,
name|readBufferSize
argument_list|)
return|;
block|}
comment|/** Return an IndexInput that represents a "slice" or portion of the CFS file. */
DECL|method|openInputSlice
specifier|public
specifier|abstract
name|IndexInput
name|openInputSlice
parameter_list|(
name|String
name|id
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|,
name|int
name|readBufferSize
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Returns an array of strings, one for each file in the directory. */
annotation|@
name|Override
DECL|method|listAll
specifier|public
name|String
index|[]
name|listAll
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|String
index|[]
name|res
decl_stmt|;
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|res
operator|=
name|writer
operator|.
name|listAll
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|res
operator|=
name|entries
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|entries
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
comment|// Add the segment name
name|String
name|seg
init|=
name|fileName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fileName
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|res
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|res
index|[
name|i
index|]
operator|=
name|seg
operator|+
name|res
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
comment|/** Returns true iff a file with the given name exists. */
annotation|@
name|Override
DECL|method|fileExists
specifier|public
name|boolean
name|fileExists
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|writer
operator|!=
literal|null
condition|)
block|{
return|return
name|writer
operator|.
name|fileExists
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
name|entries
operator|.
name|containsKey
argument_list|(
name|IndexFileNames
operator|.
name|stripSegmentName
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
comment|/** Returns the time the compound file was last modified. */
annotation|@
name|Override
DECL|method|fileModified
specifier|public
name|long
name|fileModified
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|directory
operator|.
name|fileModified
argument_list|(
name|fileName
argument_list|)
return|;
block|}
comment|/** Not implemented    * @throws UnsupportedOperationException */
annotation|@
name|Override
DECL|method|deleteFile
specifier|public
name|void
name|deleteFile
parameter_list|(
name|String
name|name
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/** Not implemented    * @throws UnsupportedOperationException */
DECL|method|renameFile
specifier|public
name|void
name|renameFile
parameter_list|(
name|String
name|from
parameter_list|,
name|String
name|to
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/** Returns the length of a file in the directory.    * @throws IOException if the file does not exist */
annotation|@
name|Override
DECL|method|fileLength
specifier|public
name|long
name|fileLength
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|writer
operator|!=
literal|null
condition|)
block|{
return|return
name|writer
operator|.
name|fileLenght
argument_list|(
name|name
argument_list|)
return|;
block|}
name|FileEntry
name|e
init|=
name|entries
operator|.
name|get
argument_list|(
name|IndexFileNames
operator|.
name|stripSegmentName
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|name
argument_list|)
throw|;
return|return
name|e
operator|.
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|createOutput
specifier|public
name|IndexOutput
name|createOutput
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|writer
operator|.
name|createOutput
argument_list|(
name|name
argument_list|,
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|sync
specifier|public
name|void
name|sync
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/** Not implemented    * @throws UnsupportedOperationException */
annotation|@
name|Override
DECL|method|makeLock
specifier|public
name|Lock
name|makeLock
parameter_list|(
name|String
name|name
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|openCompoundInput
specifier|public
name|CompoundFileDirectory
name|openCompoundInput
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|FileEntry
name|fileEntry
init|=
name|this
operator|.
name|entries
operator|.
name|get
argument_list|(
name|IndexFileNames
operator|.
name|stripSegmentName
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileEntry
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"file "
operator|+
name|name
operator|+
literal|" does not exists in this CFS"
argument_list|)
throw|;
block|}
return|return
operator|new
name|NestedCompoundFileDirectory
argument_list|(
name|name
argument_list|,
name|context
argument_list|,
name|fileEntry
operator|.
name|offset
argument_list|,
name|fileEntry
operator|.
name|length
argument_list|)
return|;
block|}
comment|/** Not implemented   * @throws UnsupportedOperationException */
annotation|@
name|Override
DECL|method|createCompoundOutput
specifier|public
name|CompoundFileDirectory
name|createCompoundOutput
parameter_list|(
name|String
name|name
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"can not create nested CFS, create seperately and use Directory.copy instead"
argument_list|)
throw|;
block|}
DECL|class|NestedCompoundFileDirectory
specifier|private
class|class
name|NestedCompoundFileDirectory
extends|extends
name|CompoundFileDirectory
block|{
DECL|field|cfsOffset
specifier|private
specifier|final
name|long
name|cfsOffset
decl_stmt|;
DECL|field|cfsLength
specifier|private
specifier|final
name|long
name|cfsLength
decl_stmt|;
DECL|method|NestedCompoundFileDirectory
specifier|public
name|NestedCompoundFileDirectory
parameter_list|(
name|String
name|fileName
parameter_list|,
name|IOContext
name|context
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|directory
argument_list|,
name|fileName
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|cfsOffset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|cfsLength
operator|=
name|length
expr_stmt|;
name|IndexInput
name|input
init|=
literal|null
decl_stmt|;
try|try
block|{
name|input
operator|=
name|CompoundFileDirectory
operator|.
name|this
operator|.
name|openInput
argument_list|(
name|fileName
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|)
expr_stmt|;
name|initForRead
argument_list|(
name|CompoundFileDirectory
operator|.
name|readEntries
argument_list|(
name|input
argument_list|,
name|CompoundFileDirectory
operator|.
name|this
argument_list|,
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeSafely
argument_list|(
literal|false
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|openInputSlice
specifier|public
name|IndexInput
name|openInputSlice
parameter_list|(
name|String
name|id
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|,
name|int
name|readBufferSize
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|offset
operator|+
name|length
operator|<=
name|cfsLength
assert|;
return|return
name|CompoundFileDirectory
operator|.
name|this
operator|.
name|openInputSlice
argument_list|(
name|id
argument_list|,
name|cfsOffset
operator|+
name|offset
argument_list|,
name|length
argument_list|,
name|readBufferSize
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
