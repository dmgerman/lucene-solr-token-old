begin_unit
begin_package
DECL|package|org.apache.lucene.store
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_comment
comment|/**  * Default implementation of {@link CompoundFileDirectory}.  *<p>  * This implementation returns a BufferedIndexInput that wraps the underlying   * Directory's IndexInput for the compound file (using unbuffered reads).  * @lucene.experimental  */
end_comment
begin_class
DECL|class|DefaultCompoundFileDirectory
specifier|public
class|class
name|DefaultCompoundFileDirectory
extends|extends
name|CompoundFileDirectory
block|{
DECL|field|stream
specifier|protected
name|IndexInput
name|stream
decl_stmt|;
DECL|method|DefaultCompoundFileDirectory
specifier|public
name|DefaultCompoundFileDirectory
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|String
name|fileName
parameter_list|,
name|IOContext
name|context
parameter_list|,
name|boolean
name|writeable
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|directory
argument_list|,
name|fileName
argument_list|,
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|writeable
condition|)
block|{
try|try
block|{
name|stream
operator|=
name|directory
operator|.
name|openInput
argument_list|(
name|fileName
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|initForRead
argument_list|(
name|CompoundFileDirectory
operator|.
name|readEntries
argument_list|(
name|stream
argument_list|,
name|directory
argument_list|,
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|IOUtils
operator|.
name|closeSafely
argument_list|(
name|e
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|initForWrite
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|openInputSlice
specifier|public
name|IndexInput
name|openInputSlice
parameter_list|(
name|String
name|id
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|,
name|int
name|readBufferSize
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|CSIndexInput
argument_list|(
name|stream
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|readBufferSize
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|IOUtils
operator|.
name|closeSafely
argument_list|(
literal|false
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Implementation of an IndexInput that reads from a portion of the    *  compound file.    */
DECL|class|CSIndexInput
specifier|static
specifier|final
class|class
name|CSIndexInput
extends|extends
name|BufferedIndexInput
block|{
DECL|field|base
name|IndexInput
name|base
decl_stmt|;
DECL|field|fileOffset
name|long
name|fileOffset
decl_stmt|;
DECL|field|length
name|long
name|length
decl_stmt|;
DECL|method|CSIndexInput
name|CSIndexInput
parameter_list|(
specifier|final
name|IndexInput
name|base
parameter_list|,
specifier|final
name|long
name|fileOffset
parameter_list|,
specifier|final
name|long
name|length
parameter_list|)
block|{
name|this
argument_list|(
name|base
argument_list|,
name|fileOffset
argument_list|,
name|length
argument_list|,
name|BufferedIndexInput
operator|.
name|BUFFER_SIZE
argument_list|)
expr_stmt|;
block|}
DECL|method|CSIndexInput
name|CSIndexInput
parameter_list|(
specifier|final
name|IndexInput
name|base
parameter_list|,
specifier|final
name|long
name|fileOffset
parameter_list|,
specifier|final
name|long
name|length
parameter_list|,
name|int
name|readBufferSize
parameter_list|)
block|{
name|super
argument_list|(
name|readBufferSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|base
operator|=
operator|(
name|IndexInput
operator|)
name|base
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|fileOffset
operator|=
name|fileOffset
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|CSIndexInput
name|clone
init|=
operator|(
name|CSIndexInput
operator|)
name|super
operator|.
name|clone
argument_list|()
decl_stmt|;
name|clone
operator|.
name|base
operator|=
operator|(
name|IndexInput
operator|)
name|base
operator|.
name|clone
argument_list|()
expr_stmt|;
name|clone
operator|.
name|fileOffset
operator|=
name|fileOffset
expr_stmt|;
name|clone
operator|.
name|length
operator|=
name|length
expr_stmt|;
return|return
name|clone
return|;
block|}
comment|/** Expert: implements buffer refill.  Reads bytes from the current      *  position in the input.      * @param b the array to read bytes into      * @param offset the offset in the array to start storing bytes      * @param len the number of bytes to read      */
annotation|@
name|Override
DECL|method|readInternal
specifier|protected
name|void
name|readInternal
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|start
init|=
name|getFilePointer
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|+
name|len
operator|>
name|length
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"read past EOF"
argument_list|)
throw|;
name|base
operator|.
name|seek
argument_list|(
name|fileOffset
operator|+
name|start
argument_list|)
expr_stmt|;
name|base
operator|.
name|readBytes
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|len
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/** Expert: implements seek.  Sets current position in this file, where      *  the next {@link #readInternal(byte[],int,int)} will occur.      * @see #readInternal(byte[],int,int)      */
annotation|@
name|Override
DECL|method|seekInternal
specifier|protected
name|void
name|seekInternal
parameter_list|(
name|long
name|pos
parameter_list|)
block|{}
comment|/** Closes the stream to further operations. */
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|base
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|length
specifier|public
name|long
name|length
parameter_list|()
block|{
return|return
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|copyBytes
specifier|public
name|void
name|copyBytes
parameter_list|(
name|IndexOutput
name|out
parameter_list|,
name|long
name|numBytes
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Copy first whatever is in the buffer
name|numBytes
operator|-=
name|flushBuffer
argument_list|(
name|out
argument_list|,
name|numBytes
argument_list|)
expr_stmt|;
comment|// If there are more bytes left to copy, delegate the copy task to the
comment|// base IndexInput, in case it can do an optimized copy.
if|if
condition|(
name|numBytes
operator|>
literal|0
condition|)
block|{
name|long
name|start
init|=
name|getFilePointer
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|+
name|numBytes
operator|>
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"read past EOF"
argument_list|)
throw|;
block|}
name|base
operator|.
name|seek
argument_list|(
name|fileOffset
operator|+
name|start
argument_list|)
expr_stmt|;
name|base
operator|.
name|copyBytes
argument_list|(
name|out
argument_list|,
name|numBytes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
