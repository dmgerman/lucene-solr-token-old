begin_unit
begin_package
DECL|package|org.apache.lucene.codecs.lucene40.values
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene40
operator|.
name|values
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_comment
comment|/**  * Package private BytesRefUtils - can move this into the o.a.l.utils package if  * needed.  *   * @lucene.internal  */
end_comment
begin_class
DECL|class|BytesRefUtils
specifier|public
specifier|final
class|class
name|BytesRefUtils
block|{
DECL|method|BytesRefUtils
specifier|private
name|BytesRefUtils
parameter_list|()
block|{   }
comment|/**    * Copies the given long value and encodes it as 8 byte Big-Endian.    *<p>    * NOTE: this method resets the offset to 0, length to 8 and resizes the    * reference array if needed.    */
DECL|method|copyLong
specifier|public
specifier|static
name|void
name|copyLong
parameter_list|(
name|BytesRef
name|ref
parameter_list|,
name|long
name|value
parameter_list|)
block|{
if|if
condition|(
name|ref
operator|.
name|bytes
operator|.
name|length
operator|<
literal|8
condition|)
block|{
name|ref
operator|.
name|bytes
operator|=
operator|new
name|byte
index|[
literal|8
index|]
expr_stmt|;
block|}
name|copyInternal
argument_list|(
name|ref
argument_list|,
call|(
name|int
call|)
argument_list|(
name|value
operator|>>
literal|32
argument_list|)
argument_list|,
name|ref
operator|.
name|offset
operator|=
literal|0
argument_list|)
expr_stmt|;
name|copyInternal
argument_list|(
name|ref
argument_list|,
operator|(
name|int
operator|)
name|value
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|ref
operator|.
name|length
operator|=
literal|8
expr_stmt|;
block|}
comment|/**    * Copies the given int value and encodes it as 4 byte Big-Endian.    *<p>    * NOTE: this method resets the offset to 0, length to 4 and resizes the    * reference array if needed.    */
DECL|method|copyInt
specifier|public
specifier|static
name|void
name|copyInt
parameter_list|(
name|BytesRef
name|ref
parameter_list|,
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|ref
operator|.
name|bytes
operator|.
name|length
operator|<
literal|4
condition|)
block|{
name|ref
operator|.
name|bytes
operator|=
operator|new
name|byte
index|[
literal|4
index|]
expr_stmt|;
block|}
name|copyInternal
argument_list|(
name|ref
argument_list|,
name|value
argument_list|,
name|ref
operator|.
name|offset
operator|=
literal|0
argument_list|)
expr_stmt|;
name|ref
operator|.
name|length
operator|=
literal|4
expr_stmt|;
block|}
comment|/**    * Copies the given short value and encodes it as a 2 byte Big-Endian.    *<p>    * NOTE: this method resets the offset to 0, length to 2 and resizes the    * reference array if needed.    */
DECL|method|copyShort
specifier|public
specifier|static
name|void
name|copyShort
parameter_list|(
name|BytesRef
name|ref
parameter_list|,
name|short
name|value
parameter_list|)
block|{
if|if
condition|(
name|ref
operator|.
name|bytes
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|ref
operator|.
name|bytes
operator|=
operator|new
name|byte
index|[
literal|2
index|]
expr_stmt|;
block|}
name|ref
operator|.
name|bytes
index|[
name|ref
operator|.
name|offset
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|ref
operator|.
name|bytes
index|[
name|ref
operator|.
name|offset
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|ref
operator|.
name|length
operator|=
literal|2
expr_stmt|;
block|}
DECL|method|copyInternal
specifier|private
specifier|static
name|void
name|copyInternal
parameter_list|(
name|BytesRef
name|ref
parameter_list|,
name|int
name|value
parameter_list|,
name|int
name|startOffset
parameter_list|)
block|{
name|ref
operator|.
name|bytes
index|[
name|startOffset
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>
literal|24
argument_list|)
expr_stmt|;
name|ref
operator|.
name|bytes
index|[
name|startOffset
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|ref
operator|.
name|bytes
index|[
name|startOffset
operator|+
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|ref
operator|.
name|bytes
index|[
name|startOffset
operator|+
literal|3
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Converts 2 consecutive bytes from the current offset to a short. Bytes are    * interpreted as Big-Endian (most significant bit first)    *<p>    * NOTE: this method does<b>NOT</b> check the bounds of the referenced array.    */
DECL|method|asShort
specifier|public
specifier|static
name|short
name|asShort
parameter_list|(
name|BytesRef
name|b
parameter_list|)
block|{
return|return
call|(
name|short
call|)
argument_list|(
literal|0xFFFF
operator|&
operator|(
operator|(
name|b
operator|.
name|bytes
index|[
name|b
operator|.
name|offset
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|b
operator|.
name|bytes
index|[
name|b
operator|.
name|offset
operator|+
literal|1
index|]
operator|&
literal|0xFF
operator|)
argument_list|)
return|;
block|}
comment|/**    * Converts 4 consecutive bytes from the current offset to an int. Bytes are    * interpreted as Big-Endian (most significant bit first)    *<p>    * NOTE: this method does<b>NOT</b> check the bounds of the referenced array.    */
DECL|method|asInt
specifier|public
specifier|static
name|int
name|asInt
parameter_list|(
name|BytesRef
name|b
parameter_list|)
block|{
return|return
name|asIntInternal
argument_list|(
name|b
argument_list|,
name|b
operator|.
name|offset
argument_list|)
return|;
block|}
comment|/**    * Converts 8 consecutive bytes from the current offset to a long. Bytes are    * interpreted as Big-Endian (most significant bit first)    *<p>    * NOTE: this method does<b>NOT</b> check the bounds of the referenced array.    */
DECL|method|asLong
specifier|public
specifier|static
name|long
name|asLong
parameter_list|(
name|BytesRef
name|b
parameter_list|)
block|{
return|return
operator|(
operator|(
operator|(
name|long
operator|)
name|asIntInternal
argument_list|(
name|b
argument_list|,
name|b
operator|.
name|offset
argument_list|)
operator|<<
literal|32
operator|)
operator||
name|asIntInternal
argument_list|(
name|b
argument_list|,
name|b
operator|.
name|offset
operator|+
literal|4
argument_list|)
operator|&
literal|0xFFFFFFFFL
operator|)
return|;
block|}
DECL|method|asIntInternal
specifier|private
specifier|static
name|int
name|asIntInternal
parameter_list|(
name|BytesRef
name|b
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
return|return
operator|(
operator|(
name|b
operator|.
name|bytes
index|[
name|pos
operator|++
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|b
operator|.
name|bytes
index|[
name|pos
operator|++
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|b
operator|.
name|bytes
index|[
name|pos
operator|++
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|b
operator|.
name|bytes
index|[
name|pos
index|]
operator|&
literal|0xFF
operator|)
return|;
block|}
block|}
end_class
end_unit
