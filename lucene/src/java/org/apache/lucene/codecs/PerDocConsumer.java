begin_unit
begin_package
DECL|package|org.apache.lucene.codecs
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AtomicIndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MergeState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
operator|.
name|Type
import|;
end_import
begin_comment
comment|/**  * Abstract API that consumes per document values. Concrete implementations of  * this convert field values into a Codec specific format during indexing.  *<p>  * The {@link PerDocConsumer} API is accessible through the  * {@link PostingsFormat} - API providing per field consumers and producers for inverted  * data (terms, postings) as well as per-document data.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|PerDocConsumer
specifier|public
specifier|abstract
class|class
name|PerDocConsumer
implements|implements
name|Closeable
block|{
comment|/** Adds a new DocValuesField */
DECL|method|addValuesField
specifier|public
specifier|abstract
name|DocValuesConsumer
name|addValuesField
parameter_list|(
name|DocValues
operator|.
name|Type
name|type
parameter_list|,
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Consumes and merges the given {@link PerDocProducer} producer    * into this consumers format.       */
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|MergeState
name|mergeState
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DocValues
index|[]
name|docValues
init|=
operator|new
name|DocValues
index|[
name|mergeState
operator|.
name|readers
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|FieldInfo
name|fieldInfo
range|:
name|mergeState
operator|.
name|fieldInfos
control|)
block|{
name|mergeState
operator|.
name|fieldInfo
operator|=
name|fieldInfo
expr_stmt|;
comment|// set the field we are merging
if|if
condition|(
name|canMerge
argument_list|(
name|fieldInfo
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|docValues
index|[
name|i
index|]
operator|=
name|getDocValuesForMerge
argument_list|(
name|mergeState
operator|.
name|readers
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|reader
argument_list|,
name|fieldInfo
argument_list|)
expr_stmt|;
block|}
name|Type
name|docValuesType
init|=
name|getDocValuesType
argument_list|(
name|fieldInfo
argument_list|)
decl_stmt|;
assert|assert
name|docValuesType
operator|!=
literal|null
assert|;
specifier|final
name|DocValuesConsumer
name|docValuesConsumer
init|=
name|addValuesField
argument_list|(
name|docValuesType
argument_list|,
name|fieldInfo
argument_list|)
decl_stmt|;
assert|assert
name|docValuesConsumer
operator|!=
literal|null
assert|;
name|docValuesConsumer
operator|.
name|merge
argument_list|(
name|mergeState
argument_list|,
name|docValues
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Returns a {@link DocValues} instance for merging from the given reader for the given    * {@link FieldInfo}. This method is used for merging and uses    * {@link AtomicIndexReader#docValues(String)} by default.    *<p>    * To enable {@link DocValues} merging for different {@link DocValues} than    * the default override this method accordingly.    *<p>    */
DECL|method|getDocValuesForMerge
specifier|protected
name|DocValues
name|getDocValuesForMerge
parameter_list|(
name|AtomicIndexReader
name|reader
parameter_list|,
name|FieldInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|reader
operator|.
name|docValues
argument_list|(
name|info
operator|.
name|name
argument_list|)
return|;
block|}
comment|/**    * Returns<code>true</code> iff the given field can be merged ie. has {@link DocValues}.    * By default this method uses {@link FieldInfo#hasDocValues()}.    *<p>    * To enable {@link DocValues} merging for different {@link DocValues} than    * the default override this method accordingly.    *<p>    */
DECL|method|canMerge
specifier|protected
name|boolean
name|canMerge
parameter_list|(
name|FieldInfo
name|info
parameter_list|)
block|{
return|return
name|info
operator|.
name|hasDocValues
argument_list|()
return|;
block|}
comment|/**    * Returns the {@link DocValues} {@link Type} for the given {@link FieldInfo}.    * By default this method uses {@link FieldInfo#getDocValuesType()}.    *<p>    * To enable {@link DocValues} merging for different {@link DocValues} than    * the default override this method accordingly.    *<p>    */
DECL|method|getDocValuesType
specifier|protected
name|Type
name|getDocValuesType
parameter_list|(
name|FieldInfo
name|info
parameter_list|)
block|{
return|return
name|info
operator|.
name|getDocValuesType
argument_list|()
return|;
block|}
comment|/**    * Called during indexing if the indexing session is aborted due to a unrecoverable exception.    * This method should cleanup all resources.    */
DECL|method|abort
specifier|public
specifier|abstract
name|void
name|abort
parameter_list|()
function_decl|;
block|}
end_class
end_unit
