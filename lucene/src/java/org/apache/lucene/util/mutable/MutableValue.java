begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.util.mutable
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|mutable
package|;
end_package
begin_comment
comment|/** @lucene.internal */
end_comment
begin_class
DECL|class|MutableValue
specifier|public
specifier|abstract
class|class
name|MutableValue
implements|implements
name|Comparable
block|{
DECL|field|exists
specifier|public
name|boolean
name|exists
init|=
literal|true
decl_stmt|;
DECL|method|copy
specifier|public
specifier|abstract
name|void
name|copy
parameter_list|(
name|MutableValue
name|source
parameter_list|)
function_decl|;
DECL|method|duplicate
specifier|public
specifier|abstract
name|MutableValue
name|duplicate
parameter_list|()
function_decl|;
DECL|method|equalsSameType
specifier|public
specifier|abstract
name|boolean
name|equalsSameType
parameter_list|(
name|Object
name|other
parameter_list|)
function_decl|;
DECL|method|compareSameType
specifier|public
specifier|abstract
name|int
name|compareSameType
parameter_list|(
name|Object
name|other
parameter_list|)
function_decl|;
DECL|method|toObject
specifier|public
specifier|abstract
name|Object
name|toObject
parameter_list|()
function_decl|;
DECL|method|exists
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
return|return
name|exists
return|;
block|}
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
name|Class
name|c1
init|=
name|this
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|Class
name|c2
init|=
name|other
operator|.
name|getClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|c1
operator|!=
name|c2
condition|)
block|{
name|int
name|c
init|=
name|c1
operator|.
name|hashCode
argument_list|()
operator|-
name|c2
operator|.
name|hashCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|0
condition|)
block|{
name|c
operator|=
name|c1
operator|.
name|getCanonicalName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
return|return
name|compareSameType
argument_list|(
name|other
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
name|Class
name|c1
init|=
name|this
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|Class
name|c2
init|=
name|other
operator|.
name|getClass
argument_list|()
decl_stmt|;
return|return
operator|(
name|c1
operator|==
name|c2
operator|)
operator|&&
name|this
operator|.
name|equalsSameType
argument_list|(
name|other
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
specifier|abstract
name|int
name|hashCode
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|exists
argument_list|()
condition|?
name|toObject
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"(null)"
return|;
block|}
block|}
end_class
end_unit
