begin_unit
begin_comment
comment|/**  * Copyright 2005 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|NumericTokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Fieldable
import|;
end_import
begin_comment
comment|/**  * Helper class to make TrieFields compatible with ones written in solr  */
end_comment
begin_class
DECL|class|TrieFieldHelper
specifier|public
class|class
name|TrieFieldHelper
block|{
DECL|method|TrieFieldHelper
specifier|private
name|TrieFieldHelper
parameter_list|()
block|{}
DECL|class|FieldInfo
specifier|public
specifier|static
class|class
name|FieldInfo
block|{
DECL|field|precisionStep
specifier|public
name|int
name|precisionStep
init|=
literal|8
decl_stmt|;
comment|// same as solr default
DECL|field|store
specifier|public
name|boolean
name|store
init|=
literal|true
decl_stmt|;
DECL|field|index
specifier|public
name|boolean
name|index
init|=
literal|true
decl_stmt|;
DECL|field|omitNorms
specifier|public
name|boolean
name|omitNorms
init|=
literal|true
decl_stmt|;
DECL|field|omitTF
specifier|public
name|boolean
name|omitTF
init|=
literal|true
decl_stmt|;
block|}
comment|//----------------------------------------------
comment|// Create Field
comment|//----------------------------------------------
DECL|method|createField
specifier|private
specifier|static
name|Fieldable
name|createField
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
index|[]
name|arr
parameter_list|,
name|TokenStream
name|ts
parameter_list|,
name|FieldInfo
name|info
parameter_list|,
name|float
name|boost
parameter_list|)
block|{
name|Field
name|f
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|store
condition|)
block|{
name|f
operator|=
operator|new
name|Field
argument_list|(
name|name
argument_list|,
name|arr
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|index
condition|)
name|f
operator|.
name|setTokenStream
argument_list|(
name|ts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|f
operator|=
operator|new
name|Field
argument_list|(
name|name
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
comment|// term vectors aren't supported
name|f
operator|.
name|setOmitNorms
argument_list|(
name|info
operator|.
name|omitNorms
argument_list|)
expr_stmt|;
name|f
operator|.
name|setOmitTermFreqAndPositions
argument_list|(
name|info
operator|.
name|omitTF
argument_list|)
expr_stmt|;
name|f
operator|.
name|setBoost
argument_list|(
name|boost
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
DECL|method|createIntField
specifier|public
specifier|static
name|Fieldable
name|createIntField
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|value
parameter_list|,
name|FieldInfo
name|info
parameter_list|,
name|float
name|boost
parameter_list|)
block|{
name|byte
index|[]
name|arr
init|=
literal|null
decl_stmt|;
name|TokenStream
name|ts
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|store
condition|)
name|arr
operator|=
name|TrieFieldHelper
operator|.
name|toArr
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|index
condition|)
name|ts
operator|=
operator|new
name|NumericTokenStream
argument_list|(
name|info
operator|.
name|precisionStep
argument_list|)
operator|.
name|setIntValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|createField
argument_list|(
name|name
argument_list|,
name|arr
argument_list|,
name|ts
argument_list|,
name|info
argument_list|,
name|boost
argument_list|)
return|;
block|}
DECL|method|createFloatField
specifier|public
specifier|static
name|Fieldable
name|createFloatField
parameter_list|(
name|String
name|name
parameter_list|,
name|float
name|value
parameter_list|,
name|FieldInfo
name|info
parameter_list|,
name|float
name|boost
parameter_list|)
block|{
name|byte
index|[]
name|arr
init|=
literal|null
decl_stmt|;
name|TokenStream
name|ts
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|store
condition|)
name|arr
operator|=
name|TrieFieldHelper
operator|.
name|toArr
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|index
condition|)
name|ts
operator|=
operator|new
name|NumericTokenStream
argument_list|(
name|info
operator|.
name|precisionStep
argument_list|)
operator|.
name|setFloatValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|createField
argument_list|(
name|name
argument_list|,
name|arr
argument_list|,
name|ts
argument_list|,
name|info
argument_list|,
name|boost
argument_list|)
return|;
block|}
DECL|method|createLongField
specifier|public
specifier|static
name|Fieldable
name|createLongField
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|value
parameter_list|,
name|FieldInfo
name|info
parameter_list|,
name|float
name|boost
parameter_list|)
block|{
name|byte
index|[]
name|arr
init|=
literal|null
decl_stmt|;
name|TokenStream
name|ts
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|store
condition|)
name|arr
operator|=
name|TrieFieldHelper
operator|.
name|toArr
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|index
condition|)
name|ts
operator|=
operator|new
name|NumericTokenStream
argument_list|(
name|info
operator|.
name|precisionStep
argument_list|)
operator|.
name|setLongValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|createField
argument_list|(
name|name
argument_list|,
name|arr
argument_list|,
name|ts
argument_list|,
name|info
argument_list|,
name|boost
argument_list|)
return|;
block|}
DECL|method|createDoubleField
specifier|public
specifier|static
name|Fieldable
name|createDoubleField
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|value
parameter_list|,
name|FieldInfo
name|info
parameter_list|,
name|float
name|boost
parameter_list|)
block|{
name|byte
index|[]
name|arr
init|=
literal|null
decl_stmt|;
name|TokenStream
name|ts
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|store
condition|)
name|arr
operator|=
name|TrieFieldHelper
operator|.
name|toArr
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|index
condition|)
name|ts
operator|=
operator|new
name|NumericTokenStream
argument_list|(
name|info
operator|.
name|precisionStep
argument_list|)
operator|.
name|setDoubleValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|createField
argument_list|(
name|name
argument_list|,
name|arr
argument_list|,
name|ts
argument_list|,
name|info
argument_list|,
name|boost
argument_list|)
return|;
block|}
DECL|method|createDateField
specifier|public
specifier|static
name|Fieldable
name|createDateField
parameter_list|(
name|String
name|name
parameter_list|,
name|Date
name|value
parameter_list|,
name|FieldInfo
name|info
parameter_list|,
name|float
name|boost
parameter_list|)
block|{
comment|// TODO, make sure the date is within long range!
return|return
name|createLongField
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|getTime
argument_list|()
argument_list|,
name|info
argument_list|,
name|boost
argument_list|)
return|;
block|}
comment|//----------------------------------------------
comment|// number<=> byte[]
comment|//----------------------------------------------
DECL|method|toInt
specifier|public
specifier|static
name|int
name|toInt
parameter_list|(
name|byte
index|[]
name|arr
parameter_list|)
block|{
return|return
operator|(
name|arr
index|[
literal|0
index|]
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|arr
index|[
literal|1
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|arr
index|[
literal|2
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|arr
index|[
literal|3
index|]
operator|&
literal|0xff
operator|)
return|;
block|}
DECL|method|toLong
specifier|public
specifier|static
name|long
name|toLong
parameter_list|(
name|byte
index|[]
name|arr
parameter_list|)
block|{
name|int
name|high
init|=
operator|(
name|arr
index|[
literal|0
index|]
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|arr
index|[
literal|1
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|arr
index|[
literal|2
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|arr
index|[
literal|3
index|]
operator|&
literal|0xff
operator|)
decl_stmt|;
name|int
name|low
init|=
operator|(
name|arr
index|[
literal|4
index|]
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
name|arr
index|[
literal|5
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|arr
index|[
literal|6
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|arr
index|[
literal|7
index|]
operator|&
literal|0xff
operator|)
decl_stmt|;
return|return
operator|(
operator|(
operator|(
name|long
operator|)
name|high
operator|)
operator|<<
literal|32
operator|)
operator||
operator|(
name|low
operator|&
literal|0x0ffffffffL
operator|)
return|;
block|}
DECL|method|toFloat
specifier|public
specifier|static
name|float
name|toFloat
parameter_list|(
name|byte
index|[]
name|arr
parameter_list|)
block|{
return|return
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|toInt
argument_list|(
name|arr
argument_list|)
argument_list|)
return|;
block|}
DECL|method|toDouble
specifier|public
specifier|static
name|double
name|toDouble
parameter_list|(
name|byte
index|[]
name|arr
parameter_list|)
block|{
return|return
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|toLong
argument_list|(
name|arr
argument_list|)
argument_list|)
return|;
block|}
DECL|method|toArr
specifier|public
specifier|static
name|byte
index|[]
name|toArr
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|byte
index|[]
name|arr
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|arr
index|[
literal|0
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
operator|>>>
literal|24
argument_list|)
expr_stmt|;
name|arr
index|[
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
operator|>>>
literal|16
argument_list|)
expr_stmt|;
name|arr
index|[
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
operator|>>>
literal|8
argument_list|)
expr_stmt|;
name|arr
index|[
literal|3
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
name|arr
return|;
block|}
DECL|method|toArr
specifier|public
specifier|static
name|byte
index|[]
name|toArr
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|byte
index|[]
name|arr
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
name|arr
index|[
literal|0
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
operator|>>>
literal|56
argument_list|)
expr_stmt|;
name|arr
index|[
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
operator|>>>
literal|48
argument_list|)
expr_stmt|;
name|arr
index|[
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
operator|>>>
literal|40
argument_list|)
expr_stmt|;
name|arr
index|[
literal|3
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
operator|>>>
literal|32
argument_list|)
expr_stmt|;
name|arr
index|[
literal|4
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
operator|>>>
literal|24
argument_list|)
expr_stmt|;
name|arr
index|[
literal|5
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
operator|>>>
literal|16
argument_list|)
expr_stmt|;
name|arr
index|[
literal|6
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
operator|>>>
literal|8
argument_list|)
expr_stmt|;
name|arr
index|[
literal|7
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
name|arr
return|;
block|}
DECL|method|toArr
specifier|public
specifier|static
name|byte
index|[]
name|toArr
parameter_list|(
name|float
name|val
parameter_list|)
block|{
return|return
name|toArr
argument_list|(
name|Float
operator|.
name|floatToRawIntBits
argument_list|(
name|val
argument_list|)
argument_list|)
return|;
block|}
DECL|method|toArr
specifier|public
specifier|static
name|byte
index|[]
name|toArr
parameter_list|(
name|double
name|val
parameter_list|)
block|{
return|return
name|toArr
argument_list|(
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
name|val
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class
end_unit
