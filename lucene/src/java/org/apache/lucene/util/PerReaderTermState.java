begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Fields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
operator|.
name|AtomicReaderContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
operator|.
name|ReaderContext
import|;
end_import
begin_comment
comment|/**  * Maintains a {@link IndexReader} {@link TermState} view over  * {@link IndexReader} instances containing a single term. The  * {@link PerReaderTermState} doesn't track if the given {@link TermState}  * objects are valid, neither if the {@link TermState} instances refer to the  * same terms in the associated readers.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|PerReaderTermState
specifier|public
specifier|final
class|class
name|PerReaderTermState
block|{
DECL|field|topReaderContext
specifier|public
specifier|final
name|ReaderContext
name|topReaderContext
decl_stmt|;
comment|// for asserting!
DECL|field|states
specifier|private
specifier|final
name|TermState
index|[]
name|states
decl_stmt|;
DECL|field|docFreq
specifier|private
name|int
name|docFreq
decl_stmt|;
comment|/**    * Creates an empty {@link PerReaderTermState} from a {@link ReaderContext}    */
DECL|method|PerReaderTermState
specifier|public
name|PerReaderTermState
parameter_list|(
name|ReaderContext
name|context
parameter_list|)
block|{
assert|assert
name|context
operator|!=
literal|null
operator|&&
name|context
operator|.
name|isTopLevel
assert|;
name|topReaderContext
operator|=
name|context
expr_stmt|;
name|docFreq
operator|=
literal|0
expr_stmt|;
specifier|final
name|int
name|len
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|leaves
argument_list|()
operator|==
literal|null
condition|)
block|{
name|len
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|len
operator|=
name|context
operator|.
name|leaves
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
name|states
operator|=
operator|new
name|TermState
index|[
name|len
index|]
expr_stmt|;
block|}
comment|/**    * Creates a {@link PerReaderTermState} with an initial {@link TermState},    * {@link IndexReader} pair.    */
DECL|method|PerReaderTermState
specifier|public
name|PerReaderTermState
parameter_list|(
name|ReaderContext
name|context
parameter_list|,
name|TermState
name|state
parameter_list|,
name|int
name|ord
parameter_list|,
name|int
name|docFreq
parameter_list|)
block|{
name|this
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|state
argument_list|,
name|ord
argument_list|,
name|docFreq
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a {@link PerReaderTermState} from a top-level {@link ReaderContext} and the    * given {@link Term}. This method will lookup the given term in all context's leaf readers     * and register each of the readers containing the term in the returned {@link PerReaderTermState}    * using the leaf reader's ordinal.    *<p>    * Note: the given context must be a top-level context.    */
DECL|method|build
specifier|public
specifier|static
name|PerReaderTermState
name|build
parameter_list|(
name|ReaderContext
name|context
parameter_list|,
name|Term
name|term
parameter_list|,
name|boolean
name|cache
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|context
operator|!=
literal|null
operator|&&
name|context
operator|.
name|isTopLevel
assert|;
specifier|final
name|String
name|field
init|=
name|term
operator|.
name|field
argument_list|()
decl_stmt|;
specifier|final
name|BytesRef
name|bytes
init|=
name|term
operator|.
name|bytes
argument_list|()
decl_stmt|;
specifier|final
name|PerReaderTermState
name|perReaderTermState
init|=
operator|new
name|PerReaderTermState
argument_list|(
name|context
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReaderContext
index|[]
name|leaves
init|=
name|ReaderUtil
operator|.
name|leaves
argument_list|(
name|context
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|leaves
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Fields
name|fields
init|=
name|leaves
index|[
name|i
index|]
operator|.
name|reader
operator|.
name|fields
argument_list|()
decl_stmt|;
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Terms
name|terms
init|=
name|fields
operator|.
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
specifier|final
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|getThreadTermsEnum
argument_list|()
decl_stmt|;
comment|// thread-private don't share!
if|if
condition|(
name|termsEnum
operator|.
name|seekExact
argument_list|(
name|bytes
argument_list|,
name|cache
argument_list|)
condition|)
block|{
specifier|final
name|TermState
name|termState
init|=
name|termsEnum
operator|.
name|termState
argument_list|()
decl_stmt|;
name|perReaderTermState
operator|.
name|register
argument_list|(
name|termState
argument_list|,
name|leaves
index|[
name|i
index|]
operator|.
name|ord
argument_list|,
name|termsEnum
operator|.
name|docFreq
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|perReaderTermState
return|;
block|}
comment|/**    * Clears the {@link PerReaderTermState} internal state and removes all    * registered {@link TermState}s    */
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|docFreq
operator|=
literal|0
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|states
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Registers and associates a {@link TermState} with an leaf ordinal. The leaf ordinal    * should be derived from a {@link ReaderContext}'s leaf ord.    */
DECL|method|register
specifier|public
name|void
name|register
parameter_list|(
name|TermState
name|state
parameter_list|,
specifier|final
name|int
name|ord
parameter_list|,
specifier|final
name|int
name|docFreq
parameter_list|)
block|{
assert|assert
name|state
operator|!=
literal|null
operator|:
literal|"state must not be null"
assert|;
assert|assert
name|ord
operator|>=
literal|0
operator|&&
name|ord
operator|<
name|states
operator|.
name|length
assert|;
assert|assert
name|states
index|[
name|ord
index|]
operator|==
literal|null
operator|:
literal|"state for ord: "
operator|+
name|ord
operator|+
literal|" already registered"
assert|;
name|this
operator|.
name|docFreq
operator|+=
name|docFreq
expr_stmt|;
name|states
index|[
name|ord
index|]
operator|=
name|state
expr_stmt|;
block|}
comment|/**    * Returns the {@link TermState} for an leaf ordinal or<code>null</code> if no    * {@link TermState} for the ordinal was registered.    *     * @param ord    *          the readers leaf ordinal to get the {@link TermState} for.    * @return the {@link TermState} for the given readers ord or<code>null</code> if no    *         {@link TermState} for the reader was registered    */
DECL|method|get
specifier|public
name|TermState
name|get
parameter_list|(
name|int
name|ord
parameter_list|)
block|{
assert|assert
name|ord
operator|>=
literal|0
operator|&&
name|ord
operator|<
name|states
operator|.
name|length
assert|;
return|return
name|states
index|[
name|ord
index|]
return|;
block|}
comment|/**    *  Returns the accumulated document frequency of all {@link TermState}    *         instances passed to {@link #register(TermState, int, int)}.    * @return the accumulated document frequency of all {@link TermState}    *         instances passed to {@link #register(TermState, int, int)}.    */
DECL|method|docFreq
specifier|public
name|int
name|docFreq
parameter_list|()
block|{
return|return
name|docFreq
return|;
block|}
block|}
end_class
end_unit
