begin_unit
begin_comment
comment|/*  * dk.brics.automaton  *   * Copyright (c) 2001-2009 Anders Moeller  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment
begin_package
DECL|package|org.apache.lucene.util.automaton
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_comment
comment|/**  * Comparator for state {@link Transition}s that orders unicode char range  * transitions in lexicographic order.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|TransitionComparator
class|class
name|TransitionComparator
implements|implements
name|Comparator
argument_list|<
name|Transition
argument_list|>
implements|,
name|Serializable
block|{
DECL|field|to_first
name|boolean
name|to_first
decl_stmt|;
DECL|method|TransitionComparator
name|TransitionComparator
parameter_list|(
name|boolean
name|to_first
parameter_list|)
block|{
name|this
operator|.
name|to_first
operator|=
name|to_first
expr_stmt|;
block|}
comment|/**    * Compares by (min, reverse max, to) or (to, min, reverse max).    */
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|Transition
name|t1
parameter_list|,
name|Transition
name|t2
parameter_list|)
block|{
if|if
condition|(
name|to_first
condition|)
block|{
if|if
condition|(
name|t1
operator|.
name|to
operator|!=
name|t2
operator|.
name|to
condition|)
block|{
if|if
condition|(
name|t1
operator|.
name|to
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
elseif|else
if|if
condition|(
name|t2
operator|.
name|to
operator|==
literal|null
condition|)
return|return
literal|1
return|;
elseif|else
if|if
condition|(
name|t1
operator|.
name|to
operator|.
name|number
operator|<
name|t2
operator|.
name|to
operator|.
name|number
condition|)
return|return
operator|-
literal|1
return|;
elseif|else
if|if
condition|(
name|t1
operator|.
name|to
operator|.
name|number
operator|>
name|t2
operator|.
name|to
operator|.
name|number
condition|)
return|return
literal|1
return|;
block|}
block|}
if|if
condition|(
name|t1
operator|.
name|min
operator|<
name|t2
operator|.
name|min
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|t1
operator|.
name|min
operator|>
name|t2
operator|.
name|min
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|t1
operator|.
name|max
operator|>
name|t2
operator|.
name|max
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|t1
operator|.
name|max
operator|<
name|t2
operator|.
name|max
condition|)
return|return
literal|1
return|;
if|if
condition|(
operator|!
name|to_first
condition|)
block|{
if|if
condition|(
name|t1
operator|.
name|to
operator|!=
name|t2
operator|.
name|to
condition|)
block|{
if|if
condition|(
name|t1
operator|.
name|to
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
elseif|else
if|if
condition|(
name|t2
operator|.
name|to
operator|==
literal|null
condition|)
return|return
literal|1
return|;
elseif|else
if|if
condition|(
name|t1
operator|.
name|to
operator|.
name|number
operator|<
name|t2
operator|.
name|to
operator|.
name|number
condition|)
return|return
operator|-
literal|1
return|;
elseif|else
if|if
condition|(
name|t1
operator|.
name|to
operator|.
name|number
operator|>
name|t2
operator|.
name|to
operator|.
name|number
condition|)
return|return
literal|1
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
block|}
end_class
end_unit
