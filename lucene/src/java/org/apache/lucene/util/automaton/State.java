begin_unit
begin_comment
comment|/*  * dk.brics.automaton  *   * Copyright (c) 2001-2009 Anders Moeller  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment
begin_package
DECL|package|org.apache.lucene.util.automaton
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_comment
comment|/**  *<tt>Automaton</tt> state.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|State
specifier|public
class|class
name|State
implements|implements
name|Serializable
implements|,
name|Comparable
argument_list|<
name|State
argument_list|>
block|{
DECL|field|accept
name|boolean
name|accept
decl_stmt|;
DECL|field|transitionsArray
specifier|public
name|Transition
index|[]
name|transitionsArray
decl_stmt|;
DECL|field|numTransitions
specifier|public
name|int
name|numTransitions
decl_stmt|;
DECL|field|number
name|int
name|number
decl_stmt|;
DECL|field|id
name|int
name|id
decl_stmt|;
DECL|field|next_id
specifier|static
name|int
name|next_id
decl_stmt|;
comment|/**    * Constructs a new state. Initially, the new state is a reject state.    */
DECL|method|State
specifier|public
name|State
parameter_list|()
block|{
name|resetTransitions
argument_list|()
expr_stmt|;
name|id
operator|=
name|next_id
operator|++
expr_stmt|;
block|}
comment|/**    * Resets transition set.    */
DECL|method|resetTransitions
specifier|final
name|void
name|resetTransitions
parameter_list|()
block|{
name|transitionsArray
operator|=
operator|new
name|Transition
index|[
literal|0
index|]
expr_stmt|;
name|numTransitions
operator|=
literal|0
expr_stmt|;
block|}
DECL|class|TransitionsIterable
specifier|private
class|class
name|TransitionsIterable
implements|implements
name|Iterable
argument_list|<
name|Transition
argument_list|>
block|{
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|Transition
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|Transition
argument_list|>
argument_list|()
block|{
name|int
name|upto
decl_stmt|;
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|upto
operator|<
name|numTransitions
return|;
block|}
specifier|public
name|Transition
name|next
parameter_list|()
block|{
return|return
name|transitionsArray
index|[
name|upto
operator|++
index|]
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
comment|/**    * Returns the set of outgoing transitions. Subsequent changes are reflected    * in the automaton.    *     * @return transition set    */
DECL|method|getTransitions
specifier|public
name|Iterable
argument_list|<
name|Transition
argument_list|>
name|getTransitions
parameter_list|()
block|{
return|return
operator|new
name|TransitionsIterable
argument_list|()
return|;
block|}
DECL|method|numTransitions
specifier|public
name|int
name|numTransitions
parameter_list|()
block|{
return|return
name|numTransitions
return|;
block|}
DECL|method|setTransitions
specifier|public
name|void
name|setTransitions
parameter_list|(
name|Transition
index|[]
name|transitions
parameter_list|)
block|{
name|this
operator|.
name|numTransitions
operator|=
name|transitions
operator|.
name|length
expr_stmt|;
name|this
operator|.
name|transitionsArray
operator|=
name|transitions
expr_stmt|;
block|}
comment|/**    * Adds an outgoing transition.    *     * @param t transition    */
DECL|method|addTransition
specifier|public
name|void
name|addTransition
parameter_list|(
name|Transition
name|t
parameter_list|)
block|{
if|if
condition|(
name|numTransitions
operator|==
name|transitionsArray
operator|.
name|length
condition|)
block|{
specifier|final
name|Transition
index|[]
name|newArray
init|=
operator|new
name|Transition
index|[
name|ArrayUtil
operator|.
name|oversize
argument_list|(
literal|1
operator|+
name|numTransitions
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_REF
argument_list|)
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|transitionsArray
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|numTransitions
argument_list|)
expr_stmt|;
name|transitionsArray
operator|=
name|newArray
expr_stmt|;
block|}
name|transitionsArray
index|[
name|numTransitions
operator|++
index|]
operator|=
name|t
expr_stmt|;
block|}
comment|/**    * Sets acceptance for this state.    *     * @param accept if true, this state is an accept state    */
DECL|method|setAccept
specifier|public
name|void
name|setAccept
parameter_list|(
name|boolean
name|accept
parameter_list|)
block|{
name|this
operator|.
name|accept
operator|=
name|accept
expr_stmt|;
block|}
comment|/**    * Returns acceptance status.    *     * @return true is this is an accept state    */
DECL|method|isAccept
specifier|public
name|boolean
name|isAccept
parameter_list|()
block|{
return|return
name|accept
return|;
block|}
comment|/**    * Performs lookup in transitions, assuming determinism.    *     * @param c codepoint to look up    * @return destination state, null if no matching outgoing transition    * @see #step(int, Collection)    */
DECL|method|step
specifier|public
name|State
name|step
parameter_list|(
name|int
name|c
parameter_list|)
block|{
assert|assert
name|c
operator|>=
literal|0
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTransitions
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Transition
name|t
init|=
name|transitionsArray
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|min
operator|<=
name|c
operator|&&
name|c
operator|<=
name|t
operator|.
name|max
condition|)
return|return
name|t
operator|.
name|to
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Performs lookup in transitions, allowing nondeterminism.    *     * @param c codepoint to look up    * @param dest collection where destination states are stored    * @see #step(int)    */
DECL|method|step
specifier|public
name|void
name|step
parameter_list|(
name|int
name|c
parameter_list|,
name|Collection
argument_list|<
name|State
argument_list|>
name|dest
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTransitions
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Transition
name|t
init|=
name|transitionsArray
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|min
operator|<=
name|c
operator|&&
name|c
operator|<=
name|t
operator|.
name|max
condition|)
name|dest
operator|.
name|add
argument_list|(
name|t
operator|.
name|to
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addEpsilon
name|void
name|addEpsilon
parameter_list|(
name|State
name|to
parameter_list|)
block|{
if|if
condition|(
name|to
operator|.
name|accept
condition|)
name|accept
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Transition
name|t
range|:
name|to
operator|.
name|getTransitions
argument_list|()
control|)
name|addTransition
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
comment|/** Downsizes transitionArray to numTransitions */
DECL|method|trimTransitionsArray
specifier|public
name|void
name|trimTransitionsArray
parameter_list|()
block|{
if|if
condition|(
name|numTransitions
operator|<
name|transitionsArray
operator|.
name|length
condition|)
block|{
specifier|final
name|Transition
index|[]
name|newArray
init|=
operator|new
name|Transition
index|[
name|numTransitions
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|transitionsArray
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|numTransitions
argument_list|)
expr_stmt|;
name|transitionsArray
operator|=
name|newArray
expr_stmt|;
block|}
block|}
comment|/**    * Reduces this state. A state is "reduced" by combining overlapping    * and adjacent edge intervals with same destination.    */
DECL|method|reduce
specifier|public
name|void
name|reduce
parameter_list|()
block|{
if|if
condition|(
name|numTransitions
operator|<=
literal|1
condition|)
block|{
return|return;
block|}
name|sortTransitions
argument_list|(
name|Transition
operator|.
name|CompareByDestThenMinMax
argument_list|)
expr_stmt|;
name|State
name|p
init|=
literal|null
decl_stmt|;
name|int
name|min
init|=
operator|-
literal|1
decl_stmt|,
name|max
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|upto
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTransitions
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Transition
name|t
init|=
name|transitionsArray
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|p
operator|==
name|t
operator|.
name|to
condition|)
block|{
if|if
condition|(
name|t
operator|.
name|min
operator|<=
name|max
operator|+
literal|1
condition|)
block|{
if|if
condition|(
name|t
operator|.
name|max
operator|>
name|max
condition|)
name|max
operator|=
name|t
operator|.
name|max
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|transitionsArray
index|[
name|upto
operator|++
index|]
operator|=
operator|new
name|Transition
argument_list|(
name|min
argument_list|,
name|max
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
name|min
operator|=
name|t
operator|.
name|min
expr_stmt|;
name|max
operator|=
name|t
operator|.
name|max
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|transitionsArray
index|[
name|upto
operator|++
index|]
operator|=
operator|new
name|Transition
argument_list|(
name|min
argument_list|,
name|max
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
name|p
operator|=
name|t
operator|.
name|to
expr_stmt|;
name|min
operator|=
name|t
operator|.
name|min
expr_stmt|;
name|max
operator|=
name|t
operator|.
name|max
expr_stmt|;
block|}
block|}
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|transitionsArray
index|[
name|upto
operator|++
index|]
operator|=
operator|new
name|Transition
argument_list|(
name|min
argument_list|,
name|max
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
name|numTransitions
operator|=
name|upto
expr_stmt|;
block|}
comment|/**    * Returns sorted list of outgoing transitions.    *     * @param to_first if true, order by (to, min, reverse max); otherwise (min,    *          reverse max, to)    * @return transition list    */
comment|/** Sorts transitions array in-place. */
DECL|method|sortTransitions
specifier|public
name|void
name|sortTransitions
parameter_list|(
name|Comparator
argument_list|<
name|Transition
argument_list|>
name|comparator
parameter_list|)
block|{
comment|// mergesort seems to perform better on already sorted arrays:
if|if
condition|(
name|numTransitions
operator|>
literal|1
condition|)
name|ArrayUtil
operator|.
name|mergeSort
argument_list|(
name|transitionsArray
argument_list|,
literal|0
argument_list|,
name|numTransitions
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return this state's number.     *<p>    * Expert: Will be useless unless {@link Automaton#getNumberedStates}    * has been called first to number the states.    * @return the number    */
DECL|method|getNumber
specifier|public
name|int
name|getNumber
parameter_list|()
block|{
return|return
name|number
return|;
block|}
comment|/**    * Returns string describing this state. Normally invoked via    * {@link Automaton#toString()}.    */
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"state "
argument_list|)
operator|.
name|append
argument_list|(
name|number
argument_list|)
expr_stmt|;
if|if
condition|(
name|accept
condition|)
name|b
operator|.
name|append
argument_list|(
literal|" [accept]"
argument_list|)
expr_stmt|;
else|else
name|b
operator|.
name|append
argument_list|(
literal|" [reject]"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|":\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Transition
name|t
range|:
name|getTransitions
argument_list|()
control|)
name|b
operator|.
name|append
argument_list|(
literal|"  "
argument_list|)
operator|.
name|append
argument_list|(
name|t
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Compares this object with the specified object for order. States are    * ordered by the time of construction.    */
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|State
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|id
operator|-
name|id
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|id
return|;
block|}
block|}
end_class
end_unit
