begin_unit
begin_comment
comment|/*  * dk.brics.automaton  *   * Copyright (c) 2001-2009 Anders Moeller  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment
begin_package
DECL|package|org.apache.lucene.util.automaton
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_comment
comment|/**  * Finite-state automaton with regular expression operations.  *<p>  * Class invariants:  *<ul>  *<li>An automaton is either represented explicitly (with {@link State} and  * {@link Transition} objects) or with a singleton string (see  * {@link #getSingleton()} and {@link #expandSingleton()}) in case the automaton  * is known to accept exactly one string. (Implicitly, all states and  * transitions of an automaton are reachable from its initial state.)  *<li>Automata are always reduced (see {@link #reduce()}) and have no  * transitions to dead states (see {@link #removeDeadTransitions()}).  *<li>If an automaton is nondeterministic, then {@link #isDeterministic()}  * returns false (but the converse is not required).  *<li>Automata provided as input to operations are generally assumed to be  * disjoint.  *</ul>  *<p>  * If the states or transitions are manipulated manually, the  * {@link #restoreInvariant()} and {@link #setDeterministic(boolean)} methods  * should be used afterwards to restore representation invariants that are  * assumed by the built-in automata operations.  *   *<p>  *<p>  * Note: This class has internal mutable state and is not thread safe. It is   * the caller's responsibility to ensure any necessary synchronization if you  * wish to use the same Automaton from multiple threads. In general it is instead  * recommended to use a {@link RunAutomaton} for multithreaded matching: it is immutable,   * thread safe, and much faster.    *</p>  * @lucene.experimental  */
end_comment
begin_class
DECL|class|Automaton
specifier|public
class|class
name|Automaton
implements|implements
name|Serializable
implements|,
name|Cloneable
block|{
comment|/**    * Minimize using Hopcroft's O(n log n) algorithm. This is regarded as one of    * the most generally efficient algorithms that exist.    *     * @see #setMinimization(int)    */
DECL|field|MINIMIZE_HOPCROFT
specifier|public
specifier|static
specifier|final
name|int
name|MINIMIZE_HOPCROFT
init|=
literal|2
decl_stmt|;
comment|/** Selects minimization algorithm (default:<code>MINIMIZE_HOPCROFT</code>). */
DECL|field|minimization
specifier|static
name|int
name|minimization
init|=
name|MINIMIZE_HOPCROFT
decl_stmt|;
comment|/** Initial state of this automaton. */
DECL|field|initial
name|State
name|initial
decl_stmt|;
comment|/**    * If true, then this automaton is definitely deterministic (i.e., there are    * no choices for any run, but a run may crash).    */
DECL|field|deterministic
name|boolean
name|deterministic
decl_stmt|;
comment|/** Extra data associated with this automaton. */
DECL|field|info
specifier|transient
name|Object
name|info
decl_stmt|;
comment|/**    * Hash code. Recomputed by {@link MinimizationOperations#minimize(Automaton)}    */
comment|//int hash_code;
comment|/** Singleton string. Null if not applicable. */
DECL|field|singleton
name|String
name|singleton
decl_stmt|;
comment|/** Minimize always flag. */
DECL|field|minimize_always
specifier|static
name|boolean
name|minimize_always
init|=
literal|false
decl_stmt|;
comment|/**    * Selects whether operations may modify the input automata (default:    *<code>false</code>).    */
DECL|field|allow_mutation
specifier|static
name|boolean
name|allow_mutation
init|=
literal|false
decl_stmt|;
comment|/**    * Constructs a new automaton that accepts the empty language. Using this    * constructor, automata can be constructed manually from {@link State} and    * {@link Transition} objects.    *     * @see State    * @see Transition    */
DECL|method|Automaton
specifier|public
name|Automaton
parameter_list|(
name|State
name|initial
parameter_list|)
block|{
name|this
operator|.
name|initial
operator|=
name|initial
expr_stmt|;
name|deterministic
operator|=
literal|true
expr_stmt|;
name|singleton
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|Automaton
specifier|public
name|Automaton
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|State
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Selects minimization algorithm (default:<code>MINIMIZE_HOPCROFT</code>).    *     * @param algorithm minimization algorithm    */
DECL|method|setMinimization
specifier|static
specifier|public
name|void
name|setMinimization
parameter_list|(
name|int
name|algorithm
parameter_list|)
block|{
name|minimization
operator|=
name|algorithm
expr_stmt|;
block|}
comment|/**    * Sets or resets minimize always flag. If this flag is set, then    * {@link MinimizationOperations#minimize(Automaton)} will automatically be    * invoked after all operations that otherwise may produce non-minimal    * automata. By default, the flag is not set.    *     * @param flag if true, the flag is set    */
DECL|method|setMinimizeAlways
specifier|static
specifier|public
name|void
name|setMinimizeAlways
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|minimize_always
operator|=
name|flag
expr_stmt|;
block|}
comment|/**    * Sets or resets allow mutate flag. If this flag is set, then all automata    * operations may modify automata given as input; otherwise, operations will    * always leave input automata languages unmodified. By default, the flag is    * not set.    *     * @param flag if true, the flag is set    * @return previous value of the flag    */
DECL|method|setAllowMutate
specifier|static
specifier|public
name|boolean
name|setAllowMutate
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|boolean
name|b
init|=
name|allow_mutation
decl_stmt|;
name|allow_mutation
operator|=
name|flag
expr_stmt|;
return|return
name|b
return|;
block|}
comment|/**    * Returns the state of the allow mutate flag. If this flag is set, then all    * automata operations may modify automata given as input; otherwise,    * operations will always leave input automata languages unmodified. By    * default, the flag is not set.    *     * @return current value of the flag    */
DECL|method|getAllowMutate
specifier|static
name|boolean
name|getAllowMutate
parameter_list|()
block|{
return|return
name|allow_mutation
return|;
block|}
DECL|method|checkMinimizeAlways
name|void
name|checkMinimizeAlways
parameter_list|()
block|{
if|if
condition|(
name|minimize_always
condition|)
name|MinimizationOperations
operator|.
name|minimize
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|isSingleton
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
name|singleton
operator|!=
literal|null
return|;
block|}
comment|/**    * Returns the singleton string for this automaton. An automaton that accepts    * exactly one string<i>may</i> be represented in singleton mode. In that    * case, this method may be used to obtain the string.    *     * @return string, null if this automaton is not in singleton mode.    */
DECL|method|getSingleton
specifier|public
name|String
name|getSingleton
parameter_list|()
block|{
return|return
name|singleton
return|;
block|}
comment|/**    * Sets initial state.    *     * @param s state    */
comment|/*   public void setInitialState(State s) {     initial = s;     singleton = null;   }   */
comment|/**    * Gets initial state.    *     * @return state    */
DECL|method|getInitialState
specifier|public
name|State
name|getInitialState
parameter_list|()
block|{
name|expandSingleton
argument_list|()
expr_stmt|;
return|return
name|initial
return|;
block|}
comment|/**    * Returns deterministic flag for this automaton.    *     * @return true if the automaton is definitely deterministic, false if the    *         automaton may be nondeterministic    */
DECL|method|isDeterministic
specifier|public
name|boolean
name|isDeterministic
parameter_list|()
block|{
return|return
name|deterministic
return|;
block|}
comment|/**    * Sets deterministic flag for this automaton. This method should (only) be    * used if automata are constructed manually.    *     * @param deterministic true if the automaton is definitely deterministic,    *          false if the automaton may be nondeterministic    */
DECL|method|setDeterministic
specifier|public
name|void
name|setDeterministic
parameter_list|(
name|boolean
name|deterministic
parameter_list|)
block|{
name|this
operator|.
name|deterministic
operator|=
name|deterministic
expr_stmt|;
block|}
comment|/**    * Associates extra information with this automaton.    *     * @param info extra information    */
DECL|method|setInfo
specifier|public
name|void
name|setInfo
parameter_list|(
name|Object
name|info
parameter_list|)
block|{
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
block|}
comment|/**    * Returns extra information associated with this automaton.    *     * @return extra information    * @see #setInfo(Object)    */
DECL|method|getInfo
specifier|public
name|Object
name|getInfo
parameter_list|()
block|{
return|return
name|info
return|;
block|}
comment|// cached
DECL|field|numberedStates
specifier|private
name|State
index|[]
name|numberedStates
decl_stmt|;
DECL|method|getNumberedStates
specifier|public
name|State
index|[]
name|getNumberedStates
parameter_list|()
block|{
if|if
condition|(
name|numberedStates
operator|==
literal|null
condition|)
block|{
name|expandSingleton
argument_list|()
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|State
argument_list|>
name|visited
init|=
operator|new
name|HashSet
argument_list|<
name|State
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|LinkedList
argument_list|<
name|State
argument_list|>
name|worklist
init|=
operator|new
name|LinkedList
argument_list|<
name|State
argument_list|>
argument_list|()
decl_stmt|;
name|numberedStates
operator|=
operator|new
name|State
index|[
literal|4
index|]
expr_stmt|;
name|int
name|upto
init|=
literal|0
decl_stmt|;
name|worklist
operator|.
name|add
argument_list|(
name|initial
argument_list|)
expr_stmt|;
name|visited
operator|.
name|add
argument_list|(
name|initial
argument_list|)
expr_stmt|;
name|initial
operator|.
name|number
operator|=
name|upto
expr_stmt|;
name|numberedStates
index|[
name|upto
index|]
operator|=
name|initial
expr_stmt|;
name|upto
operator|++
expr_stmt|;
while|while
condition|(
name|worklist
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|State
name|s
init|=
name|worklist
operator|.
name|removeFirst
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|numTransitions
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Transition
name|t
init|=
name|s
operator|.
name|transitionsArray
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|visited
operator|.
name|contains
argument_list|(
name|t
operator|.
name|to
argument_list|)
condition|)
block|{
name|visited
operator|.
name|add
argument_list|(
name|t
operator|.
name|to
argument_list|)
expr_stmt|;
name|worklist
operator|.
name|add
argument_list|(
name|t
operator|.
name|to
argument_list|)
expr_stmt|;
name|t
operator|.
name|to
operator|.
name|number
operator|=
name|upto
expr_stmt|;
if|if
condition|(
name|upto
operator|==
name|numberedStates
operator|.
name|length
condition|)
block|{
specifier|final
name|State
index|[]
name|newArray
init|=
operator|new
name|State
index|[
name|ArrayUtil
operator|.
name|oversize
argument_list|(
literal|1
operator|+
name|upto
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_REF
argument_list|)
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|numberedStates
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|upto
argument_list|)
expr_stmt|;
name|numberedStates
operator|=
name|newArray
expr_stmt|;
block|}
name|numberedStates
index|[
name|upto
index|]
operator|=
name|t
operator|.
name|to
expr_stmt|;
name|upto
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|numberedStates
operator|.
name|length
operator|!=
name|upto
condition|)
block|{
specifier|final
name|State
index|[]
name|newArray
init|=
operator|new
name|State
index|[
name|upto
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|numberedStates
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|upto
argument_list|)
expr_stmt|;
name|numberedStates
operator|=
name|newArray
expr_stmt|;
block|}
block|}
return|return
name|numberedStates
return|;
block|}
DECL|method|setNumberedStates
specifier|public
name|void
name|setNumberedStates
parameter_list|(
name|State
index|[]
name|states
parameter_list|)
block|{
name|setNumberedStates
argument_list|(
name|states
argument_list|,
name|states
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|setNumberedStates
specifier|public
name|void
name|setNumberedStates
parameter_list|(
name|State
index|[]
name|states
parameter_list|,
name|int
name|count
parameter_list|)
block|{
assert|assert
name|count
operator|<=
name|states
operator|.
name|length
assert|;
comment|// TODO: maybe we can eventually allow for oversizing here...
if|if
condition|(
name|count
operator|<
name|states
operator|.
name|length
condition|)
block|{
specifier|final
name|State
index|[]
name|newArray
init|=
operator|new
name|State
index|[
name|count
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|states
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|numberedStates
operator|=
name|newArray
expr_stmt|;
block|}
else|else
block|{
name|numberedStates
operator|=
name|states
expr_stmt|;
block|}
block|}
DECL|method|clearNumberedStates
specifier|public
name|void
name|clearNumberedStates
parameter_list|()
block|{
name|numberedStates
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Returns the set of reachable accept states.    *     * @return set of {@link State} objects    */
DECL|method|getAcceptStates
specifier|public
name|Set
argument_list|<
name|State
argument_list|>
name|getAcceptStates
parameter_list|()
block|{
name|expandSingleton
argument_list|()
expr_stmt|;
name|HashSet
argument_list|<
name|State
argument_list|>
name|accepts
init|=
operator|new
name|HashSet
argument_list|<
name|State
argument_list|>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|State
argument_list|>
name|visited
init|=
operator|new
name|HashSet
argument_list|<
name|State
argument_list|>
argument_list|()
decl_stmt|;
name|LinkedList
argument_list|<
name|State
argument_list|>
name|worklist
init|=
operator|new
name|LinkedList
argument_list|<
name|State
argument_list|>
argument_list|()
decl_stmt|;
name|worklist
operator|.
name|add
argument_list|(
name|initial
argument_list|)
expr_stmt|;
name|visited
operator|.
name|add
argument_list|(
name|initial
argument_list|)
expr_stmt|;
while|while
condition|(
name|worklist
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|State
name|s
init|=
name|worklist
operator|.
name|removeFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|accept
condition|)
name|accepts
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
for|for
control|(
name|Transition
name|t
range|:
name|s
operator|.
name|getTransitions
argument_list|()
control|)
if|if
condition|(
operator|!
name|visited
operator|.
name|contains
argument_list|(
name|t
operator|.
name|to
argument_list|)
condition|)
block|{
name|visited
operator|.
name|add
argument_list|(
name|t
operator|.
name|to
argument_list|)
expr_stmt|;
name|worklist
operator|.
name|add
argument_list|(
name|t
operator|.
name|to
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|accepts
return|;
block|}
comment|/**    * Adds transitions to explicit crash state to ensure that transition function    * is total.    */
DECL|method|totalize
name|void
name|totalize
parameter_list|()
block|{
name|State
name|s
init|=
operator|new
name|State
argument_list|()
decl_stmt|;
name|s
operator|.
name|addTransition
argument_list|(
operator|new
name|Transition
argument_list|(
name|Character
operator|.
name|MIN_CODE_POINT
argument_list|,
name|Character
operator|.
name|MAX_CODE_POINT
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|State
name|p
range|:
name|getNumberedStates
argument_list|()
control|)
block|{
name|int
name|maxi
init|=
name|Character
operator|.
name|MIN_CODE_POINT
decl_stmt|;
name|p
operator|.
name|sortTransitions
argument_list|(
name|Transition
operator|.
name|CompareByMinMaxThenDest
argument_list|)
expr_stmt|;
for|for
control|(
name|Transition
name|t
range|:
name|p
operator|.
name|getTransitions
argument_list|()
control|)
block|{
if|if
condition|(
name|t
operator|.
name|min
operator|>
name|maxi
condition|)
name|p
operator|.
name|addTransition
argument_list|(
operator|new
name|Transition
argument_list|(
name|maxi
argument_list|,
operator|(
name|t
operator|.
name|min
operator|-
literal|1
operator|)
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|max
operator|+
literal|1
operator|>
name|maxi
condition|)
name|maxi
operator|=
name|t
operator|.
name|max
operator|+
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|maxi
operator|<=
name|Character
operator|.
name|MAX_CODE_POINT
condition|)
name|p
operator|.
name|addTransition
argument_list|(
operator|new
name|Transition
argument_list|(
name|maxi
argument_list|,
name|Character
operator|.
name|MAX_CODE_POINT
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|clearNumberedStates
argument_list|()
expr_stmt|;
block|}
comment|/**    * Restores representation invariant. This method must be invoked before any    * built-in automata operation is performed if automaton states or transitions    * are manipulated manually.    *     * @see #setDeterministic(boolean)    */
DECL|method|restoreInvariant
specifier|public
name|void
name|restoreInvariant
parameter_list|()
block|{
name|removeDeadTransitions
argument_list|()
expr_stmt|;
block|}
comment|/**    * Reduces this automaton. An automaton is "reduced" by combining overlapping    * and adjacent edge intervals with same destination.    */
DECL|method|reduce
specifier|public
name|void
name|reduce
parameter_list|()
block|{
specifier|final
name|State
index|[]
name|states
init|=
name|getNumberedStates
argument_list|()
decl_stmt|;
if|if
condition|(
name|isSingleton
argument_list|()
condition|)
return|return;
for|for
control|(
name|State
name|s
range|:
name|states
control|)
name|s
operator|.
name|reduce
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns sorted array of all interval start points.    */
DECL|method|getStartPoints
name|int
index|[]
name|getStartPoints
parameter_list|()
block|{
specifier|final
name|State
index|[]
name|states
init|=
name|getNumberedStates
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|pointset
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|pointset
operator|.
name|add
argument_list|(
name|Character
operator|.
name|MIN_CODE_POINT
argument_list|)
expr_stmt|;
for|for
control|(
name|State
name|s
range|:
name|states
control|)
block|{
for|for
control|(
name|Transition
name|t
range|:
name|s
operator|.
name|getTransitions
argument_list|()
control|)
block|{
name|pointset
operator|.
name|add
argument_list|(
name|t
operator|.
name|min
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|max
operator|<
name|Character
operator|.
name|MAX_CODE_POINT
condition|)
name|pointset
operator|.
name|add
argument_list|(
operator|(
name|t
operator|.
name|max
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
name|int
index|[]
name|points
init|=
operator|new
name|int
index|[
name|pointset
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|m
range|:
name|pointset
control|)
name|points
index|[
name|n
operator|++
index|]
operator|=
name|m
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|points
argument_list|)
expr_stmt|;
return|return
name|points
return|;
block|}
comment|/**    * Returns the set of live states. A state is "live" if an accept state is    * reachable from it.    *     * @return set of {@link State} objects    */
DECL|method|getLiveStates
specifier|private
name|State
index|[]
name|getLiveStates
parameter_list|()
block|{
specifier|final
name|State
index|[]
name|states
init|=
name|getNumberedStates
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|State
argument_list|>
name|live
init|=
operator|new
name|HashSet
argument_list|<
name|State
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|State
name|q
range|:
name|states
control|)
block|{
if|if
condition|(
name|q
operator|.
name|isAccept
argument_list|()
condition|)
block|{
name|live
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
comment|// map<state, set<state>>
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Set
argument_list|<
name|State
argument_list|>
name|map
index|[]
init|=
operator|new
name|Set
index|[
name|states
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|map
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|map
index|[
name|i
index|]
operator|=
operator|new
name|HashSet
argument_list|<
name|State
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|State
name|s
range|:
name|states
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|numTransitions
condition|;
name|i
operator|++
control|)
block|{
name|map
index|[
name|s
operator|.
name|transitionsArray
index|[
name|i
index|]
operator|.
name|to
operator|.
name|number
index|]
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|LinkedList
argument_list|<
name|State
argument_list|>
name|worklist
init|=
operator|new
name|LinkedList
argument_list|<
name|State
argument_list|>
argument_list|(
name|live
argument_list|)
decl_stmt|;
while|while
condition|(
name|worklist
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|State
name|s
init|=
name|worklist
operator|.
name|removeFirst
argument_list|()
decl_stmt|;
for|for
control|(
name|State
name|p
range|:
name|map
index|[
name|s
operator|.
name|number
index|]
control|)
if|if
condition|(
operator|!
name|live
operator|.
name|contains
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|live
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|worklist
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|live
operator|.
name|toArray
argument_list|(
operator|new
name|State
index|[
name|live
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**    * Removes transitions to dead states and calls {@link #reduce()}.    * (A state is "dead" if no accept state is    * reachable from it.)    */
DECL|method|removeDeadTransitions
specifier|public
name|void
name|removeDeadTransitions
parameter_list|()
block|{
specifier|final
name|State
index|[]
name|states
init|=
name|getNumberedStates
argument_list|()
decl_stmt|;
comment|//clearHashCode();
if|if
condition|(
name|isSingleton
argument_list|()
condition|)
return|return;
name|State
index|[]
name|live
init|=
name|getLiveStates
argument_list|()
decl_stmt|;
name|BitSet
name|liveSet
init|=
operator|new
name|BitSet
argument_list|(
name|states
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|State
name|s
range|:
name|live
control|)
name|liveSet
operator|.
name|set
argument_list|(
name|s
operator|.
name|number
argument_list|)
expr_stmt|;
for|for
control|(
name|State
name|s
range|:
name|states
control|)
block|{
comment|// filter out transitions to dead states:
name|int
name|upto
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|numTransitions
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Transition
name|t
init|=
name|s
operator|.
name|transitionsArray
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|liveSet
operator|.
name|get
argument_list|(
name|t
operator|.
name|to
operator|.
name|number
argument_list|)
condition|)
block|{
name|s
operator|.
name|transitionsArray
index|[
name|upto
operator|++
index|]
operator|=
name|s
operator|.
name|transitionsArray
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
name|s
operator|.
name|numTransitions
operator|=
name|upto
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|live
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|live
index|[
name|i
index|]
operator|.
name|number
operator|=
name|i
expr_stmt|;
block|}
if|if
condition|(
name|live
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|setNumberedStates
argument_list|(
name|live
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// sneaky corner case -- if machine accepts no strings
name|clearNumberedStates
argument_list|()
expr_stmt|;
block|}
name|reduce
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns a sorted array of transitions for each state (and sets state    * numbers).    */
DECL|method|getSortedTransitions
specifier|public
name|Transition
index|[]
index|[]
name|getSortedTransitions
parameter_list|()
block|{
specifier|final
name|State
index|[]
name|states
init|=
name|getNumberedStates
argument_list|()
decl_stmt|;
name|Transition
index|[]
index|[]
name|transitions
init|=
operator|new
name|Transition
index|[
name|states
operator|.
name|length
index|]
index|[]
decl_stmt|;
for|for
control|(
name|State
name|s
range|:
name|states
control|)
block|{
name|s
operator|.
name|sortTransitions
argument_list|(
name|Transition
operator|.
name|CompareByMinMaxThenDest
argument_list|)
expr_stmt|;
name|s
operator|.
name|trimTransitionsArray
argument_list|()
expr_stmt|;
name|transitions
index|[
name|s
operator|.
name|number
index|]
operator|=
name|s
operator|.
name|transitionsArray
expr_stmt|;
assert|assert
name|s
operator|.
name|transitionsArray
operator|!=
literal|null
assert|;
block|}
return|return
name|transitions
return|;
block|}
comment|/**    * Expands singleton representation to normal representation. Does nothing if    * not in singleton representation.    */
DECL|method|expandSingleton
specifier|public
name|void
name|expandSingleton
parameter_list|()
block|{
if|if
condition|(
name|isSingleton
argument_list|()
condition|)
block|{
name|State
name|p
init|=
operator|new
name|State
argument_list|()
decl_stmt|;
name|initial
operator|=
name|p
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|cp
init|=
literal|0
init|;
name|i
operator|<
name|singleton
operator|.
name|length
argument_list|()
condition|;
name|i
operator|+=
name|Character
operator|.
name|charCount
argument_list|(
name|cp
argument_list|)
control|)
block|{
name|State
name|q
init|=
operator|new
name|State
argument_list|()
decl_stmt|;
name|p
operator|.
name|addTransition
argument_list|(
operator|new
name|Transition
argument_list|(
name|cp
operator|=
name|singleton
operator|.
name|codePointAt
argument_list|(
name|i
argument_list|)
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|=
name|q
expr_stmt|;
block|}
name|p
operator|.
name|accept
operator|=
literal|true
expr_stmt|;
name|deterministic
operator|=
literal|true
expr_stmt|;
name|singleton
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Returns the number of states in this automaton.    */
DECL|method|getNumberOfStates
specifier|public
name|int
name|getNumberOfStates
parameter_list|()
block|{
if|if
condition|(
name|isSingleton
argument_list|()
condition|)
return|return
name|singleton
operator|.
name|codePointCount
argument_list|(
literal|0
argument_list|,
name|singleton
operator|.
name|length
argument_list|()
argument_list|)
operator|+
literal|1
return|;
return|return
name|getNumberedStates
argument_list|()
operator|.
name|length
return|;
block|}
comment|/**    * Returns the number of transitions in this automaton. This number is counted    * as the total number of edges, where one edge may be a character interval.    */
DECL|method|getNumberOfTransitions
specifier|public
name|int
name|getNumberOfTransitions
parameter_list|()
block|{
if|if
condition|(
name|isSingleton
argument_list|()
condition|)
return|return
name|singleton
operator|.
name|codePointCount
argument_list|(
literal|0
argument_list|,
name|singleton
operator|.
name|length
argument_list|()
argument_list|)
return|;
name|int
name|c
init|=
literal|0
decl_stmt|;
for|for
control|(
name|State
name|s
range|:
name|getNumberedStates
argument_list|()
control|)
name|c
operator|+=
name|s
operator|.
name|numTransitions
argument_list|()
expr_stmt|;
return|return
name|c
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"use BasicOperations.sameLanguage instead"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**    * Must be invoked when the stored hash code may no longer be valid.    */
comment|/*   void clearHashCode() {     hash_code = 0;   }   */
comment|/**    * Returns a string representation of this automaton.    */
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|isSingleton
argument_list|()
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"singleton: "
argument_list|)
expr_stmt|;
name|int
name|length
init|=
name|singleton
operator|.
name|codePointCount
argument_list|(
literal|0
argument_list|,
name|singleton
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|codepoints
index|[]
init|=
operator|new
name|int
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|j
init|=
literal|0
init|,
name|cp
init|=
literal|0
init|;
name|i
operator|<
name|singleton
operator|.
name|length
argument_list|()
condition|;
name|i
operator|+=
name|Character
operator|.
name|charCount
argument_list|(
name|cp
argument_list|)
control|)
name|codepoints
index|[
name|j
operator|++
index|]
operator|=
name|cp
operator|=
name|singleton
operator|.
name|codePointAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|c
range|:
name|codepoints
control|)
name|Transition
operator|.
name|appendCharString
argument_list|(
name|c
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|State
index|[]
name|states
init|=
name|getNumberedStates
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"initial state: "
argument_list|)
operator|.
name|append
argument_list|(
name|initial
operator|.
name|number
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|State
name|s
range|:
name|states
control|)
name|b
operator|.
name|append
argument_list|(
name|s
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Returns<a href="http://www.research.att.com/sw/tools/graphviz/"    * target="_top">Graphviz Dot</a> representation of this automaton.    */
DECL|method|toDot
specifier|public
name|String
name|toDot
parameter_list|()
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"digraph Automaton {\n"
argument_list|)
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  rankdir = LR;\n"
argument_list|)
expr_stmt|;
name|State
index|[]
name|states
init|=
name|getNumberedStates
argument_list|()
decl_stmt|;
for|for
control|(
name|State
name|s
range|:
name|states
control|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"  "
argument_list|)
operator|.
name|append
argument_list|(
name|s
operator|.
name|number
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|accept
condition|)
name|b
operator|.
name|append
argument_list|(
literal|" [shape=doublecircle,label=\"\"];\n"
argument_list|)
expr_stmt|;
else|else
name|b
operator|.
name|append
argument_list|(
literal|" [shape=circle,label=\"\"];\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|==
name|initial
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"  initial [shape=plaintext,label=\"\"];\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  initial -> "
argument_list|)
operator|.
name|append
argument_list|(
name|s
operator|.
name|number
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Transition
name|t
range|:
name|s
operator|.
name|getTransitions
argument_list|()
control|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"  "
argument_list|)
operator|.
name|append
argument_list|(
name|s
operator|.
name|number
argument_list|)
expr_stmt|;
name|t
operator|.
name|appendDot
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|b
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Returns a clone of this automaton, expands if singleton.    */
DECL|method|cloneExpanded
name|Automaton
name|cloneExpanded
parameter_list|()
block|{
name|Automaton
name|a
init|=
name|clone
argument_list|()
decl_stmt|;
name|a
operator|.
name|expandSingleton
argument_list|()
expr_stmt|;
return|return
name|a
return|;
block|}
comment|/**    * Returns a clone of this automaton unless<code>allow_mutation</code> is    * set, expands if singleton.    */
DECL|method|cloneExpandedIfRequired
name|Automaton
name|cloneExpandedIfRequired
parameter_list|()
block|{
if|if
condition|(
name|allow_mutation
condition|)
block|{
name|expandSingleton
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
else|else
return|return
name|cloneExpanded
argument_list|()
return|;
block|}
comment|/**    * Returns a clone of this automaton.    */
annotation|@
name|Override
DECL|method|clone
specifier|public
name|Automaton
name|clone
parameter_list|()
block|{
try|try
block|{
name|Automaton
name|a
init|=
operator|(
name|Automaton
operator|)
name|super
operator|.
name|clone
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isSingleton
argument_list|()
condition|)
block|{
name|HashMap
argument_list|<
name|State
argument_list|,
name|State
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|State
argument_list|,
name|State
argument_list|>
argument_list|()
decl_stmt|;
name|State
index|[]
name|states
init|=
name|getNumberedStates
argument_list|()
decl_stmt|;
for|for
control|(
name|State
name|s
range|:
name|states
control|)
name|m
operator|.
name|put
argument_list|(
name|s
argument_list|,
operator|new
name|State
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|State
name|s
range|:
name|states
control|)
block|{
name|State
name|p
init|=
name|m
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|p
operator|.
name|accept
operator|=
name|s
operator|.
name|accept
expr_stmt|;
if|if
condition|(
name|s
operator|==
name|initial
condition|)
name|a
operator|.
name|initial
operator|=
name|p
expr_stmt|;
for|for
control|(
name|Transition
name|t
range|:
name|s
operator|.
name|getTransitions
argument_list|()
control|)
name|p
operator|.
name|addTransition
argument_list|(
operator|new
name|Transition
argument_list|(
name|t
operator|.
name|min
argument_list|,
name|t
operator|.
name|max
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|t
operator|.
name|to
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|a
operator|.
name|clearNumberedStates
argument_list|()
expr_stmt|;
return|return
name|a
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Returns a clone of this automaton, or this automaton itself if    *<code>allow_mutation</code> flag is set.    */
DECL|method|cloneIfRequired
name|Automaton
name|cloneIfRequired
parameter_list|()
block|{
if|if
condition|(
name|allow_mutation
condition|)
return|return
name|this
return|;
else|else
return|return
name|clone
argument_list|()
return|;
block|}
comment|/**    * See {@link BasicOperations#concatenate(Automaton, Automaton)}.    */
DECL|method|concatenate
specifier|public
name|Automaton
name|concatenate
parameter_list|(
name|Automaton
name|a
parameter_list|)
block|{
return|return
name|BasicOperations
operator|.
name|concatenate
argument_list|(
name|this
argument_list|,
name|a
argument_list|)
return|;
block|}
comment|/**    * See {@link BasicOperations#concatenate(List)}.    */
DECL|method|concatenate
specifier|static
specifier|public
name|Automaton
name|concatenate
parameter_list|(
name|List
argument_list|<
name|Automaton
argument_list|>
name|l
parameter_list|)
block|{
return|return
name|BasicOperations
operator|.
name|concatenate
argument_list|(
name|l
argument_list|)
return|;
block|}
comment|/**    * See {@link BasicOperations#optional(Automaton)}.    */
DECL|method|optional
specifier|public
name|Automaton
name|optional
parameter_list|()
block|{
return|return
name|BasicOperations
operator|.
name|optional
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * See {@link BasicOperations#repeat(Automaton)}.    */
DECL|method|repeat
specifier|public
name|Automaton
name|repeat
parameter_list|()
block|{
return|return
name|BasicOperations
operator|.
name|repeat
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * See {@link BasicOperations#repeat(Automaton, int)}.    */
DECL|method|repeat
specifier|public
name|Automaton
name|repeat
parameter_list|(
name|int
name|min
parameter_list|)
block|{
return|return
name|BasicOperations
operator|.
name|repeat
argument_list|(
name|this
argument_list|,
name|min
argument_list|)
return|;
block|}
comment|/**    * See {@link BasicOperations#repeat(Automaton, int, int)}.    */
DECL|method|repeat
specifier|public
name|Automaton
name|repeat
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
return|return
name|BasicOperations
operator|.
name|repeat
argument_list|(
name|this
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
return|;
block|}
comment|/**    * See {@link BasicOperations#complement(Automaton)}.    */
DECL|method|complement
specifier|public
name|Automaton
name|complement
parameter_list|()
block|{
return|return
name|BasicOperations
operator|.
name|complement
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * See {@link BasicOperations#minus(Automaton, Automaton)}.    */
DECL|method|minus
specifier|public
name|Automaton
name|minus
parameter_list|(
name|Automaton
name|a
parameter_list|)
block|{
return|return
name|BasicOperations
operator|.
name|minus
argument_list|(
name|this
argument_list|,
name|a
argument_list|)
return|;
block|}
comment|/**    * See {@link BasicOperations#intersection(Automaton, Automaton)}.    */
DECL|method|intersection
specifier|public
name|Automaton
name|intersection
parameter_list|(
name|Automaton
name|a
parameter_list|)
block|{
return|return
name|BasicOperations
operator|.
name|intersection
argument_list|(
name|this
argument_list|,
name|a
argument_list|)
return|;
block|}
comment|/**    * See {@link BasicOperations#subsetOf(Automaton, Automaton)}.    */
DECL|method|subsetOf
specifier|public
name|boolean
name|subsetOf
parameter_list|(
name|Automaton
name|a
parameter_list|)
block|{
return|return
name|BasicOperations
operator|.
name|subsetOf
argument_list|(
name|this
argument_list|,
name|a
argument_list|)
return|;
block|}
comment|/**    * See {@link BasicOperations#union(Automaton, Automaton)}.    */
DECL|method|union
specifier|public
name|Automaton
name|union
parameter_list|(
name|Automaton
name|a
parameter_list|)
block|{
return|return
name|BasicOperations
operator|.
name|union
argument_list|(
name|this
argument_list|,
name|a
argument_list|)
return|;
block|}
comment|/**    * See {@link BasicOperations#union(Collection)}.    */
DECL|method|union
specifier|static
specifier|public
name|Automaton
name|union
parameter_list|(
name|Collection
argument_list|<
name|Automaton
argument_list|>
name|l
parameter_list|)
block|{
return|return
name|BasicOperations
operator|.
name|union
argument_list|(
name|l
argument_list|)
return|;
block|}
comment|/**    * See {@link BasicOperations#determinize(Automaton)}.    */
DECL|method|determinize
specifier|public
name|void
name|determinize
parameter_list|()
block|{
name|BasicOperations
operator|.
name|determinize
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**    * See {@link BasicOperations#isEmptyString(Automaton)}.    */
DECL|method|isEmptyString
specifier|public
name|boolean
name|isEmptyString
parameter_list|()
block|{
return|return
name|BasicOperations
operator|.
name|isEmptyString
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * See {@link MinimizationOperations#minimize(Automaton)}. Returns the    * automaton being given as argument.    */
DECL|method|minimize
specifier|public
specifier|static
name|Automaton
name|minimize
parameter_list|(
name|Automaton
name|a
parameter_list|)
block|{
name|MinimizationOperations
operator|.
name|minimize
argument_list|(
name|a
argument_list|)
expr_stmt|;
return|return
name|a
return|;
block|}
block|}
end_class
end_unit
