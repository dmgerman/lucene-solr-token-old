begin_unit
begin_comment
comment|/*  * dk.brics.automaton  *   * Copyright (c) 2001-2009 Anders Moeller  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment
begin_package
DECL|package|org.apache.lucene.util.automaton
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_comment
comment|/**  * Special automata operations.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|SpecialOperations
specifier|final
specifier|public
class|class
name|SpecialOperations
block|{
DECL|method|SpecialOperations
specifier|private
name|SpecialOperations
parameter_list|()
block|{}
comment|/**    * Finds the largest entry whose value is less than or equal to c, or 0 if    * there is no such entry.    */
DECL|method|findIndex
specifier|static
name|int
name|findIndex
parameter_list|(
name|char
name|c
parameter_list|,
name|char
index|[]
name|points
parameter_list|)
block|{
name|int
name|a
init|=
literal|0
decl_stmt|;
name|int
name|b
init|=
name|points
operator|.
name|length
decl_stmt|;
while|while
condition|(
name|b
operator|-
name|a
operator|>
literal|1
condition|)
block|{
name|int
name|d
init|=
operator|(
name|a
operator|+
name|b
operator|)
operator|>>>
literal|1
decl_stmt|;
if|if
condition|(
name|points
index|[
name|d
index|]
operator|>
name|c
condition|)
name|b
operator|=
name|d
expr_stmt|;
elseif|else
if|if
condition|(
name|points
index|[
name|d
index|]
operator|<
name|c
condition|)
name|a
operator|=
name|d
expr_stmt|;
else|else
return|return
name|d
return|;
block|}
return|return
name|a
return|;
block|}
comment|/**    * Returns true if the language of this automaton is finite.    */
DECL|method|isFinite
specifier|public
specifier|static
name|boolean
name|isFinite
parameter_list|(
name|Automaton
name|a
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|isSingleton
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
name|isFinite
argument_list|(
name|a
operator|.
name|initial
argument_list|,
operator|new
name|HashSet
argument_list|<
name|State
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Checks whether there is a loop containing s. (This is sufficient since    * there are never transitions to dead states.)    */
DECL|method|isFinite
specifier|private
specifier|static
name|boolean
name|isFinite
parameter_list|(
name|State
name|s
parameter_list|,
name|HashSet
argument_list|<
name|State
argument_list|>
name|path
parameter_list|)
block|{
name|path
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
for|for
control|(
name|Transition
name|t
range|:
name|s
operator|.
name|transitions
control|)
if|if
condition|(
name|path
operator|.
name|contains
argument_list|(
name|t
operator|.
name|to
argument_list|)
operator|||
operator|!
name|isFinite
argument_list|(
name|t
operator|.
name|to
argument_list|,
name|path
argument_list|)
condition|)
return|return
literal|false
return|;
name|path
operator|.
name|remove
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Returns the longest string that is a prefix of all accepted strings and    * visits each state at most once.    *     * @return common prefix    */
DECL|method|getCommonPrefix
specifier|public
specifier|static
name|String
name|getCommonPrefix
parameter_list|(
name|Automaton
name|a
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|isSingleton
argument_list|()
condition|)
return|return
name|a
operator|.
name|singleton
return|;
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|State
argument_list|>
name|visited
init|=
operator|new
name|HashSet
argument_list|<
name|State
argument_list|>
argument_list|()
decl_stmt|;
name|State
name|s
init|=
name|a
operator|.
name|initial
decl_stmt|;
name|boolean
name|done
decl_stmt|;
do|do
block|{
name|done
operator|=
literal|true
expr_stmt|;
name|visited
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|accept
operator|&&
name|s
operator|.
name|transitions
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Transition
name|t
init|=
name|s
operator|.
name|transitions
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|min
operator|==
name|t
operator|.
name|max
operator|&&
operator|!
name|visited
operator|.
name|contains
argument_list|(
name|t
operator|.
name|to
argument_list|)
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
name|t
operator|.
name|min
argument_list|)
expr_stmt|;
name|s
operator|=
name|t
operator|.
name|to
expr_stmt|;
name|done
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
operator|!
name|done
condition|)
do|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Returns the longest string that is a suffix of all accepted strings and    * visits each state at most once.    *     * @return common suffix    */
DECL|method|getCommonSuffix
specifier|public
specifier|static
name|String
name|getCommonSuffix
parameter_list|(
name|Automaton
name|a
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|isSingleton
argument_list|()
condition|)
comment|// if singleton, the suffix is the string itself.
return|return
name|a
operator|.
name|singleton
return|;
comment|// reverse the language of the automaton, then reverse its common prefix.
name|Automaton
name|r
init|=
name|a
operator|.
name|clone
argument_list|()
decl_stmt|;
name|reverse
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|r
operator|.
name|determinize
argument_list|()
expr_stmt|;
return|return
name|reverseUnicode3
argument_list|(
name|SpecialOperations
operator|.
name|getCommonPrefix
argument_list|(
name|r
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Reverses the language of the given (non-singleton) automaton while returning    * the set of new initial states.    */
DECL|method|reverse
specifier|private
specifier|static
name|Set
argument_list|<
name|State
argument_list|>
name|reverse
parameter_list|(
name|Automaton
name|a
parameter_list|)
block|{
name|a
operator|.
name|expandSingleton
argument_list|()
expr_stmt|;
comment|// reverse all edges
name|HashMap
argument_list|<
name|State
argument_list|,
name|HashSet
argument_list|<
name|Transition
argument_list|>
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|State
argument_list|,
name|HashSet
argument_list|<
name|Transition
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|State
argument_list|>
name|states
init|=
name|a
operator|.
name|getStates
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|State
argument_list|>
name|accept
init|=
name|a
operator|.
name|getAcceptStates
argument_list|()
decl_stmt|;
for|for
control|(
name|State
name|r
range|:
name|states
control|)
block|{
name|m
operator|.
name|put
argument_list|(
name|r
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Transition
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|accept
operator|=
literal|false
expr_stmt|;
block|}
for|for
control|(
name|State
name|r
range|:
name|states
control|)
for|for
control|(
name|Transition
name|t
range|:
name|r
operator|.
name|getTransitions
argument_list|()
control|)
name|m
operator|.
name|get
argument_list|(
name|t
operator|.
name|to
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|Transition
argument_list|(
name|t
operator|.
name|min
argument_list|,
name|t
operator|.
name|max
argument_list|,
name|r
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|State
name|r
range|:
name|states
control|)
name|r
operator|.
name|transitions
operator|=
name|m
operator|.
name|get
argument_list|(
name|r
argument_list|)
expr_stmt|;
comment|// make new initial+final states
name|a
operator|.
name|initial
operator|.
name|accept
operator|=
literal|true
expr_stmt|;
name|a
operator|.
name|initial
operator|=
operator|new
name|State
argument_list|()
expr_stmt|;
for|for
control|(
name|State
name|r
range|:
name|accept
control|)
name|a
operator|.
name|initial
operator|.
name|addEpsilon
argument_list|(
name|r
argument_list|)
expr_stmt|;
comment|// ensures that all initial states are reachable
name|a
operator|.
name|deterministic
operator|=
literal|false
expr_stmt|;
return|return
name|accept
return|;
block|}
comment|/**    * Intentionally use a unicode 3 reverse.    * This is because we are only going to reverse it again...    */
DECL|method|reverseUnicode3
specifier|private
specifier|static
name|String
name|reverseUnicode3
parameter_list|(
specifier|final
name|String
name|input
parameter_list|)
block|{
name|char
index|[]
name|charInput
init|=
name|input
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|reverseUnicode3
argument_list|(
name|charInput
argument_list|,
literal|0
argument_list|,
name|charInput
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|charInput
argument_list|)
return|;
block|}
comment|/**    * Intentionally use a unicode 3 reverse.    * This is because it is only used by getCommonSuffix(),    * which will reverse the entire FSM using code unit reversal,    * so we must then reverse its common prefix back using the     * same code unit reversal.    */
DECL|method|reverseUnicode3
specifier|private
specifier|static
name|void
name|reverseUnicode3
parameter_list|(
name|char
index|[]
name|buffer
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|len
operator|<=
literal|1
condition|)
return|return;
name|int
name|num
init|=
name|len
operator|>>
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
operator|(
name|start
operator|+
name|num
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|buffer
index|[
name|i
index|]
decl_stmt|;
name|buffer
index|[
name|i
index|]
operator|=
name|buffer
index|[
name|start
operator|*
literal|2
operator|+
name|len
operator|-
name|i
operator|-
literal|1
index|]
expr_stmt|;
name|buffer
index|[
name|start
operator|*
literal|2
operator|+
name|len
operator|-
name|i
operator|-
literal|1
index|]
operator|=
name|c
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
