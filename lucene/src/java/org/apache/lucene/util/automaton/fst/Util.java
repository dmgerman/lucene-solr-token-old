begin_unit
begin_package
DECL|package|org.apache.lucene.util.automaton.fst
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|fst
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import
begin_comment
comment|/** Static helper methods */
end_comment
begin_class
DECL|class|Util
specifier|public
specifier|final
class|class
name|Util
block|{
DECL|method|Util
specifier|private
name|Util
parameter_list|()
block|{   }
comment|/** Looks up the output for this input, or null if the    *  input is not accepted. FST must be    *  INPUT_TYPE.BYTE4. */
DECL|method|get
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|get
parameter_list|(
name|FST
argument_list|<
name|T
argument_list|>
name|fst
parameter_list|,
name|IntsRef
name|input
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fst
operator|.
name|inputType
operator|==
name|FST
operator|.
name|INPUT_TYPE
operator|.
name|BYTE4
assert|;
comment|// TODO: would be nice not to alloc this on every lookup
specifier|final
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
name|arc
init|=
name|fst
operator|.
name|getFirstArc
argument_list|(
operator|new
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|// Accumulate output as we go
specifier|final
name|T
name|NO_OUTPUT
init|=
name|fst
operator|.
name|outputs
operator|.
name|getNoOutput
argument_list|()
decl_stmt|;
name|T
name|output
init|=
name|NO_OUTPUT
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|input
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fst
operator|.
name|findTargetArc
argument_list|(
name|input
operator|.
name|ints
index|[
name|input
operator|.
name|offset
operator|+
name|i
index|]
argument_list|,
name|arc
argument_list|,
name|arc
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|arc
operator|.
name|output
operator|!=
name|NO_OUTPUT
condition|)
block|{
name|output
operator|=
name|fst
operator|.
name|outputs
operator|.
name|add
argument_list|(
name|output
argument_list|,
name|arc
operator|.
name|output
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fst
operator|.
name|findTargetArc
argument_list|(
name|FST
operator|.
name|END_LABEL
argument_list|,
name|arc
argument_list|,
name|arc
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|arc
operator|.
name|output
operator|!=
name|NO_OUTPUT
condition|)
block|{
return|return
name|fst
operator|.
name|outputs
operator|.
name|add
argument_list|(
name|output
argument_list|,
name|arc
operator|.
name|output
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|output
return|;
block|}
block|}
comment|/** Logically casts input to UTF32 ints then looks up the output    *  or null if the input is not accepted.  FST must be    *  INPUT_TYPE.BYTE4.  */
DECL|method|get
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|get
parameter_list|(
name|FST
argument_list|<
name|T
argument_list|>
name|fst
parameter_list|,
name|char
index|[]
name|input
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fst
operator|.
name|inputType
operator|==
name|FST
operator|.
name|INPUT_TYPE
operator|.
name|BYTE4
assert|;
comment|// TODO: would be nice not to alloc this on every lookup
specifier|final
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
name|arc
init|=
name|fst
operator|.
name|getFirstArc
argument_list|(
operator|new
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|charIdx
init|=
name|offset
decl_stmt|;
specifier|final
name|int
name|charLimit
init|=
name|offset
operator|+
name|length
decl_stmt|;
comment|// Accumulate output as we go
specifier|final
name|T
name|NO_OUTPUT
init|=
name|fst
operator|.
name|outputs
operator|.
name|getNoOutput
argument_list|()
decl_stmt|;
name|T
name|output
init|=
name|NO_OUTPUT
decl_stmt|;
while|while
condition|(
name|charIdx
operator|<
name|charLimit
condition|)
block|{
specifier|final
name|int
name|utf32
init|=
name|Character
operator|.
name|codePointAt
argument_list|(
name|input
argument_list|,
name|charIdx
argument_list|)
decl_stmt|;
name|charIdx
operator|+=
name|Character
operator|.
name|charCount
argument_list|(
name|utf32
argument_list|)
expr_stmt|;
if|if
condition|(
name|fst
operator|.
name|findTargetArc
argument_list|(
name|utf32
argument_list|,
name|arc
argument_list|,
name|arc
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|arc
operator|.
name|output
operator|!=
name|NO_OUTPUT
condition|)
block|{
name|output
operator|=
name|fst
operator|.
name|outputs
operator|.
name|add
argument_list|(
name|output
argument_list|,
name|arc
operator|.
name|output
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fst
operator|.
name|findTargetArc
argument_list|(
name|FST
operator|.
name|END_LABEL
argument_list|,
name|arc
argument_list|,
name|arc
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|arc
operator|.
name|output
operator|!=
name|NO_OUTPUT
condition|)
block|{
return|return
name|fst
operator|.
name|outputs
operator|.
name|add
argument_list|(
name|output
argument_list|,
name|arc
operator|.
name|output
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|output
return|;
block|}
block|}
comment|/** Logically casts input to UTF32 ints then looks up the output    *  or null if the input is not accepted.  FST must be    *  INPUT_TYPE.BYTE4.  */
DECL|method|get
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|get
parameter_list|(
name|FST
argument_list|<
name|T
argument_list|>
name|fst
parameter_list|,
name|CharSequence
name|input
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fst
operator|.
name|inputType
operator|==
name|FST
operator|.
name|INPUT_TYPE
operator|.
name|BYTE4
assert|;
comment|// TODO: would be nice not to alloc this on every lookup
specifier|final
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
name|arc
init|=
name|fst
operator|.
name|getFirstArc
argument_list|(
operator|new
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|charIdx
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|charLimit
init|=
name|input
operator|.
name|length
argument_list|()
decl_stmt|;
comment|// Accumulate output as we go
specifier|final
name|T
name|NO_OUTPUT
init|=
name|fst
operator|.
name|outputs
operator|.
name|getNoOutput
argument_list|()
decl_stmt|;
name|T
name|output
init|=
name|NO_OUTPUT
decl_stmt|;
while|while
condition|(
name|charIdx
operator|<
name|charLimit
condition|)
block|{
specifier|final
name|int
name|utf32
init|=
name|Character
operator|.
name|codePointAt
argument_list|(
name|input
argument_list|,
name|charIdx
argument_list|)
decl_stmt|;
name|charIdx
operator|+=
name|Character
operator|.
name|charCount
argument_list|(
name|utf32
argument_list|)
expr_stmt|;
if|if
condition|(
name|fst
operator|.
name|findTargetArc
argument_list|(
name|utf32
argument_list|,
name|arc
argument_list|,
name|arc
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|arc
operator|.
name|output
operator|!=
name|NO_OUTPUT
condition|)
block|{
name|output
operator|=
name|fst
operator|.
name|outputs
operator|.
name|add
argument_list|(
name|output
argument_list|,
name|arc
operator|.
name|output
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fst
operator|.
name|findTargetArc
argument_list|(
name|FST
operator|.
name|END_LABEL
argument_list|,
name|arc
argument_list|,
name|arc
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|arc
operator|.
name|output
operator|!=
name|NO_OUTPUT
condition|)
block|{
return|return
name|fst
operator|.
name|outputs
operator|.
name|add
argument_list|(
name|output
argument_list|,
name|arc
operator|.
name|output
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|output
return|;
block|}
block|}
comment|/** Looks up the output for this input, or null if the    *  input is not accepted */
DECL|method|get
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|get
parameter_list|(
name|FST
argument_list|<
name|T
argument_list|>
name|fst
parameter_list|,
name|BytesRef
name|input
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fst
operator|.
name|inputType
operator|==
name|FST
operator|.
name|INPUT_TYPE
operator|.
name|BYTE1
assert|;
comment|// TODO: would be nice not to alloc this on every lookup
specifier|final
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
name|arc
init|=
name|fst
operator|.
name|getFirstArc
argument_list|(
operator|new
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|// Accumulate output as we go
specifier|final
name|T
name|NO_OUTPUT
init|=
name|fst
operator|.
name|outputs
operator|.
name|getNoOutput
argument_list|()
decl_stmt|;
name|T
name|output
init|=
name|NO_OUTPUT
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|input
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fst
operator|.
name|findTargetArc
argument_list|(
name|input
operator|.
name|bytes
index|[
name|i
operator|+
name|input
operator|.
name|offset
index|]
operator|&
literal|0xFF
argument_list|,
name|arc
argument_list|,
name|arc
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|arc
operator|.
name|output
operator|!=
name|NO_OUTPUT
condition|)
block|{
name|output
operator|=
name|fst
operator|.
name|outputs
operator|.
name|add
argument_list|(
name|output
argument_list|,
name|arc
operator|.
name|output
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fst
operator|.
name|findTargetArc
argument_list|(
name|FST
operator|.
name|END_LABEL
argument_list|,
name|arc
argument_list|,
name|arc
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|arc
operator|.
name|output
operator|!=
name|NO_OUTPUT
condition|)
block|{
return|return
name|fst
operator|.
name|outputs
operator|.
name|add
argument_list|(
name|output
argument_list|,
name|arc
operator|.
name|output
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|output
return|;
block|}
block|}
comment|// NOTE: this consumes alot of RAM!
comment|// arcs w/ NEXT opto are in blue
comment|/*     eg:       PrintStream ps = new PrintStream("out.dot");       fst.toDot(ps);       ps.close();       System.out.println("SAVED out.dot");            then dot -Tpng out.dot> /x/tmp/out.png   */
DECL|method|toDot
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|toDot
parameter_list|(
name|FST
argument_list|<
name|T
argument_list|>
name|fst
parameter_list|,
name|PrintStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
name|startArc
init|=
name|fst
operator|.
name|getFirstArc
argument_list|(
operator|new
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|>
name|queue
init|=
operator|new
name|ArrayList
argument_list|<
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|startArc
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|seen
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|seen
operator|.
name|add
argument_list|(
name|startArc
operator|.
name|target
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"digraph FST {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"  rankdir = LR;"
argument_list|)
expr_stmt|;
comment|//out.println("  " + startNode + " [shape=circle label=" + startNode + "];");
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|startArc
operator|.
name|target
operator|+
literal|" [label=\"\" shape=circle];"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"  initial [shape=point color=white label=\"\"];"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"  initial -> "
operator|+
name|startArc
operator|.
name|target
argument_list|)
expr_stmt|;
specifier|final
name|T
name|NO_OUTPUT
init|=
name|fst
operator|.
name|outputs
operator|.
name|getNoOutput
argument_list|()
decl_stmt|;
while|while
condition|(
name|queue
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
name|arc
init|=
name|queue
operator|.
name|get
argument_list|(
name|queue
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|queue
operator|.
name|remove
argument_list|(
name|queue
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//System.out.println("dot cycle target=" + arc.target);
if|if
condition|(
name|fst
operator|.
name|targetHasArcs
argument_list|(
name|arc
argument_list|)
condition|)
block|{
comment|// scan all arcs
specifier|final
name|int
name|node
init|=
name|arc
operator|.
name|target
decl_stmt|;
name|fst
operator|.
name|readFirstTargetArc
argument_list|(
name|arc
argument_list|,
name|arc
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|//System.out.println("  cycle label=" + arc.label + " (" + (char) arc.label + ") target=" + arc.target);
if|if
condition|(
operator|!
name|seen
operator|.
name|contains
argument_list|(
name|arc
operator|.
name|target
argument_list|)
condition|)
block|{
specifier|final
name|String
name|shape
decl_stmt|;
if|if
condition|(
name|arc
operator|.
name|target
operator|==
operator|-
literal|1
condition|)
block|{
name|shape
operator|=
literal|"doublecircle"
expr_stmt|;
block|}
else|else
block|{
name|shape
operator|=
literal|"circle"
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|arc
operator|.
name|target
operator|+
literal|" [shape="
operator|+
name|shape
operator|+
literal|"];"
argument_list|)
expr_stmt|;
name|seen
operator|.
name|add
argument_list|(
name|arc
operator|.
name|target
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
operator|new
name|FST
operator|.
name|Arc
argument_list|<
name|T
argument_list|>
argument_list|()
operator|.
name|copyFrom
argument_list|(
name|arc
argument_list|)
argument_list|)
expr_stmt|;
comment|//System.out.println("    new!");
block|}
name|String
name|outs
decl_stmt|;
if|if
condition|(
name|arc
operator|.
name|output
operator|!=
name|NO_OUTPUT
condition|)
block|{
name|outs
operator|=
literal|"/"
operator|+
name|fst
operator|.
name|outputs
operator|.
name|outputToString
argument_list|(
name|arc
operator|.
name|output
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outs
operator|=
literal|""
expr_stmt|;
block|}
specifier|final
name|char
name|cl
decl_stmt|;
if|if
condition|(
name|arc
operator|.
name|label
operator|==
name|FST
operator|.
name|END_LABEL
condition|)
block|{
name|cl
operator|=
literal|'~'
expr_stmt|;
block|}
else|else
block|{
name|cl
operator|=
operator|(
name|char
operator|)
name|arc
operator|.
name|label
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|node
operator|+
literal|" -> "
operator|+
name|arc
operator|.
name|target
operator|+
literal|" [label=\""
operator|+
name|cl
operator|+
name|outs
operator|+
literal|"\"]"
argument_list|)
expr_stmt|;
comment|//if (arc.flag(FST.BIT_TARGET_NEXT)) {
comment|//out.print(" color=blue");
comment|//}
comment|//out.println("];");
if|if
condition|(
name|arc
operator|.
name|isLast
argument_list|()
condition|)
block|{
break|break;
block|}
else|else
block|{
name|fst
operator|.
name|readNextArc
argument_list|(
name|arc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
