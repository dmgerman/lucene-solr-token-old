begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_comment
comment|/**  * Methods for manipulating arrays.  *  * @lucene.internal  */
end_comment
begin_class
DECL|class|ArrayUtil
specifier|public
specifier|final
class|class
name|ArrayUtil
block|{
DECL|method|ArrayUtil
specifier|private
name|ArrayUtil
parameter_list|()
block|{}
comment|// no instance
comment|/*      Begin Apache Harmony code       Revision taken on Friday, June 12. https://svn.apache.org/repos/asf/harmony/enhanced/classlib/archive/java6/modules/luni/src/main/java/java/lang/Integer.java     */
comment|/**    * Parses the string argument as if it was an int value and returns the    * result. Throws NumberFormatException if the string does not represent an    * int quantity.    *    * @param chars a string representation of an int quantity.    * @return int the value represented by the argument    * @throws NumberFormatException if the argument could not be parsed as an int quantity.    */
DECL|method|parseInt
specifier|public
specifier|static
name|int
name|parseInt
parameter_list|(
name|char
index|[]
name|chars
parameter_list|)
throws|throws
name|NumberFormatException
block|{
return|return
name|parseInt
argument_list|(
name|chars
argument_list|,
literal|0
argument_list|,
name|chars
operator|.
name|length
argument_list|,
literal|10
argument_list|)
return|;
block|}
comment|/**    * Parses a char array into an int.    * @param chars the character array    * @param offset The offset into the array    * @param len The length    * @return the int    * @throws NumberFormatException if it can't parse    */
DECL|method|parseInt
specifier|public
specifier|static
name|int
name|parseInt
parameter_list|(
name|char
index|[]
name|chars
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|NumberFormatException
block|{
return|return
name|parseInt
argument_list|(
name|chars
argument_list|,
name|offset
argument_list|,
name|len
argument_list|,
literal|10
argument_list|)
return|;
block|}
comment|/**    * Parses the string argument as if it was an int value and returns the    * result. Throws NumberFormatException if the string does not represent an    * int quantity. The second argument specifies the radix to use when parsing    * the value.    *    * @param chars a string representation of an int quantity.    * @param radix the base to use for conversion.    * @return int the value represented by the argument    * @throws NumberFormatException if the argument could not be parsed as an int quantity.    */
DECL|method|parseInt
specifier|public
specifier|static
name|int
name|parseInt
parameter_list|(
name|char
index|[]
name|chars
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|radix
parameter_list|)
throws|throws
name|NumberFormatException
block|{
if|if
condition|(
name|chars
operator|==
literal|null
operator|||
name|radix
argument_list|<
name|Character
operator|.
name|MIN_RADIX
operator|||
name|radix
argument_list|>
name|Character
operator|.
name|MAX_RADIX
condition|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|()
throw|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|(
literal|"chars length is 0"
argument_list|)
throw|;
block|}
name|boolean
name|negative
init|=
name|chars
index|[
name|offset
operator|+
name|i
index|]
operator|==
literal|'-'
decl_stmt|;
if|if
condition|(
name|negative
operator|&&
operator|++
name|i
operator|==
name|len
condition|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|(
literal|"can't convert to an int"
argument_list|)
throw|;
block|}
if|if
condition|(
name|negative
operator|==
literal|true
condition|)
block|{
name|offset
operator|++
expr_stmt|;
name|len
operator|--
expr_stmt|;
block|}
return|return
name|parse
argument_list|(
name|chars
argument_list|,
name|offset
argument_list|,
name|len
argument_list|,
name|radix
argument_list|,
name|negative
argument_list|)
return|;
block|}
DECL|method|parse
specifier|private
specifier|static
name|int
name|parse
parameter_list|(
name|char
index|[]
name|chars
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|radix
parameter_list|,
name|boolean
name|negative
parameter_list|)
throws|throws
name|NumberFormatException
block|{
name|int
name|max
init|=
name|Integer
operator|.
name|MIN_VALUE
operator|/
name|radix
decl_stmt|;
name|int
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|int
name|digit
init|=
name|Character
operator|.
name|digit
argument_list|(
name|chars
index|[
name|i
operator|+
name|offset
index|]
argument_list|,
name|radix
argument_list|)
decl_stmt|;
if|if
condition|(
name|digit
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|(
literal|"Unable to parse"
argument_list|)
throw|;
block|}
if|if
condition|(
name|max
operator|>
name|result
condition|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|(
literal|"Unable to parse"
argument_list|)
throw|;
block|}
name|int
name|next
init|=
name|result
operator|*
name|radix
operator|-
name|digit
decl_stmt|;
if|if
condition|(
name|next
operator|>
name|result
condition|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|(
literal|"Unable to parse"
argument_list|)
throw|;
block|}
name|result
operator|=
name|next
expr_stmt|;
block|}
comment|/*while (offset< len) {      }*/
if|if
condition|(
operator|!
name|negative
condition|)
block|{
name|result
operator|=
operator|-
name|result
expr_stmt|;
if|if
condition|(
name|result
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|(
literal|"Unable to parse"
argument_list|)
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/*   END APACHE HARMONY CODE   */
comment|/** Returns an array size>= minTargetSize, generally    *  over-allocating exponentially to achieve amortized    *  linear-time cost as the array grows.    *    *  NOTE: this was originally borrowed from Python 2.4.2    *  listobject.c sources (attribution in LICENSE.txt), but    *  has now been substantially changed based on    *  discussions from java-dev thread with subject "Dynamic    *  array reallocation algorithms", started on Jan 12    *  2010.    *    * @param minTargetSize Minimum required value to be returned.    * @param bytesPerElement Bytes used by each element of    * the array.  See constants in {@link RamUsageEstimator}.    *    * @lucene.internal    */
DECL|method|oversize
specifier|public
specifier|static
name|int
name|oversize
parameter_list|(
name|int
name|minTargetSize
parameter_list|,
name|int
name|bytesPerElement
parameter_list|)
block|{
if|if
condition|(
name|minTargetSize
operator|<
literal|0
condition|)
block|{
comment|// catch usage that accidentally overflows int
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid array size "
operator|+
name|minTargetSize
argument_list|)
throw|;
block|}
if|if
condition|(
name|minTargetSize
operator|==
literal|0
condition|)
block|{
comment|// wait until at least one element is requested
return|return
literal|0
return|;
block|}
comment|// asymptotic exponential growth by 1/8th, favors
comment|// spending a bit more CPU to not tie up too much wasted
comment|// RAM:
name|int
name|extra
init|=
name|minTargetSize
operator|>>
literal|3
decl_stmt|;
if|if
condition|(
name|extra
operator|<
literal|3
condition|)
block|{
comment|// for very small arrays, where constant overhead of
comment|// realloc is presumably relatively high, we grow
comment|// faster
name|extra
operator|=
literal|3
expr_stmt|;
block|}
name|int
name|newSize
init|=
name|minTargetSize
operator|+
name|extra
decl_stmt|;
comment|// add 7 to allow for worst case byte alignment addition below:
if|if
condition|(
name|newSize
operator|+
literal|7
operator|<
literal|0
condition|)
block|{
comment|// int overflowed -- return max allowed array size
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
if|if
condition|(
name|Constants
operator|.
name|JRE_IS_64BIT
condition|)
block|{
comment|// round up to 8 byte alignment in 64bit env
switch|switch
condition|(
name|bytesPerElement
condition|)
block|{
case|case
literal|4
case|:
comment|// round up to multiple of 2
return|return
operator|(
name|newSize
operator|+
literal|1
operator|)
operator|&
literal|0x7ffffffe
return|;
case|case
literal|2
case|:
comment|// round up to multiple of 4
return|return
operator|(
name|newSize
operator|+
literal|3
operator|)
operator|&
literal|0x7ffffffc
return|;
case|case
literal|1
case|:
comment|// round up to multiple of 8
return|return
operator|(
name|newSize
operator|+
literal|7
operator|)
operator|&
literal|0x7ffffff8
return|;
case|case
literal|8
case|:
comment|// no rounding
default|default:
comment|// odd (invalid?) size
return|return
name|newSize
return|;
block|}
block|}
else|else
block|{
comment|// round up to 4 byte alignment in 64bit env
switch|switch
condition|(
name|bytesPerElement
condition|)
block|{
case|case
literal|2
case|:
comment|// round up to multiple of 2
return|return
operator|(
name|newSize
operator|+
literal|1
operator|)
operator|&
literal|0x7ffffffe
return|;
case|case
literal|1
case|:
comment|// round up to multiple of 4
return|return
operator|(
name|newSize
operator|+
literal|3
operator|)
operator|&
literal|0x7ffffffc
return|;
case|case
literal|4
case|:
case|case
literal|8
case|:
comment|// no rounding
default|default:
comment|// odd (invalid?) size
return|return
name|newSize
return|;
block|}
block|}
block|}
DECL|method|getShrinkSize
specifier|public
specifier|static
name|int
name|getShrinkSize
parameter_list|(
name|int
name|currentSize
parameter_list|,
name|int
name|targetSize
parameter_list|,
name|int
name|bytesPerElement
parameter_list|)
block|{
specifier|final
name|int
name|newSize
init|=
name|oversize
argument_list|(
name|targetSize
argument_list|,
name|bytesPerElement
argument_list|)
decl_stmt|;
comment|// Only reallocate if we are "substantially" smaller.
comment|// This saves us from "running hot" (constantly making a
comment|// bit bigger then a bit smaller, over and over):
if|if
condition|(
name|newSize
operator|<
name|currentSize
operator|/
literal|2
condition|)
return|return
name|newSize
return|;
else|else
return|return
name|currentSize
return|;
block|}
DECL|method|grow
specifier|public
specifier|static
name|short
index|[]
name|grow
parameter_list|(
name|short
index|[]
name|array
parameter_list|,
name|int
name|minSize
parameter_list|)
block|{
assert|assert
name|minSize
operator|>=
literal|0
operator|:
literal|"size must be positive (got "
operator|+
name|minSize
operator|+
literal|"): likely integer overflow?"
assert|;
if|if
condition|(
name|array
operator|.
name|length
operator|<
name|minSize
condition|)
block|{
name|short
index|[]
name|newArray
init|=
operator|new
name|short
index|[
name|oversize
argument_list|(
name|minSize
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_SHORT
argument_list|)
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|array
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|newArray
return|;
block|}
else|else
return|return
name|array
return|;
block|}
DECL|method|grow
specifier|public
specifier|static
name|short
index|[]
name|grow
parameter_list|(
name|short
index|[]
name|array
parameter_list|)
block|{
return|return
name|grow
argument_list|(
name|array
argument_list|,
literal|1
operator|+
name|array
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|grow
specifier|public
specifier|static
name|float
index|[]
name|grow
parameter_list|(
name|float
index|[]
name|array
parameter_list|,
name|int
name|minSize
parameter_list|)
block|{
assert|assert
name|minSize
operator|>=
literal|0
operator|:
literal|"size must be positive (got "
operator|+
name|minSize
operator|+
literal|"): likely integer overflow?"
assert|;
if|if
condition|(
name|array
operator|.
name|length
operator|<
name|minSize
condition|)
block|{
name|float
index|[]
name|newArray
init|=
operator|new
name|float
index|[
name|oversize
argument_list|(
name|minSize
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_FLOAT
argument_list|)
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|array
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|newArray
return|;
block|}
else|else
return|return
name|array
return|;
block|}
DECL|method|grow
specifier|public
specifier|static
name|float
index|[]
name|grow
parameter_list|(
name|float
index|[]
name|array
parameter_list|)
block|{
return|return
name|grow
argument_list|(
name|array
argument_list|,
literal|1
operator|+
name|array
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|grow
specifier|public
specifier|static
name|double
index|[]
name|grow
parameter_list|(
name|double
index|[]
name|array
parameter_list|,
name|int
name|minSize
parameter_list|)
block|{
assert|assert
name|minSize
operator|>=
literal|0
operator|:
literal|"size must be positive (got "
operator|+
name|minSize
operator|+
literal|"): likely integer overflow?"
assert|;
if|if
condition|(
name|array
operator|.
name|length
operator|<
name|minSize
condition|)
block|{
name|double
index|[]
name|newArray
init|=
operator|new
name|double
index|[
name|oversize
argument_list|(
name|minSize
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_DOUBLE
argument_list|)
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|array
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|newArray
return|;
block|}
else|else
return|return
name|array
return|;
block|}
DECL|method|grow
specifier|public
specifier|static
name|double
index|[]
name|grow
parameter_list|(
name|double
index|[]
name|array
parameter_list|)
block|{
return|return
name|grow
argument_list|(
name|array
argument_list|,
literal|1
operator|+
name|array
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|shrink
specifier|public
specifier|static
name|short
index|[]
name|shrink
parameter_list|(
name|short
index|[]
name|array
parameter_list|,
name|int
name|targetSize
parameter_list|)
block|{
assert|assert
name|targetSize
operator|>=
literal|0
operator|:
literal|"size must be positive (got "
operator|+
name|targetSize
operator|+
literal|"): likely integer overflow?"
assert|;
specifier|final
name|int
name|newSize
init|=
name|getShrinkSize
argument_list|(
name|array
operator|.
name|length
argument_list|,
name|targetSize
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_SHORT
argument_list|)
decl_stmt|;
if|if
condition|(
name|newSize
operator|!=
name|array
operator|.
name|length
condition|)
block|{
name|short
index|[]
name|newArray
init|=
operator|new
name|short
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|newSize
argument_list|)
expr_stmt|;
return|return
name|newArray
return|;
block|}
else|else
return|return
name|array
return|;
block|}
DECL|method|grow
specifier|public
specifier|static
name|int
index|[]
name|grow
parameter_list|(
name|int
index|[]
name|array
parameter_list|,
name|int
name|minSize
parameter_list|)
block|{
assert|assert
name|minSize
operator|>=
literal|0
operator|:
literal|"size must be positive (got "
operator|+
name|minSize
operator|+
literal|"): likely integer overflow?"
assert|;
if|if
condition|(
name|array
operator|.
name|length
operator|<
name|minSize
condition|)
block|{
name|int
index|[]
name|newArray
init|=
operator|new
name|int
index|[
name|oversize
argument_list|(
name|minSize
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
argument_list|)
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|array
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|newArray
return|;
block|}
else|else
return|return
name|array
return|;
block|}
DECL|method|grow
specifier|public
specifier|static
name|int
index|[]
name|grow
parameter_list|(
name|int
index|[]
name|array
parameter_list|)
block|{
return|return
name|grow
argument_list|(
name|array
argument_list|,
literal|1
operator|+
name|array
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|shrink
specifier|public
specifier|static
name|int
index|[]
name|shrink
parameter_list|(
name|int
index|[]
name|array
parameter_list|,
name|int
name|targetSize
parameter_list|)
block|{
assert|assert
name|targetSize
operator|>=
literal|0
operator|:
literal|"size must be positive (got "
operator|+
name|targetSize
operator|+
literal|"): likely integer overflow?"
assert|;
specifier|final
name|int
name|newSize
init|=
name|getShrinkSize
argument_list|(
name|array
operator|.
name|length
argument_list|,
name|targetSize
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
argument_list|)
decl_stmt|;
if|if
condition|(
name|newSize
operator|!=
name|array
operator|.
name|length
condition|)
block|{
name|int
index|[]
name|newArray
init|=
operator|new
name|int
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|newSize
argument_list|)
expr_stmt|;
return|return
name|newArray
return|;
block|}
else|else
return|return
name|array
return|;
block|}
DECL|method|grow
specifier|public
specifier|static
name|long
index|[]
name|grow
parameter_list|(
name|long
index|[]
name|array
parameter_list|,
name|int
name|minSize
parameter_list|)
block|{
assert|assert
name|minSize
operator|>=
literal|0
operator|:
literal|"size must be positive (got "
operator|+
name|minSize
operator|+
literal|"): likely integer overflow?"
assert|;
if|if
condition|(
name|array
operator|.
name|length
operator|<
name|minSize
condition|)
block|{
name|long
index|[]
name|newArray
init|=
operator|new
name|long
index|[
name|oversize
argument_list|(
name|minSize
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_LONG
argument_list|)
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|array
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|newArray
return|;
block|}
else|else
return|return
name|array
return|;
block|}
DECL|method|grow
specifier|public
specifier|static
name|long
index|[]
name|grow
parameter_list|(
name|long
index|[]
name|array
parameter_list|)
block|{
return|return
name|grow
argument_list|(
name|array
argument_list|,
literal|1
operator|+
name|array
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|shrink
specifier|public
specifier|static
name|long
index|[]
name|shrink
parameter_list|(
name|long
index|[]
name|array
parameter_list|,
name|int
name|targetSize
parameter_list|)
block|{
assert|assert
name|targetSize
operator|>=
literal|0
operator|:
literal|"size must be positive (got "
operator|+
name|targetSize
operator|+
literal|"): likely integer overflow?"
assert|;
specifier|final
name|int
name|newSize
init|=
name|getShrinkSize
argument_list|(
name|array
operator|.
name|length
argument_list|,
name|targetSize
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_LONG
argument_list|)
decl_stmt|;
if|if
condition|(
name|newSize
operator|!=
name|array
operator|.
name|length
condition|)
block|{
name|long
index|[]
name|newArray
init|=
operator|new
name|long
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|newSize
argument_list|)
expr_stmt|;
return|return
name|newArray
return|;
block|}
else|else
return|return
name|array
return|;
block|}
DECL|method|grow
specifier|public
specifier|static
name|byte
index|[]
name|grow
parameter_list|(
name|byte
index|[]
name|array
parameter_list|,
name|int
name|minSize
parameter_list|)
block|{
assert|assert
name|minSize
operator|>=
literal|0
operator|:
literal|"size must be positive (got "
operator|+
name|minSize
operator|+
literal|"): likely integer overflow?"
assert|;
if|if
condition|(
name|array
operator|.
name|length
operator|<
name|minSize
condition|)
block|{
name|byte
index|[]
name|newArray
init|=
operator|new
name|byte
index|[
name|oversize
argument_list|(
name|minSize
argument_list|,
literal|1
argument_list|)
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|array
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|newArray
return|;
block|}
else|else
return|return
name|array
return|;
block|}
DECL|method|grow
specifier|public
specifier|static
name|byte
index|[]
name|grow
parameter_list|(
name|byte
index|[]
name|array
parameter_list|)
block|{
return|return
name|grow
argument_list|(
name|array
argument_list|,
literal|1
operator|+
name|array
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|shrink
specifier|public
specifier|static
name|byte
index|[]
name|shrink
parameter_list|(
name|byte
index|[]
name|array
parameter_list|,
name|int
name|targetSize
parameter_list|)
block|{
assert|assert
name|targetSize
operator|>=
literal|0
operator|:
literal|"size must be positive (got "
operator|+
name|targetSize
operator|+
literal|"): likely integer overflow?"
assert|;
specifier|final
name|int
name|newSize
init|=
name|getShrinkSize
argument_list|(
name|array
operator|.
name|length
argument_list|,
name|targetSize
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|newSize
operator|!=
name|array
operator|.
name|length
condition|)
block|{
name|byte
index|[]
name|newArray
init|=
operator|new
name|byte
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|newSize
argument_list|)
expr_stmt|;
return|return
name|newArray
return|;
block|}
else|else
return|return
name|array
return|;
block|}
DECL|method|grow
specifier|public
specifier|static
name|boolean
index|[]
name|grow
parameter_list|(
name|boolean
index|[]
name|array
parameter_list|,
name|int
name|minSize
parameter_list|)
block|{
assert|assert
name|minSize
operator|>=
literal|0
operator|:
literal|"size must be positive (got "
operator|+
name|minSize
operator|+
literal|"): likely integer overflow?"
assert|;
if|if
condition|(
name|array
operator|.
name|length
operator|<
name|minSize
condition|)
block|{
name|boolean
index|[]
name|newArray
init|=
operator|new
name|boolean
index|[
name|oversize
argument_list|(
name|minSize
argument_list|,
literal|1
argument_list|)
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|array
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|newArray
return|;
block|}
else|else
return|return
name|array
return|;
block|}
DECL|method|grow
specifier|public
specifier|static
name|boolean
index|[]
name|grow
parameter_list|(
name|boolean
index|[]
name|array
parameter_list|)
block|{
return|return
name|grow
argument_list|(
name|array
argument_list|,
literal|1
operator|+
name|array
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|shrink
specifier|public
specifier|static
name|boolean
index|[]
name|shrink
parameter_list|(
name|boolean
index|[]
name|array
parameter_list|,
name|int
name|targetSize
parameter_list|)
block|{
assert|assert
name|targetSize
operator|>=
literal|0
operator|:
literal|"size must be positive (got "
operator|+
name|targetSize
operator|+
literal|"): likely integer overflow?"
assert|;
specifier|final
name|int
name|newSize
init|=
name|getShrinkSize
argument_list|(
name|array
operator|.
name|length
argument_list|,
name|targetSize
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|newSize
operator|!=
name|array
operator|.
name|length
condition|)
block|{
name|boolean
index|[]
name|newArray
init|=
operator|new
name|boolean
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|newSize
argument_list|)
expr_stmt|;
return|return
name|newArray
return|;
block|}
else|else
return|return
name|array
return|;
block|}
DECL|method|grow
specifier|public
specifier|static
name|char
index|[]
name|grow
parameter_list|(
name|char
index|[]
name|array
parameter_list|,
name|int
name|minSize
parameter_list|)
block|{
assert|assert
name|minSize
operator|>=
literal|0
operator|:
literal|"size must be positive (got "
operator|+
name|minSize
operator|+
literal|"): likely integer overflow?"
assert|;
if|if
condition|(
name|array
operator|.
name|length
operator|<
name|minSize
condition|)
block|{
name|char
index|[]
name|newArray
init|=
operator|new
name|char
index|[
name|oversize
argument_list|(
name|minSize
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_CHAR
argument_list|)
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|array
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|newArray
return|;
block|}
else|else
return|return
name|array
return|;
block|}
DECL|method|grow
specifier|public
specifier|static
name|char
index|[]
name|grow
parameter_list|(
name|char
index|[]
name|array
parameter_list|)
block|{
return|return
name|grow
argument_list|(
name|array
argument_list|,
literal|1
operator|+
name|array
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|shrink
specifier|public
specifier|static
name|char
index|[]
name|shrink
parameter_list|(
name|char
index|[]
name|array
parameter_list|,
name|int
name|targetSize
parameter_list|)
block|{
assert|assert
name|targetSize
operator|>=
literal|0
operator|:
literal|"size must be positive (got "
operator|+
name|targetSize
operator|+
literal|"): likely integer overflow?"
assert|;
specifier|final
name|int
name|newSize
init|=
name|getShrinkSize
argument_list|(
name|array
operator|.
name|length
argument_list|,
name|targetSize
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_CHAR
argument_list|)
decl_stmt|;
if|if
condition|(
name|newSize
operator|!=
name|array
operator|.
name|length
condition|)
block|{
name|char
index|[]
name|newArray
init|=
operator|new
name|char
index|[
name|newSize
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|newSize
argument_list|)
expr_stmt|;
return|return
name|newArray
return|;
block|}
else|else
return|return
name|array
return|;
block|}
DECL|method|grow
specifier|public
specifier|static
name|int
index|[]
index|[]
name|grow
parameter_list|(
name|int
index|[]
index|[]
name|array
parameter_list|,
name|int
name|minSize
parameter_list|)
block|{
assert|assert
name|minSize
operator|>=
literal|0
operator|:
literal|"size must be positive (got "
operator|+
name|minSize
operator|+
literal|"): likely integer overflow?"
assert|;
if|if
condition|(
name|array
operator|.
name|length
operator|<
name|minSize
condition|)
block|{
name|int
index|[]
index|[]
name|newArray
init|=
operator|new
name|int
index|[
name|oversize
argument_list|(
name|minSize
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_REF
argument_list|)
index|]
index|[]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|array
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|newArray
return|;
block|}
else|else
block|{
return|return
name|array
return|;
block|}
block|}
DECL|method|grow
specifier|public
specifier|static
name|int
index|[]
index|[]
name|grow
parameter_list|(
name|int
index|[]
index|[]
name|array
parameter_list|)
block|{
return|return
name|grow
argument_list|(
name|array
argument_list|,
literal|1
operator|+
name|array
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|shrink
specifier|public
specifier|static
name|int
index|[]
index|[]
name|shrink
parameter_list|(
name|int
index|[]
index|[]
name|array
parameter_list|,
name|int
name|targetSize
parameter_list|)
block|{
assert|assert
name|targetSize
operator|>=
literal|0
operator|:
literal|"size must be positive (got "
operator|+
name|targetSize
operator|+
literal|"): likely integer overflow?"
assert|;
specifier|final
name|int
name|newSize
init|=
name|getShrinkSize
argument_list|(
name|array
operator|.
name|length
argument_list|,
name|targetSize
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_REF
argument_list|)
decl_stmt|;
if|if
condition|(
name|newSize
operator|!=
name|array
operator|.
name|length
condition|)
block|{
name|int
index|[]
index|[]
name|newArray
init|=
operator|new
name|int
index|[
name|newSize
index|]
index|[]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|newSize
argument_list|)
expr_stmt|;
return|return
name|newArray
return|;
block|}
else|else
block|{
return|return
name|array
return|;
block|}
block|}
DECL|method|grow
specifier|public
specifier|static
name|float
index|[]
index|[]
name|grow
parameter_list|(
name|float
index|[]
index|[]
name|array
parameter_list|,
name|int
name|minSize
parameter_list|)
block|{
assert|assert
name|minSize
operator|>=
literal|0
operator|:
literal|"size must be positive (got "
operator|+
name|minSize
operator|+
literal|"): likely integer overflow?"
assert|;
if|if
condition|(
name|array
operator|.
name|length
operator|<
name|minSize
condition|)
block|{
name|float
index|[]
index|[]
name|newArray
init|=
operator|new
name|float
index|[
name|oversize
argument_list|(
name|minSize
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_REF
argument_list|)
index|]
index|[]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|array
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|newArray
return|;
block|}
else|else
block|{
return|return
name|array
return|;
block|}
block|}
DECL|method|grow
specifier|public
specifier|static
name|float
index|[]
index|[]
name|grow
parameter_list|(
name|float
index|[]
index|[]
name|array
parameter_list|)
block|{
return|return
name|grow
argument_list|(
name|array
argument_list|,
literal|1
operator|+
name|array
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|shrink
specifier|public
specifier|static
name|float
index|[]
index|[]
name|shrink
parameter_list|(
name|float
index|[]
index|[]
name|array
parameter_list|,
name|int
name|targetSize
parameter_list|)
block|{
assert|assert
name|targetSize
operator|>=
literal|0
operator|:
literal|"size must be positive (got "
operator|+
name|targetSize
operator|+
literal|"): likely integer overflow?"
assert|;
specifier|final
name|int
name|newSize
init|=
name|getShrinkSize
argument_list|(
name|array
operator|.
name|length
argument_list|,
name|targetSize
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_REF
argument_list|)
decl_stmt|;
if|if
condition|(
name|newSize
operator|!=
name|array
operator|.
name|length
condition|)
block|{
name|float
index|[]
index|[]
name|newArray
init|=
operator|new
name|float
index|[
name|newSize
index|]
index|[]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|array
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|newSize
argument_list|)
expr_stmt|;
return|return
name|newArray
return|;
block|}
else|else
block|{
return|return
name|array
return|;
block|}
block|}
comment|/**    * Returns hash of chars in range start (inclusive) to    * end (inclusive)    */
DECL|method|hashCode
specifier|public
specifier|static
name|int
name|hashCode
parameter_list|(
name|char
index|[]
name|array
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|int
name|code
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|end
operator|-
literal|1
init|;
name|i
operator|>=
name|start
condition|;
name|i
operator|--
control|)
name|code
operator|=
name|code
operator|*
literal|31
operator|+
name|array
index|[
name|i
index|]
expr_stmt|;
return|return
name|code
return|;
block|}
comment|/**    * Returns hash of bytes in range start (inclusive) to    * end (inclusive)    */
DECL|method|hashCode
specifier|public
specifier|static
name|int
name|hashCode
parameter_list|(
name|byte
index|[]
name|array
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|int
name|code
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|end
operator|-
literal|1
init|;
name|i
operator|>=
name|start
condition|;
name|i
operator|--
control|)
name|code
operator|=
name|code
operator|*
literal|31
operator|+
name|array
index|[
name|i
index|]
expr_stmt|;
return|return
name|code
return|;
block|}
comment|// Since Arrays.equals doesn't implement offsets for equals
comment|/**    * See if two array slices are the same.    *    * @param left        The left array to compare    * @param offsetLeft  The offset into the array.  Must be positive    * @param right       The right array to compare    * @param offsetRight the offset into the right array.  Must be positive    * @param length      The length of the section of the array to compare    * @return true if the two arrays, starting at their respective offsets, are equal    *     * @see java.util.Arrays#equals(char[], char[])    */
DECL|method|equals
specifier|public
specifier|static
name|boolean
name|equals
parameter_list|(
name|char
index|[]
name|left
parameter_list|,
name|int
name|offsetLeft
parameter_list|,
name|char
index|[]
name|right
parameter_list|,
name|int
name|offsetRight
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
operator|(
name|offsetLeft
operator|+
name|length
operator|<=
name|left
operator|.
name|length
operator|)
operator|&&
operator|(
name|offsetRight
operator|+
name|length
operator|<=
name|right
operator|.
name|length
operator|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|left
index|[
name|offsetLeft
operator|+
name|i
index|]
operator|!=
name|right
index|[
name|offsetRight
operator|+
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/* DISABLE THIS FOR NOW: This has performance problems until Java creates intrinsics for Class#getComponentType() and Array.newInstance()   public static<T> T[] grow(T[] array, int minSize) {     assert minSize>= 0: "size must be positive (got " + minSize + "): likely integer overflow?";     if (array.length< minSize) {       @SuppressWarnings("unchecked") final T[] newArray =         (T[]) Array.newInstance(array.getClass().getComponentType(), oversize(minSize, RamUsageEstimator.NUM_BYTES_OBJECT_REF));       System.arraycopy(array, 0, newArray, 0, array.length);       return newArray;     } else       return array;   }    public static<T> T[] grow(T[] array) {     return grow(array, 1 + array.length);   }    public static<T> T[] shrink(T[] array, int targetSize) {     assert targetSize>= 0: "size must be positive (got " + targetSize + "): likely integer overflow?";     final int newSize = getShrinkSize(array.length, targetSize, RamUsageEstimator.NUM_BYTES_OBJECT_REF);     if (newSize != array.length) {       @SuppressWarnings("unchecked") final T[] newArray =         (T[]) Array.newInstance(array.getClass().getComponentType(), newSize);       System.arraycopy(array, 0, newArray, 0, newSize);       return newArray;     } else       return array;   }   */
comment|// Since Arrays.equals doesn't implement offsets for equals
comment|/**    * See if two array slices are the same.    *    * @param left        The left array to compare    * @param offsetLeft  The offset into the array.  Must be positive    * @param right       The right array to compare    * @param offsetRight the offset into the right array.  Must be positive    * @param length      The length of the section of the array to compare    * @return true if the two arrays, starting at their respective offsets, are equal    *     * @see java.util.Arrays#equals(char[], char[])    */
DECL|method|equals
specifier|public
specifier|static
name|boolean
name|equals
parameter_list|(
name|int
index|[]
name|left
parameter_list|,
name|int
name|offsetLeft
parameter_list|,
name|int
index|[]
name|right
parameter_list|,
name|int
name|offsetRight
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
operator|(
name|offsetLeft
operator|+
name|length
operator|<=
name|left
operator|.
name|length
operator|)
operator|&&
operator|(
name|offsetRight
operator|+
name|length
operator|<=
name|right
operator|.
name|length
operator|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|left
index|[
name|offsetLeft
operator|+
name|i
index|]
operator|!=
name|right
index|[
name|offsetRight
operator|+
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|toIntArray
specifier|public
specifier|static
name|int
index|[]
name|toIntArray
parameter_list|(
name|Collection
argument_list|<
name|Integer
argument_list|>
name|ints
parameter_list|)
block|{
specifier|final
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
name|ints
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|upto
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|v
range|:
name|ints
control|)
block|{
name|result
index|[
name|upto
operator|++
index|]
operator|=
name|v
expr_stmt|;
block|}
comment|// paranoia:
assert|assert
name|upto
operator|==
name|result
operator|.
name|length
assert|;
return|return
name|result
return|;
block|}
comment|/** SorterTemplate with custom {@link Comparator} */
DECL|method|getSorter
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|SorterTemplate
name|getSorter
parameter_list|(
specifier|final
name|T
index|[]
name|a
parameter_list|,
specifier|final
name|Comparator
argument_list|<
name|?
super|super
name|T
argument_list|>
name|comp
parameter_list|)
block|{
return|return
operator|new
name|SorterTemplate
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
specifier|final
name|T
name|o
init|=
name|a
index|[
name|i
index|]
decl_stmt|;
name|a
index|[
name|i
index|]
operator|=
name|a
index|[
name|j
index|]
expr_stmt|;
name|a
index|[
name|j
index|]
operator|=
name|o
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|compare
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
return|return
name|comp
operator|.
name|compare
argument_list|(
name|a
index|[
name|i
index|]
argument_list|,
name|a
index|[
name|j
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setPivot
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|pivot
operator|=
name|a
index|[
name|i
index|]
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|comparePivot
parameter_list|(
name|int
name|j
parameter_list|)
block|{
return|return
name|comp
operator|.
name|compare
argument_list|(
name|pivot
argument_list|,
name|a
index|[
name|j
index|]
argument_list|)
return|;
block|}
specifier|private
name|T
name|pivot
decl_stmt|;
block|}
return|;
block|}
comment|/** Natural SorterTemplate */
DECL|method|getSorter
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|T
argument_list|>
parameter_list|>
name|SorterTemplate
name|getSorter
parameter_list|(
specifier|final
name|T
index|[]
name|a
parameter_list|)
block|{
return|return
operator|new
name|SorterTemplate
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
specifier|final
name|T
name|o
init|=
name|a
index|[
name|i
index|]
decl_stmt|;
name|a
index|[
name|i
index|]
operator|=
name|a
index|[
name|j
index|]
expr_stmt|;
name|a
index|[
name|j
index|]
operator|=
name|o
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|compare
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
return|return
name|a
index|[
name|i
index|]
operator|.
name|compareTo
argument_list|(
name|a
index|[
name|j
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setPivot
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|pivot
operator|=
name|a
index|[
name|i
index|]
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|comparePivot
parameter_list|(
name|int
name|j
parameter_list|)
block|{
return|return
name|pivot
operator|.
name|compareTo
argument_list|(
name|a
index|[
name|j
index|]
argument_list|)
return|;
block|}
specifier|private
name|T
name|pivot
decl_stmt|;
block|}
return|;
block|}
comment|// quickSorts (endindex is exclusive!):
comment|/**    * Sorts the given array slice using the {@link Comparator}. This method uses the quick sort    * algorithm, but falls back to insertion sort for small arrays.    * @param fromIndex start index (inclusive)    * @param toIndex end index (exclusive)    */
DECL|method|quickSort
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|quickSort
parameter_list|(
name|T
index|[]
name|a
parameter_list|,
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|,
name|Comparator
argument_list|<
name|?
super|super
name|T
argument_list|>
name|comp
parameter_list|)
block|{
if|if
condition|(
name|toIndex
operator|-
name|fromIndex
operator|<=
literal|1
condition|)
return|return;
name|getSorter
argument_list|(
name|a
argument_list|,
name|comp
argument_list|)
operator|.
name|quickSort
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sorts the given array using the {@link Comparator}. This method uses the quick sort    * algorithm, but falls back to insertion sort for small arrays.    */
DECL|method|quickSort
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|quickSort
parameter_list|(
name|T
index|[]
name|a
parameter_list|,
name|Comparator
argument_list|<
name|?
super|super
name|T
argument_list|>
name|comp
parameter_list|)
block|{
name|quickSort
argument_list|(
name|a
argument_list|,
literal|0
argument_list|,
name|a
operator|.
name|length
argument_list|,
name|comp
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sorts the given array slice in natural order. This method uses the quick sort    * algorithm, but falls back to insertion sort for small arrays.    * @param fromIndex start index (inclusive)    * @param toIndex end index (exclusive)    */
DECL|method|quickSort
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|T
argument_list|>
parameter_list|>
name|void
name|quickSort
parameter_list|(
name|T
index|[]
name|a
parameter_list|,
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
if|if
condition|(
name|toIndex
operator|-
name|fromIndex
operator|<=
literal|1
condition|)
return|return;
name|getSorter
argument_list|(
name|a
argument_list|)
operator|.
name|quickSort
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sorts the given array in natural order. This method uses the quick sort    * algorithm, but falls back to insertion sort for small arrays.    */
DECL|method|quickSort
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|T
argument_list|>
parameter_list|>
name|void
name|quickSort
parameter_list|(
name|T
index|[]
name|a
parameter_list|)
block|{
name|quickSort
argument_list|(
name|a
argument_list|,
literal|0
argument_list|,
name|a
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|// mergeSorts:
comment|/**    * Sorts the given array slice using the {@link Comparator}. This method uses the merge sort    * algorithm, but falls back to insertion sort for small arrays.    * @param fromIndex start index (inclusive)    * @param toIndex end index (exclusive)    */
DECL|method|mergeSort
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|mergeSort
parameter_list|(
name|T
index|[]
name|a
parameter_list|,
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|,
name|Comparator
argument_list|<
name|?
super|super
name|T
argument_list|>
name|comp
parameter_list|)
block|{
if|if
condition|(
name|toIndex
operator|-
name|fromIndex
operator|<=
literal|1
condition|)
return|return;
comment|//System.out.println("SORT: " + (toIndex-fromIndex));
name|getSorter
argument_list|(
name|a
argument_list|,
name|comp
argument_list|)
operator|.
name|mergeSort
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sorts the given array using the {@link Comparator}. This method uses the merge sort    * algorithm, but falls back to insertion sort for small arrays.    */
DECL|method|mergeSort
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|mergeSort
parameter_list|(
name|T
index|[]
name|a
parameter_list|,
name|Comparator
argument_list|<
name|?
super|super
name|T
argument_list|>
name|comp
parameter_list|)
block|{
name|mergeSort
argument_list|(
name|a
argument_list|,
literal|0
argument_list|,
name|a
operator|.
name|length
argument_list|,
name|comp
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sorts the given array slice in natural order. This method uses the merge sort    * algorithm, but falls back to insertion sort for small arrays.    * @param fromIndex start index (inclusive)    * @param toIndex end index (exclusive)    */
DECL|method|mergeSort
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|T
argument_list|>
parameter_list|>
name|void
name|mergeSort
parameter_list|(
name|T
index|[]
name|a
parameter_list|,
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
if|if
condition|(
name|toIndex
operator|-
name|fromIndex
operator|<=
literal|1
condition|)
return|return;
name|getSorter
argument_list|(
name|a
argument_list|)
operator|.
name|mergeSort
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sorts the given array in natural order. This method uses the merge sort    * algorithm, but falls back to insertion sort for small arrays.    */
DECL|method|mergeSort
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|T
argument_list|>
parameter_list|>
name|void
name|mergeSort
parameter_list|(
name|T
index|[]
name|a
parameter_list|)
block|{
name|mergeSort
argument_list|(
name|a
argument_list|,
literal|0
argument_list|,
name|a
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|// insertionSorts:
comment|/**    * Sorts the given array slice using the {@link Comparator}. This method uses the insertion sort    * algorithm. It is only recommended to use this algorithm for partially sorted small arrays!    * @param fromIndex start index (inclusive)    * @param toIndex end index (exclusive)    */
DECL|method|insertionSort
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|insertionSort
parameter_list|(
name|T
index|[]
name|a
parameter_list|,
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|,
name|Comparator
argument_list|<
name|?
super|super
name|T
argument_list|>
name|comp
parameter_list|)
block|{
if|if
condition|(
name|toIndex
operator|-
name|fromIndex
operator|<=
literal|1
condition|)
return|return;
name|getSorter
argument_list|(
name|a
argument_list|,
name|comp
argument_list|)
operator|.
name|insertionSort
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sorts the given array using the {@link Comparator}. This method uses the insertion sort    * algorithm. It is only recommended to use this algorithm for partially sorted small arrays!    */
DECL|method|insertionSort
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|insertionSort
parameter_list|(
name|T
index|[]
name|a
parameter_list|,
name|Comparator
argument_list|<
name|?
super|super
name|T
argument_list|>
name|comp
parameter_list|)
block|{
name|insertionSort
argument_list|(
name|a
argument_list|,
literal|0
argument_list|,
name|a
operator|.
name|length
argument_list|,
name|comp
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sorts the given array slice in natural order. This method uses the insertion sort    * algorithm. It is only recommended to use this algorithm for partially sorted small arrays!    * @param fromIndex start index (inclusive)    * @param toIndex end index (exclusive)    */
DECL|method|insertionSort
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|T
argument_list|>
parameter_list|>
name|void
name|insertionSort
parameter_list|(
name|T
index|[]
name|a
parameter_list|,
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
if|if
condition|(
name|toIndex
operator|-
name|fromIndex
operator|<=
literal|1
condition|)
return|return;
name|getSorter
argument_list|(
name|a
argument_list|)
operator|.
name|insertionSort
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sorts the given array in natural order. This method uses the insertion sort    * algorithm. It is only recommended to use this algorithm for partially sorted small arrays!    */
DECL|method|insertionSort
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|T
argument_list|>
parameter_list|>
name|void
name|insertionSort
parameter_list|(
name|T
index|[]
name|a
parameter_list|)
block|{
name|insertionSort
argument_list|(
name|a
argument_list|,
literal|0
argument_list|,
name|a
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
