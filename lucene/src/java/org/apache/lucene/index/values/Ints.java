begin_unit
begin_package
DECL|package|org.apache.lucene.index.values
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|IndexDocValuesArray
operator|.
name|ByteValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|IndexDocValuesArray
operator|.
name|IntValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|IndexDocValuesArray
operator|.
name|LongValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|IndexDocValuesArray
operator|.
name|ShortValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Counter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_comment
comment|/**  * Stores ints packed and fixed with fixed-bit precision.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|Ints
specifier|public
specifier|final
class|class
name|Ints
block|{
DECL|method|Ints
specifier|private
name|Ints
parameter_list|()
block|{   }
DECL|method|getWriter
specifier|public
specifier|static
name|Writer
name|getWriter
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|id
parameter_list|,
name|Counter
name|bytesUsed
parameter_list|,
name|ValueType
name|type
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|type
operator|==
name|ValueType
operator|.
name|VAR_INTS
condition|?
operator|new
name|PackedIntValues
operator|.
name|PackedIntsWriter
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|bytesUsed
argument_list|,
name|context
argument_list|)
else|:
operator|new
name|IntsWriter
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|bytesUsed
argument_list|,
name|context
argument_list|,
name|type
argument_list|)
return|;
block|}
DECL|method|getValues
specifier|public
specifier|static
name|IndexDocValues
name|getValues
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|id
parameter_list|,
name|int
name|numDocs
parameter_list|,
name|ValueType
name|type
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|type
operator|==
name|ValueType
operator|.
name|VAR_INTS
condition|?
operator|new
name|PackedIntValues
operator|.
name|PackedIntsReader
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|numDocs
argument_list|,
name|context
argument_list|)
else|:
operator|new
name|IntsReader
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|numDocs
argument_list|,
name|context
argument_list|)
return|;
block|}
DECL|class|IntsWriter
specifier|static
class|class
name|IntsWriter
extends|extends
name|FixedStraightBytesImpl
operator|.
name|Writer
block|{
DECL|field|CODEC_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|CODEC_NAME
init|=
literal|"Ints"
decl_stmt|;
DECL|field|VERSION_START
specifier|protected
specifier|static
specifier|final
name|int
name|VERSION_START
init|=
literal|0
decl_stmt|;
DECL|field|VERSION_CURRENT
specifier|protected
specifier|static
specifier|final
name|int
name|VERSION_CURRENT
init|=
name|VERSION_START
decl_stmt|;
DECL|field|valueType
specifier|private
specifier|final
name|ValueType
name|valueType
decl_stmt|;
DECL|method|IntsWriter
specifier|public
name|IntsWriter
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|id
parameter_list|,
name|Counter
name|bytesUsed
parameter_list|,
name|IOContext
name|context
parameter_list|,
name|ValueType
name|valueType
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|CODEC_NAME
argument_list|,
name|VERSION_CURRENT
argument_list|,
name|bytesUsed
argument_list|,
name|context
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
block|}
DECL|method|IntsWriter
specifier|protected
name|IntsWriter
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|codecName
parameter_list|,
name|int
name|version
parameter_list|,
name|Counter
name|bytesUsed
parameter_list|,
name|IOContext
name|context
parameter_list|,
name|ValueType
name|valueType
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|codecName
argument_list|,
name|version
argument_list|,
name|bytesUsed
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|valueType
operator|=
name|valueType
expr_stmt|;
specifier|final
name|int
name|expectedSize
init|=
name|getSize
argument_list|(
name|valueType
argument_list|)
decl_stmt|;
name|this
operator|.
name|bytesRef
operator|=
operator|new
name|BytesRef
argument_list|(
name|expectedSize
argument_list|)
expr_stmt|;
name|bytesRef
operator|.
name|length
operator|=
name|expectedSize
expr_stmt|;
block|}
DECL|method|getSize
specifier|private
specifier|static
name|int
name|getSize
parameter_list|(
name|ValueType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|FIXED_INTS_16
case|:
return|return
literal|2
return|;
case|case
name|FIXED_INTS_32
case|:
return|return
literal|4
return|;
case|case
name|FIXED_INTS_64
case|:
return|return
literal|8
return|;
case|case
name|FIXED_INTS_8
case|:
return|return
literal|1
return|;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"illegal type "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|int
name|docID
parameter_list|,
name|long
name|v
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|valueType
condition|)
block|{
case|case
name|FIXED_INTS_64
case|:
name|bytesRef
operator|.
name|copy
argument_list|(
name|v
argument_list|)
expr_stmt|;
break|break;
case|case
name|FIXED_INTS_32
case|:
name|bytesRef
operator|.
name|copy
argument_list|(
call|(
name|int
call|)
argument_list|(
literal|0xFFFFFFFF
operator|&
name|v
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|FIXED_INTS_16
case|:
name|bytesRef
operator|.
name|copy
argument_list|(
call|(
name|short
call|)
argument_list|(
literal|0xFFFFL
operator|&
name|v
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|FIXED_INTS_8
case|:
name|bytesRef
operator|.
name|bytes
index|[
literal|0
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0xFFL
operator|&
name|v
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"illegal type "
operator|+
name|valueType
argument_list|)
throw|;
block|}
name|add
argument_list|(
name|docID
argument_list|,
name|bytesRef
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|int
name|docID
parameter_list|,
name|PerDocFieldValues
name|docValues
parameter_list|)
throws|throws
name|IOException
block|{
name|add
argument_list|(
name|docID
argument_list|,
name|docValues
operator|.
name|getInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|IntsReader
specifier|final
specifier|static
class|class
name|IntsReader
extends|extends
name|FixedStraightBytesImpl
operator|.
name|Reader
block|{
DECL|field|type
specifier|private
specifier|final
name|ValueType
name|type
decl_stmt|;
DECL|field|arrayTemplate
specifier|private
specifier|final
name|IndexDocValuesArray
name|arrayTemplate
decl_stmt|;
DECL|method|IntsReader
name|IntsReader
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|id
parameter_list|,
name|int
name|maxDoc
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|IntsWriter
operator|.
name|CODEC_NAME
argument_list|,
name|IntsWriter
operator|.
name|VERSION_CURRENT
argument_list|,
name|maxDoc
argument_list|,
name|context
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|size
condition|)
block|{
case|case
literal|8
case|:
name|type
operator|=
name|ValueType
operator|.
name|FIXED_INTS_64
expr_stmt|;
name|arrayTemplate
operator|=
operator|new
name|LongValues
argument_list|()
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|type
operator|=
name|ValueType
operator|.
name|FIXED_INTS_32
expr_stmt|;
name|arrayTemplate
operator|=
operator|new
name|IntValues
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|type
operator|=
name|ValueType
operator|.
name|FIXED_INTS_16
expr_stmt|;
name|arrayTemplate
operator|=
operator|new
name|ShortValues
argument_list|()
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|type
operator|=
name|ValueType
operator|.
name|FIXED_INTS_8
expr_stmt|;
name|arrayTemplate
operator|=
operator|new
name|ByteValues
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"illegal size: "
operator|+
name|size
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|load
specifier|public
name|Source
name|load
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|IndexInput
name|input
init|=
literal|null
decl_stmt|;
try|try
block|{
name|input
operator|=
name|cloneData
argument_list|()
expr_stmt|;
specifier|final
name|Source
name|source
init|=
name|arrayTemplate
operator|.
name|newFromInput
argument_list|(
name|input
argument_list|,
name|maxDoc
argument_list|)
decl_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|source
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|input
argument_list|,
name|datIn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getEnum
specifier|public
name|ValuesEnum
name|getEnum
parameter_list|(
name|AttributeSource
name|source
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|IndexInput
name|input
init|=
name|cloneData
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
specifier|final
name|ValuesEnum
name|valuesEnum
init|=
name|arrayTemplate
operator|.
name|getDirectEnum
argument_list|(
name|source
argument_list|,
name|input
argument_list|,
name|maxDoc
argument_list|)
decl_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|valuesEnum
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|type
specifier|public
name|ValueType
name|type
parameter_list|()
block|{
return|return
name|type
return|;
block|}
block|}
block|}
end_class
end_unit
