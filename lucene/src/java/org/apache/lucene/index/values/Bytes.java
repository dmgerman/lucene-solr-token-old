begin_unit
begin_package
DECL|package|org.apache.lucene.index.values
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/** Base class for specific Bytes Reader/Writer implementations */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|DocValues
operator|.
name|SortedSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|DocValues
operator|.
name|Source
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ByteBlockPool
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CodecUtil
import|;
end_import
begin_comment
comment|/**  * Provides concrete Writer/Reader impls for byte[] value per document. There  * are 6 package-private impls of this, for all combinations of  * STRAIGHT/DEREF/SORTED X fixed/not fixed.  *   *<p>  * NOTE: The total amount of byte[] data stored (across a single segment) cannot  * exceed 2GB.  *</p>  *<p>  * NOTE: Each byte[] must be<= 32768 bytes in length  *</p>  */
end_comment
begin_comment
comment|//TODO - add bulk copy where possible
end_comment
begin_class
DECL|class|Bytes
specifier|public
specifier|final
class|class
name|Bytes
block|{
comment|// don't instantiate!
DECL|method|Bytes
specifier|private
name|Bytes
parameter_list|()
block|{   }
DECL|enum|Mode
specifier|public
specifier|static
enum|enum
name|Mode
block|{
DECL|enum constant|STRAIGHT
DECL|enum constant|DEREF
DECL|enum constant|SORTED
name|STRAIGHT
block|,
name|DEREF
block|,
name|SORTED
block|}
empty_stmt|;
comment|// TODO -- i shouldn't have to specify fixed? can
comment|// track itself& do the write thing at write time?
DECL|method|getWriter
specifier|public
specifier|static
name|Writer
name|getWriter
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|id
parameter_list|,
name|Mode
name|mode
parameter_list|,
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|comp
parameter_list|,
name|boolean
name|fixedSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|comp
operator|==
literal|null
condition|)
block|{
name|comp
operator|=
name|BytesRef
operator|.
name|getUTF8SortedAsUnicodeComparator
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fixedSize
condition|)
block|{
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|STRAIGHT
condition|)
block|{
return|return
operator|new
name|FixedStraightBytesImpl
operator|.
name|Writer
argument_list|(
name|dir
argument_list|,
name|id
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|DEREF
condition|)
block|{
return|return
operator|new
name|FixedDerefBytesImpl
operator|.
name|Writer
argument_list|(
name|dir
argument_list|,
name|id
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|SORTED
condition|)
block|{
return|return
operator|new
name|FixedSortedBytesImpl
operator|.
name|Writer
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|comp
argument_list|)
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|STRAIGHT
condition|)
block|{
return|return
operator|new
name|VarStraightBytesImpl
operator|.
name|Writer
argument_list|(
name|dir
argument_list|,
name|id
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|DEREF
condition|)
block|{
return|return
operator|new
name|VarDerefBytesImpl
operator|.
name|Writer
argument_list|(
name|dir
argument_list|,
name|id
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|SORTED
condition|)
block|{
return|return
operator|new
name|VarSortedBytesImpl
operator|.
name|Writer
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|comp
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|""
argument_list|)
throw|;
block|}
comment|// nocommit -- I can peek @ header to determing fixed/mode?
DECL|method|getValues
specifier|public
specifier|static
name|DocValues
name|getValues
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|id
parameter_list|,
name|Mode
name|mode
parameter_list|,
name|boolean
name|fixedSize
parameter_list|,
name|int
name|maxDoc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fixedSize
condition|)
block|{
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|STRAIGHT
condition|)
block|{
try|try
block|{
return|return
operator|new
name|FixedStraightBytesImpl
operator|.
name|Reader
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|maxDoc
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|DEREF
condition|)
block|{
try|try
block|{
return|return
operator|new
name|FixedDerefBytesImpl
operator|.
name|Reader
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|maxDoc
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|SORTED
condition|)
block|{
return|return
operator|new
name|FixedSortedBytesImpl
operator|.
name|Reader
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|maxDoc
argument_list|)
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|STRAIGHT
condition|)
block|{
return|return
operator|new
name|VarStraightBytesImpl
operator|.
name|Reader
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|maxDoc
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|DEREF
condition|)
block|{
return|return
operator|new
name|VarDerefBytesImpl
operator|.
name|Reader
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|maxDoc
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|SORTED
condition|)
block|{
return|return
operator|new
name|VarSortedBytesImpl
operator|.
name|Reader
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|maxDoc
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|""
argument_list|)
throw|;
block|}
DECL|class|BytesBaseSource
specifier|static
specifier|abstract
class|class
name|BytesBaseSource
extends|extends
name|Source
block|{
DECL|field|datIn
specifier|protected
specifier|final
name|IndexInput
name|datIn
decl_stmt|;
DECL|field|idxIn
specifier|protected
specifier|final
name|IndexInput
name|idxIn
decl_stmt|;
DECL|field|defaultValue
specifier|protected
specifier|final
name|BytesRef
name|defaultValue
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|method|BytesBaseSource
specifier|protected
name|BytesBaseSource
parameter_list|(
name|IndexInput
name|datIn
parameter_list|,
name|IndexInput
name|idxIn
parameter_list|)
block|{
name|this
operator|.
name|datIn
operator|=
name|datIn
expr_stmt|;
name|this
operator|.
name|idxIn
operator|=
name|idxIn
expr_stmt|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|datIn
operator|!=
literal|null
condition|)
name|datIn
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|idxIn
operator|!=
literal|null
condition|)
comment|// if straight
name|idxIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|BytesBaseSortedSource
specifier|static
specifier|abstract
class|class
name|BytesBaseSortedSource
extends|extends
name|SortedSource
block|{
DECL|field|datIn
specifier|protected
specifier|final
name|IndexInput
name|datIn
decl_stmt|;
DECL|field|idxIn
specifier|protected
specifier|final
name|IndexInput
name|idxIn
decl_stmt|;
DECL|field|defaultValue
specifier|protected
specifier|final
name|BytesRef
name|defaultValue
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|method|BytesBaseSortedSource
specifier|protected
name|BytesBaseSortedSource
parameter_list|(
name|IndexInput
name|datIn
parameter_list|,
name|IndexInput
name|idxIn
parameter_list|)
block|{
name|this
operator|.
name|datIn
operator|=
name|datIn
expr_stmt|;
name|this
operator|.
name|idxIn
operator|=
name|idxIn
expr_stmt|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|datIn
operator|!=
literal|null
condition|)
name|datIn
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|idxIn
operator|!=
literal|null
condition|)
comment|// if straight
name|idxIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|BytesWriterBase
specifier|static
specifier|abstract
class|class
name|BytesWriterBase
extends|extends
name|Writer
block|{
DECL|field|dir
specifier|private
specifier|final
name|Directory
name|dir
decl_stmt|;
DECL|field|id
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
DECL|field|idxOut
specifier|protected
name|IndexOutput
name|idxOut
decl_stmt|;
DECL|field|datOut
specifier|protected
name|IndexOutput
name|datOut
decl_stmt|;
DECL|field|bytesRef
specifier|protected
name|BytesRef
name|bytesRef
decl_stmt|;
DECL|field|codecName
specifier|private
name|String
name|codecName
decl_stmt|;
DECL|field|version
specifier|private
name|int
name|version
decl_stmt|;
DECL|field|pool
specifier|protected
specifier|final
name|ByteBlockPool
name|pool
decl_stmt|;
DECL|field|bytesUsed
specifier|protected
specifier|final
name|AtomicLong
name|bytesUsed
decl_stmt|;
DECL|method|BytesWriterBase
specifier|protected
name|BytesWriterBase
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|codecName
parameter_list|,
name|int
name|version
parameter_list|,
name|boolean
name|initIndex
parameter_list|,
name|boolean
name|initData
parameter_list|,
name|ByteBlockPool
name|pool
parameter_list|,
name|AtomicLong
name|bytesUsed
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|codecName
operator|=
name|codecName
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
name|this
operator|.
name|bytesUsed
operator|=
name|bytesUsed
expr_stmt|;
if|if
condition|(
name|initData
condition|)
name|initDataOut
argument_list|()
expr_stmt|;
if|if
condition|(
name|initIndex
condition|)
name|initIndexOut
argument_list|()
expr_stmt|;
block|}
DECL|method|initDataOut
specifier|protected
name|void
name|initDataOut
parameter_list|()
throws|throws
name|IOException
block|{
name|datOut
operator|=
name|dir
operator|.
name|createOutput
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|id
argument_list|,
literal|""
argument_list|,
name|IndexFileNames
operator|.
name|CSF_DATA_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|writeHeader
argument_list|(
name|datOut
argument_list|,
name|codecName
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
DECL|method|initIndexOut
specifier|protected
name|void
name|initIndexOut
parameter_list|()
throws|throws
name|IOException
block|{
name|idxOut
operator|=
name|dir
operator|.
name|createOutput
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|id
argument_list|,
literal|""
argument_list|,
name|IndexFileNames
operator|.
name|CSF_INDEX_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|writeHeader
argument_list|(
name|idxOut
argument_list|,
name|codecName
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|bytesUsed
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * Must be called only with increasing docIDs. It's OK for some docIDs to be      * skipped; they will be filled with 0 bytes.      */
annotation|@
name|Override
DECL|method|add
specifier|public
specifier|abstract
name|void
name|add
parameter_list|(
name|int
name|docID
parameter_list|,
name|BytesRef
name|bytes
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|finish
specifier|public
specifier|synchronized
name|void
name|finish
parameter_list|(
name|int
name|docCount
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|datOut
operator|!=
literal|null
condition|)
name|datOut
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|idxOut
operator|!=
literal|null
condition|)
name|idxOut
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
name|pool
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|add
specifier|protected
name|void
name|add
parameter_list|(
name|int
name|docID
parameter_list|)
throws|throws
name|IOException
block|{
name|add
argument_list|(
name|docID
argument_list|,
name|bytesRef
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextAttribute
specifier|protected
name|void
name|setNextAttribute
parameter_list|(
name|ValuesAttribute
name|attr
parameter_list|)
block|{
name|bytesRef
operator|=
name|attr
operator|.
name|bytes
argument_list|()
expr_stmt|;
assert|assert
name|bytesRef
operator|!=
literal|null
assert|;
block|}
annotation|@
name|Override
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|int
name|docID
parameter_list|,
name|ValuesAttribute
name|attr
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BytesRef
name|ref
decl_stmt|;
if|if
condition|(
operator|(
name|ref
operator|=
name|attr
operator|.
name|bytes
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|add
argument_list|(
name|docID
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|files
specifier|public
name|void
name|files
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|files
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|datOut
operator|!=
literal|null
assert|;
name|files
operator|.
name|add
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|id
argument_list|,
literal|""
argument_list|,
name|IndexFileNames
operator|.
name|CSF_DATA_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|idxOut
operator|!=
literal|null
condition|)
block|{
comment|// called after flush - so this must be initialized if needed or present
specifier|final
name|String
name|idxFile
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|id
argument_list|,
literal|""
argument_list|,
name|IndexFileNames
operator|.
name|CSF_INDEX_EXTENSION
argument_list|)
decl_stmt|;
name|files
operator|.
name|add
argument_list|(
name|idxFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Opens all necessary files, but does not read any data in until you call    * {@link #load}.    */
DECL|class|BytesReaderBase
specifier|static
specifier|abstract
class|class
name|BytesReaderBase
extends|extends
name|DocValues
block|{
DECL|field|idxIn
specifier|protected
specifier|final
name|IndexInput
name|idxIn
decl_stmt|;
DECL|field|datIn
specifier|protected
specifier|final
name|IndexInput
name|datIn
decl_stmt|;
DECL|field|version
specifier|protected
specifier|final
name|int
name|version
decl_stmt|;
DECL|field|id
specifier|protected
specifier|final
name|String
name|id
decl_stmt|;
DECL|method|BytesReaderBase
specifier|protected
name|BytesReaderBase
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|codecName
parameter_list|,
name|int
name|maxVersion
parameter_list|,
name|boolean
name|doIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|datIn
operator|=
name|dir
operator|.
name|openInput
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|id
argument_list|,
literal|""
argument_list|,
name|IndexFileNames
operator|.
name|CSF_DATA_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|version
operator|=
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|datIn
argument_list|,
name|codecName
argument_list|,
name|maxVersion
argument_list|,
name|maxVersion
argument_list|)
expr_stmt|;
if|if
condition|(
name|doIndex
condition|)
block|{
name|idxIn
operator|=
name|dir
operator|.
name|openInput
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|id
argument_list|,
literal|""
argument_list|,
name|IndexFileNames
operator|.
name|CSF_INDEX_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|version2
init|=
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|idxIn
argument_list|,
name|codecName
argument_list|,
name|maxVersion
argument_list|,
name|maxVersion
argument_list|)
decl_stmt|;
assert|assert
name|version
operator|==
name|version2
assert|;
block|}
else|else
block|{
name|idxIn
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|cloneData
specifier|protected
specifier|final
name|IndexInput
name|cloneData
parameter_list|()
block|{
assert|assert
name|datIn
operator|!=
literal|null
assert|;
return|return
operator|(
name|IndexInput
operator|)
name|datIn
operator|.
name|clone
argument_list|()
return|;
block|}
DECL|method|cloneIndex
specifier|protected
specifier|final
name|IndexInput
name|cloneIndex
parameter_list|()
block|{
comment|// TODO assert here for null rather than return null
return|return
name|idxIn
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|IndexInput
operator|)
name|idxIn
operator|.
name|clone
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|datIn
operator|!=
literal|null
condition|)
block|{
name|datIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|idxIn
operator|!=
literal|null
condition|)
block|{
name|idxIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
