begin_unit
begin_package
DECL|package|org.apache.lucene.index.values
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|DocValues
operator|.
name|SortedSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|DocValues
operator|.
name|Source
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_comment
comment|/**  * Per {@link DocValues} {@link Source} cache.  */
end_comment
begin_class
DECL|class|SourceCache
specifier|public
specifier|abstract
class|class
name|SourceCache
block|{
DECL|method|load
specifier|public
specifier|abstract
name|Source
name|load
parameter_list|(
name|DocValues
name|values
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|laodSorted
specifier|public
specifier|abstract
name|SortedSource
name|laodSorted
parameter_list|(
name|DocValues
name|values
parameter_list|,
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|comp
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|invalidate
specifier|public
specifier|abstract
name|void
name|invalidate
parameter_list|(
name|DocValues
name|values
parameter_list|)
function_decl|;
DECL|method|close
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|(
name|DocValues
name|values
parameter_list|)
block|{
name|invalidate
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
DECL|class|DirectSourceCache
specifier|public
specifier|static
specifier|final
class|class
name|DirectSourceCache
extends|extends
name|SourceCache
block|{
DECL|field|ref
specifier|private
name|Source
name|ref
decl_stmt|;
DECL|field|sortedRef
specifier|private
name|SortedSource
name|sortedRef
decl_stmt|;
DECL|method|load
specifier|public
specifier|synchronized
name|Source
name|load
parameter_list|(
name|DocValues
name|values
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
name|ref
operator|=
name|values
operator|.
name|load
argument_list|()
expr_stmt|;
return|return
name|ref
return|;
block|}
DECL|method|laodSorted
specifier|public
specifier|synchronized
name|SortedSource
name|laodSorted
parameter_list|(
name|DocValues
name|values
parameter_list|,
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|comp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sortedRef
operator|==
literal|null
condition|)
name|sortedRef
operator|=
name|values
operator|.
name|loadSorted
argument_list|(
name|comp
argument_list|)
expr_stmt|;
return|return
name|sortedRef
return|;
block|}
DECL|method|invalidate
specifier|public
specifier|synchronized
name|void
name|invalidate
parameter_list|(
name|DocValues
name|values
parameter_list|)
block|{
name|ref
operator|=
literal|null
expr_stmt|;
name|sortedRef
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
