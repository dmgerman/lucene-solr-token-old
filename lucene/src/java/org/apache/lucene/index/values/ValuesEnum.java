begin_unit
begin_package
DECL|package|org.apache.lucene.index.values
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Attribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FloatsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LongsRef
import|;
end_import
begin_class
DECL|class|ValuesEnum
specifier|public
specifier|abstract
class|class
name|ValuesEnum
extends|extends
name|DocIdSetIterator
block|{
DECL|field|source
specifier|private
name|AttributeSource
name|source
decl_stmt|;
DECL|field|attr
specifier|protected
specifier|final
name|ValuesAttribute
name|attr
decl_stmt|;
DECL|method|ValuesEnum
specifier|protected
name|ValuesEnum
parameter_list|(
name|Values
name|enumType
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|enumType
argument_list|)
expr_stmt|;
block|}
DECL|method|ValuesEnum
specifier|protected
name|ValuesEnum
parameter_list|(
name|AttributeSource
name|source
parameter_list|,
name|Values
name|enumType
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|boolean
name|setType
init|=
operator|!
name|hasAttribute
argument_list|(
name|ValuesAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|attr
operator|=
name|addAttribute
argument_list|(
name|ValuesAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|setType
condition|)
name|attr
operator|.
name|setType
argument_list|(
name|enumType
argument_list|)
expr_stmt|;
block|}
DECL|method|type
specifier|public
name|Values
name|type
parameter_list|()
block|{
return|return
name|attr
operator|.
name|type
argument_list|()
return|;
block|}
DECL|method|bytes
specifier|public
name|BytesRef
name|bytes
parameter_list|()
block|{
return|return
name|attr
operator|.
name|bytes
argument_list|()
return|;
block|}
DECL|method|getFloat
specifier|public
name|FloatsRef
name|getFloat
parameter_list|()
block|{
return|return
name|attr
operator|.
name|floats
argument_list|()
return|;
block|}
DECL|method|getInt
specifier|public
name|LongsRef
name|getInt
parameter_list|()
block|{
return|return
name|attr
operator|.
name|ints
argument_list|()
return|;
block|}
DECL|method|attributes
specifier|public
name|AttributeSource
name|attributes
parameter_list|()
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
name|source
operator|=
operator|new
name|AttributeSource
argument_list|()
expr_stmt|;
return|return
name|source
return|;
block|}
DECL|method|addAttribute
specifier|public
parameter_list|<
name|T
extends|extends
name|Attribute
parameter_list|>
name|T
name|addAttribute
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|attr
parameter_list|)
block|{
return|return
name|attributes
argument_list|()
operator|.
name|addAttribute
argument_list|(
name|attr
argument_list|)
return|;
block|}
DECL|method|getAttribute
specifier|public
parameter_list|<
name|T
extends|extends
name|Attribute
parameter_list|>
name|T
name|getAttribute
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|attr
parameter_list|)
block|{
return|return
name|attributes
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|attr
argument_list|)
return|;
block|}
DECL|method|hasAttribute
specifier|public
parameter_list|<
name|T
extends|extends
name|Attribute
parameter_list|>
name|boolean
name|hasAttribute
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|attr
parameter_list|)
block|{
return|return
name|attributes
argument_list|()
operator|.
name|hasAttribute
argument_list|(
name|attr
argument_list|)
return|;
block|}
DECL|method|close
specifier|public
specifier|abstract
name|void
name|close
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|emptyEnum
specifier|public
specifier|static
name|ValuesEnum
name|emptyEnum
parameter_list|(
name|Values
name|type
parameter_list|)
block|{
return|return
operator|new
name|ValuesEnum
argument_list|(
name|type
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|NO_MORE_DOCS
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|NO_MORE_DOCS
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|NO_MORE_DOCS
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{                }
block|}
return|;
block|}
block|}
end_class
end_unit
