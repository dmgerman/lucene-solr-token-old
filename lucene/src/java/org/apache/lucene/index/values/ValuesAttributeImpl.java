begin_unit
begin_package
DECL|package|org.apache.lucene.index.values
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeImpl
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FloatsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LongsRef
import|;
end_import
begin_class
DECL|class|ValuesAttributeImpl
specifier|public
class|class
name|ValuesAttributeImpl
extends|extends
name|AttributeImpl
implements|implements
name|ValuesAttribute
block|{
DECL|field|type
specifier|private
name|Values
name|type
decl_stmt|;
DECL|field|bytes
specifier|private
name|BytesRef
name|bytes
init|=
literal|null
decl_stmt|;
DECL|field|floats
specifier|private
name|FloatsRef
name|floats
init|=
literal|null
decl_stmt|;
DECL|field|ints
specifier|private
name|LongsRef
name|ints
init|=
literal|null
decl_stmt|;
DECL|field|bytesComp
specifier|private
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|bytesComp
decl_stmt|;
DECL|method|bytes
specifier|public
name|BytesRef
name|bytes
parameter_list|()
block|{
return|return
name|bytes
return|;
block|}
DECL|method|floats
specifier|public
name|FloatsRef
name|floats
parameter_list|()
block|{
return|return
name|floats
return|;
block|}
DECL|method|ints
specifier|public
name|LongsRef
name|ints
parameter_list|()
block|{
return|return
name|ints
return|;
block|}
DECL|method|type
specifier|public
name|Values
name|type
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|setType
specifier|public
name|void
name|setType
parameter_list|(
name|Values
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|BYTES_FIXED_DEREF
case|:
case|case
name|BYTES_FIXED_SORTED
case|:
case|case
name|BYTES_FIXED_STRAIGHT
case|:
case|case
name|BYTES_VAR_DEREF
case|:
case|case
name|BYTES_VAR_SORTED
case|:
case|case
name|BYTES_VAR_STRAIGHT
case|:
name|bytes
operator|=
operator|new
name|BytesRef
argument_list|()
expr_stmt|;
name|ints
operator|=
literal|null
expr_stmt|;
name|floats
operator|=
literal|null
expr_stmt|;
break|break;
case|case
name|PACKED_INTS
case|:
name|ints
operator|=
operator|new
name|LongsRef
argument_list|(
operator|new
name|long
index|[
literal|1
index|]
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|bytes
operator|=
literal|null
expr_stmt|;
name|floats
operator|=
literal|null
expr_stmt|;
break|break;
case|case
name|SIMPLE_FLOAT_4BYTE
case|:
case|case
name|SIMPLE_FLOAT_8BYTE
case|:
name|floats
operator|=
operator|new
name|FloatsRef
argument_list|(
operator|new
name|double
index|[
literal|1
index|]
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ints
operator|=
literal|null
expr_stmt|;
name|bytes
operator|=
literal|null
expr_stmt|;
break|break;
block|}
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|bytes
operator|=
literal|null
expr_stmt|;
name|ints
operator|=
literal|null
expr_stmt|;
name|floats
operator|=
literal|null
expr_stmt|;
name|type
operator|=
literal|null
expr_stmt|;
name|bytesComp
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|copyTo
specifier|public
name|void
name|copyTo
parameter_list|(
name|AttributeImpl
name|target
parameter_list|)
block|{
name|ValuesAttributeImpl
name|other
init|=
operator|(
name|ValuesAttributeImpl
operator|)
name|target
decl_stmt|;
name|other
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|BYTES_FIXED_DEREF
case|:
case|case
name|BYTES_FIXED_SORTED
case|:
case|case
name|BYTES_FIXED_STRAIGHT
case|:
case|case
name|BYTES_VAR_DEREF
case|:
case|case
name|BYTES_VAR_SORTED
case|:
case|case
name|BYTES_VAR_STRAIGHT
case|:
name|other
operator|.
name|bytes
operator|.
name|copy
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
break|break;
case|case
name|PACKED_INTS
case|:
name|other
operator|.
name|ints
operator|.
name|copy
argument_list|(
name|ints
argument_list|)
expr_stmt|;
break|break;
case|case
name|SIMPLE_FLOAT_4BYTE
case|:
case|case
name|SIMPLE_FLOAT_8BYTE
case|:
name|other
operator|.
name|floats
operator|.
name|copy
argument_list|(
name|floats
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|0
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|bytes
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|bytes
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|floats
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|floats
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|ints
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|ints
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|type
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|type
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|ValuesAttributeImpl
name|other
init|=
operator|(
name|ValuesAttributeImpl
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|bytes
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|bytes
operator|.
name|equals
argument_list|(
name|other
operator|.
name|bytes
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|floats
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|floats
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|floats
operator|.
name|equals
argument_list|(
name|other
operator|.
name|floats
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|ints
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|ints
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|ints
operator|.
name|equals
argument_list|(
name|other
operator|.
name|ints
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|type
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|type
operator|.
name|equals
argument_list|(
name|other
operator|.
name|type
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
DECL|method|bytesComparator
specifier|public
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|bytesComparator
parameter_list|()
block|{
return|return
name|bytesComp
return|;
block|}
DECL|method|setBytesComparator
specifier|public
name|void
name|setBytesComparator
parameter_list|(
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|comp
parameter_list|)
block|{
name|bytesComp
operator|=
name|comp
expr_stmt|;
block|}
block|}
end_class
end_unit
