begin_unit
begin_package
DECL|package|org.apache.lucene.index.values
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|FixedStraightBytesImpl
operator|.
name|FixedStraightBytesEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|IndexDocValues
operator|.
name|Source
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|IndexDocValues
operator|.
name|SourceEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment
begin_comment
comment|/**  * @lucene.experimental  */
end_comment
begin_class
DECL|class|IndexDocValuesArray
specifier|abstract
class|class
name|IndexDocValuesArray
extends|extends
name|Source
block|{
DECL|field|bytesPerValue
specifier|protected
specifier|final
name|int
name|bytesPerValue
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
name|ValueType
name|type
decl_stmt|;
DECL|field|isFloat
specifier|private
specifier|final
name|boolean
name|isFloat
decl_stmt|;
DECL|field|maxDocID
specifier|protected
name|int
name|maxDocID
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|IndexDocValuesArray
name|IndexDocValuesArray
parameter_list|(
name|int
name|bytesPerValue
parameter_list|,
name|ValueType
name|type
parameter_list|)
block|{
name|this
operator|.
name|bytesPerValue
operator|=
name|bytesPerValue
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|FIXED_INTS_16
case|:
case|case
name|FIXED_INTS_32
case|:
case|case
name|FIXED_INTS_64
case|:
case|case
name|FIXED_INTS_8
case|:
name|isFloat
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|FLOAT_32
case|:
case|case
name|FLOAT_64
case|:
name|isFloat
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"illegal type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
DECL|method|newFromInput
specifier|public
specifier|abstract
name|IndexDocValuesArray
name|newFromInput
parameter_list|(
name|IndexInput
name|input
parameter_list|,
name|int
name|numDocs
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|getValueCount
specifier|public
specifier|final
name|int
name|getValueCount
parameter_list|()
block|{
return|return
name|maxDocID
operator|+
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|type
specifier|public
specifier|final
name|ValueType
name|type
parameter_list|()
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Override
DECL|method|getEnum
specifier|public
name|ValuesEnum
name|getEnum
parameter_list|(
name|AttributeSource
name|attrSource
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isFloat
condition|)
block|{
return|return
operator|new
name|SourceEnum
argument_list|(
name|attrSource
argument_list|,
name|type
argument_list|()
argument_list|,
name|this
argument_list|,
name|maxDocID
operator|+
literal|1
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|target
operator|>=
name|numDocs
condition|)
block|{
return|return
name|pos
operator|=
name|NO_MORE_DOCS
return|;
block|}
name|floatsRef
operator|.
name|floats
index|[
name|intsRef
operator|.
name|offset
index|]
operator|=
name|IndexDocValuesArray
operator|.
name|this
operator|.
name|getFloat
argument_list|(
name|target
argument_list|)
expr_stmt|;
return|return
name|pos
operator|=
name|target
return|;
block|}
block|}
return|;
block|}
else|else
block|{
return|return
operator|new
name|SourceEnum
argument_list|(
name|attrSource
argument_list|,
name|type
argument_list|()
argument_list|,
name|this
argument_list|,
name|maxDocID
operator|+
literal|1
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|target
operator|>=
name|numDocs
condition|)
block|{
return|return
name|pos
operator|=
name|NO_MORE_DOCS
return|;
block|}
name|intsRef
operator|.
name|ints
index|[
name|intsRef
operator|.
name|offset
index|]
operator|=
name|IndexDocValuesArray
operator|.
name|this
operator|.
name|getInt
argument_list|(
name|target
argument_list|)
expr_stmt|;
return|return
name|pos
operator|=
name|target
return|;
block|}
block|}
return|;
block|}
block|}
DECL|method|getDirectEnum
specifier|abstract
name|ValuesEnum
name|getDirectEnum
parameter_list|(
name|AttributeSource
name|attrSource
parameter_list|,
name|IndexInput
name|input
parameter_list|,
name|int
name|maxDoc
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|hasArray
specifier|public
specifier|final
name|boolean
name|hasArray
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|class|ByteValues
specifier|final
specifier|static
class|class
name|ByteValues
extends|extends
name|IndexDocValuesArray
block|{
DECL|field|values
specifier|private
specifier|final
name|byte
index|[]
name|values
decl_stmt|;
DECL|method|ByteValues
name|ByteValues
parameter_list|()
block|{
name|super
argument_list|(
literal|1
argument_list|,
name|ValueType
operator|.
name|FIXED_INTS_8
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
block|}
DECL|method|ByteValues
specifier|private
name|ByteValues
parameter_list|(
name|IndexInput
name|input
parameter_list|,
name|int
name|numDocs
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
literal|1
argument_list|,
name|ValueType
operator|.
name|FIXED_INTS_8
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|byte
index|[
name|numDocs
index|]
expr_stmt|;
name|input
operator|.
name|readBytes
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|values
operator|.
name|length
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|maxDocID
operator|=
name|numDocs
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getArray
specifier|public
name|byte
index|[]
name|getArray
parameter_list|()
block|{
return|return
name|values
return|;
block|}
annotation|@
name|Override
DECL|method|getInt
specifier|public
name|long
name|getInt
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
assert|assert
name|docID
operator|>=
literal|0
operator|&&
name|docID
operator|<
name|values
operator|.
name|length
assert|;
return|return
name|values
index|[
name|docID
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getDirectEnum
name|ValuesEnum
name|getDirectEnum
parameter_list|(
name|AttributeSource
name|attrSource
parameter_list|,
name|IndexInput
name|input
parameter_list|,
name|int
name|maxDoc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FixedIntsEnum
argument_list|(
name|attrSource
argument_list|,
name|input
argument_list|,
name|type
argument_list|()
argument_list|,
name|bytesPerValue
argument_list|,
name|maxDoc
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
specifier|final
name|long
name|toLong
parameter_list|(
name|BytesRef
name|bytesRef
parameter_list|)
block|{
return|return
name|bytesRef
operator|.
name|bytes
index|[
name|bytesRef
operator|.
name|offset
index|]
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|newFromInput
specifier|public
name|IndexDocValuesArray
name|newFromInput
parameter_list|(
name|IndexInput
name|input
parameter_list|,
name|int
name|numDocs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ByteValues
argument_list|(
name|input
argument_list|,
name|numDocs
argument_list|)
return|;
block|}
block|}
empty_stmt|;
DECL|class|ShortValues
specifier|final
specifier|static
class|class
name|ShortValues
extends|extends
name|IndexDocValuesArray
block|{
DECL|field|values
specifier|private
specifier|final
name|short
index|[]
name|values
decl_stmt|;
DECL|method|ShortValues
name|ShortValues
parameter_list|()
block|{
name|super
argument_list|(
name|RamUsageEstimator
operator|.
name|NUM_BYTES_SHORT
argument_list|,
name|ValueType
operator|.
name|FIXED_INTS_16
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|short
index|[
literal|0
index|]
expr_stmt|;
block|}
DECL|method|ShortValues
specifier|private
name|ShortValues
parameter_list|(
name|IndexInput
name|input
parameter_list|,
name|int
name|numDocs
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|RamUsageEstimator
operator|.
name|NUM_BYTES_SHORT
argument_list|,
name|ValueType
operator|.
name|FIXED_INTS_16
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|short
index|[
name|numDocs
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|input
operator|.
name|readShort
argument_list|()
expr_stmt|;
block|}
name|maxDocID
operator|=
name|numDocs
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getArray
specifier|public
name|short
index|[]
name|getArray
parameter_list|()
block|{
return|return
name|values
return|;
block|}
annotation|@
name|Override
DECL|method|getInt
specifier|public
name|long
name|getInt
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
assert|assert
name|docID
operator|>=
literal|0
operator|&&
name|docID
operator|<
name|values
operator|.
name|length
assert|;
return|return
name|values
index|[
name|docID
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getDirectEnum
name|ValuesEnum
name|getDirectEnum
parameter_list|(
name|AttributeSource
name|attrSource
parameter_list|,
name|IndexInput
name|input
parameter_list|,
name|int
name|maxDoc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FixedIntsEnum
argument_list|(
name|attrSource
argument_list|,
name|input
argument_list|,
name|type
argument_list|()
argument_list|,
name|bytesPerValue
argument_list|,
name|maxDoc
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
specifier|final
name|long
name|toLong
parameter_list|(
name|BytesRef
name|bytesRef
parameter_list|)
block|{
return|return
name|bytesRef
operator|.
name|asShort
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|newFromInput
specifier|public
name|IndexDocValuesArray
name|newFromInput
parameter_list|(
name|IndexInput
name|input
parameter_list|,
name|int
name|numDocs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ShortValues
argument_list|(
name|input
argument_list|,
name|numDocs
argument_list|)
return|;
block|}
block|}
empty_stmt|;
DECL|class|IntValues
specifier|final
specifier|static
class|class
name|IntValues
extends|extends
name|IndexDocValuesArray
block|{
DECL|field|values
specifier|private
specifier|final
name|int
index|[]
name|values
decl_stmt|;
DECL|method|IntValues
name|IntValues
parameter_list|()
block|{
name|super
argument_list|(
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
argument_list|,
name|ValueType
operator|.
name|FIXED_INTS_32
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|int
index|[
literal|0
index|]
expr_stmt|;
block|}
DECL|method|IntValues
specifier|private
name|IntValues
parameter_list|(
name|IndexInput
name|input
parameter_list|,
name|int
name|numDocs
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
argument_list|,
name|ValueType
operator|.
name|FIXED_INTS_32
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|int
index|[
name|numDocs
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|input
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
name|maxDocID
operator|=
name|numDocs
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getArray
specifier|public
name|int
index|[]
name|getArray
parameter_list|()
block|{
return|return
name|values
return|;
block|}
annotation|@
name|Override
DECL|method|getInt
specifier|public
name|long
name|getInt
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
assert|assert
name|docID
operator|>=
literal|0
operator|&&
name|docID
operator|<
name|values
operator|.
name|length
assert|;
return|return
literal|0xFFFFFFFF
operator|&
name|values
index|[
name|docID
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getDirectEnum
name|ValuesEnum
name|getDirectEnum
parameter_list|(
name|AttributeSource
name|attrSource
parameter_list|,
name|IndexInput
name|input
parameter_list|,
name|int
name|maxDoc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FixedIntsEnum
argument_list|(
name|attrSource
argument_list|,
name|input
argument_list|,
name|type
argument_list|()
argument_list|,
name|bytesPerValue
argument_list|,
name|maxDoc
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
specifier|final
name|long
name|toLong
parameter_list|(
name|BytesRef
name|bytesRef
parameter_list|)
block|{
return|return
name|bytesRef
operator|.
name|asInt
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|newFromInput
specifier|public
name|IndexDocValuesArray
name|newFromInput
parameter_list|(
name|IndexInput
name|input
parameter_list|,
name|int
name|numDocs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|IntValues
argument_list|(
name|input
argument_list|,
name|numDocs
argument_list|)
return|;
block|}
block|}
empty_stmt|;
DECL|class|LongValues
specifier|final
specifier|static
class|class
name|LongValues
extends|extends
name|IndexDocValuesArray
block|{
DECL|field|values
specifier|private
specifier|final
name|long
index|[]
name|values
decl_stmt|;
DECL|method|LongValues
name|LongValues
parameter_list|()
block|{
name|super
argument_list|(
name|RamUsageEstimator
operator|.
name|NUM_BYTES_LONG
argument_list|,
name|ValueType
operator|.
name|FIXED_INTS_64
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|long
index|[
literal|0
index|]
expr_stmt|;
block|}
DECL|method|LongValues
specifier|private
name|LongValues
parameter_list|(
name|IndexInput
name|input
parameter_list|,
name|int
name|numDocs
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|RamUsageEstimator
operator|.
name|NUM_BYTES_LONG
argument_list|,
name|ValueType
operator|.
name|FIXED_INTS_64
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|long
index|[
name|numDocs
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|input
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
name|maxDocID
operator|=
name|numDocs
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getArray
specifier|public
name|long
index|[]
name|getArray
parameter_list|()
block|{
return|return
name|values
return|;
block|}
annotation|@
name|Override
DECL|method|getInt
specifier|public
name|long
name|getInt
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
assert|assert
name|docID
operator|>=
literal|0
operator|&&
name|docID
operator|<
name|values
operator|.
name|length
assert|;
return|return
name|values
index|[
name|docID
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getDirectEnum
name|ValuesEnum
name|getDirectEnum
parameter_list|(
name|AttributeSource
name|attrSource
parameter_list|,
name|IndexInput
name|input
parameter_list|,
name|int
name|maxDoc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FixedIntsEnum
argument_list|(
name|attrSource
argument_list|,
name|input
argument_list|,
name|type
argument_list|()
argument_list|,
name|bytesPerValue
argument_list|,
name|maxDoc
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
specifier|final
name|long
name|toLong
parameter_list|(
name|BytesRef
name|bytesRef
parameter_list|)
block|{
return|return
name|bytesRef
operator|.
name|asLong
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|newFromInput
specifier|public
name|IndexDocValuesArray
name|newFromInput
parameter_list|(
name|IndexInput
name|input
parameter_list|,
name|int
name|numDocs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|LongValues
argument_list|(
name|input
argument_list|,
name|numDocs
argument_list|)
return|;
block|}
block|}
empty_stmt|;
DECL|class|FloatValues
specifier|final
specifier|static
class|class
name|FloatValues
extends|extends
name|IndexDocValuesArray
block|{
DECL|field|values
specifier|private
specifier|final
name|float
index|[]
name|values
decl_stmt|;
DECL|method|FloatValues
name|FloatValues
parameter_list|()
block|{
name|super
argument_list|(
name|RamUsageEstimator
operator|.
name|NUM_BYTES_FLOAT
argument_list|,
name|ValueType
operator|.
name|FLOAT_32
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|float
index|[
literal|0
index|]
expr_stmt|;
block|}
DECL|method|FloatValues
specifier|private
name|FloatValues
parameter_list|(
name|IndexInput
name|input
parameter_list|,
name|int
name|numDocs
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|RamUsageEstimator
operator|.
name|NUM_BYTES_FLOAT
argument_list|,
name|ValueType
operator|.
name|FLOAT_32
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|float
index|[
name|numDocs
index|]
expr_stmt|;
comment|/* we always read BIG_ENDIAN here since the writer serialized plain bytes        * we can simply read the ints / longs        * back in using readInt / readLong */
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|input
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|maxDocID
operator|=
name|numDocs
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getArray
specifier|public
name|float
index|[]
name|getArray
parameter_list|()
block|{
return|return
name|values
return|;
block|}
annotation|@
name|Override
DECL|method|getFloat
specifier|public
name|double
name|getFloat
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
assert|assert
name|docID
operator|>=
literal|0
operator|&&
name|docID
operator|<
name|values
operator|.
name|length
assert|;
return|return
name|values
index|[
name|docID
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getDirectEnum
name|ValuesEnum
name|getDirectEnum
parameter_list|(
name|AttributeSource
name|attrSource
parameter_list|,
name|IndexInput
name|input
parameter_list|,
name|int
name|maxDoc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FloatsEnum
argument_list|(
name|attrSource
argument_list|,
name|input
argument_list|,
name|type
argument_list|()
argument_list|,
name|bytesPerValue
argument_list|,
name|maxDoc
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|double
name|toDouble
parameter_list|(
name|BytesRef
name|bytesRef
parameter_list|)
block|{
return|return
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|bytesRef
operator|.
name|asInt
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|newFromInput
specifier|public
name|IndexDocValuesArray
name|newFromInput
parameter_list|(
name|IndexInput
name|input
parameter_list|,
name|int
name|numDocs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FloatValues
argument_list|(
name|input
argument_list|,
name|numDocs
argument_list|)
return|;
block|}
block|}
empty_stmt|;
DECL|class|DoubleValues
specifier|final
specifier|static
class|class
name|DoubleValues
extends|extends
name|IndexDocValuesArray
block|{
DECL|field|values
specifier|private
specifier|final
name|double
index|[]
name|values
decl_stmt|;
DECL|method|DoubleValues
name|DoubleValues
parameter_list|()
block|{
name|super
argument_list|(
name|RamUsageEstimator
operator|.
name|NUM_BYTES_DOUBLE
argument_list|,
name|ValueType
operator|.
name|FLOAT_64
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|double
index|[
literal|0
index|]
expr_stmt|;
block|}
DECL|method|DoubleValues
specifier|private
name|DoubleValues
parameter_list|(
name|IndexInput
name|input
parameter_list|,
name|int
name|numDocs
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|RamUsageEstimator
operator|.
name|NUM_BYTES_DOUBLE
argument_list|,
name|ValueType
operator|.
name|FLOAT_64
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|double
index|[
name|numDocs
index|]
expr_stmt|;
comment|/* we always read BIG_ENDIAN here since the writer serialized plain bytes        * we can simply read the ints / longs        * back in using readInt / readLong */
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|input
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|maxDocID
operator|=
name|numDocs
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getArray
specifier|public
name|double
index|[]
name|getArray
parameter_list|()
block|{
return|return
name|values
return|;
block|}
annotation|@
name|Override
DECL|method|getFloat
specifier|public
name|double
name|getFloat
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
assert|assert
name|docID
operator|>=
literal|0
operator|&&
name|docID
operator|<
name|values
operator|.
name|length
assert|;
return|return
name|values
index|[
name|docID
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getDirectEnum
name|ValuesEnum
name|getDirectEnum
parameter_list|(
name|AttributeSource
name|attrSource
parameter_list|,
name|IndexInput
name|input
parameter_list|,
name|int
name|maxDoc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FloatsEnum
argument_list|(
name|attrSource
argument_list|,
name|input
argument_list|,
name|type
argument_list|()
argument_list|,
name|bytesPerValue
argument_list|,
name|maxDoc
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|double
name|toDouble
parameter_list|(
name|BytesRef
name|bytesRef
parameter_list|)
block|{
return|return
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|bytesRef
operator|.
name|asLong
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|newFromInput
specifier|public
name|IndexDocValuesArray
name|newFromInput
parameter_list|(
name|IndexInput
name|input
parameter_list|,
name|int
name|numDocs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|DoubleValues
argument_list|(
name|input
argument_list|,
name|numDocs
argument_list|)
return|;
block|}
block|}
empty_stmt|;
DECL|class|FixedIntsEnum
specifier|private
specifier|abstract
specifier|static
class|class
name|FixedIntsEnum
extends|extends
name|FixedStraightBytesEnum
block|{
DECL|field|type
specifier|private
specifier|final
name|ValueType
name|type
decl_stmt|;
DECL|method|FixedIntsEnum
specifier|private
name|FixedIntsEnum
parameter_list|(
name|AttributeSource
name|source
parameter_list|,
name|IndexInput
name|dataIn
parameter_list|,
name|ValueType
name|type
parameter_list|,
name|int
name|bytesPerValue
parameter_list|,
name|int
name|maxDoc
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|source
argument_list|,
name|dataIn
argument_list|,
name|bytesPerValue
argument_list|,
name|maxDoc
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|advance
init|=
name|super
operator|.
name|advance
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|advance
operator|!=
name|NO_MORE_DOCS
condition|)
block|{
name|intsRef
operator|.
name|ints
index|[
literal|0
index|]
operator|=
name|toLong
argument_list|(
name|this
operator|.
name|bytesRef
argument_list|)
expr_stmt|;
block|}
return|return
name|advance
return|;
block|}
DECL|method|toLong
specifier|protected
specifier|abstract
name|long
name|toLong
parameter_list|(
name|BytesRef
name|bytesRef
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|type
specifier|public
name|ValueType
name|type
parameter_list|()
block|{
return|return
name|type
return|;
block|}
block|}
DECL|class|FloatsEnum
specifier|private
specifier|abstract
specifier|static
class|class
name|FloatsEnum
extends|extends
name|FixedStraightBytesEnum
block|{
DECL|field|type
specifier|private
specifier|final
name|ValueType
name|type
decl_stmt|;
DECL|method|FloatsEnum
name|FloatsEnum
parameter_list|(
name|AttributeSource
name|source
parameter_list|,
name|IndexInput
name|dataIn
parameter_list|,
name|ValueType
name|type
parameter_list|,
name|int
name|bytePerValue
parameter_list|,
name|int
name|maxDoc
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|source
argument_list|,
name|dataIn
argument_list|,
name|bytePerValue
argument_list|,
name|maxDoc
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|retVal
init|=
name|super
operator|.
name|advance
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|retVal
operator|!=
name|NO_MORE_DOCS
condition|)
block|{
name|floatsRef
operator|.
name|floats
index|[
name|floatsRef
operator|.
name|offset
index|]
operator|=
name|toDouble
argument_list|(
name|bytesRef
argument_list|)
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
DECL|method|toDouble
specifier|protected
specifier|abstract
name|double
name|toDouble
parameter_list|(
name|BytesRef
name|bytesRef
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|type
specifier|public
name|ValueType
name|type
parameter_list|()
block|{
return|return
name|type
return|;
block|}
block|}
block|}
end_class
end_unit
