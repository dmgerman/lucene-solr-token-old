begin_unit
begin_package
DECL|package|org.apache.lucene.index.values
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|IndexDocValues
operator|.
name|Source
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|IndexDocValues
operator|.
name|SourceEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LongsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment
begin_comment
comment|/**  * @lucene.experimental  */
end_comment
begin_class
DECL|class|IndexDocValuesArray
specifier|abstract
class|class
name|IndexDocValuesArray
extends|extends
name|Source
block|{
DECL|field|bytesUsed
specifier|private
specifier|final
name|AtomicLong
name|bytesUsed
decl_stmt|;
DECL|field|bytesPerValue
specifier|private
specifier|final
name|int
name|bytesPerValue
decl_stmt|;
DECL|field|size
specifier|private
name|int
name|size
init|=
literal|0
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
name|ValueType
name|type
decl_stmt|;
DECL|field|maxDocID
specifier|protected
name|int
name|maxDocID
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|IndexDocValuesArray
name|IndexDocValuesArray
parameter_list|(
name|AtomicLong
name|bytesUsed
parameter_list|,
name|int
name|bytesPerValue
parameter_list|,
name|ValueType
name|type
parameter_list|)
block|{
name|this
operator|.
name|bytesUsed
operator|=
name|bytesUsed
expr_stmt|;
name|this
operator|.
name|bytesPerValue
operator|=
name|bytesPerValue
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
DECL|method|set
name|void
name|set
parameter_list|(
name|int
name|docId
parameter_list|,
name|long
name|value
parameter_list|)
block|{
if|if
condition|(
name|docId
operator|>=
name|size
condition|)
block|{
name|adjustSize
argument_list|(
name|grow
argument_list|(
name|docId
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|docId
operator|>
name|maxDocID
condition|)
block|{
name|maxDocID
operator|=
name|docId
expr_stmt|;
block|}
name|setInternal
argument_list|(
name|docId
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|adjustSize
specifier|protected
specifier|final
name|void
name|adjustSize
parameter_list|(
name|int
name|newSize
parameter_list|)
block|{
name|bytesUsed
operator|.
name|addAndGet
argument_list|(
name|bytesPerValue
operator|*
operator|(
name|newSize
operator|-
name|size
operator|)
argument_list|)
expr_stmt|;
name|size
operator|=
name|newSize
expr_stmt|;
block|}
DECL|method|clear
name|void
name|clear
parameter_list|()
block|{
name|adjustSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|maxDocID
operator|=
operator|-
literal|1
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|setInternal
specifier|protected
specifier|abstract
name|void
name|setInternal
parameter_list|(
name|int
name|docId
parameter_list|,
name|long
name|value
parameter_list|)
function_decl|;
DECL|method|grow
specifier|protected
specifier|abstract
name|int
name|grow
parameter_list|(
name|int
name|numDocs
parameter_list|)
function_decl|;
DECL|method|write
specifier|abstract
name|void
name|write
parameter_list|(
name|IndexOutput
name|output
parameter_list|,
name|int
name|numDocs
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|getValueCount
specifier|public
specifier|final
name|int
name|getValueCount
parameter_list|()
block|{
return|return
name|maxDocID
operator|+
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|type
specifier|public
specifier|final
name|ValueType
name|type
parameter_list|()
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Override
DECL|method|getEnum
specifier|public
name|ValuesEnum
name|getEnum
parameter_list|(
name|AttributeSource
name|attrSource
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|SourceEnum
argument_list|(
name|attrSource
argument_list|,
name|type
argument_list|()
argument_list|,
name|this
argument_list|,
name|maxDocID
operator|+
literal|1
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|target
operator|>=
name|numDocs
condition|)
block|{
return|return
name|pos
operator|=
name|NO_MORE_DOCS
return|;
block|}
name|intsRef
operator|.
name|ints
index|[
name|intsRef
operator|.
name|offset
index|]
operator|=
name|IndexDocValuesArray
operator|.
name|this
operator|.
name|getInt
argument_list|(
name|target
argument_list|)
expr_stmt|;
return|return
name|pos
operator|=
name|target
return|;
block|}
block|}
return|;
block|}
DECL|method|getDirectEnum
specifier|abstract
name|ValuesEnum
name|getDirectEnum
parameter_list|(
name|AttributeSource
name|attrSource
parameter_list|,
name|IndexInput
name|input
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|hasArray
specifier|public
specifier|final
name|boolean
name|hasArray
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|class|ByteValues
specifier|final
specifier|static
class|class
name|ByteValues
extends|extends
name|IndexDocValuesArray
block|{
DECL|field|values
specifier|private
name|byte
index|[]
name|values
decl_stmt|;
DECL|method|ByteValues
name|ByteValues
parameter_list|(
name|AtomicLong
name|bytesUsed
parameter_list|)
block|{
name|super
argument_list|(
name|bytesUsed
argument_list|,
literal|1
argument_list|,
name|ValueType
operator|.
name|FIXED_INTS_8
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
block|}
DECL|method|ByteValues
name|ByteValues
parameter_list|(
name|IndexInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
operator|new
name|AtomicLong
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ValueType
operator|.
name|FIXED_INTS_8
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|input
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|values
operator|=
operator|new
name|byte
index|[
name|numDocs
index|]
expr_stmt|;
name|adjustSize
argument_list|(
name|numDocs
argument_list|)
expr_stmt|;
name|input
operator|.
name|readBytes
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|values
operator|.
name|length
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|maxDocID
operator|=
name|numDocs
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getArray
specifier|public
name|byte
index|[]
name|getArray
parameter_list|()
block|{
return|return
name|values
return|;
block|}
annotation|@
name|Override
DECL|method|getInt
specifier|public
name|long
name|getInt
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
assert|assert
name|docID
operator|>=
literal|0
operator|&&
name|docID
operator|<
name|values
operator|.
name|length
assert|;
return|return
name|values
index|[
name|docID
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|setInternal
specifier|protected
name|void
name|setInternal
parameter_list|(
name|int
name|docId
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|values
index|[
name|docId
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0xFFL
operator|&
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|grow
specifier|protected
name|int
name|grow
parameter_list|(
name|int
name|numDocs
parameter_list|)
block|{
name|values
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|values
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
return|return
name|values
operator|.
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|write
name|void
name|write
parameter_list|(
name|IndexOutput
name|output
parameter_list|,
name|int
name|numDocs
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|maxDocID
operator|+
literal|1
operator|<=
name|numDocs
assert|;
name|output
operator|.
name|writeInt
argument_list|(
name|numDocs
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeBytes
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|maxDocID
operator|+
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|byte
name|zero
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|maxDocID
operator|+
literal|1
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|writeByte
argument_list|(
name|zero
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDirectEnum
name|ValuesEnum
name|getDirectEnum
parameter_list|(
name|AttributeSource
name|attrSource
parameter_list|,
name|IndexInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FixedIntsEnumImpl
argument_list|(
name|attrSource
argument_list|,
name|input
argument_list|,
name|type
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|fillNext
parameter_list|(
name|LongsRef
name|ref
parameter_list|,
name|IndexInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|ref
operator|.
name|ints
index|[
name|ref
operator|.
name|offset
index|]
operator|=
name|dataIn
operator|.
name|readByte
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|clear
name|void
name|clear
parameter_list|()
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|values
operator|=
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
empty_stmt|;
DECL|class|ShortValues
specifier|final
specifier|static
class|class
name|ShortValues
extends|extends
name|IndexDocValuesArray
block|{
DECL|field|values
specifier|private
name|short
index|[]
name|values
decl_stmt|;
DECL|method|ShortValues
name|ShortValues
parameter_list|(
name|AtomicLong
name|bytesUsed
parameter_list|)
block|{
name|super
argument_list|(
name|bytesUsed
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_SHORT
argument_list|,
name|ValueType
operator|.
name|FIXED_INTS_16
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|short
index|[
literal|0
index|]
expr_stmt|;
block|}
DECL|method|ShortValues
name|ShortValues
parameter_list|(
name|IndexInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
operator|new
name|AtomicLong
argument_list|()
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_SHORT
argument_list|,
name|ValueType
operator|.
name|FIXED_INTS_16
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|input
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|values
operator|=
operator|new
name|short
index|[
name|numDocs
index|]
expr_stmt|;
name|adjustSize
argument_list|(
name|numDocs
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|input
operator|.
name|readShort
argument_list|()
expr_stmt|;
block|}
name|maxDocID
operator|=
name|numDocs
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getArray
specifier|public
name|short
index|[]
name|getArray
parameter_list|()
block|{
return|return
name|values
return|;
block|}
annotation|@
name|Override
DECL|method|getInt
specifier|public
name|long
name|getInt
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
assert|assert
name|docID
operator|>=
literal|0
operator|&&
name|docID
operator|<
name|values
operator|.
name|length
assert|;
return|return
name|values
index|[
name|docID
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|setInternal
specifier|protected
name|void
name|setInternal
parameter_list|(
name|int
name|docId
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|values
index|[
name|docId
index|]
operator|=
call|(
name|short
call|)
argument_list|(
literal|0xFFFF
operator|&
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|grow
specifier|protected
name|int
name|grow
parameter_list|(
name|int
name|numDocs
parameter_list|)
block|{
name|values
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|values
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
return|return
name|values
operator|.
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|write
name|void
name|write
parameter_list|(
name|IndexOutput
name|output
parameter_list|,
name|int
name|numDocs
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|maxDocID
operator|+
literal|1
operator|<=
name|numDocs
assert|;
name|output
operator|.
name|writeInt
argument_list|(
name|numDocs
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDocID
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|writeShort
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
specifier|final
name|short
name|zero
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|maxDocID
operator|+
literal|1
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|writeShort
argument_list|(
name|zero
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDirectEnum
name|ValuesEnum
name|getDirectEnum
parameter_list|(
name|AttributeSource
name|attrSource
parameter_list|,
name|IndexInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FixedIntsEnumImpl
argument_list|(
name|attrSource
argument_list|,
name|input
argument_list|,
name|type
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|fillNext
parameter_list|(
name|LongsRef
name|ref
parameter_list|,
name|IndexInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|ref
operator|.
name|ints
index|[
name|ref
operator|.
name|offset
index|]
operator|=
name|dataIn
operator|.
name|readShort
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|clear
name|void
name|clear
parameter_list|()
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|values
operator|=
operator|new
name|short
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
empty_stmt|;
DECL|class|IntValues
specifier|final
specifier|static
class|class
name|IntValues
extends|extends
name|IndexDocValuesArray
block|{
DECL|field|values
specifier|private
name|int
index|[]
name|values
decl_stmt|;
DECL|method|IntValues
name|IntValues
parameter_list|(
name|AtomicLong
name|bytesUsed
parameter_list|)
block|{
name|super
argument_list|(
name|bytesUsed
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
argument_list|,
name|ValueType
operator|.
name|FIXED_INTS_32
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|int
index|[
literal|0
index|]
expr_stmt|;
block|}
DECL|method|IntValues
name|IntValues
parameter_list|(
name|IndexInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
operator|new
name|AtomicLong
argument_list|()
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
argument_list|,
name|ValueType
operator|.
name|FIXED_INTS_32
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|input
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|values
operator|=
operator|new
name|int
index|[
name|numDocs
index|]
expr_stmt|;
name|adjustSize
argument_list|(
name|numDocs
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|input
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
name|maxDocID
operator|=
name|numDocs
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getArray
specifier|public
name|int
index|[]
name|getArray
parameter_list|()
block|{
return|return
name|values
return|;
block|}
annotation|@
name|Override
DECL|method|getInt
specifier|public
name|long
name|getInt
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
assert|assert
name|docID
operator|>=
literal|0
operator|&&
name|docID
operator|<
name|values
operator|.
name|length
assert|;
return|return
literal|0xFFFFFFFF
operator|&
name|values
index|[
name|docID
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|setInternal
specifier|protected
name|void
name|setInternal
parameter_list|(
name|int
name|docId
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|values
index|[
name|docId
index|]
operator|=
call|(
name|int
call|)
argument_list|(
literal|0xFFFFFFFF
operator|&
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|grow
specifier|protected
name|int
name|grow
parameter_list|(
name|int
name|numDocs
parameter_list|)
block|{
name|values
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|values
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
return|return
name|values
operator|.
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|write
name|void
name|write
parameter_list|(
name|IndexOutput
name|output
parameter_list|,
name|int
name|numDocs
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|maxDocID
operator|+
literal|1
operator|<=
name|numDocs
assert|;
name|output
operator|.
name|writeInt
argument_list|(
name|numDocs
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDocID
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|writeInt
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|maxDocID
operator|+
literal|1
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDirectEnum
name|ValuesEnum
name|getDirectEnum
parameter_list|(
name|AttributeSource
name|attrSource
parameter_list|,
name|IndexInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FixedIntsEnumImpl
argument_list|(
name|attrSource
argument_list|,
name|input
argument_list|,
name|type
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|fillNext
parameter_list|(
name|LongsRef
name|ref
parameter_list|,
name|IndexInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|ref
operator|.
name|ints
index|[
name|ref
operator|.
name|offset
index|]
operator|=
name|dataIn
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|clear
name|void
name|clear
parameter_list|()
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|values
operator|=
operator|new
name|int
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
empty_stmt|;
DECL|class|LongValues
specifier|final
specifier|static
class|class
name|LongValues
extends|extends
name|IndexDocValuesArray
block|{
DECL|field|values
specifier|private
name|long
index|[]
name|values
decl_stmt|;
DECL|method|LongValues
name|LongValues
parameter_list|(
name|AtomicLong
name|bytesUsed
parameter_list|)
block|{
name|super
argument_list|(
name|bytesUsed
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_LONG
argument_list|,
name|ValueType
operator|.
name|FIXED_INTS_64
argument_list|)
expr_stmt|;
name|values
operator|=
operator|new
name|long
index|[
literal|0
index|]
expr_stmt|;
block|}
DECL|method|LongValues
name|LongValues
parameter_list|(
name|IndexInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
operator|new
name|AtomicLong
argument_list|()
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_LONG
argument_list|,
name|ValueType
operator|.
name|FIXED_INTS_64
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|input
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|values
operator|=
operator|new
name|long
index|[
name|numDocs
index|]
expr_stmt|;
name|adjustSize
argument_list|(
name|numDocs
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|input
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
name|maxDocID
operator|=
name|numDocs
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getArray
specifier|public
name|long
index|[]
name|getArray
parameter_list|()
block|{
return|return
name|values
return|;
block|}
annotation|@
name|Override
DECL|method|getInt
specifier|public
name|long
name|getInt
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
assert|assert
name|docID
operator|>=
literal|0
operator|&&
name|docID
operator|<
name|values
operator|.
name|length
assert|;
return|return
name|values
index|[
name|docID
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|setInternal
specifier|protected
name|void
name|setInternal
parameter_list|(
name|int
name|docId
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|values
index|[
name|docId
index|]
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|grow
specifier|protected
name|int
name|grow
parameter_list|(
name|int
name|numDocs
parameter_list|)
block|{
name|values
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|values
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
return|return
name|values
operator|.
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|write
name|void
name|write
parameter_list|(
name|IndexOutput
name|output
parameter_list|,
name|int
name|numDocs
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|maxDocID
operator|+
literal|1
operator|<=
name|numDocs
assert|;
name|output
operator|.
name|writeInt
argument_list|(
name|numDocs
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDocID
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|writeLong
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|maxDocID
operator|+
literal|1
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|writeLong
argument_list|(
literal|0l
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDirectEnum
name|ValuesEnum
name|getDirectEnum
parameter_list|(
name|AttributeSource
name|attrSource
parameter_list|,
name|IndexInput
name|input
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FixedIntsEnumImpl
argument_list|(
name|attrSource
argument_list|,
name|input
argument_list|,
name|type
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|fillNext
parameter_list|(
name|LongsRef
name|ref
parameter_list|,
name|IndexInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|ref
operator|.
name|ints
index|[
name|ref
operator|.
name|offset
index|]
operator|=
name|dataIn
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|clear
name|void
name|clear
parameter_list|()
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|values
operator|=
operator|new
name|long
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
empty_stmt|;
DECL|class|FixedIntsEnumImpl
specifier|private
specifier|abstract
specifier|static
class|class
name|FixedIntsEnumImpl
extends|extends
name|ValuesEnum
block|{
DECL|field|dataIn
specifier|private
specifier|final
name|IndexInput
name|dataIn
decl_stmt|;
DECL|field|maxDoc
specifier|private
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|field|sizeInByte
specifier|private
specifier|final
name|int
name|sizeInByte
decl_stmt|;
DECL|field|pos
specifier|private
name|int
name|pos
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|FixedIntsEnumImpl
specifier|private
name|FixedIntsEnumImpl
parameter_list|(
name|AttributeSource
name|source
parameter_list|,
name|IndexInput
name|dataIn
parameter_list|,
name|ValueType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|source
argument_list|,
name|type
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|FIXED_INTS_16
case|:
name|sizeInByte
operator|=
literal|2
expr_stmt|;
break|break;
case|case
name|FIXED_INTS_32
case|:
name|sizeInByte
operator|=
literal|4
expr_stmt|;
break|break;
case|case
name|FIXED_INTS_64
case|:
name|sizeInByte
operator|=
literal|8
expr_stmt|;
break|break;
case|case
name|FIXED_INTS_8
case|:
name|sizeInByte
operator|=
literal|1
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"type "
operator|+
name|type
operator|+
literal|" is not a fixed int type"
argument_list|)
throw|;
block|}
name|intsRef
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|dataIn
operator|=
name|dataIn
expr_stmt|;
name|maxDoc
operator|=
name|dataIn
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|dataIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|target
operator|>=
name|maxDoc
condition|)
block|{
return|return
name|pos
operator|=
name|NO_MORE_DOCS
return|;
block|}
assert|assert
name|target
operator|>
name|pos
assert|;
if|if
condition|(
name|target
operator|>
name|pos
operator|+
literal|1
condition|)
block|{
name|dataIn
operator|.
name|seek
argument_list|(
name|dataIn
operator|.
name|getFilePointer
argument_list|()
operator|+
operator|(
operator|(
name|target
operator|-
name|pos
operator|-
literal|1
operator|)
operator|*
name|sizeInByte
operator|)
argument_list|)
expr_stmt|;
block|}
name|fillNext
argument_list|(
name|intsRef
argument_list|,
name|dataIn
argument_list|)
expr_stmt|;
return|return
name|pos
operator|=
name|target
return|;
block|}
DECL|method|fillNext
specifier|protected
specifier|abstract
name|void
name|fillNext
parameter_list|(
name|LongsRef
name|ref
parameter_list|,
name|IndexInput
name|input
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|pos
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|pos
operator|>=
name|maxDoc
condition|)
block|{
return|return
name|pos
operator|=
name|NO_MORE_DOCS
return|;
block|}
return|return
name|advance
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
