begin_unit
begin_package
DECL|package|org.apache.lucene.index.values
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|DocValues
operator|.
name|SortedSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|DocValues
operator|.
name|Source
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_class
DECL|class|Cache
specifier|public
class|class
name|Cache
block|{
DECL|field|r
specifier|final
name|IndexReader
name|r
decl_stmt|;
comment|// TODO(simonw): use WeakHashMaps instead here?
DECL|field|ints
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Source
argument_list|>
name|ints
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Source
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|floats
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Source
argument_list|>
name|floats
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Source
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|bytes
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Source
argument_list|>
name|bytes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Source
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|sortedBytes
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SortedSource
argument_list|>
name|sortedBytes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SortedSource
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|Cache
specifier|public
name|Cache
parameter_list|(
name|IndexReader
name|r
parameter_list|)
block|{
name|this
operator|.
name|r
operator|=
name|r
expr_stmt|;
block|}
DECL|method|getInts
specifier|synchronized
specifier|public
name|Source
name|getInts
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|Source
name|s
init|=
name|ints
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
specifier|final
name|DocValues
name|indexValues
init|=
name|r
operator|.
name|docValues
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexValues
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|s
operator|=
name|indexValues
operator|.
name|load
argument_list|()
expr_stmt|;
name|ints
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
DECL|method|getFloats
specifier|synchronized
specifier|public
name|Source
name|getFloats
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|Source
name|s
init|=
name|floats
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
specifier|final
name|DocValues
name|indexValues
init|=
name|r
operator|.
name|docValues
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexValues
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|s
operator|=
name|indexValues
operator|.
name|load
argument_list|()
expr_stmt|;
name|floats
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
DECL|method|getSortedBytes
specifier|synchronized
specifier|public
name|SortedSource
name|getSortedBytes
parameter_list|(
name|String
name|id
parameter_list|,
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|comp
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedSource
name|s
init|=
name|sortedBytes
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
specifier|final
name|DocValues
name|indexValues
init|=
name|r
operator|.
name|docValues
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexValues
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|s
operator|=
name|indexValues
operator|.
name|loadSorted
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|sortedBytes
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO(simonw): verify comp is the same!
block|}
return|return
name|s
return|;
block|}
DECL|method|getBytes
specifier|synchronized
specifier|public
name|Source
name|getBytes
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|Source
name|s
init|=
name|bytes
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
specifier|final
name|DocValues
name|indexValues
init|=
name|r
operator|.
name|docValues
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexValues
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|s
operator|=
name|indexValues
operator|.
name|load
argument_list|()
expr_stmt|;
name|bytes
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
DECL|method|purgeInts
specifier|public
name|void
name|purgeInts
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|ints
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
DECL|method|purgeFloats
specifier|public
name|void
name|purgeFloats
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|floats
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
DECL|method|purgeBytes
specifier|public
name|void
name|purgeBytes
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|bytes
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
DECL|method|purgeSortedBytes
specifier|public
name|void
name|purgeSortedBytes
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|sortedBytes
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
