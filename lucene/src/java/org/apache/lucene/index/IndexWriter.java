begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocumentsWriterPerThread
operator|.
name|FlushedSegment
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
operator|.
name|FieldNumberBiMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
operator|.
name|OpenMode
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MergeState
operator|.
name|CheckAbort
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PayloadProcessorProvider
operator|.
name|DirPayloadProcessor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|CompoundFileDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FlushInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Lock
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|LockObtainFailedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|MergeInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|InfoStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|MutableBits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ThreadInterruptedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TwoPhaseCommit
import|;
end_import
begin_comment
comment|/**   An<code>IndexWriter</code> creates and maintains an index.<p>The {@link OpenMode} option on    {@link IndexWriterConfig#setOpenMode(OpenMode)} determines    whether a new index is created, or whether an existing index is   opened. Note that you can open an index with {@link OpenMode#CREATE}   even while readers are using the index. The old readers will    continue to search the "point in time" snapshot they had opened,    and won't see the newly created index until they re-open. If    {@link OpenMode#CREATE_OR_APPEND} is used IndexWriter will create a    new index if there is not already an index at the provided path   and otherwise open the existing index.</p><p>In either case, documents are added with {@link #addDocument(Iterable)   addDocument} and removed with {@link #deleteDocuments(Term)} or {@link   #deleteDocuments(Query)}. A document can be updated with {@link   #updateDocument(Term, Iterable) updateDocument} (which just deletes   and then adds the entire document). When finished adding, deleting    and updating documents, {@link #close() close} should be called.</p><a name="flush"></a><p>These changes are buffered in memory and periodically   flushed to the {@link Directory} (during the above method   calls). A flush is triggered when there are enough added documents   since the last flush. Flushing is triggered either by RAM usage of the   documents (see {@link IndexWriterConfig#setRAMBufferSizeMB}) or the   number of added documents (see {@link IndexWriterConfig#setMaxBufferedDocs(int)}).   The default is to flush when RAM usage hits   {@link IndexWriterConfig#DEFAULT_RAM_BUFFER_SIZE_MB} MB. For   best indexing speed you should flush by RAM usage with a   large RAM buffer. Additionally, if IndexWriter reaches the configured number of   buffered deletes (see {@link IndexWriterConfig#setMaxBufferedDeleteTerms})   the deleted terms and queries are flushed and applied to existing segments.   In contrast to the other flush options {@link IndexWriterConfig#setRAMBufferSizeMB} and    {@link IndexWriterConfig#setMaxBufferedDocs(int)}, deleted terms   won't trigger a segment flush. Note that flushing just moves the   internal buffered state in IndexWriter into the index, but   these changes are not visible to IndexReader until either   {@link #commit()} or {@link #close} is called.  A flush may   also trigger one or more segment merges which by default   run with a background thread so as not to block the   addDocument calls (see<a href="#mergePolicy">below</a>   for changing the {@link MergeScheduler}).</p><p>Opening an<code>IndexWriter</code> creates a lock file for the directory in use. Trying to open   another<code>IndexWriter</code> on the same directory will lead to a   {@link LockObtainFailedException}. The {@link LockObtainFailedException}   is also thrown if an IndexReader on the same directory is used to delete documents   from the index.</p><a name="deletionPolicy"></a><p>Expert:<code>IndexWriter</code> allows an optional   {@link IndexDeletionPolicy} implementation to be   specified.  You can use this to control when prior commits   are deleted from the index.  The default policy is {@link   KeepOnlyLastCommitDeletionPolicy} which removes all prior   commits as soon as a new commit is done (this matches   behavior before 2.2).  Creating your own policy can allow   you to explicitly keep previous "point in time" commits   alive in the index for some time, to allow readers to   refresh to the new commit without having the old commit   deleted out from under them.  This is necessary on   filesystems like NFS that do not support "delete on last   close" semantics, which Lucene's "point in time" search   normally relies on.</p><a name="mergePolicy"></a><p>Expert:<code>IndexWriter</code> allows you to separately change   the {@link MergePolicy} and the {@link MergeScheduler}.   The {@link MergePolicy} is invoked whenever there are   changes to the segments in the index.  Its role is to   select which merges to do, if any, and return a {@link   MergePolicy.MergeSpecification} describing the merges.   The default is {@link LogByteSizeMergePolicy}.  Then, the {@link   MergeScheduler} is invoked with the requested merges and   it decides when and how to run the merges.  The default is   {@link ConcurrentMergeScheduler}.</p><a name="OOME"></a><p><b>NOTE</b>: if you hit an   OutOfMemoryError then IndexWriter will quietly record this   fact and block all future segment commits.  This is a   defensive measure in case any internal state (buffered   documents and deletions) were corrupted.  Any subsequent   calls to {@link #commit()} will throw an   IllegalStateException.  The only course of action is to   call {@link #close()}, which internally will call {@link   #rollback()}, to undo any changes to the index since the   last commit.  You can also just call {@link #rollback()}   directly.</p><a name="thread-safety"></a><p><b>NOTE</b>: {@link   IndexWriter} instances are completely thread   safe, meaning multiple threads can call any of its   methods, concurrently.  If your application requires   external synchronization, you should<b>not</b>   synchronize on the<code>IndexWriter</code> instance as   this may cause deadlock; use your own (non-Lucene) objects   instead.</p><p><b>NOTE</b>: If you call<code>Thread.interrupt()</code> on a thread that's within   IndexWriter, IndexWriter will try to catch this (eg, if   it's in a wait() or Thread.sleep()), and will then throw   the unchecked exception {@link ThreadInterruptedException}   and<b>clear</b> the interrupt status on the thread.</p> */
end_comment
begin_comment
comment|/*  * Clarification: Check Points (and commits)  * IndexWriter writes new index files to the directory without writing a new segments_N  * file which references these new files. It also means that the state of  * the in memory SegmentInfos object is different than the most recent  * segments_N file written to the directory.  *  * Each time the SegmentInfos is changed, and matches the (possibly  * modified) directory files, we have a new "check point".  * If the modified/new SegmentInfos is written to disk - as a new  * (generation of) segments_N file - this check point is also an  * IndexCommit.  *  * A new checkpoint always replaces the previous checkpoint and  * becomes the new "front" of the index. This allows the IndexFileDeleter  * to delete files that are referenced only by stale checkpoints.  * (files that were created since the last commit, but are no longer  * referenced by the "front" of the index). For this, IndexFileDeleter  * keeps track of the last non commit checkpoint.  */
end_comment
begin_class
DECL|class|IndexWriter
specifier|public
class|class
name|IndexWriter
implements|implements
name|Closeable
implements|,
name|TwoPhaseCommit
block|{
comment|/**    * Name of the write lock in the index.    */
DECL|field|WRITE_LOCK_NAME
specifier|public
specifier|static
specifier|final
name|String
name|WRITE_LOCK_NAME
init|=
literal|"write.lock"
decl_stmt|;
comment|/**    * Absolute hard maximum length for a term, in bytes once    * encoded as UTF8.  If a term arrives from the analyzer    * longer than this length, it is skipped and a message is    * printed to infoStream, if set (see {@link    * IndexWriterConfig#setInfoStream(InfoStream)}).    */
DECL|field|MAX_TERM_LENGTH
specifier|public
specifier|final
specifier|static
name|int
name|MAX_TERM_LENGTH
init|=
name|DocumentsWriterPerThread
operator|.
name|MAX_TERM_LENGTH_UTF8
decl_stmt|;
DECL|field|hitOOM
specifier|volatile
specifier|private
name|boolean
name|hitOOM
decl_stmt|;
DECL|field|directory
specifier|private
specifier|final
name|Directory
name|directory
decl_stmt|;
comment|// where this index resides
DECL|field|analyzer
specifier|private
specifier|final
name|Analyzer
name|analyzer
decl_stmt|;
comment|// how to analyze text
DECL|field|changeCount
specifier|private
specifier|volatile
name|long
name|changeCount
decl_stmt|;
comment|// increments every time a change is completed
DECL|field|lastCommitChangeCount
specifier|private
name|long
name|lastCommitChangeCount
decl_stmt|;
comment|// last changeCount that was committed
DECL|field|rollbackSegments
specifier|private
name|List
argument_list|<
name|SegmentInfo
argument_list|>
name|rollbackSegments
decl_stmt|;
comment|// list of segmentInfo we will fallback to if the commit fails
DECL|field|pendingCommit
specifier|volatile
name|SegmentInfos
name|pendingCommit
decl_stmt|;
comment|// set when a commit is pending (after prepareCommit()& before commit())
DECL|field|pendingCommitChangeCount
specifier|volatile
name|long
name|pendingCommitChangeCount
decl_stmt|;
DECL|field|filesToCommit
specifier|private
name|Collection
argument_list|<
name|String
argument_list|>
name|filesToCommit
decl_stmt|;
DECL|field|segmentInfos
specifier|final
name|SegmentInfos
name|segmentInfos
decl_stmt|;
comment|// the segments
DECL|field|globalFieldNumberMap
specifier|final
name|FieldNumberBiMap
name|globalFieldNumberMap
decl_stmt|;
DECL|field|docWriter
specifier|private
name|DocumentsWriter
name|docWriter
decl_stmt|;
DECL|field|deleter
specifier|final
name|IndexFileDeleter
name|deleter
decl_stmt|;
comment|// used by forceMerge to note those needing merging
DECL|field|segmentsToMerge
specifier|private
name|Map
argument_list|<
name|SegmentInfo
argument_list|,
name|Boolean
argument_list|>
name|segmentsToMerge
init|=
operator|new
name|HashMap
argument_list|<
name|SegmentInfo
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|mergeMaxNumSegments
specifier|private
name|int
name|mergeMaxNumSegments
decl_stmt|;
DECL|field|writeLock
specifier|private
name|Lock
name|writeLock
decl_stmt|;
DECL|field|closed
specifier|private
specifier|volatile
name|boolean
name|closed
decl_stmt|;
DECL|field|closing
specifier|private
specifier|volatile
name|boolean
name|closing
decl_stmt|;
comment|// Holds all SegmentInfo instances currently involved in
comment|// merges
DECL|field|mergingSegments
specifier|private
name|HashSet
argument_list|<
name|SegmentInfo
argument_list|>
name|mergingSegments
init|=
operator|new
name|HashSet
argument_list|<
name|SegmentInfo
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|mergePolicy
specifier|private
name|MergePolicy
name|mergePolicy
decl_stmt|;
DECL|field|mergeScheduler
specifier|private
specifier|final
name|MergeScheduler
name|mergeScheduler
decl_stmt|;
DECL|field|pendingMerges
specifier|private
name|LinkedList
argument_list|<
name|MergePolicy
operator|.
name|OneMerge
argument_list|>
name|pendingMerges
init|=
operator|new
name|LinkedList
argument_list|<
name|MergePolicy
operator|.
name|OneMerge
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|runningMerges
specifier|private
name|Set
argument_list|<
name|MergePolicy
operator|.
name|OneMerge
argument_list|>
name|runningMerges
init|=
operator|new
name|HashSet
argument_list|<
name|MergePolicy
operator|.
name|OneMerge
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|mergeExceptions
specifier|private
name|List
argument_list|<
name|MergePolicy
operator|.
name|OneMerge
argument_list|>
name|mergeExceptions
init|=
operator|new
name|ArrayList
argument_list|<
name|MergePolicy
operator|.
name|OneMerge
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|mergeGen
specifier|private
name|long
name|mergeGen
decl_stmt|;
DECL|field|stopMerges
specifier|private
name|boolean
name|stopMerges
decl_stmt|;
DECL|field|flushCount
specifier|final
name|AtomicInteger
name|flushCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|flushDeletesCount
specifier|final
name|AtomicInteger
name|flushDeletesCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|readerPool
specifier|final
name|ReaderPool
name|readerPool
init|=
operator|new
name|ReaderPool
argument_list|()
decl_stmt|;
DECL|field|bufferedDeletesStream
specifier|final
name|BufferedDeletesStream
name|bufferedDeletesStream
decl_stmt|;
comment|// This is a "write once" variable (like the organic dye
comment|// on a DVD-R that may or may not be heated by a laser and
comment|// then cooled to permanently record the event): it's
comment|// false, until getReader() is called for the first time,
comment|// at which point it's switched to true and never changes
comment|// back to false.  Once this is true, we hold open and
comment|// reuse SegmentReader instances internally for applying
comment|// deletes, doing merges, and reopening near real-time
comment|// readers.
DECL|field|poolReaders
specifier|private
specifier|volatile
name|boolean
name|poolReaders
decl_stmt|;
comment|// The instance that was passed to the constructor. It is saved only in order
comment|// to allow users to query an IndexWriter settings.
DECL|field|config
specifier|private
specifier|final
name|IndexWriterConfig
name|config
decl_stmt|;
comment|// The PayloadProcessorProvider to use when segments are merged
DECL|field|payloadProcessorProvider
specifier|private
name|PayloadProcessorProvider
name|payloadProcessorProvider
decl_stmt|;
DECL|method|getReader
name|IndexReader
name|getReader
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getReader
argument_list|(
literal|true
argument_list|)
return|;
block|}
comment|/**    * Expert: returns a readonly reader, covering all    * committed as well as un-committed changes to the index.    * This provides "near real-time" searching, in that    * changes made during an IndexWriter session can be    * quickly made available for searching without closing    * the writer nor calling {@link #commit}.    *    *<p>Note that this is functionally equivalent to calling    * {#flush} and then using {@link IndexReader#open} to    * open a new reader.  But the turnaround time of this    * method should be faster since it avoids the potentially    * costly {@link #commit}.</p>    *    *<p>You must close the {@link IndexReader} returned by    * this method once you are done using it.</p>    *    *<p>It's<i>near</i> real-time because there is no hard    * guarantee on how quickly you can get a new reader after    * making changes with IndexWriter.  You'll have to    * experiment in your situation to determine if it's    * fast enough.  As this is a new and experimental    * feature, please report back on your findings so we can    * learn, improve and iterate.</p>    *    *<p>The resulting reader supports {@link    * IndexReader#reopen}, but that call will simply forward    * back to this method (though this may change in the    * future).</p>    *    *<p>The very first time this method is called, this    * writer instance will make every effort to pool the    * readers that it opens for doing merges, applying    * deletes, etc.  This means additional resources (RAM,    * file descriptors, CPU time) will be consumed.</p>    *    *<p>For lower latency on reopening a reader, you should    * call {@link #setMergedSegmentWarmer} to    * pre-warm a newly merged segment before it's committed    * to the index.  This is important for minimizing    * index-to-search delay after a large merge.</p>    *    *<p>If an addIndexes* call is running in another thread,    * then this reader will only search those segments from    * the foreign index that have been successfully copied    * over, so far</p>.    *    *<p><b>NOTE</b>: Once the writer is closed, any    * outstanding readers may continue to be used.  However,    * if you attempt to reopen any of those readers, you'll    * hit an {@link AlreadyClosedException}.</p>    *    * @lucene.experimental    *    * @return IndexReader that covers entire index plus all    * changes made so far by this IndexWriter instance    *    * @throws IOException    */
DECL|method|getReader
name|IndexReader
name|getReader
parameter_list|(
name|boolean
name|applyAllDeletes
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
specifier|final
name|long
name|tStart
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"flush at getReader"
argument_list|)
expr_stmt|;
block|}
comment|// Do this up front before flushing so that the readers
comment|// obtained during this flush are pooled, the first time
comment|// this method is called:
name|poolReaders
operator|=
literal|true
expr_stmt|;
specifier|final
name|IndexReader
name|r
decl_stmt|;
name|doBeforeFlush
argument_list|()
expr_stmt|;
name|boolean
name|anySegmentFlushed
init|=
literal|false
decl_stmt|;
comment|/*      * for releasing a NRT reader we must ensure that       * DW doesn't add any segments or deletes until we are      * done with creating the NRT DirectoryReader.       * We release the two stage full flush after we are done opening the      * directory reader!      */
synchronized|synchronized
init|(
name|fullFlushLock
init|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|anySegmentFlushed
operator|=
name|docWriter
operator|.
name|flushAllThreads
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|anySegmentFlushed
condition|)
block|{
comment|// prevent double increment since docWriter#doFlush increments the flushcount
comment|// if we flushed anything.
name|flushCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
comment|// Prevent segmentInfos from changing while opening the
comment|// reader; in theory we could do similar retry logic,
comment|// just like we do when loading segments_N
synchronized|synchronized
init|(
name|this
init|)
block|{
name|maybeApplyDeletes
argument_list|(
name|applyAllDeletes
argument_list|)
expr_stmt|;
name|r
operator|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|this
argument_list|,
name|segmentInfos
argument_list|,
name|applyAllDeletes
argument_list|)
expr_stmt|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"return reader version="
operator|+
name|r
operator|.
name|getVersion
argument_list|()
operator|+
literal|" reader="
operator|+
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|oom
parameter_list|)
block|{
name|handleOOM
argument_list|(
name|oom
argument_list|,
literal|"getReader"
argument_list|)
expr_stmt|;
comment|// never reached but javac disagrees:
return|return
literal|null
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"hit exception during NRT reader"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Done: finish the full flush!
name|docWriter
operator|.
name|finishFullFlush
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|doAfterFlush
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|anySegmentFlushed
condition|)
block|{
name|maybeMerge
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"getReader took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|tStart
operator|)
operator|+
literal|" msec"
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
comment|// This class inherits all sync from IW:
DECL|class|ReadersAndLiveDocs
class|class
name|ReadersAndLiveDocs
block|{
comment|// Not final because we replace (clone) when we need to
comment|// change it and it's been shared:
DECL|field|info
specifier|public
specifier|final
name|SegmentInfo
name|info
decl_stmt|;
comment|// Set once (null, and then maybe set, and never set again):
DECL|field|reader
specifier|private
name|SegmentReader
name|reader
decl_stmt|;
comment|// TODO: it's sometimes wasteful that we hold open two
comment|// separate SRs (one for merging one for
comment|// reading)... maybe just use a single SR?  The gains of
comment|// not loading the terms index (for merging in the
comment|// non-NRT case) are far less now... and if the app has
comment|// any deletes it'll open real readers anyway.
comment|// Set once (null, and then maybe set, and never set again):
DECL|field|mergeReader
specifier|private
name|SegmentReader
name|mergeReader
decl_stmt|;
comment|// Holds the current shared (readable and writable
comment|// liveDocs).  This is null when there are no deleted
comment|// docs, and it's copy-on-write (cloned whenever we need
comment|// to change it but it's been shared to an external NRT
comment|// reader).
DECL|field|liveDocs
specifier|public
name|MutableBits
name|liveDocs
decl_stmt|;
comment|// How many further deletions we've done against
comment|// liveDocs vs when we loaded it or last wrote it:
DECL|field|pendingDeleteCount
specifier|public
name|int
name|pendingDeleteCount
decl_stmt|;
comment|// True if the current liveDocs is referenced by an
comment|// external NRT reader:
DECL|field|shared
specifier|public
name|boolean
name|shared
decl_stmt|;
DECL|method|ReadersAndLiveDocs
specifier|public
name|ReadersAndLiveDocs
parameter_list|(
name|SegmentInfo
name|info
parameter_list|)
block|{
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
name|shared
operator|=
literal|true
expr_stmt|;
block|}
comment|// Returns false if we are the only remaining refs of
comment|// this reader:
DECL|method|anyOutsideRefs
specifier|public
specifier|synchronized
name|boolean
name|anyOutsideRefs
parameter_list|(
name|SegmentReader
name|sr
parameter_list|)
block|{
name|int
name|myRefCounts
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|sr
operator|==
name|reader
condition|)
block|{
name|myRefCounts
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|sr
operator|==
name|mergeReader
condition|)
block|{
name|myRefCounts
operator|++
expr_stmt|;
block|}
specifier|final
name|int
name|rc
init|=
name|sr
operator|.
name|getRefCount
argument_list|()
decl_stmt|;
assert|assert
name|rc
operator|>=
name|myRefCounts
assert|;
return|return
name|rc
operator|>
name|myRefCounts
return|;
block|}
comment|// Returns true if any reader remains
DECL|method|removeReader
specifier|public
specifier|synchronized
name|boolean
name|removeReader
parameter_list|(
name|SegmentReader
name|sr
parameter_list|,
name|boolean
name|drop
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sr
operator|==
name|reader
condition|)
block|{
comment|//System.out.println(" non-merge reader");
name|reader
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|reader
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|sr
operator|==
name|mergeReader
condition|)
block|{
comment|//System.out.println(" merge reader");
name|mergeReader
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|mergeReader
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|drop
operator|&&
name|reader
operator|!=
literal|null
condition|)
block|{
comment|//System.out.println(" also release normal reader rc=" + rld.reader.getRefCount());
name|reader
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|reader
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|reader
operator|!=
literal|null
operator|||
name|mergeReader
operator|!=
literal|null
return|;
block|}
comment|// Called only from assert
DECL|method|countsMatch
specifier|private
name|boolean
name|countsMatch
parameter_list|()
block|{
if|if
condition|(
name|liveDocs
operator|==
literal|null
condition|)
block|{
assert|assert
name|pendingDeleteCount
operator|==
literal|0
assert|;
block|}
else|else
block|{
assert|assert
name|liveDocs
operator|.
name|count
argument_list|()
operator|==
name|info
operator|.
name|docCount
operator|-
name|info
operator|.
name|getDelCount
argument_list|()
operator|-
name|pendingDeleteCount
operator|:
literal|"liveDocs.count()="
operator|+
name|liveDocs
operator|.
name|count
argument_list|()
operator|+
literal|" info.docCount="
operator|+
name|info
operator|.
name|docCount
operator|+
literal|" info.delCount="
operator|+
name|info
operator|.
name|getDelCount
argument_list|()
operator|+
literal|" pendingDelCount="
operator|+
name|pendingDeleteCount
assert|;
block|}
return|return
literal|true
return|;
block|}
comment|// Get reader for searching/deleting
DECL|method|getReader
specifier|public
specifier|synchronized
name|SegmentReader
name|getReader
parameter_list|(
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|//System.out.println("  livedocs=" + rld.liveDocs);
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
name|reader
operator|=
operator|new
name|SegmentReader
argument_list|(
name|info
argument_list|,
name|config
operator|.
name|getReaderTermsIndexDivisor
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|liveDocs
operator|==
literal|null
condition|)
block|{
comment|// nocommit: nuke cast
name|liveDocs
operator|=
operator|(
name|MutableBits
operator|)
name|reader
operator|.
name|getLiveDocs
argument_list|()
expr_stmt|;
block|}
comment|//System.out.println("ADD seg=" + rld.info + " isMerge=" + isMerge + " " + readerMap.size() + " in pool");
block|}
comment|// Ref for caller
name|reader
operator|.
name|incRef
argument_list|()
expr_stmt|;
return|return
name|reader
return|;
block|}
comment|// Get reader for merging (does not load the terms
comment|// index):
DECL|method|getMergeReader
specifier|public
specifier|synchronized
name|SegmentReader
name|getMergeReader
parameter_list|(
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|//System.out.println("  livedocs=" + rld.liveDocs);
if|if
condition|(
name|mergeReader
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
comment|// Just use the already opened non-merge reader
comment|// for merging.  In the NRT case this saves us
comment|// pointless double-open:
comment|//System.out.println("PROMOTE non-merge reader seg=" + rld.info);
name|reader
operator|.
name|incRef
argument_list|()
expr_stmt|;
name|mergeReader
operator|=
name|reader
expr_stmt|;
block|}
else|else
block|{
name|mergeReader
operator|=
operator|new
name|SegmentReader
argument_list|(
name|info
argument_list|,
operator|-
literal|1
argument_list|,
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|liveDocs
operator|==
literal|null
condition|)
block|{
name|liveDocs
operator|=
operator|(
name|MutableBits
operator|)
name|mergeReader
operator|.
name|getLiveDocs
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// Ref for caller
name|mergeReader
operator|.
name|incRef
argument_list|()
expr_stmt|;
return|return
name|mergeReader
return|;
block|}
DECL|method|delete
specifier|public
specifier|synchronized
name|boolean
name|delete
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
assert|assert
name|liveDocs
operator|!=
literal|null
assert|;
assert|assert
name|docID
operator|>=
literal|0
operator|&&
name|docID
operator|<
name|liveDocs
operator|.
name|length
argument_list|()
assert|;
specifier|final
name|boolean
name|didDelete
init|=
name|liveDocs
operator|.
name|get
argument_list|(
name|docID
argument_list|)
decl_stmt|;
if|if
condition|(
name|didDelete
condition|)
block|{
name|liveDocs
operator|.
name|clear
argument_list|(
name|docID
argument_list|)
expr_stmt|;
name|pendingDeleteCount
operator|++
expr_stmt|;
comment|//System.out.println("  new del seg=" + info + " docID=" + docID + " pendingDelCount=" + pendingDeleteCount + " totDelCount=" + (info.docCount-liveDocs.count()));
block|}
return|return
name|didDelete
return|;
block|}
DECL|method|dropReaders
specifier|public
specifier|synchronized
name|void
name|dropReaders
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
comment|//System.out.println("  pool.drop info=" + info + " rc=" + reader.getRefCount());
name|reader
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|reader
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|mergeReader
operator|!=
literal|null
condition|)
block|{
comment|//System.out.println("  pool.drop info=" + info + " merge rc=" + mergeReader.getRefCount());
name|mergeReader
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|mergeReader
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Returns a ref to a clone.  NOTE: this clone is not      * enrolled in the pool, so you should simply close()      * it when you're done (ie, do not call release()).      */
DECL|method|getReadOnlyClone
specifier|public
specifier|synchronized
name|SegmentReader
name|getReadOnlyClone
parameter_list|(
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
name|getReader
argument_list|(
name|context
argument_list|)
operator|.
name|decRef
argument_list|()
expr_stmt|;
assert|assert
name|reader
operator|!=
literal|null
assert|;
block|}
assert|assert
name|countsMatch
argument_list|()
assert|;
name|shared
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|liveDocs
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|SegmentReader
argument_list|(
name|reader
argument_list|,
name|liveDocs
argument_list|,
name|info
operator|.
name|docCount
operator|-
name|info
operator|.
name|getDelCount
argument_list|()
operator|-
name|pendingDeleteCount
argument_list|)
return|;
block|}
else|else
block|{
name|reader
operator|.
name|incRef
argument_list|()
expr_stmt|;
return|return
name|reader
return|;
block|}
block|}
DECL|method|initWritableLiveDocs
specifier|public
specifier|synchronized
name|void
name|initWritableLiveDocs
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|Thread
operator|.
name|holdsLock
argument_list|(
name|IndexWriter
operator|.
name|this
argument_list|)
assert|;
comment|//System.out.println("initWritableLivedocs seg=" + info + " liveDocs=" + liveDocs + " shared=" + shared);
if|if
condition|(
name|shared
condition|)
block|{
comment|// Copy on write: this means we've cloned a
comment|// SegmentReader sharing the current liveDocs
comment|// instance; must now make a private clone so we can
comment|// change it:
if|if
condition|(
name|liveDocs
operator|==
literal|null
condition|)
block|{
comment|//System.out.println("create BV seg=" + info);
name|liveDocs
operator|=
name|info
operator|.
name|getCodec
argument_list|()
operator|.
name|liveDocsFormat
argument_list|()
operator|.
name|newLiveDocs
argument_list|(
name|info
operator|.
name|docCount
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|liveDocs
operator|=
name|liveDocs
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
name|shared
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|liveDocs
operator|!=
literal|null
assert|;
block|}
block|}
DECL|method|getReadOnlyLiveDocs
specifier|public
specifier|synchronized
name|Bits
name|getReadOnlyLiveDocs
parameter_list|()
block|{
comment|//System.out.println("getROLiveDocs seg=" + info);
assert|assert
name|Thread
operator|.
name|holdsLock
argument_list|(
name|IndexWriter
operator|.
name|this
argument_list|)
assert|;
name|shared
operator|=
literal|true
expr_stmt|;
assert|assert
name|countsMatch
argument_list|()
assert|;
comment|//if (liveDocs != null) {
comment|//System.out.println("  liveCount=" + liveDocs.count());
comment|//}
return|return
name|liveDocs
return|;
block|}
comment|// Commit live docs to the directory (writes new
comment|// _X_N.del files); returns true if it wrote the file
comment|// and false if there were no new deletes to write:
DECL|method|writeLiveDocs
specifier|public
specifier|synchronized
name|boolean
name|writeLiveDocs
parameter_list|(
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
comment|//System.out.println("rld.writeLiveDocs seg=" + info + " pendingDelCount=" + pendingDeleteCount);
if|if
condition|(
name|pendingDeleteCount
operator|!=
literal|0
condition|)
block|{
comment|// We have new deletes
assert|assert
name|liveDocs
operator|.
name|length
argument_list|()
operator|==
name|info
operator|.
name|docCount
assert|;
comment|// Save in case we need to rollback on failure:
specifier|final
name|SegmentInfo
name|sav
init|=
operator|(
name|SegmentInfo
operator|)
name|info
operator|.
name|clone
argument_list|()
decl_stmt|;
name|info
operator|.
name|advanceDelGen
argument_list|()
expr_stmt|;
comment|// We can write directly to the actual name (vs to a
comment|// .tmp& renaming it) because the file is not live
comment|// until segments file is written:
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|info
operator|.
name|getCodec
argument_list|()
operator|.
name|liveDocsFormat
argument_list|()
operator|.
name|writeLiveDocs
argument_list|(
name|liveDocs
argument_list|,
name|dir
argument_list|,
name|info
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|info
operator|.
name|reset
argument_list|(
name|sav
argument_list|)
expr_stmt|;
block|}
block|}
assert|assert
operator|(
name|info
operator|.
name|docCount
operator|-
name|liveDocs
operator|.
name|count
argument_list|()
operator|)
operator|==
name|info
operator|.
name|getDelCount
argument_list|()
operator|+
name|pendingDeleteCount
operator|:
literal|"delete count mismatch during commit: seg="
operator|+
name|info
operator|+
literal|" info.delCount="
operator|+
name|info
operator|.
name|getDelCount
argument_list|()
operator|+
literal|" vs MutableBits="
operator|+
operator|(
name|info
operator|.
name|docCount
operator|-
name|liveDocs
operator|.
name|count
argument_list|()
operator|+
literal|" pendingDelCount="
operator|+
name|pendingDeleteCount
operator|)
assert|;
name|info
operator|.
name|setDelCount
argument_list|(
name|info
operator|.
name|getDelCount
argument_list|()
operator|+
name|pendingDeleteCount
argument_list|)
expr_stmt|;
name|pendingDeleteCount
operator|=
literal|0
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SegmentLiveDocs(seg="
operator|+
name|info
operator|+
literal|" pendingDeleteCount="
operator|+
name|pendingDeleteCount
operator|+
literal|" shared="
operator|+
name|shared
operator|+
literal|")"
return|;
block|}
block|}
comment|/** Holds shared SegmentReader instances. IndexWriter uses    *  SegmentReaders for 1) applying deletes, 2) doing    *  merges, 3) handing out a real-time reader.  This pool    *  reuses instances of the SegmentReaders in all these    *  places if it is in "near real-time mode" (getReader()    *  has been called on this instance). */
DECL|class|ReaderPool
class|class
name|ReaderPool
block|{
DECL|field|readerMap
specifier|private
specifier|final
name|Map
argument_list|<
name|SegmentInfo
argument_list|,
name|ReadersAndLiveDocs
argument_list|>
name|readerMap
init|=
operator|new
name|HashMap
argument_list|<
name|SegmentInfo
argument_list|,
name|ReadersAndLiveDocs
argument_list|>
argument_list|()
decl_stmt|;
comment|// used only by asserts
DECL|method|infoIsLive
specifier|public
specifier|synchronized
name|boolean
name|infoIsLive
parameter_list|(
name|SegmentInfo
name|info
parameter_list|)
block|{
name|int
name|idx
init|=
name|segmentInfos
operator|.
name|indexOf
argument_list|(
name|info
argument_list|)
decl_stmt|;
assert|assert
name|idx
operator|!=
operator|-
literal|1
operator|:
literal|"info="
operator|+
name|info
operator|+
literal|" isn't live"
assert|;
assert|assert
name|segmentInfos
operator|.
name|info
argument_list|(
name|idx
argument_list|)
operator|==
name|info
operator|:
literal|"info="
operator|+
name|info
operator|+
literal|" doesn't match live info in segmentInfos"
assert|;
return|return
literal|true
return|;
block|}
comment|/**      * Release the segment reader (i.e. decRef it and close if there      * are no more references).  If drop is true then we      * remove this entry from the pool.      * @param sr      * @throws IOException      */
DECL|method|release
specifier|public
specifier|synchronized
name|void
name|release
parameter_list|(
name|SegmentReader
name|sr
parameter_list|,
name|boolean
name|drop
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Drop caller's ref; for an external reader (not
comment|// pooled), this decRef will close it
comment|//System.out.println("pool.release seg=" + sr.getSegmentInfo() + " rc=" + sr.getRefCount() + " drop=" + drop);
name|sr
operator|.
name|decRef
argument_list|()
expr_stmt|;
specifier|final
name|ReadersAndLiveDocs
name|rld
init|=
name|readerMap
operator|.
name|get
argument_list|(
name|sr
operator|.
name|getSegmentInfo
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rld
operator|!=
literal|null
operator|&&
operator|(
name|drop
operator|||
operator|(
operator|!
name|poolReaders
operator|&&
operator|!
name|rld
operator|.
name|anyOutsideRefs
argument_list|(
name|sr
argument_list|)
operator|)
operator|)
condition|)
block|{
comment|// Discard (don't save) changes when we are dropping
comment|// the reader; this is used only on the sub-readers
comment|// after a successful merge.  If deletes had
comment|// accumulated on those sub-readers while the merge
comment|// is running, by now we have carried forward those
comment|// deletes onto the newly merged segment, so we can
comment|// discard them on the sub-readers:
if|if
condition|(
operator|!
name|drop
condition|)
block|{
if|if
condition|(
name|rld
operator|.
name|writeLiveDocs
argument_list|(
name|directory
argument_list|)
condition|)
block|{
assert|assert
name|infoIsLive
argument_list|(
name|sr
operator|.
name|getSegmentInfo
argument_list|()
argument_list|)
assert|;
comment|// Must checkpoint w/ deleter, because we just
comment|// created created new _X_N.del file.
name|deleter
operator|.
name|checkpoint
argument_list|(
name|segmentInfos
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|rld
operator|.
name|removeReader
argument_list|(
name|sr
argument_list|,
name|drop
argument_list|)
condition|)
block|{
comment|//System.out.println("DROP seg=" + rld.info + " " + readerMap.size() + " in pool");
name|readerMap
operator|.
name|remove
argument_list|(
name|sr
operator|.
name|getSegmentInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Remove all our references to readers, and commits      *  any pending changes. */
DECL|method|dropAll
specifier|synchronized
name|void
name|dropAll
parameter_list|(
name|boolean
name|doSave
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|SegmentInfo
argument_list|,
name|ReadersAndLiveDocs
argument_list|>
argument_list|>
name|it
init|=
name|readerMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|ReadersAndLiveDocs
name|rld
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|//System.out.println("pool.dropAll: seg=" + rld.info);
if|if
condition|(
name|doSave
operator|&&
name|rld
operator|.
name|writeLiveDocs
argument_list|(
name|directory
argument_list|)
condition|)
block|{
assert|assert
name|infoIsLive
argument_list|(
name|rld
operator|.
name|info
argument_list|)
assert|;
comment|// Must checkpoint w/ deleter, because we just
comment|// created created new _X_N.del file.
name|deleter
operator|.
name|checkpoint
argument_list|(
name|segmentInfos
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Important to remove as-we-go, not with .clear()
comment|// in the end, in case we hit an exception;
comment|// otherwise we could over-decref if close() is
comment|// called again:
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|// NOTE: it is allowed that these decRefs do not
comment|// actually close the SRs; this happens when a
comment|// near real-time reader is kept open after the
comment|// IndexWriter instance is closed:
name|rld
operator|.
name|dropReaders
argument_list|()
expr_stmt|;
block|}
assert|assert
name|readerMap
operator|.
name|size
argument_list|()
operator|==
literal|0
assert|;
block|}
DECL|method|drop
specifier|public
specifier|synchronized
name|void
name|drop
parameter_list|(
name|SegmentInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ReadersAndLiveDocs
name|rld
init|=
name|readerMap
operator|.
name|remove
argument_list|(
name|info
argument_list|)
decl_stmt|;
if|if
condition|(
name|rld
operator|!=
literal|null
condition|)
block|{
name|rld
operator|.
name|dropReaders
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Commit live docs changes for the segment readers for      * the provided infos.      *      * @throws IOException      */
DECL|method|commit
specifier|public
specifier|synchronized
name|void
name|commit
parameter_list|(
name|SegmentInfos
name|infos
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|SegmentInfo
name|info
range|:
name|infos
control|)
block|{
specifier|final
name|ReadersAndLiveDocs
name|rld
init|=
name|readerMap
operator|.
name|get
argument_list|(
name|info
argument_list|)
decl_stmt|;
if|if
condition|(
name|rld
operator|!=
literal|null
operator|&&
name|rld
operator|.
name|writeLiveDocs
argument_list|(
name|directory
argument_list|)
condition|)
block|{
assert|assert
name|infoIsLive
argument_list|(
name|info
argument_list|)
assert|;
comment|// Must checkpoint w/ deleter, because we just
comment|// created created new _X_N.del file.
name|deleter
operator|.
name|checkpoint
argument_list|(
name|segmentInfos
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Obtain a ReadersAndLiveDocs instance from the      * readerPool.  If getReader is true, you must later call      * {@link #release(SegmentReader)}.      * @throws IOException      */
DECL|method|get
specifier|public
specifier|synchronized
name|ReadersAndLiveDocs
name|get
parameter_list|(
name|SegmentInfo
name|info
parameter_list|,
name|boolean
name|create
parameter_list|)
block|{
assert|assert
name|info
operator|.
name|dir
operator|==
name|directory
assert|;
name|ReadersAndLiveDocs
name|rld
init|=
name|readerMap
operator|.
name|get
argument_list|(
name|info
argument_list|)
decl_stmt|;
comment|//System.out.println("rld.get seg=" + info + " poolReaders=" + poolReaders);
if|if
condition|(
name|rld
operator|==
literal|null
condition|)
block|{
comment|//System.out.println("  new rld");
if|if
condition|(
operator|!
name|create
condition|)
block|{
return|return
literal|null
return|;
block|}
name|rld
operator|=
operator|new
name|ReadersAndLiveDocs
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|readerMap
operator|.
name|put
argument_list|(
name|info
argument_list|,
name|rld
argument_list|)
expr_stmt|;
block|}
return|return
name|rld
return|;
block|}
block|}
comment|/**    * Obtain the number of deleted docs for a pooled reader.    * If the reader isn't being pooled, the segmentInfo's     * delCount is returned.    */
DECL|method|numDeletedDocs
specifier|public
name|int
name|numDeletedDocs
parameter_list|(
name|SegmentInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|int
name|delCount
init|=
name|info
operator|.
name|getDelCount
argument_list|()
decl_stmt|;
specifier|final
name|ReadersAndLiveDocs
name|rld
init|=
name|readerPool
operator|.
name|get
argument_list|(
name|info
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|rld
operator|!=
literal|null
condition|)
block|{
name|delCount
operator|+=
name|rld
operator|.
name|pendingDeleteCount
expr_stmt|;
block|}
return|return
name|delCount
return|;
block|}
comment|/**    * Used internally to throw an {@link    * AlreadyClosedException} if this IndexWriter has been    * closed.    * @throws AlreadyClosedException if this IndexWriter is closed    */
DECL|method|ensureOpen
specifier|protected
specifier|final
name|void
name|ensureOpen
parameter_list|(
name|boolean
name|includePendingClose
parameter_list|)
throws|throws
name|AlreadyClosedException
block|{
if|if
condition|(
name|closed
operator|||
operator|(
name|includePendingClose
operator|&&
name|closing
operator|)
condition|)
block|{
throw|throw
operator|new
name|AlreadyClosedException
argument_list|(
literal|"this IndexWriter is closed"
argument_list|)
throw|;
block|}
block|}
DECL|method|ensureOpen
specifier|protected
specifier|final
name|void
name|ensureOpen
parameter_list|()
throws|throws
name|AlreadyClosedException
block|{
name|ensureOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|field|codec
specifier|final
name|Codec
name|codec
decl_stmt|;
comment|// for writing new segments
comment|/**    * Constructs a new IndexWriter per the settings given in<code>conf</code>.    * Note that the passed in {@link IndexWriterConfig} is    * privately cloned; if you need to make subsequent "live"    * changes to the configuration use {@link #getConfig}.    *<p>    *     * @param d    *          the index directory. The index is either created or appended    *          according<code>conf.getOpenMode()</code>.    * @param conf    *          the configuration settings according to which IndexWriter should    *          be initialized.    * @throws CorruptIndexException    *           if the index is corrupt    * @throws LockObtainFailedException    *           if another writer has this index open (<code>write.lock</code>    *           could not be obtained)    * @throws IOException    *           if the directory cannot be read/written to, or if it does not    *           exist and<code>conf.getOpenMode()</code> is    *<code>OpenMode.APPEND</code> or if there is any other low-level    *           IO error    */
DECL|method|IndexWriter
specifier|public
name|IndexWriter
parameter_list|(
name|Directory
name|d
parameter_list|,
name|IndexWriterConfig
name|conf
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|LockObtainFailedException
throws|,
name|IOException
block|{
name|config
operator|=
operator|(
name|IndexWriterConfig
operator|)
name|conf
operator|.
name|clone
argument_list|()
expr_stmt|;
name|directory
operator|=
name|d
expr_stmt|;
name|analyzer
operator|=
name|conf
operator|.
name|getAnalyzer
argument_list|()
expr_stmt|;
name|infoStream
operator|=
name|conf
operator|.
name|getInfoStream
argument_list|()
expr_stmt|;
name|mergePolicy
operator|=
name|conf
operator|.
name|getMergePolicy
argument_list|()
expr_stmt|;
name|mergePolicy
operator|.
name|setIndexWriter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mergeScheduler
operator|=
name|conf
operator|.
name|getMergeScheduler
argument_list|()
expr_stmt|;
name|codec
operator|=
name|conf
operator|.
name|getCodec
argument_list|()
expr_stmt|;
name|bufferedDeletesStream
operator|=
operator|new
name|BufferedDeletesStream
argument_list|(
name|infoStream
argument_list|)
expr_stmt|;
name|poolReaders
operator|=
name|conf
operator|.
name|getReaderPooling
argument_list|()
expr_stmt|;
name|writeLock
operator|=
name|directory
operator|.
name|makeLock
argument_list|(
name|WRITE_LOCK_NAME
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|writeLock
operator|.
name|obtain
argument_list|(
name|conf
operator|.
name|getWriteLockTimeout
argument_list|()
argument_list|)
condition|)
comment|// obtain write lock
throw|throw
operator|new
name|LockObtainFailedException
argument_list|(
literal|"Index locked for write: "
operator|+
name|writeLock
argument_list|)
throw|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|OpenMode
name|mode
init|=
name|conf
operator|.
name|getOpenMode
argument_list|()
decl_stmt|;
name|boolean
name|create
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|OpenMode
operator|.
name|CREATE
condition|)
block|{
name|create
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|OpenMode
operator|.
name|APPEND
condition|)
block|{
name|create
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|// CREATE_OR_APPEND - create only if an index does not exist
name|create
operator|=
operator|!
name|IndexReader
operator|.
name|indexExists
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
comment|// If index is too old, reading the segments will throw
comment|// IndexFormatTooOldException.
name|segmentInfos
operator|=
operator|new
name|SegmentInfos
argument_list|()
expr_stmt|;
if|if
condition|(
name|create
condition|)
block|{
comment|// Try to read first.  This is to allow create
comment|// against an index that's currently open for
comment|// searching.  In this case we write the next
comment|// segments_N file with no segments:
try|try
block|{
name|segmentInfos
operator|.
name|read
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|segmentInfos
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Likely this means it's a fresh directory
block|}
comment|// Record that we have a change (zero out all
comment|// segments) pending:
name|changeCount
operator|++
expr_stmt|;
name|segmentInfos
operator|.
name|changed
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|segmentInfos
operator|.
name|read
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|IndexCommit
name|commit
init|=
name|conf
operator|.
name|getIndexCommit
argument_list|()
decl_stmt|;
if|if
condition|(
name|commit
operator|!=
literal|null
condition|)
block|{
comment|// Swap out all segments, but, keep metadata in
comment|// SegmentInfos, like version& generation, to
comment|// preserve write-once.  This is important if
comment|// readers are open against the future commit
comment|// points.
if|if
condition|(
name|commit
operator|.
name|getDirectory
argument_list|()
operator|!=
name|directory
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"IndexCommit's directory doesn't match my directory"
argument_list|)
throw|;
name|SegmentInfos
name|oldInfos
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|oldInfos
operator|.
name|read
argument_list|(
name|directory
argument_list|,
name|commit
operator|.
name|getSegmentsFileName
argument_list|()
argument_list|)
expr_stmt|;
name|segmentInfos
operator|.
name|replace
argument_list|(
name|oldInfos
argument_list|)
expr_stmt|;
name|changeCount
operator|++
expr_stmt|;
name|segmentInfos
operator|.
name|changed
argument_list|()
expr_stmt|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"init: loaded commit \""
operator|+
name|commit
operator|.
name|getSegmentsFileName
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|rollbackSegments
operator|=
name|segmentInfos
operator|.
name|createBackupSegmentInfos
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// start with previous field numbers, but new FieldInfos
name|globalFieldNumberMap
operator|=
name|segmentInfos
operator|.
name|getOrLoadGlobalFieldNumberMap
argument_list|()
expr_stmt|;
name|docWriter
operator|=
operator|new
name|DocumentsWriter
argument_list|(
name|codec
argument_list|,
name|config
argument_list|,
name|directory
argument_list|,
name|this
argument_list|,
name|globalFieldNumberMap
argument_list|,
name|bufferedDeletesStream
argument_list|)
expr_stmt|;
comment|// Default deleter (for backwards compatibility) is
comment|// KeepOnlyLastCommitDeleter:
synchronized|synchronized
init|(
name|this
init|)
block|{
name|deleter
operator|=
operator|new
name|IndexFileDeleter
argument_list|(
name|directory
argument_list|,
name|conf
operator|.
name|getIndexDeletionPolicy
argument_list|()
argument_list|,
name|segmentInfos
argument_list|,
name|infoStream
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleter
operator|.
name|startingCommitDeleted
condition|)
block|{
comment|// Deletion policy deleted the "head" commit point.
comment|// We have to mark ourself as changed so that if we
comment|// are closed w/o any further changes we write a new
comment|// segments_N file.
name|changeCount
operator|++
expr_stmt|;
name|segmentInfos
operator|.
name|changed
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"init: create="
operator|+
name|create
argument_list|)
expr_stmt|;
name|messageState
argument_list|()
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"init: hit exception on init; releasing write lock"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|writeLock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// don't mask the original exception
block|}
name|writeLock
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Returns the private {@link IndexWriterConfig}, cloned    * from the {@link IndexWriterConfig} passed to    * {@link #IndexWriter(Directory, IndexWriterConfig)}.    *<p>    *<b>NOTE:</b> some settings may be changed on the    * returned {@link IndexWriterConfig}, and will take    * effect in the current IndexWriter instance.  See the    * javadocs for the specific setters in {@link    * IndexWriterConfig} for details.    */
DECL|method|getConfig
specifier|public
name|IndexWriterConfig
name|getConfig
parameter_list|()
block|{
name|ensureOpen
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
DECL|method|messageState
specifier|private
name|void
name|messageState
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"\ndir="
operator|+
name|directory
operator|+
literal|"\n"
operator|+
literal|"index="
operator|+
name|segString
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"version="
operator|+
name|Constants
operator|.
name|LUCENE_VERSION
operator|+
literal|"\n"
operator|+
name|config
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Commits all changes to an index and closes all    * associated files.  Note that this may be a costly    * operation, so, try to re-use a single writer instead of    * closing and opening a new one.  See {@link #commit()} for    * caveats about write caching done by some IO devices.    *    *<p> If an Exception is hit during close, eg due to disk    * full or some other reason, then both the on-disk index    * and the internal state of the IndexWriter instance will    * be consistent.  However, the close will not be complete    * even though part of it (flushing buffered documents)    * may have succeeded, so the write lock will still be    * held.</p>    *    *<p> If you can correct the underlying cause (eg free up    * some disk space) then you can call close() again.    * Failing that, if you want to force the write lock to be    * released (dangerous, because you may then lose buffered    * docs in the IndexWriter instance) then you can do    * something like this:</p>    *    *<pre>    * try {    *   writer.close();    * } finally {    *   if (IndexWriter.isLocked(directory)) {    *     IndexWriter.unlock(directory);    *   }    * }    *</pre>    *    * after which, you must be certain not to use the writer    * instance anymore.</p>    *    *<p><b>NOTE</b>: if this method hits an OutOfMemoryError    * you should immediately close the writer, again.  See<a    * href="#OOME">above</a> for details.</p>    *    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Closes the index with or without waiting for currently    * running merges to finish.  This is only meaningful when    * using a MergeScheduler that runs merges in background    * threads.    *    *<p><b>NOTE</b>: if this method hits an OutOfMemoryError    * you should immediately close the writer, again.  See<a    * href="#OOME">above</a> for details.</p>    *    *<p><b>NOTE</b>: it is dangerous to always call    * close(false), especially when IndexWriter is not open    * for very long, because this can result in "merge    * starvation" whereby long merges will never have a    * chance to finish.  This will cause too many segments in    * your index over time.</p>    *    * @param waitForMerges if true, this call will block    * until all merges complete; else, it will ask all    * running merges to abort, wait until those merges have    * finished (which should be at most a few seconds), and    * then return.    */
DECL|method|close
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|waitForMerges
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
comment|// Ensure that only one thread actually gets to do the closing:
if|if
condition|(
name|shouldClose
argument_list|()
condition|)
block|{
comment|// If any methods have hit OutOfMemoryError, then abort
comment|// on close, in case the internal state of IndexWriter
comment|// or DocumentsWriter is corrupt
if|if
condition|(
name|hitOOM
condition|)
name|rollbackInternal
argument_list|()
expr_stmt|;
else|else
name|closeInternal
argument_list|(
name|waitForMerges
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Returns true if this thread should attempt to close, or
comment|// false if IndexWriter is now closed; else, waits until
comment|// another thread finishes closing
DECL|method|shouldClose
specifier|synchronized
specifier|private
name|boolean
name|shouldClose
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
operator|!
name|closed
condition|)
block|{
if|if
condition|(
operator|!
name|closing
condition|)
block|{
name|closing
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
comment|// Another thread is presently trying to close;
comment|// wait until it finishes one way (closes
comment|// successfully) or another (fails to close)
name|doWait
argument_list|()
expr_stmt|;
block|}
block|}
else|else
return|return
literal|false
return|;
block|}
block|}
DECL|method|closeInternal
specifier|private
name|void
name|closeInternal
parameter_list|(
name|boolean
name|waitForMerges
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"now flush at close waitForMerges="
operator|+
name|waitForMerges
argument_list|)
expr_stmt|;
block|}
name|docWriter
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Only allow a new merge to be triggered if we are
comment|// going to wait for merges:
if|if
condition|(
operator|!
name|hitOOM
condition|)
block|{
name|flush
argument_list|(
name|waitForMerges
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|waitForMerges
condition|)
comment|// Give merge scheduler last chance to run, in case
comment|// any pending merges are waiting:
name|mergeScheduler
operator|.
name|merge
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mergePolicy
operator|.
name|close
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|finishMerges
argument_list|(
name|waitForMerges
argument_list|)
expr_stmt|;
name|stopMerges
operator|=
literal|true
expr_stmt|;
block|}
name|mergeScheduler
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"now call final commit()"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hitOOM
condition|)
block|{
name|commitInternal
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"at close: "
operator|+
name|segString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// used by assert below
specifier|final
name|DocumentsWriter
name|oldWriter
init|=
name|docWriter
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|readerPool
operator|.
name|dropAll
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|docWriter
operator|=
literal|null
expr_stmt|;
name|deleter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|writeLock
operator|!=
literal|null
condition|)
block|{
name|writeLock
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// release write lock
name|writeLock
operator|=
literal|null
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|closed
operator|=
literal|true
expr_stmt|;
block|}
assert|assert
name|oldWriter
operator|.
name|assertNoActiveDWPT
argument_list|()
assert|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|oom
parameter_list|)
block|{
name|handleOOM
argument_list|(
name|oom
argument_list|,
literal|"closeInternal"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|closing
operator|=
literal|false
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|closed
condition|)
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"hit exception while closing"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/** Returns the Directory used by this index. */
DECL|method|getDirectory
specifier|public
name|Directory
name|getDirectory
parameter_list|()
block|{
return|return
name|directory
return|;
block|}
comment|/** Returns the analyzer used by this index. */
DECL|method|getAnalyzer
specifier|public
name|Analyzer
name|getAnalyzer
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|analyzer
return|;
block|}
comment|/** Returns total number of docs in this index, including    *  docs not yet flushed (still in the RAM buffer),    *  not counting deletions.    *  @see #numDocs */
DECL|method|maxDoc
specifier|public
specifier|synchronized
name|int
name|maxDoc
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|int
name|count
decl_stmt|;
if|if
condition|(
name|docWriter
operator|!=
literal|null
condition|)
name|count
operator|=
name|docWriter
operator|.
name|getNumDocs
argument_list|()
expr_stmt|;
else|else
name|count
operator|=
literal|0
expr_stmt|;
name|count
operator|+=
name|segmentInfos
operator|.
name|totalDocCount
argument_list|()
expr_stmt|;
return|return
name|count
return|;
block|}
comment|/** Returns total number of docs in this index, including    *  docs not yet flushed (still in the RAM buffer), and    *  including deletions.<b>NOTE:</b> buffered deletions    *  are not counted.  If you really need these to be    *  counted you should call {@link #commit()} first.    *  @see #numDocs */
DECL|method|numDocs
specifier|public
specifier|synchronized
name|int
name|numDocs
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|int
name|count
decl_stmt|;
if|if
condition|(
name|docWriter
operator|!=
literal|null
condition|)
name|count
operator|=
name|docWriter
operator|.
name|getNumDocs
argument_list|()
expr_stmt|;
else|else
name|count
operator|=
literal|0
expr_stmt|;
for|for
control|(
specifier|final
name|SegmentInfo
name|info
range|:
name|segmentInfos
control|)
block|{
name|count
operator|+=
name|info
operator|.
name|docCount
operator|-
name|numDeletedDocs
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
DECL|method|hasDeletions
specifier|public
specifier|synchronized
name|boolean
name|hasDeletions
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|bufferedDeletesStream
operator|.
name|any
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|docWriter
operator|.
name|anyDeletions
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
specifier|final
name|SegmentInfo
name|info
range|:
name|segmentInfos
control|)
block|{
if|if
condition|(
name|info
operator|.
name|hasDeletions
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Adds a document to this index.    *    *<p> Note that if an Exception is hit (for example disk full)    * then the index will be consistent, but this document    * may not have been added.  Furthermore, it's possible    * the index will have one segment in non-compound format    * even when using compound files (when a merge has    * partially succeeded).</p>    *    *<p> This method periodically flushes pending documents    * to the Directory (see<a href="#flush">above</a>), and    * also periodically triggers segment merges in the index    * according to the {@link MergePolicy} in use.</p>    *    *<p>Merges temporarily consume space in the    * directory. The amount of space required is up to 1X the    * size of all segments being merged, when no    * readers/searchers are open against the index, and up to    * 2X the size of all segments being merged when    * readers/searchers are open against the index (see    * {@link #forceMerge(int)} for details). The sequence of    * primitive merge operations performed is governed by the    * merge policy.    *    *<p>Note that each term in the document can be no longer    * than 16383 characters, otherwise an    * IllegalArgumentException will be thrown.</p>    *    *<p>Note that it's possible to create an invalid Unicode    * string in java if a UTF16 surrogate pair is malformed.    * In this case, the invalid characters are silently    * replaced with the Unicode replacement character    * U+FFFD.</p>    *    *<p><b>NOTE</b>: if this method hits an OutOfMemoryError    * you should immediately close the writer.  See<a    * href="#OOME">above</a> for details.</p>    *    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|addDocument
specifier|public
name|void
name|addDocument
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|IndexableField
argument_list|>
name|doc
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|addDocument
argument_list|(
name|doc
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds a document to this index, using the provided analyzer instead of the    * value of {@link #getAnalyzer()}.    *    *<p>See {@link #addDocument(Iterable)} for details on    * index and IndexWriter state after an Exception, and    * flushing/merging temporary free space requirements.</p>    *    *<p><b>NOTE</b>: if this method hits an OutOfMemoryError    * you should immediately close the writer.  See<a    * href="#OOME">above</a> for details.</p>    *    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|addDocument
specifier|public
name|void
name|addDocument
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|IndexableField
argument_list|>
name|doc
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|updateDocument
argument_list|(
literal|null
argument_list|,
name|doc
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
block|}
comment|/**    * Atomically adds a block of documents with sequentially    * assigned document IDs, such that an external reader    * will see all or none of the documents.    *    *<p><b>WARNING</b>: the index does not currently record    * which documents were added as a block.  Today this is    * fine, because merging will preserve the block (as long    * as none them were deleted).  But it's possible in the    * future that Lucene may more aggressively re-order    * documents (for example, perhaps to obtain better index    * compression), in which case you may need to fully    * re-index your documents at that time.    *    *<p>See {@link #addDocument(Iterable)} for details on    * index and IndexWriter state after an Exception, and    * flushing/merging temporary free space requirements.</p>    *    *<p><b>NOTE</b>: tools that do offline splitting of an index    * (for example, IndexSplitter in contrib) or    * re-sorting of documents (for example, IndexSorter in    * contrib) are not aware of these atomically added documents    * and will likely break them up.  Use such tools at your    * own risk!    *    *<p><b>NOTE</b>: if this method hits an OutOfMemoryError    * you should immediately close the writer.  See<a    * href="#OOME">above</a> for details.</p>    *    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    *    * @lucene.experimental    */
DECL|method|addDocuments
specifier|public
name|void
name|addDocuments
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Iterable
argument_list|<
name|?
extends|extends
name|IndexableField
argument_list|>
argument_list|>
name|docs
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|addDocuments
argument_list|(
name|docs
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
block|}
comment|/**    * Atomically adds a block of documents, analyzed using the    * provided analyzer, with sequentially assigned document    * IDs, such that an external reader will see all or none    * of the documents.     *    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    *    * @lucene.experimental    */
DECL|method|addDocuments
specifier|public
name|void
name|addDocuments
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|Iterable
argument_list|<
name|?
extends|extends
name|IndexableField
argument_list|>
argument_list|>
name|docs
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|updateDocuments
argument_list|(
literal|null
argument_list|,
name|docs
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
block|}
comment|/**    * Atomically deletes documents matching the provided    * delTerm and adds a block of documents with sequentially    * assigned document IDs, such that an external reader    * will see all or none of the documents.     *    * See {@link #addDocuments(Iterable)}.    *    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    *    * @lucene.experimental    */
DECL|method|updateDocuments
specifier|public
name|void
name|updateDocuments
parameter_list|(
name|Term
name|delTerm
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|Iterable
argument_list|<
name|?
extends|extends
name|IndexableField
argument_list|>
argument_list|>
name|docs
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|updateDocuments
argument_list|(
name|delTerm
argument_list|,
name|docs
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
block|}
comment|/**    * Atomically deletes documents matching the provided    * delTerm and adds a block of documents, analyzed  using    * the provided analyzer, with sequentially    * assigned document IDs, such that an external reader    * will see all or none of the documents.     *    * See {@link #addDocuments(Iterable)}.    *    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    *    * @lucene.experimental    */
DECL|method|updateDocuments
specifier|public
name|void
name|updateDocuments
parameter_list|(
name|Term
name|delTerm
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|Iterable
argument_list|<
name|?
extends|extends
name|IndexableField
argument_list|>
argument_list|>
name|docs
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
try|try
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|boolean
name|anySegmentFlushed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|anySegmentFlushed
operator|=
name|docWriter
operator|.
name|updateDocuments
argument_list|(
name|docs
argument_list|,
name|analyzer
argument_list|,
name|delTerm
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"hit exception updating document"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|anySegmentFlushed
condition|)
block|{
name|maybeMerge
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|oom
parameter_list|)
block|{
name|handleOOM
argument_list|(
name|oom
argument_list|,
literal|"updateDocuments"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Deletes the document(s) containing<code>term</code>.    *    *<p><b>NOTE</b>: if this method hits an OutOfMemoryError    * you should immediately close the writer.  See<a    * href="#OOME">above</a> for details.</p>    *    * @param term the term to identify the documents to be deleted    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|deleteDocuments
specifier|public
name|void
name|deleteDocuments
parameter_list|(
name|Term
name|term
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
try|try
block|{
name|docWriter
operator|.
name|deleteTerms
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|oom
parameter_list|)
block|{
name|handleOOM
argument_list|(
name|oom
argument_list|,
literal|"deleteDocuments(Term)"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Deletes the document(s) containing any of the    * terms. All given deletes are applied and flushed atomically    * at the same time.    *    *<p><b>NOTE</b>: if this method hits an OutOfMemoryError    * you should immediately close the writer.  See<a    * href="#OOME">above</a> for details.</p>    *    * @param terms array of terms to identify the documents    * to be deleted    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|deleteDocuments
specifier|public
name|void
name|deleteDocuments
parameter_list|(
name|Term
modifier|...
name|terms
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
try|try
block|{
name|docWriter
operator|.
name|deleteTerms
argument_list|(
name|terms
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|oom
parameter_list|)
block|{
name|handleOOM
argument_list|(
name|oom
argument_list|,
literal|"deleteDocuments(Term..)"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Deletes the document(s) matching the provided query.    *    *<p><b>NOTE</b>: if this method hits an OutOfMemoryError    * you should immediately close the writer.  See<a    * href="#OOME">above</a> for details.</p>    *    * @param query the query to identify the documents to be deleted    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|deleteDocuments
specifier|public
name|void
name|deleteDocuments
parameter_list|(
name|Query
name|query
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
try|try
block|{
name|docWriter
operator|.
name|deleteQueries
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|oom
parameter_list|)
block|{
name|handleOOM
argument_list|(
name|oom
argument_list|,
literal|"deleteDocuments(Query)"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Deletes the document(s) matching any of the provided queries.    * All given deletes are applied and flushed atomically at the same time.    *    *<p><b>NOTE</b>: if this method hits an OutOfMemoryError    * you should immediately close the writer.  See<a    * href="#OOME">above</a> for details.</p>    *    * @param queries array of queries to identify the documents    * to be deleted    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|deleteDocuments
specifier|public
name|void
name|deleteDocuments
parameter_list|(
name|Query
modifier|...
name|queries
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
try|try
block|{
name|docWriter
operator|.
name|deleteQueries
argument_list|(
name|queries
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|oom
parameter_list|)
block|{
name|handleOOM
argument_list|(
name|oom
argument_list|,
literal|"deleteDocuments(Query..)"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Updates a document by first deleting the document(s)    * containing<code>term</code> and then adding the new    * document.  The delete and then add are atomic as seen    * by a reader on the same index (flush may happen only after    * the add).    *    *<p><b>NOTE</b>: if this method hits an OutOfMemoryError    * you should immediately close the writer.  See<a    * href="#OOME">above</a> for details.</p>    *    * @param term the term to identify the document(s) to be    * deleted    * @param doc the document to be added    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|updateDocument
specifier|public
name|void
name|updateDocument
parameter_list|(
name|Term
name|term
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|IndexableField
argument_list|>
name|doc
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|updateDocument
argument_list|(
name|term
argument_list|,
name|doc
argument_list|,
name|getAnalyzer
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Updates a document by first deleting the document(s)    * containing<code>term</code> and then adding the new    * document.  The delete and then add are atomic as seen    * by a reader on the same index (flush may happen only after    * the add).    *    *<p><b>NOTE</b>: if this method hits an OutOfMemoryError    * you should immediately close the writer.  See<a    * href="#OOME">above</a> for details.</p>    *    * @param term the term to identify the document(s) to be    * deleted    * @param doc the document to be added    * @param analyzer the analyzer to use when analyzing the document    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|updateDocument
specifier|public
name|void
name|updateDocument
parameter_list|(
name|Term
name|term
parameter_list|,
name|Iterable
argument_list|<
name|?
extends|extends
name|IndexableField
argument_list|>
name|doc
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
try|try
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|boolean
name|anySegmentFlushed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|anySegmentFlushed
operator|=
name|docWriter
operator|.
name|updateDocument
argument_list|(
name|doc
argument_list|,
name|analyzer
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"hit exception updating document"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|anySegmentFlushed
condition|)
block|{
name|maybeMerge
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|oom
parameter_list|)
block|{
name|handleOOM
argument_list|(
name|oom
argument_list|,
literal|"updateDocument"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// for test purpose
DECL|method|getSegmentCount
specifier|final
specifier|synchronized
name|int
name|getSegmentCount
parameter_list|()
block|{
return|return
name|segmentInfos
operator|.
name|size
argument_list|()
return|;
block|}
comment|// for test purpose
DECL|method|getNumBufferedDocuments
specifier|final
specifier|synchronized
name|int
name|getNumBufferedDocuments
parameter_list|()
block|{
return|return
name|docWriter
operator|.
name|getNumDocs
argument_list|()
return|;
block|}
comment|// for test purpose
DECL|method|getIndexFileNames
specifier|final
specifier|synchronized
name|Collection
argument_list|<
name|String
argument_list|>
name|getIndexFileNames
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|segmentInfos
operator|.
name|files
argument_list|(
name|directory
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|// for test purpose
DECL|method|getDocCount
specifier|final
specifier|synchronized
name|int
name|getDocCount
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|segmentInfos
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|segmentInfos
operator|.
name|info
argument_list|(
name|i
argument_list|)
operator|.
name|docCount
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
comment|// for test purpose
DECL|method|getFlushCount
specifier|final
name|int
name|getFlushCount
parameter_list|()
block|{
return|return
name|flushCount
operator|.
name|get
argument_list|()
return|;
block|}
comment|// for test purpose
DECL|method|getFlushDeletesCount
specifier|final
name|int
name|getFlushDeletesCount
parameter_list|()
block|{
return|return
name|flushDeletesCount
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|newSegmentName
specifier|final
name|String
name|newSegmentName
parameter_list|()
block|{
comment|// Cannot synchronize on IndexWriter because that causes
comment|// deadlock
synchronized|synchronized
init|(
name|segmentInfos
init|)
block|{
comment|// Important to increment changeCount so that the
comment|// segmentInfos is written on close.  Otherwise we
comment|// could close, re-open and re-return the same segment
comment|// name that was previously returned which can cause
comment|// problems at least with ConcurrentMergeScheduler.
name|changeCount
operator|++
expr_stmt|;
name|segmentInfos
operator|.
name|changed
argument_list|()
expr_stmt|;
return|return
literal|"_"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|segmentInfos
operator|.
name|counter
operator|++
argument_list|,
name|Character
operator|.
name|MAX_RADIX
argument_list|)
return|;
block|}
block|}
comment|/** If non-null, information about merges will be printed to this.    */
DECL|field|infoStream
specifier|final
name|InfoStream
name|infoStream
decl_stmt|;
comment|/**    * Forces merge policy to merge segments until there's<=    * maxNumSegments.  The actual merges to be    * executed are determined by the {@link MergePolicy}.    *    *<p>This is a horribly costly operation, especially when    * you pass a small {@code maxNumSegments}; usually you    * should only call this if the index is static (will no    * longer be changed).</p>    *    *<p>Note that this requires up to 2X the index size free    * space in your Directory (3X if you're using compound    * file format).  For example, if your index size is 10 MB    * then you need up to 20 MB free for this to complete (30    * MB if you're using compound file format).  Also,    * it's best to call {@link #commit()} afterwards,    * to allow IndexWriter to free up disk space.</p>    *    *<p>If some but not all readers re-open while merging    * is underway, this will cause> 2X temporary    * space to be consumed as those new readers will then    * hold open the temporary segments at that time.  It is    * best not to re-open readers while merging is running.</p>    *    *<p>The actual temporary usage could be much less than    * these figures (it depends on many factors).</p>    *    *<p>In general, once the this completes, the total size of the    * index will be less than the size of the starting index.    * It could be quite a bit smaller (if there were many    * pending deletes) or just slightly smaller.</p>    *    *<p>If an Exception is hit, for example    * due to disk full, the index will not be corrupt and no    * documents will have been lost.  However, it may have    * been partially merged (some segments were merged but    * not all), and it's possible that one of the segments in    * the index will be in non-compound format even when    * using compound file format.  This will occur when the    * Exception is hit during conversion of the segment into    * compound format.</p>    *    *<p>This call will merge those segments present in    * the index when the call started.  If other threads are    * still adding documents and flushing segments, those    * newly created segments will not be merged unless you    * call forceMerge again.</p>    *    *<p><b>NOTE</b>: if this method hits an OutOfMemoryError    * you should immediately close the writer.  See<a    * href="#OOME">above</a> for details.</p>    *    *<p><b>NOTE</b>: if you call {@link #close(boolean)}    * with<tt>false</tt>, which aborts all running merges,    * then any thread still running this method might hit a    * {@link MergePolicy.MergeAbortedException}.    *    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    * @see MergePolicy#findMerges    *    * @param maxNumSegments maximum number of segments left    * in the index after merging finishes   */
DECL|method|forceMerge
specifier|public
name|void
name|forceMerge
parameter_list|(
name|int
name|maxNumSegments
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|forceMerge
argument_list|(
name|maxNumSegments
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** Just like {@link #forceMerge(int)}, except you can    *  specify whether the call should block until    *  all merging completes.  This is only meaningful with a    *  {@link MergeScheduler} that is able to run merges in    *  background threads.    *    *<p><b>NOTE</b>: if this method hits an OutOfMemoryError    *  you should immediately close the writer.  See<a    *  href="#OOME">above</a> for details.</p>    */
DECL|method|forceMerge
specifier|public
name|void
name|forceMerge
parameter_list|(
name|int
name|maxNumSegments
parameter_list|,
name|boolean
name|doWait
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|maxNumSegments
operator|<
literal|1
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"maxNumSegments must be>= 1; got "
operator|+
name|maxNumSegments
argument_list|)
throw|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"forceMerge: index now "
operator|+
name|segString
argument_list|()
argument_list|)
expr_stmt|;
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"now flush at forceMerge"
argument_list|)
expr_stmt|;
block|}
name|flush
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|resetMergeExceptions
argument_list|()
expr_stmt|;
name|segmentsToMerge
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|SegmentInfo
name|info
range|:
name|segmentInfos
control|)
block|{
name|segmentsToMerge
operator|.
name|put
argument_list|(
name|info
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
name|mergeMaxNumSegments
operator|=
name|maxNumSegments
expr_stmt|;
comment|// Now mark all pending& running merges as isMaxNumSegments:
for|for
control|(
specifier|final
name|MergePolicy
operator|.
name|OneMerge
name|merge
range|:
name|pendingMerges
control|)
block|{
name|merge
operator|.
name|maxNumSegments
operator|=
name|maxNumSegments
expr_stmt|;
name|segmentsToMerge
operator|.
name|put
argument_list|(
name|merge
operator|.
name|info
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|MergePolicy
operator|.
name|OneMerge
name|merge
range|:
name|runningMerges
control|)
block|{
name|merge
operator|.
name|maxNumSegments
operator|=
name|maxNumSegments
expr_stmt|;
name|segmentsToMerge
operator|.
name|put
argument_list|(
name|merge
operator|.
name|info
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
block|}
name|maybeMerge
argument_list|(
name|maxNumSegments
argument_list|)
expr_stmt|;
if|if
condition|(
name|doWait
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|hitOOM
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this writer hit an OutOfMemoryError; cannot complete forceMerge"
argument_list|)
throw|;
block|}
if|if
condition|(
name|mergeExceptions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Forward any exceptions in background merge
comment|// threads to the current thread:
specifier|final
name|int
name|size
init|=
name|mergeExceptions
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|MergePolicy
operator|.
name|OneMerge
name|merge
init|=
name|mergeExceptions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|merge
operator|.
name|maxNumSegments
operator|!=
operator|-
literal|1
condition|)
block|{
name|IOException
name|err
init|=
operator|new
name|IOException
argument_list|(
literal|"background merge hit exception: "
operator|+
name|merge
operator|.
name|segString
argument_list|(
name|directory
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Throwable
name|t
init|=
name|merge
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
name|err
operator|.
name|initCause
argument_list|(
name|t
argument_list|)
expr_stmt|;
throw|throw
name|err
throw|;
block|}
block|}
block|}
if|if
condition|(
name|maxNumSegmentsMergesPending
argument_list|()
condition|)
name|doWait
argument_list|()
expr_stmt|;
else|else
break|break;
block|}
block|}
comment|// If close is called while we are still
comment|// running, throw an exception so the calling
comment|// thread will know merging did not
comment|// complete
name|ensureOpen
argument_list|()
expr_stmt|;
block|}
comment|// NOTE: in the ConcurrentMergeScheduler case, when
comment|// doWait is false, we can return immediately while
comment|// background threads accomplish the merging
block|}
comment|/** Returns true if any merges in pendingMerges or    *  runningMerges are maxNumSegments merges. */
DECL|method|maxNumSegmentsMergesPending
specifier|private
specifier|synchronized
name|boolean
name|maxNumSegmentsMergesPending
parameter_list|()
block|{
for|for
control|(
specifier|final
name|MergePolicy
operator|.
name|OneMerge
name|merge
range|:
name|pendingMerges
control|)
block|{
if|if
condition|(
name|merge
operator|.
name|maxNumSegments
operator|!=
operator|-
literal|1
condition|)
return|return
literal|true
return|;
block|}
for|for
control|(
specifier|final
name|MergePolicy
operator|.
name|OneMerge
name|merge
range|:
name|runningMerges
control|)
block|{
if|if
condition|(
name|merge
operator|.
name|maxNumSegments
operator|!=
operator|-
literal|1
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/** Just like {@link #forceMergeDeletes()}, except you can    *  specify whether the call should block until the    *  operation completes.  This is only meaningful with a    *  {@link MergeScheduler} that is able to run merges in    *  background threads.    *    *<p><b>NOTE</b>: if this method hits an OutOfMemoryError    * you should immediately close the writer.  See<a    * href="#OOME">above</a> for details.</p>    *    *<p><b>NOTE</b>: if you call {@link #close(boolean)}    * with<tt>false</tt>, which aborts all running merges,    * then any thread still running this method might hit a    * {@link MergePolicy.MergeAbortedException}.    */
DECL|method|forceMergeDeletes
specifier|public
name|void
name|forceMergeDeletes
parameter_list|(
name|boolean
name|doWait
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|flush
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"forceMergeDeletes: index now "
operator|+
name|segString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|MergePolicy
operator|.
name|MergeSpecification
name|spec
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|spec
operator|=
name|mergePolicy
operator|.
name|findForcedDeletesMerges
argument_list|(
name|segmentInfos
argument_list|)
expr_stmt|;
if|if
condition|(
name|spec
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|numMerges
init|=
name|spec
operator|.
name|merges
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMerges
condition|;
name|i
operator|++
control|)
name|registerMerge
argument_list|(
name|spec
operator|.
name|merges
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|mergeScheduler
operator|.
name|merge
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|spec
operator|!=
literal|null
operator|&&
name|doWait
condition|)
block|{
specifier|final
name|int
name|numMerges
init|=
name|spec
operator|.
name|merges
operator|.
name|size
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|boolean
name|running
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|running
condition|)
block|{
if|if
condition|(
name|hitOOM
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this writer hit an OutOfMemoryError; cannot complete forceMergeDeletes"
argument_list|)
throw|;
block|}
comment|// Check each merge that MergePolicy asked us to
comment|// do, to see if any of them are still running and
comment|// if any of them have hit an exception.
name|running
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMerges
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|MergePolicy
operator|.
name|OneMerge
name|merge
init|=
name|spec
operator|.
name|merges
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|pendingMerges
operator|.
name|contains
argument_list|(
name|merge
argument_list|)
operator|||
name|runningMerges
operator|.
name|contains
argument_list|(
name|merge
argument_list|)
condition|)
name|running
operator|=
literal|true
expr_stmt|;
name|Throwable
name|t
init|=
name|merge
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|IOException
name|ioe
init|=
operator|new
name|IOException
argument_list|(
literal|"background merge hit exception: "
operator|+
name|merge
operator|.
name|segString
argument_list|(
name|directory
argument_list|)
argument_list|)
decl_stmt|;
name|ioe
operator|.
name|initCause
argument_list|(
name|t
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
comment|// If any of our merges are still running, wait:
if|if
condition|(
name|running
condition|)
name|doWait
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// NOTE: in the ConcurrentMergeScheduler case, when
comment|// doWait is false, we can return immediately while
comment|// background threads accomplish the merging
block|}
comment|/**    *  Forces merging of all segments that have deleted    *  documents.  The actual merges to be executed are    *  determined by the {@link MergePolicy}.  For example,    *  the default {@link TieredMergePolicy} will only    *  pick a segment if the percentage of    *  deleted docs is over 10%.    *    *<p>This is often a horribly costly operation; rarely    *  is it warranted.</p>    *    *<p>To see how    *  many deletions you have pending in your index, call    *  {@link IndexReader#numDeletedDocs}.</p>    *    *<p><b>NOTE</b>: this method first flushes a new    *  segment (if there are indexed documents), and applies    *  all buffered deletes.    *    *<p><b>NOTE</b>: if this method hits an OutOfMemoryError    *  you should immediately close the writer.  See<a    *  href="#OOME">above</a> for details.</p>    */
DECL|method|forceMergeDeletes
specifier|public
name|void
name|forceMergeDeletes
parameter_list|()
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|forceMergeDeletes
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Expert: asks the mergePolicy whether any merges are    * necessary now and if so, runs the requested merges and    * then iterate (test again if merges are needed) until no    * more merges are returned by the mergePolicy.    *    * Explicit calls to maybeMerge() are usually not    * necessary. The most common case is when merge policy    * parameters have changed.    *    *<p><b>NOTE</b>: if this method hits an OutOfMemoryError    * you should immediately close the writer.  See<a    * href="#OOME">above</a> for details.</p>    */
DECL|method|maybeMerge
specifier|public
specifier|final
name|void
name|maybeMerge
parameter_list|()
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|maybeMerge
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|maybeMerge
specifier|private
specifier|final
name|void
name|maybeMerge
parameter_list|(
name|int
name|maxNumSegments
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|updatePendingMerges
argument_list|(
name|maxNumSegments
argument_list|)
expr_stmt|;
name|mergeScheduler
operator|.
name|merge
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|updatePendingMerges
specifier|private
specifier|synchronized
name|void
name|updatePendingMerges
parameter_list|(
name|int
name|maxNumSegments
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
assert|assert
name|maxNumSegments
operator|==
operator|-
literal|1
operator|||
name|maxNumSegments
operator|>
literal|0
assert|;
if|if
condition|(
name|stopMerges
condition|)
block|{
return|return;
block|}
comment|// Do not start new merges if we've hit OOME
if|if
condition|(
name|hitOOM
condition|)
block|{
return|return;
block|}
specifier|final
name|MergePolicy
operator|.
name|MergeSpecification
name|spec
decl_stmt|;
if|if
condition|(
name|maxNumSegments
operator|!=
operator|-
literal|1
condition|)
block|{
name|spec
operator|=
name|mergePolicy
operator|.
name|findForcedMerges
argument_list|(
name|segmentInfos
argument_list|,
name|maxNumSegments
argument_list|,
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|segmentsToMerge
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|spec
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|numMerges
init|=
name|spec
operator|.
name|merges
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMerges
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|MergePolicy
operator|.
name|OneMerge
name|merge
init|=
name|spec
operator|.
name|merges
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|merge
operator|.
name|maxNumSegments
operator|=
name|maxNumSegments
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|spec
operator|=
name|mergePolicy
operator|.
name|findMerges
argument_list|(
name|segmentInfos
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|spec
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|numMerges
init|=
name|spec
operator|.
name|merges
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMerges
condition|;
name|i
operator|++
control|)
block|{
name|registerMerge
argument_list|(
name|spec
operator|.
name|merges
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Expert: to be used by a {@link MergePolicy} to avoid    *  selecting merges for segments already being merged.    *  The returned collection is not cloned, and thus is    *  only safe to access if you hold IndexWriter's lock    *  (which you do when IndexWriter invokes the    *  MergePolicy).    *    *<p>Do not alter the returned collection! */
DECL|method|getMergingSegments
specifier|public
specifier|synchronized
name|Collection
argument_list|<
name|SegmentInfo
argument_list|>
name|getMergingSegments
parameter_list|()
block|{
return|return
name|mergingSegments
return|;
block|}
comment|/**    * Expert: the {@link MergeScheduler} calls this method to retrieve the next    * merge requested by the MergePolicy    *     * @lucene.experimental    */
DECL|method|getNextMerge
specifier|public
specifier|synchronized
name|MergePolicy
operator|.
name|OneMerge
name|getNextMerge
parameter_list|()
block|{
if|if
condition|(
name|pendingMerges
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
else|else
block|{
comment|// Advance the merge from pending to running
name|MergePolicy
operator|.
name|OneMerge
name|merge
init|=
name|pendingMerges
operator|.
name|removeFirst
argument_list|()
decl_stmt|;
name|runningMerges
operator|.
name|add
argument_list|(
name|merge
argument_list|)
expr_stmt|;
return|return
name|merge
return|;
block|}
block|}
comment|/**    * Close the<code>IndexWriter</code> without committing    * any changes that have occurred since the last commit    * (or since it was opened, if commit hasn't been called).    * This removes any temporary files that had been created,    * after which the state of the index will be the same as    * it was when commit() was last called or when this    * writer was first opened.  This also clears a previous    * call to {@link #prepareCommit}.    * @throws IOException if there is a low-level IO error    */
DECL|method|rollback
specifier|public
name|void
name|rollback
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
comment|// Ensure that only one thread actually gets to do the closing:
if|if
condition|(
name|shouldClose
argument_list|()
condition|)
name|rollbackInternal
argument_list|()
expr_stmt|;
block|}
DECL|method|rollbackInternal
specifier|private
name|void
name|rollbackInternal
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"rollback"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|finishMerges
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|stopMerges
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"rollback: done finish merges"
argument_list|)
expr_stmt|;
block|}
comment|// Must pre-close these two, in case they increment
comment|// changeCount so that we can then set it to false
comment|// before calling closeInternal
name|mergePolicy
operator|.
name|close
argument_list|()
expr_stmt|;
name|mergeScheduler
operator|.
name|close
argument_list|()
expr_stmt|;
name|bufferedDeletesStream
operator|.
name|clear
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|pendingCommit
operator|!=
literal|null
condition|)
block|{
name|pendingCommit
operator|.
name|rollbackCommit
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|deleter
operator|.
name|decRef
argument_list|(
name|pendingCommit
argument_list|)
expr_stmt|;
name|pendingCommit
operator|=
literal|null
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
comment|// Keep the same segmentInfos instance but replace all
comment|// of its SegmentInfo instances.  This is so the next
comment|// attempt to commit using this instance of IndexWriter
comment|// will always write to a new generation ("write
comment|// once").
name|segmentInfos
operator|.
name|rollbackSegmentInfos
argument_list|(
name|rollbackSegments
argument_list|)
expr_stmt|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"rollback: infos="
operator|+
name|segString
argument_list|(
name|segmentInfos
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|docWriter
operator|.
name|abort
argument_list|()
expr_stmt|;
assert|assert
name|testPoint
argument_list|(
literal|"rollback before checkpoint"
argument_list|)
assert|;
comment|// Ask deleter to locate unreferenced files& remove
comment|// them:
name|deleter
operator|.
name|checkpoint
argument_list|(
name|segmentInfos
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|deleter
operator|.
name|refresh
argument_list|()
expr_stmt|;
comment|// Don't bother saving any changes in our segmentInfos
name|readerPool
operator|.
name|dropAll
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|lastCommitChangeCount
operator|=
name|changeCount
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|oom
parameter_list|)
block|{
name|handleOOM
argument_list|(
name|oom
argument_list|,
literal|"rollbackInternal"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|closing
operator|=
literal|false
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"hit exception during rollback"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|closeInternal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete all documents in the index.    *    *<p>This method will drop all buffered documents and will    *    remove all segments from the index. This change will not be    *    visible until a {@link #commit()} has been called. This method    *    can be rolled back using {@link #rollback()}.</p>    *    *<p>NOTE: this method is much faster than using deleteDocuments( new MatchAllDocsQuery() ).</p>    *    *<p>NOTE: this method will forcefully abort all merges    *    in progress.  If other threads are running {@link    *    #forceMerge}, {@link #addIndexes(IndexReader[])} or    *    {@link #forceMergeDeletes} methods, they may receive    *    {@link MergePolicy.MergeAbortedException}s.    */
DECL|method|deleteAll
specifier|public
specifier|synchronized
name|void
name|deleteAll
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// Abort any running merges
name|finishMerges
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Remove any buffered docs
name|docWriter
operator|.
name|abort
argument_list|()
expr_stmt|;
comment|// Remove all segments
name|segmentInfos
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Ask deleter to locate unreferenced files& remove them:
name|deleter
operator|.
name|checkpoint
argument_list|(
name|segmentInfos
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|deleter
operator|.
name|refresh
argument_list|()
expr_stmt|;
comment|// Don't bother saving any changes in our segmentInfos
name|readerPool
operator|.
name|dropAll
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Mark that the index has changed
operator|++
name|changeCount
expr_stmt|;
name|segmentInfos
operator|.
name|changed
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|oom
parameter_list|)
block|{
name|handleOOM
argument_list|(
name|oom
argument_list|,
literal|"deleteAll"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"hit exception during deleteAll"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|finishMerges
specifier|private
specifier|synchronized
name|void
name|finishMerges
parameter_list|(
name|boolean
name|waitForMerges
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|waitForMerges
condition|)
block|{
name|stopMerges
operator|=
literal|true
expr_stmt|;
comment|// Abort all pending& running merges:
for|for
control|(
specifier|final
name|MergePolicy
operator|.
name|OneMerge
name|merge
range|:
name|pendingMerges
control|)
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"now abort pending merge "
operator|+
name|segString
argument_list|(
name|merge
operator|.
name|segments
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|merge
operator|.
name|abort
argument_list|()
expr_stmt|;
name|mergeFinish
argument_list|(
name|merge
argument_list|)
expr_stmt|;
block|}
name|pendingMerges
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|MergePolicy
operator|.
name|OneMerge
name|merge
range|:
name|runningMerges
control|)
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"now abort running merge "
operator|+
name|segString
argument_list|(
name|merge
operator|.
name|segments
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|merge
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
comment|// These merges periodically check whether they have
comment|// been aborted, and stop if so.  We wait here to make
comment|// sure they all stop.  It should not take very long
comment|// because the merge threads periodically check if
comment|// they are aborted.
while|while
condition|(
name|runningMerges
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"now wait for "
operator|+
name|runningMerges
operator|.
name|size
argument_list|()
operator|+
literal|" running merge to abort"
argument_list|)
expr_stmt|;
block|}
name|doWait
argument_list|()
expr_stmt|;
block|}
name|stopMerges
operator|=
literal|false
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
assert|assert
literal|0
operator|==
name|mergingSegments
operator|.
name|size
argument_list|()
assert|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"all running merges have aborted"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// waitForMerges() will ensure any running addIndexes finishes.
comment|// It's fine if a new one attempts to start because from our
comment|// caller above the call will see that we are in the
comment|// process of closing, and will throw an
comment|// AlreadyClosedException.
name|waitForMerges
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Wait for any currently outstanding merges to finish.    *    *<p>It is guaranteed that any merges started prior to calling this method    *    will have completed once this method completes.</p>    */
DECL|method|waitForMerges
specifier|public
specifier|synchronized
name|void
name|waitForMerges
parameter_list|()
block|{
name|ensureOpen
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"waitForMerges"
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|pendingMerges
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|||
name|runningMerges
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|doWait
argument_list|()
expr_stmt|;
block|}
comment|// sanity check
assert|assert
literal|0
operator|==
name|mergingSegments
operator|.
name|size
argument_list|()
assert|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"waitForMerges done"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Called whenever the SegmentInfos has been updated and    * the index files referenced exist (correctly) in the    * index directory.    */
DECL|method|checkpoint
specifier|synchronized
name|void
name|checkpoint
parameter_list|()
throws|throws
name|IOException
block|{
name|changeCount
operator|++
expr_stmt|;
name|segmentInfos
operator|.
name|changed
argument_list|()
expr_stmt|;
name|deleter
operator|.
name|checkpoint
argument_list|(
name|segmentInfos
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Prepares the {@link SegmentInfo} for the new flushed segment and persists    * the deleted documents {@link MutableBits}. Use    * {@link #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)} to    * publish the returned {@link SegmentInfo} together with its segment private    * delete packet.    *     * @see #publishFlushedSegment(SegmentInfo, FrozenBufferedDeletes)    */
DECL|method|prepareFlushedSegment
name|SegmentInfo
name|prepareFlushedSegment
parameter_list|(
name|FlushedSegment
name|flushedSegment
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|flushedSegment
operator|!=
literal|null
assert|;
name|SegmentInfo
name|newSegment
init|=
name|flushedSegment
operator|.
name|segmentInfo
decl_stmt|;
name|setDiagnostics
argument_list|(
name|newSegment
argument_list|,
literal|"flush"
argument_list|)
expr_stmt|;
name|IOContext
name|context
init|=
operator|new
name|IOContext
argument_list|(
operator|new
name|FlushInfo
argument_list|(
name|newSegment
operator|.
name|docCount
argument_list|,
name|newSegment
operator|.
name|sizeInBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|useCompoundFile
argument_list|(
name|newSegment
argument_list|)
condition|)
block|{
name|String
name|compoundFileName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|newSegment
operator|.
name|name
argument_list|,
literal|""
argument_list|,
name|IndexFileNames
operator|.
name|COMPOUND_FILE_EXTENSION
argument_list|)
decl_stmt|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"creating compound file "
operator|+
name|compoundFileName
argument_list|)
expr_stmt|;
block|}
comment|// Now build compound file
specifier|final
name|Directory
name|cfsDir
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|directory
argument_list|,
name|compoundFileName
argument_list|,
name|context
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|IOException
name|prior
init|=
literal|null
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|fileName
range|:
name|newSegment
operator|.
name|files
argument_list|()
control|)
block|{
name|directory
operator|.
name|copy
argument_list|(
name|cfsDir
argument_list|,
name|fileName
argument_list|,
name|fileName
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|prior
operator|=
name|ex
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|prior
argument_list|,
name|cfsDir
argument_list|)
expr_stmt|;
block|}
comment|// Perform the merge
synchronized|synchronized
init|(
name|this
init|)
block|{
name|deleter
operator|.
name|deleteNewFiles
argument_list|(
name|newSegment
operator|.
name|files
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|newSegment
operator|.
name|setUseCompoundFile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Must write deleted docs after the CFS so we don't
comment|// slurp the del file into CFS:
if|if
condition|(
name|flushedSegment
operator|.
name|liveDocs
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|delCount
init|=
name|flushedSegment
operator|.
name|delCount
decl_stmt|;
assert|assert
name|delCount
operator|>
literal|0
assert|;
name|newSegment
operator|.
name|setDelCount
argument_list|(
name|delCount
argument_list|)
expr_stmt|;
name|newSegment
operator|.
name|advanceDelGen
argument_list|()
expr_stmt|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"flush: write "
operator|+
name|delCount
operator|+
literal|" deletes gen="
operator|+
name|flushedSegment
operator|.
name|segmentInfo
operator|.
name|getDelGen
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO: in the NRT case it'd be better to hand
comment|// this del vector over to the
comment|// shortly-to-be-opened SegmentReader and let it
comment|// carry the changes; there's no reason to use
comment|// filesystem as intermediary here.
name|SegmentInfo
name|info
init|=
name|flushedSegment
operator|.
name|segmentInfo
decl_stmt|;
name|Codec
name|codec
init|=
name|info
operator|.
name|getCodec
argument_list|()
decl_stmt|;
name|codec
operator|.
name|liveDocsFormat
argument_list|()
operator|.
name|writeLiveDocs
argument_list|(
name|flushedSegment
operator|.
name|liveDocs
argument_list|,
name|directory
argument_list|,
name|info
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"hit exception "
operator|+
literal|"reating compound file for newly flushed segment "
operator|+
name|newSegment
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|deleter
operator|.
name|refresh
argument_list|(
name|newSegment
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|newSegment
return|;
block|}
DECL|method|publishFrozenDeletes
specifier|synchronized
name|void
name|publishFrozenDeletes
parameter_list|(
name|FrozenBufferedDeletes
name|packet
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|packet
operator|!=
literal|null
operator|&&
name|packet
operator|.
name|any
argument_list|()
assert|;
synchronized|synchronized
init|(
name|bufferedDeletesStream
init|)
block|{
name|bufferedDeletesStream
operator|.
name|push
argument_list|(
name|packet
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Atomically adds the segment private delete packet and publishes the flushed    * segments SegmentInfo to the index writer. NOTE: use    * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the    * {@link SegmentInfo} for the flushed segment.    *     * @see #prepareFlushedSegment(FlushedSegment)    */
DECL|method|publishFlushedSegment
specifier|synchronized
name|void
name|publishFlushedSegment
parameter_list|(
name|SegmentInfo
name|newSegment
parameter_list|,
name|FrozenBufferedDeletes
name|packet
parameter_list|,
name|FrozenBufferedDeletes
name|globalPacket
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Lock order IW -> BDS
synchronized|synchronized
init|(
name|bufferedDeletesStream
init|)
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"publishFlushedSegment"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|globalPacket
operator|!=
literal|null
operator|&&
name|globalPacket
operator|.
name|any
argument_list|()
condition|)
block|{
name|bufferedDeletesStream
operator|.
name|push
argument_list|(
name|globalPacket
argument_list|)
expr_stmt|;
block|}
comment|// Publishing the segment must be synched on IW -> BDS to make the sure
comment|// that no merge prunes away the seg. private delete packet
specifier|final
name|long
name|nextGen
decl_stmt|;
if|if
condition|(
name|packet
operator|!=
literal|null
operator|&&
name|packet
operator|.
name|any
argument_list|()
condition|)
block|{
name|nextGen
operator|=
name|bufferedDeletesStream
operator|.
name|push
argument_list|(
name|packet
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Since we don't have a delete packet to apply we can get a new
comment|// generation right away
name|nextGen
operator|=
name|bufferedDeletesStream
operator|.
name|getNextGen
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"publish sets newSegment delGen="
operator|+
name|nextGen
operator|+
literal|" seg="
operator|+
name|newSegment
argument_list|)
expr_stmt|;
block|}
name|newSegment
operator|.
name|setBufferedDeletesGen
argument_list|(
name|nextGen
argument_list|)
expr_stmt|;
name|segmentInfos
operator|.
name|add
argument_list|(
name|newSegment
argument_list|)
expr_stmt|;
name|checkpoint
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|useCompoundFile
specifier|synchronized
name|boolean
name|useCompoundFile
parameter_list|(
name|SegmentInfo
name|segmentInfo
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|mergePolicy
operator|.
name|useCompoundFile
argument_list|(
name|segmentInfos
argument_list|,
name|segmentInfo
argument_list|)
return|;
block|}
DECL|method|resetMergeExceptions
specifier|private
specifier|synchronized
name|void
name|resetMergeExceptions
parameter_list|()
block|{
name|mergeExceptions
operator|=
operator|new
name|ArrayList
argument_list|<
name|MergePolicy
operator|.
name|OneMerge
argument_list|>
argument_list|()
expr_stmt|;
name|mergeGen
operator|++
expr_stmt|;
block|}
DECL|method|noDupDirs
specifier|private
name|void
name|noDupDirs
parameter_list|(
name|Directory
modifier|...
name|dirs
parameter_list|)
block|{
name|HashSet
argument_list|<
name|Directory
argument_list|>
name|dups
init|=
operator|new
name|HashSet
argument_list|<
name|Directory
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|dups
operator|.
name|contains
argument_list|(
name|dirs
index|[
name|i
index|]
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Directory "
operator|+
name|dirs
index|[
name|i
index|]
operator|+
literal|" appears more than once"
argument_list|)
throw|;
if|if
condition|(
name|dirs
index|[
name|i
index|]
operator|==
name|directory
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot add directory to itself"
argument_list|)
throw|;
name|dups
operator|.
name|add
argument_list|(
name|dirs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Adds all segments from an array of indexes into this index.    *    *<p>This may be used to parallelize batch indexing. A large document    * collection can be broken into sub-collections. Each sub-collection can be    * indexed in parallel, on a different thread, process or machine. The    * complete index can then be created by merging sub-collection indexes    * with this method.    *    *<p>    *<b>NOTE:</b> the index in each {@link Directory} must not be    * changed (opened by a writer) while this method is    * running.  This method does not acquire a write lock in    * each input Directory, so it is up to the caller to    * enforce this.    *    *<p>This method is transactional in how Exceptions are    * handled: it does not commit a new segments_N file until    * all indexes are added.  This means if an Exception    * occurs (for example disk full), then either no indexes    * will have been added or they all will have been.    *    *<p>Note that this requires temporary free space in the    * {@link Directory} up to 2X the sum of all input indexes    * (including the starting index). If readers/searchers    * are open against the starting index, then temporary    * free space required will be higher by the size of the    * starting index (see {@link #forceMerge(int)} for details).    *    *<p>    *<b>NOTE:</b> this method only copies the segments of the incoming indexes    * and does not merge them. Therefore deleted documents are not removed and    * the new segments are not merged with the existing ones.    *    *<p>This requires this index not be among those to be added.    *    *<p>    *<b>NOTE</b>: if this method hits an OutOfMemoryError    * you should immediately close the writer. See<a    * href="#OOME">above</a> for details.    *    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|addIndexes
specifier|public
name|void
name|addIndexes
parameter_list|(
name|Directory
modifier|...
name|dirs
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|noDupDirs
argument_list|(
name|dirs
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"flush at addIndexes(Directory...)"
argument_list|)
expr_stmt|;
block|}
name|flush
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SegmentInfo
argument_list|>
name|infos
init|=
operator|new
name|ArrayList
argument_list|<
name|SegmentInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Directory
name|dir
range|:
name|dirs
control|)
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"addIndexes: process directory "
operator|+
name|dir
argument_list|)
expr_stmt|;
block|}
name|SegmentInfos
name|sis
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
comment|// read infos from dir
name|sis
operator|.
name|read
argument_list|(
name|dir
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|dsFilesCopied
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dsNames
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SegmentInfo
name|info
range|:
name|sis
control|)
block|{
assert|assert
operator|!
name|infos
operator|.
name|contains
argument_list|(
name|info
argument_list|)
operator|:
literal|"dup info dir="
operator|+
name|info
operator|.
name|dir
operator|+
literal|" name="
operator|+
name|info
operator|.
name|name
assert|;
name|String
name|newSegName
init|=
name|newSegmentName
argument_list|()
decl_stmt|;
name|String
name|dsName
init|=
name|info
operator|.
name|getDocStoreSegment
argument_list|()
decl_stmt|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"addIndexes: process segment origName="
operator|+
name|info
operator|.
name|name
operator|+
literal|" newName="
operator|+
name|newSegName
operator|+
literal|" dsName="
operator|+
name|dsName
operator|+
literal|" info="
operator|+
name|info
argument_list|)
expr_stmt|;
block|}
name|IOContext
name|context
init|=
operator|new
name|IOContext
argument_list|(
operator|new
name|MergeInfo
argument_list|(
name|info
operator|.
name|docCount
argument_list|,
name|info
operator|.
name|sizeInBytes
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|copySegmentAsIs
argument_list|(
name|info
argument_list|,
name|newSegName
argument_list|,
name|dsNames
argument_list|,
name|dsFilesCopied
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|infos
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|segmentInfos
operator|.
name|addAll
argument_list|(
name|infos
argument_list|)
expr_stmt|;
name|checkpoint
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|oom
parameter_list|)
block|{
name|handleOOM
argument_list|(
name|oom
argument_list|,
literal|"addIndexes(Directory...)"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Merges the provided indexes into this index.    *<p>The provided IndexReaders are not closed.</p>    *    *<p><b>NOTE:</b> while this is running, any attempts to    * add or delete documents (with another thread) will be    * paused until this method completes.    *    *<p>See {@link #addIndexes} for details on transactional     * semantics, temporary free space required in the Directory,     * and non-CFS segments on an Exception.</p>    *    *<p><b>NOTE</b>: if this method hits an OutOfMemoryError    * you should immediately close the writer.  See<a    * href="#OOME">above</a> for details.</p>    *    *<p><b>NOTE</b>: if you call {@link #close(boolean)}    * with<tt>false</tt>, which aborts all running merges,    * then any thread still running this method might hit a    * {@link MergePolicy.MergeAbortedException}.    *    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|addIndexes
specifier|public
name|void
name|addIndexes
parameter_list|(
name|IndexReader
modifier|...
name|readers
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|int
name|numDocs
init|=
literal|0
decl_stmt|;
try|try
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"flush at addIndexes(IndexReader...)"
argument_list|)
expr_stmt|;
block|}
name|flush
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|mergedName
init|=
name|newSegmentName
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexReader
name|indexReader
range|:
name|readers
control|)
block|{
name|numDocs
operator|+=
name|indexReader
operator|.
name|numDocs
argument_list|()
expr_stmt|;
block|}
specifier|final
name|IOContext
name|context
init|=
operator|new
name|IOContext
argument_list|(
operator|new
name|MergeInfo
argument_list|(
name|numDocs
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// TODO: somehow we should fix this merge so it's
comment|// abortable so that IW.close(false) is able to stop it
name|SegmentMerger
name|merger
init|=
operator|new
name|SegmentMerger
argument_list|(
name|infoStream
argument_list|,
name|directory
argument_list|,
name|config
operator|.
name|getTermIndexInterval
argument_list|()
argument_list|,
name|mergedName
argument_list|,
name|MergeState
operator|.
name|CheckAbort
operator|.
name|NONE
argument_list|,
name|payloadProcessorProvider
argument_list|,
operator|new
name|FieldInfos
argument_list|(
name|globalFieldNumberMap
argument_list|)
argument_list|,
name|codec
argument_list|,
name|context
argument_list|)
decl_stmt|;
for|for
control|(
name|IndexReader
name|reader
range|:
name|readers
control|)
comment|// add new indexes
name|merger
operator|.
name|add
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|MergeState
name|mergeState
init|=
name|merger
operator|.
name|merge
argument_list|()
decl_stmt|;
comment|// merge 'em
name|int
name|docCount
init|=
name|mergeState
operator|.
name|mergedDocCount
decl_stmt|;
specifier|final
name|FieldInfos
name|fieldInfos
init|=
name|mergeState
operator|.
name|fieldInfos
decl_stmt|;
name|SegmentInfo
name|info
init|=
operator|new
name|SegmentInfo
argument_list|(
name|mergedName
argument_list|,
name|docCount
argument_list|,
name|directory
argument_list|,
literal|false
argument_list|,
name|codec
argument_list|,
name|fieldInfos
argument_list|)
decl_stmt|;
name|setDiagnostics
argument_list|(
name|info
argument_list|,
literal|"addIndexes(IndexReader...)"
argument_list|)
expr_stmt|;
name|boolean
name|useCompoundFile
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// Guard segmentInfos
if|if
condition|(
name|stopMerges
condition|)
block|{
name|deleter
operator|.
name|deleteNewFiles
argument_list|(
name|info
operator|.
name|files
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|ensureOpen
argument_list|()
expr_stmt|;
name|useCompoundFile
operator|=
name|mergePolicy
operator|.
name|useCompoundFile
argument_list|(
name|segmentInfos
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
comment|// Now create the compound file if needed
if|if
condition|(
name|useCompoundFile
condition|)
block|{
name|createCompoundFile
argument_list|(
name|directory
argument_list|,
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|mergedName
argument_list|,
literal|""
argument_list|,
name|IndexFileNames
operator|.
name|COMPOUND_FILE_EXTENSION
argument_list|)
argument_list|,
name|MergeState
operator|.
name|CheckAbort
operator|.
name|NONE
argument_list|,
name|info
argument_list|,
name|context
argument_list|)
expr_stmt|;
comment|// delete new non cfs files directly: they were never
comment|// registered with IFD
synchronized|synchronized
init|(
name|this
init|)
block|{
name|deleter
operator|.
name|deleteNewFiles
argument_list|(
name|info
operator|.
name|files
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|setUseCompoundFile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Register the new segment
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|stopMerges
condition|)
block|{
name|deleter
operator|.
name|deleteNewFiles
argument_list|(
name|info
operator|.
name|files
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|ensureOpen
argument_list|()
expr_stmt|;
name|segmentInfos
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|checkpoint
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|oom
parameter_list|)
block|{
name|handleOOM
argument_list|(
name|oom
argument_list|,
literal|"addIndexes(IndexReader...)"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Copies the segment files as-is into the IndexWriter's directory. */
DECL|method|copySegmentAsIs
specifier|private
name|void
name|copySegmentAsIs
parameter_list|(
name|SegmentInfo
name|info
parameter_list|,
name|String
name|segName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dsNames
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|dsFilesCopied
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Determine if the doc store of this segment needs to be copied. It's
comment|// only relevant for segments that share doc store with others,
comment|// because the DS might have been copied already, in which case we
comment|// just want to update the DS name of this SegmentInfo.
comment|// NOTE: pre-3x segments include a null DSName if they don't share doc
comment|// store. The following code ensures we don't accidentally insert
comment|// 'null' to the map.
name|String
name|dsName
init|=
name|info
operator|.
name|getDocStoreSegment
argument_list|()
decl_stmt|;
specifier|final
name|String
name|newDsName
decl_stmt|;
if|if
condition|(
name|dsName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|dsNames
operator|.
name|containsKey
argument_list|(
name|dsName
argument_list|)
condition|)
block|{
name|newDsName
operator|=
name|dsNames
operator|.
name|get
argument_list|(
name|dsName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dsNames
operator|.
name|put
argument_list|(
name|dsName
argument_list|,
name|segName
argument_list|)
expr_stmt|;
name|newDsName
operator|=
name|segName
expr_stmt|;
block|}
block|}
else|else
block|{
name|newDsName
operator|=
name|segName
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|codecDocStoreFiles
init|=
name|info
operator|.
name|codecDocStoreFiles
argument_list|()
decl_stmt|;
comment|// Copy the segment files
for|for
control|(
name|String
name|file
range|:
name|info
operator|.
name|files
argument_list|()
control|)
block|{
specifier|final
name|String
name|newFileName
decl_stmt|;
if|if
condition|(
name|codecDocStoreFiles
operator|.
name|contains
argument_list|(
name|file
argument_list|)
operator|||
name|file
operator|.
name|endsWith
argument_list|(
name|IndexFileNames
operator|.
name|COMPOUND_FILE_STORE_EXTENSION
argument_list|)
condition|)
block|{
name|newFileName
operator|=
name|newDsName
operator|+
name|IndexFileNames
operator|.
name|stripSegmentName
argument_list|(
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|dsFilesCopied
operator|.
name|contains
argument_list|(
name|newFileName
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|dsFilesCopied
operator|.
name|add
argument_list|(
name|newFileName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newFileName
operator|=
name|segName
operator|+
name|IndexFileNames
operator|.
name|stripSegmentName
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
assert|assert
operator|!
name|directory
operator|.
name|fileExists
argument_list|(
name|newFileName
argument_list|)
operator|:
literal|"file \""
operator|+
name|newFileName
operator|+
literal|"\" already exists"
assert|;
name|info
operator|.
name|dir
operator|.
name|copy
argument_list|(
name|directory
argument_list|,
name|file
argument_list|,
name|newFileName
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|setDocStore
argument_list|(
name|info
operator|.
name|getDocStoreOffset
argument_list|()
argument_list|,
name|newDsName
argument_list|,
name|info
operator|.
name|getDocStoreIsCompoundFile
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|dir
operator|=
name|directory
expr_stmt|;
name|info
operator|.
name|name
operator|=
name|segName
expr_stmt|;
block|}
comment|/**    * A hook for extending classes to execute operations after pending added and    * deleted documents have been flushed to the Directory but before the change    * is committed (new segments_N file written).    */
DECL|method|doAfterFlush
specifier|protected
name|void
name|doAfterFlush
parameter_list|()
throws|throws
name|IOException
block|{}
comment|/**    * A hook for extending classes to execute operations before pending added and    * deleted documents are flushed to the Directory.    */
DECL|method|doBeforeFlush
specifier|protected
name|void
name|doBeforeFlush
parameter_list|()
throws|throws
name|IOException
block|{}
comment|/** Expert: prepare for commit.    *    *<p><b>NOTE</b>: if this method hits an OutOfMemoryError    * you should immediately close the writer.  See<a    * href="#OOME">above</a> for details.</p>    *    * @see #prepareCommit(Map) */
DECL|method|prepareCommit
specifier|public
specifier|final
name|void
name|prepareCommit
parameter_list|()
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|prepareCommit
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**<p>Expert: prepare for commit, specifying    *  commitUserData Map (String -> String).  This does the    *  first phase of 2-phase commit. This method does all    *  steps necessary to commit changes since this writer    *  was opened: flushes pending added and deleted docs,    *  syncs the index files, writes most of next segments_N    *  file.  After calling this you must call either {@link    *  #commit()} to finish the commit, or {@link    *  #rollback()} to revert the commit and undo all changes    *  done since the writer was opened.</p>    *    *  You can also just call {@link #commit(Map)} directly    *  without prepareCommit first in which case that method    *  will internally call prepareCommit.    *    *<p><b>NOTE</b>: if this method hits an OutOfMemoryError    *  you should immediately close the writer.  See<a    *  href="#OOME">above</a> for details.</p>    *    *  @param commitUserData Opaque Map (String->String)    *  that's recorded into the segments file in the index,    *  and retrievable by {@link    *  IndexReader#getCommitUserData}.  Note that when    *  IndexWriter commits itself during {@link #close}, the    *  commitUserData is unchanged (just carried over from    *  the prior commit).  If this is null then the previous    *  commitUserData is kept.  Also, the commitUserData will    *  only "stick" if there are actually changes in the    *  index to commit.    */
DECL|method|prepareCommit
specifier|public
specifier|final
name|void
name|prepareCommit
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|commitUserData
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"prepareCommit: flush"
argument_list|)
expr_stmt|;
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"  index before flush "
operator|+
name|segString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hitOOM
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this writer hit an OutOfMemoryError; cannot commit"
argument_list|)
throw|;
block|}
if|if
condition|(
name|pendingCommit
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"prepareCommit was already called with no corresponding call to commit"
argument_list|)
throw|;
block|}
name|doBeforeFlush
argument_list|()
expr_stmt|;
assert|assert
name|testPoint
argument_list|(
literal|"startDoFlush"
argument_list|)
assert|;
name|SegmentInfos
name|toCommit
init|=
literal|null
decl_stmt|;
name|boolean
name|anySegmentsFlushed
init|=
literal|false
decl_stmt|;
comment|// This is copied from doFlush, except it's modified to
comment|// clone& incRef the flushed SegmentInfos inside the
comment|// sync block:
try|try
block|{
synchronized|synchronized
init|(
name|fullFlushLock
init|)
block|{
name|boolean
name|flushSuccess
init|=
literal|false
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|anySegmentsFlushed
operator|=
name|docWriter
operator|.
name|flushAllThreads
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|anySegmentsFlushed
condition|)
block|{
comment|// prevent double increment since docWriter#doFlush increments the flushcount
comment|// if we flushed anything.
name|flushCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|flushSuccess
operator|=
literal|true
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|maybeApplyDeletes
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|readerPool
operator|.
name|commit
argument_list|(
name|segmentInfos
argument_list|)
expr_stmt|;
comment|// Must clone the segmentInfos while we still
comment|// hold fullFlushLock and while sync'd so that
comment|// no partial changes (eg a delete w/o
comment|// corresponding add from an updateDocument) can
comment|// sneak into the commit point:
name|toCommit
operator|=
operator|(
name|SegmentInfos
operator|)
name|segmentInfos
operator|.
name|clone
argument_list|()
expr_stmt|;
name|pendingCommitChangeCount
operator|=
name|changeCount
expr_stmt|;
comment|// This protects the segmentInfos we are now going
comment|// to commit.  This is important in case, eg, while
comment|// we are trying to sync all referenced files, a
comment|// merge completes which would otherwise have
comment|// removed the files we are now syncing.
name|filesToCommit
operator|=
name|toCommit
operator|.
name|files
argument_list|(
name|directory
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|deleter
operator|.
name|incRef
argument_list|(
name|filesToCommit
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"hit exception during prepareCommit"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Done: finish the full flush!
name|docWriter
operator|.
name|finishFullFlush
argument_list|(
name|flushSuccess
argument_list|)
expr_stmt|;
name|doAfterFlush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|oom
parameter_list|)
block|{
name|handleOOM
argument_list|(
name|oom
argument_list|,
literal|"prepareCommit"
argument_list|)
expr_stmt|;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|anySegmentsFlushed
condition|)
block|{
name|maybeMerge
argument_list|()
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|deleter
operator|.
name|decRef
argument_list|(
name|filesToCommit
argument_list|)
expr_stmt|;
name|filesToCommit
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
name|startCommit
argument_list|(
name|toCommit
argument_list|,
name|commitUserData
argument_list|)
expr_stmt|;
block|}
comment|// Used only by commit, below; lock order is commitLock -> IW
DECL|field|commitLock
specifier|private
specifier|final
name|Object
name|commitLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|/**    *<p>Commits all pending changes (added& deleted    * documents, segment merges, added    * indexes, etc.) to the index, and syncs all referenced    * index files, such that a reader will see the changes    * and the index updates will survive an OS or machine    * crash or power loss.  Note that this does not wait for    * any running background merges to finish.  This may be a    * costly operation, so you should test the cost in your    * application and do it only when really necessary.</p>    *    *<p> Note that this operation calls Directory.sync on    * the index files.  That call should not return until the    * file contents& metadata are on stable storage.  For    * FSDirectory, this calls the OS's fsync.  But, beware:    * some hardware devices may in fact cache writes even    * during fsync, and return before the bits are actually    * on stable storage, to give the appearance of faster    * performance.  If you have such a device, and it does    * not have a battery backup (for example) then on power    * loss it may still lose data.  Lucene cannot guarantee    * consistency on such devices.</p>    *    *<p><b>NOTE</b>: if this method hits an OutOfMemoryError    * you should immediately close the writer.  See<a    * href="#OOME">above</a> for details.</p>    *    * @see #prepareCommit    * @see #commit(Map)    */
DECL|method|commit
specifier|public
specifier|final
name|void
name|commit
parameter_list|()
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|commit
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** Commits all changes to the index, specifying a    *  commitUserData Map (String -> String).  This just    *  calls {@link #prepareCommit(Map)} (if you didn't    *  already call it) and then {@link #finishCommit}.    *    *<p><b>NOTE</b>: if this method hits an OutOfMemoryError    * you should immediately close the writer.  See<a    * href="#OOME">above</a> for details.</p>    */
DECL|method|commit
specifier|public
specifier|final
name|void
name|commit
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|commitUserData
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|commitInternal
argument_list|(
name|commitUserData
argument_list|)
expr_stmt|;
block|}
DECL|method|commitInternal
specifier|private
specifier|final
name|void
name|commitInternal
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|commitUserData
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"commit: start"
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|commitLock
init|)
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"commit: enter lock"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pendingCommit
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"commit: now prepare"
argument_list|)
expr_stmt|;
block|}
name|prepareCommit
argument_list|(
name|commitUserData
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"commit: already prepared"
argument_list|)
expr_stmt|;
block|}
block|}
name|finishCommit
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|finishCommit
specifier|private
specifier|synchronized
specifier|final
name|void
name|finishCommit
parameter_list|()
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
if|if
condition|(
name|pendingCommit
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"commit: pendingCommit != null"
argument_list|)
expr_stmt|;
block|}
name|pendingCommit
operator|.
name|finishCommit
argument_list|(
name|directory
argument_list|,
name|codec
argument_list|)
expr_stmt|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"commit: wrote segments file \""
operator|+
name|pendingCommit
operator|.
name|getCurrentSegmentFileName
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|lastCommitChangeCount
operator|=
name|pendingCommitChangeCount
expr_stmt|;
name|segmentInfos
operator|.
name|updateGeneration
argument_list|(
name|pendingCommit
argument_list|)
expr_stmt|;
name|segmentInfos
operator|.
name|setUserData
argument_list|(
name|pendingCommit
operator|.
name|getUserData
argument_list|()
argument_list|)
expr_stmt|;
name|rollbackSegments
operator|=
name|pendingCommit
operator|.
name|createBackupSegmentInfos
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|deleter
operator|.
name|checkpoint
argument_list|(
name|pendingCommit
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Matches the incRef done in prepareCommit:
name|deleter
operator|.
name|decRef
argument_list|(
name|filesToCommit
argument_list|)
expr_stmt|;
name|filesToCommit
operator|=
literal|null
expr_stmt|;
name|pendingCommit
operator|=
literal|null
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"commit: pendingCommit == null; skip"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"commit: done"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Ensures only one flush() is actually flushing segments
comment|// at a time:
DECL|field|fullFlushLock
specifier|private
specifier|final
name|Object
name|fullFlushLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|/**    * Flush all in-memory buffered updates (adds and deletes)    * to the Directory.    * @param triggerMerge if true, we may merge segments (if    *  deletes or docs were flushed) if necessary    * @param applyAllDeletes whether pending deletes should also    */
DECL|method|flush
specifier|protected
specifier|final
name|void
name|flush
parameter_list|(
name|boolean
name|triggerMerge
parameter_list|,
name|boolean
name|applyAllDeletes
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
comment|// NOTE: this method cannot be sync'd because
comment|// maybeMerge() in turn calls mergeScheduler.merge which
comment|// in turn can take a long time to run and we don't want
comment|// to hold the lock for that.  In the case of
comment|// ConcurrentMergeScheduler this can lead to deadlock
comment|// when it stalls due to too many running merges.
comment|// We can be called during close, when closing==true, so we must pass false to ensureOpen:
name|ensureOpen
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|doFlush
argument_list|(
name|applyAllDeletes
argument_list|)
operator|&&
name|triggerMerge
condition|)
block|{
name|maybeMerge
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|doFlush
specifier|private
name|boolean
name|doFlush
parameter_list|(
name|boolean
name|applyAllDeletes
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
if|if
condition|(
name|hitOOM
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this writer hit an OutOfMemoryError; cannot flush"
argument_list|)
throw|;
block|}
name|doBeforeFlush
argument_list|()
expr_stmt|;
assert|assert
name|testPoint
argument_list|(
literal|"startDoFlush"
argument_list|)
assert|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"  start flush: applyAllDeletes="
operator|+
name|applyAllDeletes
argument_list|)
expr_stmt|;
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"  index before flush "
operator|+
name|segString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|anySegmentFlushed
decl_stmt|;
synchronized|synchronized
init|(
name|fullFlushLock
init|)
block|{
name|boolean
name|flushSuccess
init|=
literal|false
decl_stmt|;
try|try
block|{
name|anySegmentFlushed
operator|=
name|docWriter
operator|.
name|flushAllThreads
argument_list|()
expr_stmt|;
name|flushSuccess
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|docWriter
operator|.
name|finishFullFlush
argument_list|(
name|flushSuccess
argument_list|)
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|maybeApplyDeletes
argument_list|(
name|applyAllDeletes
argument_list|)
expr_stmt|;
name|doAfterFlush
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|anySegmentFlushed
condition|)
block|{
comment|// flushCount is incremented in flushAllThreads
name|flushCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|anySegmentFlushed
return|;
block|}
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|oom
parameter_list|)
block|{
name|handleOOM
argument_list|(
name|oom
argument_list|,
literal|"doFlush"
argument_list|)
expr_stmt|;
comment|// never hit
return|return
literal|false
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"hit exception during flush"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|maybeApplyDeletes
specifier|final
specifier|synchronized
name|void
name|maybeApplyDeletes
parameter_list|(
name|boolean
name|applyAllDeletes
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|applyAllDeletes
condition|)
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"apply all deletes during flush"
argument_list|)
expr_stmt|;
block|}
name|applyAllDeletes
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"don't apply deletes now delTermCount="
operator|+
name|bufferedDeletesStream
operator|.
name|numTerms
argument_list|()
operator|+
literal|" bytesUsed="
operator|+
name|bufferedDeletesStream
operator|.
name|bytesUsed
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|applyAllDeletes
specifier|final
specifier|synchronized
name|void
name|applyAllDeletes
parameter_list|()
throws|throws
name|IOException
block|{
name|flushDeletesCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
specifier|final
name|BufferedDeletesStream
operator|.
name|ApplyDeletesResult
name|result
decl_stmt|;
name|result
operator|=
name|bufferedDeletesStream
operator|.
name|applyDeletes
argument_list|(
name|readerPool
argument_list|,
name|segmentInfos
operator|.
name|asList
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|anyDeletes
condition|)
block|{
name|checkpoint
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|keepFullyDeletedSegments
operator|&&
name|result
operator|.
name|allDeleted
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"drop 100% deleted segments: "
operator|+
name|segString
argument_list|(
name|result
operator|.
name|allDeleted
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SegmentInfo
name|info
range|:
name|result
operator|.
name|allDeleted
control|)
block|{
comment|// If a merge has already registered for this
comment|// segment, we leave it in the readerPool; the
comment|// merge will skip merging it and will then drop
comment|// it once it's done:
if|if
condition|(
operator|!
name|mergingSegments
operator|.
name|contains
argument_list|(
name|info
argument_list|)
condition|)
block|{
name|segmentInfos
operator|.
name|remove
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|readerPool
operator|.
name|drop
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
name|checkpoint
argument_list|()
expr_stmt|;
block|}
name|bufferedDeletesStream
operator|.
name|prune
argument_list|(
name|segmentInfos
argument_list|)
expr_stmt|;
block|}
comment|/** Expert:  Return the total size of all index files currently cached in memory.    * Useful for size management with flushRamDocs()    */
DECL|method|ramSizeInBytes
specifier|public
specifier|final
name|long
name|ramSizeInBytes
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|docWriter
operator|.
name|flushControl
operator|.
name|netBytes
argument_list|()
operator|+
name|bufferedDeletesStream
operator|.
name|bytesUsed
argument_list|()
return|;
block|}
comment|// for testing only
DECL|method|getDocsWriter
name|DocumentsWriter
name|getDocsWriter
parameter_list|()
block|{
name|boolean
name|test
init|=
literal|false
decl_stmt|;
assert|assert
name|test
operator|=
literal|true
assert|;
return|return
name|test
condition|?
name|docWriter
else|:
literal|null
return|;
block|}
comment|/** Expert:  Return the number of documents currently    *  buffered in RAM. */
DECL|method|numRamDocs
specifier|public
specifier|final
specifier|synchronized
name|int
name|numRamDocs
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|docWriter
operator|.
name|getNumDocs
argument_list|()
return|;
block|}
DECL|method|ensureValidMerge
specifier|private
specifier|synchronized
name|void
name|ensureValidMerge
parameter_list|(
name|MergePolicy
operator|.
name|OneMerge
name|merge
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|SegmentInfo
name|info
range|:
name|merge
operator|.
name|segments
control|)
block|{
if|if
condition|(
operator|!
name|segmentInfos
operator|.
name|contains
argument_list|(
name|info
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MergePolicy
operator|.
name|MergeException
argument_list|(
literal|"MergePolicy selected a segment ("
operator|+
name|info
operator|.
name|name
operator|+
literal|") that is not in the current index "
operator|+
name|segString
argument_list|()
argument_list|,
name|directory
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** Carefully merges deletes for the segments we just    *  merged.  This is tricky because, although merging will    *  clear all deletes (compacts the documents), new    *  deletes may have been flushed to the segments since    *  the merge was started.  This method "carries over"    *  such new deletes onto the newly merged segment, and    *  saves the resulting deletes file (incrementing the    *  delete generation for merge.info).  If no deletes were    *  flushed, no new deletes file is saved. */
DECL|method|commitMergedDeletes
specifier|synchronized
specifier|private
name|ReadersAndLiveDocs
name|commitMergedDeletes
parameter_list|(
name|MergePolicy
operator|.
name|OneMerge
name|merge
parameter_list|,
name|MergeState
name|mergeState
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|testPoint
argument_list|(
literal|"startCommitMergeDeletes"
argument_list|)
assert|;
specifier|final
name|List
argument_list|<
name|SegmentInfo
argument_list|>
name|sourceSegments
init|=
name|merge
operator|.
name|segments
decl_stmt|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"commitMergeDeletes "
operator|+
name|segString
argument_list|(
name|merge
operator|.
name|segments
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Carefully merge deletes that occurred after we
comment|// started merging:
name|int
name|docUpto
init|=
literal|0
decl_stmt|;
name|long
name|minGen
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
comment|// Lazy init (only when we find a delete to carry over):
name|ReadersAndLiveDocs
name|mergedDeletes
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sourceSegments
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SegmentInfo
name|info
init|=
name|sourceSegments
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|minGen
operator|=
name|Math
operator|.
name|min
argument_list|(
name|info
operator|.
name|getBufferedDeletesGen
argument_list|()
argument_list|,
name|minGen
argument_list|)
expr_stmt|;
specifier|final
name|int
name|docCount
init|=
name|info
operator|.
name|docCount
decl_stmt|;
specifier|final
name|Bits
name|prevLiveDocs
init|=
name|merge
operator|.
name|readerLiveDocs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|Bits
name|currentLiveDocs
decl_stmt|;
name|ReadersAndLiveDocs
name|rld
init|=
name|readerPool
operator|.
name|get
argument_list|(
name|info
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// We enrolled in mergeInit:
assert|assert
name|rld
operator|!=
literal|null
assert|;
name|currentLiveDocs
operator|=
name|rld
operator|.
name|liveDocs
expr_stmt|;
if|if
condition|(
name|prevLiveDocs
operator|!=
literal|null
condition|)
block|{
comment|// If we had deletions on starting the merge we must
comment|// still have deletions now:
assert|assert
name|currentLiveDocs
operator|!=
literal|null
assert|;
comment|// There were deletes on this segment when the merge
comment|// started.  The merge has collapsed away those
comment|// deletes, but, if new deletes were flushed since
comment|// the merge started, we must now carefully keep any
comment|// newly flushed deletes but mapping them to the new
comment|// docIDs.
if|if
condition|(
name|currentLiveDocs
operator|!=
name|prevLiveDocs
condition|)
block|{
comment|// This means this segment received new deletes
comment|// since we started the merge, so we
comment|// must merge them:
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|docCount
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|prevLiveDocs
operator|.
name|get
argument_list|(
name|j
argument_list|)
condition|)
block|{
assert|assert
operator|!
name|currentLiveDocs
operator|.
name|get
argument_list|(
name|j
argument_list|)
assert|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|currentLiveDocs
operator|.
name|get
argument_list|(
name|j
argument_list|)
condition|)
block|{
if|if
condition|(
name|mergedDeletes
operator|==
literal|null
condition|)
block|{
name|mergedDeletes
operator|=
name|readerPool
operator|.
name|get
argument_list|(
name|merge
operator|.
name|info
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mergedDeletes
operator|.
name|initWritableLiveDocs
argument_list|()
expr_stmt|;
block|}
name|mergedDeletes
operator|.
name|delete
argument_list|(
name|docUpto
argument_list|)
expr_stmt|;
block|}
name|docUpto
operator|++
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
specifier|final
name|int
name|readerDocCount
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|sourceSegments
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|readerDocCount
operator|=
name|mergeState
operator|.
name|mergedDocCount
operator|-
name|mergeState
operator|.
name|docBase
index|[
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
name|readerDocCount
operator|=
name|mergeState
operator|.
name|docBase
index|[
name|i
operator|+
literal|1
index|]
operator|-
name|mergeState
operator|.
name|docBase
index|[
name|i
index|]
expr_stmt|;
block|}
name|docUpto
operator|+=
name|readerDocCount
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|currentLiveDocs
operator|!=
literal|null
condition|)
block|{
comment|// This segment had no deletes before but now it
comment|// does:
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|docCount
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|currentLiveDocs
operator|.
name|get
argument_list|(
name|j
argument_list|)
condition|)
block|{
if|if
condition|(
name|mergedDeletes
operator|==
literal|null
condition|)
block|{
name|mergedDeletes
operator|=
name|readerPool
operator|.
name|get
argument_list|(
name|merge
operator|.
name|info
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mergedDeletes
operator|.
name|initWritableLiveDocs
argument_list|()
expr_stmt|;
block|}
name|mergedDeletes
operator|.
name|delete
argument_list|(
name|docUpto
argument_list|)
expr_stmt|;
block|}
name|docUpto
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// No deletes before or after
name|docUpto
operator|+=
name|info
operator|.
name|docCount
expr_stmt|;
block|}
block|}
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
if|if
condition|(
name|mergedDeletes
operator|==
literal|null
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"no new deletes since merge started"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
name|mergedDeletes
operator|.
name|pendingDeleteCount
operator|+
literal|" new deletes since merge started"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If new deletes were applied while we were merging
comment|// (which happens if eg commit() or getReader() is
comment|// called during our merge), then it better be the case
comment|// that the delGen has increased for all our merged
comment|// segments:
assert|assert
name|mergedDeletes
operator|==
literal|null
operator|||
name|minGen
operator|>
name|merge
operator|.
name|info
operator|.
name|getBufferedDeletesGen
argument_list|()
assert|;
name|merge
operator|.
name|info
operator|.
name|setBufferedDeletesGen
argument_list|(
name|minGen
argument_list|)
expr_stmt|;
return|return
name|mergedDeletes
return|;
block|}
DECL|method|commitMerge
specifier|synchronized
specifier|private
name|boolean
name|commitMerge
parameter_list|(
name|MergePolicy
operator|.
name|OneMerge
name|merge
parameter_list|,
name|MergeState
name|mergeState
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|testPoint
argument_list|(
literal|"startCommitMerge"
argument_list|)
assert|;
if|if
condition|(
name|hitOOM
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this writer hit an OutOfMemoryError; cannot complete merge"
argument_list|)
throw|;
block|}
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"commitMerge: "
operator|+
name|segString
argument_list|(
name|merge
operator|.
name|segments
argument_list|)
operator|+
literal|" index="
operator|+
name|segString
argument_list|()
argument_list|)
expr_stmt|;
block|}
assert|assert
name|merge
operator|.
name|registerDone
assert|;
comment|// If merge was explicitly aborted, or, if rollback() or
comment|// rollbackTransaction() had been called since our merge
comment|// started (which results in an unqualified
comment|// deleter.refresh() call that will remove any index
comment|// file that current segments does not reference), we
comment|// abort this merge
if|if
condition|(
name|merge
operator|.
name|isAborted
argument_list|()
condition|)
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"commitMerge: skip: it was aborted"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|final
name|ReadersAndLiveDocs
name|mergedDeletes
init|=
name|commitMergedDeletes
argument_list|(
name|merge
argument_list|,
name|mergeState
argument_list|)
decl_stmt|;
assert|assert
name|mergedDeletes
operator|==
literal|null
operator|||
name|mergedDeletes
operator|.
name|pendingDeleteCount
operator|!=
literal|0
assert|;
comment|// If the doc store we are using has been closed and
comment|// is in now compound format (but wasn't when we
comment|// started), then we will switch to the compound
comment|// format as well:
assert|assert
operator|!
name|segmentInfos
operator|.
name|contains
argument_list|(
name|merge
operator|.
name|info
argument_list|)
assert|;
specifier|final
name|boolean
name|allDeleted
init|=
name|merge
operator|.
name|segments
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
name|merge
operator|.
name|info
operator|.
name|docCount
operator|==
literal|0
operator|||
operator|(
name|mergedDeletes
operator|!=
literal|null
operator|&&
name|mergedDeletes
operator|.
name|pendingDeleteCount
operator|==
name|merge
operator|.
name|info
operator|.
name|docCount
operator|)
decl_stmt|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
if|if
condition|(
name|allDeleted
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"merged segment "
operator|+
name|merge
operator|.
name|info
operator|+
literal|" is 100% deleted"
operator|+
operator|(
name|keepFullyDeletedSegments
condition|?
literal|""
else|:
literal|"; skipping insert"
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|boolean
name|dropSegment
init|=
name|allDeleted
operator|&&
operator|!
name|keepFullyDeletedSegments
decl_stmt|;
comment|// If we merged no segments then we better be dropping
comment|// the new segment:
assert|assert
name|merge
operator|.
name|segments
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|||
name|dropSegment
assert|;
assert|assert
name|merge
operator|.
name|info
operator|.
name|docCount
operator|!=
literal|0
operator|||
name|keepFullyDeletedSegments
operator|||
name|dropSegment
assert|;
name|segmentInfos
operator|.
name|applyMergeChanges
argument_list|(
name|merge
argument_list|,
name|dropSegment
argument_list|)
expr_stmt|;
if|if
condition|(
name|dropSegment
condition|)
block|{
name|readerPool
operator|.
name|drop
argument_list|(
name|merge
operator|.
name|info
argument_list|)
expr_stmt|;
name|deleter
operator|.
name|deleteNewFiles
argument_list|(
name|merge
operator|.
name|info
operator|.
name|files
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
operator|!
name|segmentInfos
operator|.
name|contains
argument_list|(
name|merge
operator|.
name|info
argument_list|)
assert|;
block|}
else|else
block|{
if|if
condition|(
name|mergedDeletes
operator|!=
literal|null
operator|&&
operator|!
name|poolReaders
condition|)
block|{
name|mergedDeletes
operator|.
name|writeLiveDocs
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|readerPool
operator|.
name|drop
argument_list|(
name|merge
operator|.
name|info
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Must note the change to segmentInfos so any commits
comment|// in-flight don't lose it:
name|checkpoint
argument_list|()
expr_stmt|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"after commit: "
operator|+
name|segString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|closeMergeReaders
argument_list|(
name|merge
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|merge
operator|.
name|maxNumSegments
operator|!=
operator|-
literal|1
operator|&&
operator|!
name|dropSegment
condition|)
block|{
comment|// cascade the forceMerge:
if|if
condition|(
operator|!
name|segmentsToMerge
operator|.
name|containsKey
argument_list|(
name|merge
operator|.
name|info
argument_list|)
condition|)
block|{
name|segmentsToMerge
operator|.
name|put
argument_list|(
name|merge
operator|.
name|info
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|handleMergeException
specifier|final
specifier|private
name|void
name|handleMergeException
parameter_list|(
name|Throwable
name|t
parameter_list|,
name|MergePolicy
operator|.
name|OneMerge
name|merge
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"handleMergeException: merge="
operator|+
name|segString
argument_list|(
name|merge
operator|.
name|segments
argument_list|)
operator|+
literal|" exc="
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
comment|// Set the exception on the merge, so if
comment|// forceMerge is waiting on us it sees the root
comment|// cause exception:
name|merge
operator|.
name|setException
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|addMergeException
argument_list|(
name|merge
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|MergePolicy
operator|.
name|MergeAbortedException
condition|)
block|{
comment|// We can ignore this exception (it happens when
comment|// close(false) or rollback is called), unless the
comment|// merge involves segments from external directories,
comment|// in which case we must throw it so, for example, the
comment|// rollbackTransaction code in addIndexes* is
comment|// executed.
if|if
condition|(
name|merge
operator|.
name|isExternal
condition|)
throw|throw
operator|(
name|MergePolicy
operator|.
name|MergeAbortedException
operator|)
name|t
throw|;
block|}
elseif|else
if|if
condition|(
name|t
operator|instanceof
name|IOException
condition|)
throw|throw
operator|(
name|IOException
operator|)
name|t
throw|;
elseif|else
if|if
condition|(
name|t
operator|instanceof
name|RuntimeException
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|t
throw|;
elseif|else
if|if
condition|(
name|t
operator|instanceof
name|Error
condition|)
throw|throw
operator|(
name|Error
operator|)
name|t
throw|;
else|else
comment|// Should not get here
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
comment|/**    * Merges the indicated segments, replacing them in the stack with a    * single segment.    *     * @lucene.experimental    */
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|MergePolicy
operator|.
name|OneMerge
name|merge
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|final
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
try|try
block|{
try|try
block|{
name|mergeInit
argument_list|(
name|merge
argument_list|)
expr_stmt|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"now merge\n  merge="
operator|+
name|segString
argument_list|(
name|merge
operator|.
name|segments
argument_list|)
operator|+
literal|"\n  index="
operator|+
name|segString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mergeMiddle
argument_list|(
name|merge
argument_list|)
expr_stmt|;
name|mergeSuccess
argument_list|(
name|merge
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|handleMergeException
argument_list|(
name|t
argument_list|,
name|merge
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|mergeFinish
argument_list|(
name|merge
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"hit exception during merge"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|merge
operator|.
name|info
operator|!=
literal|null
operator|&&
operator|!
name|segmentInfos
operator|.
name|contains
argument_list|(
name|merge
operator|.
name|info
argument_list|)
condition|)
block|{
name|deleter
operator|.
name|refresh
argument_list|(
name|merge
operator|.
name|info
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|// This merge (and, generally, any change to the
comment|// segments) may now enable new merges, so we call
comment|// merge policy& update pending merges.
if|if
condition|(
name|success
operator|&&
operator|!
name|merge
operator|.
name|isAborted
argument_list|()
operator|&&
operator|(
name|merge
operator|.
name|maxNumSegments
operator|!=
operator|-
literal|1
operator|||
operator|(
operator|!
name|closed
operator|&&
operator|!
name|closing
operator|)
operator|)
condition|)
block|{
name|updatePendingMerges
argument_list|(
name|merge
operator|.
name|maxNumSegments
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|oom
parameter_list|)
block|{
name|handleOOM
argument_list|(
name|oom
argument_list|,
literal|"merge"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|merge
operator|.
name|info
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"merge time "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
operator|)
operator|+
literal|" msec for "
operator|+
name|merge
operator|.
name|info
operator|.
name|docCount
operator|+
literal|" docs"
argument_list|)
expr_stmt|;
block|}
block|}
comment|//System.out.println(Thread.currentThread().getName() + ": merge end");
block|}
comment|/** Hook that's called when the specified merge is complete. */
DECL|method|mergeSuccess
name|void
name|mergeSuccess
parameter_list|(
name|MergePolicy
operator|.
name|OneMerge
name|merge
parameter_list|)
block|{   }
comment|/** Checks whether this merge involves any segments    *  already participating in a merge.  If not, this merge    *  is "registered", meaning we record that its segments    *  are now participating in a merge, and true is    *  returned.  Else (the merge conflicts) false is    *  returned. */
DECL|method|registerMerge
specifier|final
specifier|synchronized
name|boolean
name|registerMerge
parameter_list|(
name|MergePolicy
operator|.
name|OneMerge
name|merge
parameter_list|)
throws|throws
name|MergePolicy
operator|.
name|MergeAbortedException
throws|,
name|IOException
block|{
if|if
condition|(
name|merge
operator|.
name|registerDone
condition|)
block|{
return|return
literal|true
return|;
block|}
assert|assert
name|merge
operator|.
name|segments
operator|.
name|size
argument_list|()
operator|>
literal|0
assert|;
if|if
condition|(
name|stopMerges
condition|)
block|{
name|merge
operator|.
name|abort
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|MergePolicy
operator|.
name|MergeAbortedException
argument_list|(
literal|"merge is aborted: "
operator|+
name|segString
argument_list|(
name|merge
operator|.
name|segments
argument_list|)
argument_list|)
throw|;
block|}
name|boolean
name|isExternal
init|=
literal|false
decl_stmt|;
for|for
control|(
name|SegmentInfo
name|info
range|:
name|merge
operator|.
name|segments
control|)
block|{
if|if
condition|(
name|mergingSegments
operator|.
name|contains
argument_list|(
name|info
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|segmentInfos
operator|.
name|contains
argument_list|(
name|info
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|info
operator|.
name|dir
operator|!=
name|directory
condition|)
block|{
name|isExternal
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|segmentsToMerge
operator|.
name|containsKey
argument_list|(
name|info
argument_list|)
condition|)
block|{
name|merge
operator|.
name|maxNumSegments
operator|=
name|mergeMaxNumSegments
expr_stmt|;
block|}
block|}
name|ensureValidMerge
argument_list|(
name|merge
argument_list|)
expr_stmt|;
name|pendingMerges
operator|.
name|add
argument_list|(
name|merge
argument_list|)
expr_stmt|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"add merge to pendingMerges: "
operator|+
name|segString
argument_list|(
name|merge
operator|.
name|segments
argument_list|)
operator|+
literal|" [total "
operator|+
name|pendingMerges
operator|.
name|size
argument_list|()
operator|+
literal|" pending]"
argument_list|)
expr_stmt|;
block|}
name|merge
operator|.
name|mergeGen
operator|=
name|mergeGen
expr_stmt|;
name|merge
operator|.
name|isExternal
operator|=
name|isExternal
expr_stmt|;
comment|// OK it does not conflict; now record that this merge
comment|// is running (while synchronized) to avoid race
comment|// condition where two conflicting merges from different
comment|// threads, start
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"registerMerge merging= ["
argument_list|)
decl_stmt|;
for|for
control|(
name|SegmentInfo
name|info
range|:
name|mergingSegments
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|info
operator|.
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
comment|// don't call mergingSegments.toString() could lead to ConcurrentModException
comment|// since merge updates the segments FieldInfos
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|SegmentInfo
name|info
range|:
name|merge
operator|.
name|segments
control|)
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"registerMerge info="
operator|+
name|info
argument_list|)
expr_stmt|;
block|}
name|mergingSegments
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
comment|// Merge is now registered
name|merge
operator|.
name|registerDone
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/** Does initial setup for a merge, which is fast but holds    *  the synchronized lock on IndexWriter instance.  */
DECL|method|mergeInit
specifier|final
specifier|synchronized
name|void
name|mergeInit
parameter_list|(
name|MergePolicy
operator|.
name|OneMerge
name|merge
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|_mergeInit
argument_list|(
name|merge
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"hit exception in mergeInit"
argument_list|)
expr_stmt|;
block|}
name|mergeFinish
argument_list|(
name|merge
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|_mergeInit
specifier|synchronized
specifier|private
name|void
name|_mergeInit
parameter_list|(
name|MergePolicy
operator|.
name|OneMerge
name|merge
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|testPoint
argument_list|(
literal|"startMergeInit"
argument_list|)
assert|;
assert|assert
name|merge
operator|.
name|registerDone
assert|;
assert|assert
name|merge
operator|.
name|maxNumSegments
operator|==
operator|-
literal|1
operator|||
name|merge
operator|.
name|maxNumSegments
operator|>
literal|0
assert|;
if|if
condition|(
name|hitOOM
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this writer hit an OutOfMemoryError; cannot merge"
argument_list|)
throw|;
block|}
comment|// TODO: is there any perf benefit to sorting
comment|// merged segments?  eg biggest to smallest?
if|if
condition|(
name|merge
operator|.
name|info
operator|!=
literal|null
condition|)
comment|// mergeInit already done
return|return;
if|if
condition|(
name|merge
operator|.
name|isAborted
argument_list|()
condition|)
return|return;
comment|// Bind a new segment name here so even with
comment|// ConcurrentMergePolicy we keep deterministic segment
comment|// names.
name|merge
operator|.
name|info
operator|=
operator|new
name|SegmentInfo
argument_list|(
name|newSegmentName
argument_list|()
argument_list|,
literal|0
argument_list|,
name|directory
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
operator|new
name|FieldInfos
argument_list|(
name|globalFieldNumberMap
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: in the non-pool'd case this is somewhat
comment|// wasteful, because we open these readers, close them,
comment|// and then open them again for merging.  Maybe  we
comment|// could pre-pool them somehow in that case...
comment|// Lock order: IW -> BD
specifier|final
name|BufferedDeletesStream
operator|.
name|ApplyDeletesResult
name|result
init|=
name|bufferedDeletesStream
operator|.
name|applyDeletes
argument_list|(
name|readerPool
argument_list|,
name|merge
operator|.
name|segments
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|anyDeletes
condition|)
block|{
name|checkpoint
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|keepFullyDeletedSegments
operator|&&
name|result
operator|.
name|allDeleted
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"drop 100% deleted segments: "
operator|+
name|result
operator|.
name|allDeleted
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SegmentInfo
name|info
range|:
name|result
operator|.
name|allDeleted
control|)
block|{
name|segmentInfos
operator|.
name|remove
argument_list|(
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
name|merge
operator|.
name|segments
operator|.
name|contains
argument_list|(
name|info
argument_list|)
condition|)
block|{
name|mergingSegments
operator|.
name|remove
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|merge
operator|.
name|segments
operator|.
name|remove
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
name|readerPool
operator|.
name|drop
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
name|checkpoint
argument_list|()
expr_stmt|;
block|}
name|merge
operator|.
name|info
operator|.
name|setBufferedDeletesGen
argument_list|(
name|result
operator|.
name|gen
argument_list|)
expr_stmt|;
comment|// Lock order: IW -> BD
name|bufferedDeletesStream
operator|.
name|prune
argument_list|(
name|segmentInfos
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|details
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|details
operator|.
name|put
argument_list|(
literal|"mergeMaxNumSegments"
argument_list|,
literal|""
operator|+
name|merge
operator|.
name|maxNumSegments
argument_list|)
expr_stmt|;
name|details
operator|.
name|put
argument_list|(
literal|"mergeFactor"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|merge
operator|.
name|segments
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setDiagnostics
argument_list|(
name|merge
operator|.
name|info
argument_list|,
literal|"merge"
argument_list|,
name|details
argument_list|)
expr_stmt|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"merge seg="
operator|+
name|merge
operator|.
name|info
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
assert|assert
name|merge
operator|.
name|estimatedMergeBytes
operator|==
literal|0
assert|;
for|for
control|(
name|SegmentInfo
name|info
range|:
name|merge
operator|.
name|segments
control|)
block|{
if|if
condition|(
name|info
operator|.
name|docCount
operator|>
literal|0
condition|)
block|{
specifier|final
name|int
name|delCount
init|=
name|numDeletedDocs
argument_list|(
name|info
argument_list|)
decl_stmt|;
assert|assert
name|delCount
operator|<=
name|info
operator|.
name|docCount
assert|;
specifier|final
name|double
name|delRatio
init|=
operator|(
operator|(
name|double
operator|)
name|delCount
operator|)
operator|/
name|info
operator|.
name|docCount
decl_stmt|;
name|merge
operator|.
name|estimatedMergeBytes
operator|+=
name|info
operator|.
name|sizeInBytes
argument_list|()
operator|*
operator|(
literal|1.0
operator|-
name|delRatio
operator|)
expr_stmt|;
block|}
block|}
comment|// TODO: I think this should no longer be needed (we
comment|// now build CFS before adding segment to the infos);
comment|// however, on removing it, tests fail for some reason!
comment|// Also enroll the merged segment into mergingSegments;
comment|// this prevents it from getting selected for a merge
comment|// after our merge is done but while we are building the
comment|// CFS:
name|mergingSegments
operator|.
name|add
argument_list|(
name|merge
operator|.
name|info
argument_list|)
expr_stmt|;
block|}
DECL|method|setDiagnostics
specifier|static
name|void
name|setDiagnostics
parameter_list|(
name|SegmentInfo
name|info
parameter_list|,
name|String
name|source
parameter_list|)
block|{
name|setDiagnostics
argument_list|(
name|info
argument_list|,
name|source
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|setDiagnostics
specifier|private
specifier|static
name|void
name|setDiagnostics
parameter_list|(
name|SegmentInfo
name|info
parameter_list|,
name|String
name|source
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|details
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|diagnostics
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|diagnostics
operator|.
name|put
argument_list|(
literal|"source"
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|diagnostics
operator|.
name|put
argument_list|(
literal|"lucene.version"
argument_list|,
name|Constants
operator|.
name|LUCENE_VERSION
argument_list|)
expr_stmt|;
name|diagnostics
operator|.
name|put
argument_list|(
literal|"os"
argument_list|,
name|Constants
operator|.
name|OS_NAME
argument_list|)
expr_stmt|;
name|diagnostics
operator|.
name|put
argument_list|(
literal|"os.arch"
argument_list|,
name|Constants
operator|.
name|OS_ARCH
argument_list|)
expr_stmt|;
name|diagnostics
operator|.
name|put
argument_list|(
literal|"os.version"
argument_list|,
name|Constants
operator|.
name|OS_VERSION
argument_list|)
expr_stmt|;
name|diagnostics
operator|.
name|put
argument_list|(
literal|"java.version"
argument_list|,
name|Constants
operator|.
name|JAVA_VERSION
argument_list|)
expr_stmt|;
name|diagnostics
operator|.
name|put
argument_list|(
literal|"java.vendor"
argument_list|,
name|Constants
operator|.
name|JAVA_VENDOR
argument_list|)
expr_stmt|;
if|if
condition|(
name|details
operator|!=
literal|null
condition|)
block|{
name|diagnostics
operator|.
name|putAll
argument_list|(
name|details
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|setDiagnostics
argument_list|(
name|diagnostics
argument_list|)
expr_stmt|;
block|}
comment|/** Does fininishing for a merge, which is fast but holds    *  the synchronized lock on IndexWriter instance. */
DECL|method|mergeFinish
specifier|final
specifier|synchronized
name|void
name|mergeFinish
parameter_list|(
name|MergePolicy
operator|.
name|OneMerge
name|merge
parameter_list|)
throws|throws
name|IOException
block|{
comment|// forceMerge, addIndexes or finishMerges may be waiting
comment|// on merges to finish.
name|notifyAll
argument_list|()
expr_stmt|;
comment|// It's possible we are called twice, eg if there was an
comment|// exception inside mergeInit
if|if
condition|(
name|merge
operator|.
name|registerDone
condition|)
block|{
specifier|final
name|List
argument_list|<
name|SegmentInfo
argument_list|>
name|sourceSegments
init|=
name|merge
operator|.
name|segments
decl_stmt|;
for|for
control|(
name|SegmentInfo
name|info
range|:
name|sourceSegments
control|)
block|{
name|mergingSegments
operator|.
name|remove
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
comment|// TODO: if we remove the add in _mergeInit, we should
comment|// also remove this:
name|mergingSegments
operator|.
name|remove
argument_list|(
name|merge
operator|.
name|info
argument_list|)
expr_stmt|;
name|merge
operator|.
name|registerDone
operator|=
literal|false
expr_stmt|;
block|}
name|runningMerges
operator|.
name|remove
argument_list|(
name|merge
argument_list|)
expr_stmt|;
block|}
DECL|method|closeMergeReaders
specifier|private
specifier|final
specifier|synchronized
name|void
name|closeMergeReaders
parameter_list|(
name|MergePolicy
operator|.
name|OneMerge
name|merge
parameter_list|,
name|boolean
name|suppressExceptions
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|numSegments
init|=
name|merge
operator|.
name|readers
operator|.
name|size
argument_list|()
decl_stmt|;
name|Throwable
name|th
init|=
literal|null
decl_stmt|;
name|boolean
name|drop
init|=
operator|!
name|suppressExceptions
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSegments
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|merge
operator|.
name|readers
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|readerPool
operator|.
name|release
argument_list|(
name|merge
operator|.
name|readers
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|drop
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|th
operator|==
literal|null
condition|)
block|{
name|th
operator|=
name|t
expr_stmt|;
block|}
block|}
name|merge
operator|.
name|readers
operator|.
name|set
argument_list|(
name|i
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If any error occured, throw it.
if|if
condition|(
operator|!
name|suppressExceptions
operator|&&
name|th
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|th
operator|instanceof
name|IOException
condition|)
throw|throw
operator|(
name|IOException
operator|)
name|th
throw|;
if|if
condition|(
name|th
operator|instanceof
name|RuntimeException
condition|)
throw|throw
operator|(
name|RuntimeException
operator|)
name|th
throw|;
if|if
condition|(
name|th
operator|instanceof
name|Error
condition|)
throw|throw
operator|(
name|Error
operator|)
name|th
throw|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|th
argument_list|)
throw|;
block|}
block|}
comment|/** Does the actual (time-consuming) work of the merge,    *  but without holding synchronized lock on IndexWriter    *  instance */
DECL|method|mergeMiddle
specifier|private
name|int
name|mergeMiddle
parameter_list|(
name|MergePolicy
operator|.
name|OneMerge
name|merge
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|merge
operator|.
name|checkAborted
argument_list|(
name|directory
argument_list|)
expr_stmt|;
specifier|final
name|String
name|mergedName
init|=
name|merge
operator|.
name|info
operator|.
name|name
decl_stmt|;
name|int
name|mergedDocCount
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|SegmentInfo
argument_list|>
name|sourceSegments
init|=
name|merge
operator|.
name|segments
decl_stmt|;
name|IOContext
name|context
init|=
operator|new
name|IOContext
argument_list|(
name|merge
operator|.
name|getMergeInfo
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|MergeState
operator|.
name|CheckAbort
name|checkAbort
init|=
operator|new
name|MergeState
operator|.
name|CheckAbort
argument_list|(
name|merge
argument_list|,
name|directory
argument_list|)
decl_stmt|;
name|SegmentMerger
name|merger
init|=
operator|new
name|SegmentMerger
argument_list|(
name|infoStream
argument_list|,
name|directory
argument_list|,
name|config
operator|.
name|getTermIndexInterval
argument_list|()
argument_list|,
name|mergedName
argument_list|,
name|checkAbort
argument_list|,
name|payloadProcessorProvider
argument_list|,
name|merge
operator|.
name|info
operator|.
name|getFieldInfos
argument_list|()
argument_list|,
name|codec
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"merging "
operator|+
name|segString
argument_list|(
name|merge
operator|.
name|segments
argument_list|)
operator|+
literal|" mergeVectors="
operator|+
name|merge
operator|.
name|info
operator|.
name|getFieldInfos
argument_list|()
operator|.
name|hasVectors
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|merge
operator|.
name|readers
operator|=
operator|new
name|ArrayList
argument_list|<
name|SegmentReader
argument_list|>
argument_list|()
expr_stmt|;
name|merge
operator|.
name|readerLiveDocs
operator|=
operator|new
name|ArrayList
argument_list|<
name|Bits
argument_list|>
argument_list|()
expr_stmt|;
comment|// This is try/finally to make sure merger's readers are
comment|// closed:
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|int
name|segUpto
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|segUpto
operator|<
name|sourceSegments
operator|.
name|size
argument_list|()
condition|)
block|{
specifier|final
name|SegmentInfo
name|info
init|=
name|sourceSegments
operator|.
name|get
argument_list|(
name|segUpto
argument_list|)
decl_stmt|;
comment|// Hold onto the "live" reader; we will use this to
comment|// commit merged deletes
specifier|final
name|ReadersAndLiveDocs
name|rld
init|=
name|readerPool
operator|.
name|get
argument_list|(
name|info
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|SegmentReader
name|reader
init|=
name|rld
operator|.
name|getMergeReader
argument_list|(
name|context
argument_list|)
decl_stmt|;
assert|assert
name|reader
operator|!=
literal|null
assert|;
comment|// Carefully pull the most recent live docs:
specifier|final
name|Bits
name|liveDocs
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// Must sync to ensure BufferedDeletesStream
comment|// cannot change liveDocs/pendingDeleteCount while
comment|// we pull a copy:
name|liveDocs
operator|=
name|rld
operator|.
name|getReadOnlyLiveDocs
argument_list|()
expr_stmt|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
if|if
condition|(
name|rld
operator|.
name|pendingDeleteCount
operator|!=
literal|0
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"seg="
operator|+
name|info
operator|+
literal|" delCount="
operator|+
name|info
operator|.
name|getDelCount
argument_list|()
operator|+
literal|" pendingDelCount="
operator|+
name|rld
operator|.
name|pendingDeleteCount
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|info
operator|.
name|getDelCount
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"seg="
operator|+
name|info
operator|+
literal|" delCount="
operator|+
name|info
operator|.
name|getDelCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"seg="
operator|+
name|info
operator|+
literal|" no deletes"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|merge
operator|.
name|readerLiveDocs
operator|.
name|add
argument_list|(
name|liveDocs
argument_list|)
expr_stmt|;
name|merge
operator|.
name|readers
operator|.
name|add
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|merger
operator|.
name|add
argument_list|(
name|reader
argument_list|,
name|liveDocs
argument_list|)
expr_stmt|;
name|segUpto
operator|++
expr_stmt|;
block|}
name|merge
operator|.
name|checkAborted
argument_list|(
name|directory
argument_list|)
expr_stmt|;
comment|// This is where all the work happens:
name|MergeState
name|mergeState
init|=
name|merger
operator|.
name|merge
argument_list|()
decl_stmt|;
name|mergedDocCount
operator|=
name|merge
operator|.
name|info
operator|.
name|docCount
operator|=
name|mergeState
operator|.
name|mergedDocCount
expr_stmt|;
comment|// Record which codec was used to write the segment
name|merge
operator|.
name|info
operator|.
name|setCodec
argument_list|(
name|codec
argument_list|)
expr_stmt|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"merge codec="
operator|+
name|codec
operator|+
literal|" docCount="
operator|+
name|mergedDocCount
argument_list|)
expr_stmt|;
block|}
comment|// Very important to do this before opening the reader
comment|// because codec must know if prox was written for
comment|// this segment:
comment|//System.out.println("merger set hasProx=" + merger.hasProx() + " seg=" + merge.info.name);
name|boolean
name|useCompoundFile
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// Guard segmentInfos
name|useCompoundFile
operator|=
name|mergePolicy
operator|.
name|useCompoundFile
argument_list|(
name|segmentInfos
argument_list|,
name|merge
operator|.
name|info
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useCompoundFile
condition|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
specifier|final
name|String
name|compoundFileName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|mergedName
argument_list|,
literal|""
argument_list|,
name|IndexFileNames
operator|.
name|COMPOUND_FILE_EXTENSION
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"create compound file "
operator|+
name|compoundFileName
argument_list|)
expr_stmt|;
block|}
name|createCompoundFile
argument_list|(
name|directory
argument_list|,
name|compoundFileName
argument_list|,
name|checkAbort
argument_list|,
name|merge
operator|.
name|info
argument_list|,
operator|new
name|IOContext
argument_list|(
name|merge
operator|.
name|getMergeInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|merge
operator|.
name|isAborted
argument_list|()
condition|)
block|{
comment|// This can happen if rollback or close(false)
comment|// is called -- fall through to logic below to
comment|// remove the partially created CFS:
block|}
else|else
block|{
name|handleMergeException
argument_list|(
name|ioe
argument_list|,
name|merge
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|handleMergeException
argument_list|(
name|t
argument_list|,
name|merge
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"hit exception creating compound file during merge"
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|deleter
operator|.
name|deleteFile
argument_list|(
name|compoundFileName
argument_list|)
expr_stmt|;
name|deleter
operator|.
name|deleteFile
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|mergedName
argument_list|,
literal|""
argument_list|,
name|IndexFileNames
operator|.
name|COMPOUND_FILE_ENTRIES_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|deleter
operator|.
name|deleteNewFiles
argument_list|(
name|merge
operator|.
name|info
operator|.
name|files
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|success
operator|=
literal|false
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// delete new non cfs files directly: they were never
comment|// registered with IFD
name|deleter
operator|.
name|deleteNewFiles
argument_list|(
name|merge
operator|.
name|info
operator|.
name|files
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|merge
operator|.
name|isAborted
argument_list|()
condition|)
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"abort merge after building CFS"
argument_list|)
expr_stmt|;
block|}
name|deleter
operator|.
name|deleteFile
argument_list|(
name|compoundFileName
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
name|merge
operator|.
name|info
operator|.
name|setUseCompoundFile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"merged segment size=%.3f MB vs estimate=%.3f MB"
argument_list|,
name|merge
operator|.
name|info
operator|.
name|sizeInBytes
argument_list|()
operator|/
literal|1024.
operator|/
literal|1024.
argument_list|,
name|merge
operator|.
name|estimatedMergeBytes
operator|/
literal|1024
operator|/
literal|1024.
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexReaderWarmer
name|mergedSegmentWarmer
init|=
name|config
operator|.
name|getMergedSegmentWarmer
argument_list|()
decl_stmt|;
if|if
condition|(
name|poolReaders
operator|&&
name|mergedSegmentWarmer
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ReadersAndLiveDocs
name|rld
init|=
name|readerPool
operator|.
name|get
argument_list|(
name|merge
operator|.
name|info
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|SegmentReader
name|sr
init|=
name|rld
operator|.
name|getReader
argument_list|(
name|IOContext
operator|.
name|READ
argument_list|)
decl_stmt|;
try|try
block|{
name|mergedSegmentWarmer
operator|.
name|warm
argument_list|(
name|sr
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|readerPool
operator|.
name|release
argument_list|(
name|sr
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Force READ context because we merge deletes onto
comment|// this reader:
if|if
condition|(
operator|!
name|commitMerge
argument_list|(
name|merge
argument_list|,
name|mergeState
argument_list|)
condition|)
block|{
comment|// commitMerge will return false if this merge was aborted
return|return
literal|0
return|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
comment|// Readers are already closed in commitMerge if we didn't hit
comment|// an exc:
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|closeMergeReaders
argument_list|(
name|merge
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mergedDocCount
return|;
block|}
DECL|method|addMergeException
specifier|synchronized
name|void
name|addMergeException
parameter_list|(
name|MergePolicy
operator|.
name|OneMerge
name|merge
parameter_list|)
block|{
assert|assert
name|merge
operator|.
name|getException
argument_list|()
operator|!=
literal|null
assert|;
if|if
condition|(
operator|!
name|mergeExceptions
operator|.
name|contains
argument_list|(
name|merge
argument_list|)
operator|&&
name|mergeGen
operator|==
name|merge
operator|.
name|mergeGen
condition|)
name|mergeExceptions
operator|.
name|add
argument_list|(
name|merge
argument_list|)
expr_stmt|;
block|}
comment|// For test purposes.
DECL|method|getBufferedDeleteTermsSize
specifier|final
name|int
name|getBufferedDeleteTermsSize
parameter_list|()
block|{
return|return
name|docWriter
operator|.
name|getBufferedDeleteTermsSize
argument_list|()
return|;
block|}
comment|// For test purposes.
DECL|method|getNumBufferedDeleteTerms
specifier|final
name|int
name|getNumBufferedDeleteTerms
parameter_list|()
block|{
return|return
name|docWriter
operator|.
name|getNumBufferedDeleteTerms
argument_list|()
return|;
block|}
comment|// utility routines for tests
DECL|method|newestSegment
specifier|synchronized
name|SegmentInfo
name|newestSegment
parameter_list|()
block|{
return|return
name|segmentInfos
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|segmentInfos
operator|.
name|info
argument_list|(
name|segmentInfos
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
else|:
literal|null
return|;
block|}
comment|/** @lucene.internal */
DECL|method|segString
specifier|public
specifier|synchronized
name|String
name|segString
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|segString
argument_list|(
name|segmentInfos
argument_list|)
return|;
block|}
comment|/** @lucene.internal */
DECL|method|segString
specifier|public
specifier|synchronized
name|String
name|segString
parameter_list|(
name|Iterable
argument_list|<
name|SegmentInfo
argument_list|>
name|infos
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|SegmentInfo
name|s
range|:
name|infos
control|)
block|{
if|if
condition|(
name|buffer
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|segString
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** @lucene.internal */
DECL|method|segString
specifier|public
specifier|synchronized
name|String
name|segString
parameter_list|(
name|SegmentInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|info
operator|.
name|toString
argument_list|(
name|info
operator|.
name|dir
argument_list|,
name|numDeletedDocs
argument_list|(
name|info
argument_list|)
operator|-
name|info
operator|.
name|getDelCount
argument_list|()
argument_list|)
return|;
block|}
DECL|method|doWait
specifier|private
specifier|synchronized
name|void
name|doWait
parameter_list|()
block|{
comment|// NOTE: the callers of this method should in theory
comment|// be able to do simply wait(), but, as a defense
comment|// against thread timing hazards where notifyAll()
comment|// fails to be called, we wait for at most 1 second
comment|// and then return so caller can check if wait
comment|// conditions are satisfied:
try|try
block|{
name|wait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ThreadInterruptedException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
DECL|field|keepFullyDeletedSegments
specifier|private
name|boolean
name|keepFullyDeletedSegments
decl_stmt|;
comment|/** Only for testing.    *    * @lucene.internal */
DECL|method|keepFullyDeletedSegments
name|void
name|keepFullyDeletedSegments
parameter_list|()
block|{
name|keepFullyDeletedSegments
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getKeepFullyDeletedSegments
name|boolean
name|getKeepFullyDeletedSegments
parameter_list|()
block|{
return|return
name|keepFullyDeletedSegments
return|;
block|}
comment|// called only from assert
DECL|method|filesExist
specifier|private
name|boolean
name|filesExist
parameter_list|(
name|SegmentInfos
name|toSync
parameter_list|)
throws|throws
name|IOException
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|files
init|=
name|toSync
operator|.
name|files
argument_list|(
name|directory
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|fileName
range|:
name|files
control|)
block|{
assert|assert
name|directory
operator|.
name|fileExists
argument_list|(
name|fileName
argument_list|)
operator|:
literal|"file "
operator|+
name|fileName
operator|+
literal|" does not exist"
assert|;
comment|// If this trips it means we are missing a call to
comment|// .checkpoint somewhere, because by the time we
comment|// are called, deleter should know about every
comment|// file referenced by the current head
comment|// segmentInfos:
assert|assert
name|deleter
operator|.
name|exists
argument_list|(
name|fileName
argument_list|)
operator|:
literal|"IndexFileDeleter doesn't know about file "
operator|+
name|fileName
assert|;
block|}
return|return
literal|true
return|;
block|}
comment|/** Walk through all files referenced by the current    *  segmentInfos and ask the Directory to sync each file,    *  if it wasn't already.  If that succeeds, then we    *  prepare a new segments_N file but do not fully commit    *  it. */
DECL|method|startCommit
specifier|private
name|void
name|startCommit
parameter_list|(
specifier|final
name|SegmentInfos
name|toSync
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|commitUserData
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|testPoint
argument_list|(
literal|"startStartCommit"
argument_list|)
assert|;
assert|assert
name|pendingCommit
operator|==
literal|null
assert|;
if|if
condition|(
name|hitOOM
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this writer hit an OutOfMemoryError; cannot commit"
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"startCommit(): start"
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
assert|assert
name|lastCommitChangeCount
operator|<=
name|changeCount
assert|;
if|if
condition|(
name|pendingCommitChangeCount
operator|==
name|lastCommitChangeCount
condition|)
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"  skip startCommit(): no changes pending"
argument_list|)
expr_stmt|;
block|}
name|deleter
operator|.
name|decRef
argument_list|(
name|filesToCommit
argument_list|)
expr_stmt|;
name|filesToCommit
operator|=
literal|null
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"startCommit index="
operator|+
name|segString
argument_list|(
name|toSync
argument_list|)
operator|+
literal|" changeCount="
operator|+
name|changeCount
argument_list|)
expr_stmt|;
block|}
assert|assert
name|filesExist
argument_list|(
name|toSync
argument_list|)
assert|;
if|if
condition|(
name|commitUserData
operator|!=
literal|null
condition|)
block|{
name|toSync
operator|.
name|setUserData
argument_list|(
name|commitUserData
argument_list|)
expr_stmt|;
block|}
block|}
assert|assert
name|testPoint
argument_list|(
literal|"midStartCommit"
argument_list|)
assert|;
name|boolean
name|pendingCommitSet
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// This call can take a long time -- 10s of seconds
comment|// or more.  We do it without sync:
name|directory
operator|.
name|sync
argument_list|(
name|toSync
operator|.
name|files
argument_list|(
name|directory
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
name|testPoint
argument_list|(
literal|"midStartCommit2"
argument_list|)
assert|;
synchronized|synchronized
init|(
name|this
init|)
block|{
assert|assert
name|pendingCommit
operator|==
literal|null
assert|;
assert|assert
name|segmentInfos
operator|.
name|getGeneration
argument_list|()
operator|==
name|toSync
operator|.
name|getGeneration
argument_list|()
assert|;
comment|// Exception here means nothing is prepared
comment|// (this method unwinds everything it did on
comment|// an exception)
name|toSync
operator|.
name|prepareCommit
argument_list|(
name|directory
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|pendingCommitSet
operator|=
literal|true
expr_stmt|;
name|pendingCommit
operator|=
name|toSync
expr_stmt|;
block|}
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"done all syncs"
argument_list|)
expr_stmt|;
block|}
assert|assert
name|testPoint
argument_list|(
literal|"midStartCommitSuccess"
argument_list|)
assert|;
block|}
finally|finally
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// Have our master segmentInfos record the
comment|// generations we just prepared.  We do this
comment|// on error or success so we don't
comment|// double-write a segments_N file.
name|segmentInfos
operator|.
name|updateGeneration
argument_list|(
name|toSync
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pendingCommitSet
condition|)
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"hit exception committing segments file"
argument_list|)
expr_stmt|;
block|}
comment|// Hit exception
name|deleter
operator|.
name|decRef
argument_list|(
name|filesToCommit
argument_list|)
expr_stmt|;
name|filesToCommit
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|oom
parameter_list|)
block|{
name|handleOOM
argument_list|(
name|oom
argument_list|,
literal|"startCommit"
argument_list|)
expr_stmt|;
block|}
assert|assert
name|testPoint
argument_list|(
literal|"finishStartCommit"
argument_list|)
assert|;
block|}
comment|/**    * Returns<code>true</code> iff the index in the named directory is    * currently locked.    * @param directory the directory to check for a lock    * @throws IOException if there is a low-level IO error    */
DECL|method|isLocked
specifier|public
specifier|static
name|boolean
name|isLocked
parameter_list|(
name|Directory
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|directory
operator|.
name|makeLock
argument_list|(
name|WRITE_LOCK_NAME
argument_list|)
operator|.
name|isLocked
argument_list|()
return|;
block|}
comment|/**    * Forcibly unlocks the index in the named directory.    *<P>    * Caution: this should only be used by failure recovery code,    * when it is known that no other process nor thread is in fact    * currently accessing this index.    */
DECL|method|unlock
specifier|public
specifier|static
name|void
name|unlock
parameter_list|(
name|Directory
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
name|directory
operator|.
name|makeLock
argument_list|(
name|IndexWriter
operator|.
name|WRITE_LOCK_NAME
argument_list|)
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
comment|/** If {@link #getReader} has been called (ie, this writer    *  is in near real-time mode), then after a merge    *  completes, this class can be invoked to warm the    *  reader on the newly merged segment, before the merge    *  commits.  This is not required for near real-time    *  search, but will reduce search latency on opening a    *  new near real-time reader after a merge completes.    *    * @lucene.experimental    *    *<p><b>NOTE</b>: warm is called before any deletes have    * been carried over to the merged segment. */
DECL|class|IndexReaderWarmer
specifier|public
specifier|static
specifier|abstract
class|class
name|IndexReaderWarmer
block|{
DECL|method|warm
specifier|public
specifier|abstract
name|void
name|warm
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|method|handleOOM
specifier|private
name|void
name|handleOOM
parameter_list|(
name|OutOfMemoryError
name|oom
parameter_list|,
name|String
name|location
parameter_list|)
block|{
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"hit OutOfMemoryError inside "
operator|+
name|location
argument_list|)
expr_stmt|;
block|}
name|hitOOM
operator|=
literal|true
expr_stmt|;
throw|throw
name|oom
throw|;
block|}
comment|// Used only by assert for testing.  Current points:
comment|//   startDoFlush
comment|//   startCommitMerge
comment|//   startStartCommit
comment|//   midStartCommit
comment|//   midStartCommit2
comment|//   midStartCommitSuccess
comment|//   finishStartCommit
comment|//   startCommitMergeDeletes
comment|//   startMergeInit
comment|//   DocumentsWriter.ThreadState.init start
DECL|method|testPoint
name|boolean
name|testPoint
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
DECL|method|nrtIsCurrent
specifier|synchronized
name|boolean
name|nrtIsCurrent
parameter_list|(
name|SegmentInfos
name|infos
parameter_list|)
block|{
comment|//System.out.println("IW.nrtIsCurrent " + (infos.version == segmentInfos.version&& !docWriter.anyChanges()&& !bufferedDeletesStream.any()));
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"IW"
argument_list|)
condition|)
block|{
name|infoStream
operator|.
name|message
argument_list|(
literal|"IW"
argument_list|,
literal|"nrtIsCurrent: infoVersion matches: "
operator|+
operator|(
name|infos
operator|.
name|version
operator|==
name|segmentInfos
operator|.
name|version
operator|)
operator|+
literal|" DW changes: "
operator|+
name|docWriter
operator|.
name|anyChanges
argument_list|()
operator|+
literal|" BD changes: "
operator|+
name|bufferedDeletesStream
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|infos
operator|.
name|version
operator|==
name|segmentInfos
operator|.
name|version
operator|&&
operator|!
name|docWriter
operator|.
name|anyChanges
argument_list|()
operator|&&
operator|!
name|bufferedDeletesStream
operator|.
name|any
argument_list|()
return|;
block|}
DECL|method|isClosed
specifier|synchronized
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|closed
return|;
block|}
comment|/** Expert: remove any index files that are no longer    *  used.    *    *<p> IndexWriter normally deletes unused files itself,    *  during indexing.  However, on Windows, which disallows    *  deletion of open files, if there is a reader open on    *  the index then those files cannot be deleted.  This is    *  fine, because IndexWriter will periodically retry    *  the deletion.</p>    *    *<p> However, IndexWriter doesn't try that often: only    *  on open, close, flushing a new segment, and finishing    *  a merge.  If you don't do any of these actions with your    *  IndexWriter, you'll see the unused files linger.  If    *  that's a problem, call this method to delete them    *  (once you've closed the open readers that were    *  preventing their deletion).     *      *<p> In addition, you can call this method to delete     *  unreferenced index commits. This might be useful if you     *  are using an {@link IndexDeletionPolicy} which holds    *  onto index commits until some criteria are met, but those    *  commits are no longer needed. Otherwise, those commits will    *  be deleted the next time commit() is called.    */
DECL|method|deleteUnusedFiles
specifier|public
specifier|synchronized
name|void
name|deleteUnusedFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|deleter
operator|.
name|deletePendingFiles
argument_list|()
expr_stmt|;
name|deleter
operator|.
name|revisitPolicy
argument_list|()
expr_stmt|;
block|}
comment|// Called by DirectoryReader.doClose
DECL|method|deletePendingFiles
specifier|synchronized
name|void
name|deletePendingFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|deleter
operator|.
name|deletePendingFiles
argument_list|()
expr_stmt|;
block|}
comment|/**    * Sets the {@link PayloadProcessorProvider} to use when merging payloads.    * Note that the given<code>pcp</code> will be invoked for every segment that    * is merged, not only external ones that are given through    * {@link #addIndexes}. If you want only the payloads of the external segments    * to be processed, you can return<code>null</code> whenever a    * {@link DirPayloadProcessor} is requested for the {@link Directory} of the    * {@link IndexWriter}.    *<p>    * The default is<code>null</code> which means payloads are processed    * normally (copied) during segment merges. You can also unset it by passing    *<code>null</code>.    *<p>    *<b>NOTE:</b> the set {@link PayloadProcessorProvider} will be in effect    * immediately, potentially for already running merges too. If you want to be    * sure it is used for further operations only, such as {@link #addIndexes} or    * {@link #forceMerge}, you can call {@link #waitForMerges()} before.    */
DECL|method|setPayloadProcessorProvider
specifier|public
name|void
name|setPayloadProcessorProvider
parameter_list|(
name|PayloadProcessorProvider
name|pcp
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|payloadProcessorProvider
operator|=
name|pcp
expr_stmt|;
block|}
comment|/**    * Returns the {@link PayloadProcessorProvider} that is used during segment    * merges to process payloads.    */
DECL|method|getPayloadProcessorProvider
specifier|public
name|PayloadProcessorProvider
name|getPayloadProcessorProvider
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|payloadProcessorProvider
return|;
block|}
comment|/**    * NOTE: this method creates a compound file for all files returned by    * info.files(). While, generally, this may include separate norms and    * deletion files, this SegmentInfo must not reference such files when this    * method is called, because they are not allowed within a compound file.    */
DECL|method|createCompoundFile
specifier|static
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|createCompoundFile
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|String
name|fileName
parameter_list|,
name|CheckAbort
name|checkAbort
parameter_list|,
specifier|final
name|SegmentInfo
name|info
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Now merge all added files
name|Collection
argument_list|<
name|String
argument_list|>
name|files
init|=
name|info
operator|.
name|files
argument_list|()
decl_stmt|;
name|CompoundFileDirectory
name|cfsDir
init|=
operator|new
name|CompoundFileDirectory
argument_list|(
name|directory
argument_list|,
name|fileName
argument_list|,
name|context
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
assert|assert
name|assertNoSeparateFiles
argument_list|(
name|files
argument_list|,
name|directory
argument_list|,
name|info
argument_list|)
assert|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|directory
operator|.
name|copy
argument_list|(
name|cfsDir
argument_list|,
name|file
argument_list|,
name|file
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|checkAbort
operator|.
name|work
argument_list|(
name|directory
operator|.
name|fileLength
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cfsDir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|files
return|;
block|}
comment|/**    * used only by assert: checks that filenames about to be put in cfs belong.    */
DECL|method|assertNoSeparateFiles
specifier|private
specifier|static
name|boolean
name|assertNoSeparateFiles
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|files
parameter_list|,
name|Directory
name|dir
parameter_list|,
name|SegmentInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
comment|// maybe this is overkill, but codec naming clashes would be bad.
name|Set
argument_list|<
name|String
argument_list|>
name|separateFiles
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|info
operator|.
name|getCodec
argument_list|()
operator|.
name|separateFiles
argument_list|(
name|dir
argument_list|,
name|info
argument_list|,
name|separateFiles
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
assert|assert
operator|!
name|separateFiles
operator|.
name|contains
argument_list|(
name|file
argument_list|)
operator|:
name|file
operator|+
literal|" should not go in CFS!"
assert|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
