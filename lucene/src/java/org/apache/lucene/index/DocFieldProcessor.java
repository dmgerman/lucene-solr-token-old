begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|Ints
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|Floats
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|Bytes
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|ValuesAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FloatsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LongsRef
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_comment
comment|/**  * This is a DocConsumer that gathers all fields under the  * same name, and calls per-field consumers to process field  * by field.  This class doesn't doesn't do any "real" work  * of its own: it just forwards the fields to a  * DocFieldConsumer.  */
end_comment
begin_class
DECL|class|DocFieldProcessor
specifier|final
class|class
name|DocFieldProcessor
extends|extends
name|DocConsumer
block|{
DECL|field|docWriter
specifier|final
name|DocumentsWriter
name|docWriter
decl_stmt|;
DECL|field|fieldInfos
specifier|final
name|FieldInfos
name|fieldInfos
init|=
operator|new
name|FieldInfos
argument_list|()
decl_stmt|;
DECL|field|consumer
specifier|final
name|DocFieldConsumer
name|consumer
decl_stmt|;
DECL|field|fieldsWriter
specifier|final
name|StoredFieldsWriter
name|fieldsWriter
decl_stmt|;
DECL|field|indexValues
specifier|final
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|IndexValuesProcessor
argument_list|>
name|indexValues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|IndexValuesProcessor
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|getProcessor
specifier|synchronized
name|IndexValuesProcessor
name|getProcessor
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|segment
parameter_list|,
name|String
name|name
parameter_list|,
name|ValuesAttribute
name|attr
parameter_list|,
name|FieldInfo
name|fieldInfo
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|attr
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|IndexValuesProcessor
name|p
init|=
name|indexValues
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|Values
name|v
init|=
name|attr
operator|.
name|type
argument_list|()
decl_stmt|;
specifier|final
name|String
name|id
init|=
name|segment
operator|+
literal|"_"
operator|+
name|fieldInfo
operator|.
name|number
decl_stmt|;
switch|switch
condition|(
name|v
condition|)
block|{
case|case
name|PACKED_INTS
case|:
name|p
operator|=
operator|new
name|IntValuesProcessor
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|PACKED_INTS_FIXED
case|:
name|p
operator|=
operator|new
name|IntValuesProcessor
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|SIMPLE_FLOAT_4BYTE
case|:
name|p
operator|=
operator|new
name|FloatValuesProcessor
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
literal|4
argument_list|)
expr_stmt|;
break|break;
case|case
name|SIMPLE_FLOAT_8BYTE
case|:
name|p
operator|=
operator|new
name|FloatValuesProcessor
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
literal|8
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTES_FIXED_STRAIGHT
case|:
name|p
operator|=
operator|new
name|BytesValuesProcessor
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|Mode
operator|.
name|STRAIGHT
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTES_FIXED_DEREF
case|:
name|p
operator|=
operator|new
name|BytesValuesProcessor
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|Mode
operator|.
name|DEREF
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTES_FIXED_SORTED
case|:
name|p
operator|=
operator|new
name|BytesValuesProcessor
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
literal|true
argument_list|,
name|attr
operator|.
name|bytesComparator
argument_list|()
argument_list|,
name|Bytes
operator|.
name|Mode
operator|.
name|SORTED
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTES_VAR_STRAIGHT
case|:
name|p
operator|=
operator|new
name|BytesValuesProcessor
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|Mode
operator|.
name|STRAIGHT
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTES_VAR_DEREF
case|:
name|p
operator|=
operator|new
name|BytesValuesProcessor
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|Mode
operator|.
name|DEREF
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTES_VAR_SORTED
case|:
name|p
operator|=
operator|new
name|BytesValuesProcessor
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
literal|false
argument_list|,
name|attr
operator|.
name|bytesComparator
argument_list|()
argument_list|,
name|Bytes
operator|.
name|Mode
operator|.
name|SORTED
argument_list|)
expr_stmt|;
break|break;
block|}
name|fieldInfo
operator|.
name|setIndexValues
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|indexValues
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
return|return
name|p
return|;
block|}
DECL|class|IndexValuesProcessor
specifier|static
specifier|abstract
class|class
name|IndexValuesProcessor
block|{
DECL|method|add
specifier|public
specifier|abstract
name|void
name|add
parameter_list|(
name|int
name|docID
parameter_list|,
name|String
name|name
parameter_list|,
name|ValuesAttribute
name|attr
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|finish
specifier|public
specifier|abstract
name|void
name|finish
parameter_list|(
name|int
name|docCount
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|files
specifier|public
specifier|abstract
name|void
name|files
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|files
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|class|FloatValuesProcessor
specifier|static
class|class
name|FloatValuesProcessor
extends|extends
name|IndexValuesProcessor
block|{
DECL|field|writer
specifier|private
specifier|final
name|Writer
name|writer
decl_stmt|;
DECL|field|id
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
DECL|method|FloatValuesProcessor
specifier|public
name|FloatValuesProcessor
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|id
parameter_list|,
name|int
name|precision
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|writer
operator|=
name|Floats
operator|.
name|getWriter
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|precision
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|int
name|docID
parameter_list|,
name|String
name|name
parameter_list|,
name|ValuesAttribute
name|attr
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FloatsRef
name|floats
init|=
name|attr
operator|.
name|floats
argument_list|()
decl_stmt|;
if|if
condition|(
name|floats
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|add
argument_list|(
name|docID
argument_list|,
name|floats
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"could not extract float/double from field "
operator|+
name|name
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|finish
specifier|public
name|void
name|finish
parameter_list|(
name|int
name|docCount
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|finish
argument_list|(
name|docCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|files
specifier|public
name|void
name|files
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|files
parameter_list|)
block|{
name|Floats
operator|.
name|files
argument_list|(
name|id
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|IntValuesProcessor
specifier|static
class|class
name|IntValuesProcessor
extends|extends
name|IndexValuesProcessor
block|{
DECL|field|writer
specifier|private
specifier|final
name|Writer
name|writer
decl_stmt|;
DECL|field|id
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
DECL|method|IntValuesProcessor
specifier|public
name|IntValuesProcessor
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|id
parameter_list|,
name|boolean
name|fixedArray
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|writer
operator|=
name|Ints
operator|.
name|getWriter
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|fixedArray
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|int
name|docID
parameter_list|,
name|String
name|name
parameter_list|,
name|ValuesAttribute
name|attr
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|LongsRef
name|ints
init|=
name|attr
operator|.
name|ints
argument_list|()
decl_stmt|;
if|if
condition|(
name|ints
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|add
argument_list|(
name|docID
argument_list|,
name|ints
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"could not extract int/long from field "
operator|+
name|name
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|finish
specifier|public
name|void
name|finish
parameter_list|(
name|int
name|docCount
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|finish
argument_list|(
name|docCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|files
specifier|public
name|void
name|files
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|files
parameter_list|)
throws|throws
name|IOException
block|{
name|Ints
operator|.
name|files
argument_list|(
name|id
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|BytesValuesProcessor
specifier|static
class|class
name|BytesValuesProcessor
extends|extends
name|IndexValuesProcessor
block|{
DECL|field|writer
specifier|private
specifier|final
name|Writer
name|writer
decl_stmt|;
DECL|field|id
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
DECL|field|dir
specifier|private
specifier|final
name|Directory
name|dir
decl_stmt|;
DECL|method|BytesValuesProcessor
specifier|public
name|BytesValuesProcessor
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|id
parameter_list|,
name|boolean
name|fixedSize
parameter_list|,
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|comp
parameter_list|,
name|Bytes
operator|.
name|Mode
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|writer
operator|=
name|Bytes
operator|.
name|getWriter
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|mode
argument_list|,
name|comp
argument_list|,
name|fixedSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
block|}
comment|// nocommit -- make this thread private and not sync'd
annotation|@
name|Override
DECL|method|add
specifier|public
specifier|synchronized
name|void
name|add
parameter_list|(
name|int
name|docID
parameter_list|,
name|String
name|name
parameter_list|,
name|ValuesAttribute
name|attr
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BytesRef
name|bytes
init|=
name|attr
operator|.
name|bytes
argument_list|()
decl_stmt|;
if|if
condition|(
name|bytes
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|add
argument_list|(
name|docID
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
return|return;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"could not extract byte[] from field "
operator|+
name|name
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|finish
specifier|public
name|void
name|finish
parameter_list|(
name|int
name|docCount
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|finish
argument_list|(
name|docCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|files
specifier|public
name|void
name|files
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|files
parameter_list|)
throws|throws
name|IOException
block|{
name|Bytes
operator|.
name|files
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|DocFieldProcessor
specifier|public
name|DocFieldProcessor
parameter_list|(
name|DocumentsWriter
name|docWriter
parameter_list|,
name|DocFieldConsumer
name|consumer
parameter_list|)
block|{
name|this
operator|.
name|docWriter
operator|=
name|docWriter
expr_stmt|;
name|this
operator|.
name|consumer
operator|=
name|consumer
expr_stmt|;
name|consumer
operator|.
name|setFieldInfos
argument_list|(
name|fieldInfos
argument_list|)
expr_stmt|;
name|fieldsWriter
operator|=
operator|new
name|StoredFieldsWriter
argument_list|(
name|docWriter
argument_list|,
name|fieldInfos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|closeDocStore
specifier|public
name|void
name|closeDocStore
parameter_list|(
name|SegmentWriteState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|consumer
operator|.
name|closeDocStore
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|fieldsWriter
operator|.
name|closeDocStore
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|(
name|Collection
argument_list|<
name|DocConsumerPerThread
argument_list|>
name|threads
parameter_list|,
name|SegmentWriteState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|DocFieldConsumerPerThread
argument_list|,
name|Collection
argument_list|<
name|DocFieldConsumerPerField
argument_list|>
argument_list|>
name|childThreadsAndFields
init|=
operator|new
name|HashMap
argument_list|<
name|DocFieldConsumerPerThread
argument_list|,
name|Collection
argument_list|<
name|DocFieldConsumerPerField
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|DocConsumerPerThread
name|thread
range|:
name|threads
control|)
block|{
name|DocFieldProcessorPerThread
name|perThread
init|=
operator|(
name|DocFieldProcessorPerThread
operator|)
name|thread
decl_stmt|;
name|childThreadsAndFields
operator|.
name|put
argument_list|(
name|perThread
operator|.
name|consumer
argument_list|,
name|perThread
operator|.
name|fields
argument_list|()
argument_list|)
expr_stmt|;
name|perThread
operator|.
name|trimFields
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
name|fieldsWriter
operator|.
name|flush
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|flush
argument_list|(
name|childThreadsAndFields
argument_list|,
name|state
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexValuesProcessor
name|p
range|:
name|indexValues
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|finish
argument_list|(
name|state
operator|.
name|numDocs
argument_list|)
expr_stmt|;
name|p
operator|.
name|files
argument_list|(
name|state
operator|.
name|flushedFiles
argument_list|)
expr_stmt|;
block|}
block|}
name|indexValues
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Important to save after asking consumer to flush so
comment|// consumer can alter the FieldInfo* if necessary.  EG,
comment|// FreqProxTermsWriter does this with
comment|// FieldInfo.storePayload.
specifier|final
name|String
name|fileName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentName
argument_list|,
literal|""
argument_list|,
name|IndexFileNames
operator|.
name|FIELD_INFOS_EXTENSION
argument_list|)
decl_stmt|;
name|fieldInfos
operator|.
name|write
argument_list|(
name|state
operator|.
name|directory
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|state
operator|.
name|flushedFiles
operator|.
name|add
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|abort
specifier|public
name|void
name|abort
parameter_list|()
block|{
name|fieldsWriter
operator|.
name|abort
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|freeRAM
specifier|public
name|boolean
name|freeRAM
parameter_list|()
block|{
return|return
name|consumer
operator|.
name|freeRAM
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|addThread
specifier|public
name|DocConsumerPerThread
name|addThread
parameter_list|(
name|DocumentsWriterThreadState
name|threadState
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|DocFieldProcessorPerThread
argument_list|(
name|threadState
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
end_class
end_unit
