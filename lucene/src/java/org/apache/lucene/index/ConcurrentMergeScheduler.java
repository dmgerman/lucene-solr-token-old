begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ThreadInterruptedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CollectionUtil
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_comment
comment|/** A {@link MergeScheduler} that runs each merge using a  *  separate thread.  *  *<p>Specify the max number of threads that may run at  *  once with {@link #setMaxThreadCount}.</p>  *  *<p>Separately specify the maximum number of simultaneous  *  merges with {@link #setMaxMergeCount}.  If the number of  *  merges exceeds the max number of threads then the  *  largest merges are paused until one of the smaller  *  merges completes.</p>  *  *<p>If more than {@link #getMaxMergeCount} merges are  *  requested then this class will forcefully throttle the  *  incoming threads by pausing until one more more merges  *  complete.</p>  */
end_comment
begin_class
DECL|class|ConcurrentMergeScheduler
specifier|public
class|class
name|ConcurrentMergeScheduler
extends|extends
name|MergeScheduler
block|{
DECL|field|mergeThreadPriority
specifier|private
name|int
name|mergeThreadPriority
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|mergeThreads
specifier|protected
name|List
argument_list|<
name|MergeThread
argument_list|>
name|mergeThreads
init|=
operator|new
name|ArrayList
argument_list|<
name|MergeThread
argument_list|>
argument_list|()
decl_stmt|;
comment|// Max number of merge threads allowed to be running at
comment|// once.  When there are more merges then this, we
comment|// forcefully pause the larger ones, letting the smaller
comment|// ones run, up until maxMergeCount merges at which point
comment|// we forcefully pause incoming threads (that presumably
comment|// are the ones causing so much merging).  We dynamically
comment|// default this from 1 to 3, depending on how many cores
comment|// you have:
DECL|field|maxThreadCount
specifier|private
name|int
name|maxThreadCount
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|Math
operator|.
name|min
argument_list|(
literal|3
argument_list|,
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
operator|/
literal|2
argument_list|)
argument_list|)
decl_stmt|;
comment|// Max number of merges we accept before forcefully
comment|// throttling the incoming threads
DECL|field|maxMergeCount
specifier|private
name|int
name|maxMergeCount
init|=
name|maxThreadCount
operator|+
literal|2
decl_stmt|;
DECL|field|dir
specifier|protected
name|Directory
name|dir
decl_stmt|;
DECL|field|writer
specifier|protected
name|IndexWriter
name|writer
decl_stmt|;
DECL|field|mergeThreadCount
specifier|protected
name|int
name|mergeThreadCount
decl_stmt|;
comment|/** Sets the max # simultaneous merge threads that should    *  be running at once.  This must be<= {@link    *  #setMaxMergeCount}. */
DECL|method|setMaxThreadCount
specifier|public
name|void
name|setMaxThreadCount
parameter_list|(
name|int
name|count
parameter_list|)
block|{
if|if
condition|(
name|count
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"count should be at least 1"
argument_list|)
throw|;
block|}
if|if
condition|(
name|count
operator|>
name|maxMergeCount
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"count should be<= maxMergeCount (= "
operator|+
name|maxMergeCount
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|maxThreadCount
operator|=
name|count
expr_stmt|;
block|}
comment|/** @see #setMaxThreadCount(int) */
DECL|method|getMaxThreadCount
specifier|public
name|int
name|getMaxThreadCount
parameter_list|()
block|{
return|return
name|maxThreadCount
return|;
block|}
comment|/** Sets the max # simultaneous merges that are allowed.    *  If a merge is necessary yet we already have this many    *  threads running, the incoming thread (that is calling    *  add/updateDocument) will block until a merge thread    *  has completed.  Note that we will only run the    *  smallest {@link #setMaxThreadCount} merges at a time. */
DECL|method|setMaxMergeCount
specifier|public
name|void
name|setMaxMergeCount
parameter_list|(
name|int
name|count
parameter_list|)
block|{
if|if
condition|(
name|count
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"count should be at least 1"
argument_list|)
throw|;
block|}
if|if
condition|(
name|count
operator|<
name|maxThreadCount
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"count should be>= maxThreadCount (= "
operator|+
name|maxThreadCount
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|maxMergeCount
operator|=
name|count
expr_stmt|;
block|}
comment|/** See {@link #setMaxMergeCount}. */
DECL|method|getMaxMergeCount
specifier|public
name|int
name|getMaxMergeCount
parameter_list|()
block|{
return|return
name|maxMergeCount
return|;
block|}
comment|/** Return the priority that merge threads run at.  By    *  default the priority is 1 plus the priority of (ie,    *  slightly higher priority than) the first thread that    *  calls merge. */
DECL|method|getMergeThreadPriority
specifier|public
specifier|synchronized
name|int
name|getMergeThreadPriority
parameter_list|()
block|{
name|initMergeThreadPriority
argument_list|()
expr_stmt|;
return|return
name|mergeThreadPriority
return|;
block|}
comment|/** Set the base priority that merge threads run at.    *  Note that CMS may increase priority of some merge    *  threads beyond this base priority.  It's best not to    *  set this any higher than    *  Thread.MAX_PRIORITY-maxThreadCount, so that CMS has    *  room to set relative priority among threads.  */
DECL|method|setMergeThreadPriority
specifier|public
specifier|synchronized
name|void
name|setMergeThreadPriority
parameter_list|(
name|int
name|pri
parameter_list|)
block|{
if|if
condition|(
name|pri
operator|>
name|Thread
operator|.
name|MAX_PRIORITY
operator|||
name|pri
operator|<
name|Thread
operator|.
name|MIN_PRIORITY
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"priority must be in range "
operator|+
name|Thread
operator|.
name|MIN_PRIORITY
operator|+
literal|" .. "
operator|+
name|Thread
operator|.
name|MAX_PRIORITY
operator|+
literal|" inclusive"
argument_list|)
throw|;
name|mergeThreadPriority
operator|=
name|pri
expr_stmt|;
name|updateMergeThreads
argument_list|()
expr_stmt|;
block|}
comment|// Larger merges come first
DECL|field|compareByMergeDocCount
specifier|protected
specifier|static
specifier|final
name|Comparator
argument_list|<
name|MergeThread
argument_list|>
name|compareByMergeDocCount
init|=
operator|new
name|Comparator
argument_list|<
name|MergeThread
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|MergeThread
name|t1
parameter_list|,
name|MergeThread
name|t2
parameter_list|)
block|{
specifier|final
name|MergePolicy
operator|.
name|OneMerge
name|m1
init|=
name|t1
operator|.
name|getCurrentMerge
argument_list|()
decl_stmt|;
specifier|final
name|MergePolicy
operator|.
name|OneMerge
name|m2
init|=
name|t2
operator|.
name|getCurrentMerge
argument_list|()
decl_stmt|;
specifier|final
name|int
name|c1
init|=
name|m1
operator|==
literal|null
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|m1
operator|.
name|totalDocCount
decl_stmt|;
specifier|final
name|int
name|c2
init|=
name|m2
operator|==
literal|null
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|m2
operator|.
name|totalDocCount
decl_stmt|;
return|return
name|c2
operator|-
name|c1
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Called whenever the running merges have changed, to pause& unpause    * threads. This method sorts the merge threads by their merge size in    * descending order and then pauses/unpauses threads from first to last --    * that way, smaller merges are guaranteed to run before larger ones.    */
DECL|method|updateMergeThreads
specifier|protected
specifier|synchronized
name|void
name|updateMergeThreads
parameter_list|()
block|{
comment|// Only look at threads that are alive& not in the
comment|// process of stopping (ie have an active merge):
specifier|final
name|List
argument_list|<
name|MergeThread
argument_list|>
name|activeMerges
init|=
operator|new
name|ArrayList
argument_list|<
name|MergeThread
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|threadIdx
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|threadIdx
operator|<
name|mergeThreads
operator|.
name|size
argument_list|()
condition|)
block|{
specifier|final
name|MergeThread
name|mergeThread
init|=
name|mergeThreads
operator|.
name|get
argument_list|(
name|threadIdx
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|mergeThread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
comment|// Prune any dead threads
name|mergeThreads
operator|.
name|remove
argument_list|(
name|threadIdx
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|mergeThread
operator|.
name|getCurrentMerge
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|activeMerges
operator|.
name|add
argument_list|(
name|mergeThread
argument_list|)
expr_stmt|;
block|}
name|threadIdx
operator|++
expr_stmt|;
block|}
comment|// Sort the merge threads in descending order.
name|CollectionUtil
operator|.
name|mergeSort
argument_list|(
name|activeMerges
argument_list|,
name|compareByMergeDocCount
argument_list|)
expr_stmt|;
name|int
name|pri
init|=
name|mergeThreadPriority
decl_stmt|;
specifier|final
name|int
name|activeMergeCount
init|=
name|activeMerges
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|threadIdx
operator|=
literal|0
init|;
name|threadIdx
operator|<
name|activeMergeCount
condition|;
name|threadIdx
operator|++
control|)
block|{
specifier|final
name|MergeThread
name|mergeThread
init|=
name|activeMerges
operator|.
name|get
argument_list|(
name|threadIdx
argument_list|)
decl_stmt|;
specifier|final
name|MergePolicy
operator|.
name|OneMerge
name|merge
init|=
name|mergeThread
operator|.
name|getCurrentMerge
argument_list|()
decl_stmt|;
if|if
condition|(
name|merge
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|// pause the thread if maxThreadCount is smaller than the number of merge threads.
specifier|final
name|boolean
name|doPause
init|=
name|threadIdx
operator|<
name|activeMergeCount
operator|-
name|maxThreadCount
decl_stmt|;
if|if
condition|(
name|verbose
argument_list|()
condition|)
block|{
if|if
condition|(
name|doPause
operator|!=
name|merge
operator|.
name|getPause
argument_list|()
condition|)
block|{
if|if
condition|(
name|doPause
condition|)
block|{
name|message
argument_list|(
literal|"pause thread "
operator|+
name|mergeThread
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|message
argument_list|(
literal|"unpause thread "
operator|+
name|mergeThread
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|doPause
operator|!=
name|merge
operator|.
name|getPause
argument_list|()
condition|)
block|{
name|merge
operator|.
name|setPause
argument_list|(
name|doPause
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|doPause
condition|)
block|{
if|if
condition|(
name|verbose
argument_list|()
condition|)
block|{
name|message
argument_list|(
literal|"set priority of merge thread "
operator|+
name|mergeThread
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|pri
argument_list|)
expr_stmt|;
block|}
name|mergeThread
operator|.
name|setThreadPriority
argument_list|(
name|pri
argument_list|)
expr_stmt|;
name|pri
operator|=
name|Math
operator|.
name|min
argument_list|(
name|Thread
operator|.
name|MAX_PRIORITY
argument_list|,
literal|1
operator|+
name|pri
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Returns true if verbosing is enabled. This method is usually used in    * conjunction with {@link #message(String)}, like that:    *     *<pre>    * if (verbose()) {    *   message(&quot;your message&quot;);    * }    *</pre>    */
DECL|method|verbose
specifier|protected
name|boolean
name|verbose
parameter_list|()
block|{
return|return
name|writer
operator|!=
literal|null
operator|&&
name|writer
operator|.
name|infoStream
operator|.
name|isEnabled
argument_list|(
literal|"CMS"
argument_list|)
return|;
block|}
comment|/**    * Outputs the given message - this method assumes {@link #verbose()} was    * called and returned true.    */
DECL|method|message
specifier|protected
name|void
name|message
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|writer
operator|.
name|infoStream
operator|.
name|message
argument_list|(
literal|"CMS"
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|initMergeThreadPriority
specifier|private
specifier|synchronized
name|void
name|initMergeThreadPriority
parameter_list|()
block|{
if|if
condition|(
name|mergeThreadPriority
operator|==
operator|-
literal|1
condition|)
block|{
comment|// Default to slightly higher priority than our
comment|// calling thread
name|mergeThreadPriority
operator|=
literal|1
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getPriority
argument_list|()
expr_stmt|;
if|if
condition|(
name|mergeThreadPriority
operator|>
name|Thread
operator|.
name|MAX_PRIORITY
condition|)
name|mergeThreadPriority
operator|=
name|Thread
operator|.
name|MAX_PRIORITY
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|sync
argument_list|()
expr_stmt|;
block|}
comment|/** Wait for any running merge threads to finish */
DECL|method|sync
specifier|public
name|void
name|sync
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|MergeThread
name|toSync
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
for|for
control|(
name|MergeThread
name|t
range|:
name|mergeThreads
control|)
block|{
if|if
condition|(
name|t
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|toSync
operator|=
name|t
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|toSync
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|toSync
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ThreadInterruptedException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
comment|/**    * Returns the number of merge threads that are alive. Note that this number    * is&le; {@link #mergeThreads} size.    */
DECL|method|mergeThreadCount
specifier|protected
specifier|synchronized
name|int
name|mergeThreadCount
parameter_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MergeThread
name|mt
range|:
name|mergeThreads
control|)
block|{
if|if
condition|(
name|mt
operator|.
name|isAlive
argument_list|()
operator|&&
name|mt
operator|.
name|getCurrentMerge
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
annotation|@
name|Override
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
operator|!
name|Thread
operator|.
name|holdsLock
argument_list|(
name|writer
argument_list|)
assert|;
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
name|initMergeThreadPriority
argument_list|()
expr_stmt|;
name|dir
operator|=
name|writer
operator|.
name|getDirectory
argument_list|()
expr_stmt|;
comment|// First, quickly run through the newly proposed merges
comment|// and add any orthogonal merges (ie a merge not
comment|// involving segments already pending to be merged) to
comment|// the queue.  If we are way behind on merging, many of
comment|// these newly proposed merges will likely already be
comment|// registered.
if|if
condition|(
name|verbose
argument_list|()
condition|)
block|{
name|message
argument_list|(
literal|"now merge"
argument_list|)
expr_stmt|;
name|message
argument_list|(
literal|"  index: "
operator|+
name|writer
operator|.
name|segString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Iterate, pulling from the IndexWriter's queue of
comment|// pending merges, until it's empty:
while|while
condition|(
literal|true
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|long
name|startStallTime
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|mergeThreadCount
argument_list|()
operator|>=
literal|1
operator|+
name|maxMergeCount
condition|)
block|{
name|startStallTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
if|if
condition|(
name|verbose
argument_list|()
condition|)
block|{
name|message
argument_list|(
literal|"    too many merges; stalling..."
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ThreadInterruptedException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|verbose
argument_list|()
condition|)
block|{
if|if
condition|(
name|startStallTime
operator|!=
literal|0
condition|)
block|{
name|message
argument_list|(
literal|"  stalled for "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startStallTime
operator|)
operator|+
literal|" msec"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// TODO: we could be careful about which merges to do in
comment|// the BG (eg maybe the "biggest" ones) vs FG, which
comment|// merges to do first (the easiest ones?), etc.
name|MergePolicy
operator|.
name|OneMerge
name|merge
init|=
name|writer
operator|.
name|getNextMerge
argument_list|()
decl_stmt|;
if|if
condition|(
name|merge
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|verbose
argument_list|()
condition|)
block|{
name|message
argument_list|(
literal|"  no more merges pending; now return"
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
comment|// We do this w/ the primary thread to keep
comment|// deterministic assignment of segment names
name|writer
operator|.
name|mergeInit
argument_list|(
name|merge
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|verbose
argument_list|()
condition|)
block|{
name|message
argument_list|(
literal|"  consider merge "
operator|+
name|merge
operator|.
name|segString
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// OK to spawn a new merge thread to handle this
comment|// merge:
specifier|final
name|MergeThread
name|merger
init|=
name|getMergeThread
argument_list|(
name|writer
argument_list|,
name|merge
argument_list|)
decl_stmt|;
name|mergeThreads
operator|.
name|add
argument_list|(
name|merger
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
argument_list|()
condition|)
block|{
name|message
argument_list|(
literal|"    launch new thread ["
operator|+
name|merger
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|merger
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Must call this after starting the thread else
comment|// the new thread is removed from mergeThreads
comment|// (since it's not alive yet):
name|updateMergeThreads
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|writer
operator|.
name|mergeFinish
argument_list|(
name|merge
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/** Does the actual merge, by calling {@link IndexWriter#merge} */
DECL|method|doMerge
specifier|protected
name|void
name|doMerge
parameter_list|(
name|MergePolicy
operator|.
name|OneMerge
name|merge
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|merge
argument_list|(
name|merge
argument_list|)
expr_stmt|;
block|}
comment|/** Create and return a new MergeThread */
DECL|method|getMergeThread
specifier|protected
specifier|synchronized
name|MergeThread
name|getMergeThread
parameter_list|(
name|IndexWriter
name|writer
parameter_list|,
name|MergePolicy
operator|.
name|OneMerge
name|merge
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|MergeThread
name|thread
init|=
operator|new
name|MergeThread
argument_list|(
name|writer
argument_list|,
name|merge
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setThreadPriority
argument_list|(
name|mergeThreadPriority
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setName
argument_list|(
literal|"Lucene Merge Thread #"
operator|+
name|mergeThreadCount
operator|++
argument_list|)
expr_stmt|;
return|return
name|thread
return|;
block|}
DECL|class|MergeThread
specifier|protected
class|class
name|MergeThread
extends|extends
name|Thread
block|{
DECL|field|tWriter
name|IndexWriter
name|tWriter
decl_stmt|;
DECL|field|startMerge
name|MergePolicy
operator|.
name|OneMerge
name|startMerge
decl_stmt|;
DECL|field|runningMerge
name|MergePolicy
operator|.
name|OneMerge
name|runningMerge
decl_stmt|;
DECL|field|done
specifier|private
specifier|volatile
name|boolean
name|done
decl_stmt|;
DECL|method|MergeThread
specifier|public
name|MergeThread
parameter_list|(
name|IndexWriter
name|writer
parameter_list|,
name|MergePolicy
operator|.
name|OneMerge
name|startMerge
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|tWriter
operator|=
name|writer
expr_stmt|;
name|this
operator|.
name|startMerge
operator|=
name|startMerge
expr_stmt|;
block|}
DECL|method|setRunningMerge
specifier|public
specifier|synchronized
name|void
name|setRunningMerge
parameter_list|(
name|MergePolicy
operator|.
name|OneMerge
name|merge
parameter_list|)
block|{
name|runningMerge
operator|=
name|merge
expr_stmt|;
block|}
DECL|method|getRunningMerge
specifier|public
specifier|synchronized
name|MergePolicy
operator|.
name|OneMerge
name|getRunningMerge
parameter_list|()
block|{
return|return
name|runningMerge
return|;
block|}
DECL|method|getCurrentMerge
specifier|public
specifier|synchronized
name|MergePolicy
operator|.
name|OneMerge
name|getCurrentMerge
parameter_list|()
block|{
if|if
condition|(
name|done
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|runningMerge
operator|!=
literal|null
condition|)
block|{
return|return
name|runningMerge
return|;
block|}
else|else
block|{
return|return
name|startMerge
return|;
block|}
block|}
DECL|method|setThreadPriority
specifier|public
name|void
name|setThreadPriority
parameter_list|(
name|int
name|pri
parameter_list|)
block|{
try|try
block|{
name|setPriority
argument_list|(
name|pri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|npe
parameter_list|)
block|{
comment|// Strangely, Sun's JDK 1.5 on Linux sometimes
comment|// throws NPE out of here...
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|// Ignore this because we will still run fine with
comment|// normal thread priority
block|}
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// First time through the while loop we do the merge
comment|// that we were started with:
name|MergePolicy
operator|.
name|OneMerge
name|merge
init|=
name|this
operator|.
name|startMerge
decl_stmt|;
try|try
block|{
if|if
condition|(
name|verbose
argument_list|()
condition|)
block|{
name|message
argument_list|(
literal|"  merge thread: start"
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|setRunningMerge
argument_list|(
name|merge
argument_list|)
expr_stmt|;
name|doMerge
argument_list|(
name|merge
argument_list|)
expr_stmt|;
comment|// Subsequent times through the loop we do any new
comment|// merge that writer says is necessary:
name|merge
operator|=
name|tWriter
operator|.
name|getNextMerge
argument_list|()
expr_stmt|;
if|if
condition|(
name|merge
operator|!=
literal|null
condition|)
block|{
name|tWriter
operator|.
name|mergeInit
argument_list|(
name|merge
argument_list|)
expr_stmt|;
name|updateMergeThreads
argument_list|()
expr_stmt|;
if|if
condition|(
name|verbose
argument_list|()
condition|)
block|{
name|message
argument_list|(
literal|"  merge thread: do another merge "
operator|+
name|merge
operator|.
name|segString
argument_list|(
name|dir
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|verbose
argument_list|()
condition|)
block|{
name|message
argument_list|(
literal|"  merge thread: done"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|exc
parameter_list|)
block|{
comment|// Ignore the exception if it was due to abort:
if|if
condition|(
operator|!
operator|(
name|exc
operator|instanceof
name|MergePolicy
operator|.
name|MergeAbortedException
operator|)
condition|)
block|{
comment|//System.out.println(Thread.currentThread().getName() + ": CMS: exc");
comment|//exc.printStackTrace(System.out);
if|if
condition|(
operator|!
name|suppressExceptions
condition|)
block|{
comment|// suppressExceptions is normally only set during
comment|// testing.
name|handleMergeException
argument_list|(
name|exc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|done
operator|=
literal|true
expr_stmt|;
synchronized|synchronized
init|(
name|ConcurrentMergeScheduler
operator|.
name|this
init|)
block|{
name|updateMergeThreads
argument_list|()
expr_stmt|;
name|ConcurrentMergeScheduler
operator|.
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|MergePolicy
operator|.
name|OneMerge
name|merge
init|=
name|getRunningMerge
argument_list|()
decl_stmt|;
if|if
condition|(
name|merge
operator|==
literal|null
condition|)
name|merge
operator|=
name|startMerge
expr_stmt|;
return|return
literal|"merge thread: "
operator|+
name|merge
operator|.
name|segString
argument_list|(
name|dir
argument_list|)
return|;
block|}
block|}
comment|/** Called when an exception is hit in a background merge    *  thread */
DECL|method|handleMergeException
specifier|protected
name|void
name|handleMergeException
parameter_list|(
name|Throwable
name|exc
parameter_list|)
block|{
try|try
block|{
comment|// When an exception is hit during merge, IndexWriter
comment|// removes any partial files and then allows another
comment|// merge to run.  If whatever caused the error is not
comment|// transient then the exception will keep happening,
comment|// so, we sleep here to avoid saturating CPU in such
comment|// cases:
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ThreadInterruptedException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|MergePolicy
operator|.
name|MergeException
argument_list|(
name|exc
argument_list|,
name|dir
argument_list|)
throw|;
block|}
DECL|field|suppressExceptions
specifier|private
name|boolean
name|suppressExceptions
decl_stmt|;
comment|/** Used for testing */
DECL|method|setSuppressExceptions
name|void
name|setSuppressExceptions
parameter_list|()
block|{
name|suppressExceptions
operator|=
literal|true
expr_stmt|;
block|}
comment|/** Used for testing */
DECL|method|clearSuppressExceptions
name|void
name|clearSuppressExceptions
parameter_list|()
block|{
name|suppressExceptions
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_class
end_unit
