begin_unit
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_class
DECL|class|AllDocsEnum
class|class
name|AllDocsEnum
extends|extends
name|DocsEnum
block|{
DECL|field|skipDocs
specifier|protected
specifier|final
name|Bits
name|skipDocs
decl_stmt|;
DECL|field|maxDoc
specifier|protected
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|field|reader
specifier|protected
specifier|final
name|IndexReader
name|reader
decl_stmt|;
DECL|field|doc
specifier|protected
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|AllDocsEnum
specifier|protected
name|AllDocsEnum
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|Bits
name|skipDocs
parameter_list|)
block|{
name|this
operator|.
name|skipDocs
operator|=
name|skipDocs
expr_stmt|;
name|this
operator|.
name|maxDoc
operator|=
name|reader
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|advance
argument_list|(
name|doc
operator|+
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
index|[]
name|docs
init|=
name|bulkResult
operator|.
name|docs
operator|.
name|ints
decl_stmt|;
specifier|final
name|int
index|[]
name|freqs
init|=
name|bulkResult
operator|.
name|freqs
operator|.
name|ints
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|docs
operator|.
name|length
operator|&&
name|doc
operator|<
name|maxDoc
condition|)
block|{
if|if
condition|(
name|skipDocs
operator|==
literal|null
operator|||
operator|!
name|skipDocs
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|docs
index|[
name|i
index|]
operator|=
name|doc
expr_stmt|;
name|freqs
index|[
name|i
index|]
operator|=
literal|1
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|doc
operator|++
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|doc
operator|=
name|target
expr_stmt|;
while|while
condition|(
name|doc
operator|<
name|maxDoc
condition|)
block|{
if|if
condition|(
name|skipDocs
operator|==
literal|null
operator|||
operator|!
name|skipDocs
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
block|{
return|return
name|doc
return|;
block|}
name|doc
operator|++
expr_stmt|;
block|}
name|doc
operator|=
name|NO_MORE_DOCS
expr_stmt|;
return|return
name|doc
return|;
block|}
block|}
end_class
end_unit
