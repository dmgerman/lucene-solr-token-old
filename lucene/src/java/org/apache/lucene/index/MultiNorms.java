begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ReaderUtil
import|;
end_import
begin_comment
comment|/**  * Exposes flex API, merged from flex API of sub-segments.  * This is useful when you're interacting with an {@link  * IndexReader} implementation that consists of sequential  * sub-readers (eg DirectoryReader or {@link  * MultiReader}).  *  *<p><b>NOTE</b>: for multi readers, you'll get better  * performance by gathering the sub readers using {@link  * ReaderUtil#gatherSubReaders} and then operate per-reader,  * instead of using this class.  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|MultiNorms
specifier|public
class|class
name|MultiNorms
block|{
comment|/**    * Warning: this is heavy! Do not use in a loop, or implement norms()    * in your own reader with this (you should likely cache the result).    */
DECL|method|norms
specifier|public
specifier|static
name|byte
index|[]
name|norms
parameter_list|(
name|IndexReader
name|r
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|IndexReader
index|[]
name|subs
init|=
name|r
operator|.
name|getSequentialSubReaders
argument_list|()
decl_stmt|;
if|if
condition|(
name|subs
operator|==
literal|null
condition|)
block|{
comment|// already an atomic reader
return|return
name|r
operator|.
name|norms
argument_list|(
name|field
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|subs
operator|.
name|length
operator|==
literal|0
operator|||
operator|!
name|r
operator|.
name|hasNorms
argument_list|(
name|field
argument_list|)
condition|)
block|{
comment|// no norms
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|subs
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|norms
argument_list|(
name|subs
index|[
literal|0
index|]
argument_list|,
name|field
argument_list|)
return|;
block|}
else|else
block|{
comment|// TODO: optimize more maybe
name|byte
name|norms
index|[]
init|=
operator|new
name|byte
index|[
name|r
operator|.
name|maxDoc
argument_list|()
index|]
decl_stmt|;
specifier|final
name|List
argument_list|<
name|IndexReader
argument_list|>
name|leaves
init|=
operator|new
name|ArrayList
argument_list|<
name|IndexReader
argument_list|>
argument_list|()
decl_stmt|;
name|ReaderUtil
operator|.
name|gatherSubReaders
argument_list|(
name|leaves
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|int
name|end
init|=
literal|0
decl_stmt|;
for|for
control|(
name|IndexReader
name|leaf
range|:
name|leaves
control|)
block|{
name|Fields
name|fields
init|=
name|leaf
operator|.
name|fields
argument_list|()
decl_stmt|;
name|boolean
name|hasField
init|=
operator|(
name|fields
operator|!=
literal|null
operator|&&
name|fields
operator|.
name|terms
argument_list|(
name|field
argument_list|)
operator|!=
literal|null
operator|)
decl_stmt|;
name|int
name|start
init|=
name|end
decl_stmt|;
name|byte
name|leafNorms
index|[]
init|=
name|leaf
operator|.
name|norms
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|leafNorms
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|hasField
condition|)
block|{
comment|// omitted norms
return|return
literal|null
return|;
block|}
comment|// doesn't have field, fill bytes
name|leafNorms
operator|=
operator|new
name|byte
index|[
name|leaf
operator|.
name|maxDoc
argument_list|()
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|leafNorms
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|leafNorms
argument_list|,
literal|0
argument_list|,
name|norms
argument_list|,
name|start
argument_list|,
name|leafNorms
operator|.
name|length
argument_list|)
expr_stmt|;
name|end
operator|+=
name|leaf
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
block|}
return|return
name|norms
return|;
block|}
block|}
block|}
end_class
end_unit
