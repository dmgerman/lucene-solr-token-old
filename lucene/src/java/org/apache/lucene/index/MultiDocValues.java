begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ReaderUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ReaderUtil
operator|.
name|Gather
import|;
end_import
begin_comment
comment|/**  * A wrapper for compound IndexReader providing access to per segment  * {@link DocValues}  *   * @lucene.experimental  * @lucene.internal  */
end_comment
begin_class
DECL|class|MultiDocValues
specifier|public
class|class
name|MultiDocValues
extends|extends
name|DocValues
block|{
DECL|class|DocValuesSlice
specifier|public
specifier|static
class|class
name|DocValuesSlice
block|{
DECL|field|EMPTY_ARRAY
specifier|public
specifier|final
specifier|static
name|DocValuesSlice
index|[]
name|EMPTY_ARRAY
init|=
operator|new
name|DocValuesSlice
index|[
literal|0
index|]
decl_stmt|;
DECL|field|start
specifier|final
name|int
name|start
decl_stmt|;
DECL|field|length
specifier|final
name|int
name|length
decl_stmt|;
DECL|field|docValues
name|DocValues
name|docValues
decl_stmt|;
DECL|method|DocValuesSlice
specifier|public
name|DocValuesSlice
parameter_list|(
name|DocValues
name|docValues
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|docValues
operator|=
name|docValues
expr_stmt|;
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
block|}
DECL|field|slices
specifier|private
name|DocValuesSlice
index|[]
name|slices
decl_stmt|;
DECL|field|starts
specifier|private
name|int
index|[]
name|starts
decl_stmt|;
DECL|field|type
specifier|private
name|Type
name|type
decl_stmt|;
DECL|field|valueSize
specifier|private
name|int
name|valueSize
decl_stmt|;
DECL|method|MultiDocValues
specifier|private
name|MultiDocValues
parameter_list|(
name|DocValuesSlice
index|[]
name|slices
parameter_list|,
name|int
index|[]
name|starts
parameter_list|,
name|TypePromoter
name|promotedType
parameter_list|)
block|{
name|this
operator|.
name|starts
operator|=
name|starts
expr_stmt|;
name|this
operator|.
name|slices
operator|=
name|slices
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|promotedType
operator|.
name|type
argument_list|()
expr_stmt|;
name|this
operator|.
name|valueSize
operator|=
name|promotedType
operator|.
name|getValueSize
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns a single {@link DocValues} instance for this field, merging    * their values on the fly.    *     *<p>    *<b>NOTE</b>: this is a slow way to access DocValues. It's better to get the    * sub-readers (using {@link Gather}) and iterate through them yourself.    */
DECL|method|getDocValues
specifier|public
specifier|static
name|DocValues
name|getDocValues
parameter_list|(
name|IndexReader
name|r
parameter_list|,
specifier|final
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|IndexReader
index|[]
name|subs
init|=
name|r
operator|.
name|getSequentialSubReaders
argument_list|()
decl_stmt|;
if|if
condition|(
name|subs
operator|==
literal|null
condition|)
block|{
comment|// already an atomic reader
return|return
name|r
operator|.
name|docValues
argument_list|(
name|field
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|subs
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// no fields
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|subs
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|getDocValues
argument_list|(
name|subs
index|[
literal|0
index|]
argument_list|,
name|field
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|List
argument_list|<
name|DocValuesSlice
argument_list|>
name|slices
init|=
operator|new
name|ArrayList
argument_list|<
name|DocValuesSlice
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|TypePromoter
name|promotedType
index|[]
init|=
operator|new
name|TypePromoter
index|[
literal|1
index|]
decl_stmt|;
name|promotedType
index|[
literal|0
index|]
operator|=
name|TypePromoter
operator|.
name|getIdentityPromoter
argument_list|()
expr_stmt|;
comment|// gather all docvalues fields, accumulating a promoted type across
comment|// potentially incompatible types
operator|new
name|ReaderUtil
operator|.
name|Gather
argument_list|(
name|r
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|add
parameter_list|(
name|int
name|base
parameter_list|,
name|IndexReader
name|r
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DocValues
name|d
init|=
name|r
operator|.
name|docValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
name|TypePromoter
name|incoming
init|=
name|TypePromoter
operator|.
name|create
argument_list|(
name|d
operator|.
name|type
argument_list|()
argument_list|,
name|d
operator|.
name|getValueSize
argument_list|()
argument_list|)
decl_stmt|;
name|promotedType
index|[
literal|0
index|]
operator|=
name|promotedType
index|[
literal|0
index|]
operator|.
name|promote
argument_list|(
name|incoming
argument_list|)
expr_stmt|;
block|}
name|slices
operator|.
name|add
argument_list|(
operator|new
name|DocValuesSlice
argument_list|(
name|d
argument_list|,
name|base
argument_list|,
name|r
operator|.
name|maxDoc
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// return null if no docvalues encountered anywhere
if|if
condition|(
name|promotedType
index|[
literal|0
index|]
operator|==
name|TypePromoter
operator|.
name|getIdentityPromoter
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// populate starts and fill gaps with empty docvalues
name|int
name|starts
index|[]
init|=
operator|new
name|int
index|[
name|slices
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|slices
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DocValuesSlice
name|slice
init|=
name|slices
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|starts
index|[
name|i
index|]
operator|=
name|slice
operator|.
name|start
expr_stmt|;
if|if
condition|(
name|slice
operator|.
name|docValues
operator|==
literal|null
condition|)
block|{
name|slice
operator|.
name|docValues
operator|=
operator|new
name|EmptyDocValues
argument_list|(
name|slice
operator|.
name|length
argument_list|,
name|promotedType
index|[
literal|0
index|]
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|MultiDocValues
argument_list|(
name|slices
operator|.
name|toArray
argument_list|(
operator|new
name|DocValuesSlice
index|[
name|slices
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|starts
argument_list|,
name|promotedType
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|load
specifier|public
name|Source
name|load
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|MultiSource
argument_list|(
name|slices
argument_list|,
name|starts
argument_list|,
literal|false
argument_list|,
name|type
argument_list|)
return|;
block|}
DECL|class|EmptyDocValues
specifier|public
specifier|static
class|class
name|EmptyDocValues
extends|extends
name|DocValues
block|{
DECL|field|maxDoc
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|field|emptySource
specifier|final
name|Source
name|emptySource
decl_stmt|;
DECL|method|EmptyDocValues
specifier|public
name|EmptyDocValues
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
name|this
operator|.
name|emptySource
operator|=
operator|new
name|EmptySource
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|load
specifier|public
name|Source
name|load
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|emptySource
return|;
block|}
annotation|@
name|Override
DECL|method|type
specifier|public
name|Type
name|type
parameter_list|()
block|{
return|return
name|emptySource
operator|.
name|type
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getDirectSource
specifier|public
name|Source
name|getDirectSource
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|emptySource
return|;
block|}
block|}
DECL|class|MultiSource
specifier|private
specifier|static
class|class
name|MultiSource
extends|extends
name|Source
block|{
DECL|field|numDocs
specifier|private
name|int
name|numDocs
init|=
literal|0
decl_stmt|;
DECL|field|start
specifier|private
name|int
name|start
init|=
literal|0
decl_stmt|;
DECL|field|current
specifier|private
name|Source
name|current
decl_stmt|;
DECL|field|starts
specifier|private
specifier|final
name|int
index|[]
name|starts
decl_stmt|;
DECL|field|slices
specifier|private
specifier|final
name|DocValuesSlice
index|[]
name|slices
decl_stmt|;
DECL|field|direct
specifier|private
name|boolean
name|direct
decl_stmt|;
DECL|method|MultiSource
specifier|public
name|MultiSource
parameter_list|(
name|DocValuesSlice
index|[]
name|slices
parameter_list|,
name|int
index|[]
name|starts
parameter_list|,
name|boolean
name|direct
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|slices
operator|=
name|slices
expr_stmt|;
name|this
operator|.
name|starts
operator|=
name|starts
expr_stmt|;
assert|assert
name|slices
operator|.
name|length
operator|!=
literal|0
assert|;
name|this
operator|.
name|direct
operator|=
name|direct
expr_stmt|;
block|}
DECL|method|getInt
specifier|public
name|long
name|getInt
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
specifier|final
name|int
name|doc
init|=
name|ensureSource
argument_list|(
name|docID
argument_list|)
decl_stmt|;
return|return
name|current
operator|.
name|getInt
argument_list|(
name|doc
argument_list|)
return|;
block|}
DECL|method|ensureSource
specifier|private
specifier|final
name|int
name|ensureSource
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
if|if
condition|(
name|docID
operator|>=
name|start
operator|&&
name|docID
operator|<
name|start
operator|+
name|numDocs
condition|)
block|{
return|return
name|docID
operator|-
name|start
return|;
block|}
else|else
block|{
specifier|final
name|int
name|idx
init|=
name|ReaderUtil
operator|.
name|subIndex
argument_list|(
name|docID
argument_list|,
name|starts
argument_list|)
decl_stmt|;
assert|assert
name|idx
operator|>=
literal|0
operator|&&
name|idx
operator|<
name|slices
operator|.
name|length
operator|:
literal|"idx was "
operator|+
name|idx
operator|+
literal|" for doc id: "
operator|+
name|docID
operator|+
literal|" slices : "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|starts
argument_list|)
assert|;
assert|assert
name|slices
index|[
name|idx
index|]
operator|!=
literal|null
assert|;
try|try
block|{
if|if
condition|(
name|direct
condition|)
block|{
name|current
operator|=
name|slices
index|[
name|idx
index|]
operator|.
name|docValues
operator|.
name|getDirectSource
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|current
operator|=
name|slices
index|[
name|idx
index|]
operator|.
name|docValues
operator|.
name|getSource
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"load failed"
argument_list|,
name|e
argument_list|)
throw|;
comment|// TODO how should we
comment|// handle this
block|}
name|start
operator|=
name|slices
index|[
name|idx
index|]
operator|.
name|start
expr_stmt|;
name|numDocs
operator|=
name|slices
index|[
name|idx
index|]
operator|.
name|length
expr_stmt|;
return|return
name|docID
operator|-
name|start
return|;
block|}
block|}
DECL|method|getFloat
specifier|public
name|double
name|getFloat
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
specifier|final
name|int
name|doc
init|=
name|ensureSource
argument_list|(
name|docID
argument_list|)
decl_stmt|;
return|return
name|current
operator|.
name|getFloat
argument_list|(
name|doc
argument_list|)
return|;
block|}
DECL|method|getBytes
specifier|public
name|BytesRef
name|getBytes
parameter_list|(
name|int
name|docID
parameter_list|,
name|BytesRef
name|bytesRef
parameter_list|)
block|{
specifier|final
name|int
name|doc
init|=
name|ensureSource
argument_list|(
name|docID
argument_list|)
decl_stmt|;
return|return
name|current
operator|.
name|getBytes
argument_list|(
name|doc
argument_list|,
name|bytesRef
argument_list|)
return|;
block|}
block|}
comment|// TODO: this is dup of DocValues.getDefaultSource()?
DECL|class|EmptySource
specifier|private
specifier|static
class|class
name|EmptySource
extends|extends
name|Source
block|{
DECL|method|EmptySource
specifier|public
name|EmptySource
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getBytes
specifier|public
name|BytesRef
name|getBytes
parameter_list|(
name|int
name|docID
parameter_list|,
name|BytesRef
name|ref
parameter_list|)
block|{
name|ref
operator|.
name|length
operator|=
literal|0
expr_stmt|;
return|return
name|ref
return|;
block|}
annotation|@
name|Override
DECL|method|getFloat
specifier|public
name|double
name|getFloat
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
literal|0d
return|;
block|}
annotation|@
name|Override
DECL|method|getInt
specifier|public
name|long
name|getInt
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|type
specifier|public
name|Type
name|type
parameter_list|()
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Override
DECL|method|getValueSize
specifier|public
name|int
name|getValueSize
parameter_list|()
block|{
return|return
name|valueSize
return|;
block|}
annotation|@
name|Override
DECL|method|getDirectSource
specifier|public
name|Source
name|getDirectSource
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|MultiSource
argument_list|(
name|slices
argument_list|,
name|starts
argument_list|,
literal|true
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
end_class
end_unit
