begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldSelector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Similarity
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|BufferedIndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitVector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CloseableThreadLocal
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|CodecProvider
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|preflex
operator|.
name|PreFlexFields
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|preflex
operator|.
name|SegmentTermDocs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|preflex
operator|.
name|SegmentTermPositions
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|FieldsProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldCache
import|;
end_import
begin_comment
comment|// not great (circular); used only to purge FieldCache entry on close
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_comment
comment|/**  * @lucene.experimental  */
end_comment
begin_class
DECL|class|SegmentReader
specifier|public
class|class
name|SegmentReader
extends|extends
name|IndexReader
implements|implements
name|Cloneable
block|{
DECL|field|readOnly
specifier|protected
name|boolean
name|readOnly
decl_stmt|;
DECL|field|si
specifier|private
name|SegmentInfo
name|si
decl_stmt|;
DECL|field|readBufferSize
specifier|private
name|int
name|readBufferSize
decl_stmt|;
DECL|field|fieldsReaderLocal
name|CloseableThreadLocal
argument_list|<
name|FieldsReader
argument_list|>
name|fieldsReaderLocal
init|=
operator|new
name|FieldsReaderLocal
argument_list|()
decl_stmt|;
DECL|field|termVectorsLocal
name|CloseableThreadLocal
argument_list|<
name|TermVectorsReader
argument_list|>
name|termVectorsLocal
init|=
operator|new
name|CloseableThreadLocal
argument_list|<
name|TermVectorsReader
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|deletedDocs
name|BitVector
name|deletedDocs
init|=
literal|null
decl_stmt|;
DECL|field|deletedDocsRef
name|AtomicInteger
name|deletedDocsRef
init|=
literal|null
decl_stmt|;
DECL|field|deletedDocsDirty
specifier|private
name|boolean
name|deletedDocsDirty
init|=
literal|false
decl_stmt|;
DECL|field|normsDirty
specifier|private
name|boolean
name|normsDirty
init|=
literal|false
decl_stmt|;
DECL|field|pendingDeleteCount
specifier|private
name|int
name|pendingDeleteCount
decl_stmt|;
DECL|field|rollbackHasChanges
specifier|private
name|boolean
name|rollbackHasChanges
init|=
literal|false
decl_stmt|;
DECL|field|rollbackDeletedDocsDirty
specifier|private
name|boolean
name|rollbackDeletedDocsDirty
init|=
literal|false
decl_stmt|;
DECL|field|rollbackNormsDirty
specifier|private
name|boolean
name|rollbackNormsDirty
init|=
literal|false
decl_stmt|;
DECL|field|rollbackPendingDeleteCount
specifier|private
name|int
name|rollbackPendingDeleteCount
decl_stmt|;
comment|// optionally used for the .nrm file shared by multiple norms
DECL|field|singleNormStream
specifier|private
name|IndexInput
name|singleNormStream
decl_stmt|;
DECL|field|singleNormRef
specifier|private
name|AtomicInteger
name|singleNormRef
decl_stmt|;
DECL|field|core
name|CoreReaders
name|core
decl_stmt|;
comment|// Holds core readers that are shared (unchanged) when
comment|// SegmentReader is cloned or reopened
DECL|class|CoreReaders
specifier|static
specifier|final
class|class
name|CoreReaders
block|{
comment|// Counts how many other reader share the core objects
comment|// (freqStream, proxStream, tis, etc.) of this reader;
comment|// when coreRef drops to 0, these core objects may be
comment|// closed.  A given instance of SegmentReader may be
comment|// closed, even those it shares core objects with other
comment|// SegmentReaders:
DECL|field|ref
specifier|private
specifier|final
name|AtomicInteger
name|ref
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|segment
specifier|final
name|String
name|segment
decl_stmt|;
DECL|field|fieldInfos
specifier|final
name|FieldInfos
name|fieldInfos
decl_stmt|;
DECL|field|fields
specifier|final
name|FieldsProducer
name|fields
decl_stmt|;
DECL|field|isPreFlex
specifier|final
name|boolean
name|isPreFlex
decl_stmt|;
DECL|field|codecs
specifier|final
name|CodecProvider
name|codecs
decl_stmt|;
DECL|field|dir
specifier|final
name|Directory
name|dir
decl_stmt|;
DECL|field|cfsDir
specifier|final
name|Directory
name|cfsDir
decl_stmt|;
DECL|field|readBufferSize
specifier|final
name|int
name|readBufferSize
decl_stmt|;
DECL|field|termsIndexDivisor
specifier|final
name|int
name|termsIndexDivisor
decl_stmt|;
DECL|field|origInstance
specifier|private
specifier|final
name|SegmentReader
name|origInstance
decl_stmt|;
DECL|field|fieldsReaderOrig
name|FieldsReader
name|fieldsReaderOrig
decl_stmt|;
DECL|field|termVectorsReaderOrig
name|TermVectorsReader
name|termVectorsReaderOrig
decl_stmt|;
DECL|field|cfsReader
name|CompoundFileReader
name|cfsReader
decl_stmt|;
DECL|field|storeCFSReader
name|CompoundFileReader
name|storeCFSReader
decl_stmt|;
DECL|method|CoreReaders
name|CoreReaders
parameter_list|(
name|SegmentReader
name|origInstance
parameter_list|,
name|Directory
name|dir
parameter_list|,
name|SegmentInfo
name|si
parameter_list|,
name|int
name|readBufferSize
parameter_list|,
name|int
name|termsIndexDivisor
parameter_list|,
name|CodecProvider
name|codecs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|termsIndexDivisor
operator|<
literal|1
operator|&&
name|termsIndexDivisor
operator|!=
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"indexDivisor must be -1 (don't load terms index) or greater than 0: got "
operator|+
name|termsIndexDivisor
argument_list|)
throw|;
block|}
name|segment
operator|=
name|si
operator|.
name|name
expr_stmt|;
if|if
condition|(
name|codecs
operator|==
literal|null
condition|)
block|{
name|codecs
operator|=
name|CodecProvider
operator|.
name|getDefault
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|codecs
operator|=
name|codecs
expr_stmt|;
name|this
operator|.
name|readBufferSize
operator|=
name|readBufferSize
expr_stmt|;
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Directory
name|dir0
init|=
name|dir
decl_stmt|;
if|if
condition|(
name|si
operator|.
name|getUseCompoundFile
argument_list|()
condition|)
block|{
name|cfsReader
operator|=
operator|new
name|CompoundFileReader
argument_list|(
name|dir
argument_list|,
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segment
argument_list|,
name|IndexFileNames
operator|.
name|COMPOUND_FILE_EXTENSION
argument_list|)
argument_list|,
name|readBufferSize
argument_list|)
expr_stmt|;
name|dir0
operator|=
name|cfsReader
expr_stmt|;
block|}
name|cfsDir
operator|=
name|dir0
expr_stmt|;
name|fieldInfos
operator|=
operator|new
name|FieldInfos
argument_list|(
name|cfsDir
argument_list|,
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segment
argument_list|,
name|IndexFileNames
operator|.
name|FIELD_INFOS_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|termsIndexDivisor
operator|=
name|termsIndexDivisor
expr_stmt|;
comment|// Ask codec for its Fields
name|fields
operator|=
name|si
operator|.
name|getCodec
argument_list|()
operator|.
name|fieldsProducer
argument_list|(
operator|new
name|SegmentReadState
argument_list|(
name|cfsDir
argument_list|,
name|si
argument_list|,
name|fieldInfos
argument_list|,
name|readBufferSize
argument_list|,
name|termsIndexDivisor
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
name|fields
operator|!=
literal|null
assert|;
name|isPreFlex
operator|=
name|fields
operator|instanceof
name|PreFlexFields
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Must assign this at the end -- if we hit an
comment|// exception above core, we don't want to attempt to
comment|// purge the FieldCache (will hit NPE because core is
comment|// not assigned yet).
name|this
operator|.
name|origInstance
operator|=
name|origInstance
expr_stmt|;
block|}
DECL|method|getTermVectorsReaderOrig
specifier|synchronized
name|TermVectorsReader
name|getTermVectorsReaderOrig
parameter_list|()
block|{
return|return
name|termVectorsReaderOrig
return|;
block|}
DECL|method|getFieldsReaderOrig
specifier|synchronized
name|FieldsReader
name|getFieldsReaderOrig
parameter_list|()
block|{
return|return
name|fieldsReaderOrig
return|;
block|}
DECL|method|incRef
specifier|synchronized
name|void
name|incRef
parameter_list|()
block|{
name|ref
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
DECL|method|getCFSReader
specifier|synchronized
name|Directory
name|getCFSReader
parameter_list|()
block|{
return|return
name|cfsReader
return|;
block|}
DECL|method|decRef
specifier|synchronized
name|void
name|decRef
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|ref
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|fields
operator|!=
literal|null
condition|)
block|{
name|fields
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|termVectorsReaderOrig
operator|!=
literal|null
condition|)
block|{
name|termVectorsReaderOrig
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fieldsReaderOrig
operator|!=
literal|null
condition|)
block|{
name|fieldsReaderOrig
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cfsReader
operator|!=
literal|null
condition|)
block|{
name|cfsReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|storeCFSReader
operator|!=
literal|null
condition|)
block|{
name|storeCFSReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Force FieldCache to evict our entries at this
comment|// point.  If the exception occurred while
comment|// initializing the core readers, then
comment|// origInstance will be null, and we don't want
comment|// to call FieldCache.purge (it leads to NPE):
if|if
condition|(
name|origInstance
operator|!=
literal|null
condition|)
block|{
name|FieldCache
operator|.
name|DEFAULT
operator|.
name|purge
argument_list|(
name|origInstance
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|openDocStores
specifier|synchronized
name|void
name|openDocStores
parameter_list|(
name|SegmentInfo
name|si
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|si
operator|.
name|name
operator|.
name|equals
argument_list|(
name|segment
argument_list|)
assert|;
if|if
condition|(
name|fieldsReaderOrig
operator|==
literal|null
condition|)
block|{
specifier|final
name|Directory
name|storeDir
decl_stmt|;
if|if
condition|(
name|si
operator|.
name|getDocStoreOffset
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|si
operator|.
name|getDocStoreIsCompoundFile
argument_list|()
condition|)
block|{
assert|assert
name|storeCFSReader
operator|==
literal|null
assert|;
name|storeCFSReader
operator|=
operator|new
name|CompoundFileReader
argument_list|(
name|dir
argument_list|,
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|si
operator|.
name|getDocStoreSegment
argument_list|()
argument_list|,
name|IndexFileNames
operator|.
name|COMPOUND_FILE_STORE_EXTENSION
argument_list|)
argument_list|,
name|readBufferSize
argument_list|)
expr_stmt|;
name|storeDir
operator|=
name|storeCFSReader
expr_stmt|;
assert|assert
name|storeDir
operator|!=
literal|null
assert|;
block|}
else|else
block|{
name|storeDir
operator|=
name|dir
expr_stmt|;
assert|assert
name|storeDir
operator|!=
literal|null
assert|;
block|}
block|}
elseif|else
if|if
condition|(
name|si
operator|.
name|getUseCompoundFile
argument_list|()
condition|)
block|{
comment|// In some cases, we were originally opened when CFS
comment|// was not used, but then we are asked to open doc
comment|// stores after the segment has switched to CFS
if|if
condition|(
name|cfsReader
operator|==
literal|null
condition|)
block|{
name|cfsReader
operator|=
operator|new
name|CompoundFileReader
argument_list|(
name|dir
argument_list|,
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segment
argument_list|,
name|IndexFileNames
operator|.
name|COMPOUND_FILE_EXTENSION
argument_list|)
argument_list|,
name|readBufferSize
argument_list|)
expr_stmt|;
block|}
name|storeDir
operator|=
name|cfsReader
expr_stmt|;
assert|assert
name|storeDir
operator|!=
literal|null
assert|;
block|}
else|else
block|{
name|storeDir
operator|=
name|dir
expr_stmt|;
assert|assert
name|storeDir
operator|!=
literal|null
assert|;
block|}
specifier|final
name|String
name|storesSegment
decl_stmt|;
if|if
condition|(
name|si
operator|.
name|getDocStoreOffset
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|storesSegment
operator|=
name|si
operator|.
name|getDocStoreSegment
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|storesSegment
operator|=
name|segment
expr_stmt|;
block|}
name|fieldsReaderOrig
operator|=
operator|new
name|FieldsReader
argument_list|(
name|storeDir
argument_list|,
name|storesSegment
argument_list|,
name|fieldInfos
argument_list|,
name|readBufferSize
argument_list|,
name|si
operator|.
name|getDocStoreOffset
argument_list|()
argument_list|,
name|si
operator|.
name|docCount
argument_list|)
expr_stmt|;
comment|// Verify two sources of "maxDoc" agree:
if|if
condition|(
name|si
operator|.
name|getDocStoreOffset
argument_list|()
operator|==
operator|-
literal|1
operator|&&
name|fieldsReaderOrig
operator|.
name|size
argument_list|()
operator|!=
name|si
operator|.
name|docCount
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"doc counts differ for segment "
operator|+
name|segment
operator|+
literal|": fieldsReader shows "
operator|+
name|fieldsReaderOrig
operator|.
name|size
argument_list|()
operator|+
literal|" but segmentInfo shows "
operator|+
name|si
operator|.
name|docCount
argument_list|)
throw|;
block|}
if|if
condition|(
name|fieldInfos
operator|.
name|hasVectors
argument_list|()
condition|)
block|{
comment|// open term vector files only as needed
name|termVectorsReaderOrig
operator|=
operator|new
name|TermVectorsReader
argument_list|(
name|storeDir
argument_list|,
name|storesSegment
argument_list|,
name|fieldInfos
argument_list|,
name|readBufferSize
argument_list|,
name|si
operator|.
name|getDocStoreOffset
argument_list|()
argument_list|,
name|si
operator|.
name|docCount
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Sets the initial value     */
DECL|class|FieldsReaderLocal
specifier|private
class|class
name|FieldsReaderLocal
extends|extends
name|CloseableThreadLocal
argument_list|<
name|FieldsReader
argument_list|>
block|{
annotation|@
name|Override
DECL|method|initialValue
specifier|protected
name|FieldsReader
name|initialValue
parameter_list|()
block|{
return|return
operator|(
name|FieldsReader
operator|)
name|core
operator|.
name|getFieldsReaderOrig
argument_list|()
operator|.
name|clone
argument_list|()
return|;
block|}
block|}
comment|/**    * Byte[] referencing is used because a new norm object needs     * to be created for each clone, and the byte array is all     * that is needed for sharing between cloned readers.  The     * current norm referencing is for sharing between readers     * whereas the byte[] referencing is for copy on write which     * is independent of reader references (i.e. incRef, decRef).    */
DECL|class|Norm
specifier|final
class|class
name|Norm
implements|implements
name|Cloneable
block|{
DECL|field|refCount
specifier|private
name|int
name|refCount
init|=
literal|1
decl_stmt|;
comment|// If this instance is a clone, the originalNorm
comment|// references the Norm that has a real open IndexInput:
DECL|field|origNorm
specifier|private
name|Norm
name|origNorm
decl_stmt|;
DECL|field|in
specifier|private
name|IndexInput
name|in
decl_stmt|;
DECL|field|normSeek
specifier|private
name|long
name|normSeek
decl_stmt|;
comment|// null until bytes is set
DECL|field|bytesRef
specifier|private
name|AtomicInteger
name|bytesRef
decl_stmt|;
DECL|field|bytes
specifier|private
name|byte
index|[]
name|bytes
decl_stmt|;
DECL|field|dirty
specifier|private
name|boolean
name|dirty
decl_stmt|;
DECL|field|number
specifier|private
name|int
name|number
decl_stmt|;
DECL|field|rollbackDirty
specifier|private
name|boolean
name|rollbackDirty
decl_stmt|;
DECL|method|Norm
specifier|public
name|Norm
parameter_list|(
name|IndexInput
name|in
parameter_list|,
name|int
name|number
parameter_list|,
name|long
name|normSeek
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|number
operator|=
name|number
expr_stmt|;
name|this
operator|.
name|normSeek
operator|=
name|normSeek
expr_stmt|;
block|}
DECL|method|incRef
specifier|public
specifier|synchronized
name|void
name|incRef
parameter_list|()
block|{
assert|assert
name|refCount
operator|>
literal|0
operator|&&
operator|(
name|origNorm
operator|==
literal|null
operator|||
name|origNorm
operator|.
name|refCount
operator|>
literal|0
operator|)
assert|;
name|refCount
operator|++
expr_stmt|;
block|}
DECL|method|closeInput
specifier|private
name|void
name|closeInput
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|in
operator|!=
name|singleNormStream
condition|)
block|{
comment|// It's private to us -- just close it
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// We are sharing this with others -- decRef and
comment|// maybe close the shared norm stream
if|if
condition|(
name|singleNormRef
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|singleNormStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|singleNormStream
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|in
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|decRef
specifier|public
specifier|synchronized
name|void
name|decRef
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|refCount
operator|>
literal|0
operator|&&
operator|(
name|origNorm
operator|==
literal|null
operator|||
name|origNorm
operator|.
name|refCount
operator|>
literal|0
operator|)
assert|;
if|if
condition|(
operator|--
name|refCount
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|origNorm
operator|!=
literal|null
condition|)
block|{
name|origNorm
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|origNorm
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|closeInput
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|bytes
operator|!=
literal|null
condition|)
block|{
assert|assert
name|bytesRef
operator|!=
literal|null
assert|;
name|bytesRef
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
name|bytes
operator|=
literal|null
expr_stmt|;
name|bytesRef
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|bytesRef
operator|==
literal|null
assert|;
block|}
block|}
block|}
comment|// Load bytes but do not cache them if they were not
comment|// already cached
DECL|method|bytes
specifier|public
specifier|synchronized
name|void
name|bytes
parameter_list|(
name|byte
index|[]
name|bytesOut
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|refCount
operator|>
literal|0
operator|&&
operator|(
name|origNorm
operator|==
literal|null
operator|||
name|origNorm
operator|.
name|refCount
operator|>
literal|0
operator|)
assert|;
if|if
condition|(
name|bytes
operator|!=
literal|null
condition|)
block|{
comment|// Already cached -- copy from cache:
assert|assert
name|len
operator|<=
name|maxDoc
argument_list|()
assert|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytesOut
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Not cached
if|if
condition|(
name|origNorm
operator|!=
literal|null
condition|)
block|{
comment|// Ask origNorm to load
name|origNorm
operator|.
name|bytes
argument_list|(
name|bytesOut
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We are orig -- read ourselves from disk:
synchronized|synchronized
init|(
name|in
init|)
block|{
name|in
operator|.
name|seek
argument_list|(
name|normSeek
argument_list|)
expr_stmt|;
name|in
operator|.
name|readBytes
argument_list|(
name|bytesOut
argument_list|,
name|offset
argument_list|,
name|len
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Load& cache full bytes array.  Returns bytes.
DECL|method|bytes
specifier|public
specifier|synchronized
name|byte
index|[]
name|bytes
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|refCount
operator|>
literal|0
operator|&&
operator|(
name|origNorm
operator|==
literal|null
operator|||
name|origNorm
operator|.
name|refCount
operator|>
literal|0
operator|)
assert|;
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
comment|// value not yet read
assert|assert
name|bytesRef
operator|==
literal|null
assert|;
if|if
condition|(
name|origNorm
operator|!=
literal|null
condition|)
block|{
comment|// Ask origNorm to load so that for a series of
comment|// reopened readers we share a single read-only
comment|// byte[]
name|bytes
operator|=
name|origNorm
operator|.
name|bytes
argument_list|()
expr_stmt|;
name|bytesRef
operator|=
name|origNorm
operator|.
name|bytesRef
expr_stmt|;
name|bytesRef
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
comment|// Once we've loaded the bytes we no longer need
comment|// origNorm:
name|origNorm
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|origNorm
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
comment|// We are the origNorm, so load the bytes for real
comment|// ourself:
specifier|final
name|int
name|count
init|=
name|maxDoc
argument_list|()
decl_stmt|;
name|bytes
operator|=
operator|new
name|byte
index|[
name|count
index|]
expr_stmt|;
comment|// Since we are orig, in must not be null
assert|assert
name|in
operator|!=
literal|null
assert|;
comment|// Read from disk.
synchronized|synchronized
init|(
name|in
init|)
block|{
name|in
operator|.
name|seek
argument_list|(
name|normSeek
argument_list|)
expr_stmt|;
name|in
operator|.
name|readBytes
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|count
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|bytesRef
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|closeInput
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|bytes
return|;
block|}
comment|// Only for testing
DECL|method|bytesRef
name|AtomicInteger
name|bytesRef
parameter_list|()
block|{
return|return
name|bytesRef
return|;
block|}
comment|// Called if we intend to change a norm value.  We make a
comment|// private copy of bytes if it's shared with others:
DECL|method|copyOnWrite
specifier|public
specifier|synchronized
name|byte
index|[]
name|copyOnWrite
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|refCount
operator|>
literal|0
operator|&&
operator|(
name|origNorm
operator|==
literal|null
operator|||
name|origNorm
operator|.
name|refCount
operator|>
literal|0
operator|)
assert|;
name|bytes
argument_list|()
expr_stmt|;
assert|assert
name|bytes
operator|!=
literal|null
assert|;
assert|assert
name|bytesRef
operator|!=
literal|null
assert|;
if|if
condition|(
name|bytesRef
operator|.
name|get
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// I cannot be the origNorm for another norm
comment|// instance if I'm being changed.  Ie, only the
comment|// "head Norm" can be changed:
assert|assert
name|refCount
operator|==
literal|1
assert|;
specifier|final
name|AtomicInteger
name|oldRef
init|=
name|bytesRef
decl_stmt|;
name|bytes
operator|=
name|cloneNormBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|bytesRef
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|oldRef
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
name|dirty
operator|=
literal|true
expr_stmt|;
return|return
name|bytes
return|;
block|}
comment|// Returns a copy of this Norm instance that shares
comment|// IndexInput& bytes with the original one
annotation|@
name|Override
DECL|method|clone
specifier|public
specifier|synchronized
name|Object
name|clone
parameter_list|()
block|{
assert|assert
name|refCount
operator|>
literal|0
operator|&&
operator|(
name|origNorm
operator|==
literal|null
operator|||
name|origNorm
operator|.
name|refCount
operator|>
literal|0
operator|)
assert|;
name|Norm
name|clone
decl_stmt|;
try|try
block|{
name|clone
operator|=
operator|(
name|Norm
operator|)
name|super
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|cnse
parameter_list|)
block|{
comment|// Cannot happen
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unexpected CloneNotSupportedException"
argument_list|,
name|cnse
argument_list|)
throw|;
block|}
name|clone
operator|.
name|refCount
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|bytes
operator|!=
literal|null
condition|)
block|{
assert|assert
name|bytesRef
operator|!=
literal|null
assert|;
assert|assert
name|origNorm
operator|==
literal|null
assert|;
comment|// Clone holds a reference to my bytes:
name|clone
operator|.
name|bytesRef
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|bytesRef
operator|==
literal|null
assert|;
if|if
condition|(
name|origNorm
operator|==
literal|null
condition|)
block|{
comment|// I become the origNorm for the clone:
name|clone
operator|.
name|origNorm
operator|=
name|this
expr_stmt|;
block|}
name|clone
operator|.
name|origNorm
operator|.
name|incRef
argument_list|()
expr_stmt|;
block|}
comment|// Only the origNorm will actually readBytes from in:
name|clone
operator|.
name|in
operator|=
literal|null
expr_stmt|;
return|return
name|clone
return|;
block|}
comment|// Flush all pending changes to the next generation
comment|// separate norms file.
DECL|method|reWrite
specifier|public
name|void
name|reWrite
parameter_list|(
name|SegmentInfo
name|si
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|refCount
operator|>
literal|0
operator|&&
operator|(
name|origNorm
operator|==
literal|null
operator|||
name|origNorm
operator|.
name|refCount
operator|>
literal|0
operator|)
operator|:
literal|"refCount="
operator|+
name|refCount
operator|+
literal|" origNorm="
operator|+
name|origNorm
assert|;
comment|// NOTE: norms are re-written in regular directory, not cfs
name|si
operator|.
name|advanceNormGen
argument_list|(
name|this
operator|.
name|number
argument_list|)
expr_stmt|;
name|IndexOutput
name|out
init|=
name|directory
argument_list|()
operator|.
name|createOutput
argument_list|(
name|si
operator|.
name|getNormFileName
argument_list|(
name|this
operator|.
name|number
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|writeBytes
argument_list|(
name|bytes
argument_list|,
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|dirty
operator|=
literal|false
expr_stmt|;
block|}
block|}
DECL|field|norms
name|Map
argument_list|<
name|String
argument_list|,
name|Norm
argument_list|>
name|norms
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Norm
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|get
specifier|public
specifier|static
name|SegmentReader
name|get
parameter_list|(
name|boolean
name|readOnly
parameter_list|,
name|SegmentInfo
name|si
parameter_list|,
name|int
name|termInfosIndexDivisor
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
return|return
name|get
argument_list|(
name|readOnly
argument_list|,
name|si
operator|.
name|dir
argument_list|,
name|si
argument_list|,
name|BufferedIndexInput
operator|.
name|BUFFER_SIZE
argument_list|,
literal|true
argument_list|,
name|termInfosIndexDivisor
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|get
specifier|public
specifier|static
name|SegmentReader
name|get
parameter_list|(
name|boolean
name|readOnly
parameter_list|,
name|Directory
name|dir
parameter_list|,
name|SegmentInfo
name|si
parameter_list|,
name|int
name|readBufferSize
parameter_list|,
name|boolean
name|doOpenStores
parameter_list|,
name|int
name|termInfosIndexDivisor
parameter_list|,
name|CodecProvider
name|codecs
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
if|if
condition|(
name|codecs
operator|==
literal|null
condition|)
block|{
name|codecs
operator|=
name|CodecProvider
operator|.
name|getDefault
argument_list|()
expr_stmt|;
block|}
name|SegmentReader
name|instance
init|=
name|readOnly
condition|?
operator|new
name|ReadOnlySegmentReader
argument_list|()
else|:
operator|new
name|SegmentReader
argument_list|()
decl_stmt|;
name|instance
operator|.
name|readOnly
operator|=
name|readOnly
expr_stmt|;
name|instance
operator|.
name|si
operator|=
name|si
expr_stmt|;
name|instance
operator|.
name|readBufferSize
operator|=
name|readBufferSize
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|instance
operator|.
name|core
operator|=
operator|new
name|CoreReaders
argument_list|(
name|instance
argument_list|,
name|dir
argument_list|,
name|si
argument_list|,
name|readBufferSize
argument_list|,
name|termInfosIndexDivisor
argument_list|,
name|codecs
argument_list|)
expr_stmt|;
if|if
condition|(
name|doOpenStores
condition|)
block|{
name|instance
operator|.
name|core
operator|.
name|openDocStores
argument_list|(
name|si
argument_list|)
expr_stmt|;
block|}
name|instance
operator|.
name|loadDeletedDocs
argument_list|()
expr_stmt|;
name|instance
operator|.
name|openNorms
argument_list|(
name|instance
operator|.
name|core
operator|.
name|cfsDir
argument_list|,
name|readBufferSize
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
comment|// With lock-less commits, it's entirely possible (and
comment|// fine) to hit a FileNotFound exception above.  In
comment|// this case, we want to explicitly close any subset
comment|// of things that were opened so that we don't have to
comment|// wait for a GC to do so.
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|instance
operator|.
name|doClose
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|instance
return|;
block|}
DECL|method|openDocStores
name|void
name|openDocStores
parameter_list|()
throws|throws
name|IOException
block|{
name|core
operator|.
name|openDocStores
argument_list|(
name|si
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDeletedDocs
specifier|public
specifier|synchronized
name|Bits
name|getDeletedDocs
parameter_list|()
block|{
return|return
name|deletedDocs
return|;
block|}
DECL|method|checkDeletedCounts
specifier|private
name|boolean
name|checkDeletedCounts
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|recomputedCount
init|=
name|deletedDocs
operator|.
name|getRecomputedCount
argument_list|()
decl_stmt|;
assert|assert
name|deletedDocs
operator|.
name|count
argument_list|()
operator|==
name|recomputedCount
operator|:
literal|"deleted count="
operator|+
name|deletedDocs
operator|.
name|count
argument_list|()
operator|+
literal|" vs recomputed count="
operator|+
name|recomputedCount
assert|;
assert|assert
name|si
operator|.
name|getDelCount
argument_list|()
operator|==
name|recomputedCount
operator|:
literal|"delete count mismatch: info="
operator|+
name|si
operator|.
name|getDelCount
argument_list|()
operator|+
literal|" vs BitVector="
operator|+
name|recomputedCount
assert|;
comment|// Verify # deletes does not exceed maxDoc for this
comment|// segment:
assert|assert
name|si
operator|.
name|getDelCount
argument_list|()
operator|<=
name|maxDoc
argument_list|()
operator|:
literal|"delete count mismatch: "
operator|+
name|recomputedCount
operator|+
literal|") exceeds max doc ("
operator|+
name|maxDoc
argument_list|()
operator|+
literal|") for segment "
operator|+
name|si
operator|.
name|name
assert|;
return|return
literal|true
return|;
block|}
DECL|method|loadDeletedDocs
specifier|private
name|void
name|loadDeletedDocs
parameter_list|()
throws|throws
name|IOException
block|{
comment|// NOTE: the bitvector is stored using the regular directory, not cfs
if|if
condition|(
name|hasDeletions
argument_list|(
name|si
argument_list|)
condition|)
block|{
name|deletedDocs
operator|=
operator|new
name|BitVector
argument_list|(
name|directory
argument_list|()
argument_list|,
name|si
operator|.
name|getDelFileName
argument_list|()
argument_list|)
expr_stmt|;
name|deletedDocsRef
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
name|checkDeletedCounts
argument_list|()
assert|;
if|if
condition|(
name|deletedDocs
operator|.
name|size
argument_list|()
operator|!=
name|si
operator|.
name|docCount
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"document count mismatch: deleted docs count "
operator|+
name|deletedDocs
operator|.
name|size
argument_list|()
operator|+
literal|" vs segment doc count "
operator|+
name|si
operator|.
name|docCount
operator|+
literal|" segment="
operator|+
name|si
operator|.
name|name
argument_list|)
throw|;
block|}
block|}
else|else
assert|assert
name|si
operator|.
name|getDelCount
argument_list|()
operator|==
literal|0
assert|;
block|}
comment|/**    * Clones the norm bytes.  May be overridden by subclasses.  New and experimental.    * @param bytes Byte array to clone    * @return New BitVector    */
DECL|method|cloneNormBytes
specifier|protected
name|byte
index|[]
name|cloneNormBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|byte
index|[]
name|cloneBytes
init|=
operator|new
name|byte
index|[
name|bytes
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|cloneBytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|cloneBytes
return|;
block|}
comment|/**    * Clones the deleteDocs BitVector.  May be overridden by subclasses. New and experimental.    * @param bv BitVector to clone    * @return New BitVector    */
DECL|method|cloneDeletedDocs
specifier|protected
name|BitVector
name|cloneDeletedDocs
parameter_list|(
name|BitVector
name|bv
parameter_list|)
block|{
return|return
operator|(
name|BitVector
operator|)
name|bv
operator|.
name|clone
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
specifier|final
specifier|synchronized
name|Object
name|clone
parameter_list|()
block|{
try|try
block|{
return|return
name|clone
argument_list|(
name|readOnly
argument_list|)
return|;
comment|// Preserve current readOnly
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
specifier|final
specifier|synchronized
name|IndexReader
name|clone
parameter_list|(
name|boolean
name|openReadOnly
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
return|return
name|reopenSegment
argument_list|(
name|si
argument_list|,
literal|true
argument_list|,
name|openReadOnly
argument_list|)
return|;
block|}
DECL|method|reopenSegment
specifier|synchronized
name|SegmentReader
name|reopenSegment
parameter_list|(
name|SegmentInfo
name|si
parameter_list|,
name|boolean
name|doClone
parameter_list|,
name|boolean
name|openReadOnly
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|boolean
name|deletionsUpToDate
init|=
operator|(
name|this
operator|.
name|si
operator|.
name|hasDeletions
argument_list|()
operator|==
name|si
operator|.
name|hasDeletions
argument_list|()
operator|)
operator|&&
operator|(
operator|!
name|si
operator|.
name|hasDeletions
argument_list|()
operator|||
name|this
operator|.
name|si
operator|.
name|getDelFileName
argument_list|()
operator|.
name|equals
argument_list|(
name|si
operator|.
name|getDelFileName
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|boolean
name|normsUpToDate
init|=
literal|true
decl_stmt|;
name|boolean
index|[]
name|fieldNormsChanged
init|=
operator|new
name|boolean
index|[
name|core
operator|.
name|fieldInfos
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
specifier|final
name|int
name|fieldCount
init|=
name|core
operator|.
name|fieldInfos
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|si
operator|.
name|getNormFileName
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|si
operator|.
name|getNormFileName
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|normsUpToDate
operator|=
literal|false
expr_stmt|;
name|fieldNormsChanged
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// if we're cloning we need to run through the reopenSegment logic
comment|// also if both old and new readers aren't readonly, we clone to avoid sharing modifications
if|if
condition|(
name|normsUpToDate
operator|&&
name|deletionsUpToDate
operator|&&
operator|!
name|doClone
operator|&&
name|openReadOnly
operator|&&
name|readOnly
condition|)
block|{
return|return
name|this
return|;
block|}
comment|// When cloning, the incoming SegmentInfos should not
comment|// have any changes in it:
assert|assert
operator|!
name|doClone
operator|||
operator|(
name|normsUpToDate
operator|&&
name|deletionsUpToDate
operator|)
assert|;
comment|// clone reader
name|SegmentReader
name|clone
init|=
name|openReadOnly
condition|?
operator|new
name|ReadOnlySegmentReader
argument_list|()
else|:
operator|new
name|SegmentReader
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|core
operator|.
name|incRef
argument_list|()
expr_stmt|;
name|clone
operator|.
name|core
operator|=
name|core
expr_stmt|;
name|clone
operator|.
name|readOnly
operator|=
name|openReadOnly
expr_stmt|;
name|clone
operator|.
name|si
operator|=
name|si
expr_stmt|;
name|clone
operator|.
name|readBufferSize
operator|=
name|readBufferSize
expr_stmt|;
name|clone
operator|.
name|pendingDeleteCount
operator|=
name|pendingDeleteCount
expr_stmt|;
if|if
condition|(
operator|!
name|openReadOnly
operator|&&
name|hasChanges
condition|)
block|{
comment|// My pending changes transfer to the new reader
name|clone
operator|.
name|deletedDocsDirty
operator|=
name|deletedDocsDirty
expr_stmt|;
name|clone
operator|.
name|normsDirty
operator|=
name|normsDirty
expr_stmt|;
name|clone
operator|.
name|hasChanges
operator|=
name|hasChanges
expr_stmt|;
name|hasChanges
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|doClone
condition|)
block|{
if|if
condition|(
name|deletedDocs
operator|!=
literal|null
condition|)
block|{
name|deletedDocsRef
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|clone
operator|.
name|deletedDocs
operator|=
name|deletedDocs
expr_stmt|;
name|clone
operator|.
name|deletedDocsRef
operator|=
name|deletedDocsRef
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|deletionsUpToDate
condition|)
block|{
comment|// load deleted docs
assert|assert
name|clone
operator|.
name|deletedDocs
operator|==
literal|null
assert|;
name|clone
operator|.
name|loadDeletedDocs
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deletedDocs
operator|!=
literal|null
condition|)
block|{
name|deletedDocsRef
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|clone
operator|.
name|deletedDocs
operator|=
name|deletedDocs
expr_stmt|;
name|clone
operator|.
name|deletedDocsRef
operator|=
name|deletedDocsRef
expr_stmt|;
block|}
block|}
name|clone
operator|.
name|norms
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Norm
argument_list|>
argument_list|()
expr_stmt|;
comment|// Clone norms
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldNormsChanged
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// Clone unchanged norms to the cloned reader
if|if
condition|(
name|doClone
operator|||
operator|!
name|fieldNormsChanged
index|[
name|i
index|]
condition|)
block|{
specifier|final
name|String
name|curField
init|=
name|core
operator|.
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|i
argument_list|)
operator|.
name|name
decl_stmt|;
name|Norm
name|norm
init|=
name|this
operator|.
name|norms
operator|.
name|get
argument_list|(
name|curField
argument_list|)
decl_stmt|;
if|if
condition|(
name|norm
operator|!=
literal|null
condition|)
name|clone
operator|.
name|norms
operator|.
name|put
argument_list|(
name|curField
argument_list|,
operator|(
name|Norm
operator|)
name|norm
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If we are not cloning, then this will open anew
comment|// any norms that have changed:
name|clone
operator|.
name|openNorms
argument_list|(
name|si
operator|.
name|getUseCompoundFile
argument_list|()
condition|?
name|core
operator|.
name|getCFSReader
argument_list|()
else|:
name|directory
argument_list|()
argument_list|,
name|readBufferSize
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
comment|// An exception occurred during reopen, we have to decRef the norms
comment|// that we incRef'ed already and close singleNormsStream and FieldsReader
name|clone
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|clone
return|;
block|}
annotation|@
name|Override
DECL|method|doCommit
specifier|protected
name|void
name|doCommit
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|commitUserData
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|hasChanges
condition|)
block|{
if|if
condition|(
name|deletedDocsDirty
condition|)
block|{
comment|// re-write deleted
name|si
operator|.
name|advanceDelGen
argument_list|()
expr_stmt|;
comment|// We can write directly to the actual name (vs to a
comment|// .tmp& renaming it) because the file is not live
comment|// until segments file is written:
name|deletedDocs
operator|.
name|write
argument_list|(
name|directory
argument_list|()
argument_list|,
name|si
operator|.
name|getDelFileName
argument_list|()
argument_list|)
expr_stmt|;
name|si
operator|.
name|setDelCount
argument_list|(
name|si
operator|.
name|getDelCount
argument_list|()
operator|+
name|pendingDeleteCount
argument_list|)
expr_stmt|;
name|pendingDeleteCount
operator|=
literal|0
expr_stmt|;
assert|assert
name|deletedDocs
operator|.
name|count
argument_list|()
operator|==
name|si
operator|.
name|getDelCount
argument_list|()
operator|:
literal|"delete count mismatch during commit: info="
operator|+
name|si
operator|.
name|getDelCount
argument_list|()
operator|+
literal|" vs BitVector="
operator|+
name|deletedDocs
operator|.
name|count
argument_list|()
assert|;
block|}
else|else
block|{
assert|assert
name|pendingDeleteCount
operator|==
literal|0
assert|;
block|}
if|if
condition|(
name|normsDirty
condition|)
block|{
comment|// re-write norms
name|si
operator|.
name|setNumFields
argument_list|(
name|core
operator|.
name|fieldInfos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Norm
name|norm
range|:
name|norms
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|norm
operator|.
name|dirty
condition|)
block|{
name|norm
operator|.
name|reWrite
argument_list|(
name|si
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|deletedDocsDirty
operator|=
literal|false
expr_stmt|;
name|normsDirty
operator|=
literal|false
expr_stmt|;
name|hasChanges
operator|=
literal|false
expr_stmt|;
block|}
block|}
DECL|method|getFieldsReader
name|FieldsReader
name|getFieldsReader
parameter_list|()
block|{
return|return
name|fieldsReaderLocal
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|IOException
block|{
name|termVectorsLocal
operator|.
name|close
argument_list|()
expr_stmt|;
name|fieldsReaderLocal
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|deletedDocs
operator|!=
literal|null
condition|)
block|{
name|deletedDocsRef
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
comment|// null so if an app hangs on to us we still free most ram
name|deletedDocs
operator|=
literal|null
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|Norm
name|norm
range|:
name|norms
operator|.
name|values
argument_list|()
control|)
block|{
name|norm
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
name|core
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|hasDeletions
specifier|static
name|boolean
name|hasDeletions
parameter_list|(
name|SegmentInfo
name|si
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Don't call ensureOpen() here (it could affect performance)
return|return
name|si
operator|.
name|hasDeletions
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hasDeletions
specifier|public
name|boolean
name|hasDeletions
parameter_list|()
block|{
comment|// Don't call ensureOpen() here (it could affect performance)
return|return
name|deletedDocs
operator|!=
literal|null
return|;
block|}
DECL|method|usesCompoundFile
specifier|static
name|boolean
name|usesCompoundFile
parameter_list|(
name|SegmentInfo
name|si
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|si
operator|.
name|getUseCompoundFile
argument_list|()
return|;
block|}
DECL|method|hasSeparateNorms
specifier|static
name|boolean
name|hasSeparateNorms
parameter_list|(
name|SegmentInfo
name|si
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|si
operator|.
name|hasSeparateNorms
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|doDelete
specifier|protected
name|void
name|doDelete
parameter_list|(
name|int
name|docNum
parameter_list|)
block|{
if|if
condition|(
name|deletedDocs
operator|==
literal|null
condition|)
block|{
name|deletedDocs
operator|=
operator|new
name|BitVector
argument_list|(
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|deletedDocsRef
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// there is more than 1 SegmentReader with a reference to this
comment|// deletedDocs BitVector so decRef the current deletedDocsRef,
comment|// clone the BitVector, create a new deletedDocsRef
if|if
condition|(
name|deletedDocsRef
operator|.
name|get
argument_list|()
operator|>
literal|1
condition|)
block|{
name|AtomicInteger
name|oldRef
init|=
name|deletedDocsRef
decl_stmt|;
name|deletedDocs
operator|=
name|cloneDeletedDocs
argument_list|(
name|deletedDocs
argument_list|)
expr_stmt|;
name|deletedDocsRef
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|oldRef
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
name|deletedDocsDirty
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|deletedDocs
operator|.
name|getAndSet
argument_list|(
name|docNum
argument_list|)
condition|)
name|pendingDeleteCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doUndeleteAll
specifier|protected
name|void
name|doUndeleteAll
parameter_list|()
block|{
name|deletedDocsDirty
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|deletedDocs
operator|!=
literal|null
condition|)
block|{
assert|assert
name|deletedDocsRef
operator|!=
literal|null
assert|;
name|deletedDocsRef
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
name|deletedDocs
operator|=
literal|null
expr_stmt|;
name|deletedDocsRef
operator|=
literal|null
expr_stmt|;
name|pendingDeleteCount
operator|=
literal|0
expr_stmt|;
name|si
operator|.
name|clearDelGen
argument_list|()
expr_stmt|;
name|si
operator|.
name|setDelCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|deletedDocsRef
operator|==
literal|null
assert|;
assert|assert
name|pendingDeleteCount
operator|==
literal|0
assert|;
block|}
block|}
DECL|method|files
name|List
argument_list|<
name|String
argument_list|>
name|files
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|si
operator|.
name|files
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|terms
specifier|public
name|TermEnum
name|terms
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|core
operator|.
name|isPreFlex
condition|)
block|{
comment|// For old API on an old segment, instead of
comment|// converting old API -> new API -> old API, just give
comment|// direct access to old:
return|return
operator|(
operator|(
name|PreFlexFields
operator|)
name|core
operator|.
name|fields
operator|)
operator|.
name|tis
operator|.
name|terms
argument_list|()
return|;
block|}
else|else
block|{
comment|// Emulate pre-flex API on top of flex index
return|return
operator|new
name|LegacyTermEnum
argument_list|(
literal|null
argument_list|)
return|;
block|}
block|}
comment|/** @deprecated Please switch to the flex API ({@link    * #fields}) instead. */
annotation|@
name|Deprecated
annotation|@
name|Override
DECL|method|terms
specifier|public
name|TermEnum
name|terms
parameter_list|(
name|Term
name|t
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|core
operator|.
name|isPreFlex
condition|)
block|{
comment|// For old API on an old segment, instead of
comment|// converting old API -> new API -> old API, just give
comment|// direct access to old:
return|return
operator|(
operator|(
name|PreFlexFields
operator|)
name|core
operator|.
name|fields
operator|)
operator|.
name|tis
operator|.
name|terms
argument_list|(
name|t
argument_list|)
return|;
block|}
else|else
block|{
comment|// Emulate pre-flex API on top of flex index
return|return
operator|new
name|LegacyTermEnum
argument_list|(
name|t
argument_list|)
return|;
block|}
block|}
DECL|method|fieldInfos
name|FieldInfos
name|fieldInfos
parameter_list|()
block|{
return|return
name|core
operator|.
name|fieldInfos
return|;
block|}
annotation|@
name|Override
DECL|method|document
specifier|public
name|Document
name|document
parameter_list|(
name|int
name|n
parameter_list|,
name|FieldSelector
name|fieldSelector
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|getFieldsReader
argument_list|()
operator|.
name|doc
argument_list|(
name|n
argument_list|,
name|fieldSelector
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isDeleted
specifier|public
specifier|synchronized
name|boolean
name|isDeleted
parameter_list|(
name|int
name|n
parameter_list|)
block|{
return|return
operator|(
name|deletedDocs
operator|!=
literal|null
operator|&&
name|deletedDocs
operator|.
name|get
argument_list|(
name|n
argument_list|)
operator|)
return|;
block|}
comment|/** @deprecated Switch to the flex API ({@link    * IndexReader#termDocsEnum}) instead. */
annotation|@
name|Deprecated
annotation|@
name|Override
DECL|method|termDocs
specifier|public
name|TermDocs
name|termDocs
parameter_list|(
name|Term
name|term
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|AllTermDocs
argument_list|(
name|this
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|termDocs
argument_list|(
name|term
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|fields
specifier|public
name|Fields
name|fields
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|core
operator|.
name|fields
return|;
block|}
comment|/** @deprecated Switch to the flex API {@link    *  IndexReader#termDocsEnum} instead. */
annotation|@
name|Deprecated
annotation|@
name|Override
DECL|method|termDocs
specifier|public
name|TermDocs
name|termDocs
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|core
operator|.
name|isPreFlex
condition|)
block|{
comment|// For old API on an old segment, instead of
comment|// converting old API -> new API -> old API, just give
comment|// direct access to old:
specifier|final
name|PreFlexFields
name|pre
init|=
operator|(
name|PreFlexFields
operator|)
name|core
operator|.
name|fields
decl_stmt|;
name|SegmentTermDocs
name|std
init|=
operator|new
name|SegmentTermDocs
argument_list|(
name|pre
operator|.
name|freqStream
argument_list|,
name|pre
operator|.
name|tis
argument_list|,
name|core
operator|.
name|fieldInfos
argument_list|)
decl_stmt|;
name|std
operator|.
name|setSkipDocs
argument_list|(
name|deletedDocs
argument_list|)
expr_stmt|;
return|return
name|std
return|;
block|}
else|else
block|{
comment|// Emulate old API
return|return
operator|new
name|LegacyTermDocs
argument_list|()
return|;
block|}
block|}
comment|/** @deprecated Switch to the flex API {@link    *  IndexReader#termDocsEnum} instead */
annotation|@
name|Deprecated
annotation|@
name|Override
DECL|method|termPositions
specifier|public
name|TermPositions
name|termPositions
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|core
operator|.
name|isPreFlex
condition|)
block|{
comment|// For old API on an old segment, instead of
comment|// converting old API -> new API -> old API, just give
comment|// direct access to old:
specifier|final
name|PreFlexFields
name|pre
init|=
operator|(
name|PreFlexFields
operator|)
name|core
operator|.
name|fields
decl_stmt|;
name|SegmentTermPositions
name|stp
init|=
operator|new
name|SegmentTermPositions
argument_list|(
name|pre
operator|.
name|freqStream
argument_list|,
name|pre
operator|.
name|proxStream
argument_list|,
name|pre
operator|.
name|tis
argument_list|,
name|core
operator|.
name|fieldInfos
argument_list|)
decl_stmt|;
name|stp
operator|.
name|setSkipDocs
argument_list|(
name|deletedDocs
argument_list|)
expr_stmt|;
return|return
name|stp
return|;
block|}
else|else
block|{
comment|// Emulate old API
return|return
operator|new
name|LegacyTermPositions
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|docFreq
specifier|public
name|int
name|docFreq
parameter_list|(
name|Term
name|t
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|Terms
name|terms
init|=
name|core
operator|.
name|fields
operator|.
name|terms
argument_list|(
name|t
operator|.
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
return|return
name|terms
operator|.
name|docFreq
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|t
operator|.
name|text
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|docFreq
specifier|public
name|int
name|docFreq
parameter_list|(
name|String
name|field
parameter_list|,
name|BytesRef
name|term
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|Terms
name|terms
init|=
name|core
operator|.
name|fields
operator|.
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
return|return
name|terms
operator|.
name|docFreq
argument_list|(
name|term
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|numDocs
specifier|public
name|int
name|numDocs
parameter_list|()
block|{
comment|// Don't call ensureOpen() here (it could affect performance)
name|int
name|n
init|=
name|maxDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|deletedDocs
operator|!=
literal|null
condition|)
name|n
operator|-=
name|deletedDocs
operator|.
name|count
argument_list|()
expr_stmt|;
return|return
name|n
return|;
block|}
annotation|@
name|Override
DECL|method|maxDoc
specifier|public
name|int
name|maxDoc
parameter_list|()
block|{
comment|// Don't call ensureOpen() here (it could affect performance)
return|return
name|si
operator|.
name|docCount
return|;
block|}
comment|/**    * @see IndexReader#getFieldNames(org.apache.lucene.index.IndexReader.FieldOption)    */
annotation|@
name|Override
DECL|method|getFieldNames
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getFieldNames
parameter_list|(
name|IndexReader
operator|.
name|FieldOption
name|fieldOption
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|fieldSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|core
operator|.
name|fieldInfos
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FieldInfo
name|fi
init|=
name|core
operator|.
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|ALL
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|fi
operator|.
name|isIndexed
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|UNINDEXED
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fi
operator|.
name|omitTermFreqAndPositions
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|OMIT_TERM_FREQ_AND_POSITIONS
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fi
operator|.
name|storePayloads
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|STORES_PAYLOADS
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fi
operator|.
name|isIndexed
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|INDEXED
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fi
operator|.
name|isIndexed
operator|&&
name|fi
operator|.
name|storeTermVector
operator|==
literal|false
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|INDEXED_NO_TERMVECTOR
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fi
operator|.
name|storeTermVector
operator|==
literal|true
operator|&&
name|fi
operator|.
name|storePositionWithTermVector
operator|==
literal|false
operator|&&
name|fi
operator|.
name|storeOffsetWithTermVector
operator|==
literal|false
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|TERMVECTOR
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fi
operator|.
name|isIndexed
operator|&&
name|fi
operator|.
name|storeTermVector
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|INDEXED_WITH_TERMVECTOR
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fi
operator|.
name|storePositionWithTermVector
operator|&&
name|fi
operator|.
name|storeOffsetWithTermVector
operator|==
literal|false
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|TERMVECTOR_WITH_POSITION
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fi
operator|.
name|storeOffsetWithTermVector
operator|&&
name|fi
operator|.
name|storePositionWithTermVector
operator|==
literal|false
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|TERMVECTOR_WITH_OFFSET
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|fi
operator|.
name|storeOffsetWithTermVector
operator|&&
name|fi
operator|.
name|storePositionWithTermVector
operator|)
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|TERMVECTOR_WITH_POSITION_OFFSET
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fieldSet
return|;
block|}
annotation|@
name|Override
DECL|method|hasNorms
specifier|public
specifier|synchronized
name|boolean
name|hasNorms
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|norms
operator|.
name|containsKey
argument_list|(
name|field
argument_list|)
return|;
block|}
comment|// can return null if norms aren't stored
DECL|method|getNorms
specifier|protected
specifier|synchronized
name|byte
index|[]
name|getNorms
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|Norm
name|norm
init|=
name|norms
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|norm
operator|==
literal|null
condition|)
return|return
literal|null
return|;
comment|// not indexed, or norms not stored
return|return
name|norm
operator|.
name|bytes
argument_list|()
return|;
block|}
comment|// returns fake norms if norms aren't available
annotation|@
name|Override
DECL|method|norms
specifier|public
specifier|synchronized
name|byte
index|[]
name|norms
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|getNorms
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
name|bytes
return|;
block|}
annotation|@
name|Override
DECL|method|doSetNorm
specifier|protected
name|void
name|doSetNorm
parameter_list|(
name|int
name|doc
parameter_list|,
name|String
name|field
parameter_list|,
name|byte
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|Norm
name|norm
init|=
name|norms
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|norm
operator|==
literal|null
condition|)
comment|// not an indexed field
return|return;
name|normsDirty
operator|=
literal|true
expr_stmt|;
name|norm
operator|.
name|copyOnWrite
argument_list|()
index|[
name|doc
index|]
operator|=
name|value
expr_stmt|;
comment|// set the value
block|}
comment|/** Read norms into a pre-allocated array. */
annotation|@
name|Override
DECL|method|norms
specifier|public
specifier|synchronized
name|void
name|norms
parameter_list|(
name|String
name|field
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|Norm
name|norm
init|=
name|norms
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|norm
operator|==
literal|null
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
name|Similarity
operator|.
name|getDefault
argument_list|()
operator|.
name|encodeNormValue
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|norm
operator|.
name|bytes
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|openNorms
specifier|private
name|void
name|openNorms
parameter_list|(
name|Directory
name|cfsDir
parameter_list|,
name|int
name|readBufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|nextNormSeek
init|=
name|SegmentMerger
operator|.
name|NORMS_HEADER
operator|.
name|length
decl_stmt|;
comment|//skip header (header unused for now)
name|int
name|maxDoc
init|=
name|maxDoc
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|core
operator|.
name|fieldInfos
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FieldInfo
name|fi
init|=
name|core
operator|.
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|norms
operator|.
name|containsKey
argument_list|(
name|fi
operator|.
name|name
argument_list|)
condition|)
block|{
comment|// in case this SegmentReader is being re-opened, we might be able to
comment|// reuse some norm instances and skip loading them here
continue|continue;
block|}
if|if
condition|(
name|fi
operator|.
name|isIndexed
operator|&&
operator|!
name|fi
operator|.
name|omitNorms
condition|)
block|{
name|Directory
name|d
init|=
name|directory
argument_list|()
decl_stmt|;
name|String
name|fileName
init|=
name|si
operator|.
name|getNormFileName
argument_list|(
name|fi
operator|.
name|number
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|si
operator|.
name|hasSeparateNorms
argument_list|(
name|fi
operator|.
name|number
argument_list|)
condition|)
block|{
name|d
operator|=
name|cfsDir
expr_stmt|;
block|}
comment|// singleNormFile means multiple norms share this file
name|boolean
name|singleNormFile
init|=
name|IndexFileNames
operator|.
name|matchesExtension
argument_list|(
name|fileName
argument_list|,
name|IndexFileNames
operator|.
name|NORMS_EXTENSION
argument_list|)
decl_stmt|;
name|IndexInput
name|normInput
init|=
literal|null
decl_stmt|;
name|long
name|normSeek
decl_stmt|;
if|if
condition|(
name|singleNormFile
condition|)
block|{
name|normSeek
operator|=
name|nextNormSeek
expr_stmt|;
if|if
condition|(
name|singleNormStream
operator|==
literal|null
condition|)
block|{
name|singleNormStream
operator|=
name|d
operator|.
name|openInput
argument_list|(
name|fileName
argument_list|,
name|readBufferSize
argument_list|)
expr_stmt|;
name|singleNormRef
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|singleNormRef
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
comment|// All norms in the .nrm file can share a single IndexInput since
comment|// they are only used in a synchronized context.
comment|// If this were to change in the future, a clone could be done here.
name|normInput
operator|=
name|singleNormStream
expr_stmt|;
block|}
else|else
block|{
name|normSeek
operator|=
literal|0
expr_stmt|;
name|normInput
operator|=
name|d
operator|.
name|openInput
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
name|norms
operator|.
name|put
argument_list|(
name|fi
operator|.
name|name
argument_list|,
operator|new
name|Norm
argument_list|(
name|normInput
argument_list|,
name|fi
operator|.
name|number
argument_list|,
name|normSeek
argument_list|)
argument_list|)
expr_stmt|;
name|nextNormSeek
operator|+=
name|maxDoc
expr_stmt|;
comment|// increment also if some norms are separate
block|}
block|}
block|}
comment|// NOTE: only called from IndexWriter when a near
comment|// real-time reader is opened, or applyDeletes is run,
comment|// sharing a segment that's still being merged.  This
comment|// method is not thread safe, and relies on the
comment|// synchronization in IndexWriter
DECL|method|loadTermsIndex
name|void
name|loadTermsIndex
parameter_list|(
name|int
name|indexDivisor
parameter_list|)
throws|throws
name|IOException
block|{
name|core
operator|.
name|fields
operator|.
name|loadTermsIndex
argument_list|(
name|indexDivisor
argument_list|)
expr_stmt|;
block|}
comment|// for testing only
DECL|method|normsClosed
name|boolean
name|normsClosed
parameter_list|()
block|{
if|if
condition|(
name|singleNormStream
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
specifier|final
name|Norm
name|norm
range|:
name|norms
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|norm
operator|.
name|refCount
operator|>
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|// for testing only
DECL|method|normsClosed
name|boolean
name|normsClosed
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
name|norms
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|refCount
operator|==
literal|0
return|;
block|}
comment|/**    * Create a clone from the initial TermVectorsReader and store it in the ThreadLocal.    * @return TermVectorsReader    */
DECL|method|getTermVectorsReader
name|TermVectorsReader
name|getTermVectorsReader
parameter_list|()
block|{
name|TermVectorsReader
name|tvReader
init|=
name|termVectorsLocal
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|tvReader
operator|==
literal|null
condition|)
block|{
name|TermVectorsReader
name|orig
init|=
name|core
operator|.
name|getTermVectorsReaderOrig
argument_list|()
decl_stmt|;
if|if
condition|(
name|orig
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
try|try
block|{
name|tvReader
operator|=
operator|(
name|TermVectorsReader
operator|)
name|orig
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|cnse
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
name|termVectorsLocal
operator|.
name|set
argument_list|(
name|tvReader
argument_list|)
expr_stmt|;
block|}
return|return
name|tvReader
return|;
block|}
DECL|method|getTermVectorsReaderOrig
name|TermVectorsReader
name|getTermVectorsReaderOrig
parameter_list|()
block|{
return|return
name|core
operator|.
name|getTermVectorsReaderOrig
argument_list|()
return|;
block|}
comment|/** Return a term frequency vector for the specified document and field. The    *  vector returned contains term numbers and frequencies for all terms in    *  the specified field of this document, if the field had storeTermVector    *  flag set.  If the flag was not set, the method returns null.    * @throws IOException    */
annotation|@
name|Override
DECL|method|getTermFreqVector
specifier|public
name|TermFreqVector
name|getTermFreqVector
parameter_list|(
name|int
name|docNumber
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check if this field is invalid or has no stored term vector
name|ensureOpen
argument_list|()
expr_stmt|;
name|FieldInfo
name|fi
init|=
name|core
operator|.
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|==
literal|null
operator|||
operator|!
name|fi
operator|.
name|storeTermVector
condition|)
return|return
literal|null
return|;
name|TermVectorsReader
name|termVectorsReader
init|=
name|getTermVectorsReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|termVectorsReader
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|termVectorsReader
operator|.
name|get
argument_list|(
name|docNumber
argument_list|,
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getTermFreqVector
specifier|public
name|void
name|getTermFreqVector
parameter_list|(
name|int
name|docNumber
parameter_list|,
name|String
name|field
parameter_list|,
name|TermVectorMapper
name|mapper
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|FieldInfo
name|fi
init|=
name|core
operator|.
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|==
literal|null
operator|||
operator|!
name|fi
operator|.
name|storeTermVector
condition|)
return|return;
name|TermVectorsReader
name|termVectorsReader
init|=
name|getTermVectorsReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|termVectorsReader
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|termVectorsReader
operator|.
name|get
argument_list|(
name|docNumber
argument_list|,
name|field
argument_list|,
name|mapper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTermFreqVector
specifier|public
name|void
name|getTermFreqVector
parameter_list|(
name|int
name|docNumber
parameter_list|,
name|TermVectorMapper
name|mapper
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|TermVectorsReader
name|termVectorsReader
init|=
name|getTermVectorsReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|termVectorsReader
operator|==
literal|null
condition|)
return|return;
name|termVectorsReader
operator|.
name|get
argument_list|(
name|docNumber
argument_list|,
name|mapper
argument_list|)
expr_stmt|;
block|}
comment|/** Return an array of term frequency vectors for the specified document.    *  The array contains a vector for each vectorized field in the document.    *  Each vector vector contains term numbers and frequencies for all terms    *  in a given vectorized field.    *  If no such fields existed, the method returns null.    * @throws IOException    */
annotation|@
name|Override
DECL|method|getTermFreqVectors
specifier|public
name|TermFreqVector
index|[]
name|getTermFreqVectors
parameter_list|(
name|int
name|docNumber
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|TermVectorsReader
name|termVectorsReader
init|=
name|getTermVectorsReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|termVectorsReader
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|termVectorsReader
operator|.
name|get
argument_list|(
name|docNumber
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasChanges
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|si
operator|.
name|toString
argument_list|(
name|core
operator|.
name|dir
argument_list|,
name|pendingDeleteCount
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Return the name of the segment this reader is reading.    */
DECL|method|getSegmentName
specifier|public
name|String
name|getSegmentName
parameter_list|()
block|{
return|return
name|core
operator|.
name|segment
return|;
block|}
comment|/**    * Return the SegmentInfo of the segment this reader is reading.    */
DECL|method|getSegmentInfo
name|SegmentInfo
name|getSegmentInfo
parameter_list|()
block|{
return|return
name|si
return|;
block|}
DECL|method|setSegmentInfo
name|void
name|setSegmentInfo
parameter_list|(
name|SegmentInfo
name|info
parameter_list|)
block|{
name|si
operator|=
name|info
expr_stmt|;
block|}
DECL|method|startCommit
name|void
name|startCommit
parameter_list|()
block|{
name|rollbackHasChanges
operator|=
name|hasChanges
expr_stmt|;
name|rollbackDeletedDocsDirty
operator|=
name|deletedDocsDirty
expr_stmt|;
name|rollbackNormsDirty
operator|=
name|normsDirty
expr_stmt|;
name|rollbackPendingDeleteCount
operator|=
name|pendingDeleteCount
expr_stmt|;
for|for
control|(
name|Norm
name|norm
range|:
name|norms
operator|.
name|values
argument_list|()
control|)
block|{
name|norm
operator|.
name|rollbackDirty
operator|=
name|norm
operator|.
name|dirty
expr_stmt|;
block|}
block|}
DECL|method|rollbackCommit
name|void
name|rollbackCommit
parameter_list|()
block|{
name|hasChanges
operator|=
name|rollbackHasChanges
expr_stmt|;
name|deletedDocsDirty
operator|=
name|rollbackDeletedDocsDirty
expr_stmt|;
name|normsDirty
operator|=
name|rollbackNormsDirty
expr_stmt|;
name|pendingDeleteCount
operator|=
name|rollbackPendingDeleteCount
expr_stmt|;
for|for
control|(
name|Norm
name|norm
range|:
name|norms
operator|.
name|values
argument_list|()
control|)
block|{
name|norm
operator|.
name|dirty
operator|=
name|norm
operator|.
name|rollbackDirty
expr_stmt|;
block|}
block|}
comment|/** Returns the directory this index resides in. */
annotation|@
name|Override
DECL|method|directory
specifier|public
name|Directory
name|directory
parameter_list|()
block|{
comment|// Don't ensureOpen here -- in certain cases, when a
comment|// cloned/reopened reader needs to commit, it may call
comment|// this method on the closed original reader
return|return
name|core
operator|.
name|dir
return|;
block|}
comment|// This is necessary so that cloned SegmentReaders (which
comment|// share the underlying postings data) will map to the
comment|// same entry in the FieldCache.  See LUCENE-1579.
annotation|@
name|Override
DECL|method|getFieldCacheKey
specifier|public
specifier|final
name|Object
name|getFieldCacheKey
parameter_list|()
block|{
return|return
name|core
return|;
block|}
comment|/**    * Lotsa tests did hacks like:<br/>    * SegmentReader reader = (SegmentReader) IndexReader.open(dir);<br/>    * They broke. This method serves as a hack to keep hacks working    * We do it with R/W access for the tests (BW compatibility)    * @deprecated Remove this when tests are fixed!    */
annotation|@
name|Deprecated
DECL|method|getOnlySegmentReader
specifier|static
name|SegmentReader
name|getOnlySegmentReader
parameter_list|(
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getOnlySegmentReader
argument_list|(
name|IndexReader
operator|.
name|open
argument_list|(
name|dir
argument_list|,
literal|false
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getOnlySegmentReader
specifier|static
name|SegmentReader
name|getOnlySegmentReader
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
block|{
if|if
condition|(
name|reader
operator|instanceof
name|SegmentReader
condition|)
return|return
operator|(
name|SegmentReader
operator|)
name|reader
return|;
if|if
condition|(
name|reader
operator|instanceof
name|DirectoryReader
condition|)
block|{
name|IndexReader
index|[]
name|subReaders
init|=
name|reader
operator|.
name|getSequentialSubReaders
argument_list|()
decl_stmt|;
if|if
condition|(
name|subReaders
operator|.
name|length
operator|!=
literal|1
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|reader
operator|+
literal|" has "
operator|+
name|subReaders
operator|.
name|length
operator|+
literal|" segments instead of exactly one"
argument_list|)
throw|;
return|return
operator|(
name|SegmentReader
operator|)
name|subReaders
index|[
literal|0
index|]
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|reader
operator|+
literal|" is not a SegmentReader or a single-segment DirectoryReader"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getTermInfosIndexDivisor
specifier|public
name|int
name|getTermInfosIndexDivisor
parameter_list|()
block|{
return|return
name|core
operator|.
name|termsIndexDivisor
return|;
block|}
comment|// Back compat: pre-flex TermEnum API over flex API
annotation|@
name|Deprecated
DECL|class|LegacyTermEnum
specifier|final
specifier|private
class|class
name|LegacyTermEnum
extends|extends
name|TermEnum
block|{
DECL|field|fields
name|FieldsEnum
name|fields
decl_stmt|;
DECL|field|terms
name|TermsEnum
name|terms
decl_stmt|;
DECL|field|done
name|boolean
name|done
decl_stmt|;
DECL|field|currentField
name|String
name|currentField
decl_stmt|;
DECL|field|currentTerm
name|BytesRef
name|currentTerm
decl_stmt|;
DECL|method|LegacyTermEnum
specifier|public
name|LegacyTermEnum
parameter_list|(
name|Term
name|t
parameter_list|)
throws|throws
name|IOException
block|{
name|fields
operator|=
name|core
operator|.
name|fields
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|currentField
operator|=
name|fields
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentField
operator|==
literal|null
condition|)
block|{
comment|// no fields
name|done
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
comment|// Pre-seek to this term
while|while
condition|(
name|currentField
operator|.
name|compareTo
argument_list|(
name|t
operator|.
name|field
argument_list|)
operator|<
literal|0
condition|)
block|{
name|currentField
operator|=
name|fields
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentField
operator|==
literal|null
condition|)
block|{
comment|// Hit end of fields
name|done
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|done
condition|)
block|{
comment|// We found some field -- get its terms:
name|terms
operator|=
name|fields
operator|.
name|terms
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentField
operator|==
name|t
operator|.
name|field
condition|)
block|{
comment|// We found exactly the requested field; now
comment|// seek the term text:
name|String
name|text
init|=
name|t
operator|.
name|text
argument_list|()
decl_stmt|;
comment|// this is only for backwards compatibility.
comment|// previously you could supply a term with unpaired surrogates,
comment|// and it would return the next Term.
comment|// if someone does this, tack on the lowest possible trail surrogate.
comment|// this emulates the old behavior, and forms "valid UTF-8" unicode.
name|BytesRef
name|tr
init|=
operator|new
name|BytesRef
argument_list|(
name|UnicodeUtil
operator|.
name|nextValidUTF16String
argument_list|(
name|text
argument_list|)
argument_list|)
decl_stmt|;
name|TermsEnum
operator|.
name|SeekStatus
name|status
init|=
name|terms
operator|.
name|seek
argument_list|(
name|tr
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|END
condition|)
block|{
comment|// Rollover to the next field
name|terms
operator|=
literal|null
expr_stmt|;
name|next
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|==
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|FOUND
condition|)
block|{
comment|// Found exactly the term
name|currentTerm
operator|=
name|tr
expr_stmt|;
block|}
else|else
block|{
comment|// Found another term, in this same field
name|currentTerm
operator|=
name|terms
operator|.
name|term
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// We didn't find exact field (we found the
comment|// following field); advance to first term in
comment|// this field
name|next
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|terms
operator|=
name|fields
operator|.
name|terms
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|boolean
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|done
condition|)
block|{
return|return
literal|false
return|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|terms
operator|==
literal|null
condition|)
block|{
comment|// Advance to the next field
name|currentField
operator|=
name|fields
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentField
operator|==
literal|null
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
name|terms
operator|=
name|fields
operator|.
name|terms
argument_list|()
expr_stmt|;
block|}
name|currentTerm
operator|=
name|terms
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentTerm
operator|!=
literal|null
condition|)
block|{
comment|// This field still has terms
return|return
literal|true
return|;
block|}
else|else
block|{
comment|// Done producing terms from this field; advance
comment|// to next field
name|terms
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|term
specifier|public
name|Term
name|term
parameter_list|()
block|{
if|if
condition|(
operator|!
name|done
operator|&&
name|terms
operator|!=
literal|null
operator|&&
name|currentTerm
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Term
argument_list|(
name|currentField
argument_list|,
name|currentTerm
operator|.
name|utf8ToString
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|docFreq
specifier|public
name|int
name|docFreq
parameter_list|()
block|{
return|return
name|terms
operator|==
literal|null
condition|?
literal|0
else|:
name|terms
operator|.
name|docFreq
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{}
block|}
comment|// Back compat: emulates legacy TermDocs API on top of
comment|// flex API
DECL|class|LegacyTermDocs
specifier|private
class|class
name|LegacyTermDocs
implements|implements
name|TermDocs
block|{
DECL|field|currentField
name|String
name|currentField
decl_stmt|;
DECL|field|fields
specifier|final
name|Fields
name|fields
decl_stmt|;
DECL|field|terms
name|TermsEnum
name|terms
decl_stmt|;
DECL|field|docsEnum
name|DocsEnum
name|docsEnum
decl_stmt|;
DECL|field|any
name|boolean
name|any
decl_stmt|;
DECL|method|LegacyTermDocs
name|LegacyTermDocs
parameter_list|()
throws|throws
name|IOException
block|{
name|fields
operator|=
name|core
operator|.
name|fields
expr_stmt|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{}
DECL|method|seek
specifier|public
name|void
name|seek
parameter_list|(
name|TermEnum
name|termEnum
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|termEnum
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|skipTo
specifier|public
name|boolean
name|skipTo
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|any
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|docsEnum
operator|.
name|advance
argument_list|(
name|target
argument_list|)
operator|!=
name|docsEnum
operator|.
name|NO_MORE_DOCS
return|;
block|}
block|}
DECL|method|seek
specifier|public
name|void
name|seek
parameter_list|(
name|Term
name|term
parameter_list|)
throws|throws
name|IOException
block|{
name|any
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
operator|&&
operator|!
name|term
operator|.
name|field
operator|.
name|equals
argument_list|(
name|currentField
argument_list|)
condition|)
block|{
comment|// new field
name|terms
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|terms
operator|==
literal|null
condition|)
block|{
name|currentField
operator|=
name|term
operator|.
name|field
expr_stmt|;
name|Terms
name|terms1
init|=
name|fields
operator|.
name|terms
argument_list|(
name|currentField
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms1
operator|==
literal|null
condition|)
block|{
comment|// no such field
return|return;
block|}
else|else
block|{
name|terms
operator|=
name|terms1
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|terms
operator|.
name|seek
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|term
operator|.
name|text
argument_list|)
argument_list|)
operator|==
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|FOUND
condition|)
block|{
comment|// Term exists
name|any
operator|=
literal|true
expr_stmt|;
name|pendingBulkResult
operator|=
literal|null
expr_stmt|;
name|docsEnum
operator|=
name|terms
operator|.
name|docs
argument_list|(
name|deletedDocs
argument_list|,
name|docsEnum
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doc
specifier|public
name|int
name|doc
parameter_list|()
block|{
if|if
condition|(
operator|!
name|any
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|docsEnum
operator|.
name|docID
argument_list|()
return|;
block|}
block|}
DECL|field|pendingBulkResult
specifier|private
name|DocsEnum
operator|.
name|BulkReadResult
name|pendingBulkResult
decl_stmt|;
DECL|field|bulkCount
specifier|private
name|int
name|bulkCount
decl_stmt|;
DECL|field|pendingBulk
specifier|private
name|int
name|pendingBulk
decl_stmt|;
DECL|method|read
specifier|public
name|int
name|read
parameter_list|(
name|int
index|[]
name|docs
parameter_list|,
name|int
index|[]
name|freqs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|any
operator|&&
name|pendingBulkResult
operator|==
literal|null
condition|)
block|{
name|pendingBulkResult
operator|=
name|docsEnum
operator|.
name|getBulkResult
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|any
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|pendingBulk
operator|>
literal|0
condition|)
block|{
specifier|final
name|int
name|left
init|=
name|bulkCount
operator|-
name|pendingBulk
decl_stmt|;
if|if
condition|(
name|docs
operator|.
name|length
operator|>=
name|left
condition|)
block|{
comment|// read all pending
name|System
operator|.
name|arraycopy
argument_list|(
name|pendingBulkResult
operator|.
name|docs
operator|.
name|ints
argument_list|,
name|pendingBulk
argument_list|,
name|docs
argument_list|,
literal|0
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|pendingBulkResult
operator|.
name|freqs
operator|.
name|ints
argument_list|,
name|pendingBulk
argument_list|,
name|freqs
argument_list|,
literal|0
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|pendingBulk
operator|=
literal|0
expr_stmt|;
return|return
name|left
return|;
block|}
else|else
block|{
comment|// read only part of pending
name|System
operator|.
name|arraycopy
argument_list|(
name|pendingBulkResult
operator|.
name|docs
operator|.
name|ints
argument_list|,
name|pendingBulk
argument_list|,
name|docs
argument_list|,
literal|0
argument_list|,
name|docs
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|pendingBulkResult
operator|.
name|freqs
operator|.
name|ints
argument_list|,
name|pendingBulk
argument_list|,
name|freqs
argument_list|,
literal|0
argument_list|,
name|docs
operator|.
name|length
argument_list|)
expr_stmt|;
name|pendingBulk
operator|+=
name|docs
operator|.
name|length
expr_stmt|;
return|return
name|docs
operator|.
name|length
return|;
block|}
block|}
else|else
block|{
comment|// nothing pending
name|bulkCount
operator|=
name|docsEnum
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|docs
operator|.
name|length
operator|>=
name|bulkCount
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|pendingBulkResult
operator|.
name|docs
operator|.
name|ints
argument_list|,
literal|0
argument_list|,
name|docs
argument_list|,
literal|0
argument_list|,
name|bulkCount
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|pendingBulkResult
operator|.
name|freqs
operator|.
name|ints
argument_list|,
literal|0
argument_list|,
name|freqs
argument_list|,
literal|0
argument_list|,
name|bulkCount
argument_list|)
expr_stmt|;
return|return
name|bulkCount
return|;
block|}
else|else
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|pendingBulkResult
operator|.
name|docs
operator|.
name|ints
argument_list|,
literal|0
argument_list|,
name|docs
argument_list|,
literal|0
argument_list|,
name|docs
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|pendingBulkResult
operator|.
name|freqs
operator|.
name|ints
argument_list|,
literal|0
argument_list|,
name|freqs
argument_list|,
literal|0
argument_list|,
name|docs
operator|.
name|length
argument_list|)
expr_stmt|;
name|pendingBulk
operator|=
name|docs
operator|.
name|length
expr_stmt|;
return|return
name|docs
operator|.
name|length
return|;
block|}
block|}
block|}
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
block|{
if|if
condition|(
operator|!
name|any
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|docsEnum
operator|.
name|freq
argument_list|()
return|;
block|}
block|}
DECL|method|next
specifier|public
name|boolean
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|any
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|docsEnum
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocsEnum
operator|.
name|NO_MORE_DOCS
return|;
block|}
block|}
block|}
comment|// Back compat: implements legacy TermPositions API on top
comment|// of flex API
DECL|class|LegacyTermPositions
specifier|final
specifier|private
class|class
name|LegacyTermPositions
implements|implements
name|TermPositions
block|{
DECL|field|currentField
name|String
name|currentField
decl_stmt|;
DECL|field|fields
specifier|final
name|Fields
name|fields
decl_stmt|;
DECL|field|terms
name|TermsEnum
name|terms
decl_stmt|;
DECL|field|postingsEnum
name|DocsAndPositionsEnum
name|postingsEnum
decl_stmt|;
DECL|field|docsEnum
name|DocsEnum
name|docsEnum
decl_stmt|;
DECL|field|any
name|boolean
name|any
decl_stmt|;
DECL|method|LegacyTermPositions
name|LegacyTermPositions
parameter_list|()
throws|throws
name|IOException
block|{
name|fields
operator|=
name|core
operator|.
name|fields
expr_stmt|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{}
DECL|method|seek
specifier|public
name|void
name|seek
parameter_list|(
name|TermEnum
name|termEnum
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|termEnum
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|skipTo
specifier|public
name|boolean
name|skipTo
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|any
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|docsEnum
operator|.
name|advance
argument_list|(
name|target
argument_list|)
operator|!=
name|docsEnum
operator|.
name|NO_MORE_DOCS
return|;
block|}
block|}
DECL|method|seek
specifier|public
name|void
name|seek
parameter_list|(
name|Term
name|term
parameter_list|)
throws|throws
name|IOException
block|{
name|any
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
operator|&&
operator|!
name|term
operator|.
name|field
operator|.
name|equals
argument_list|(
name|currentField
argument_list|)
condition|)
block|{
comment|// new field
name|terms
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|terms
operator|==
literal|null
condition|)
block|{
name|currentField
operator|=
name|term
operator|.
name|field
expr_stmt|;
name|Terms
name|terms1
init|=
name|fields
operator|.
name|terms
argument_list|(
name|currentField
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms1
operator|==
literal|null
condition|)
block|{
comment|// no such field
return|return;
block|}
else|else
block|{
name|terms
operator|=
name|terms1
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|terms
operator|.
name|seek
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|term
operator|.
name|text
argument_list|)
argument_list|)
operator|==
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|FOUND
condition|)
block|{
comment|// Term exists
name|any
operator|=
literal|true
expr_stmt|;
name|postingsEnum
operator|=
name|terms
operator|.
name|docsAndPositions
argument_list|(
name|deletedDocs
argument_list|,
name|postingsEnum
argument_list|)
expr_stmt|;
if|if
condition|(
name|postingsEnum
operator|==
literal|null
condition|)
block|{
name|docsEnum
operator|=
name|terms
operator|.
name|docs
argument_list|(
name|deletedDocs
argument_list|,
name|postingsEnum
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docsEnum
operator|=
name|postingsEnum
expr_stmt|;
block|}
block|}
block|}
DECL|method|doc
specifier|public
name|int
name|doc
parameter_list|()
block|{
if|if
condition|(
operator|!
name|any
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|docsEnum
operator|.
name|docID
argument_list|()
return|;
block|}
block|}
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
block|{
if|if
condition|(
operator|!
name|any
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|docsEnum
operator|.
name|freq
argument_list|()
return|;
block|}
block|}
DECL|method|next
specifier|public
name|boolean
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|any
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|docsEnum
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocsEnum
operator|.
name|NO_MORE_DOCS
return|;
block|}
block|}
DECL|method|read
specifier|public
name|int
name|read
parameter_list|(
name|int
index|[]
name|docs
parameter_list|,
name|int
index|[]
name|freqs
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"TermPositions does not support processing multiple documents in one call. Use TermDocs instead."
argument_list|)
throw|;
block|}
DECL|method|nextPosition
specifier|public
name|int
name|nextPosition
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|any
operator|||
name|postingsEnum
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|postingsEnum
operator|.
name|nextPosition
argument_list|()
return|;
block|}
block|}
DECL|method|getPayloadLength
specifier|public
name|int
name|getPayloadLength
parameter_list|()
block|{
if|if
condition|(
operator|!
name|any
operator|||
name|postingsEnum
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|postingsEnum
operator|.
name|getPayloadLength
argument_list|()
return|;
block|}
block|}
DECL|method|getPayload
specifier|public
name|byte
index|[]
name|getPayload
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|any
operator|||
name|postingsEnum
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|BytesRef
name|payload
init|=
name|postingsEnum
operator|.
name|getPayload
argument_list|()
decl_stmt|;
comment|// old API would always used passed in bytes if it
comment|// "fits", else allocate new:
if|if
condition|(
name|bytes
operator|!=
literal|null
operator|&&
name|payload
operator|.
name|length
operator|<=
name|bytes
operator|.
name|length
operator|-
name|offset
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|payload
operator|.
name|bytes
argument_list|,
name|payload
operator|.
name|offset
argument_list|,
name|bytes
argument_list|,
name|offset
argument_list|,
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|bytes
return|;
block|}
elseif|else
if|if
condition|(
name|payload
operator|.
name|offset
operator|==
literal|0
operator|&&
name|payload
operator|.
name|length
operator|==
name|payload
operator|.
name|bytes
operator|.
name|length
condition|)
block|{
return|return
name|payload
operator|.
name|bytes
return|;
block|}
else|else
block|{
specifier|final
name|byte
index|[]
name|retBytes
init|=
operator|new
name|byte
index|[
name|payload
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|payload
operator|.
name|bytes
argument_list|,
name|payload
operator|.
name|offset
argument_list|,
name|retBytes
argument_list|,
literal|0
argument_list|,
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|retBytes
return|;
block|}
block|}
DECL|method|isPayloadAvailable
specifier|public
name|boolean
name|isPayloadAvailable
parameter_list|()
block|{
if|if
condition|(
operator|!
name|any
operator|||
name|postingsEnum
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|postingsEnum
operator|.
name|hasPayload
argument_list|()
return|;
block|}
block|}
block|}
block|}
end_class
end_unit
