begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
operator|.
name|IndexOptions
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|StoredFieldsReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|PerDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|TermVectorsReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitVector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CloseableThreadLocal
import|;
end_import
begin_comment
comment|/**  * @lucene.experimental  */
end_comment
begin_class
DECL|class|SegmentReader
specifier|public
class|class
name|SegmentReader
extends|extends
name|IndexReader
implements|implements
name|Cloneable
block|{
DECL|field|readOnly
specifier|protected
name|boolean
name|readOnly
decl_stmt|;
DECL|field|si
specifier|private
name|SegmentInfo
name|si
decl_stmt|;
DECL|field|readerContext
specifier|private
specifier|final
name|ReaderContext
name|readerContext
init|=
operator|new
name|AtomicReaderContext
argument_list|(
name|this
argument_list|)
decl_stmt|;
DECL|field|fieldsReaderLocal
name|CloseableThreadLocal
argument_list|<
name|StoredFieldsReader
argument_list|>
name|fieldsReaderLocal
init|=
operator|new
name|FieldsReaderLocal
argument_list|()
decl_stmt|;
DECL|field|termVectorsLocal
name|CloseableThreadLocal
argument_list|<
name|TermVectorsReader
argument_list|>
name|termVectorsLocal
init|=
operator|new
name|CloseableThreadLocal
argument_list|<
name|TermVectorsReader
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|liveDocs
specifier|volatile
name|BitVector
name|liveDocs
decl_stmt|;
DECL|field|liveDocsRef
name|AtomicInteger
name|liveDocsRef
init|=
literal|null
decl_stmt|;
DECL|field|hasChanges
name|boolean
name|hasChanges
init|=
literal|false
decl_stmt|;
DECL|field|liveDocsDirty
specifier|private
name|boolean
name|liveDocsDirty
init|=
literal|false
decl_stmt|;
comment|// nocommit: move the whole modification stuff to IW
DECL|field|pendingDeleteCount
specifier|private
name|int
name|pendingDeleteCount
decl_stmt|;
DECL|field|rollbackHasChanges
specifier|private
name|boolean
name|rollbackHasChanges
init|=
literal|false
decl_stmt|;
DECL|field|rollbackDeletedDocsDirty
specifier|private
name|boolean
name|rollbackDeletedDocsDirty
init|=
literal|false
decl_stmt|;
DECL|field|rollbackSegmentInfo
specifier|private
name|SegmentInfo
name|rollbackSegmentInfo
decl_stmt|;
DECL|field|rollbackPendingDeleteCount
specifier|private
name|int
name|rollbackPendingDeleteCount
decl_stmt|;
comment|// end nocommit
DECL|field|core
name|SegmentCoreReaders
name|core
decl_stmt|;
comment|/**    * Sets the initial value     */
DECL|class|FieldsReaderLocal
specifier|private
class|class
name|FieldsReaderLocal
extends|extends
name|CloseableThreadLocal
argument_list|<
name|StoredFieldsReader
argument_list|>
block|{
annotation|@
name|Override
DECL|method|initialValue
specifier|protected
name|StoredFieldsReader
name|initialValue
parameter_list|()
block|{
return|return
name|core
operator|.
name|getFieldsReaderOrig
argument_list|()
operator|.
name|clone
argument_list|()
return|;
block|}
block|}
comment|/**    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|get
specifier|public
specifier|static
name|SegmentReader
name|get
parameter_list|(
name|boolean
name|readOnly
parameter_list|,
name|SegmentInfo
name|si
parameter_list|,
name|int
name|termInfosIndexDivisor
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
return|return
name|get
argument_list|(
name|readOnly
argument_list|,
name|si
operator|.
name|dir
argument_list|,
name|si
argument_list|,
literal|true
argument_list|,
name|termInfosIndexDivisor
argument_list|,
name|context
argument_list|)
return|;
block|}
comment|/**    * @throws CorruptIndexException if the index is corrupt    * @throws IOException if there is a low-level IO error    */
DECL|method|get
specifier|public
specifier|static
name|SegmentReader
name|get
parameter_list|(
name|boolean
name|readOnly
parameter_list|,
name|Directory
name|dir
parameter_list|,
name|SegmentInfo
name|si
parameter_list|,
name|boolean
name|doOpenStores
parameter_list|,
name|int
name|termInfosIndexDivisor
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|SegmentReader
name|instance
init|=
operator|new
name|SegmentReader
argument_list|()
decl_stmt|;
name|instance
operator|.
name|readOnly
operator|=
name|readOnly
expr_stmt|;
name|instance
operator|.
name|si
operator|=
name|si
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|instance
operator|.
name|core
operator|=
operator|new
name|SegmentCoreReaders
argument_list|(
name|instance
argument_list|,
name|dir
argument_list|,
name|si
argument_list|,
name|context
argument_list|,
name|termInfosIndexDivisor
argument_list|)
expr_stmt|;
if|if
condition|(
name|doOpenStores
condition|)
block|{
name|instance
operator|.
name|core
operator|.
name|openDocStores
argument_list|(
name|si
argument_list|)
expr_stmt|;
block|}
name|instance
operator|.
name|loadLiveDocs
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
comment|// With lock-less commits, it's entirely possible (and
comment|// fine) to hit a FileNotFound exception above.  In
comment|// this case, we want to explicitly close any subset
comment|// of things that were opened so that we don't have to
comment|// wait for a GC to do so.
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|instance
operator|.
name|doClose
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|instance
return|;
block|}
DECL|method|openDocStores
name|void
name|openDocStores
parameter_list|()
throws|throws
name|IOException
block|{
name|core
operator|.
name|openDocStores
argument_list|(
name|si
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLiveDocs
specifier|public
name|Bits
name|getLiveDocs
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|liveDocs
return|;
block|}
DECL|method|checkLiveCounts
specifier|private
name|boolean
name|checkLiveCounts
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|recomputedCount
init|=
name|liveDocs
operator|.
name|getRecomputedCount
argument_list|()
decl_stmt|;
comment|// First verify BitVector is self consistent:
assert|assert
name|liveDocs
operator|.
name|count
argument_list|()
operator|==
name|recomputedCount
operator|:
literal|"live count="
operator|+
name|liveDocs
operator|.
name|count
argument_list|()
operator|+
literal|" vs recomputed count="
operator|+
name|recomputedCount
assert|;
assert|assert
name|si
operator|.
name|getDelCount
argument_list|()
operator|==
name|si
operator|.
name|docCount
operator|-
name|recomputedCount
operator|:
literal|"delete count mismatch: info="
operator|+
name|si
operator|.
name|getDelCount
argument_list|()
operator|+
literal|" vs BitVector="
operator|+
operator|(
name|si
operator|.
name|docCount
operator|-
name|recomputedCount
operator|)
assert|;
comment|// Verify # deletes does not exceed maxDoc for this
comment|// segment:
assert|assert
name|si
operator|.
name|getDelCount
argument_list|()
operator|<=
name|maxDoc
argument_list|()
operator|:
literal|"delete count mismatch: "
operator|+
name|recomputedCount
operator|+
literal|") exceeds max doc ("
operator|+
name|maxDoc
argument_list|()
operator|+
literal|") for segment "
operator|+
name|si
operator|.
name|name
assert|;
return|return
literal|true
return|;
block|}
DECL|method|loadLiveDocs
specifier|private
name|void
name|loadLiveDocs
parameter_list|(
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|// NOTE: the bitvector is stored using the regular directory, not cfs
if|if
condition|(
name|hasDeletions
argument_list|(
name|si
argument_list|)
condition|)
block|{
name|liveDocs
operator|=
operator|new
name|BitVector
argument_list|(
name|directory
argument_list|()
argument_list|,
name|si
operator|.
name|getDelFileName
argument_list|()
argument_list|,
operator|new
name|IOContext
argument_list|(
name|context
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|liveDocsRef
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
name|checkLiveCounts
argument_list|()
assert|;
if|if
condition|(
name|liveDocs
operator|.
name|size
argument_list|()
operator|!=
name|si
operator|.
name|docCount
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"document count mismatch: deleted docs count "
operator|+
name|liveDocs
operator|.
name|size
argument_list|()
operator|+
literal|" vs segment doc count "
operator|+
name|si
operator|.
name|docCount
operator|+
literal|" segment="
operator|+
name|si
operator|.
name|name
argument_list|)
throw|;
block|}
block|}
else|else
assert|assert
name|si
operator|.
name|getDelCount
argument_list|()
operator|==
literal|0
assert|;
block|}
comment|/**    * Clones the norm bytes.  May be overridden by subclasses.  New and experimental.    * @param bytes Byte array to clone    * @return New BitVector    */
DECL|method|cloneNormBytes
specifier|protected
name|byte
index|[]
name|cloneNormBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|byte
index|[]
name|cloneBytes
init|=
operator|new
name|byte
index|[
name|bytes
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|cloneBytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|cloneBytes
return|;
block|}
comment|/**    * Clones the deleteDocs BitVector.  May be overridden by subclasses. New and experimental.    * @param bv BitVector to clone    * @return New BitVector    */
comment|// nocommit: remove deletions from SR
DECL|method|cloneDeletedDocs
specifier|protected
name|BitVector
name|cloneDeletedDocs
parameter_list|(
name|BitVector
name|bv
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
operator|(
name|BitVector
operator|)
name|bv
operator|.
name|clone
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
specifier|final
specifier|synchronized
name|Object
name|clone
parameter_list|()
block|{
try|try
block|{
return|return
name|clone
argument_list|(
name|readOnly
argument_list|)
return|;
comment|// Preserve current readOnly
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
comment|// nocommit: is this needed anymore by IndexWriter?
DECL|method|clone
specifier|final
specifier|synchronized
name|IndexReader
name|clone
parameter_list|(
name|boolean
name|openReadOnly
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
return|return
name|reopenSegment
argument_list|(
name|si
argument_list|,
literal|true
argument_list|,
name|openReadOnly
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doOpenIfChanged
specifier|protected
specifier|synchronized
name|IndexReader
name|doOpenIfChanged
parameter_list|()
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
return|return
name|reopenSegment
argument_list|(
name|si
argument_list|,
literal|false
argument_list|,
name|readOnly
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doOpenIfChanged
specifier|protected
specifier|synchronized
name|IndexReader
name|doOpenIfChanged
parameter_list|(
name|boolean
name|openReadOnly
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
return|return
name|reopenSegment
argument_list|(
name|si
argument_list|,
literal|false
argument_list|,
name|openReadOnly
argument_list|)
return|;
block|}
DECL|method|reopenSegment
specifier|synchronized
name|SegmentReader
name|reopenSegment
parameter_list|(
name|SegmentInfo
name|si
parameter_list|,
name|boolean
name|doClone
parameter_list|,
name|boolean
name|openReadOnly
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|boolean
name|deletionsUpToDate
init|=
operator|(
name|this
operator|.
name|si
operator|.
name|hasDeletions
argument_list|()
operator|==
name|si
operator|.
name|hasDeletions
argument_list|()
operator|)
operator|&&
operator|(
operator|!
name|si
operator|.
name|hasDeletions
argument_list|()
operator|||
name|this
operator|.
name|si
operator|.
name|getDelFileName
argument_list|()
operator|.
name|equals
argument_list|(
name|si
operator|.
name|getDelFileName
argument_list|()
argument_list|)
operator|)
decl_stmt|;
comment|// if we're cloning we need to run through the reopenSegment logic
comment|// also if both old and new readers aren't readonly, we clone to avoid sharing modifications
if|if
condition|(
name|deletionsUpToDate
operator|&&
operator|!
name|doClone
operator|&&
name|openReadOnly
operator|&&
name|readOnly
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// When cloning, the incoming SegmentInfos should not
comment|// have any changes in it:
assert|assert
operator|!
name|doClone
operator|||
operator|(
name|deletionsUpToDate
operator|)
assert|;
comment|// clone reader
name|SegmentReader
name|clone
init|=
operator|new
name|SegmentReader
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|core
operator|.
name|incRef
argument_list|()
expr_stmt|;
name|clone
operator|.
name|core
operator|=
name|core
expr_stmt|;
name|clone
operator|.
name|readOnly
operator|=
name|openReadOnly
expr_stmt|;
name|clone
operator|.
name|si
operator|=
name|si
expr_stmt|;
name|clone
operator|.
name|pendingDeleteCount
operator|=
name|pendingDeleteCount
expr_stmt|;
name|clone
operator|.
name|readerFinishedListeners
operator|=
name|readerFinishedListeners
expr_stmt|;
if|if
condition|(
operator|!
name|openReadOnly
operator|&&
name|hasChanges
condition|)
block|{
comment|// My pending changes transfer to the new reader
name|clone
operator|.
name|liveDocsDirty
operator|=
name|liveDocsDirty
expr_stmt|;
name|clone
operator|.
name|hasChanges
operator|=
name|hasChanges
expr_stmt|;
name|hasChanges
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|doClone
condition|)
block|{
if|if
condition|(
name|liveDocs
operator|!=
literal|null
condition|)
block|{
name|liveDocsRef
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|clone
operator|.
name|liveDocs
operator|=
name|liveDocs
expr_stmt|;
name|clone
operator|.
name|liveDocsRef
operator|=
name|liveDocsRef
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|deletionsUpToDate
condition|)
block|{
comment|// load deleted docs
assert|assert
name|clone
operator|.
name|liveDocs
operator|==
literal|null
assert|;
name|clone
operator|.
name|loadLiveDocs
argument_list|(
name|IOContext
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|liveDocs
operator|!=
literal|null
condition|)
block|{
name|liveDocsRef
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|clone
operator|.
name|liveDocs
operator|=
name|liveDocs
expr_stmt|;
name|clone
operator|.
name|liveDocsRef
operator|=
name|liveDocsRef
expr_stmt|;
block|}
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
comment|// An exception occurred during reopen, we have to decRef the norms
comment|// that we incRef'ed already and close singleNormsStream and FieldsReader
name|clone
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|clone
return|;
block|}
comment|// nocommit: remove deletions from SR
DECL|method|doCommit
name|void
name|doCommit
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|hasChanges
assert|;
name|startCommit
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|commitChanges
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackCommit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// nocommit: remove deletions from SR
DECL|method|startCommit
specifier|private
name|void
name|startCommit
parameter_list|()
block|{
name|rollbackSegmentInfo
operator|=
operator|(
name|SegmentInfo
operator|)
name|si
operator|.
name|clone
argument_list|()
expr_stmt|;
name|rollbackHasChanges
operator|=
name|hasChanges
expr_stmt|;
name|rollbackDeletedDocsDirty
operator|=
name|liveDocsDirty
expr_stmt|;
name|rollbackPendingDeleteCount
operator|=
name|pendingDeleteCount
expr_stmt|;
block|}
comment|// nocommit: remove deletions from SR
DECL|method|rollbackCommit
specifier|private
name|void
name|rollbackCommit
parameter_list|()
block|{
name|si
operator|.
name|reset
argument_list|(
name|rollbackSegmentInfo
argument_list|)
expr_stmt|;
name|hasChanges
operator|=
name|rollbackHasChanges
expr_stmt|;
name|liveDocsDirty
operator|=
name|rollbackDeletedDocsDirty
expr_stmt|;
name|pendingDeleteCount
operator|=
name|rollbackPendingDeleteCount
expr_stmt|;
block|}
comment|// nocommit: remove deletions from SR
DECL|method|commitChanges
specifier|private
specifier|synchronized
name|void
name|commitChanges
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|liveDocsDirty
condition|)
block|{
comment|// re-write deleted
name|si
operator|.
name|advanceDelGen
argument_list|()
expr_stmt|;
assert|assert
name|liveDocs
operator|.
name|length
argument_list|()
operator|==
name|si
operator|.
name|docCount
assert|;
comment|// We can write directly to the actual name (vs to a
comment|// .tmp& renaming it) because the file is not live
comment|// until segments file is written:
specifier|final
name|String
name|delFileName
init|=
name|si
operator|.
name|getDelFileName
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|liveDocs
operator|.
name|write
argument_list|(
name|directory
argument_list|()
argument_list|,
name|delFileName
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
try|try
block|{
name|directory
argument_list|()
operator|.
name|deleteFile
argument_list|(
name|delFileName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// suppress this so we keep throwing the
comment|// original exception
block|}
block|}
block|}
name|si
operator|.
name|setDelCount
argument_list|(
name|si
operator|.
name|getDelCount
argument_list|()
operator|+
name|pendingDeleteCount
argument_list|)
expr_stmt|;
name|pendingDeleteCount
operator|=
literal|0
expr_stmt|;
assert|assert
operator|(
name|maxDoc
argument_list|()
operator|-
name|liveDocs
operator|.
name|count
argument_list|()
operator|)
operator|==
name|si
operator|.
name|getDelCount
argument_list|()
operator|:
literal|"delete count mismatch during commit: info="
operator|+
name|si
operator|.
name|getDelCount
argument_list|()
operator|+
literal|" vs BitVector="
operator|+
operator|(
name|maxDoc
argument_list|()
operator|-
name|liveDocs
operator|.
name|count
argument_list|()
operator|)
assert|;
block|}
else|else
block|{
assert|assert
name|pendingDeleteCount
operator|==
literal|0
assert|;
block|}
name|liveDocsDirty
operator|=
literal|false
expr_stmt|;
name|hasChanges
operator|=
literal|false
expr_stmt|;
block|}
comment|/** @lucene.internal */
DECL|method|getFieldsReader
specifier|public
name|StoredFieldsReader
name|getFieldsReader
parameter_list|()
block|{
return|return
name|fieldsReaderLocal
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|hasChanges
condition|)
block|{
name|doCommit
argument_list|()
expr_stmt|;
block|}
name|termVectorsLocal
operator|.
name|close
argument_list|()
expr_stmt|;
name|fieldsReaderLocal
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|liveDocs
operator|!=
literal|null
condition|)
block|{
name|liveDocsRef
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
comment|// null so if an app hangs on to us we still free most ram
name|liveDocs
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
name|core
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|hasDeletions
specifier|static
name|boolean
name|hasDeletions
parameter_list|(
name|SegmentInfo
name|si
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Don't call ensureOpen() here (it could affect performance)
return|return
name|si
operator|.
name|hasDeletions
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hasDeletions
specifier|public
name|boolean
name|hasDeletions
parameter_list|()
block|{
comment|// Don't call ensureOpen() here (it could affect performance)
return|return
name|liveDocs
operator|!=
literal|null
return|;
block|}
DECL|method|usesCompoundFile
specifier|static
name|boolean
name|usesCompoundFile
parameter_list|(
name|SegmentInfo
name|si
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|si
operator|.
name|getUseCompoundFile
argument_list|()
return|;
block|}
DECL|method|hasSeparateNorms
specifier|static
name|boolean
name|hasSeparateNorms
parameter_list|(
name|SegmentInfo
name|si
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|si
operator|.
name|hasSeparateNorms
argument_list|()
return|;
block|}
comment|// nocommit: remove deletions from SR
DECL|method|deleteDocument
specifier|synchronized
name|void
name|deleteDocument
parameter_list|(
name|int
name|docNum
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|hasChanges
operator|=
literal|true
expr_stmt|;
name|doDelete
argument_list|(
name|docNum
argument_list|)
expr_stmt|;
block|}
comment|// nocommit: remove deletions from SR
DECL|method|doDelete
name|void
name|doDelete
parameter_list|(
name|int
name|docNum
parameter_list|)
block|{
if|if
condition|(
name|liveDocs
operator|==
literal|null
condition|)
block|{
name|liveDocs
operator|=
operator|new
name|BitVector
argument_list|(
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|liveDocs
operator|.
name|setAll
argument_list|()
expr_stmt|;
name|liveDocsRef
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// there is more than 1 SegmentReader with a reference to this
comment|// liveDocs BitVector so decRef the current liveDocsRef,
comment|// clone the BitVector, create a new liveDocsRef
if|if
condition|(
name|liveDocsRef
operator|.
name|get
argument_list|()
operator|>
literal|1
condition|)
block|{
name|AtomicInteger
name|oldRef
init|=
name|liveDocsRef
decl_stmt|;
name|liveDocs
operator|=
name|cloneDeletedDocs
argument_list|(
name|liveDocs
argument_list|)
expr_stmt|;
name|liveDocsRef
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|oldRef
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
name|liveDocsDirty
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|liveDocs
operator|.
name|getAndClear
argument_list|(
name|docNum
argument_list|)
condition|)
block|{
name|pendingDeleteCount
operator|++
expr_stmt|;
block|}
block|}
DECL|method|files
name|List
argument_list|<
name|String
argument_list|>
name|files
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|si
operator|.
name|files
argument_list|()
argument_list|)
return|;
block|}
DECL|method|fieldInfos
name|FieldInfos
name|fieldInfos
parameter_list|()
block|{
return|return
name|core
operator|.
name|fieldInfos
return|;
block|}
DECL|method|document
specifier|public
name|void
name|document
parameter_list|(
name|int
name|docID
parameter_list|,
name|StoredFieldVisitor
name|visitor
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|docID
operator|<
literal|0
operator|||
name|docID
operator|>=
name|maxDoc
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"docID must be>= 0 and< maxDoc="
operator|+
name|maxDoc
argument_list|()
operator|+
literal|" (got docID="
operator|+
name|docID
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|getFieldsReader
argument_list|()
operator|.
name|visitDocument
argument_list|(
name|docID
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|fields
specifier|public
name|Fields
name|fields
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|core
operator|.
name|fields
return|;
block|}
annotation|@
name|Override
DECL|method|numDocs
specifier|public
name|int
name|numDocs
parameter_list|()
block|{
comment|// Don't call ensureOpen() here (it could affect performance)
if|if
condition|(
name|liveDocs
operator|!=
literal|null
condition|)
block|{
return|return
name|liveDocs
operator|.
name|count
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|maxDoc
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|maxDoc
specifier|public
name|int
name|maxDoc
parameter_list|()
block|{
comment|// Don't call ensureOpen() here (it could affect performance)
return|return
name|si
operator|.
name|docCount
return|;
block|}
comment|/**    * @see IndexReader#getFieldNames(org.apache.lucene.index.IndexReader.FieldOption)    */
annotation|@
name|Override
DECL|method|getFieldNames
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getFieldNames
parameter_list|(
name|IndexReader
operator|.
name|FieldOption
name|fieldOption
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|fieldSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldInfo
name|fi
range|:
name|core
operator|.
name|fieldInfos
control|)
block|{
if|if
condition|(
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|ALL
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|fi
operator|.
name|isIndexed
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|UNINDEXED
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fi
operator|.
name|indexOptions
operator|==
name|IndexOptions
operator|.
name|DOCS_ONLY
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|OMIT_TERM_FREQ_AND_POSITIONS
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fi
operator|.
name|indexOptions
operator|==
name|IndexOptions
operator|.
name|DOCS_AND_FREQS
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|OMIT_POSITIONS
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fi
operator|.
name|storePayloads
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|STORES_PAYLOADS
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fi
operator|.
name|isIndexed
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|INDEXED
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fi
operator|.
name|isIndexed
operator|&&
name|fi
operator|.
name|storeTermVector
operator|==
literal|false
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|INDEXED_NO_TERMVECTOR
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fi
operator|.
name|storeTermVector
operator|==
literal|true
operator|&&
name|fi
operator|.
name|storePositionWithTermVector
operator|==
literal|false
operator|&&
name|fi
operator|.
name|storeOffsetWithTermVector
operator|==
literal|false
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|TERMVECTOR
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fi
operator|.
name|isIndexed
operator|&&
name|fi
operator|.
name|storeTermVector
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|INDEXED_WITH_TERMVECTOR
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fi
operator|.
name|storePositionWithTermVector
operator|&&
name|fi
operator|.
name|storeOffsetWithTermVector
operator|==
literal|false
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|TERMVECTOR_WITH_POSITION
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fi
operator|.
name|storeOffsetWithTermVector
operator|&&
name|fi
operator|.
name|storePositionWithTermVector
operator|==
literal|false
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|TERMVECTOR_WITH_OFFSET
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|fi
operator|.
name|storeOffsetWithTermVector
operator|&&
name|fi
operator|.
name|storePositionWithTermVector
operator|)
operator|&&
name|fieldOption
operator|==
name|IndexReader
operator|.
name|FieldOption
operator|.
name|TERMVECTOR_WITH_POSITION_OFFSET
condition|)
block|{
name|fieldSet
operator|.
name|add
argument_list|(
name|fi
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fieldSet
return|;
block|}
annotation|@
name|Override
DECL|method|hasNorms
specifier|public
name|boolean
name|hasNorms
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|FieldInfo
name|fi
init|=
name|core
operator|.
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
name|fi
operator|!=
literal|null
operator|&&
name|fi
operator|.
name|isIndexed
operator|&&
operator|!
name|fi
operator|.
name|omitNorms
return|;
block|}
annotation|@
name|Override
DECL|method|norms
specifier|public
name|byte
index|[]
name|norms
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|core
operator|.
name|norms
operator|.
name|norms
argument_list|(
name|field
argument_list|)
return|;
block|}
comment|/**    * Create a clone from the initial TermVectorsReader and store it in the ThreadLocal.    * @return TermVectorsReader    * @lucene.internal    */
DECL|method|getTermVectorsReader
specifier|public
name|TermVectorsReader
name|getTermVectorsReader
parameter_list|()
block|{
name|TermVectorsReader
name|tvReader
init|=
name|termVectorsLocal
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|tvReader
operator|==
literal|null
condition|)
block|{
name|TermVectorsReader
name|orig
init|=
name|core
operator|.
name|getTermVectorsReaderOrig
argument_list|()
decl_stmt|;
if|if
condition|(
name|orig
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|tvReader
operator|=
name|orig
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
name|termVectorsLocal
operator|.
name|set
argument_list|(
name|tvReader
argument_list|)
expr_stmt|;
block|}
return|return
name|tvReader
return|;
block|}
DECL|method|getTermVectorsReaderOrig
name|TermVectorsReader
name|getTermVectorsReaderOrig
parameter_list|()
block|{
return|return
name|core
operator|.
name|getTermVectorsReaderOrig
argument_list|()
return|;
block|}
comment|/** Return a term frequency vector for the specified document and field. The    *  vector returned contains term numbers and frequencies for all terms in    *  the specified field of this document, if the field had storeTermVector    *  flag set.  If the flag was not set, the method returns null.    * @throws IOException    */
annotation|@
name|Override
DECL|method|getTermVectors
specifier|public
name|Fields
name|getTermVectors
parameter_list|(
name|int
name|docID
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|TermVectorsReader
name|termVectorsReader
init|=
name|getTermVectorsReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|termVectorsReader
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|termVectorsReader
operator|.
name|get
argument_list|(
name|docID
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasChanges
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|si
operator|.
name|toString
argument_list|(
name|core
operator|.
name|dir
argument_list|,
name|pendingDeleteCount
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getTopReaderContext
specifier|public
name|ReaderContext
name|getTopReaderContext
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|readerContext
return|;
block|}
comment|/**    * Return the name of the segment this reader is reading.    */
DECL|method|getSegmentName
specifier|public
name|String
name|getSegmentName
parameter_list|()
block|{
return|return
name|core
operator|.
name|segment
return|;
block|}
comment|/**    * Return the SegmentInfo of the segment this reader is reading.    */
DECL|method|getSegmentInfo
name|SegmentInfo
name|getSegmentInfo
parameter_list|()
block|{
return|return
name|si
return|;
block|}
DECL|method|setSegmentInfo
name|void
name|setSegmentInfo
parameter_list|(
name|SegmentInfo
name|info
parameter_list|)
block|{
name|si
operator|=
name|info
expr_stmt|;
block|}
comment|/** Returns the directory this index resides in. */
annotation|@
name|Override
DECL|method|directory
specifier|public
name|Directory
name|directory
parameter_list|()
block|{
comment|// Don't ensureOpen here -- in certain cases, when a
comment|// cloned/reopened reader needs to commit, it may call
comment|// this method on the closed original reader
return|return
name|core
operator|.
name|dir
return|;
block|}
comment|// This is necessary so that cloned SegmentReaders (which
comment|// share the underlying postings data) will map to the
comment|// same entry in the FieldCache.  See LUCENE-1579.
annotation|@
name|Override
DECL|method|getCoreCacheKey
specifier|public
specifier|final
name|Object
name|getCoreCacheKey
parameter_list|()
block|{
return|return
name|core
return|;
block|}
annotation|@
name|Override
DECL|method|getTermInfosIndexDivisor
specifier|public
name|int
name|getTermInfosIndexDivisor
parameter_list|()
block|{
return|return
name|core
operator|.
name|termsIndexDivisor
return|;
block|}
annotation|@
name|Override
DECL|method|readerFinished
specifier|protected
name|void
name|readerFinished
parameter_list|()
block|{
comment|// Do nothing here -- we have more careful control on
comment|// when to notify that a SegmentReader has finished,
comment|// because a given core is shared across many cloned
comment|// SegmentReaders.  We only notify once that core is no
comment|// longer used (all SegmentReaders sharing it have been
comment|// closed).
block|}
annotation|@
name|Override
DECL|method|perDocValues
specifier|public
name|PerDocValues
name|perDocValues
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|core
operator|.
name|perDocProducer
return|;
block|}
block|}
end_class
end_unit
