begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_class
DECL|class|TermVectorsTermsWriterPerThread
specifier|final
class|class
name|TermVectorsTermsWriterPerThread
extends|extends
name|TermsHashConsumerPerThread
block|{
DECL|field|termsWriter
specifier|final
name|TermVectorsTermsWriter
name|termsWriter
decl_stmt|;
DECL|field|termsHashPerThread
specifier|final
name|TermsHashPerThread
name|termsHashPerThread
decl_stmt|;
DECL|field|docState
specifier|final
name|DocumentsWriter
operator|.
name|DocState
name|docState
decl_stmt|;
DECL|field|flushTerm
specifier|final
name|BytesRef
name|flushTerm
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|field|doc
name|TermVectorsTermsWriter
operator|.
name|PerDoc
name|doc
decl_stmt|;
DECL|method|TermVectorsTermsWriterPerThread
specifier|public
name|TermVectorsTermsWriterPerThread
parameter_list|(
name|TermsHashPerThread
name|termsHashPerThread
parameter_list|,
name|TermVectorsTermsWriter
name|termsWriter
parameter_list|)
block|{
name|this
operator|.
name|termsWriter
operator|=
name|termsWriter
expr_stmt|;
name|this
operator|.
name|termsHashPerThread
operator|=
name|termsHashPerThread
expr_stmt|;
name|docState
operator|=
name|termsHashPerThread
operator|.
name|docState
expr_stmt|;
block|}
comment|// Used by perField when serializing the term vectors
DECL|field|vectorSliceReader
specifier|final
name|ByteSliceReader
name|vectorSliceReader
init|=
operator|new
name|ByteSliceReader
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|startDocument
specifier|public
name|void
name|startDocument
parameter_list|()
block|{
assert|assert
name|clearLastVectorFieldName
argument_list|()
assert|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|reset
argument_list|()
expr_stmt|;
name|doc
operator|.
name|docID
operator|=
name|docState
operator|.
name|docID
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|finishDocument
specifier|public
name|DocumentsWriter
operator|.
name|DocWriter
name|finishDocument
parameter_list|()
block|{
try|try
block|{
return|return
name|doc
return|;
block|}
finally|finally
block|{
name|doc
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|addField
specifier|public
name|TermsHashConsumerPerField
name|addField
parameter_list|(
name|TermsHashPerField
name|termsHashPerField
parameter_list|,
name|FieldInfo
name|fieldInfo
parameter_list|)
block|{
return|return
operator|new
name|TermVectorsTermsWriterPerField
argument_list|(
name|termsHashPerField
argument_list|,
name|this
argument_list|,
name|fieldInfo
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|abort
specifier|public
name|void
name|abort
parameter_list|()
block|{
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|abort
argument_list|()
expr_stmt|;
name|doc
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// Called only by assert
DECL|method|clearLastVectorFieldName
specifier|final
name|boolean
name|clearLastVectorFieldName
parameter_list|()
block|{
name|lastVectorFieldName
operator|=
literal|null
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// Called only by assert
DECL|field|lastVectorFieldName
name|String
name|lastVectorFieldName
decl_stmt|;
DECL|method|vectorFieldsInOrder
specifier|final
name|boolean
name|vectorFieldsInOrder
parameter_list|(
name|FieldInfo
name|fi
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|lastVectorFieldName
operator|!=
literal|null
condition|)
return|return
name|lastVectorFieldName
operator|.
name|compareTo
argument_list|(
name|fi
operator|.
name|name
argument_list|)
operator|<
literal|0
return|;
else|else
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|lastVectorFieldName
operator|=
name|fi
operator|.
name|name
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
