begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_comment
comment|/**  * @lucene.experimental  */
end_comment
begin_class
DECL|class|FormatPostingsTermsConsumer
specifier|abstract
class|class
name|FormatPostingsTermsConsumer
block|{
comment|/** Adds a new term in this field; term ends with U+FFFF    *  char */
DECL|method|addTerm
specifier|abstract
name|FormatPostingsDocsConsumer
name|addTerm
parameter_list|(
name|char
index|[]
name|text
parameter_list|,
name|int
name|start
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|field|termBuffer
name|char
index|[]
name|termBuffer
decl_stmt|;
DECL|method|addTerm
name|FormatPostingsDocsConsumer
name|addTerm
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|len
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|termBuffer
operator|==
literal|null
operator|||
name|termBuffer
operator|.
name|length
operator|<
literal|1
operator|+
name|len
condition|)
name|termBuffer
operator|=
operator|new
name|char
index|[
name|ArrayUtil
operator|.
name|oversize
argument_list|(
literal|1
operator|+
name|len
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_CHAR
argument_list|)
index|]
expr_stmt|;
name|text
operator|.
name|getChars
argument_list|(
literal|0
argument_list|,
name|len
argument_list|,
name|termBuffer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|termBuffer
index|[
name|len
index|]
operator|=
literal|0xffff
expr_stmt|;
return|return
name|addTerm
argument_list|(
name|termBuffer
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/** Called when we are done adding terms to this field */
DECL|method|finish
specifier|abstract
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
end_class
end_unit
