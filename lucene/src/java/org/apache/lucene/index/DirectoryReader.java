begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Lock
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|LockObtainFailedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|PerDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|MapBackedSet
import|;
end_import
begin_comment
comment|/**   * An IndexReader which reads indexes with multiple segments.  */
end_comment
begin_class
DECL|class|DirectoryReader
class|class
name|DirectoryReader
extends|extends
name|IndexReader
implements|implements
name|Cloneable
block|{
DECL|field|directory
specifier|protected
name|Directory
name|directory
decl_stmt|;
DECL|field|readOnly
specifier|protected
name|boolean
name|readOnly
decl_stmt|;
DECL|field|writer
name|IndexWriter
name|writer
decl_stmt|;
DECL|field|deletionPolicy
specifier|private
name|IndexDeletionPolicy
name|deletionPolicy
decl_stmt|;
DECL|field|writeLock
specifier|private
name|Lock
name|writeLock
decl_stmt|;
DECL|field|segmentInfos
specifier|private
specifier|final
name|SegmentInfos
name|segmentInfos
decl_stmt|;
DECL|field|stale
specifier|private
name|boolean
name|stale
decl_stmt|;
DECL|field|termInfosIndexDivisor
specifier|private
specifier|final
name|int
name|termInfosIndexDivisor
decl_stmt|;
DECL|field|rollbackHasChanges
specifier|private
name|boolean
name|rollbackHasChanges
decl_stmt|;
DECL|field|subReaders
specifier|private
name|SegmentReader
index|[]
name|subReaders
decl_stmt|;
DECL|field|topLevelReaderContext
specifier|private
name|ReaderContext
name|topLevelReaderContext
decl_stmt|;
DECL|field|starts
specifier|private
name|int
index|[]
name|starts
decl_stmt|;
comment|// 1st docno for each segment
DECL|field|maxDoc
specifier|private
name|int
name|maxDoc
init|=
literal|0
decl_stmt|;
DECL|field|numDocs
specifier|private
name|int
name|numDocs
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|hasDeletions
specifier|private
name|boolean
name|hasDeletions
init|=
literal|false
decl_stmt|;
comment|// Max version in index as of when we opened; this can be
comment|//> our current segmentInfos version in case we were
comment|// opened on a past IndexCommit:
DECL|field|maxIndexVersion
specifier|private
name|long
name|maxIndexVersion
decl_stmt|;
DECL|field|applyAllDeletes
specifier|private
specifier|final
name|boolean
name|applyAllDeletes
decl_stmt|;
comment|//  static IndexReader open(final Directory directory, final IndexDeletionPolicy deletionPolicy, final IndexCommit commit, final boolean readOnly,
comment|//      final int termInfosIndexDivisor) throws CorruptIndexException, IOException {
comment|//    return open(directory, deletionPolicy, commit, readOnly, termInfosIndexDivisor, null);
comment|//  }
DECL|method|open
specifier|static
name|IndexReader
name|open
parameter_list|(
specifier|final
name|Directory
name|directory
parameter_list|,
specifier|final
name|IndexDeletionPolicy
name|deletionPolicy
parameter_list|,
specifier|final
name|IndexCommit
name|commit
parameter_list|,
specifier|final
name|boolean
name|readOnly
parameter_list|,
specifier|final
name|int
name|termInfosIndexDivisor
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
return|return
operator|(
name|IndexReader
operator|)
operator|new
name|SegmentInfos
operator|.
name|FindSegmentsFile
argument_list|(
name|directory
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Object
name|doBody
parameter_list|(
name|String
name|segmentFileName
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|SegmentInfos
name|infos
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|infos
operator|.
name|read
argument_list|(
name|directory
argument_list|,
name|segmentFileName
argument_list|)
expr_stmt|;
return|return
operator|new
name|DirectoryReader
argument_list|(
name|directory
argument_list|,
name|infos
argument_list|,
name|deletionPolicy
argument_list|,
name|readOnly
argument_list|,
name|termInfosIndexDivisor
argument_list|)
return|;
block|}
block|}
operator|.
name|run
argument_list|(
name|commit
argument_list|)
return|;
block|}
comment|/** Construct reading the named set of readers. */
comment|//  DirectoryReader(Directory directory, SegmentInfos sis, IndexDeletionPolicy deletionPolicy, boolean readOnly, int termInfosIndexDivisor) throws IOException {
comment|//    this(directory, sis, deletionPolicy, readOnly, termInfosIndexDivisor, null);
comment|//  }
comment|/** Construct reading the named set of readers. */
DECL|method|DirectoryReader
name|DirectoryReader
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|SegmentInfos
name|sis
parameter_list|,
name|IndexDeletionPolicy
name|deletionPolicy
parameter_list|,
name|boolean
name|readOnly
parameter_list|,
name|int
name|termInfosIndexDivisor
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
name|this
operator|.
name|readOnly
operator|=
name|readOnly
expr_stmt|;
name|this
operator|.
name|segmentInfos
operator|=
name|sis
expr_stmt|;
name|this
operator|.
name|deletionPolicy
operator|=
name|deletionPolicy
expr_stmt|;
name|this
operator|.
name|termInfosIndexDivisor
operator|=
name|termInfosIndexDivisor
expr_stmt|;
name|readerFinishedListeners
operator|=
operator|new
name|MapBackedSet
argument_list|<
name|ReaderFinishedListener
argument_list|>
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|ReaderFinishedListener
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|applyAllDeletes
operator|=
literal|false
expr_stmt|;
comment|// To reduce the chance of hitting FileNotFound
comment|// (and having to retry), we open segments in
comment|// reverse because IndexWriter merges& deletes
comment|// the newest segments first.
name|SegmentReader
index|[]
name|readers
init|=
operator|new
name|SegmentReader
index|[
name|sis
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|sis
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|readers
index|[
name|i
index|]
operator|=
name|SegmentReader
operator|.
name|get
argument_list|(
name|readOnly
argument_list|,
name|sis
operator|.
name|info
argument_list|(
name|i
argument_list|)
argument_list|,
name|termInfosIndexDivisor
argument_list|,
name|IOContext
operator|.
name|READ
argument_list|)
expr_stmt|;
name|readers
index|[
name|i
index|]
operator|.
name|readerFinishedListeners
operator|=
name|readerFinishedListeners
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
comment|// Close all readers we had opened:
for|for
control|(
name|i
operator|++
init|;
name|i
operator|<
name|sis
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|readers
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignore
parameter_list|)
block|{
comment|// keep going - we want to clean up as much as possible
block|}
block|}
block|}
block|}
block|}
name|initialize
argument_list|(
name|readers
argument_list|)
expr_stmt|;
block|}
comment|// Used by near real-time search
DECL|method|DirectoryReader
name|DirectoryReader
parameter_list|(
name|IndexWriter
name|writer
parameter_list|,
name|SegmentInfos
name|infos
parameter_list|,
name|boolean
name|applyAllDeletes
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|directory
operator|=
name|writer
operator|.
name|getDirectory
argument_list|()
expr_stmt|;
name|this
operator|.
name|readOnly
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|applyAllDeletes
operator|=
name|applyAllDeletes
expr_stmt|;
comment|// saved for reopen
name|this
operator|.
name|termInfosIndexDivisor
operator|=
name|writer
operator|.
name|getConfig
argument_list|()
operator|.
name|getReaderTermsIndexDivisor
argument_list|()
expr_stmt|;
name|readerFinishedListeners
operator|=
name|writer
operator|.
name|getReaderFinishedListeners
argument_list|()
expr_stmt|;
comment|// IndexWriter synchronizes externally before calling
comment|// us, which ensures infos will not change; so there's
comment|// no need to process segments in reverse order
specifier|final
name|int
name|numSegments
init|=
name|infos
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SegmentReader
argument_list|>
name|readers
init|=
operator|new
name|ArrayList
argument_list|<
name|SegmentReader
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Directory
name|dir
init|=
name|writer
operator|.
name|getDirectory
argument_list|()
decl_stmt|;
name|segmentInfos
operator|=
operator|(
name|SegmentInfos
operator|)
name|infos
operator|.
name|clone
argument_list|()
expr_stmt|;
name|int
name|infosUpto
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSegments
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
specifier|final
name|SegmentInfo
name|info
init|=
name|infos
operator|.
name|info
argument_list|(
name|i
argument_list|)
decl_stmt|;
assert|assert
name|info
operator|.
name|dir
operator|==
name|dir
assert|;
specifier|final
name|SegmentReader
name|reader
init|=
name|writer
operator|.
name|readerPool
operator|.
name|getReadOnlyClone
argument_list|(
name|info
argument_list|,
name|IOContext
operator|.
name|READ
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|.
name|numDocs
argument_list|()
operator|>
literal|0
operator|||
name|writer
operator|.
name|getKeepFullyDeletedSegments
argument_list|()
condition|)
block|{
name|reader
operator|.
name|readerFinishedListeners
operator|=
name|readerFinishedListeners
expr_stmt|;
name|readers
operator|.
name|add
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|infosUpto
operator|++
expr_stmt|;
block|}
else|else
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|segmentInfos
operator|.
name|remove
argument_list|(
name|infosUpto
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
comment|// Close all readers we had opened:
for|for
control|(
name|SegmentReader
name|reader
range|:
name|readers
control|)
block|{
try|try
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignore
parameter_list|)
block|{
comment|// keep going - we want to clean up as much as possible
block|}
block|}
block|}
block|}
block|}
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
name|initialize
argument_list|(
name|readers
operator|.
name|toArray
argument_list|(
operator|new
name|SegmentReader
index|[
name|readers
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** This constructor is only used for {@link #doOpenIfChanged()} */
DECL|method|DirectoryReader
name|DirectoryReader
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|SegmentInfos
name|infos
parameter_list|,
name|SegmentReader
index|[]
name|oldReaders
parameter_list|,
name|boolean
name|readOnly
parameter_list|,
name|boolean
name|doClone
parameter_list|,
name|int
name|termInfosIndexDivisor
parameter_list|,
name|Collection
argument_list|<
name|ReaderFinishedListener
argument_list|>
name|readerFinishedListeners
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
name|this
operator|.
name|readOnly
operator|=
name|readOnly
expr_stmt|;
name|this
operator|.
name|segmentInfos
operator|=
name|infos
expr_stmt|;
name|this
operator|.
name|termInfosIndexDivisor
operator|=
name|termInfosIndexDivisor
expr_stmt|;
name|this
operator|.
name|readerFinishedListeners
operator|=
name|readerFinishedListeners
expr_stmt|;
name|applyAllDeletes
operator|=
literal|false
expr_stmt|;
comment|// we put the old SegmentReaders in a map, that allows us
comment|// to lookup a reader using its segment name
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|segmentReaders
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldReaders
operator|!=
literal|null
condition|)
block|{
comment|// create a Map SegmentName->SegmentReader
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oldReaders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|segmentReaders
operator|.
name|put
argument_list|(
name|oldReaders
index|[
name|i
index|]
operator|.
name|getSegmentName
argument_list|()
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|SegmentReader
index|[]
name|newReaders
init|=
operator|new
name|SegmentReader
index|[
name|infos
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
comment|// remember which readers are shared between the old and the re-opened
comment|// DirectoryReader - we have to incRef those readers
name|boolean
index|[]
name|readerShared
init|=
operator|new
name|boolean
index|[
name|infos
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|infos
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
comment|// find SegmentReader for this segment
name|Integer
name|oldReaderIndex
init|=
name|segmentReaders
operator|.
name|get
argument_list|(
name|infos
operator|.
name|info
argument_list|(
name|i
argument_list|)
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldReaderIndex
operator|==
literal|null
condition|)
block|{
comment|// this is a new segment, no old SegmentReader can be reused
name|newReaders
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
comment|// there is an old reader for this segment - we'll try to reopen it
name|newReaders
index|[
name|i
index|]
operator|=
name|oldReaders
index|[
name|oldReaderIndex
operator|.
name|intValue
argument_list|()
index|]
expr_stmt|;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|SegmentReader
name|newReader
decl_stmt|;
if|if
condition|(
name|newReaders
index|[
name|i
index|]
operator|==
literal|null
operator|||
name|infos
operator|.
name|info
argument_list|(
name|i
argument_list|)
operator|.
name|getUseCompoundFile
argument_list|()
operator|!=
name|newReaders
index|[
name|i
index|]
operator|.
name|getSegmentInfo
argument_list|()
operator|.
name|getUseCompoundFile
argument_list|()
condition|)
block|{
comment|// We should never see a totally new segment during cloning
assert|assert
operator|!
name|doClone
assert|;
comment|// this is a new reader; in case we hit an exception we can close it safely
name|newReader
operator|=
name|SegmentReader
operator|.
name|get
argument_list|(
name|readOnly
argument_list|,
name|infos
operator|.
name|info
argument_list|(
name|i
argument_list|)
argument_list|,
name|termInfosIndexDivisor
argument_list|,
name|IOContext
operator|.
name|READ
argument_list|)
expr_stmt|;
name|newReader
operator|.
name|readerFinishedListeners
operator|=
name|readerFinishedListeners
expr_stmt|;
name|readerShared
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
name|newReaders
index|[
name|i
index|]
operator|=
name|newReader
expr_stmt|;
block|}
else|else
block|{
name|newReader
operator|=
name|newReaders
index|[
name|i
index|]
operator|.
name|reopenSegment
argument_list|(
name|infos
operator|.
name|info
argument_list|(
name|i
argument_list|)
argument_list|,
name|doClone
argument_list|,
name|readOnly
argument_list|)
expr_stmt|;
if|if
condition|(
name|newReader
operator|==
literal|null
condition|)
block|{
comment|// this reader will be shared between the old and the new one,
comment|// so we must incRef it
name|readerShared
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|newReaders
index|[
name|i
index|]
operator|.
name|incRef
argument_list|()
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|newReader
operator|.
name|readerFinishedListeners
operator|==
name|readerFinishedListeners
assert|;
name|readerShared
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
comment|// Steal ref returned to us by reopenSegment:
name|newReaders
index|[
name|i
index|]
operator|=
name|newReader
expr_stmt|;
block|}
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
for|for
control|(
name|i
operator|++
init|;
name|i
operator|<
name|infos
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|newReaders
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|readerShared
index|[
name|i
index|]
condition|)
block|{
comment|// this is a new subReader that is not used by the old one,
comment|// we can close it
name|newReaders
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// this subReader is also used by the old reader, so instead
comment|// closing we must decRef it
name|newReaders
index|[
name|i
index|]
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{
comment|// keep going - we want to clean up as much as possible
block|}
block|}
block|}
block|}
block|}
block|}
comment|// initialize the readers to calculate maxDoc before we try to reuse the old normsCache
name|initialize
argument_list|(
name|newReaders
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasChanges
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
specifier|final
name|String
name|segmentsFile
init|=
name|segmentInfos
operator|.
name|getCurrentSegmentFileName
argument_list|()
decl_stmt|;
if|if
condition|(
name|segmentsFile
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|segmentsFile
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|segmentInfos
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|":nrt"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subReaders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|subReaders
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|initialize
specifier|private
name|void
name|initialize
parameter_list|(
name|SegmentReader
index|[]
name|subReaders
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|subReaders
operator|=
name|subReaders
expr_stmt|;
name|starts
operator|=
operator|new
name|int
index|[
name|subReaders
operator|.
name|length
operator|+
literal|1
index|]
expr_stmt|;
comment|// build starts array
specifier|final
name|AtomicReaderContext
index|[]
name|subReaderCtx
init|=
operator|new
name|AtomicReaderContext
index|[
name|subReaders
operator|.
name|length
index|]
decl_stmt|;
name|topLevelReaderContext
operator|=
operator|new
name|CompositeReaderContext
argument_list|(
name|this
argument_list|,
name|subReaderCtx
argument_list|,
name|subReaderCtx
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Fields
argument_list|>
name|subFields
init|=
operator|new
name|ArrayList
argument_list|<
name|Fields
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subReaders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|starts
index|[
name|i
index|]
operator|=
name|maxDoc
expr_stmt|;
name|subReaderCtx
index|[
name|i
index|]
operator|=
operator|new
name|AtomicReaderContext
argument_list|(
name|topLevelReaderContext
argument_list|,
name|subReaders
index|[
name|i
index|]
argument_list|,
name|i
argument_list|,
name|maxDoc
argument_list|,
name|i
argument_list|,
name|maxDoc
argument_list|)
expr_stmt|;
name|maxDoc
operator|+=
name|subReaders
index|[
name|i
index|]
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
comment|// compute maxDocs
if|if
condition|(
name|subReaders
index|[
name|i
index|]
operator|.
name|hasDeletions
argument_list|()
condition|)
block|{
name|hasDeletions
operator|=
literal|true
expr_stmt|;
block|}
specifier|final
name|Fields
name|f
init|=
name|subReaders
index|[
name|i
index|]
operator|.
name|fields
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
name|subFields
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
name|starts
index|[
name|subReaders
operator|.
name|length
index|]
operator|=
name|maxDoc
expr_stmt|;
if|if
condition|(
operator|!
name|readOnly
condition|)
block|{
name|maxIndexVersion
operator|=
name|SegmentInfos
operator|.
name|readCurrentVersion
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getLiveDocs
specifier|public
name|Bits
name|getLiveDocs
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"please use MultiFields.getLiveDocs, or wrap your IndexReader with SlowMultiReaderWrapper, if you really need a top level Bits liveDocs"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
specifier|final
specifier|synchronized
name|Object
name|clone
parameter_list|()
block|{
try|try
block|{
return|return
name|clone
argument_list|(
name|readOnly
argument_list|)
return|;
comment|// Preserve current readOnly
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
specifier|final
specifier|synchronized
name|IndexReader
name|clone
parameter_list|(
name|boolean
name|openReadOnly
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
comment|// doOpenIfChanged calls ensureOpen
name|DirectoryReader
name|newReader
init|=
name|doOpenIfChanged
argument_list|(
operator|(
name|SegmentInfos
operator|)
name|segmentInfos
operator|.
name|clone
argument_list|()
argument_list|,
literal|true
argument_list|,
name|openReadOnly
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|!=
name|newReader
condition|)
block|{
name|newReader
operator|.
name|deletionPolicy
operator|=
name|deletionPolicy
expr_stmt|;
block|}
name|newReader
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
comment|// If we're cloning a non-readOnly reader, move the
comment|// writeLock (if there is one) to the new reader:
if|if
condition|(
operator|!
name|openReadOnly
operator|&&
name|writeLock
operator|!=
literal|null
condition|)
block|{
comment|// In near real-time search, reader is always readonly
assert|assert
name|writer
operator|==
literal|null
assert|;
name|newReader
operator|.
name|writeLock
operator|=
name|writeLock
expr_stmt|;
name|newReader
operator|.
name|hasChanges
operator|=
name|hasChanges
expr_stmt|;
name|newReader
operator|.
name|hasDeletions
operator|=
name|hasDeletions
expr_stmt|;
name|writeLock
operator|=
literal|null
expr_stmt|;
name|hasChanges
operator|=
literal|false
expr_stmt|;
block|}
assert|assert
name|newReader
operator|.
name|readerFinishedListeners
operator|!=
literal|null
assert|;
return|return
name|newReader
return|;
block|}
annotation|@
name|Override
DECL|method|doOpenIfChanged
specifier|protected
specifier|final
name|IndexReader
name|doOpenIfChanged
parameter_list|()
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
comment|// Preserve current readOnly
return|return
name|doOpenIfChanged
argument_list|(
name|readOnly
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doOpenIfChanged
specifier|protected
specifier|final
name|IndexReader
name|doOpenIfChanged
parameter_list|(
name|boolean
name|openReadOnly
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
return|return
name|doOpenIfChanged
argument_list|(
name|openReadOnly
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doOpenIfChanged
specifier|protected
specifier|final
name|IndexReader
name|doOpenIfChanged
parameter_list|(
specifier|final
name|IndexCommit
name|commit
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
return|return
name|doOpenIfChanged
argument_list|(
literal|true
argument_list|,
name|commit
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doOpenIfChanged
specifier|protected
specifier|final
name|IndexReader
name|doOpenIfChanged
parameter_list|(
name|IndexWriter
name|writer
parameter_list|,
name|boolean
name|applyAllDeletes
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
if|if
condition|(
name|writer
operator|==
name|this
operator|.
name|writer
operator|&&
name|applyAllDeletes
operator|==
name|this
operator|.
name|applyAllDeletes
condition|)
block|{
return|return
name|doOpenIfChanged
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|doOpenIfChanged
argument_list|(
name|writer
argument_list|,
name|applyAllDeletes
argument_list|)
return|;
block|}
block|}
DECL|method|doOpenFromWriter
specifier|private
specifier|final
name|IndexReader
name|doOpenFromWriter
parameter_list|(
name|boolean
name|openReadOnly
parameter_list|,
name|IndexCommit
name|commit
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
assert|assert
name|readOnly
assert|;
if|if
condition|(
operator|!
name|openReadOnly
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)"
argument_list|)
throw|;
block|}
if|if
condition|(
name|commit
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"a reader obtained from IndexWriter.getReader() cannot currently accept a commit"
argument_list|)
throw|;
block|}
if|if
condition|(
name|writer
operator|.
name|nrtIsCurrent
argument_list|(
name|segmentInfos
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|(
name|applyAllDeletes
argument_list|)
decl_stmt|;
comment|// If in fact no changes took place, return null:
if|if
condition|(
name|reader
operator|.
name|getVersion
argument_list|()
operator|==
name|segmentInfos
operator|.
name|getVersion
argument_list|()
condition|)
block|{
name|reader
operator|.
name|decRef
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
name|reader
operator|.
name|readerFinishedListeners
operator|=
name|readerFinishedListeners
expr_stmt|;
return|return
name|reader
return|;
block|}
DECL|method|doOpenIfChanged
specifier|private
name|IndexReader
name|doOpenIfChanged
parameter_list|(
specifier|final
name|boolean
name|openReadOnly
parameter_list|,
name|IndexCommit
name|commit
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
assert|assert
name|commit
operator|==
literal|null
operator|||
name|openReadOnly
assert|;
comment|// If we were obtained by writer.getReader(), re-ask the
comment|// writer to get a new reader.
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
return|return
name|doOpenFromWriter
argument_list|(
name|openReadOnly
argument_list|,
name|commit
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|doOpenNoWriter
argument_list|(
name|openReadOnly
argument_list|,
name|commit
argument_list|)
return|;
block|}
block|}
DECL|method|doOpenNoWriter
specifier|private
specifier|synchronized
name|IndexReader
name|doOpenNoWriter
parameter_list|(
specifier|final
name|boolean
name|openReadOnly
parameter_list|,
name|IndexCommit
name|commit
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
if|if
condition|(
name|commit
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|hasChanges
condition|)
block|{
comment|// We have changes, which means we are not readOnly:
assert|assert
name|readOnly
operator|==
literal|false
assert|;
comment|// and we hold the write lock:
assert|assert
name|writeLock
operator|!=
literal|null
assert|;
comment|// so no other writer holds the write lock, which
comment|// means no changes could have been done to the index:
assert|assert
name|isCurrent
argument_list|()
assert|;
if|if
condition|(
name|openReadOnly
condition|)
block|{
return|return
name|clone
argument_list|(
name|openReadOnly
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|isCurrent
argument_list|()
condition|)
block|{
if|if
condition|(
name|openReadOnly
operator|!=
name|readOnly
condition|)
block|{
comment|// Just fallback to clone
return|return
name|clone
argument_list|(
name|openReadOnly
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|directory
operator|!=
name|commit
operator|.
name|getDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"the specified commit does not match the specified Directory"
argument_list|)
throw|;
block|}
if|if
condition|(
name|segmentInfos
operator|!=
literal|null
operator|&&
name|commit
operator|.
name|getSegmentsFileName
argument_list|()
operator|.
name|equals
argument_list|(
name|segmentInfos
operator|.
name|getCurrentSegmentFileName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|readOnly
operator|!=
name|openReadOnly
condition|)
block|{
comment|// Just fallback to clone
return|return
name|clone
argument_list|(
name|openReadOnly
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
return|return
operator|(
name|IndexReader
operator|)
operator|new
name|SegmentInfos
operator|.
name|FindSegmentsFile
argument_list|(
name|directory
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Object
name|doBody
parameter_list|(
name|String
name|segmentFileName
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
specifier|final
name|SegmentInfos
name|infos
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|infos
operator|.
name|read
argument_list|(
name|directory
argument_list|,
name|segmentFileName
argument_list|)
expr_stmt|;
return|return
name|doOpenIfChanged
argument_list|(
name|infos
argument_list|,
literal|false
argument_list|,
name|openReadOnly
argument_list|)
return|;
block|}
block|}
operator|.
name|run
argument_list|(
name|commit
argument_list|)
return|;
block|}
DECL|method|doOpenIfChanged
specifier|private
specifier|synchronized
name|DirectoryReader
name|doOpenIfChanged
parameter_list|(
name|SegmentInfos
name|infos
parameter_list|,
name|boolean
name|doClone
parameter_list|,
name|boolean
name|openReadOnly
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
return|return
operator|new
name|DirectoryReader
argument_list|(
name|directory
argument_list|,
name|infos
argument_list|,
name|subReaders
argument_list|,
name|openReadOnly
argument_list|,
name|doClone
argument_list|,
name|termInfosIndexDivisor
argument_list|,
name|readerFinishedListeners
argument_list|)
return|;
block|}
comment|/** Version number when this IndexReader was opened. */
annotation|@
name|Override
DECL|method|getVersion
specifier|public
name|long
name|getVersion
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|segmentInfos
operator|.
name|getVersion
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getTermVectors
specifier|public
name|Fields
name|getTermVectors
parameter_list|(
name|int
name|docID
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|int
name|i
init|=
name|readerIndex
argument_list|(
name|docID
argument_list|)
decl_stmt|;
comment|// find segment num
return|return
name|subReaders
index|[
name|i
index|]
operator|.
name|getTermVectors
argument_list|(
name|docID
operator|-
name|starts
index|[
name|i
index|]
argument_list|)
return|;
comment|// dispatch to segment
block|}
annotation|@
name|Override
DECL|method|numDocs
specifier|public
name|int
name|numDocs
parameter_list|()
block|{
comment|// Don't call ensureOpen() here (it could affect performance)
comment|// NOTE: multiple threads may wind up init'ing
comment|// numDocs... but that's harmless
if|if
condition|(
name|numDocs
operator|==
operator|-
literal|1
condition|)
block|{
comment|// check cache
name|int
name|n
init|=
literal|0
decl_stmt|;
comment|// cache miss--recompute
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subReaders
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|n
operator|+=
name|subReaders
index|[
name|i
index|]
operator|.
name|numDocs
argument_list|()
expr_stmt|;
comment|// sum from readers
name|numDocs
operator|=
name|n
expr_stmt|;
block|}
return|return
name|numDocs
return|;
block|}
annotation|@
name|Override
DECL|method|maxDoc
specifier|public
name|int
name|maxDoc
parameter_list|()
block|{
comment|// Don't call ensureOpen() here (it could affect performance)
return|return
name|maxDoc
return|;
block|}
annotation|@
name|Override
DECL|method|document
specifier|public
name|void
name|document
parameter_list|(
name|int
name|docID
parameter_list|,
name|StoredFieldVisitor
name|visitor
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|int
name|i
init|=
name|readerIndex
argument_list|(
name|docID
argument_list|)
decl_stmt|;
comment|// find segment num
name|subReaders
index|[
name|i
index|]
operator|.
name|document
argument_list|(
name|docID
operator|-
name|starts
index|[
name|i
index|]
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
comment|// dispatch to segment reader
block|}
annotation|@
name|Override
DECL|method|hasDeletions
specifier|public
name|boolean
name|hasDeletions
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|hasDeletions
return|;
block|}
annotation|@
name|Override
DECL|method|doDelete
specifier|protected
name|void
name|doDelete
parameter_list|(
name|int
name|n
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|numDocs
operator|=
operator|-
literal|1
expr_stmt|;
comment|// invalidate cache
name|int
name|i
init|=
name|readerIndex
argument_list|(
name|n
argument_list|)
decl_stmt|;
comment|// find segment num
name|subReaders
index|[
name|i
index|]
operator|.
name|deleteDocument
argument_list|(
name|n
operator|-
name|starts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// dispatch to segment reader
name|hasDeletions
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doUndeleteAll
specifier|protected
name|void
name|doUndeleteAll
parameter_list|()
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subReaders
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|subReaders
index|[
name|i
index|]
operator|.
name|undeleteAll
argument_list|()
expr_stmt|;
name|hasDeletions
operator|=
literal|false
expr_stmt|;
name|numDocs
operator|=
operator|-
literal|1
expr_stmt|;
comment|// invalidate cache
block|}
DECL|method|readerIndex
specifier|private
name|int
name|readerIndex
parameter_list|(
name|int
name|n
parameter_list|)
block|{
comment|// find reader for doc n:
return|return
name|readerIndex
argument_list|(
name|n
argument_list|,
name|this
operator|.
name|starts
argument_list|,
name|this
operator|.
name|subReaders
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|readerIndex
specifier|final
specifier|static
name|int
name|readerIndex
parameter_list|(
name|int
name|n
parameter_list|,
name|int
index|[]
name|starts
parameter_list|,
name|int
name|numSubReaders
parameter_list|)
block|{
comment|// find reader for doc n:
name|int
name|lo
init|=
literal|0
decl_stmt|;
comment|// search starts array
name|int
name|hi
init|=
name|numSubReaders
operator|-
literal|1
decl_stmt|;
comment|// for first element less
while|while
condition|(
name|hi
operator|>=
name|lo
condition|)
block|{
name|int
name|mid
init|=
operator|(
name|lo
operator|+
name|hi
operator|)
operator|>>>
literal|1
decl_stmt|;
name|int
name|midValue
init|=
name|starts
index|[
name|mid
index|]
decl_stmt|;
if|if
condition|(
name|n
operator|<
name|midValue
condition|)
name|hi
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|n
operator|>
name|midValue
condition|)
name|lo
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
else|else
block|{
comment|// found a match
while|while
condition|(
name|mid
operator|+
literal|1
operator|<
name|numSubReaders
operator|&&
name|starts
index|[
name|mid
operator|+
literal|1
index|]
operator|==
name|midValue
condition|)
block|{
name|mid
operator|++
expr_stmt|;
comment|// scan to last match
block|}
return|return
name|mid
return|;
block|}
block|}
return|return
name|hi
return|;
block|}
annotation|@
name|Override
DECL|method|hasNorms
specifier|public
name|boolean
name|hasNorms
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subReaders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|subReaders
index|[
name|i
index|]
operator|.
name|hasNorms
argument_list|(
name|field
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|norms
specifier|public
specifier|synchronized
name|byte
index|[]
name|norms
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"please use MultiNorms.norms, or wrap your IndexReader with SlowMultiReaderWrapper, if you really need a top level norms"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|doSetNorm
specifier|protected
name|void
name|doSetNorm
parameter_list|(
name|int
name|n
parameter_list|,
name|String
name|field
parameter_list|,
name|byte
name|value
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|int
name|i
init|=
name|readerIndex
argument_list|(
name|n
argument_list|)
decl_stmt|;
comment|// find segment num
name|subReaders
index|[
name|i
index|]
operator|.
name|setNorm
argument_list|(
name|n
operator|-
name|starts
index|[
name|i
index|]
argument_list|,
name|field
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// dispatch
block|}
annotation|@
name|Override
DECL|method|docFreq
specifier|public
name|int
name|docFreq
parameter_list|(
name|Term
name|t
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|int
name|total
init|=
literal|0
decl_stmt|;
comment|// sum freqs in segments
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subReaders
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|total
operator|+=
name|subReaders
index|[
name|i
index|]
operator|.
name|docFreq
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
name|total
return|;
block|}
annotation|@
name|Override
DECL|method|docFreq
specifier|public
name|int
name|docFreq
parameter_list|(
name|String
name|field
parameter_list|,
name|BytesRef
name|term
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|int
name|total
init|=
literal|0
decl_stmt|;
comment|// sum freqs in segments
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subReaders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|total
operator|+=
name|subReaders
index|[
name|i
index|]
operator|.
name|docFreq
argument_list|(
name|field
argument_list|,
name|term
argument_list|)
expr_stmt|;
block|}
return|return
name|total
return|;
block|}
annotation|@
name|Override
DECL|method|fields
specifier|public
name|Fields
name|fields
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"please use MultiFields.getFields, or wrap your IndexReader with SlowMultiReaderWrapper, if you really need a top level Fields"
argument_list|)
throw|;
block|}
comment|/**    * Tries to acquire the WriteLock on this directory. this method is only valid if this IndexReader is directory    * owner.    *    * @throws StaleReaderException  if the index has changed since this reader was opened    * @throws CorruptIndexException if the index is corrupt    * @throws org.apache.lucene.store.LockObtainFailedException    *                               if another writer has this index open (<code>write.lock</code> could not be    *                               obtained)    * @throws IOException           if there is a low-level IO error    */
annotation|@
name|Override
DECL|method|acquireWriteLock
specifier|protected
name|void
name|acquireWriteLock
parameter_list|()
throws|throws
name|StaleReaderException
throws|,
name|CorruptIndexException
throws|,
name|LockObtainFailedException
throws|,
name|IOException
block|{
if|if
condition|(
name|readOnly
condition|)
block|{
comment|// NOTE: we should not reach this code w/ the core
comment|// IndexReader classes; however, an external subclass
comment|// of IndexReader could reach this.
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This IndexReader cannot make any changes to the index (it was opened with readOnly = true)"
argument_list|)
throw|;
block|}
if|if
condition|(
name|segmentInfos
operator|!=
literal|null
condition|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|stale
condition|)
throw|throw
operator|new
name|StaleReaderException
argument_list|(
literal|"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations"
argument_list|)
throw|;
if|if
condition|(
name|writeLock
operator|==
literal|null
condition|)
block|{
name|Lock
name|writeLock
init|=
name|directory
operator|.
name|makeLock
argument_list|(
name|IndexWriter
operator|.
name|WRITE_LOCK_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|writeLock
operator|.
name|obtain
argument_list|(
name|IndexWriterConfig
operator|.
name|WRITE_LOCK_TIMEOUT
argument_list|)
condition|)
comment|// obtain write lock
throw|throw
operator|new
name|LockObtainFailedException
argument_list|(
literal|"Index locked for write: "
operator|+
name|writeLock
argument_list|)
throw|;
name|this
operator|.
name|writeLock
operator|=
name|writeLock
expr_stmt|;
comment|// we have to check whether index has changed since this reader was opened.
comment|// if so, this reader is no longer valid for deletion
if|if
condition|(
name|SegmentInfos
operator|.
name|readCurrentVersion
argument_list|(
name|directory
argument_list|)
operator|>
name|maxIndexVersion
condition|)
block|{
name|stale
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|writeLock
operator|.
name|release
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeLock
operator|=
literal|null
expr_stmt|;
throw|throw
operator|new
name|StaleReaderException
argument_list|(
literal|"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/**    * Commit changes resulting from delete, undeleteAll, or setNorm operations    *<p/>    * If an exception is hit, then either no changes or all changes will have been committed to the index (transactional    * semantics).    *    * @throws IOException if there is a low-level IO error    */
annotation|@
name|Override
DECL|method|doCommit
specifier|protected
name|void
name|doCommit
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|commitUserData
parameter_list|)
throws|throws
name|IOException
block|{
comment|// poll subreaders for changes
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|!
name|hasChanges
operator|&&
name|i
operator|<
name|subReaders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|hasChanges
operator||=
name|subReaders
index|[
name|i
index|]
operator|.
name|hasChanges
expr_stmt|;
block|}
if|if
condition|(
name|hasChanges
condition|)
block|{
name|segmentInfos
operator|.
name|setUserData
argument_list|(
name|commitUserData
argument_list|)
expr_stmt|;
comment|// Default deleter (for backwards compatibility) is
comment|// KeepOnlyLastCommitDeleter:
name|IndexFileDeleter
name|deleter
init|=
operator|new
name|IndexFileDeleter
argument_list|(
name|directory
argument_list|,
name|deletionPolicy
operator|==
literal|null
condition|?
operator|new
name|KeepOnlyLastCommitDeletionPolicy
argument_list|()
else|:
name|deletionPolicy
argument_list|,
name|segmentInfos
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|segmentInfos
operator|.
name|updateGeneration
argument_list|(
name|deleter
operator|.
name|getLastSegmentInfos
argument_list|()
argument_list|)
expr_stmt|;
name|segmentInfos
operator|.
name|changed
argument_list|()
expr_stmt|;
comment|// Checkpoint the state we are about to change, in
comment|// case we have to roll back:
name|startCommit
argument_list|()
expr_stmt|;
specifier|final
name|List
argument_list|<
name|SegmentInfo
argument_list|>
name|rollbackSegments
init|=
name|segmentInfos
operator|.
name|createBackupSegmentInfos
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subReaders
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|subReaders
index|[
name|i
index|]
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// Remove segments that contain only 100% deleted
comment|// docs:
name|segmentInfos
operator|.
name|pruneDeletedSegments
argument_list|()
expr_stmt|;
comment|// Sync all files we just wrote
name|directory
operator|.
name|sync
argument_list|(
name|segmentInfos
operator|.
name|files
argument_list|(
name|directory
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|segmentInfos
operator|.
name|commit
argument_list|(
name|directory
argument_list|,
name|segmentInfos
operator|.
name|codecFormat
argument_list|()
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
comment|// Rollback changes that were made to
comment|// SegmentInfos but failed to get [fully]
comment|// committed.  This way this reader instance
comment|// remains consistent (matched to what's
comment|// actually in the index):
name|rollbackCommit
argument_list|()
expr_stmt|;
comment|// Recompute deletable files& remove them (so
comment|// partially written .del files, etc, are
comment|// removed):
name|deleter
operator|.
name|refresh
argument_list|()
expr_stmt|;
comment|// Restore all SegmentInfos (in case we pruned some)
name|segmentInfos
operator|.
name|rollbackSegmentInfos
argument_list|(
name|rollbackSegments
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Have the deleter remove any now unreferenced
comment|// files due to this commit:
name|deleter
operator|.
name|checkpoint
argument_list|(
name|segmentInfos
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|deleter
operator|.
name|close
argument_list|()
expr_stmt|;
name|maxIndexVersion
operator|=
name|segmentInfos
operator|.
name|getVersion
argument_list|()
expr_stmt|;
if|if
condition|(
name|writeLock
operator|!=
literal|null
condition|)
block|{
name|writeLock
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// release write lock
name|writeLock
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|hasChanges
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|startCommit
name|void
name|startCommit
parameter_list|()
block|{
name|rollbackHasChanges
operator|=
name|hasChanges
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subReaders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|subReaders
index|[
name|i
index|]
operator|.
name|startCommit
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|rollbackCommit
name|void
name|rollbackCommit
parameter_list|()
block|{
name|hasChanges
operator|=
name|rollbackHasChanges
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subReaders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|subReaders
index|[
name|i
index|]
operator|.
name|rollbackCommit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getUniqueTermCount
specifier|public
name|long
name|getUniqueTermCount
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|getCommitUserData
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getCommitUserData
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|segmentInfos
operator|.
name|getUserData
argument_list|()
return|;
block|}
comment|/**    * Check whether this IndexReader is still using the current (i.e., most recently committed) version of the index.  If    * a writer has committed any changes to the index since this reader was opened, this will return<code>false</code>,    * in which case you must open a new IndexReader in order    * to see the changes.  Use {@link IndexWriter#commit} to    * commit changes to the index.    *    * @throws CorruptIndexException if the index is corrupt    * @throws IOException           if there is a low-level IO error    */
annotation|@
name|Override
DECL|method|isCurrent
specifier|public
name|boolean
name|isCurrent
parameter_list|()
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|writer
operator|==
literal|null
operator|||
name|writer
operator|.
name|isClosed
argument_list|()
condition|)
block|{
comment|// we loaded SegmentInfos from the directory
return|return
name|SegmentInfos
operator|.
name|readCurrentVersion
argument_list|(
name|directory
argument_list|)
operator|==
name|segmentInfos
operator|.
name|getVersion
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|writer
operator|.
name|nrtIsCurrent
argument_list|(
name|segmentInfos
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|protected
specifier|synchronized
name|void
name|doClose
parameter_list|()
throws|throws
name|IOException
block|{
name|IOException
name|ioe
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subReaders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// try to close each reader, even if an exception is thrown
try|try
block|{
name|subReaders
index|[
name|i
index|]
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|ioe
operator|==
literal|null
condition|)
name|ioe
operator|=
name|e
expr_stmt|;
block|}
block|}
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
comment|// Since we just closed, writer may now be able to
comment|// delete unused files:
name|writer
operator|.
name|deletePendingFiles
argument_list|()
expr_stmt|;
block|}
comment|// throw the first exception
if|if
condition|(
name|ioe
operator|!=
literal|null
condition|)
throw|throw
name|ioe
throw|;
block|}
annotation|@
name|Override
DECL|method|getFieldNames
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getFieldNames
parameter_list|(
name|IndexReader
operator|.
name|FieldOption
name|fieldNames
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|getFieldNames
argument_list|(
name|fieldNames
argument_list|,
name|this
operator|.
name|subReaders
argument_list|)
return|;
block|}
DECL|method|getFieldNames
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|getFieldNames
parameter_list|(
name|IndexReader
operator|.
name|FieldOption
name|fieldNames
parameter_list|,
name|IndexReader
index|[]
name|subReaders
parameter_list|)
block|{
comment|// maintain a unique set of field names
name|Set
argument_list|<
name|String
argument_list|>
name|fieldSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexReader
name|reader
range|:
name|subReaders
control|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|names
init|=
name|reader
operator|.
name|getFieldNames
argument_list|(
name|fieldNames
argument_list|)
decl_stmt|;
name|fieldSet
operator|.
name|addAll
argument_list|(
name|names
argument_list|)
expr_stmt|;
block|}
return|return
name|fieldSet
return|;
block|}
annotation|@
name|Override
DECL|method|getTopReaderContext
specifier|public
name|ReaderContext
name|getTopReaderContext
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|topLevelReaderContext
return|;
block|}
annotation|@
name|Override
DECL|method|getSequentialSubReaders
specifier|public
name|IndexReader
index|[]
name|getSequentialSubReaders
parameter_list|()
block|{
return|return
name|subReaders
return|;
block|}
comment|/** Returns the directory this index resides in. */
annotation|@
name|Override
DECL|method|directory
specifier|public
name|Directory
name|directory
parameter_list|()
block|{
comment|// Don't ensureOpen here -- in certain cases, when a
comment|// cloned/reopened reader needs to commit, it may call
comment|// this method on the closed original reader
return|return
name|directory
return|;
block|}
annotation|@
name|Override
DECL|method|getTermInfosIndexDivisor
specifier|public
name|int
name|getTermInfosIndexDivisor
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|termInfosIndexDivisor
return|;
block|}
comment|/**    * Expert: return the IndexCommit that this reader has opened.    *<p/>    * @lucene.experimental    */
annotation|@
name|Override
DECL|method|getIndexCommit
specifier|public
name|IndexCommit
name|getIndexCommit
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
operator|new
name|ReaderCommit
argument_list|(
name|segmentInfos
argument_list|,
name|directory
argument_list|)
return|;
block|}
comment|/** @see org.apache.lucene.index.IndexReader#listCommits */
DECL|method|listCommits
specifier|public
specifier|static
name|List
argument_list|<
name|IndexCommit
argument_list|>
name|listCommits
parameter_list|(
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
index|[]
name|files
init|=
name|dir
operator|.
name|listAll
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|IndexCommit
argument_list|>
name|commits
init|=
operator|new
name|ArrayList
argument_list|<
name|IndexCommit
argument_list|>
argument_list|()
decl_stmt|;
name|SegmentInfos
name|latest
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|latest
operator|.
name|read
argument_list|(
name|dir
argument_list|)
expr_stmt|;
specifier|final
name|long
name|currentGen
init|=
name|latest
operator|.
name|getGeneration
argument_list|()
decl_stmt|;
name|commits
operator|.
name|add
argument_list|(
operator|new
name|ReaderCommit
argument_list|(
name|latest
argument_list|,
name|dir
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|fileName
init|=
name|files
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|fileName
operator|.
name|startsWith
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS
argument_list|)
operator|&&
operator|!
name|fileName
operator|.
name|equals
argument_list|(
name|IndexFileNames
operator|.
name|SEGMENTS_GEN
argument_list|)
operator|&&
name|SegmentInfos
operator|.
name|generationFromSegmentsFileName
argument_list|(
name|fileName
argument_list|)
operator|<
name|currentGen
condition|)
block|{
name|SegmentInfos
name|sis
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
try|try
block|{
comment|// IOException allowed to throw there, in case
comment|// segments_N is corrupt
name|sis
operator|.
name|read
argument_list|(
name|dir
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
comment|// LUCENE-948: on NFS (and maybe others), if
comment|// you have writers switching back and forth
comment|// between machines, it's very likely that the
comment|// dir listing will be stale and will claim a
comment|// file segments_X exists when in fact it
comment|// doesn't.  So, we catch this and handle it
comment|// as if the file does not exist
name|sis
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|sis
operator|!=
literal|null
condition|)
name|commits
operator|.
name|add
argument_list|(
operator|new
name|ReaderCommit
argument_list|(
name|sis
argument_list|,
name|dir
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Ensure that the commit points are sorted in ascending order.
name|Collections
operator|.
name|sort
argument_list|(
name|commits
argument_list|)
expr_stmt|;
return|return
name|commits
return|;
block|}
DECL|class|ReaderCommit
specifier|private
specifier|static
specifier|final
class|class
name|ReaderCommit
extends|extends
name|IndexCommit
block|{
DECL|field|segmentsFileName
specifier|private
name|String
name|segmentsFileName
decl_stmt|;
DECL|field|files
name|Collection
argument_list|<
name|String
argument_list|>
name|files
decl_stmt|;
DECL|field|dir
name|Directory
name|dir
decl_stmt|;
DECL|field|generation
name|long
name|generation
decl_stmt|;
DECL|field|version
name|long
name|version
decl_stmt|;
DECL|field|userData
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|userData
decl_stmt|;
DECL|field|segmentCount
specifier|private
specifier|final
name|int
name|segmentCount
decl_stmt|;
DECL|method|ReaderCommit
name|ReaderCommit
parameter_list|(
name|SegmentInfos
name|infos
parameter_list|,
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|segmentsFileName
operator|=
name|infos
operator|.
name|getCurrentSegmentFileName
argument_list|()
expr_stmt|;
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|userData
operator|=
name|infos
operator|.
name|getUserData
argument_list|()
expr_stmt|;
name|files
operator|=
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|infos
operator|.
name|files
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|version
operator|=
name|infos
operator|.
name|getVersion
argument_list|()
expr_stmt|;
name|generation
operator|=
name|infos
operator|.
name|getGeneration
argument_list|()
expr_stmt|;
name|segmentCount
operator|=
name|infos
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DirectoryReader.ReaderCommit("
operator|+
name|segmentsFileName
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|getSegmentCount
specifier|public
name|int
name|getSegmentCount
parameter_list|()
block|{
return|return
name|segmentCount
return|;
block|}
annotation|@
name|Override
DECL|method|getSegmentsFileName
specifier|public
name|String
name|getSegmentsFileName
parameter_list|()
block|{
return|return
name|segmentsFileName
return|;
block|}
annotation|@
name|Override
DECL|method|getFileNames
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getFileNames
parameter_list|()
block|{
return|return
name|files
return|;
block|}
annotation|@
name|Override
DECL|method|getDirectory
specifier|public
name|Directory
name|getDirectory
parameter_list|()
block|{
return|return
name|dir
return|;
block|}
annotation|@
name|Override
DECL|method|getVersion
specifier|public
name|long
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
annotation|@
name|Override
DECL|method|getGeneration
specifier|public
name|long
name|getGeneration
parameter_list|()
block|{
return|return
name|generation
return|;
block|}
annotation|@
name|Override
DECL|method|isDeleted
specifier|public
name|boolean
name|isDeleted
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getUserData
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getUserData
parameter_list|()
block|{
return|return
name|userData
return|;
block|}
annotation|@
name|Override
DECL|method|delete
specifier|public
name|void
name|delete
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This IndexCommit does not support deletions"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|perDocValues
specifier|public
name|PerDocValues
name|perDocValues
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"please use MultiPerDocValues#getPerDocs, or wrap your IndexReader with SlowMultiReaderWrapper, if you really need a top level Fields"
argument_list|)
throw|;
block|}
block|}
end_class
end_unit
