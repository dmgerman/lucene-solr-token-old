begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/** Remaps docIDs after a merge has completed, where the  *  merged segments had at least one deletion.  This is used  *  to renumber the buffered deletes in IndexWriter when a  *  merge of segments with deletions commits. */
end_comment
begin_class
DECL|class|MergeDocIDRemapper
specifier|final
class|class
name|MergeDocIDRemapper
block|{
DECL|field|starts
name|int
index|[]
name|starts
decl_stmt|;
comment|// used for binary search of mapped docID
DECL|field|newStarts
name|int
index|[]
name|newStarts
decl_stmt|;
comment|// starts, minus the deletes
DECL|field|docMaps
name|int
index|[]
index|[]
name|docMaps
decl_stmt|;
comment|// maps docIDs in the merged set
DECL|field|minDocID
name|int
name|minDocID
decl_stmt|;
comment|// minimum docID that needs renumbering
DECL|field|maxDocID
name|int
name|maxDocID
decl_stmt|;
comment|// 1+ the max docID that needs renumbering
DECL|field|docShift
name|int
name|docShift
decl_stmt|;
comment|// total # deleted docs that were compacted by this merge
DECL|method|MergeDocIDRemapper
specifier|public
name|MergeDocIDRemapper
parameter_list|(
name|SegmentInfos
name|infos
parameter_list|,
name|int
index|[]
index|[]
name|docMaps
parameter_list|,
name|int
index|[]
name|delCounts
parameter_list|,
name|MergePolicy
operator|.
name|OneMerge
name|merge
parameter_list|,
name|int
name|mergedDocCount
parameter_list|)
block|{
name|this
operator|.
name|docMaps
operator|=
name|docMaps
expr_stmt|;
name|SegmentInfo
name|firstSegment
init|=
name|merge
operator|.
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|SegmentInfo
name|info
init|=
name|infos
operator|.
name|info
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|equals
argument_list|(
name|firstSegment
argument_list|)
condition|)
break|break;
name|minDocID
operator|+=
name|info
operator|.
name|docCount
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|int
name|numDocs
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|docMaps
operator|.
name|length
condition|;
name|i
operator|++
operator|,
name|j
operator|++
control|)
block|{
name|numDocs
operator|+=
name|infos
operator|.
name|info
argument_list|(
name|i
argument_list|)
operator|.
name|docCount
expr_stmt|;
assert|assert
name|infos
operator|.
name|info
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|merge
operator|.
name|segments
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
assert|;
block|}
name|maxDocID
operator|=
name|minDocID
operator|+
name|numDocs
expr_stmt|;
name|starts
operator|=
operator|new
name|int
index|[
name|docMaps
operator|.
name|length
index|]
expr_stmt|;
name|newStarts
operator|=
operator|new
name|int
index|[
name|docMaps
operator|.
name|length
index|]
expr_stmt|;
name|starts
index|[
literal|0
index|]
operator|=
name|minDocID
expr_stmt|;
name|newStarts
index|[
literal|0
index|]
operator|=
name|minDocID
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|1
init|;
name|i
operator|<
name|docMaps
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|lastDocCount
init|=
name|merge
operator|.
name|segments
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|.
name|docCount
decl_stmt|;
name|starts
index|[
name|i
index|]
operator|=
name|starts
index|[
name|i
operator|-
literal|1
index|]
operator|+
name|lastDocCount
expr_stmt|;
name|newStarts
index|[
name|i
index|]
operator|=
name|newStarts
index|[
name|i
operator|-
literal|1
index|]
operator|+
name|lastDocCount
operator|-
name|delCounts
index|[
name|i
operator|-
literal|1
index|]
expr_stmt|;
block|}
name|docShift
operator|=
name|numDocs
operator|-
name|mergedDocCount
expr_stmt|;
comment|// There are rare cases when docShift is 0.  It happens
comment|// if you try to delete a docID that's out of bounds,
comment|// because the SegmentReader still allocates deletedDocs
comment|// and pretends it has deletions ... so we can't make
comment|// this assert here
comment|// assert docShift> 0;
comment|// Make sure it all adds up:
assert|assert
name|docShift
operator|==
name|maxDocID
operator|-
operator|(
name|newStarts
index|[
name|docMaps
operator|.
name|length
operator|-
literal|1
index|]
operator|+
name|merge
operator|.
name|segments
operator|.
name|get
argument_list|(
name|docMaps
operator|.
name|length
operator|-
literal|1
argument_list|)
operator|.
name|docCount
operator|-
name|delCounts
index|[
name|docMaps
operator|.
name|length
operator|-
literal|1
index|]
operator|)
assert|;
block|}
DECL|method|remap
specifier|public
name|int
name|remap
parameter_list|(
name|int
name|oldDocID
parameter_list|)
block|{
if|if
condition|(
name|oldDocID
operator|<
name|minDocID
condition|)
comment|// Unaffected by merge
return|return
name|oldDocID
return|;
elseif|else
if|if
condition|(
name|oldDocID
operator|>=
name|maxDocID
condition|)
comment|// This doc was "after" the merge, so simple shift
return|return
name|oldDocID
operator|-
name|docShift
return|;
else|else
block|{
comment|// Binary search to locate this document& find its new docID
name|int
name|lo
init|=
literal|0
decl_stmt|;
comment|// search starts array
name|int
name|hi
init|=
name|docMaps
operator|.
name|length
operator|-
literal|1
decl_stmt|;
comment|// for first element less
while|while
condition|(
name|hi
operator|>=
name|lo
condition|)
block|{
name|int
name|mid
init|=
operator|(
name|lo
operator|+
name|hi
operator|)
operator|>>>
literal|1
decl_stmt|;
name|int
name|midValue
init|=
name|starts
index|[
name|mid
index|]
decl_stmt|;
if|if
condition|(
name|oldDocID
operator|<
name|midValue
condition|)
name|hi
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|oldDocID
operator|>
name|midValue
condition|)
name|lo
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
else|else
block|{
comment|// found a match
while|while
condition|(
name|mid
operator|+
literal|1
operator|<
name|docMaps
operator|.
name|length
operator|&&
name|starts
index|[
name|mid
operator|+
literal|1
index|]
operator|==
name|midValue
condition|)
block|{
name|mid
operator|++
expr_stmt|;
comment|// scan to last match
block|}
if|if
condition|(
name|docMaps
index|[
name|mid
index|]
operator|!=
literal|null
condition|)
return|return
name|newStarts
index|[
name|mid
index|]
operator|+
name|docMaps
index|[
name|mid
index|]
index|[
name|oldDocID
operator|-
name|starts
index|[
name|mid
index|]
index|]
return|;
else|else
return|return
name|newStarts
index|[
name|mid
index|]
operator|+
name|oldDocID
operator|-
name|starts
index|[
name|mid
index|]
return|;
block|}
block|}
if|if
condition|(
name|docMaps
index|[
name|hi
index|]
operator|!=
literal|null
condition|)
return|return
name|newStarts
index|[
name|hi
index|]
operator|+
name|docMaps
index|[
name|hi
index|]
index|[
name|oldDocID
operator|-
name|starts
index|[
name|hi
index|]
index|]
return|;
else|else
return|return
name|newStarts
index|[
name|hi
index|]
operator|+
name|oldDocID
operator|-
name|starts
index|[
name|hi
index|]
return|;
block|}
block|}
block|}
end_class
end_unit
