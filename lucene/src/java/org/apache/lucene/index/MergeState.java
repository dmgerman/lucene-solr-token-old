begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PayloadProcessorProvider
operator|.
name|DirPayloadProcessor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PayloadProcessorProvider
operator|.
name|PayloadProcessor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|InfoStream
import|;
end_import
begin_comment
comment|/** Holds common state used during segment merging  *  * @lucene.experimental */
end_comment
begin_class
DECL|class|MergeState
specifier|public
class|class
name|MergeState
block|{
DECL|class|IndexReaderAndLiveDocs
specifier|public
specifier|static
class|class
name|IndexReaderAndLiveDocs
block|{
DECL|field|reader
specifier|public
specifier|final
name|IndexReader
name|reader
decl_stmt|;
DECL|field|liveDocs
specifier|public
specifier|final
name|Bits
name|liveDocs
decl_stmt|;
DECL|method|IndexReaderAndLiveDocs
specifier|public
name|IndexReaderAndLiveDocs
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|Bits
name|liveDocs
parameter_list|)
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|liveDocs
operator|=
name|liveDocs
expr_stmt|;
block|}
block|}
DECL|field|fieldInfos
specifier|public
name|FieldInfos
name|fieldInfos
decl_stmt|;
DECL|field|readers
specifier|public
name|List
argument_list|<
name|IndexReaderAndLiveDocs
argument_list|>
name|readers
decl_stmt|;
comment|// Readers& liveDocs being merged
DECL|field|docMaps
specifier|public
name|int
index|[]
index|[]
name|docMaps
decl_stmt|;
comment|// Maps docIDs around deletions
DECL|field|docBase
specifier|public
name|int
index|[]
name|docBase
decl_stmt|;
comment|// New docID base per reader
DECL|field|mergedDocCount
specifier|public
name|int
name|mergedDocCount
decl_stmt|;
comment|// Total # merged docs
DECL|field|checkAbort
specifier|public
name|CheckAbort
name|checkAbort
decl_stmt|;
DECL|field|infoStream
specifier|public
name|InfoStream
name|infoStream
decl_stmt|;
comment|// Updated per field;
DECL|field|fieldInfo
specifier|public
name|FieldInfo
name|fieldInfo
decl_stmt|;
comment|// Used to process payloads
comment|// TODO: this is a FactoryFactory here basically
comment|// and we could make a codec(wrapper) to do all of this privately so IW is uninvolved
DECL|field|payloadProcessorProvider
specifier|public
name|PayloadProcessorProvider
name|payloadProcessorProvider
decl_stmt|;
DECL|field|dirPayloadProcessor
specifier|public
name|DirPayloadProcessor
index|[]
name|dirPayloadProcessor
decl_stmt|;
DECL|field|currentPayloadProcessor
specifier|public
name|PayloadProcessor
index|[]
name|currentPayloadProcessor
decl_stmt|;
comment|// TODO: get rid of this? it tells you which segments are 'aligned' (e.g. for bulk merging)
comment|// but is this really so expensive to compute again in different components, versus once in SM?
DECL|field|matchingSegmentReaders
specifier|public
name|SegmentReader
index|[]
name|matchingSegmentReaders
decl_stmt|;
DECL|field|matchedCount
specifier|public
name|int
name|matchedCount
decl_stmt|;
DECL|class|CheckAbort
specifier|public
specifier|static
class|class
name|CheckAbort
block|{
DECL|field|workCount
specifier|private
name|double
name|workCount
decl_stmt|;
DECL|field|merge
specifier|private
name|MergePolicy
operator|.
name|OneMerge
name|merge
decl_stmt|;
DECL|field|dir
specifier|private
name|Directory
name|dir
decl_stmt|;
DECL|method|CheckAbort
specifier|public
name|CheckAbort
parameter_list|(
name|MergePolicy
operator|.
name|OneMerge
name|merge
parameter_list|,
name|Directory
name|dir
parameter_list|)
block|{
name|this
operator|.
name|merge
operator|=
name|merge
expr_stmt|;
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
block|}
comment|/**      * Records the fact that roughly units amount of work      * have been done since this method was last called.      * When adding time-consuming code into SegmentMerger,      * you should test different values for units to ensure      * that the time in between calls to merge.checkAborted      * is up to ~ 1 second.      */
DECL|method|work
specifier|public
name|void
name|work
parameter_list|(
name|double
name|units
parameter_list|)
throws|throws
name|MergePolicy
operator|.
name|MergeAbortedException
block|{
name|workCount
operator|+=
name|units
expr_stmt|;
if|if
condition|(
name|workCount
operator|>=
literal|10000.0
condition|)
block|{
name|merge
operator|.
name|checkAborted
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|workCount
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|/** If you use this: IW.close(false) cannot abort your merge!      * @lucene.internal */
DECL|field|NONE
specifier|static
specifier|final
name|MergeState
operator|.
name|CheckAbort
name|NONE
init|=
operator|new
name|MergeState
operator|.
name|CheckAbort
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|work
parameter_list|(
name|double
name|units
parameter_list|)
throws|throws
name|MergePolicy
operator|.
name|MergeAbortedException
block|{
comment|// do nothing
block|}
block|}
decl_stmt|;
block|}
block|}
end_class
end_unit
