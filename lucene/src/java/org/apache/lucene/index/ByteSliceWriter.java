begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataOutput
import|;
end_import
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/**  * Class to write byte streams into slices of shared  * byte[].  This is used by DocumentsWriter to hold the  * posting list for many terms in RAM.  */
end_comment
begin_class
DECL|class|ByteSliceWriter
specifier|final
class|class
name|ByteSliceWriter
extends|extends
name|DataOutput
block|{
DECL|field|slice
specifier|private
name|byte
index|[]
name|slice
decl_stmt|;
DECL|field|upto
specifier|private
name|int
name|upto
decl_stmt|;
DECL|field|pool
specifier|private
specifier|final
name|ByteBlockPool
name|pool
decl_stmt|;
DECL|field|offset0
name|int
name|offset0
decl_stmt|;
DECL|method|ByteSliceWriter
specifier|public
name|ByteSliceWriter
parameter_list|(
name|ByteBlockPool
name|pool
parameter_list|)
block|{
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
block|}
comment|/**    * Set up the writer to write at address.    */
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|int
name|address
parameter_list|)
block|{
name|slice
operator|=
name|pool
operator|.
name|buffers
index|[
name|address
operator|>>
name|DocumentsWriterRAMAllocator
operator|.
name|BYTE_BLOCK_SHIFT
index|]
expr_stmt|;
assert|assert
name|slice
operator|!=
literal|null
assert|;
name|upto
operator|=
name|address
operator|&
name|DocumentsWriterRAMAllocator
operator|.
name|BYTE_BLOCK_MASK
expr_stmt|;
name|offset0
operator|=
name|address
expr_stmt|;
assert|assert
name|upto
operator|<
name|slice
operator|.
name|length
assert|;
block|}
comment|/** Write byte into byte slice stream */
annotation|@
name|Override
DECL|method|writeByte
specifier|public
name|void
name|writeByte
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
assert|assert
name|slice
operator|!=
literal|null
assert|;
if|if
condition|(
name|slice
index|[
name|upto
index|]
operator|!=
literal|0
condition|)
block|{
name|upto
operator|=
name|pool
operator|.
name|allocSlice
argument_list|(
name|slice
argument_list|,
name|upto
argument_list|)
expr_stmt|;
name|slice
operator|=
name|pool
operator|.
name|buffer
expr_stmt|;
name|offset0
operator|=
name|pool
operator|.
name|byteOffset
expr_stmt|;
assert|assert
name|slice
operator|!=
literal|null
assert|;
block|}
name|slice
index|[
name|upto
operator|++
index|]
operator|=
name|b
expr_stmt|;
assert|assert
name|upto
operator|!=
name|slice
operator|.
name|length
assert|;
block|}
annotation|@
name|Override
DECL|method|writeBytes
specifier|public
name|void
name|writeBytes
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|len
parameter_list|)
block|{
specifier|final
name|int
name|offsetEnd
init|=
name|offset
operator|+
name|len
decl_stmt|;
while|while
condition|(
name|offset
operator|<
name|offsetEnd
condition|)
block|{
if|if
condition|(
name|slice
index|[
name|upto
index|]
operator|!=
literal|0
condition|)
block|{
comment|// End marker
name|upto
operator|=
name|pool
operator|.
name|allocSlice
argument_list|(
name|slice
argument_list|,
name|upto
argument_list|)
expr_stmt|;
name|slice
operator|=
name|pool
operator|.
name|buffer
expr_stmt|;
name|offset0
operator|=
name|pool
operator|.
name|byteOffset
expr_stmt|;
block|}
name|slice
index|[
name|upto
operator|++
index|]
operator|=
name|b
index|[
name|offset
operator|++
index|]
expr_stmt|;
assert|assert
name|upto
operator|!=
name|slice
operator|.
name|length
assert|;
block|}
block|}
DECL|method|getAddress
specifier|public
name|int
name|getAddress
parameter_list|()
block|{
return|return
name|upto
operator|+
operator|(
name|offset0
operator|&
name|DocumentsWriterRAMAllocator
operator|.
name|BYTE_BLOCK_NOT_MASK
operator|)
return|;
block|}
block|}
end_class
end_unit
