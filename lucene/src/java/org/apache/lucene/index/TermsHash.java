begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_comment
comment|/** This class implements {@link InvertedDocConsumer}, which  *  is passed each token produced by the analyzer on each  *  field.  It stores these tokens in a hash table, and  *  allocates separate byte streams per token.  Consumers of  *  this class, eg {@link FreqProxTermsWriter} and {@link  *  TermVectorsTermsWriter}, write their own byte streams  *  under each term.  */
end_comment
begin_class
DECL|class|TermsHash
specifier|final
class|class
name|TermsHash
extends|extends
name|InvertedDocConsumer
block|{
DECL|field|consumer
specifier|final
name|TermsHashConsumer
name|consumer
decl_stmt|;
DECL|field|nextTermsHash
specifier|final
name|TermsHash
name|nextTermsHash
decl_stmt|;
DECL|field|docWriter
specifier|final
name|DocumentsWriter
name|docWriter
decl_stmt|;
DECL|field|trackAllocations
name|boolean
name|trackAllocations
decl_stmt|;
DECL|method|TermsHash
specifier|public
name|TermsHash
parameter_list|(
specifier|final
name|DocumentsWriter
name|docWriter
parameter_list|,
name|boolean
name|trackAllocations
parameter_list|,
specifier|final
name|TermsHashConsumer
name|consumer
parameter_list|,
specifier|final
name|TermsHash
name|nextTermsHash
parameter_list|)
block|{
name|this
operator|.
name|docWriter
operator|=
name|docWriter
expr_stmt|;
name|this
operator|.
name|consumer
operator|=
name|consumer
expr_stmt|;
name|this
operator|.
name|nextTermsHash
operator|=
name|nextTermsHash
expr_stmt|;
name|this
operator|.
name|trackAllocations
operator|=
name|trackAllocations
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addThread
name|InvertedDocConsumerPerThread
name|addThread
parameter_list|(
name|DocInverterPerThread
name|docInverterPerThread
parameter_list|)
block|{
return|return
operator|new
name|TermsHashPerThread
argument_list|(
name|docInverterPerThread
argument_list|,
name|this
argument_list|,
name|nextTermsHash
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|addThread
name|TermsHashPerThread
name|addThread
parameter_list|(
name|DocInverterPerThread
name|docInverterPerThread
parameter_list|,
name|TermsHashPerThread
name|primaryPerThread
parameter_list|)
block|{
return|return
operator|new
name|TermsHashPerThread
argument_list|(
name|docInverterPerThread
argument_list|,
name|this
argument_list|,
name|nextTermsHash
argument_list|,
name|primaryPerThread
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setFieldInfos
name|void
name|setFieldInfos
parameter_list|(
name|FieldInfos
name|fieldInfos
parameter_list|)
block|{
name|this
operator|.
name|fieldInfos
operator|=
name|fieldInfos
expr_stmt|;
name|consumer
operator|.
name|setFieldInfos
argument_list|(
name|fieldInfos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|abort
specifier|public
name|void
name|abort
parameter_list|()
block|{
name|consumer
operator|.
name|abort
argument_list|()
expr_stmt|;
if|if
condition|(
name|nextTermsHash
operator|!=
literal|null
condition|)
name|nextTermsHash
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|flush
specifier|synchronized
name|void
name|flush
parameter_list|(
name|Map
argument_list|<
name|InvertedDocConsumerPerThread
argument_list|,
name|Collection
argument_list|<
name|InvertedDocConsumerPerField
argument_list|>
argument_list|>
name|threadsAndFields
parameter_list|,
specifier|final
name|SegmentWriteState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|TermsHashConsumerPerThread
argument_list|,
name|Collection
argument_list|<
name|TermsHashConsumerPerField
argument_list|>
argument_list|>
name|childThreadsAndFields
init|=
operator|new
name|HashMap
argument_list|<
name|TermsHashConsumerPerThread
argument_list|,
name|Collection
argument_list|<
name|TermsHashConsumerPerField
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|InvertedDocConsumerPerThread
argument_list|,
name|Collection
argument_list|<
name|InvertedDocConsumerPerField
argument_list|>
argument_list|>
name|nextThreadsAndFields
decl_stmt|;
if|if
condition|(
name|nextTermsHash
operator|!=
literal|null
condition|)
name|nextThreadsAndFields
operator|=
operator|new
name|HashMap
argument_list|<
name|InvertedDocConsumerPerThread
argument_list|,
name|Collection
argument_list|<
name|InvertedDocConsumerPerField
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
else|else
name|nextThreadsAndFields
operator|=
literal|null
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|InvertedDocConsumerPerThread
argument_list|,
name|Collection
argument_list|<
name|InvertedDocConsumerPerField
argument_list|>
argument_list|>
name|entry
range|:
name|threadsAndFields
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TermsHashPerThread
name|perThread
init|=
operator|(
name|TermsHashPerThread
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|InvertedDocConsumerPerField
argument_list|>
name|fields
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|InvertedDocConsumerPerField
argument_list|>
name|fieldsIt
init|=
name|fields
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|TermsHashConsumerPerField
argument_list|>
name|childFields
init|=
operator|new
name|HashSet
argument_list|<
name|TermsHashConsumerPerField
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|InvertedDocConsumerPerField
argument_list|>
name|nextChildFields
decl_stmt|;
if|if
condition|(
name|nextTermsHash
operator|!=
literal|null
condition|)
name|nextChildFields
operator|=
operator|new
name|HashSet
argument_list|<
name|InvertedDocConsumerPerField
argument_list|>
argument_list|()
expr_stmt|;
else|else
name|nextChildFields
operator|=
literal|null
expr_stmt|;
while|while
condition|(
name|fieldsIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|TermsHashPerField
name|perField
init|=
operator|(
name|TermsHashPerField
operator|)
name|fieldsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|childFields
operator|.
name|add
argument_list|(
name|perField
operator|.
name|consumer
argument_list|)
expr_stmt|;
if|if
condition|(
name|nextTermsHash
operator|!=
literal|null
condition|)
name|nextChildFields
operator|.
name|add
argument_list|(
name|perField
operator|.
name|nextPerField
argument_list|)
expr_stmt|;
block|}
name|childThreadsAndFields
operator|.
name|put
argument_list|(
name|perThread
operator|.
name|consumer
argument_list|,
name|childFields
argument_list|)
expr_stmt|;
if|if
condition|(
name|nextTermsHash
operator|!=
literal|null
condition|)
name|nextThreadsAndFields
operator|.
name|put
argument_list|(
name|perThread
operator|.
name|nextPerThread
argument_list|,
name|nextChildFields
argument_list|)
expr_stmt|;
block|}
name|consumer
operator|.
name|flush
argument_list|(
name|childThreadsAndFields
argument_list|,
name|state
argument_list|)
expr_stmt|;
if|if
condition|(
name|nextTermsHash
operator|!=
literal|null
condition|)
name|nextTermsHash
operator|.
name|flush
argument_list|(
name|nextThreadsAndFields
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|freeRAM
specifier|synchronized
specifier|public
name|boolean
name|freeRAM
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class
end_unit
