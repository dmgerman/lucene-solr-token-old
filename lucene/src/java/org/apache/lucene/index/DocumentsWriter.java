begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FilterDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License. You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_class
DECL|class|DocumentsWriter
specifier|final
class|class
name|DocumentsWriter
block|{
DECL|field|sequenceID
specifier|private
name|long
name|sequenceID
decl_stmt|;
DECL|field|numDocumentsWriterPerThreads
specifier|private
name|int
name|numDocumentsWriterPerThreads
decl_stmt|;
DECL|field|deletesInRAM
specifier|private
specifier|final
name|BufferedDeletesInRAM
name|deletesInRAM
init|=
operator|new
name|BufferedDeletesInRAM
argument_list|()
decl_stmt|;
DECL|field|threadPool
specifier|private
specifier|final
name|DocumentsWriterThreadPool
name|threadPool
decl_stmt|;
DECL|field|sequenceIDLock
specifier|private
specifier|final
name|Lock
name|sequenceIDLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|openFilesTrackingDirectory
specifier|private
specifier|final
name|Directory
name|openFilesTrackingDirectory
decl_stmt|;
DECL|field|indexWriter
specifier|final
name|IndexWriter
name|indexWriter
decl_stmt|;
DECL|field|config
specifier|final
name|IndexWriterConfig
name|config
decl_stmt|;
DECL|field|maxBufferedDocs
specifier|private
name|int
name|maxBufferedDocs
decl_stmt|;
DECL|field|maxBufferSizeMB
specifier|private
name|double
name|maxBufferSizeMB
decl_stmt|;
DECL|field|maxBufferedDeleteTerms
specifier|private
name|int
name|maxBufferedDeleteTerms
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
decl_stmt|;
DECL|field|numDocsInRAM
specifier|private
name|AtomicInteger
name|numDocsInRAM
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|ramUsed
specifier|private
name|AtomicLong
name|ramUsed
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|flushedSequenceID
specifier|private
name|long
name|flushedSequenceID
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|infoStream
specifier|private
specifier|final
name|PrintStream
name|infoStream
decl_stmt|;
DECL|field|minSequenceIDsPerThread
specifier|private
name|Map
argument_list|<
name|DocumentsWriterPerThread
argument_list|,
name|Long
argument_list|>
name|minSequenceIDsPerThread
init|=
operator|new
name|HashMap
argument_list|<
name|DocumentsWriterPerThread
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|DocumentsWriter
specifier|public
name|DocumentsWriter
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|IndexWriter
name|indexWriter
parameter_list|,
name|IndexWriterConfig
name|config
parameter_list|)
block|{
name|this
operator|.
name|openFilesTrackingDirectory
operator|=
operator|new
name|FilterDirectory
argument_list|(
name|directory
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|IndexOutput
name|createOutput
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|addOpenFile
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|createOutput
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
expr_stmt|;
comment|//this.openFilesTrackingDirectory = directory;
name|this
operator|.
name|indexWriter
operator|=
name|indexWriter
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|maxBufferedDocs
operator|=
name|config
operator|.
name|getMaxBufferedDocs
argument_list|()
expr_stmt|;
name|this
operator|.
name|threadPool
operator|=
name|config
operator|.
name|getIndexerThreadPool
argument_list|()
expr_stmt|;
name|this
operator|.
name|infoStream
operator|=
name|indexWriter
operator|.
name|getInfoStream
argument_list|()
expr_stmt|;
block|}
DECL|method|getMaxBufferedDocs
specifier|public
name|int
name|getMaxBufferedDocs
parameter_list|()
block|{
return|return
name|maxBufferedDocs
return|;
block|}
DECL|method|setMaxBufferedDocs
specifier|public
name|void
name|setMaxBufferedDocs
parameter_list|(
name|int
name|max
parameter_list|)
block|{
name|this
operator|.
name|maxBufferedDocs
operator|=
name|max
expr_stmt|;
block|}
DECL|method|getRAMBufferSizeMB
specifier|public
name|double
name|getRAMBufferSizeMB
parameter_list|()
block|{
return|return
name|maxBufferSizeMB
return|;
block|}
DECL|method|setRAMBufferSizeMB
specifier|public
name|void
name|setRAMBufferSizeMB
parameter_list|(
name|double
name|mb
parameter_list|)
block|{
name|this
operator|.
name|maxBufferSizeMB
operator|=
name|mb
expr_stmt|;
block|}
DECL|method|getMaxBufferedDeleteTerms
specifier|public
name|int
name|getMaxBufferedDeleteTerms
parameter_list|()
block|{
return|return
name|maxBufferedDeleteTerms
return|;
block|}
DECL|method|setMaxBufferedDeleteTerms
specifier|public
name|void
name|setMaxBufferedDeleteTerms
parameter_list|(
name|int
name|max
parameter_list|)
block|{
name|this
operator|.
name|maxBufferedDeleteTerms
operator|=
name|max
expr_stmt|;
block|}
DECL|method|nextSequenceID
specifier|private
specifier|final
name|long
name|nextSequenceID
parameter_list|()
block|{
return|return
name|sequenceID
operator|++
return|;
block|}
DECL|method|anyChanges
name|boolean
name|anyChanges
parameter_list|()
block|{
return|return
name|numDocsInRAM
operator|.
name|get
argument_list|()
operator|!=
literal|0
operator|||
name|deletesInRAM
operator|.
name|hasDeletes
argument_list|()
return|;
block|}
DECL|method|newDocumentsWriterPerThread
name|DocumentsWriterPerThread
name|newDocumentsWriterPerThread
parameter_list|()
block|{
name|DocumentsWriterPerThread
name|perThread
init|=
operator|new
name|DocumentsWriterPerThread
argument_list|(
name|openFilesTrackingDirectory
argument_list|,
name|this
argument_list|,
name|config
operator|.
name|getIndexingChain
argument_list|()
argument_list|)
decl_stmt|;
name|sequenceIDLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|numDocumentsWriterPerThreads
operator|++
expr_stmt|;
return|return
name|perThread
return|;
block|}
finally|finally
block|{
name|sequenceIDLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addDocument
name|long
name|addDocument
parameter_list|(
specifier|final
name|Document
name|doc
parameter_list|,
specifier|final
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
return|return
name|updateDocument
argument_list|(
literal|null
argument_list|,
name|doc
argument_list|,
name|analyzer
argument_list|)
return|;
block|}
DECL|class|UpdateResult
specifier|private
specifier|final
specifier|static
class|class
name|UpdateResult
block|{
DECL|field|sequenceID
name|long
name|sequenceID
decl_stmt|;
DECL|field|flushed
name|boolean
name|flushed
decl_stmt|;
DECL|method|UpdateResult
name|UpdateResult
parameter_list|(
name|long
name|sequenceID
parameter_list|)
block|{
name|this
operator|.
name|sequenceID
operator|=
name|sequenceID
expr_stmt|;
name|flushed
operator|=
literal|false
expr_stmt|;
block|}
block|}
DECL|method|updateDocument
name|long
name|updateDocument
parameter_list|(
specifier|final
name|Term
name|delTerm
parameter_list|,
specifier|final
name|Document
name|doc
parameter_list|,
specifier|final
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|UpdateResult
name|result
init|=
name|threadPool
operator|.
name|executePerThread
argument_list|(
name|this
argument_list|,
name|doc
argument_list|,
operator|new
name|DocumentsWriterThreadPool
operator|.
name|PerThreadTask
argument_list|<
name|UpdateResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|UpdateResult
name|process
parameter_list|(
specifier|final
name|DocumentsWriterPerThread
name|perThread
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|perThreadRAMUsedBeforeAdd
init|=
name|perThread
operator|.
name|numBytesUsed
decl_stmt|;
name|perThread
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
specifier|final
name|long
name|sequenceID
decl_stmt|;
name|sequenceIDLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|sequenceID
operator|=
name|nextSequenceID
argument_list|()
expr_stmt|;
if|if
condition|(
name|delTerm
operator|!=
literal|null
condition|)
block|{
name|deletesInRAM
operator|.
name|addDeleteTerm
argument_list|(
name|delTerm
argument_list|,
name|sequenceID
argument_list|,
name|numDocumentsWriterPerThreads
argument_list|)
expr_stmt|;
block|}
name|perThread
operator|.
name|commitDocument
argument_list|(
name|sequenceID
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|minSequenceIDsPerThread
operator|.
name|containsKey
argument_list|(
name|perThread
argument_list|)
condition|)
block|{
name|minSequenceIDsPerThread
operator|.
name|put
argument_list|(
name|perThread
argument_list|,
name|sequenceID
argument_list|)
expr_stmt|;
block|}
name|numDocsInRAM
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|sequenceIDLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|UpdateResult
name|result
init|=
operator|new
name|UpdateResult
argument_list|(
name|sequenceID
argument_list|)
decl_stmt|;
if|if
condition|(
name|finishAddDocument
argument_list|(
name|perThread
argument_list|,
name|perThreadRAMUsedBeforeAdd
argument_list|)
condition|)
block|{
name|result
operator|.
name|flushed
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|clearThreadBindings
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|result
operator|.
name|flushed
condition|)
block|{
name|indexWriter
operator|.
name|maybeMerge
argument_list|()
expr_stmt|;
block|}
return|return
name|result
operator|.
name|sequenceID
return|;
block|}
DECL|method|finishAddDocument
specifier|private
specifier|final
name|boolean
name|finishAddDocument
parameter_list|(
name|DocumentsWriterPerThread
name|perThread
parameter_list|,
name|long
name|perThreadRAMUsedBeforeAdd
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numDocsPerThread
init|=
name|perThread
operator|.
name|getNumDocsInRAM
argument_list|()
decl_stmt|;
name|boolean
name|flushed
init|=
name|maybeFlushPerThread
argument_list|(
name|perThread
argument_list|)
decl_stmt|;
if|if
condition|(
name|flushed
condition|)
block|{
name|int
name|oldValue
init|=
name|numDocsInRAM
operator|.
name|get
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|numDocsInRAM
operator|.
name|compareAndSet
argument_list|(
name|oldValue
argument_list|,
name|oldValue
operator|-
name|numDocsPerThread
argument_list|)
condition|)
block|{
name|oldValue
operator|=
name|numDocsInRAM
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|sequenceIDLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|minSequenceIDsPerThread
operator|.
name|remove
argument_list|(
name|perThread
argument_list|)
expr_stmt|;
name|updateFlushedSequenceID
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|sequenceIDLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
name|long
name|deltaRAM
init|=
name|perThread
operator|.
name|numBytesUsed
operator|-
name|perThreadRAMUsedBeforeAdd
decl_stmt|;
name|long
name|oldValue
init|=
name|ramUsed
operator|.
name|get
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|ramUsed
operator|.
name|compareAndSet
argument_list|(
name|oldValue
argument_list|,
name|oldValue
operator|+
name|deltaRAM
argument_list|)
condition|)
block|{
name|oldValue
operator|=
name|ramUsed
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
return|return
name|flushed
return|;
block|}
DECL|method|bufferDeleteTerms
name|long
name|bufferDeleteTerms
parameter_list|(
specifier|final
name|Term
index|[]
name|terms
parameter_list|)
throws|throws
name|IOException
block|{
name|sequenceIDLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
specifier|final
name|long
name|sequenceID
init|=
name|nextSequenceID
argument_list|()
decl_stmt|;
name|deletesInRAM
operator|.
name|addDeleteTerms
argument_list|(
name|terms
argument_list|,
name|sequenceID
argument_list|,
name|numDocumentsWriterPerThreads
argument_list|)
expr_stmt|;
return|return
name|sequenceID
return|;
block|}
finally|finally
block|{
name|sequenceIDLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|bufferDeleteTerm
name|long
name|bufferDeleteTerm
parameter_list|(
specifier|final
name|Term
name|term
parameter_list|)
throws|throws
name|IOException
block|{
name|sequenceIDLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
specifier|final
name|long
name|sequenceID
init|=
name|nextSequenceID
argument_list|()
decl_stmt|;
name|deletesInRAM
operator|.
name|addDeleteTerm
argument_list|(
name|term
argument_list|,
name|sequenceID
argument_list|,
name|numDocumentsWriterPerThreads
argument_list|)
expr_stmt|;
return|return
name|sequenceID
return|;
block|}
finally|finally
block|{
name|sequenceIDLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|bufferDeleteQueries
name|long
name|bufferDeleteQueries
parameter_list|(
specifier|final
name|Query
index|[]
name|queries
parameter_list|)
throws|throws
name|IOException
block|{
name|sequenceIDLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
specifier|final
name|long
name|sequenceID
init|=
name|nextSequenceID
argument_list|()
decl_stmt|;
for|for
control|(
name|Query
name|q
range|:
name|queries
control|)
block|{
name|deletesInRAM
operator|.
name|addDeleteQuery
argument_list|(
name|q
argument_list|,
name|sequenceID
argument_list|,
name|numDocumentsWriterPerThreads
argument_list|)
expr_stmt|;
block|}
return|return
name|sequenceID
return|;
block|}
finally|finally
block|{
name|sequenceIDLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|bufferDeleteQuery
name|long
name|bufferDeleteQuery
parameter_list|(
specifier|final
name|Query
name|query
parameter_list|)
throws|throws
name|IOException
block|{
name|sequenceIDLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
specifier|final
name|long
name|sequenceID
init|=
name|nextSequenceID
argument_list|()
decl_stmt|;
name|deletesInRAM
operator|.
name|addDeleteQuery
argument_list|(
name|query
argument_list|,
name|sequenceID
argument_list|,
name|numDocumentsWriterPerThreads
argument_list|)
expr_stmt|;
return|return
name|sequenceID
return|;
block|}
finally|finally
block|{
name|sequenceIDLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|updateFlushedSequenceID
specifier|private
specifier|final
name|void
name|updateFlushedSequenceID
parameter_list|()
block|{
name|long
name|newFlushedID
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|long
name|minSeqIDPerThread
range|:
name|minSequenceIDsPerThread
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|minSeqIDPerThread
operator|<
name|newFlushedID
condition|)
block|{
name|newFlushedID
operator|=
name|minSeqIDPerThread
expr_stmt|;
block|}
block|}
name|this
operator|.
name|flushedSequenceID
operator|=
name|newFlushedID
expr_stmt|;
block|}
DECL|method|flushAllThreads
specifier|final
name|boolean
name|flushAllThreads
parameter_list|(
specifier|final
name|boolean
name|flushDeletes
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|threadPool
operator|.
name|executeAllThreads
argument_list|(
name|this
argument_list|,
operator|new
name|DocumentsWriterThreadPool
operator|.
name|AllThreadsTask
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|process
parameter_list|(
name|Iterator
argument_list|<
name|DocumentsWriterPerThread
argument_list|>
name|threadsIterator
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|anythingFlushed
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|threadsIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DocumentsWriterPerThread
name|perThread
init|=
name|threadsIterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|perThread
operator|.
name|getNumDocsInRAM
argument_list|()
decl_stmt|;
comment|// Always flush docs if there are any
name|boolean
name|flushDocs
init|=
name|numDocs
operator|>
literal|0
decl_stmt|;
name|String
name|segment
init|=
name|perThread
operator|.
name|getSegment
argument_list|()
decl_stmt|;
comment|// If we are flushing docs, segment must not be null:
assert|assert
name|segment
operator|!=
literal|null
operator|||
operator|!
name|flushDocs
assert|;
if|if
condition|(
name|flushDocs
condition|)
block|{
name|SegmentInfo
name|newSegment
init|=
name|perThread
operator|.
name|flush
argument_list|()
decl_stmt|;
name|newSegment
operator|.
name|dir
operator|=
name|indexWriter
operator|.
name|getDirectory
argument_list|()
expr_stmt|;
if|if
condition|(
name|newSegment
operator|!=
literal|null
condition|)
block|{
name|anythingFlushed
operator|=
literal|true
expr_stmt|;
name|IndexWriter
operator|.
name|setDiagnostics
argument_list|(
name|newSegment
argument_list|,
literal|"flush"
argument_list|)
expr_stmt|;
name|finishFlushedSegment
argument_list|(
name|newSegment
argument_list|,
name|perThread
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|anythingFlushed
condition|)
block|{
name|clearThreadBindings
argument_list|()
expr_stmt|;
name|sequenceIDLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|flushedSequenceID
operator|=
name|sequenceID
expr_stmt|;
block|}
finally|finally
block|{
name|sequenceIDLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|numDocsInRAM
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flushDeletes
condition|)
block|{
name|deletesInRAM
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|anythingFlushed
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/** Build compound file for the segment we just flushed */
DECL|method|createCompoundFile
name|void
name|createCompoundFile
parameter_list|(
name|String
name|compoundFileName
parameter_list|,
name|DocumentsWriterPerThread
name|perThread
parameter_list|)
throws|throws
name|IOException
block|{
name|CompoundFileWriter
name|cfsWriter
init|=
operator|new
name|CompoundFileWriter
argument_list|(
name|openFilesTrackingDirectory
argument_list|,
name|compoundFileName
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|fileName
range|:
name|perThread
operator|.
name|flushState
operator|.
name|flushedFiles
control|)
block|{
name|cfsWriter
operator|.
name|addFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
comment|// Perform the merge
name|cfsWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|finishFlushedSegment
name|void
name|finishFlushedSegment
parameter_list|(
name|SegmentInfo
name|newSegment
parameter_list|,
name|DocumentsWriterPerThread
name|perThread
parameter_list|)
throws|throws
name|IOException
block|{
name|SegmentReader
name|reader
init|=
name|indexWriter
operator|.
name|readerPool
operator|.
name|get
argument_list|(
name|newSegment
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|applyDeletes
argument_list|(
name|reader
argument_list|,
name|newSegment
operator|.
name|getMinSequenceID
argument_list|()
argument_list|,
name|newSegment
operator|.
name|getMaxSequenceID
argument_list|()
argument_list|,
name|perThread
operator|.
name|sequenceIDs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|indexWriter
operator|.
name|readerPool
operator|.
name|release
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|indexWriter
operator|.
name|useCompoundFile
argument_list|(
name|newSegment
argument_list|)
condition|)
block|{
name|String
name|compoundFileName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|newSegment
operator|.
name|name
argument_list|,
literal|""
argument_list|,
name|IndexFileNames
operator|.
name|COMPOUND_FILE_EXTENSION
argument_list|)
decl_stmt|;
name|message
argument_list|(
literal|"creating compound file "
operator|+
name|compoundFileName
argument_list|)
expr_stmt|;
comment|// Now build compound file
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|createCompoundFile
argument_list|(
name|compoundFileName
argument_list|,
name|perThread
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|message
argument_list|(
literal|"hit exception "
operator|+
literal|"reating compound file for newly flushed segment "
operator|+
name|newSegment
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
name|indexWriter
operator|.
name|deleter
operator|.
name|deleteFile
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|newSegment
operator|.
name|name
argument_list|,
literal|""
argument_list|,
name|IndexFileNames
operator|.
name|COMPOUND_FILE_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|file
range|:
name|perThread
operator|.
name|flushState
operator|.
name|flushedFiles
control|)
block|{
name|indexWriter
operator|.
name|deleter
operator|.
name|deleteFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|file
range|:
name|perThread
operator|.
name|flushState
operator|.
name|flushedFiles
control|)
block|{
name|indexWriter
operator|.
name|deleter
operator|.
name|deleteFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|newSegment
operator|.
name|setUseCompoundFile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|openFiles
init|)
block|{
name|openFiles
operator|.
name|remove
argument_list|(
name|compoundFileName
argument_list|)
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|openFiles
init|)
block|{
name|openFiles
operator|.
name|removeAll
argument_list|(
name|perThread
operator|.
name|flushState
operator|.
name|flushedFiles
argument_list|)
expr_stmt|;
block|}
name|indexWriter
operator|.
name|addNewSegment
argument_list|(
name|newSegment
argument_list|)
expr_stmt|;
block|}
comment|// Returns true if an abort is in progress
DECL|method|pauseAllThreads
name|void
name|pauseAllThreads
parameter_list|()
block|{
name|threadPool
operator|.
name|pauseAllThreads
argument_list|()
expr_stmt|;
block|}
DECL|method|resumeAllThreads
name|void
name|resumeAllThreads
parameter_list|()
block|{
name|threadPool
operator|.
name|resumeAllThreads
argument_list|()
expr_stmt|;
block|}
DECL|method|close
name|void
name|close
parameter_list|()
block|{
name|sequenceIDLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|closed
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|sequenceIDLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|ensureOpen
specifier|private
name|void
name|ensureOpen
parameter_list|()
throws|throws
name|AlreadyClosedException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|AlreadyClosedException
argument_list|(
literal|"this IndexWriter is closed"
argument_list|)
throw|;
block|}
block|}
DECL|method|maybeFlushPerThread
specifier|private
specifier|final
name|boolean
name|maybeFlushPerThread
parameter_list|(
name|DocumentsWriterPerThread
name|perThread
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|perThread
operator|.
name|getNumDocsInRAM
argument_list|()
operator|==
name|maxBufferedDocs
condition|)
block|{
name|flushSegment
argument_list|(
name|perThread
argument_list|)
expr_stmt|;
assert|assert
name|perThread
operator|.
name|getNumDocsInRAM
argument_list|()
operator|==
literal|0
assert|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|flushSegment
specifier|private
name|boolean
name|flushSegment
parameter_list|(
name|DocumentsWriterPerThread
name|perThread
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|perThread
operator|.
name|getNumDocsInRAM
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SegmentInfo
name|newSegment
init|=
name|perThread
operator|.
name|flush
argument_list|()
decl_stmt|;
name|newSegment
operator|.
name|dir
operator|=
name|indexWriter
operator|.
name|getDirectory
argument_list|()
expr_stmt|;
name|finishFlushedSegment
argument_list|(
name|newSegment
argument_list|,
name|perThread
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|abort
name|void
name|abort
parameter_list|()
throws|throws
name|IOException
block|{
name|threadPool
operator|.
name|abort
argument_list|(
operator|new
name|DocumentsWriterThreadPool
operator|.
name|AbortTask
argument_list|()
block|{
annotation|@
name|Override
name|void
name|abort
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|abortedFiles
operator|=
name|openFiles
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|abortedFiles
operator|=
literal|null
expr_stmt|;
block|}
name|deletesInRAM
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// nocommit
comment|//        deletesFlushed.clear();
name|openFiles
operator|.
name|clear
argument_list|()
expr_stmt|;
name|deletesInRAM
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|field|openFiles
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|openFiles
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|abortedFiles
specifier|private
name|Collection
argument_list|<
name|String
argument_list|>
name|abortedFiles
decl_stmt|;
comment|// List of files that were written before last abort()
comment|/*    * Returns Collection of files in use by this instance,    * including any flushed segments.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|openFiles
specifier|private
name|Collection
argument_list|<
name|String
argument_list|>
name|openFiles
parameter_list|()
block|{
synchronized|synchronized
init|(
name|openFiles
init|)
block|{
return|return
call|(
name|Set
argument_list|<
name|String
argument_list|>
call|)
argument_list|(
operator|(
name|HashSet
argument_list|<
name|String
argument_list|>
operator|)
name|openFiles
argument_list|)
operator|.
name|clone
argument_list|()
return|;
block|}
block|}
DECL|method|addOpenFile
name|void
name|addOpenFile
parameter_list|(
name|String
name|file
parameter_list|)
block|{
synchronized|synchronized
init|(
name|openFiles
init|)
block|{
name|openFiles
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removeOpenFile
name|void
name|removeOpenFile
parameter_list|(
name|String
name|file
parameter_list|)
block|{
synchronized|synchronized
init|(
name|openFiles
init|)
block|{
name|openFiles
operator|.
name|remove
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|abortedFiles
name|Collection
argument_list|<
name|String
argument_list|>
name|abortedFiles
parameter_list|()
block|{
return|return
name|abortedFiles
return|;
block|}
DECL|method|hasDeletes
name|boolean
name|hasDeletes
parameter_list|()
block|{
return|return
name|deletesInRAM
operator|.
name|hasDeletes
argument_list|()
return|;
block|}
comment|// nocommit
DECL|method|getNumDocsInRAM
name|int
name|getNumDocsInRAM
parameter_list|()
block|{
return|return
name|numDocsInRAM
operator|.
name|get
argument_list|()
return|;
block|}
comment|// nocommit
DECL|method|getRAMUsed
name|long
name|getRAMUsed
parameter_list|()
block|{
return|return
name|ramUsed
operator|.
name|get
argument_list|()
return|;
block|}
comment|// nocommit
comment|// long getRAMUsed() {
comment|// return numBytesUsed + deletesInRAM.bytesUsed + deletesFlushed.bytesUsed;
comment|// }
DECL|method|applyDeletes
name|boolean
name|applyDeletes
parameter_list|(
name|SegmentInfos
name|infos
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|hasDeletes
argument_list|()
condition|)
return|return
literal|false
return|;
specifier|final
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|message
argument_list|(
literal|"apply "
operator|+
name|deletesInRAM
operator|.
name|getNumDeletes
argument_list|()
operator|+
literal|" buffered deletes on "
operator|+
operator|+
name|infos
operator|.
name|size
argument_list|()
operator|+
literal|" segments."
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|infosEnd
init|=
name|infos
operator|.
name|size
argument_list|()
decl_stmt|;
name|boolean
name|any
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|infosEnd
condition|;
name|i
operator|++
control|)
block|{
comment|// Make sure we never attempt to apply deletes to
comment|// segment in external dir
assert|assert
name|infos
operator|.
name|info
argument_list|(
name|i
argument_list|)
operator|.
name|dir
operator|==
name|indexWriter
operator|.
name|getDirectory
argument_list|()
assert|;
name|SegmentInfo
name|si
init|=
name|infos
operator|.
name|info
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// we have to synchronize here, because we need a write lock on
comment|// the segment in order to apply deletes
synchronized|synchronized
init|(
name|indexWriter
init|)
block|{
name|SegmentReader
name|reader
init|=
name|indexWriter
operator|.
name|readerPool
operator|.
name|get
argument_list|(
name|si
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|any
operator||=
name|applyDeletes
argument_list|(
name|reader
argument_list|,
name|si
operator|.
name|getMinSequenceID
argument_list|()
argument_list|,
name|si
operator|.
name|getMaxSequenceID
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|indexWriter
operator|.
name|readerPool
operator|.
name|release
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|message
argument_list|(
literal|"apply deletes took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
operator|)
operator|+
literal|" msec"
argument_list|)
expr_stmt|;
block|}
return|return
name|any
return|;
block|}
comment|// Apply buffered delete terms, queries and docIDs to the
comment|// provided reader
DECL|method|applyDeletes
specifier|final
name|boolean
name|applyDeletes
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|long
name|minSequenceID
parameter_list|,
name|long
name|maxSequenceID
parameter_list|,
name|long
index|[]
name|sequenceIDs
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
assert|assert
name|sequenceIDs
operator|==
literal|null
operator|||
name|sequenceIDs
operator|.
name|length
operator|>=
name|reader
operator|.
name|maxDoc
argument_list|()
operator|:
literal|"reader.maxDoc="
operator|+
name|reader
operator|.
name|maxDoc
argument_list|()
operator|+
literal|",sequenceIDs.length="
operator|+
name|sequenceIDs
operator|.
name|length
assert|;
name|boolean
name|any
init|=
literal|false
decl_stmt|;
comment|// first: delete the documents that had non-aborting exceptions
if|if
condition|(
name|sequenceIDs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reader
operator|.
name|maxDoc
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|sequenceIDs
index|[
name|i
index|]
operator|==
operator|-
literal|1
condition|)
block|{
name|reader
operator|.
name|deleteDocument
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|any
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|deletesInRAM
operator|.
name|hasDeletes
argument_list|()
condition|)
block|{
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|BufferedDeletesInRAM
operator|.
name|Delete
argument_list|>
name|deletes
init|=
name|deletesInRAM
operator|.
name|deletes
operator|.
name|getReadCopy
argument_list|()
decl_stmt|;
name|SortedMap
argument_list|<
name|Term
argument_list|,
name|Long
argument_list|>
name|deleteTerms
init|=
operator|new
name|TreeMap
argument_list|<
name|Term
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Long
argument_list|,
name|BufferedDeletesInRAM
operator|.
name|Delete
argument_list|>
name|entry
range|:
name|deletes
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|minSequenceID
operator|<
name|entry
operator|.
name|getKey
argument_list|()
condition|)
block|{
name|BufferedDeletesInRAM
operator|.
name|Delete
name|delete
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|delete
operator|instanceof
name|BufferedDeletesInRAM
operator|.
name|DeleteTerm
condition|)
block|{
name|BufferedDeletesInRAM
operator|.
name|DeleteTerm
name|deleteTerm
init|=
operator|(
name|BufferedDeletesInRAM
operator|.
name|DeleteTerm
operator|)
name|delete
decl_stmt|;
name|deleteTerms
operator|.
name|put
argument_list|(
name|deleteTerm
operator|.
name|term
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|delete
operator|instanceof
name|BufferedDeletesInRAM
operator|.
name|DeleteTerms
condition|)
block|{
name|BufferedDeletesInRAM
operator|.
name|DeleteTerms
name|terms
init|=
operator|(
name|BufferedDeletesInRAM
operator|.
name|DeleteTerms
operator|)
name|delete
decl_stmt|;
for|for
control|(
name|Term
name|t
range|:
name|terms
operator|.
name|terms
control|)
block|{
name|deleteTerms
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// delete query
name|BufferedDeletesInRAM
operator|.
name|DeleteQuery
name|deleteQuery
init|=
operator|(
name|BufferedDeletesInRAM
operator|.
name|DeleteQuery
operator|)
name|delete
decl_stmt|;
name|Query
name|query
init|=
name|deleteQuery
operator|.
name|query
decl_stmt|;
name|Weight
name|weight
init|=
name|query
operator|.
name|weight
argument_list|(
name|searcher
argument_list|)
decl_stmt|;
name|Scorer
name|scorer
init|=
name|weight
operator|.
name|scorer
argument_list|(
name|reader
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|scorer
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|doc
init|=
name|scorer
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|==
name|DocsEnum
operator|.
name|NO_MORE_DOCS
condition|)
block|{
break|break;
block|}
if|if
condition|(
operator|(
name|sequenceIDs
operator|!=
literal|null
operator|&&
name|sequenceIDs
index|[
name|doc
index|]
operator|<
name|entry
operator|.
name|getKey
argument_list|()
operator|)
operator|||
operator|(
name|sequenceIDs
operator|==
literal|null
operator|&&
name|maxSequenceID
operator|<
name|entry
operator|.
name|getKey
argument_list|()
operator|)
condition|)
block|{
name|reader
operator|.
name|deleteDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|any
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|// Delete by term
if|if
condition|(
name|deleteTerms
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Fields
name|fields
init|=
name|reader
operator|.
name|fields
argument_list|()
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
comment|// This reader has no postings
return|return
literal|false
return|;
block|}
name|TermsEnum
name|termsEnum
init|=
literal|null
decl_stmt|;
name|String
name|currentField
init|=
literal|null
decl_stmt|;
name|BytesRef
name|termRef
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|DocsEnum
name|docs
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Term
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|deleteTerms
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Term
name|term
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|// Since we visit terms sorted, we gain performance
comment|// by re-using the same TermsEnum and seeking only
comment|// forwards
if|if
condition|(
name|term
operator|.
name|field
argument_list|()
operator|!=
name|currentField
condition|)
block|{
assert|assert
name|currentField
operator|==
literal|null
operator|||
name|currentField
operator|.
name|compareTo
argument_list|(
name|term
operator|.
name|field
argument_list|()
argument_list|)
operator|<
literal|0
assert|;
name|currentField
operator|=
name|term
operator|.
name|field
argument_list|()
expr_stmt|;
name|Terms
name|terms
init|=
name|fields
operator|.
name|terms
argument_list|(
name|currentField
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
name|termsEnum
operator|=
name|terms
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|termsEnum
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|termsEnum
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|// assert checkDeleteTerm(term);
name|termRef
operator|.
name|copy
argument_list|(
name|term
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|termsEnum
operator|.
name|seek
argument_list|(
name|termRef
argument_list|,
literal|false
argument_list|)
operator|==
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|FOUND
condition|)
block|{
name|DocsEnum
name|docsEnum
init|=
name|termsEnum
operator|.
name|docs
argument_list|(
name|reader
operator|.
name|getDeletedDocs
argument_list|()
argument_list|,
name|docs
argument_list|)
decl_stmt|;
if|if
condition|(
name|docsEnum
operator|!=
literal|null
condition|)
block|{
name|docs
operator|=
name|docsEnum
expr_stmt|;
comment|// int limit = entry.getValue().getNum();
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|int
name|doc
init|=
name|docs
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
comment|// if (docID == DocsEnum.NO_MORE_DOCS || docIDStart+docID>= limit) {
if|if
condition|(
name|doc
operator|==
name|DocsEnum
operator|.
name|NO_MORE_DOCS
condition|)
block|{
break|break;
block|}
if|if
condition|(
operator|(
name|sequenceIDs
operator|!=
literal|null
operator|&&
name|sequenceIDs
index|[
name|doc
index|]
operator|<
name|entry
operator|.
name|getValue
argument_list|()
operator|)
operator|||
operator|(
name|sequenceIDs
operator|==
literal|null
operator|&&
name|maxSequenceID
operator|<
name|entry
operator|.
name|getValue
argument_list|()
operator|)
condition|)
block|{
name|reader
operator|.
name|deleteDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|any
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|any
return|;
block|}
DECL|method|message
name|void
name|message
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|indexWriter
operator|.
name|message
argument_list|(
literal|"DW: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
