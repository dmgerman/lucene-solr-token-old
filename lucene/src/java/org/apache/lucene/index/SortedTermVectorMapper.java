begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * Store a sorted collection of {@link org.apache.lucene.index.TermVectorEntry}s.  Collects all term information  * into a single, SortedSet.  *<br/>  * NOTE: This Mapper ignores all Field information for the Document.  This means that if you are using offset/positions you will not  * know what Fields they correlate with.  *<br/>  * This is not thread-safe    */
end_comment
begin_class
DECL|class|SortedTermVectorMapper
specifier|public
class|class
name|SortedTermVectorMapper
extends|extends
name|TermVectorMapper
block|{
DECL|field|currentSet
specifier|private
name|SortedSet
argument_list|<
name|TermVectorEntry
argument_list|>
name|currentSet
decl_stmt|;
DECL|field|termToTVE
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|TermVectorEntry
argument_list|>
name|termToTVE
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TermVectorEntry
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|storeOffsets
specifier|private
name|boolean
name|storeOffsets
decl_stmt|;
DECL|field|storePositions
specifier|private
name|boolean
name|storePositions
decl_stmt|;
comment|/**    * Stand-in name for the field in {@link TermVectorEntry}.    */
DECL|field|ALL
specifier|public
specifier|static
specifier|final
name|String
name|ALL
init|=
literal|"_ALL_"
decl_stmt|;
comment|/**    *    * @param comparator A Comparator for sorting {@link TermVectorEntry}s    */
DECL|method|SortedTermVectorMapper
specifier|public
name|SortedTermVectorMapper
parameter_list|(
name|Comparator
argument_list|<
name|TermVectorEntry
argument_list|>
name|comparator
parameter_list|)
block|{
name|this
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
block|}
DECL|method|SortedTermVectorMapper
specifier|public
name|SortedTermVectorMapper
parameter_list|(
name|boolean
name|ignoringPositions
parameter_list|,
name|boolean
name|ignoringOffsets
parameter_list|,
name|Comparator
argument_list|<
name|TermVectorEntry
argument_list|>
name|comparator
parameter_list|)
block|{
name|super
argument_list|(
name|ignoringPositions
argument_list|,
name|ignoringOffsets
argument_list|)
expr_stmt|;
name|currentSet
operator|=
operator|new
name|TreeSet
argument_list|<
name|TermVectorEntry
argument_list|>
argument_list|(
name|comparator
argument_list|)
expr_stmt|;
block|}
comment|/**    *    * @param term The term to map    * @param frequency The frequency of the term    * @param offsets Offset information, may be null    * @param positions Position information, may be null    */
comment|//We need to combine any previous mentions of the term
annotation|@
name|Override
DECL|method|map
specifier|public
name|void
name|map
parameter_list|(
name|String
name|term
parameter_list|,
name|int
name|frequency
parameter_list|,
name|TermVectorOffsetInfo
index|[]
name|offsets
parameter_list|,
name|int
index|[]
name|positions
parameter_list|)
block|{
name|TermVectorEntry
name|entry
init|=
name|termToTVE
operator|.
name|get
argument_list|(
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|entry
operator|=
operator|new
name|TermVectorEntry
argument_list|(
name|ALL
argument_list|,
name|term
argument_list|,
name|frequency
argument_list|,
name|storeOffsets
operator|==
literal|true
condition|?
name|offsets
else|:
literal|null
argument_list|,
name|storePositions
operator|==
literal|true
condition|?
name|positions
else|:
literal|null
argument_list|)
expr_stmt|;
name|termToTVE
operator|.
name|put
argument_list|(
name|term
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|currentSet
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|.
name|setFrequency
argument_list|(
name|entry
operator|.
name|getFrequency
argument_list|()
operator|+
name|frequency
argument_list|)
expr_stmt|;
if|if
condition|(
name|storeOffsets
condition|)
block|{
name|TermVectorOffsetInfo
index|[]
name|existingOffsets
init|=
name|entry
operator|.
name|getOffsets
argument_list|()
decl_stmt|;
comment|//A few diff. cases here:  offsets is null, existing offsets is null, both are null, same for positions
if|if
condition|(
name|existingOffsets
operator|!=
literal|null
operator|&&
name|offsets
operator|!=
literal|null
operator|&&
name|offsets
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|//copy over the existing offsets
name|TermVectorOffsetInfo
index|[]
name|newOffsets
init|=
operator|new
name|TermVectorOffsetInfo
index|[
name|existingOffsets
operator|.
name|length
operator|+
name|offsets
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|existingOffsets
argument_list|,
literal|0
argument_list|,
name|newOffsets
argument_list|,
literal|0
argument_list|,
name|existingOffsets
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|offsets
argument_list|,
literal|0
argument_list|,
name|newOffsets
argument_list|,
name|existingOffsets
operator|.
name|length
argument_list|,
name|offsets
operator|.
name|length
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setOffsets
argument_list|(
name|newOffsets
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|existingOffsets
operator|==
literal|null
operator|&&
name|offsets
operator|!=
literal|null
operator|&&
name|offsets
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|entry
operator|.
name|setOffsets
argument_list|(
name|offsets
argument_list|)
expr_stmt|;
block|}
comment|//else leave it alone
block|}
if|if
condition|(
name|storePositions
condition|)
block|{
name|int
index|[]
name|existingPositions
init|=
name|entry
operator|.
name|getPositions
argument_list|()
decl_stmt|;
if|if
condition|(
name|existingPositions
operator|!=
literal|null
operator|&&
name|positions
operator|!=
literal|null
operator|&&
name|positions
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|int
index|[]
name|newPositions
init|=
operator|new
name|int
index|[
name|existingPositions
operator|.
name|length
operator|+
name|positions
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|existingPositions
argument_list|,
literal|0
argument_list|,
name|newPositions
argument_list|,
literal|0
argument_list|,
name|existingPositions
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|positions
argument_list|,
literal|0
argument_list|,
name|newPositions
argument_list|,
name|existingPositions
operator|.
name|length
argument_list|,
name|positions
operator|.
name|length
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setPositions
argument_list|(
name|newPositions
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|existingPositions
operator|==
literal|null
operator|&&
name|positions
operator|!=
literal|null
operator|&&
name|positions
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|entry
operator|.
name|setPositions
argument_list|(
name|positions
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|setExpectations
specifier|public
name|void
name|setExpectations
parameter_list|(
name|String
name|field
parameter_list|,
name|int
name|numTerms
parameter_list|,
name|boolean
name|storeOffsets
parameter_list|,
name|boolean
name|storePositions
parameter_list|)
block|{
name|this
operator|.
name|storeOffsets
operator|=
name|storeOffsets
expr_stmt|;
name|this
operator|.
name|storePositions
operator|=
name|storePositions
expr_stmt|;
block|}
comment|/**    * The TermVectorEntrySet.  A SortedSet of {@link TermVectorEntry} objects.  Sort is by the comparator passed into the constructor.    *<br/>    * This set will be empty until after the mapping process takes place.    *    * @return The SortedSet of {@link TermVectorEntry}.    */
DECL|method|getTermVectorEntrySet
specifier|public
name|SortedSet
argument_list|<
name|TermVectorEntry
argument_list|>
name|getTermVectorEntrySet
parameter_list|()
block|{
return|return
name|currentSet
return|;
block|}
block|}
end_class
end_unit
