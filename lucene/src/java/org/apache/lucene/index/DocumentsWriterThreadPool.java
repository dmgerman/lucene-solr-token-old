begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ThreadInterruptedException
import|;
end_import
begin_class
DECL|class|DocumentsWriterThreadPool
specifier|abstract
class|class
name|DocumentsWriterThreadPool
block|{
DECL|class|Task
specifier|public
specifier|static
specifier|abstract
class|class
name|Task
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|clearThreadBindings
specifier|private
name|boolean
name|clearThreadBindings
init|=
literal|false
decl_stmt|;
DECL|method|clearThreadBindings
specifier|protected
name|void
name|clearThreadBindings
parameter_list|()
block|{
name|this
operator|.
name|clearThreadBindings
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|doClearThreadBindings
name|boolean
name|doClearThreadBindings
parameter_list|()
block|{
return|return
name|clearThreadBindings
return|;
block|}
block|}
DECL|class|PerThreadTask
specifier|public
specifier|static
specifier|abstract
class|class
name|PerThreadTask
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Task
argument_list|<
name|T
argument_list|>
block|{
DECL|method|process
specifier|abstract
name|T
name|process
parameter_list|(
specifier|final
name|DocumentsWriterPerThread
name|perThread
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|class|AllThreadsTask
specifier|public
specifier|static
specifier|abstract
class|class
name|AllThreadsTask
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Task
argument_list|<
name|T
argument_list|>
block|{
DECL|method|process
specifier|abstract
name|T
name|process
parameter_list|(
specifier|final
name|Iterator
argument_list|<
name|DocumentsWriterPerThread
argument_list|>
name|threadsIterator
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|class|ThreadState
specifier|protected
specifier|abstract
specifier|static
class|class
name|ThreadState
block|{
DECL|field|perThread
specifier|private
name|DocumentsWriterPerThread
name|perThread
decl_stmt|;
DECL|field|isIdle
specifier|private
name|boolean
name|isIdle
init|=
literal|true
decl_stmt|;
DECL|method|start
name|void
name|start
parameter_list|()
block|{
comment|/* extension hook */
block|}
DECL|method|finish
name|void
name|finish
parameter_list|()
block|{
comment|/* extension hook */
block|}
block|}
DECL|field|pauseThreads
specifier|private
name|int
name|pauseThreads
init|=
literal|0
decl_stmt|;
DECL|field|maxNumThreadStates
specifier|protected
specifier|final
name|int
name|maxNumThreadStates
decl_stmt|;
DECL|field|allThreadStates
specifier|protected
name|ThreadState
index|[]
name|allThreadStates
init|=
operator|new
name|ThreadState
index|[
literal|0
index|]
decl_stmt|;
DECL|field|lock
specifier|private
specifier|final
name|Lock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|threadStateAvailable
specifier|private
specifier|final
name|Condition
name|threadStateAvailable
init|=
name|lock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
DECL|field|globalLock
specifier|private
name|boolean
name|globalLock
decl_stmt|;
DECL|field|aborting
specifier|private
name|boolean
name|aborting
decl_stmt|;
DECL|method|DocumentsWriterThreadPool
name|DocumentsWriterThreadPool
parameter_list|(
name|int
name|maxNumThreadStates
parameter_list|)
block|{
name|this
operator|.
name|maxNumThreadStates
operator|=
operator|(
name|maxNumThreadStates
operator|<
literal|1
operator|)
condition|?
name|IndexWriterConfig
operator|.
name|DEFAULT_MAX_THREAD_STATES
else|:
name|maxNumThreadStates
expr_stmt|;
block|}
DECL|method|getMaxThreadStates
specifier|public
specifier|final
name|int
name|getMaxThreadStates
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxNumThreadStates
return|;
block|}
DECL|method|pauseAllThreads
name|void
name|pauseAllThreads
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|pauseThreads
operator|++
expr_stmt|;
while|while
condition|(
operator|!
name|allThreadsIdle
argument_list|()
condition|)
block|{
try|try
block|{
name|threadStateAvailable
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ThreadInterruptedException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|resumeAllThreads
name|void
name|resumeAllThreads
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|pauseThreads
operator|--
expr_stmt|;
assert|assert
name|pauseThreads
operator|>=
literal|0
assert|;
if|if
condition|(
literal|0
operator|==
name|pauseThreads
condition|)
block|{
name|threadStateAvailable
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|allThreadsIdle
specifier|private
name|boolean
name|allThreadsIdle
parameter_list|()
block|{
for|for
control|(
name|ThreadState
name|state
range|:
name|allThreadStates
control|)
block|{
if|if
condition|(
operator|!
name|state
operator|.
name|isIdle
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|abort
name|void
name|abort
parameter_list|()
throws|throws
name|IOException
block|{
name|pauseAllThreads
argument_list|()
expr_stmt|;
name|aborting
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|ThreadState
name|state
range|:
name|allThreadStates
control|)
block|{
name|state
operator|.
name|perThread
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|finishAbort
name|void
name|finishAbort
parameter_list|()
block|{
name|aborting
operator|=
literal|false
expr_stmt|;
name|resumeAllThreads
argument_list|()
expr_stmt|;
block|}
DECL|method|executeAllThreads
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|executeAllThreads
parameter_list|(
name|AllThreadsTask
argument_list|<
name|T
argument_list|>
name|task
parameter_list|)
throws|throws
name|IOException
block|{
name|T
name|result
init|=
literal|null
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
try|try
block|{
while|while
condition|(
name|globalLock
condition|)
block|{
name|threadStateAvailable
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ThreadInterruptedException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
name|pauseAllThreads
argument_list|()
expr_stmt|;
name|globalLock
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// all threads are idle now
try|try
block|{
specifier|final
name|ThreadState
index|[]
name|localAllThreads
init|=
name|allThreadStates
decl_stmt|;
name|result
operator|=
name|task
operator|.
name|process
argument_list|(
operator|new
name|Iterator
argument_list|<
name|DocumentsWriterPerThread
argument_list|>
argument_list|()
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|i
operator|<
name|localAllThreads
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|DocumentsWriterPerThread
name|next
parameter_list|()
block|{
return|return
name|localAllThreads
index|[
name|i
operator|++
index|]
operator|.
name|perThread
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"remove() not supported."
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
try|try
block|{
if|if
condition|(
name|task
operator|.
name|doClearThreadBindings
argument_list|()
condition|)
block|{
name|clearAllThreadBindings
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|globalLock
operator|=
literal|false
expr_stmt|;
name|resumeAllThreads
argument_list|()
expr_stmt|;
name|threadStateAvailable
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|executePerThread
specifier|public
specifier|final
parameter_list|<
name|T
parameter_list|>
name|T
name|executePerThread
parameter_list|(
name|DocumentsWriter
name|documentsWriter
parameter_list|,
name|Document
name|doc
parameter_list|,
name|PerThreadTask
argument_list|<
name|T
argument_list|>
name|task
parameter_list|)
throws|throws
name|IOException
block|{
name|ThreadState
name|state
init|=
name|acquireThreadState
argument_list|(
name|documentsWriter
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|T
name|result
init|=
name|task
operator|.
name|process
argument_list|(
name|state
operator|.
name|perThread
argument_list|)
decl_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|result
return|;
block|}
finally|finally
block|{
name|boolean
name|abort
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|success
operator|&&
name|state
operator|.
name|perThread
operator|.
name|aborting
condition|)
block|{
name|state
operator|.
name|perThread
operator|.
name|aborting
operator|=
literal|false
expr_stmt|;
name|abort
operator|=
literal|true
expr_stmt|;
block|}
name|returnDocumentsWriterPerThread
argument_list|(
name|state
argument_list|,
name|task
operator|.
name|doClearThreadBindings
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|abort
condition|)
block|{
name|documentsWriter
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|addNewThreadState
specifier|protected
specifier|final
parameter_list|<
name|T
extends|extends
name|ThreadState
parameter_list|>
name|T
name|addNewThreadState
parameter_list|(
name|DocumentsWriter
name|documentsWriter
parameter_list|,
name|T
name|threadState
parameter_list|)
block|{
comment|// Just create a new "private" thread state
name|ThreadState
index|[]
name|newArray
init|=
operator|new
name|ThreadState
index|[
literal|1
operator|+
name|allThreadStates
operator|.
name|length
index|]
decl_stmt|;
if|if
condition|(
name|allThreadStates
operator|.
name|length
operator|>
literal|0
condition|)
name|System
operator|.
name|arraycopy
argument_list|(
name|allThreadStates
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|allThreadStates
operator|.
name|length
argument_list|)
expr_stmt|;
name|threadState
operator|.
name|perThread
operator|=
name|documentsWriter
operator|.
name|newDocumentsWriterPerThread
argument_list|()
expr_stmt|;
name|newArray
index|[
name|allThreadStates
operator|.
name|length
index|]
operator|=
name|threadState
expr_stmt|;
name|allThreadStates
operator|=
name|newArray
expr_stmt|;
return|return
name|threadState
return|;
block|}
DECL|method|selectThreadState
specifier|protected
specifier|abstract
name|ThreadState
name|selectThreadState
parameter_list|(
name|Thread
name|requestingThread
parameter_list|,
name|DocumentsWriter
name|documentsWriter
parameter_list|,
name|Document
name|doc
parameter_list|)
function_decl|;
DECL|method|clearThreadBindings
specifier|protected
name|void
name|clearThreadBindings
parameter_list|(
name|ThreadState
name|flushedThread
parameter_list|)
block|{
comment|// subclasses can optionally override this to cleanup after a thread flushed
block|}
DECL|method|clearAllThreadBindings
specifier|protected
name|void
name|clearAllThreadBindings
parameter_list|()
block|{
comment|// subclasses can optionally override this to cleanup after a thread flushed
block|}
DECL|method|acquireThreadState
specifier|private
specifier|final
name|ThreadState
name|acquireThreadState
parameter_list|(
name|DocumentsWriter
name|documentsWriter
parameter_list|,
name|Document
name|doc
parameter_list|)
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ThreadState
name|threadState
init|=
name|selectThreadState
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|,
name|documentsWriter
argument_list|,
name|doc
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|threadState
operator|.
name|isIdle
operator|||
name|globalLock
operator|||
name|aborting
condition|)
block|{
name|threadStateAvailable
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ThreadInterruptedException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
name|threadState
operator|.
name|isIdle
operator|=
literal|false
expr_stmt|;
name|threadState
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|threadState
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|returnDocumentsWriterPerThread
specifier|private
specifier|final
name|void
name|returnDocumentsWriterPerThread
parameter_list|(
name|ThreadState
name|state
parameter_list|,
name|boolean
name|clearThreadBindings
parameter_list|)
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|state
operator|.
name|finish
argument_list|()
expr_stmt|;
if|if
condition|(
name|clearThreadBindings
condition|)
block|{
name|clearThreadBindings
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|isIdle
operator|=
literal|true
expr_stmt|;
name|threadStateAvailable
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
