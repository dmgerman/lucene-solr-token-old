begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ReaderUtil
import|;
end_import
begin_comment
comment|/** An AtomicIndexReader which reads multiple, parallel indexes.  Each index added  * must have the same number of documents, but typically each contains  * different fields.  Each document contains the union of the fields of all  * documents with the same document number.  When searching, matches for a  * query term are from the first index added that has the field.  *  *<p>This is useful, e.g., with collections that have large fields which  * change rarely and small fields that change more frequently.  The smaller  * fields may be re-indexed in a new index and both indexes may be searched  * together.  *  *<p><strong>Warning:</strong> It is up to you to make sure all indexes  * are created and modified the same way. For example, if you add  * documents to one index, you need to add the same documents in the  * same order to the other indexes.<em>Failure to do so will result in  * undefined behavior</em>.  */
end_comment
begin_class
DECL|class|ParallelReader
specifier|public
class|class
name|ParallelReader
extends|extends
name|AtomicIndexReader
block|{
DECL|field|readers
specifier|private
name|List
argument_list|<
name|AtomicIndexReader
argument_list|>
name|readers
init|=
operator|new
name|ArrayList
argument_list|<
name|AtomicIndexReader
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|decrefOnClose
specifier|private
name|List
argument_list|<
name|Boolean
argument_list|>
name|decrefOnClose
init|=
operator|new
name|ArrayList
argument_list|<
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
comment|// remember which subreaders to decRef on close
DECL|field|incRefReaders
name|boolean
name|incRefReaders
init|=
literal|false
decl_stmt|;
DECL|field|fieldToReader
specifier|private
name|SortedMap
argument_list|<
name|String
argument_list|,
name|AtomicIndexReader
argument_list|>
name|fieldToReader
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|AtomicIndexReader
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|readerToFields
specifier|private
name|Map
argument_list|<
name|AtomicIndexReader
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|readerToFields
init|=
operator|new
name|HashMap
argument_list|<
name|AtomicIndexReader
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|storedFieldReaders
specifier|private
name|List
argument_list|<
name|AtomicIndexReader
argument_list|>
name|storedFieldReaders
init|=
operator|new
name|ArrayList
argument_list|<
name|AtomicIndexReader
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|normsCache
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|DocValues
argument_list|>
name|normsCache
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DocValues
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|topLevelReaderContext
specifier|private
specifier|final
name|AtomicReaderContext
name|topLevelReaderContext
init|=
operator|new
name|AtomicReaderContext
argument_list|(
name|this
argument_list|)
decl_stmt|;
DECL|field|maxDoc
specifier|private
name|int
name|maxDoc
decl_stmt|;
DECL|field|numDocs
specifier|private
name|int
name|numDocs
decl_stmt|;
DECL|field|hasDeletions
specifier|private
name|boolean
name|hasDeletions
decl_stmt|;
DECL|field|fieldInfos
specifier|private
specifier|final
name|FieldInfos
name|fieldInfos
decl_stmt|;
DECL|field|fields
specifier|private
specifier|final
name|ParallelFields
name|fields
init|=
operator|new
name|ParallelFields
argument_list|()
decl_stmt|;
comment|/** Construct a ParallelReader.    *<p>Note that all subreaders are closed if this ParallelReader is closed.</p>   */
DECL|method|ParallelReader
specifier|public
name|ParallelReader
parameter_list|()
throws|throws
name|IOException
block|{
name|this
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** Construct a ParallelReader.    * @param closeSubReaders indicates whether the subreaders should be closed   * when this ParallelReader is closed   */
DECL|method|ParallelReader
specifier|public
name|ParallelReader
parameter_list|(
name|boolean
name|closeSubReaders
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|incRefReaders
operator|=
operator|!
name|closeSubReaders
expr_stmt|;
name|fieldInfos
operator|=
operator|new
name|FieldInfos
argument_list|()
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"ParallelReader("
argument_list|)
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|AtomicIndexReader
argument_list|>
name|iter
init|=
name|readers
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Add an AtomicIndexReader.   * @throws IOException if there is a low-level IO error   */
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|AtomicIndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|add
argument_list|(
name|reader
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/** Add an AtomicIndexReader whose stored fields will not be returned.  This can   * accelerate search when stored fields are only needed from a subset of   * the IndexReaders.   *   * @throws IllegalArgumentException if not all indexes contain the same number   *     of documents   * @throws IllegalArgumentException if not all indexes have the same value   *     of {@link AtomicIndexReader#maxDoc()}   * @throws IOException if there is a low-level IO error   */
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|AtomicIndexReader
name|reader
parameter_list|,
name|boolean
name|ignoreStoredFields
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
if|if
condition|(
name|readers
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|maxDoc
operator|=
name|reader
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
name|this
operator|.
name|numDocs
operator|=
name|reader
operator|.
name|numDocs
argument_list|()
expr_stmt|;
name|this
operator|.
name|hasDeletions
operator|=
name|reader
operator|.
name|hasDeletions
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reader
operator|.
name|maxDoc
argument_list|()
operator|!=
name|maxDoc
condition|)
comment|// check compatibility
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"All readers must have same maxDoc: "
operator|+
name|maxDoc
operator|+
literal|"!="
operator|+
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|reader
operator|.
name|numDocs
argument_list|()
operator|!=
name|numDocs
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"All readers must have same numDocs: "
operator|+
name|numDocs
operator|+
literal|"!="
operator|+
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
throw|;
specifier|final
name|FieldInfos
name|readerFieldInfos
init|=
name|ReaderUtil
operator|.
name|getMergedFieldInfos
argument_list|(
name|reader
argument_list|)
decl_stmt|;
for|for
control|(
name|FieldInfo
name|fieldInfo
range|:
name|readerFieldInfos
control|)
block|{
comment|// update fieldToReader map
comment|// NOTE: first reader having a given field "wins":
if|if
condition|(
name|fieldToReader
operator|.
name|get
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|)
operator|==
literal|null
condition|)
block|{
name|fieldInfos
operator|.
name|add
argument_list|(
name|fieldInfo
argument_list|)
expr_stmt|;
name|fieldToReader
operator|.
name|put
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|,
name|reader
argument_list|)
expr_stmt|;
name|this
operator|.
name|fields
operator|.
name|addField
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|,
name|reader
operator|.
name|terms
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|ignoreStoredFields
condition|)
name|storedFieldReaders
operator|.
name|add
argument_list|(
name|reader
argument_list|)
expr_stmt|;
comment|// add to storedFieldReaders
name|readers
operator|.
name|add
argument_list|(
name|reader
argument_list|)
expr_stmt|;
if|if
condition|(
name|incRefReaders
condition|)
block|{
name|reader
operator|.
name|incRef
argument_list|()
expr_stmt|;
block|}
name|decrefOnClose
operator|.
name|add
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|incRefReaders
argument_list|)
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|normsCache
init|)
block|{
name|normsCache
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// TODO: don't need to clear this for all fields really?
block|}
block|}
DECL|class|ParallelFieldsEnum
specifier|private
class|class
name|ParallelFieldsEnum
extends|extends
name|FieldsEnum
block|{
DECL|field|currentField
name|String
name|currentField
decl_stmt|;
DECL|field|keys
name|Iterator
argument_list|<
name|String
argument_list|>
name|keys
decl_stmt|;
DECL|field|fields
specifier|private
specifier|final
name|Fields
name|fields
decl_stmt|;
DECL|method|ParallelFieldsEnum
name|ParallelFieldsEnum
parameter_list|(
name|Fields
name|fields
parameter_list|)
block|{
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
name|keys
operator|=
name|fieldToReader
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|String
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|keys
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|currentField
operator|=
name|keys
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|currentField
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|currentField
return|;
block|}
annotation|@
name|Override
DECL|method|terms
specifier|public
name|Terms
name|terms
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|fields
operator|.
name|terms
argument_list|(
name|currentField
argument_list|)
return|;
block|}
block|}
comment|// Single instance of this, per ParallelReader instance
DECL|class|ParallelFields
specifier|private
class|class
name|ParallelFields
extends|extends
name|Fields
block|{
DECL|field|fields
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Terms
argument_list|>
name|fields
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Terms
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|addField
specifier|public
name|void
name|addField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Terms
name|terms
parameter_list|)
throws|throws
name|IOException
block|{
name|fields
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|terms
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|FieldsEnum
name|iterator
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|ParallelFieldsEnum
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|terms
specifier|public
name|Terms
name|terms
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fields
operator|.
name|get
argument_list|(
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getUniqueFieldCount
specifier|public
name|int
name|getUniqueFieldCount
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|fields
operator|.
name|size
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getFieldInfos
specifier|public
name|FieldInfos
name|getFieldInfos
parameter_list|()
block|{
return|return
name|fieldInfos
return|;
block|}
annotation|@
name|Override
DECL|method|getLiveDocs
specifier|public
name|Bits
name|getLiveDocs
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|readers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLiveDocs
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|fields
specifier|public
name|Fields
name|fields
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|fields
return|;
block|}
annotation|@
name|Override
DECL|method|numDocs
specifier|public
name|int
name|numDocs
parameter_list|()
block|{
comment|// Don't call ensureOpen() here (it could affect performance)
return|return
name|numDocs
return|;
block|}
annotation|@
name|Override
DECL|method|maxDoc
specifier|public
name|int
name|maxDoc
parameter_list|()
block|{
comment|// Don't call ensureOpen() here (it could affect performance)
return|return
name|maxDoc
return|;
block|}
annotation|@
name|Override
DECL|method|hasDeletions
specifier|public
name|boolean
name|hasDeletions
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|hasDeletions
return|;
block|}
annotation|@
name|Override
DECL|method|document
specifier|public
name|void
name|document
parameter_list|(
name|int
name|docID
parameter_list|,
name|StoredFieldVisitor
name|visitor
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|AtomicIndexReader
name|reader
range|:
name|storedFieldReaders
control|)
block|{
name|reader
operator|.
name|document
argument_list|(
name|docID
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
block|}
comment|// get all vectors
annotation|@
name|Override
DECL|method|getTermVectors
specifier|public
name|Fields
name|getTermVectors
parameter_list|(
name|int
name|docID
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|ParallelFields
name|fields
init|=
operator|new
name|ParallelFields
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|AtomicIndexReader
argument_list|>
name|ent
range|:
name|fieldToReader
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|fieldName
init|=
name|ent
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Terms
name|vector
init|=
name|ent
operator|.
name|getValue
argument_list|()
operator|.
name|getTermVector
argument_list|(
name|docID
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|vector
operator|!=
literal|null
condition|)
block|{
name|fields
operator|.
name|addField
argument_list|(
name|fieldName
argument_list|,
name|vector
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fields
return|;
block|}
annotation|@
name|Override
DECL|method|hasNorms
specifier|public
name|boolean
name|hasNorms
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|AtomicIndexReader
name|reader
init|=
name|fieldToReader
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
name|reader
operator|==
literal|null
condition|?
literal|false
else|:
name|reader
operator|.
name|hasNorms
argument_list|(
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|docFreq
specifier|public
name|int
name|docFreq
parameter_list|(
name|String
name|field
parameter_list|,
name|BytesRef
name|term
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|AtomicIndexReader
name|reader
init|=
name|fieldToReader
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
name|reader
operator|==
literal|null
condition|?
literal|0
else|:
name|reader
operator|.
name|docFreq
argument_list|(
name|field
argument_list|,
name|term
argument_list|)
return|;
block|}
comment|// for testing
DECL|method|getSubReaders
name|AtomicIndexReader
index|[]
name|getSubReaders
parameter_list|()
block|{
return|return
name|readers
operator|.
name|toArray
argument_list|(
operator|new
name|AtomicIndexReader
index|[
name|readers
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|protected
specifier|synchronized
name|void
name|doClose
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|readers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|decrefOnClose
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|readers
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|readers
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getTopReaderContext
specifier|public
name|AtomicReaderContext
name|getTopReaderContext
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
return|return
name|topLevelReaderContext
return|;
block|}
comment|// TODO: I suspect this is completely untested!!!!!
annotation|@
name|Override
DECL|method|docValues
specifier|public
name|DocValues
name|docValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|AtomicIndexReader
name|reader
init|=
name|fieldToReader
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
return|return
name|reader
operator|==
literal|null
condition|?
literal|null
else|:
name|reader
operator|.
name|docValues
argument_list|(
name|field
argument_list|)
return|;
block|}
comment|// TODO: I suspect this is completely untested!!!!!
annotation|@
name|Override
DECL|method|normValues
specifier|public
specifier|synchronized
name|DocValues
name|normValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|DocValues
name|values
init|=
name|normsCache
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|AtomicIndexReader
name|reader
init|=
name|fieldToReader
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|values
operator|=
name|reader
operator|==
literal|null
condition|?
literal|null
else|:
name|reader
operator|.
name|normValues
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|normsCache
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
block|}
end_class
end_unit
