begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_comment
comment|/** This {@link MergePolicy} is used for upgrading all existing segments of   * an index when calling {@link IndexWriter#optimize()}.   * All other methods delegate to the base {@code MergePolicy} given to the constructor.   * This allows for an as-cheap-as possible upgrade of an older index by only upgrading segments that   * are created by previous Lucene versions. Optimize does no longer really optimize   * it is just used to&quot;optimize&quot; older segment versions away.   *<p>In general one would use {@link IndexUpgrader}, but for a fully customizeable upgrade,   * you can use this like any other {@code MergePolicy} and call {@link IndexWriter#optimize()}:   *<pre class="prettyprint lang-java">   *  IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_XX, new KeywordAnalyzer());   *  iwc.setMergePolicy(new UpgradeIndexMergePolicy(iwc.getMergePolicy()));   *  IndexWriter w = new IndexWriter(dir, iwc);   *  w.optimize();   *  w.close();   *</pre>   * @lucene.experimental   * @see IndexUpgrader   */
end_comment
begin_class
DECL|class|UpgradeIndexMergePolicy
specifier|public
class|class
name|UpgradeIndexMergePolicy
extends|extends
name|MergePolicy
block|{
DECL|field|base
specifier|protected
specifier|final
name|MergePolicy
name|base
decl_stmt|;
comment|/** Wrap the given {@link MergePolicy} and intercept optimize requests to    * only upgrade segments written with previous Lucene versions. */
DECL|method|UpgradeIndexMergePolicy
specifier|public
name|UpgradeIndexMergePolicy
parameter_list|(
name|MergePolicy
name|base
parameter_list|)
block|{
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
block|}
comment|/** Returns if the given segment should be upgraded. The default implementation    * will return {@code !Constants.LUCENE_MAIN_VERSION.equals(si.getVersion())},    * so all segments created with a different version number than this Lucene version will    * get upgraded.    */
DECL|method|shouldUpgradeSegment
specifier|protected
name|boolean
name|shouldUpgradeSegment
parameter_list|(
name|SegmentInfo
name|si
parameter_list|)
block|{
return|return
operator|!
name|Constants
operator|.
name|LUCENE_MAIN_VERSION
operator|.
name|equals
argument_list|(
name|si
operator|.
name|getVersion
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setIndexWriter
specifier|public
name|void
name|setIndexWriter
parameter_list|(
name|IndexWriter
name|writer
parameter_list|)
block|{
name|super
operator|.
name|setIndexWriter
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|base
operator|.
name|setIndexWriter
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|findMerges
specifier|public
name|MergeSpecification
name|findMerges
parameter_list|(
name|SegmentInfos
name|segmentInfos
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
return|return
name|base
operator|.
name|findMerges
argument_list|(
name|segmentInfos
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|findMergesForOptimize
specifier|public
name|MergeSpecification
name|findMergesForOptimize
parameter_list|(
name|SegmentInfos
name|segmentInfos
parameter_list|,
name|int
name|maxSegmentCount
parameter_list|,
name|Set
argument_list|<
name|SegmentInfo
argument_list|>
name|segmentsToOptimize
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
comment|// first find all old segments
specifier|final
name|HashSet
argument_list|<
name|SegmentInfo
argument_list|>
name|oldSegments
init|=
operator|new
name|HashSet
argument_list|<
name|SegmentInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|SegmentInfo
name|si
range|:
name|segmentInfos
control|)
block|{
if|if
condition|(
name|segmentsToOptimize
operator|.
name|contains
argument_list|(
name|si
argument_list|)
operator|&&
name|shouldUpgradeSegment
argument_list|(
name|si
argument_list|)
condition|)
block|{
name|oldSegments
operator|.
name|add
argument_list|(
name|si
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|verbose
argument_list|()
condition|)
name|message
argument_list|(
literal|"findMergesForOptimize: segmentsToUpgrade="
operator|+
name|oldSegments
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldSegments
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|MergeSpecification
name|spec
init|=
name|base
operator|.
name|findMergesForOptimize
argument_list|(
name|segmentInfos
argument_list|,
name|maxSegmentCount
argument_list|,
name|oldSegments
argument_list|)
decl_stmt|;
if|if
condition|(
name|spec
operator|!=
literal|null
condition|)
block|{
comment|// remove all segments that are in merge specification from oldSegments,
comment|// the resulting set contains all segments that are left over
comment|// and will be merged to one additional segment:
for|for
control|(
specifier|final
name|OneMerge
name|om
range|:
name|spec
operator|.
name|merges
control|)
block|{
name|oldSegments
operator|.
name|removeAll
argument_list|(
name|om
operator|.
name|segments
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|oldSegments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|verbose
argument_list|()
condition|)
name|message
argument_list|(
literal|"findMergesForOptimize: "
operator|+
name|base
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" does not want to merge all old segments, merge remaining ones into new segment: "
operator|+
name|oldSegments
argument_list|)
expr_stmt|;
specifier|final
name|SegmentInfos
name|newInfos
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|SegmentInfo
name|si
range|:
name|segmentInfos
control|)
block|{
if|if
condition|(
name|oldSegments
operator|.
name|contains
argument_list|(
name|si
argument_list|)
condition|)
block|{
name|newInfos
operator|.
name|add
argument_list|(
name|si
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add the final merge
if|if
condition|(
name|spec
operator|==
literal|null
condition|)
block|{
name|spec
operator|=
operator|new
name|MergeSpecification
argument_list|()
expr_stmt|;
block|}
name|spec
operator|.
name|add
argument_list|(
operator|new
name|OneMerge
argument_list|(
name|newInfos
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|spec
return|;
block|}
annotation|@
name|Override
DECL|method|findMergesToExpungeDeletes
specifier|public
name|MergeSpecification
name|findMergesToExpungeDeletes
parameter_list|(
name|SegmentInfos
name|segmentInfos
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
return|return
name|base
operator|.
name|findMergesToExpungeDeletes
argument_list|(
name|segmentInfos
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|useCompoundFile
specifier|public
name|boolean
name|useCompoundFile
parameter_list|(
name|SegmentInfos
name|segments
parameter_list|,
name|SegmentInfo
name|newSegment
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|base
operator|.
name|useCompoundFile
argument_list|(
name|segments
argument_list|,
name|newSegment
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|base
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"->"
operator|+
name|base
operator|+
literal|"]"
return|;
block|}
DECL|method|verbose
specifier|private
name|boolean
name|verbose
parameter_list|()
block|{
name|IndexWriter
name|w
init|=
name|writer
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|w
operator|!=
literal|null
operator|&&
name|w
operator|.
name|verbose
argument_list|()
return|;
block|}
DECL|method|message
specifier|private
name|void
name|message
parameter_list|(
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|verbose
argument_list|()
condition|)
name|writer
operator|.
name|get
argument_list|()
operator|.
name|message
argument_list|(
literal|"UPGMP: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
