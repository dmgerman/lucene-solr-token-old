begin_unit
begin_package
DECL|package|org.apache.lucene.index.codecs.lucene40
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|lucene40
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MergeState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|NormsWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_class
DECL|class|Lucene40NormsWriter
specifier|public
class|class
name|Lucene40NormsWriter
extends|extends
name|NormsWriter
block|{
DECL|field|out
specifier|private
name|IndexOutput
name|out
decl_stmt|;
DECL|field|normCount
specifier|private
name|int
name|normCount
init|=
literal|0
decl_stmt|;
comment|/** norms header placeholder */
DECL|field|NORMS_HEADER
specifier|static
specifier|final
name|byte
index|[]
name|NORMS_HEADER
init|=
operator|new
name|byte
index|[]
block|{
literal|'N'
block|,
literal|'R'
block|,
literal|'M'
block|,
operator|-
literal|1
block|}
decl_stmt|;
comment|/** Extension of norms file */
DECL|field|NORMS_EXTENSION
specifier|static
specifier|final
name|String
name|NORMS_EXTENSION
init|=
literal|"nrm"
decl_stmt|;
DECL|method|Lucene40NormsWriter
specifier|public
name|Lucene40NormsWriter
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|String
name|segment
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|normsFileName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segment
argument_list|,
literal|""
argument_list|,
name|NORMS_EXTENSION
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|out
operator|=
name|directory
operator|.
name|createOutput
argument_list|(
name|normsFileName
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|NORMS_HEADER
argument_list|,
literal|0
argument_list|,
name|NORMS_HEADER
operator|.
name|length
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|startField
specifier|public
name|void
name|startField
parameter_list|(
name|FieldInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|info
operator|.
name|omitNorms
operator|==
literal|false
assert|;
name|normCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeNorm
specifier|public
name|void
name|writeNorm
parameter_list|(
name|byte
name|norm
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeByte
argument_list|(
name|norm
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finish
specifier|public
name|void
name|finish
parameter_list|(
name|int
name|numDocs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|4
operator|+
name|normCount
operator|*
operator|(
name|long
operator|)
name|numDocs
operator|!=
name|out
operator|.
name|getFilePointer
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|".nrm file size mismatch: expected="
operator|+
operator|(
literal|4
operator|+
name|normCount
operator|*
operator|(
name|long
operator|)
name|numDocs
operator|)
operator|+
literal|" actual="
operator|+
name|out
operator|.
name|getFilePointer
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/** we override merge and bulk-merge norms when there are no deletions */
annotation|@
name|Override
DECL|method|merge
specifier|public
name|int
name|merge
parameter_list|(
name|MergeState
name|mergeState
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numMergedDocs
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FieldInfo
name|fi
range|:
name|mergeState
operator|.
name|fieldInfos
control|)
block|{
if|if
condition|(
name|fi
operator|.
name|isIndexed
operator|&&
operator|!
name|fi
operator|.
name|omitNorms
condition|)
block|{
name|startField
argument_list|(
name|fi
argument_list|)
expr_stmt|;
name|int
name|numMergedDocsForField
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MergeState
operator|.
name|IndexReaderAndLiveDocs
name|reader
range|:
name|mergeState
operator|.
name|readers
control|)
block|{
specifier|final
name|int
name|maxDoc
init|=
name|reader
operator|.
name|reader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
name|byte
name|normBuffer
index|[]
init|=
name|reader
operator|.
name|reader
operator|.
name|norms
argument_list|(
name|fi
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|normBuffer
operator|==
literal|null
condition|)
block|{
comment|// Can be null if this segment doesn't have
comment|// any docs with this field
name|normBuffer
operator|=
operator|new
name|byte
index|[
name|maxDoc
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|normBuffer
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reader
operator|.
name|liveDocs
operator|==
literal|null
condition|)
block|{
comment|//optimized case for segments without deleted docs
name|out
operator|.
name|writeBytes
argument_list|(
name|normBuffer
argument_list|,
name|maxDoc
argument_list|)
expr_stmt|;
name|numMergedDocsForField
operator|+=
name|maxDoc
expr_stmt|;
block|}
else|else
block|{
comment|// this segment has deleted docs, so we have to
comment|// check for every doc if it is deleted or not
specifier|final
name|Bits
name|liveDocs
init|=
name|reader
operator|.
name|liveDocs
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|maxDoc
condition|;
name|k
operator|++
control|)
block|{
if|if
condition|(
name|liveDocs
operator|.
name|get
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|numMergedDocsForField
operator|++
expr_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|normBuffer
index|[
name|k
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|mergeState
operator|.
name|checkAbort
operator|.
name|work
argument_list|(
name|maxDoc
argument_list|)
expr_stmt|;
block|}
assert|assert
name|numMergedDocs
operator|==
literal|0
operator|||
name|numMergedDocs
operator|==
name|numMergedDocsForField
assert|;
name|numMergedDocs
operator|=
name|numMergedDocsForField
expr_stmt|;
block|}
block|}
name|finish
argument_list|(
name|numMergedDocs
argument_list|)
expr_stmt|;
return|return
name|numMergedDocs
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
