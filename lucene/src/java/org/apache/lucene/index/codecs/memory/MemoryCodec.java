begin_unit
begin_package
DECL|package|org.apache.lucene.index.codecs.memory
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|memory
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsAndPositionsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PerDocWriteState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentReadState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentWriteState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|DefaultDocValuesConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|DefaultDocValuesProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|FieldsConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|FieldsProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|PerDocConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|PerDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|PostingsConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|TermStats
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|TermsConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ByteArrayDataInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMOutputStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|Builder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|ByteSequenceOutputs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|BytesRefFSTEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|FST
import|;
end_import
begin_comment
comment|// TODO: would be nice to somehow allow this to act like
end_comment
begin_comment
comment|// InstantiatedIndex, by never writing to disk; ie you write
end_comment
begin_comment
comment|// to this Codec in RAM only and then when you open a reader
end_comment
begin_comment
comment|// it pulls the FST directly from what you wrote w/o going
end_comment
begin_comment
comment|// to disk.
end_comment
begin_comment
comment|/** Stores terms& postings (docs, positions, payloads) in  *  RAM, using an FST.  *  *<p>Note that this codec implements advance as a linear  * scan!  This means if you store large fields in here,  * queries that rely on advance will (AND BooleanQuery,  * PhraseQuery) will be relatively slow!  *  * @lucene.experimental */
end_comment
begin_class
DECL|class|MemoryCodec
specifier|public
class|class
name|MemoryCodec
extends|extends
name|Codec
block|{
DECL|method|MemoryCodec
specifier|public
name|MemoryCodec
parameter_list|()
block|{
name|super
argument_list|(
literal|"Memory"
argument_list|)
expr_stmt|;
block|}
DECL|field|VERBOSE
specifier|private
specifier|static
specifier|final
name|boolean
name|VERBOSE
init|=
literal|false
decl_stmt|;
DECL|class|TermsWriter
specifier|private
specifier|final
specifier|static
class|class
name|TermsWriter
extends|extends
name|TermsConsumer
block|{
DECL|field|out
specifier|private
specifier|final
name|IndexOutput
name|out
decl_stmt|;
DECL|field|field
specifier|private
specifier|final
name|FieldInfo
name|field
decl_stmt|;
DECL|field|builder
specifier|private
specifier|final
name|Builder
argument_list|<
name|BytesRef
argument_list|>
name|builder
decl_stmt|;
DECL|field|outputs
specifier|private
specifier|final
name|ByteSequenceOutputs
name|outputs
init|=
name|ByteSequenceOutputs
operator|.
name|getSingleton
argument_list|()
decl_stmt|;
DECL|field|termCount
specifier|private
name|int
name|termCount
decl_stmt|;
DECL|method|TermsWriter
specifier|public
name|TermsWriter
parameter_list|(
name|IndexOutput
name|out
parameter_list|,
name|FieldInfo
name|field
parameter_list|)
block|{
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|builder
operator|=
operator|new
name|Builder
argument_list|<
name|BytesRef
argument_list|>
argument_list|(
name|FST
operator|.
name|INPUT_TYPE
operator|.
name|BYTE1
argument_list|,
name|outputs
argument_list|)
expr_stmt|;
comment|// The byte[] output we create can easily be> 255 bytes:
name|builder
operator|.
name|setAllowArrayArcs
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|class|PostingsWriter
specifier|private
class|class
name|PostingsWriter
extends|extends
name|PostingsConsumer
block|{
DECL|field|lastDocID
specifier|private
name|int
name|lastDocID
decl_stmt|;
DECL|field|lastPos
specifier|private
name|int
name|lastPos
decl_stmt|;
DECL|field|lastPayloadLen
specifier|private
name|int
name|lastPayloadLen
decl_stmt|;
comment|// NOTE: not private so we don't pay access check at runtime:
DECL|field|docCount
name|int
name|docCount
decl_stmt|;
DECL|field|buffer
name|RAMOutputStream
name|buffer
init|=
operator|new
name|RAMOutputStream
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|startDoc
specifier|public
name|void
name|startDoc
parameter_list|(
name|int
name|docID
parameter_list|,
name|int
name|termDocFreq
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    startDoc docID="
operator|+
name|docID
operator|+
literal|" freq="
operator|+
name|termDocFreq
argument_list|)
expr_stmt|;
specifier|final
name|int
name|delta
init|=
name|docID
operator|-
name|lastDocID
decl_stmt|;
assert|assert
name|docID
operator|==
literal|0
operator|||
name|delta
operator|>
literal|0
assert|;
name|lastDocID
operator|=
name|docID
expr_stmt|;
name|docCount
operator|++
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|omitTermFreqAndPositions
condition|)
block|{
name|buffer
operator|.
name|writeVInt
argument_list|(
name|delta
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|termDocFreq
operator|==
literal|1
condition|)
block|{
name|buffer
operator|.
name|writeVInt
argument_list|(
operator|(
name|delta
operator|<<
literal|1
operator|)
operator||
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|writeVInt
argument_list|(
name|delta
operator|<<
literal|1
argument_list|)
expr_stmt|;
assert|assert
name|termDocFreq
operator|>
literal|0
assert|;
name|buffer
operator|.
name|writeVInt
argument_list|(
name|termDocFreq
argument_list|)
expr_stmt|;
block|}
name|lastPos
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addPosition
specifier|public
name|void
name|addPosition
parameter_list|(
name|int
name|pos
parameter_list|,
name|BytesRef
name|payload
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|payload
operator|==
literal|null
operator|||
name|field
operator|.
name|storePayloads
assert|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      addPos pos="
operator|+
name|pos
operator|+
literal|" payload="
operator|+
name|payload
argument_list|)
expr_stmt|;
specifier|final
name|int
name|delta
init|=
name|pos
operator|-
name|lastPos
decl_stmt|;
assert|assert
name|delta
operator|>=
literal|0
assert|;
name|lastPos
operator|=
name|pos
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|storePayloads
condition|)
block|{
specifier|final
name|int
name|payloadLen
init|=
name|payload
operator|==
literal|null
condition|?
literal|0
else|:
name|payload
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|payloadLen
operator|!=
name|lastPayloadLen
condition|)
block|{
name|lastPayloadLen
operator|=
name|payloadLen
expr_stmt|;
name|buffer
operator|.
name|writeVInt
argument_list|(
operator|(
name|delta
operator|<<
literal|1
operator|)
operator||
literal|1
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|writeVInt
argument_list|(
name|payloadLen
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|writeVInt
argument_list|(
name|delta
operator|<<
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|payloadLen
operator|>
literal|0
condition|)
block|{
name|buffer
operator|.
name|writeBytes
argument_list|(
name|payload
operator|.
name|bytes
argument_list|,
name|payload
operator|.
name|offset
argument_list|,
name|payloadLen
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|buffer
operator|.
name|writeVInt
argument_list|(
name|delta
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|finishDoc
specifier|public
name|void
name|finishDoc
parameter_list|()
block|{       }
DECL|method|reset
specifier|public
name|PostingsWriter
name|reset
parameter_list|()
block|{
assert|assert
name|buffer
operator|.
name|getFilePointer
argument_list|()
operator|==
literal|0
assert|;
name|lastDocID
operator|=
literal|0
expr_stmt|;
name|docCount
operator|=
literal|0
expr_stmt|;
name|lastPayloadLen
operator|=
literal|0
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
DECL|field|postingsWriter
specifier|private
specifier|final
name|PostingsWriter
name|postingsWriter
init|=
operator|new
name|PostingsWriter
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|startTerm
specifier|public
name|PostingsConsumer
name|startTerm
parameter_list|(
name|BytesRef
name|text
parameter_list|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  startTerm term="
operator|+
name|text
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|postingsWriter
operator|.
name|reset
argument_list|()
return|;
block|}
DECL|field|buffer2
specifier|private
specifier|final
name|RAMOutputStream
name|buffer2
init|=
operator|new
name|RAMOutputStream
argument_list|()
decl_stmt|;
DECL|field|spare
specifier|private
specifier|final
name|BytesRef
name|spare
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|field|finalBuffer
specifier|private
name|byte
index|[]
name|finalBuffer
init|=
operator|new
name|byte
index|[
literal|128
index|]
decl_stmt|;
annotation|@
name|Override
DECL|method|finishTerm
specifier|public
name|void
name|finishTerm
parameter_list|(
name|BytesRef
name|text
parameter_list|,
name|TermStats
name|stats
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|postingsWriter
operator|.
name|docCount
operator|==
name|stats
operator|.
name|docFreq
assert|;
assert|assert
name|buffer2
operator|.
name|getFilePointer
argument_list|()
operator|==
literal|0
assert|;
name|buffer2
operator|.
name|writeVInt
argument_list|(
name|stats
operator|.
name|docFreq
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|field
operator|.
name|omitTermFreqAndPositions
condition|)
block|{
name|buffer2
operator|.
name|writeVLong
argument_list|(
name|stats
operator|.
name|totalTermFreq
operator|-
name|stats
operator|.
name|docFreq
argument_list|)
expr_stmt|;
block|}
name|int
name|pos
init|=
operator|(
name|int
operator|)
name|buffer2
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|buffer2
operator|.
name|writeTo
argument_list|(
name|finalBuffer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|buffer2
operator|.
name|reset
argument_list|()
expr_stmt|;
specifier|final
name|int
name|totalBytes
init|=
name|pos
operator|+
operator|(
name|int
operator|)
name|postingsWriter
operator|.
name|buffer
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
if|if
condition|(
name|totalBytes
operator|>
name|finalBuffer
operator|.
name|length
condition|)
block|{
name|finalBuffer
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|finalBuffer
argument_list|,
name|totalBytes
argument_list|)
expr_stmt|;
block|}
name|postingsWriter
operator|.
name|buffer
operator|.
name|writeTo
argument_list|(
name|finalBuffer
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|postingsWriter
operator|.
name|buffer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|spare
operator|.
name|bytes
operator|=
name|finalBuffer
expr_stmt|;
name|spare
operator|.
name|length
operator|=
name|totalBytes
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    finishTerm term="
operator|+
name|text
operator|.
name|utf8ToString
argument_list|()
operator|+
literal|" "
operator|+
name|totalBytes
operator|+
literal|" bytes totalTF="
operator|+
name|stats
operator|.
name|totalTermFreq
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalBytes
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      "
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|finalBuffer
index|[
name|i
index|]
operator|&
literal|0xFF
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|add
argument_list|(
name|text
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|spare
argument_list|)
argument_list|)
expr_stmt|;
name|termCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finish
specifier|public
name|void
name|finish
parameter_list|(
name|long
name|sumTotalTermFreq
parameter_list|,
name|long
name|sumDocFreq
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|termCount
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|writeVInt
argument_list|(
name|termCount
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|field
operator|.
name|number
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|field
operator|.
name|omitTermFreqAndPositions
condition|)
block|{
name|out
operator|.
name|writeVLong
argument_list|(
name|sumTotalTermFreq
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|writeVLong
argument_list|(
name|sumDocFreq
argument_list|)
expr_stmt|;
name|builder
operator|.
name|finish
argument_list|()
operator|.
name|save
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"finish field="
operator|+
name|field
operator|.
name|name
operator|+
literal|" fp="
operator|+
name|out
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getComparator
specifier|public
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|getComparator
parameter_list|()
block|{
return|return
name|BytesRef
operator|.
name|getUTF8SortedAsUnicodeComparator
argument_list|()
return|;
block|}
block|}
DECL|field|EXTENSION
specifier|private
specifier|static
name|String
name|EXTENSION
init|=
literal|"ram"
decl_stmt|;
annotation|@
name|Override
DECL|method|fieldsConsumer
specifier|public
name|FieldsConsumer
name|fieldsConsumer
parameter_list|(
name|SegmentWriteState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|fileName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentName
argument_list|,
name|state
operator|.
name|codecId
argument_list|,
name|EXTENSION
argument_list|)
decl_stmt|;
specifier|final
name|IndexOutput
name|out
init|=
name|state
operator|.
name|directory
operator|.
name|createOutput
argument_list|(
name|fileName
argument_list|,
name|state
operator|.
name|context
argument_list|)
decl_stmt|;
return|return
operator|new
name|FieldsConsumer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TermsConsumer
name|addField
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\naddField field="
operator|+
name|field
operator|.
name|name
argument_list|)
expr_stmt|;
return|return
operator|new
name|TermsWriter
argument_list|(
name|out
argument_list|,
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// EOF marker:
try|try
block|{
name|out
operator|.
name|writeVInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
DECL|class|FSTDocsEnum
specifier|private
specifier|final
specifier|static
class|class
name|FSTDocsEnum
extends|extends
name|DocsEnum
block|{
DECL|field|omitTFAP
specifier|private
specifier|final
name|boolean
name|omitTFAP
decl_stmt|;
DECL|field|storePayloads
specifier|private
specifier|final
name|boolean
name|storePayloads
decl_stmt|;
DECL|field|buffer
specifier|private
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
DECL|field|in
specifier|private
specifier|final
name|ByteArrayDataInput
name|in
init|=
operator|new
name|ByteArrayDataInput
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
DECL|field|liveDocs
specifier|private
name|Bits
name|liveDocs
decl_stmt|;
DECL|field|docUpto
specifier|private
name|int
name|docUpto
decl_stmt|;
DECL|field|docID
specifier|private
name|int
name|docID
decl_stmt|;
DECL|field|freq
specifier|private
name|int
name|freq
decl_stmt|;
DECL|field|payloadLen
specifier|private
name|int
name|payloadLen
decl_stmt|;
DECL|field|numDocs
specifier|private
name|int
name|numDocs
decl_stmt|;
DECL|method|FSTDocsEnum
specifier|public
name|FSTDocsEnum
parameter_list|(
name|boolean
name|omitTFAP
parameter_list|,
name|boolean
name|storePayloads
parameter_list|)
block|{
name|this
operator|.
name|omitTFAP
operator|=
name|omitTFAP
expr_stmt|;
name|this
operator|.
name|storePayloads
operator|=
name|storePayloads
expr_stmt|;
block|}
DECL|method|canReuse
specifier|public
name|boolean
name|canReuse
parameter_list|(
name|boolean
name|omitTFAP
parameter_list|,
name|boolean
name|storePayloads
parameter_list|)
block|{
return|return
name|omitTFAP
operator|==
name|this
operator|.
name|omitTFAP
operator|&&
name|storePayloads
operator|==
name|this
operator|.
name|storePayloads
return|;
block|}
DECL|method|reset
specifier|public
name|FSTDocsEnum
name|reset
parameter_list|(
name|BytesRef
name|bufferIn
parameter_list|,
name|Bits
name|liveDocs
parameter_list|,
name|int
name|numDocs
parameter_list|)
block|{
assert|assert
name|numDocs
operator|>
literal|0
assert|;
if|if
condition|(
name|buffer
operator|.
name|length
operator|<
name|bufferIn
operator|.
name|length
operator|-
name|bufferIn
operator|.
name|offset
condition|)
block|{
name|buffer
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|buffer
argument_list|,
name|bufferIn
operator|.
name|length
operator|-
name|bufferIn
operator|.
name|offset
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|reset
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|bufferIn
operator|.
name|length
operator|-
name|bufferIn
operator|.
name|offset
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bufferIn
operator|.
name|bytes
argument_list|,
name|bufferIn
operator|.
name|offset
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|bufferIn
operator|.
name|length
operator|-
name|bufferIn
operator|.
name|offset
argument_list|)
expr_stmt|;
name|this
operator|.
name|liveDocs
operator|=
name|liveDocs
expr_stmt|;
name|docID
operator|=
literal|0
expr_stmt|;
name|docUpto
operator|=
literal|0
expr_stmt|;
name|payloadLen
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|numDocs
operator|=
name|numDocs
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  nextDoc cycle docUpto="
operator|+
name|docUpto
operator|+
literal|" numDocs="
operator|+
name|numDocs
operator|+
literal|" fp="
operator|+
name|in
operator|.
name|getPosition
argument_list|()
operator|+
literal|" this="
operator|+
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|docUpto
operator|==
name|numDocs
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    END"
argument_list|)
expr_stmt|;
block|}
return|return
name|docID
operator|=
name|NO_MORE_DOCS
return|;
block|}
name|docUpto
operator|++
expr_stmt|;
if|if
condition|(
name|omitTFAP
condition|)
block|{
name|docID
operator|+=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|freq
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|code
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|docID
operator|+=
name|code
operator|>>>
literal|1
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  docID="
operator|+
name|docID
operator|+
literal|" code="
operator|+
name|code
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|code
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
name|freq
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|freq
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
assert|assert
name|freq
operator|>
literal|0
assert|;
block|}
comment|// Skip positions
for|for
control|(
name|int
name|posUpto
init|=
literal|0
init|;
name|posUpto
operator|<
name|freq
condition|;
name|posUpto
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|storePayloads
condition|)
block|{
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|posCode
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|posCode
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
name|payloadLen
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
name|in
operator|.
name|skipBytes
argument_list|(
name|payloadLen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|liveDocs
operator|==
literal|null
operator|||
name|liveDocs
operator|.
name|get
argument_list|(
name|docID
argument_list|)
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    return docID="
operator|+
name|docID
operator|+
literal|" freq="
operator|+
name|freq
argument_list|)
expr_stmt|;
return|return
name|docID
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|docID
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
block|{
comment|// TODO: we could make more efficient version, but, it
comment|// should be rare that this will matter in practice
comment|// since usually apps will not store "big" fields in
comment|// this codec!
comment|//System.out.println("advance start docID=" + docID + " target=" + target);
while|while
condition|(
name|nextDoc
argument_list|()
operator|<
name|target
condition|)
block|{       }
return|return
name|docID
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
block|{
return|return
name|freq
return|;
block|}
block|}
DECL|class|FSTDocsAndPositionsEnum
specifier|private
specifier|final
specifier|static
class|class
name|FSTDocsAndPositionsEnum
extends|extends
name|DocsAndPositionsEnum
block|{
DECL|field|storePayloads
specifier|private
specifier|final
name|boolean
name|storePayloads
decl_stmt|;
DECL|field|buffer
specifier|private
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
DECL|field|in
specifier|private
specifier|final
name|ByteArrayDataInput
name|in
init|=
operator|new
name|ByteArrayDataInput
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
DECL|field|liveDocs
specifier|private
name|Bits
name|liveDocs
decl_stmt|;
DECL|field|docUpto
specifier|private
name|int
name|docUpto
decl_stmt|;
DECL|field|docID
specifier|private
name|int
name|docID
decl_stmt|;
DECL|field|freq
specifier|private
name|int
name|freq
decl_stmt|;
DECL|field|numDocs
specifier|private
name|int
name|numDocs
decl_stmt|;
DECL|field|posPending
specifier|private
name|int
name|posPending
decl_stmt|;
DECL|field|payloadLength
specifier|private
name|int
name|payloadLength
decl_stmt|;
DECL|field|payloadRetrieved
specifier|private
name|boolean
name|payloadRetrieved
decl_stmt|;
DECL|field|pos
specifier|private
name|int
name|pos
decl_stmt|;
DECL|field|payload
specifier|private
specifier|final
name|BytesRef
name|payload
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|method|FSTDocsAndPositionsEnum
specifier|public
name|FSTDocsAndPositionsEnum
parameter_list|(
name|boolean
name|storePayloads
parameter_list|)
block|{
name|this
operator|.
name|storePayloads
operator|=
name|storePayloads
expr_stmt|;
block|}
DECL|method|canReuse
specifier|public
name|boolean
name|canReuse
parameter_list|(
name|boolean
name|storePayloads
parameter_list|)
block|{
return|return
name|storePayloads
operator|==
name|this
operator|.
name|storePayloads
return|;
block|}
DECL|method|reset
specifier|public
name|FSTDocsAndPositionsEnum
name|reset
parameter_list|(
name|BytesRef
name|bufferIn
parameter_list|,
name|Bits
name|liveDocs
parameter_list|,
name|int
name|numDocs
parameter_list|)
block|{
assert|assert
name|numDocs
operator|>
literal|0
assert|;
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"D&P reset bytes this="
operator|+
name|this
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|bufferIn
operator|.
name|offset
init|;
name|i
operator|<
name|bufferIn
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|bufferIn
operator|.
name|bytes
index|[
name|i
index|]
operator|&
literal|0xFF
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|buffer
operator|.
name|length
operator|<
name|bufferIn
operator|.
name|length
operator|-
name|bufferIn
operator|.
name|offset
condition|)
block|{
name|buffer
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|buffer
argument_list|,
name|bufferIn
operator|.
name|length
operator|-
name|bufferIn
operator|.
name|offset
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|reset
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|bufferIn
operator|.
name|length
operator|-
name|bufferIn
operator|.
name|offset
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bufferIn
operator|.
name|bytes
argument_list|,
name|bufferIn
operator|.
name|offset
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|bufferIn
operator|.
name|length
operator|-
name|bufferIn
operator|.
name|offset
argument_list|)
expr_stmt|;
name|this
operator|.
name|liveDocs
operator|=
name|liveDocs
expr_stmt|;
name|docID
operator|=
literal|0
expr_stmt|;
name|docUpto
operator|=
literal|0
expr_stmt|;
name|payload
operator|.
name|bytes
operator|=
name|buffer
expr_stmt|;
name|payloadLength
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|numDocs
operator|=
name|numDocs
expr_stmt|;
name|posPending
operator|=
literal|0
expr_stmt|;
name|payloadRetrieved
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
block|{
while|while
condition|(
name|posPending
operator|>
literal|0
condition|)
block|{
name|nextPosition
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  nextDoc cycle docUpto="
operator|+
name|docUpto
operator|+
literal|" numDocs="
operator|+
name|numDocs
operator|+
literal|" fp="
operator|+
name|in
operator|.
name|getPosition
argument_list|()
operator|+
literal|" this="
operator|+
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|docUpto
operator|==
name|numDocs
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    END"
argument_list|)
expr_stmt|;
return|return
name|docID
operator|=
name|NO_MORE_DOCS
return|;
block|}
name|docUpto
operator|++
expr_stmt|;
specifier|final
name|int
name|code
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|docID
operator|+=
name|code
operator|>>>
literal|1
expr_stmt|;
if|if
condition|(
operator|(
name|code
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
name|freq
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|freq
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
assert|assert
name|freq
operator|>
literal|0
assert|;
block|}
if|if
condition|(
name|liveDocs
operator|==
literal|null
operator|||
name|liveDocs
operator|.
name|get
argument_list|(
name|docID
argument_list|)
condition|)
block|{
name|pos
operator|=
literal|0
expr_stmt|;
name|posPending
operator|=
name|freq
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    return docID="
operator|+
name|docID
operator|+
literal|" freq="
operator|+
name|freq
argument_list|)
expr_stmt|;
return|return
name|docID
return|;
block|}
comment|// Skip positions
for|for
control|(
name|int
name|posUpto
init|=
literal|0
init|;
name|posUpto
operator|<
name|freq
condition|;
name|posUpto
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|storePayloads
condition|)
block|{
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|codeSkip
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|codeSkip
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
name|payloadLength
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    new payloadLen="
operator|+
name|payloadLength
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|skipBytes
argument_list|(
name|payloadLength
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|nextPosition
specifier|public
name|int
name|nextPosition
parameter_list|()
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    nextPos storePayloads="
operator|+
name|storePayloads
operator|+
literal|" this="
operator|+
name|this
argument_list|)
expr_stmt|;
assert|assert
name|posPending
operator|>
literal|0
assert|;
name|posPending
operator|--
expr_stmt|;
if|if
condition|(
operator|!
name|storePayloads
condition|)
block|{
name|pos
operator|+=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|code
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|pos
operator|+=
name|code
operator|>>>
literal|1
expr_stmt|;
if|if
condition|(
operator|(
name|code
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
name|payloadLength
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
comment|//System.out.println("      new payloadLen=" + payloadLength);
comment|//} else {
comment|//System.out.println("      same payloadLen=" + payloadLength);
block|}
name|payload
operator|.
name|offset
operator|=
name|in
operator|.
name|getPosition
argument_list|()
expr_stmt|;
name|in
operator|.
name|skipBytes
argument_list|(
name|payloadLength
argument_list|)
expr_stmt|;
name|payload
operator|.
name|length
operator|=
name|payloadLength
expr_stmt|;
comment|// Necessary, in case caller changed the
comment|// payload.bytes from prior call:
name|payload
operator|.
name|bytes
operator|=
name|buffer
expr_stmt|;
name|payloadRetrieved
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      pos="
operator|+
name|pos
operator|+
literal|" payload="
operator|+
name|payload
operator|+
literal|" fp="
operator|+
name|in
operator|.
name|getPosition
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|pos
return|;
block|}
annotation|@
name|Override
DECL|method|getPayload
specifier|public
name|BytesRef
name|getPayload
parameter_list|()
block|{
name|payloadRetrieved
operator|=
literal|true
expr_stmt|;
return|return
name|payload
return|;
block|}
annotation|@
name|Override
DECL|method|hasPayload
specifier|public
name|boolean
name|hasPayload
parameter_list|()
block|{
return|return
operator|!
name|payloadRetrieved
operator|&&
name|payload
operator|.
name|length
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|docID
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
block|{
comment|// TODO: we could make more efficient version, but, it
comment|// should be rare that this will matter in practice
comment|// since usually apps will not store "big" fields in
comment|// this codec!
comment|//System.out.println("advance target=" + target);
while|while
condition|(
name|nextDoc
argument_list|()
operator|<
name|target
condition|)
block|{       }
comment|//System.out.println("  return " + docID);
return|return
name|docID
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
block|{
return|return
name|freq
return|;
block|}
block|}
DECL|class|FSTTermsEnum
specifier|private
specifier|final
specifier|static
class|class
name|FSTTermsEnum
extends|extends
name|TermsEnum
block|{
DECL|field|field
specifier|private
specifier|final
name|FieldInfo
name|field
decl_stmt|;
DECL|field|fstEnum
specifier|private
specifier|final
name|BytesRefFSTEnum
argument_list|<
name|BytesRef
argument_list|>
name|fstEnum
decl_stmt|;
DECL|field|buffer
specifier|private
specifier|final
name|ByteArrayDataInput
name|buffer
init|=
operator|new
name|ByteArrayDataInput
argument_list|()
decl_stmt|;
DECL|field|didDecode
specifier|private
name|boolean
name|didDecode
decl_stmt|;
DECL|field|docFreq
specifier|private
name|int
name|docFreq
decl_stmt|;
DECL|field|totalTermFreq
specifier|private
name|long
name|totalTermFreq
decl_stmt|;
DECL|field|current
specifier|private
name|BytesRefFSTEnum
operator|.
name|InputOutput
argument_list|<
name|BytesRef
argument_list|>
name|current
decl_stmt|;
DECL|method|FSTTermsEnum
specifier|public
name|FSTTermsEnum
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
name|FST
argument_list|<
name|BytesRef
argument_list|>
name|fst
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|fstEnum
operator|=
operator|new
name|BytesRefFSTEnum
argument_list|<
name|BytesRef
argument_list|>
argument_list|(
name|fst
argument_list|)
expr_stmt|;
block|}
DECL|method|decodeMetaData
specifier|private
name|void
name|decodeMetaData
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|didDecode
condition|)
block|{
name|buffer
operator|.
name|reset
argument_list|(
name|current
operator|.
name|output
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|current
operator|.
name|output
operator|.
name|length
argument_list|)
expr_stmt|;
name|docFreq
operator|=
name|buffer
operator|.
name|readVInt
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|field
operator|.
name|omitTermFreqAndPositions
condition|)
block|{
name|totalTermFreq
operator|=
name|docFreq
operator|+
name|buffer
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|totalTermFreq
operator|=
literal|0
expr_stmt|;
block|}
name|current
operator|.
name|output
operator|.
name|offset
operator|=
name|buffer
operator|.
name|getPosition
argument_list|()
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  df="
operator|+
name|docFreq
operator|+
literal|" totTF="
operator|+
name|totalTermFreq
operator|+
literal|" offset="
operator|+
name|buffer
operator|.
name|getPosition
argument_list|()
operator|+
literal|" len="
operator|+
name|current
operator|.
name|output
operator|.
name|length
argument_list|)
expr_stmt|;
name|didDecode
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|seekExact
specifier|public
name|boolean
name|seekExact
parameter_list|(
name|BytesRef
name|text
parameter_list|,
name|boolean
name|useCache
comment|/* ignored */
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"te.seekExact text="
operator|+
name|field
operator|.
name|name
operator|+
literal|":"
operator|+
name|text
operator|.
name|utf8ToString
argument_list|()
operator|+
literal|" this="
operator|+
name|this
argument_list|)
expr_stmt|;
name|current
operator|=
name|fstEnum
operator|.
name|seekExact
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|didDecode
operator|=
literal|false
expr_stmt|;
return|return
name|current
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|seekCeil
specifier|public
name|SeekStatus
name|seekCeil
parameter_list|(
name|BytesRef
name|text
parameter_list|,
name|boolean
name|useCache
comment|/* ignored */
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"te.seek text="
operator|+
name|field
operator|.
name|name
operator|+
literal|":"
operator|+
name|text
operator|.
name|utf8ToString
argument_list|()
operator|+
literal|" this="
operator|+
name|this
argument_list|)
expr_stmt|;
name|current
operator|=
name|fstEnum
operator|.
name|seekCeil
argument_list|(
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
return|return
name|SeekStatus
operator|.
name|END
return|;
block|}
else|else
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  got term="
operator|+
name|current
operator|.
name|input
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|current
operator|.
name|output
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    "
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|current
operator|.
name|output
operator|.
name|bytes
index|[
name|i
index|]
operator|&
literal|0xFF
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|didDecode
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|text
operator|.
name|equals
argument_list|(
name|current
operator|.
name|input
argument_list|)
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  found!"
argument_list|)
expr_stmt|;
return|return
name|SeekStatus
operator|.
name|FOUND
return|;
block|}
else|else
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  not found: "
operator|+
name|current
operator|.
name|input
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|SeekStatus
operator|.
name|NOT_FOUND
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|docs
specifier|public
name|DocsEnum
name|docs
parameter_list|(
name|Bits
name|liveDocs
parameter_list|,
name|DocsEnum
name|reuse
parameter_list|)
throws|throws
name|IOException
block|{
name|decodeMetaData
argument_list|()
expr_stmt|;
name|FSTDocsEnum
name|docsEnum
decl_stmt|;
if|if
condition|(
name|reuse
operator|==
literal|null
operator|||
operator|!
operator|(
name|reuse
operator|instanceof
name|FSTDocsEnum
operator|)
condition|)
block|{
name|docsEnum
operator|=
operator|new
name|FSTDocsEnum
argument_list|(
name|field
operator|.
name|omitTermFreqAndPositions
argument_list|,
name|field
operator|.
name|storePayloads
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docsEnum
operator|=
operator|(
name|FSTDocsEnum
operator|)
name|reuse
expr_stmt|;
if|if
condition|(
operator|!
name|docsEnum
operator|.
name|canReuse
argument_list|(
name|field
operator|.
name|omitTermFreqAndPositions
argument_list|,
name|field
operator|.
name|storePayloads
argument_list|)
condition|)
block|{
name|docsEnum
operator|=
operator|new
name|FSTDocsEnum
argument_list|(
name|field
operator|.
name|omitTermFreqAndPositions
argument_list|,
name|field
operator|.
name|storePayloads
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|docsEnum
operator|.
name|reset
argument_list|(
name|current
operator|.
name|output
argument_list|,
name|liveDocs
argument_list|,
name|docFreq
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|docsAndPositions
specifier|public
name|DocsAndPositionsEnum
name|docsAndPositions
parameter_list|(
name|Bits
name|liveDocs
parameter_list|,
name|DocsAndPositionsEnum
name|reuse
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|field
operator|.
name|omitTermFreqAndPositions
condition|)
block|{
return|return
literal|null
return|;
block|}
name|decodeMetaData
argument_list|()
expr_stmt|;
name|FSTDocsAndPositionsEnum
name|docsAndPositionsEnum
decl_stmt|;
if|if
condition|(
name|reuse
operator|==
literal|null
operator|||
operator|!
operator|(
name|reuse
operator|instanceof
name|FSTDocsAndPositionsEnum
operator|)
condition|)
block|{
name|docsAndPositionsEnum
operator|=
operator|new
name|FSTDocsAndPositionsEnum
argument_list|(
name|field
operator|.
name|storePayloads
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docsAndPositionsEnum
operator|=
operator|(
name|FSTDocsAndPositionsEnum
operator|)
name|reuse
expr_stmt|;
if|if
condition|(
operator|!
name|docsAndPositionsEnum
operator|.
name|canReuse
argument_list|(
name|field
operator|.
name|storePayloads
argument_list|)
condition|)
block|{
name|docsAndPositionsEnum
operator|=
operator|new
name|FSTDocsAndPositionsEnum
argument_list|(
name|field
operator|.
name|storePayloads
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"D&P reset this="
operator|+
name|this
argument_list|)
expr_stmt|;
return|return
name|docsAndPositionsEnum
operator|.
name|reset
argument_list|(
name|current
operator|.
name|output
argument_list|,
name|liveDocs
argument_list|,
name|docFreq
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|term
specifier|public
name|BytesRef
name|term
parameter_list|()
block|{
return|return
name|current
operator|.
name|input
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|BytesRef
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"te.next"
argument_list|)
expr_stmt|;
name|current
operator|=
name|fstEnum
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  END"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|didDecode
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|VERBOSE
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  term="
operator|+
name|field
operator|.
name|name
operator|+
literal|":"
operator|+
name|current
operator|.
name|input
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|current
operator|.
name|input
return|;
block|}
annotation|@
name|Override
DECL|method|docFreq
specifier|public
name|int
name|docFreq
parameter_list|()
throws|throws
name|IOException
block|{
name|decodeMetaData
argument_list|()
expr_stmt|;
return|return
name|docFreq
return|;
block|}
annotation|@
name|Override
DECL|method|totalTermFreq
specifier|public
name|long
name|totalTermFreq
parameter_list|()
throws|throws
name|IOException
block|{
name|decodeMetaData
argument_list|()
expr_stmt|;
return|return
name|totalTermFreq
return|;
block|}
annotation|@
name|Override
DECL|method|getComparator
specifier|public
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|getComparator
parameter_list|()
block|{
return|return
name|BytesRef
operator|.
name|getUTF8SortedAsUnicodeComparator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|seekExact
specifier|public
name|void
name|seekExact
parameter_list|(
name|long
name|ord
parameter_list|)
block|{
comment|// NOTE: we could add this...
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|ord
specifier|public
name|long
name|ord
parameter_list|()
block|{
comment|// NOTE: we could add this...
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
DECL|class|TermsReader
specifier|private
specifier|final
specifier|static
class|class
name|TermsReader
extends|extends
name|Terms
block|{
DECL|field|sumTotalTermFreq
specifier|private
specifier|final
name|long
name|sumTotalTermFreq
decl_stmt|;
DECL|field|sumDocFreq
specifier|private
specifier|final
name|long
name|sumDocFreq
decl_stmt|;
DECL|field|fst
specifier|private
name|FST
argument_list|<
name|BytesRef
argument_list|>
name|fst
decl_stmt|;
DECL|field|outputs
specifier|private
specifier|final
name|ByteSequenceOutputs
name|outputs
init|=
name|ByteSequenceOutputs
operator|.
name|getSingleton
argument_list|()
decl_stmt|;
DECL|field|field
specifier|private
specifier|final
name|FieldInfo
name|field
decl_stmt|;
DECL|method|TermsReader
specifier|public
name|TermsReader
parameter_list|(
name|FieldInfos
name|fieldInfos
parameter_list|,
name|IndexInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|fieldNumber
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|field
operator|=
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|fieldNumber
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|field
operator|.
name|omitTermFreqAndPositions
condition|)
block|{
name|sumTotalTermFreq
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sumTotalTermFreq
operator|=
literal|0
expr_stmt|;
block|}
name|sumDocFreq
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|fst
operator|=
operator|new
name|FST
argument_list|<
name|BytesRef
argument_list|>
argument_list|(
name|in
argument_list|,
name|outputs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSumTotalTermFreq
specifier|public
name|long
name|getSumTotalTermFreq
parameter_list|()
block|{
return|return
name|sumTotalTermFreq
return|;
block|}
annotation|@
name|Override
DECL|method|getSumDocFreq
specifier|public
name|long
name|getSumDocFreq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|sumDocFreq
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|TermsEnum
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|FSTTermsEnum
argument_list|(
name|field
argument_list|,
name|fst
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getComparator
specifier|public
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|getComparator
parameter_list|()
block|{
return|return
name|BytesRef
operator|.
name|getUTF8SortedAsUnicodeComparator
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|fieldsProducer
specifier|public
name|FieldsProducer
name|fieldsProducer
parameter_list|(
name|SegmentReadState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|fileName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
argument_list|,
name|state
operator|.
name|codecId
argument_list|,
name|EXTENSION
argument_list|)
decl_stmt|;
specifier|final
name|IndexInput
name|in
init|=
name|state
operator|.
name|dir
operator|.
name|openInput
argument_list|(
name|fileName
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|)
decl_stmt|;
specifier|final
name|SortedMap
argument_list|<
name|String
argument_list|,
name|TermsReader
argument_list|>
name|fields
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|TermsReader
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|int
name|termCount
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|termCount
operator|==
literal|0
condition|)
block|{
break|break;
block|}
specifier|final
name|TermsReader
name|termsReader
init|=
operator|new
name|TermsReader
argument_list|(
name|state
operator|.
name|fieldInfos
argument_list|,
name|in
argument_list|)
decl_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|termsReader
operator|.
name|field
operator|.
name|name
argument_list|,
name|termsReader
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|FieldsProducer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FieldsEnum
name|iterator
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|TermsReader
argument_list|>
name|iter
init|=
name|fields
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|FieldsEnum
argument_list|()
block|{
specifier|private
name|TermsReader
name|current
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|next
parameter_list|()
block|{
name|current
operator|=
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|current
operator|.
name|field
operator|.
name|name
return|;
block|}
specifier|public
name|TermsEnum
name|terms
parameter_list|()
block|{
return|return
name|current
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|Terms
name|terms
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
name|fields
operator|.
name|get
argument_list|(
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|loadTermsIndex
parameter_list|(
name|int
name|indexDivisor
parameter_list|)
block|{
comment|// no op
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// Drop ref to FST:
for|for
control|(
name|TermsReader
name|termsReader
range|:
name|fields
operator|.
name|values
argument_list|()
control|)
block|{
name|termsReader
operator|.
name|fst
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|files
specifier|public
name|void
name|files
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|SegmentInfo
name|segmentInfo
parameter_list|,
name|int
name|id
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|files
parameter_list|)
throws|throws
name|IOException
block|{
name|files
operator|.
name|add
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segmentInfo
operator|.
name|name
argument_list|,
name|id
argument_list|,
name|EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|DefaultDocValuesConsumer
operator|.
name|files
argument_list|(
name|dir
argument_list|,
name|segmentInfo
argument_list|,
name|id
argument_list|,
name|files
argument_list|,
name|getDocValuesUseCFS
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getExtensions
specifier|public
name|void
name|getExtensions
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|extensions
parameter_list|)
block|{
name|extensions
operator|.
name|add
argument_list|(
name|EXTENSION
argument_list|)
expr_stmt|;
name|DefaultDocValuesConsumer
operator|.
name|getDocValuesExtensions
argument_list|(
name|extensions
argument_list|,
name|getDocValuesUseCFS
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|docsConsumer
specifier|public
name|PerDocConsumer
name|docsConsumer
parameter_list|(
name|PerDocWriteState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|DefaultDocValuesConsumer
argument_list|(
name|state
argument_list|,
name|getDocValuesSortComparator
argument_list|()
argument_list|,
name|getDocValuesUseCFS
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|docsProducer
specifier|public
name|PerDocValues
name|docsProducer
parameter_list|(
name|SegmentReadState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|DefaultDocValuesProducer
argument_list|(
name|state
operator|.
name|segmentInfo
argument_list|,
name|state
operator|.
name|dir
argument_list|,
name|state
operator|.
name|fieldInfos
argument_list|,
name|state
operator|.
name|codecId
argument_list|,
name|getDocValuesUseCFS
argument_list|()
argument_list|,
name|getDocValuesSortComparator
argument_list|()
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|)
return|;
block|}
block|}
end_class
end_unit
