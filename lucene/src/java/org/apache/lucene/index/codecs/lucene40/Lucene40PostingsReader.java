begin_unit
begin_package
DECL|package|org.apache.lucene.index.codecs.lucene40
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|lucene40
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsAndPositionsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
operator|.
name|IndexOptions
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|PostingsReaderBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|BlockTermState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ByteArrayDataInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CodecUtil
import|;
end_import
begin_comment
comment|/** Concrete class that reads the current doc/freq/skip  *  postings format.   *  @lucene.experimental */
end_comment
begin_class
DECL|class|Lucene40PostingsReader
specifier|public
class|class
name|Lucene40PostingsReader
extends|extends
name|PostingsReaderBase
block|{
DECL|field|freqIn
specifier|private
specifier|final
name|IndexInput
name|freqIn
decl_stmt|;
DECL|field|proxIn
specifier|private
specifier|final
name|IndexInput
name|proxIn
decl_stmt|;
comment|// public static boolean DEBUG = BlockTreeTermsWriter.DEBUG;
DECL|field|skipInterval
name|int
name|skipInterval
decl_stmt|;
DECL|field|maxSkipLevels
name|int
name|maxSkipLevels
decl_stmt|;
DECL|field|skipMinimum
name|int
name|skipMinimum
decl_stmt|;
comment|// private String segment;
DECL|method|Lucene40PostingsReader
specifier|public
name|Lucene40PostingsReader
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|SegmentInfo
name|segmentInfo
parameter_list|,
name|IOContext
name|ioContext
parameter_list|,
name|String
name|segmentSuffix
parameter_list|)
throws|throws
name|IOException
block|{
name|freqIn
operator|=
name|dir
operator|.
name|openInput
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segmentInfo
operator|.
name|name
argument_list|,
name|segmentSuffix
argument_list|,
name|Lucene40PostingsFormat
operator|.
name|FREQ_EXTENSION
argument_list|)
argument_list|,
name|ioContext
argument_list|)
expr_stmt|;
comment|// this.segment = segmentInfo.name;
if|if
condition|(
name|segmentInfo
operator|.
name|getHasProx
argument_list|()
condition|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|proxIn
operator|=
name|dir
operator|.
name|openInput
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segmentInfo
operator|.
name|name
argument_list|,
name|segmentSuffix
argument_list|,
name|Lucene40PostingsFormat
operator|.
name|PROX_EXTENSION
argument_list|)
argument_list|,
name|ioContext
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|freqIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|proxIn
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|files
specifier|public
specifier|static
name|void
name|files
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|SegmentInfo
name|segmentInfo
parameter_list|,
name|String
name|segmentSuffix
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|files
parameter_list|)
throws|throws
name|IOException
block|{
name|files
operator|.
name|add
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segmentInfo
operator|.
name|name
argument_list|,
name|segmentSuffix
argument_list|,
name|Lucene40PostingsFormat
operator|.
name|FREQ_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|segmentInfo
operator|.
name|getHasProx
argument_list|()
condition|)
block|{
name|files
operator|.
name|add
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segmentInfo
operator|.
name|name
argument_list|,
name|segmentSuffix
argument_list|,
name|Lucene40PostingsFormat
operator|.
name|PROX_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|IndexInput
name|termsIn
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Make sure we are talking to the matching past writer
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|termsIn
argument_list|,
name|Lucene40PostingsWriter
operator|.
name|CODEC
argument_list|,
name|Lucene40PostingsWriter
operator|.
name|VERSION_START
argument_list|,
name|Lucene40PostingsWriter
operator|.
name|VERSION_START
argument_list|)
expr_stmt|;
name|skipInterval
operator|=
name|termsIn
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|maxSkipLevels
operator|=
name|termsIn
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|skipMinimum
operator|=
name|termsIn
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
comment|// Must keep final because we do non-standard clone
DECL|class|StandardTermState
specifier|private
specifier|final
specifier|static
class|class
name|StandardTermState
extends|extends
name|BlockTermState
block|{
DECL|field|freqOffset
name|long
name|freqOffset
decl_stmt|;
DECL|field|proxOffset
name|long
name|proxOffset
decl_stmt|;
DECL|field|skipOffset
name|int
name|skipOffset
decl_stmt|;
comment|// Only used by the "primary" TermState -- clones don't
comment|// copy this (basically they are "transient"):
DECL|field|bytesReader
name|ByteArrayDataInput
name|bytesReader
decl_stmt|;
comment|// TODO: should this NOT be in the TermState...?
DECL|field|bytes
name|byte
index|[]
name|bytes
decl_stmt|;
annotation|@
name|Override
DECL|method|clone
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|StandardTermState
name|other
init|=
operator|new
name|StandardTermState
argument_list|()
decl_stmt|;
name|other
operator|.
name|copyFrom
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|other
return|;
block|}
annotation|@
name|Override
DECL|method|copyFrom
specifier|public
name|void
name|copyFrom
parameter_list|(
name|TermState
name|_other
parameter_list|)
block|{
name|super
operator|.
name|copyFrom
argument_list|(
name|_other
argument_list|)
expr_stmt|;
name|StandardTermState
name|other
init|=
operator|(
name|StandardTermState
operator|)
name|_other
decl_stmt|;
name|freqOffset
operator|=
name|other
operator|.
name|freqOffset
expr_stmt|;
name|proxOffset
operator|=
name|other
operator|.
name|proxOffset
expr_stmt|;
name|skipOffset
operator|=
name|other
operator|.
name|skipOffset
expr_stmt|;
comment|// Do not copy bytes, bytesReader (else TermState is
comment|// very heavy, ie drags around the entire block's
comment|// byte[]).  On seek back, if next() is in fact used
comment|// (rare!), they will be re-read from disk.
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|" freqFP="
operator|+
name|freqOffset
operator|+
literal|" proxFP="
operator|+
name|proxOffset
operator|+
literal|" skipOffset="
operator|+
name|skipOffset
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|newTermState
specifier|public
name|BlockTermState
name|newTermState
parameter_list|()
block|{
return|return
operator|new
name|StandardTermState
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|freqIn
operator|!=
literal|null
condition|)
block|{
name|freqIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|proxIn
operator|!=
literal|null
condition|)
block|{
name|proxIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/* Reads but does not decode the byte[] blob holding      metadata for the current terms block */
annotation|@
name|Override
DECL|method|readTermsBlock
specifier|public
name|void
name|readTermsBlock
parameter_list|(
name|IndexInput
name|termsIn
parameter_list|,
name|FieldInfo
name|fieldInfo
parameter_list|,
name|BlockTermState
name|_termState
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|StandardTermState
name|termState
init|=
operator|(
name|StandardTermState
operator|)
name|_termState
decl_stmt|;
specifier|final
name|int
name|len
init|=
name|termsIn
operator|.
name|readVInt
argument_list|()
decl_stmt|;
comment|// if (DEBUG) System.out.println("  SPR.readTermsBlock bytes=" + len + " ts=" + _termState);
if|if
condition|(
name|termState
operator|.
name|bytes
operator|==
literal|null
condition|)
block|{
name|termState
operator|.
name|bytes
operator|=
operator|new
name|byte
index|[
name|ArrayUtil
operator|.
name|oversize
argument_list|(
name|len
argument_list|,
literal|1
argument_list|)
index|]
expr_stmt|;
name|termState
operator|.
name|bytesReader
operator|=
operator|new
name|ByteArrayDataInput
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|termState
operator|.
name|bytes
operator|.
name|length
operator|<
name|len
condition|)
block|{
name|termState
operator|.
name|bytes
operator|=
operator|new
name|byte
index|[
name|ArrayUtil
operator|.
name|oversize
argument_list|(
name|len
argument_list|,
literal|1
argument_list|)
index|]
expr_stmt|;
block|}
name|termsIn
operator|.
name|readBytes
argument_list|(
name|termState
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|termState
operator|.
name|bytesReader
operator|.
name|reset
argument_list|(
name|termState
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nextTerm
specifier|public
name|void
name|nextTerm
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|,
name|BlockTermState
name|_termState
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|StandardTermState
name|termState
init|=
operator|(
name|StandardTermState
operator|)
name|_termState
decl_stmt|;
comment|// if (DEBUG) System.out.println("SPR: nextTerm seg=" + segment + " tbOrd=" + termState.termBlockOrd + " bytesReader.fp=" + termState.bytesReader.getPosition());
specifier|final
name|boolean
name|isFirstTerm
init|=
name|termState
operator|.
name|termBlockOrd
operator|==
literal|0
decl_stmt|;
if|if
condition|(
name|isFirstTerm
condition|)
block|{
name|termState
operator|.
name|freqOffset
operator|=
name|termState
operator|.
name|bytesReader
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|termState
operator|.
name|freqOffset
operator|+=
name|termState
operator|.
name|bytesReader
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
comment|/*     if (DEBUG) {       System.out.println("  dF=" + termState.docFreq);       System.out.println("  freqFP=" + termState.freqOffset);     }     */
assert|assert
name|termState
operator|.
name|freqOffset
operator|<
name|freqIn
operator|.
name|length
argument_list|()
assert|;
if|if
condition|(
name|termState
operator|.
name|docFreq
operator|>=
name|skipMinimum
condition|)
block|{
name|termState
operator|.
name|skipOffset
operator|=
name|termState
operator|.
name|bytesReader
operator|.
name|readVInt
argument_list|()
expr_stmt|;
comment|// if (DEBUG) System.out.println("  skipOffset=" + termState.skipOffset + " vs freqIn.length=" + freqIn.length());
assert|assert
name|termState
operator|.
name|freqOffset
operator|+
name|termState
operator|.
name|skipOffset
operator|<
name|freqIn
operator|.
name|length
argument_list|()
assert|;
block|}
else|else
block|{
comment|// undefined
block|}
if|if
condition|(
name|fieldInfo
operator|.
name|indexOptions
operator|==
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
condition|)
block|{
if|if
condition|(
name|isFirstTerm
condition|)
block|{
name|termState
operator|.
name|proxOffset
operator|=
name|termState
operator|.
name|bytesReader
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|termState
operator|.
name|proxOffset
operator|+=
name|termState
operator|.
name|bytesReader
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
comment|// if (DEBUG) System.out.println("  proxFP=" + termState.proxOffset);
block|}
block|}
annotation|@
name|Override
DECL|method|docs
specifier|public
name|DocsEnum
name|docs
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|,
name|BlockTermState
name|termState
parameter_list|,
name|Bits
name|liveDocs
parameter_list|,
name|DocsEnum
name|reuse
parameter_list|,
name|boolean
name|needsFreqs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|needsFreqs
operator|&&
name|fieldInfo
operator|.
name|indexOptions
operator|==
name|IndexOptions
operator|.
name|DOCS_ONLY
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|canReuse
argument_list|(
name|reuse
argument_list|,
name|liveDocs
argument_list|)
condition|)
block|{
comment|// if (DEBUG) System.out.println("SPR.docs ts=" + termState);
return|return
operator|(
operator|(
name|SegmentDocsEnumBase
operator|)
name|reuse
operator|)
operator|.
name|reset
argument_list|(
name|fieldInfo
argument_list|,
operator|(
name|StandardTermState
operator|)
name|termState
argument_list|)
return|;
block|}
return|return
name|newDocsEnum
argument_list|(
name|liveDocs
argument_list|,
name|fieldInfo
argument_list|,
operator|(
name|StandardTermState
operator|)
name|termState
argument_list|)
return|;
block|}
DECL|method|canReuse
specifier|private
name|boolean
name|canReuse
parameter_list|(
name|DocsEnum
name|reuse
parameter_list|,
name|Bits
name|liveDocs
parameter_list|)
block|{
if|if
condition|(
name|reuse
operator|!=
literal|null
operator|&&
operator|(
name|reuse
operator|instanceof
name|SegmentDocsEnumBase
operator|)
condition|)
block|{
name|SegmentDocsEnumBase
name|docsEnum
init|=
operator|(
name|SegmentDocsEnumBase
operator|)
name|reuse
decl_stmt|;
comment|// If you are using ParellelReader, and pass in a
comment|// reused DocsEnum, it could have come from another
comment|// reader also using standard codec
if|if
condition|(
name|docsEnum
operator|.
name|startFreqIn
operator|==
name|freqIn
condition|)
block|{
comment|// we only reuse if the the actual the incoming enum has the same liveDocs as the given liveDocs
return|return
name|liveDocs
operator|==
name|docsEnum
operator|.
name|liveDocs
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|newDocsEnum
specifier|private
name|DocsEnum
name|newDocsEnum
parameter_list|(
name|Bits
name|liveDocs
parameter_list|,
name|FieldInfo
name|fieldInfo
parameter_list|,
name|StandardTermState
name|termState
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|liveDocs
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|AllDocsSegmentDocsEnum
argument_list|(
name|freqIn
argument_list|)
operator|.
name|reset
argument_list|(
name|fieldInfo
argument_list|,
name|termState
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|LiveDocsSegmentDocsEnum
argument_list|(
name|freqIn
argument_list|,
name|liveDocs
argument_list|)
operator|.
name|reset
argument_list|(
name|fieldInfo
argument_list|,
name|termState
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|docsAndPositions
specifier|public
name|DocsAndPositionsEnum
name|docsAndPositions
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|,
name|BlockTermState
name|termState
parameter_list|,
name|Bits
name|liveDocs
parameter_list|,
name|DocsAndPositionsEnum
name|reuse
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fieldInfo
operator|.
name|indexOptions
operator|!=
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// TODO: refactor
if|if
condition|(
name|fieldInfo
operator|.
name|storePayloads
condition|)
block|{
name|SegmentDocsAndPositionsAndPayloadsEnum
name|docsEnum
decl_stmt|;
if|if
condition|(
name|reuse
operator|==
literal|null
operator|||
operator|!
operator|(
name|reuse
operator|instanceof
name|SegmentDocsAndPositionsAndPayloadsEnum
operator|)
condition|)
block|{
name|docsEnum
operator|=
operator|new
name|SegmentDocsAndPositionsAndPayloadsEnum
argument_list|(
name|freqIn
argument_list|,
name|proxIn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docsEnum
operator|=
operator|(
name|SegmentDocsAndPositionsAndPayloadsEnum
operator|)
name|reuse
expr_stmt|;
if|if
condition|(
name|docsEnum
operator|.
name|startFreqIn
operator|!=
name|freqIn
condition|)
block|{
comment|// If you are using ParellelReader, and pass in a
comment|// reused DocsEnum, it could have come from another
comment|// reader also using standard codec
name|docsEnum
operator|=
operator|new
name|SegmentDocsAndPositionsAndPayloadsEnum
argument_list|(
name|freqIn
argument_list|,
name|proxIn
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|docsEnum
operator|.
name|reset
argument_list|(
name|fieldInfo
argument_list|,
operator|(
name|StandardTermState
operator|)
name|termState
argument_list|,
name|liveDocs
argument_list|)
return|;
block|}
else|else
block|{
name|SegmentDocsAndPositionsEnum
name|docsEnum
decl_stmt|;
if|if
condition|(
name|reuse
operator|==
literal|null
operator|||
operator|!
operator|(
name|reuse
operator|instanceof
name|SegmentDocsAndPositionsEnum
operator|)
condition|)
block|{
name|docsEnum
operator|=
operator|new
name|SegmentDocsAndPositionsEnum
argument_list|(
name|freqIn
argument_list|,
name|proxIn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docsEnum
operator|=
operator|(
name|SegmentDocsAndPositionsEnum
operator|)
name|reuse
expr_stmt|;
if|if
condition|(
name|docsEnum
operator|.
name|startFreqIn
operator|!=
name|freqIn
condition|)
block|{
comment|// If you are using ParellelReader, and pass in a
comment|// reused DocsEnum, it could have come from another
comment|// reader also using standard codec
name|docsEnum
operator|=
operator|new
name|SegmentDocsAndPositionsEnum
argument_list|(
name|freqIn
argument_list|,
name|proxIn
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|docsEnum
operator|.
name|reset
argument_list|(
name|fieldInfo
argument_list|,
operator|(
name|StandardTermState
operator|)
name|termState
argument_list|,
name|liveDocs
argument_list|)
return|;
block|}
block|}
DECL|field|BUFFERSIZE
specifier|static
specifier|final
name|int
name|BUFFERSIZE
init|=
literal|64
decl_stmt|;
DECL|class|SegmentDocsEnumBase
specifier|private
specifier|abstract
class|class
name|SegmentDocsEnumBase
extends|extends
name|DocsEnum
block|{
DECL|field|docs
specifier|protected
specifier|final
name|int
index|[]
name|docs
init|=
operator|new
name|int
index|[
name|BUFFERSIZE
index|]
decl_stmt|;
DECL|field|freqs
specifier|protected
specifier|final
name|int
index|[]
name|freqs
init|=
operator|new
name|int
index|[
name|BUFFERSIZE
index|]
decl_stmt|;
DECL|field|freqIn
specifier|final
name|IndexInput
name|freqIn
decl_stmt|;
comment|// reuse
DECL|field|startFreqIn
specifier|final
name|IndexInput
name|startFreqIn
decl_stmt|;
comment|// reuse
DECL|field|skipper
name|Lucene40SkipListReader
name|skipper
decl_stmt|;
comment|// reuse - lazy loaded
DECL|field|indexOmitsTF
specifier|protected
name|boolean
name|indexOmitsTF
decl_stmt|;
comment|// does current field omit term freq?
DECL|field|storePayloads
specifier|protected
name|boolean
name|storePayloads
decl_stmt|;
comment|// does current field store payloads?
DECL|field|limit
specifier|protected
name|int
name|limit
decl_stmt|;
comment|// number of docs in this posting
DECL|field|ord
specifier|protected
name|int
name|ord
decl_stmt|;
comment|// how many docs we've read
DECL|field|doc
specifier|protected
name|int
name|doc
decl_stmt|;
comment|// doc we last read
DECL|field|accum
specifier|protected
name|int
name|accum
decl_stmt|;
comment|// accumulator for doc deltas
DECL|field|freq
specifier|protected
name|int
name|freq
decl_stmt|;
comment|// freq we last read
DECL|field|maxBufferedDocId
specifier|protected
name|int
name|maxBufferedDocId
decl_stmt|;
DECL|field|start
specifier|protected
name|int
name|start
decl_stmt|;
DECL|field|count
specifier|protected
name|int
name|count
decl_stmt|;
DECL|field|freqOffset
specifier|protected
name|long
name|freqOffset
decl_stmt|;
DECL|field|skipOffset
specifier|protected
name|int
name|skipOffset
decl_stmt|;
DECL|field|skipped
specifier|protected
name|boolean
name|skipped
decl_stmt|;
DECL|field|liveDocs
specifier|protected
specifier|final
name|Bits
name|liveDocs
decl_stmt|;
DECL|method|SegmentDocsEnumBase
name|SegmentDocsEnumBase
parameter_list|(
name|IndexInput
name|startFreqIn
parameter_list|,
name|Bits
name|liveDocs
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|startFreqIn
operator|=
name|startFreqIn
expr_stmt|;
name|this
operator|.
name|freqIn
operator|=
operator|(
name|IndexInput
operator|)
name|startFreqIn
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|liveDocs
operator|=
name|liveDocs
expr_stmt|;
block|}
DECL|method|reset
name|DocsEnum
name|reset
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|,
name|StandardTermState
name|termState
parameter_list|)
throws|throws
name|IOException
block|{
name|indexOmitsTF
operator|=
name|fieldInfo
operator|.
name|indexOptions
operator|==
name|IndexOptions
operator|.
name|DOCS_ONLY
expr_stmt|;
name|storePayloads
operator|=
name|fieldInfo
operator|.
name|storePayloads
expr_stmt|;
name|freqOffset
operator|=
name|termState
operator|.
name|freqOffset
expr_stmt|;
name|skipOffset
operator|=
name|termState
operator|.
name|skipOffset
expr_stmt|;
comment|// TODO: for full enum case (eg segment merging) this
comment|// seek is unnecessary; maybe we can avoid in such
comment|// cases
name|freqIn
operator|.
name|seek
argument_list|(
name|termState
operator|.
name|freqOffset
argument_list|)
expr_stmt|;
name|limit
operator|=
name|termState
operator|.
name|docFreq
expr_stmt|;
assert|assert
name|limit
operator|>
literal|0
assert|;
name|ord
operator|=
literal|0
expr_stmt|;
name|doc
operator|=
operator|-
literal|1
expr_stmt|;
name|accum
operator|=
literal|0
expr_stmt|;
comment|// if (DEBUG) System.out.println("  sde limit=" + limit + " freqFP=" + freqOffset);
name|skipped
operator|=
literal|false
expr_stmt|;
name|start
operator|=
operator|-
literal|1
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|maxBufferedDocId
operator|=
operator|-
literal|1
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
specifier|final
name|int
name|freq
parameter_list|()
block|{
assert|assert
operator|!
name|indexOmitsTF
assert|;
return|return
name|freq
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
specifier|final
name|int
name|docID
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
specifier|final
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
comment|// last doc in our buffer is>= target, binary search + next()
if|if
condition|(
operator|++
name|start
operator|<
name|count
operator|&&
name|maxBufferedDocId
operator|>=
name|target
condition|)
block|{
if|if
condition|(
operator|(
name|count
operator|-
name|start
operator|)
operator|>
literal|32
condition|)
block|{
comment|// 32 seemed to be a sweetspot here so use binsearch if the pending results are a lot
name|start
operator|=
name|binarySearch
argument_list|(
name|count
operator|-
literal|1
argument_list|,
name|start
argument_list|,
name|target
argument_list|,
name|docs
argument_list|)
expr_stmt|;
return|return
name|nextDoc
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|linearScan
argument_list|(
name|target
argument_list|)
return|;
block|}
block|}
name|start
operator|=
name|count
expr_stmt|;
comment|// buffer is consumed
return|return
name|doc
operator|=
name|skipTo
argument_list|(
name|target
argument_list|,
name|liveDocs
argument_list|)
return|;
block|}
DECL|method|binarySearch
specifier|private
specifier|final
name|int
name|binarySearch
parameter_list|(
name|int
name|hi
parameter_list|,
name|int
name|low
parameter_list|,
name|int
name|target
parameter_list|,
name|int
index|[]
name|docs
parameter_list|)
block|{
while|while
condition|(
name|low
operator|<=
name|hi
condition|)
block|{
name|int
name|mid
init|=
operator|(
name|hi
operator|+
name|low
operator|)
operator|>>>
literal|1
decl_stmt|;
name|int
name|doc
init|=
name|docs
index|[
name|mid
index|]
decl_stmt|;
if|if
condition|(
name|doc
operator|<
name|target
condition|)
block|{
name|low
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|doc
operator|>
name|target
condition|)
block|{
name|hi
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|low
operator|=
name|mid
expr_stmt|;
break|break;
block|}
block|}
return|return
name|low
operator|-
literal|1
return|;
block|}
DECL|method|readFreq
specifier|final
name|int
name|readFreq
parameter_list|(
specifier|final
name|IndexInput
name|freqIn
parameter_list|,
specifier|final
name|int
name|code
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|code
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// if low bit is set
return|return
literal|1
return|;
comment|// freq is one
block|}
else|else
block|{
return|return
name|freqIn
operator|.
name|readVInt
argument_list|()
return|;
comment|// else read freq
block|}
block|}
DECL|method|linearScan
specifier|protected
specifier|abstract
name|int
name|linearScan
parameter_list|(
name|int
name|scanTo
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|scanTo
specifier|protected
specifier|abstract
name|int
name|scanTo
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|refill
specifier|protected
specifier|final
name|int
name|refill
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|doc
init|=
name|nextUnreadDoc
argument_list|()
decl_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|start
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|doc
operator|==
name|NO_MORE_DOCS
condition|)
block|{
return|return
name|NO_MORE_DOCS
return|;
block|}
specifier|final
name|int
name|numDocs
init|=
name|Math
operator|.
name|min
argument_list|(
name|docs
operator|.
name|length
argument_list|,
name|limit
operator|-
name|ord
argument_list|)
decl_stmt|;
name|ord
operator|+=
name|numDocs
expr_stmt|;
if|if
condition|(
name|indexOmitsTF
condition|)
block|{
name|count
operator|=
name|fillDocs
argument_list|(
name|numDocs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|count
operator|=
name|fillDocsAndFreqs
argument_list|(
name|numDocs
argument_list|)
expr_stmt|;
block|}
name|maxBufferedDocId
operator|=
name|count
operator|>
literal|0
condition|?
name|docs
index|[
name|count
operator|-
literal|1
index|]
else|:
name|NO_MORE_DOCS
expr_stmt|;
return|return
name|doc
return|;
block|}
DECL|method|nextUnreadDoc
specifier|protected
specifier|abstract
name|int
name|nextUnreadDoc
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|fillDocs
specifier|private
specifier|final
name|int
name|fillDocs
parameter_list|(
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|IndexInput
name|freqIn
init|=
name|this
operator|.
name|freqIn
decl_stmt|;
specifier|final
name|int
name|docs
index|[]
init|=
name|this
operator|.
name|docs
decl_stmt|;
name|int
name|docAc
init|=
name|accum
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|docAc
operator|+=
name|freqIn
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|docs
index|[
name|i
index|]
operator|=
name|docAc
expr_stmt|;
block|}
name|accum
operator|=
name|docAc
expr_stmt|;
return|return
name|size
return|;
block|}
DECL|method|fillDocsAndFreqs
specifier|private
specifier|final
name|int
name|fillDocsAndFreqs
parameter_list|(
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|IndexInput
name|freqIn
init|=
name|this
operator|.
name|freqIn
decl_stmt|;
specifier|final
name|int
name|docs
index|[]
init|=
name|this
operator|.
name|docs
decl_stmt|;
specifier|final
name|int
name|freqs
index|[]
init|=
name|this
operator|.
name|freqs
decl_stmt|;
name|int
name|docAc
init|=
name|accum
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|code
init|=
name|freqIn
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|docAc
operator|+=
name|code
operator|>>>
literal|1
expr_stmt|;
comment|// shift off low bit
name|freqs
index|[
name|i
index|]
operator|=
name|readFreq
argument_list|(
name|freqIn
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|docs
index|[
name|i
index|]
operator|=
name|docAc
expr_stmt|;
block|}
name|accum
operator|=
name|docAc
expr_stmt|;
return|return
name|size
return|;
block|}
DECL|method|skipTo
specifier|private
specifier|final
name|int
name|skipTo
parameter_list|(
name|int
name|target
parameter_list|,
name|Bits
name|liveDocs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|target
operator|-
name|skipInterval
operator|)
operator|>=
name|accum
operator|&&
name|limit
operator|>=
name|skipMinimum
condition|)
block|{
comment|// There are enough docs in the posting to have
comment|// skip data, and it isn't too close.
if|if
condition|(
name|skipper
operator|==
literal|null
condition|)
block|{
comment|// This is the first time this enum has ever been used for skipping -- do lazy init
name|skipper
operator|=
operator|new
name|Lucene40SkipListReader
argument_list|(
operator|(
name|IndexInput
operator|)
name|freqIn
operator|.
name|clone
argument_list|()
argument_list|,
name|maxSkipLevels
argument_list|,
name|skipInterval
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|skipped
condition|)
block|{
comment|// This is the first time this posting has
comment|// skipped since reset() was called, so now we
comment|// load the skip data for this posting
name|skipper
operator|.
name|init
argument_list|(
name|freqOffset
operator|+
name|skipOffset
argument_list|,
name|freqOffset
argument_list|,
literal|0
argument_list|,
name|limit
argument_list|,
name|storePayloads
argument_list|)
expr_stmt|;
name|skipped
operator|=
literal|true
expr_stmt|;
block|}
specifier|final
name|int
name|newOrd
init|=
name|skipper
operator|.
name|skipTo
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|newOrd
operator|>
name|ord
condition|)
block|{
comment|// Skipper moved
name|ord
operator|=
name|newOrd
expr_stmt|;
name|accum
operator|=
name|skipper
operator|.
name|getDoc
argument_list|()
expr_stmt|;
name|freqIn
operator|.
name|seek
argument_list|(
name|skipper
operator|.
name|getFreqPointer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|scanTo
argument_list|(
name|target
argument_list|)
return|;
block|}
block|}
DECL|class|AllDocsSegmentDocsEnum
specifier|private
specifier|final
class|class
name|AllDocsSegmentDocsEnum
extends|extends
name|SegmentDocsEnumBase
block|{
DECL|method|AllDocsSegmentDocsEnum
name|AllDocsSegmentDocsEnum
parameter_list|(
name|IndexInput
name|startFreqIn
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|startFreqIn
argument_list|,
literal|null
argument_list|)
expr_stmt|;
assert|assert
name|liveDocs
operator|==
literal|null
assert|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
specifier|final
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|++
name|start
operator|<
name|count
condition|)
block|{
name|freq
operator|=
name|freqs
index|[
name|start
index|]
expr_stmt|;
return|return
name|doc
operator|=
name|docs
index|[
name|start
index|]
return|;
block|}
return|return
name|doc
operator|=
name|refill
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|linearScan
specifier|protected
specifier|final
name|int
name|linearScan
parameter_list|(
name|int
name|scanTo
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
index|[]
name|docs
init|=
name|this
operator|.
name|docs
decl_stmt|;
specifier|final
name|int
name|upTo
init|=
name|count
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|upTo
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|d
init|=
name|docs
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|scanTo
operator|<=
name|d
condition|)
block|{
name|start
operator|=
name|i
expr_stmt|;
name|freq
operator|=
name|freqs
index|[
name|i
index|]
expr_stmt|;
return|return
name|doc
operator|=
name|docs
index|[
name|i
index|]
return|;
block|}
block|}
return|return
name|refill
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|scanTo
specifier|protected
name|int
name|scanTo
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|docAcc
init|=
name|accum
decl_stmt|;
name|int
name|frq
init|=
literal|1
decl_stmt|;
specifier|final
name|IndexInput
name|freqIn
init|=
name|this
operator|.
name|freqIn
decl_stmt|;
specifier|final
name|boolean
name|omitTF
init|=
name|indexOmitsTF
decl_stmt|;
specifier|final
name|int
name|loopLimit
init|=
name|limit
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|ord
init|;
name|i
operator|<
name|loopLimit
condition|;
name|i
operator|++
control|)
block|{
name|int
name|code
init|=
name|freqIn
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|omitTF
condition|)
block|{
name|docAcc
operator|+=
name|code
expr_stmt|;
block|}
else|else
block|{
name|docAcc
operator|+=
name|code
operator|>>>
literal|1
expr_stmt|;
comment|// shift off low bit
name|frq
operator|=
name|readFreq
argument_list|(
name|freqIn
argument_list|,
name|code
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|docAcc
operator|>=
name|target
condition|)
block|{
name|freq
operator|=
name|frq
expr_stmt|;
name|ord
operator|=
name|i
operator|+
literal|1
expr_stmt|;
return|return
name|accum
operator|=
name|docAcc
return|;
block|}
block|}
name|ord
operator|=
name|limit
expr_stmt|;
name|freq
operator|=
name|frq
expr_stmt|;
name|accum
operator|=
name|docAcc
expr_stmt|;
return|return
name|NO_MORE_DOCS
return|;
block|}
annotation|@
name|Override
DECL|method|nextUnreadDoc
specifier|protected
specifier|final
name|int
name|nextUnreadDoc
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|ord
operator|++
operator|<
name|limit
condition|)
block|{
name|int
name|code
init|=
name|freqIn
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexOmitsTF
condition|)
block|{
name|accum
operator|+=
name|code
expr_stmt|;
block|}
else|else
block|{
name|accum
operator|+=
name|code
operator|>>>
literal|1
expr_stmt|;
comment|// shift off low bit
name|freq
operator|=
name|readFreq
argument_list|(
name|freqIn
argument_list|,
name|code
argument_list|)
expr_stmt|;
block|}
return|return
name|accum
return|;
block|}
else|else
block|{
return|return
name|NO_MORE_DOCS
return|;
block|}
block|}
block|}
DECL|class|LiveDocsSegmentDocsEnum
specifier|private
specifier|final
class|class
name|LiveDocsSegmentDocsEnum
extends|extends
name|SegmentDocsEnumBase
block|{
DECL|method|LiveDocsSegmentDocsEnum
name|LiveDocsSegmentDocsEnum
parameter_list|(
name|IndexInput
name|startFreqIn
parameter_list|,
name|Bits
name|liveDocs
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|startFreqIn
argument_list|,
name|liveDocs
argument_list|)
expr_stmt|;
assert|assert
name|liveDocs
operator|!=
literal|null
assert|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
specifier|final
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Bits
name|liveDocs
init|=
name|this
operator|.
name|liveDocs
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
operator|+
literal|1
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|int
name|d
init|=
name|docs
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|liveDocs
operator|.
name|get
argument_list|(
name|d
argument_list|)
condition|)
block|{
name|start
operator|=
name|i
expr_stmt|;
name|freq
operator|=
name|freqs
index|[
name|i
index|]
expr_stmt|;
return|return
name|doc
operator|=
name|d
return|;
block|}
block|}
name|start
operator|=
name|count
expr_stmt|;
return|return
name|doc
operator|=
name|refill
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|linearScan
specifier|protected
specifier|final
name|int
name|linearScan
parameter_list|(
name|int
name|scanTo
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
index|[]
name|docs
init|=
name|this
operator|.
name|docs
decl_stmt|;
specifier|final
name|int
name|upTo
init|=
name|count
decl_stmt|;
specifier|final
name|Bits
name|liveDocs
init|=
name|this
operator|.
name|liveDocs
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|upTo
condition|;
name|i
operator|++
control|)
block|{
name|int
name|d
init|=
name|docs
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|scanTo
operator|<=
name|d
operator|&&
name|liveDocs
operator|.
name|get
argument_list|(
name|d
argument_list|)
condition|)
block|{
name|start
operator|=
name|i
expr_stmt|;
name|freq
operator|=
name|freqs
index|[
name|i
index|]
expr_stmt|;
return|return
name|doc
operator|=
name|docs
index|[
name|i
index|]
return|;
block|}
block|}
return|return
name|refill
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|scanTo
specifier|protected
name|int
name|scanTo
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|docAcc
init|=
name|accum
decl_stmt|;
name|int
name|frq
init|=
literal|1
decl_stmt|;
specifier|final
name|IndexInput
name|freqIn
init|=
name|this
operator|.
name|freqIn
decl_stmt|;
specifier|final
name|boolean
name|omitTF
init|=
name|indexOmitsTF
decl_stmt|;
specifier|final
name|int
name|loopLimit
init|=
name|limit
decl_stmt|;
specifier|final
name|Bits
name|liveDocs
init|=
name|this
operator|.
name|liveDocs
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|ord
init|;
name|i
operator|<
name|loopLimit
condition|;
name|i
operator|++
control|)
block|{
name|int
name|code
init|=
name|freqIn
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|omitTF
condition|)
block|{
name|docAcc
operator|+=
name|code
expr_stmt|;
block|}
else|else
block|{
name|docAcc
operator|+=
name|code
operator|>>>
literal|1
expr_stmt|;
comment|// shift off low bit
name|frq
operator|=
name|readFreq
argument_list|(
name|freqIn
argument_list|,
name|code
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|docAcc
operator|>=
name|target
operator|&&
name|liveDocs
operator|.
name|get
argument_list|(
name|docAcc
argument_list|)
condition|)
block|{
name|freq
operator|=
name|frq
expr_stmt|;
name|ord
operator|=
name|i
operator|+
literal|1
expr_stmt|;
return|return
name|accum
operator|=
name|docAcc
return|;
block|}
block|}
name|ord
operator|=
name|limit
expr_stmt|;
name|freq
operator|=
name|frq
expr_stmt|;
name|accum
operator|=
name|docAcc
expr_stmt|;
return|return
name|NO_MORE_DOCS
return|;
block|}
annotation|@
name|Override
DECL|method|nextUnreadDoc
specifier|protected
specifier|final
name|int
name|nextUnreadDoc
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|docAcc
init|=
name|accum
decl_stmt|;
name|int
name|frq
init|=
literal|1
decl_stmt|;
specifier|final
name|IndexInput
name|freqIn
init|=
name|this
operator|.
name|freqIn
decl_stmt|;
specifier|final
name|boolean
name|omitTF
init|=
name|indexOmitsTF
decl_stmt|;
specifier|final
name|int
name|loopLimit
init|=
name|limit
decl_stmt|;
specifier|final
name|Bits
name|liveDocs
init|=
name|this
operator|.
name|liveDocs
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|ord
init|;
name|i
operator|<
name|loopLimit
condition|;
name|i
operator|++
control|)
block|{
name|int
name|code
init|=
name|freqIn
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|omitTF
condition|)
block|{
name|docAcc
operator|+=
name|code
expr_stmt|;
block|}
else|else
block|{
name|docAcc
operator|+=
name|code
operator|>>>
literal|1
expr_stmt|;
comment|// shift off low bit
name|frq
operator|=
name|readFreq
argument_list|(
name|freqIn
argument_list|,
name|code
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|liveDocs
operator|.
name|get
argument_list|(
name|docAcc
argument_list|)
condition|)
block|{
name|freq
operator|=
name|frq
expr_stmt|;
name|ord
operator|=
name|i
operator|+
literal|1
expr_stmt|;
return|return
name|accum
operator|=
name|docAcc
return|;
block|}
block|}
name|ord
operator|=
name|limit
expr_stmt|;
name|freq
operator|=
name|frq
expr_stmt|;
name|accum
operator|=
name|docAcc
expr_stmt|;
return|return
name|NO_MORE_DOCS
return|;
block|}
block|}
comment|// TODO specialize DocsAndPosEnum too
comment|// Decodes docs& positions. payloads are not present.
DECL|class|SegmentDocsAndPositionsEnum
specifier|private
specifier|final
class|class
name|SegmentDocsAndPositionsEnum
extends|extends
name|DocsAndPositionsEnum
block|{
DECL|field|startFreqIn
specifier|final
name|IndexInput
name|startFreqIn
decl_stmt|;
DECL|field|freqIn
specifier|private
specifier|final
name|IndexInput
name|freqIn
decl_stmt|;
DECL|field|proxIn
specifier|private
specifier|final
name|IndexInput
name|proxIn
decl_stmt|;
DECL|field|limit
name|int
name|limit
decl_stmt|;
comment|// number of docs in this posting
DECL|field|ord
name|int
name|ord
decl_stmt|;
comment|// how many docs we've read
DECL|field|doc
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
comment|// doc we last read
DECL|field|accum
name|int
name|accum
decl_stmt|;
comment|// accumulator for doc deltas
DECL|field|freq
name|int
name|freq
decl_stmt|;
comment|// freq we last read
DECL|field|position
name|int
name|position
decl_stmt|;
DECL|field|liveDocs
name|Bits
name|liveDocs
decl_stmt|;
DECL|field|freqOffset
name|long
name|freqOffset
decl_stmt|;
DECL|field|skipOffset
name|int
name|skipOffset
decl_stmt|;
DECL|field|proxOffset
name|long
name|proxOffset
decl_stmt|;
DECL|field|posPendingCount
name|int
name|posPendingCount
decl_stmt|;
DECL|field|skipped
name|boolean
name|skipped
decl_stmt|;
DECL|field|skipper
name|Lucene40SkipListReader
name|skipper
decl_stmt|;
DECL|field|lazyProxPointer
specifier|private
name|long
name|lazyProxPointer
decl_stmt|;
DECL|method|SegmentDocsAndPositionsEnum
specifier|public
name|SegmentDocsAndPositionsEnum
parameter_list|(
name|IndexInput
name|freqIn
parameter_list|,
name|IndexInput
name|proxIn
parameter_list|)
throws|throws
name|IOException
block|{
name|startFreqIn
operator|=
name|freqIn
expr_stmt|;
name|this
operator|.
name|freqIn
operator|=
operator|(
name|IndexInput
operator|)
name|freqIn
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|proxIn
operator|=
operator|(
name|IndexInput
operator|)
name|proxIn
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|SegmentDocsAndPositionsEnum
name|reset
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|,
name|StandardTermState
name|termState
parameter_list|,
name|Bits
name|liveDocs
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fieldInfo
operator|.
name|indexOptions
operator|==
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
assert|;
assert|assert
operator|!
name|fieldInfo
operator|.
name|storePayloads
assert|;
name|this
operator|.
name|liveDocs
operator|=
name|liveDocs
expr_stmt|;
comment|// TODO: for full enum case (eg segment merging) this
comment|// seek is unnecessary; maybe we can avoid in such
comment|// cases
name|freqIn
operator|.
name|seek
argument_list|(
name|termState
operator|.
name|freqOffset
argument_list|)
expr_stmt|;
name|lazyProxPointer
operator|=
name|termState
operator|.
name|proxOffset
expr_stmt|;
name|limit
operator|=
name|termState
operator|.
name|docFreq
expr_stmt|;
assert|assert
name|limit
operator|>
literal|0
assert|;
name|ord
operator|=
literal|0
expr_stmt|;
name|doc
operator|=
operator|-
literal|1
expr_stmt|;
name|accum
operator|=
literal|0
expr_stmt|;
name|position
operator|=
literal|0
expr_stmt|;
name|skipped
operator|=
literal|false
expr_stmt|;
name|posPendingCount
operator|=
literal|0
expr_stmt|;
name|freqOffset
operator|=
name|termState
operator|.
name|freqOffset
expr_stmt|;
name|proxOffset
operator|=
name|termState
operator|.
name|proxOffset
expr_stmt|;
name|skipOffset
operator|=
name|termState
operator|.
name|skipOffset
expr_stmt|;
comment|// if (DEBUG) System.out.println("StandardR.D&PE reset seg=" + segment + " limit=" + limit + " freqFP=" + freqOffset + " proxFP=" + proxOffset);
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
comment|// if (DEBUG) System.out.println("SPR.nextDoc seg=" + segment + " freqIn.fp=" + freqIn.getFilePointer());
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|ord
operator|==
name|limit
condition|)
block|{
comment|// if (DEBUG) System.out.println("  return END");
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
name|ord
operator|++
expr_stmt|;
comment|// Decode next doc/freq pair
specifier|final
name|int
name|code
init|=
name|freqIn
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|accum
operator|+=
name|code
operator|>>>
literal|1
expr_stmt|;
comment|// shift off low bit
if|if
condition|(
operator|(
name|code
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// if low bit is set
name|freq
operator|=
literal|1
expr_stmt|;
comment|// freq is one
block|}
else|else
block|{
name|freq
operator|=
name|freqIn
operator|.
name|readVInt
argument_list|()
expr_stmt|;
comment|// else read freq
block|}
name|posPendingCount
operator|+=
name|freq
expr_stmt|;
if|if
condition|(
name|liveDocs
operator|==
literal|null
operator|||
name|liveDocs
operator|.
name|get
argument_list|(
name|accum
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|position
operator|=
literal|0
expr_stmt|;
comment|// if (DEBUG) System.out.println("  return doc=" + doc);
return|return
operator|(
name|doc
operator|=
name|accum
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
block|{
return|return
name|freq
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
comment|//System.out.println("StandardR.D&PE advance target=" + target);
if|if
condition|(
operator|(
name|target
operator|-
name|skipInterval
operator|)
operator|>=
name|doc
operator|&&
name|limit
operator|>=
name|skipMinimum
condition|)
block|{
comment|// There are enough docs in the posting to have
comment|// skip data, and it isn't too close
if|if
condition|(
name|skipper
operator|==
literal|null
condition|)
block|{
comment|// This is the first time this enum has ever been used for skipping -- do lazy init
name|skipper
operator|=
operator|new
name|Lucene40SkipListReader
argument_list|(
operator|(
name|IndexInput
operator|)
name|freqIn
operator|.
name|clone
argument_list|()
argument_list|,
name|maxSkipLevels
argument_list|,
name|skipInterval
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|skipped
condition|)
block|{
comment|// This is the first time this posting has
comment|// skipped, since reset() was called, so now we
comment|// load the skip data for this posting
name|skipper
operator|.
name|init
argument_list|(
name|freqOffset
operator|+
name|skipOffset
argument_list|,
name|freqOffset
argument_list|,
name|proxOffset
argument_list|,
name|limit
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|skipped
operator|=
literal|true
expr_stmt|;
block|}
specifier|final
name|int
name|newOrd
init|=
name|skipper
operator|.
name|skipTo
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|newOrd
operator|>
name|ord
condition|)
block|{
comment|// Skipper moved
name|ord
operator|=
name|newOrd
expr_stmt|;
name|doc
operator|=
name|accum
operator|=
name|skipper
operator|.
name|getDoc
argument_list|()
expr_stmt|;
name|freqIn
operator|.
name|seek
argument_list|(
name|skipper
operator|.
name|getFreqPointer
argument_list|()
argument_list|)
expr_stmt|;
name|lazyProxPointer
operator|=
name|skipper
operator|.
name|getProxPointer
argument_list|()
expr_stmt|;
name|posPendingCount
operator|=
literal|0
expr_stmt|;
name|position
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|// Now, linear scan for the rest:
do|do
block|{
name|nextDoc
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|target
operator|>
name|doc
condition|)
do|;
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|nextPosition
specifier|public
name|int
name|nextPosition
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|lazyProxPointer
operator|!=
operator|-
literal|1
condition|)
block|{
name|proxIn
operator|.
name|seek
argument_list|(
name|lazyProxPointer
argument_list|)
expr_stmt|;
name|lazyProxPointer
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|// scan over any docs that were iterated without their positions
if|if
condition|(
name|posPendingCount
operator|>
name|freq
condition|)
block|{
name|position
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|posPendingCount
operator|!=
name|freq
condition|)
block|{
if|if
condition|(
operator|(
name|proxIn
operator|.
name|readByte
argument_list|()
operator|&
literal|0x80
operator|)
operator|==
literal|0
condition|)
block|{
name|posPendingCount
operator|--
expr_stmt|;
block|}
block|}
block|}
name|position
operator|+=
name|proxIn
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|posPendingCount
operator|--
expr_stmt|;
assert|assert
name|posPendingCount
operator|>=
literal|0
operator|:
literal|"nextPosition() was called too many times (more than freq() times) posPendingCount="
operator|+
name|posPendingCount
assert|;
return|return
name|position
return|;
block|}
comment|/** Returns the payload at this position, or null if no      *  payload was indexed. */
annotation|@
name|Override
DECL|method|getPayload
specifier|public
name|BytesRef
name|getPayload
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No payloads exist for this field!"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|hasPayload
specifier|public
name|boolean
name|hasPayload
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// Decodes docs& positions& payloads
DECL|class|SegmentDocsAndPositionsAndPayloadsEnum
specifier|private
class|class
name|SegmentDocsAndPositionsAndPayloadsEnum
extends|extends
name|DocsAndPositionsEnum
block|{
DECL|field|startFreqIn
specifier|final
name|IndexInput
name|startFreqIn
decl_stmt|;
DECL|field|freqIn
specifier|private
specifier|final
name|IndexInput
name|freqIn
decl_stmt|;
DECL|field|proxIn
specifier|private
specifier|final
name|IndexInput
name|proxIn
decl_stmt|;
DECL|field|limit
name|int
name|limit
decl_stmt|;
comment|// number of docs in this posting
DECL|field|ord
name|int
name|ord
decl_stmt|;
comment|// how many docs we've read
DECL|field|doc
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
comment|// doc we last read
DECL|field|accum
name|int
name|accum
decl_stmt|;
comment|// accumulator for doc deltas
DECL|field|freq
name|int
name|freq
decl_stmt|;
comment|// freq we last read
DECL|field|position
name|int
name|position
decl_stmt|;
DECL|field|liveDocs
name|Bits
name|liveDocs
decl_stmt|;
DECL|field|freqOffset
name|long
name|freqOffset
decl_stmt|;
DECL|field|skipOffset
name|int
name|skipOffset
decl_stmt|;
DECL|field|proxOffset
name|long
name|proxOffset
decl_stmt|;
DECL|field|posPendingCount
name|int
name|posPendingCount
decl_stmt|;
DECL|field|payloadLength
name|int
name|payloadLength
decl_stmt|;
DECL|field|payloadPending
name|boolean
name|payloadPending
decl_stmt|;
DECL|field|skipped
name|boolean
name|skipped
decl_stmt|;
DECL|field|skipper
name|Lucene40SkipListReader
name|skipper
decl_stmt|;
DECL|field|payload
specifier|private
name|BytesRef
name|payload
decl_stmt|;
DECL|field|lazyProxPointer
specifier|private
name|long
name|lazyProxPointer
decl_stmt|;
DECL|method|SegmentDocsAndPositionsAndPayloadsEnum
specifier|public
name|SegmentDocsAndPositionsAndPayloadsEnum
parameter_list|(
name|IndexInput
name|freqIn
parameter_list|,
name|IndexInput
name|proxIn
parameter_list|)
throws|throws
name|IOException
block|{
name|startFreqIn
operator|=
name|freqIn
expr_stmt|;
name|this
operator|.
name|freqIn
operator|=
operator|(
name|IndexInput
operator|)
name|freqIn
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|proxIn
operator|=
operator|(
name|IndexInput
operator|)
name|proxIn
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|SegmentDocsAndPositionsAndPayloadsEnum
name|reset
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|,
name|StandardTermState
name|termState
parameter_list|,
name|Bits
name|liveDocs
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|fieldInfo
operator|.
name|indexOptions
operator|==
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
assert|;
assert|assert
name|fieldInfo
operator|.
name|storePayloads
assert|;
if|if
condition|(
name|payload
operator|==
literal|null
condition|)
block|{
name|payload
operator|=
operator|new
name|BytesRef
argument_list|()
expr_stmt|;
name|payload
operator|.
name|bytes
operator|=
operator|new
name|byte
index|[
literal|1
index|]
expr_stmt|;
block|}
name|this
operator|.
name|liveDocs
operator|=
name|liveDocs
expr_stmt|;
comment|// TODO: for full enum case (eg segment merging) this
comment|// seek is unnecessary; maybe we can avoid in such
comment|// cases
name|freqIn
operator|.
name|seek
argument_list|(
name|termState
operator|.
name|freqOffset
argument_list|)
expr_stmt|;
name|lazyProxPointer
operator|=
name|termState
operator|.
name|proxOffset
expr_stmt|;
name|limit
operator|=
name|termState
operator|.
name|docFreq
expr_stmt|;
name|ord
operator|=
literal|0
expr_stmt|;
name|doc
operator|=
operator|-
literal|1
expr_stmt|;
name|accum
operator|=
literal|0
expr_stmt|;
name|position
operator|=
literal|0
expr_stmt|;
name|skipped
operator|=
literal|false
expr_stmt|;
name|posPendingCount
operator|=
literal|0
expr_stmt|;
name|payloadPending
operator|=
literal|false
expr_stmt|;
name|freqOffset
operator|=
name|termState
operator|.
name|freqOffset
expr_stmt|;
name|proxOffset
operator|=
name|termState
operator|.
name|proxOffset
expr_stmt|;
name|skipOffset
operator|=
name|termState
operator|.
name|skipOffset
expr_stmt|;
comment|//System.out.println("StandardR.D&PE reset seg=" + segment + " limit=" + limit + " freqFP=" + freqOffset + " proxFP=" + proxOffset + " this=" + this);
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|ord
operator|==
name|limit
condition|)
block|{
comment|//System.out.println("StandardR.D&PE seg=" + segment + " nextDoc return doc=END");
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
name|ord
operator|++
expr_stmt|;
comment|// Decode next doc/freq pair
specifier|final
name|int
name|code
init|=
name|freqIn
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|accum
operator|+=
name|code
operator|>>>
literal|1
expr_stmt|;
comment|// shift off low bit
if|if
condition|(
operator|(
name|code
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// if low bit is set
name|freq
operator|=
literal|1
expr_stmt|;
comment|// freq is one
block|}
else|else
block|{
name|freq
operator|=
name|freqIn
operator|.
name|readVInt
argument_list|()
expr_stmt|;
comment|// else read freq
block|}
name|posPendingCount
operator|+=
name|freq
expr_stmt|;
if|if
condition|(
name|liveDocs
operator|==
literal|null
operator|||
name|liveDocs
operator|.
name|get
argument_list|(
name|accum
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|position
operator|=
literal|0
expr_stmt|;
comment|//System.out.println("StandardR.D&PE nextDoc seg=" + segment + " return doc=" + doc);
return|return
operator|(
name|doc
operator|=
name|accum
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
block|{
return|return
name|freq
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
comment|//System.out.println("StandardR.D&PE advance seg=" + segment + " target=" + target + " this=" + this);
if|if
condition|(
operator|(
name|target
operator|-
name|skipInterval
operator|)
operator|>=
name|doc
operator|&&
name|limit
operator|>=
name|skipMinimum
condition|)
block|{
comment|// There are enough docs in the posting to have
comment|// skip data, and it isn't too close
if|if
condition|(
name|skipper
operator|==
literal|null
condition|)
block|{
comment|// This is the first time this enum has ever been used for skipping -- do lazy init
name|skipper
operator|=
operator|new
name|Lucene40SkipListReader
argument_list|(
operator|(
name|IndexInput
operator|)
name|freqIn
operator|.
name|clone
argument_list|()
argument_list|,
name|maxSkipLevels
argument_list|,
name|skipInterval
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|skipped
condition|)
block|{
comment|// This is the first time this posting has
comment|// skipped, since reset() was called, so now we
comment|// load the skip data for this posting
comment|//System.out.println("  init skipper freqOffset=" + freqOffset + " skipOffset=" + skipOffset + " vs len=" + freqIn.length());
name|skipper
operator|.
name|init
argument_list|(
name|freqOffset
operator|+
name|skipOffset
argument_list|,
name|freqOffset
argument_list|,
name|proxOffset
argument_list|,
name|limit
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|skipped
operator|=
literal|true
expr_stmt|;
block|}
specifier|final
name|int
name|newOrd
init|=
name|skipper
operator|.
name|skipTo
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|newOrd
operator|>
name|ord
condition|)
block|{
comment|// Skipper moved
name|ord
operator|=
name|newOrd
expr_stmt|;
name|doc
operator|=
name|accum
operator|=
name|skipper
operator|.
name|getDoc
argument_list|()
expr_stmt|;
name|freqIn
operator|.
name|seek
argument_list|(
name|skipper
operator|.
name|getFreqPointer
argument_list|()
argument_list|)
expr_stmt|;
name|lazyProxPointer
operator|=
name|skipper
operator|.
name|getProxPointer
argument_list|()
expr_stmt|;
name|posPendingCount
operator|=
literal|0
expr_stmt|;
name|position
operator|=
literal|0
expr_stmt|;
name|payloadPending
operator|=
literal|false
expr_stmt|;
name|payloadLength
operator|=
name|skipper
operator|.
name|getPayloadLength
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Now, linear scan for the rest:
do|do
block|{
name|nextDoc
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|target
operator|>
name|doc
condition|)
do|;
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|nextPosition
specifier|public
name|int
name|nextPosition
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|lazyProxPointer
operator|!=
operator|-
literal|1
condition|)
block|{
name|proxIn
operator|.
name|seek
argument_list|(
name|lazyProxPointer
argument_list|)
expr_stmt|;
name|lazyProxPointer
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|payloadPending
operator|&&
name|payloadLength
operator|>
literal|0
condition|)
block|{
comment|// payload of last position as never retrieved -- skip it
name|proxIn
operator|.
name|seek
argument_list|(
name|proxIn
operator|.
name|getFilePointer
argument_list|()
operator|+
name|payloadLength
argument_list|)
expr_stmt|;
name|payloadPending
operator|=
literal|false
expr_stmt|;
block|}
comment|// scan over any docs that were iterated without their positions
while|while
condition|(
name|posPendingCount
operator|>
name|freq
condition|)
block|{
specifier|final
name|int
name|code
init|=
name|proxIn
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|code
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// new payload length
name|payloadLength
operator|=
name|proxIn
operator|.
name|readVInt
argument_list|()
expr_stmt|;
assert|assert
name|payloadLength
operator|>=
literal|0
assert|;
block|}
assert|assert
name|payloadLength
operator|!=
operator|-
literal|1
assert|;
name|proxIn
operator|.
name|seek
argument_list|(
name|proxIn
operator|.
name|getFilePointer
argument_list|()
operator|+
name|payloadLength
argument_list|)
expr_stmt|;
name|posPendingCount
operator|--
expr_stmt|;
name|position
operator|=
literal|0
expr_stmt|;
name|payloadPending
operator|=
literal|false
expr_stmt|;
comment|//System.out.println("StandardR.D&PE skipPos");
block|}
comment|// read next position
if|if
condition|(
name|payloadPending
operator|&&
name|payloadLength
operator|>
literal|0
condition|)
block|{
comment|// payload wasn't retrieved for last position
name|proxIn
operator|.
name|seek
argument_list|(
name|proxIn
operator|.
name|getFilePointer
argument_list|()
operator|+
name|payloadLength
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|code
init|=
name|proxIn
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|code
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// new payload length
name|payloadLength
operator|=
name|proxIn
operator|.
name|readVInt
argument_list|()
expr_stmt|;
assert|assert
name|payloadLength
operator|>=
literal|0
assert|;
block|}
assert|assert
name|payloadLength
operator|!=
operator|-
literal|1
assert|;
name|payloadPending
operator|=
literal|true
expr_stmt|;
name|position
operator|+=
name|code
operator|>>>
literal|1
expr_stmt|;
name|posPendingCount
operator|--
expr_stmt|;
assert|assert
name|posPendingCount
operator|>=
literal|0
operator|:
literal|"nextPosition() was called too many times (more than freq() times) posPendingCount="
operator|+
name|posPendingCount
assert|;
comment|//System.out.println("StandardR.D&PE nextPos   return pos=" + position);
return|return
name|position
return|;
block|}
comment|/** Returns the payload at this position, or null if no      *  payload was indexed. */
annotation|@
name|Override
DECL|method|getPayload
specifier|public
name|BytesRef
name|getPayload
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|lazyProxPointer
operator|==
operator|-
literal|1
assert|;
assert|assert
name|posPendingCount
operator|<
name|freq
assert|;
if|if
condition|(
operator|!
name|payloadPending
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Either no payload exists at this term position or an attempt was made to load it more than once."
argument_list|)
throw|;
block|}
if|if
condition|(
name|payloadLength
operator|>
name|payload
operator|.
name|bytes
operator|.
name|length
condition|)
block|{
name|payload
operator|.
name|grow
argument_list|(
name|payloadLength
argument_list|)
expr_stmt|;
block|}
name|proxIn
operator|.
name|readBytes
argument_list|(
name|payload
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|payloadLength
argument_list|)
expr_stmt|;
name|payload
operator|.
name|length
operator|=
name|payloadLength
expr_stmt|;
name|payloadPending
operator|=
literal|false
expr_stmt|;
return|return
name|payload
return|;
block|}
annotation|@
name|Override
DECL|method|hasPayload
specifier|public
name|boolean
name|hasPayload
parameter_list|()
block|{
return|return
name|payloadPending
operator|&&
name|payloadLength
operator|>
literal|0
return|;
block|}
block|}
block|}
end_class
end_unit
