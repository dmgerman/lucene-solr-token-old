begin_unit
begin_package
DECL|package|org.apache.lucene.index.codecs.standard
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|standard
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_comment
comment|// TODO
end_comment
begin_comment
comment|//   - allow for non-regular index intervals?  eg with a
end_comment
begin_comment
comment|//     long string of rare terms, you don't need such
end_comment
begin_comment
comment|//     frequent indexing
end_comment
begin_comment
comment|/**  * TermsDictReader interacts with an instance of this class  * to manage its terms index.  The writer must accept  * indexed terms (many pairs of CharSequence text + long  * fileOffset), and then this reader must be able to  * retrieve the nearest index term to a provided term  * text.   * @lucene.experimental */
end_comment
begin_class
DECL|class|StandardTermsIndexReader
specifier|public
specifier|abstract
class|class
name|StandardTermsIndexReader
block|{
DECL|class|TermsIndexResult
specifier|static
class|class
name|TermsIndexResult
block|{
DECL|field|position
name|long
name|position
decl_stmt|;
DECL|field|term
specifier|final
name|BytesRef
name|term
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|field|offset
name|long
name|offset
decl_stmt|;
block|}
empty_stmt|;
DECL|class|FieldReader
specifier|public
specifier|abstract
class|class
name|FieldReader
block|{
comment|/** Returns position of "largest" index term that's<=      *  text.  Returned TermsIndexResult may be reused      *  across calls.  This resets internal state, and      *  expects that you'll then scan the file and      *  sequentially call isIndexTerm for each term      *  encountered. */
DECL|method|getIndexOffset
specifier|public
specifier|abstract
name|void
name|getIndexOffset
parameter_list|(
name|BytesRef
name|term
parameter_list|,
name|TermsIndexResult
name|result
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|getIndexOffset
specifier|public
specifier|abstract
name|void
name|getIndexOffset
parameter_list|(
name|long
name|ord
parameter_list|,
name|TermsIndexResult
name|result
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Call this sequentially for each term encoutered,      *  after calling {@link #getIndexOffset}. */
DECL|method|isIndexTerm
specifier|public
specifier|abstract
name|boolean
name|isIndexTerm
parameter_list|(
name|long
name|ord
parameter_list|,
name|int
name|docFreq
parameter_list|,
name|boolean
name|onlyLoaded
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Finds the next index term, after the specified      *  ord.  Returns true if one exists.  */
DECL|method|nextIndexTerm
specifier|public
specifier|abstract
name|boolean
name|nextIndexTerm
parameter_list|(
name|long
name|ord
parameter_list|,
name|TermsIndexResult
name|result
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|method|getField
specifier|public
specifier|abstract
name|FieldReader
name|getField
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|)
function_decl|;
DECL|method|loadTermsIndex
specifier|public
specifier|abstract
name|void
name|loadTermsIndex
parameter_list|(
name|int
name|indexDivisor
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|close
specifier|public
specifier|abstract
name|void
name|close
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|getExtensions
specifier|public
specifier|abstract
name|void
name|getExtensions
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|extensions
parameter_list|)
function_decl|;
block|}
end_class
end_unit
