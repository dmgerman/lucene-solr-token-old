begin_unit
begin_package
DECL|package|org.apache.lucene.index.codecs
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ByteBlockPool
operator|.
name|BYTE_BLOCK_SIZE
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_class
DECL|class|DeltaBytesWriter
specifier|final
class|class
name|DeltaBytesWriter
block|{
comment|// Must be bigger than
comment|// DocumentsWriter.MAX_TERM_LENGTH_UTF8.  If you change
comment|// this it's an index format change, so that change must be
comment|// versioned:
DECL|field|TERM_EOF
specifier|final
specifier|static
name|int
name|TERM_EOF
init|=
name|BYTE_BLOCK_SIZE
decl_stmt|;
DECL|field|lastBytes
specifier|private
name|byte
index|[]
name|lastBytes
init|=
operator|new
name|byte
index|[
literal|10
index|]
decl_stmt|;
DECL|field|lastLength
specifier|private
name|int
name|lastLength
decl_stmt|;
DECL|field|out
specifier|final
name|IndexOutput
name|out
decl_stmt|;
DECL|method|DeltaBytesWriter
name|DeltaBytesWriter
parameter_list|(
name|IndexOutput
name|out
parameter_list|)
block|{
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
block|}
DECL|method|reset
name|void
name|reset
parameter_list|()
block|{
name|lastLength
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|write
name|void
name|write
parameter_list|(
name|BytesRef
name|text
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|start
init|=
literal|0
decl_stmt|;
name|int
name|upto
init|=
name|text
operator|.
name|offset
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|text
operator|.
name|length
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
name|text
operator|.
name|bytes
decl_stmt|;
specifier|final
name|int
name|limit
init|=
name|length
operator|<
name|lastLength
condition|?
name|length
else|:
name|lastLength
decl_stmt|;
while|while
condition|(
name|start
operator|<
name|limit
condition|)
block|{
if|if
condition|(
name|bytes
index|[
name|upto
index|]
operator|!=
name|lastBytes
index|[
name|start
index|]
condition|)
block|{
break|break;
block|}
name|start
operator|++
expr_stmt|;
name|upto
operator|++
expr_stmt|;
block|}
specifier|final
name|int
name|suffix
init|=
name|length
operator|-
name|start
decl_stmt|;
name|out
operator|.
name|writeVInt
argument_list|(
name|start
argument_list|)
expr_stmt|;
comment|// prefix
name|out
operator|.
name|writeVInt
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
comment|// suffix
name|out
operator|.
name|writeBytes
argument_list|(
name|bytes
argument_list|,
name|upto
argument_list|,
name|suffix
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastBytes
operator|.
name|length
operator|<
name|length
condition|)
block|{
name|lastBytes
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|lastBytes
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
comment|// TODO: is this copy really necessary?  I don't think
comment|// caller actually modifies these bytes, so we can save
comment|// by reference?
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
name|upto
argument_list|,
name|lastBytes
argument_list|,
name|start
argument_list|,
name|suffix
argument_list|)
expr_stmt|;
name|lastLength
operator|=
name|length
expr_stmt|;
block|}
block|}
end_class
end_unit
