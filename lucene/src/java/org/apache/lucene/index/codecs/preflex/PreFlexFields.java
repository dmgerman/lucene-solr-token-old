begin_unit
begin_package
DECL|package|org.apache.lucene.index.codecs.preflex
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|preflex
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsAndPositionsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CompoundFileReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|FieldsProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_comment
comment|/** Exposes flex API on a pre-flex index, as a codec.   * @lucene.experimental */
end_comment
begin_class
DECL|class|PreFlexFields
specifier|public
class|class
name|PreFlexFields
extends|extends
name|FieldsProducer
block|{
DECL|field|tis
specifier|public
name|TermInfosReader
name|tis
decl_stmt|;
DECL|field|tisNoIndex
specifier|public
specifier|final
name|TermInfosReader
name|tisNoIndex
decl_stmt|;
DECL|field|freqStream
specifier|public
specifier|final
name|IndexInput
name|freqStream
decl_stmt|;
DECL|field|proxStream
specifier|public
specifier|final
name|IndexInput
name|proxStream
decl_stmt|;
DECL|field|fieldInfos
specifier|final
specifier|private
name|FieldInfos
name|fieldInfos
decl_stmt|;
DECL|field|si
specifier|private
specifier|final
name|SegmentInfo
name|si
decl_stmt|;
DECL|field|fields
specifier|final
name|TreeMap
argument_list|<
name|String
argument_list|,
name|FieldInfo
argument_list|>
name|fields
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|FieldInfo
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|dir
specifier|private
specifier|final
name|Directory
name|dir
decl_stmt|;
DECL|field|readBufferSize
specifier|private
specifier|final
name|int
name|readBufferSize
decl_stmt|;
DECL|field|cfsReader
specifier|private
name|Directory
name|cfsReader
decl_stmt|;
DECL|method|PreFlexFields
name|PreFlexFields
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|FieldInfos
name|fieldInfos
parameter_list|,
name|SegmentInfo
name|info
parameter_list|,
name|int
name|readBufferSize
parameter_list|,
name|int
name|indexDivisor
parameter_list|)
throws|throws
name|IOException
block|{
name|si
operator|=
name|info
expr_stmt|;
name|TermInfosReader
name|r
init|=
operator|new
name|TermInfosReader
argument_list|(
name|dir
argument_list|,
name|info
operator|.
name|name
argument_list|,
name|fieldInfos
argument_list|,
name|readBufferSize
argument_list|,
name|indexDivisor
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexDivisor
operator|==
operator|-
literal|1
condition|)
block|{
name|tisNoIndex
operator|=
name|r
expr_stmt|;
block|}
else|else
block|{
name|tisNoIndex
operator|=
literal|null
expr_stmt|;
name|tis
operator|=
name|r
expr_stmt|;
block|}
name|this
operator|.
name|readBufferSize
operator|=
name|readBufferSize
expr_stmt|;
name|this
operator|.
name|fieldInfos
operator|=
name|fieldInfos
expr_stmt|;
comment|// make sure that all index files have been read or are kept open
comment|// so that if an index update removes them we'll still have them
name|freqStream
operator|=
name|dir
operator|.
name|openInput
argument_list|(
name|info
operator|.
name|name
operator|+
literal|".frq"
argument_list|,
name|readBufferSize
argument_list|)
expr_stmt|;
name|boolean
name|anyProx
init|=
literal|false
decl_stmt|;
specifier|final
name|int
name|numFields
init|=
name|fieldInfos
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFields
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|FieldInfo
name|fieldInfo
init|=
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldInfo
operator|.
name|isIndexed
condition|)
block|{
name|fields
operator|.
name|put
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|,
name|fieldInfo
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fieldInfo
operator|.
name|omitTermFreqAndPositions
condition|)
block|{
name|anyProx
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|anyProx
condition|)
block|{
name|proxStream
operator|=
name|dir
operator|.
name|openInput
argument_list|(
name|info
operator|.
name|name
operator|+
literal|".prx"
argument_list|,
name|readBufferSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|proxStream
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
block|}
DECL|method|files
specifier|static
name|void
name|files
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|SegmentInfo
name|info
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|files
parameter_list|)
throws|throws
name|IOException
block|{
name|files
operator|.
name|add
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|info
operator|.
name|name
argument_list|,
name|PreFlexCodec
operator|.
name|TERMS_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|info
operator|.
name|name
argument_list|,
name|PreFlexCodec
operator|.
name|TERMS_INDEX_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|info
operator|.
name|name
argument_list|,
name|PreFlexCodec
operator|.
name|FREQ_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getHasProx
argument_list|()
condition|)
block|{
comment|// LUCENE-1739: for certain versions of 2.9-dev,
comment|// hasProx would be incorrectly computed during
comment|// indexing as true, and then stored into the segments
comment|// file, when it should have been false.  So we do the
comment|// extra check, here:
specifier|final
name|String
name|prx
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|info
operator|.
name|name
argument_list|,
name|PreFlexCodec
operator|.
name|PROX_EXTENSION
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|fileExists
argument_list|(
name|prx
argument_list|)
condition|)
block|{
name|files
operator|.
name|add
argument_list|(
name|prx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|FieldsEnum
name|iterator
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|PreFlexFieldsEnum
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|terms
specifier|public
name|Terms
name|terms
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|FieldInfo
name|fi
init|=
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|PreTerms
argument_list|(
name|fi
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|getTermsDict
specifier|synchronized
specifier|private
name|TermInfosReader
name|getTermsDict
parameter_list|()
block|{
if|if
condition|(
name|tis
operator|!=
literal|null
condition|)
block|{
return|return
name|tis
return|;
block|}
else|else
block|{
return|return
name|tisNoIndex
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|loadTermsIndex
specifier|synchronized
specifier|public
name|void
name|loadTermsIndex
parameter_list|(
name|int
name|indexDivisor
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tis
operator|==
literal|null
condition|)
block|{
name|Directory
name|dir0
decl_stmt|;
if|if
condition|(
name|si
operator|.
name|getUseCompoundFile
argument_list|()
condition|)
block|{
comment|// In some cases, we were originally opened when CFS
comment|// was not used, but then we are asked to open the
comment|// terms reader with index, the segment has switched
comment|// to CFS
if|if
condition|(
operator|!
operator|(
name|dir
operator|instanceof
name|CompoundFileReader
operator|)
condition|)
block|{
name|dir0
operator|=
name|cfsReader
operator|=
operator|new
name|CompoundFileReader
argument_list|(
name|dir
argument_list|,
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|si
operator|.
name|name
argument_list|,
name|IndexFileNames
operator|.
name|COMPOUND_FILE_EXTENSION
argument_list|)
argument_list|,
name|readBufferSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dir0
operator|=
name|dir
expr_stmt|;
block|}
name|dir0
operator|=
name|cfsReader
expr_stmt|;
block|}
else|else
block|{
name|dir0
operator|=
name|dir
expr_stmt|;
block|}
name|tis
operator|=
operator|new
name|TermInfosReader
argument_list|(
name|dir0
argument_list|,
name|si
operator|.
name|name
argument_list|,
name|fieldInfos
argument_list|,
name|readBufferSize
argument_list|,
name|indexDivisor
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|tis
operator|!=
literal|null
condition|)
block|{
name|tis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|tisNoIndex
operator|!=
literal|null
condition|)
block|{
name|tisNoIndex
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cfsReader
operator|!=
literal|null
condition|)
block|{
name|cfsReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|PreFlexFieldsEnum
specifier|private
class|class
name|PreFlexFieldsEnum
extends|extends
name|FieldsEnum
block|{
DECL|field|it
specifier|final
name|Iterator
argument_list|<
name|FieldInfo
argument_list|>
name|it
decl_stmt|;
DECL|field|termsEnum
specifier|private
specifier|final
name|PreTermsEnum
name|termsEnum
decl_stmt|;
DECL|field|count
specifier|private
name|int
name|count
decl_stmt|;
DECL|field|current
name|FieldInfo
name|current
decl_stmt|;
DECL|method|PreFlexFieldsEnum
specifier|public
name|PreFlexFieldsEnum
parameter_list|()
throws|throws
name|IOException
block|{
name|it
operator|=
name|fields
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|termsEnum
operator|=
operator|new
name|PreTermsEnum
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|String
name|next
parameter_list|()
block|{
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
name|current
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|current
operator|.
name|name
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|terms
specifier|public
name|TermsEnum
name|terms
parameter_list|()
throws|throws
name|IOException
block|{
name|termsEnum
operator|.
name|reset
argument_list|(
name|current
argument_list|,
name|count
operator|==
literal|1
argument_list|)
expr_stmt|;
return|return
name|termsEnum
return|;
block|}
block|}
DECL|class|PreTerms
specifier|private
class|class
name|PreTerms
extends|extends
name|Terms
block|{
DECL|field|fieldInfo
specifier|final
name|FieldInfo
name|fieldInfo
decl_stmt|;
DECL|method|PreTerms
name|PreTerms
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|)
block|{
name|this
operator|.
name|fieldInfo
operator|=
name|fieldInfo
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|TermsEnum
name|iterator
parameter_list|()
throws|throws
name|IOException
block|{
name|PreTermsEnum
name|termsEnum
init|=
operator|new
name|PreTermsEnum
argument_list|()
decl_stmt|;
name|termsEnum
operator|.
name|reset
argument_list|(
name|fieldInfo
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|termsEnum
return|;
block|}
annotation|@
name|Override
DECL|method|getComparator
specifier|public
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|getComparator
parameter_list|()
block|{
comment|// Pre-flex indexes always sorted in UTF16 order
return|return
name|BytesRef
operator|.
name|getUTF8SortedAsUTF16Comparator
argument_list|()
return|;
block|}
block|}
DECL|class|PreTermsEnum
specifier|private
class|class
name|PreTermsEnum
extends|extends
name|TermsEnum
block|{
DECL|field|termEnum
specifier|private
name|SegmentTermEnum
name|termEnum
decl_stmt|;
DECL|field|fieldInfo
specifier|private
name|FieldInfo
name|fieldInfo
decl_stmt|;
DECL|field|skipNext
specifier|private
name|boolean
name|skipNext
decl_stmt|;
DECL|field|current
specifier|private
name|BytesRef
name|current
decl_stmt|;
DECL|field|scratchBytesRef
specifier|private
specifier|final
name|BytesRef
name|scratchBytesRef
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|method|reset
name|void
name|reset
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|,
name|boolean
name|isFirstField
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|fieldInfo
operator|=
name|fieldInfo
expr_stmt|;
if|if
condition|(
name|termEnum
operator|==
literal|null
condition|)
block|{
comment|// First time reset is called
if|if
condition|(
name|isFirstField
condition|)
block|{
name|termEnum
operator|=
name|getTermsDict
argument_list|()
operator|.
name|terms
argument_list|()
expr_stmt|;
name|skipNext
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|termEnum
operator|=
name|getTermsDict
argument_list|()
operator|.
name|terms
argument_list|(
operator|new
name|Term
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|skipNext
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|Term
name|t
init|=
name|termEnum
operator|.
name|term
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
operator|&&
name|t
operator|.
name|field
argument_list|()
operator|==
name|fieldInfo
operator|.
name|name
condition|)
block|{
comment|// No need to seek -- we have already advanced onto
comment|// this field.  We must be @ first term because
comment|// flex API will not advance this enum further, on
comment|// seeing a different field.
block|}
else|else
block|{
assert|assert
name|t
operator|==
literal|null
operator|||
operator|!
name|t
operator|.
name|field
argument_list|()
operator|.
name|equals
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|)
assert|;
comment|// make sure field name is interned
specifier|final
name|TermInfosReader
name|tis
init|=
name|getTermsDict
argument_list|()
decl_stmt|;
name|tis
operator|.
name|seekEnum
argument_list|(
name|termEnum
argument_list|,
operator|new
name|Term
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|skipNext
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getComparator
specifier|public
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|getComparator
parameter_list|()
block|{
comment|// Pre-flex indexes always sorted in UTF16 order
return|return
name|BytesRef
operator|.
name|getUTF8SortedAsUTF16Comparator
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|seek
specifier|public
name|SeekStatus
name|seek
parameter_list|(
name|long
name|ord
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|ord
specifier|public
name|long
name|ord
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|seek
specifier|public
name|SeekStatus
name|seek
parameter_list|(
name|BytesRef
name|term
parameter_list|,
name|boolean
name|useCache
parameter_list|)
throws|throws
name|IOException
block|{
name|skipNext
operator|=
literal|false
expr_stmt|;
specifier|final
name|TermInfosReader
name|tis
init|=
name|getTermsDict
argument_list|()
decl_stmt|;
specifier|final
name|Term
name|t0
init|=
operator|new
name|Term
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|,
name|term
operator|.
name|utf8ToString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|termEnum
operator|==
literal|null
condition|)
block|{
name|termEnum
operator|=
name|tis
operator|.
name|terms
argument_list|(
name|t0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tis
operator|.
name|seekEnum
argument_list|(
name|termEnum
argument_list|,
name|t0
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Term
name|t
init|=
name|termEnum
operator|.
name|term
argument_list|()
decl_stmt|;
specifier|final
name|BytesRef
name|tr
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|tr
operator|=
name|scratchBytesRef
expr_stmt|;
name|scratchBytesRef
operator|.
name|copy
argument_list|(
name|t
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tr
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|!=
literal|null
operator|&&
name|t
operator|.
name|field
argument_list|()
operator|==
name|fieldInfo
operator|.
name|name
operator|&&
name|term
operator|.
name|bytesEquals
argument_list|(
name|tr
argument_list|)
condition|)
block|{
name|current
operator|=
name|tr
expr_stmt|;
return|return
name|SeekStatus
operator|.
name|FOUND
return|;
block|}
elseif|else
if|if
condition|(
name|t
operator|==
literal|null
operator|||
name|t
operator|.
name|field
argument_list|()
operator|!=
name|fieldInfo
operator|.
name|name
condition|)
block|{
name|current
operator|=
literal|null
expr_stmt|;
return|return
name|SeekStatus
operator|.
name|END
return|;
block|}
else|else
block|{
name|current
operator|=
name|tr
expr_stmt|;
return|return
name|SeekStatus
operator|.
name|NOT_FOUND
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|BytesRef
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|skipNext
condition|)
block|{
name|skipNext
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|termEnum
operator|.
name|term
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|scratchBytesRef
operator|.
name|copy
argument_list|(
name|termEnum
operator|.
name|term
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|current
operator|=
name|scratchBytesRef
return|;
block|}
block|}
if|if
condition|(
name|termEnum
operator|.
name|next
argument_list|()
condition|)
block|{
specifier|final
name|Term
name|t
init|=
name|termEnum
operator|.
name|term
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|field
argument_list|()
operator|==
name|fieldInfo
operator|.
name|name
condition|)
block|{
name|scratchBytesRef
operator|.
name|copy
argument_list|(
name|t
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|current
operator|=
name|scratchBytesRef
expr_stmt|;
return|return
name|current
return|;
block|}
else|else
block|{
assert|assert
operator|!
name|t
operator|.
name|field
argument_list|()
operator|.
name|equals
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|)
assert|;
comment|// make sure field name is interned
comment|// Crossed into new field
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|term
specifier|public
name|BytesRef
name|term
parameter_list|()
block|{
return|return
name|current
return|;
block|}
annotation|@
name|Override
DECL|method|docFreq
specifier|public
name|int
name|docFreq
parameter_list|()
block|{
return|return
name|termEnum
operator|.
name|docFreq
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|docs
specifier|public
name|DocsEnum
name|docs
parameter_list|(
name|Bits
name|skipDocs
parameter_list|,
name|DocsEnum
name|reuse
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|reuse
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
operator|(
name|PreDocsEnum
operator|)
name|reuse
operator|)
operator|.
name|reset
argument_list|(
name|termEnum
argument_list|,
name|skipDocs
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
operator|new
name|PreDocsEnum
argument_list|()
operator|)
operator|.
name|reset
argument_list|(
name|termEnum
argument_list|,
name|skipDocs
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|docsAndPositions
specifier|public
name|DocsAndPositionsEnum
name|docsAndPositions
parameter_list|(
name|Bits
name|skipDocs
parameter_list|,
name|DocsAndPositionsEnum
name|reuse
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|reuse
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
operator|(
name|PreDocsAndPositionsEnum
operator|)
name|reuse
operator|)
operator|.
name|reset
argument_list|(
name|termEnum
argument_list|,
name|skipDocs
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
operator|new
name|PreDocsAndPositionsEnum
argument_list|()
operator|)
operator|.
name|reset
argument_list|(
name|termEnum
argument_list|,
name|skipDocs
argument_list|)
return|;
block|}
block|}
block|}
DECL|class|PreDocsEnum
specifier|private
specifier|final
class|class
name|PreDocsEnum
extends|extends
name|DocsEnum
block|{
DECL|field|docs
specifier|final
specifier|private
name|SegmentTermDocs
name|docs
decl_stmt|;
DECL|method|PreDocsEnum
name|PreDocsEnum
parameter_list|()
throws|throws
name|IOException
block|{
name|docs
operator|=
operator|new
name|SegmentTermDocs
argument_list|(
name|freqStream
argument_list|,
name|getTermsDict
argument_list|()
argument_list|,
name|fieldInfos
argument_list|)
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|PreDocsEnum
name|reset
parameter_list|(
name|SegmentTermEnum
name|termEnum
parameter_list|,
name|Bits
name|skipDocs
parameter_list|)
throws|throws
name|IOException
block|{
name|docs
operator|.
name|setSkipDocs
argument_list|(
name|skipDocs
argument_list|)
expr_stmt|;
name|docs
operator|.
name|seek
argument_list|(
name|termEnum
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|docs
operator|.
name|next
argument_list|()
condition|)
block|{
return|return
name|docs
operator|.
name|doc
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|NO_MORE_DOCS
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|docs
operator|.
name|skipTo
argument_list|(
name|target
argument_list|)
condition|)
block|{
return|return
name|docs
operator|.
name|doc
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|NO_MORE_DOCS
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
block|{
return|return
name|docs
operator|.
name|freq
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|docs
operator|.
name|doc
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|bulkResult
operator|==
literal|null
condition|)
block|{
name|initBulkResult
argument_list|()
expr_stmt|;
name|bulkResult
operator|.
name|docs
operator|.
name|ints
operator|=
operator|new
name|int
index|[
literal|32
index|]
expr_stmt|;
name|bulkResult
operator|.
name|freqs
operator|.
name|ints
operator|=
operator|new
name|int
index|[
literal|32
index|]
expr_stmt|;
block|}
return|return
name|this
operator|.
name|docs
operator|.
name|read
argument_list|(
name|bulkResult
operator|.
name|docs
operator|.
name|ints
argument_list|,
name|bulkResult
operator|.
name|freqs
operator|.
name|ints
argument_list|)
return|;
block|}
block|}
DECL|class|PreDocsAndPositionsEnum
specifier|private
specifier|final
class|class
name|PreDocsAndPositionsEnum
extends|extends
name|DocsAndPositionsEnum
block|{
DECL|field|pos
specifier|final
specifier|private
name|SegmentTermPositions
name|pos
decl_stmt|;
DECL|method|PreDocsAndPositionsEnum
name|PreDocsAndPositionsEnum
parameter_list|()
throws|throws
name|IOException
block|{
name|pos
operator|=
operator|new
name|SegmentTermPositions
argument_list|(
name|freqStream
argument_list|,
name|proxStream
argument_list|,
name|getTermsDict
argument_list|()
argument_list|,
name|fieldInfos
argument_list|)
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|DocsAndPositionsEnum
name|reset
parameter_list|(
name|SegmentTermEnum
name|termEnum
parameter_list|,
name|Bits
name|skipDocs
parameter_list|)
throws|throws
name|IOException
block|{
name|pos
operator|.
name|setSkipDocs
argument_list|(
name|skipDocs
argument_list|)
expr_stmt|;
name|pos
operator|.
name|seek
argument_list|(
name|termEnum
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|pos
operator|.
name|next
argument_list|()
condition|)
block|{
return|return
name|pos
operator|.
name|doc
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|NO_MORE_DOCS
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pos
operator|.
name|skipTo
argument_list|(
name|target
argument_list|)
condition|)
block|{
return|return
name|pos
operator|.
name|doc
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|NO_MORE_DOCS
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
block|{
return|return
name|pos
operator|.
name|freq
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|pos
operator|.
name|doc
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nextPosition
specifier|public
name|int
name|nextPosition
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|pos
operator|.
name|nextPosition
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPayloadLength
specifier|public
name|int
name|getPayloadLength
parameter_list|()
block|{
return|return
name|pos
operator|.
name|getPayloadLength
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hasPayload
specifier|public
name|boolean
name|hasPayload
parameter_list|()
block|{
return|return
name|pos
operator|.
name|isPayloadAvailable
argument_list|()
return|;
block|}
DECL|field|payload
specifier|private
name|BytesRef
name|payload
decl_stmt|;
annotation|@
name|Override
DECL|method|getPayload
specifier|public
name|BytesRef
name|getPayload
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|len
init|=
name|pos
operator|.
name|getPayloadLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|payload
operator|==
literal|null
condition|)
block|{
name|payload
operator|=
operator|new
name|BytesRef
argument_list|()
expr_stmt|;
name|payload
operator|.
name|bytes
operator|=
operator|new
name|byte
index|[
name|len
index|]
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|payload
operator|.
name|bytes
operator|.
name|length
operator|<
name|len
condition|)
block|{
name|payload
operator|.
name|grow
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
block|}
name|payload
operator|.
name|bytes
operator|=
name|pos
operator|.
name|getPayload
argument_list|(
name|payload
operator|.
name|bytes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|payload
operator|.
name|length
operator|=
name|len
expr_stmt|;
return|return
name|payload
return|;
block|}
block|}
block|}
end_class
end_unit
