begin_unit
begin_package
DECL|package|org.apache.lucene.index.codecs.simpletext
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|simpletext
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|FieldsProducer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentReadState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsAndPositionsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|fst
operator|.
name|Builder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|fst
operator|.
name|BytesRefFSTEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|fst
operator|.
name|FST
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|fst
operator|.
name|PositiveIntOutputs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|fst
operator|.
name|PairOutputs
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_class
DECL|class|SimpleTextFieldsReader
class|class
name|SimpleTextFieldsReader
extends|extends
name|FieldsProducer
block|{
DECL|field|in
specifier|private
specifier|final
name|IndexInput
name|in
decl_stmt|;
DECL|field|fieldInfos
specifier|private
specifier|final
name|FieldInfos
name|fieldInfos
decl_stmt|;
DECL|field|NEWLINE
specifier|final
specifier|static
name|byte
name|NEWLINE
init|=
name|SimpleTextFieldsWriter
operator|.
name|NEWLINE
decl_stmt|;
DECL|field|ESCAPE
specifier|final
specifier|static
name|byte
name|ESCAPE
init|=
name|SimpleTextFieldsWriter
operator|.
name|ESCAPE
decl_stmt|;
DECL|field|END
specifier|final
specifier|static
name|BytesRef
name|END
init|=
name|SimpleTextFieldsWriter
operator|.
name|END
decl_stmt|;
DECL|field|FIELD
specifier|final
specifier|static
name|BytesRef
name|FIELD
init|=
name|SimpleTextFieldsWriter
operator|.
name|FIELD
decl_stmt|;
DECL|field|TERM
specifier|final
specifier|static
name|BytesRef
name|TERM
init|=
name|SimpleTextFieldsWriter
operator|.
name|TERM
decl_stmt|;
DECL|field|DOC
specifier|final
specifier|static
name|BytesRef
name|DOC
init|=
name|SimpleTextFieldsWriter
operator|.
name|DOC
decl_stmt|;
DECL|field|POS
specifier|final
specifier|static
name|BytesRef
name|POS
init|=
name|SimpleTextFieldsWriter
operator|.
name|POS
decl_stmt|;
DECL|field|PAYLOAD
specifier|final
specifier|static
name|BytesRef
name|PAYLOAD
init|=
name|SimpleTextFieldsWriter
operator|.
name|PAYLOAD
decl_stmt|;
DECL|method|SimpleTextFieldsReader
specifier|public
name|SimpleTextFieldsReader
parameter_list|(
name|SegmentReadState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|=
name|state
operator|.
name|dir
operator|.
name|openInput
argument_list|(
name|SimpleTextCodec
operator|.
name|getPostingsFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
argument_list|,
literal|""
operator|+
name|state
operator|.
name|codecId
argument_list|)
argument_list|)
expr_stmt|;
name|fieldInfos
operator|=
name|state
operator|.
name|fieldInfos
expr_stmt|;
block|}
DECL|method|readLine
specifier|static
name|void
name|readLine
parameter_list|(
name|IndexInput
name|in
parameter_list|,
name|BytesRef
name|scratch
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|upto
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|byte
name|b
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|scratch
operator|.
name|bytes
operator|.
name|length
operator|==
name|upto
condition|)
block|{
name|scratch
operator|.
name|grow
argument_list|(
literal|1
operator|+
name|upto
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|b
operator|==
name|ESCAPE
condition|)
block|{
name|scratch
operator|.
name|bytes
index|[
name|upto
operator|++
index|]
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|b
operator|==
name|NEWLINE
condition|)
block|{
break|break;
block|}
else|else
block|{
name|scratch
operator|.
name|bytes
index|[
name|upto
operator|++
index|]
operator|=
name|b
expr_stmt|;
block|}
block|}
block|}
name|scratch
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|scratch
operator|.
name|length
operator|=
name|upto
expr_stmt|;
block|}
DECL|class|SimpleTextFieldsEnum
specifier|private
class|class
name|SimpleTextFieldsEnum
extends|extends
name|FieldsEnum
block|{
DECL|field|in
specifier|private
specifier|final
name|IndexInput
name|in
decl_stmt|;
DECL|field|scratch
specifier|private
specifier|final
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|(
literal|10
argument_list|)
decl_stmt|;
DECL|field|current
specifier|private
name|String
name|current
decl_stmt|;
DECL|method|SimpleTextFieldsEnum
specifier|public
name|SimpleTextFieldsEnum
parameter_list|()
block|{
name|this
operator|.
name|in
operator|=
operator|(
name|IndexInput
operator|)
name|SimpleTextFieldsReader
operator|.
name|this
operator|.
name|in
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|String
name|next
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
if|if
condition|(
name|scratch
operator|.
name|equals
argument_list|(
name|END
argument_list|)
condition|)
block|{
name|current
operator|=
literal|null
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|scratch
operator|.
name|startsWith
argument_list|(
name|FIELD
argument_list|)
condition|)
block|{
name|String
name|field
init|=
name|StringHelper
operator|.
name|intern
argument_list|(
operator|new
name|String
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|,
name|scratch
operator|.
name|offset
operator|+
name|FIELD
operator|.
name|length
argument_list|,
name|scratch
operator|.
name|length
operator|-
name|FIELD
operator|.
name|length
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|current
operator|=
name|field
expr_stmt|;
return|return
name|field
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|terms
specifier|public
name|TermsEnum
name|terms
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|SimpleTextFieldsReader
operator|.
name|this
operator|.
name|terms
argument_list|(
name|current
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
DECL|class|SimpleTextTermsEnum
specifier|private
class|class
name|SimpleTextTermsEnum
extends|extends
name|TermsEnum
block|{
DECL|field|in
specifier|private
specifier|final
name|IndexInput
name|in
decl_stmt|;
DECL|field|omitTF
specifier|private
specifier|final
name|boolean
name|omitTF
decl_stmt|;
DECL|field|docFreq
specifier|private
name|int
name|docFreq
decl_stmt|;
DECL|field|docsStart
specifier|private
name|long
name|docsStart
decl_stmt|;
DECL|field|ended
specifier|private
name|boolean
name|ended
decl_stmt|;
DECL|field|fstEnum
specifier|private
specifier|final
name|BytesRefFSTEnum
argument_list|<
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
name|fstEnum
decl_stmt|;
DECL|method|SimpleTextTermsEnum
specifier|public
name|SimpleTextTermsEnum
parameter_list|(
name|FST
argument_list|<
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
name|fst
parameter_list|,
name|boolean
name|omitTF
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|in
operator|=
operator|(
name|IndexInput
operator|)
name|SimpleTextFieldsReader
operator|.
name|this
operator|.
name|in
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|omitTF
operator|=
name|omitTF
expr_stmt|;
name|fstEnum
operator|=
operator|new
name|BytesRefFSTEnum
argument_list|<
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|(
name|fst
argument_list|)
expr_stmt|;
block|}
DECL|method|seek
specifier|public
name|SeekStatus
name|seek
parameter_list|(
name|BytesRef
name|text
parameter_list|,
name|boolean
name|useCache
comment|/* ignored */
parameter_list|)
throws|throws
name|IOException
block|{
comment|//System.out.println("seek to text=" + text.utf8ToString());
specifier|final
name|BytesRefFSTEnum
operator|.
name|InputOutput
argument_list|<
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
name|result
init|=
name|fstEnum
operator|.
name|seekCeil
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
comment|//System.out.println("  end");
return|return
name|SeekStatus
operator|.
name|END
return|;
block|}
else|else
block|{
comment|//System.out.println("  got text=" + term.utf8ToString());
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|pair
init|=
name|result
operator|.
name|output
decl_stmt|;
name|docsStart
operator|=
name|pair
operator|.
name|output1
expr_stmt|;
name|docFreq
operator|=
name|pair
operator|.
name|output2
operator|.
name|intValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|input
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
block|{
comment|//System.out.println("  match docsStart=" + docsStart);
return|return
name|SeekStatus
operator|.
name|FOUND
return|;
block|}
else|else
block|{
comment|//System.out.println("  not match docsStart=" + docsStart);
return|return
name|SeekStatus
operator|.
name|NOT_FOUND
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|cacheCurrentTerm
specifier|public
name|void
name|cacheCurrentTerm
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|next
specifier|public
name|BytesRef
name|next
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
operator|!
name|ended
assert|;
specifier|final
name|BytesRefFSTEnum
operator|.
name|InputOutput
argument_list|<
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
name|result
init|=
name|fstEnum
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
specifier|final
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|pair
init|=
name|result
operator|.
name|output
decl_stmt|;
name|docsStart
operator|=
name|pair
operator|.
name|output1
expr_stmt|;
name|docFreq
operator|=
name|pair
operator|.
name|output2
operator|.
name|intValue
argument_list|()
expr_stmt|;
return|return
name|result
operator|.
name|input
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|term
specifier|public
name|BytesRef
name|term
parameter_list|()
block|{
return|return
name|fstEnum
operator|.
name|current
argument_list|()
operator|.
name|input
return|;
block|}
annotation|@
name|Override
DECL|method|ord
specifier|public
name|long
name|ord
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|seek
specifier|public
name|SeekStatus
name|seek
parameter_list|(
name|long
name|ord
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|docFreq
specifier|public
name|int
name|docFreq
parameter_list|()
block|{
return|return
name|docFreq
return|;
block|}
annotation|@
name|Override
DECL|method|docs
specifier|public
name|DocsEnum
name|docs
parameter_list|(
name|Bits
name|skipDocs
parameter_list|,
name|DocsEnum
name|reuse
parameter_list|)
throws|throws
name|IOException
block|{
name|SimpleTextDocsEnum
name|docsEnum
decl_stmt|;
if|if
condition|(
name|reuse
operator|!=
literal|null
operator|&&
name|reuse
operator|instanceof
name|SimpleTextDocsEnum
operator|&&
operator|(
operator|(
name|SimpleTextDocsEnum
operator|)
name|reuse
operator|)
operator|.
name|canReuse
argument_list|(
name|in
argument_list|)
condition|)
block|{
name|docsEnum
operator|=
operator|(
name|SimpleTextDocsEnum
operator|)
name|reuse
expr_stmt|;
block|}
else|else
block|{
name|docsEnum
operator|=
operator|new
name|SimpleTextDocsEnum
argument_list|()
expr_stmt|;
block|}
return|return
name|docsEnum
operator|.
name|reset
argument_list|(
name|docsStart
argument_list|,
name|skipDocs
argument_list|,
name|omitTF
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|docsAndPositions
specifier|public
name|DocsAndPositionsEnum
name|docsAndPositions
parameter_list|(
name|Bits
name|skipDocs
parameter_list|,
name|DocsAndPositionsEnum
name|reuse
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|omitTF
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SimpleTextDocsAndPositionsEnum
name|docsAndPositionsEnum
decl_stmt|;
if|if
condition|(
name|reuse
operator|!=
literal|null
operator|&&
name|reuse
operator|instanceof
name|SimpleTextDocsAndPositionsEnum
operator|&&
operator|(
operator|(
name|SimpleTextDocsAndPositionsEnum
operator|)
name|reuse
operator|)
operator|.
name|canReuse
argument_list|(
name|in
argument_list|)
condition|)
block|{
name|docsAndPositionsEnum
operator|=
operator|(
name|SimpleTextDocsAndPositionsEnum
operator|)
name|reuse
expr_stmt|;
block|}
else|else
block|{
name|docsAndPositionsEnum
operator|=
operator|new
name|SimpleTextDocsAndPositionsEnum
argument_list|()
expr_stmt|;
block|}
return|return
name|docsAndPositionsEnum
operator|.
name|reset
argument_list|(
name|docsStart
argument_list|,
name|skipDocs
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getComparator
specifier|public
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|getComparator
parameter_list|()
block|{
return|return
name|BytesRef
operator|.
name|getUTF8SortedAsUnicodeComparator
argument_list|()
return|;
block|}
block|}
DECL|class|SimpleTextDocsEnum
specifier|private
class|class
name|SimpleTextDocsEnum
extends|extends
name|DocsEnum
block|{
DECL|field|inStart
specifier|private
specifier|final
name|IndexInput
name|inStart
decl_stmt|;
DECL|field|in
specifier|private
specifier|final
name|IndexInput
name|in
decl_stmt|;
DECL|field|omitTF
specifier|private
name|boolean
name|omitTF
decl_stmt|;
DECL|field|docID
specifier|private
name|int
name|docID
decl_stmt|;
DECL|field|tf
specifier|private
name|int
name|tf
decl_stmt|;
DECL|field|skipDocs
specifier|private
name|Bits
name|skipDocs
decl_stmt|;
DECL|field|scratch
specifier|private
specifier|final
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|(
literal|10
argument_list|)
decl_stmt|;
DECL|field|scratchUTF16
specifier|private
specifier|final
name|UnicodeUtil
operator|.
name|UTF16Result
name|scratchUTF16
init|=
operator|new
name|UnicodeUtil
operator|.
name|UTF16Result
argument_list|()
decl_stmt|;
DECL|method|SimpleTextDocsEnum
specifier|public
name|SimpleTextDocsEnum
parameter_list|()
block|{
name|this
operator|.
name|inStart
operator|=
name|SimpleTextFieldsReader
operator|.
name|this
operator|.
name|in
expr_stmt|;
name|this
operator|.
name|in
operator|=
operator|(
name|IndexInput
operator|)
name|this
operator|.
name|inStart
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
DECL|method|canReuse
specifier|public
name|boolean
name|canReuse
parameter_list|(
name|IndexInput
name|in
parameter_list|)
block|{
return|return
name|in
operator|==
name|inStart
return|;
block|}
DECL|method|reset
specifier|public
name|SimpleTextDocsEnum
name|reset
parameter_list|(
name|long
name|fp
parameter_list|,
name|Bits
name|skipDocs
parameter_list|,
name|boolean
name|omitTF
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|skipDocs
operator|=
name|skipDocs
expr_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|fp
argument_list|)
expr_stmt|;
name|this
operator|.
name|omitTF
operator|=
name|omitTF
expr_stmt|;
if|if
condition|(
name|omitTF
condition|)
block|{
name|tf
operator|=
literal|1
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|docID
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
block|{
return|return
name|tf
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|docID
operator|==
name|NO_MORE_DOCS
condition|)
block|{
return|return
name|docID
return|;
block|}
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|int
name|termFreq
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|long
name|lineStart
init|=
name|in
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
if|if
condition|(
name|scratch
operator|.
name|startsWith
argument_list|(
name|DOC
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|first
operator|&&
operator|(
name|skipDocs
operator|==
literal|null
operator|||
operator|!
name|skipDocs
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|)
condition|)
block|{
name|in
operator|.
name|seek
argument_list|(
name|lineStart
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|omitTF
condition|)
block|{
name|tf
operator|=
name|termFreq
expr_stmt|;
block|}
return|return
name|docID
return|;
block|}
name|UnicodeUtil
operator|.
name|UTF8toUTF16
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|,
name|scratch
operator|.
name|offset
operator|+
name|DOC
operator|.
name|length
argument_list|,
name|scratch
operator|.
name|length
operator|-
name|DOC
operator|.
name|length
argument_list|,
name|scratchUTF16
argument_list|)
expr_stmt|;
name|docID
operator|=
name|ArrayUtil
operator|.
name|parseInt
argument_list|(
name|scratchUTF16
operator|.
name|result
argument_list|,
literal|0
argument_list|,
name|scratchUTF16
operator|.
name|length
argument_list|)
expr_stmt|;
name|termFreq
operator|=
literal|0
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|scratch
operator|.
name|startsWith
argument_list|(
name|POS
argument_list|)
condition|)
block|{
name|termFreq
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|scratch
operator|.
name|startsWith
argument_list|(
name|PAYLOAD
argument_list|)
condition|)
block|{
comment|// skip
block|}
else|else
block|{
assert|assert
name|scratch
operator|.
name|startsWith
argument_list|(
name|TERM
argument_list|)
operator|||
name|scratch
operator|.
name|startsWith
argument_list|(
name|FIELD
argument_list|)
operator|||
name|scratch
operator|.
name|startsWith
argument_list|(
name|END
argument_list|)
operator|:
literal|"scratch="
operator|+
name|scratch
operator|.
name|utf8ToString
argument_list|()
assert|;
if|if
condition|(
operator|!
name|first
operator|&&
operator|(
name|skipDocs
operator|==
literal|null
operator|||
operator|!
name|skipDocs
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|)
condition|)
block|{
name|in
operator|.
name|seek
argument_list|(
name|lineStart
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|omitTF
condition|)
block|{
name|tf
operator|=
name|termFreq
expr_stmt|;
block|}
return|return
name|docID
return|;
block|}
return|return
name|docID
operator|=
name|NO_MORE_DOCS
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Naive -- better to index skip data
while|while
condition|(
name|nextDoc
argument_list|()
operator|<
name|target
condition|)
empty_stmt|;
return|return
name|docID
return|;
block|}
block|}
DECL|class|SimpleTextDocsAndPositionsEnum
specifier|private
class|class
name|SimpleTextDocsAndPositionsEnum
extends|extends
name|DocsAndPositionsEnum
block|{
DECL|field|inStart
specifier|private
specifier|final
name|IndexInput
name|inStart
decl_stmt|;
DECL|field|in
specifier|private
specifier|final
name|IndexInput
name|in
decl_stmt|;
DECL|field|docID
specifier|private
name|int
name|docID
decl_stmt|;
DECL|field|tf
specifier|private
name|int
name|tf
decl_stmt|;
DECL|field|skipDocs
specifier|private
name|Bits
name|skipDocs
decl_stmt|;
DECL|field|scratch
specifier|private
specifier|final
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|(
literal|10
argument_list|)
decl_stmt|;
DECL|field|scratch2
specifier|private
specifier|final
name|BytesRef
name|scratch2
init|=
operator|new
name|BytesRef
argument_list|(
literal|10
argument_list|)
decl_stmt|;
DECL|field|scratchUTF16
specifier|private
specifier|final
name|UnicodeUtil
operator|.
name|UTF16Result
name|scratchUTF16
init|=
operator|new
name|UnicodeUtil
operator|.
name|UTF16Result
argument_list|()
decl_stmt|;
DECL|field|scratchUTF16_2
specifier|private
specifier|final
name|UnicodeUtil
operator|.
name|UTF16Result
name|scratchUTF16_2
init|=
operator|new
name|UnicodeUtil
operator|.
name|UTF16Result
argument_list|()
decl_stmt|;
DECL|field|payload
specifier|private
name|BytesRef
name|payload
decl_stmt|;
DECL|field|nextDocStart
specifier|private
name|long
name|nextDocStart
decl_stmt|;
DECL|method|SimpleTextDocsAndPositionsEnum
specifier|public
name|SimpleTextDocsAndPositionsEnum
parameter_list|()
block|{
name|this
operator|.
name|inStart
operator|=
name|SimpleTextFieldsReader
operator|.
name|this
operator|.
name|in
expr_stmt|;
name|this
operator|.
name|in
operator|=
operator|(
name|IndexInput
operator|)
name|inStart
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
DECL|method|canReuse
specifier|public
name|boolean
name|canReuse
parameter_list|(
name|IndexInput
name|in
parameter_list|)
block|{
return|return
name|in
operator|==
name|inStart
return|;
block|}
DECL|method|reset
specifier|public
name|SimpleTextDocsAndPositionsEnum
name|reset
parameter_list|(
name|long
name|fp
parameter_list|,
name|Bits
name|skipDocs
parameter_list|)
block|{
name|this
operator|.
name|skipDocs
operator|=
name|skipDocs
expr_stmt|;
name|nextDocStart
operator|=
name|fp
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|docID
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
block|{
return|return
name|tf
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|nextDocStart
argument_list|)
expr_stmt|;
name|long
name|posStart
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|long
name|lineStart
init|=
name|in
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
if|if
condition|(
name|scratch
operator|.
name|startsWith
argument_list|(
name|DOC
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|first
operator|&&
operator|(
name|skipDocs
operator|==
literal|null
operator|||
operator|!
name|skipDocs
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|)
condition|)
block|{
name|nextDocStart
operator|=
name|lineStart
expr_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|posStart
argument_list|)
expr_stmt|;
return|return
name|docID
return|;
block|}
name|UnicodeUtil
operator|.
name|UTF8toUTF16
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|,
name|scratch
operator|.
name|offset
operator|+
name|DOC
operator|.
name|length
argument_list|,
name|scratch
operator|.
name|length
operator|-
name|DOC
operator|.
name|length
argument_list|,
name|scratchUTF16
argument_list|)
expr_stmt|;
name|docID
operator|=
name|ArrayUtil
operator|.
name|parseInt
argument_list|(
name|scratchUTF16
operator|.
name|result
argument_list|,
literal|0
argument_list|,
name|scratchUTF16
operator|.
name|length
argument_list|)
expr_stmt|;
name|tf
operator|=
literal|0
expr_stmt|;
name|posStart
operator|=
name|in
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|scratch
operator|.
name|startsWith
argument_list|(
name|POS
argument_list|)
condition|)
block|{
name|tf
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|scratch
operator|.
name|startsWith
argument_list|(
name|PAYLOAD
argument_list|)
condition|)
block|{
comment|// skip
block|}
else|else
block|{
assert|assert
name|scratch
operator|.
name|startsWith
argument_list|(
name|TERM
argument_list|)
operator|||
name|scratch
operator|.
name|startsWith
argument_list|(
name|FIELD
argument_list|)
operator|||
name|scratch
operator|.
name|startsWith
argument_list|(
name|END
argument_list|)
assert|;
if|if
condition|(
operator|!
name|first
operator|&&
operator|(
name|skipDocs
operator|==
literal|null
operator|||
operator|!
name|skipDocs
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|)
condition|)
block|{
name|nextDocStart
operator|=
name|lineStart
expr_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|posStart
argument_list|)
expr_stmt|;
return|return
name|docID
return|;
block|}
return|return
name|docID
operator|=
name|NO_MORE_DOCS
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Naive -- better to index skip data
while|while
condition|(
name|nextDoc
argument_list|()
operator|<
name|target
condition|)
empty_stmt|;
return|return
name|docID
return|;
block|}
annotation|@
name|Override
DECL|method|nextPosition
specifier|public
name|int
name|nextPosition
parameter_list|()
throws|throws
name|IOException
block|{
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
assert|assert
name|scratch
operator|.
name|startsWith
argument_list|(
name|POS
argument_list|)
operator|:
literal|"got line="
operator|+
name|scratch
operator|.
name|utf8ToString
argument_list|()
assert|;
name|UnicodeUtil
operator|.
name|UTF8toUTF16
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|,
name|scratch
operator|.
name|offset
operator|+
name|POS
operator|.
name|length
argument_list|,
name|scratch
operator|.
name|length
operator|-
name|POS
operator|.
name|length
argument_list|,
name|scratchUTF16_2
argument_list|)
expr_stmt|;
specifier|final
name|int
name|pos
init|=
name|ArrayUtil
operator|.
name|parseInt
argument_list|(
name|scratchUTF16_2
operator|.
name|result
argument_list|,
literal|0
argument_list|,
name|scratchUTF16_2
operator|.
name|length
argument_list|)
decl_stmt|;
specifier|final
name|long
name|fp
init|=
name|in
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
if|if
condition|(
name|scratch
operator|.
name|startsWith
argument_list|(
name|PAYLOAD
argument_list|)
condition|)
block|{
specifier|final
name|int
name|len
init|=
name|scratch
operator|.
name|length
operator|-
name|PAYLOAD
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|scratch2
operator|.
name|bytes
operator|.
name|length
operator|<
name|len
condition|)
block|{
name|scratch2
operator|.
name|grow
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|,
name|PAYLOAD
operator|.
name|length
argument_list|,
name|scratch2
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|scratch2
operator|.
name|length
operator|=
name|len
expr_stmt|;
name|payload
operator|=
name|scratch2
expr_stmt|;
block|}
else|else
block|{
name|payload
operator|=
literal|null
expr_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|fp
argument_list|)
expr_stmt|;
block|}
return|return
name|pos
return|;
block|}
annotation|@
name|Override
DECL|method|getPayload
specifier|public
name|BytesRef
name|getPayload
parameter_list|()
block|{
comment|// Some tests rely on only being able to retrieve the
comment|// payload once
try|try
block|{
return|return
name|payload
return|;
block|}
finally|finally
block|{
name|payload
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|hasPayload
specifier|public
name|boolean
name|hasPayload
parameter_list|()
block|{
return|return
name|payload
operator|!=
literal|null
return|;
block|}
block|}
DECL|class|TermData
specifier|static
class|class
name|TermData
block|{
DECL|field|docsStart
specifier|public
name|long
name|docsStart
decl_stmt|;
DECL|field|docFreq
specifier|public
name|int
name|docFreq
decl_stmt|;
DECL|method|TermData
specifier|public
name|TermData
parameter_list|(
name|long
name|docsStart
parameter_list|,
name|int
name|docFreq
parameter_list|)
block|{
name|this
operator|.
name|docsStart
operator|=
name|docsStart
expr_stmt|;
name|this
operator|.
name|docFreq
operator|=
name|docFreq
expr_stmt|;
block|}
block|}
DECL|class|SimpleTextTerms
specifier|private
class|class
name|SimpleTextTerms
extends|extends
name|Terms
block|{
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|termsStart
specifier|private
specifier|final
name|long
name|termsStart
decl_stmt|;
DECL|field|omitTF
specifier|private
specifier|final
name|boolean
name|omitTF
decl_stmt|;
DECL|field|fst
specifier|private
name|FST
argument_list|<
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
name|fst
decl_stmt|;
DECL|field|scratch
specifier|private
specifier|final
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|(
literal|10
argument_list|)
decl_stmt|;
DECL|method|SimpleTextTerms
specifier|public
name|SimpleTextTerms
parameter_list|(
name|String
name|field
parameter_list|,
name|long
name|termsStart
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|field
operator|=
name|StringHelper
operator|.
name|intern
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|termsStart
operator|=
name|termsStart
expr_stmt|;
name|omitTF
operator|=
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
operator|.
name|omitTermFreqAndPositions
expr_stmt|;
name|loadTerms
argument_list|()
expr_stmt|;
block|}
DECL|method|loadTerms
specifier|private
name|void
name|loadTerms
parameter_list|()
throws|throws
name|IOException
block|{
name|PositiveIntOutputs
name|posIntOutputs
init|=
name|PositiveIntOutputs
operator|.
name|getSingleton
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Builder
argument_list|<
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
name|b
init|=
operator|new
name|Builder
argument_list|<
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|(
name|FST
operator|.
name|INPUT_TYPE
operator|.
name|BYTE1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
operator|new
name|PairOutputs
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|(
name|posIntOutputs
argument_list|,
name|posIntOutputs
argument_list|)
argument_list|)
decl_stmt|;
name|IndexInput
name|in
init|=
operator|(
name|IndexInput
operator|)
name|SimpleTextFieldsReader
operator|.
name|this
operator|.
name|in
operator|.
name|clone
argument_list|()
decl_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|termsStart
argument_list|)
expr_stmt|;
specifier|final
name|BytesRef
name|lastTerm
init|=
operator|new
name|BytesRef
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|long
name|lastDocsStart
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|docFreq
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
if|if
condition|(
name|scratch
operator|.
name|equals
argument_list|(
name|END
argument_list|)
operator|||
name|scratch
operator|.
name|startsWith
argument_list|(
name|FIELD
argument_list|)
condition|)
block|{
if|if
condition|(
name|lastDocsStart
operator|!=
operator|-
literal|1
condition|)
block|{
name|b
operator|.
name|add
argument_list|(
name|lastTerm
argument_list|,
operator|new
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|(
name|lastDocsStart
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|docFreq
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
elseif|else
if|if
condition|(
name|scratch
operator|.
name|startsWith
argument_list|(
name|DOC
argument_list|)
condition|)
block|{
name|docFreq
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|scratch
operator|.
name|startsWith
argument_list|(
name|TERM
argument_list|)
condition|)
block|{
if|if
condition|(
name|lastDocsStart
operator|!=
operator|-
literal|1
condition|)
block|{
name|b
operator|.
name|add
argument_list|(
name|lastTerm
argument_list|,
operator|new
name|PairOutputs
operator|.
name|Pair
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|(
name|lastDocsStart
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|docFreq
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lastDocsStart
operator|=
name|in
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
specifier|final
name|int
name|len
init|=
name|scratch
operator|.
name|length
operator|-
name|TERM
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|len
operator|>
name|lastTerm
operator|.
name|length
condition|)
block|{
name|lastTerm
operator|.
name|grow
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|,
name|TERM
operator|.
name|length
argument_list|,
name|lastTerm
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|lastTerm
operator|.
name|length
operator|=
name|len
expr_stmt|;
name|docFreq
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|fst
operator|=
name|b
operator|.
name|finish
argument_list|()
expr_stmt|;
comment|/*       PrintStream ps = new PrintStream("out.dot");       fst.toDot(ps);       ps.close();       System.out.println("SAVED out.dot");       */
comment|//System.out.println("FST " + fst.sizeInBytes());
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|TermsEnum
name|iterator
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fst
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|SimpleTextTermsEnum
argument_list|(
name|fst
argument_list|,
name|omitTF
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|TermsEnum
operator|.
name|EMPTY
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getComparator
specifier|public
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|getComparator
parameter_list|()
block|{
return|return
name|BytesRef
operator|.
name|getUTF8SortedAsUnicodeComparator
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|FieldsEnum
name|iterator
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|SimpleTextFieldsEnum
argument_list|()
return|;
block|}
DECL|field|termsCache
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Terms
argument_list|>
name|termsCache
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Terms
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|terms
specifier|synchronized
specifier|public
name|Terms
name|terms
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|Terms
name|terms
init|=
name|termsCache
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|==
literal|null
condition|)
block|{
name|SimpleTextFieldsEnum
name|fe
init|=
operator|(
name|SimpleTextFieldsEnum
operator|)
name|iterator
argument_list|()
decl_stmt|;
name|String
name|fieldUpto
decl_stmt|;
while|while
condition|(
operator|(
name|fieldUpto
operator|=
name|fe
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fieldUpto
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|terms
operator|=
operator|new
name|SimpleTextTerms
argument_list|(
name|field
argument_list|,
name|fe
operator|.
name|in
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|termsCache
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|terms
argument_list|)
expr_stmt|;
block|}
return|return
name|terms
return|;
block|}
annotation|@
name|Override
DECL|method|loadTermsIndex
specifier|public
name|void
name|loadTermsIndex
parameter_list|(
name|int
name|indexDivisor
parameter_list|)
block|{   }
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
