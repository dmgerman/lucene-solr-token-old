begin_unit
begin_package
DECL|package|org.apache.lucene.index.codecs.pulsing
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|pulsing
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CodecUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|standard
operator|.
name|StandardPostingsWriter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_comment
comment|// TODO: we now pulse entirely according to docFreq of the
end_comment
begin_comment
comment|// term; it might be better to eg pulse by "net bytes used"
end_comment
begin_comment
comment|// so that a term that has only 1 doc but zillions of
end_comment
begin_comment
comment|// positions would not be inlined.  Though this is
end_comment
begin_comment
comment|// presumably rare in practice...
end_comment
begin_comment
comment|/** @lucene.experimental */
end_comment
begin_class
DECL|class|PulsingPostingsWriterImpl
specifier|public
specifier|final
class|class
name|PulsingPostingsWriterImpl
extends|extends
name|StandardPostingsWriter
block|{
DECL|field|CODEC
specifier|final
specifier|static
name|String
name|CODEC
init|=
literal|"PulsedPostings"
decl_stmt|;
comment|// To add a new version, increment from the last one, and
comment|// change VERSION_CURRENT to point to your new version:
DECL|field|VERSION_START
specifier|final
specifier|static
name|int
name|VERSION_START
init|=
literal|0
decl_stmt|;
DECL|field|VERSION_CURRENT
specifier|final
specifier|static
name|int
name|VERSION_CURRENT
init|=
name|VERSION_START
decl_stmt|;
DECL|field|termsOut
name|IndexOutput
name|termsOut
decl_stmt|;
DECL|field|omitTF
name|boolean
name|omitTF
decl_stmt|;
DECL|field|storePayloads
name|boolean
name|storePayloads
decl_stmt|;
comment|// Starts a new term
DECL|field|fieldInfo
name|FieldInfo
name|fieldInfo
decl_stmt|;
comment|/** @lucene.experimental */
DECL|class|Document
specifier|public
specifier|static
class|class
name|Document
block|{
DECL|field|docID
name|int
name|docID
decl_stmt|;
DECL|field|termDocFreq
name|int
name|termDocFreq
decl_stmt|;
DECL|field|numPositions
name|int
name|numPositions
decl_stmt|;
DECL|field|positions
name|Position
index|[]
name|positions
decl_stmt|;
DECL|method|Document
name|Document
parameter_list|()
block|{
name|positions
operator|=
operator|new
name|Position
index|[
literal|1
index|]
expr_stmt|;
name|positions
index|[
literal|0
index|]
operator|=
operator|new
name|Position
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|docID
operator|=
name|docID
expr_stmt|;
name|doc
operator|.
name|termDocFreq
operator|=
name|termDocFreq
expr_stmt|;
name|doc
operator|.
name|numPositions
operator|=
name|numPositions
expr_stmt|;
name|doc
operator|.
name|positions
operator|=
operator|new
name|Position
index|[
name|positions
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|positions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|doc
operator|.
name|positions
index|[
name|i
index|]
operator|=
operator|(
name|Position
operator|)
name|positions
index|[
name|i
index|]
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
DECL|method|reallocPositions
name|void
name|reallocPositions
parameter_list|(
name|int
name|minSize
parameter_list|)
block|{
specifier|final
name|Position
index|[]
name|newArray
init|=
operator|new
name|Position
index|[
name|ArrayUtil
operator|.
name|oversize
argument_list|(
name|minSize
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_REF
argument_list|)
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|positions
argument_list|,
literal|0
argument_list|,
name|newArray
argument_list|,
literal|0
argument_list|,
name|positions
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|positions
operator|.
name|length
init|;
name|i
operator|<
name|newArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|newArray
index|[
name|i
index|]
operator|=
operator|new
name|Position
argument_list|()
expr_stmt|;
block|}
name|positions
operator|=
name|newArray
expr_stmt|;
block|}
block|}
DECL|field|pendingDocs
specifier|final
name|Document
index|[]
name|pendingDocs
decl_stmt|;
DECL|field|pendingDocCount
name|int
name|pendingDocCount
init|=
literal|0
decl_stmt|;
DECL|field|currentDoc
name|Document
name|currentDoc
decl_stmt|;
DECL|field|pulsed
name|boolean
name|pulsed
decl_stmt|;
comment|// false if we've seen> maxPulsingDocFreq docs
DECL|class|Position
specifier|static
class|class
name|Position
block|{
DECL|field|payload
name|BytesRef
name|payload
decl_stmt|;
DECL|field|pos
name|int
name|pos
decl_stmt|;
annotation|@
name|Override
DECL|method|clone
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|Position
name|position
init|=
operator|new
name|Position
argument_list|()
decl_stmt|;
name|position
operator|.
name|pos
operator|=
name|pos
expr_stmt|;
if|if
condition|(
name|payload
operator|!=
literal|null
condition|)
block|{
name|position
operator|.
name|payload
operator|=
operator|new
name|BytesRef
argument_list|(
name|payload
argument_list|)
expr_stmt|;
block|}
return|return
name|position
return|;
block|}
block|}
comment|// TODO: -- lazy init this?  ie, if every single term
comment|// was pulsed then we never need to use this fallback?
comment|// Fallback writer for non-pulsed terms:
DECL|field|wrappedPostingsWriter
specifier|final
name|StandardPostingsWriter
name|wrappedPostingsWriter
decl_stmt|;
comment|/** If docFreq<= maxPulsingDocFreq, its postings are    *  inlined into terms dict */
DECL|method|PulsingPostingsWriterImpl
specifier|public
name|PulsingPostingsWriterImpl
parameter_list|(
name|int
name|maxPulsingDocFreq
parameter_list|,
name|StandardPostingsWriter
name|wrappedPostingsWriter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|()
expr_stmt|;
name|pendingDocs
operator|=
operator|new
name|Document
index|[
name|maxPulsingDocFreq
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxPulsingDocFreq
condition|;
name|i
operator|++
control|)
block|{
name|pendingDocs
index|[
name|i
index|]
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
block|}
comment|// We simply wrap another postings writer, but only call
comment|// on it when doc freq is higher than our cutoff
name|this
operator|.
name|wrappedPostingsWriter
operator|=
name|wrappedPostingsWriter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start
specifier|public
name|void
name|start
parameter_list|(
name|IndexOutput
name|termsOut
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|termsOut
operator|=
name|termsOut
expr_stmt|;
name|CodecUtil
operator|.
name|writeHeader
argument_list|(
name|termsOut
argument_list|,
name|CODEC
argument_list|,
name|VERSION_CURRENT
argument_list|)
expr_stmt|;
name|termsOut
operator|.
name|writeVInt
argument_list|(
name|pendingDocs
operator|.
name|length
argument_list|)
expr_stmt|;
name|wrappedPostingsWriter
operator|.
name|start
argument_list|(
name|termsOut
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startTerm
specifier|public
name|void
name|startTerm
parameter_list|()
block|{
assert|assert
name|pendingDocCount
operator|==
literal|0
assert|;
name|pulsed
operator|=
literal|false
expr_stmt|;
block|}
comment|// TODO: -- should we NOT reuse across fields?  would
comment|// be cleaner
comment|// Currently, this instance is re-used across fields, so
comment|// our parent calls setField whenever the field changes
annotation|@
name|Override
DECL|method|setField
specifier|public
name|void
name|setField
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|)
block|{
name|this
operator|.
name|fieldInfo
operator|=
name|fieldInfo
expr_stmt|;
name|omitTF
operator|=
name|fieldInfo
operator|.
name|omitTermFreqAndPositions
expr_stmt|;
name|storePayloads
operator|=
name|fieldInfo
operator|.
name|storePayloads
expr_stmt|;
name|wrappedPostingsWriter
operator|.
name|setField
argument_list|(
name|fieldInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startDoc
specifier|public
name|void
name|startDoc
parameter_list|(
name|int
name|docID
parameter_list|,
name|int
name|termDocFreq
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|docID
operator|>=
literal|0
operator|:
literal|"got docID="
operator|+
name|docID
assert|;
if|if
condition|(
operator|!
name|pulsed
operator|&&
name|pendingDocCount
operator|==
name|pendingDocs
operator|.
name|length
condition|)
block|{
comment|// OK we just crossed the threshold, this term should
comment|// now be written with our wrapped codec:
name|wrappedPostingsWriter
operator|.
name|startTerm
argument_list|()
expr_stmt|;
comment|// Flush all buffered docs
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pendingDocCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Document
name|doc
init|=
name|pendingDocs
index|[
name|i
index|]
decl_stmt|;
name|wrappedPostingsWriter
operator|.
name|startDoc
argument_list|(
name|doc
operator|.
name|docID
argument_list|,
name|doc
operator|.
name|termDocFreq
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|omitTF
condition|)
block|{
assert|assert
name|doc
operator|.
name|termDocFreq
operator|==
name|doc
operator|.
name|numPositions
assert|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|doc
operator|.
name|termDocFreq
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|Position
name|pos
init|=
name|doc
operator|.
name|positions
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|pos
operator|.
name|payload
operator|!=
literal|null
operator|&&
name|pos
operator|.
name|payload
operator|.
name|length
operator|>
literal|0
condition|)
block|{
assert|assert
name|storePayloads
assert|;
name|wrappedPostingsWriter
operator|.
name|addPosition
argument_list|(
name|pos
operator|.
name|pos
argument_list|,
name|pos
operator|.
name|payload
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|wrappedPostingsWriter
operator|.
name|addPosition
argument_list|(
name|pos
operator|.
name|pos
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|wrappedPostingsWriter
operator|.
name|finishDoc
argument_list|()
expr_stmt|;
block|}
block|}
name|pendingDocCount
operator|=
literal|0
expr_stmt|;
name|pulsed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|pulsed
condition|)
block|{
comment|// We've already seen too many docs for this term --
comment|// just forward to our fallback writer
name|wrappedPostingsWriter
operator|.
name|startDoc
argument_list|(
name|docID
argument_list|,
name|termDocFreq
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|currentDoc
operator|=
name|pendingDocs
index|[
name|pendingDocCount
operator|++
index|]
expr_stmt|;
name|currentDoc
operator|.
name|docID
operator|=
name|docID
expr_stmt|;
comment|// TODO: -- need not store in doc?  only used for alloc& assert
name|currentDoc
operator|.
name|termDocFreq
operator|=
name|termDocFreq
expr_stmt|;
if|if
condition|(
name|termDocFreq
operator|>
name|currentDoc
operator|.
name|positions
operator|.
name|length
condition|)
block|{
name|currentDoc
operator|.
name|reallocPositions
argument_list|(
name|termDocFreq
argument_list|)
expr_stmt|;
block|}
name|currentDoc
operator|.
name|numPositions
operator|=
literal|0
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|addPosition
specifier|public
name|void
name|addPosition
parameter_list|(
name|int
name|position
parameter_list|,
name|BytesRef
name|payload
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pulsed
condition|)
block|{
name|wrappedPostingsWriter
operator|.
name|addPosition
argument_list|(
name|position
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// just buffer up
name|Position
name|pos
init|=
name|currentDoc
operator|.
name|positions
index|[
name|currentDoc
operator|.
name|numPositions
operator|++
index|]
decl_stmt|;
name|pos
operator|.
name|pos
operator|=
name|position
expr_stmt|;
if|if
condition|(
name|payload
operator|!=
literal|null
operator|&&
name|payload
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|pos
operator|.
name|payload
operator|==
literal|null
condition|)
block|{
name|pos
operator|.
name|payload
operator|=
operator|new
name|BytesRef
argument_list|(
name|payload
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pos
operator|.
name|payload
operator|.
name|copy
argument_list|(
name|payload
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|pos
operator|.
name|payload
operator|!=
literal|null
condition|)
block|{
name|pos
operator|.
name|payload
operator|.
name|length
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|finishDoc
specifier|public
name|void
name|finishDoc
parameter_list|()
block|{
assert|assert
name|currentDoc
operator|.
name|numPositions
operator|==
name|currentDoc
operator|.
name|termDocFreq
assert|;
block|}
DECL|field|pendingIsIndexTerm
name|boolean
name|pendingIsIndexTerm
decl_stmt|;
DECL|field|pulsedCount
name|int
name|pulsedCount
decl_stmt|;
DECL|field|nonPulsedCount
name|int
name|nonPulsedCount
decl_stmt|;
comment|/** Called when we are done adding docs to this term */
annotation|@
name|Override
DECL|method|finishTerm
specifier|public
name|void
name|finishTerm
parameter_list|(
name|int
name|docCount
parameter_list|,
name|boolean
name|isIndexTerm
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|docCount
operator|>
literal|0
assert|;
name|pendingIsIndexTerm
operator||=
name|isIndexTerm
expr_stmt|;
if|if
condition|(
name|pulsed
condition|)
block|{
name|wrappedPostingsWriter
operator|.
name|finishTerm
argument_list|(
name|docCount
argument_list|,
name|pendingIsIndexTerm
argument_list|)
expr_stmt|;
name|pendingIsIndexTerm
operator|=
literal|false
expr_stmt|;
name|pulsedCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|nonPulsedCount
operator|++
expr_stmt|;
comment|// OK, there were few enough occurrences for this
comment|// term, so we fully inline our postings data into
comment|// terms dict, now:
name|int
name|lastDocID
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pendingDocCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Document
name|doc
init|=
name|pendingDocs
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|int
name|delta
init|=
name|doc
operator|.
name|docID
operator|-
name|lastDocID
decl_stmt|;
name|lastDocID
operator|=
name|doc
operator|.
name|docID
expr_stmt|;
if|if
condition|(
name|omitTF
condition|)
block|{
name|termsOut
operator|.
name|writeVInt
argument_list|(
name|delta
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|doc
operator|.
name|numPositions
operator|==
name|doc
operator|.
name|termDocFreq
assert|;
if|if
condition|(
name|doc
operator|.
name|numPositions
operator|==
literal|1
condition|)
name|termsOut
operator|.
name|writeVInt
argument_list|(
operator|(
name|delta
operator|<<
literal|1
operator|)
operator||
literal|1
argument_list|)
expr_stmt|;
else|else
block|{
name|termsOut
operator|.
name|writeVInt
argument_list|(
name|delta
operator|<<
literal|1
argument_list|)
expr_stmt|;
name|termsOut
operator|.
name|writeVInt
argument_list|(
name|doc
operator|.
name|numPositions
argument_list|)
expr_stmt|;
block|}
comment|// TODO: we could do better in encoding
comment|// payloadLength, eg, if it's always the same
comment|// across all terms
name|int
name|lastPosition
init|=
literal|0
decl_stmt|;
name|int
name|lastPayloadLength
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|doc
operator|.
name|numPositions
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|Position
name|pos
init|=
name|doc
operator|.
name|positions
index|[
name|j
index|]
decl_stmt|;
specifier|final
name|int
name|delta2
init|=
name|pos
operator|.
name|pos
operator|-
name|lastPosition
decl_stmt|;
name|lastPosition
operator|=
name|pos
operator|.
name|pos
expr_stmt|;
if|if
condition|(
name|storePayloads
condition|)
block|{
specifier|final
name|int
name|payloadLength
init|=
name|pos
operator|.
name|payload
operator|==
literal|null
condition|?
literal|0
else|:
name|pos
operator|.
name|payload
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|payloadLength
operator|!=
name|lastPayloadLength
condition|)
block|{
name|termsOut
operator|.
name|writeVInt
argument_list|(
operator|(
name|delta2
operator|<<
literal|1
operator|)
operator||
literal|1
argument_list|)
expr_stmt|;
name|termsOut
operator|.
name|writeVInt
argument_list|(
name|payloadLength
argument_list|)
expr_stmt|;
name|lastPayloadLength
operator|=
name|payloadLength
expr_stmt|;
block|}
else|else
block|{
name|termsOut
operator|.
name|writeVInt
argument_list|(
name|delta2
operator|<<
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|payloadLength
operator|>
literal|0
condition|)
block|{
name|termsOut
operator|.
name|writeBytes
argument_list|(
name|pos
operator|.
name|payload
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|pos
operator|.
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|termsOut
operator|.
name|writeVInt
argument_list|(
name|delta2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|pendingDocCount
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|wrappedPostingsWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
