begin_unit
begin_package
DECL|package|org.apache.lucene.index.codecs
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MergeState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|IndexDocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|TypePromoter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|ValueType
import|;
end_import
begin_comment
comment|/**  * Abstract API that consumes per document values. Concrete implementations of  * this convert field values into a Codec specific format during indexing.  *<p>  * The {@link PerDocConsumer} API is accessible through the  * {@link PostingsFormat} - API providing per field consumers and producers for inverted  * data (terms, postings) as well as per-document data.  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|PerDocConsumer
specifier|public
specifier|abstract
class|class
name|PerDocConsumer
implements|implements
name|Closeable
block|{
comment|/** Adds a new DocValuesField */
DECL|method|addValuesField
specifier|public
specifier|abstract
name|DocValuesConsumer
name|addValuesField
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Consumes and merges the given {@link PerDocValues} producer    * into this consumers format.       */
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|MergeState
name|mergeState
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FieldInfos
name|fieldInfos
init|=
name|mergeState
operator|.
name|fieldInfos
decl_stmt|;
specifier|final
name|IndexDocValues
index|[]
name|docValues
init|=
operator|new
name|IndexDocValues
index|[
name|mergeState
operator|.
name|readers
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
specifier|final
name|PerDocValues
index|[]
name|perDocValues
init|=
operator|new
name|PerDocValues
index|[
name|mergeState
operator|.
name|readers
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
comment|// pull all PerDocValues
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|perDocValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|perDocValues
index|[
name|i
index|]
operator|=
name|mergeState
operator|.
name|readers
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|reader
operator|.
name|perDocValues
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|FieldInfo
name|fieldInfo
range|:
name|fieldInfos
control|)
block|{
name|mergeState
operator|.
name|fieldInfo
operator|=
name|fieldInfo
expr_stmt|;
name|TypePromoter
name|currentPromoter
init|=
name|TypePromoter
operator|.
name|getIdentityPromoter
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldInfo
operator|.
name|hasDocValues
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|perDocValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|perDocValues
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
comment|// get all IDV to merge
name|docValues
index|[
name|i
index|]
operator|=
name|perDocValues
index|[
name|i
index|]
operator|.
name|docValues
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|docValues
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|currentPromoter
operator|=
name|promoteValueType
argument_list|(
name|fieldInfo
argument_list|,
name|docValues
index|[
name|i
index|]
argument_list|,
name|currentPromoter
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentPromoter
operator|==
literal|null
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|currentPromoter
operator|==
literal|null
condition|)
block|{
name|fieldInfo
operator|.
name|resetDocValues
argument_list|(
literal|null
argument_list|)
expr_stmt|;
continue|continue;
block|}
assert|assert
name|currentPromoter
operator|!=
name|TypePromoter
operator|.
name|getIdentityPromoter
argument_list|()
assert|;
if|if
condition|(
name|fieldInfo
operator|.
name|getDocValues
argument_list|()
operator|!=
name|currentPromoter
operator|.
name|type
argument_list|()
condition|)
block|{
comment|// reset the type if we got promoted
name|fieldInfo
operator|.
name|resetDocValues
argument_list|(
name|currentPromoter
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|DocValuesConsumer
name|docValuesConsumer
init|=
name|addValuesField
argument_list|(
name|mergeState
operator|.
name|fieldInfo
argument_list|)
decl_stmt|;
assert|assert
name|docValuesConsumer
operator|!=
literal|null
assert|;
name|docValuesConsumer
operator|.
name|merge
argument_list|(
name|mergeState
argument_list|,
name|docValues
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* NOTE: don't close the perDocProducers here since they are private segment producers      * and will be closed once the SegmentReader goes out of scope */
block|}
DECL|method|promoteValueType
specifier|protected
name|TypePromoter
name|promoteValueType
parameter_list|(
specifier|final
name|FieldInfo
name|fieldInfo
parameter_list|,
specifier|final
name|IndexDocValues
name|docValues
parameter_list|,
name|TypePromoter
name|currentPromoter
parameter_list|)
block|{
assert|assert
name|currentPromoter
operator|!=
literal|null
assert|;
specifier|final
name|TypePromoter
name|incomingPromoter
init|=
name|TypePromoter
operator|.
name|create
argument_list|(
name|docValues
operator|.
name|type
argument_list|()
argument_list|,
name|docValues
operator|.
name|getValueSize
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|incomingPromoter
operator|!=
literal|null
assert|;
specifier|final
name|TypePromoter
name|newPromoter
init|=
name|currentPromoter
operator|.
name|promote
argument_list|(
name|incomingPromoter
argument_list|)
decl_stmt|;
return|return
name|newPromoter
operator|==
literal|null
condition|?
name|handleIncompatibleValueType
argument_list|(
name|fieldInfo
argument_list|,
name|incomingPromoter
argument_list|,
name|currentPromoter
argument_list|)
else|:
name|newPromoter
return|;
block|}
comment|/**    * Resolves a conflicts of incompatible {@link TypePromoter}s. The default    * implementation promotes incompatible types to    * {@link ValueType#BYTES_VAR_STRAIGHT} and preserves all values. If this    * method returns<code>null</code> all docvalues for the given    * {@link FieldInfo} are dropped and all values are lost.    *     * @param incomingPromoter    *          the incompatible incoming promoter    * @param currentPromoter    *          the current promoter    * @return a promoted {@link TypePromoter} or<code>null</code> iff this index    *         docvalues should be dropped for this field.    */
DECL|method|handleIncompatibleValueType
specifier|protected
name|TypePromoter
name|handleIncompatibleValueType
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|,
name|TypePromoter
name|incomingPromoter
parameter_list|,
name|TypePromoter
name|currentPromoter
parameter_list|)
block|{
return|return
name|TypePromoter
operator|.
name|create
argument_list|(
name|ValueType
operator|.
name|BYTES_VAR_STRAIGHT
argument_list|,
name|TypePromoter
operator|.
name|VAR_TYPE_VALUE_SIZE
argument_list|)
return|;
block|}
block|}
end_class
end_unit
