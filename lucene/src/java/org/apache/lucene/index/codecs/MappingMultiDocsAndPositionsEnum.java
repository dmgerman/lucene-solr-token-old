begin_unit
begin_package
DECL|package|org.apache.lucene.index.codecs
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsAndPositionsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiDocsAndPositionsEnum
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * Exposes flex API, merged from flex API of sub-segments,  * remapping docIDs (this is used for segment merging).  *  * @lucene.experimental  */
end_comment
begin_class
DECL|class|MappingMultiDocsAndPositionsEnum
specifier|public
specifier|final
class|class
name|MappingMultiDocsAndPositionsEnum
extends|extends
name|DocsAndPositionsEnum
block|{
DECL|field|subs
specifier|private
name|MultiDocsAndPositionsEnum
operator|.
name|EnumWithSlice
index|[]
name|subs
decl_stmt|;
DECL|field|numSubs
name|int
name|numSubs
decl_stmt|;
DECL|field|upto
name|int
name|upto
decl_stmt|;
DECL|field|currentMap
name|int
index|[]
name|currentMap
decl_stmt|;
DECL|field|current
name|DocsAndPositionsEnum
name|current
decl_stmt|;
DECL|field|currentBase
name|int
name|currentBase
decl_stmt|;
DECL|field|doc
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|mergeState
specifier|private
name|MergeState
name|mergeState
decl_stmt|;
DECL|method|reset
name|MappingMultiDocsAndPositionsEnum
name|reset
parameter_list|(
name|MultiDocsAndPositionsEnum
name|postingsEnum
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|numSubs
operator|=
name|postingsEnum
operator|.
name|getNumSubs
argument_list|()
expr_stmt|;
name|this
operator|.
name|subs
operator|=
name|postingsEnum
operator|.
name|getSubs
argument_list|()
expr_stmt|;
name|upto
operator|=
operator|-
literal|1
expr_stmt|;
name|current
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setMergeState
specifier|public
name|void
name|setMergeState
parameter_list|(
name|MergeState
name|mergeState
parameter_list|)
block|{
name|this
operator|.
name|mergeState
operator|=
name|mergeState
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
block|{
return|return
name|current
operator|.
name|freq
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|upto
operator|==
name|numSubs
operator|-
literal|1
condition|)
block|{
return|return
name|this
operator|.
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
else|else
block|{
name|upto
operator|++
expr_stmt|;
specifier|final
name|int
name|reader
init|=
name|subs
index|[
name|upto
index|]
operator|.
name|slice
operator|.
name|readerIndex
decl_stmt|;
name|current
operator|=
name|subs
index|[
name|upto
index|]
operator|.
name|docsAndPositionsEnum
expr_stmt|;
name|currentBase
operator|=
name|mergeState
operator|.
name|docBase
index|[
name|reader
index|]
expr_stmt|;
name|currentMap
operator|=
name|mergeState
operator|.
name|docMaps
index|[
name|reader
index|]
expr_stmt|;
block|}
block|}
name|int
name|doc
init|=
name|current
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
name|NO_MORE_DOCS
condition|)
block|{
if|if
condition|(
name|currentMap
operator|!=
literal|null
condition|)
block|{
comment|// compact deletions
name|doc
operator|=
name|currentMap
index|[
name|doc
index|]
expr_stmt|;
if|if
condition|(
name|doc
operator|==
operator|-
literal|1
condition|)
block|{
continue|continue;
block|}
block|}
return|return
name|this
operator|.
name|doc
operator|=
name|currentBase
operator|+
name|doc
return|;
block|}
else|else
block|{
name|current
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|nextPosition
specifier|public
name|int
name|nextPosition
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|current
operator|.
name|nextPosition
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPayload
specifier|public
name|BytesRef
name|getPayload
parameter_list|()
throws|throws
name|IOException
block|{
name|BytesRef
name|payload
init|=
name|current
operator|.
name|getPayload
argument_list|()
decl_stmt|;
if|if
condition|(
name|mergeState
operator|.
name|currentPayloadProcessor
index|[
name|upto
index|]
operator|!=
literal|null
condition|)
block|{
name|mergeState
operator|.
name|currentPayloadProcessor
index|[
name|upto
index|]
operator|.
name|processPayload
argument_list|(
name|payload
argument_list|)
expr_stmt|;
block|}
return|return
name|payload
return|;
block|}
annotation|@
name|Override
DECL|method|hasPayload
specifier|public
name|boolean
name|hasPayload
parameter_list|()
block|{
return|return
name|current
operator|.
name|hasPayload
argument_list|()
return|;
block|}
block|}
end_class
end_unit
