begin_unit
begin_package
DECL|package|org.apache.lucene.index.codecs.simpletext
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|simpletext
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|StoredFieldVisitor
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|StoredFieldsReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|AlreadyClosedException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CharsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|simpletext
operator|.
name|SimpleTextStoredFieldsWriter
operator|.
name|*
import|;
end_import
begin_comment
comment|/**  * reads plaintext stored fields  *<p>  *<b><font color="red">FOR RECREATIONAL USE ONLY</font></B>  * @lucene.experimental  */
end_comment
begin_class
DECL|class|SimpleTextStoredFieldsReader
specifier|public
class|class
name|SimpleTextStoredFieldsReader
extends|extends
name|StoredFieldsReader
block|{
DECL|field|offsets
specifier|private
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|offsets
decl_stmt|;
comment|/* docid -> offset in .fld file */
DECL|field|in
specifier|private
name|IndexInput
name|in
decl_stmt|;
DECL|field|scratch
specifier|private
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|field|scratchUTF16
specifier|private
name|CharsRef
name|scratchUTF16
init|=
operator|new
name|CharsRef
argument_list|()
decl_stmt|;
DECL|field|fieldInfos
specifier|private
specifier|final
name|FieldInfos
name|fieldInfos
decl_stmt|;
DECL|method|SimpleTextStoredFieldsReader
specifier|public
name|SimpleTextStoredFieldsReader
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|SegmentInfo
name|si
parameter_list|,
name|FieldInfos
name|fn
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|fieldInfos
operator|=
name|fn
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|in
operator|=
name|directory
operator|.
name|openInput
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|si
operator|.
name|name
argument_list|,
literal|""
argument_list|,
name|SimpleTextStoredFieldsWriter
operator|.
name|FIELDS_EXTENSION
argument_list|)
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|readIndex
argument_list|()
expr_stmt|;
block|}
comment|// used by clone
DECL|method|SimpleTextStoredFieldsReader
name|SimpleTextStoredFieldsReader
parameter_list|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|offsets
parameter_list|,
name|IndexInput
name|in
parameter_list|,
name|FieldInfos
name|fieldInfos
parameter_list|)
block|{
name|this
operator|.
name|offsets
operator|=
name|offsets
expr_stmt|;
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|fieldInfos
operator|=
name|fieldInfos
expr_stmt|;
block|}
comment|// we don't actually write a .fdx-like index, instead we read the
comment|// stored fields file in entirety up-front and save the offsets
comment|// so we can seek to the documents later.
DECL|method|readIndex
specifier|private
name|void
name|readIndex
parameter_list|()
throws|throws
name|IOException
block|{
name|offsets
operator|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|scratch
operator|.
name|equals
argument_list|(
name|END
argument_list|)
condition|)
block|{
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|scratch
operator|.
name|startsWith
argument_list|(
name|DOC
argument_list|)
condition|)
block|{
name|offsets
operator|.
name|add
argument_list|(
name|in
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|visitDocument
specifier|public
name|void
name|visitDocument
parameter_list|(
name|int
name|n
parameter_list|,
name|StoredFieldVisitor
name|visitor
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
name|in
operator|.
name|seek
argument_list|(
name|offsets
operator|.
name|get
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
name|readLine
argument_list|()
expr_stmt|;
assert|assert
name|scratch
operator|.
name|startsWith
argument_list|(
name|NUM
argument_list|)
assert|;
name|int
name|numFields
init|=
name|parseIntAt
argument_list|(
name|NUM
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFields
condition|;
name|i
operator|++
control|)
block|{
name|readLine
argument_list|()
expr_stmt|;
assert|assert
name|scratch
operator|.
name|startsWith
argument_list|(
name|FIELD
argument_list|)
assert|;
name|int
name|fieldNumber
init|=
name|parseIntAt
argument_list|(
name|FIELD
operator|.
name|length
argument_list|)
decl_stmt|;
name|FieldInfo
name|fieldInfo
init|=
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|fieldNumber
argument_list|)
decl_stmt|;
name|readLine
argument_list|()
expr_stmt|;
assert|assert
name|scratch
operator|.
name|startsWith
argument_list|(
name|NAME
argument_list|)
assert|;
name|readLine
argument_list|()
expr_stmt|;
assert|assert
name|scratch
operator|.
name|startsWith
argument_list|(
name|TYPE
argument_list|)
assert|;
specifier|final
name|BytesRef
name|type
decl_stmt|;
if|if
condition|(
name|equalsAt
argument_list|(
name|TYPE_STRING
argument_list|,
name|scratch
argument_list|,
name|TYPE
operator|.
name|length
argument_list|)
condition|)
block|{
name|type
operator|=
name|TYPE_STRING
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|equalsAt
argument_list|(
name|TYPE_BINARY
argument_list|,
name|scratch
argument_list|,
name|TYPE
operator|.
name|length
argument_list|)
condition|)
block|{
name|type
operator|=
name|TYPE_BINARY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|equalsAt
argument_list|(
name|TYPE_INT
argument_list|,
name|scratch
argument_list|,
name|TYPE
operator|.
name|length
argument_list|)
condition|)
block|{
name|type
operator|=
name|TYPE_INT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|equalsAt
argument_list|(
name|TYPE_LONG
argument_list|,
name|scratch
argument_list|,
name|TYPE
operator|.
name|length
argument_list|)
condition|)
block|{
name|type
operator|=
name|TYPE_LONG
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|equalsAt
argument_list|(
name|TYPE_FLOAT
argument_list|,
name|scratch
argument_list|,
name|TYPE
operator|.
name|length
argument_list|)
condition|)
block|{
name|type
operator|=
name|TYPE_FLOAT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|equalsAt
argument_list|(
name|TYPE_DOUBLE
argument_list|,
name|scratch
argument_list|,
name|TYPE
operator|.
name|length
argument_list|)
condition|)
block|{
name|type
operator|=
name|TYPE_DOUBLE
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unknown field type"
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|visitor
operator|.
name|needsField
argument_list|(
name|fieldInfo
argument_list|)
condition|)
block|{
case|case
name|YES
case|:
name|readField
argument_list|(
name|type
argument_list|,
name|fieldInfo
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
break|break;
case|case
name|NO
case|:
name|readLine
argument_list|()
expr_stmt|;
assert|assert
name|scratch
operator|.
name|startsWith
argument_list|(
name|VALUE
argument_list|)
assert|;
break|break;
case|case
name|STOP
case|:
return|return;
block|}
block|}
block|}
DECL|method|readField
specifier|private
name|void
name|readField
parameter_list|(
name|BytesRef
name|type
parameter_list|,
name|FieldInfo
name|fieldInfo
parameter_list|,
name|StoredFieldVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|readLine
argument_list|()
expr_stmt|;
assert|assert
name|scratch
operator|.
name|startsWith
argument_list|(
name|VALUE
argument_list|)
assert|;
if|if
condition|(
name|type
operator|==
name|TYPE_STRING
condition|)
block|{
name|visitor
operator|.
name|stringField
argument_list|(
name|fieldInfo
argument_list|,
operator|new
name|String
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|,
name|scratch
operator|.
name|offset
operator|+
name|VALUE
operator|.
name|length
argument_list|,
name|scratch
operator|.
name|length
operator|-
name|VALUE
operator|.
name|length
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|TYPE_BINARY
condition|)
block|{
comment|// TODO: who owns the bytes?
name|byte
index|[]
name|copy
init|=
operator|new
name|byte
index|[
name|scratch
operator|.
name|length
operator|-
name|VALUE
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|,
name|scratch
operator|.
name|offset
operator|+
name|VALUE
operator|.
name|length
argument_list|,
name|copy
argument_list|,
literal|0
argument_list|,
name|copy
operator|.
name|length
argument_list|)
expr_stmt|;
name|visitor
operator|.
name|binaryField
argument_list|(
name|fieldInfo
argument_list|,
name|copy
argument_list|,
literal|0
argument_list|,
name|copy
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|TYPE_INT
condition|)
block|{
name|UnicodeUtil
operator|.
name|UTF8toUTF16
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|,
name|scratch
operator|.
name|offset
operator|+
name|VALUE
operator|.
name|length
argument_list|,
name|scratch
operator|.
name|length
operator|-
name|VALUE
operator|.
name|length
argument_list|,
name|scratchUTF16
argument_list|)
expr_stmt|;
name|visitor
operator|.
name|intField
argument_list|(
name|fieldInfo
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|scratchUTF16
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|TYPE_LONG
condition|)
block|{
name|UnicodeUtil
operator|.
name|UTF8toUTF16
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|,
name|scratch
operator|.
name|offset
operator|+
name|VALUE
operator|.
name|length
argument_list|,
name|scratch
operator|.
name|length
operator|-
name|VALUE
operator|.
name|length
argument_list|,
name|scratchUTF16
argument_list|)
expr_stmt|;
name|visitor
operator|.
name|longField
argument_list|(
name|fieldInfo
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|scratchUTF16
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|TYPE_FLOAT
condition|)
block|{
name|UnicodeUtil
operator|.
name|UTF8toUTF16
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|,
name|scratch
operator|.
name|offset
operator|+
name|VALUE
operator|.
name|length
argument_list|,
name|scratch
operator|.
name|length
operator|-
name|VALUE
operator|.
name|length
argument_list|,
name|scratchUTF16
argument_list|)
expr_stmt|;
name|visitor
operator|.
name|floatField
argument_list|(
name|fieldInfo
argument_list|,
name|Float
operator|.
name|parseFloat
argument_list|(
name|scratchUTF16
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|TYPE_DOUBLE
condition|)
block|{
name|UnicodeUtil
operator|.
name|UTF8toUTF16
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|,
name|scratch
operator|.
name|offset
operator|+
name|VALUE
operator|.
name|length
argument_list|,
name|scratch
operator|.
name|length
operator|-
name|VALUE
operator|.
name|length
argument_list|,
name|scratchUTF16
argument_list|)
expr_stmt|;
name|visitor
operator|.
name|doubleField
argument_list|(
name|fieldInfo
argument_list|,
name|Double
operator|.
name|parseDouble
argument_list|(
name|scratchUTF16
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
name|StoredFieldsReader
name|clone
parameter_list|()
block|{
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AlreadyClosedException
argument_list|(
literal|"this FieldsReader is closed"
argument_list|)
throw|;
block|}
return|return
operator|new
name|SimpleTextStoredFieldsReader
argument_list|(
name|offsets
argument_list|,
operator|(
name|IndexInput
operator|)
name|in
operator|.
name|clone
argument_list|()
argument_list|,
name|fieldInfos
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|=
literal|null
expr_stmt|;
name|offsets
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|files
specifier|public
specifier|static
name|void
name|files
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|SegmentInfo
name|info
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|files
parameter_list|)
throws|throws
name|IOException
block|{
name|files
operator|.
name|add
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|info
operator|.
name|name
argument_list|,
literal|""
argument_list|,
name|SimpleTextStoredFieldsWriter
operator|.
name|FIELDS_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|readLine
specifier|private
name|void
name|readLine
parameter_list|()
throws|throws
name|IOException
block|{
name|SimpleTextUtil
operator|.
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
block|}
DECL|method|parseIntAt
specifier|private
name|int
name|parseIntAt
parameter_list|(
name|int
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
name|UnicodeUtil
operator|.
name|UTF8toUTF16
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|,
name|scratch
operator|.
name|offset
operator|+
name|offset
argument_list|,
name|scratch
operator|.
name|length
operator|-
name|offset
argument_list|,
name|scratchUTF16
argument_list|)
expr_stmt|;
return|return
name|ArrayUtil
operator|.
name|parseInt
argument_list|(
name|scratchUTF16
operator|.
name|chars
argument_list|,
literal|0
argument_list|,
name|scratchUTF16
operator|.
name|length
argument_list|)
return|;
block|}
DECL|method|equalsAt
specifier|private
name|boolean
name|equalsAt
parameter_list|(
name|BytesRef
name|a
parameter_list|,
name|BytesRef
name|b
parameter_list|,
name|int
name|bOffset
parameter_list|)
block|{
return|return
name|a
operator|.
name|length
operator|==
name|b
operator|.
name|length
operator|-
name|bOffset
operator|&&
name|ArrayUtil
operator|.
name|equals
argument_list|(
name|a
operator|.
name|bytes
argument_list|,
name|a
operator|.
name|offset
argument_list|,
name|b
operator|.
name|bytes
argument_list|,
name|b
operator|.
name|offset
operator|+
name|bOffset
argument_list|,
name|b
operator|.
name|length
operator|-
name|bOffset
argument_list|)
return|;
block|}
block|}
end_class
end_unit
