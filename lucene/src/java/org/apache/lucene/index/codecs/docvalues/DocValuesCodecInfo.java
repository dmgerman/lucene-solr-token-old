begin_unit
begin_package
DECL|package|org.apache.lucene.index.codecs.docvalues
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|docvalues
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentWriteState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
operator|.
name|Writer
import|;
end_import
begin_comment
comment|/**  * @lucene.internal  */
end_comment
begin_class
DECL|class|DocValuesCodecInfo
class|class
name|DocValuesCodecInfo
block|{
DECL|field|FORMAT_CURRENT
specifier|public
specifier|static
specifier|final
name|int
name|FORMAT_CURRENT
init|=
literal|0
decl_stmt|;
DECL|field|INFO_FILE_EXT
specifier|static
specifier|final
name|String
name|INFO_FILE_EXT
init|=
literal|"inf"
decl_stmt|;
DECL|field|docValuesFields
specifier|private
name|int
index|[]
name|docValuesFields
init|=
operator|new
name|int
index|[
literal|1
index|]
decl_stmt|;
DECL|field|max
specifier|private
name|int
name|max
decl_stmt|;
DECL|field|pos
specifier|private
name|int
name|pos
decl_stmt|;
DECL|method|DocValuesCodecInfo
specifier|public
name|DocValuesCodecInfo
parameter_list|()
block|{   }
DECL|method|add
name|void
name|add
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
if|if
condition|(
name|pos
operator|>=
name|docValuesFields
operator|.
name|length
condition|)
block|{
name|docValuesFields
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|docValuesFields
argument_list|,
name|pos
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|docValuesFields
index|[
name|pos
operator|++
index|]
operator|=
name|fieldId
expr_stmt|;
if|if
condition|(
name|fieldId
operator|>
name|max
condition|)
block|{
name|max
operator|=
name|fieldId
expr_stmt|;
block|}
block|}
DECL|method|docValuesId
name|String
name|docValuesId
parameter_list|(
name|String
name|segmentsName
parameter_list|,
name|String
name|codecID
parameter_list|,
name|String
name|fieldId
parameter_list|)
block|{
return|return
name|segmentsName
operator|+
literal|"_"
operator|+
name|codecID
operator|+
literal|"-"
operator|+
name|fieldId
return|;
block|}
DECL|method|files
name|void
name|files
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|SegmentInfo
name|segmentInfo
parameter_list|,
name|String
name|codecId
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|files
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|file
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segmentInfo
operator|.
name|name
argument_list|,
name|codecId
argument_list|,
name|INFO_FILE_EXT
argument_list|)
decl_stmt|;
name|files
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pos
condition|;
name|i
operator|++
control|)
block|{
name|int
name|field
init|=
name|docValuesFields
index|[
name|i
index|]
decl_stmt|;
name|String
name|docValuesID
init|=
name|docValuesId
argument_list|(
name|segmentInfo
operator|.
name|name
argument_list|,
name|codecId
argument_list|,
literal|""
operator|+
name|field
argument_list|)
decl_stmt|;
name|files
operator|.
name|add
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|docValuesID
argument_list|,
literal|""
argument_list|,
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|Writer
operator|.
name|DATA_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|idxFile
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|docValuesID
argument_list|,
literal|""
argument_list|,
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|Writer
operator|.
name|INDEX_EXTENSION
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|fileExists
argument_list|(
name|idxFile
argument_list|)
condition|)
block|{
name|files
operator|.
name|add
argument_list|(
name|idxFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|write
name|void
name|write
parameter_list|(
name|SegmentWriteState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|fileName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentName
argument_list|,
name|state
operator|.
name|codecId
argument_list|,
name|INFO_FILE_EXT
argument_list|)
decl_stmt|;
specifier|final
name|IndexOutput
name|out
init|=
name|state
operator|.
name|directory
operator|.
name|createOutput
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|state
operator|.
name|flushedFiles
operator|.
name|add
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
try|try
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|FORMAT_CURRENT
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
name|PackedInts
operator|.
name|getWriter
argument_list|(
name|out
argument_list|,
name|pos
argument_list|,
name|PackedInts
operator|.
name|bitsRequired
argument_list|(
name|max
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pos
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|add
argument_list|(
name|docValuesFields
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|read
name|void
name|read
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|SegmentInfo
name|info
parameter_list|,
name|String
name|codecId
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|fileName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|info
operator|.
name|name
argument_list|,
name|codecId
argument_list|,
name|INFO_FILE_EXT
argument_list|)
decl_stmt|;
specifier|final
name|IndexInput
name|in
init|=
name|directory
operator|.
name|openInput
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
try|try
block|{
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
specifier|final
name|Reader
name|reader
init|=
name|PackedInts
operator|.
name|getReader
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|docValuesFields
operator|=
operator|new
name|int
index|[
name|reader
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docValuesFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|docValuesFields
index|[
name|i
index|]
operator|=
operator|(
name|int
operator|)
name|reader
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|pos
operator|=
name|docValuesFields
operator|.
name|length
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|fieldIDs
name|IntsRef
name|fieldIDs
parameter_list|()
block|{
return|return
operator|new
name|IntsRef
argument_list|(
name|docValuesFields
argument_list|,
literal|0
argument_list|,
name|pos
argument_list|)
return|;
block|}
block|}
end_class
end_unit
