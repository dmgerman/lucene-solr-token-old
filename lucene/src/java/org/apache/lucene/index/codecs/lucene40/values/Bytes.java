begin_unit
begin_package
DECL|package|org.apache.lucene.index.codecs.lucene40.values
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|lucene40
operator|.
name|values
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/** Base class for specific Bytes Reader/Writer implementations */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PerDocFieldValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
operator|.
name|SortedSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
operator|.
name|Source
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
operator|.
name|Type
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ByteBlockPool
operator|.
name|Allocator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ByteBlockPool
operator|.
name|DirectTrackingAllocator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ByteBlockPool
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefHash
operator|.
name|TrackingDirectBytesStartArray
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefHash
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CodecUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Counter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PagedBytes
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import
begin_comment
comment|/**  * Provides concrete Writer/Reader implementations for<tt>byte[]</tt> value per  * document. There are 6 package-private default implementations of this, for  * all combinations of {@link Mode#DEREF}/{@link Mode#STRAIGHT} x fixed-length/variable-length.  *   *<p>  * NOTE: Currently the total amount of byte[] data stored (across a single  * segment) cannot exceed 2GB.  *</p>  *<p>  * NOTE: Each byte[] must be<= 32768 bytes in length  *</p>  *   * @lucene.experimental  */
end_comment
begin_class
DECL|class|Bytes
specifier|public
specifier|final
class|class
name|Bytes
block|{
DECL|field|DV_SEGMENT_SUFFIX
specifier|static
specifier|final
name|String
name|DV_SEGMENT_SUFFIX
init|=
literal|"dv"
decl_stmt|;
comment|// TODO - add bulk copy where possible
DECL|method|Bytes
specifier|private
name|Bytes
parameter_list|()
block|{
comment|/* don't instantiate! */
block|}
comment|/**    * Defines the {@link Writer}s store mode. The writer will either store the    * bytes sequentially ({@link #STRAIGHT}, dereferenced ({@link #DEREF}) or    * sorted ({@link #SORTED})    *     * @lucene.experimental    */
DECL|enum|Mode
specifier|public
specifier|static
enum|enum
name|Mode
block|{
comment|/**      * Mode for sequentially stored bytes      */
DECL|enum constant|STRAIGHT
name|STRAIGHT
block|,
comment|/**      * Mode for dereferenced stored bytes      */
DECL|enum constant|DEREF
name|DEREF
block|,
comment|/**      * Mode for sorted stored bytes      */
DECL|enum constant|SORTED
name|SORTED
block|}
empty_stmt|;
comment|/**    * Creates a new<tt>byte[]</tt> {@link Writer} instances for the given    * directory.    *     * @param dir    *          the directory to write the values to    * @param id    *          the id used to create a unique file name. Usually composed out of    *          the segment name and a unique id per segment.    * @param mode    *          the writers store mode    * @param fixedSize    *<code>true</code> if all bytes subsequently passed to the    *          {@link Writer} will have the same length    * @param sortComparator {@link BytesRef} comparator used by sorted variants.     *        If<code>null</code> {@link BytesRef#getUTF8SortedAsUnicodeComparator()}    *        is used instead    * @param bytesUsed    *          an {@link AtomicLong} instance to track the used bytes within the    *          {@link Writer}. A call to {@link Writer#finish(int)} will release    *          all internally used resources and frees the memory tracking    *          reference.    * @param context     * @return a new {@link Writer} instance    * @throws IOException    *           if the files for the writer can not be created.    */
DECL|method|getWriter
specifier|public
specifier|static
name|Writer
name|getWriter
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|id
parameter_list|,
name|Mode
name|mode
parameter_list|,
name|boolean
name|fixedSize
parameter_list|,
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|sortComparator
parameter_list|,
name|Counter
name|bytesUsed
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO -- i shouldn't have to specify fixed? can
comment|// track itself& do the write thing at write time?
if|if
condition|(
name|sortComparator
operator|==
literal|null
condition|)
block|{
name|sortComparator
operator|=
name|BytesRef
operator|.
name|getUTF8SortedAsUnicodeComparator
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fixedSize
condition|)
block|{
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|STRAIGHT
condition|)
block|{
return|return
operator|new
name|FixedStraightBytesImpl
operator|.
name|Writer
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|bytesUsed
argument_list|,
name|context
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|DEREF
condition|)
block|{
return|return
operator|new
name|FixedDerefBytesImpl
operator|.
name|Writer
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|bytesUsed
argument_list|,
name|context
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|SORTED
condition|)
block|{
return|return
operator|new
name|FixedSortedBytesImpl
operator|.
name|Writer
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|sortComparator
argument_list|,
name|bytesUsed
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|STRAIGHT
condition|)
block|{
return|return
operator|new
name|VarStraightBytesImpl
operator|.
name|Writer
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|bytesUsed
argument_list|,
name|context
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|DEREF
condition|)
block|{
return|return
operator|new
name|VarDerefBytesImpl
operator|.
name|Writer
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|bytesUsed
argument_list|,
name|context
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|SORTED
condition|)
block|{
return|return
operator|new
name|VarSortedBytesImpl
operator|.
name|Writer
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|sortComparator
argument_list|,
name|bytesUsed
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|""
argument_list|)
throw|;
block|}
comment|/**    * Creates a new {@link DocValues} instance that provides either memory    * resident or iterative access to a per-document stored<tt>byte[]</tt>    * value. The returned {@link DocValues} instance will be initialized without    * consuming a significant amount of memory.    *     * @param dir    *          the directory to load the {@link DocValues} from.    * @param id    *          the file ID in the {@link Directory} to load the values from.    * @param mode    *          the mode used to store the values    * @param fixedSize    *<code>true</code> iff the values are stored with fixed-size,    *          otherwise<code>false</code>    * @param maxDoc    *          the number of document values stored for the given ID    * @param sortComparator {@link BytesRef} comparator used by sorted variants.     *        If<code>null</code> {@link BytesRef#getUTF8SortedAsUnicodeComparator()}    *        is used instead    * @return an initialized {@link DocValues} instance.    * @throws IOException    *           if an {@link IOException} occurs    */
DECL|method|getValues
specifier|public
specifier|static
name|DocValues
name|getValues
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|id
parameter_list|,
name|Mode
name|mode
parameter_list|,
name|boolean
name|fixedSize
parameter_list|,
name|int
name|maxDoc
parameter_list|,
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|sortComparator
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sortComparator
operator|==
literal|null
condition|)
block|{
name|sortComparator
operator|=
name|BytesRef
operator|.
name|getUTF8SortedAsUnicodeComparator
argument_list|()
expr_stmt|;
block|}
comment|// TODO -- I can peek @ header to determing fixed/mode?
if|if
condition|(
name|fixedSize
condition|)
block|{
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|STRAIGHT
condition|)
block|{
return|return
operator|new
name|FixedStraightBytesImpl
operator|.
name|FixedStraightReader
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|maxDoc
argument_list|,
name|context
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|DEREF
condition|)
block|{
return|return
operator|new
name|FixedDerefBytesImpl
operator|.
name|FixedDerefReader
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|maxDoc
argument_list|,
name|context
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|SORTED
condition|)
block|{
return|return
operator|new
name|FixedSortedBytesImpl
operator|.
name|Reader
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|maxDoc
argument_list|,
name|context
argument_list|,
name|Type
operator|.
name|BYTES_FIXED_SORTED
argument_list|,
name|sortComparator
argument_list|)
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|STRAIGHT
condition|)
block|{
return|return
operator|new
name|VarStraightBytesImpl
operator|.
name|VarStraightReader
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|maxDoc
argument_list|,
name|context
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|DEREF
condition|)
block|{
return|return
operator|new
name|VarDerefBytesImpl
operator|.
name|VarDerefReader
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|maxDoc
argument_list|,
name|context
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|SORTED
condition|)
block|{
return|return
operator|new
name|VarSortedBytesImpl
operator|.
name|Reader
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|maxDoc
argument_list|,
name|context
argument_list|,
name|Type
operator|.
name|BYTES_VAR_SORTED
argument_list|,
name|sortComparator
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal Mode: "
operator|+
name|mode
argument_list|)
throw|;
block|}
comment|// TODO open up this API?
DECL|class|BytesSourceBase
specifier|static
specifier|abstract
class|class
name|BytesSourceBase
extends|extends
name|Source
block|{
DECL|field|pagedBytes
specifier|private
specifier|final
name|PagedBytes
name|pagedBytes
decl_stmt|;
DECL|field|datIn
specifier|protected
specifier|final
name|IndexInput
name|datIn
decl_stmt|;
DECL|field|idxIn
specifier|protected
specifier|final
name|IndexInput
name|idxIn
decl_stmt|;
DECL|field|PAGED_BYTES_BITS
specifier|protected
specifier|final
specifier|static
name|int
name|PAGED_BYTES_BITS
init|=
literal|15
decl_stmt|;
DECL|field|data
specifier|protected
specifier|final
name|PagedBytes
operator|.
name|Reader
name|data
decl_stmt|;
DECL|field|totalLengthInBytes
specifier|protected
specifier|final
name|long
name|totalLengthInBytes
decl_stmt|;
DECL|method|BytesSourceBase
specifier|protected
name|BytesSourceBase
parameter_list|(
name|IndexInput
name|datIn
parameter_list|,
name|IndexInput
name|idxIn
parameter_list|,
name|PagedBytes
name|pagedBytes
parameter_list|,
name|long
name|bytesToRead
parameter_list|,
name|Type
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
assert|assert
name|bytesToRead
operator|<=
name|datIn
operator|.
name|length
argument_list|()
operator|:
literal|" file size is less than the expected size diff: "
operator|+
operator|(
name|bytesToRead
operator|-
name|datIn
operator|.
name|length
argument_list|()
operator|)
operator|+
literal|" pos: "
operator|+
name|datIn
operator|.
name|getFilePointer
argument_list|()
assert|;
name|this
operator|.
name|datIn
operator|=
name|datIn
expr_stmt|;
name|this
operator|.
name|totalLengthInBytes
operator|=
name|bytesToRead
expr_stmt|;
name|this
operator|.
name|pagedBytes
operator|=
name|pagedBytes
expr_stmt|;
name|this
operator|.
name|pagedBytes
operator|.
name|copy
argument_list|(
name|datIn
argument_list|,
name|bytesToRead
argument_list|)
expr_stmt|;
name|data
operator|=
name|pagedBytes
operator|.
name|freeze
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|idxIn
operator|=
name|idxIn
expr_stmt|;
block|}
block|}
comment|// TODO: open up this API?!
DECL|class|BytesWriterBase
specifier|static
specifier|abstract
class|class
name|BytesWriterBase
extends|extends
name|Writer
block|{
DECL|field|id
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
DECL|field|idxOut
specifier|private
name|IndexOutput
name|idxOut
decl_stmt|;
DECL|field|datOut
specifier|private
name|IndexOutput
name|datOut
decl_stmt|;
DECL|field|bytesRef
specifier|protected
name|BytesRef
name|bytesRef
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|field|dir
specifier|private
specifier|final
name|Directory
name|dir
decl_stmt|;
DECL|field|codecName
specifier|private
specifier|final
name|String
name|codecName
decl_stmt|;
DECL|field|version
specifier|private
specifier|final
name|int
name|version
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|IOContext
name|context
decl_stmt|;
DECL|method|BytesWriterBase
specifier|protected
name|BytesWriterBase
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|codecName
parameter_list|,
name|int
name|version
parameter_list|,
name|Counter
name|bytesUsed
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|bytesUsed
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|this
operator|.
name|codecName
operator|=
name|codecName
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
DECL|method|getOrCreateDataOut
specifier|protected
name|IndexOutput
name|getOrCreateDataOut
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|datOut
operator|==
literal|null
condition|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|datOut
operator|=
name|dir
operator|.
name|createOutput
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|id
argument_list|,
name|DV_SEGMENT_SUFFIX
argument_list|,
name|DATA_EXTENSION
argument_list|)
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|writeHeader
argument_list|(
name|datOut
argument_list|,
name|codecName
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|datOut
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|datOut
return|;
block|}
DECL|method|getIndexOut
specifier|protected
name|IndexOutput
name|getIndexOut
parameter_list|()
block|{
return|return
name|idxOut
return|;
block|}
DECL|method|getDataOut
specifier|protected
name|IndexOutput
name|getDataOut
parameter_list|()
block|{
return|return
name|datOut
return|;
block|}
DECL|method|getOrCreateIndexOut
specifier|protected
name|IndexOutput
name|getOrCreateIndexOut
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|idxOut
operator|==
literal|null
condition|)
block|{
name|idxOut
operator|=
name|dir
operator|.
name|createOutput
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|id
argument_list|,
name|DV_SEGMENT_SUFFIX
argument_list|,
name|INDEX_EXTENSION
argument_list|)
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|writeHeader
argument_list|(
name|idxOut
argument_list|,
name|codecName
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|idxOut
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|idxOut
return|;
block|}
comment|/**      * Must be called only with increasing docIDs. It's OK for some docIDs to be      * skipped; they will be filled with 0 bytes.      */
annotation|@
name|Override
DECL|method|add
specifier|public
specifier|abstract
name|void
name|add
parameter_list|(
name|int
name|docID
parameter_list|,
name|BytesRef
name|bytes
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|finish
specifier|public
specifier|abstract
name|void
name|finish
parameter_list|(
name|int
name|docCount
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|mergeDoc
specifier|protected
name|void
name|mergeDoc
parameter_list|(
name|int
name|docID
parameter_list|,
name|int
name|sourceDoc
parameter_list|)
throws|throws
name|IOException
block|{
name|add
argument_list|(
name|docID
argument_list|,
name|currentMergeSource
operator|.
name|getBytes
argument_list|(
name|sourceDoc
argument_list|,
name|bytesRef
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|int
name|docID
parameter_list|,
name|PerDocFieldValues
name|docValues
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BytesRef
name|ref
decl_stmt|;
if|if
condition|(
operator|(
name|ref
operator|=
name|docValues
operator|.
name|getBytes
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|add
argument_list|(
name|docID
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Opens all necessary files, but does not read any data in until you call    * {@link #load}.    */
DECL|class|BytesReaderBase
specifier|static
specifier|abstract
class|class
name|BytesReaderBase
extends|extends
name|DocValues
block|{
DECL|field|idxIn
specifier|protected
specifier|final
name|IndexInput
name|idxIn
decl_stmt|;
DECL|field|datIn
specifier|protected
specifier|final
name|IndexInput
name|datIn
decl_stmt|;
DECL|field|version
specifier|protected
specifier|final
name|int
name|version
decl_stmt|;
DECL|field|id
specifier|protected
specifier|final
name|String
name|id
decl_stmt|;
DECL|field|type
specifier|protected
specifier|final
name|Type
name|type
decl_stmt|;
DECL|method|BytesReaderBase
specifier|protected
name|BytesReaderBase
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|codecName
parameter_list|,
name|int
name|maxVersion
parameter_list|,
name|boolean
name|doIndex
parameter_list|,
name|IOContext
name|context
parameter_list|,
name|Type
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexInput
name|dataIn
init|=
literal|null
decl_stmt|;
name|IndexInput
name|indexIn
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|dataIn
operator|=
name|dir
operator|.
name|openInput
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|id
argument_list|,
name|DV_SEGMENT_SUFFIX
argument_list|,
name|Writer
operator|.
name|DATA_EXTENSION
argument_list|)
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|version
operator|=
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|dataIn
argument_list|,
name|codecName
argument_list|,
name|maxVersion
argument_list|,
name|maxVersion
argument_list|)
expr_stmt|;
if|if
condition|(
name|doIndex
condition|)
block|{
name|indexIn
operator|=
name|dir
operator|.
name|openInput
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|id
argument_list|,
name|DV_SEGMENT_SUFFIX
argument_list|,
name|Writer
operator|.
name|INDEX_EXTENSION
argument_list|)
argument_list|,
name|context
argument_list|)
expr_stmt|;
specifier|final
name|int
name|version2
init|=
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|indexIn
argument_list|,
name|codecName
argument_list|,
name|maxVersion
argument_list|,
name|maxVersion
argument_list|)
decl_stmt|;
assert|assert
name|version
operator|==
name|version2
assert|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|dataIn
argument_list|,
name|indexIn
argument_list|)
expr_stmt|;
block|}
block|}
name|datIn
operator|=
name|dataIn
expr_stmt|;
name|idxIn
operator|=
name|indexIn
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
comment|/**      * clones and returns the data {@link IndexInput}      */
DECL|method|cloneData
specifier|protected
specifier|final
name|IndexInput
name|cloneData
parameter_list|()
block|{
assert|assert
name|datIn
operator|!=
literal|null
assert|;
return|return
operator|(
name|IndexInput
operator|)
name|datIn
operator|.
name|clone
argument_list|()
return|;
block|}
comment|/**      * clones and returns the indexing {@link IndexInput}      */
DECL|method|cloneIndex
specifier|protected
specifier|final
name|IndexInput
name|cloneIndex
parameter_list|()
block|{
assert|assert
name|idxIn
operator|!=
literal|null
assert|;
return|return
operator|(
name|IndexInput
operator|)
name|idxIn
operator|.
name|clone
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|datIn
argument_list|,
name|idxIn
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|type
specifier|public
name|Type
name|type
parameter_list|()
block|{
return|return
name|type
return|;
block|}
block|}
DECL|class|DerefBytesWriterBase
specifier|static
specifier|abstract
class|class
name|DerefBytesWriterBase
extends|extends
name|BytesWriterBase
block|{
DECL|field|size
specifier|protected
name|int
name|size
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|lastDocId
specifier|protected
name|int
name|lastDocId
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|docToEntry
specifier|protected
name|int
index|[]
name|docToEntry
decl_stmt|;
DECL|field|hash
specifier|protected
specifier|final
name|BytesRefHash
name|hash
decl_stmt|;
DECL|field|maxBytes
specifier|protected
name|long
name|maxBytes
init|=
literal|0
decl_stmt|;
DECL|method|DerefBytesWriterBase
specifier|protected
name|DerefBytesWriterBase
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|codecName
parameter_list|,
name|int
name|codecVersion
parameter_list|,
name|Counter
name|bytesUsed
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|codecName
argument_list|,
name|codecVersion
argument_list|,
operator|new
name|DirectTrackingAllocator
argument_list|(
name|ByteBlockPool
operator|.
name|BYTE_BLOCK_SIZE
argument_list|,
name|bytesUsed
argument_list|)
argument_list|,
name|bytesUsed
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|DerefBytesWriterBase
specifier|protected
name|DerefBytesWriterBase
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|codecName
parameter_list|,
name|int
name|codecVersion
parameter_list|,
name|Allocator
name|allocator
parameter_list|,
name|Counter
name|bytesUsed
parameter_list|,
name|IOContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|dir
argument_list|,
name|id
argument_list|,
name|codecName
argument_list|,
name|codecVersion
argument_list|,
name|bytesUsed
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|hash
operator|=
operator|new
name|BytesRefHash
argument_list|(
operator|new
name|ByteBlockPool
argument_list|(
name|allocator
argument_list|)
argument_list|,
name|BytesRefHash
operator|.
name|DEFAULT_CAPACITY
argument_list|,
operator|new
name|TrackingDirectBytesStartArray
argument_list|(
name|BytesRefHash
operator|.
name|DEFAULT_CAPACITY
argument_list|,
name|bytesUsed
argument_list|)
argument_list|)
expr_stmt|;
name|docToEntry
operator|=
operator|new
name|int
index|[
literal|1
index|]
expr_stmt|;
name|bytesUsed
operator|.
name|addAndGet
argument_list|(
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
argument_list|)
expr_stmt|;
block|}
DECL|method|writePrefixLength
specifier|protected
specifier|static
name|int
name|writePrefixLength
parameter_list|(
name|DataOutput
name|datOut
parameter_list|,
name|BytesRef
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bytes
operator|.
name|length
operator|<
literal|128
condition|)
block|{
name|datOut
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
else|else
block|{
name|datOut
operator|.
name|writeByte
argument_list|(
call|(
name|byte
call|)
argument_list|(
literal|0x80
operator||
operator|(
name|bytes
operator|.
name|length
operator|>>
literal|8
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|datOut
operator|.
name|writeByte
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|bytes
operator|.
name|length
operator|&
literal|0xff
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|2
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|int
name|docID
parameter_list|,
name|BytesRef
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bytes
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// default value - skip it
return|return;
block|}
name|checkSize
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|fillDefault
argument_list|(
name|docID
argument_list|)
expr_stmt|;
name|int
name|ord
init|=
name|hash
operator|.
name|add
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|<
literal|0
condition|)
block|{
name|ord
operator|=
operator|(
operator|-
name|ord
operator|)
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|maxBytes
operator|+=
name|bytes
operator|.
name|length
expr_stmt|;
block|}
name|docToEntry
index|[
name|docID
index|]
operator|=
name|ord
expr_stmt|;
name|lastDocId
operator|=
name|docID
expr_stmt|;
block|}
DECL|method|fillDefault
specifier|protected
name|void
name|fillDefault
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
if|if
condition|(
name|docID
operator|>=
name|docToEntry
operator|.
name|length
condition|)
block|{
specifier|final
name|int
name|size
init|=
name|docToEntry
operator|.
name|length
decl_stmt|;
name|docToEntry
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|docToEntry
argument_list|,
literal|1
operator|+
name|docID
argument_list|)
expr_stmt|;
name|bytesUsed
operator|.
name|addAndGet
argument_list|(
operator|(
name|docToEntry
operator|.
name|length
operator|-
name|size
operator|)
operator|*
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
argument_list|)
expr_stmt|;
block|}
assert|assert
name|size
operator|>=
literal|0
assert|;
name|BytesRef
name|ref
init|=
operator|new
name|BytesRef
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|ref
operator|.
name|length
operator|=
name|size
expr_stmt|;
name|int
name|ord
init|=
name|hash
operator|.
name|add
argument_list|(
name|ref
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|<
literal|0
condition|)
block|{
name|ord
operator|=
operator|(
operator|-
name|ord
operator|)
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|lastDocId
operator|+
literal|1
init|;
name|i
operator|<
name|docID
condition|;
name|i
operator|++
control|)
block|{
name|docToEntry
index|[
name|i
index|]
operator|=
name|ord
expr_stmt|;
block|}
block|}
DECL|method|checkSize
specifier|protected
name|void
name|checkSize
parameter_list|(
name|BytesRef
name|bytes
parameter_list|)
block|{
if|if
condition|(
name|size
operator|==
operator|-
literal|1
condition|)
block|{
name|size
operator|=
name|bytes
operator|.
name|length
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bytes
operator|.
name|length
operator|!=
name|size
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"expected bytes size="
operator|+
name|size
operator|+
literal|" but got "
operator|+
name|bytes
operator|.
name|length
argument_list|)
throw|;
block|}
block|}
comment|// Important that we get docCount, in case there were
comment|// some last docs that we didn't see
annotation|@
name|Override
DECL|method|finish
specifier|public
name|void
name|finish
parameter_list|(
name|int
name|docCount
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|finishInternal
argument_list|(
name|docCount
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|releaseResources
argument_list|()
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|getIndexOut
argument_list|()
argument_list|,
name|getDataOut
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|getIndexOut
argument_list|()
argument_list|,
name|getDataOut
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|finishInternal
specifier|protected
specifier|abstract
name|void
name|finishInternal
parameter_list|(
name|int
name|docCount
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|releaseResources
specifier|protected
name|void
name|releaseResources
parameter_list|()
block|{
name|hash
operator|.
name|close
argument_list|()
expr_stmt|;
name|bytesUsed
operator|.
name|addAndGet
argument_list|(
operator|(
operator|-
name|docToEntry
operator|.
name|length
operator|)
operator|*
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
argument_list|)
expr_stmt|;
name|docToEntry
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|writeIndex
specifier|protected
name|void
name|writeIndex
parameter_list|(
name|IndexOutput
name|idxOut
parameter_list|,
name|int
name|docCount
parameter_list|,
name|long
name|maxValue
parameter_list|,
name|int
index|[]
name|toEntry
parameter_list|)
throws|throws
name|IOException
block|{
name|writeIndex
argument_list|(
name|idxOut
argument_list|,
name|docCount
argument_list|,
name|maxValue
argument_list|,
operator|(
name|int
index|[]
operator|)
literal|null
argument_list|,
name|toEntry
argument_list|)
expr_stmt|;
block|}
DECL|method|writeIndex
specifier|protected
name|void
name|writeIndex
parameter_list|(
name|IndexOutput
name|idxOut
parameter_list|,
name|int
name|docCount
parameter_list|,
name|long
name|maxValue
parameter_list|,
name|int
index|[]
name|addresses
parameter_list|,
name|int
index|[]
name|toEntry
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|PackedInts
operator|.
name|Writer
name|w
init|=
name|PackedInts
operator|.
name|getWriter
argument_list|(
name|idxOut
argument_list|,
name|docCount
argument_list|,
name|PackedInts
operator|.
name|bitsRequired
argument_list|(
name|maxValue
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|limit
init|=
name|docCount
operator|>
name|docToEntry
operator|.
name|length
condition|?
name|docToEntry
operator|.
name|length
else|:
name|docCount
decl_stmt|;
assert|assert
name|toEntry
operator|.
name|length
operator|>=
name|limit
operator|-
literal|1
assert|;
if|if
condition|(
name|addresses
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|limit
condition|;
name|i
operator|++
control|)
block|{
assert|assert
name|addresses
index|[
name|toEntry
index|[
name|i
index|]
index|]
operator|>=
literal|0
assert|;
name|w
operator|.
name|add
argument_list|(
name|addresses
index|[
name|toEntry
index|[
name|i
index|]
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|limit
condition|;
name|i
operator|++
control|)
block|{
assert|assert
name|toEntry
index|[
name|i
index|]
operator|>=
literal|0
assert|;
name|w
operator|.
name|add
argument_list|(
name|toEntry
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
name|limit
init|;
name|i
operator|<
name|docCount
condition|;
name|i
operator|++
control|)
block|{
name|w
operator|.
name|add
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
DECL|method|writeIndex
specifier|protected
name|void
name|writeIndex
parameter_list|(
name|IndexOutput
name|idxOut
parameter_list|,
name|int
name|docCount
parameter_list|,
name|long
name|maxValue
parameter_list|,
name|long
index|[]
name|addresses
parameter_list|,
name|int
index|[]
name|toEntry
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|PackedInts
operator|.
name|Writer
name|w
init|=
name|PackedInts
operator|.
name|getWriter
argument_list|(
name|idxOut
argument_list|,
name|docCount
argument_list|,
name|PackedInts
operator|.
name|bitsRequired
argument_list|(
name|maxValue
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|limit
init|=
name|docCount
operator|>
name|docToEntry
operator|.
name|length
condition|?
name|docToEntry
operator|.
name|length
else|:
name|docCount
decl_stmt|;
assert|assert
name|toEntry
operator|.
name|length
operator|>=
name|limit
operator|-
literal|1
assert|;
if|if
condition|(
name|addresses
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|limit
condition|;
name|i
operator|++
control|)
block|{
assert|assert
name|addresses
index|[
name|toEntry
index|[
name|i
index|]
index|]
operator|>=
literal|0
assert|;
name|w
operator|.
name|add
argument_list|(
name|addresses
index|[
name|toEntry
index|[
name|i
index|]
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|limit
condition|;
name|i
operator|++
control|)
block|{
assert|assert
name|toEntry
index|[
name|i
index|]
operator|>=
literal|0
assert|;
name|w
operator|.
name|add
argument_list|(
name|toEntry
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
name|limit
init|;
name|i
operator|<
name|docCount
condition|;
name|i
operator|++
control|)
block|{
name|w
operator|.
name|add
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|BytesSortedSourceBase
specifier|static
specifier|abstract
class|class
name|BytesSortedSourceBase
extends|extends
name|SortedSource
block|{
DECL|field|pagedBytes
specifier|private
specifier|final
name|PagedBytes
name|pagedBytes
decl_stmt|;
DECL|field|docToOrdIndex
specifier|protected
specifier|final
name|PackedInts
operator|.
name|Reader
name|docToOrdIndex
decl_stmt|;
DECL|field|ordToOffsetIndex
specifier|protected
specifier|final
name|PackedInts
operator|.
name|Reader
name|ordToOffsetIndex
decl_stmt|;
DECL|field|datIn
specifier|protected
specifier|final
name|IndexInput
name|datIn
decl_stmt|;
DECL|field|idxIn
specifier|protected
specifier|final
name|IndexInput
name|idxIn
decl_stmt|;
DECL|field|defaultValue
specifier|protected
specifier|final
name|BytesRef
name|defaultValue
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|field|PAGED_BYTES_BITS
specifier|protected
specifier|final
specifier|static
name|int
name|PAGED_BYTES_BITS
init|=
literal|15
decl_stmt|;
DECL|field|data
specifier|protected
specifier|final
name|PagedBytes
operator|.
name|Reader
name|data
decl_stmt|;
DECL|method|BytesSortedSourceBase
specifier|protected
name|BytesSortedSourceBase
parameter_list|(
name|IndexInput
name|datIn
parameter_list|,
name|IndexInput
name|idxIn
parameter_list|,
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|comp
parameter_list|,
name|long
name|bytesToRead
parameter_list|,
name|Type
name|type
parameter_list|,
name|boolean
name|hasOffsets
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|datIn
argument_list|,
name|idxIn
argument_list|,
name|comp
argument_list|,
operator|new
name|PagedBytes
argument_list|(
name|PAGED_BYTES_BITS
argument_list|)
argument_list|,
name|bytesToRead
argument_list|,
name|type
argument_list|,
name|hasOffsets
argument_list|)
expr_stmt|;
block|}
DECL|method|BytesSortedSourceBase
specifier|protected
name|BytesSortedSourceBase
parameter_list|(
name|IndexInput
name|datIn
parameter_list|,
name|IndexInput
name|idxIn
parameter_list|,
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|comp
parameter_list|,
name|PagedBytes
name|pagedBytes
parameter_list|,
name|long
name|bytesToRead
parameter_list|,
name|Type
name|type
parameter_list|,
name|boolean
name|hasOffsets
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|type
argument_list|,
name|comp
argument_list|)
expr_stmt|;
assert|assert
name|bytesToRead
operator|<=
name|datIn
operator|.
name|length
argument_list|()
operator|:
literal|" file size is less than the expected size diff: "
operator|+
operator|(
name|bytesToRead
operator|-
name|datIn
operator|.
name|length
argument_list|()
operator|)
operator|+
literal|" pos: "
operator|+
name|datIn
operator|.
name|getFilePointer
argument_list|()
assert|;
name|this
operator|.
name|datIn
operator|=
name|datIn
expr_stmt|;
name|this
operator|.
name|pagedBytes
operator|=
name|pagedBytes
expr_stmt|;
name|this
operator|.
name|pagedBytes
operator|.
name|copy
argument_list|(
name|datIn
argument_list|,
name|bytesToRead
argument_list|)
expr_stmt|;
name|data
operator|=
name|pagedBytes
operator|.
name|freeze
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|idxIn
operator|=
name|idxIn
expr_stmt|;
name|ordToOffsetIndex
operator|=
name|hasOffsets
condition|?
name|PackedInts
operator|.
name|getReader
argument_list|(
name|idxIn
argument_list|)
else|:
literal|null
expr_stmt|;
name|docToOrdIndex
operator|=
name|PackedInts
operator|.
name|getReader
argument_list|(
name|idxIn
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasPackedDocToOrd
specifier|public
name|boolean
name|hasPackedDocToOrd
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getDocToOrd
specifier|public
name|PackedInts
operator|.
name|Reader
name|getDocToOrd
parameter_list|()
block|{
return|return
name|docToOrdIndex
return|;
block|}
annotation|@
name|Override
DECL|method|ord
specifier|public
name|int
name|ord
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
assert|assert
name|docToOrdIndex
operator|.
name|get
argument_list|(
name|docID
argument_list|)
operator|<
name|getValueCount
argument_list|()
assert|;
return|return
operator|(
name|int
operator|)
name|docToOrdIndex
operator|.
name|get
argument_list|(
name|docID
argument_list|)
return|;
block|}
DECL|method|closeIndexInput
specifier|protected
name|void
name|closeIndexInput
parameter_list|()
throws|throws
name|IOException
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|datIn
argument_list|,
name|idxIn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
