begin_unit
begin_package
DECL|package|org.apache.lucene.index.codecs.docvalues
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|docvalues
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|DocValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|PerDocFieldValues
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|values
operator|.
name|Writer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_comment
comment|/**  * @lucene.experimental  */
end_comment
begin_comment
comment|// TODO this might need to go in the codec package since is a direct relative to
end_comment
begin_comment
comment|// TermsConsumer
end_comment
begin_class
DECL|class|DocValuesConsumer
specifier|public
specifier|abstract
class|class
name|DocValuesConsumer
block|{
DECL|field|bytesUsed
specifier|protected
name|AtomicLong
name|bytesUsed
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|method|DocValuesConsumer
specifier|protected
name|DocValuesConsumer
parameter_list|(
name|AtomicLong
name|bytesUsed
parameter_list|)
block|{
name|this
operator|.
name|bytesUsed
operator|=
name|bytesUsed
expr_stmt|;
block|}
DECL|method|bytesUsed
specifier|public
specifier|final
name|long
name|bytesUsed
parameter_list|()
block|{
return|return
name|this
operator|.
name|bytesUsed
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|add
specifier|public
specifier|abstract
name|void
name|add
parameter_list|(
name|int
name|docID
parameter_list|,
name|PerDocFieldValues
name|docValues
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|finish
specifier|public
specifier|abstract
name|void
name|finish
parameter_list|(
name|int
name|docCount
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|files
specifier|public
specifier|abstract
name|void
name|files
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|files
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|MergeState
name|mergeState
parameter_list|,
name|DocValues
name|values
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO we need some kind of compatibility notation for values such
comment|// that two slightly different segments can be merged eg. fixed vs.
comment|// variable byte len or float32 vs. float64
name|int
name|docBase
init|=
literal|0
decl_stmt|;
name|boolean
name|merged
init|=
literal|false
decl_stmt|;
comment|/*      * We ignore the given DocValues here and merge from the subReaders directly      * to support bulk copies on the DocValues Writer level. if this gets merged      * with MultiDocValues the writer can not optimize for bulk-copyable data      */
for|for
control|(
specifier|final
name|IndexReader
name|reader
range|:
name|mergeState
operator|.
name|readers
control|)
block|{
specifier|final
name|DocValues
name|r
init|=
name|reader
operator|.
name|docValues
argument_list|(
name|mergeState
operator|.
name|fieldInfo
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|merged
operator|=
literal|true
expr_stmt|;
name|merge
argument_list|(
operator|new
name|Writer
operator|.
name|MergeState
argument_list|(
name|r
argument_list|,
name|docBase
argument_list|,
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|reader
operator|.
name|getDeletedDocs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|docBase
operator|+=
name|reader
operator|.
name|numDocs
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|merged
condition|)
name|finish
argument_list|(
name|mergeState
operator|.
name|mergedDocCount
argument_list|)
expr_stmt|;
block|}
DECL|method|merge
specifier|protected
specifier|abstract
name|void
name|merge
parameter_list|(
name|MergeState
name|mergeState
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/*    * specialized auxiliary MergeState is necessary since we don't want to    * exploit internals up to the codec ones    */
DECL|class|MergeState
specifier|public
specifier|static
class|class
name|MergeState
block|{
DECL|field|reader
specifier|public
specifier|final
name|DocValues
name|reader
decl_stmt|;
DECL|field|docBase
specifier|public
specifier|final
name|int
name|docBase
decl_stmt|;
DECL|field|docCount
specifier|public
specifier|final
name|int
name|docCount
decl_stmt|;
DECL|field|bits
specifier|public
specifier|final
name|Bits
name|bits
decl_stmt|;
DECL|method|MergeState
specifier|public
name|MergeState
parameter_list|(
name|DocValues
name|reader
parameter_list|,
name|int
name|docBase
parameter_list|,
name|int
name|docCount
parameter_list|,
name|Bits
name|bits
parameter_list|)
block|{
assert|assert
name|reader
operator|!=
literal|null
assert|;
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|docBase
operator|=
name|docBase
expr_stmt|;
name|this
operator|.
name|docCount
operator|=
name|docCount
expr_stmt|;
name|this
operator|.
name|bits
operator|=
name|bits
expr_stmt|;
block|}
block|}
DECL|method|create
specifier|public
specifier|static
name|DocValuesConsumer
name|create
parameter_list|(
name|String
name|id
parameter_list|,
name|Directory
name|directory
parameter_list|,
name|FieldInfo
name|field
parameter_list|,
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|comp
parameter_list|,
name|AtomicLong
name|bytesUsed
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Writer
operator|.
name|create
argument_list|(
name|field
operator|.
name|getDocValues
argument_list|()
argument_list|,
name|id
argument_list|,
name|directory
argument_list|,
name|comp
argument_list|,
name|bytesUsed
argument_list|)
return|;
block|}
block|}
end_class
end_unit
