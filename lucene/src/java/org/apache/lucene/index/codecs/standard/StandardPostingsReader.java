begin_unit
begin_package
DECL|package|org.apache.lucene.index.codecs.standard
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|standard
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocsAndPositionsEnum
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|PostingsReaderBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|TermState
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CodecUtil
import|;
end_import
begin_comment
comment|/** Concrete class that reads the current doc/freq/skip  *  postings format.   *  @lucene.experimental */
end_comment
begin_class
DECL|class|StandardPostingsReader
specifier|public
class|class
name|StandardPostingsReader
extends|extends
name|PostingsReaderBase
block|{
DECL|field|freqIn
specifier|private
specifier|final
name|IndexInput
name|freqIn
decl_stmt|;
DECL|field|proxIn
specifier|private
specifier|final
name|IndexInput
name|proxIn
decl_stmt|;
DECL|field|skipInterval
name|int
name|skipInterval
decl_stmt|;
DECL|field|maxSkipLevels
name|int
name|maxSkipLevels
decl_stmt|;
DECL|method|StandardPostingsReader
specifier|public
name|StandardPostingsReader
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|SegmentInfo
name|segmentInfo
parameter_list|,
name|int
name|readBufferSize
parameter_list|,
name|String
name|codecId
parameter_list|)
throws|throws
name|IOException
block|{
name|freqIn
operator|=
name|dir
operator|.
name|openInput
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segmentInfo
operator|.
name|name
argument_list|,
name|codecId
argument_list|,
name|StandardCodec
operator|.
name|FREQ_EXTENSION
argument_list|)
argument_list|,
name|readBufferSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|segmentInfo
operator|.
name|getHasProx
argument_list|()
condition|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|proxIn
operator|=
name|dir
operator|.
name|openInput
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segmentInfo
operator|.
name|name
argument_list|,
name|codecId
argument_list|,
name|StandardCodec
operator|.
name|PROX_EXTENSION
argument_list|)
argument_list|,
name|readBufferSize
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|freqIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|proxIn
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|files
specifier|public
specifier|static
name|void
name|files
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|SegmentInfo
name|segmentInfo
parameter_list|,
name|String
name|id
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|files
parameter_list|)
throws|throws
name|IOException
block|{
name|files
operator|.
name|add
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segmentInfo
operator|.
name|name
argument_list|,
name|id
argument_list|,
name|StandardCodec
operator|.
name|FREQ_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|segmentInfo
operator|.
name|getHasProx
argument_list|()
condition|)
block|{
name|files
operator|.
name|add
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segmentInfo
operator|.
name|name
argument_list|,
name|id
argument_list|,
name|StandardCodec
operator|.
name|PROX_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|IndexInput
name|termsIn
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Make sure we are talking to the matching past writer
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|termsIn
argument_list|,
name|StandardPostingsWriter
operator|.
name|CODEC
argument_list|,
name|StandardPostingsWriter
operator|.
name|VERSION_START
argument_list|,
name|StandardPostingsWriter
operator|.
name|VERSION_START
argument_list|)
expr_stmt|;
name|skipInterval
operator|=
name|termsIn
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|maxSkipLevels
operator|=
name|termsIn
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
DECL|class|DocTermState
specifier|private
specifier|static
class|class
name|DocTermState
extends|extends
name|TermState
block|{
DECL|field|freqOffset
name|long
name|freqOffset
decl_stmt|;
DECL|field|proxOffset
name|long
name|proxOffset
decl_stmt|;
DECL|field|skipOffset
name|int
name|skipOffset
decl_stmt|;
DECL|method|clone
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|DocTermState
name|other
init|=
operator|(
name|DocTermState
operator|)
name|super
operator|.
name|clone
argument_list|()
decl_stmt|;
name|other
operator|.
name|freqOffset
operator|=
name|freqOffset
expr_stmt|;
name|other
operator|.
name|proxOffset
operator|=
name|proxOffset
expr_stmt|;
name|other
operator|.
name|skipOffset
operator|=
name|skipOffset
expr_stmt|;
return|return
name|other
return|;
block|}
DECL|method|copy
specifier|public
name|void
name|copy
parameter_list|(
name|TermState
name|_other
parameter_list|)
block|{
name|super
operator|.
name|copy
argument_list|(
name|_other
argument_list|)
expr_stmt|;
name|DocTermState
name|other
init|=
operator|(
name|DocTermState
operator|)
name|_other
decl_stmt|;
name|freqOffset
operator|=
name|other
operator|.
name|freqOffset
expr_stmt|;
name|proxOffset
operator|=
name|other
operator|.
name|proxOffset
expr_stmt|;
name|skipOffset
operator|=
name|other
operator|.
name|skipOffset
expr_stmt|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|" freqFP="
operator|+
name|freqOffset
operator|+
literal|" proxFP="
operator|+
name|proxOffset
operator|+
literal|" skipOffset="
operator|+
name|skipOffset
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|newTermState
specifier|public
name|TermState
name|newTermState
parameter_list|()
block|{
return|return
operator|new
name|DocTermState
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|freqIn
operator|!=
literal|null
condition|)
block|{
name|freqIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|proxIn
operator|!=
literal|null
condition|)
block|{
name|proxIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|readTerm
specifier|public
name|void
name|readTerm
parameter_list|(
name|IndexInput
name|termsIn
parameter_list|,
name|FieldInfo
name|fieldInfo
parameter_list|,
name|TermState
name|termState
parameter_list|,
name|boolean
name|isIndexTerm
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DocTermState
name|docTermState
init|=
operator|(
name|DocTermState
operator|)
name|termState
decl_stmt|;
if|if
condition|(
name|isIndexTerm
condition|)
block|{
name|docTermState
operator|.
name|freqOffset
operator|=
name|termsIn
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|docTermState
operator|.
name|freqOffset
operator|+=
name|termsIn
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|docTermState
operator|.
name|docFreq
operator|>=
name|skipInterval
condition|)
block|{
name|docTermState
operator|.
name|skipOffset
operator|=
name|termsIn
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|docTermState
operator|.
name|skipOffset
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fieldInfo
operator|.
name|omitTermFreqAndPositions
condition|)
block|{
if|if
condition|(
name|isIndexTerm
condition|)
block|{
name|docTermState
operator|.
name|proxOffset
operator|=
name|termsIn
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|docTermState
operator|.
name|proxOffset
operator|+=
name|termsIn
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|docs
specifier|public
name|DocsEnum
name|docs
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|,
name|TermState
name|termState
parameter_list|,
name|Bits
name|skipDocs
parameter_list|,
name|DocsEnum
name|reuse
parameter_list|)
throws|throws
name|IOException
block|{
name|SegmentDocsEnum
name|docsEnum
decl_stmt|;
if|if
condition|(
name|reuse
operator|==
literal|null
operator|||
operator|!
operator|(
name|reuse
operator|instanceof
name|SegmentDocsEnum
operator|)
condition|)
block|{
name|docsEnum
operator|=
operator|new
name|SegmentDocsEnum
argument_list|(
name|freqIn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docsEnum
operator|=
operator|(
name|SegmentDocsEnum
operator|)
name|reuse
expr_stmt|;
if|if
condition|(
name|docsEnum
operator|.
name|startFreqIn
operator|!=
name|freqIn
condition|)
block|{
comment|// If you are using ParellelReader, and pass in a
comment|// reused DocsEnum, it could have come from another
comment|// reader also using standard codec
name|docsEnum
operator|=
operator|new
name|SegmentDocsEnum
argument_list|(
name|freqIn
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|docsEnum
operator|.
name|reset
argument_list|(
name|fieldInfo
argument_list|,
operator|(
name|DocTermState
operator|)
name|termState
argument_list|,
name|skipDocs
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|docsAndPositions
specifier|public
name|DocsAndPositionsEnum
name|docsAndPositions
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|,
name|TermState
name|termState
parameter_list|,
name|Bits
name|skipDocs
parameter_list|,
name|DocsAndPositionsEnum
name|reuse
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fieldInfo
operator|.
name|omitTermFreqAndPositions
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// TODO: refactor
if|if
condition|(
name|fieldInfo
operator|.
name|storePayloads
condition|)
block|{
name|SegmentDocsAndPositionsAndPayloadsEnum
name|docsEnum
decl_stmt|;
if|if
condition|(
name|reuse
operator|==
literal|null
operator|||
operator|!
operator|(
name|reuse
operator|instanceof
name|SegmentDocsAndPositionsAndPayloadsEnum
operator|)
condition|)
block|{
name|docsEnum
operator|=
operator|new
name|SegmentDocsAndPositionsAndPayloadsEnum
argument_list|(
name|freqIn
argument_list|,
name|proxIn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docsEnum
operator|=
operator|(
name|SegmentDocsAndPositionsAndPayloadsEnum
operator|)
name|reuse
expr_stmt|;
if|if
condition|(
name|docsEnum
operator|.
name|startFreqIn
operator|!=
name|freqIn
condition|)
block|{
comment|// If you are using ParellelReader, and pass in a
comment|// reused DocsEnum, it could have come from another
comment|// reader also using standard codec
name|docsEnum
operator|=
operator|new
name|SegmentDocsAndPositionsAndPayloadsEnum
argument_list|(
name|freqIn
argument_list|,
name|proxIn
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|docsEnum
operator|.
name|reset
argument_list|(
name|fieldInfo
argument_list|,
operator|(
name|DocTermState
operator|)
name|termState
argument_list|,
name|skipDocs
argument_list|)
return|;
block|}
else|else
block|{
name|SegmentDocsAndPositionsEnum
name|docsEnum
decl_stmt|;
if|if
condition|(
name|reuse
operator|==
literal|null
operator|||
operator|!
operator|(
name|reuse
operator|instanceof
name|SegmentDocsAndPositionsEnum
operator|)
condition|)
block|{
name|docsEnum
operator|=
operator|new
name|SegmentDocsAndPositionsEnum
argument_list|(
name|freqIn
argument_list|,
name|proxIn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docsEnum
operator|=
operator|(
name|SegmentDocsAndPositionsEnum
operator|)
name|reuse
expr_stmt|;
if|if
condition|(
name|docsEnum
operator|.
name|startFreqIn
operator|!=
name|freqIn
condition|)
block|{
comment|// If you are using ParellelReader, and pass in a
comment|// reused DocsEnum, it could have come from another
comment|// reader also using standard codec
name|docsEnum
operator|=
operator|new
name|SegmentDocsAndPositionsEnum
argument_list|(
name|freqIn
argument_list|,
name|proxIn
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|docsEnum
operator|.
name|reset
argument_list|(
name|fieldInfo
argument_list|,
operator|(
name|DocTermState
operator|)
name|termState
argument_list|,
name|skipDocs
argument_list|)
return|;
block|}
block|}
comment|// Decodes only docs
DECL|class|SegmentDocsEnum
specifier|private
class|class
name|SegmentDocsEnum
extends|extends
name|DocsEnum
block|{
DECL|field|freqIn
specifier|final
name|IndexInput
name|freqIn
decl_stmt|;
DECL|field|startFreqIn
specifier|final
name|IndexInput
name|startFreqIn
decl_stmt|;
DECL|field|omitTF
name|boolean
name|omitTF
decl_stmt|;
comment|// does current field omit term freq?
DECL|field|storePayloads
name|boolean
name|storePayloads
decl_stmt|;
comment|// does current field store payloads?
DECL|field|limit
name|int
name|limit
decl_stmt|;
comment|// number of docs in this posting
DECL|field|ord
name|int
name|ord
decl_stmt|;
comment|// how many docs we've read
DECL|field|doc
name|int
name|doc
decl_stmt|;
comment|// doc we last read
DECL|field|freq
name|int
name|freq
decl_stmt|;
comment|// freq we last read
DECL|field|skipDocs
name|Bits
name|skipDocs
decl_stmt|;
DECL|field|freqOffset
name|long
name|freqOffset
decl_stmt|;
DECL|field|skipOffset
name|int
name|skipOffset
decl_stmt|;
DECL|field|skipped
name|boolean
name|skipped
decl_stmt|;
DECL|field|skipper
name|DefaultSkipListReader
name|skipper
decl_stmt|;
DECL|method|SegmentDocsEnum
specifier|public
name|SegmentDocsEnum
parameter_list|(
name|IndexInput
name|freqIn
parameter_list|)
throws|throws
name|IOException
block|{
name|startFreqIn
operator|=
name|freqIn
expr_stmt|;
name|this
operator|.
name|freqIn
operator|=
operator|(
name|IndexInput
operator|)
name|freqIn
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|SegmentDocsEnum
name|reset
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|,
name|DocTermState
name|termState
parameter_list|,
name|Bits
name|skipDocs
parameter_list|)
throws|throws
name|IOException
block|{
name|omitTF
operator|=
name|fieldInfo
operator|.
name|omitTermFreqAndPositions
expr_stmt|;
if|if
condition|(
name|omitTF
condition|)
block|{
name|freq
operator|=
literal|1
expr_stmt|;
block|}
name|storePayloads
operator|=
name|fieldInfo
operator|.
name|storePayloads
expr_stmt|;
name|this
operator|.
name|skipDocs
operator|=
name|skipDocs
expr_stmt|;
name|freqOffset
operator|=
name|termState
operator|.
name|freqOffset
expr_stmt|;
name|skipOffset
operator|=
name|termState
operator|.
name|skipOffset
expr_stmt|;
comment|// TODO: for full enum case (eg segment merging) this
comment|// seek is unnecessary; maybe we can avoid in such
comment|// cases
name|freqIn
operator|.
name|seek
argument_list|(
name|termState
operator|.
name|freqOffset
argument_list|)
expr_stmt|;
name|limit
operator|=
name|termState
operator|.
name|docFreq
expr_stmt|;
name|ord
operator|=
literal|0
expr_stmt|;
name|doc
operator|=
literal|0
expr_stmt|;
name|skipped
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|ord
operator|==
name|limit
condition|)
block|{
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
name|ord
operator|++
expr_stmt|;
comment|// Decode next doc/freq pair
specifier|final
name|int
name|code
init|=
name|freqIn
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|omitTF
condition|)
block|{
name|doc
operator|+=
name|code
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|+=
name|code
operator|>>>
literal|1
expr_stmt|;
comment|// shift off low bit
if|if
condition|(
operator|(
name|code
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// if low bit is set
name|freq
operator|=
literal|1
expr_stmt|;
comment|// freq is one
block|}
else|else
block|{
name|freq
operator|=
name|freqIn
operator|.
name|readVInt
argument_list|()
expr_stmt|;
comment|// else read freq
block|}
block|}
if|if
condition|(
name|skipDocs
operator|==
literal|null
operator|||
operator|!
name|skipDocs
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
index|[]
name|docs
init|=
name|bulkResult
operator|.
name|docs
operator|.
name|ints
decl_stmt|;
specifier|final
name|int
index|[]
name|freqs
init|=
name|bulkResult
operator|.
name|freqs
operator|.
name|ints
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|docs
operator|.
name|length
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|length
operator|&&
name|ord
operator|<
name|limit
condition|)
block|{
name|ord
operator|++
expr_stmt|;
comment|// manually inlined call to next() for speed
specifier|final
name|int
name|code
init|=
name|freqIn
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|omitTF
condition|)
block|{
name|doc
operator|+=
name|code
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|+=
name|code
operator|>>>
literal|1
expr_stmt|;
comment|// shift off low bit
if|if
condition|(
operator|(
name|code
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// if low bit is set
name|freq
operator|=
literal|1
expr_stmt|;
comment|// freq is one
block|}
else|else
block|{
name|freq
operator|=
name|freqIn
operator|.
name|readVInt
argument_list|()
expr_stmt|;
comment|// else read freq
block|}
block|}
if|if
condition|(
name|skipDocs
operator|==
literal|null
operator|||
operator|!
name|skipDocs
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|docs
index|[
name|i
index|]
operator|=
name|doc
expr_stmt|;
name|freqs
index|[
name|i
index|]
operator|=
name|freq
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
block|}
return|return
name|i
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
block|{
return|return
name|freq
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: jump right to next() if target is< X away
comment|// from where we are now?
if|if
condition|(
name|skipOffset
operator|>
literal|0
condition|)
block|{
comment|// There are enough docs in the posting to have
comment|// skip data
if|if
condition|(
name|skipper
operator|==
literal|null
condition|)
block|{
comment|// This is the first time this enum has ever been used for skipping -- do lazy init
name|skipper
operator|=
operator|new
name|DefaultSkipListReader
argument_list|(
operator|(
name|IndexInput
operator|)
name|freqIn
operator|.
name|clone
argument_list|()
argument_list|,
name|maxSkipLevels
argument_list|,
name|skipInterval
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|skipped
condition|)
block|{
comment|// This is the first time this posting has
comment|// skipped since reset() was called, so now we
comment|// load the skip data for this posting
name|skipper
operator|.
name|init
argument_list|(
name|freqOffset
operator|+
name|skipOffset
argument_list|,
name|freqOffset
argument_list|,
literal|0
argument_list|,
name|limit
argument_list|,
name|storePayloads
argument_list|)
expr_stmt|;
name|skipped
operator|=
literal|true
expr_stmt|;
block|}
specifier|final
name|int
name|newOrd
init|=
name|skipper
operator|.
name|skipTo
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|newOrd
operator|>
name|ord
condition|)
block|{
comment|// Skipper moved
name|ord
operator|=
name|newOrd
expr_stmt|;
name|doc
operator|=
name|skipper
operator|.
name|getDoc
argument_list|()
expr_stmt|;
name|freqIn
operator|.
name|seek
argument_list|(
name|skipper
operator|.
name|getFreqPointer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// scan for the rest:
do|do
block|{
name|nextDoc
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|target
operator|>
name|doc
condition|)
do|;
return|return
name|doc
return|;
block|}
block|}
comment|// Decodes docs& positions. payloads are not present.
DECL|class|SegmentDocsAndPositionsEnum
specifier|private
class|class
name|SegmentDocsAndPositionsEnum
extends|extends
name|DocsAndPositionsEnum
block|{
DECL|field|startFreqIn
specifier|final
name|IndexInput
name|startFreqIn
decl_stmt|;
DECL|field|freqIn
specifier|private
specifier|final
name|IndexInput
name|freqIn
decl_stmt|;
DECL|field|proxIn
specifier|private
specifier|final
name|IndexInput
name|proxIn
decl_stmt|;
DECL|field|limit
name|int
name|limit
decl_stmt|;
comment|// number of docs in this posting
DECL|field|ord
name|int
name|ord
decl_stmt|;
comment|// how many docs we've read
DECL|field|doc
name|int
name|doc
decl_stmt|;
comment|// doc we last read
DECL|field|freq
name|int
name|freq
decl_stmt|;
comment|// freq we last read
DECL|field|position
name|int
name|position
decl_stmt|;
DECL|field|skipDocs
name|Bits
name|skipDocs
decl_stmt|;
DECL|field|freqOffset
name|long
name|freqOffset
decl_stmt|;
DECL|field|skipOffset
name|int
name|skipOffset
decl_stmt|;
DECL|field|proxOffset
name|long
name|proxOffset
decl_stmt|;
DECL|field|posPendingCount
name|int
name|posPendingCount
decl_stmt|;
DECL|field|skipped
name|boolean
name|skipped
decl_stmt|;
DECL|field|skipper
name|DefaultSkipListReader
name|skipper
decl_stmt|;
DECL|field|lazyProxPointer
specifier|private
name|long
name|lazyProxPointer
decl_stmt|;
DECL|method|SegmentDocsAndPositionsEnum
specifier|public
name|SegmentDocsAndPositionsEnum
parameter_list|(
name|IndexInput
name|freqIn
parameter_list|,
name|IndexInput
name|proxIn
parameter_list|)
throws|throws
name|IOException
block|{
name|startFreqIn
operator|=
name|freqIn
expr_stmt|;
name|this
operator|.
name|freqIn
operator|=
operator|(
name|IndexInput
operator|)
name|freqIn
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|proxIn
operator|=
operator|(
name|IndexInput
operator|)
name|proxIn
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|SegmentDocsAndPositionsEnum
name|reset
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|,
name|DocTermState
name|termState
parameter_list|,
name|Bits
name|skipDocs
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
operator|!
name|fieldInfo
operator|.
name|omitTermFreqAndPositions
assert|;
assert|assert
operator|!
name|fieldInfo
operator|.
name|storePayloads
assert|;
name|this
operator|.
name|skipDocs
operator|=
name|skipDocs
expr_stmt|;
comment|// TODO: for full enum case (eg segment merging) this
comment|// seek is unnecessary; maybe we can avoid in such
comment|// cases
name|freqIn
operator|.
name|seek
argument_list|(
name|termState
operator|.
name|freqOffset
argument_list|)
expr_stmt|;
name|lazyProxPointer
operator|=
name|termState
operator|.
name|proxOffset
expr_stmt|;
name|limit
operator|=
name|termState
operator|.
name|docFreq
expr_stmt|;
name|ord
operator|=
literal|0
expr_stmt|;
name|doc
operator|=
literal|0
expr_stmt|;
name|position
operator|=
literal|0
expr_stmt|;
name|skipped
operator|=
literal|false
expr_stmt|;
name|posPendingCount
operator|=
literal|0
expr_stmt|;
name|freqOffset
operator|=
name|termState
operator|.
name|freqOffset
expr_stmt|;
name|proxOffset
operator|=
name|termState
operator|.
name|proxOffset
expr_stmt|;
name|skipOffset
operator|=
name|termState
operator|.
name|skipOffset
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|ord
operator|==
name|limit
condition|)
block|{
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
name|ord
operator|++
expr_stmt|;
comment|// Decode next doc/freq pair
specifier|final
name|int
name|code
init|=
name|freqIn
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|doc
operator|+=
name|code
operator|>>>
literal|1
expr_stmt|;
comment|// shift off low bit
if|if
condition|(
operator|(
name|code
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// if low bit is set
name|freq
operator|=
literal|1
expr_stmt|;
comment|// freq is one
block|}
else|else
block|{
name|freq
operator|=
name|freqIn
operator|.
name|readVInt
argument_list|()
expr_stmt|;
comment|// else read freq
block|}
name|posPendingCount
operator|+=
name|freq
expr_stmt|;
if|if
condition|(
name|skipDocs
operator|==
literal|null
operator|||
operator|!
name|skipDocs
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|position
operator|=
literal|0
expr_stmt|;
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
block|{
return|return
name|freq
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: jump right to next() if target is< X away
comment|// from where we are now?
if|if
condition|(
name|skipOffset
operator|>
literal|0
condition|)
block|{
comment|// There are enough docs in the posting to have
comment|// skip data
if|if
condition|(
name|skipper
operator|==
literal|null
condition|)
block|{
comment|// This is the first time this enum has ever been used for skipping -- do lazy init
name|skipper
operator|=
operator|new
name|DefaultSkipListReader
argument_list|(
operator|(
name|IndexInput
operator|)
name|freqIn
operator|.
name|clone
argument_list|()
argument_list|,
name|maxSkipLevels
argument_list|,
name|skipInterval
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|skipped
condition|)
block|{
comment|// This is the first time this posting has
comment|// skipped, since reset() was called, so now we
comment|// load the skip data for this posting
name|skipper
operator|.
name|init
argument_list|(
name|freqOffset
operator|+
name|skipOffset
argument_list|,
name|freqOffset
argument_list|,
name|proxOffset
argument_list|,
name|limit
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|skipped
operator|=
literal|true
expr_stmt|;
block|}
specifier|final
name|int
name|newOrd
init|=
name|skipper
operator|.
name|skipTo
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|newOrd
operator|>
name|ord
condition|)
block|{
comment|// Skipper moved
name|ord
operator|=
name|newOrd
expr_stmt|;
name|doc
operator|=
name|skipper
operator|.
name|getDoc
argument_list|()
expr_stmt|;
name|freqIn
operator|.
name|seek
argument_list|(
name|skipper
operator|.
name|getFreqPointer
argument_list|()
argument_list|)
expr_stmt|;
name|lazyProxPointer
operator|=
name|skipper
operator|.
name|getProxPointer
argument_list|()
expr_stmt|;
name|posPendingCount
operator|=
literal|0
expr_stmt|;
name|position
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|// Now, linear scan for the rest:
do|do
block|{
name|nextDoc
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|target
operator|>
name|doc
condition|)
do|;
return|return
name|doc
return|;
block|}
DECL|method|nextPosition
specifier|public
name|int
name|nextPosition
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|lazyProxPointer
operator|!=
operator|-
literal|1
condition|)
block|{
name|proxIn
operator|.
name|seek
argument_list|(
name|lazyProxPointer
argument_list|)
expr_stmt|;
name|lazyProxPointer
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|// scan over any docs that were iterated without their positions
if|if
condition|(
name|posPendingCount
operator|>
name|freq
condition|)
block|{
name|position
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|posPendingCount
operator|!=
name|freq
condition|)
block|{
if|if
condition|(
operator|(
name|proxIn
operator|.
name|readByte
argument_list|()
operator|&
literal|0x80
operator|)
operator|==
literal|0
condition|)
block|{
name|posPendingCount
operator|--
expr_stmt|;
block|}
block|}
block|}
name|position
operator|+=
name|proxIn
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|posPendingCount
operator|--
expr_stmt|;
assert|assert
name|posPendingCount
operator|>=
literal|0
operator|:
literal|"nextPosition() was called too many times (more than freq() times) posPendingCount="
operator|+
name|posPendingCount
assert|;
return|return
name|position
return|;
block|}
comment|/** Returns the payload at this position, or null if no      *  payload was indexed. */
DECL|method|getPayload
specifier|public
name|BytesRef
name|getPayload
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No payloads exist for this field!"
argument_list|)
throw|;
block|}
DECL|method|hasPayload
specifier|public
name|boolean
name|hasPayload
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// Decodes docs& positions& payloads
DECL|class|SegmentDocsAndPositionsAndPayloadsEnum
specifier|private
class|class
name|SegmentDocsAndPositionsAndPayloadsEnum
extends|extends
name|DocsAndPositionsEnum
block|{
DECL|field|startFreqIn
specifier|final
name|IndexInput
name|startFreqIn
decl_stmt|;
DECL|field|freqIn
specifier|private
specifier|final
name|IndexInput
name|freqIn
decl_stmt|;
DECL|field|proxIn
specifier|private
specifier|final
name|IndexInput
name|proxIn
decl_stmt|;
DECL|field|limit
name|int
name|limit
decl_stmt|;
comment|// number of docs in this posting
DECL|field|ord
name|int
name|ord
decl_stmt|;
comment|// how many docs we've read
DECL|field|doc
name|int
name|doc
decl_stmt|;
comment|// doc we last read
DECL|field|freq
name|int
name|freq
decl_stmt|;
comment|// freq we last read
DECL|field|position
name|int
name|position
decl_stmt|;
DECL|field|skipDocs
name|Bits
name|skipDocs
decl_stmt|;
DECL|field|freqOffset
name|long
name|freqOffset
decl_stmt|;
DECL|field|skipOffset
name|int
name|skipOffset
decl_stmt|;
DECL|field|proxOffset
name|long
name|proxOffset
decl_stmt|;
DECL|field|posPendingCount
name|int
name|posPendingCount
decl_stmt|;
DECL|field|payloadLength
name|int
name|payloadLength
decl_stmt|;
DECL|field|payloadPending
name|boolean
name|payloadPending
decl_stmt|;
DECL|field|skipped
name|boolean
name|skipped
decl_stmt|;
DECL|field|skipper
name|DefaultSkipListReader
name|skipper
decl_stmt|;
DECL|field|payload
specifier|private
name|BytesRef
name|payload
decl_stmt|;
DECL|field|lazyProxPointer
specifier|private
name|long
name|lazyProxPointer
decl_stmt|;
DECL|method|SegmentDocsAndPositionsAndPayloadsEnum
specifier|public
name|SegmentDocsAndPositionsAndPayloadsEnum
parameter_list|(
name|IndexInput
name|freqIn
parameter_list|,
name|IndexInput
name|proxIn
parameter_list|)
throws|throws
name|IOException
block|{
name|startFreqIn
operator|=
name|freqIn
expr_stmt|;
name|this
operator|.
name|freqIn
operator|=
operator|(
name|IndexInput
operator|)
name|freqIn
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|proxIn
operator|=
operator|(
name|IndexInput
operator|)
name|proxIn
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
DECL|method|reset
specifier|public
name|SegmentDocsAndPositionsAndPayloadsEnum
name|reset
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|,
name|DocTermState
name|termState
parameter_list|,
name|Bits
name|skipDocs
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
operator|!
name|fieldInfo
operator|.
name|omitTermFreqAndPositions
assert|;
assert|assert
name|fieldInfo
operator|.
name|storePayloads
assert|;
if|if
condition|(
name|payload
operator|==
literal|null
condition|)
block|{
name|payload
operator|=
operator|new
name|BytesRef
argument_list|()
expr_stmt|;
name|payload
operator|.
name|bytes
operator|=
operator|new
name|byte
index|[
literal|1
index|]
expr_stmt|;
block|}
name|this
operator|.
name|skipDocs
operator|=
name|skipDocs
expr_stmt|;
comment|// TODO: for full enum case (eg segment merging) this
comment|// seek is unnecessary; maybe we can avoid in such
comment|// cases
name|freqIn
operator|.
name|seek
argument_list|(
name|termState
operator|.
name|freqOffset
argument_list|)
expr_stmt|;
name|lazyProxPointer
operator|=
name|termState
operator|.
name|proxOffset
expr_stmt|;
name|limit
operator|=
name|termState
operator|.
name|docFreq
expr_stmt|;
name|ord
operator|=
literal|0
expr_stmt|;
name|doc
operator|=
literal|0
expr_stmt|;
name|position
operator|=
literal|0
expr_stmt|;
name|skipped
operator|=
literal|false
expr_stmt|;
name|posPendingCount
operator|=
literal|0
expr_stmt|;
name|payloadPending
operator|=
literal|false
expr_stmt|;
name|freqOffset
operator|=
name|termState
operator|.
name|freqOffset
expr_stmt|;
name|proxOffset
operator|=
name|termState
operator|.
name|proxOffset
expr_stmt|;
name|skipOffset
operator|=
name|termState
operator|.
name|skipOffset
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|ord
operator|==
name|limit
condition|)
block|{
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
name|ord
operator|++
expr_stmt|;
comment|// Decode next doc/freq pair
specifier|final
name|int
name|code
init|=
name|freqIn
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|doc
operator|+=
name|code
operator|>>>
literal|1
expr_stmt|;
comment|// shift off low bit
if|if
condition|(
operator|(
name|code
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// if low bit is set
name|freq
operator|=
literal|1
expr_stmt|;
comment|// freq is one
block|}
else|else
block|{
name|freq
operator|=
name|freqIn
operator|.
name|readVInt
argument_list|()
expr_stmt|;
comment|// else read freq
block|}
name|posPendingCount
operator|+=
name|freq
expr_stmt|;
if|if
condition|(
name|skipDocs
operator|==
literal|null
operator|||
operator|!
name|skipDocs
operator|.
name|get
argument_list|(
name|doc
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|position
operator|=
literal|0
expr_stmt|;
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
block|{
return|return
name|freq
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: jump right to next() if target is< X away
comment|// from where we are now?
if|if
condition|(
name|skipOffset
operator|>
literal|0
condition|)
block|{
comment|// There are enough docs in the posting to have
comment|// skip data
if|if
condition|(
name|skipper
operator|==
literal|null
condition|)
block|{
comment|// This is the first time this enum has ever been used for skipping -- do lazy init
name|skipper
operator|=
operator|new
name|DefaultSkipListReader
argument_list|(
operator|(
name|IndexInput
operator|)
name|freqIn
operator|.
name|clone
argument_list|()
argument_list|,
name|maxSkipLevels
argument_list|,
name|skipInterval
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|skipped
condition|)
block|{
comment|// This is the first time this posting has
comment|// skipped, since reset() was called, so now we
comment|// load the skip data for this posting
name|skipper
operator|.
name|init
argument_list|(
name|freqOffset
operator|+
name|skipOffset
argument_list|,
name|freqOffset
argument_list|,
name|proxOffset
argument_list|,
name|limit
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|skipped
operator|=
literal|true
expr_stmt|;
block|}
specifier|final
name|int
name|newOrd
init|=
name|skipper
operator|.
name|skipTo
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|newOrd
operator|>
name|ord
condition|)
block|{
comment|// Skipper moved
name|ord
operator|=
name|newOrd
expr_stmt|;
name|doc
operator|=
name|skipper
operator|.
name|getDoc
argument_list|()
expr_stmt|;
name|freqIn
operator|.
name|seek
argument_list|(
name|skipper
operator|.
name|getFreqPointer
argument_list|()
argument_list|)
expr_stmt|;
name|lazyProxPointer
operator|=
name|skipper
operator|.
name|getProxPointer
argument_list|()
expr_stmt|;
name|posPendingCount
operator|=
literal|0
expr_stmt|;
name|position
operator|=
literal|0
expr_stmt|;
name|payloadPending
operator|=
literal|false
expr_stmt|;
name|payloadLength
operator|=
name|skipper
operator|.
name|getPayloadLength
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Now, linear scan for the rest:
do|do
block|{
name|nextDoc
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|target
operator|>
name|doc
condition|)
do|;
return|return
name|doc
return|;
block|}
DECL|method|nextPosition
specifier|public
name|int
name|nextPosition
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|lazyProxPointer
operator|!=
operator|-
literal|1
condition|)
block|{
name|proxIn
operator|.
name|seek
argument_list|(
name|lazyProxPointer
argument_list|)
expr_stmt|;
name|lazyProxPointer
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|payloadPending
operator|&&
name|payloadLength
operator|>
literal|0
condition|)
block|{
comment|// payload of last position as never retrieved -- skip it
name|proxIn
operator|.
name|seek
argument_list|(
name|proxIn
operator|.
name|getFilePointer
argument_list|()
operator|+
name|payloadLength
argument_list|)
expr_stmt|;
name|payloadPending
operator|=
literal|false
expr_stmt|;
block|}
comment|// scan over any docs that were iterated without their positions
while|while
condition|(
name|posPendingCount
operator|>
name|freq
condition|)
block|{
specifier|final
name|int
name|code
init|=
name|proxIn
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|code
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// new payload length
name|payloadLength
operator|=
name|proxIn
operator|.
name|readVInt
argument_list|()
expr_stmt|;
assert|assert
name|payloadLength
operator|>=
literal|0
assert|;
block|}
assert|assert
name|payloadLength
operator|!=
operator|-
literal|1
assert|;
name|proxIn
operator|.
name|seek
argument_list|(
name|proxIn
operator|.
name|getFilePointer
argument_list|()
operator|+
name|payloadLength
argument_list|)
expr_stmt|;
name|posPendingCount
operator|--
expr_stmt|;
name|position
operator|=
literal|0
expr_stmt|;
name|payloadPending
operator|=
literal|false
expr_stmt|;
block|}
comment|// read next position
if|if
condition|(
name|payloadPending
operator|&&
name|payloadLength
operator|>
literal|0
condition|)
block|{
comment|// payload wasn't retrieved for last position
name|proxIn
operator|.
name|seek
argument_list|(
name|proxIn
operator|.
name|getFilePointer
argument_list|()
operator|+
name|payloadLength
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|code
init|=
name|proxIn
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|code
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// new payload length
name|payloadLength
operator|=
name|proxIn
operator|.
name|readVInt
argument_list|()
expr_stmt|;
assert|assert
name|payloadLength
operator|>=
literal|0
assert|;
block|}
assert|assert
name|payloadLength
operator|!=
operator|-
literal|1
assert|;
name|payloadPending
operator|=
literal|true
expr_stmt|;
name|position
operator|+=
name|code
operator|>>>
literal|1
expr_stmt|;
name|posPendingCount
operator|--
expr_stmt|;
assert|assert
name|posPendingCount
operator|>=
literal|0
operator|:
literal|"nextPosition() was called too many times (more than freq() times) posPendingCount="
operator|+
name|posPendingCount
assert|;
return|return
name|position
return|;
block|}
comment|/** Returns the payload at this position, or null if no      *  payload was indexed. */
DECL|method|getPayload
specifier|public
name|BytesRef
name|getPayload
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|lazyProxPointer
operator|==
operator|-
literal|1
assert|;
assert|assert
name|posPendingCount
operator|<
name|freq
assert|;
if|if
condition|(
operator|!
name|payloadPending
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Either no payload exists at this term position or an attempt was made to load it more than once."
argument_list|)
throw|;
block|}
if|if
condition|(
name|payloadLength
operator|>
name|payload
operator|.
name|bytes
operator|.
name|length
condition|)
block|{
name|payload
operator|.
name|grow
argument_list|(
name|payloadLength
argument_list|)
expr_stmt|;
block|}
name|proxIn
operator|.
name|readBytes
argument_list|(
name|payload
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|payloadLength
argument_list|)
expr_stmt|;
name|payload
operator|.
name|length
operator|=
name|payloadLength
expr_stmt|;
name|payloadPending
operator|=
literal|false
expr_stmt|;
return|return
name|payload
return|;
block|}
DECL|method|hasPayload
specifier|public
name|boolean
name|hasPayload
parameter_list|()
block|{
return|return
name|payloadPending
operator|&&
name|payloadLength
operator|>
literal|0
return|;
block|}
block|}
block|}
end_class
end_unit
