begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_comment
comment|/** This is just a "splitter" class: it lets you wrap two  *  DocFieldConsumer instances as a single consumer. */
end_comment
begin_class
DECL|class|DocFieldConsumers
specifier|final
class|class
name|DocFieldConsumers
extends|extends
name|DocFieldConsumer
block|{
DECL|field|one
specifier|final
name|DocFieldConsumer
name|one
decl_stmt|;
DECL|field|two
specifier|final
name|DocFieldConsumer
name|two
decl_stmt|;
DECL|field|docState
specifier|final
name|DocumentsWriterPerThread
operator|.
name|DocState
name|docState
decl_stmt|;
DECL|method|DocFieldConsumers
specifier|public
name|DocFieldConsumers
parameter_list|(
name|DocFieldProcessor
name|processor
parameter_list|,
name|DocFieldConsumer
name|one
parameter_list|,
name|DocFieldConsumer
name|two
parameter_list|)
block|{
name|this
operator|.
name|one
operator|=
name|one
expr_stmt|;
name|this
operator|.
name|two
operator|=
name|two
expr_stmt|;
name|this
operator|.
name|docState
operator|=
name|processor
operator|.
name|docState
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setFieldInfos
name|void
name|setFieldInfos
parameter_list|(
name|FieldInfos
name|fieldInfos
parameter_list|)
block|{
name|super
operator|.
name|setFieldInfos
argument_list|(
name|fieldInfos
argument_list|)
expr_stmt|;
name|one
operator|.
name|setFieldInfos
argument_list|(
name|fieldInfos
argument_list|)
expr_stmt|;
name|two
operator|.
name|setFieldInfos
argument_list|(
name|fieldInfos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|(
name|Map
argument_list|<
name|FieldInfo
argument_list|,
name|DocFieldConsumerPerField
argument_list|>
name|fieldsToFlush
parameter_list|,
name|SegmentWriteState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|FieldInfo
argument_list|,
name|DocFieldConsumerPerField
argument_list|>
name|oneFieldsToFlush
init|=
operator|new
name|HashMap
argument_list|<
name|FieldInfo
argument_list|,
name|DocFieldConsumerPerField
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|FieldInfo
argument_list|,
name|DocFieldConsumerPerField
argument_list|>
name|twoFieldsToFlush
init|=
operator|new
name|HashMap
argument_list|<
name|FieldInfo
argument_list|,
name|DocFieldConsumerPerField
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|FieldInfo
argument_list|,
name|DocFieldConsumerPerField
argument_list|>
name|fieldToFlush
range|:
name|fieldsToFlush
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|DocFieldConsumersPerField
name|perField
init|=
operator|(
name|DocFieldConsumersPerField
operator|)
name|fieldToFlush
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|oneFieldsToFlush
operator|.
name|put
argument_list|(
name|fieldToFlush
operator|.
name|getKey
argument_list|()
argument_list|,
name|perField
operator|.
name|one
argument_list|)
expr_stmt|;
name|twoFieldsToFlush
operator|.
name|put
argument_list|(
name|fieldToFlush
operator|.
name|getKey
argument_list|()
argument_list|,
name|perField
operator|.
name|two
argument_list|)
expr_stmt|;
block|}
name|one
operator|.
name|flush
argument_list|(
name|oneFieldsToFlush
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|two
operator|.
name|flush
argument_list|(
name|twoFieldsToFlush
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|closeDocStore
specifier|public
name|void
name|closeDocStore
parameter_list|(
name|SegmentWriteState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|one
operator|.
name|closeDocStore
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|two
operator|.
name|closeDocStore
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|abort
specifier|public
name|void
name|abort
parameter_list|()
block|{
try|try
block|{
name|one
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|two
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|freeRAM
specifier|public
name|boolean
name|freeRAM
parameter_list|()
block|{
name|boolean
name|any
init|=
name|one
operator|.
name|freeRAM
argument_list|()
decl_stmt|;
name|any
operator||=
name|two
operator|.
name|freeRAM
argument_list|()
expr_stmt|;
return|return
name|any
return|;
block|}
DECL|field|docFreeList
name|PerDoc
index|[]
name|docFreeList
init|=
operator|new
name|PerDoc
index|[
literal|1
index|]
decl_stmt|;
DECL|field|freeCount
name|int
name|freeCount
decl_stmt|;
DECL|field|allocCount
name|int
name|allocCount
decl_stmt|;
DECL|method|getPerDoc
name|PerDoc
name|getPerDoc
parameter_list|()
block|{
if|if
condition|(
name|freeCount
operator|==
literal|0
condition|)
block|{
name|allocCount
operator|++
expr_stmt|;
if|if
condition|(
name|allocCount
operator|>
name|docFreeList
operator|.
name|length
condition|)
block|{
comment|// Grow our free list up front to make sure we have
comment|// enough space to recycle all outstanding PerDoc
comment|// instances
assert|assert
name|allocCount
operator|==
literal|1
operator|+
name|docFreeList
operator|.
name|length
assert|;
name|docFreeList
operator|=
operator|new
name|PerDoc
index|[
name|ArrayUtil
operator|.
name|oversize
argument_list|(
name|allocCount
argument_list|,
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_REF
argument_list|)
index|]
expr_stmt|;
block|}
return|return
operator|new
name|PerDoc
argument_list|()
return|;
block|}
else|else
return|return
name|docFreeList
index|[
operator|--
name|freeCount
index|]
return|;
block|}
DECL|method|freePerDoc
name|void
name|freePerDoc
parameter_list|(
name|PerDoc
name|perDoc
parameter_list|)
block|{
assert|assert
name|freeCount
operator|<
name|docFreeList
operator|.
name|length
assert|;
name|docFreeList
index|[
name|freeCount
operator|++
index|]
operator|=
name|perDoc
expr_stmt|;
block|}
DECL|class|PerDoc
class|class
name|PerDoc
extends|extends
name|DocumentsWriterPerThread
operator|.
name|DocWriter
block|{
DECL|field|writerOne
name|DocumentsWriterPerThread
operator|.
name|DocWriter
name|writerOne
decl_stmt|;
DECL|field|writerTwo
name|DocumentsWriterPerThread
operator|.
name|DocWriter
name|writerTwo
decl_stmt|;
annotation|@
name|Override
DECL|method|sizeInBytes
specifier|public
name|long
name|sizeInBytes
parameter_list|()
block|{
return|return
name|writerOne
operator|.
name|sizeInBytes
argument_list|()
operator|+
name|writerTwo
operator|.
name|sizeInBytes
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|finish
specifier|public
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
try|try
block|{
name|writerOne
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|writerTwo
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|freePerDoc
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|abort
specifier|public
name|void
name|abort
parameter_list|()
block|{
try|try
block|{
try|try
block|{
name|writerOne
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|writerTwo
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|freePerDoc
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|finishDocument
specifier|public
name|DocumentsWriterPerThread
operator|.
name|DocWriter
name|finishDocument
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|DocumentsWriterPerThread
operator|.
name|DocWriter
name|oneDoc
init|=
name|one
operator|.
name|finishDocument
argument_list|()
decl_stmt|;
specifier|final
name|DocumentsWriterPerThread
operator|.
name|DocWriter
name|twoDoc
init|=
name|two
operator|.
name|finishDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|oneDoc
operator|==
literal|null
condition|)
return|return
name|twoDoc
return|;
elseif|else
if|if
condition|(
name|twoDoc
operator|==
literal|null
condition|)
return|return
name|oneDoc
return|;
else|else
block|{
name|DocFieldConsumers
operator|.
name|PerDoc
name|both
init|=
name|getPerDoc
argument_list|()
decl_stmt|;
name|both
operator|.
name|docID
operator|=
name|docState
operator|.
name|docID
expr_stmt|;
assert|assert
name|oneDoc
operator|.
name|docID
operator|==
name|docState
operator|.
name|docID
assert|;
assert|assert
name|twoDoc
operator|.
name|docID
operator|==
name|docState
operator|.
name|docID
assert|;
name|both
operator|.
name|writerOne
operator|=
name|oneDoc
expr_stmt|;
name|both
operator|.
name|writerTwo
operator|=
name|twoDoc
expr_stmt|;
return|return
name|both
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|startDocument
specifier|public
name|void
name|startDocument
parameter_list|()
throws|throws
name|IOException
block|{
name|one
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|two
operator|.
name|startDocument
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addField
specifier|public
name|DocFieldConsumerPerField
name|addField
parameter_list|(
name|FieldInfo
name|fi
parameter_list|)
block|{
return|return
operator|new
name|DocFieldConsumersPerField
argument_list|(
name|this
argument_list|,
name|fi
argument_list|,
name|one
operator|.
name|addField
argument_list|(
name|fi
argument_list|)
argument_list|,
name|two
operator|.
name|addField
argument_list|(
name|fi
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class
end_unit
