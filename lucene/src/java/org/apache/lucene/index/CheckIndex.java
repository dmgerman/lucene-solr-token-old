begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|BlockTreeTermsReader
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|Codec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_comment
comment|// for javadocs
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
operator|.
name|SortedSource
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
operator|.
name|Source
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import
begin_comment
comment|// for javadocs
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CommandLineUtil
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import
begin_comment
comment|/**  * Basic tool and API to check the health of an index and  * write a new segments file that removes reference to  * problematic segments.  *   *<p>As this tool checks every byte in the index, on a large  * index it can take quite a long time to run.  *  * @lucene.experimental Please make a complete backup of your  * index before using this to fix your index!  */
end_comment
begin_class
DECL|class|CheckIndex
specifier|public
class|class
name|CheckIndex
block|{
DECL|field|infoStream
specifier|private
name|PrintStream
name|infoStream
decl_stmt|;
DECL|field|dir
specifier|private
name|Directory
name|dir
decl_stmt|;
comment|/**    * Returned from {@link #checkIndex()} detailing the health and status of the index.    *    * @lucene.experimental    **/
DECL|class|Status
specifier|public
specifier|static
class|class
name|Status
block|{
comment|/** True if no problems were found with the index. */
DECL|field|clean
specifier|public
name|boolean
name|clean
decl_stmt|;
comment|/** True if we were unable to locate and load the segments_N file. */
DECL|field|missingSegments
specifier|public
name|boolean
name|missingSegments
decl_stmt|;
comment|/** True if we were unable to open the segments_N file. */
DECL|field|cantOpenSegments
specifier|public
name|boolean
name|cantOpenSegments
decl_stmt|;
comment|/** True if we were unable to read the version number from segments_N file. */
DECL|field|missingSegmentVersion
specifier|public
name|boolean
name|missingSegmentVersion
decl_stmt|;
comment|/** Name of latest segments_N file in the index. */
DECL|field|segmentsFileName
specifier|public
name|String
name|segmentsFileName
decl_stmt|;
comment|/** Number of segments in the index. */
DECL|field|numSegments
specifier|public
name|int
name|numSegments
decl_stmt|;
comment|/** String description of the version of the index. */
DECL|field|segmentFormat
specifier|public
name|String
name|segmentFormat
decl_stmt|;
comment|/** Empty unless you passed specific segments list to check as optional 3rd argument.      *  @see CheckIndex#checkIndex(List) */
DECL|field|segmentsChecked
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|segmentsChecked
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/** True if the index was created with a newer version of Lucene than the CheckIndex tool. */
DECL|field|toolOutOfDate
specifier|public
name|boolean
name|toolOutOfDate
decl_stmt|;
comment|/** List of {@link SegmentInfoStatus} instances, detailing status of each segment. */
DECL|field|segmentInfos
specifier|public
name|List
argument_list|<
name|SegmentInfoStatus
argument_list|>
name|segmentInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|SegmentInfoStatus
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Directory index is in. */
DECL|field|dir
specifier|public
name|Directory
name|dir
decl_stmt|;
comment|/**       * SegmentInfos instance containing only segments that      * had no problems (this is used with the {@link CheckIndex#fixIndex}       * method to repair the index.       */
DECL|field|newSegments
name|SegmentInfos
name|newSegments
decl_stmt|;
comment|/** How many documents will be lost to bad segments. */
DECL|field|totLoseDocCount
specifier|public
name|int
name|totLoseDocCount
decl_stmt|;
comment|/** How many bad segments were found. */
DECL|field|numBadSegments
specifier|public
name|int
name|numBadSegments
decl_stmt|;
comment|/** True if we checked only specific segments ({@link      * #checkIndex(List)}) was called with non-null      * argument). */
DECL|field|partial
specifier|public
name|boolean
name|partial
decl_stmt|;
comment|/** The greatest segment name. */
DECL|field|maxSegmentName
specifier|public
name|int
name|maxSegmentName
decl_stmt|;
comment|/** Whether the SegmentInfos.counter is greater than any of the segments' names. */
DECL|field|validCounter
specifier|public
name|boolean
name|validCounter
decl_stmt|;
comment|/** Holds the userData of the last commit in the index */
DECL|field|userData
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|userData
decl_stmt|;
comment|/** Holds the status of each segment in the index.      *  See {@link #segmentInfos}.      *      *<p><b>WARNING</b>: this API is new and experimental and is      * subject to suddenly change in the next release.      */
DECL|class|SegmentInfoStatus
specifier|public
specifier|static
class|class
name|SegmentInfoStatus
block|{
comment|/** Name of the segment. */
DECL|field|name
specifier|public
name|String
name|name
decl_stmt|;
comment|/** Codec used to read this segment. */
DECL|field|codec
specifier|public
name|Codec
name|codec
decl_stmt|;
comment|/** Document count (does not take deletions into account). */
DECL|field|docCount
specifier|public
name|int
name|docCount
decl_stmt|;
comment|/** True if segment is compound file format. */
DECL|field|compound
specifier|public
name|boolean
name|compound
decl_stmt|;
comment|/** Number of files referenced by this segment. */
DECL|field|numFiles
specifier|public
name|int
name|numFiles
decl_stmt|;
comment|/** Net size (MB) of the files referenced by this        *  segment. */
DECL|field|sizeMB
specifier|public
name|double
name|sizeMB
decl_stmt|;
comment|/** Doc store offset, if this segment shares the doc        *  store files (stored fields and term vectors) with        *  other segments.  This is -1 if it does not share. */
DECL|field|docStoreOffset
specifier|public
name|int
name|docStoreOffset
init|=
operator|-
literal|1
decl_stmt|;
comment|/** String of the shared doc store segment, or null if        *  this segment does not share the doc store files. */
DECL|field|docStoreSegment
specifier|public
name|String
name|docStoreSegment
decl_stmt|;
comment|/** True if the shared doc store files are compound file        *  format. */
DECL|field|docStoreCompoundFile
specifier|public
name|boolean
name|docStoreCompoundFile
decl_stmt|;
comment|/** True if this segment has pending deletions. */
DECL|field|hasDeletions
specifier|public
name|boolean
name|hasDeletions
decl_stmt|;
comment|/** Name of the current deletions file name. */
DECL|field|deletionsFileName
specifier|public
name|String
name|deletionsFileName
decl_stmt|;
comment|/** Number of deleted documents. */
DECL|field|numDeleted
specifier|public
name|int
name|numDeleted
decl_stmt|;
comment|/** True if we were able to open a SegmentReader on this        *  segment. */
DECL|field|openReaderPassed
specifier|public
name|boolean
name|openReaderPassed
decl_stmt|;
comment|/** Number of fields in this segment. */
DECL|field|numFields
name|int
name|numFields
decl_stmt|;
comment|/** True if at least one of the fields in this segment        *  has position data        *  @see FieldType#setIndexOptions(org.apache.lucene.index.FieldInfo.IndexOptions) */
DECL|field|hasProx
specifier|public
name|boolean
name|hasProx
decl_stmt|;
comment|/** Map that includes certain        *  debugging details that IndexWriter records into        *  each segment it creates */
DECL|field|diagnostics
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|diagnostics
decl_stmt|;
comment|/** Status for testing of field norms (null if field norms could not be tested). */
DECL|field|fieldNormStatus
specifier|public
name|FieldNormStatus
name|fieldNormStatus
decl_stmt|;
comment|/** Status for testing of indexed terms (null if indexed terms could not be tested). */
DECL|field|termIndexStatus
specifier|public
name|TermIndexStatus
name|termIndexStatus
decl_stmt|;
comment|/** Status for testing of stored fields (null if stored fields could not be tested). */
DECL|field|storedFieldStatus
specifier|public
name|StoredFieldStatus
name|storedFieldStatus
decl_stmt|;
comment|/** Status for testing of term vectors (null if term vectors could not be tested). */
DECL|field|termVectorStatus
specifier|public
name|TermVectorStatus
name|termVectorStatus
decl_stmt|;
comment|/** Status for testing of DocValues (null if DocValues could not be tested). */
DECL|field|docValuesStatus
specifier|public
name|DocValuesStatus
name|docValuesStatus
decl_stmt|;
block|}
comment|/**      * Status from testing field norms.      */
DECL|class|FieldNormStatus
specifier|public
specifier|static
specifier|final
class|class
name|FieldNormStatus
block|{
comment|/** Number of fields successfully tested */
DECL|field|totFields
specifier|public
name|long
name|totFields
init|=
literal|0L
decl_stmt|;
comment|/** Exception thrown during term index test (null on success) */
DECL|field|error
specifier|public
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
block|}
comment|/**      * Status from testing term index.      */
DECL|class|TermIndexStatus
specifier|public
specifier|static
specifier|final
class|class
name|TermIndexStatus
block|{
comment|/** Total term count */
DECL|field|termCount
specifier|public
name|long
name|termCount
init|=
literal|0L
decl_stmt|;
comment|/** Total frequency across all terms. */
DECL|field|totFreq
specifier|public
name|long
name|totFreq
init|=
literal|0L
decl_stmt|;
comment|/** Total number of positions. */
DECL|field|totPos
specifier|public
name|long
name|totPos
init|=
literal|0L
decl_stmt|;
comment|/** Exception thrown during term index test (null on success) */
DECL|field|error
specifier|public
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
DECL|field|blockTreeStats
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|BlockTreeTermsReader
operator|.
name|Stats
argument_list|>
name|blockTreeStats
init|=
literal|null
decl_stmt|;
block|}
comment|/**      * Status from testing stored fields.      */
DECL|class|StoredFieldStatus
specifier|public
specifier|static
specifier|final
class|class
name|StoredFieldStatus
block|{
comment|/** Number of documents tested. */
DECL|field|docCount
specifier|public
name|int
name|docCount
init|=
literal|0
decl_stmt|;
comment|/** Total number of stored fields tested. */
DECL|field|totFields
specifier|public
name|long
name|totFields
init|=
literal|0
decl_stmt|;
comment|/** Exception thrown during stored fields test (null on success) */
DECL|field|error
specifier|public
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
block|}
comment|/**      * Status from testing stored fields.      */
DECL|class|TermVectorStatus
specifier|public
specifier|static
specifier|final
class|class
name|TermVectorStatus
block|{
comment|/** Number of documents tested. */
DECL|field|docCount
specifier|public
name|int
name|docCount
init|=
literal|0
decl_stmt|;
comment|/** Total number of term vectors tested. */
DECL|field|totVectors
specifier|public
name|long
name|totVectors
init|=
literal|0
decl_stmt|;
comment|/** Exception thrown during term vector test (null on success) */
DECL|field|error
specifier|public
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
block|}
DECL|class|DocValuesStatus
specifier|public
specifier|static
specifier|final
class|class
name|DocValuesStatus
block|{
comment|/** Number of documents tested. */
DECL|field|docCount
specifier|public
name|int
name|docCount
decl_stmt|;
comment|/** Total number of docValues tested. */
DECL|field|totalValueFields
specifier|public
name|long
name|totalValueFields
decl_stmt|;
comment|/** Exception thrown during doc values test (null on success) */
DECL|field|error
specifier|public
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
block|}
block|}
comment|/** Create a new CheckIndex on the directory. */
DECL|method|CheckIndex
specifier|public
name|CheckIndex
parameter_list|(
name|Directory
name|dir
parameter_list|)
block|{
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
name|infoStream
operator|=
literal|null
expr_stmt|;
block|}
DECL|field|verbose
specifier|private
name|boolean
name|verbose
decl_stmt|;
comment|/** Set infoStream where messages should go.  If null, no    *  messages are printed.  If verbose is true then more    *  details are printed. */
DECL|method|setInfoStream
specifier|public
name|void
name|setInfoStream
parameter_list|(
name|PrintStream
name|out
parameter_list|,
name|boolean
name|verbose
parameter_list|)
block|{
name|infoStream
operator|=
name|out
expr_stmt|;
name|this
operator|.
name|verbose
operator|=
name|verbose
expr_stmt|;
block|}
comment|/** Set infoStream where messages should go. See {@link #setInfoStream(PrintStream,boolean)}. */
DECL|method|setInfoStream
specifier|public
name|void
name|setInfoStream
parameter_list|(
name|PrintStream
name|out
parameter_list|)
block|{
name|setInfoStream
argument_list|(
name|out
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|msg
specifier|private
name|void
name|msg
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|infoStream
operator|.
name|println
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
comment|/** Returns a {@link Status} instance detailing    *  the state of the index.    *    *<p>As this method checks every byte in the index, on a large    *  index it can take quite a long time to run.    *    *<p><b>WARNING</b>: make sure    *  you only call this when the index is not opened by any    *  writer. */
DECL|method|checkIndex
specifier|public
name|Status
name|checkIndex
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|checkIndex
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/** Returns a {@link Status} instance detailing    *  the state of the index.    *     *  @param onlySegments list of specific segment names to check    *    *<p>As this method checks every byte in the specified    *  segments, on a large index it can take quite a long    *  time to run.    *    *<p><b>WARNING</b>: make sure    *  you only call this when the index is not opened by any    *  writer. */
DECL|method|checkIndex
specifier|public
name|Status
name|checkIndex
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|onlySegments
parameter_list|)
throws|throws
name|IOException
block|{
name|NumberFormat
name|nf
init|=
name|NumberFormat
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|SegmentInfos
name|sis
init|=
operator|new
name|SegmentInfos
argument_list|()
decl_stmt|;
name|Status
name|result
init|=
operator|new
name|Status
argument_list|()
decl_stmt|;
name|result
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
try|try
block|{
name|sis
operator|.
name|read
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|msg
argument_list|(
literal|"ERROR: could not read any segments file in directory"
argument_list|)
expr_stmt|;
name|result
operator|.
name|missingSegments
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|t
operator|.
name|printStackTrace
argument_list|(
name|infoStream
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|// find the oldest and newest segment versions
name|String
name|oldest
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|,
name|newest
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
name|String
name|oldSegs
init|=
literal|null
decl_stmt|;
name|boolean
name|foundNonNullVersion
init|=
literal|false
decl_stmt|;
name|Comparator
argument_list|<
name|String
argument_list|>
name|versionComparator
init|=
name|StringHelper
operator|.
name|getVersionComparator
argument_list|()
decl_stmt|;
for|for
control|(
name|SegmentInfo
name|si
range|:
name|sis
control|)
block|{
name|String
name|version
init|=
name|si
operator|.
name|getVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
comment|// pre-3.1 segment
name|oldSegs
operator|=
literal|"pre-3.1"
expr_stmt|;
block|}
else|else
block|{
name|foundNonNullVersion
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|versionComparator
operator|.
name|compare
argument_list|(
name|version
argument_list|,
name|oldest
argument_list|)
operator|<
literal|0
condition|)
block|{
name|oldest
operator|=
name|version
expr_stmt|;
block|}
if|if
condition|(
name|versionComparator
operator|.
name|compare
argument_list|(
name|version
argument_list|,
name|newest
argument_list|)
operator|>
literal|0
condition|)
block|{
name|newest
operator|=
name|version
expr_stmt|;
block|}
block|}
block|}
specifier|final
name|int
name|numSegments
init|=
name|sis
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|String
name|segmentsFileName
init|=
name|sis
operator|.
name|getCurrentSegmentFileName
argument_list|()
decl_stmt|;
comment|// note: we only read the format byte (required preamble) here!
name|IndexInput
name|input
init|=
literal|null
decl_stmt|;
try|try
block|{
name|input
operator|=
name|dir
operator|.
name|openInput
argument_list|(
name|segmentsFileName
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|msg
argument_list|(
literal|"ERROR: could not open segments file in directory"
argument_list|)
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|t
operator|.
name|printStackTrace
argument_list|(
name|infoStream
argument_list|)
expr_stmt|;
name|result
operator|.
name|cantOpenSegments
operator|=
literal|true
expr_stmt|;
return|return
name|result
return|;
block|}
name|int
name|format
init|=
literal|0
decl_stmt|;
try|try
block|{
name|format
operator|=
name|input
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|msg
argument_list|(
literal|"ERROR: could not read segment file version in directory"
argument_list|)
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|t
operator|.
name|printStackTrace
argument_list|(
name|infoStream
argument_list|)
expr_stmt|;
name|result
operator|.
name|missingSegmentVersion
operator|=
literal|true
expr_stmt|;
return|return
name|result
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|String
name|sFormat
init|=
literal|""
decl_stmt|;
name|boolean
name|skip
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|format
operator|==
name|SegmentInfos
operator|.
name|FORMAT_DIAGNOSTICS
condition|)
block|{
name|sFormat
operator|=
literal|"FORMAT_DIAGNOSTICS [Lucene 2.9]"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|format
operator|==
name|SegmentInfos
operator|.
name|FORMAT_HAS_VECTORS
condition|)
block|{
name|sFormat
operator|=
literal|"FORMAT_HAS_VECTORS [Lucene 3.1]"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|format
operator|==
name|SegmentInfos
operator|.
name|FORMAT_3_1
condition|)
block|{
name|sFormat
operator|=
literal|"FORMAT_3_1 [Lucene 3.1+]"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|format
operator|==
name|SegmentInfos
operator|.
name|FORMAT_4_0
condition|)
block|{
name|sFormat
operator|=
literal|"FORMAT_4_0 [Lucene 4.0]"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|format
operator|==
name|SegmentInfos
operator|.
name|FORMAT_CURRENT
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"BUG: You should update this tool!"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|format
operator|<
name|SegmentInfos
operator|.
name|FORMAT_CURRENT
condition|)
block|{
name|sFormat
operator|=
literal|"int="
operator|+
name|format
operator|+
literal|" [newer version of Lucene than this tool supports]"
expr_stmt|;
name|skip
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|format
operator|>
name|SegmentInfos
operator|.
name|FORMAT_MINIMUM
condition|)
block|{
name|sFormat
operator|=
literal|"int="
operator|+
name|format
operator|+
literal|" [older version of Lucene than this tool supports]"
expr_stmt|;
name|skip
operator|=
literal|true
expr_stmt|;
block|}
name|result
operator|.
name|segmentsFileName
operator|=
name|segmentsFileName
expr_stmt|;
name|result
operator|.
name|numSegments
operator|=
name|numSegments
expr_stmt|;
name|result
operator|.
name|segmentFormat
operator|=
name|sFormat
expr_stmt|;
name|result
operator|.
name|userData
operator|=
name|sis
operator|.
name|getUserData
argument_list|()
expr_stmt|;
name|String
name|userDataString
decl_stmt|;
if|if
condition|(
name|sis
operator|.
name|getUserData
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|userDataString
operator|=
literal|" userData="
operator|+
name|sis
operator|.
name|getUserData
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|userDataString
operator|=
literal|""
expr_stmt|;
block|}
name|String
name|versionString
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|oldSegs
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|foundNonNullVersion
condition|)
block|{
name|versionString
operator|=
literal|"versions=["
operator|+
name|oldSegs
operator|+
literal|" .. "
operator|+
name|newest
operator|+
literal|"]"
expr_stmt|;
block|}
else|else
block|{
name|versionString
operator|=
literal|"version="
operator|+
name|oldSegs
expr_stmt|;
block|}
block|}
else|else
block|{
name|versionString
operator|=
name|oldest
operator|.
name|equals
argument_list|(
name|newest
argument_list|)
condition|?
operator|(
literal|"version="
operator|+
name|oldest
operator|)
else|:
operator|(
literal|"versions=["
operator|+
name|oldest
operator|+
literal|" .. "
operator|+
name|newest
operator|+
literal|"]"
operator|)
expr_stmt|;
block|}
name|msg
argument_list|(
literal|"Segments file="
operator|+
name|segmentsFileName
operator|+
literal|" numSegments="
operator|+
name|numSegments
operator|+
literal|" "
operator|+
name|versionString
operator|+
literal|" format="
operator|+
name|sFormat
operator|+
name|userDataString
argument_list|)
expr_stmt|;
if|if
condition|(
name|onlySegments
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|partial
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|infoStream
operator|.
name|print
argument_list|(
literal|"\nChecking only these segments:"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|onlySegments
control|)
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|infoStream
operator|.
name|print
argument_list|(
literal|" "
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|segmentsChecked
operator|.
name|addAll
argument_list|(
name|onlySegments
argument_list|)
expr_stmt|;
name|msg
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|skip
condition|)
block|{
name|msg
argument_list|(
literal|"\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting"
argument_list|)
expr_stmt|;
name|result
operator|.
name|toolOutOfDate
operator|=
literal|true
expr_stmt|;
return|return
name|result
return|;
block|}
name|result
operator|.
name|newSegments
operator|=
operator|(
name|SegmentInfos
operator|)
name|sis
operator|.
name|clone
argument_list|()
expr_stmt|;
name|result
operator|.
name|newSegments
operator|.
name|clear
argument_list|()
expr_stmt|;
name|result
operator|.
name|maxSegmentName
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSegments
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|SegmentInfo
name|info
init|=
name|sis
operator|.
name|info
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|segmentName
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|info
operator|.
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Character
operator|.
name|MAX_RADIX
argument_list|)
decl_stmt|;
if|if
condition|(
name|segmentName
operator|>
name|result
operator|.
name|maxSegmentName
condition|)
block|{
name|result
operator|.
name|maxSegmentName
operator|=
name|segmentName
expr_stmt|;
block|}
if|if
condition|(
name|onlySegments
operator|!=
literal|null
operator|&&
operator|!
name|onlySegments
operator|.
name|contains
argument_list|(
name|info
operator|.
name|name
argument_list|)
condition|)
continue|continue;
name|Status
operator|.
name|SegmentInfoStatus
name|segInfoStat
init|=
operator|new
name|Status
operator|.
name|SegmentInfoStatus
argument_list|()
decl_stmt|;
name|result
operator|.
name|segmentInfos
operator|.
name|add
argument_list|(
name|segInfoStat
argument_list|)
expr_stmt|;
name|msg
argument_list|(
literal|"  "
operator|+
operator|(
literal|1
operator|+
name|i
operator|)
operator|+
literal|" of "
operator|+
name|numSegments
operator|+
literal|": name="
operator|+
name|info
operator|.
name|name
operator|+
literal|" docCount="
operator|+
name|info
operator|.
name|docCount
argument_list|)
expr_stmt|;
name|segInfoStat
operator|.
name|name
operator|=
name|info
operator|.
name|name
expr_stmt|;
name|segInfoStat
operator|.
name|docCount
operator|=
name|info
operator|.
name|docCount
expr_stmt|;
name|int
name|toLoseDocCount
init|=
name|info
operator|.
name|docCount
decl_stmt|;
name|SegmentReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|Codec
name|codec
init|=
name|info
operator|.
name|getCodec
argument_list|()
decl_stmt|;
name|msg
argument_list|(
literal|"    codec="
operator|+
name|codec
argument_list|)
expr_stmt|;
name|segInfoStat
operator|.
name|codec
operator|=
name|codec
expr_stmt|;
name|msg
argument_list|(
literal|"    compound="
operator|+
name|info
operator|.
name|getUseCompoundFile
argument_list|()
argument_list|)
expr_stmt|;
name|segInfoStat
operator|.
name|compound
operator|=
name|info
operator|.
name|getUseCompoundFile
argument_list|()
expr_stmt|;
name|msg
argument_list|(
literal|"    hasProx="
operator|+
name|info
operator|.
name|getHasProx
argument_list|()
argument_list|)
expr_stmt|;
name|segInfoStat
operator|.
name|hasProx
operator|=
name|info
operator|.
name|getHasProx
argument_list|()
expr_stmt|;
name|msg
argument_list|(
literal|"    numFiles="
operator|+
name|info
operator|.
name|files
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|segInfoStat
operator|.
name|numFiles
operator|=
name|info
operator|.
name|files
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|segInfoStat
operator|.
name|sizeMB
operator|=
name|info
operator|.
name|sizeInBytes
argument_list|()
operator|/
operator|(
literal|1024.
operator|*
literal|1024.
operator|)
expr_stmt|;
name|msg
argument_list|(
literal|"    size (MB)="
operator|+
name|nf
operator|.
name|format
argument_list|(
name|segInfoStat
operator|.
name|sizeMB
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|diagnostics
init|=
name|info
operator|.
name|getDiagnostics
argument_list|()
decl_stmt|;
name|segInfoStat
operator|.
name|diagnostics
operator|=
name|diagnostics
expr_stmt|;
if|if
condition|(
name|diagnostics
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|msg
argument_list|(
literal|"    diagnostics = "
operator|+
name|diagnostics
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|docStoreOffset
init|=
name|info
operator|.
name|getDocStoreOffset
argument_list|()
decl_stmt|;
if|if
condition|(
name|docStoreOffset
operator|!=
operator|-
literal|1
condition|)
block|{
name|msg
argument_list|(
literal|"    docStoreOffset="
operator|+
name|docStoreOffset
argument_list|)
expr_stmt|;
name|segInfoStat
operator|.
name|docStoreOffset
operator|=
name|docStoreOffset
expr_stmt|;
name|msg
argument_list|(
literal|"    docStoreSegment="
operator|+
name|info
operator|.
name|getDocStoreSegment
argument_list|()
argument_list|)
expr_stmt|;
name|segInfoStat
operator|.
name|docStoreSegment
operator|=
name|info
operator|.
name|getDocStoreSegment
argument_list|()
expr_stmt|;
name|msg
argument_list|(
literal|"    docStoreIsCompoundFile="
operator|+
name|info
operator|.
name|getDocStoreIsCompoundFile
argument_list|()
argument_list|)
expr_stmt|;
name|segInfoStat
operator|.
name|docStoreCompoundFile
operator|=
name|info
operator|.
name|getDocStoreIsCompoundFile
argument_list|()
expr_stmt|;
block|}
specifier|final
name|String
name|delFileName
init|=
name|info
operator|.
name|getDelFileName
argument_list|()
decl_stmt|;
if|if
condition|(
name|delFileName
operator|==
literal|null
condition|)
block|{
name|msg
argument_list|(
literal|"    no deletions"
argument_list|)
expr_stmt|;
name|segInfoStat
operator|.
name|hasDeletions
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|msg
argument_list|(
literal|"    has deletions [delFileName="
operator|+
name|delFileName
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|segInfoStat
operator|.
name|hasDeletions
operator|=
literal|true
expr_stmt|;
name|segInfoStat
operator|.
name|deletionsFileName
operator|=
name|delFileName
expr_stmt|;
block|}
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|infoStream
operator|.
name|print
argument_list|(
literal|"    test: open reader........."
argument_list|)
expr_stmt|;
name|reader
operator|=
name|SegmentReader
operator|.
name|get
argument_list|(
name|info
argument_list|,
name|IndexReader
operator|.
name|DEFAULT_TERMS_INDEX_DIVISOR
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|segInfoStat
operator|.
name|openReaderPassed
operator|=
literal|true
expr_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|reader
operator|.
name|numDocs
argument_list|()
decl_stmt|;
name|toLoseDocCount
operator|=
name|numDocs
expr_stmt|;
if|if
condition|(
name|reader
operator|.
name|hasDeletions
argument_list|()
condition|)
block|{
if|if
condition|(
name|reader
operator|.
name|liveDocs
operator|.
name|count
argument_list|()
operator|!=
name|info
operator|.
name|docCount
operator|-
name|info
operator|.
name|getDelCount
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"delete count mismatch: info="
operator|+
operator|(
name|info
operator|.
name|docCount
operator|-
name|info
operator|.
name|getDelCount
argument_list|()
operator|)
operator|+
literal|" vs reader="
operator|+
name|reader
operator|.
name|liveDocs
operator|.
name|count
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|info
operator|.
name|docCount
operator|-
name|reader
operator|.
name|liveDocs
operator|.
name|count
argument_list|()
operator|)
operator|>
name|reader
operator|.
name|maxDoc
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"too many deleted docs: maxDoc()="
operator|+
name|reader
operator|.
name|maxDoc
argument_list|()
operator|+
literal|" vs del count="
operator|+
operator|(
name|info
operator|.
name|docCount
operator|-
name|reader
operator|.
name|liveDocs
operator|.
name|count
argument_list|()
operator|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|info
operator|.
name|docCount
operator|-
name|numDocs
operator|!=
name|info
operator|.
name|getDelCount
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"delete count mismatch: info="
operator|+
name|info
operator|.
name|getDelCount
argument_list|()
operator|+
literal|" vs reader="
operator|+
operator|(
name|info
operator|.
name|docCount
operator|-
name|numDocs
operator|)
argument_list|)
throw|;
block|}
name|segInfoStat
operator|.
name|numDeleted
operator|=
name|info
operator|.
name|docCount
operator|-
name|numDocs
expr_stmt|;
name|msg
argument_list|(
literal|"OK ["
operator|+
operator|(
name|segInfoStat
operator|.
name|numDeleted
operator|)
operator|+
literal|" deleted docs]"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|info
operator|.
name|getDelCount
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"delete count mismatch: info="
operator|+
name|info
operator|.
name|getDelCount
argument_list|()
operator|+
literal|" vs reader="
operator|+
operator|(
name|info
operator|.
name|docCount
operator|-
name|numDocs
operator|)
argument_list|)
throw|;
block|}
name|msg
argument_list|(
literal|"OK"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reader
operator|.
name|maxDoc
argument_list|()
operator|!=
name|info
operator|.
name|docCount
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"SegmentReader.maxDoc() "
operator|+
name|reader
operator|.
name|maxDoc
argument_list|()
operator|+
literal|" != SegmentInfos.docCount "
operator|+
name|info
operator|.
name|docCount
argument_list|)
throw|;
comment|// Test getFieldNames()
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|infoStream
operator|.
name|print
argument_list|(
literal|"    test: fields.............."
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|reader
operator|.
name|getFieldNames
argument_list|(
name|IndexReader
operator|.
name|FieldOption
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|msg
argument_list|(
literal|"OK ["
operator|+
name|fieldNames
operator|.
name|size
argument_list|()
operator|+
literal|" fields]"
argument_list|)
expr_stmt|;
name|segInfoStat
operator|.
name|numFields
operator|=
name|fieldNames
operator|.
name|size
argument_list|()
expr_stmt|;
comment|// Test Field Norms
name|segInfoStat
operator|.
name|fieldNormStatus
operator|=
name|testFieldNorms
argument_list|(
name|fieldNames
argument_list|,
name|reader
argument_list|)
expr_stmt|;
comment|// Test the Term Index
name|segInfoStat
operator|.
name|termIndexStatus
operator|=
name|testTermIndex
argument_list|(
name|reader
argument_list|)
expr_stmt|;
comment|// Test Stored Fields
name|segInfoStat
operator|.
name|storedFieldStatus
operator|=
name|testStoredFields
argument_list|(
name|info
argument_list|,
name|reader
argument_list|,
name|nf
argument_list|)
expr_stmt|;
comment|// Test Term Vectors
name|segInfoStat
operator|.
name|termVectorStatus
operator|=
name|testTermVectors
argument_list|(
name|info
argument_list|,
name|reader
argument_list|,
name|nf
argument_list|)
expr_stmt|;
name|segInfoStat
operator|.
name|docValuesStatus
operator|=
name|testDocValues
argument_list|(
name|info
argument_list|,
name|reader
argument_list|)
expr_stmt|;
comment|// Rethrow the first exception we encountered
comment|//  This will cause stats for failed segments to be incremented properly
if|if
condition|(
name|segInfoStat
operator|.
name|fieldNormStatus
operator|.
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Field Norm test failed"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|segInfoStat
operator|.
name|termIndexStatus
operator|.
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Term Index test failed"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|segInfoStat
operator|.
name|storedFieldStatus
operator|.
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Stored Field test failed"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|segInfoStat
operator|.
name|termVectorStatus
operator|.
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Term Vector test failed"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|segInfoStat
operator|.
name|docValuesStatus
operator|.
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"DocValues test failed"
argument_list|)
throw|;
block|}
name|msg
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|msg
argument_list|(
literal|"FAILED"
argument_list|)
expr_stmt|;
name|String
name|comment
decl_stmt|;
name|comment
operator|=
literal|"fixIndex() would remove reference to this segment"
expr_stmt|;
name|msg
argument_list|(
literal|"    WARNING: "
operator|+
name|comment
operator|+
literal|"; full exception:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
name|t
operator|.
name|printStackTrace
argument_list|(
name|infoStream
argument_list|)
expr_stmt|;
name|msg
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|result
operator|.
name|totLoseDocCount
operator|+=
name|toLoseDocCount
expr_stmt|;
name|result
operator|.
name|numBadSegments
operator|++
expr_stmt|;
continue|continue;
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Keeper
name|result
operator|.
name|newSegments
operator|.
name|add
argument_list|(
operator|(
name|SegmentInfo
operator|)
name|info
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|0
operator|==
name|result
operator|.
name|numBadSegments
condition|)
block|{
name|result
operator|.
name|clean
operator|=
literal|true
expr_stmt|;
block|}
else|else
name|msg
argument_list|(
literal|"WARNING: "
operator|+
name|result
operator|.
name|numBadSegments
operator|+
literal|" broken segments (containing "
operator|+
name|result
operator|.
name|totLoseDocCount
operator|+
literal|" documents) detected"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|result
operator|.
name|validCounter
operator|=
operator|(
name|result
operator|.
name|maxSegmentName
operator|<
name|sis
operator|.
name|counter
operator|)
operator|)
condition|)
block|{
name|result
operator|.
name|clean
operator|=
literal|false
expr_stmt|;
name|result
operator|.
name|newSegments
operator|.
name|counter
operator|=
name|result
operator|.
name|maxSegmentName
operator|+
literal|1
expr_stmt|;
name|msg
argument_list|(
literal|"ERROR: Next segment name counter "
operator|+
name|sis
operator|.
name|counter
operator|+
literal|" is not greater than max segment name "
operator|+
name|result
operator|.
name|maxSegmentName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|clean
condition|)
block|{
name|msg
argument_list|(
literal|"No problems were detected with this index.\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Test field norms.    */
DECL|method|testFieldNorms
specifier|private
name|Status
operator|.
name|FieldNormStatus
name|testFieldNorms
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|,
name|SegmentReader
name|reader
parameter_list|)
block|{
specifier|final
name|Status
operator|.
name|FieldNormStatus
name|status
init|=
operator|new
name|Status
operator|.
name|FieldNormStatus
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Test Field Norms
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|infoStream
operator|.
name|print
argument_list|(
literal|"    test: field norms........."
argument_list|)
expr_stmt|;
block|}
name|FieldInfos
name|infos
init|=
name|reader
operator|.
name|fieldInfos
argument_list|()
decl_stmt|;
name|byte
index|[]
name|b
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|fieldName
range|:
name|fieldNames
control|)
block|{
name|FieldInfo
name|info
init|=
name|infos
operator|.
name|fieldInfo
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|.
name|hasNorms
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|b
operator|=
name|reader
operator|.
name|norms
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|.
name|length
operator|!=
name|reader
operator|.
name|maxDoc
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"norms for field: "
operator|+
name|fieldName
operator|+
literal|" are of the wrong size"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|info
operator|.
name|isIndexed
operator|||
name|info
operator|.
name|omitNorms
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"field: "
operator|+
name|fieldName
operator|+
literal|" should omit norms but has them!"
argument_list|)
throw|;
block|}
operator|++
name|status
operator|.
name|totFields
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|reader
operator|.
name|norms
argument_list|(
name|fieldName
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"field: "
operator|+
name|fieldName
operator|+
literal|" should omit norms but has them!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|info
operator|.
name|isIndexed
operator|&&
operator|!
name|info
operator|.
name|omitNorms
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"field: "
operator|+
name|fieldName
operator|+
literal|" should have norms but omits them!"
argument_list|)
throw|;
block|}
block|}
block|}
name|msg
argument_list|(
literal|"OK ["
operator|+
name|status
operator|.
name|totFields
operator|+
literal|" fields]"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|msg
argument_list|(
literal|"ERROR ["
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|status
operator|.
name|error
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|infoStream
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|status
return|;
block|}
comment|/**    * Test the term index.    */
DECL|method|testTermIndex
specifier|private
name|Status
operator|.
name|TermIndexStatus
name|testTermIndex
parameter_list|(
name|SegmentReader
name|reader
parameter_list|)
block|{
specifier|final
name|Status
operator|.
name|TermIndexStatus
name|status
init|=
operator|new
name|Status
operator|.
name|TermIndexStatus
argument_list|()
decl_stmt|;
specifier|final
name|int
name|maxDoc
init|=
name|reader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
specifier|final
name|Bits
name|liveDocs
init|=
name|reader
operator|.
name|getLiveDocs
argument_list|()
decl_stmt|;
specifier|final
name|IndexSearcher
name|is
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|infoStream
operator|.
name|print
argument_list|(
literal|"    test: terms, freq, prox..."
argument_list|)
expr_stmt|;
block|}
name|int
name|computedFieldCount
init|=
literal|0
decl_stmt|;
specifier|final
name|Fields
name|fields
init|=
name|reader
operator|.
name|fields
argument_list|()
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
name|msg
argument_list|(
literal|"OK [no fields/terms]"
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
name|DocsEnum
name|docs
init|=
literal|null
decl_stmt|;
name|DocsEnum
name|docsAndFreqs
init|=
literal|null
decl_stmt|;
name|DocsAndPositionsEnum
name|postings
init|=
literal|null
decl_stmt|;
specifier|final
name|FieldsEnum
name|fieldsEnum
init|=
name|fields
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|String
name|field
init|=
name|fieldsEnum
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
break|break;
block|}
comment|// TODO: really the codec should not return a field
comment|// from FieldsEnum if it has to Terms... but we do
comment|// this today:
comment|// assert fields.terms(field) != null;
name|computedFieldCount
operator|++
expr_stmt|;
specifier|final
name|Terms
name|terms
init|=
name|fieldsEnum
operator|.
name|terms
argument_list|()
decl_stmt|;
if|if
condition|(
name|terms
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
specifier|final
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|hasOrd
init|=
literal|true
decl_stmt|;
specifier|final
name|long
name|termCountStart
init|=
name|status
operator|.
name|termCount
decl_stmt|;
name|BytesRef
name|lastTerm
init|=
literal|null
decl_stmt|;
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|termComp
init|=
name|terms
operator|.
name|getComparator
argument_list|()
decl_stmt|;
name|long
name|sumTotalTermFreq
init|=
literal|0
decl_stmt|;
name|long
name|sumDocFreq
init|=
literal|0
decl_stmt|;
name|FixedBitSet
name|visitedDocs
init|=
operator|new
name|FixedBitSet
argument_list|(
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|BytesRef
name|term
init|=
name|termsEnum
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
break|break;
block|}
comment|// make sure terms arrive in order according to
comment|// the comp
if|if
condition|(
name|lastTerm
operator|==
literal|null
condition|)
block|{
name|lastTerm
operator|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|termComp
operator|.
name|compare
argument_list|(
name|lastTerm
argument_list|,
name|term
argument_list|)
operator|>=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"terms out of order: lastTerm="
operator|+
name|lastTerm
operator|+
literal|" term="
operator|+
name|term
argument_list|)
throw|;
block|}
name|lastTerm
operator|.
name|copyBytes
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|docFreq
init|=
name|termsEnum
operator|.
name|docFreq
argument_list|()
decl_stmt|;
if|if
condition|(
name|docFreq
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"docfreq: "
operator|+
name|docFreq
operator|+
literal|" is out of bounds"
argument_list|)
throw|;
block|}
name|status
operator|.
name|totFreq
operator|+=
name|docFreq
expr_stmt|;
name|sumDocFreq
operator|+=
name|docFreq
expr_stmt|;
name|docs
operator|=
name|termsEnum
operator|.
name|docs
argument_list|(
name|liveDocs
argument_list|,
name|docs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|docsAndFreqs
operator|=
name|termsEnum
operator|.
name|docs
argument_list|(
name|liveDocs
argument_list|,
name|docsAndFreqs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|postings
operator|=
name|termsEnum
operator|.
name|docsAndPositions
argument_list|(
name|liveDocs
argument_list|,
name|postings
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasOrd
condition|)
block|{
name|long
name|ord
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|ord
operator|=
name|termsEnum
operator|.
name|ord
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|uoe
parameter_list|)
block|{
name|hasOrd
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|hasOrd
condition|)
block|{
specifier|final
name|long
name|ordExpected
init|=
name|status
operator|.
name|termCount
operator|-
name|termCountStart
decl_stmt|;
if|if
condition|(
name|ord
operator|!=
name|ordExpected
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"ord mismatch: TermsEnum has ord="
operator|+
name|ord
operator|+
literal|" vs actual="
operator|+
name|ordExpected
argument_list|)
throw|;
block|}
block|}
block|}
name|status
operator|.
name|termCount
operator|++
expr_stmt|;
specifier|final
name|DocsEnum
name|docs2
decl_stmt|;
specifier|final
name|DocsEnum
name|docsAndFreqs2
decl_stmt|;
specifier|final
name|boolean
name|hasPositions
decl_stmt|;
specifier|final
name|boolean
name|hasFreqs
decl_stmt|;
if|if
condition|(
name|postings
operator|!=
literal|null
condition|)
block|{
name|docs2
operator|=
name|postings
expr_stmt|;
name|docsAndFreqs2
operator|=
name|postings
expr_stmt|;
name|hasPositions
operator|=
literal|true
expr_stmt|;
name|hasFreqs
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|docsAndFreqs
operator|!=
literal|null
condition|)
block|{
name|docs2
operator|=
name|docsAndFreqs
expr_stmt|;
name|docsAndFreqs2
operator|=
name|docsAndFreqs
expr_stmt|;
name|hasPositions
operator|=
literal|false
expr_stmt|;
name|hasFreqs
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|docs2
operator|=
name|docs
expr_stmt|;
name|docsAndFreqs2
operator|=
literal|null
expr_stmt|;
name|hasPositions
operator|=
literal|false
expr_stmt|;
name|hasFreqs
operator|=
literal|false
expr_stmt|;
block|}
name|int
name|lastDoc
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|docCount
init|=
literal|0
decl_stmt|;
name|long
name|totalTermFreq
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|int
name|doc
init|=
name|docs2
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
break|break;
block|}
name|visitedDocs
operator|.
name|set
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|int
name|freq
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|hasFreqs
condition|)
block|{
name|freq
operator|=
name|docsAndFreqs2
operator|.
name|freq
argument_list|()
expr_stmt|;
if|if
condition|(
name|freq
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": doc "
operator|+
name|doc
operator|+
literal|": freq "
operator|+
name|freq
operator|+
literal|" is out of bounds"
argument_list|)
throw|;
block|}
name|status
operator|.
name|totPos
operator|+=
name|freq
expr_stmt|;
name|totalTermFreq
operator|+=
name|freq
expr_stmt|;
block|}
name|docCount
operator|++
expr_stmt|;
if|if
condition|(
name|doc
operator|<=
name|lastDoc
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": doc "
operator|+
name|doc
operator|+
literal|"<= lastDoc "
operator|+
name|lastDoc
argument_list|)
throw|;
block|}
if|if
condition|(
name|doc
operator|>=
name|maxDoc
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": doc "
operator|+
name|doc
operator|+
literal|">= maxDoc "
operator|+
name|maxDoc
argument_list|)
throw|;
block|}
name|lastDoc
operator|=
name|doc
expr_stmt|;
name|int
name|lastPos
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|hasPositions
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|freq
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|int
name|pos
init|=
name|postings
operator|.
name|nextPosition
argument_list|()
decl_stmt|;
if|if
condition|(
name|pos
operator|<
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": doc "
operator|+
name|doc
operator|+
literal|": pos "
operator|+
name|pos
operator|+
literal|" is out of bounds"
argument_list|)
throw|;
block|}
if|if
condition|(
name|pos
operator|<
name|lastPos
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": doc "
operator|+
name|doc
operator|+
literal|": pos "
operator|+
name|pos
operator|+
literal|"< lastPos "
operator|+
name|lastPos
argument_list|)
throw|;
block|}
name|lastPos
operator|=
name|pos
expr_stmt|;
if|if
condition|(
name|postings
operator|.
name|hasPayload
argument_list|()
condition|)
block|{
name|postings
operator|.
name|getPayload
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|final
name|long
name|totalTermFreq2
init|=
name|termsEnum
operator|.
name|totalTermFreq
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|hasTotalTermFreq
init|=
name|postings
operator|!=
literal|null
operator|&&
name|totalTermFreq2
operator|!=
operator|-
literal|1
decl_stmt|;
comment|// Re-count if there are deleted docs:
if|if
condition|(
name|reader
operator|.
name|hasDeletions
argument_list|()
condition|)
block|{
if|if
condition|(
name|hasFreqs
condition|)
block|{
specifier|final
name|DocsEnum
name|docsNoDel
init|=
name|termsEnum
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
name|docsAndFreqs
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|docCount
operator|=
literal|0
expr_stmt|;
name|totalTermFreq
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|docsNoDel
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|visitedDocs
operator|.
name|set
argument_list|(
name|docsNoDel
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|docCount
operator|++
expr_stmt|;
name|totalTermFreq
operator|+=
name|docsNoDel
operator|.
name|freq
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|DocsEnum
name|docsNoDel
init|=
name|termsEnum
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
name|docs
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|docCount
operator|=
literal|0
expr_stmt|;
name|totalTermFreq
operator|=
operator|-
literal|1
expr_stmt|;
while|while
condition|(
name|docsNoDel
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|visitedDocs
operator|.
name|set
argument_list|(
name|docsNoDel
operator|.
name|docID
argument_list|()
argument_list|)
expr_stmt|;
name|docCount
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|docCount
operator|!=
name|docFreq
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|" docFreq="
operator|+
name|docFreq
operator|+
literal|" != tot docs w/o deletions "
operator|+
name|docCount
argument_list|)
throw|;
block|}
if|if
condition|(
name|hasTotalTermFreq
condition|)
block|{
if|if
condition|(
name|totalTermFreq2
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"totalTermFreq: "
operator|+
name|totalTermFreq2
operator|+
literal|" is out of bounds"
argument_list|)
throw|;
block|}
name|sumTotalTermFreq
operator|+=
name|totalTermFreq
expr_stmt|;
if|if
condition|(
name|totalTermFreq
operator|!=
name|totalTermFreq2
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|" totalTermFreq="
operator|+
name|totalTermFreq2
operator|+
literal|" != recomputed totalTermFreq="
operator|+
name|totalTermFreq
argument_list|)
throw|;
block|}
block|}
comment|// Test skipping
if|if
condition|(
name|hasPositions
condition|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|7
condition|;
name|idx
operator|++
control|)
block|{
specifier|final
name|int
name|skipDocID
init|=
call|(
name|int
call|)
argument_list|(
operator|(
operator|(
name|idx
operator|+
literal|1
operator|)
operator|*
operator|(
name|long
operator|)
name|maxDoc
operator|)
operator|/
literal|8
argument_list|)
decl_stmt|;
name|postings
operator|=
name|termsEnum
operator|.
name|docsAndPositions
argument_list|(
name|liveDocs
argument_list|,
name|postings
argument_list|)
expr_stmt|;
specifier|final
name|int
name|docID
init|=
name|postings
operator|.
name|advance
argument_list|(
name|skipDocID
argument_list|)
decl_stmt|;
if|if
condition|(
name|docID
operator|==
name|DocsEnum
operator|.
name|NO_MORE_DOCS
condition|)
block|{
break|break;
block|}
else|else
block|{
if|if
condition|(
name|docID
operator|<
name|skipDocID
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": advance(docID="
operator|+
name|skipDocID
operator|+
literal|") returned docID="
operator|+
name|docID
argument_list|)
throw|;
block|}
specifier|final
name|int
name|freq
init|=
name|postings
operator|.
name|freq
argument_list|()
decl_stmt|;
if|if
condition|(
name|freq
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"termFreq "
operator|+
name|freq
operator|+
literal|" is out of bounds"
argument_list|)
throw|;
block|}
name|int
name|lastPosition
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|posUpto
init|=
literal|0
init|;
name|posUpto
operator|<
name|freq
condition|;
name|posUpto
operator|++
control|)
block|{
specifier|final
name|int
name|pos
init|=
name|postings
operator|.
name|nextPosition
argument_list|()
decl_stmt|;
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"position "
operator|+
name|pos
operator|+
literal|" is out of bounds"
argument_list|)
throw|;
block|}
if|if
condition|(
name|pos
operator|<
name|lastPosition
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"position "
operator|+
name|pos
operator|+
literal|" is< lastPosition "
operator|+
name|lastPosition
argument_list|)
throw|;
block|}
name|lastPosition
operator|=
name|pos
expr_stmt|;
block|}
specifier|final
name|int
name|nextDocID
init|=
name|postings
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextDocID
operator|==
name|DocsEnum
operator|.
name|NO_MORE_DOCS
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|nextDocID
operator|<=
name|docID
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": advance(docID="
operator|+
name|skipDocID
operator|+
literal|"), then .next() returned docID="
operator|+
name|nextDocID
operator|+
literal|" vs prev docID="
operator|+
name|docID
argument_list|)
throw|;
block|}
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|7
condition|;
name|idx
operator|++
control|)
block|{
specifier|final
name|int
name|skipDocID
init|=
call|(
name|int
call|)
argument_list|(
operator|(
operator|(
name|idx
operator|+
literal|1
operator|)
operator|*
operator|(
name|long
operator|)
name|maxDoc
operator|)
operator|/
literal|8
argument_list|)
decl_stmt|;
name|docs
operator|=
name|termsEnum
operator|.
name|docs
argument_list|(
name|liveDocs
argument_list|,
name|docs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|int
name|docID
init|=
name|docs
operator|.
name|advance
argument_list|(
name|skipDocID
argument_list|)
decl_stmt|;
if|if
condition|(
name|docID
operator|==
name|DocsEnum
operator|.
name|NO_MORE_DOCS
condition|)
block|{
break|break;
block|}
else|else
block|{
if|if
condition|(
name|docID
operator|<
name|skipDocID
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": advance(docID="
operator|+
name|skipDocID
operator|+
literal|") returned docID="
operator|+
name|docID
argument_list|)
throw|;
block|}
specifier|final
name|int
name|nextDocID
init|=
name|docs
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextDocID
operator|==
name|DocsEnum
operator|.
name|NO_MORE_DOCS
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|nextDocID
operator|<=
name|docID
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"term "
operator|+
name|term
operator|+
literal|": advance(docID="
operator|+
name|skipDocID
operator|+
literal|"), then .next() returned docID="
operator|+
name|nextDocID
operator|+
literal|" vs prev docID="
operator|+
name|docID
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
specifier|final
name|Terms
name|fieldTerms
init|=
name|fields
operator|.
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldTerms
operator|==
literal|null
condition|)
block|{
comment|// Unusual: the FieldsEnum returned a field but
comment|// the Terms for that field is null; this should
comment|// only happen if it's a ghost field (field with
comment|// no terms, eg there used to be terms but all
comment|// docs got deleted and then merged away):
comment|// make sure TermsEnum is empty:
specifier|final
name|Terms
name|fieldTerms2
init|=
name|fieldsEnum
operator|.
name|terms
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldTerms2
operator|!=
literal|null
operator|&&
name|fieldTerms2
operator|.
name|iterator
argument_list|(
literal|null
argument_list|)
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Fields.terms(field="
operator|+
name|field
operator|+
literal|") returned null yet the field appears to have terms"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|fieldTerms
operator|instanceof
name|BlockTreeTermsReader
operator|.
name|FieldReader
condition|)
block|{
specifier|final
name|BlockTreeTermsReader
operator|.
name|Stats
name|stats
init|=
operator|(
operator|(
name|BlockTreeTermsReader
operator|.
name|FieldReader
operator|)
name|fieldTerms
operator|)
operator|.
name|computeStats
argument_list|()
decl_stmt|;
assert|assert
name|stats
operator|!=
literal|null
assert|;
if|if
condition|(
name|status
operator|.
name|blockTreeStats
operator|==
literal|null
condition|)
block|{
name|status
operator|.
name|blockTreeStats
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|BlockTreeTermsReader
operator|.
name|Stats
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|status
operator|.
name|blockTreeStats
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|stats
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sumTotalTermFreq
operator|!=
literal|0
condition|)
block|{
specifier|final
name|long
name|v
init|=
name|fields
operator|.
name|terms
argument_list|(
name|field
argument_list|)
operator|.
name|getSumTotalTermFreq
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
operator|-
literal|1
operator|&&
name|sumTotalTermFreq
operator|!=
name|v
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"sumTotalTermFreq for field "
operator|+
name|field
operator|+
literal|"="
operator|+
name|v
operator|+
literal|" != recomputed sumTotalTermFreq="
operator|+
name|sumTotalTermFreq
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|sumDocFreq
operator|!=
literal|0
condition|)
block|{
specifier|final
name|long
name|v
init|=
name|fields
operator|.
name|terms
argument_list|(
name|field
argument_list|)
operator|.
name|getSumDocFreq
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
operator|-
literal|1
operator|&&
name|sumDocFreq
operator|!=
name|v
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"sumDocFreq for field "
operator|+
name|field
operator|+
literal|"="
operator|+
name|v
operator|+
literal|" != recomputed sumDocFreq="
operator|+
name|sumDocFreq
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|fieldTerms
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|v
init|=
name|fieldTerms
operator|.
name|getDocCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
operator|-
literal|1
operator|&&
name|visitedDocs
operator|.
name|cardinality
argument_list|()
operator|!=
name|v
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"docCount for field "
operator|+
name|field
operator|+
literal|"="
operator|+
name|v
operator|+
literal|" != recomputed docCount="
operator|+
name|visitedDocs
operator|.
name|cardinality
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// Test seek to last term:
if|if
condition|(
name|lastTerm
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|termsEnum
operator|.
name|seekCeil
argument_list|(
name|lastTerm
argument_list|)
operator|!=
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|FOUND
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"seek to last term "
operator|+
name|lastTerm
operator|+
literal|" failed"
argument_list|)
throw|;
block|}
name|is
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|lastTerm
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// check unique term count
name|long
name|termCount
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|termCount
operator|-
name|termCountStart
operator|>
literal|0
condition|)
block|{
name|termCount
operator|=
name|fields
operator|.
name|terms
argument_list|(
name|field
argument_list|)
operator|.
name|getUniqueTermCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|termCount
operator|!=
operator|-
literal|1
operator|&&
name|termCount
operator|!=
name|status
operator|.
name|termCount
operator|-
name|termCountStart
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"termCount mismatch "
operator|+
name|termCount
operator|+
literal|" vs "
operator|+
operator|(
name|status
operator|.
name|termCount
operator|-
name|termCountStart
operator|)
argument_list|)
throw|;
block|}
block|}
comment|// Test seeking by ord
if|if
condition|(
name|hasOrd
operator|&&
name|status
operator|.
name|termCount
operator|-
name|termCountStart
operator|>
literal|0
condition|)
block|{
name|int
name|seekCount
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
literal|10000L
argument_list|,
name|termCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|seekCount
operator|>
literal|0
condition|)
block|{
name|BytesRef
index|[]
name|seekTerms
init|=
operator|new
name|BytesRef
index|[
name|seekCount
index|]
decl_stmt|;
comment|// Seek by ord
for|for
control|(
name|int
name|i
init|=
name|seekCount
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|long
name|ord
init|=
name|i
operator|*
operator|(
name|termCount
operator|/
name|seekCount
operator|)
decl_stmt|;
name|termsEnum
operator|.
name|seekExact
argument_list|(
name|ord
argument_list|)
expr_stmt|;
name|seekTerms
index|[
name|i
index|]
operator|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|termsEnum
operator|.
name|term
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Seek by term
name|long
name|totDocCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|seekCount
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
name|termsEnum
operator|.
name|seekCeil
argument_list|(
name|seekTerms
index|[
name|i
index|]
argument_list|)
operator|!=
name|TermsEnum
operator|.
name|SeekStatus
operator|.
name|FOUND
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"seek to existing term "
operator|+
name|seekTerms
index|[
name|i
index|]
operator|+
literal|" failed"
argument_list|)
throw|;
block|}
name|docs
operator|=
name|termsEnum
operator|.
name|docs
argument_list|(
name|liveDocs
argument_list|,
name|docs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|docs
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"null DocsEnum from to existing term "
operator|+
name|seekTerms
index|[
name|i
index|]
argument_list|)
throw|;
block|}
while|while
condition|(
name|docs
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocsEnum
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|totDocCount
operator|++
expr_stmt|;
block|}
block|}
comment|// TermQuery
name|long
name|totDocCount2
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|seekCount
condition|;
name|i
operator|++
control|)
block|{
name|totDocCount2
operator|+=
name|is
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|seekTerms
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
operator|.
name|totalHits
expr_stmt|;
block|}
if|if
condition|(
name|totDocCount
operator|!=
name|totDocCount2
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"search to seek terms produced wrong number of hits: "
operator|+
name|totDocCount
operator|+
literal|" vs "
operator|+
name|totDocCount2
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
name|int
name|fieldCount
init|=
name|fields
operator|.
name|getUniqueFieldCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldCount
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|fieldCount
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"invalid fieldCount: "
operator|+
name|fieldCount
argument_list|)
throw|;
block|}
if|if
condition|(
name|fieldCount
operator|!=
name|computedFieldCount
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"fieldCount mismatch "
operator|+
name|fieldCount
operator|+
literal|" vs recomputed field count "
operator|+
name|computedFieldCount
argument_list|)
throw|;
block|}
block|}
comment|// for most implementations, this is boring (just the sum across all fields)
comment|// but codecs that don't work per-field like preflex actually implement this,
comment|// but don't implement it on Terms, so the check isn't redundant.
name|long
name|uniqueTermCountAllFields
init|=
name|reader
operator|.
name|getUniqueTermCount
argument_list|()
decl_stmt|;
comment|// this means something is seriously screwed, e.g. we are somehow getting enclosed in PFCW!!!!!!
if|if
condition|(
name|uniqueTermCountAllFields
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"invalid termCount: -1"
argument_list|)
throw|;
block|}
if|if
condition|(
name|status
operator|.
name|termCount
operator|!=
name|uniqueTermCountAllFields
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"termCount mismatch "
operator|+
name|uniqueTermCountAllFields
operator|+
literal|" vs "
operator|+
operator|(
name|status
operator|.
name|termCount
operator|)
argument_list|)
throw|;
block|}
name|msg
argument_list|(
literal|"OK ["
operator|+
name|status
operator|.
name|termCount
operator|+
literal|" terms; "
operator|+
name|status
operator|.
name|totFreq
operator|+
literal|" terms/docs pairs; "
operator|+
name|status
operator|.
name|totPos
operator|+
literal|" tokens]"
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
operator|&&
name|status
operator|.
name|blockTreeStats
operator|!=
literal|null
operator|&&
name|infoStream
operator|!=
literal|null
operator|&&
name|status
operator|.
name|termCount
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|BlockTreeTermsReader
operator|.
name|Stats
argument_list|>
name|ent
range|:
name|status
operator|.
name|blockTreeStats
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|infoStream
operator|.
name|println
argument_list|(
literal|"      field \""
operator|+
name|ent
operator|.
name|getKey
argument_list|()
operator|+
literal|"\":"
argument_list|)
expr_stmt|;
name|infoStream
operator|.
name|println
argument_list|(
literal|"      "
operator|+
name|ent
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"\n      "
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|msg
argument_list|(
literal|"ERROR: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|status
operator|.
name|error
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|infoStream
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|status
return|;
block|}
comment|/**    * Test stored fields for a segment.    */
DECL|method|testStoredFields
specifier|private
name|Status
operator|.
name|StoredFieldStatus
name|testStoredFields
parameter_list|(
name|SegmentInfo
name|info
parameter_list|,
name|SegmentReader
name|reader
parameter_list|,
name|NumberFormat
name|format
parameter_list|)
block|{
specifier|final
name|Status
operator|.
name|StoredFieldStatus
name|status
init|=
operator|new
name|Status
operator|.
name|StoredFieldStatus
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|infoStream
operator|.
name|print
argument_list|(
literal|"    test: stored fields......."
argument_list|)
expr_stmt|;
block|}
comment|// Scan stored fields for all documents
specifier|final
name|Bits
name|liveDocs
init|=
name|reader
operator|.
name|getLiveDocs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|info
operator|.
name|docCount
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|liveDocs
operator|==
literal|null
operator|||
name|liveDocs
operator|.
name|get
argument_list|(
name|j
argument_list|)
condition|)
block|{
name|status
operator|.
name|docCount
operator|++
expr_stmt|;
name|Document
name|doc
init|=
name|reader
operator|.
name|document
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|status
operator|.
name|totFields
operator|+=
name|doc
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Validate docCount
if|if
condition|(
name|status
operator|.
name|docCount
operator|!=
name|reader
operator|.
name|numDocs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"docCount="
operator|+
name|status
operator|.
name|docCount
operator|+
literal|" but saw "
operator|+
name|status
operator|.
name|docCount
operator|+
literal|" undeleted docs"
argument_list|)
throw|;
block|}
name|msg
argument_list|(
literal|"OK ["
operator|+
name|status
operator|.
name|totFields
operator|+
literal|" total field count; avg "
operator|+
name|format
operator|.
name|format
argument_list|(
operator|(
operator|(
operator|(
name|float
operator|)
name|status
operator|.
name|totFields
operator|)
operator|/
name|status
operator|.
name|docCount
operator|)
argument_list|)
operator|+
literal|" fields per doc]"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|msg
argument_list|(
literal|"ERROR ["
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|status
operator|.
name|error
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|infoStream
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|status
return|;
block|}
DECL|method|testDocValues
specifier|private
name|Status
operator|.
name|DocValuesStatus
name|testDocValues
parameter_list|(
name|SegmentInfo
name|info
parameter_list|,
name|SegmentReader
name|reader
parameter_list|)
block|{
specifier|final
name|Status
operator|.
name|DocValuesStatus
name|status
init|=
operator|new
name|Status
operator|.
name|DocValuesStatus
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|infoStream
operator|.
name|print
argument_list|(
literal|"    test: DocValues........"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|FieldInfos
name|fieldInfos
init|=
name|info
operator|.
name|getFieldInfos
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldInfo
name|fieldInfo
range|:
name|fieldInfos
control|)
block|{
if|if
condition|(
name|fieldInfo
operator|.
name|hasDocValues
argument_list|()
condition|)
block|{
name|status
operator|.
name|totalValueFields
operator|++
expr_stmt|;
specifier|final
name|DocValues
name|docValues
init|=
name|reader
operator|.
name|docValues
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|docValues
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"field: "
operator|+
name|fieldInfo
operator|.
name|name
operator|+
literal|" omits docvalues but should have them!"
argument_list|)
throw|;
block|}
name|DocValues
operator|.
name|Type
name|type
init|=
name|docValues
operator|.
name|type
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
name|fieldInfo
operator|.
name|getDocValuesType
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"field: "
operator|+
name|fieldInfo
operator|.
name|name
operator|+
literal|" has type: "
operator|+
name|type
operator|+
literal|" but fieldInfos says:"
operator|+
name|fieldInfo
operator|.
name|getDocValuesType
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|Source
name|values
init|=
name|docValues
operator|.
name|getDirectSource
argument_list|()
decl_stmt|;
specifier|final
name|int
name|maxDoc
init|=
name|reader
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|docValues
operator|.
name|getValueSize
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|fieldInfo
operator|.
name|getDocValuesType
argument_list|()
condition|)
block|{
case|case
name|BYTES_FIXED_SORTED
case|:
case|case
name|BYTES_VAR_SORTED
case|:
case|case
name|BYTES_FIXED_DEREF
case|:
case|case
name|BYTES_FIXED_STRAIGHT
case|:
case|case
name|BYTES_VAR_DEREF
case|:
case|case
name|BYTES_VAR_STRAIGHT
case|:
name|BytesRef
name|bytes
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|values
operator|.
name|getBytes
argument_list|(
name|i
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
operator|!=
operator|-
literal|1
operator|&&
name|size
operator|!=
name|bytes
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"field: "
operator|+
name|fieldInfo
operator|.
name|name
operator|+
literal|" returned wrongly sized bytes, was: "
operator|+
name|bytes
operator|.
name|length
operator|+
literal|" should be: "
operator|+
name|size
argument_list|)
throw|;
block|}
break|break;
case|case
name|FLOAT_32
case|:
assert|assert
name|size
operator|==
literal|4
assert|;
name|values
operator|.
name|getFloat
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT_64
case|:
assert|assert
name|size
operator|==
literal|8
assert|;
name|values
operator|.
name|getFloat
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
case|case
name|VAR_INTS
case|:
assert|assert
name|size
operator|==
operator|-
literal|1
assert|;
name|values
operator|.
name|getInt
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
case|case
name|FIXED_INTS_16
case|:
assert|assert
name|size
operator|==
literal|2
assert|;
name|values
operator|.
name|getInt
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
case|case
name|FIXED_INTS_32
case|:
assert|assert
name|size
operator|==
literal|4
assert|;
name|values
operator|.
name|getInt
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
case|case
name|FIXED_INTS_64
case|:
assert|assert
name|size
operator|==
literal|8
assert|;
name|values
operator|.
name|getInt
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
case|case
name|FIXED_INTS_8
case|:
assert|assert
name|size
operator|==
literal|1
assert|;
name|values
operator|.
name|getInt
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field: "
operator|+
name|fieldInfo
operator|.
name|name
operator|+
literal|" - no such DocValues type: "
operator|+
name|fieldInfo
operator|.
name|getDocValuesType
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|type
operator|==
name|DocValues
operator|.
name|Type
operator|.
name|BYTES_FIXED_SORTED
operator|||
name|type
operator|==
name|DocValues
operator|.
name|Type
operator|.
name|BYTES_VAR_SORTED
condition|)
block|{
comment|// check sorted bytes
name|SortedSource
name|sortedValues
init|=
name|values
operator|.
name|asSortedSource
argument_list|()
decl_stmt|;
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|comparator
init|=
name|sortedValues
operator|.
name|getComparator
argument_list|()
decl_stmt|;
name|int
name|lastOrd
init|=
operator|-
literal|1
decl_stmt|;
name|BytesRef
name|lastBytes
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxDoc
condition|;
name|i
operator|++
control|)
block|{
name|int
name|ord
init|=
name|sortedValues
operator|.
name|ord
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
argument_list|<
literal|0
operator|||
name|ord
argument_list|>
name|maxDoc
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"field: "
operator|+
name|fieldInfo
operator|.
name|name
operator|+
literal|" ord is out of bounds: "
operator|+
name|ord
argument_list|)
throw|;
block|}
name|BytesRef
name|bytes
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|sortedValues
operator|.
name|getByOrd
argument_list|(
name|ord
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastOrd
operator|!=
operator|-
literal|1
condition|)
block|{
name|int
name|ordComp
init|=
name|Integer
operator|.
name|signum
argument_list|(
operator|new
name|Integer
argument_list|(
name|ord
argument_list|)
operator|.
name|compareTo
argument_list|(
operator|new
name|Integer
argument_list|(
name|lastOrd
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|bytesComp
init|=
name|Integer
operator|.
name|signum
argument_list|(
name|comparator
operator|.
name|compare
argument_list|(
name|bytes
argument_list|,
name|lastBytes
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ordComp
operator|!=
name|bytesComp
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"field: "
operator|+
name|fieldInfo
operator|.
name|name
operator|+
literal|" ord comparison is wrong: "
operator|+
name|ordComp
operator|+
literal|" comparator claims: "
operator|+
name|bytesComp
argument_list|)
throw|;
block|}
block|}
name|lastOrd
operator|=
name|ord
expr_stmt|;
name|lastBytes
operator|=
name|bytes
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|reader
operator|.
name|docValues
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"field: "
operator|+
name|fieldInfo
operator|.
name|name
operator|+
literal|" has docvalues but should omit them!"
argument_list|)
throw|;
block|}
block|}
block|}
name|msg
argument_list|(
literal|"OK ["
operator|+
name|status
operator|.
name|docCount
operator|+
literal|" total doc Count; Num DocValues Fields "
operator|+
name|status
operator|.
name|totalValueFields
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|msg
argument_list|(
literal|"ERROR ["
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|status
operator|.
name|error
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|infoStream
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|status
return|;
block|}
comment|/**    * Test term vectors for a segment.    */
DECL|method|testTermVectors
specifier|private
name|Status
operator|.
name|TermVectorStatus
name|testTermVectors
parameter_list|(
name|SegmentInfo
name|info
parameter_list|,
name|SegmentReader
name|reader
parameter_list|,
name|NumberFormat
name|format
parameter_list|)
block|{
specifier|final
name|Status
operator|.
name|TermVectorStatus
name|status
init|=
operator|new
name|Status
operator|.
name|TermVectorStatus
argument_list|()
decl_stmt|;
name|TermsEnum
name|termsEnum
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|infoStream
operator|.
name|print
argument_list|(
literal|"    test: term vectors........"
argument_list|)
expr_stmt|;
block|}
comment|// TODO: maybe we can factor out testTermIndex and reuse here?
name|DocsEnum
name|docs
init|=
literal|null
decl_stmt|;
name|DocsEnum
name|docsAndFreqs
init|=
literal|null
decl_stmt|;
name|DocsAndPositionsEnum
name|postings
init|=
literal|null
decl_stmt|;
specifier|final
name|Bits
name|liveDocs
init|=
name|reader
operator|.
name|getLiveDocs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|info
operator|.
name|docCount
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|liveDocs
operator|==
literal|null
operator|||
name|liveDocs
operator|.
name|get
argument_list|(
name|j
argument_list|)
condition|)
block|{
name|status
operator|.
name|docCount
operator|++
expr_stmt|;
name|Fields
name|tfv
init|=
name|reader
operator|.
name|getTermVectors
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|tfv
operator|!=
literal|null
condition|)
block|{
name|int
name|tfvComputedFieldCount
init|=
literal|0
decl_stmt|;
name|long
name|tfvComputedTermCount
init|=
literal|0
decl_stmt|;
name|FieldsEnum
name|fieldsEnum
init|=
name|tfv
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|field
init|=
literal|null
decl_stmt|;
name|String
name|lastField
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|field
operator|=
name|fieldsEnum
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|status
operator|.
name|totVectors
operator|++
expr_stmt|;
name|tfvComputedFieldCount
operator|++
expr_stmt|;
if|if
condition|(
name|lastField
operator|==
literal|null
condition|)
block|{
name|lastField
operator|=
name|field
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lastField
operator|.
name|compareTo
argument_list|(
name|field
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"vector fields are out of order: lastField="
operator|+
name|lastField
operator|+
literal|" field="
operator|+
name|field
operator|+
literal|" doc="
operator|+
name|j
argument_list|)
throw|;
block|}
name|Terms
name|terms
init|=
name|tfv
operator|.
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|termsEnum
operator|=
name|terms
operator|.
name|iterator
argument_list|(
name|termsEnum
argument_list|)
expr_stmt|;
name|long
name|tfvComputedTermCountForField
init|=
literal|0
decl_stmt|;
name|long
name|tfvComputedSumTotalTermFreq
init|=
literal|0
decl_stmt|;
name|BytesRef
name|term
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|term
operator|=
name|termsEnum
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|tfvComputedTermCountForField
operator|++
expr_stmt|;
if|if
condition|(
name|termsEnum
operator|.
name|docFreq
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"vector docFreq for doc "
operator|+
name|j
operator|+
literal|", field "
operator|+
name|field
operator|+
literal|", term"
operator|+
name|term
operator|+
literal|" != 1"
argument_list|)
throw|;
block|}
name|long
name|totalTermFreq
init|=
name|termsEnum
operator|.
name|totalTermFreq
argument_list|()
decl_stmt|;
if|if
condition|(
name|totalTermFreq
operator|!=
operator|-
literal|1
operator|&&
name|totalTermFreq
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"totalTermFreq: "
operator|+
name|totalTermFreq
operator|+
literal|" is out of bounds"
argument_list|)
throw|;
block|}
name|postings
operator|=
name|termsEnum
operator|.
name|docsAndPositions
argument_list|(
literal|null
argument_list|,
name|postings
argument_list|)
expr_stmt|;
if|if
condition|(
name|postings
operator|==
literal|null
condition|)
block|{
name|docsAndFreqs
operator|=
name|termsEnum
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
name|docsAndFreqs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|docsAndFreqs
operator|==
literal|null
condition|)
block|{
name|docs
operator|=
name|termsEnum
operator|.
name|docs
argument_list|(
literal|null
argument_list|,
name|docs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docs
operator|=
name|docsAndFreqs
expr_stmt|;
block|}
block|}
else|else
block|{
name|docs
operator|=
name|docsAndFreqs
operator|=
name|postings
expr_stmt|;
block|}
specifier|final
name|int
name|doc
init|=
name|docs
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"vector for doc "
operator|+
name|j
operator|+
literal|" didn't return docID=0: got docID="
operator|+
name|doc
argument_list|)
throw|;
block|}
if|if
condition|(
name|docsAndFreqs
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|tf
init|=
name|docsAndFreqs
operator|.
name|freq
argument_list|()
decl_stmt|;
if|if
condition|(
name|tf
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"vector freq "
operator|+
name|tf
operator|+
literal|" is out of bounds"
argument_list|)
throw|;
block|}
if|if
condition|(
name|totalTermFreq
operator|!=
operator|-
literal|1
operator|&&
name|totalTermFreq
operator|!=
name|tf
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"vector totalTermFreq "
operator|+
name|totalTermFreq
operator|+
literal|" != tf "
operator|+
name|tf
argument_list|)
throw|;
block|}
name|tfvComputedSumTotalTermFreq
operator|+=
name|tf
expr_stmt|;
if|if
condition|(
name|postings
operator|!=
literal|null
condition|)
block|{
name|int
name|lastPosition
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tf
condition|;
name|i
operator|++
control|)
block|{
name|int
name|pos
init|=
name|postings
operator|.
name|nextPosition
argument_list|()
decl_stmt|;
if|if
condition|(
name|pos
operator|!=
operator|-
literal|1
operator|&&
name|pos
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"vector position "
operator|+
name|pos
operator|+
literal|" is out of bounds"
argument_list|)
throw|;
block|}
if|if
condition|(
name|pos
operator|<
name|lastPosition
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"vector position "
operator|+
name|pos
operator|+
literal|"< lastPos "
operator|+
name|lastPosition
argument_list|)
throw|;
block|}
name|lastPosition
operator|=
name|pos
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|docs
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"vector for doc "
operator|+
name|j
operator|+
literal|" references multiple documents!"
argument_list|)
throw|;
block|}
block|}
name|long
name|uniqueTermCount
init|=
name|terms
operator|.
name|getUniqueTermCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|uniqueTermCount
operator|!=
operator|-
literal|1
operator|&&
name|uniqueTermCount
operator|!=
name|tfvComputedTermCountForField
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"vector term count for doc "
operator|+
name|j
operator|+
literal|", field "
operator|+
name|field
operator|+
literal|" = "
operator|+
name|uniqueTermCount
operator|+
literal|" != recomputed term count="
operator|+
name|tfvComputedTermCountForField
argument_list|)
throw|;
block|}
name|int
name|docCount
init|=
name|terms
operator|.
name|getDocCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|docCount
operator|!=
operator|-
literal|1
operator|&&
name|docCount
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"vector doc count for doc "
operator|+
name|j
operator|+
literal|", field "
operator|+
name|field
operator|+
literal|" = "
operator|+
name|docCount
operator|+
literal|" != 1"
argument_list|)
throw|;
block|}
name|long
name|sumDocFreq
init|=
name|terms
operator|.
name|getSumDocFreq
argument_list|()
decl_stmt|;
if|if
condition|(
name|sumDocFreq
operator|!=
operator|-
literal|1
operator|&&
name|sumDocFreq
operator|!=
name|tfvComputedTermCountForField
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"vector postings count for doc "
operator|+
name|j
operator|+
literal|", field "
operator|+
name|field
operator|+
literal|" = "
operator|+
name|sumDocFreq
operator|+
literal|" != recomputed postings count="
operator|+
name|tfvComputedTermCountForField
argument_list|)
throw|;
block|}
name|long
name|sumTotalTermFreq
init|=
name|terms
operator|.
name|getSumTotalTermFreq
argument_list|()
decl_stmt|;
if|if
condition|(
name|sumTotalTermFreq
operator|!=
operator|-
literal|1
operator|&&
name|sumTotalTermFreq
operator|!=
name|tfvComputedSumTotalTermFreq
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"vector sumTotalTermFreq for doc "
operator|+
name|j
operator|+
literal|", field "
operator|+
name|field
operator|+
literal|" = "
operator|+
name|sumTotalTermFreq
operator|+
literal|" != recomputed sumTotalTermFreq="
operator|+
name|tfvComputedSumTotalTermFreq
argument_list|)
throw|;
block|}
name|tfvComputedTermCount
operator|+=
name|tfvComputedTermCountForField
expr_stmt|;
block|}
name|int
name|tfvUniqueFieldCount
init|=
name|tfv
operator|.
name|getUniqueFieldCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|tfvUniqueFieldCount
operator|!=
operator|-
literal|1
operator|&&
name|tfvUniqueFieldCount
operator|!=
name|tfvComputedFieldCount
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"vector field count for doc "
operator|+
name|j
operator|+
literal|"="
operator|+
name|tfvUniqueFieldCount
operator|+
literal|" != recomputed uniqueFieldCount="
operator|+
name|tfvComputedFieldCount
argument_list|)
throw|;
block|}
name|long
name|tfvUniqueTermCount
init|=
name|tfv
operator|.
name|getUniqueTermCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|tfvUniqueTermCount
operator|!=
operator|-
literal|1
operator|&&
name|tfvUniqueTermCount
operator|!=
name|tfvComputedTermCount
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"vector term count for doc "
operator|+
name|j
operator|+
literal|"="
operator|+
name|tfvUniqueTermCount
operator|+
literal|" != recomputed uniqueTermCount="
operator|+
name|tfvComputedTermCount
argument_list|)
throw|;
block|}
block|}
block|}
block|}
name|msg
argument_list|(
literal|"OK ["
operator|+
name|status
operator|.
name|totVectors
operator|+
literal|" total vector count; avg "
operator|+
name|format
operator|.
name|format
argument_list|(
operator|(
operator|(
operator|(
name|float
operator|)
name|status
operator|.
name|totVectors
operator|)
operator|/
name|status
operator|.
name|docCount
operator|)
argument_list|)
operator|+
literal|" term/freq vector fields per doc]"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|msg
argument_list|(
literal|"ERROR ["
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|status
operator|.
name|error
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|infoStream
operator|!=
literal|null
condition|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|infoStream
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|status
return|;
block|}
comment|/** Repairs the index using previously returned result    *  from {@link #checkIndex}.  Note that this does not    *  remove any of the unreferenced files after it's done;    *  you must separately open an {@link IndexWriter}, which    *  deletes unreferenced files when it's created.    *    *<p><b>WARNING</b>: this writes a    *  new segments file into the index, effectively removing    *  all documents in broken segments from the index.    *  BE CAREFUL.    *    *<p><b>WARNING</b>: Make sure you only call this when the    *  index is not opened  by any writer. */
DECL|method|fixIndex
specifier|public
name|void
name|fixIndex
parameter_list|(
name|Status
name|result
parameter_list|,
name|Codec
name|codec
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|result
operator|.
name|partial
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"can only fix an index that was fully checked (this status checked a subset of segments)"
argument_list|)
throw|;
name|result
operator|.
name|newSegments
operator|.
name|changed
argument_list|()
expr_stmt|;
name|result
operator|.
name|newSegments
operator|.
name|commit
argument_list|(
name|result
operator|.
name|dir
argument_list|,
name|codec
argument_list|)
expr_stmt|;
block|}
DECL|field|assertsOn
specifier|private
specifier|static
name|boolean
name|assertsOn
decl_stmt|;
DECL|method|testAsserts
specifier|private
specifier|static
name|boolean
name|testAsserts
parameter_list|()
block|{
name|assertsOn
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|assertsOn
specifier|private
specifier|static
name|boolean
name|assertsOn
parameter_list|()
block|{
assert|assert
name|testAsserts
argument_list|()
assert|;
return|return
name|assertsOn
return|;
block|}
comment|/** Command-line interface to check and fix an index.<p>     Run it like this:<pre>     java -ea:org.apache.lucene... org.apache.lucene.index.CheckIndex pathToIndex [-fix] [-verbose] [-segment X] [-segment Y]</pre><ul><li><code>-fix</code>: actually write a new segments_N file, removing any problematic segments<li><code>-segment X</code>: only check the specified     segment(s).  This can be specified multiple times,     to check more than one segment, eg<code>-segment _2     -segment _a</code>.  You can't use this with the -fix     option.</ul><p><b>WARNING</b>:<code>-fix</code> should only be used on an emergency basis as it will cause                        documents (perhaps many) to be permanently removed from the index.  Always make                        a backup copy of your index before running this!  Do not run this tool on an index                        that is actively being written to.  You have been warned!<p>                Run without -fix, this tool will open the index, report version information                        and report any exceptions it hits and what action it would take if -fix were                        specified.  With -fix, this tool will remove any segments that have issues and                        write a new segments_N file.  This means all documents contained in the affected                        segments will be removed.<p>                        This tool exits with exit code 1 if the index cannot be opened or has any                        corruption, else 0.    */
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|boolean
name|doFix
init|=
literal|false
decl_stmt|;
name|Codec
name|codec
init|=
name|Codec
operator|.
name|getDefault
argument_list|()
decl_stmt|;
comment|// only used when fixing
name|boolean
name|verbose
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|onlySegments
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|indexPath
init|=
literal|null
decl_stmt|;
name|String
name|dirImpl
init|=
literal|null
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|args
operator|.
name|length
condition|)
block|{
name|String
name|arg
init|=
name|args
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
literal|"-fix"
operator|.
name|equals
argument_list|(
name|arg
argument_list|)
condition|)
block|{
name|doFix
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-codec"
operator|.
name|equals
argument_list|(
name|arg
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|args
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: missing name for -codec option"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
name|codec
operator|=
name|Codec
operator|.
name|forName
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-verbose"
argument_list|)
condition|)
block|{
name|verbose
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-segment"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|args
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: missing name for -segment option"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
name|onlySegments
operator|.
name|add
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-dir-impl"
operator|.
name|equals
argument_list|(
name|arg
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|args
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: missing value for -dir-impl option"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
name|dirImpl
operator|=
name|args
index|[
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|indexPath
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: unexpected extra argument '"
operator|+
name|args
index|[
name|i
index|]
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|indexPath
operator|=
name|args
index|[
name|i
index|]
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|indexPath
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nERROR: index path not specified"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nUsage: java org.apache.lucene.index.CheckIndex pathToIndex [-fix] [-segment X] [-segment Y] [-dir-impl X]\n"
operator|+
literal|"\n"
operator|+
literal|"  -fix: actually write a new segments_N file, removing any problematic segments\n"
operator|+
literal|"  -codec X: when fixing, codec to write the new segments_N file with\n"
operator|+
literal|"  -verbose: print additional details\n"
operator|+
literal|"  -segment X: only check the specified segments.  This can be specified multiple\n"
operator|+
literal|"              times, to check more than one segment, eg '-segment _2 -segment _a'.\n"
operator|+
literal|"              You can't use this with the -fix option\n"
operator|+
literal|"  -dir-impl X: use a specific "
operator|+
name|FSDirectory
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" implementation. "
operator|+
literal|"If no package is specified the "
operator|+
name|FSDirectory
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" package will be used.\n"
operator|+
literal|"**WARNING**: -fix should only be used on an emergency basis as it will cause\n"
operator|+
literal|"documents (perhaps many) to be permanently removed from the index.  Always make\n"
operator|+
literal|"a backup copy of your index before running this!  Do not run this tool on an index\n"
operator|+
literal|"that is actively being written to.  You have been warned!\n"
operator|+
literal|"\n"
operator|+
literal|"Run without -fix, this tool will open the index, report version information\n"
operator|+
literal|"and report any exceptions it hits and what action it would take if -fix were\n"
operator|+
literal|"specified.  With -fix, this tool will remove any segments that have issues and\n"
operator|+
literal|"write a new segments_N file.  This means all documents contained in the affected\n"
operator|+
literal|"segments will be removed.\n"
operator|+
literal|"\n"
operator|+
literal|"This tool exits with exit code 1 if the index cannot be opened or has any\n"
operator|+
literal|"corruption, else 0.\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|assertsOn
argument_list|()
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nNOTE: testing will be more thorough if you run java with '-ea:org.apache.lucene...', so assertions are enabled"
argument_list|)
expr_stmt|;
if|if
condition|(
name|onlySegments
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
name|onlySegments
operator|=
literal|null
expr_stmt|;
elseif|else
if|if
condition|(
name|doFix
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: cannot specify both -fix and -segment"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nOpening index @ "
operator|+
name|indexPath
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|Directory
name|dir
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|dirImpl
operator|==
literal|null
condition|)
block|{
name|dir
operator|=
name|FSDirectory
operator|.
name|open
argument_list|(
operator|new
name|File
argument_list|(
name|indexPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|=
name|CommandLineUtil
operator|.
name|newFSDirectory
argument_list|(
name|dirImpl
argument_list|,
operator|new
name|File
argument_list|(
name|indexPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ERROR: could not open directory \""
operator|+
name|indexPath
operator|+
literal|"\"; exiting"
argument_list|)
expr_stmt|;
name|t
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|CheckIndex
name|checker
init|=
operator|new
name|CheckIndex
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|checker
operator|.
name|setInfoStream
argument_list|(
name|System
operator|.
name|out
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
name|Status
name|result
init|=
name|checker
operator|.
name|checkIndex
argument_list|(
name|onlySegments
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|missingSegments
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|result
operator|.
name|clean
condition|)
block|{
if|if
condition|(
operator|!
name|doFix
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"WARNING: would write new segments file, and "
operator|+
name|result
operator|.
name|totLoseDocCount
operator|+
literal|" documents would be lost, if -fix were specified\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"WARNING: "
operator|+
name|result
operator|.
name|totLoseDocCount
operator|+
literal|" documents will be lost\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"NOTE: will write new segments file in 5 seconds; this will remove "
operator|+
name|result
operator|.
name|totLoseDocCount
operator|+
literal|" docs from the index. THIS IS YOUR LAST CHANCE TO CTRL+C!"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
literal|5
condition|;
name|s
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
operator|(
literal|5
operator|-
name|s
operator|)
operator|+
literal|"..."
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Writing..."
argument_list|)
expr_stmt|;
name|checker
operator|.
name|fixIndex
argument_list|(
name|result
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"OK"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Wrote new segments file \""
operator|+
name|result
operator|.
name|newSegments
operator|.
name|getCurrentSegmentFileName
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
specifier|final
name|int
name|exitCode
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|clean
operator|==
literal|true
condition|)
name|exitCode
operator|=
literal|0
expr_stmt|;
else|else
name|exitCode
operator|=
literal|1
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|exitCode
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
