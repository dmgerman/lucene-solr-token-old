begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_class
DECL|class|ThreadAffinityDocumentsWriterThreadPool
specifier|public
class|class
name|ThreadAffinityDocumentsWriterThreadPool
extends|extends
name|DocumentsWriterThreadPool
block|{
DECL|class|AffinityThreadState
specifier|private
specifier|static
specifier|final
class|class
name|AffinityThreadState
extends|extends
name|ThreadState
block|{
DECL|field|numAssignedThreads
name|int
name|numAssignedThreads
decl_stmt|;
annotation|@
name|Override
DECL|method|finish
name|void
name|finish
parameter_list|()
block|{
name|numAssignedThreads
operator|--
expr_stmt|;
block|}
block|}
DECL|field|threadBindings
specifier|private
name|Map
argument_list|<
name|Thread
argument_list|,
name|AffinityThreadState
argument_list|>
name|threadBindings
init|=
operator|new
name|HashMap
argument_list|<
name|Thread
argument_list|,
name|AffinityThreadState
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|ThreadAffinityDocumentsWriterThreadPool
specifier|public
name|ThreadAffinityDocumentsWriterThreadPool
parameter_list|(
name|int
name|maxNumThreadStates
parameter_list|)
block|{
name|super
argument_list|(
name|maxNumThreadStates
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|selectThreadState
specifier|protected
name|ThreadState
name|selectThreadState
parameter_list|(
name|Thread
name|requestingThread
parameter_list|,
name|DocumentsWriter
name|documentsWriter
parameter_list|,
name|Document
name|doc
parameter_list|)
block|{
name|AffinityThreadState
name|threadState
init|=
name|threadBindings
operator|.
name|get
argument_list|(
name|requestingThread
argument_list|)
decl_stmt|;
comment|// First, find a thread state.  If this thread already
comment|// has affinity to a specific ThreadState, use that one
comment|// again.
if|if
condition|(
name|threadState
operator|==
literal|null
condition|)
block|{
name|AffinityThreadState
name|minThreadState
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allThreadStates
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|AffinityThreadState
name|ts
init|=
operator|(
name|AffinityThreadState
operator|)
name|allThreadStates
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|minThreadState
operator|==
literal|null
operator|||
name|ts
operator|.
name|numAssignedThreads
operator|<
name|minThreadState
operator|.
name|numAssignedThreads
condition|)
name|minThreadState
operator|=
name|ts
expr_stmt|;
block|}
if|if
condition|(
name|minThreadState
operator|!=
literal|null
operator|&&
operator|(
name|minThreadState
operator|.
name|numAssignedThreads
operator|==
literal|0
operator|||
name|allThreadStates
operator|.
name|length
operator|>=
name|maxNumThreadStates
operator|)
condition|)
block|{
name|threadState
operator|=
name|minThreadState
expr_stmt|;
block|}
else|else
block|{
name|threadState
operator|=
name|addNewThreadState
argument_list|(
name|documentsWriter
argument_list|,
operator|new
name|AffinityThreadState
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|threadBindings
operator|.
name|put
argument_list|(
name|requestingThread
argument_list|,
name|threadState
argument_list|)
expr_stmt|;
block|}
name|threadState
operator|.
name|numAssignedThreads
operator|++
expr_stmt|;
return|return
name|threadState
return|;
block|}
annotation|@
name|Override
DECL|method|clearThreadBindings
specifier|protected
name|void
name|clearThreadBindings
parameter_list|(
name|ThreadState
name|flushedThread
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Thread
argument_list|,
name|AffinityThreadState
argument_list|>
argument_list|>
name|it
init|=
name|threadBindings
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|Thread
argument_list|,
name|AffinityThreadState
argument_list|>
name|e
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|==
name|flushedThread
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|clearAllThreadBindings
specifier|protected
name|void
name|clearAllThreadBindings
parameter_list|()
block|{
name|threadBindings
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
