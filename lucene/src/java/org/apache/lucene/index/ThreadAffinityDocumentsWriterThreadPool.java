begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import
begin_class
DECL|class|ThreadAffinityDocumentsWriterThreadPool
specifier|public
class|class
name|ThreadAffinityDocumentsWriterThreadPool
extends|extends
name|DocumentsWriterPerThreadPool
block|{
DECL|field|threadBindings
specifier|private
name|Map
argument_list|<
name|Thread
argument_list|,
name|ThreadState
argument_list|>
name|threadBindings
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Thread
argument_list|,
name|ThreadState
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|ThreadAffinityDocumentsWriterThreadPool
specifier|public
name|ThreadAffinityDocumentsWriterThreadPool
parameter_list|(
name|int
name|maxNumPerThreads
parameter_list|)
block|{
name|super
argument_list|(
name|maxNumPerThreads
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAndLock
specifier|public
name|ThreadState
name|getAndLock
parameter_list|(
name|Thread
name|requestingThread
parameter_list|,
name|DocumentsWriter
name|documentsWriter
parameter_list|,
name|Document
name|doc
parameter_list|)
block|{
name|ThreadState
name|threadState
init|=
name|threadBindings
operator|.
name|get
argument_list|(
name|requestingThread
argument_list|)
decl_stmt|;
if|if
condition|(
name|threadState
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|threadState
operator|.
name|tryLock
argument_list|()
condition|)
block|{
return|return
name|threadState
return|;
block|}
block|}
comment|// find the state that has minimum amount of threads waiting
name|Iterator
argument_list|<
name|ThreadState
argument_list|>
name|it
init|=
name|getActivePerThreadsIterator
argument_list|()
decl_stmt|;
name|ThreadState
name|minThreadState
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ThreadState
name|state
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|minThreadState
operator|==
literal|null
operator|||
name|state
operator|.
name|getQueueLength
argument_list|()
operator|<
name|minThreadState
operator|.
name|getQueueLength
argument_list|()
condition|)
block|{
name|minThreadState
operator|=
name|state
expr_stmt|;
block|}
block|}
if|if
condition|(
name|minThreadState
operator|==
literal|null
operator|||
name|minThreadState
operator|.
name|hasQueuedThreads
argument_list|()
condition|)
block|{
name|ThreadState
name|newState
init|=
name|newThreadState
argument_list|()
decl_stmt|;
if|if
condition|(
name|newState
operator|!=
literal|null
condition|)
block|{
name|minThreadState
operator|=
name|newState
expr_stmt|;
name|threadBindings
operator|.
name|put
argument_list|(
name|requestingThread
argument_list|,
name|newState
argument_list|)
expr_stmt|;
block|}
block|}
name|minThreadState
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|minThreadState
return|;
block|}
annotation|@
name|Override
DECL|method|clearThreadBindings
specifier|public
name|void
name|clearThreadBindings
parameter_list|(
name|ThreadState
name|perThread
parameter_list|)
block|{
name|threadBindings
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clearAllThreadBindings
specifier|public
name|void
name|clearAllThreadBindings
parameter_list|()
block|{
name|threadBindings
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
