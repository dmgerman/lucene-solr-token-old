begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_comment
comment|/** An {@link CompositeReader} which reads multiple, parallel indexes.  Each index added  * must have the same number of documents, and exactly the same hierarchical subreader structure,  * but typically each contains different fields. Each document contains the  * union of the fields of all  * documents with the same document number.  When searching, matches for a  * query term are from the first index added that has the field.  *  *<p>This is useful, e.g., with collections that have large fields which  * change rarely and small fields that change more frequently.  The smaller  * fields may be re-indexed in a new index and both indexes may be searched  * together.  *   *<p>To create instances of {@code ParallelCompositeReader}, use the provided  * {@link ParallelCompositeReader.Builder}.  *  *<p><strong>Warning:</strong> It is up to you to make sure all indexes  * are created and modified the same way. For example, if you add  * documents to one index, you need to add the same documents in the  * same order to the other indexes.<em>Failure to do so will result in  * undefined behavior</em>.  * A good strategy to create suitable indexes with {@link IndexWriter} is to use  * {@link LogDocMergePolicy}, as this one does not reorder documents  * during merging (like {@code TieredMergePolicy}) and triggers merges  * by number of documents per segment. If you use different {@link MergePolicy}s  * it might happen that the segment structure of your index is no longer predictable.  * {@link ParallelCompositeReader.Builder} will throw exceptions if the structure  * of the underlying segments do not match for each parallel reader.  */
end_comment
begin_class
DECL|class|ParallelCompositeReader
specifier|public
specifier|final
class|class
name|ParallelCompositeReader
extends|extends
name|BaseMultiReader
argument_list|<
name|IndexReader
argument_list|>
block|{
DECL|field|closeSubReaders
specifier|private
specifier|final
name|boolean
name|closeSubReaders
decl_stmt|;
DECL|field|parallelReaders
specifier|private
specifier|final
name|CompositeReader
name|parallelReaders
index|[]
decl_stmt|;
comment|// only called from builder!!!
DECL|method|ParallelCompositeReader
name|ParallelCompositeReader
parameter_list|(
name|boolean
name|closeSubReaders
parameter_list|,
name|List
argument_list|<
name|CompositeReader
argument_list|>
name|parallelReaders
parameter_list|,
name|BitSet
name|ignoreStoredFieldsSet
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|prepareSubReaders
argument_list|(
name|parallelReaders
argument_list|,
name|ignoreStoredFieldsSet
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|closeSubReaders
operator|=
name|closeSubReaders
expr_stmt|;
name|this
operator|.
name|parallelReaders
operator|=
name|parallelReaders
operator|.
name|toArray
argument_list|(
operator|new
name|CompositeReader
index|[
name|parallelReaders
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|closeSubReaders
condition|)
block|{
for|for
control|(
name|CompositeReader
name|reader
range|:
name|this
operator|.
name|parallelReaders
control|)
block|{
name|reader
operator|.
name|incRef
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|prepareSubReaders
specifier|private
specifier|static
name|IndexReader
index|[]
name|prepareSubReaders
parameter_list|(
name|List
argument_list|<
name|CompositeReader
argument_list|>
name|parallelReaders
parameter_list|,
name|BitSet
name|ignoreStoredFieldsSet
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|parallelReaders
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|IndexReader
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
comment|// hierarchically build the same subreader structure as the first CompositeReader with Parallel*Readers:
specifier|final
name|IndexReader
index|[]
name|firstSubReaders
init|=
name|parallelReaders
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSequentialSubReaders
argument_list|()
decl_stmt|,
name|subReaders
init|=
operator|new
name|IndexReader
index|[
name|firstSubReaders
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subReaders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|firstSubReaders
index|[
name|i
index|]
operator|instanceof
name|AtomicReader
condition|)
block|{
comment|// we simply enable closing of subReaders, to prevent incRefs on subReaders
comment|// -> for synthetic subReaders, close() is never called by our doClose()
specifier|final
name|ParallelAtomicReader
operator|.
name|Builder
name|builder
init|=
operator|new
name|ParallelAtomicReader
operator|.
name|Builder
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|,
name|c
init|=
name|parallelReaders
operator|.
name|size
argument_list|()
init|;
name|j
operator|<
name|c
condition|;
name|j
operator|++
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
operator|(
name|AtomicReader
operator|)
name|parallelReaders
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getSequentialSubReaders
argument_list|()
index|[
name|i
index|]
argument_list|,
name|ignoreStoredFieldsSet
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|subReaders
index|[
name|i
index|]
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|firstSubReaders
index|[
name|i
index|]
operator|instanceof
name|CompositeReader
assert|;
comment|// we simply enable closing of subReaders, to prevent incRefs on subReaders
comment|// -> for synthetic subReaders, close() is never called by our doClose()
specifier|final
name|ParallelCompositeReader
operator|.
name|Builder
name|builder
init|=
operator|new
name|ParallelCompositeReader
operator|.
name|Builder
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|,
name|c
init|=
name|parallelReaders
operator|.
name|size
argument_list|()
init|;
name|j
operator|<
name|c
condition|;
name|j
operator|++
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
operator|(
name|CompositeReader
operator|)
name|parallelReaders
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getSequentialSubReaders
argument_list|()
index|[
name|i
index|]
argument_list|,
name|ignoreStoredFieldsSet
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|subReaders
index|[
name|i
index|]
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|subReaders
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"ParallelCompositeReader("
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|CompositeReader
argument_list|>
name|iter
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|parallelReaders
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
name|buffer
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|protected
specifier|synchronized
name|void
name|doClose
parameter_list|()
throws|throws
name|IOException
block|{
name|IOException
name|ioe
init|=
literal|null
decl_stmt|;
for|for
control|(
specifier|final
name|CompositeReader
name|reader
range|:
name|parallelReaders
control|)
block|{
try|try
block|{
if|if
condition|(
name|closeSubReaders
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|reader
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|ioe
operator|==
literal|null
condition|)
name|ioe
operator|=
name|e
expr_stmt|;
block|}
block|}
comment|// throw the first exception
if|if
condition|(
name|ioe
operator|!=
literal|null
condition|)
throw|throw
name|ioe
throw|;
block|}
comment|/**    * Builder implementation to create instances of {@link ParallelCompositeReader}.    */
DECL|class|Builder
specifier|public
specifier|static
specifier|final
class|class
name|Builder
block|{
DECL|field|closeSubReaders
specifier|private
specifier|final
name|boolean
name|closeSubReaders
decl_stmt|;
DECL|field|readers
specifier|private
specifier|final
name|List
argument_list|<
name|CompositeReader
argument_list|>
name|readers
init|=
operator|new
name|ArrayList
argument_list|<
name|CompositeReader
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|ignoreStoredFieldsSet
specifier|private
specifier|final
name|BitSet
name|ignoreStoredFieldsSet
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
DECL|field|leaveSizes
DECL|field|childSizes
specifier|private
name|int
index|[]
name|leaveSizes
decl_stmt|,
name|childSizes
decl_stmt|;
DECL|field|maxDoc
DECL|field|numDocs
specifier|private
name|int
name|maxDoc
decl_stmt|,
name|numDocs
decl_stmt|;
comment|/**      * Create a new builder instance that automatically enables closing of all subreader      * once the build reader is closed.      */
DECL|method|Builder
specifier|public
name|Builder
parameter_list|()
block|{
name|this
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new builder instance.      */
DECL|method|Builder
specifier|public
name|Builder
parameter_list|(
name|boolean
name|closeSubReaders
parameter_list|)
block|{
name|this
operator|.
name|closeSubReaders
operator|=
name|closeSubReaders
expr_stmt|;
block|}
comment|/** Add an CompositeReader.      * @throws IOException if there is a low-level IO error      */
DECL|method|add
specifier|public
name|Builder
name|add
parameter_list|(
name|CompositeReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|add
argument_list|(
name|reader
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/** Add an CompositeReader whose stored fields will not be returned.  This can      * accelerate search when stored fields are only needed from a subset of      * the IndexReaders.      *      * @throws IllegalArgumentException if not all indexes contain the same number      *     of documents      * @throws IllegalArgumentException if not all indexes have the same value      *     of {@link AtomicReader#maxDoc()}      * @throws IOException if there is a low-level IO error      */
DECL|method|add
specifier|public
name|Builder
name|add
parameter_list|(
name|CompositeReader
name|reader
parameter_list|,
name|boolean
name|ignoreStoredFields
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|IndexReader
index|[]
name|subs
init|=
name|reader
operator|.
name|getSequentialSubReaders
argument_list|()
decl_stmt|;
if|if
condition|(
name|readers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|maxDoc
operator|=
name|reader
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
name|this
operator|.
name|numDocs
operator|=
name|reader
operator|.
name|numDocs
argument_list|()
expr_stmt|;
name|childSizes
operator|=
operator|new
name|int
index|[
name|subs
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|childSizes
index|[
name|i
index|]
operator|=
name|subs
index|[
name|i
index|]
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
block|}
specifier|final
name|AtomicReaderContext
index|[]
name|leaves
init|=
name|reader
operator|.
name|getTopReaderContext
argument_list|()
operator|.
name|leaves
argument_list|()
decl_stmt|;
name|leaveSizes
operator|=
operator|new
name|int
index|[
name|leaves
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|leaves
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|leaveSizes
index|[
name|i
index|]
operator|=
name|leaves
index|[
name|i
index|]
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// check compatibility
if|if
condition|(
name|reader
operator|.
name|maxDoc
argument_list|()
operator|!=
name|maxDoc
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"All readers must have same maxDoc: "
operator|+
name|maxDoc
operator|+
literal|"!="
operator|+
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|reader
operator|.
name|numDocs
argument_list|()
operator|!=
name|numDocs
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"All readers must have same numDocs: "
operator|+
name|numDocs
operator|+
literal|"!="
operator|+
name|reader
operator|.
name|numDocs
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|subs
operator|.
name|length
operator|!=
name|childSizes
operator|.
name|length
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"All readers must have same number of subReaders"
argument_list|)
throw|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|subs
index|[
name|i
index|]
operator|.
name|maxDoc
argument_list|()
operator|!=
name|childSizes
index|[
name|i
index|]
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"All readers must have same subReader maxDoc"
argument_list|)
throw|;
block|}
comment|// the following checks are only to detect errors early, otherwise a wrong leaf
comment|// structure would only cause errors on build(). These checks are still incomplete...
specifier|final
name|AtomicReaderContext
index|[]
name|leaves
init|=
name|reader
operator|.
name|getTopReaderContext
argument_list|()
operator|.
name|leaves
argument_list|()
decl_stmt|;
if|if
condition|(
name|leaves
operator|.
name|length
operator|!=
name|leaveSizes
operator|.
name|length
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"All readers must have same number of atomic leaves"
argument_list|)
throw|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|leaves
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|leaves
index|[
name|i
index|]
operator|.
name|reader
argument_list|()
operator|.
name|maxDoc
argument_list|()
operator|!=
name|leaveSizes
index|[
name|i
index|]
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"All readers must have atomic leaves with same maxDoc"
argument_list|)
throw|;
block|}
block|}
name|ignoreStoredFieldsSet
operator|.
name|set
argument_list|(
name|readers
operator|.
name|size
argument_list|()
argument_list|,
name|ignoreStoredFields
argument_list|)
expr_stmt|;
name|readers
operator|.
name|add
argument_list|(
name|reader
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Build the {@link ParallelCompositeReader} instance from the settings.      */
DECL|method|build
specifier|public
name|ParallelCompositeReader
name|build
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|ParallelCompositeReader
argument_list|(
name|closeSubReaders
argument_list|,
name|readers
argument_list|,
name|ignoreStoredFieldsSet
argument_list|)
return|;
block|}
block|}
block|}
end_class
end_unit
