begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SearcherManager
import|;
end_import
begin_comment
comment|// javadocs
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|*
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ReaderUtil
import|;
end_import
begin_comment
comment|/** IndexReader is an abstract class, providing an interface for accessing an  index.  Search of an index is done entirely through this abstract interface,  so that any subclass which implements it is searchable.<p> Concrete subclasses of IndexReader are usually constructed with a call to  one of the static<code>open()</code> methods, e.g. {@link  #open(Directory)}.<p> For efficiency, in this API documents are often referred to via<i>document numbers</i>, non-negative integers which each name a unique  document in the index.  These document numbers are ephemeral--they may change  as documents are added to and deleted from an index.  Clients should thus not  rely on a given document having the same number between sessions.<p><b>NOTE</b>: for backwards API compatibility, several methods are not listed   as abstract, but have no useful implementations in this base class and   instead always throw UnsupportedOperationException.  Subclasses are   strongly encouraged to override these methods, but in many cases may not   need to.</p><p><a name="thread-safety"></a><p><b>NOTE</b>: {@link  IndexReader} instances are completely thread  safe, meaning multiple threads can call any of its methods,  concurrently.  If your application requires external  synchronization, you should<b>not</b> synchronize on the<code>IndexReader</code> instance; use your own  (non-Lucene) objects instead. */
end_comment
begin_class
DECL|class|CompositeReader
specifier|public
specifier|abstract
class|class
name|CompositeReader
extends|extends
name|IndexReader
block|{
DECL|field|readerContext
specifier|private
name|CompositeReaderContext
name|readerContext
init|=
literal|null
decl_stmt|;
comment|// lazy init
DECL|method|CompositeReader
specifier|protected
name|CompositeReader
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
specifier|final
name|IndexReader
index|[]
name|subReaders
init|=
name|getSequentialSubReaders
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|subReaders
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|subReaders
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|subReaders
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|subReaders
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|subReaders
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Expert: returns the sequential sub readers that this    *  reader is logically composed of. It contrast to previous    *  Lucene versions may not return null.    *  If this method returns an empty array, that means this    *  reader is a null reader (for example a MultiReader    *  that has no sub readers).    */
DECL|method|getSequentialSubReaders
specifier|public
specifier|abstract
name|IndexReader
index|[]
name|getSequentialSubReaders
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|getTopReaderContext
specifier|public
specifier|final
name|CompositeReaderContext
name|getTopReaderContext
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
comment|// lazy init without thread safety for perf reasons: Building the readerContext twice does not hurt!
if|if
condition|(
name|readerContext
operator|==
literal|null
condition|)
block|{
assert|assert
name|getSequentialSubReaders
argument_list|()
operator|!=
literal|null
assert|;
name|readerContext
operator|=
operator|new
name|ReaderContextBuilder
argument_list|(
name|this
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
return|return
name|readerContext
return|;
block|}
DECL|class|ReaderContextBuilder
specifier|private
specifier|static
class|class
name|ReaderContextBuilder
block|{
DECL|field|reader
specifier|private
specifier|final
name|CompositeReader
name|reader
decl_stmt|;
DECL|field|leaves
specifier|private
specifier|final
name|AtomicReaderContext
index|[]
name|leaves
decl_stmt|;
DECL|field|leafOrd
specifier|private
name|int
name|leafOrd
init|=
literal|0
decl_stmt|;
DECL|field|leafDocBase
specifier|private
name|int
name|leafDocBase
init|=
literal|0
decl_stmt|;
DECL|method|ReaderContextBuilder
specifier|public
name|ReaderContextBuilder
parameter_list|(
name|CompositeReader
name|reader
parameter_list|)
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|leaves
operator|=
operator|new
name|AtomicReaderContext
index|[
name|numLeaves
argument_list|(
name|reader
argument_list|)
index|]
expr_stmt|;
block|}
DECL|method|build
specifier|public
name|CompositeReaderContext
name|build
parameter_list|()
block|{
return|return
operator|(
name|CompositeReaderContext
operator|)
name|build
argument_list|(
literal|null
argument_list|,
name|reader
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|build
specifier|private
name|IndexReaderContext
name|build
parameter_list|(
name|CompositeReaderContext
name|parent
parameter_list|,
name|IndexReader
name|reader
parameter_list|,
name|int
name|ord
parameter_list|,
name|int
name|docBase
parameter_list|)
block|{
if|if
condition|(
name|reader
operator|instanceof
name|AtomicReader
condition|)
block|{
specifier|final
name|AtomicReader
name|ar
init|=
operator|(
name|AtomicReader
operator|)
name|reader
decl_stmt|;
specifier|final
name|AtomicReaderContext
name|atomic
init|=
operator|new
name|AtomicReaderContext
argument_list|(
name|parent
argument_list|,
name|ar
argument_list|,
name|ord
argument_list|,
name|docBase
argument_list|,
name|leafOrd
argument_list|,
name|leafDocBase
argument_list|)
decl_stmt|;
name|leaves
index|[
name|leafOrd
operator|++
index|]
operator|=
name|atomic
expr_stmt|;
name|leafDocBase
operator|+=
name|reader
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
return|return
name|atomic
return|;
block|}
else|else
block|{
specifier|final
name|CompositeReader
name|cr
init|=
operator|(
name|CompositeReader
operator|)
name|reader
decl_stmt|;
specifier|final
name|IndexReader
index|[]
name|sequentialSubReaders
init|=
name|cr
operator|.
name|getSequentialSubReaders
argument_list|()
decl_stmt|;
specifier|final
name|IndexReaderContext
index|[]
name|children
init|=
operator|new
name|IndexReaderContext
index|[
name|sequentialSubReaders
operator|.
name|length
index|]
decl_stmt|;
specifier|final
name|CompositeReaderContext
name|newParent
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
name|newParent
operator|=
operator|new
name|CompositeReaderContext
argument_list|(
name|cr
argument_list|,
name|children
argument_list|,
name|leaves
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newParent
operator|=
operator|new
name|CompositeReaderContext
argument_list|(
name|parent
argument_list|,
name|cr
argument_list|,
name|ord
argument_list|,
name|docBase
argument_list|,
name|children
argument_list|)
expr_stmt|;
block|}
name|int
name|newDocBase
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sequentialSubReaders
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|children
index|[
name|i
index|]
operator|=
name|build
argument_list|(
name|newParent
argument_list|,
name|sequentialSubReaders
index|[
name|i
index|]
argument_list|,
name|i
argument_list|,
name|newDocBase
argument_list|)
expr_stmt|;
name|newDocBase
operator|+=
name|sequentialSubReaders
index|[
name|i
index|]
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
block|}
return|return
name|newParent
return|;
block|}
block|}
DECL|method|numLeaves
specifier|private
name|int
name|numLeaves
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
block|{
specifier|final
name|int
index|[]
name|numLeaves
init|=
operator|new
name|int
index|[
literal|1
index|]
decl_stmt|;
try|try
block|{
operator|new
name|ReaderUtil
operator|.
name|Gather
argument_list|(
name|reader
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|add
parameter_list|(
name|int
name|base
parameter_list|,
name|AtomicReader
name|r
parameter_list|)
block|{
name|numLeaves
index|[
literal|0
index|]
operator|++
expr_stmt|;
block|}
block|}
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// won't happen
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
name|numLeaves
index|[
literal|0
index|]
return|;
block|}
block|}
block|}
end_class
end_unit
