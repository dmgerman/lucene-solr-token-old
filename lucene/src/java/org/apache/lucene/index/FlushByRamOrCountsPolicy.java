begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocumentsWriterPerThreadPool
operator|.
name|ThreadState
import|;
end_import
begin_comment
comment|/**  * Default {@link FlushPolicy} implementation that flushes based on RAM  * Consumption, document count and number of buffered deletes depending on the  * IndexWriters {@link IndexWriterConfig}. This {@link FlushPolicy} will only  * respect settings which are not disabled during initialization (  * {@link #init(DocumentsWriter)}). All enabled {@link IndexWriterConfig}  * settings are used to mark {@link DocumentsWriterPerThread} as flush pending  * during indexing with respect to thier live updates.  *<p>  * If {@link IndexWriterConfig#setRAMBufferSizeMB(double)} is enabled always the  * largest ram consuming {@link DocumentsWriterPerThread} will be marked as  * pending iff the global active RAM consumption is equals or higher the  * configured max RAM buffer.  */
end_comment
begin_class
DECL|class|FlushByRamOrCountsPolicy
specifier|public
class|class
name|FlushByRamOrCountsPolicy
extends|extends
name|FlushPolicy
block|{
annotation|@
name|Override
DECL|method|onDelete
specifier|public
name|void
name|onDelete
parameter_list|(
name|DocumentsWriterFlushControl
name|control
parameter_list|,
name|ThreadState
name|state
parameter_list|)
block|{
if|if
condition|(
name|flushOnDeleteTerms
argument_list|()
condition|)
block|{
specifier|final
name|int
name|maxBufferedDeleteTerms
init|=
name|indexWriterConfig
operator|.
name|getMaxBufferedDeleteTerms
argument_list|()
decl_stmt|;
if|if
condition|(
name|control
operator|.
name|getNumGlobalTermDeletes
argument_list|()
operator|>=
name|maxBufferedDeleteTerms
condition|)
block|{
name|control
operator|.
name|setFlushDeletes
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|onInsert
specifier|public
name|void
name|onInsert
parameter_list|(
name|DocumentsWriterFlushControl
name|control
parameter_list|,
name|ThreadState
name|state
parameter_list|)
block|{
if|if
condition|(
name|flushOnDocCount
argument_list|()
operator|&&
name|state
operator|.
name|perThread
operator|.
name|getNumDocsInRAM
argument_list|()
operator|>=
name|indexWriterConfig
operator|.
name|getMaxBufferedDocs
argument_list|()
condition|)
block|{
name|control
operator|.
name|setFlushPending
argument_list|(
name|state
argument_list|)
expr_stmt|;
comment|// flush by num docs
block|}
else|else
block|{
comment|// flush by RAM
if|if
condition|(
name|flushOnRAM
argument_list|()
condition|)
block|{
specifier|final
name|double
name|ramBufferSizeMB
init|=
name|indexWriterConfig
operator|.
name|getRAMBufferSizeMB
argument_list|()
decl_stmt|;
specifier|final
name|long
name|totalRam
init|=
name|control
operator|.
name|activeBytes
argument_list|()
decl_stmt|;
specifier|final
name|long
name|limit
init|=
call|(
name|long
call|)
argument_list|(
name|ramBufferSizeMB
operator|*
literal|1024.d
operator|*
literal|1024.d
argument_list|)
decl_stmt|;
if|if
condition|(
name|totalRam
operator|>=
name|limit
condition|)
block|{
name|markLargestWriterPending
argument_list|(
name|control
argument_list|,
name|state
argument_list|,
name|totalRam
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class
end_unit
