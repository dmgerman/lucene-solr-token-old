begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|UnicodeUtil
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_class
DECL|class|TermVectorsWriter
specifier|final
class|class
name|TermVectorsWriter
block|{
DECL|field|tvx
DECL|field|tvd
DECL|field|tvf
specifier|private
name|IndexOutput
name|tvx
init|=
literal|null
decl_stmt|,
name|tvd
init|=
literal|null
decl_stmt|,
name|tvf
init|=
literal|null
decl_stmt|;
DECL|field|fieldInfos
specifier|private
name|FieldInfos
name|fieldInfos
decl_stmt|;
DECL|field|utf8Results
specifier|final
name|BytesRef
index|[]
name|utf8Results
init|=
operator|new
name|BytesRef
index|[]
block|{
operator|new
name|BytesRef
argument_list|(
literal|10
argument_list|)
block|,
operator|new
name|BytesRef
argument_list|(
literal|10
argument_list|)
block|}
decl_stmt|;
DECL|method|TermVectorsWriter
specifier|public
name|TermVectorsWriter
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|String
name|segment
parameter_list|,
name|FieldInfos
name|fieldInfos
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Open files for TermVector storage
name|tvx
operator|=
name|directory
operator|.
name|createOutput
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segment
argument_list|,
name|IndexFileNames
operator|.
name|VECTORS_INDEX_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|tvx
operator|.
name|writeInt
argument_list|(
name|TermVectorsReader
operator|.
name|FORMAT_CURRENT
argument_list|)
expr_stmt|;
name|tvd
operator|=
name|directory
operator|.
name|createOutput
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segment
argument_list|,
name|IndexFileNames
operator|.
name|VECTORS_DOCUMENTS_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|tvd
operator|.
name|writeInt
argument_list|(
name|TermVectorsReader
operator|.
name|FORMAT_CURRENT
argument_list|)
expr_stmt|;
name|tvf
operator|=
name|directory
operator|.
name|createOutput
argument_list|(
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|segment
argument_list|,
name|IndexFileNames
operator|.
name|VECTORS_FIELDS_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
name|tvf
operator|.
name|writeInt
argument_list|(
name|TermVectorsReader
operator|.
name|FORMAT_CURRENT
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldInfos
operator|=
name|fieldInfos
expr_stmt|;
block|}
comment|/**    * Add a complete document specified by all its term vectors. If document has no    * term vectors, add value for tvx.    *     * @param vectors    * @throws IOException    */
DECL|method|addAllDocVectors
specifier|public
specifier|final
name|void
name|addAllDocVectors
parameter_list|(
name|TermFreqVector
index|[]
name|vectors
parameter_list|)
throws|throws
name|IOException
block|{
name|tvx
operator|.
name|writeLong
argument_list|(
name|tvd
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|tvx
operator|.
name|writeLong
argument_list|(
name|tvf
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|vectors
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|numFields
init|=
name|vectors
operator|.
name|length
decl_stmt|;
name|tvd
operator|.
name|writeVInt
argument_list|(
name|numFields
argument_list|)
expr_stmt|;
name|long
index|[]
name|fieldPointers
init|=
operator|new
name|long
index|[
name|numFields
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFields
condition|;
name|i
operator|++
control|)
block|{
name|fieldPointers
index|[
name|i
index|]
operator|=
name|tvf
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
specifier|final
name|int
name|fieldNumber
init|=
name|fieldInfos
operator|.
name|fieldNumber
argument_list|(
name|vectors
index|[
name|i
index|]
operator|.
name|getField
argument_list|()
argument_list|)
decl_stmt|;
comment|// 1st pass: write field numbers to tvd
name|tvd
operator|.
name|writeVInt
argument_list|(
name|fieldNumber
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numTerms
init|=
name|vectors
index|[
name|i
index|]
operator|.
name|size
argument_list|()
decl_stmt|;
name|tvf
operator|.
name|writeVInt
argument_list|(
name|numTerms
argument_list|)
expr_stmt|;
specifier|final
name|TermPositionVector
name|tpVector
decl_stmt|;
specifier|final
name|byte
name|bits
decl_stmt|;
specifier|final
name|boolean
name|storePositions
decl_stmt|;
specifier|final
name|boolean
name|storeOffsets
decl_stmt|;
if|if
condition|(
name|vectors
index|[
name|i
index|]
operator|instanceof
name|TermPositionVector
condition|)
block|{
comment|// May have positions& offsets
name|tpVector
operator|=
operator|(
name|TermPositionVector
operator|)
name|vectors
index|[
name|i
index|]
expr_stmt|;
name|storePositions
operator|=
name|tpVector
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|tpVector
operator|.
name|getTermPositions
argument_list|(
literal|0
argument_list|)
operator|!=
literal|null
expr_stmt|;
name|storeOffsets
operator|=
name|tpVector
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|tpVector
operator|.
name|getOffsets
argument_list|(
literal|0
argument_list|)
operator|!=
literal|null
expr_stmt|;
name|bits
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|storePositions
condition|?
name|TermVectorsReader
operator|.
name|STORE_POSITIONS_WITH_TERMVECTOR
else|:
literal|0
operator|)
operator|+
operator|(
name|storeOffsets
condition|?
name|TermVectorsReader
operator|.
name|STORE_OFFSET_WITH_TERMVECTOR
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tpVector
operator|=
literal|null
expr_stmt|;
name|bits
operator|=
literal|0
expr_stmt|;
name|storePositions
operator|=
literal|false
expr_stmt|;
name|storeOffsets
operator|=
literal|false
expr_stmt|;
block|}
name|tvf
operator|.
name|writeVInt
argument_list|(
name|bits
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|terms
init|=
name|vectors
index|[
name|i
index|]
operator|.
name|getTerms
argument_list|()
decl_stmt|;
specifier|final
name|int
index|[]
name|freqs
init|=
name|vectors
index|[
name|i
index|]
operator|.
name|getTermFrequencies
argument_list|()
decl_stmt|;
name|int
name|utf8Upto
init|=
literal|0
decl_stmt|;
name|utf8Results
index|[
literal|1
index|]
operator|.
name|length
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numTerms
condition|;
name|j
operator|++
control|)
block|{
name|UnicodeUtil
operator|.
name|UTF16toUTF8
argument_list|(
name|terms
index|[
name|j
index|]
argument_list|,
literal|0
argument_list|,
name|terms
index|[
name|j
index|]
operator|.
name|length
argument_list|()
argument_list|,
name|utf8Results
index|[
name|utf8Upto
index|]
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|StringHelper
operator|.
name|bytesDifference
argument_list|(
name|utf8Results
index|[
literal|1
operator|-
name|utf8Upto
index|]
operator|.
name|bytes
argument_list|,
name|utf8Results
index|[
literal|1
operator|-
name|utf8Upto
index|]
operator|.
name|length
argument_list|,
name|utf8Results
index|[
name|utf8Upto
index|]
operator|.
name|bytes
argument_list|,
name|utf8Results
index|[
name|utf8Upto
index|]
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|utf8Results
index|[
name|utf8Upto
index|]
operator|.
name|length
operator|-
name|start
decl_stmt|;
name|tvf
operator|.
name|writeVInt
argument_list|(
name|start
argument_list|)
expr_stmt|;
comment|// write shared prefix length
name|tvf
operator|.
name|writeVInt
argument_list|(
name|length
argument_list|)
expr_stmt|;
comment|// write delta length
name|tvf
operator|.
name|writeBytes
argument_list|(
name|utf8Results
index|[
name|utf8Upto
index|]
operator|.
name|bytes
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
comment|// write delta bytes
name|utf8Upto
operator|=
literal|1
operator|-
name|utf8Upto
expr_stmt|;
specifier|final
name|int
name|termFreq
init|=
name|freqs
index|[
name|j
index|]
decl_stmt|;
name|tvf
operator|.
name|writeVInt
argument_list|(
name|termFreq
argument_list|)
expr_stmt|;
if|if
condition|(
name|storePositions
condition|)
block|{
specifier|final
name|int
index|[]
name|positions
init|=
name|tpVector
operator|.
name|getTermPositions
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|positions
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Trying to write positions that are null!"
argument_list|)
throw|;
assert|assert
name|positions
operator|.
name|length
operator|==
name|termFreq
assert|;
comment|// use delta encoding for positions
name|int
name|lastPosition
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|positions
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
specifier|final
name|int
name|position
init|=
name|positions
index|[
name|k
index|]
decl_stmt|;
name|tvf
operator|.
name|writeVInt
argument_list|(
name|position
operator|-
name|lastPosition
argument_list|)
expr_stmt|;
name|lastPosition
operator|=
name|position
expr_stmt|;
block|}
block|}
if|if
condition|(
name|storeOffsets
condition|)
block|{
specifier|final
name|TermVectorOffsetInfo
index|[]
name|offsets
init|=
name|tpVector
operator|.
name|getOffsets
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|offsets
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Trying to write offsets that are null!"
argument_list|)
throw|;
assert|assert
name|offsets
operator|.
name|length
operator|==
name|termFreq
assert|;
comment|// use delta encoding for offsets
name|int
name|lastEndOffset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|offsets
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
specifier|final
name|int
name|startOffset
init|=
name|offsets
index|[
name|k
index|]
operator|.
name|getStartOffset
argument_list|()
decl_stmt|;
specifier|final
name|int
name|endOffset
init|=
name|offsets
index|[
name|k
index|]
operator|.
name|getEndOffset
argument_list|()
decl_stmt|;
name|tvf
operator|.
name|writeVInt
argument_list|(
name|startOffset
operator|-
name|lastEndOffset
argument_list|)
expr_stmt|;
name|tvf
operator|.
name|writeVInt
argument_list|(
name|endOffset
operator|-
name|startOffset
argument_list|)
expr_stmt|;
name|lastEndOffset
operator|=
name|endOffset
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// 2nd pass: write field pointers to tvd
if|if
condition|(
name|numFields
operator|>
literal|1
condition|)
block|{
name|long
name|lastFieldPointer
init|=
name|fieldPointers
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numFields
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|long
name|fieldPointer
init|=
name|fieldPointers
index|[
name|i
index|]
decl_stmt|;
name|tvd
operator|.
name|writeVLong
argument_list|(
name|fieldPointer
operator|-
name|lastFieldPointer
argument_list|)
expr_stmt|;
name|lastFieldPointer
operator|=
name|fieldPointer
expr_stmt|;
block|}
block|}
block|}
else|else
name|tvd
operator|.
name|writeVInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Do a bulk copy of numDocs documents from reader to our    * streams.  This is used to expedite merging, if the    * field numbers are congruent.    */
DECL|method|addRawDocuments
specifier|final
name|void
name|addRawDocuments
parameter_list|(
name|TermVectorsReader
name|reader
parameter_list|,
name|int
index|[]
name|tvdLengths
parameter_list|,
name|int
index|[]
name|tvfLengths
parameter_list|,
name|int
name|numDocs
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|tvdPosition
init|=
name|tvd
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|long
name|tvfPosition
init|=
name|tvf
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|long
name|tvdStart
init|=
name|tvdPosition
decl_stmt|;
name|long
name|tvfStart
init|=
name|tvfPosition
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|tvx
operator|.
name|writeLong
argument_list|(
name|tvdPosition
argument_list|)
expr_stmt|;
name|tvdPosition
operator|+=
name|tvdLengths
index|[
name|i
index|]
expr_stmt|;
name|tvx
operator|.
name|writeLong
argument_list|(
name|tvfPosition
argument_list|)
expr_stmt|;
name|tvfPosition
operator|+=
name|tvfLengths
index|[
name|i
index|]
expr_stmt|;
block|}
name|tvd
operator|.
name|copyBytes
argument_list|(
name|reader
operator|.
name|getTvdStream
argument_list|()
argument_list|,
name|tvdPosition
operator|-
name|tvdStart
argument_list|)
expr_stmt|;
name|tvf
operator|.
name|copyBytes
argument_list|(
name|reader
operator|.
name|getTvfStream
argument_list|()
argument_list|,
name|tvfPosition
operator|-
name|tvfStart
argument_list|)
expr_stmt|;
assert|assert
name|tvd
operator|.
name|getFilePointer
argument_list|()
operator|==
name|tvdPosition
assert|;
assert|assert
name|tvf
operator|.
name|getFilePointer
argument_list|()
operator|==
name|tvfPosition
assert|;
block|}
comment|/** Close all streams. */
DECL|method|close
specifier|final
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// make an effort to close all streams we can but remember and re-throw
comment|// the first exception encountered in this process
name|IOException
name|keep
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tvx
operator|!=
literal|null
condition|)
try|try
block|{
name|tvx
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|keep
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
name|tvd
operator|!=
literal|null
condition|)
try|try
block|{
name|tvd
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|keep
operator|==
literal|null
condition|)
name|keep
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
name|tvf
operator|!=
literal|null
condition|)
try|try
block|{
name|tvf
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|keep
operator|==
literal|null
condition|)
name|keep
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
name|keep
operator|!=
literal|null
condition|)
throw|throw
operator|(
name|IOException
operator|)
name|keep
operator|.
name|fillInStackTrace
argument_list|()
throw|;
block|}
block|}
end_class
end_unit
