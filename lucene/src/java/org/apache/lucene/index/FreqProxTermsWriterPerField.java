begin_unit
begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PayloadAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
operator|.
name|IndexOptions
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|FieldsConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|PostingsConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|TermStats
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|codecs
operator|.
name|TermsConsumer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitVector
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import
begin_comment
comment|// TODO: break into separate freq and prox writers as
end_comment
begin_comment
comment|// codecs; make separate container (tii/tis/skip/*) that can
end_comment
begin_comment
comment|// be configured as any number of files 1..N
end_comment
begin_class
DECL|class|FreqProxTermsWriterPerField
specifier|final
class|class
name|FreqProxTermsWriterPerField
extends|extends
name|TermsHashConsumerPerField
implements|implements
name|Comparable
argument_list|<
name|FreqProxTermsWriterPerField
argument_list|>
block|{
DECL|field|parent
specifier|final
name|FreqProxTermsWriter
name|parent
decl_stmt|;
DECL|field|termsHashPerField
specifier|final
name|TermsHashPerField
name|termsHashPerField
decl_stmt|;
DECL|field|fieldInfo
specifier|final
name|FieldInfo
name|fieldInfo
decl_stmt|;
DECL|field|docState
specifier|final
name|DocumentsWriterPerThread
operator|.
name|DocState
name|docState
decl_stmt|;
DECL|field|fieldState
specifier|final
name|FieldInvertState
name|fieldState
decl_stmt|;
DECL|field|indexOptions
name|IndexOptions
name|indexOptions
decl_stmt|;
DECL|field|payloadAttribute
name|PayloadAttribute
name|payloadAttribute
decl_stmt|;
DECL|method|FreqProxTermsWriterPerField
specifier|public
name|FreqProxTermsWriterPerField
parameter_list|(
name|TermsHashPerField
name|termsHashPerField
parameter_list|,
name|FreqProxTermsWriter
name|parent
parameter_list|,
name|FieldInfo
name|fieldInfo
parameter_list|)
block|{
name|this
operator|.
name|termsHashPerField
operator|=
name|termsHashPerField
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|fieldInfo
operator|=
name|fieldInfo
expr_stmt|;
name|docState
operator|=
name|termsHashPerField
operator|.
name|docState
expr_stmt|;
name|fieldState
operator|=
name|termsHashPerField
operator|.
name|fieldState
expr_stmt|;
name|indexOptions
operator|=
name|fieldInfo
operator|.
name|indexOptions
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getStreamCount
name|int
name|getStreamCount
parameter_list|()
block|{
if|if
condition|(
name|fieldInfo
operator|.
name|indexOptions
operator|!=
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
condition|)
return|return
literal|1
return|;
else|else
return|return
literal|2
return|;
block|}
annotation|@
name|Override
DECL|method|finish
name|void
name|finish
parameter_list|()
block|{}
DECL|field|hasPayloads
name|boolean
name|hasPayloads
decl_stmt|;
annotation|@
name|Override
DECL|method|skippingLongTerm
name|void
name|skippingLongTerm
parameter_list|()
throws|throws
name|IOException
block|{}
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|FreqProxTermsWriterPerField
name|other
parameter_list|)
block|{
return|return
name|fieldInfo
operator|.
name|name
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|fieldInfo
operator|.
name|name
argument_list|)
return|;
block|}
DECL|method|reset
name|void
name|reset
parameter_list|()
block|{
comment|// Record, up front, whether our in-RAM format will be
comment|// with or without term freqs:
name|indexOptions
operator|=
name|fieldInfo
operator|.
name|indexOptions
expr_stmt|;
name|payloadAttribute
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start
name|boolean
name|start
parameter_list|(
name|IndexableField
index|[]
name|fields
parameter_list|,
name|int
name|count
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fields
index|[
name|i
index|]
operator|.
name|indexed
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|start
name|void
name|start
parameter_list|(
name|IndexableField
name|f
parameter_list|)
block|{
if|if
condition|(
name|fieldState
operator|.
name|attributeSource
operator|.
name|hasAttribute
argument_list|(
name|PayloadAttribute
operator|.
name|class
argument_list|)
condition|)
block|{
name|payloadAttribute
operator|=
name|fieldState
operator|.
name|attributeSource
operator|.
name|getAttribute
argument_list|(
name|PayloadAttribute
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|payloadAttribute
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|writeProx
name|void
name|writeProx
parameter_list|(
specifier|final
name|int
name|termID
parameter_list|,
name|int
name|proxCode
parameter_list|)
block|{
specifier|final
name|Payload
name|payload
decl_stmt|;
if|if
condition|(
name|payloadAttribute
operator|==
literal|null
condition|)
block|{
name|payload
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|payload
operator|=
name|payloadAttribute
operator|.
name|getPayload
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|payload
operator|!=
literal|null
operator|&&
name|payload
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|termsHashPerField
operator|.
name|writeVInt
argument_list|(
literal|1
argument_list|,
operator|(
name|proxCode
operator|<<
literal|1
operator|)
operator||
literal|1
argument_list|)
expr_stmt|;
name|termsHashPerField
operator|.
name|writeVInt
argument_list|(
literal|1
argument_list|,
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
name|termsHashPerField
operator|.
name|writeBytes
argument_list|(
literal|1
argument_list|,
name|payload
operator|.
name|data
argument_list|,
name|payload
operator|.
name|offset
argument_list|,
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
name|hasPayloads
operator|=
literal|true
expr_stmt|;
block|}
else|else
name|termsHashPerField
operator|.
name|writeVInt
argument_list|(
literal|1
argument_list|,
name|proxCode
operator|<<
literal|1
argument_list|)
expr_stmt|;
name|FreqProxPostingsArray
name|postings
init|=
operator|(
name|FreqProxPostingsArray
operator|)
name|termsHashPerField
operator|.
name|postingsArray
decl_stmt|;
name|postings
operator|.
name|lastPositions
index|[
name|termID
index|]
operator|=
name|fieldState
operator|.
name|position
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newTerm
name|void
name|newTerm
parameter_list|(
specifier|final
name|int
name|termID
parameter_list|)
block|{
comment|// First time we're seeing this term since the last
comment|// flush
assert|assert
name|docState
operator|.
name|testPoint
argument_list|(
literal|"FreqProxTermsWriterPerField.newTerm start"
argument_list|)
assert|;
name|FreqProxPostingsArray
name|postings
init|=
operator|(
name|FreqProxPostingsArray
operator|)
name|termsHashPerField
operator|.
name|postingsArray
decl_stmt|;
name|postings
operator|.
name|lastDocIDs
index|[
name|termID
index|]
operator|=
name|docState
operator|.
name|docID
expr_stmt|;
if|if
condition|(
name|indexOptions
operator|==
name|IndexOptions
operator|.
name|DOCS_ONLY
condition|)
block|{
name|postings
operator|.
name|lastDocCodes
index|[
name|termID
index|]
operator|=
name|docState
operator|.
name|docID
expr_stmt|;
block|}
else|else
block|{
name|postings
operator|.
name|lastDocCodes
index|[
name|termID
index|]
operator|=
name|docState
operator|.
name|docID
operator|<<
literal|1
expr_stmt|;
name|postings
operator|.
name|docFreqs
index|[
name|termID
index|]
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|indexOptions
operator|==
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
condition|)
block|{
name|writeProx
argument_list|(
name|termID
argument_list|,
name|fieldState
operator|.
name|position
argument_list|)
expr_stmt|;
block|}
block|}
name|fieldState
operator|.
name|maxTermFrequency
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|fieldState
operator|.
name|maxTermFrequency
argument_list|)
expr_stmt|;
name|fieldState
operator|.
name|uniqueTermCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addTerm
name|void
name|addTerm
parameter_list|(
specifier|final
name|int
name|termID
parameter_list|)
block|{
assert|assert
name|docState
operator|.
name|testPoint
argument_list|(
literal|"FreqProxTermsWriterPerField.addTerm start"
argument_list|)
assert|;
name|FreqProxPostingsArray
name|postings
init|=
operator|(
name|FreqProxPostingsArray
operator|)
name|termsHashPerField
operator|.
name|postingsArray
decl_stmt|;
assert|assert
name|indexOptions
operator|==
name|IndexOptions
operator|.
name|DOCS_ONLY
operator|||
name|postings
operator|.
name|docFreqs
index|[
name|termID
index|]
operator|>
literal|0
assert|;
if|if
condition|(
name|indexOptions
operator|==
name|IndexOptions
operator|.
name|DOCS_ONLY
condition|)
block|{
if|if
condition|(
name|docState
operator|.
name|docID
operator|!=
name|postings
operator|.
name|lastDocIDs
index|[
name|termID
index|]
condition|)
block|{
assert|assert
name|docState
operator|.
name|docID
operator|>
name|postings
operator|.
name|lastDocIDs
index|[
name|termID
index|]
assert|;
name|termsHashPerField
operator|.
name|writeVInt
argument_list|(
literal|0
argument_list|,
name|postings
operator|.
name|lastDocCodes
index|[
name|termID
index|]
argument_list|)
expr_stmt|;
name|postings
operator|.
name|lastDocCodes
index|[
name|termID
index|]
operator|=
name|docState
operator|.
name|docID
operator|-
name|postings
operator|.
name|lastDocIDs
index|[
name|termID
index|]
expr_stmt|;
name|postings
operator|.
name|lastDocIDs
index|[
name|termID
index|]
operator|=
name|docState
operator|.
name|docID
expr_stmt|;
name|fieldState
operator|.
name|uniqueTermCount
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|docState
operator|.
name|docID
operator|!=
name|postings
operator|.
name|lastDocIDs
index|[
name|termID
index|]
condition|)
block|{
assert|assert
name|docState
operator|.
name|docID
operator|>
name|postings
operator|.
name|lastDocIDs
index|[
name|termID
index|]
operator|:
literal|"id: "
operator|+
name|docState
operator|.
name|docID
operator|+
literal|" postings ID: "
operator|+
name|postings
operator|.
name|lastDocIDs
index|[
name|termID
index|]
operator|+
literal|" termID: "
operator|+
name|termID
assert|;
comment|// Term not yet seen in the current doc but previously
comment|// seen in other doc(s) since the last flush
comment|// Now that we know doc freq for previous doc,
comment|// write it& lastDocCode
if|if
condition|(
literal|1
operator|==
name|postings
operator|.
name|docFreqs
index|[
name|termID
index|]
condition|)
name|termsHashPerField
operator|.
name|writeVInt
argument_list|(
literal|0
argument_list|,
name|postings
operator|.
name|lastDocCodes
index|[
name|termID
index|]
operator||
literal|1
argument_list|)
expr_stmt|;
else|else
block|{
name|termsHashPerField
operator|.
name|writeVInt
argument_list|(
literal|0
argument_list|,
name|postings
operator|.
name|lastDocCodes
index|[
name|termID
index|]
argument_list|)
expr_stmt|;
name|termsHashPerField
operator|.
name|writeVInt
argument_list|(
literal|0
argument_list|,
name|postings
operator|.
name|docFreqs
index|[
name|termID
index|]
argument_list|)
expr_stmt|;
block|}
name|postings
operator|.
name|docFreqs
index|[
name|termID
index|]
operator|=
literal|1
expr_stmt|;
name|fieldState
operator|.
name|maxTermFrequency
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|fieldState
operator|.
name|maxTermFrequency
argument_list|)
expr_stmt|;
name|postings
operator|.
name|lastDocCodes
index|[
name|termID
index|]
operator|=
operator|(
name|docState
operator|.
name|docID
operator|-
name|postings
operator|.
name|lastDocIDs
index|[
name|termID
index|]
operator|)
operator|<<
literal|1
expr_stmt|;
name|postings
operator|.
name|lastDocIDs
index|[
name|termID
index|]
operator|=
name|docState
operator|.
name|docID
expr_stmt|;
if|if
condition|(
name|indexOptions
operator|==
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
condition|)
block|{
name|writeProx
argument_list|(
name|termID
argument_list|,
name|fieldState
operator|.
name|position
argument_list|)
expr_stmt|;
block|}
name|fieldState
operator|.
name|uniqueTermCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|fieldState
operator|.
name|maxTermFrequency
operator|=
name|Math
operator|.
name|max
argument_list|(
name|fieldState
operator|.
name|maxTermFrequency
argument_list|,
operator|++
name|postings
operator|.
name|docFreqs
index|[
name|termID
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexOptions
operator|==
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
condition|)
block|{
name|writeProx
argument_list|(
name|termID
argument_list|,
name|fieldState
operator|.
name|position
operator|-
name|postings
operator|.
name|lastPositions
index|[
name|termID
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|createPostingsArray
name|ParallelPostingsArray
name|createPostingsArray
parameter_list|(
name|int
name|size
parameter_list|)
block|{
return|return
operator|new
name|FreqProxPostingsArray
argument_list|(
name|size
argument_list|)
return|;
block|}
DECL|class|FreqProxPostingsArray
specifier|static
specifier|final
class|class
name|FreqProxPostingsArray
extends|extends
name|ParallelPostingsArray
block|{
DECL|method|FreqProxPostingsArray
specifier|public
name|FreqProxPostingsArray
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|super
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|docFreqs
operator|=
operator|new
name|int
index|[
name|size
index|]
expr_stmt|;
name|lastDocIDs
operator|=
operator|new
name|int
index|[
name|size
index|]
expr_stmt|;
name|lastDocCodes
operator|=
operator|new
name|int
index|[
name|size
index|]
expr_stmt|;
name|lastPositions
operator|=
operator|new
name|int
index|[
name|size
index|]
expr_stmt|;
block|}
DECL|field|docFreqs
name|int
name|docFreqs
index|[]
decl_stmt|;
comment|// # times this term occurs in the current doc
DECL|field|lastDocIDs
name|int
name|lastDocIDs
index|[]
decl_stmt|;
comment|// Last docID where this term occurred
DECL|field|lastDocCodes
name|int
name|lastDocCodes
index|[]
decl_stmt|;
comment|// Code for prior doc
DECL|field|lastPositions
name|int
name|lastPositions
index|[]
decl_stmt|;
comment|// Last position where this term occurred
annotation|@
name|Override
DECL|method|newInstance
name|ParallelPostingsArray
name|newInstance
parameter_list|(
name|int
name|size
parameter_list|)
block|{
return|return
operator|new
name|FreqProxPostingsArray
argument_list|(
name|size
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|copyTo
name|void
name|copyTo
parameter_list|(
name|ParallelPostingsArray
name|toArray
parameter_list|,
name|int
name|numToCopy
parameter_list|)
block|{
assert|assert
name|toArray
operator|instanceof
name|FreqProxPostingsArray
assert|;
name|FreqProxPostingsArray
name|to
init|=
operator|(
name|FreqProxPostingsArray
operator|)
name|toArray
decl_stmt|;
name|super
operator|.
name|copyTo
argument_list|(
name|toArray
argument_list|,
name|numToCopy
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|docFreqs
argument_list|,
literal|0
argument_list|,
name|to
operator|.
name|docFreqs
argument_list|,
literal|0
argument_list|,
name|numToCopy
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|lastDocIDs
argument_list|,
literal|0
argument_list|,
name|to
operator|.
name|lastDocIDs
argument_list|,
literal|0
argument_list|,
name|numToCopy
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|lastDocCodes
argument_list|,
literal|0
argument_list|,
name|to
operator|.
name|lastDocCodes
argument_list|,
literal|0
argument_list|,
name|numToCopy
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|lastPositions
argument_list|,
literal|0
argument_list|,
name|to
operator|.
name|lastPositions
argument_list|,
literal|0
argument_list|,
name|numToCopy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|bytesPerPosting
name|int
name|bytesPerPosting
parameter_list|()
block|{
return|return
name|ParallelPostingsArray
operator|.
name|BYTES_PER_POSTING
operator|+
literal|4
operator|*
name|RamUsageEstimator
operator|.
name|NUM_BYTES_INT
return|;
block|}
block|}
DECL|method|abort
specifier|public
name|void
name|abort
parameter_list|()
block|{}
DECL|field|payload
name|BytesRef
name|payload
decl_stmt|;
comment|/* Walk through all unique text tokens (Posting    * instances) found in this field and serialize them    * into a single RAM segment. */
DECL|method|flush
name|void
name|flush
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|FieldsConsumer
name|consumer
parameter_list|,
specifier|final
name|SegmentWriteState
name|state
parameter_list|)
throws|throws
name|CorruptIndexException
throws|,
name|IOException
block|{
specifier|final
name|TermsConsumer
name|termsConsumer
init|=
name|consumer
operator|.
name|addField
argument_list|(
name|fieldInfo
argument_list|)
decl_stmt|;
specifier|final
name|Comparator
argument_list|<
name|BytesRef
argument_list|>
name|termComp
init|=
name|termsConsumer
operator|.
name|getComparator
argument_list|()
decl_stmt|;
specifier|final
name|IndexOptions
name|currentFieldIndexOptions
init|=
name|fieldInfo
operator|.
name|indexOptions
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Term
argument_list|,
name|Integer
argument_list|>
name|segDeletes
decl_stmt|;
if|if
condition|(
name|state
operator|.
name|segDeletes
operator|!=
literal|null
operator|&&
name|state
operator|.
name|segDeletes
operator|.
name|terms
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|segDeletes
operator|=
name|state
operator|.
name|segDeletes
operator|.
name|terms
expr_stmt|;
block|}
else|else
block|{
name|segDeletes
operator|=
literal|null
expr_stmt|;
block|}
specifier|final
name|int
index|[]
name|termIDs
init|=
name|termsHashPerField
operator|.
name|sortPostings
argument_list|(
name|termComp
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numTerms
init|=
name|termsHashPerField
operator|.
name|bytesHash
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|BytesRef
name|text
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
specifier|final
name|FreqProxPostingsArray
name|postings
init|=
operator|(
name|FreqProxPostingsArray
operator|)
name|termsHashPerField
operator|.
name|postingsArray
decl_stmt|;
specifier|final
name|ByteSliceReader
name|freq
init|=
operator|new
name|ByteSliceReader
argument_list|()
decl_stmt|;
specifier|final
name|ByteSliceReader
name|prox
init|=
operator|new
name|ByteSliceReader
argument_list|()
decl_stmt|;
name|long
name|sumTotalTermFreq
init|=
literal|0
decl_stmt|;
name|long
name|sumDocFreq
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTerms
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|termID
init|=
name|termIDs
index|[
name|i
index|]
decl_stmt|;
comment|// Get BytesRef
specifier|final
name|int
name|textStart
init|=
name|postings
operator|.
name|textStarts
index|[
name|termID
index|]
decl_stmt|;
name|termsHashPerField
operator|.
name|bytePool
operator|.
name|setBytesRef
argument_list|(
name|text
argument_list|,
name|textStart
argument_list|)
expr_stmt|;
name|termsHashPerField
operator|.
name|initReader
argument_list|(
name|freq
argument_list|,
name|termID
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldInfo
operator|.
name|indexOptions
operator|==
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
condition|)
block|{
name|termsHashPerField
operator|.
name|initReader
argument_list|(
name|prox
argument_list|,
name|termID
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// TODO: really TermsHashPerField should take over most
comment|// of this loop, including merge sort of terms from
comment|// multiple threads and interacting with the
comment|// TermsConsumer, only calling out to us (passing us the
comment|// DocsConsumer) to handle delivery of docs/positions
specifier|final
name|PostingsConsumer
name|postingsConsumer
init|=
name|termsConsumer
operator|.
name|startTerm
argument_list|(
name|text
argument_list|)
decl_stmt|;
specifier|final
name|int
name|delDocLimit
decl_stmt|;
if|if
condition|(
name|segDeletes
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Integer
name|docIDUpto
init|=
name|segDeletes
operator|.
name|get
argument_list|(
operator|new
name|Term
argument_list|(
name|fieldName
argument_list|,
name|text
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|docIDUpto
operator|!=
literal|null
condition|)
block|{
name|delDocLimit
operator|=
name|docIDUpto
expr_stmt|;
block|}
else|else
block|{
name|delDocLimit
operator|=
literal|0
expr_stmt|;
block|}
block|}
else|else
block|{
name|delDocLimit
operator|=
literal|0
expr_stmt|;
block|}
comment|// Now termStates has numToMerge FieldMergeStates
comment|// which all share the same term.  Now we must
comment|// interleave the docID streams.
name|int
name|numDocs
init|=
literal|0
decl_stmt|;
name|long
name|totTF
init|=
literal|0
decl_stmt|;
name|int
name|docID
init|=
literal|0
decl_stmt|;
name|int
name|termFreq
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|freq
operator|.
name|eof
argument_list|()
condition|)
block|{
if|if
condition|(
name|postings
operator|.
name|lastDocCodes
index|[
name|termID
index|]
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// Return last doc
name|docID
operator|=
name|postings
operator|.
name|lastDocIDs
index|[
name|termID
index|]
expr_stmt|;
if|if
condition|(
name|indexOptions
operator|!=
name|IndexOptions
operator|.
name|DOCS_ONLY
condition|)
block|{
name|termFreq
operator|=
name|postings
operator|.
name|docFreqs
index|[
name|termID
index|]
expr_stmt|;
block|}
name|postings
operator|.
name|lastDocCodes
index|[
name|termID
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
comment|// EOF
break|break;
block|}
block|}
else|else
block|{
specifier|final
name|int
name|code
init|=
name|freq
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexOptions
operator|==
name|IndexOptions
operator|.
name|DOCS_ONLY
condition|)
block|{
name|docID
operator|+=
name|code
expr_stmt|;
block|}
else|else
block|{
name|docID
operator|+=
name|code
operator|>>>
literal|1
expr_stmt|;
if|if
condition|(
operator|(
name|code
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
name|termFreq
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|termFreq
operator|=
name|freq
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
block|}
assert|assert
name|docID
operator|!=
name|postings
operator|.
name|lastDocIDs
index|[
name|termID
index|]
assert|;
block|}
name|numDocs
operator|++
expr_stmt|;
assert|assert
name|docID
operator|<
name|state
operator|.
name|numDocs
operator|:
literal|"doc="
operator|+
name|docID
operator|+
literal|" maxDoc="
operator|+
name|state
operator|.
name|numDocs
assert|;
specifier|final
name|int
name|termDocFreq
init|=
name|termFreq
decl_stmt|;
comment|// NOTE: we could check here if the docID was
comment|// deleted, and skip it.  However, this is somewhat
comment|// dangerous because it can yield non-deterministic
comment|// behavior since we may see the docID before we see
comment|// the term that caused it to be deleted.  This
comment|// would mean some (but not all) of its postings may
comment|// make it into the index, which'd alter the docFreq
comment|// for those terms.  We could fix this by doing two
comment|// passes, ie first sweep marks all del docs, and
comment|// 2nd sweep does the real flush, but I suspect
comment|// that'd add too much time to flush.
name|postingsConsumer
operator|.
name|startDoc
argument_list|(
name|docID
argument_list|,
name|termDocFreq
argument_list|)
expr_stmt|;
if|if
condition|(
name|docID
operator|<
name|delDocLimit
condition|)
block|{
comment|// Mark it deleted.  TODO: we could also skip
comment|// writing its postings; this would be
comment|// deterministic (just for this Term's docs).
if|if
condition|(
name|state
operator|.
name|liveDocs
operator|==
literal|null
condition|)
block|{
name|state
operator|.
name|liveDocs
operator|=
operator|new
name|BitVector
argument_list|(
name|state
operator|.
name|numDocs
argument_list|)
expr_stmt|;
name|state
operator|.
name|liveDocs
operator|.
name|invertAll
argument_list|()
expr_stmt|;
block|}
name|state
operator|.
name|liveDocs
operator|.
name|clear
argument_list|(
name|docID
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|currentFieldIndexOptions
operator|!=
name|IndexOptions
operator|.
name|DOCS_ONLY
condition|)
block|{
name|totTF
operator|+=
name|termDocFreq
expr_stmt|;
block|}
comment|// Carefully copy over the prox + payload info,
comment|// changing the format to match Lucene's segment
comment|// format.
if|if
condition|(
name|currentFieldIndexOptions
operator|==
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
condition|)
block|{
comment|// we do write positions& payload
name|int
name|position
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|termDocFreq
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|int
name|code
init|=
name|prox
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|position
operator|+=
name|code
operator|>>
literal|1
expr_stmt|;
specifier|final
name|int
name|payloadLength
decl_stmt|;
specifier|final
name|BytesRef
name|thisPayload
decl_stmt|;
if|if
condition|(
operator|(
name|code
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// This position has a payload
name|payloadLength
operator|=
name|prox
operator|.
name|readVInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|payload
operator|==
literal|null
condition|)
block|{
name|payload
operator|=
operator|new
name|BytesRef
argument_list|()
expr_stmt|;
name|payload
operator|.
name|bytes
operator|=
operator|new
name|byte
index|[
name|payloadLength
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|payload
operator|.
name|bytes
operator|.
name|length
operator|<
name|payloadLength
condition|)
block|{
name|payload
operator|.
name|grow
argument_list|(
name|payloadLength
argument_list|)
expr_stmt|;
block|}
name|prox
operator|.
name|readBytes
argument_list|(
name|payload
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|payloadLength
argument_list|)
expr_stmt|;
name|payload
operator|.
name|length
operator|=
name|payloadLength
expr_stmt|;
name|thisPayload
operator|=
name|payload
expr_stmt|;
block|}
else|else
block|{
name|payloadLength
operator|=
literal|0
expr_stmt|;
name|thisPayload
operator|=
literal|null
expr_stmt|;
block|}
name|postingsConsumer
operator|.
name|addPosition
argument_list|(
name|position
argument_list|,
name|thisPayload
argument_list|)
expr_stmt|;
block|}
name|postingsConsumer
operator|.
name|finishDoc
argument_list|()
expr_stmt|;
block|}
block|}
name|termsConsumer
operator|.
name|finishTerm
argument_list|(
name|text
argument_list|,
operator|new
name|TermStats
argument_list|(
name|numDocs
argument_list|,
name|totTF
argument_list|)
argument_list|)
expr_stmt|;
name|sumTotalTermFreq
operator|+=
name|totTF
expr_stmt|;
name|sumDocFreq
operator|+=
name|numDocs
expr_stmt|;
block|}
name|termsConsumer
operator|.
name|finish
argument_list|(
name|sumTotalTermFreq
argument_list|,
name|sumDocFreq
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
