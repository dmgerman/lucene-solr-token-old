begin_unit
begin_comment
comment|/* Generated By:JavaCC: Do not edit this line. QueryParser.java */
end_comment
begin_package
DECL|package|org.apache.lucene.queryParser
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryParser
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|Collator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CachingTokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TermToBytesRefAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DateField
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DateTools
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FuzzyQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiTermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiPhraseQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PhraseQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PrefixQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|RegexpQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermRangeQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|WildcardQuery
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|VirtualMethod
import|;
end_import
begin_comment
comment|/**  * This class is generated by JavaCC.  The most important method is  * {@link #parse(String)}.  *  * The syntax for query strings is as follows:  * A Query is a series of clauses.  * A clause may be prefixed by:  *<ul>  *<li> a plus (<code>+</code>) or a minus (<code>-</code>) sign, indicating  * that the clause is required or prohibited respectively; or  *<li> a term followed by a colon, indicating the field to be searched.  * This enables one to construct queries which search multiple fields.  *</ul>  *  * A clause may be either:  *<ul>  *<li> a term, indicating all the documents that contain this term; or  *<li> a nested query, enclosed in parentheses.  Note that this may be used  * with a<code>+</code>/<code>-</code> prefix to require any of a set of  * terms.  *</ul>  *  * Thus, in BNF, the query grammar is:  *<pre>  *   Query  ::= ( Clause )*  *   Clause ::= ["+", "-"] [&lt;TERM&gt; ":"] (&lt;TERM&gt; | "(" Query ")" )  *</pre>  *  *<p>  * Examples of appropriately formatted queries can be found in the<a  * href="../../../../../../queryparsersyntax.html">query syntax  * documentation</a>.  *</p>  *  *<p>  * In {@link TermRangeQuery}s, QueryParser tries to detect date values, e.g.  *<tt>date:[6/1/2005 TO 6/4/2005]</tt> produces a range query that searches  * for "date" fields between 2005-06-01 and 2005-06-04. Note that the format  * of the accepted input depends on {@link #setLocale(Locale) the locale}.  * By default a date is converted into a search term using the deprecated  * {@link DateField} for compatibility reasons.  * To use the new {@link DateTools} to convert dates, a  * {@link org.apache.lucene.document.DateTools.Resolution} has to be set.  *</p>  *<p>  * The date resolution that shall be used for RangeQueries can be set  * using {@link #setDateResolution(DateTools.Resolution)}  * or {@link #setDateResolution(String, DateTools.Resolution)}. The former  * sets the default date resolution for all fields, whereas the latter can  * be used to set field specific date resolutions. Field specific date  * resolutions take, if set, precedence over the default date resolution.  *</p>  *<p>  * If you use neither {@link DateField} nor {@link DateTools} in your  * index, you can create your own  * query parser that inherits QueryParser and overwrites  * {@link #getRangeQuery(String, String, String, boolean)} to  * use a different method for date conversion.  *</p>  *  *<p>Note that QueryParser is<em>not</em> thread-safe.</p>   *   *<p><b>NOTE</b>: there is a new QueryParser in contrib, which matches  * the same syntax as this class, but is more modular,  * enabling substantial customization to how a query is created.  *  *<a name="version"/>  *<p><b>NOTE</b>: You must specify the required {@link Version}  * compatibility when creating QueryParser:  *<ul>  *<li> As of 2.9, {@link #setEnablePositionIncrements} is true by  *         default.  *<li> As of 3.1, {@link #setAutoGeneratePhraseQueries} is false by  *         default.  *</ul>  */
end_comment
begin_class
DECL|class|QueryParser
specifier|public
class|class
name|QueryParser
extends|extends
name|QueryParserBase
implements|implements
name|QueryParserConstants
block|{
comment|/** The default operator for parsing queries.    * Use {@link QueryParserBase#setDefaultOperator} to change it.    */
DECL|enum|Operator
DECL|enum constant|OR
DECL|enum constant|AND
specifier|static
specifier|public
enum|enum
name|Operator
block|{
name|OR
block|,
name|AND
block|}
comment|/** Create a query parser.    *  @param matchVersion  Lucene version to match. See<a href="#version">above</a>.    *  @param f  the default field for query terms.    *  @param a   used to find terms in the query text.    */
DECL|method|QueryParser
specifier|public
name|QueryParser
parameter_list|(
name|Version
name|matchVersion
parameter_list|,
name|String
name|f
parameter_list|,
name|Analyzer
name|a
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|FastCharStream
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|matchVersion
argument_list|,
name|f
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
comment|// *   Query  ::= ( Clause )*
comment|// *   Clause ::= ["+", "-"] [<TERM> ":"] (<TERM> | "(" Query ")" )
DECL|method|Conjunction
specifier|final
specifier|public
name|int
name|Conjunction
parameter_list|()
throws|throws
name|ParseException
block|{
name|int
name|ret
init|=
name|CONJ_NONE
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|AND
case|:
case|case
name|OR
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|AND
case|:
name|jj_consume_token
argument_list|(
name|AND
argument_list|)
expr_stmt|;
name|ret
operator|=
name|CONJ_AND
expr_stmt|;
break|break;
case|case
name|OR
case|:
name|jj_consume_token
argument_list|(
name|OR
argument_list|)
expr_stmt|;
name|ret
operator|=
name|CONJ_OR
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|0
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|1
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|ret
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|Modifiers
specifier|final
specifier|public
name|int
name|Modifiers
parameter_list|()
throws|throws
name|ParseException
block|{
name|int
name|ret
init|=
name|MOD_NONE
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|NOT
case|:
case|case
name|PLUS
case|:
case|case
name|MINUS
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|PLUS
case|:
name|jj_consume_token
argument_list|(
name|PLUS
argument_list|)
expr_stmt|;
name|ret
operator|=
name|MOD_REQ
expr_stmt|;
break|break;
case|case
name|MINUS
case|:
name|jj_consume_token
argument_list|(
name|MINUS
argument_list|)
expr_stmt|;
name|ret
operator|=
name|MOD_NOT
expr_stmt|;
break|break;
case|case
name|NOT
case|:
name|jj_consume_token
argument_list|(
name|NOT
argument_list|)
expr_stmt|;
name|ret
operator|=
name|MOD_NOT
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|2
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|3
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|ret
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|// This makes sure that there is no garbage after the query string
DECL|method|TopLevelQuery
specifier|final
specifier|public
name|Query
name|TopLevelQuery
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|ParseException
block|{
name|Query
name|q
decl_stmt|;
name|q
operator|=
name|Query
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|q
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|Query
specifier|final
specifier|public
name|Query
name|Query
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|ParseException
block|{
name|List
argument_list|<
name|BooleanClause
argument_list|>
name|clauses
init|=
operator|new
name|ArrayList
argument_list|<
name|BooleanClause
argument_list|>
argument_list|()
decl_stmt|;
name|Query
name|q
decl_stmt|,
name|firstQuery
init|=
literal|null
decl_stmt|;
name|int
name|conj
decl_stmt|,
name|mods
decl_stmt|;
name|mods
operator|=
name|Modifiers
argument_list|()
expr_stmt|;
name|q
operator|=
name|Clause
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|addClause
argument_list|(
name|clauses
argument_list|,
name|CONJ_NONE
argument_list|,
name|mods
argument_list|,
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
name|mods
operator|==
name|MOD_NONE
condition|)
name|firstQuery
operator|=
name|q
expr_stmt|;
name|label_1
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|AND
case|:
case|case
name|OR
case|:
case|case
name|NOT
case|:
case|case
name|PLUS
case|:
case|case
name|MINUS
case|:
case|case
name|LPAREN
case|:
case|case
name|STAR
case|:
case|case
name|QUOTED
case|:
case|case
name|TERM
case|:
case|case
name|PREFIXTERM
case|:
case|case
name|WILDTERM
case|:
case|case
name|REGEXPTERM
case|:
case|case
name|RANGEIN_START
case|:
case|case
name|RANGEEX_START
case|:
case|case
name|NUMBER
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|4
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_1
break|;
block|}
name|conj
operator|=
name|Conjunction
argument_list|()
expr_stmt|;
name|mods
operator|=
name|Modifiers
argument_list|()
expr_stmt|;
name|q
operator|=
name|Clause
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|addClause
argument_list|(
name|clauses
argument_list|,
name|conj
argument_list|,
name|mods
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clauses
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|firstQuery
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|firstQuery
return|;
block|}
else|else
block|{
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|getBooleanQuery
argument_list|(
name|clauses
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|Clause
specifier|final
specifier|public
name|Query
name|Clause
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|ParseException
block|{
name|Query
name|q
decl_stmt|;
name|Token
name|fieldToken
init|=
literal|null
decl_stmt|,
name|boost
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|jj_2_1
argument_list|(
literal|2
argument_list|)
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|TERM
case|:
name|fieldToken
operator|=
name|jj_consume_token
argument_list|(
name|TERM
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|field
operator|=
name|discardEscapeChar
argument_list|(
name|fieldToken
operator|.
name|image
argument_list|)
expr_stmt|;
break|break;
case|case
name|STAR
case|:
name|jj_consume_token
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|field
operator|=
literal|"*"
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|5
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
else|else
block|{
empty_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|STAR
case|:
case|case
name|QUOTED
case|:
case|case
name|TERM
case|:
case|case
name|PREFIXTERM
case|:
case|case
name|WILDTERM
case|:
case|case
name|REGEXPTERM
case|:
case|case
name|RANGEIN_START
case|:
case|case
name|RANGEEX_START
case|:
case|case
name|NUMBER
case|:
name|q
operator|=
name|Term
argument_list|(
name|field
argument_list|)
expr_stmt|;
break|break;
case|case
name|LPAREN
case|:
name|jj_consume_token
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|q
operator|=
name|Query
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|CARAT
case|:
name|jj_consume_token
argument_list|(
name|CARAT
argument_list|)
expr_stmt|;
name|boost
operator|=
name|jj_consume_token
argument_list|(
name|NUMBER
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|6
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|7
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|handleBoost
argument_list|(
name|q
argument_list|,
name|boost
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|Term
specifier|final
specifier|public
name|Query
name|Term
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|ParseException
block|{
name|Token
name|term
decl_stmt|,
name|boost
init|=
literal|null
decl_stmt|,
name|fuzzySlop
init|=
literal|null
decl_stmt|,
name|goop1
decl_stmt|,
name|goop2
decl_stmt|;
name|boolean
name|prefix
init|=
literal|false
decl_stmt|;
name|boolean
name|wildcard
init|=
literal|false
decl_stmt|;
name|boolean
name|fuzzy
init|=
literal|false
decl_stmt|;
name|boolean
name|regexp
init|=
literal|false
decl_stmt|;
name|boolean
name|startInc
init|=
literal|false
decl_stmt|;
name|boolean
name|endInc
init|=
literal|false
decl_stmt|;
name|Query
name|q
decl_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|STAR
case|:
case|case
name|TERM
case|:
case|case
name|PREFIXTERM
case|:
case|case
name|WILDTERM
case|:
case|case
name|REGEXPTERM
case|:
case|case
name|NUMBER
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|TERM
case|:
name|term
operator|=
name|jj_consume_token
argument_list|(
name|TERM
argument_list|)
expr_stmt|;
break|break;
case|case
name|STAR
case|:
name|term
operator|=
name|jj_consume_token
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
name|wildcard
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|PREFIXTERM
case|:
name|term
operator|=
name|jj_consume_token
argument_list|(
name|PREFIXTERM
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|WILDTERM
case|:
name|term
operator|=
name|jj_consume_token
argument_list|(
name|WILDTERM
argument_list|)
expr_stmt|;
name|wildcard
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|REGEXPTERM
case|:
name|term
operator|=
name|jj_consume_token
argument_list|(
name|REGEXPTERM
argument_list|)
expr_stmt|;
name|regexp
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|NUMBER
case|:
name|term
operator|=
name|jj_consume_token
argument_list|(
name|NUMBER
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|8
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|FUZZY_SLOP
case|:
name|fuzzySlop
operator|=
name|jj_consume_token
argument_list|(
name|FUZZY_SLOP
argument_list|)
expr_stmt|;
name|fuzzy
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|9
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|CARAT
case|:
name|jj_consume_token
argument_list|(
name|CARAT
argument_list|)
expr_stmt|;
name|boost
operator|=
name|jj_consume_token
argument_list|(
name|NUMBER
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|FUZZY_SLOP
case|:
name|fuzzySlop
operator|=
name|jj_consume_token
argument_list|(
name|FUZZY_SLOP
argument_list|)
expr_stmt|;
name|fuzzy
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|10
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|11
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|q
operator|=
name|handleBareTokenQuery
argument_list|(
name|field
argument_list|,
name|term
argument_list|,
name|fuzzySlop
argument_list|,
name|prefix
argument_list|,
name|wildcard
argument_list|,
name|fuzzy
argument_list|,
name|regexp
argument_list|)
expr_stmt|;
break|break;
case|case
name|RANGEIN_START
case|:
case|case
name|RANGEEX_START
case|:
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|RANGEIN_START
case|:
name|jj_consume_token
argument_list|(
name|RANGEIN_START
argument_list|)
expr_stmt|;
name|startInc
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|RANGEEX_START
case|:
name|jj_consume_token
argument_list|(
name|RANGEEX_START
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|12
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|RANGE_GOOP
case|:
name|goop1
operator|=
name|jj_consume_token
argument_list|(
name|RANGE_GOOP
argument_list|)
expr_stmt|;
break|break;
case|case
name|RANGE_QUOTED
case|:
name|goop1
operator|=
name|jj_consume_token
argument_list|(
name|RANGE_QUOTED
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|13
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|RANGE_TO
case|:
name|jj_consume_token
argument_list|(
name|RANGE_TO
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|14
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|RANGE_GOOP
case|:
name|goop2
operator|=
name|jj_consume_token
argument_list|(
name|RANGE_GOOP
argument_list|)
expr_stmt|;
break|break;
case|case
name|RANGE_QUOTED
case|:
name|goop2
operator|=
name|jj_consume_token
argument_list|(
name|RANGE_QUOTED
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|15
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|RANGEIN_END
case|:
name|jj_consume_token
argument_list|(
name|RANGEIN_END
argument_list|)
expr_stmt|;
name|endInc
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|RANGEEX_END
case|:
name|jj_consume_token
argument_list|(
name|RANGEEX_END
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|16
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|CARAT
case|:
name|jj_consume_token
argument_list|(
name|CARAT
argument_list|)
expr_stmt|;
name|boost
operator|=
name|jj_consume_token
argument_list|(
name|NUMBER
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|17
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
if|if
condition|(
name|goop1
operator|.
name|kind
operator|==
name|RANGE_QUOTED
condition|)
block|{
name|goop1
operator|.
name|image
operator|=
name|goop1
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|goop1
operator|.
name|image
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|goop2
operator|.
name|kind
operator|==
name|RANGE_QUOTED
condition|)
block|{
name|goop2
operator|.
name|image
operator|=
name|goop2
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|goop2
operator|.
name|image
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|q
operator|=
name|getRangeQuery
argument_list|(
name|field
argument_list|,
name|discardEscapeChar
argument_list|(
name|goop1
operator|.
name|image
argument_list|)
argument_list|,
name|discardEscapeChar
argument_list|(
name|goop2
operator|.
name|image
argument_list|)
argument_list|,
name|startInc
argument_list|,
name|endInc
argument_list|)
expr_stmt|;
break|break;
case|case
name|QUOTED
case|:
name|term
operator|=
name|jj_consume_token
argument_list|(
name|QUOTED
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|FUZZY_SLOP
case|:
name|fuzzySlop
operator|=
name|jj_consume_token
argument_list|(
name|FUZZY_SLOP
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|18
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|CARAT
case|:
name|jj_consume_token
argument_list|(
name|CARAT
argument_list|)
expr_stmt|;
name|boost
operator|=
name|jj_consume_token
argument_list|(
name|NUMBER
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|19
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|q
operator|=
name|handleQuotedTerm
argument_list|(
name|field
argument_list|,
name|term
argument_list|,
name|fuzzySlop
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|20
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
return|return
name|handleBoost
argument_list|(
name|q
argument_list|,
name|boost
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
DECL|method|jj_2_1
specifier|private
name|boolean
name|jj_2_1
parameter_list|(
name|int
name|xla
parameter_list|)
block|{
name|jj_la
operator|=
name|xla
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|token
expr_stmt|;
try|try
block|{
return|return
operator|!
name|jj_3_1
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|jj_save
argument_list|(
literal|0
argument_list|,
name|xla
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|jj_3R_3
specifier|private
name|boolean
name|jj_3R_3
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|STAR
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|COLON
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
DECL|method|jj_3R_2
specifier|private
name|boolean
name|jj_3R_2
parameter_list|()
block|{
if|if
condition|(
name|jj_scan_token
argument_list|(
name|TERM
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_scan_token
argument_list|(
name|COLON
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
DECL|method|jj_3_1
specifier|private
name|boolean
name|jj_3_1
parameter_list|()
block|{
name|Token
name|xsp
decl_stmt|;
name|xsp
operator|=
name|jj_scanpos
expr_stmt|;
if|if
condition|(
name|jj_3R_2
argument_list|()
condition|)
block|{
name|jj_scanpos
operator|=
name|xsp
expr_stmt|;
if|if
condition|(
name|jj_3R_3
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/** Generated Token Manager. */
DECL|field|token_source
specifier|public
name|QueryParserTokenManager
name|token_source
decl_stmt|;
comment|/** Current token. */
DECL|field|token
specifier|public
name|Token
name|token
decl_stmt|;
comment|/** Next token. */
DECL|field|jj_nt
specifier|public
name|Token
name|jj_nt
decl_stmt|;
DECL|field|jj_ntk
specifier|private
name|int
name|jj_ntk
decl_stmt|;
DECL|field|jj_scanpos
DECL|field|jj_lastpos
specifier|private
name|Token
name|jj_scanpos
decl_stmt|,
name|jj_lastpos
decl_stmt|;
DECL|field|jj_la
specifier|private
name|int
name|jj_la
decl_stmt|;
DECL|field|jj_gen
specifier|private
name|int
name|jj_gen
decl_stmt|;
DECL|field|jj_la1
specifier|final
specifier|private
name|int
index|[]
name|jj_la1
init|=
operator|new
name|int
index|[
literal|21
index|]
decl_stmt|;
DECL|field|jj_la1_0
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_0
decl_stmt|;
static|static
block|{
name|jj_la1_init_0
argument_list|()
expr_stmt|;
block|}
DECL|method|jj_la1_init_0
specifier|private
specifier|static
name|void
name|jj_la1_init_0
parameter_list|()
block|{
name|jj_la1_0
operator|=
operator|new
name|int
index|[]
block|{
literal|0x300
block|,
literal|0x300
block|,
literal|0x1c00
block|,
literal|0x1c00
block|,
literal|0x7ed3f00
block|,
literal|0x90000
block|,
literal|0x20000
block|,
literal|0x7ed2000
block|,
literal|0x4e90000
block|,
literal|0x100000
block|,
literal|0x100000
block|,
literal|0x20000
block|,
literal|0x3000000
block|,
literal|0xc0000000
block|,
literal|0x8000000
block|,
literal|0xc0000000
block|,
literal|0x30000000
block|,
literal|0x20000
block|,
literal|0x100000
block|,
literal|0x20000
block|,
literal|0x7ed0000
block|,}
expr_stmt|;
block|}
DECL|field|jj_2_rtns
specifier|final
specifier|private
name|JJCalls
index|[]
name|jj_2_rtns
init|=
operator|new
name|JJCalls
index|[
literal|1
index|]
decl_stmt|;
DECL|field|jj_rescan
specifier|private
name|boolean
name|jj_rescan
init|=
literal|false
decl_stmt|;
DECL|field|jj_gc
specifier|private
name|int
name|jj_gc
init|=
literal|0
decl_stmt|;
comment|/** Constructor with user supplied CharStream. */
DECL|method|QueryParser
specifier|protected
name|QueryParser
parameter_list|(
name|CharStream
name|stream
parameter_list|)
block|{
name|token_source
operator|=
operator|new
name|QueryParserTokenManager
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|21
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
comment|/** Reinitialise. */
DECL|method|ReInit
specifier|public
name|void
name|ReInit
parameter_list|(
name|CharStream
name|stream
parameter_list|)
block|{
name|token_source
operator|.
name|ReInit
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|21
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
comment|/** Constructor with generated Token Manager. */
DECL|method|QueryParser
specifier|protected
name|QueryParser
parameter_list|(
name|QueryParserTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|21
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
comment|/** Reinitialise. */
DECL|method|ReInit
specifier|public
name|void
name|ReInit
parameter_list|(
name|QueryParserTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|21
condition|;
name|i
operator|++
control|)
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|jj_2_rtns
index|[
name|i
index|]
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
block|}
DECL|method|jj_consume_token
specifier|private
name|Token
name|jj_consume_token
parameter_list|(
name|int
name|kind
parameter_list|)
throws|throws
name|ParseException
block|{
name|Token
name|oldToken
decl_stmt|;
if|if
condition|(
operator|(
name|oldToken
operator|=
name|token
operator|)
operator|.
name|next
operator|!=
literal|null
condition|)
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
else|else
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|kind
operator|==
name|kind
condition|)
block|{
name|jj_gen
operator|++
expr_stmt|;
if|if
condition|(
operator|++
name|jj_gc
operator|>
literal|100
condition|)
block|{
name|jj_gc
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_2_rtns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|JJCalls
name|c
init|=
name|jj_2_rtns
index|[
name|i
index|]
decl_stmt|;
while|while
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|gen
operator|<
name|jj_gen
condition|)
name|c
operator|.
name|first
operator|=
literal|null
expr_stmt|;
name|c
operator|=
name|c
operator|.
name|next
expr_stmt|;
block|}
block|}
block|}
return|return
name|token
return|;
block|}
name|token
operator|=
name|oldToken
expr_stmt|;
name|jj_kind
operator|=
name|kind
expr_stmt|;
throw|throw
name|generateParseException
argument_list|()
throw|;
block|}
DECL|class|LookaheadSuccess
specifier|static
specifier|private
specifier|final
class|class
name|LookaheadSuccess
extends|extends
name|java
operator|.
name|lang
operator|.
name|Error
block|{ }
DECL|field|jj_ls
specifier|final
specifier|private
name|LookaheadSuccess
name|jj_ls
init|=
operator|new
name|LookaheadSuccess
argument_list|()
decl_stmt|;
DECL|method|jj_scan_token
specifier|private
name|boolean
name|jj_scan_token
parameter_list|(
name|int
name|kind
parameter_list|)
block|{
if|if
condition|(
name|jj_scanpos
operator|==
name|jj_lastpos
condition|)
block|{
name|jj_la
operator|--
expr_stmt|;
if|if
condition|(
name|jj_scanpos
operator|.
name|next
operator|==
literal|null
condition|)
block|{
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|jj_scanpos
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|jj_scanpos
operator|.
name|next
expr_stmt|;
block|}
block|}
else|else
block|{
name|jj_scanpos
operator|=
name|jj_scanpos
operator|.
name|next
expr_stmt|;
block|}
if|if
condition|(
name|jj_rescan
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|Token
name|tok
init|=
name|token
decl_stmt|;
while|while
condition|(
name|tok
operator|!=
literal|null
operator|&&
name|tok
operator|!=
name|jj_scanpos
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|tok
operator|=
name|tok
operator|.
name|next
expr_stmt|;
block|}
if|if
condition|(
name|tok
operator|!=
literal|null
condition|)
name|jj_add_error_token
argument_list|(
name|kind
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jj_scanpos
operator|.
name|kind
operator|!=
name|kind
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|jj_la
operator|==
literal|0
operator|&&
name|jj_scanpos
operator|==
name|jj_lastpos
condition|)
throw|throw
name|jj_ls
throw|;
return|return
literal|false
return|;
block|}
comment|/** Get the next Token. */
DECL|method|getNextToken
specifier|final
specifier|public
name|Token
name|getNextToken
parameter_list|()
block|{
if|if
condition|(
name|token
operator|.
name|next
operator|!=
literal|null
condition|)
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
else|else
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|++
expr_stmt|;
return|return
name|token
return|;
block|}
comment|/** Get the specific Token. */
DECL|method|getToken
specifier|final
specifier|public
name|Token
name|getToken
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Token
name|t
init|=
name|token
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|t
operator|.
name|next
operator|!=
literal|null
condition|)
name|t
operator|=
name|t
operator|.
name|next
expr_stmt|;
else|else
name|t
operator|=
name|t
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
DECL|method|jj_ntk
specifier|private
name|int
name|jj_ntk
parameter_list|()
block|{
if|if
condition|(
operator|(
name|jj_nt
operator|=
name|token
operator|.
name|next
operator|)
operator|==
literal|null
condition|)
return|return
operator|(
name|jj_ntk
operator|=
operator|(
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
operator|)
operator|.
name|kind
operator|)
return|;
else|else
return|return
operator|(
name|jj_ntk
operator|=
name|jj_nt
operator|.
name|kind
operator|)
return|;
block|}
DECL|field|jj_expentries
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|int
index|[]
argument_list|>
name|jj_expentries
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|int
index|[]
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|jj_expentry
specifier|private
name|int
index|[]
name|jj_expentry
decl_stmt|;
DECL|field|jj_kind
specifier|private
name|int
name|jj_kind
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|jj_lasttokens
specifier|private
name|int
index|[]
name|jj_lasttokens
init|=
operator|new
name|int
index|[
literal|100
index|]
decl_stmt|;
DECL|field|jj_endpos
specifier|private
name|int
name|jj_endpos
decl_stmt|;
DECL|method|jj_add_error_token
specifier|private
name|void
name|jj_add_error_token
parameter_list|(
name|int
name|kind
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
if|if
condition|(
name|pos
operator|>=
literal|100
condition|)
return|return;
if|if
condition|(
name|pos
operator|==
name|jj_endpos
operator|+
literal|1
condition|)
block|{
name|jj_lasttokens
index|[
name|jj_endpos
operator|++
index|]
operator|=
name|kind
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|jj_endpos
operator|!=
literal|0
condition|)
block|{
name|jj_expentry
operator|=
operator|new
name|int
index|[
name|jj_endpos
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_endpos
condition|;
name|i
operator|++
control|)
block|{
name|jj_expentry
index|[
name|i
index|]
operator|=
name|jj_lasttokens
index|[
name|i
index|]
expr_stmt|;
block|}
name|jj_entries_loop
label|:
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Iterator
name|it
init|=
name|jj_expentries
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|int
index|[]
name|oldentry
init|=
operator|(
name|int
index|[]
operator|)
operator|(
name|it
operator|.
name|next
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|oldentry
operator|.
name|length
operator|==
name|jj_expentry
operator|.
name|length
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_expentry
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|oldentry
index|[
name|i
index|]
operator|!=
name|jj_expentry
index|[
name|i
index|]
condition|)
block|{
continue|continue
name|jj_entries_loop
continue|;
block|}
block|}
name|jj_expentries
operator|.
name|add
argument_list|(
name|jj_expentry
argument_list|)
expr_stmt|;
break|break
name|jj_entries_loop
break|;
block|}
block|}
if|if
condition|(
name|pos
operator|!=
literal|0
condition|)
name|jj_lasttokens
index|[
operator|(
name|jj_endpos
operator|=
name|pos
operator|)
operator|-
literal|1
index|]
operator|=
name|kind
expr_stmt|;
block|}
block|}
comment|/** Generate ParseException. */
DECL|method|generateParseException
specifier|public
name|ParseException
name|generateParseException
parameter_list|()
block|{
name|jj_expentries
operator|.
name|clear
argument_list|()
expr_stmt|;
name|boolean
index|[]
name|la1tokens
init|=
operator|new
name|boolean
index|[
literal|32
index|]
decl_stmt|;
if|if
condition|(
name|jj_kind
operator|>=
literal|0
condition|)
block|{
name|la1tokens
index|[
name|jj_kind
index|]
operator|=
literal|true
expr_stmt|;
name|jj_kind
operator|=
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|21
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|jj_la1
index|[
name|i
index|]
operator|==
name|jj_gen
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|32
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|jj_la1_0
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|32
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|la1tokens
index|[
name|i
index|]
condition|)
block|{
name|jj_expentry
operator|=
operator|new
name|int
index|[
literal|1
index|]
expr_stmt|;
name|jj_expentry
index|[
literal|0
index|]
operator|=
name|i
expr_stmt|;
name|jj_expentries
operator|.
name|add
argument_list|(
name|jj_expentry
argument_list|)
expr_stmt|;
block|}
block|}
name|jj_endpos
operator|=
literal|0
expr_stmt|;
name|jj_rescan_token
argument_list|()
expr_stmt|;
name|jj_add_error_token
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|exptokseq
init|=
operator|new
name|int
index|[
name|jj_expentries
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_expentries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|exptokseq
index|[
name|i
index|]
operator|=
name|jj_expentries
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ParseException
argument_list|(
name|token
argument_list|,
name|exptokseq
argument_list|,
name|tokenImage
argument_list|)
return|;
block|}
comment|/** Enable tracing. */
DECL|method|enable_tracing
specifier|final
specifier|public
name|void
name|enable_tracing
parameter_list|()
block|{   }
comment|/** Disable tracing. */
DECL|method|disable_tracing
specifier|final
specifier|public
name|void
name|disable_tracing
parameter_list|()
block|{   }
DECL|method|jj_rescan_token
specifier|private
name|void
name|jj_rescan_token
parameter_list|()
block|{
name|jj_rescan
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|JJCalls
name|p
init|=
name|jj_2_rtns
index|[
name|i
index|]
decl_stmt|;
do|do
block|{
if|if
condition|(
name|p
operator|.
name|gen
operator|>
name|jj_gen
condition|)
block|{
name|jj_la
operator|=
name|p
operator|.
name|arg
expr_stmt|;
name|jj_lastpos
operator|=
name|jj_scanpos
operator|=
name|p
operator|.
name|first
expr_stmt|;
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
name|jj_3_1
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|p
operator|=
name|p
operator|.
name|next
expr_stmt|;
block|}
do|while
condition|(
name|p
operator|!=
literal|null
condition|)
do|;
block|}
catch|catch
parameter_list|(
name|LookaheadSuccess
name|ls
parameter_list|)
block|{ }
block|}
name|jj_rescan
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|jj_save
specifier|private
name|void
name|jj_save
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|xla
parameter_list|)
block|{
name|JJCalls
name|p
init|=
name|jj_2_rtns
index|[
name|index
index|]
decl_stmt|;
while|while
condition|(
name|p
operator|.
name|gen
operator|>
name|jj_gen
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|next
operator|==
literal|null
condition|)
block|{
name|p
operator|=
name|p
operator|.
name|next
operator|=
operator|new
name|JJCalls
argument_list|()
expr_stmt|;
break|break;
block|}
name|p
operator|=
name|p
operator|.
name|next
expr_stmt|;
block|}
name|p
operator|.
name|gen
operator|=
name|jj_gen
operator|+
name|xla
operator|-
name|jj_la
expr_stmt|;
name|p
operator|.
name|first
operator|=
name|token
expr_stmt|;
name|p
operator|.
name|arg
operator|=
name|xla
expr_stmt|;
block|}
DECL|class|JJCalls
specifier|static
specifier|final
class|class
name|JJCalls
block|{
DECL|field|gen
name|int
name|gen
decl_stmt|;
DECL|field|first
name|Token
name|first
decl_stmt|;
DECL|field|arg
name|int
name|arg
decl_stmt|;
DECL|field|next
name|JJCalls
name|next
decl_stmt|;
block|}
block|}
end_class
end_unit
