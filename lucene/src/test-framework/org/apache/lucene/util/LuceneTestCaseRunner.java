begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import
begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Nightly
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|UseNoMemoryExpensiveCodec
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|manipulation
operator|.
name|Filter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|manipulation
operator|.
name|NoTestsRemainException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|notification
operator|.
name|Failure
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|notification
operator|.
name|RunListener
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|notification
operator|.
name|RunNotifier
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|BlockJUnit4ClassRunner
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|FrameworkMethod
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|InitializationError
import|;
end_import
begin_comment
comment|// please don't reorganize these into a wildcard!
end_comment
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|TEST_ITER
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|TEST_ITER_MIN
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|TEST_METHOD
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|TEST_SEED
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|TEST_NIGHTLY
import|;
end_import
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|VERBOSE
import|;
end_import
begin_comment
comment|/** optionally filters the tests to be run by TEST_METHOD */
end_comment
begin_class
DECL|class|LuceneTestCaseRunner
specifier|public
class|class
name|LuceneTestCaseRunner
extends|extends
name|BlockJUnit4ClassRunner
block|{
DECL|field|testMethods
specifier|private
name|List
argument_list|<
name|FrameworkMethod
argument_list|>
name|testMethods
decl_stmt|;
DECL|field|runnerSeed
specifier|static
specifier|final
name|long
name|runnerSeed
decl_stmt|;
static|static
block|{
name|runnerSeed
operator|=
literal|"random"
operator|.
name|equals
argument_list|(
name|TEST_SEED
argument_list|)
condition|?
name|LuceneTestCase
operator|.
name|seedRand
operator|.
name|nextLong
argument_list|()
else|:
name|ThreeLongs
operator|.
name|fromString
argument_list|(
name|TEST_SEED
argument_list|)
operator|.
name|l3
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|computeTestMethods
specifier|protected
name|List
argument_list|<
name|FrameworkMethod
argument_list|>
name|computeTestMethods
parameter_list|()
block|{
if|if
condition|(
name|testMethods
operator|!=
literal|null
condition|)
return|return
name|testMethods
return|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
name|runnerSeed
argument_list|)
decl_stmt|;
name|LuceneTestCase
operator|.
name|testClassesRun
operator|.
name|add
argument_list|(
name|getTestClass
argument_list|()
operator|.
name|getJavaClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|testMethods
operator|=
operator|new
name|ArrayList
argument_list|<
name|FrameworkMethod
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|getTestClass
argument_list|()
operator|.
name|getJavaClass
argument_list|()
operator|.
name|getMethods
argument_list|()
control|)
block|{
comment|// check if the current test's class has methods annotated with @Ignore
specifier|final
name|Ignore
name|ignored
init|=
name|m
operator|.
name|getAnnotation
argument_list|(
name|Ignore
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ignored
operator|!=
literal|null
operator|&&
operator|!
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"alwaysIgnoredTestMethod"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"NOTE: Ignoring test method '"
operator|+
name|m
operator|.
name|getName
argument_list|()
operator|+
literal|"': "
operator|+
name|ignored
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// add methods starting with "test"
specifier|final
name|int
name|mod
init|=
name|m
operator|.
name|getModifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getAnnotation
argument_list|(
name|Test
operator|.
name|class
argument_list|)
operator|!=
literal|null
operator|||
operator|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"test"
argument_list|)
operator|&&
operator|!
name|Modifier
operator|.
name|isAbstract
argument_list|(
name|mod
argument_list|)
operator|&&
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|&&
name|m
operator|.
name|getReturnType
argument_list|()
operator|==
name|Void
operator|.
name|TYPE
operator|)
condition|)
block|{
if|if
condition|(
name|Modifier
operator|.
name|isStatic
argument_list|(
name|mod
argument_list|)
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Test methods must not be static."
argument_list|)
throw|;
name|testMethods
operator|.
name|add
argument_list|(
operator|new
name|FrameworkMethod
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|testMethods
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No runnable methods!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|TEST_NIGHTLY
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|getTestClass
argument_list|()
operator|.
name|getJavaClass
argument_list|()
operator|.
name|isAnnotationPresent
argument_list|(
name|Nightly
operator|.
name|class
argument_list|)
condition|)
block|{
comment|/* the test class is annotated with nightly, remove all methods */
name|String
name|className
init|=
name|getTestClass
argument_list|()
operator|.
name|getJavaClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"NOTE: Ignoring nightly-only test class '"
operator|+
name|className
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|testMethods
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|/* remove all nightly-only methods */
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testMethods
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|FrameworkMethod
name|m
init|=
name|testMethods
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getAnnotation
argument_list|(
name|Nightly
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"NOTE: Ignoring nightly-only test method '"
operator|+
name|m
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|testMethods
operator|.
name|remove
argument_list|(
name|i
operator|--
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/* dodge a possible "no-runnable methods" exception by adding a fake ignored test */
if|if
condition|(
name|testMethods
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|testMethods
operator|.
name|add
argument_list|(
operator|new
name|FrameworkMethod
argument_list|(
name|LuceneTestCase
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"alwaysIgnoredTestMethod"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|// sort the test methods first before shuffling them, so that the shuffle is consistent
comment|// across different implementations that might order the methods different originally.
name|Collections
operator|.
name|sort
argument_list|(
name|testMethods
argument_list|,
operator|new
name|Comparator
argument_list|<
name|FrameworkMethod
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|FrameworkMethod
name|f1
parameter_list|,
name|FrameworkMethod
name|f2
parameter_list|)
block|{
return|return
name|f1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|f2
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|testMethods
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return
name|testMethods
return|;
block|}
annotation|@
name|Override
DECL|method|runChild
specifier|protected
name|void
name|runChild
parameter_list|(
name|FrameworkMethod
name|arg0
parameter_list|,
name|RunNotifier
name|arg1
parameter_list|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nNOTE: running test "
operator|+
name|arg0
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// only print iteration info if the user requested more than one iterations
specifier|final
name|boolean
name|verbose
init|=
name|VERBOSE
operator|&&
name|TEST_ITER
operator|>
literal|1
decl_stmt|;
specifier|final
name|int
name|currentIter
index|[]
init|=
operator|new
name|int
index|[
literal|1
index|]
decl_stmt|;
name|arg1
operator|.
name|addListener
argument_list|(
operator|new
name|RunListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|testFailure
parameter_list|(
name|Failure
name|failure
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|verbose
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nNOTE: iteration "
operator|+
name|currentIter
index|[
literal|0
index|]
operator|+
literal|" failed! "
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TEST_ITER
condition|;
name|i
operator|++
control|)
block|{
name|currentIter
index|[
literal|0
index|]
operator|=
name|i
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nNOTE: running iter="
operator|+
operator|(
literal|1
operator|+
name|i
operator|)
operator|+
literal|" of "
operator|+
name|TEST_ITER
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|runChild
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|)
expr_stmt|;
if|if
condition|(
name|LuceneTestCase
operator|.
name|testsFailed
condition|)
block|{
if|if
condition|(
name|i
operator|>=
name|TEST_ITER_MIN
operator|-
literal|1
condition|)
block|{
comment|// XXX is this still off-by-one?
break|break;
block|}
block|}
block|}
block|}
DECL|method|LuceneTestCaseRunner
specifier|public
name|LuceneTestCaseRunner
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|InitializationError
block|{
name|super
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
comment|// This TestRunner can handle only LuceneTestCase subclasses
if|if
condition|(
operator|!
name|LuceneTestCase
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"LuceneTestCaseRunner can only be used with LuceneTestCase."
argument_list|)
throw|;
block|}
specifier|final
name|boolean
name|useNoMemoryExpensiveCodec
init|=
name|LuceneTestCase
operator|.
name|useNoMemoryExpensiveCodec
operator|=
name|clazz
operator|.
name|isAnnotationPresent
argument_list|(
name|UseNoMemoryExpensiveCodec
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|useNoMemoryExpensiveCodec
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"NOTE: Using no memory expensive codecs (Memory, SimpleText) for "
operator|+
name|clazz
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
comment|// evil we cannot init our random here, because super() calls computeTestMethods!!!!;
name|Filter
name|f
init|=
operator|new
name|Filter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|describe
parameter_list|()
block|{
return|return
literal|"filters according to TEST_METHOD"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|shouldRun
parameter_list|(
name|Description
name|d
parameter_list|)
block|{
return|return
name|TEST_METHOD
operator|==
literal|null
operator|||
name|d
operator|.
name|getMethodName
argument_list|()
operator|.
name|equals
argument_list|(
name|TEST_METHOD
argument_list|)
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|f
operator|.
name|apply
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoTestsRemainException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class
end_unit
