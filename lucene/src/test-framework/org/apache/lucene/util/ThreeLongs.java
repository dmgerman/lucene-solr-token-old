begin_unit
begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_comment
comment|/** helper class for a random seed that is really 3 random seeds:  *<ol>  *<li>The test class's random seed: this is what the test sees in its beforeClass methods  *<li>The test method's random seed: this is what the test method sees starting in its befores  *<li>The test runner's random seed (controls the shuffling of test methods)  *</ol>  */
end_comment
begin_class
DECL|class|ThreeLongs
class|class
name|ThreeLongs
block|{
DECL|field|l1
DECL|field|l2
DECL|field|l3
specifier|public
specifier|final
name|long
name|l1
decl_stmt|,
name|l2
decl_stmt|,
name|l3
decl_stmt|;
DECL|method|ThreeLongs
specifier|public
name|ThreeLongs
parameter_list|(
name|long
name|l1
parameter_list|,
name|long
name|l2
parameter_list|,
name|long
name|l3
parameter_list|)
block|{
name|this
operator|.
name|l1
operator|=
name|l1
expr_stmt|;
name|this
operator|.
name|l2
operator|=
name|l2
expr_stmt|;
name|this
operator|.
name|l3
operator|=
name|l3
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Long
operator|.
name|toString
argument_list|(
name|l1
argument_list|,
literal|16
argument_list|)
operator|+
literal|":"
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|l2
argument_list|,
literal|16
argument_list|)
operator|+
literal|":"
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|l3
argument_list|,
literal|16
argument_list|)
return|;
block|}
DECL|method|fromString
specifier|public
specifier|static
name|ThreeLongs
name|fromString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|String
name|parts
index|[]
init|=
name|s
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
assert|assert
name|parts
operator|.
name|length
operator|==
literal|3
assert|;
return|return
operator|new
name|ThreeLongs
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
literal|16
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|,
literal|16
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|parts
index|[
literal|2
index|]
argument_list|,
literal|16
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class
end_unit
