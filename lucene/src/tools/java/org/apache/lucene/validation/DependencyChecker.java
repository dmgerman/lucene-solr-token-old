begin_unit
begin_package
DECL|package|org.apache.lucene.validation
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|validation
package|;
end_package
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import
begin_comment
comment|/**  *  *  **/
end_comment
begin_class
DECL|class|DependencyChecker
specifier|public
class|class
name|DependencyChecker
block|{
DECL|field|excludes
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|excludes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|LINE_SEPARATOR
specifier|private
specifier|static
specifier|final
name|String
name|LINE_SEPARATOR
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
static|static
block|{
comment|//Collections.addAll(excludes, );
block|}
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|dumpFile
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dirs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"--dump"
argument_list|)
operator|||
name|args
index|[
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"-d"
argument_list|)
condition|)
block|{
name|dumpFile
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"--check"
argument_list|)
operator|||
name|args
index|[
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"-c"
argument_list|)
condition|)
block|{
name|dirs
operator|.
name|add
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|FileWriter
name|writer
init|=
literal|null
decl_stmt|;
name|boolean
name|dump
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|dumpFile
operator|!=
literal|null
condition|)
block|{
name|File
name|out
init|=
operator|new
name|File
argument_list|(
name|dumpFile
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Dumping to "
operator|+
name|out
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|FileWriter
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|dump
operator|=
literal|true
expr_stmt|;
block|}
comment|//TODO: put in NOTICE checks
for|for
control|(
name|String
name|checkDir
range|:
name|dirs
control|)
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|checkDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"----------------------"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting on dir: "
operator|+
name|dir
argument_list|)
expr_stmt|;
name|int
name|numFailed
init|=
literal|0
decl_stmt|;
name|File
index|[]
name|list
init|=
name|dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
name|File
index|[]
name|licFiles
init|=
name|dir
operator|.
name|listFiles
argument_list|(
operator|new
name|FileFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|file
parameter_list|)
block|{
return|return
name|file
operator|.
name|getName
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"-LICENSE"
argument_list|)
operator|!=
operator|-
literal|1
operator|&&
name|file
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".txt"
argument_list|)
return|;
comment|//check for a consistent end, so that we aren't fooled by emacs ~ files or other temp files
block|}
block|}
argument_list|)
decl_stmt|;
name|File
index|[]
name|noticeFiles
init|=
name|dir
operator|.
name|listFiles
argument_list|(
operator|new
name|FileFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|file
parameter_list|)
block|{
return|return
name|file
operator|.
name|getName
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"-NOTICE"
argument_list|)
operator|!=
operator|-
literal|1
operator|&&
name|file
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".txt"
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|File
index|[]
name|jarFiles
init|=
name|dir
operator|.
name|listFiles
argument_list|(
operator|new
name|FileFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|file
parameter_list|)
block|{
return|return
name|file
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|licFiles
operator|.
name|length
operator|==
literal|0
operator|&&
name|jarFiles
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"No license files found: "
operator|+
name|dir
argument_list|)
expr_stmt|;
name|numFailed
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|jarFiles
operator|.
name|length
operator|!=
name|licFiles
operator|.
name|length
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"WARNING: There are missing LICENSE files in: "
operator|+
name|dir
operator|+
literal|" Jar file count: "
operator|+
name|jarFiles
operator|.
name|length
operator|+
literal|" License Count: "
operator|+
name|licFiles
operator|.
name|length
argument_list|)
expr_stmt|;
name|printDiffs
argument_list|(
name|jarFiles
argument_list|,
name|licFiles
argument_list|)
expr_stmt|;
name|numFailed
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|jarFiles
operator|.
name|length
operator|!=
name|noticeFiles
operator|.
name|length
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"WARNING: There may be missing NOTICE files in: "
operator|+
name|dir
operator|+
literal|".  Note, not all files require a NOTICE. Jar file count: "
operator|+
name|jarFiles
operator|.
name|length
operator|+
literal|" Notice Count: "
operator|+
name|noticeFiles
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//printDiffs(jarFiles, noticeFiles);
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|UpdateableInt
argument_list|>
name|licenseNames
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|UpdateableInt
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|licFiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|licenseNames
operator|.
name|put
argument_list|(
name|licFiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|UpdateableInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|UpdateableInt
argument_list|>
name|noticeNames
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|UpdateableInt
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|noticeFiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|noticeNames
operator|.
name|put
argument_list|(
name|noticeFiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|UpdateableInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|file
init|=
name|list
index|[
name|i
index|]
decl_stmt|;
name|String
name|fileName
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileName
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
operator|&&
name|excludes
operator|.
name|contains
argument_list|(
name|fileName
argument_list|)
operator|==
literal|false
condition|)
block|{
name|File
name|licFile
init|=
name|getLicenseFile
argument_list|(
name|file
argument_list|,
name|licenseNames
argument_list|)
decl_stmt|;
if|if
condition|(
name|licFile
operator|!=
literal|null
operator|&&
name|licFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|String
name|licName
init|=
name|licFile
operator|.
name|getName
argument_list|()
decl_stmt|;
name|LicenseType
index|[]
name|types
init|=
name|getLicenseTypes
argument_list|(
name|licName
argument_list|)
decl_stmt|;
if|if
condition|(
name|types
operator|!=
literal|null
operator|&&
name|types
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|types
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|LicenseType
name|type
init|=
name|types
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|dump
operator|==
literal|true
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|file
operator|.
name|getName
argument_list|()
operator|+
literal|","
operator|+
name|type
operator|.
name|getDisplay
argument_list|()
operator|+
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|.
name|isNoticeRequired
argument_list|()
condition|)
block|{
name|File
name|noticeFile
init|=
name|getNoticeFile
argument_list|(
name|file
argument_list|,
name|noticeNames
argument_list|)
decl_stmt|;
if|if
condition|(
name|noticeFile
operator|!=
literal|null
operator|&&
name|noticeFile
operator|.
name|exists
argument_list|()
condition|)
block|{                      }
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"!!!!!! Missing NOTICE file for "
operator|+
name|file
operator|+
literal|" and license type: "
operator|+
name|type
operator|.
name|getDisplay
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dump
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"Missing NOTICE file for "
operator|+
name|file
operator|+
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
block|}
name|numFailed
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"!!!!!! Couldn't determine license type for file: "
operator|+
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|dump
operator|==
literal|true
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"Invalid license for file: "
operator|+
name|file
operator|+
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
block|}
name|numFailed
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"!!!!!!! Couldn't get license file for "
operator|+
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|dump
operator|==
literal|true
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"Couldn't get license file for "
operator|+
name|file
operator|+
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
block|}
name|numFailed
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|dump
operator|==
literal|true
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|LINE_SEPARATOR
operator|+
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"Other Licenses (installer, javascript, etc."
operator|+
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dump
operator|==
literal|true
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|UpdateableInt
argument_list|>
name|entry
range|:
name|licenseNames
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|theInt
operator|==
literal|0
condition|)
block|{
name|LicenseType
index|[]
name|types
init|=
name|getLicenseTypes
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|types
operator|!=
literal|null
operator|&&
name|types
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|","
operator|+
name|types
index|[
name|i
index|]
operator|.
name|getDisplay
argument_list|()
operator|+
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Couldn't determine license for: "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|numFailed
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"At least one file does not have a license, or it's license name is not in the proper format.  See the logs."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Found a license for every file in "
operator|+
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Could not find directory:"
operator|+
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Sort the two lists and then print them out for visual comparison    *    * @param left    * @param right    */
DECL|method|printDiffs
specifier|private
specifier|static
name|void
name|printDiffs
parameter_list|(
name|File
index|[]
name|left
parameter_list|,
name|File
index|[]
name|right
parameter_list|)
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|right
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Left\t\t\tRight"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"----------------"
argument_list|)
expr_stmt|;
name|StringBuilder
name|bldr
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|left
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bldr
operator|.
name|append
argument_list|(
name|left
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t\t\t"
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|right
operator|.
name|length
condition|)
block|{
name|bldr
operator|.
name|append
argument_list|(
name|right
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|bldr
operator|.
name|append
argument_list|(
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|<
name|right
operator|.
name|length
condition|)
block|{
for|for
control|(
init|;
name|i
operator|<
name|right
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bldr
operator|.
name|append
argument_list|(
literal|"--- N/A ---\t\t\t"
argument_list|)
operator|.
name|append
argument_list|(
name|right
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
name|LINE_SEPARATOR
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|bldr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"----------------"
argument_list|)
expr_stmt|;
block|}
DECL|method|getLicenseTypes
specifier|private
specifier|static
name|LicenseType
index|[]
name|getLicenseTypes
parameter_list|(
name|String
name|licName
parameter_list|)
block|{
name|LicenseType
index|[]
name|result
init|=
operator|new
name|LicenseType
index|[
literal|0
index|]
decl_stmt|;
name|int
name|idx
init|=
name|licName
operator|.
name|lastIndexOf
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|licAbbrev
init|=
name|licName
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|,
name|licName
operator|.
name|length
argument_list|()
operator|-
literal|".txt"
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|lics
init|=
name|licAbbrev
operator|.
name|split
argument_list|(
literal|"__"
argument_list|)
decl_stmt|;
name|result
operator|=
operator|new
name|LicenseType
index|[
name|lics
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|lics
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
try|try
block|{
name|result
index|[
name|j
index|]
operator|=
name|LicenseType
operator|.
name|valueOf
argument_list|(
name|lics
index|[
name|j
index|]
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Invalid license: "
operator|+
name|lics
index|[
name|j
index|]
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|" for "
operator|+
name|licName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|getLicenseFile
specifier|private
specifier|static
name|File
name|getLicenseFile
parameter_list|(
name|File
name|file
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|UpdateableInt
argument_list|>
name|licenseNames
parameter_list|)
block|{
name|File
name|result
init|=
literal|null
decl_stmt|;
name|String
name|filename
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|length
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|licName
range|:
name|licenseNames
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|prefix
init|=
name|licName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|licName
operator|.
name|indexOf
argument_list|(
literal|"-LICENSE"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
comment|//System.out.println("prefix: " + prefix + " lic name: " + licName);
if|if
condition|(
name|filename
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|=
operator|new
name|File
argument_list|(
name|file
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|licName
argument_list|)
expr_stmt|;
name|UpdateableInt
name|ui
init|=
name|licenseNames
operator|.
name|get
argument_list|(
name|licName
argument_list|)
decl_stmt|;
name|ui
operator|.
name|theInt
operator|++
expr_stmt|;
block|}
else|else
block|{       }
block|}
comment|//System.out.println("License File: " + result + " for file: " + file);
return|return
name|result
return|;
block|}
DECL|method|getNoticeFile
specifier|private
specifier|static
name|File
name|getNoticeFile
parameter_list|(
name|File
name|file
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|UpdateableInt
argument_list|>
name|noticeNames
parameter_list|)
block|{
name|File
name|result
init|=
literal|null
decl_stmt|;
name|String
name|filename
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|length
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|noticeName
range|:
name|noticeNames
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|prefix
init|=
name|noticeName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|noticeName
operator|.
name|indexOf
argument_list|(
literal|"-NOTICE"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
comment|//System.out.println("prefix: " + prefix + " lic name: " + licName);
if|if
condition|(
name|filename
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|=
operator|new
name|File
argument_list|(
name|file
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|noticeName
argument_list|)
expr_stmt|;
name|UpdateableInt
name|ui
init|=
name|noticeNames
operator|.
name|get
argument_list|(
name|noticeName
argument_list|)
decl_stmt|;
name|ui
operator|.
name|theInt
operator|++
expr_stmt|;
block|}
else|else
block|{       }
block|}
comment|//System.out.println("License File: " + result + " for file: " + file);
return|return
name|result
return|;
block|}
block|}
end_class
begin_class
DECL|class|UpdateableInt
class|class
name|UpdateableInt
block|{
DECL|field|theInt
specifier|public
name|int
name|theInt
decl_stmt|;
block|}
end_class
end_unit
