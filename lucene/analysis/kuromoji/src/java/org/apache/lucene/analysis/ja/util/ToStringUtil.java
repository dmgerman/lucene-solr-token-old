begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.analysis.ja.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ja
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import
begin_comment
comment|/**  * Utility class for english translations of morphological data,  * used only for debugging.  */
end_comment
begin_class
DECL|class|ToStringUtil
specifier|public
class|class
name|ToStringUtil
block|{
comment|// a translation map for parts of speech, only used for reflectWith
DECL|field|posTranslations
specifier|private
specifier|static
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|posTranslations
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©"
argument_list|,
literal|"noun"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-ä¸è¬"
argument_list|,
literal|"noun-common"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-åºæåè©"
argument_list|,
literal|"noun-proper"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-åºæåè©-ä¸è¬"
argument_list|,
literal|"noun-proper-misc"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-åºæåè©-äººå"
argument_list|,
literal|"noun-proper-person"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-åºæåè©-äººå-ä¸è¬"
argument_list|,
literal|"noun-proper-person-misc"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-åºæåè©-äººå-å§"
argument_list|,
literal|"noun-proper-person-surname"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-åºæåè©-äººå-å"
argument_list|,
literal|"noun-proper-person-given_name"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-åºæåè©-çµç¹"
argument_list|,
literal|"noun-proper-organization"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-åºæåè©-å°å"
argument_list|,
literal|"noun-proper-place"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-åºæåè©-å°å-ä¸è¬"
argument_list|,
literal|"noun-proper-place-misc"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-åºæåè©-å°å-å½"
argument_list|,
literal|"noun-proper-place-country"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-ä»£åè©"
argument_list|,
literal|"noun-pronoun"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-ä»£åè©-ä¸è¬"
argument_list|,
literal|"noun-pronoun-misc"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-ä»£åè©-ç¸®ç´"
argument_list|,
literal|"noun-pronoun-contraction"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-å¯è©å¯è½"
argument_list|,
literal|"noun-adverbial"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-ãµå¤æ¥ç¶"
argument_list|,
literal|"noun-verbal"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-å½¢å®¹åè©èªå¹¹"
argument_list|,
literal|"noun-adjective-base"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-æ°"
argument_list|,
literal|"noun-numeric"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-éèªç«"
argument_list|,
literal|"noun-affix"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-éèªç«-ä¸è¬"
argument_list|,
literal|"noun-affix-misc"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-éèªç«-å¯è©å¯è½"
argument_list|,
literal|"noun-affix-adverbial"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-éèªç«-å©åè©èªå¹¹"
argument_list|,
literal|"noun-affix-aux"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-éèªç«-å½¢å®¹åè©èªå¹¹"
argument_list|,
literal|"noun-affix-adjective-base"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-ç¹æ®"
argument_list|,
literal|"noun-special"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-ç¹æ®-å©åè©èªå¹¹"
argument_list|,
literal|"noun-special-aux"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-æ¥å°¾"
argument_list|,
literal|"noun-suffix"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-æ¥å°¾-ä¸è¬"
argument_list|,
literal|"noun-suffix-misc"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-æ¥å°¾-äººå"
argument_list|,
literal|"noun-suffix-person"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-æ¥å°¾-å°å"
argument_list|,
literal|"noun-suffix-place"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-æ¥å°¾-ãµå¤æ¥ç¶"
argument_list|,
literal|"noun-suffix-verbal"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-æ¥å°¾-å©åè©èªå¹¹"
argument_list|,
literal|"noun-suffix-aux"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-æ¥å°¾-å½¢å®¹åè©èªå¹¹"
argument_list|,
literal|"noun-suffix-adjective-base"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-æ¥å°¾-å¯è©å¯è½"
argument_list|,
literal|"noun-suffix-adverbial"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-æ¥å°¾-å©æ°è©"
argument_list|,
literal|"noun-suffix-classifier"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-æ¥å°¾-ç¹æ®"
argument_list|,
literal|"noun-suffix-special"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-æ¥ç¶è©ç"
argument_list|,
literal|"noun-suffix-conjunctive"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-åè©éèªç«ç"
argument_list|,
literal|"noun-verbal_aux"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-å¼ç¨æå­å"
argument_list|,
literal|"noun-quotation"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-ãã¤å½¢å®¹è©èªå¹¹"
argument_list|,
literal|"noun-nai_adjective"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"æ¥é ­è©"
argument_list|,
literal|"prefix"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"æ¥é ­è©-åè©æ¥ç¶"
argument_list|,
literal|"prefix-nominal"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"æ¥é ­è©-åè©æ¥ç¶"
argument_list|,
literal|"prefix-verbal"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"æ¥é ­è©-å½¢å®¹è©æ¥ç¶"
argument_list|,
literal|"prefix-adjectival"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"æ¥é ­è©-æ°æ¥ç¶"
argument_list|,
literal|"prefix-numerical"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©"
argument_list|,
literal|"verb"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-èªç«"
argument_list|,
literal|"verb-main"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-éèªç«"
argument_list|,
literal|"verb-auxiliary"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"åè©-æ¥å°¾"
argument_list|,
literal|"verb-suffix"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"å½¢å®¹è©"
argument_list|,
literal|"adjective"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"å½¢å®¹è©-èªç«"
argument_list|,
literal|"adjective-main"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"å½¢å®¹è©-éèªç«"
argument_list|,
literal|"adjective-auxiliary"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"å½¢å®¹è©-æ¥å°¾"
argument_list|,
literal|"adjective-suffix"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"å¯è©"
argument_list|,
literal|"adverb"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"å¯è©-ä¸è¬"
argument_list|,
literal|"adverb-misc"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"å¯è©-å©è©é¡æ¥ç¶"
argument_list|,
literal|"adverb-particle_conjunction"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"é£ä½è©"
argument_list|,
literal|"adnominal"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"æ¥ç¶è©"
argument_list|,
literal|"conjunction"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"å©è©"
argument_list|,
literal|"particle"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"å©è©-æ ¼å©è©"
argument_list|,
literal|"particle-case"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"å©è©-æ ¼å©è©-ä¸è¬"
argument_list|,
literal|"particle-case-misc"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"å©è©-æ ¼å©è©-å¼ç¨"
argument_list|,
literal|"particle-case-quote"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"å©è©-æ ¼å©è©-é£èª"
argument_list|,
literal|"particle-case-compound"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"å©è©-æ¥ç¶å©è©"
argument_list|,
literal|"particle-conjunctive"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"å©è©-ä¿å©è©"
argument_list|,
literal|"particle-dependency"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"å©è©-å¯å©è©"
argument_list|,
literal|"particle-adverbial"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"å©è©-éæå©è©"
argument_list|,
literal|"particle-interjective"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"å©è©-ä¸¦ç«å©è©"
argument_list|,
literal|"particle-coordinate"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"å©è©-çµå©è©"
argument_list|,
literal|"particle-final"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"å©è©-å¯å©è©ï¼ä¸¦ç«å©è©ï¼çµå©è©"
argument_list|,
literal|"particle-adverbial/conjunctive/final"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"å©è©-é£ä½å"
argument_list|,
literal|"particle-adnominalizer"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"å©è©-å¯è©å"
argument_list|,
literal|"particle-adnominalizer"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"å©è©-ç¹æ®"
argument_list|,
literal|"particle-special"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"å©åè©"
argument_list|,
literal|"auxiliary-verb"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"æåè©"
argument_list|,
literal|"interjection"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"è¨å·"
argument_list|,
literal|"symbol"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"è¨å·-ä¸è¬"
argument_list|,
literal|"symbol-misc"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"è¨å·-å¥ç¹"
argument_list|,
literal|"symbol-period"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"è¨å·-èª­ç¹"
argument_list|,
literal|"symbol-comma"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"è¨å·-ç©ºç½"
argument_list|,
literal|"symbol-space"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"è¨å·-æ¬å¼§é"
argument_list|,
literal|"symbol-open_bracket"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"è¨å·-æ¬å¼§é"
argument_list|,
literal|"symbol-close_bracket"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"è¨å·-ã¢ã«ãã¡ããã"
argument_list|,
literal|"symbol-alphabetic"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"ãã®ä»"
argument_list|,
literal|"other"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"ãã®ä»-éæ"
argument_list|,
literal|"other-interjection"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"ãã£ã©ã¼"
argument_list|,
literal|"filler"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"éè¨èªé³"
argument_list|,
literal|"non-verbal"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"èªæ­ç"
argument_list|,
literal|"fragment"
argument_list|)
expr_stmt|;
name|posTranslations
operator|.
name|put
argument_list|(
literal|"æªç¥èª"
argument_list|,
literal|"unknown"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the english form of a POS tag    */
DECL|method|getPOSTranslation
specifier|public
specifier|static
name|String
name|getPOSTranslation
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|posTranslations
operator|.
name|get
argument_list|(
name|s
argument_list|)
return|;
block|}
comment|// a translation map for inflection types, only used for reflectWith
DECL|field|inflTypeTranslations
specifier|private
specifier|static
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inflTypeTranslations
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"*"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"å½¢å®¹è©ã»ã¢ã¦ãªæ®µ"
argument_list|,
literal|"adj-group-a-o-u"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"å½¢å®¹è©ã»ã¤æ®µ"
argument_list|,
literal|"adj-group-i"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"å½¢å®¹è©ã»ã¤ã¤"
argument_list|,
literal|"adj-group-ii"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"ä¸å¤åå"
argument_list|,
literal|"non-inflectional"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"ç¹æ®ã»ã¿"
argument_list|,
literal|"special-da"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"ç¹æ®ã»ã"
argument_list|,
literal|"special-ta"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"æèªã»ã´ãã·"
argument_list|,
literal|"classical-gotoshi"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"ç¹æ®ã»ã¸ã£"
argument_list|,
literal|"special-ja"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"ç¹æ®ã»ãã¤"
argument_list|,
literal|"special-nai"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"äºæ®µã»ã©è¡ç¹æ®"
argument_list|,
literal|"5-row-cons-r-special"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"ç¹æ®ã»ã"
argument_list|,
literal|"special-nu"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"æèªã»ã­"
argument_list|,
literal|"classical-ki"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"ç¹æ®ã»ã¿ã¤"
argument_list|,
literal|"special-tai"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"æèªã»ãã·"
argument_list|,
literal|"classical-beshi"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"ç¹æ®ã»ã¤"
argument_list|,
literal|"special-ya"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"æèªã»ãã¸"
argument_list|,
literal|"classical-maji"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"ä¸äºã»ã¿è¡"
argument_list|,
literal|"2-row-lower-cons-t"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"ç¹æ®ã»ãã¹"
argument_list|,
literal|"special-desu"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"ç¹æ®ã»ãã¹"
argument_list|,
literal|"special-masu"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"äºæ®µã»ã©è¡ã¢ã«"
argument_list|,
literal|"5-row-aru"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"æèªã»ããª"
argument_list|,
literal|"classical-nari"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"æèªã»ãª"
argument_list|,
literal|"classical-ri"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"æèªã»ã±ãª"
argument_list|,
literal|"classical-keri"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"æèªã»ã«"
argument_list|,
literal|"classical-ru"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"äºæ®µã»ã«è¡ã¤é³ä¾¿"
argument_list|,
literal|"5-row-cons-k-i-onbin"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"äºæ®µã»ãµè¡"
argument_list|,
literal|"5-row-cons-s"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"ä¸æ®µ"
argument_list|,
literal|"1-row"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"äºæ®µã»ã¯è¡ä¿é³ä¾¿"
argument_list|,
literal|"5-row-cons-w-cons-onbin"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"äºæ®µã»ãè¡"
argument_list|,
literal|"5-row-cons-m"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"äºæ®µã»ã¿è¡"
argument_list|,
literal|"5-row-cons-t"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"äºæ®µã»ã©è¡"
argument_list|,
literal|"5-row-cons-r"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"ãµå¤ã»âã¹ã«"
argument_list|,
literal|"irregular-suffix-suru"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"äºæ®µã»ã¬è¡"
argument_list|,
literal|"5-row-cons-g"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"ãµå¤ã»âãºã«"
argument_list|,
literal|"irregular-suffix-zuru"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"äºæ®µã»ãè¡"
argument_list|,
literal|"5-row-cons-b"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"äºæ®µã»ã¯è¡ã¦é³ä¾¿"
argument_list|,
literal|"5-row-cons-w-u-onbin"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"ä¸äºã»ãè¡"
argument_list|,
literal|"2-row-lower-cons-d"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"äºæ®µã»ã«è¡ä¿é³ä¾¿ã¦ã¯"
argument_list|,
literal|"5-row-cons-k-cons-onbin-yuku"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"ä¸äºã»ãè¡"
argument_list|,
literal|"2-row-upper-cons-d"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"äºæ®µã»ã«è¡ä¿é³ä¾¿"
argument_list|,
literal|"5-row-cons-k-cons-onbin"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"ä¸æ®µã»å¾ã«"
argument_list|,
literal|"1-row-eru"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"åæ®µã»ã¿è¡"
argument_list|,
literal|"4-row-cons-t"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"äºæ®µã»ãè¡"
argument_list|,
literal|"5-row-cons-n"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"ä¸äºã»ãè¡"
argument_list|,
literal|"2-row-lower-cons-h"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"åæ®µã»ãè¡"
argument_list|,
literal|"4-row-cons-h"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"åæ®µã»ãè¡"
argument_list|,
literal|"4-row-cons-b"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"ãµå¤ã»ã¹ã«"
argument_list|,
literal|"irregular-suru"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"ä¸äºã»ãè¡"
argument_list|,
literal|"2-row-upper-cons-h"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"ä¸äºã»ãè¡"
argument_list|,
literal|"2-row-lower-cons-m"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"åæ®µã»ãµè¡"
argument_list|,
literal|"4-row-cons-s"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"ä¸äºã»ã¬è¡"
argument_list|,
literal|"2-row-lower-cons-g"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"ã«å¤ã»æ¥ã«"
argument_list|,
literal|"kuru-kanji"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"ä¸æ®µã»ã¯ã¬ã«"
argument_list|,
literal|"1-row-kureru"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"ä¸äºã»å¾"
argument_list|,
literal|"2-row-lower-u"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"ã«å¤ã»ã¯ã«"
argument_list|,
literal|"kuru-kana"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"ã©å¤"
argument_list|,
literal|"irregular-cons-r"
argument_list|)
expr_stmt|;
name|inflTypeTranslations
operator|.
name|put
argument_list|(
literal|"ä¸äºã»ã«è¡"
argument_list|,
literal|"2-row-lower-cons-k"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the english form of inflection type    */
DECL|method|getInflectionTypeTranslation
specifier|public
specifier|static
name|String
name|getInflectionTypeTranslation
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|inflTypeTranslations
operator|.
name|get
argument_list|(
name|s
argument_list|)
return|;
block|}
comment|// a translation map for inflection forms, only used for reflectWith
DECL|field|inflFormTranslations
specifier|private
specifier|static
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inflFormTranslations
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
name|inflFormTranslations
operator|.
name|put
argument_list|(
literal|"*"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|inflFormTranslations
operator|.
name|put
argument_list|(
literal|"åºæ¬å½¢"
argument_list|,
literal|"base"
argument_list|)
expr_stmt|;
name|inflFormTranslations
operator|.
name|put
argument_list|(
literal|"æèªåºæ¬å½¢"
argument_list|,
literal|"classical-base"
argument_list|)
expr_stmt|;
name|inflFormTranslations
operator|.
name|put
argument_list|(
literal|"æªç¶ãæ¥ç¶"
argument_list|,
literal|"imperfective-nu-connection"
argument_list|)
expr_stmt|;
name|inflFormTranslations
operator|.
name|put
argument_list|(
literal|"æªç¶ã¦æ¥ç¶"
argument_list|,
literal|"imperfective-u-connection"
argument_list|)
expr_stmt|;
name|inflFormTranslations
operator|.
name|put
argument_list|(
literal|"é£ç¨ã¿æ¥ç¶"
argument_list|,
literal|"conjunctive-ta-connection"
argument_list|)
expr_stmt|;
name|inflFormTranslations
operator|.
name|put
argument_list|(
literal|"é£ç¨ãæ¥ç¶"
argument_list|,
literal|"conjunctive-te-connection"
argument_list|)
expr_stmt|;
name|inflFormTranslations
operator|.
name|put
argument_list|(
literal|"é£ç¨ã´ã¶ã¤æ¥ç¶"
argument_list|,
literal|"conjunctive-gozai-connection"
argument_list|)
expr_stmt|;
name|inflFormTranslations
operator|.
name|put
argument_list|(
literal|"ä½è¨æ¥ç¶"
argument_list|,
literal|"uninflected-connection"
argument_list|)
expr_stmt|;
name|inflFormTranslations
operator|.
name|put
argument_list|(
literal|"ä»®å®å½¢"
argument_list|,
literal|"subjunctive"
argument_list|)
expr_stmt|;
name|inflFormTranslations
operator|.
name|put
argument_list|(
literal|"å½ä»¤ï½"
argument_list|,
literal|"imperative-e"
argument_list|)
expr_stmt|;
name|inflFormTranslations
operator|.
name|put
argument_list|(
literal|"ä»®å®ç¸®ç´ï¼"
argument_list|,
literal|"conditional-contracted-1"
argument_list|)
expr_stmt|;
name|inflFormTranslations
operator|.
name|put
argument_list|(
literal|"ä»®å®ç¸®ç´ï¼"
argument_list|,
literal|"conditional-contracted-2"
argument_list|)
expr_stmt|;
name|inflFormTranslations
operator|.
name|put
argument_list|(
literal|"ã¬ã«æ¥ç¶"
argument_list|,
literal|"garu-connection"
argument_list|)
expr_stmt|;
name|inflFormTranslations
operator|.
name|put
argument_list|(
literal|"æªç¶å½¢"
argument_list|,
literal|"imperfective"
argument_list|)
expr_stmt|;
name|inflFormTranslations
operator|.
name|put
argument_list|(
literal|"é£ç¨å½¢"
argument_list|,
literal|"conjunctive"
argument_list|)
expr_stmt|;
name|inflFormTranslations
operator|.
name|put
argument_list|(
literal|"é³ä¾¿åºæ¬å½¢"
argument_list|,
literal|"onbin-base"
argument_list|)
expr_stmt|;
name|inflFormTranslations
operator|.
name|put
argument_list|(
literal|"é£ç¨ãæ¥ç¶"
argument_list|,
literal|"conjunctive-de-connection"
argument_list|)
expr_stmt|;
name|inflFormTranslations
operator|.
name|put
argument_list|(
literal|"æªç¶ç¹æ®"
argument_list|,
literal|"imperfective-special"
argument_list|)
expr_stmt|;
name|inflFormTranslations
operator|.
name|put
argument_list|(
literal|"å½ä»¤ï½"
argument_list|,
literal|"imperative-i"
argument_list|)
expr_stmt|;
name|inflFormTranslations
operator|.
name|put
argument_list|(
literal|"é£ç¨ãæ¥ç¶"
argument_list|,
literal|"conjunctive-ni-connection"
argument_list|)
expr_stmt|;
name|inflFormTranslations
operator|.
name|put
argument_list|(
literal|"å½ä»¤ï½ï½"
argument_list|,
literal|"imperative-yo"
argument_list|)
expr_stmt|;
name|inflFormTranslations
operator|.
name|put
argument_list|(
literal|"ä½è¨æ¥ç¶ç¹æ®"
argument_list|,
literal|"adnominal-special"
argument_list|)
expr_stmt|;
name|inflFormTranslations
operator|.
name|put
argument_list|(
literal|"å½ä»¤ï½ï½"
argument_list|,
literal|"imperative-ro"
argument_list|)
expr_stmt|;
name|inflFormTranslations
operator|.
name|put
argument_list|(
literal|"ä½è¨æ¥ç¶ç¹æ®ï¼"
argument_list|,
literal|"uninflected-special-connection-2"
argument_list|)
expr_stmt|;
name|inflFormTranslations
operator|.
name|put
argument_list|(
literal|"æªç¶ã¬ã«æ¥ç¶"
argument_list|,
literal|"imperfective-reru-connection"
argument_list|)
expr_stmt|;
name|inflFormTranslations
operator|.
name|put
argument_list|(
literal|"ç¾ä»£åºæ¬å½¢"
argument_list|,
literal|"modern-base"
argument_list|)
expr_stmt|;
name|inflFormTranslations
operator|.
name|put
argument_list|(
literal|"åºæ¬å½¢-ä¿é³ä¾¿"
argument_list|,
literal|"base-onbin"
argument_list|)
expr_stmt|;
comment|// not sure about this
block|}
comment|/**    * Get the english form of inflected form    */
DECL|method|getInflectedFormTranslation
specifier|public
specifier|static
name|String
name|getInflectedFormTranslation
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|inflFormTranslations
operator|.
name|get
argument_list|(
name|s
argument_list|)
return|;
block|}
comment|/**    * Romanize katakana with modified hepburn    */
DECL|method|getRomanization
specifier|public
specifier|static
name|String
name|getRomanization
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|getRomanization
argument_list|(
name|out
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|bogus
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|bogus
argument_list|)
throw|;
block|}
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Romanize katakana with modified hepburn    */
comment|// TODO: now that this is used by readingsfilter and not just for
comment|// debugging, fix this to really be a scheme that works best with IMEs
DECL|method|getRomanization
specifier|public
specifier|static
name|void
name|getRomanization
parameter_list|(
name|Appendable
name|builder
parameter_list|,
name|CharSequence
name|s
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|len
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
comment|// maximum lookahead: 3
name|char
name|ch
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|char
name|ch2
init|=
operator|(
name|i
operator|<
name|len
operator|-
literal|1
operator|)
condition|?
name|s
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
else|:
literal|0
decl_stmt|;
name|char
name|ch3
init|=
operator|(
name|i
operator|<
name|len
operator|-
literal|2
operator|)
condition|?
name|s
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
else|:
literal|0
decl_stmt|;
name|main
label|:
switch|switch
condition|(
name|ch
condition|)
block|{
case|case
literal|'ã'
case|:
switch|switch
condition|(
name|ch2
condition|)
block|{
case|case
literal|'ã«'
case|:
case|case
literal|'ã­'
case|:
case|case
literal|'ã¯'
case|:
case|case
literal|'ã±'
case|:
case|case
literal|'ã³'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|'k'
argument_list|)
expr_stmt|;
break|break
name|main
break|;
case|case
literal|'ãµ'
case|:
case|case
literal|'ã·'
case|:
case|case
literal|'ã¹'
case|:
case|case
literal|'ã»'
case|:
case|case
literal|'ã½'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|'s'
argument_list|)
expr_stmt|;
break|break
name|main
break|;
case|case
literal|'ã¿'
case|:
case|case
literal|'ã'
case|:
case|case
literal|'ã'
case|:
case|case
literal|'ã'
case|:
case|case
literal|'ã'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|'t'
argument_list|)
expr_stmt|;
break|break
name|main
break|;
case|case
literal|'ã'
case|:
case|case
literal|'ã'
case|:
case|case
literal|'ã'
case|:
case|case
literal|'ã'
case|:
case|case
literal|'ã'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|'p'
argument_list|)
expr_stmt|;
break|break
name|main
break|;
block|}
break|break;
case|case
literal|'ã¢'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|'a'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã¤'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã£'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"yi"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"ye"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'i'
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã¦'
case|:
switch|switch
condition|(
name|ch2
condition|)
block|{
case|case
literal|'ã¡'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"wa"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
break|break;
case|case
literal|'ã£'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"wi"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
break|break;
case|case
literal|'ã¥'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"wu"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
break|break;
case|case
literal|'ã§'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"we"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
break|break;
case|case
literal|'ã©'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"wo"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
break|break;
case|case
literal|'ã¥'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"wyu"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
break|break;
default|default:
name|builder
operator|.
name|append
argument_list|(
literal|'u'
argument_list|)
expr_stmt|;
break|break;
block|}
break|break;
case|case
literal|'ã¨'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|'e'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ãª'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'Å'
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'o'
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã«'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"ka"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã­'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
operator|&&
name|ch3
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"kyÅ"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
operator|&&
name|ch3
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"kyÅ«"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã£'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"kya"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"kyo"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"kyu"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"kye"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"ki"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã¯'
case|:
switch|switch
condition|(
name|ch2
condition|)
block|{
case|case
literal|'ã¡'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"kwa"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
break|break;
case|case
literal|'ã£'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"kwi"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
break|break;
case|case
literal|'ã§'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"kwe"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
break|break;
case|case
literal|'ã©'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"kwo"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
break|break;
case|case
literal|'ã®'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"kwa"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
break|break;
default|default:
name|builder
operator|.
name|append
argument_list|(
literal|"ku"
argument_list|)
expr_stmt|;
break|break;
block|}
break|break;
case|case
literal|'ã±'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"ke"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã³'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"kÅ"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"ko"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ãµ'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"sa"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã·'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
operator|&&
name|ch3
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"shÅ"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
operator|&&
name|ch3
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"shÅ«"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã£'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"sha"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"sho"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"shu"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"she"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"shi"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã¹'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã£'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"si"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"su"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã»'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"se"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã½'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"sÅ"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"so"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã¿'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"ta"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
operator|&&
name|ch3
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"chÅ"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
operator|&&
name|ch3
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"chÅ«"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã£'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"cha"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"cho"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"chu"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"che"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"chi"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã¡'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"tsa"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã£'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"tsi"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"tse"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã©'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"tso"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"tsyu"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"tsu"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã£'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"ti"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"tu"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"tyu"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"te"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"tÅ"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"tu"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"to"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"na"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
operator|&&
name|ch3
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"nyÅ"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
operator|&&
name|ch3
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"nyÅ«"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã£'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"nya"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"nyo"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"nyu"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"nye"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"ni"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"nu"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"ne"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"nÅ"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"no"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"ha"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
operator|&&
name|ch3
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"hyÅ"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
operator|&&
name|ch3
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"hyÅ«"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã£'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"hya"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"hyo"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"hyu"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"hye"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"hi"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã£'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"fya"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"fyu"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã£'
operator|&&
name|ch3
operator|==
literal|'ã§'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"fye"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"fyo"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¡'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"fa"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã£'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"fi"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"fe"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã©'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"fo"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"fu"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"he"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"hÅ"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"hu"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"ho"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"ma"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
operator|&&
name|ch3
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"myÅ"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
operator|&&
name|ch3
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"myÅ«"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã£'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"mya"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"myo"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"myu"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"mye"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"mi"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã '
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"mu"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã¡'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"me"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã¢'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"mÅ"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"mo"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã¤'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"ya"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã¦'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"yu"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã¨'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"yÅ"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"yo"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã©'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"la"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"ra"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ãª'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
operator|&&
name|ch3
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"ryÅ"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
operator|&&
name|ch3
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"ryÅ«"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã£'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"rya"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"ryo"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"ryu"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"rye"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"li"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"ri"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã«'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"lu"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"ru"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã¬'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"le"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"re"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã­'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"rÅ"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"lo"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"ro"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã¯'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"wa"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã°'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"i"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã±'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã²'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"o"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã³'
case|:
switch|switch
condition|(
name|ch2
condition|)
block|{
case|case
literal|'ã'
case|:
case|case
literal|'ã'
case|:
case|case
literal|'ã'
case|:
case|case
literal|'ã'
case|:
case|case
literal|'ã'
case|:
case|case
literal|'ã'
case|:
case|case
literal|'ã'
case|:
case|case
literal|'ã'
case|:
case|case
literal|'ã'
case|:
case|case
literal|'ã'
case|:
case|case
literal|'ã'
case|:
case|case
literal|'ã'
case|:
case|case
literal|'ã '
case|:
case|case
literal|'ã¡'
case|:
case|case
literal|'ã¢'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|'m'
argument_list|)
expr_stmt|;
break|break
name|main
break|;
case|case
literal|'ã¤'
case|:
case|case
literal|'ã¦'
case|:
case|case
literal|'ã¨'
case|:
case|case
literal|'ã¢'
case|:
case|case
literal|'ã¤'
case|:
case|case
literal|'ã¦'
case|:
case|case
literal|'ã¨'
case|:
case|case
literal|'ãª'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"n'"
argument_list|)
expr_stmt|;
break|break
name|main
break|;
default|default:
name|builder
operator|.
name|append
argument_list|(
literal|"n"
argument_list|)
expr_stmt|;
break|break
name|main
break|;
block|}
case|case
literal|'ã¬'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"ga"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã®'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
operator|&&
name|ch3
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"gyÅ"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
operator|&&
name|ch3
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"gyÅ«"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã£'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"gya"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"gyo"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"gyu"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"gye"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"gi"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã°'
case|:
switch|switch
condition|(
name|ch2
condition|)
block|{
case|case
literal|'ã¡'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"gwa"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
break|break;
case|case
literal|'ã£'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"gwi"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
break|break;
case|case
literal|'ã§'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"gwe"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
break|break;
case|case
literal|'ã©'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"gwo"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
break|break;
case|case
literal|'ã®'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"gwa"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
break|break;
default|default:
name|builder
operator|.
name|append
argument_list|(
literal|"gu"
argument_list|)
expr_stmt|;
break|break;
block|}
break|break;
case|case
literal|'ã²'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"ge"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã´'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"gÅ"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"go"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã¶'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"za"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã¸'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
operator|&&
name|ch3
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"jÅ"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
operator|&&
name|ch3
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"jÅ«"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã£'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"ja"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"jo"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"ju"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"je"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"ji"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ãº'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã£'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"zi"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"zu"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã¼'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"ze"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã¾'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"zÅ"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"zo"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"da"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã'
case|:
comment|// TODO: investigate all this
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
operator|&&
name|ch3
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"jÅ"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
operator|&&
name|ch3
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"jÅ«"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã£'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"ja"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"jo"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"ju"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"je"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"ji"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"zu"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã£'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"di"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"dyu"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"de"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"dÅ"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"du"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"do"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"ba"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
operator|&&
name|ch3
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"byÅ"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
operator|&&
name|ch3
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"byÅ«"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã£'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"bya"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"byo"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"byu"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"bye"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"bi"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"bu"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"be"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"bÅ"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"bo"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"pa"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
operator|&&
name|ch3
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"pyÅ"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
operator|&&
name|ch3
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"pyÅ«"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã£'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"pya"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"pyo"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã¥'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"pyu"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch2
operator|==
literal|'ã§'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"pye"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"pi"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"pu"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"pe"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã¦'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"pÅ"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"po"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã·'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"va"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã¸'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"vi"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã¹'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"ve"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ãº'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"vo"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã´'
case|:
if|if
condition|(
name|ch2
operator|==
literal|'ã£'
operator|&&
name|ch3
operator|==
literal|'ã§'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"vye"
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'v'
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'ã¡'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|'a'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã£'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|'i'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã¥'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|'u'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã§'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|'e'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã©'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|'o'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã®'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"wa"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã£'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"ya"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã¥'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"yu"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã§'
case|:
name|builder
operator|.
name|append
argument_list|(
literal|"yo"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'ã¼'
case|:
break|break;
default|default:
name|builder
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
