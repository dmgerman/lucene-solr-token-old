begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.analysis.ja
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ja
package|;
end_package
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|KeywordAttribute
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_comment
comment|/**  * A {@link TokenFilter} that normalizes common katakana spelling variations  * ending in a long sound character by removing this character (U+30FC).  Only  * katakana words longer than a minimum length are stemmed (default is four).  *<p>  * Note that only full-width katakana characters are supported.  Please use a  * {@link org.apache.lucene.analysis.cjk.CJKWidthFilter} to convert half-width  * katakana to full-width before using this filter.  *</p>  *<p>  * In order to prevent terms from being stemmed, use an instance of  * {@link org.apache.lucene.analysis.miscellaneous.SetKeywordMarkerFilter}  * or a custom {@link TokenFilter} that sets the {@link KeywordAttribute}  * before this {@link TokenStream}.  *</p>  */
end_comment
begin_class
DECL|class|JapaneseKatakanaStemFilter
specifier|public
specifier|final
class|class
name|JapaneseKatakanaStemFilter
extends|extends
name|TokenFilter
block|{
DECL|field|DEFAULT_MINIMUM_LENGTH
specifier|public
specifier|final
specifier|static
name|int
name|DEFAULT_MINIMUM_LENGTH
init|=
literal|4
decl_stmt|;
DECL|field|HIRAGANA_KATAKANA_PROLONGED_SOUND_MARK
specifier|private
specifier|final
specifier|static
name|char
name|HIRAGANA_KATAKANA_PROLONGED_SOUND_MARK
init|=
literal|'\u30fc'
decl_stmt|;
DECL|field|termAttr
specifier|private
specifier|final
name|CharTermAttribute
name|termAttr
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|keywordAttr
specifier|private
specifier|final
name|KeywordAttribute
name|keywordAttr
init|=
name|addAttribute
argument_list|(
name|KeywordAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|minimumKatakanaLength
specifier|private
specifier|final
name|int
name|minimumKatakanaLength
decl_stmt|;
DECL|method|JapaneseKatakanaStemFilter
specifier|public
name|JapaneseKatakanaStemFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|,
name|int
name|minimumLength
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|this
operator|.
name|minimumKatakanaLength
operator|=
name|minimumLength
expr_stmt|;
block|}
DECL|method|JapaneseKatakanaStemFilter
specifier|public
name|JapaneseKatakanaStemFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|this
argument_list|(
name|input
argument_list|,
name|DEFAULT_MINIMUM_LENGTH
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|input
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|keywordAttr
operator|.
name|isKeyword
argument_list|()
condition|)
block|{
name|termAttr
operator|.
name|setLength
argument_list|(
name|stem
argument_list|(
name|termAttr
operator|.
name|buffer
argument_list|()
argument_list|,
name|termAttr
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|stem
specifier|private
name|int
name|stem
parameter_list|(
name|char
index|[]
name|term
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|length
operator|<
name|minimumKatakanaLength
condition|)
block|{
return|return
name|length
return|;
block|}
if|if
condition|(
operator|!
name|isKatakana
argument_list|(
name|term
argument_list|,
name|length
argument_list|)
condition|)
block|{
return|return
name|length
return|;
block|}
if|if
condition|(
name|term
index|[
name|length
operator|-
literal|1
index|]
operator|==
name|HIRAGANA_KATAKANA_PROLONGED_SOUND_MARK
condition|)
block|{
return|return
name|length
operator|-
literal|1
return|;
block|}
return|return
name|length
return|;
block|}
DECL|method|isKatakana
specifier|private
name|boolean
name|isKatakana
parameter_list|(
name|char
index|[]
name|term
parameter_list|,
name|int
name|length
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// NOTE: Test only identifies full-width characters -- half-widths are supported
if|if
condition|(
name|Character
operator|.
name|UnicodeBlock
operator|.
name|of
argument_list|(
name|term
index|[
name|i
index|]
argument_list|)
operator|!=
name|Character
operator|.
name|UnicodeBlock
operator|.
name|KATAKANA
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
