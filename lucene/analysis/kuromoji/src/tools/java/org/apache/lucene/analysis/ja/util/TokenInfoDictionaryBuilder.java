begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.ja.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ja
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharsetDecoder
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CodingErrorAction
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ja
operator|.
name|util
operator|.
name|DictionaryBuilder
operator|.
name|DictionaryFormat
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|Builder
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|FST
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|PositiveIntOutputs
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import
begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|text
operator|.
name|Normalizer2
import|;
end_import
begin_comment
comment|/**  */
end_comment
begin_class
DECL|class|TokenInfoDictionaryBuilder
specifier|public
class|class
name|TokenInfoDictionaryBuilder
block|{
comment|/** Internal word id - incrementally assigned as entries are read and added. This will be byte offset of dictionary file */
DECL|field|offset
specifier|private
name|int
name|offset
init|=
literal|0
decl_stmt|;
DECL|field|encoding
specifier|private
name|String
name|encoding
init|=
literal|"euc-jp"
decl_stmt|;
DECL|field|normalizeEntries
specifier|private
name|boolean
name|normalizeEntries
init|=
literal|false
decl_stmt|;
DECL|field|normalizer
specifier|private
name|Normalizer2
name|normalizer
decl_stmt|;
DECL|field|format
specifier|private
name|DictionaryFormat
name|format
init|=
name|DictionaryFormat
operator|.
name|IPADIC
decl_stmt|;
DECL|method|TokenInfoDictionaryBuilder
specifier|public
name|TokenInfoDictionaryBuilder
parameter_list|(
name|DictionaryFormat
name|format
parameter_list|,
name|String
name|encoding
parameter_list|,
name|boolean
name|normalizeEntries
parameter_list|)
block|{
name|this
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|this
operator|.
name|encoding
operator|=
name|encoding
expr_stmt|;
name|this
operator|.
name|normalizeEntries
operator|=
name|normalizeEntries
expr_stmt|;
name|this
operator|.
name|normalizer
operator|=
name|normalizeEntries
condition|?
name|Normalizer2
operator|.
name|getInstance
argument_list|(
literal|null
argument_list|,
literal|"nfkc"
argument_list|,
name|Normalizer2
operator|.
name|Mode
operator|.
name|COMPOSE
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
DECL|method|build
specifier|public
name|TokenInfoDictionaryWriter
name|build
parameter_list|(
name|String
name|dirname
parameter_list|)
throws|throws
name|IOException
block|{
name|FilenameFilter
name|filter
init|=
operator|new
name|FilenameFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|endsWith
argument_list|(
literal|".csv"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|ArrayList
argument_list|<
name|File
argument_list|>
name|csvFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
operator|new
name|File
argument_list|(
name|dirname
argument_list|)
operator|.
name|listFiles
argument_list|(
name|filter
argument_list|)
control|)
block|{
name|csvFiles
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|csvFiles
argument_list|)
expr_stmt|;
return|return
name|buildDictionary
argument_list|(
name|csvFiles
argument_list|)
return|;
block|}
DECL|method|buildDictionary
specifier|public
name|TokenInfoDictionaryWriter
name|buildDictionary
parameter_list|(
name|List
argument_list|<
name|File
argument_list|>
name|csvFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|TokenInfoDictionaryWriter
name|dictionary
init|=
operator|new
name|TokenInfoDictionaryWriter
argument_list|(
literal|10
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
comment|// all lines in the file
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  parse..."
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|String
index|[]
argument_list|>
argument_list|(
literal|400000
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|csvFiles
control|)
block|{
name|FileInputStream
name|inputStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|Charset
name|cs
init|=
name|Charset
operator|.
name|forName
argument_list|(
name|encoding
argument_list|)
decl_stmt|;
name|CharsetDecoder
name|decoder
init|=
name|cs
operator|.
name|newDecoder
argument_list|()
operator|.
name|onMalformedInput
argument_list|(
name|CodingErrorAction
operator|.
name|REPORT
argument_list|)
operator|.
name|onUnmappableCharacter
argument_list|(
name|CodingErrorAction
operator|.
name|REPORT
argument_list|)
decl_stmt|;
name|InputStreamReader
name|streamReader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|inputStream
argument_list|,
name|decoder
argument_list|)
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
name|streamReader
argument_list|)
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|entry
init|=
name|CSVUtil
operator|.
name|parse
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|length
operator|<
literal|13
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Entry in CSV is not valid: "
operator|+
name|line
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
index|[]
name|formatted
init|=
name|formatEntry
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
name|formatted
argument_list|)
expr_stmt|;
comment|// NFKC normalize dictionary entry
if|if
condition|(
name|normalizeEntries
condition|)
block|{
if|if
condition|(
name|normalizer
operator|.
name|isNormalized
argument_list|(
name|entry
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
index|[]
name|normalizedEntry
init|=
operator|new
name|String
index|[
name|entry
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entry
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|normalizedEntry
index|[
name|i
index|]
operator|=
name|normalizer
operator|.
name|normalize
argument_list|(
name|entry
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|formatted
operator|=
name|formatEntry
argument_list|(
name|normalizedEntry
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
name|formatted
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  sort..."
argument_list|)
expr_stmt|;
comment|// sort by term: we sorted the files already and use a stable sort.
name|Collections
operator|.
name|sort
argument_list|(
name|lines
argument_list|,
operator|new
name|Comparator
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|String
index|[]
name|left
parameter_list|,
name|String
index|[]
name|right
parameter_list|)
block|{
return|return
name|left
index|[
literal|0
index|]
operator|.
name|compareTo
argument_list|(
name|right
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  encode..."
argument_list|)
expr_stmt|;
name|PositiveIntOutputs
name|fstOutput
init|=
name|PositiveIntOutputs
operator|.
name|getSingleton
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Builder
argument_list|<
name|Long
argument_list|>
name|fstBuilder
init|=
operator|new
name|Builder
argument_list|<
name|Long
argument_list|>
argument_list|(
name|FST
operator|.
name|INPUT_TYPE
operator|.
name|BYTE2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|fstOutput
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|IntsRef
name|scratch
init|=
operator|new
name|IntsRef
argument_list|()
decl_stmt|;
name|long
name|ord
init|=
operator|-
literal|1
decl_stmt|;
comment|// first ord will be 0
name|String
name|lastValue
init|=
literal|null
decl_stmt|;
comment|// build tokeninfo dictionary
for|for
control|(
name|String
index|[]
name|entry
range|:
name|lines
control|)
block|{
name|int
name|next
init|=
name|dictionary
operator|.
name|put
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|==
name|offset
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed to process line: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|token
init|=
name|entry
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|token
operator|.
name|equals
argument_list|(
name|lastValue
argument_list|)
condition|)
block|{
comment|// new word to add to fst
name|ord
operator|++
expr_stmt|;
name|lastValue
operator|=
name|token
expr_stmt|;
name|scratch
operator|.
name|grow
argument_list|(
name|token
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|scratch
operator|.
name|length
operator|=
name|token
operator|.
name|length
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|token
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|scratch
operator|.
name|ints
index|[
name|i
index|]
operator|=
operator|(
name|int
operator|)
name|token
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|fstBuilder
operator|.
name|add
argument_list|(
name|scratch
argument_list|,
name|ord
argument_list|)
expr_stmt|;
block|}
name|dictionary
operator|.
name|addMapping
argument_list|(
operator|(
name|int
operator|)
name|ord
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|offset
operator|=
name|next
expr_stmt|;
block|}
specifier|final
name|FST
argument_list|<
name|Long
argument_list|>
name|fst
init|=
name|fstBuilder
operator|.
name|finish
argument_list|()
operator|.
name|pack
argument_list|(
literal|2
argument_list|,
literal|100000
argument_list|,
name|PackedInts
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"  "
operator|+
name|fst
operator|.
name|getNodeCount
argument_list|()
operator|+
literal|" nodes, "
operator|+
name|fst
operator|.
name|getArcCount
argument_list|()
operator|+
literal|" arcs, "
operator|+
name|fst
operator|.
name|sizeInBytes
argument_list|()
operator|+
literal|" bytes...  "
argument_list|)
expr_stmt|;
name|dictionary
operator|.
name|setFST
argument_list|(
name|fst
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" done"
argument_list|)
expr_stmt|;
return|return
name|dictionary
return|;
block|}
comment|/*    * IPADIC features    *     * 0   - surface    * 1   - left cost    * 2   - right cost    * 3   - word cost    * 4-9 - pos    * 10  - base form    * 11  - reading    * 12  - pronounciation    *    * UniDic features    *     * 0   - surface    * 1   - left cost    * 2   - right cost    * 3   - word cost    * 4-9 - pos    * 10  - base form reading    * 11  - base form    * 12  - surface form    * 13  - surface reading    */
DECL|method|formatEntry
specifier|public
name|String
index|[]
name|formatEntry
parameter_list|(
name|String
index|[]
name|features
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|format
operator|==
name|DictionaryFormat
operator|.
name|IPADIC
condition|)
block|{
return|return
name|features
return|;
block|}
else|else
block|{
name|String
index|[]
name|features2
init|=
operator|new
name|String
index|[
literal|13
index|]
decl_stmt|;
name|features2
index|[
literal|0
index|]
operator|=
name|features
index|[
literal|0
index|]
expr_stmt|;
name|features2
index|[
literal|1
index|]
operator|=
name|features
index|[
literal|1
index|]
expr_stmt|;
name|features2
index|[
literal|2
index|]
operator|=
name|features
index|[
literal|2
index|]
expr_stmt|;
name|features2
index|[
literal|3
index|]
operator|=
name|features
index|[
literal|3
index|]
expr_stmt|;
name|features2
index|[
literal|4
index|]
operator|=
name|features
index|[
literal|4
index|]
expr_stmt|;
name|features2
index|[
literal|5
index|]
operator|=
name|features
index|[
literal|5
index|]
expr_stmt|;
name|features2
index|[
literal|6
index|]
operator|=
name|features
index|[
literal|6
index|]
expr_stmt|;
name|features2
index|[
literal|7
index|]
operator|=
name|features
index|[
literal|7
index|]
expr_stmt|;
name|features2
index|[
literal|8
index|]
operator|=
name|features
index|[
literal|8
index|]
expr_stmt|;
name|features2
index|[
literal|9
index|]
operator|=
name|features
index|[
literal|9
index|]
expr_stmt|;
name|features2
index|[
literal|10
index|]
operator|=
name|features
index|[
literal|11
index|]
expr_stmt|;
comment|// If the surface reading is non-existent, use surface form for reading and pronunciation.
comment|// This happens with punctuation in UniDic and there are possibly other cases as well
if|if
condition|(
name|features
index|[
literal|13
index|]
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|features2
index|[
literal|11
index|]
operator|=
name|features
index|[
literal|0
index|]
expr_stmt|;
name|features2
index|[
literal|12
index|]
operator|=
name|features
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|features2
index|[
literal|11
index|]
operator|=
name|features
index|[
literal|13
index|]
expr_stmt|;
name|features2
index|[
literal|12
index|]
operator|=
name|features
index|[
literal|13
index|]
expr_stmt|;
block|}
return|return
name|features2
return|;
block|}
block|}
block|}
end_class
end_unit
