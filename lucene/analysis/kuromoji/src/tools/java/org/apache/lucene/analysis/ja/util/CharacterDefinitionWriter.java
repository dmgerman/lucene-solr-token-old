begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.ja.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ja
operator|.
name|util
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ja
operator|.
name|dict
operator|.
name|CharacterDefinition
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|DataOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|OutputStreamDataOutput
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CodecUtil
import|;
end_import
begin_class
DECL|class|CharacterDefinitionWriter
specifier|public
specifier|final
class|class
name|CharacterDefinitionWriter
block|{
DECL|field|characterCategoryMap
specifier|private
specifier|final
name|byte
index|[]
name|characterCategoryMap
init|=
operator|new
name|byte
index|[
literal|0x10000
index|]
decl_stmt|;
DECL|field|invokeMap
specifier|private
specifier|final
name|boolean
index|[]
name|invokeMap
init|=
operator|new
name|boolean
index|[
name|CharacterDefinition
operator|.
name|CLASS_COUNT
index|]
decl_stmt|;
DECL|field|groupMap
specifier|private
specifier|final
name|boolean
index|[]
name|groupMap
init|=
operator|new
name|boolean
index|[
name|CharacterDefinition
operator|.
name|CLASS_COUNT
index|]
decl_stmt|;
comment|/**    * Constructor for building. TODO: remove write access    */
DECL|method|CharacterDefinitionWriter
specifier|public
name|CharacterDefinitionWriter
parameter_list|()
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|characterCategoryMap
argument_list|,
name|CharacterDefinition
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
comment|/**    * Put mapping from unicode code point to character class.    *     * @param codePoint    *            code point    * @param characterClassName character class name    */
DECL|method|putCharacterCategory
specifier|public
name|void
name|putCharacterCategory
parameter_list|(
name|int
name|codePoint
parameter_list|,
name|String
name|characterClassName
parameter_list|)
block|{
name|characterClassName
operator|=
name|characterClassName
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
comment|// use first
comment|// category
comment|// class
comment|// Override Nakaguro
if|if
condition|(
name|codePoint
operator|==
literal|0x30FB
condition|)
block|{
name|characterClassName
operator|=
literal|"SYMBOL"
expr_stmt|;
block|}
name|characterCategoryMap
index|[
name|codePoint
index|]
operator|=
name|CharacterDefinition
operator|.
name|lookupCharacterClass
argument_list|(
name|characterClassName
argument_list|)
expr_stmt|;
block|}
DECL|method|putInvokeDefinition
specifier|public
name|void
name|putInvokeDefinition
parameter_list|(
name|String
name|characterClassName
parameter_list|,
name|int
name|invoke
parameter_list|,
name|int
name|group
parameter_list|,
name|int
name|length
parameter_list|)
block|{
specifier|final
name|byte
name|characterClass
init|=
name|CharacterDefinition
operator|.
name|lookupCharacterClass
argument_list|(
name|characterClassName
argument_list|)
decl_stmt|;
name|invokeMap
index|[
name|characterClass
index|]
operator|=
name|invoke
operator|==
literal|1
expr_stmt|;
name|groupMap
index|[
name|characterClass
index|]
operator|=
name|group
operator|==
literal|1
expr_stmt|;
comment|// TODO: length def ignored
block|}
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|String
name|baseDir
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|filename
init|=
name|baseDir
operator|+
name|File
operator|.
name|separator
operator|+
name|CharacterDefinition
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
name|File
operator|.
name|separatorChar
argument_list|)
operator|+
name|CharacterDefinition
operator|.
name|FILENAME_SUFFIX
decl_stmt|;
operator|new
name|File
argument_list|(
name|filename
argument_list|)
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|filename
argument_list|)
decl_stmt|;
try|try
block|{
name|os
operator|=
operator|new
name|BufferedOutputStream
argument_list|(
name|os
argument_list|)
expr_stmt|;
specifier|final
name|DataOutput
name|out
init|=
operator|new
name|OutputStreamDataOutput
argument_list|(
name|os
argument_list|)
decl_stmt|;
name|CodecUtil
operator|.
name|writeHeader
argument_list|(
name|out
argument_list|,
name|CharacterDefinition
operator|.
name|HEADER
argument_list|,
name|CharacterDefinition
operator|.
name|VERSION
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|characterCategoryMap
argument_list|,
literal|0
argument_list|,
name|characterCategoryMap
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CharacterDefinition
operator|.
name|CLASS_COUNT
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|byte
name|b
init|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|invokeMap
index|[
name|i
index|]
condition|?
literal|0x01
else|:
literal|0x00
operator|)
operator||
operator|(
name|groupMap
index|[
name|i
index|]
condition|?
literal|0x02
else|:
literal|0x00
operator|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeByte
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
