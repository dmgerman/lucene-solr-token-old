begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.analysis.ja.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ja
operator|.
name|util
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import
begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ja
operator|.
name|dict
operator|.
name|TokenInfoDictionary
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|fst
operator|.
name|FST
import|;
end_import
begin_class
DECL|class|TokenInfoDictionaryWriter
specifier|public
class|class
name|TokenInfoDictionaryWriter
extends|extends
name|BinaryDictionaryWriter
block|{
DECL|field|fst
specifier|private
name|FST
argument_list|<
name|Long
argument_list|>
name|fst
decl_stmt|;
DECL|method|TokenInfoDictionaryWriter
specifier|public
name|TokenInfoDictionaryWriter
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|super
argument_list|(
name|TokenInfoDictionary
operator|.
name|class
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
DECL|method|setFST
specifier|public
name|void
name|setFST
parameter_list|(
name|FST
argument_list|<
name|Long
argument_list|>
name|fst
parameter_list|)
block|{
name|this
operator|.
name|fst
operator|=
name|fst
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|String
name|baseDir
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
name|writeFST
argument_list|(
name|getBaseFileName
argument_list|(
name|baseDir
argument_list|)
operator|+
name|TokenInfoDictionary
operator|.
name|FST_FILENAME_SUFFIX
argument_list|)
expr_stmt|;
block|}
DECL|method|writeFST
specifier|protected
name|void
name|writeFST
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|p
init|=
name|Paths
operator|.
name|get
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|p
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|fst
operator|.
name|save
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
end_class
end_unit
