begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.uima.an
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|uima
operator|.
name|an
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|uima
operator|.
name|UimaContext
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|uima
operator|.
name|analysis_component
operator|.
name|JCasAnnotator_ImplBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|uima
operator|.
name|analysis_engine
operator|.
name|AnalysisEngineProcessException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|uima
operator|.
name|cas
operator|.
name|Type
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|uima
operator|.
name|cas
operator|.
name|text
operator|.
name|AnnotationFS
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|uima
operator|.
name|jcas
operator|.
name|JCas
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|uima
operator|.
name|resource
operator|.
name|ResourceInitializationException
import|;
end_import
begin_comment
comment|/**  * Dummy implementation of a UIMA based whitespace tokenizer  */
end_comment
begin_class
DECL|class|SampleWSTokenizerAnnotator
specifier|public
class|class
name|SampleWSTokenizerAnnotator
extends|extends
name|JCasAnnotator_ImplBase
block|{
DECL|field|TOKEN_TYPE
specifier|private
specifier|final
specifier|static
name|String
name|TOKEN_TYPE
init|=
literal|"org.apache.lucene.uima.ts.TokenAnnotation"
decl_stmt|;
DECL|field|SENTENCE_TYPE
specifier|private
specifier|final
specifier|static
name|String
name|SENTENCE_TYPE
init|=
literal|"org.apache.lucene.uima.ts.SentenceAnnotation"
decl_stmt|;
DECL|field|lineEnd
specifier|private
name|String
name|lineEnd
decl_stmt|;
DECL|field|WHITESPACE
specifier|private
specifier|static
specifier|final
name|String
name|WHITESPACE
init|=
literal|" "
decl_stmt|;
annotation|@
name|Override
DECL|method|initialize
specifier|public
name|void
name|initialize
parameter_list|(
name|UimaContext
name|aContext
parameter_list|)
throws|throws
name|ResourceInitializationException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|aContext
argument_list|)
expr_stmt|;
name|lineEnd
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|aContext
operator|.
name|getConfigParameterValue
argument_list|(
literal|"line-end"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process
specifier|public
name|void
name|process
parameter_list|(
name|JCas
name|jCas
parameter_list|)
throws|throws
name|AnalysisEngineProcessException
block|{
name|Type
name|sentenceType
init|=
name|jCas
operator|.
name|getCas
argument_list|()
operator|.
name|getTypeSystem
argument_list|()
operator|.
name|getType
argument_list|(
name|SENTENCE_TYPE
argument_list|)
decl_stmt|;
name|Type
name|tokenType
init|=
name|jCas
operator|.
name|getCas
argument_list|()
operator|.
name|getTypeSystem
argument_list|()
operator|.
name|getType
argument_list|(
name|TOKEN_TYPE
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|sentenceString
range|:
name|jCas
operator|.
name|getDocumentText
argument_list|()
operator|.
name|split
argument_list|(
name|lineEnd
argument_list|)
control|)
block|{
comment|// add the sentence
name|AnnotationFS
name|sentenceAnnotation
init|=
name|jCas
operator|.
name|getCas
argument_list|()
operator|.
name|createAnnotation
argument_list|(
name|sentenceType
argument_list|,
name|i
argument_list|,
name|sentenceString
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|jCas
operator|.
name|addFsToIndexes
argument_list|(
name|sentenceAnnotation
argument_list|)
expr_stmt|;
name|i
operator|+=
name|sentenceString
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
comment|// get tokens
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|tokenString
range|:
name|jCas
operator|.
name|getDocumentText
argument_list|()
operator|.
name|split
argument_list|(
name|WHITESPACE
argument_list|)
control|)
block|{
name|int
name|tokenLength
init|=
name|tokenString
operator|.
name|length
argument_list|()
decl_stmt|;
name|AnnotationFS
name|tokenAnnotation
init|=
name|jCas
operator|.
name|getCas
argument_list|()
operator|.
name|createAnnotation
argument_list|(
name|tokenType
argument_list|,
name|j
argument_list|,
name|j
operator|+
name|tokenLength
argument_list|)
decl_stmt|;
name|jCas
operator|.
name|addFsToIndexes
argument_list|(
name|tokenAnnotation
argument_list|)
expr_stmt|;
name|j
operator|+=
name|tokenLength
expr_stmt|;
block|}
block|}
block|}
end_class
end_unit
