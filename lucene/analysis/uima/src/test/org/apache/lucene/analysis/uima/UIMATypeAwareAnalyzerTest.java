begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.uima
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|uima
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|BaseTokenStreamTestCase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import
begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import
begin_comment
comment|/**  * Testcase for {@link UIMATypeAwareAnalyzer}  */
end_comment
begin_class
DECL|class|UIMATypeAwareAnalyzerTest
specifier|public
class|class
name|UIMATypeAwareAnalyzerTest
extends|extends
name|BaseTokenStreamTestCase
block|{
DECL|field|analyzer
specifier|private
name|UIMATypeAwareAnalyzer
name|analyzer
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|analyzer
operator|=
operator|new
name|UIMATypeAwareAnalyzer
argument_list|(
literal|"/uima/AggregateSentenceAE.xml"
argument_list|,
literal|"org.apache.uima.TokenAnnotation"
argument_list|,
literal|"posTag"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|analyzer
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|baseUIMATypeAwareAnalyzerStreamTest
specifier|public
name|void
name|baseUIMATypeAwareAnalyzerStreamTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create a token stream
name|TokenStream
name|ts
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
literal|"text"
argument_list|,
literal|"the big brown fox jumped on the wood"
argument_list|)
decl_stmt|;
comment|// check that 'the big brown fox jumped on the wood' tokens have the expected PoS types
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"the"
block|,
literal|"big"
block|,
literal|"brown"
block|,
literal|"fox"
block|,
literal|"jumped"
block|,
literal|"on"
block|,
literal|"the"
block|,
literal|"wood"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"at"
block|,
literal|"jj"
block|,
literal|"jj"
block|,
literal|"nn"
block|,
literal|"vbd"
block|,
literal|"in"
block|,
literal|"at"
block|,
literal|"nn"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRandomStrings
specifier|public
name|void
name|testRandomStrings
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|analyzer
init|=
operator|new
name|UIMATypeAwareAnalyzer
argument_list|(
literal|"/uima/TestAggregateSentenceAE.xml"
argument_list|,
literal|"org.apache.lucene.uima.ts.TokenAnnotation"
argument_list|,
literal|"pos"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|checkRandomData
argument_list|(
name|random
argument_list|()
argument_list|,
name|analyzer
argument_list|,
literal|100
operator|*
name|RANDOM_MULTIPLIER
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class
end_unit
