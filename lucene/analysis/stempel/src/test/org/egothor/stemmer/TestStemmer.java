begin_unit
begin_package
DECL|package|org.egothor.stemmer
package|package
name|org
operator|.
name|egothor
operator|.
name|stemmer
package|;
end_package
begin_comment
comment|/*  Egothor Software License version 1.00  Copyright (C) 1997-2004 Leo Galambos.  Copyright (C) 2002-2004 "Egothor developers"  on behalf of the Egothor Project.  All rights reserved.   This  software  is  copyrighted  by  the "Egothor developers". If this  license applies to a single file or document, the "Egothor developers"  are the people or entities mentioned as copyright holders in that file  or  document.  If  this  license  applies  to the Egothor project as a  whole,  the  copyright holders are the people or entities mentioned in  the  file CREDITS. This file can be found in the same location as this  license in the distribution.   Redistribution  and  use  in  source and binary forms, with or without  modification, are permitted provided that the following conditions are  met:  1. Redistributions  of  source  code  must retain the above copyright  notice, the list of contributors, this list of conditions, and the  following disclaimer.  2. Redistributions  in binary form must reproduce the above copyright  notice, the list of contributors, this list of conditions, and the  disclaimer  that  follows  these  conditions  in the documentation  and/or other materials provided with the distribution.  3. The name "Egothor" must not be used to endorse or promote products  derived  from  this software without prior written permission. For  written permission, please contact Leo.G@seznam.cz  4. Products  derived  from this software may not be called "Egothor",  nor  may  "Egothor"  appear  in  their name, without prior written  permission from Leo.G@seznam.cz.   In addition, we request that you include in the end-user documentation  provided  with  the  redistribution  and/or  in the software itself an  acknowledgement equivalent to the following:  "This product includes software developed by the Egothor Project.  http://egothor.sf.net/"   THIS  SOFTWARE  IS  PROVIDED  ``AS  IS''  AND ANY EXPRESSED OR IMPLIED  WARRANTIES,  INCLUDING,  BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF  MERCHANTABILITY  AND  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN  NO  EVENT  SHALL THE EGOTHOR PROJECT OR ITS CONTRIBUTORS BE LIABLE  FOR   ANY   DIRECT,   INDIRECT,  INCIDENTAL,  SPECIAL,  EXEMPLARY,  OR  CONSEQUENTIAL  DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  SUBSTITUTE  GOODS  OR  SERVICES;  LOSS  OF  USE,  DATA, OR PROFITS; OR  BUSINESS  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,  WHETHER  IN  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE  OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   This  software  consists  of  voluntary  contributions  made  by  many  individuals  on  behalf  of  the  Egothor  Project  and was originally  created by Leo Galambos (Leo.G@seznam.cz).  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import
begin_class
DECL|class|TestStemmer
specifier|public
class|class
name|TestStemmer
extends|extends
name|LuceneTestCase
block|{
DECL|method|testTrie
specifier|public
name|void
name|testTrie
parameter_list|()
block|{
name|Trie
name|t
init|=
operator|new
name|Trie
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|String
name|keys
index|[]
init|=
block|{
literal|"a"
block|,
literal|"ba"
block|,
literal|"bb"
block|,
literal|"c"
block|}
decl_stmt|;
name|String
name|vals
index|[]
init|=
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"2"
block|,
literal|"4"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|t
operator|.
name|add
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|vals
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|t
operator|.
name|root
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|t
operator|.
name|rows
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|t
operator|.
name|cmds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrieContents
argument_list|(
name|t
argument_list|,
name|keys
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
DECL|method|testTrieBackwards
specifier|public
name|void
name|testTrieBackwards
parameter_list|()
block|{
name|Trie
name|t
init|=
operator|new
name|Trie
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|String
name|keys
index|[]
init|=
block|{
literal|"a"
block|,
literal|"ba"
block|,
literal|"bb"
block|,
literal|"c"
block|}
decl_stmt|;
name|String
name|vals
index|[]
init|=
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"2"
block|,
literal|"4"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|t
operator|.
name|add
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|vals
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertTrieContents
argument_list|(
name|t
argument_list|,
name|keys
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiTrie
specifier|public
name|void
name|testMultiTrie
parameter_list|()
block|{
name|Trie
name|t
init|=
operator|new
name|MultiTrie
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|String
name|keys
index|[]
init|=
block|{
literal|"a"
block|,
literal|"ba"
block|,
literal|"bb"
block|,
literal|"c"
block|}
decl_stmt|;
name|String
name|vals
index|[]
init|=
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"2"
block|,
literal|"4"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|t
operator|.
name|add
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|vals
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertTrieContents
argument_list|(
name|t
argument_list|,
name|keys
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiTrieBackwards
specifier|public
name|void
name|testMultiTrieBackwards
parameter_list|()
block|{
name|Trie
name|t
init|=
operator|new
name|MultiTrie
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|String
name|keys
index|[]
init|=
block|{
literal|"a"
block|,
literal|"ba"
block|,
literal|"bb"
block|,
literal|"c"
block|}
decl_stmt|;
name|String
name|vals
index|[]
init|=
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"2"
block|,
literal|"4"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|t
operator|.
name|add
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|vals
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertTrieContents
argument_list|(
name|t
argument_list|,
name|keys
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiTrie2
specifier|public
name|void
name|testMultiTrie2
parameter_list|()
block|{
name|Trie
name|t
init|=
operator|new
name|MultiTrie2
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|String
name|keys
index|[]
init|=
block|{
literal|"a"
block|,
literal|"ba"
block|,
literal|"bb"
block|,
literal|"c"
block|}
decl_stmt|;
comment|/*       * short vals won't work, see line 155 for example      * the IOOBE is caught (wierd), but shouldnt affect patch cmds?      */
name|String
name|vals
index|[]
init|=
block|{
literal|"1111"
block|,
literal|"2222"
block|,
literal|"2223"
block|,
literal|"4444"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|t
operator|.
name|add
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|vals
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertTrieContents
argument_list|(
name|t
argument_list|,
name|keys
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiTrie2Backwards
specifier|public
name|void
name|testMultiTrie2Backwards
parameter_list|()
block|{
name|Trie
name|t
init|=
operator|new
name|MultiTrie2
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|String
name|keys
index|[]
init|=
block|{
literal|"a"
block|,
literal|"ba"
block|,
literal|"bb"
block|,
literal|"c"
block|}
decl_stmt|;
comment|/*       * short vals won't work, see line 155 for example      * the IOOBE is caught (wierd), but shouldnt affect patch cmds?      */
name|String
name|vals
index|[]
init|=
block|{
literal|"1111"
block|,
literal|"2222"
block|,
literal|"2223"
block|,
literal|"4444"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|t
operator|.
name|add
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|vals
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertTrieContents
argument_list|(
name|t
argument_list|,
name|keys
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTrieContents
specifier|private
specifier|static
name|void
name|assertTrieContents
parameter_list|(
name|Trie
name|trie
parameter_list|,
name|String
name|keys
index|[]
parameter_list|,
name|String
name|vals
index|[]
parameter_list|)
block|{
name|Trie
index|[]
name|tries
init|=
operator|new
name|Trie
index|[]
block|{
name|trie
block|,
name|trie
operator|.
name|reduce
argument_list|(
operator|new
name|Optimizer
argument_list|()
argument_list|)
block|,
name|trie
operator|.
name|reduce
argument_list|(
operator|new
name|Optimizer2
argument_list|()
argument_list|)
block|,
name|trie
operator|.
name|reduce
argument_list|(
operator|new
name|Gener
argument_list|()
argument_list|)
block|,
name|trie
operator|.
name|reduce
argument_list|(
operator|new
name|Lift
argument_list|(
literal|true
argument_list|)
argument_list|)
block|,
name|trie
operator|.
name|reduce
argument_list|(
operator|new
name|Lift
argument_list|(
literal|false
argument_list|)
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|Trie
name|t
range|:
name|tries
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|vals
index|[
name|i
index|]
argument_list|,
name|t
operator|.
name|getFully
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|vals
index|[
name|i
index|]
argument_list|,
name|t
operator|.
name|getLastOnPath
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class
end_unit
