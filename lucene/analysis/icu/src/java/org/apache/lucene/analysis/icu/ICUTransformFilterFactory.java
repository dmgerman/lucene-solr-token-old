begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.analysis.icu
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|icu
package|;
end_package
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|AbstractAnalysisFactory
import|;
end_import
begin_comment
comment|// javadocs
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|MultiTermAwareComponent
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|TokenFilterFactory
import|;
end_import
begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|text
operator|.
name|Transliterator
import|;
end_import
begin_comment
comment|/**  * Factory for {@link ICUTransformFilter}.  *<p>  * Supports the following attributes:  *<ul>  *<li>id (mandatory): A Transliterator ID, one from {@link Transliterator#getAvailableIDs()}  *<li>direction (optional): Either 'forward' or 'reverse'. Default is forward.  *</ul>  * @see Transliterator  */
end_comment
begin_class
DECL|class|ICUTransformFilterFactory
specifier|public
class|class
name|ICUTransformFilterFactory
extends|extends
name|TokenFilterFactory
implements|implements
name|MultiTermAwareComponent
block|{
DECL|field|transliterator
specifier|private
specifier|final
name|Transliterator
name|transliterator
decl_stmt|;
comment|// TODO: add support for custom rules
comment|/** Creates a new ICUTransformFilterFactory */
DECL|method|ICUTransformFilterFactory
specifier|public
name|ICUTransformFilterFactory
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|require
argument_list|(
name|args
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|String
name|direction
init|=
name|get
argument_list|(
name|args
argument_list|,
literal|"direction"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"forward"
argument_list|,
literal|"reverse"
argument_list|)
argument_list|,
literal|"forward"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|dir
init|=
literal|"forward"
operator|.
name|equals
argument_list|(
name|direction
argument_list|)
condition|?
name|Transliterator
operator|.
name|FORWARD
else|:
name|Transliterator
operator|.
name|REVERSE
decl_stmt|;
name|transliterator
operator|=
name|Transliterator
operator|.
name|getInstance
argument_list|(
name|id
argument_list|,
name|dir
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|args
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown parameters: "
operator|+
name|args
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|create
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
return|return
operator|new
name|ICUTransformFilter
argument_list|(
name|input
argument_list|,
name|transliterator
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getMultiTermComponent
specifier|public
name|AbstractAnalysisFactory
name|getMultiTermComponent
parameter_list|()
block|{
return|return
name|this
return|;
block|}
block|}
end_class
end_unit
