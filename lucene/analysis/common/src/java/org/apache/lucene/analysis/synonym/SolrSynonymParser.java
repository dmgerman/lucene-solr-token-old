begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.synonym
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|synonym
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|LineNumberReader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CharsRef
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CharsRefBuilder
import|;
end_import
begin_comment
comment|/**  * Parser for the Solr synonyms format.  *<ol>  *<li> Blank lines and lines starting with '#' are comments.  *<li> Explicit mappings match any token sequence on the LHS of "=&gt;"  *        and replace with all alternatives on the RHS.  These types of mappings  *        ignore the expand parameter in the constructor.  *        Example:  *<blockquote>i-pod, i pod =&gt; ipod</blockquote>  *<li> Equivalent synonyms may be separated with commas and give  *        no explicit mapping.  In this case the mapping behavior will  *        be taken from the expand parameter in the constructor.  This allows  *        the same synonym file to be used in different synonym handling strategies.  *        Example:  *<blockquote>ipod, i-pod, i pod</blockquote>  *   *<li> Multiple synonym mapping entries are merged.  *        Example:  *<blockquote>  *         foo =&gt; foo bar<br>  *         foo =&gt; baz<br><br>  *         is equivalent to<br><br>  *         foo =&gt; foo bar, baz  *</blockquote>  *</ol>  * @lucene.experimental  */
end_comment
begin_class
DECL|class|SolrSynonymParser
specifier|public
class|class
name|SolrSynonymParser
extends|extends
name|SynonymMap
operator|.
name|Parser
block|{
DECL|field|expand
specifier|private
specifier|final
name|boolean
name|expand
decl_stmt|;
DECL|method|SolrSynonymParser
specifier|public
name|SolrSynonymParser
parameter_list|(
name|boolean
name|dedup
parameter_list|,
name|boolean
name|expand
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
block|{
name|super
argument_list|(
name|dedup
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|this
operator|.
name|expand
operator|=
name|expand
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parse
specifier|public
name|void
name|parse
parameter_list|(
name|Reader
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|LineNumberReader
name|br
init|=
operator|new
name|LineNumberReader
argument_list|(
name|in
argument_list|)
decl_stmt|;
try|try
block|{
name|addInternal
argument_list|(
name|br
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|ParseException
name|ex
init|=
operator|new
name|ParseException
argument_list|(
literal|"Invalid synonym rule at line "
operator|+
name|br
operator|.
name|getLineNumber
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ex
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
finally|finally
block|{
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addInternal
specifier|private
name|void
name|addInternal
parameter_list|(
name|BufferedReader
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|line
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'#'
condition|)
block|{
continue|continue;
comment|// ignore empty lines and comments
block|}
comment|// TODO: we could process this more efficiently.
name|String
name|sides
index|[]
init|=
name|split
argument_list|(
name|line
argument_list|,
literal|"=>"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sides
operator|.
name|length
operator|>
literal|1
condition|)
block|{
comment|// explicit mapping
if|if
condition|(
name|sides
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"more than one explicit mapping specified on the same line"
argument_list|)
throw|;
block|}
name|String
name|inputStrings
index|[]
init|=
name|split
argument_list|(
name|sides
index|[
literal|0
index|]
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|CharsRef
index|[]
name|inputs
init|=
operator|new
name|CharsRef
index|[
name|inputStrings
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|inputs
index|[
name|i
index|]
operator|=
name|analyze
argument_list|(
name|unescape
argument_list|(
name|inputStrings
index|[
name|i
index|]
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|,
operator|new
name|CharsRefBuilder
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|outputStrings
index|[]
init|=
name|split
argument_list|(
name|sides
index|[
literal|1
index|]
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|CharsRef
index|[]
name|outputs
init|=
operator|new
name|CharsRef
index|[
name|outputStrings
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|outputs
index|[
name|i
index|]
operator|=
name|analyze
argument_list|(
name|unescape
argument_list|(
name|outputStrings
index|[
name|i
index|]
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|,
operator|new
name|CharsRefBuilder
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// these mappings are explicit and never preserve original
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|outputs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|add
argument_list|(
name|inputs
index|[
name|i
index|]
argument_list|,
name|outputs
index|[
name|j
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|String
name|inputStrings
index|[]
init|=
name|split
argument_list|(
name|line
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|CharsRef
index|[]
name|inputs
init|=
operator|new
name|CharsRef
index|[
name|inputStrings
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|inputs
index|[
name|i
index|]
operator|=
name|analyze
argument_list|(
name|unescape
argument_list|(
name|inputStrings
index|[
name|i
index|]
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|,
operator|new
name|CharsRefBuilder
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expand
condition|)
block|{
comment|// all pairs
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|inputs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
name|j
condition|)
block|{
name|add
argument_list|(
name|inputs
index|[
name|i
index|]
argument_list|,
name|inputs
index|[
name|j
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// all subsequent inputs map to first one; we also add inputs[0] here
comment|// so that we "effectively" (because we remove the original input and
comment|// add back a synonym with the same text) change that token's type to
comment|// SYNONYM (matching legacy behavior):
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|add
argument_list|(
name|inputs
index|[
name|i
index|]
argument_list|,
name|inputs
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|split
specifier|private
specifier|static
name|String
index|[]
name|split
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|separator
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|,
name|end
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|end
condition|)
block|{
if|if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
name|separator
argument_list|,
name|pos
argument_list|)
condition|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
name|pos
operator|+=
name|separator
operator|.
name|length
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|char
name|ch
init|=
name|s
operator|.
name|charAt
argument_list|(
name|pos
operator|++
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'\\'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
if|if
condition|(
name|pos
operator|>=
name|end
condition|)
break|break;
comment|// ERROR, or let it go?
name|ch
operator|=
name|s
operator|.
name|charAt
argument_list|(
name|pos
operator|++
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|unescape
specifier|private
name|String
name|unescape
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|indexOf
argument_list|(
literal|"\\"
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'\\'
operator|&&
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
operator|++
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
name|s
return|;
block|}
block|}
end_class
end_unit
