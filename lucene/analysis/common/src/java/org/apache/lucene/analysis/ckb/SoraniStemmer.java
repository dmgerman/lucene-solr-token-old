begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.ckb
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|ckb
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|StemmerUtil
operator|.
name|endsWith
import|;
end_import
begin_comment
comment|/**  * Light stemmer for Sorani  */
end_comment
begin_class
DECL|class|SoraniStemmer
specifier|public
class|class
name|SoraniStemmer
block|{
comment|/**    * Stem an input buffer of Sorani text.    *     * @param s input buffer    * @param len length of input buffer    * @return length of input buffer after normalization    */
DECL|method|stem
specifier|public
name|int
name|stem
parameter_list|(
name|char
name|s
index|[]
parameter_list|,
name|int
name|len
parameter_list|)
block|{
comment|// postposition
if|if
condition|(
name|len
operator|>
literal|5
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Ø¯Ø§"
argument_list|)
condition|)
block|{
name|len
operator|-=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|len
operator|>
literal|4
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÙØ§"
argument_list|)
condition|)
block|{
name|len
operator|--
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|len
operator|>
literal|6
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÛÙÛ"
argument_list|)
condition|)
block|{
name|len
operator|-=
literal|3
expr_stmt|;
block|}
comment|// possessive pronoun
if|if
condition|(
name|len
operator|>
literal|6
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÙØ§Ù"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÛØ§Ù"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ØªØ§Ù"
argument_list|)
operator|)
condition|)
block|{
name|len
operator|-=
literal|3
expr_stmt|;
block|}
comment|// indefinite singular ezafe
if|if
condition|(
name|len
operator|>
literal|6
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÛÚ©Û"
argument_list|)
condition|)
block|{
return|return
name|len
operator|-
literal|3
return|;
block|}
elseif|else
if|if
condition|(
name|len
operator|>
literal|7
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÛÛÚ©Û"
argument_list|)
condition|)
block|{
return|return
name|len
operator|-
literal|4
return|;
block|}
comment|// indefinite singular
if|if
condition|(
name|len
operator|>
literal|5
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÛÚ©"
argument_list|)
condition|)
block|{
return|return
name|len
operator|-
literal|2
return|;
block|}
elseif|else
if|if
condition|(
name|len
operator|>
literal|6
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÛÛÚ©"
argument_list|)
condition|)
block|{
return|return
name|len
operator|-
literal|3
return|;
block|}
comment|// definite singular
elseif|else
if|if
condition|(
name|len
operator|>
literal|6
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÛÚ©Û"
argument_list|)
condition|)
block|{
return|return
name|len
operator|-
literal|3
return|;
block|}
elseif|else
if|if
condition|(
name|len
operator|>
literal|5
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Ú©Û"
argument_list|)
condition|)
block|{
return|return
name|len
operator|-
literal|2
return|;
block|}
comment|// definite plural
elseif|else
if|if
condition|(
name|len
operator|>
literal|7
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÛÚ©Ø§Ù"
argument_list|)
condition|)
block|{
return|return
name|len
operator|-
literal|4
return|;
block|}
elseif|else
if|if
condition|(
name|len
operator|>
literal|6
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Ú©Ø§Ù"
argument_list|)
condition|)
block|{
return|return
name|len
operator|-
literal|3
return|;
block|}
comment|// indefinite plural ezafe
elseif|else
if|if
condition|(
name|len
operator|>
literal|7
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÛØ§ÙÛ"
argument_list|)
condition|)
block|{
return|return
name|len
operator|-
literal|4
return|;
block|}
elseif|else
if|if
condition|(
name|len
operator|>
literal|6
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Ø§ÙÛ"
argument_list|)
condition|)
block|{
return|return
name|len
operator|-
literal|3
return|;
block|}
comment|// indefinite plural
elseif|else
if|if
condition|(
name|len
operator|>
literal|6
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÛØ§Ù"
argument_list|)
condition|)
block|{
return|return
name|len
operator|-
literal|3
return|;
block|}
elseif|else
if|if
condition|(
name|len
operator|>
literal|5
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Ø§Ù"
argument_list|)
condition|)
block|{
return|return
name|len
operator|-
literal|2
return|;
block|}
comment|// demonstrative plural
elseif|else
if|if
condition|(
name|len
operator|>
literal|7
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÛØ§ÙÛ"
argument_list|)
condition|)
block|{
return|return
name|len
operator|-
literal|4
return|;
block|}
elseif|else
if|if
condition|(
name|len
operator|>
literal|6
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Ø§ÙÛ"
argument_list|)
condition|)
block|{
return|return
name|len
operator|-
literal|3
return|;
block|}
comment|// demonstrative singular
elseif|else
if|if
condition|(
name|len
operator|>
literal|5
operator|&&
operator|(
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Ø§ÛÛ"
argument_list|)
operator|||
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"ÛÛÛ"
argument_list|)
operator|)
condition|)
block|{
return|return
name|len
operator|-
literal|2
return|;
block|}
elseif|else
if|if
condition|(
name|len
operator|>
literal|4
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Û"
argument_list|)
condition|)
block|{
return|return
name|len
operator|-
literal|1
return|;
block|}
comment|// absolute singular ezafe
elseif|else
if|if
condition|(
name|len
operator|>
literal|4
operator|&&
name|endsWith
argument_list|(
name|s
argument_list|,
name|len
argument_list|,
literal|"Û"
argument_list|)
condition|)
block|{
return|return
name|len
operator|-
literal|1
return|;
block|}
return|return
name|len
return|;
block|}
block|}
end_class
end_unit
