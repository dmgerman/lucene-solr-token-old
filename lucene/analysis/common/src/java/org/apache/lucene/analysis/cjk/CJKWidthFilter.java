begin_unit
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_package
DECL|package|org.apache.lucene.analysis.cjk
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|cjk
package|;
end_package
begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|StemmerUtil
import|;
end_import
begin_comment
comment|/**  * A {@link TokenFilter} that normalizes CJK width differences:  *<ul>  *<li>Folds fullwidth ASCII variants into the equivalent basic latin  *<li>Folds halfwidth Katakana variants into the equivalent kana  *</ul>  *<p>  * NOTE: this filter can be viewed as a (practical) subset of NFKC/NFKD  * Unicode normalization. See the normalization support in the ICU package  * for full normalization.  */
end_comment
begin_class
DECL|class|CJKWidthFilter
specifier|public
specifier|final
class|class
name|CJKWidthFilter
extends|extends
name|TokenFilter
block|{
DECL|field|termAtt
specifier|private
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/* halfwidth kana mappings: 0xFF65-0xFF9D     *    * note: 0xFF9C and 0xFF9D are only mapped to 0x3099 and 0x309A    * as a fallback when they cannot properly combine with a preceding     * character into a composed form.    */
DECL|field|KANA_NORM
specifier|private
specifier|static
specifier|final
name|char
name|KANA_NORM
index|[]
init|=
operator|new
name|char
index|[]
block|{
literal|0x30fb
block|,
literal|0x30f2
block|,
literal|0x30a1
block|,
literal|0x30a3
block|,
literal|0x30a5
block|,
literal|0x30a7
block|,
literal|0x30a9
block|,
literal|0x30e3
block|,
literal|0x30e5
block|,
literal|0x30e7
block|,
literal|0x30c3
block|,
literal|0x30fc
block|,
literal|0x30a2
block|,
literal|0x30a4
block|,
literal|0x30a6
block|,
literal|0x30a8
block|,
literal|0x30aa
block|,
literal|0x30ab
block|,
literal|0x30ad
block|,
literal|0x30af
block|,
literal|0x30b1
block|,
literal|0x30b3
block|,
literal|0x30b5
block|,
literal|0x30b7
block|,
literal|0x30b9
block|,
literal|0x30bb
block|,
literal|0x30bd
block|,
literal|0x30bf
block|,
literal|0x30c1
block|,
literal|0x30c4
block|,
literal|0x30c6
block|,
literal|0x30c8
block|,
literal|0x30ca
block|,
literal|0x30cb
block|,
literal|0x30cc
block|,
literal|0x30cd
block|,
literal|0x30ce
block|,
literal|0x30cf
block|,
literal|0x30d2
block|,
literal|0x30d5
block|,
literal|0x30d8
block|,
literal|0x30db
block|,
literal|0x30de
block|,
literal|0x30df
block|,
literal|0x30e0
block|,
literal|0x30e1
block|,
literal|0x30e2
block|,
literal|0x30e4
block|,
literal|0x30e6
block|,
literal|0x30e8
block|,
literal|0x30e9
block|,
literal|0x30ea
block|,
literal|0x30eb
block|,
literal|0x30ec
block|,
literal|0x30ed
block|,
literal|0x30ef
block|,
literal|0x30f3
block|,
literal|0x3099
block|,
literal|0x309A
block|}
decl_stmt|;
DECL|method|CJKWidthFilter
specifier|public
name|CJKWidthFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|input
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|char
name|text
index|[]
init|=
name|termAtt
operator|.
name|buffer
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|termAtt
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|char
name|ch
init|=
name|text
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|ch
operator|>=
literal|0xFF01
operator|&&
name|ch
operator|<=
literal|0xFF5E
condition|)
block|{
comment|// Fullwidth ASCII variants
name|text
index|[
name|i
index|]
operator|-=
literal|0xFEE0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|>=
literal|0xFF65
operator|&&
name|ch
operator|<=
literal|0xFF9F
condition|)
block|{
comment|// Halfwidth Katakana variants
if|if
condition|(
operator|(
name|ch
operator|==
literal|0xFF9E
operator|||
name|ch
operator|==
literal|0xFF9F
operator|)
operator|&&
name|i
operator|>
literal|0
operator|&&
name|combine
argument_list|(
name|text
argument_list|,
name|i
argument_list|,
name|ch
argument_list|)
condition|)
block|{
name|length
operator|=
name|StemmerUtil
operator|.
name|delete
argument_list|(
name|text
argument_list|,
name|i
operator|--
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|text
index|[
name|i
index|]
operator|=
name|KANA_NORM
index|[
name|ch
operator|-
literal|0xFF65
index|]
expr_stmt|;
block|}
block|}
block|}
name|termAtt
operator|.
name|setLength
argument_list|(
name|length
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/* kana combining diffs: 0x30A6-0x30FD */
DECL|field|KANA_COMBINE_VOICED
specifier|private
specifier|static
specifier|final
name|byte
name|KANA_COMBINE_VOICED
index|[]
init|=
operator|new
name|byte
index|[]
block|{
literal|78
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|}
decl_stmt|;
DECL|field|KANA_COMBINE_HALF_VOICED
specifier|private
specifier|static
specifier|final
name|byte
name|KANA_COMBINE_HALF_VOICED
index|[]
init|=
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
comment|/** returns true if we successfully combined the voice mark */
DECL|method|combine
specifier|private
specifier|static
name|boolean
name|combine
parameter_list|(
name|char
name|text
index|[]
parameter_list|,
name|int
name|pos
parameter_list|,
name|char
name|ch
parameter_list|)
block|{
specifier|final
name|char
name|prev
init|=
name|text
index|[
name|pos
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|prev
operator|>=
literal|0x30A6
operator|&&
name|prev
operator|<=
literal|0x30FD
condition|)
block|{
name|text
index|[
name|pos
operator|-
literal|1
index|]
operator|+=
operator|(
name|ch
operator|==
literal|0xFF9F
operator|)
condition|?
name|KANA_COMBINE_HALF_VOICED
index|[
name|prev
operator|-
literal|0x30A6
index|]
else|:
name|KANA_COMBINE_VOICED
index|[
name|prev
operator|-
literal|0x30A6
index|]
expr_stmt|;
return|return
name|text
index|[
name|pos
operator|-
literal|1
index|]
operator|!=
name|prev
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class
end_unit
