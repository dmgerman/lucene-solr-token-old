begin_unit
begin_package
DECL|package|org.apache.lucene.analysis.th
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|th
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|java
operator|.
name|text
operator|.
name|BreakIterator
import|;
end_import
begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|CharArrayIterator
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|SegmentingTokenizerBase
import|;
end_import
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeFactory
import|;
end_import
begin_comment
comment|/**  * Tokenizer that use {@link BreakIterator} to tokenize Thai text.  *<p>WARNING: this tokenizer may not be supported by all JREs.  *    It is known to work with Sun/Oracle and Harmony JREs.  *    If your application needs to be fully portable, consider using ICUTokenizer instead,  *    which uses an ICU Thai BreakIterator that will always be available.  */
end_comment
begin_class
DECL|class|ThaiTokenizer
specifier|public
class|class
name|ThaiTokenizer
extends|extends
name|SegmentingTokenizerBase
block|{
comment|/**     * True if the JRE supports a working dictionary-based breakiterator for Thai.    * If this is false, this tokenizer will not work at all!    */
DECL|field|DBBI_AVAILABLE
specifier|public
specifier|static
specifier|final
name|boolean
name|DBBI_AVAILABLE
decl_stmt|;
DECL|field|proto
specifier|private
specifier|static
specifier|final
name|BreakIterator
name|proto
init|=
name|BreakIterator
operator|.
name|getWordInstance
argument_list|(
operator|new
name|Locale
argument_list|(
literal|"th"
argument_list|)
argument_list|)
decl_stmt|;
static|static
block|{
comment|// check that we have a working dictionary-based break iterator for thai
name|proto
operator|.
name|setText
argument_list|(
literal|"à¸ à¸²à¸©à¸²à¹à¸à¸¢"
argument_list|)
expr_stmt|;
name|DBBI_AVAILABLE
operator|=
name|proto
operator|.
name|isBoundary
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
comment|/** used for breaking the text into sentences */
DECL|field|sentenceProto
specifier|private
specifier|static
specifier|final
name|BreakIterator
name|sentenceProto
init|=
name|BreakIterator
operator|.
name|getSentenceInstance
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
DECL|field|wordBreaker
specifier|private
specifier|final
name|BreakIterator
name|wordBreaker
decl_stmt|;
DECL|field|wrapper
specifier|private
specifier|final
name|CharArrayIterator
name|wrapper
init|=
name|CharArrayIterator
operator|.
name|newWordInstance
argument_list|()
decl_stmt|;
DECL|field|sentenceStart
name|int
name|sentenceStart
decl_stmt|;
DECL|field|sentenceEnd
name|int
name|sentenceEnd
decl_stmt|;
DECL|field|termAtt
specifier|private
specifier|final
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|offsetAtt
specifier|private
specifier|final
name|OffsetAttribute
name|offsetAtt
init|=
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Creates a new ThaiTokenizer */
DECL|method|ThaiTokenizer
specifier|public
name|ThaiTokenizer
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_TOKEN_ATTRIBUTE_FACTORY
argument_list|)
expr_stmt|;
block|}
comment|/** Creates a new ThaiTokenizer, supplying the AttributeFactory */
DECL|method|ThaiTokenizer
specifier|public
name|ThaiTokenizer
parameter_list|(
name|AttributeFactory
name|factory
parameter_list|)
block|{
name|super
argument_list|(
name|factory
argument_list|,
operator|(
name|BreakIterator
operator|)
name|sentenceProto
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|DBBI_AVAILABLE
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This JRE does not have support for Thai segmentation"
argument_list|)
throw|;
block|}
name|wordBreaker
operator|=
operator|(
name|BreakIterator
operator|)
name|proto
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextSentence
specifier|protected
name|void
name|setNextSentence
parameter_list|(
name|int
name|sentenceStart
parameter_list|,
name|int
name|sentenceEnd
parameter_list|)
block|{
name|this
operator|.
name|sentenceStart
operator|=
name|sentenceStart
expr_stmt|;
name|this
operator|.
name|sentenceEnd
operator|=
name|sentenceEnd
expr_stmt|;
name|wrapper
operator|.
name|setText
argument_list|(
name|buffer
argument_list|,
name|sentenceStart
argument_list|,
name|sentenceEnd
operator|-
name|sentenceStart
argument_list|)
expr_stmt|;
name|wordBreaker
operator|.
name|setText
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementWord
specifier|protected
name|boolean
name|incrementWord
parameter_list|()
block|{
name|int
name|start
init|=
name|wordBreaker
operator|.
name|current
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|==
name|BreakIterator
operator|.
name|DONE
condition|)
block|{
return|return
literal|false
return|;
comment|// BreakIterator exhausted
block|}
comment|// find the next set of boundaries, skipping over non-tokens
name|int
name|end
init|=
name|wordBreaker
operator|.
name|next
argument_list|()
decl_stmt|;
while|while
condition|(
name|end
operator|!=
name|BreakIterator
operator|.
name|DONE
operator|&&
operator|!
name|Character
operator|.
name|isLetterOrDigit
argument_list|(
name|Character
operator|.
name|codePointAt
argument_list|(
name|buffer
argument_list|,
name|sentenceStart
operator|+
name|start
argument_list|,
name|sentenceEnd
argument_list|)
argument_list|)
condition|)
block|{
name|start
operator|=
name|end
expr_stmt|;
name|end
operator|=
name|wordBreaker
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|end
operator|==
name|BreakIterator
operator|.
name|DONE
condition|)
block|{
return|return
literal|false
return|;
comment|// BreakIterator exhausted
block|}
name|clearAttributes
argument_list|()
expr_stmt|;
name|termAtt
operator|.
name|copyBuffer
argument_list|(
name|buffer
argument_list|,
name|sentenceStart
operator|+
name|start
argument_list|,
name|end
operator|-
name|start
argument_list|)
expr_stmt|;
name|offsetAtt
operator|.
name|setOffset
argument_list|(
name|correctOffset
argument_list|(
name|offset
operator|+
name|sentenceStart
operator|+
name|start
argument_list|)
argument_list|,
name|correctOffset
argument_list|(
name|offset
operator|+
name|sentenceStart
operator|+
name|end
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class
end_unit
