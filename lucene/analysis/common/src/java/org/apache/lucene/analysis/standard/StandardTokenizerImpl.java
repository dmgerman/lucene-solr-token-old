begin_unit
begin_comment
comment|/* The following code was generated by JFlex 1.5.0-SNAPSHOT */
end_comment
begin_package
DECL|package|org.apache.lucene.analysis.standard
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
package|;
end_package
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment
begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import
begin_comment
comment|/**  * This class implements Word Break rules from the Unicode Text Segmentation   * algorithm, as specified in   *<a href="http://unicode.org/reports/tr29/">Unicode Standard Annex #29</a>.   *<p/>  * Tokens produced are of the following types:  *<ul>  *<li>&lt;ALPHANUM&gt;: A sequence of alphabetic and numeric characters</li>  *<li>&lt;NUM&gt;: A number</li>  *<li>&lt;SOUTHEAST_ASIAN&gt;: A sequence of characters from South and Southeast  *       Asian languages, including Thai, Lao, Myanmar, and Khmer</li>  *<li>&lt;IDEOGRAPHIC&gt;: A single CJKV ideographic character</li>  *<li>&lt;HIRAGANA&gt;: A single hiragana character</li>  *<li>&lt;KATAKANA&gt;: A sequence of katakana characters</li>  *<li>&lt;HANGUL&gt;: A sequence of Hangul characters</li>  *</ul>  */
end_comment
begin_class
DECL|class|StandardTokenizerImpl
specifier|public
specifier|final
class|class
name|StandardTokenizerImpl
implements|implements
name|StandardTokenizerInterface
block|{
comment|/** This character denotes the end of file */
DECL|field|YYEOF
specifier|public
specifier|static
specifier|final
name|int
name|YYEOF
init|=
operator|-
literal|1
decl_stmt|;
comment|/** initial size of the lookahead buffer */
DECL|field|ZZ_BUFFERSIZE
specifier|private
specifier|static
specifier|final
name|int
name|ZZ_BUFFERSIZE
init|=
literal|4096
decl_stmt|;
comment|/** lexical states */
DECL|field|YYINITIAL
specifier|public
specifier|static
specifier|final
name|int
name|YYINITIAL
init|=
literal|0
decl_stmt|;
comment|/**    * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l    * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l    *                  at the beginning of a line    * l is of the form l = 2*k, k a non negative integer    */
DECL|field|ZZ_LEXSTATE
specifier|private
specifier|static
specifier|final
name|int
name|ZZ_LEXSTATE
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|}
decl_stmt|;
comment|/**     * Translates characters to character classes    */
DECL|field|ZZ_CMAP_PACKED
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_CMAP_PACKED
init|=
literal|"\42\0\1\213\4\0\1\212\4\0\1\203\1\0\1\204\1\0\12\200"
operator|+
literal|"\1\202\1\203\5\0\32\176\4\0\1\205\1\0\32\176\57\0\1\176"
operator|+
literal|"\2\0\1\177\7\0\1\176\1\0\1\202\2\0\1\176\5\0\27\176"
operator|+
literal|"\1\0\37\176\1\0\u01ca\176\4\0\14\176\5\0\1\202\10\0\5\176"
operator|+
literal|"\7\0\1\176\1\0\1\176\21\0\160\177\5\176\1\0\2\176\2\0"
operator|+
literal|"\4\176\1\203\7\0\1\176\1\202\3\176\1\0\1\176\1\0\24\176"
operator|+
literal|"\1\0\123\176\1\0\213\176\1\0\7\177\236\176\11\0\46\176\2\0"
operator|+
literal|"\1\176\7\0\47\176\1\0\1\203\7\0\55\177\1\0\1\177\1\0"
operator|+
literal|"\2\177\1\0\2\177\1\0\1\177\10\0\33\214\5\0\3\214\1\176"
operator|+
literal|"\1\202\13\0\5\177\7\0\2\203\2\0\13\177\1\0\1\177\3\0"
operator|+
literal|"\53\176\25\177\12\200\1\0\1\200\1\203\1\0\2\176\1\177\143\176"
operator|+
literal|"\1\0\1\176\7\177\1\177\1\0\6\177\2\176\2\177\1\0\4\177"
operator|+
literal|"\2\176\12\200\3\176\2\0\1\176\17\0\1\177\1\176\1\177\36\176"
operator|+
literal|"\33\177\2\0\131\176\13\177\1\176\16\0\12\200\41\176\11\177\2\176"
operator|+
literal|"\2\0\1\203\1\0\1\176\5\0\26\176\4\177\1\176\11\177\1\176"
operator|+
literal|"\3\177\1\176\5\177\22\0\31\176\3\177\104\0\1\176\1\0\13\176"
operator|+
literal|"\67\0\33\177\1\0\4\177\66\176\3\177\1\176\22\177\1\176\7\177"
operator|+
literal|"\12\176\2\177\2\0\12\200\1\0\7\176\1\0\7\176\1\0\3\177"
operator|+
literal|"\1\0\10\176\2\0\2\176\2\0\26\176\1\0\7\176\1\0\1\176"
operator|+
literal|"\3\0\4\176\2\0\1\177\1\176\7\177\2\0\2\177\2\0\3\177"
operator|+
literal|"\1\176\10\0\1\177\4\0\2\176\1\0\3\176\2\177\2\0\12\200"
operator|+
literal|"\2\176\17\0\3\177\1\0\6\176\4\0\2\176\2\0\26\176\1\0"
operator|+
literal|"\7\176\1\0\2\176\1\0\2\176\1\0\2\176\2\0\1\177\1\0"
operator|+
literal|"\5\177\4\0\2\177\2\0\3\177\3\0\1\177\7\0\4\176\1\0"
operator|+
literal|"\1\176\7\0\12\200\2\177\3\176\1\177\13\0\3\177\1\0\11\176"
operator|+
literal|"\1\0\3\176\1\0\26\176\1\0\7\176\1\0\2\176\1\0\5\176"
operator|+
literal|"\2\0\1\177\1\176\10\177\1\0\3\177\1\0\3\177\2\0\1\176"
operator|+
literal|"\17\0\2\176\2\177\2\0\12\200\21\0\3\177\1\0\10\176\2\0"
operator|+
literal|"\2\176\2\0\26\176\1\0\7\176\1\0\2\176\1\0\5\176\2\0"
operator|+
literal|"\1\177\1\176\7\177\2\0\2\177\2\0\3\177\10\0\2\177\4\0"
operator|+
literal|"\2\176\1\0\3\176\2\177\2\0\12\200\1\0\1\176\20\0\1\177"
operator|+
literal|"\1\176\1\0\6\176\3\0\3\176\1\0\4\176\3\0\2\176\1\0"
operator|+
literal|"\1\176\1\0\2\176\3\0\2\176\3\0\3\176\3\0\14\176\4\0"
operator|+
literal|"\5\177\3\0\3\177\1\0\4\177\2\0\1\176\6\0\1\177\16\0"
operator|+
literal|"\12\200\21\0\3\177\1\0\10\176\1\0\3\176\1\0\27\176\1\0"
operator|+
literal|"\12\176\1\0\5\176\3\0\1\176\7\177\1\0\3\177\1\0\4\177"
operator|+
literal|"\7\0\2\177\1\0\2\176\6\0\2\176\2\177\2\0\12\200\22\0"
operator|+
literal|"\2\177\1\0\10\176\1\0\3\176\1\0\27\176\1\0\12\176\1\0"
operator|+
literal|"\5\176\2\0\1\177\1\176\7\177\1\0\3\177\1\0\4\177\7\0"
operator|+
literal|"\2\177\7\0\1\176\1\0\2\176\2\177\2\0\12\200\1\0\2\176"
operator|+
literal|"\17\0\2\177\1\0\10\176\1\0\3\176\1\0\51\176\2\0\1\176"
operator|+
literal|"\7\177\1\0\3\177\1\0\4\177\1\176\10\0\1\177\10\0\2\176"
operator|+
literal|"\2\177\2\0\12\200\12\0\6\176\2\0\2\177\1\0\22\176\3\0"
operator|+
literal|"\30\176\1\0\11\176\1\0\1\176\2\0\7\176\3\0\1\177\4\0"
operator|+
literal|"\6\177\1\0\1\177\1\0\10\177\22\0\2\177\15\0\60\206\1\207"
operator|+
literal|"\2\206\7\207\5\0\7\206\10\207\1\0\12\200\47\0\2\206\1\0"
operator|+
literal|"\1\206\2\0\2\206\1\0\1\206\2\0\1\206\6\0\4\206\1\0"
operator|+
literal|"\7\206\1\0\3\206\1\0\1\206\1\0\1\206\2\0\2\206\1\0"
operator|+
literal|"\4\206\1\207\2\206\6\207\1\0\2\207\1\206\2\0\5\206\1\0"
operator|+
literal|"\1\206\1\0\6\207\2\0\12\200\2\0\4\206\40\0\1\176\27\0"
operator|+
literal|"\2\177\6\0\12\200\13\0\1\177\1\0\1\177\1\0\1\177\4\0"
operator|+
literal|"\2\177\10\176\1\0\44\176\4\0\24\177\1\0\2\177\5\176\13\177"
operator|+
literal|"\1\0\44\177\11\0\1\177\71\0\53\206\24\207\1\206\12\200\6\0"
operator|+
literal|"\6\206\4\207\4\206\3\207\1\206\3\207\2\206\7\207\3\206\4\207"
operator|+
literal|"\15\206\14\207\1\206\1\207\12\200\4\207\2\206\46\176\1\0\1\176"
operator|+
literal|"\5\0\1\176\2\0\53\176\1\0\4\176\u0100\215\111\176\1\0\4\176"
operator|+
literal|"\2\0\7\176\1\0\1\176\1\0\4\176\2\0\51\176\1\0\4\176"
operator|+
literal|"\2\0\41\176\1\0\4\176\2\0\7\176\1\0\1\176\1\0\4\176"
operator|+
literal|"\2\0\17\176\1\0\71\176\1\0\4\176\2\0\103\176\2\0\3\177"
operator|+
literal|"\40\0\20\176\20\0\125\176\14\0\u026c\176\2\0\21\176\1\0\32\176"
operator|+
literal|"\5\0\113\176\3\0\3\176\17\0\15\176\1\0\4\176\3\177\13\0"
operator|+
literal|"\22\176\3\177\13\0\22\176\2\177\14\0\15\176\1\0\3\176\1\0"
operator|+
literal|"\2\177\14\0\64\206\40\207\3\0\1\206\4\0\1\206\1\207\2\0"
operator|+
literal|"\12\200\41\0\3\177\1\177\1\0\12\200\6\0\130\176\10\0\51\176"
operator|+
literal|"\1\177\1\176\5\0\106\176\12\0\35\176\3\0\14\177\4\0\14\177"
operator|+
literal|"\12\0\12\200\36\206\2\0\5\206\13\0\54\206\4\0\21\207\7\206"
operator|+
literal|"\2\207\6\0\12\200\1\206\3\0\2\206\40\0\27\176\5\177\4\0"
operator|+
literal|"\65\206\12\207\1\0\35\207\2\0\1\177\12\200\6\0\12\200\6\0"
operator|+
literal|"\16\206\122\0\5\177\57\176\21\177\7\176\4\0\12\200\21\0\11\177"
operator|+
literal|"\14\0\3\177\36\176\15\177\2\176\12\200\54\176\16\177\14\0\44\176"
operator|+
literal|"\24\177\10\0\12\200\3\0\3\176\12\200\44\176\122\0\3\177\1\0"
operator|+
literal|"\25\177\4\176\1\177\4\176\3\177\2\176\11\0\300\176\47\177\25\0"
operator|+
literal|"\4\177\u0116\176\2\0\6\176\2\0\46\176\2\0\6\176\2\0\10\176"
operator|+
literal|"\1\0\1\176\1\0\1\176\1\0\1\176\1\0\37\176\2\0\65\176"
operator|+
literal|"\1\0\7\176\1\0\1\176\3\0\3\176\1\0\7\176\3\0\4\176"
operator|+
literal|"\2\0\6\176\4\0\15\176\5\0\3\176\1\0\7\176\17\0\2\177"
operator|+
literal|"\2\177\10\0\2\204\12\0\1\204\2\0\1\202\2\0\5\177\20\0"
operator|+
literal|"\2\205\3\0\1\203\17\0\1\205\13\0\5\177\1\0\12\177\1\0"
operator|+
literal|"\1\176\15\0\1\176\20\0\15\176\63\0\41\177\21\0\1\176\4\0"
operator|+
literal|"\1\176\2\0\12\176\1\0\1\176\3\0\5\176\6\0\1\176\1\0"
operator|+
literal|"\1\176\1\0\1\176\1\0\4\176\1\0\13\176\2\0\4\176\5\0"
operator|+
literal|"\5\176\4\0\1\176\21\0\51\176\u032d\0\64\176\u0716\0\57\176\1\0"
operator|+
literal|"\57\176\1\0\205\176\6\0\4\176\3\177\2\176\14\0\46\176\1\0"
operator|+
literal|"\1\176\5\0\1\176\2\0\70\176\7\0\1\176\17\0\1\177\27\176"
operator|+
literal|"\11\0\7\176\1\0\7\176\1\0\7\176\1\0\7\176\1\0\7\176"
operator|+
literal|"\1\0\7\176\1\0\7\176\1\0\7\176\1\0\40\177\57\0\1\176"
operator|+
literal|"\120\0\32\210\1\0\131\210\14\0\326\210\57\0\1\176\1\0\1\210"
operator|+
literal|"\31\0\11\210\6\177\1\0\5\201\2\0\3\210\1\176\1\176\4\0"
operator|+
literal|"\126\211\2\0\2\177\2\201\3\211\133\201\1\0\4\201\5\0\51\176"
operator|+
literal|"\3\0\136\215\21\0\33\176\65\0\20\201\320\0\57\201\1\0\130\201"
operator|+
literal|"\250\0\u19b6\210\112\0\u51cd\210\63\0\u048d\176\103\0\56\176\2\0\u010d\176"
operator|+
literal|"\3\0\20\176\12\200\2\176\24\0\57\176\4\177\1\0\12\177\1\0"
operator|+
literal|"\31\176\7\0\1\177\120\176\2\177\45\0\11\176\2\0\147\176\2\0"
operator|+
literal|"\4\176\1\0\4\176\14\0\13\176\115\0\12\176\1\177\3\176\1\177"
operator|+
literal|"\4\176\1\177\27\176\5\177\30\0\64\176\14\0\2\177\62\176\21\177"
operator|+
literal|"\13\0\12\200\6\0\22\177\6\176\3\0\1\176\4\0\12\200\34\176"
operator|+
literal|"\10\177\2\0\27\176\15\177\14\0\35\215\3\0\4\177\57\176\16\177"
operator|+
literal|"\16\0\1\176\12\200\46\0\51\176\16\177\11\0\3\176\1\177\10\176"
operator|+
literal|"\2\177\2\0\12\200\6\0\33\206\1\207\4\0\60\206\1\207\1\206"
operator|+
literal|"\3\207\2\206\2\207\5\206\2\207\1\206\1\207\1\206\30\0\5\206"
operator|+
literal|"\13\176\5\177\2\0\3\176\2\177\12\0\6\176\2\0\6\176\2\0"
operator|+
literal|"\6\176\11\0\7\176\1\0\7\176\221\0\43\176\10\177\1\0\2\177"
operator|+
literal|"\2\0\12\200\6\0\u2ba4\215\14\0\27\215\4\0\61\215\4\0\1\44"
operator|+
literal|"\1\40\1\67\1\64\1\33\1\30\2\0\1\24\1\21\2\0\1\17"
operator|+
literal|"\1\15\14\0\1\3\1\6\20\0\1\156\7\0\1\111\1\10\5\0"
operator|+
literal|"\1\1\1\172\3\0\1\163\1\163\1\163\1\163\1\163\1\163\1\163"
operator|+
literal|"\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163"
operator|+
literal|"\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163"
operator|+
literal|"\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163\1\163"
operator|+
literal|"\1\163\1\163\1\163\1\163\1\164\1\163\1\163\1\163\1\170\1\166"
operator|+
literal|"\17\0\1\160\u02c1\0\1\114\277\0\1\157\1\115\1\16\3\167\2\62"
operator|+
literal|"\1\167\1\62\2\167\1\36\21\167\2\106\7\117\1\116\7\117\7\102"
operator|+
literal|"\1\37\1\102\1\140\2\66\1\65\1\140\1\66\1\65\10\140\2\107"
operator|+
literal|"\5\103\2\75\5\103\1\22\10\53\5\23\3\41\12\122\20\41\3\63"
operator|+
literal|"\32\43\1\42\2\61\2\126\1\127\2\126\2\127\2\126\1\127\3\61"
operator|+
literal|"\1\60\2\61\12\110\1\136\1\50\1\45\1\110\6\50\1\45\13\50"
operator|+
literal|"\31\61\7\50\12\123\1\50\5\13\3\137\3\101\1\100\4\101\2\100"
operator|+
literal|"\10\101\1\100\7\35\1\34\2\35\7\101\16\137\1\151\4\124\1\4"
operator|+
literal|"\4\121\1\4\5\150\1\147\1\150\3\147\7\150\1\147\23\150\5\113"
operator|+
literal|"\3\150\6\113\2\113\6\112\5\112\3\144\2\101\7\143\36\101\4\143"
operator|+
literal|"\5\101\5\137\6\135\2\137\1\135\4\35\13\146\12\121\14\146\12\175"
operator|+
literal|"\15\174\1\145\2\174\1\173\3\152\1\13\2\152\5\161\4\152\4\162"
operator|+
literal|"\1\161\3\162\1\161\5\162\2\70\1\73\2\70\1\73\1\70\2\73"
operator|+
literal|"\1\70\1\73\12\70\1\73\4\5\1\154\1\153\1\155\1\12\3\165"
operator|+
literal|"\1\155\2\165\1\141\2\142\2\165\1\12\1\165\1\12\1\165\1\12"
operator|+
literal|"\1\165\3\12\1\165\2\12\1\165\1\12\2\165\1\12\1\165\1\12"
operator|+
literal|"\1\165\1\12\1\165\1\12\1\165\1\12\1\76\2\72\1\76\1\72"
operator|+
literal|"\2\76\4\72\1\76\7\72\1\76\4\72\1\76\4\72\1\165\1\12"
operator|+
literal|"\1\165\12\31\1\57\21\31\1\57\3\32\1\57\3\31\1\57\1\31"
operator|+
literal|"\2\2\2\31\1\57\15\134\4\47\4\54\1\120\1\56\10\120\7\54"
operator|+
literal|"\6\165\4\25\1\27\37\25\1\27\4\25\25\105\1\171\11\105\21\26"
operator|+
literal|"\5\105\1\7\12\55\5\105\6\104\4\76\1\77\1\26\5\133\12\131"
operator|+
literal|"\17\133\1\74\3\71\14\130\1\11\11\46\1\52\5\46\4\132\13\51"
operator|+
literal|"\2\14\11\46\1\52\31\46\1\52\4\11\4\46\2\52\2\125\1\20"
operator|+
literal|"\5\125\52\20\u1900\0\u016e\210\2\0\152\210\46\0\7\176\14\0\5\176"
operator|+
literal|"\5\0\1\214\1\177\12\214\1\0\15\214\1\0\5\214\1\0\1\214"
operator|+
literal|"\1\0\2\214\1\0\2\214\1\0\12\214\142\176\41\0\u016b\176\22\0"
operator|+
literal|"\100\176\2\0\66\176\50\0\14\176\4\0\20\177\1\203\2\0\1\202"
operator|+
literal|"\1\203\13\0\7\177\14\0\2\205\30\0\3\205\1\203\1\0\1\204"
operator|+
literal|"\1\0\1\203\1\202\32\0\5\176\1\0\207\176\2\0\1\177\7\0"
operator|+
literal|"\1\204\4\0\1\203\1\0\1\204\1\0\12\200\1\202\1\203\5\0"
operator|+
literal|"\32\176\4\0\1\205\1\0\32\176\13\0\70\201\2\177\37\215\3\0"
operator|+
literal|"\6\215\2\0\6\215\2\0\6\215\2\0\3\215\34\0\3\177\4\0"
decl_stmt|;
comment|/**     * Translates characters to character classes    */
DECL|field|ZZ_CMAP
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|ZZ_CMAP
init|=
name|zzUnpackCMap
argument_list|(
name|ZZ_CMAP_PACKED
argument_list|)
decl_stmt|;
comment|/**     * Translates DFA states to action switch labels.    */
DECL|field|ZZ_ACTION
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|ZZ_ACTION
init|=
name|zzUnpackAction
argument_list|()
decl_stmt|;
DECL|field|ZZ_ACTION_PACKED_0
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_ACTION_PACKED_0
init|=
literal|"\1\0\26\1\1\2\1\3\1\4\1\1\1\5\1\6"
operator|+
literal|"\1\7\1\2\1\10\21\0\1\2\1\0\1\2\12\0"
operator|+
literal|"\1\3\21\0\1\2\25\0\1\2\115\0\1\1\20\0"
decl_stmt|;
DECL|method|zzUnpackAction
specifier|private
specifier|static
name|int
index|[]
name|zzUnpackAction
parameter_list|()
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
literal|197
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|offset
operator|=
name|zzUnpackAction
argument_list|(
name|ZZ_ACTION_PACKED_0
argument_list|,
name|offset
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|zzUnpackAction
specifier|private
specifier|static
name|int
name|zzUnpackAction
parameter_list|(
name|String
name|packed
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
index|[]
name|result
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/* index in packed string  */
name|int
name|j
init|=
name|offset
decl_stmt|;
comment|/* index in unpacked array */
name|int
name|l
init|=
name|packed
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|l
condition|)
block|{
name|int
name|count
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|int
name|value
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
do|do
name|result
index|[
name|j
operator|++
index|]
operator|=
name|value
expr_stmt|;
do|while
condition|(
operator|--
name|count
operator|>
literal|0
condition|)
do|;
block|}
return|return
name|j
return|;
block|}
comment|/**     * Translates a state to a row index in the transition table    */
DECL|field|ZZ_ROWMAP
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|ZZ_ROWMAP
init|=
name|zzUnpackRowMap
argument_list|()
decl_stmt|;
DECL|field|ZZ_ROWMAP_PACKED_0
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_ROWMAP_PACKED_0
init|=
literal|"\0\0\0\216\0\u011c\0\u01aa\0\u0238\0\u02c6\0\u0354\0\u03e2"
operator|+
literal|"\0\u0470\0\u04fe\0\u058c\0\u061a\0\u06a8\0\u0736\0\u07c4\0\u0852"
operator|+
literal|"\0\u08e0\0\u096e\0\u09fc\0\u0a8a\0\u0b18\0\u0ba6\0\u0c34\0\u0cc2"
operator|+
literal|"\0\u0d50\0\u0dde\0\u0e6c\0\u0efa\0\u0f88\0\u1016\0\u10a4\0\u1132"
operator|+
literal|"\0\u11c0\0\u011c\0\u01aa\0\u124e\0\u12dc\0\u0354\0\u03e2\0\u0470"
operator|+
literal|"\0\u04fe\0\u136a\0\u13f8\0\u1486\0\u1514\0\u07c4\0\u15a2\0\u1630"
operator|+
literal|"\0\u16be\0\u174c\0\u17da\0\u1868\0\u18f6\0\u02c6\0\u1984\0\u1a12"
operator|+
literal|"\0\u06a8\0\u1aa0\0\u1b2e\0\u1bbc\0\u1c4a\0\u1cd8\0\u1d66\0\u1df4"
operator|+
literal|"\0\u1e82\0\u1f10\0\u1f9e\0\u202c\0\u20ba\0\u2148\0\u21d6\0\u2264"
operator|+
literal|"\0\u22f2\0\u2380\0\u240e\0\u249c\0\u252a\0\u25b8\0\u2646\0\u0e6c"
operator|+
literal|"\0\u26d4\0\u2762\0\u27f0\0\u287e\0\u290c\0\u299a\0\u2a28\0\u2ab6"
operator|+
literal|"\0\u2b44\0\u2bd2\0\u2c60\0\u2cee\0\u2d7c\0\u2e0a\0\u2e98\0\u2f26"
operator|+
literal|"\0\u2fb4\0\u3042\0\u30d0\0\u315e\0\u31ec\0\u327a\0\u3308\0\u3396"
operator|+
literal|"\0\u3424\0\u34b2\0\u3540\0\u35ce\0\u365c\0\u36ea\0\u3778\0\u3806"
operator|+
literal|"\0\u3894\0\u3922\0\u39b0\0\u3a3e\0\u3acc\0\u3b5a\0\u3be8\0\u3c76"
operator|+
literal|"\0\u3d04\0\u3d92\0\u3e20\0\u3eae\0\u3f3c\0\u3fca\0\u4058\0\u40e6"
operator|+
literal|"\0\u4174\0\u4202\0\u4290\0\u431e\0\u43ac\0\u443a\0\u44c8\0\u4556"
operator|+
literal|"\0\u45e4\0\u4672\0\u4700\0\u478e\0\u481c\0\u48aa\0\u4938\0\u49c6"
operator|+
literal|"\0\u4a54\0\u4ae2\0\u4b70\0\u4bfe\0\u4c8c\0\u4d1a\0\u4da8\0\u4e36"
operator|+
literal|"\0\u4ec4\0\u4f52\0\u4fe0\0\u506e\0\u50fc\0\u518a\0\u5218\0\u52a6"
operator|+
literal|"\0\u5334\0\u53c2\0\u5450\0\u54de\0\u556c\0\u55fa\0\u5688\0\u5716"
operator|+
literal|"\0\u57a4\0\u5832\0\u58c0\0\u594e\0\u59dc\0\u5a6a\0\u5af8\0\u5b86"
operator|+
literal|"\0\u5c14\0\u5ca2\0\u5d30\0\u5dbe\0\u5e4c\0\u5eda\0\u5f68\0\u5ff6"
operator|+
literal|"\0\u6084\0\u6112\0\u61a0\0\u622e\0\u62bc\0\u634a\0\u63d8\0\u6466"
operator|+
literal|"\0\u64f4\0\u6582\0\u6610\0\u669e\0\u672c"
decl_stmt|;
DECL|method|zzUnpackRowMap
specifier|private
specifier|static
name|int
index|[]
name|zzUnpackRowMap
parameter_list|()
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
literal|197
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|offset
operator|=
name|zzUnpackRowMap
argument_list|(
name|ZZ_ROWMAP_PACKED_0
argument_list|,
name|offset
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|zzUnpackRowMap
specifier|private
specifier|static
name|int
name|zzUnpackRowMap
parameter_list|(
name|String
name|packed
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
index|[]
name|result
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/* index in packed string  */
name|int
name|j
init|=
name|offset
decl_stmt|;
comment|/* index in unpacked array */
name|int
name|l
init|=
name|packed
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|l
condition|)
block|{
name|int
name|high
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
operator|<<
literal|16
decl_stmt|;
name|result
index|[
name|j
operator|++
index|]
operator|=
name|high
operator||
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
expr_stmt|;
block|}
return|return
name|j
return|;
block|}
comment|/**     * The transition table of the DFA    */
DECL|field|ZZ_TRANS
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|ZZ_TRANS
init|=
name|zzUnpackTrans
argument_list|()
decl_stmt|;
DECL|field|ZZ_TRANS_PACKED_0
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_TRANS_PACKED_0
init|=
literal|"\1\2\1\3\1\2\1\4\2\2\1\5\1\2\1\6"
operator|+
literal|"\4\2\1\7\1\2\1\10\1\2\1\11\2\2\1\12"
operator|+
literal|"\3\2\1\13\2\2\1\14\4\2\1\15\3\2\1\16"
operator|+
literal|"\17\2\1\17\2\2\1\20\66\2\1\21\1\2\1\22"
operator|+
literal|"\2\2\1\23\1\24\1\2\1\25\1\2\1\26\1\2"
operator|+
literal|"\1\27\3\2\1\30\1\2\1\31\1\32\3\2\1\33"
operator|+
literal|"\2\34\1\35\1\36\2\2\1\37\1\40\220\0\1\30"
operator|+
literal|"\2\0\1\30\4\0\1\30\16\0\1\30\15\0\1\30"
operator|+
literal|"\20\0\1\30\1\0\1\30\41\0\1\30\4\0\1\30"
operator|+
literal|"\10\0\2\30\5\0\2\30\10\0\1\30\26\0\2\30"
operator|+
literal|"\5\0\1\30\2\0\1\30\3\0\2\30\10\0\4\30"
operator|+
literal|"\1\0\3\30\1\0\1\30\2\0\1\30\2\0\1\30"
operator|+
literal|"\4\0\4\30\1\0\2\30\1\0\1\30\2\0\1\30"
operator|+
literal|"\1\0\1\30\2\0\4\30\2\0\3\30\1\0\2\30"
operator|+
literal|"\1\0\3\30\1\0\4\30\1\0\2\30\5\0\4\30"
operator|+
literal|"\2\0\10\30\1\0\1\30\2\0\1\30\1\0\2\30"
operator|+
literal|"\4\0\1\30\3\0\3\30\27\0\1\30\4\0\1\30"
operator|+
literal|"\11\0\1\30\22\0\1\30\3\0\1\30\27\0\1\30"
operator|+
literal|"\63\0\1\30\31\0\1\30\3\0\4\30\1\0\1\30"
operator|+
literal|"\1\0\1\31\2\0\1\30\1\0\2\30\2\0\2\30"
operator|+
literal|"\2\0\3\30\1\0\1\30\1\0\1\30\2\0\4\30"
operator|+
literal|"\1\0\3\30\1\0\1\30\1\0\3\30\1\0\2\30"
operator|+
literal|"\1\0\4\30\1\0\2\30\2\0\10\30\1\0\2\30"
operator|+
literal|"\1\0\10\30\1\31\1\0\7\30\1\0\10\30\1\0"
operator|+
literal|"\6\30\1\0\1\30\1\0\2\30\2\0\1\30\1\0"
operator|+
literal|"\1\30\3\0\3\30\36\0\1\30\17\0\1\30\23\0"
operator|+
literal|"\1\30\23\0\1\30\6\0\3\30\37\0\1\30\7\0"
operator|+
literal|"\1\30\30\0\1\30\1\0\2\30\1\0\1\30\1\0"
operator|+
literal|"\4\30\1\0\1\30\1\0\1\30\1\0\2\30\1\0"
operator|+
literal|"\3\30\1\0\2\30\1\0\4\30\1\0\3\30\1\0"
operator|+
literal|"\17\30\1\0\2\30\1\0\21\30\1\0\2\30\1\0"
operator|+
literal|"\41\30\1\0\1\30\1\0\2\30\2\0\1\30\1\0"
operator|+
literal|"\1\30\1\0\1\30\1\0\3\30\36\0\1\30\3\0"
operator|+
literal|"\2\30\12\0\2\30\13\0\1\30\6\0\1\30\2\0"
operator|+
literal|"\2\30\6\0\1\30\4\0\2\30\2\0\2\30\5\0"
operator|+
literal|"\3\30\20\0\1\30\16\0\1\30\7\0\1\30\30\0"
operator|+
literal|"\1\30\1\0\2\30\1\0\1\30\2\0\2\30\2\0"
operator|+
literal|"\1\30\3\0\2\30\1\0\3\30\1\0\2\30\1\0"
operator|+
literal|"\4\30\1\0\3\30\1\0\1\30\1\0\2\30\2\0"
operator|+
literal|"\11\30\1\0\2\30\1\0\1\30\1\0\2\30\1\0"
operator|+
literal|"\14\30\1\0\2\30\1\0\10\30\1\0\2\30\1\0"
operator|+
literal|"\1\30\1\0\23\30\1\0\1\30\1\0\2\30\2\0"
operator|+
literal|"\1\30\1\0\1\30\1\0\1\30\1\0\3\30\22\0"
operator|+
literal|"\1\30\26\0\2\30\23\0\1\31\1\30\40\0\1\31"
operator|+
literal|"\101\0\1\31\27\0\4\30\2\0\2\30\14\0\3\30"
operator|+
literal|"\15\0\3\30\3\0\1\30\7\0\2\30\1\0\4\31"
operator|+
literal|"\1\0\2\30\13\0\1\30\23\0\1\30\44\0\1\30"
operator|+
literal|"\3\0\2\30\12\0\2\30\1\0\3\30\7\0\1\30"
operator|+
literal|"\6\0\2\30\1\0\2\30\6\0\1\30\4\0\2\30"
operator|+
literal|"\2\0\2\30\5\0\3\30\2\0\1\30\3\0\2\31"
operator|+
literal|"\10\0\1\30\16\0\1\30\7\0\1\30\30\0\1\30"
operator|+
literal|"\4\0\1\30\6\0\1\30\3\0\1\30\6\0\1\30"
operator|+
literal|"\5\0\1\30\2\0\2\30\1\0\17\30\2\0\1\30"
operator|+
literal|"\13\0\7\30\2\0\1\30\1\0\1\30\1\0\2\30"
operator|+
literal|"\2\0\1\30\1\0\3\30\2\0\1\30\1\0\1\30"
operator|+
literal|"\1\0\1\30\1\0\1\30\6\0\2\30\6\0\1\30"
operator|+
literal|"\7\0\1\30\1\0\1\30\42\0\1\30\17\0\2\30"
operator|+
literal|"\22\0\1\30\2\0\2\30\13\0\1\30\3\0\2\30"
operator|+
literal|"\5\0\3\30\20\0\1\30\16\0\1\30\7\0\1\30"
operator|+
literal|"\35\0\1\30\6\0\1\30\3\0\1\30\3\0\1\30"
operator|+
literal|"\7\0\1\30\31\0\20\30\5\0\3\30\4\0\1\30"
operator|+
literal|"\6\0\1\30\3\0\2\30\2\0\2\30\4\0\1\30"
operator|+
literal|"\5\0\1\30\2\0\1\30\4\0\1\30\1\0\1\30"
operator|+
literal|"\1\0\1\30\137\0\1\36\41\0\1\32\42\0\1\35"
operator|+
literal|"\6\0\1\35\2\0\1\35\3\0\2\35\10\0\4\35"
operator|+
literal|"\1\0\3\35\1\0\1\35\2\0\1\35\2\0\1\35"
operator|+
literal|"\4\0\4\35\1\0\2\35\6\0\1\35\2\0\4\35"
operator|+
literal|"\2\0\3\35\1\0\2\35\1\0\3\35\1\0\4\35"
operator|+
literal|"\1\0\2\35\5\0\4\35\2\0\10\35\4\0\1\35"
operator|+
literal|"\1\0\2\35\4\0\1\35\3\0\3\35\22\0\1\35"
operator|+
literal|"\1\0\2\35\1\0\1\35\1\0\4\35\1\0\1\35"
operator|+
literal|"\1\0\1\35\1\0\2\35\1\0\3\35\1\0\2\35"
operator|+
literal|"\1\0\4\35\1\0\3\35\1\0\17\35\1\0\2\35"
operator|+
literal|"\1\0\21\35\1\0\2\35\1\0\41\35\1\0\1\35"
operator|+
literal|"\1\0\2\35\2\0\1\35\1\0\1\35\1\0\1\35"
operator|+
literal|"\1\0\3\35\22\0\1\35\1\0\2\35\1\0\1\35"
operator|+
literal|"\1\0\4\35\1\0\1\35\1\0\1\35\1\0\2\35"
operator|+
literal|"\2\0\1\35\2\0\2\35\1\0\4\35\1\0\3\35"
operator|+
literal|"\1\0\17\35\1\0\2\35\1\0\21\35\1\0\2\35"
operator|+
literal|"\1\0\41\35\1\0\1\35\1\0\2\35\2\0\1\35"
operator|+
literal|"\1\0\1\35\1\0\1\35\1\0\3\35\36\0\1\35"
operator|+
literal|"\17\0\1\35\23\0\1\35\32\0\1\35\41\0\1\35"
operator|+
literal|"\7\0\1\35\30\0\1\35\1\0\2\35\3\0\4\35"
operator|+
literal|"\1\0\1\35\1\0\1\35\1\0\2\35\1\0\3\35"
operator|+
literal|"\1\0\2\35\1\0\4\35\1\0\3\35\1\0\10\35"
operator|+
literal|"\1\0\6\35\1\0\2\35\1\0\21\35\1\0\2\35"
operator|+
literal|"\1\0\41\35\1\0\1\35\1\0\2\35\2\0\1\35"
operator|+
literal|"\1\0\1\35\1\0\1\35\1\0\3\35\165\0\1\41"
operator|+
literal|"\25\0\1\36\2\41\21\0\1\42\1\0\1\43\2\0"
operator|+
literal|"\1\44\1\0\1\45\4\0\1\46\1\0\1\47\1\0"
operator|+
literal|"\1\50\2\0\1\51\3\0\1\52\2\0\1\53\4\0"
operator|+
literal|"\1\54\3\0\1\55\17\0\1\56\2\0\1\57\21\0"
operator|+
literal|"\1\60\2\0\1\61\61\0\2\30\1\62\1\0\1\63"
operator|+
literal|"\1\0\1\63\1\64\1\0\1\30\2\0\1\63\1\0"
operator|+
literal|"\1\37\1\30\1\0\1\42\1\0\1\43\2\0\1\65"
operator|+
literal|"\1\0\1\66\4\0\1\46\1\0\1\47\1\0\1\50"
operator|+
literal|"\2\0\1\51\3\0\1\67\2\0\1\70\4\0\1\71"
operator|+
literal|"\3\0\1\72\17\0\1\56\2\0\1\73\21\0\1\74"
operator|+
literal|"\2\0\1\75\61\0\1\30\2\31\2\0\2\76\1\77"
operator|+
literal|"\1\0\1\31\2\0\1\76\1\0\1\37\1\30\6\0"
operator|+
literal|"\1\100\21\0\1\101\2\0\1\102\10\0\1\103\22\0"
operator|+
literal|"\1\104\21\0\1\105\2\0\1\106\41\0\1\107\20\0"
operator|+
literal|"\1\32\1\0\1\32\3\0\1\64\1\0\1\32\7\0"
operator|+
literal|"\1\42\1\0\1\43\2\0\1\110\1\0\1\66\4\0"
operator|+
literal|"\1\46\1\0\1\47\1\0\1\50\2\0\1\51\3\0"
operator|+
literal|"\1\111\2\0\1\112\4\0\1\71\3\0\1\113\17\0"
operator|+
literal|"\1\56\2\0\1\114\21\0\1\115\2\0\1\116\41\0"
operator|+
literal|"\1\117\17\0\1\30\1\120\1\31\1\121\3\0\1\120"
operator|+
literal|"\1\0\1\120\4\0\1\37\1\30\206\0\2\34\14\0"
operator|+
literal|"\1\122\21\0\1\123\2\0\1\124\10\0\1\125\22\0"
operator|+
literal|"\1\126\21\0\1\127\2\0\1\130\62\0\1\35\7\0"
operator|+
literal|"\1\35\14\0\1\131\21\0\1\132\2\0\1\133\10\0"
operator|+
literal|"\1\134\22\0\1\135\21\0\1\136\2\0\1\137\62\0"
operator|+
literal|"\1\36\7\0\1\36\7\0\1\42\1\0\1\43\2\0"
operator|+
literal|"\1\140\1\0\1\45\4\0\1\46\1\0\1\47\1\0"
operator|+
literal|"\1\50\2\0\1\51\3\0\1\141\2\0\1\142\4\0"
operator|+
literal|"\1\54\3\0\1\143\17\0\1\56\2\0\1\144\21\0"
operator|+
literal|"\1\145\2\0\1\146\61\0\1\30\1\37\1\62\1\0"
operator|+
literal|"\1\63\1\0\1\63\1\64\1\0\1\37\2\0\1\147"
operator|+
literal|"\1\150\1\37\1\30\1\0\1\42\1\0\1\43\2\0"
operator|+
literal|"\1\151\1\0\1\45\4\0\1\46\1\0\1\47\1\0"
operator|+
literal|"\1\50\2\0\1\51\3\0\1\152\2\0\1\153\4\0"
operator|+
literal|"\1\54\3\0\1\154\17\0\1\56\2\0\1\155\21\0"
operator|+
literal|"\1\156\2\0\1\157\61\0\1\30\1\40\1\62\1\0"
operator|+
literal|"\1\63\1\0\1\63\1\64\1\0\1\40\2\0\1\63"
operator|+
literal|"\1\0\1\37\1\40\6\0\1\160\21\0\1\161\2\0"
operator|+
literal|"\1\162\10\0\1\163\22\0\1\164\21\0\1\165\2\0"
operator|+
literal|"\1\166\55\0\1\167\4\0\1\41\7\0\1\41\15\0"
operator|+
literal|"\1\30\4\0\1\30\11\0\1\30\22\0\1\30\3\0"
operator|+
literal|"\1\30\13\0\1\30\2\0\1\30\10\0\1\30\22\0"
operator|+
literal|"\4\30\35\0\1\30\31\0\1\30\3\0\4\30\1\0"
operator|+
literal|"\1\30\1\0\1\62\2\0\1\30\1\0\2\30\2\0"
operator|+
literal|"\2\30\2\0\3\30\1\0\1\30\1\0\1\30\2\0"
operator|+
literal|"\4\30\1\0\3\30\1\0\1\30\1\0\3\30\1\0"
operator|+
literal|"\2\30\1\0\4\30\1\0\2\30\2\0\10\30\1\0"
operator|+
literal|"\2\30\1\0\10\30\1\62\1\0\7\30\1\0\10\30"
operator|+
literal|"\1\0\6\30\1\0\1\30\1\0\2\30\2\0\1\30"
operator|+
literal|"\1\0\1\30\3\0\3\30\22\0\1\30\26\0\2\30"
operator|+
literal|"\23\0\1\62\1\30\40\0\1\62\13\0\1\30\65\0"
operator|+
literal|"\1\62\11\0\1\30\15\0\4\30\2\0\2\30\14\0"
operator|+
literal|"\4\30\1\0\2\30\11\0\3\30\3\0\1\30\1\0"
operator|+
literal|"\1\30\4\0\3\30\1\0\4\62\1\0\2\30\5\0"
operator|+
literal|"\4\30\2\0\2\30\12\0\1\30\7\0\1\30\44\0"
operator|+
literal|"\1\30\3\0\2\30\12\0\2\30\1\0\3\30\7\0"
operator|+
literal|"\1\30\6\0\2\30\1\0\2\30\6\0\1\30\4\0"
operator|+
literal|"\2\30\2\0\2\30\5\0\3\30\2\0\1\30\3\0"
operator|+
literal|"\2\62\10\0\1\30\16\0\1\30\7\0\1\30\30\0"
operator|+
literal|"\1\30\4\0\1\30\6\0\1\30\3\0\1\30\6\0"
operator|+
literal|"\1\30\5\0\1\30\2\0\2\30\1\0\17\30\2\0"
operator|+
literal|"\1\30\13\0\7\30\2\0\1\30\1\0\1\30\1\0"
operator|+
literal|"\2\30\2\0\1\30\1\0\3\30\2\0\1\30\1\0"
operator|+
literal|"\1\30\1\0\1\30\1\0\1\30\4\0\1\30\1\0"
operator|+
literal|"\2\30\6\0\1\30\7\0\1\30\1\0\1\30\33\0"
operator|+
literal|"\1\30\6\0\1\30\3\0\1\30\3\0\1\30\7\0"
operator|+
literal|"\1\30\31\0\20\30\5\0\3\30\4\0\1\30\6\0"
operator|+
literal|"\1\30\3\0\2\30\2\0\2\30\4\0\5\30\1\0"
operator|+
literal|"\1\30\2\0\1\30\4\0\1\30\1\0\1\30\1\0"
operator|+
literal|"\1\30\134\0\2\30\25\0\4\30\55\0\1\30\15\0"
operator|+
literal|"\2\30\10\0\2\30\1\0\1\30\1\0\1\30\11\0"
operator|+
literal|"\1\30\11\0\2\30\6\0\1\30\2\0\4\30\3\0"
operator|+
literal|"\1\30\2\0\2\30\1\0\3\30\1\0\2\30\1\0"
operator|+
literal|"\1\30\10\0\1\30\1\0\2\30\2\0\2\30\1\0"
operator|+
literal|"\4\30\23\0\1\30\21\0\1\42\1\0\1\43\2\0"
operator|+
literal|"\1\170\1\0\1\45\4\0\1\46\1\0\1\47\1\0"
operator|+
literal|"\1\50\2\0\1\51\3\0\1\171\2\0\1\172\4\0"
operator|+
literal|"\1\54\3\0\1\173\17\0\1\56\2\0\1\174\21\0"
operator|+
literal|"\1\175\2\0\1\176\61\0\1\30\2\62\2\0\2\177"
operator|+
literal|"\1\64\1\0\1\62\2\0\1\177\1\0\1\37\1\30"
operator|+
literal|"\1\0\1\42\1\0\1\43\2\0\1\200\1\0\1\201"
operator|+
literal|"\4\0\1\46\1\0\1\47\1\0\1\50\2\0\1\51"
operator|+
literal|"\3\0\1\202\2\0\1\203\4\0\1\204\3\0\1\205"
operator|+
literal|"\17\0\1\56\2\0\1\206\21\0\1\207\2\0\1\210"
operator|+
literal|"\61\0\1\30\1\63\7\0\1\63\4\0\2\30\1\0"
operator|+
literal|"\1\42\1\0\1\43\2\0\1\211\1\0\1\45\4\0"
operator|+
literal|"\1\46\1\0\1\47\1\0\1\50\2\0\1\51\3\0"
operator|+
literal|"\1\212\2\0\1\213\4\0\1\54\3\0\1\214\17\0"
operator|+
literal|"\1\56\2\0\1\215\21\0\1\216\2\0\1\217\41\0"
operator|+
literal|"\1\117\17\0\1\30\1\64\1\62\1\121\3\0\1\64"
operator|+
literal|"\1\0\1\64\4\0\1\37\1\30\7\0\1\30\4\0"
operator|+
literal|"\1\30\11\0\1\30\22\0\1\30\3\0\1\30\13\0"
operator|+
literal|"\1\31\2\0\1\31\10\0\1\30\22\0\4\31\35\0"
operator|+
literal|"\1\30\26\0\1\30\26\0\2\30\23\0\1\31\1\30"
operator|+
literal|"\40\0\1\31\13\0\1\31\65\0\1\31\11\0\1\31"
operator|+
literal|"\15\0\4\30\2\0\2\30\14\0\3\30\1\31\1\0"
operator|+
literal|"\2\31\11\0\3\30\3\0\1\30\1\0\1\31\4\0"
operator|+
literal|"\1\31\2\30\1\0\4\31\1\0\2\30\5\0\4\31"
operator|+
literal|"\2\0\1\30\1\31\12\0\1\31\7\0\1\30\30\0"
operator|+
literal|"\1\30\4\0\1\30\6\0\1\30\3\0\1\30\6\0"
operator|+
literal|"\1\30\5\0\1\30\2\0\2\30\1\0\17\30\2\0"
operator|+
literal|"\1\30\13\0\7\30\2\0\1\30\1\0\1\30\1\0"
operator|+
literal|"\2\30\2\0\1\30\1\0\3\30\2\0\1\30\1\0"
operator|+
literal|"\1\30\1\0\1\30\1\0\1\30\4\0\1\31\1\0"
operator|+
literal|"\2\30\6\0\1\30\7\0\1\30\1\0\1\30\33\0"
operator|+
literal|"\1\30\6\0\1\30\3\0\1\30\3\0\1\30\7\0"
operator|+
literal|"\1\30\31\0\20\30\5\0\3\30\4\0\1\30\6\0"
operator|+
literal|"\1\30\3\0\2\30\2\0\2\30\4\0\1\30\4\31"
operator|+
literal|"\1\0\1\30\2\0\1\30\4\0\1\30\1\0\1\30"
operator|+
literal|"\1\0\1\30\134\0\2\31\25\0\4\31\55\0\1\31"
operator|+
literal|"\15\0\2\31\10\0\2\31\1\0\1\31\1\0\1\31"
operator|+
literal|"\11\0\1\31\11\0\2\31\6\0\1\31\2\0\4\31"
operator|+
literal|"\3\0\1\31\2\0\2\31\1\0\3\31\1\0\2\31"
operator|+
literal|"\1\0\1\31\10\0\1\31\1\0\2\31\2\0\2\31"
operator|+
literal|"\1\0\4\31\23\0\1\31\26\0\1\220\1\0\1\221"
operator|+
literal|"\17\0\1\222\2\0\1\223\4\0\1\224\3\0\1\225"
operator|+
literal|"\22\0\1\226\21\0\1\227\2\0\1\230\62\0\1\76"
operator|+
literal|"\1\31\6\0\1\76\7\0\1\42\1\0\1\43\2\0"
operator|+
literal|"\1\231\1\0\1\66\4\0\1\46\1\0\1\47\1\0"
operator|+
literal|"\1\50\2\0\1\51\3\0\1\232\2\0\1\233\4\0"
operator|+
literal|"\1\71\3\0\1\234\17\0\1\56\2\0\1\235\21\0"
operator|+
literal|"\1\236\2\0\1\237\41\0\1\117\17\0\1\30\1\77"
operator|+
literal|"\1\31\1\121\3\0\1\77\1\0\1\77\4\0\1\37"
operator|+
literal|"\1\30\71\0\1\32\2\0\1\32\33\0\4\32\216\0"
operator|+
literal|"\1\32\77\0\1\32\44\0\1\32\1\0\2\32\21\0"
operator|+
literal|"\1\32\4\0\1\32\17\0\4\32\3\0\1\32\12\0"
operator|+
literal|"\1\32\203\0\1\32\222\0\4\32\152\0\2\32\25\0"
operator|+
literal|"\4\32\55\0\1\32\15\0\2\32\10\0\2\32\1\0"
operator|+
literal|"\1\32\1\0\1\32\11\0\1\32\11\0\2\32\6\0"
operator|+
literal|"\1\32\2\0\4\32\3\0\1\32\2\0\2\32\1\0"
operator|+
literal|"\3\32\1\0\2\32\1\0\1\32\10\0\1\32\1\0"
operator|+
literal|"\2\32\2\0\2\32\1\0\4\32\23\0\1\32\177\0"
operator|+
literal|"\1\32\45\0\1\30\4\0\1\30\11\0\1\30\22\0"
operator|+
literal|"\1\30\3\0\1\30\13\0\1\120\2\0\1\120\10\0"
operator|+
literal|"\1\30\22\0\4\120\35\0\1\30\26\0\1\30\26\0"
operator|+
literal|"\2\30\23\0\1\31\1\30\40\0\1\31\13\0\1\120"
operator|+
literal|"\65\0\1\31\11\0\1\120\15\0\4\30\2\0\2\30"
operator|+
literal|"\14\0\3\30\1\120\1\0\2\120\11\0\3\30\3\0"
operator|+
literal|"\1\30\1\0\1\120\4\0\1\120\2\30\1\0\4\31"
operator|+
literal|"\1\0\2\30\5\0\4\120\2\0\1\30\1\120\12\0"
operator|+
literal|"\1\120\7\0\1\30\30\0\1\30\4\0\1\30\6\0"
operator|+
literal|"\1\30\3\0\1\30\6\0\1\30\5\0\1\30\2\0"
operator|+
literal|"\2\30\1\0\17\30\2\0\1\30\13\0\7\30\2\0"
operator|+
literal|"\1\30\1\0\1\30\1\0\2\30\2\0\1\30\1\0"
operator|+
literal|"\3\30\2\0\1\30\1\0\1\30\1\0\1\30\1\0"
operator|+
literal|"\1\30\4\0\1\120\1\0\2\30\6\0\1\30\7\0"
operator|+
literal|"\1\30\1\0\1\30\33\0\1\30\6\0\1\30\3\0"
operator|+
literal|"\1\30\3\0\1\30\7\0\1\30\31\0\20\30\5\0"
operator|+
literal|"\3\30\4\0\1\30\6\0\1\30\3\0\2\30\2\0"
operator|+
literal|"\2\30\4\0\1\30\4\120\1\0\1\30\2\0\1\30"
operator|+
literal|"\4\0\1\30\1\0\1\30\1\0\1\30\134\0\2\120"
operator|+
literal|"\25\0\4\120\55\0\1\120\15\0\2\120\10\0\2\120"
operator|+
literal|"\1\0\1\120\1\0\1\120\11\0\1\120\11\0\2\120"
operator|+
literal|"\6\0\1\120\2\0\4\120\3\0\1\120\2\0\2\120"
operator|+
literal|"\1\0\3\120\1\0\2\120\1\0\1\120\10\0\1\120"
operator|+
literal|"\1\0\2\120\2\0\2\120\1\0\4\120\23\0\1\120"
operator|+
literal|"\177\0\1\121\44\0\1\240\21\0\1\241\2\0\1\242"
operator|+
literal|"\10\0\1\243\22\0\1\244\21\0\1\245\2\0\1\246"
operator|+
literal|"\41\0\1\117\20\0\1\121\1\0\1\121\3\0\1\64"
operator|+
literal|"\1\0\1\121\77\0\1\35\2\0\1\35\33\0\4\35"
operator|+
literal|"\216\0\1\35\77\0\1\35\44\0\1\35\1\0\2\35"
operator|+
literal|"\21\0\1\35\4\0\1\35\17\0\4\35\3\0\1\35"
operator|+
literal|"\12\0\1\35\203\0\1\35\222\0\4\35\152\0\2\35"
operator|+
literal|"\25\0\4\35\55\0\1\35\15\0\2\35\10\0\2\35"
operator|+
literal|"\1\0\1\35\1\0\1\35\11\0\1\35\11\0\2\35"
operator|+
literal|"\6\0\1\35\2\0\4\35\3\0\1\35\2\0\2\35"
operator|+
literal|"\1\0\3\35\1\0\2\35\1\0\1\35\10\0\1\35"
operator|+
literal|"\1\0\2\35\2\0\2\35\1\0\4\35\23\0\1\35"
operator|+
literal|"\111\0\1\36\2\0\1\36\33\0\4\36\216\0\1\36"
operator|+
literal|"\77\0\1\36\44\0\1\36\1\0\2\36\21\0\1\36"
operator|+
literal|"\4\0\1\36\17\0\4\36\3\0\1\36\12\0\1\36"
operator|+
literal|"\203\0\1\36\222\0\4\36\152\0\2\36\25\0\4\36"
operator|+
literal|"\55\0\1\36\15\0\2\36\10\0\2\36\1\0\1\36"
operator|+
literal|"\1\0\1\36\11\0\1\36\11\0\2\36\6\0\1\36"
operator|+
literal|"\2\0\4\36\3\0\1\36\2\0\2\36\1\0\3\36"
operator|+
literal|"\1\0\2\36\1\0\1\36\10\0\1\36\1\0\2\36"
operator|+
literal|"\2\0\2\36\1\0\4\36\23\0\1\36\27\0\1\30"
operator|+
literal|"\4\0\1\30\11\0\1\30\22\0\1\30\3\0\1\30"
operator|+
literal|"\13\0\1\37\2\0\1\37\10\0\1\30\22\0\4\37"
operator|+
literal|"\35\0\1\30\26\0\1\30\26\0\2\30\23\0\1\62"
operator|+
literal|"\1\30\40\0\1\62\13\0\1\37\65\0\1\62\11\0"
operator|+
literal|"\1\37\15\0\4\30\2\0\2\30\14\0\3\30\1\37"
operator|+
literal|"\1\0\2\37\11\0\3\30\3\0\1\30\1\0\1\37"
operator|+
literal|"\4\0\1\37\2\30\1\0\4\62\1\0\2\30\5\0"
operator|+
literal|"\4\37\2\0\1\30\1\37\12\0\1\37\7\0\1\30"
operator|+
literal|"\30\0\1\30\4\0\1\30\6\0\1\30\3\0\1\30"
operator|+
literal|"\6\0\1\30\5\0\1\30\2\0\2\30\1\0\17\30"
operator|+
literal|"\2\0\1\30\13\0\7\30\2\0\1\30\1\0\1\30"
operator|+
literal|"\1\0\2\30\2\0\1\30\1\0\3\30\2\0\1\30"
operator|+
literal|"\1\0\1\30\1\0\1\30\1\0\1\30\4\0\1\37"
operator|+
literal|"\1\0\2\30\6\0\1\30\7\0\1\30\1\0\1\30"
operator|+
literal|"\33\0\1\30\6\0\1\30\3\0\1\30\3\0\1\30"
operator|+
literal|"\7\0\1\30\31\0\20\30\5\0\3\30\4\0\1\30"
operator|+
literal|"\6\0\1\30\3\0\2\30\2\0\2\30\4\0\1\30"
operator|+
literal|"\4\37\1\0\1\30\2\0\1\30\4\0\1\30\1\0"
operator|+
literal|"\1\30\1\0\1\30\134\0\2\37\25\0\4\37\55\0"
operator|+
literal|"\1\37\15\0\2\37\10\0\2\37\1\0\1\37\1\0"
operator|+
literal|"\1\37\11\0\1\37\11\0\2\37\6\0\1\37\2\0"
operator|+
literal|"\4\37\3\0\1\37\2\0\2\37\1\0\3\37\1\0"
operator|+
literal|"\2\37\1\0\1\37\10\0\1\37\1\0\2\37\2\0"
operator|+
literal|"\2\37\1\0\4\37\23\0\1\37\21\0\1\42\1\0"
operator|+
literal|"\1\43\2\0\1\247\1\0\1\45\4\0\1\46\1\0"
operator|+
literal|"\1\47\1\0\1\50\2\0\1\51\3\0\1\250\2\0"
operator|+
literal|"\1\251\4\0\1\54\3\0\1\252\17\0\1\56\2\0"
operator|+
literal|"\1\253\21\0\1\254\2\0\1\255\61\0\1\30\1\147"
operator|+
literal|"\1\62\4\0\1\64\1\0\1\147\4\0\1\37\1\30"
operator|+
literal|"\6\0\1\256\21\0\1\257\2\0\1\260\10\0\1\261"
operator|+
literal|"\22\0\1\262\21\0\1\263\2\0\1\264\62\0\1\150"
operator|+
literal|"\7\0\1\150\4\0\1\147\10\0\1\30\4\0\1\30"
operator|+
literal|"\11\0\1\30\22\0\1\30\3\0\1\30\13\0\1\40"
operator|+
literal|"\2\0\1\40\10\0\1\30\22\0\4\40\35\0\1\30"
operator|+
literal|"\26\0\1\30\26\0\2\30\23\0\1\62\1\30\40\0"
operator|+
literal|"\1\62\13\0\1\40\65\0\1\62\11\0\1\40\15\0"
operator|+
literal|"\4\30\2\0\2\30\14\0\3\30\1\40\1\0\2\40"
operator|+
literal|"\11\0\3\30\3\0\1\30\1\0\1\40\4\0\1\40"
operator|+
literal|"\2\30\1\0\4\62\1\0\2\30\5\0\4\40\2\0"
operator|+
literal|"\1\30\1\40\12\0\1\40\7\0\1\30\30\0\1\30"
operator|+
literal|"\4\0\1\30\6\0\1\30\3\0\1\30\6\0\1\30"
operator|+
literal|"\5\0\1\30\2\0\2\30\1\0\17\30\2\0\1\30"
operator|+
literal|"\13\0\7\30\2\0\1\30\1\0\1\30\1\0\2\30"
operator|+
literal|"\2\0\1\30\1\0\3\30\2\0\1\30\1\0\1\30"
operator|+
literal|"\1\0\1\30\1\0\1\30\4\0\1\40\1\0\2\30"
operator|+
literal|"\6\0\1\30\7\0\1\30\1\0\1\30\33\0\1\30"
operator|+
literal|"\6\0\1\30\3\0\1\30\3\0\1\30\7\0\1\30"
operator|+
literal|"\31\0\20\30\5\0\3\30\4\0\1\30\6\0\1\30"
operator|+
literal|"\3\0\2\30\2\0\2\30\4\0\1\30\4\40\1\0"
operator|+
literal|"\1\30\2\0\1\30\4\0\1\30\1\0\1\30\1\0"
operator|+
literal|"\1\30\134\0\2\40\25\0\4\40\55\0\1\40\15\0"
operator|+
literal|"\2\40\10\0\2\40\1\0\1\40\1\0\1\40\11\0"
operator|+
literal|"\1\40\11\0\2\40\6\0\1\40\2\0\4\40\3\0"
operator|+
literal|"\1\40\2\0\2\40\1\0\3\40\1\0\2\40\1\0"
operator|+
literal|"\1\40\10\0\1\40\1\0\2\40\2\0\2\40\1\0"
operator|+
literal|"\4\40\23\0\1\40\111\0\1\41\2\0\1\41\33\0"
operator|+
literal|"\4\41\216\0\1\41\77\0\1\41\44\0\1\41\1\0"
operator|+
literal|"\2\41\21\0\1\41\4\0\1\41\17\0\4\41\3\0"
operator|+
literal|"\1\41\12\0\1\41\203\0\1\41\222\0\4\41\152\0"
operator|+
literal|"\2\41\25\0\4\41\55\0\1\41\15\0\2\41\10\0"
operator|+
literal|"\2\41\1\0\1\41\1\0\1\41\11\0\1\41\11\0"
operator|+
literal|"\2\41\6\0\1\41\2\0\4\41\3\0\1\41\2\0"
operator|+
literal|"\2\41\1\0\3\41\1\0\2\41\1\0\1\41\10\0"
operator|+
literal|"\1\41\1\0\2\41\2\0\2\41\1\0\4\41\23\0"
operator|+
literal|"\1\41\165\0\1\265\26\0\2\265\27\0\1\30\4\0"
operator|+
literal|"\1\30\11\0\1\30\22\0\1\30\3\0\1\30\13\0"
operator|+
literal|"\1\62\2\0\1\62\10\0\1\30\22\0\4\62\35\0"
operator|+
literal|"\1\30\26\0\1\30\26\0\2\30\23\0\1\62\1\30"
operator|+
literal|"\40\0\1\62\13\0\1\62\65\0\1\62\11\0\1\62"
operator|+
literal|"\15\0\4\30\2\0\2\30\14\0\3\30\1\62\1\0"
operator|+
literal|"\2\62\11\0\3\30\3\0\1\30\1\0\1\62\4\0"
operator|+
literal|"\1\62\2\30\1\0\4\62\1\0\2\30\5\0\4\62"
operator|+
literal|"\2\0\1\30\1\62\12\0\1\62\7\0\1\30\30\0"
operator|+
literal|"\1\30\4\0\1\30\6\0\1\30\3\0\1\30\6\0"
operator|+
literal|"\1\30\5\0\1\30\2\0\2\30\1\0\17\30\2\0"
operator|+
literal|"\1\30\13\0\7\30\2\0\1\30\1\0\1\30\1\0"
operator|+
literal|"\2\30\2\0\1\30\1\0\3\30\2\0\1\30\1\0"
operator|+
literal|"\1\30\1\0\1\30\1\0\1\30\4\0\1\62\1\0"
operator|+
literal|"\2\30\6\0\1\30\7\0\1\30\1\0\1\30\33\0"
operator|+
literal|"\1\30\6\0\1\30\3\0\1\30\3\0\1\30\7\0"
operator|+
literal|"\1\30\31\0\20\30\5\0\3\30\4\0\1\30\6\0"
operator|+
literal|"\1\30\3\0\2\30\2\0\2\30\4\0\1\30\4\62"
operator|+
literal|"\1\0\1\30\2\0\1\30\4\0\1\30\1\0\1\30"
operator|+
literal|"\1\0\1\30\134\0\2\62\25\0\4\62\55\0\1\62"
operator|+
literal|"\15\0\2\62\10\0\2\62\1\0\1\62\1\0\1\62"
operator|+
literal|"\11\0\1\62\11\0\2\62\6\0\1\62\2\0\4\62"
operator|+
literal|"\3\0\1\62\2\0\2\62\1\0\3\62\1\0\2\62"
operator|+
literal|"\1\0\1\62\10\0\1\62\1\0\2\62\2\0\2\62"
operator|+
literal|"\1\0\4\62\23\0\1\62\26\0\1\266\1\0\1\267"
operator|+
literal|"\17\0\1\270\2\0\1\271\4\0\1\272\3\0\1\273"
operator|+
literal|"\22\0\1\274\21\0\1\275\2\0\1\276\62\0\1\177"
operator|+
literal|"\1\62\6\0\1\177\15\0\1\30\4\0\1\30\11\0"
operator|+
literal|"\1\30\22\0\1\30\3\0\1\30\13\0\1\63\2\0"
operator|+
literal|"\1\63\10\0\1\30\22\0\4\63\35\0\1\30\31\0"
operator|+
literal|"\1\30\3\0\4\30\1\0\1\30\4\0\1\30\1\0"
operator|+
literal|"\2\30\2\0\2\30\2\0\3\30\1\0\1\30\1\0"
operator|+
literal|"\1\30\2\0\4\30\1\0\3\30\1\0\1\30\1\0"
operator|+
literal|"\3\30\1\0\2\30\1\0\4\30\1\0\2\30\2\0"
operator|+
literal|"\10\30\1\0\2\30\1\0\10\30\2\0\7\30\1\0"
operator|+
literal|"\10\30\1\0\6\30\1\0\1\30\1\0\2\30\2\0"
operator|+
literal|"\1\30\1\0\1\30\3\0\3\30\22\0\1\30\26\0"
operator|+
literal|"\2\30\24\0\1\30\54\0\1\63\77\0\1\63\15\0"
operator|+
literal|"\4\30\2\0\2\30\14\0\3\30\1\63\1\0\2\63"
operator|+
literal|"\11\0\3\30\3\0\1\30\1\0\1\63\4\0\1\63"
operator|+
literal|"\2\30\6\0\2\30\5\0\4\63\2\0\1\30\1\63"
operator|+
literal|"\12\0\1\63\7\0\1\30\44\0\1\30\3\0\2\30"
operator|+
literal|"\12\0\2\30\1\0\3\30\7\0\1\30\6\0\2\30"
operator|+
literal|"\1\0\2\30\6\0\1\30\4\0\2\30\2\0\2\30"
operator|+
literal|"\5\0\3\30\2\0\1\30\15\0\1\30\16\0\1\30"
operator|+
literal|"\7\0\1\30\30\0\1\30\4\0\1\30\6\0\1\30"
operator|+
literal|"\3\0\1\30\6\0\1\30\5\0\1\30\2\0\2\30"
operator|+
literal|"\1\0\17\30\2\0\1\30\13\0\7\30\2\0\1\30"
operator|+
literal|"\1\0\1\30\1\0\2\30\2\0\1\30\1\0\3\30"
operator|+
literal|"\2\0\1\30\1\0\1\30\1\0\1\30\1\0\1\30"
operator|+
literal|"\4\0\1\63\1\0\2\30\6\0\1\30\7\0\1\30"
operator|+
literal|"\1\0\1\30\33\0\1\30\6\0\1\30\3\0\1\30"
operator|+
literal|"\3\0\1\30\7\0\1\30\31\0\20\30\5\0\3\30"
operator|+
literal|"\4\0\1\30\6\0\1\30\3\0\2\30\2\0\2\30"
operator|+
literal|"\4\0\1\30\4\63\1\0\1\30\2\0\1\30\4\0"
operator|+
literal|"\1\30\1\0\1\30\1\0\1\30\134\0\2\63\25\0"
operator|+
literal|"\4\63\55\0\1\63\15\0\2\63\10\0\2\63\1\0"
operator|+
literal|"\1\63\1\0\1\63\11\0\1\63\11\0\2\63\6\0"
operator|+
literal|"\1\63\2\0\4\63\3\0\1\63\2\0\2\63\1\0"
operator|+
literal|"\3\63\1\0\2\63\1\0\1\63\10\0\1\63\1\0"
operator|+
literal|"\2\63\2\0\2\63\1\0\4\63\23\0\1\63\27\0"
operator|+
literal|"\1\30\4\0\1\30\11\0\1\30\22\0\1\30\3\0"
operator|+
literal|"\1\30\13\0\1\64\2\0\1\64\10\0\1\30\22\0"
operator|+
literal|"\4\64\35\0\1\30\26\0\1\30\26\0\2\30\23\0"
operator|+
literal|"\1\62\1\30\40\0\1\62\13\0\1\64\65\0\1\62"
operator|+
literal|"\11\0\1\64\15\0\4\30\2\0\2\30\14\0\3\30"
operator|+
literal|"\1\64\1\0\2\64\11\0\3\30\3\0\1\30\1\0"
operator|+
literal|"\1\64\4\0\1\64\2\30\1\0\4\62\1\0\2\30"
operator|+
literal|"\5\0\4\64\2\0\1\30\1\64\12\0\1\64\7\0"
operator|+
literal|"\1\30\30\0\1\30\4\0\1\30\6\0\1\30\3\0"
operator|+
literal|"\1\30\6\0\1\30\5\0\1\30\2\0\2\30\1\0"
operator|+
literal|"\17\30\2\0\1\30\13\0\7\30\2\0\1\30\1\0"
operator|+
literal|"\1\30\1\0\2\30\2\0\1\30\1\0\3\30\2\0"
operator|+
literal|"\1\30\1\0\1\30\1\0\1\30\1\0\1\30\4\0"
operator|+
literal|"\1\64\1\0\2\30\6\0\1\30\7\0\1\30\1\0"
operator|+
literal|"\1\30\33\0\1\30\6\0\1\30\3\0\1\30\3\0"
operator|+
literal|"\1\30\7\0\1\30\31\0\20\30\5\0\3\30\4\0"
operator|+
literal|"\1\30\6\0\1\30\3\0\2\30\2\0\2\30\4\0"
operator|+
literal|"\1\30\4\64\1\0\1\30\2\0\1\30\4\0\1\30"
operator|+
literal|"\1\0\1\30\1\0\1\30\134\0\2\64\25\0\4\64"
operator|+
literal|"\55\0\1\64\15\0\2\64\10\0\2\64\1\0\1\64"
operator|+
literal|"\1\0\1\64\11\0\1\64\11\0\2\64\6\0\1\64"
operator|+
literal|"\2\0\4\64\3\0\1\64\2\0\2\64\1\0\3\64"
operator|+
literal|"\1\0\2\64\1\0\1\64\10\0\1\64\1\0\2\64"
operator|+
literal|"\2\0\2\64\1\0\4\64\23\0\1\64\111\0\1\76"
operator|+
literal|"\2\0\1\76\33\0\4\76\102\0\1\31\104\0\1\31"
operator|+
literal|"\146\0\1\31\41\0\1\31\13\0\1\76\65\0\1\31"
operator|+
literal|"\11\0\1\76\44\0\1\76\1\0\2\76\21\0\1\76"
operator|+
literal|"\4\0\1\76\3\0\4\31\10\0\4\76\3\0\1\76"
operator|+
literal|"\12\0\1\76\164\0\2\31\233\0\1\76\222\0\4\76"
operator|+
literal|"\152\0\2\76\25\0\4\76\55\0\1\76\15\0\2\76"
operator|+
literal|"\10\0\2\76\1\0\1\76\1\0\1\76\11\0\1\76"
operator|+
literal|"\11\0\2\76\6\0\1\76\2\0\4\76\3\0\1\76"
operator|+
literal|"\2\0\2\76\1\0\3\76\1\0\2\76\1\0\1\76"
operator|+
literal|"\10\0\1\76\1\0\2\76\2\0\2\76\1\0\4\76"
operator|+
literal|"\23\0\1\76\27\0\1\30\4\0\1\30\11\0\1\30"
operator|+
literal|"\22\0\1\30\3\0\1\30\13\0\1\77\2\0\1\77"
operator|+
literal|"\10\0\1\30\22\0\4\77\35\0\1\30\26\0\1\30"
operator|+
literal|"\26\0\2\30\23\0\1\31\1\30\40\0\1\31\13\0"
operator|+
literal|"\1\77\65\0\1\31\11\0\1\77\15\0\4\30\2\0"
operator|+
literal|"\2\30\14\0\3\30\1\77\1\0\2\77\11\0\3\30"
operator|+
literal|"\3\0\1\30\1\0\1\77\4\0\1\77\2\30\1\0"
operator|+
literal|"\4\31\1\0\2\30\5\0\4\77\2\0\1\30\1\77"
operator|+
literal|"\12\0\1\77\7\0\1\30\30\0\1\30\4\0\1\30"
operator|+
literal|"\6\0\1\30\3\0\1\30\6\0\1\30\5\0\1\30"
operator|+
literal|"\2\0\2\30\1\0\17\30\2\0\1\30\13\0\7\30"
operator|+
literal|"\2\0\1\30\1\0\1\30\1\0\2\30\2\0\1\30"
operator|+
literal|"\1\0\3\30\2\0\1\30\1\0\1\30\1\0\1\30"
operator|+
literal|"\1\0\1\30\4\0\1\77\1\0\2\30\6\0\1\30"
operator|+
literal|"\7\0\1\30\1\0\1\30\33\0\1\30\6\0\1\30"
operator|+
literal|"\3\0\1\30\3\0\1\30\7\0\1\30\31\0\20\30"
operator|+
literal|"\5\0\3\30\4\0\1\30\6\0\1\30\3\0\2\30"
operator|+
literal|"\2\0\2\30\4\0\1\30\4\77\1\0\1\30\2\0"
operator|+
literal|"\1\30\4\0\1\30\1\0\1\30\1\0\1\30\134\0"
operator|+
literal|"\2\77\25\0\4\77\55\0\1\77\15\0\2\77\10\0"
operator|+
literal|"\2\77\1\0\1\77\1\0\1\77\11\0\1\77\11\0"
operator|+
literal|"\2\77\6\0\1\77\2\0\4\77\3\0\1\77\2\0"
operator|+
literal|"\2\77\1\0\3\77\1\0\2\77\1\0\1\77\10\0"
operator|+
literal|"\1\77\1\0\2\77\2\0\2\77\1\0\4\77\23\0"
operator|+
literal|"\1\77\111\0\1\121\2\0\1\121\33\0\4\121\216\0"
operator|+
literal|"\1\121\77\0\1\121\44\0\1\121\1\0\2\121\21\0"
operator|+
literal|"\1\121\4\0\1\121\17\0\4\121\3\0\1\121\12\0"
operator|+
literal|"\1\121\203\0\1\121\222\0\4\121\152\0\2\121\25\0"
operator|+
literal|"\4\121\55\0\1\121\15\0\2\121\10\0\2\121\1\0"
operator|+
literal|"\1\121\1\0\1\121\11\0\1\121\11\0\2\121\6\0"
operator|+
literal|"\1\121\2\0\4\121\3\0\1\121\2\0\2\121\1\0"
operator|+
literal|"\3\121\1\0\2\121\1\0\1\121\10\0\1\121\1\0"
operator|+
literal|"\2\121\2\0\2\121\1\0\4\121\23\0\1\121\27\0"
operator|+
literal|"\1\30\4\0\1\30\11\0\1\30\22\0\1\30\3\0"
operator|+
literal|"\1\30\13\0\1\147\2\0\1\147\10\0\1\30\22\0"
operator|+
literal|"\4\147\35\0\1\30\26\0\1\30\26\0\2\30\23\0"
operator|+
literal|"\1\62\1\30\40\0\1\62\13\0\1\147\65\0\1\62"
operator|+
literal|"\11\0\1\147\15\0\4\30\2\0\2\30\14\0\3\30"
operator|+
literal|"\1\147\1\0\2\147\11\0\3\30\3\0\1\30\1\0"
operator|+
literal|"\1\147\4\0\1\147\2\30\1\0\4\62\1\0\2\30"
operator|+
literal|"\5\0\4\147\2\0\1\30\1\147\12\0\1\147\7\0"
operator|+
literal|"\1\30\30\0\1\30\4\0\1\30\6\0\1\30\3\0"
operator|+
literal|"\1\30\6\0\1\30\5\0\1\30\2\0\2\30\1\0"
operator|+
literal|"\17\30\2\0\1\30\13\0\7\30\2\0\1\30\1\0"
operator|+
literal|"\1\30\1\0\2\30\2\0\1\30\1\0\3\30\2\0"
operator|+
literal|"\1\30\1\0\1\30\1\0\1\30\1\0\1\30\4\0"
operator|+
literal|"\1\147\1\0\2\30\6\0\1\30\7\0\1\30\1\0"
operator|+
literal|"\1\30\33\0\1\30\6\0\1\30\3\0\1\30\3\0"
operator|+
literal|"\1\30\7\0\1\30\31\0\20\30\5\0\3\30\4\0"
operator|+
literal|"\1\30\6\0\1\30\3\0\2\30\2\0\2\30\4\0"
operator|+
literal|"\1\30\4\147\1\0\1\30\2\0\1\30\4\0\1\30"
operator|+
literal|"\1\0\1\30\1\0\1\30\134\0\2\147\25\0\4\147"
operator|+
literal|"\55\0\1\147\15\0\2\147\10\0\2\147\1\0\1\147"
operator|+
literal|"\1\0\1\147\11\0\1\147\11\0\2\147\6\0\1\147"
operator|+
literal|"\2\0\4\147\3\0\1\147\2\0\2\147\1\0\3\147"
operator|+
literal|"\1\0\2\147\1\0\1\147\10\0\1\147\1\0\2\147"
operator|+
literal|"\2\0\2\147\1\0\4\147\23\0\1\147\111\0\1\150"
operator|+
literal|"\2\0\1\150\33\0\4\150\216\0\1\150\77\0\1\150"
operator|+
literal|"\44\0\1\150\1\0\2\150\21\0\1\150\4\0\1\150"
operator|+
literal|"\17\0\4\150\3\0\1\150\12\0\1\150\203\0\1\150"
operator|+
literal|"\222\0\4\150\152\0\2\150\25\0\4\150\55\0\1\150"
operator|+
literal|"\15\0\2\150\10\0\2\150\1\0\1\150\1\0\1\150"
operator|+
literal|"\11\0\1\150\11\0\2\150\6\0\1\150\2\0\4\150"
operator|+
literal|"\3\0\1\150\2\0\2\150\1\0\3\150\1\0\2\150"
operator|+
literal|"\1\0\1\150\10\0\1\150\1\0\2\150\2\0\2\150"
operator|+
literal|"\1\0\4\150\23\0\1\150\26\0\1\277\21\0\1\300"
operator|+
literal|"\2\0\1\301\10\0\1\302\22\0\1\303\21\0\1\304"
operator|+
literal|"\2\0\1\305\55\0\1\167\4\0\1\265\7\0\1\265"
operator|+
literal|"\77\0\1\177\2\0\1\177\33\0\4\177\102\0\1\62"
operator|+
literal|"\104\0\1\62\146\0\1\62\41\0\1\62\13\0\1\177"
operator|+
literal|"\65\0\1\62\11\0\1\177\44\0\1\177\1\0\2\177"
operator|+
literal|"\21\0\1\177\4\0\1\177\3\0\4\62\10\0\4\177"
operator|+
literal|"\3\0\1\177\12\0\1\177\164\0\2\62\233\0\1\177"
operator|+
literal|"\222\0\4\177\152\0\2\177\25\0\4\177\55\0\1\177"
operator|+
literal|"\15\0\2\177\10\0\2\177\1\0\1\177\1\0\1\177"
operator|+
literal|"\11\0\1\177\11\0\2\177\6\0\1\177\2\0\4\177"
operator|+
literal|"\3\0\1\177\2\0\2\177\1\0\3\177\1\0\2\177"
operator|+
literal|"\1\0\1\177\10\0\1\177\1\0\2\177\2\0\2\177"
operator|+
literal|"\1\0\4\177\23\0\1\177\111\0\1\265\2\0\1\265"
operator|+
literal|"\33\0\4\265\216\0\1\265\77\0\1\265\44\0\1\265"
operator|+
literal|"\1\0\2\265\21\0\1\265\4\0\1\265\17\0\4\265"
operator|+
literal|"\3\0\1\265\12\0\1\265\203\0\1\265\222\0\4\265"
operator|+
literal|"\152\0\2\265\25\0\4\265\55\0\1\265\15\0\2\265"
operator|+
literal|"\10\0\2\265\1\0\1\265\1\0\1\265\11\0\1\265"
operator|+
literal|"\11\0\2\265\6\0\1\265\2\0\4\265\3\0\1\265"
operator|+
literal|"\2\0\2\265\1\0\3\265\1\0\2\265\1\0\1\265"
operator|+
literal|"\10\0\1\265\1\0\2\265\2\0\2\265\1\0\4\265"
operator|+
literal|"\23\0\1\265\20\0"
decl_stmt|;
DECL|method|zzUnpackTrans
specifier|private
specifier|static
name|int
index|[]
name|zzUnpackTrans
parameter_list|()
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
literal|26554
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|offset
operator|=
name|zzUnpackTrans
argument_list|(
name|ZZ_TRANS_PACKED_0
argument_list|,
name|offset
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|zzUnpackTrans
specifier|private
specifier|static
name|int
name|zzUnpackTrans
parameter_list|(
name|String
name|packed
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
index|[]
name|result
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/* index in packed string  */
name|int
name|j
init|=
name|offset
decl_stmt|;
comment|/* index in unpacked array */
name|int
name|l
init|=
name|packed
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|l
condition|)
block|{
name|int
name|count
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|int
name|value
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|value
operator|--
expr_stmt|;
do|do
name|result
index|[
name|j
operator|++
index|]
operator|=
name|value
expr_stmt|;
do|while
condition|(
operator|--
name|count
operator|>
literal|0
condition|)
do|;
block|}
return|return
name|j
return|;
block|}
comment|/* error codes */
DECL|field|ZZ_UNKNOWN_ERROR
specifier|private
specifier|static
specifier|final
name|int
name|ZZ_UNKNOWN_ERROR
init|=
literal|0
decl_stmt|;
DECL|field|ZZ_NO_MATCH
specifier|private
specifier|static
specifier|final
name|int
name|ZZ_NO_MATCH
init|=
literal|1
decl_stmt|;
DECL|field|ZZ_PUSHBACK_2BIG
specifier|private
specifier|static
specifier|final
name|int
name|ZZ_PUSHBACK_2BIG
init|=
literal|2
decl_stmt|;
comment|/* error messages for the codes above */
DECL|field|ZZ_ERROR_MSG
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_ERROR_MSG
index|[]
init|=
block|{
literal|"Unkown internal scanner error"
block|,
literal|"Error: could not match input"
block|,
literal|"Error: pushback value was too large"
block|}
decl_stmt|;
comment|/**    * ZZ_ATTRIBUTE[aState] contains the attributes of state<code>aState</code>    */
DECL|field|ZZ_ATTRIBUTE
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|ZZ_ATTRIBUTE
init|=
name|zzUnpackAttribute
argument_list|()
decl_stmt|;
DECL|field|ZZ_ATTRIBUTE_PACKED_0
specifier|private
specifier|static
specifier|final
name|String
name|ZZ_ATTRIBUTE_PACKED_0
init|=
literal|"\1\0\1\11\36\1\21\0\1\1\1\0\1\1\12\0"
operator|+
literal|"\1\1\21\0\1\1\25\0\1\1\115\0\1\1\20\0"
decl_stmt|;
DECL|method|zzUnpackAttribute
specifier|private
specifier|static
name|int
index|[]
name|zzUnpackAttribute
parameter_list|()
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
literal|197
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|offset
operator|=
name|zzUnpackAttribute
argument_list|(
name|ZZ_ATTRIBUTE_PACKED_0
argument_list|,
name|offset
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|zzUnpackAttribute
specifier|private
specifier|static
name|int
name|zzUnpackAttribute
parameter_list|(
name|String
name|packed
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
index|[]
name|result
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/* index in packed string  */
name|int
name|j
init|=
name|offset
decl_stmt|;
comment|/* index in unpacked array */
name|int
name|l
init|=
name|packed
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|l
condition|)
block|{
name|int
name|count
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|int
name|value
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
do|do
name|result
index|[
name|j
operator|++
index|]
operator|=
name|value
expr_stmt|;
do|while
condition|(
operator|--
name|count
operator|>
literal|0
condition|)
do|;
block|}
return|return
name|j
return|;
block|}
comment|/** the input device */
DECL|field|zzReader
specifier|private
name|java
operator|.
name|io
operator|.
name|Reader
name|zzReader
decl_stmt|;
comment|/** the current state of the DFA */
DECL|field|zzState
specifier|private
name|int
name|zzState
decl_stmt|;
comment|/** the current lexical state */
DECL|field|zzLexicalState
specifier|private
name|int
name|zzLexicalState
init|=
name|YYINITIAL
decl_stmt|;
comment|/** this buffer contains the current text to be matched and is       the source of the yytext() string */
DECL|field|zzBuffer
specifier|private
name|char
name|zzBuffer
index|[]
init|=
operator|new
name|char
index|[
name|ZZ_BUFFERSIZE
index|]
decl_stmt|;
comment|/** the textposition at the last accepting state */
DECL|field|zzMarkedPos
specifier|private
name|int
name|zzMarkedPos
decl_stmt|;
comment|/** the current text position in the buffer */
DECL|field|zzCurrentPos
specifier|private
name|int
name|zzCurrentPos
decl_stmt|;
comment|/** startRead marks the beginning of the yytext() string in the buffer */
DECL|field|zzStartRead
specifier|private
name|int
name|zzStartRead
decl_stmt|;
comment|/** endRead marks the last character in the buffer, that has been read       from input */
DECL|field|zzEndRead
specifier|private
name|int
name|zzEndRead
decl_stmt|;
comment|/** number of newlines encountered up to the start of the matched text */
DECL|field|yyline
specifier|private
name|int
name|yyline
decl_stmt|;
comment|/** the number of characters up to the start of the matched text */
DECL|field|yychar
specifier|private
name|int
name|yychar
decl_stmt|;
comment|/**    * the number of characters from the last newline up to the start of the     * matched text    */
DECL|field|yycolumn
specifier|private
name|int
name|yycolumn
decl_stmt|;
comment|/**     * zzAtBOL == true<=> the scanner is currently at the beginning of a line    */
DECL|field|zzAtBOL
specifier|private
name|boolean
name|zzAtBOL
init|=
literal|true
decl_stmt|;
comment|/** zzAtEOF == true<=> the scanner is at the EOF */
DECL|field|zzAtEOF
specifier|private
name|boolean
name|zzAtEOF
decl_stmt|;
comment|/** denotes if the user-EOF-code has already been executed */
DECL|field|zzEOFDone
specifier|private
name|boolean
name|zzEOFDone
decl_stmt|;
comment|/* user code: */
comment|/** Alphanumeric sequences */
DECL|field|WORD_TYPE
specifier|public
specifier|static
specifier|final
name|int
name|WORD_TYPE
init|=
name|StandardTokenizer
operator|.
name|ALPHANUM
decl_stmt|;
comment|/** Numbers */
DECL|field|NUMERIC_TYPE
specifier|public
specifier|static
specifier|final
name|int
name|NUMERIC_TYPE
init|=
name|StandardTokenizer
operator|.
name|NUM
decl_stmt|;
comment|/**    * Chars in class \p{Line_Break = Complex_Context} are from South East Asian    * scripts (Thai, Lao, Myanmar, Khmer, etc.).  Sequences of these are kept     * together as as a single token rather than broken up, because the logic    * required to break them at word boundaries is too complex for UAX#29.    *<p>    * See Unicode Line Breaking Algorithm: http://www.unicode.org/reports/tr14/#SA    */
DECL|field|SOUTH_EAST_ASIAN_TYPE
specifier|public
specifier|static
specifier|final
name|int
name|SOUTH_EAST_ASIAN_TYPE
init|=
name|StandardTokenizer
operator|.
name|SOUTHEAST_ASIAN
decl_stmt|;
DECL|field|IDEOGRAPHIC_TYPE
specifier|public
specifier|static
specifier|final
name|int
name|IDEOGRAPHIC_TYPE
init|=
name|StandardTokenizer
operator|.
name|IDEOGRAPHIC
decl_stmt|;
DECL|field|HIRAGANA_TYPE
specifier|public
specifier|static
specifier|final
name|int
name|HIRAGANA_TYPE
init|=
name|StandardTokenizer
operator|.
name|HIRAGANA
decl_stmt|;
DECL|field|KATAKANA_TYPE
specifier|public
specifier|static
specifier|final
name|int
name|KATAKANA_TYPE
init|=
name|StandardTokenizer
operator|.
name|KATAKANA
decl_stmt|;
DECL|field|HANGUL_TYPE
specifier|public
specifier|static
specifier|final
name|int
name|HANGUL_TYPE
init|=
name|StandardTokenizer
operator|.
name|HANGUL
decl_stmt|;
DECL|method|yychar
specifier|public
specifier|final
name|int
name|yychar
parameter_list|()
block|{
return|return
name|yychar
return|;
block|}
comment|/**    * Fills CharTermAttribute with the current token text.    */
DECL|method|getText
specifier|public
specifier|final
name|void
name|getText
parameter_list|(
name|CharTermAttribute
name|t
parameter_list|)
block|{
name|t
operator|.
name|copyBuffer
argument_list|(
name|zzBuffer
argument_list|,
name|zzStartRead
argument_list|,
name|zzMarkedPos
operator|-
name|zzStartRead
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new scanner    *    * @param   in  the java.io.Reader to read input from.    */
DECL|method|StandardTokenizerImpl
specifier|public
name|StandardTokenizerImpl
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|in
parameter_list|)
block|{
name|this
operator|.
name|zzReader
operator|=
name|in
expr_stmt|;
block|}
comment|/**     * Unpacks the compressed character translation table.    *    * @param packed   the packed character translation table    * @return         the unpacked character translation table    */
DECL|method|zzUnpackCMap
specifier|private
specifier|static
name|char
index|[]
name|zzUnpackCMap
parameter_list|(
name|String
name|packed
parameter_list|)
block|{
name|char
index|[]
name|map
init|=
operator|new
name|char
index|[
literal|0x10000
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|/* index in packed string  */
name|int
name|j
init|=
literal|0
decl_stmt|;
comment|/* index in unpacked array */
while|while
condition|(
name|i
operator|<
literal|2860
condition|)
block|{
name|int
name|count
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|char
name|value
init|=
name|packed
operator|.
name|charAt
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
do|do
name|map
index|[
name|j
operator|++
index|]
operator|=
name|value
expr_stmt|;
do|while
condition|(
operator|--
name|count
operator|>
literal|0
condition|)
do|;
block|}
return|return
name|map
return|;
block|}
comment|/**    * Refills the input buffer.    *    * @return<code>false</code>, iff there was new input.    *     * @exception   java.io.IOException  if any I/O-Error occurs    */
DECL|method|zzRefill
specifier|private
name|boolean
name|zzRefill
parameter_list|()
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
comment|/* first: make room (if you can) */
if|if
condition|(
name|zzStartRead
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|zzBuffer
argument_list|,
name|zzStartRead
argument_list|,
name|zzBuffer
argument_list|,
literal|0
argument_list|,
name|zzEndRead
operator|-
name|zzStartRead
argument_list|)
expr_stmt|;
comment|/* translate stored positions */
name|zzEndRead
operator|-=
name|zzStartRead
expr_stmt|;
name|zzCurrentPos
operator|-=
name|zzStartRead
expr_stmt|;
name|zzMarkedPos
operator|-=
name|zzStartRead
expr_stmt|;
name|zzStartRead
operator|=
literal|0
expr_stmt|;
block|}
comment|/* is the buffer big enough? */
if|if
condition|(
name|zzCurrentPos
operator|>=
name|zzBuffer
operator|.
name|length
condition|)
block|{
comment|/* if not: blow it up */
name|char
name|newBuffer
index|[]
init|=
operator|new
name|char
index|[
name|zzCurrentPos
operator|*
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|zzBuffer
argument_list|,
literal|0
argument_list|,
name|newBuffer
argument_list|,
literal|0
argument_list|,
name|zzBuffer
operator|.
name|length
argument_list|)
expr_stmt|;
name|zzBuffer
operator|=
name|newBuffer
expr_stmt|;
block|}
comment|/* finally: fill the buffer with new input */
name|int
name|numRead
init|=
name|zzReader
operator|.
name|read
argument_list|(
name|zzBuffer
argument_list|,
name|zzEndRead
argument_list|,
name|zzBuffer
operator|.
name|length
operator|-
name|zzEndRead
argument_list|)
decl_stmt|;
if|if
condition|(
name|numRead
operator|>
literal|0
condition|)
block|{
name|zzEndRead
operator|+=
name|numRead
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// unlikely but not impossible: read 0 characters, but not at end of stream
if|if
condition|(
name|numRead
operator|==
literal|0
condition|)
block|{
name|int
name|c
init|=
name|zzReader
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|zzBuffer
index|[
name|zzEndRead
operator|++
index|]
operator|=
operator|(
name|char
operator|)
name|c
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// numRead< 0
return|return
literal|true
return|;
block|}
comment|/**    * Closes the input stream.    */
DECL|method|yyclose
specifier|public
specifier|final
name|void
name|yyclose
parameter_list|()
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|zzAtEOF
operator|=
literal|true
expr_stmt|;
comment|/* indicate end of file */
name|zzEndRead
operator|=
name|zzStartRead
expr_stmt|;
comment|/* invalidate buffer    */
if|if
condition|(
name|zzReader
operator|!=
literal|null
condition|)
name|zzReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Resets the scanner to read from a new input stream.    * Does not close the old reader.    *    * All internal variables are reset, the old input stream     *<b>cannot</b> be reused (internal buffer is discarded and lost).    * Lexical state is set to<tt>ZZ_INITIAL</tt>.    *    * Internal scan buffer is resized down to its initial length, if it has grown.    *    * @param reader   the new input stream     */
DECL|method|yyreset
specifier|public
specifier|final
name|void
name|yyreset
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|reader
parameter_list|)
block|{
name|zzReader
operator|=
name|reader
expr_stmt|;
name|zzAtBOL
operator|=
literal|true
expr_stmt|;
name|zzAtEOF
operator|=
literal|false
expr_stmt|;
name|zzEOFDone
operator|=
literal|false
expr_stmt|;
name|zzEndRead
operator|=
name|zzStartRead
operator|=
literal|0
expr_stmt|;
name|zzCurrentPos
operator|=
name|zzMarkedPos
operator|=
literal|0
expr_stmt|;
name|yyline
operator|=
name|yychar
operator|=
name|yycolumn
operator|=
literal|0
expr_stmt|;
name|zzLexicalState
operator|=
name|YYINITIAL
expr_stmt|;
if|if
condition|(
name|zzBuffer
operator|.
name|length
operator|>
name|ZZ_BUFFERSIZE
condition|)
name|zzBuffer
operator|=
operator|new
name|char
index|[
name|ZZ_BUFFERSIZE
index|]
expr_stmt|;
block|}
comment|/**    * Returns the current lexical state.    */
DECL|method|yystate
specifier|public
specifier|final
name|int
name|yystate
parameter_list|()
block|{
return|return
name|zzLexicalState
return|;
block|}
comment|/**    * Enters a new lexical state    *    * @param newState the new lexical state    */
DECL|method|yybegin
specifier|public
specifier|final
name|void
name|yybegin
parameter_list|(
name|int
name|newState
parameter_list|)
block|{
name|zzLexicalState
operator|=
name|newState
expr_stmt|;
block|}
comment|/**    * Returns the text matched by the current regular expression.    */
DECL|method|yytext
specifier|public
specifier|final
name|String
name|yytext
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|zzBuffer
argument_list|,
name|zzStartRead
argument_list|,
name|zzMarkedPos
operator|-
name|zzStartRead
argument_list|)
return|;
block|}
comment|/**    * Returns the character at position<tt>pos</tt> from the     * matched text.     *     * It is equivalent to yytext().charAt(pos), but faster    *    * @param pos the position of the character to fetch.     *            A value from 0 to yylength()-1.    *    * @return the character at position pos    */
DECL|method|yycharat
specifier|public
specifier|final
name|char
name|yycharat
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
name|zzBuffer
index|[
name|zzStartRead
operator|+
name|pos
index|]
return|;
block|}
comment|/**    * Returns the length of the matched text region.    */
DECL|method|yylength
specifier|public
specifier|final
name|int
name|yylength
parameter_list|()
block|{
return|return
name|zzMarkedPos
operator|-
name|zzStartRead
return|;
block|}
comment|/**    * Reports an error that occured while scanning.    *    * In a wellformed scanner (no or only correct usage of     * yypushback(int) and a match-all fallback rule) this method     * will only be called with things that "Can't Possibly Happen".    * If this method is called, something is seriously wrong    * (e.g. a JFlex bug producing a faulty scanner etc.).    *    * Usual syntax/scanner level error handling should be done    * in error fallback rules.    *    * @param   errorCode  the code of the errormessage to display    */
DECL|method|zzScanError
specifier|private
name|void
name|zzScanError
parameter_list|(
name|int
name|errorCode
parameter_list|)
block|{
name|String
name|message
decl_stmt|;
try|try
block|{
name|message
operator|=
name|ZZ_ERROR_MSG
index|[
name|errorCode
index|]
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
name|message
operator|=
name|ZZ_ERROR_MSG
index|[
name|ZZ_UNKNOWN_ERROR
index|]
expr_stmt|;
block|}
throw|throw
operator|new
name|Error
argument_list|(
name|message
argument_list|)
throw|;
block|}
comment|/**    * Pushes the specified amount of characters back into the input stream.    *    * They will be read again by then next call of the scanning method    *    * @param number  the number of characters to be read again.    *                This number must not be greater than yylength()!    */
DECL|method|yypushback
specifier|public
name|void
name|yypushback
parameter_list|(
name|int
name|number
parameter_list|)
block|{
if|if
condition|(
name|number
operator|>
name|yylength
argument_list|()
condition|)
name|zzScanError
argument_list|(
name|ZZ_PUSHBACK_2BIG
argument_list|)
expr_stmt|;
name|zzMarkedPos
operator|-=
name|number
expr_stmt|;
block|}
comment|/**    * Resumes scanning until the next regular expression is matched,    * the end of input is encountered or an I/O-Error occurs.    *    * @return      the next token    * @exception   java.io.IOException  if any I/O-Error occurs    */
DECL|method|getNextToken
specifier|public
name|int
name|getNextToken
parameter_list|()
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|int
name|zzInput
decl_stmt|;
name|int
name|zzAction
decl_stmt|;
comment|// cached fields:
name|int
name|zzCurrentPosL
decl_stmt|;
name|int
name|zzMarkedPosL
decl_stmt|;
name|int
name|zzEndReadL
init|=
name|zzEndRead
decl_stmt|;
name|char
index|[]
name|zzBufferL
init|=
name|zzBuffer
decl_stmt|;
name|char
index|[]
name|zzCMapL
init|=
name|ZZ_CMAP
decl_stmt|;
name|int
index|[]
name|zzTransL
init|=
name|ZZ_TRANS
decl_stmt|;
name|int
index|[]
name|zzRowMapL
init|=
name|ZZ_ROWMAP
decl_stmt|;
name|int
index|[]
name|zzAttrL
init|=
name|ZZ_ATTRIBUTE
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|zzMarkedPosL
operator|=
name|zzMarkedPos
expr_stmt|;
name|yychar
operator|+=
name|zzMarkedPosL
operator|-
name|zzStartRead
expr_stmt|;
name|zzAction
operator|=
operator|-
literal|1
expr_stmt|;
name|zzCurrentPosL
operator|=
name|zzCurrentPos
operator|=
name|zzStartRead
operator|=
name|zzMarkedPosL
expr_stmt|;
name|zzState
operator|=
name|ZZ_LEXSTATE
index|[
name|zzLexicalState
index|]
expr_stmt|;
comment|// set up zzAction for empty match case:
name|int
name|zzAttributes
init|=
name|zzAttrL
index|[
name|zzState
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|zzAttributes
operator|&
literal|1
operator|)
operator|==
literal|1
condition|)
block|{
name|zzAction
operator|=
name|zzState
expr_stmt|;
block|}
name|zzForAction
label|:
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|zzCurrentPosL
operator|<
name|zzEndReadL
condition|)
name|zzInput
operator|=
name|zzBufferL
index|[
name|zzCurrentPosL
operator|++
index|]
expr_stmt|;
elseif|else
if|if
condition|(
name|zzAtEOF
condition|)
block|{
name|zzInput
operator|=
name|YYEOF
expr_stmt|;
break|break
name|zzForAction
break|;
block|}
else|else
block|{
comment|// store back cached positions
name|zzCurrentPos
operator|=
name|zzCurrentPosL
expr_stmt|;
name|zzMarkedPos
operator|=
name|zzMarkedPosL
expr_stmt|;
name|boolean
name|eof
init|=
name|zzRefill
argument_list|()
decl_stmt|;
comment|// get translated positions and possibly new buffer
name|zzCurrentPosL
operator|=
name|zzCurrentPos
expr_stmt|;
name|zzMarkedPosL
operator|=
name|zzMarkedPos
expr_stmt|;
name|zzBufferL
operator|=
name|zzBuffer
expr_stmt|;
name|zzEndReadL
operator|=
name|zzEndRead
expr_stmt|;
if|if
condition|(
name|eof
condition|)
block|{
name|zzInput
operator|=
name|YYEOF
expr_stmt|;
break|break
name|zzForAction
break|;
block|}
else|else
block|{
name|zzInput
operator|=
name|zzBufferL
index|[
name|zzCurrentPosL
operator|++
index|]
expr_stmt|;
block|}
block|}
name|int
name|zzNext
init|=
name|zzTransL
index|[
name|zzRowMapL
index|[
name|zzState
index|]
operator|+
name|zzCMapL
index|[
name|zzInput
index|]
index|]
decl_stmt|;
if|if
condition|(
name|zzNext
operator|==
operator|-
literal|1
condition|)
break|break
name|zzForAction
break|;
name|zzState
operator|=
name|zzNext
expr_stmt|;
name|zzAttributes
operator|=
name|zzAttrL
index|[
name|zzState
index|]
expr_stmt|;
if|if
condition|(
operator|(
name|zzAttributes
operator|&
literal|1
operator|)
operator|==
literal|1
condition|)
block|{
name|zzAction
operator|=
name|zzState
expr_stmt|;
name|zzMarkedPosL
operator|=
name|zzCurrentPosL
expr_stmt|;
if|if
condition|(
operator|(
name|zzAttributes
operator|&
literal|8
operator|)
operator|==
literal|8
condition|)
break|break
name|zzForAction
break|;
block|}
block|}
block|}
comment|// store back cached position
name|zzMarkedPos
operator|=
name|zzMarkedPosL
expr_stmt|;
switch|switch
condition|(
name|zzAction
operator|<
literal|0
condition|?
name|zzAction
else|:
name|ZZ_ACTION
index|[
name|zzAction
index|]
condition|)
block|{
case|case
literal|1
case|:
block|{
comment|/* Break so we don't hit fall-through warning: */
break|break;
comment|/* Not numeric, word, ideographic, hiragana, or SE Asian -- ignore it. */
block|}
case|case
literal|9
case|:
break|break;
case|case
literal|2
case|:
block|{
return|return
name|WORD_TYPE
return|;
block|}
case|case
literal|10
case|:
break|break;
case|case
literal|3
case|:
block|{
return|return
name|NUMERIC_TYPE
return|;
block|}
case|case
literal|11
case|:
break|break;
case|case
literal|4
case|:
block|{
return|return
name|KATAKANA_TYPE
return|;
block|}
case|case
literal|12
case|:
break|break;
case|case
literal|5
case|:
block|{
return|return
name|SOUTH_EAST_ASIAN_TYPE
return|;
block|}
case|case
literal|13
case|:
break|break;
case|case
literal|6
case|:
block|{
return|return
name|IDEOGRAPHIC_TYPE
return|;
block|}
case|case
literal|14
case|:
break|break;
case|case
literal|7
case|:
block|{
return|return
name|HIRAGANA_TYPE
return|;
block|}
case|case
literal|15
case|:
break|break;
case|case
literal|8
case|:
block|{
return|return
name|HANGUL_TYPE
return|;
block|}
case|case
literal|16
case|:
break|break;
default|default:
if|if
condition|(
name|zzInput
operator|==
name|YYEOF
operator|&&
name|zzStartRead
operator|==
name|zzCurrentPos
condition|)
block|{
name|zzAtEOF
operator|=
literal|true
expr_stmt|;
block|{
return|return
name|StandardTokenizerInterface
operator|.
name|YYEOF
return|;
block|}
block|}
else|else
block|{
name|zzScanError
argument_list|(
name|ZZ_NO_MATCH
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class
end_unit
